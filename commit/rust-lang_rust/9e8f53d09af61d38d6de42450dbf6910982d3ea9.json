{"sha": "9e8f53d09af61d38d6de42450dbf6910982d3ea9", "node_id": "C_kwDOAAsO6NoAKDllOGY1M2QwOWFmNjFkMzhkNmRlNDI0NTBkYmY2OTEwOTgyZDNlYTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T10:44:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T10:44:25Z"}, "message": "Auto merge of #101986 - WaffleLapkin:move_lint_note_to_the_bottom, r=estebank\n\nMove lint level source explanation to the bottom\n\nSo, uhhhhh\n\nr? `@estebank`\n\n## User-facing change\n\n\"note: `#[warn(...)]` on by default\" and such are moved to the bottom of the diagnostic:\n```diff\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n```\n\nWhy warning is enabled is the least important thing, so it shouldn't be the first note the user reads, IMO.\n\n## Developer-facing change\n\n`struct_span_lint` and similar methods have a different signature.\n\nBefore: `..., impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>)`\nAfter: `..., impl Into<DiagnosticMessage>, impl for<'a, 'b> FnOnce(&'b mut DiagnosticBuilder<'a, ()>) -> &'b mut DiagnosticBuilder<'a, ()>`\n\nThe reason for this is that `struct_span_lint` needs to edit the diagnostic _after_ `decorate` closure is called. This also makes lint code a little bit nicer in my opinion.\n\nAnother option is to use `impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>) -> DiagnosticBuilder<'a, ()>` altough I don't _really_ see reasons to do `let lint = lint.build(message)` everywhere.\n\n## Subtle problem\n\nBy moving the message outside of the closure (that may not be called if the lint is disabled) `format!(...)` is executed earlier, possibly formatting `Ty` which may call a query that trims paths that crashes the compiler if there were no warnings...\n\nI don't think it's that big of a deal, considering that we move from `format!(...)` to `fluent` (which is lazy by-default) anyway, however this required adding a workaround which is unfortunate.\n\n## P.S.\n\nI'm sorry, I do not how to make this PR smaller/easier to review. Changes to the lint API affect SO MUCH \ud83d\ude22", "tree": {"sha": "821b9b6f0233cae82e7eeb9c0eda7a2d6ac08175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/821b9b6f0233cae82e7eeb9c0eda7a2d6ac08175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e8f53d09af61d38d6de42450dbf6910982d3ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8f53d09af61d38d6de42450dbf6910982d3ea9", "html_url": "https://github.com/rust-lang/rust/commit/9e8f53d09af61d38d6de42450dbf6910982d3ea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e8f53d09af61d38d6de42450dbf6910982d3ea9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b59fe4981d5d21874413668ff1d8d0b9d8e4ef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b59fe4981d5d21874413668ff1d8d0b9d8e4ef6", "html_url": "https://github.com/rust-lang/rust/commit/8b59fe4981d5d21874413668ff1d8d0b9d8e4ef6"}, {"sha": "8dfbad9e498f6067ce82d9068ceb376005ea644c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfbad9e498f6067ce82d9068ceb376005ea644c", "html_url": "https://github.com/rust-lang/rust/commit/8dfbad9e498f6067ce82d9068ceb376005ea644c"}], "stats": {"total": 527, "additions": 260, "deletions": 267}, "files": [{"sha": "102b9fbae83c5c3fcf0dc6fec2fb5e6d03de1f49", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -117,11 +117,13 @@ impl EarlyLintPass for ModStyle {\n                     cx.struct_span_lint(\n                         SELF_NAMED_MODULE_FILES,\n                         Span::new(file.start_pos, file.start_pos, SyntaxContext::root(), None),\n-                        |build| {\n-                            let mut lint =\n-                                build.build(&format!(\"`mod.rs` files are required, found `{}`\", path.display()));\n-                            lint.help(&format!(\"move `{}` to `{}`\", path.display(), correct.display(),));\n-                            lint.emit();\n+                        format!(\"`mod.rs` files are required, found `{}`\", path.display()),\n+                        |lint| {\n+                            lint.help(format!(\n+                                \"move `{}` to `{}`\",\n+                                path.display(),\n+                                correct.display(),\n+                            ))\n                         },\n                     );\n                 }\n@@ -156,11 +158,8 @@ fn check_self_named_mod_exists(cx: &EarlyContext<'_>, path: &Path, file: &Source\n         cx.struct_span_lint(\n             MOD_MODULE_FILES,\n             Span::new(file.start_pos, file.start_pos, SyntaxContext::root(), None),\n-            |build| {\n-                let mut lint = build.build(&format!(\"`mod.rs` files are not allowed, found `{}`\", path.display()));\n-                lint.help(&format!(\"move `{}` to `{}`\", path.display(), mod_file.display(),));\n-                lint.emit();\n-            },\n+            format!(\"`mod.rs` files are not allowed, found `{}`\", path.display()),\n+            |lint| lint.help(format!(\"move `{}` to `{}`\", path.display(), mod_file.display())),\n         );\n     }\n }"}, {"sha": "78960d1ab1da558bc3220852f6d97305c9182f2f", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -47,10 +47,9 @@ fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n-    cx.struct_span_lint(lint, sp, |diag| {\n-        let mut diag = diag.build(msg);\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+    cx.struct_span_lint(lint, sp, msg, |diag| {\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n \n@@ -82,15 +81,14 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n     help_span: Option<Span>,\n     help: &str,\n ) {\n-    cx.struct_span_lint(lint, span, |diag| {\n-        let mut diag = diag.build(msg);\n+    cx.struct_span_lint(lint, span, msg, |diag| {\n         if let Some(help_span) = help_span {\n             diag.span_help(help_span, help);\n         } else {\n             diag.help(help);\n         }\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n \n@@ -125,15 +123,14 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n     note_span: Option<Span>,\n     note: &str,\n ) {\n-    cx.struct_span_lint(lint, span, |diag| {\n-        let mut diag = diag.build(msg);\n+    cx.struct_span_lint(lint, span, msg, |diag| {\n         if let Some(note_span) = note_span {\n             diag.span_note(note_span, note);\n         } else {\n             diag.note(note);\n         }\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n \n@@ -147,19 +144,17 @@ where\n     S: Into<MultiSpan>,\n     F: FnOnce(&mut Diagnostic),\n {\n-    cx.struct_span_lint(lint, sp, |diag| {\n-        let mut diag = diag.build(msg);\n-        f(&mut diag);\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+    cx.struct_span_lint(lint, sp, msg, |diag| {\n+        f(diag);\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n \n pub fn span_lint_hir(cx: &LateContext<'_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n-        let mut diag = diag.build(msg);\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n \n@@ -171,11 +166,10 @@ pub fn span_lint_hir_and_then(\n     msg: &str,\n     f: impl FnOnce(&mut Diagnostic),\n ) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n-        let mut diag = diag.build(msg);\n-        f(&mut diag);\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+        f(diag);\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n "}, {"sha": "4c75998437fd5c256ed6789de53cbf68706825c3", "filename": "tests/ui-toml/await_holding_invalid_type/await_holding_invalid_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fawait_holding_invalid_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fawait_holding_invalid_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fawait_holding_invalid_type.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `std::string::String` may not be held across an `await` point per `clippy\n LL |     let _x = String::from(\"hello\");\n    |         ^^\n    |\n-   = note: `-D clippy::await-holding-invalid-type` implied by `-D warnings`\n    = note: strings are bad\n+   = note: `-D clippy::await-holding-invalid-type` implied by `-D warnings`\n \n error: `std::net::Ipv4Addr` may not be held across an `await` point per `clippy.toml`\n   --> $DIR/await_holding_invalid_type.rs:10:9"}, {"sha": "b2b57bdde89c6a183895f4b879bba515263b2479", "filename": "tests/ui-toml/conf_deprecated_key/conf_deprecated_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,8 +8,8 @@ error: the function has a cognitive complexity of (3/2)\n LL | fn cognitive_complexity() {\n    |    ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n+   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "28a08599c67c6878d5c8868b25c46d429c7cecfd", "filename": "tests/ui-toml/expect_used/expect_used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: used `expect()` on `an Option` value\n LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::expect-used` implied by `-D warnings`\n    = help: if this value is `None`, it will panic\n+   = note: `-D clippy::expect-used` implied by `-D warnings`\n \n error: used `expect()` on `a Result` value\n   --> $DIR/expect_used.rs:11:13"}, {"sha": "87bdb61c6a5e79c5949e4479a3d7e0f16da00032", "filename": "tests/ui-toml/fn_params_excessive_bools/test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Ffn_params_excessive_bools%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Ffn_params_excessive_bools%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffn_params_excessive_bools%2Ftest.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: more than 1 bools in function parameters\n LL | fn g(_: bool, _: bool) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::fn-params-excessive-bools` implied by `-D warnings`\n    = help: consider refactoring bools into two-variant enums\n+   = note: `-D clippy::fn-params-excessive-bools` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "7b5fb9e8765944d791c777ab8bd7c1d36ed43371", "filename": "tests/ui-toml/large_include_file/large_include_file.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Flarge_include_file%2Flarge_include_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Flarge_include_file%2Flarge_include_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_include_file%2Flarge_include_file.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: attempted to include a large file\n LL | const TOO_BIG_INCLUDE_BYTES: &[u8; 654] = include_bytes!(\"too_big.txt\");\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::large-include-file` implied by `-D warnings`\n    = note: the configuration allows a maximum size of 600 bytes\n+   = note: `-D clippy::large-include-file` implied by `-D warnings`\n    = note: this error originates in the macro `include_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: attempted to include a large file"}, {"sha": "15fa4f42f9ba509a28a470882a1f43390a42cfc2", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: use of irregular braces for `vec!` macro\n LL |     let _ = vec! {1, 2, 3};\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::nonstandard-macro-braces` implied by `-D warnings`\n help: consider writing `vec![1, 2, 3]`\n   --> $DIR/conf_nonstandard_macro_braces.rs:43:13\n    |\n LL |     let _ = vec! {1, 2, 3};\n    |             ^^^^^^^^^^^^^^\n+   = note: `-D clippy::nonstandard-macro-braces` implied by `-D warnings`\n \n error: use of irregular braces for `format!` macro\n   --> $DIR/conf_nonstandard_macro_braces.rs:44:13"}, {"sha": "c72f8c6488dbd186f64fb9a4481bd9e575358212", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,13 +4,13 @@ error: some fields in `NoGeneric` are not safe to be sent to another thread\n LL | unsafe impl Send for NoGeneric {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n note: it is not safe to send field `rc_is_not_send` to another thread\n   --> $DIR/test.rs:8:5\n    |\n LL |     rc_is_not_send: Rc<String>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n+   = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n \n error: some fields in `MultiField<T>` are not safe to be sent to another thread\n   --> $DIR/test.rs:19:1"}, {"sha": "4e7c70d18385c31e78cddbc74b83bd7a1ba0b9e0", "filename": "tests/ui-toml/struct_excessive_bools/test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,8 +6,8 @@ LL | |     a: bool,\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::struct-excessive-bools` implied by `-D warnings`\n    = help: consider using a state machine or refactoring bools into two-variant enums\n+   = note: `-D clippy::struct-excessive-bools` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "681b5eaf54dba0cc9fe634c15c5fdb3304317614", "filename": "tests/ui-toml/unwrap_used/unwrap_used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -16,8 +16,8 @@ error: used `unwrap()` on `an Option` value\n LL |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/unwrap_used.rs:36:17"}, {"sha": "21cb11fa1bb84bbb3d1f1a69bfe3d932faa0b69e", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: this comparison involving the minimum or maximum element for this type co\n LL |     u <= 0;\n    |     ^^^^^^\n    |\n-   = note: `-D clippy::absurd-extreme-comparisons` implied by `-D warnings`\n    = help: because `0` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `u == 0` instead\n+   = note: `-D clippy::absurd-extreme-comparisons` implied by `-D warnings`\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:15:5"}, {"sha": "23f17e9a7afb47ceebe51c23d2aab44600a6cd53", "filename": "tests/ui/allow_attributes_without_reason.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fallow_attributes_without_reason.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fallow_attributes_without_reason.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attributes_without_reason.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: `allow` attribute without specifying a reason\n LL | #[allow(dead_code)]\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n+   = help: try adding a reason at the end with `, reason = \"..\"`\n note: the lint level is defined here\n   --> $DIR/allow_attributes_without_reason.rs:2:9\n    |\n LL | #![deny(clippy::allow_attributes_without_reason)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: try adding a reason at the end with `, reason = \"..\"`\n \n error: `allow` attribute without specifying a reason\n   --> $DIR/allow_attributes_without_reason.rs:6:1"}, {"sha": "0932a2eec520f216c4bb66f0aec8765fcb570335", "filename": "tests/ui/approx_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fapprox_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fapprox_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: approximate value of `f{32, 64}::consts::E` found\n LL |     let my_e = 2.7182;\n    |                ^^^^^^\n    |\n-   = note: `-D clippy::approx-constant` implied by `-D warnings`\n    = help: consider using the constant directly\n+   = note: `-D clippy::approx-constant` implied by `-D warnings`\n \n error: approximate value of `f{32, 64}::consts::E` found\n   --> $DIR/approx_const.rs:5:20"}, {"sha": "f5d59e1e5d83664b7fe65212fa949e6038e8802c", "filename": "tests/ui/as_conversions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fas_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fas_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: using a potentially dangerous silent `as` conversion\n LL |     let i = 0u32 as u64;\n    |             ^^^^^^^^^^^\n    |\n-   = note: `-D clippy::as-conversions` implied by `-D warnings`\n    = help: consider using a safe wrapper for this conversion\n+   = note: `-D clippy::as-conversions` implied by `-D warnings`\n \n error: using a potentially dangerous silent `as` conversion\n   --> $DIR/as_conversions.rs:17:13"}, {"sha": "9c7c3ba7d87e67d6763f3c37a6109449f1b8fff8", "filename": "tests/ui/asm_syntax.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fasm_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fasm_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm_syntax.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: Intel x86 assembly syntax used\n LL |         asm!(\"\");\n    |         ^^^^^^^^\n    |\n-   = note: `-D clippy::inline-asm-x86-intel-syntax` implied by `-D warnings`\n    = help: use AT&T x86 assembly syntax\n+   = note: `-D clippy::inline-asm-x86-intel-syntax` implied by `-D warnings`\n \n error: Intel x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:9:9\n@@ -29,8 +29,8 @@ error: AT&T x86 assembly syntax used\n LL |         asm!(\"\", options(att_syntax));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::inline-asm-x86-att-syntax` implied by `-D warnings`\n    = help: use Intel x86 assembly syntax\n+   = note: `-D clippy::inline-asm-x86-att-syntax` implied by `-D warnings`\n \n error: AT&T x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:24:9"}, {"sha": "29fe009035f166115aef42bef78aa8975a52467c", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `assert!(true)` will be optimized out by the compiler\n LL |     assert!(true);\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::assertions-on-constants` implied by `-D warnings`\n    = help: remove it\n+   = note: `-D clippy::assertions-on-constants` implied by `-D warnings`\n \n error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:11:5"}, {"sha": "81a2d052438393ed22d362e4d3442c4eaee4cf48", "filename": "tests/ui/await_holding_lock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fawait_holding_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fawait_holding_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_lock.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,7 +4,6 @@ error: this `MutexGuard` is held across an `await` point\n LL |         let guard = x.lock().unwrap();\n    |             ^^^^^\n    |\n-   = note: `-D clippy::await-holding-lock` implied by `-D warnings`\n    = help: consider using an async-aware `Mutex` type or ensuring the `MutexGuard` is dropped before calling await\n note: these are all the `await` points this lock is held through\n   --> $DIR/await_holding_lock.rs:9:9\n@@ -13,6 +12,7 @@ LL | /         let guard = x.lock().unwrap();\n LL | |         baz().await\n LL | |     }\n    | |_____^\n+   = note: `-D clippy::await-holding-lock` implied by `-D warnings`\n \n error: this `MutexGuard` is held across an `await` point\n   --> $DIR/await_holding_lock.rs:24:13"}, {"sha": "25c15ab80602e56f0bc65fa15424a886d242955e", "filename": "tests/ui/await_holding_refcell_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fawait_holding_refcell_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fawait_holding_refcell_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_refcell_ref.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,7 +4,6 @@ error: this `RefCell` reference is held across an `await` point\n LL |     let b = x.borrow();\n    |         ^\n    |\n-   = note: `-D clippy::await-holding-refcell-ref` implied by `-D warnings`\n    = help: ensure the reference is dropped before calling `await`\n note: these are all the `await` points this reference is held through\n   --> $DIR/await_holding_refcell_ref.rs:6:5\n@@ -13,6 +12,7 @@ LL | /     let b = x.borrow();\n LL | |     baz().await\n LL | | }\n    | |_^\n+   = note: `-D clippy::await-holding-refcell-ref` implied by `-D warnings`\n \n error: this `RefCell` reference is held across an `await` point\n   --> $DIR/await_holding_refcell_ref.rs:11:9"}, {"sha": "e83eb4d605aa73141f066b88c0de467dbbf02c9f", "filename": "tests/ui/blanket_clippy_restriction_lints.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fblanket_clippy_restriction_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fblanket_clippy_restriction_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblanket_clippy_restriction_lints.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: restriction lints are not meant to be all enabled\n LL | #![warn(clippy::restriction)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::blanket-clippy-restriction-lints` implied by `-D warnings`\n    = help: try enabling only the lints you really need\n+   = note: `-D clippy::blanket-clippy-restriction-lints` implied by `-D warnings`\n \n error: restriction lints are not meant to be all enabled\n   --> $DIR/blanket_clippy_restriction_lints.rs:5:9"}, {"sha": "4cb5531bef6a1a7f7f24035a7bc2b0e9b38a11e8", "filename": "tests/ui/bool_to_int_with_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbool_to_int_with_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbool_to_int_with_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,8 +8,8 @@ LL | |         0\n LL | |     };\n    | |_____^ help: replace with from: `i32::from(a)`\n    |\n-   = note: `-D clippy::bool-to-int-with-if` implied by `-D warnings`\n    = note: `a as i32` or `a.into()` can also be valid options\n+   = note: `-D clippy::bool-to-int-with-if` implied by `-D warnings`\n \n error: boolean to int conversion using if\n   --> $DIR/bool_to_int_with_if.rs:20:5"}, {"sha": "b0cab977a038493c6ac0defb519b36b45a447d7e", "filename": "tests/ui/borrow_interior_mutable_const/enums.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fborrow_interior_mutable_const%2Fenums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fborrow_interior_mutable_const%2Fenums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fenums.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: a `const` item with interior mutability should not be borrowed\n LL |     let _ = &UNFROZEN_VARIANT; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n    = help: assign this const to a local or static variable, and use the variable here\n+   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n \n error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/enums.rs:37:18"}, {"sha": "c87ad206c2ae2f101ab14be3735999e2cce01735", "filename": "tests/ui/borrow_interior_mutable_const/others.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: a `const` item with interior mutability should not be borrowed\n LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^\n    |\n-   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n    = help: assign this const to a local or static variable, and use the variable here\n+   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n \n error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/others.rs:55:16"}, {"sha": "f34ae8814c335c379c36f4f034f15db858fc10dd", "filename": "tests/ui/borrow_interior_mutable_const/traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: a `const` item with interior mutability should not be borrowed\n LL |         let _ = &Self::ATOMIC; //~ ERROR interior mutable\n    |                  ^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n    = help: assign this const to a local or static variable, and use the variable here\n+   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n \n error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/traits.rs:26:18"}, {"sha": "40b6f9be61d590dba15e2dfa3868870a7fce4a4c", "filename": "tests/ui/box_collection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbox_collection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbox_collection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_collection.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: you seem to be trying to use `Box<Vec<..>>`. Consider using just `Vec<..>\n LL | fn test1(foo: Box<Vec<bool>>) {}\n    |               ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::box-collection` implied by `-D warnings`\n    = help: `Vec<..>` is already on the heap, `Box<Vec<..>>` makes an extra allocation\n+   = note: `-D clippy::box-collection` implied by `-D warnings`\n \n error: you seem to be trying to use `Box<String>`. Consider using just `String`\n   --> $DIR/box_collection.rs:28:15"}, {"sha": "b919812e098a385d7a3b225be65d356e709fe6dc", "filename": "tests/ui/branches_sharing_code/shared_at_bottom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,12 +7,12 @@ LL | |         result\n LL | |     };\n    | |_____^\n    |\n+   = note: the end suggestion probably needs some adjustments to use the expression result correctly\n note: the lint level is defined here\n   --> $DIR/shared_at_bottom.rs:2:36\n    |\n LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: the end suggestion probably needs some adjustments to use the expression result correctly\n help: consider moving these statements after the if\n    |\n LL ~     }"}, {"sha": "fb3da641fb5e49e5f755111530ad4f880120ff88", "filename": "tests/ui/branches_sharing_code/shared_at_top.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -103,11 +103,6 @@ LL | |         println!(\"This should trigger `IS_SAME_THAN_ELSE` as usual\");\n LL | |     } else {\n    | |_____^\n    |\n-note: the lint level is defined here\n-  --> $DIR/shared_at_top.rs:2:9\n-   |\n-LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: same as this\n   --> $DIR/shared_at_top.rs:98:12\n    |\n@@ -116,6 +111,11 @@ LL |       } else {\n LL | |         println!(\"This should trigger `IS_SAME_THAN_ELSE` as usual\");\n LL | |     }\n    | |_____^\n+note: the lint level is defined here\n+  --> $DIR/shared_at_top.rs:2:9\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "3edb8e53a7d4b3bc830596464c56a75f7efd5387", "filename": "tests/ui/branches_sharing_code/shared_at_top_and_bottom.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,17 +7,17 @@ LL | |         let _overlap_start = t * 2;\n LL | |         let _overlap_end = 2 * t;\n    | |_________________________________^\n    |\n-note: the lint level is defined here\n-  --> $DIR/shared_at_top_and_bottom.rs:2:36\n-   |\n-LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: this code is shared at the end\n   --> $DIR/shared_at_top_and_bottom.rs:28:5\n    |\n LL | /         let _u = 9;\n LL | |     }\n    | |_____^\n+note: the lint level is defined here\n+  --> $DIR/shared_at_top_and_bottom.rs:2:36\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider moving these statements before the if\n    |\n LL ~     let t = 7;"}, {"sha": "d2acd6d9735c5f6a0e2f384090724b2c67e7cc26", "filename": "tests/ui/branches_sharing_code/valid_if_blocks.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,18 +6,18 @@ LL |       if false {\n LL | |     } else {\n    | |_____^\n    |\n-note: the lint level is defined here\n-  --> $DIR/valid_if_blocks.rs:2:9\n-   |\n-LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: same as this\n   --> $DIR/valid_if_blocks.rs:105:12\n    |\n LL |       } else {\n    |  ____________^\n LL | |     }\n    | |_____^\n+note: the lint level is defined here\n+  --> $DIR/valid_if_blocks.rs:2:9\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `if` has identical blocks\n   --> $DIR/valid_if_blocks.rs:115:15"}, {"sha": "a28dd8bd5ad3fc7912047bdd298fadd5c2e0c850", "filename": "tests/ui/case_sensitive_file_extension_comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: case-sensitive file extension comparison\n LL |     filename.ends_with(\".rs\")\n    |              ^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::case-sensitive-file-extension-comparisons` implied by `-D warnings`\n    = help: consider using a case-insensitive comparison instead\n+   = note: `-D clippy::case-sensitive-file-extension-comparisons` implied by `-D warnings`\n \n error: case-sensitive file extension comparison\n   --> $DIR/case_sensitive_file_extension_comparisons.rs:17:27"}, {"sha": "39fc9d6dda674d127b9f922a36c3a05faa5f763d", "filename": "tests/ui/char_lit_as_u8.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fchar_lit_as_u8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fchar_lit_as_u8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: casting a character literal to `u8` truncates\n LL |     let _ = '\u2764' as u8; // no suggestion, since a byte literal won't work.\n    |             ^^^^^^^^^\n    |\n-   = note: `-D clippy::char-lit-as-u8` implied by `-D warnings`\n    = note: `char` is four bytes wide, but `u8` is a single byte\n+   = note: `-D clippy::char-lit-as-u8` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "586174c50882092e6e1fc49abc69430631e32cb3", "filename": "tests/ui/char_lit_as_u8_suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fchar_lit_as_u8_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fchar_lit_as_u8_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8_suggestions.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: casting a character literal to `u8` truncates\n LL |     let _ = 'a' as u8;\n    |             ^^^^^^^^^ help: use a byte literal instead: `b'a'`\n    |\n-   = note: `-D clippy::char-lit-as-u8` implied by `-D warnings`\n    = note: `char` is four bytes wide, but `u8` is a single byte\n+   = note: `-D clippy::char-lit-as-u8` implied by `-D warnings`\n \n error: casting a character literal to `u8` truncates\n   --> $DIR/char_lit_as_u8_suggestions.rs:7:13"}, {"sha": "d44d5072e4850bd02852624715d1f9a362bca271", "filename": "tests/ui/checked_unwrap/complex_conditionals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,12 +6,12 @@ LL |     if x.is_ok() && y.is_err() {\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n    |\n+   = help: try using `if let` or `match`\n note: the lint level is defined here\n   --> $DIR/complex_conditionals.rs:1:35\n    |\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: try using `if let` or `match`\n \n error: this call to `unwrap_err()` will always panic\n   --> $DIR/complex_conditionals.rs:9:9"}, {"sha": "d7f2f24e52f2b54663a2059f1ee3fedde769707f", "filename": "tests/ui/cognitive_complexity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcognitive_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcognitive_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: the function has a cognitive complexity of (28/25)\n LL | fn main() {\n    |    ^^^^\n    |\n-   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n+   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n \n error: the function has a cognitive complexity of (7/1)\n   --> $DIR/cognitive_complexity.rs:91:4"}, {"sha": "bb48f32974867a3b3dc780a84cdf3aaeff1eae33", "filename": "tests/ui/cognitive_complexity_attr_used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcognitive_complexity_attr_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcognitive_complexity_attr_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity_attr_used.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: the function has a cognitive complexity of (3/0)\n LL | fn kaboom() {\n    |    ^^^^^^\n    |\n-   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n+   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "33562e8401cadab0d0090f43754ba29635a788ee", "filename": "tests/ui/collapsible_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcollapsible_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcollapsible_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,14 +8,14 @@ LL | |             _ => return,\n LL | |         },\n    | |_________^\n    |\n-   = note: `-D clippy::collapsible-match` implied by `-D warnings`\n help: the outer pattern can be modified to include the inner pattern\n   --> $DIR/collapsible_match.rs:12:12\n    |\n LL |         Ok(val) => match val {\n    |            ^^^ replace this binding\n LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n+   = note: `-D clippy::collapsible-match` implied by `-D warnings`\n \n error: this `match` can be collapsed into the outer `match`\n   --> $DIR/collapsible_match.rs:21:20"}, {"sha": "144dbe40a7ad61b62ade621cea2318460449d3ba", "filename": "tests/ui/collapsible_match2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,14 +8,14 @@ LL | |                 _ => return,\n LL | |             },\n    | |_____________^\n    |\n-   = note: `-D clippy::collapsible-match` implied by `-D warnings`\n help: the outer pattern can be modified to include the inner pattern\n   --> $DIR/collapsible_match2.rs:13:16\n    |\n LL |             Ok(val) if make() => match val {\n    |                ^^^ replace this binding\n LL |                 Some(n) => foo(n),\n    |                 ^^^^^^^ with this pattern\n+   = note: `-D clippy::collapsible-match` implied by `-D warnings`\n \n error: this `match` can be collapsed into the outer `match`\n   --> $DIR/collapsible_match2.rs:20:24"}, {"sha": "2eeb50202cd43667d12081b778a534ffff5dd088", "filename": "tests/ui/comparison_chain.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcomparison_chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcomparison_chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_chain.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,8 +8,8 @@ LL | |         b()\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::comparison-chain` implied by `-D warnings`\n    = help: consider rewriting the `if` chain to use `cmp` and `match`\n+   = note: `-D clippy::comparison-chain` implied by `-D warnings`\n \n error: `if` chain can be rewritten with `match`\n   --> $DIR/comparison_chain.rs:27:5"}, {"sha": "6bc6fd6b6fa84d9f15972cdda052c594cac6a582", "filename": "tests/ui/copy_iterator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcopy_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcopy_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopy_iterator.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -10,8 +10,8 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::copy-iterator` implied by `-D warnings`\n    = note: consider implementing `IntoIterator` instead\n+   = note: `-D clippy::copy-iterator` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "a2e2ab8fd192f3172a8d931416fe310df6acf72b", "filename": "tests/ui/crashes/ice-360.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrashes%2Fice-360.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrashes%2Fice-360.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-360.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -18,8 +18,8 @@ error: empty `loop {}` wastes CPU cycles\n LL |         loop {}\n    |         ^^^^^^^\n    |\n-   = note: `-D clippy::empty-loop` implied by `-D warnings`\n    = help: you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\n+   = note: `-D clippy::empty-loop` implied by `-D warnings`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "22d82a30c6aad7ba6a22a22ceb1e1073299204aa", "filename": "tests/ui/crashes/ice-6254.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6254.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,9 +4,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n LL |         FOO_REF_REF => {},\n    |         ^^^^^^^^^^^\n    |\n-   = note: `-D indirect-structural-match` implied by `-D warnings`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: `-D indirect-structural-match` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "1d8314e889fa1a7c836e461c4b75a7a0b63bcbf7", "filename": "tests/ui/crashes/ice-7868.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrashes%2Fice-7868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrashes%2Fice-7868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7868.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: unsafe block missing a safety comment\n LL |     unsafe { 0 };\n    |     ^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n    = help: consider adding a safety comment on the preceding line\n+   = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "35d1e8fd29573d504897daa50183eeb5af694bf8", "filename": "tests/ui/crashes/ice-7869.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrashes%2Fice-7869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrashes%2Fice-7869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7869.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,8 +8,8 @@ LL | |     Ty\u00f6Valmis,\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::enum-variant-names` implied by `-D warnings`\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n+   = note: `-D clippy::enum-variant-names` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "b0ce306d6838e9467ade54b7462db735cc9730d8", "filename": "tests/ui/crashes/ice-9463.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrashes%2Fice-9463.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrashes%2Fice-9463.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-9463.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -22,8 +22,8 @@ error: literal out of range for `u32`\n LL |     let _y = 1u32 >> 10000000000000u32;\n    |                      ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(overflowing_literals)]` on by default\n    = note: the literal `10000000000000u32` does not fit into the type `u32` whose range is `0..=4294967295`\n+   = note: `#[deny(overflowing_literals)]` on by default\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3d79a115cb30115b157c299cdee1d4da4ff416d9", "filename": "tests/ui/crate_level_checks/entrypoint_recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: recursing into entrypoint `a`\n LL |     a();\n    |     ^\n    |\n-   = note: `-D clippy::main-recursion` implied by `-D warnings`\n    = help: consider using another function for this recursion\n+   = note: `-D clippy::main-recursion` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "7d8ea3f76b0f6d0cba225793392e71f8512d4bb3", "filename": "tests/ui/crate_level_checks/no_std_swap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrate_level_checks%2Fno_std_swap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrate_level_checks%2Fno_std_swap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fno_std_swap.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -5,8 +5,8 @@ LL | /     a = b;\n LL | |     b = a;\n    | |_________^ help: try: `core::mem::swap(&mut a, &mut b)`\n    |\n-   = note: `-D clippy::almost-swapped` implied by `-D warnings`\n    = note: or maybe you should use `core::mem::replace`?\n+   = note: `-D clippy::almost-swapped` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "82c68bd1cfef97e79ff6da2831d263b966d9fa96", "filename": "tests/ui/crate_level_checks/std_main_recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: recursing into entrypoint `main`\n LL |     main();\n    |     ^^^^\n    |\n-   = note: `-D clippy::main-recursion` implied by `-D warnings`\n    = help: consider using another function for this recursion\n+   = note: `-D clippy::main-recursion` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "f8fc17e872bd4406a3d724e94ec043edd69b4456", "filename": "tests/ui/def_id_nocore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdef_id_nocore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdef_id_nocore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: methods called `as_*` usually take `self` by reference or `self` by mutab\n LL |     pub fn as_ref(self) -> &'static str {\n    |                   ^^^^\n    |\n-   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n    = help: consider choosing a less ambiguous name\n+   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "8b7ed94cbc61101fd4ef49f3d5d3a24eea2ecaab", "filename": "tests/ui/default_union_representation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdefault_union_representation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdefault_union_representation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_union_representation.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,8 +7,8 @@ LL | |     b: u32,\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::default-union-representation` implied by `-D warnings`\n    = help: consider annotating `NoAttribute` with `#[repr(C)]` to explicitly specify memory layout\n+   = note: `-D clippy::default-union-representation` implied by `-D warnings`\n \n error: this union has the default representation\n   --> $DIR/default_union_representation.rs:16:1"}, {"sha": "e1fbb8dcd1ee9c665600721dc283f411ae727642", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,7 +8,6 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::expl-impl-clone-on-copy` implied by `-D warnings`\n note: consider deriving `Clone` or removing `Copy`\n   --> $DIR/derive.rs:8:1\n    |\n@@ -18,6 +17,7 @@ LL | |         Qux\n LL | |     }\n LL | | }\n    | |_^\n+   = note: `-D clippy::expl-impl-clone-on-copy` implied by `-D warnings`\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n   --> $DIR/derive.rs:32:1"}, {"sha": "16c92397804e526dac40510073c9814d8e053efc", "filename": "tests/ui/derive_hash_xor_eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fderive_hash_xor_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fderive_hash_xor_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_hash_xor_eq.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n LL | #[derive(Hash)]\n    |          ^^^^\n    |\n-   = note: `#[deny(clippy::derive_hash_xor_eq)]` on by default\n note: `PartialEq` implemented here\n   --> $DIR/derive_hash_xor_eq.rs:15:1\n    |\n LL | impl PartialEq for Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::derive_hash_xor_eq)]` on by default\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Hash` but have implemented `PartialEq` explicitly"}, {"sha": "58efbb8541f66ac354b8ab4dd3692b783a28a3fe", "filename": "tests/ui/derive_ord_xor_partial_ord.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: you are deriving `Ord` but have implemented `PartialOrd` explicitly\n LL | #[derive(Ord, PartialEq, Eq)]\n    |          ^^^\n    |\n-   = note: `-D clippy::derive-ord-xor-partial-ord` implied by `-D warnings`\n note: `PartialOrd` implemented here\n   --> $DIR/derive_ord_xor_partial_ord.rs:24:1\n    |\n LL | impl PartialOrd for DeriveOrd {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::derive-ord-xor-partial-ord` implied by `-D warnings`\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Ord` but have implemented `PartialOrd` explicitly"}, {"sha": "f2ac6bc3269aa5852238b6889ec0c8ce134d873f", "filename": "tests/ui/doc/unbalanced_ticks.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdoc%2Funbalanced_ticks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdoc%2Funbalanced_ticks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Funbalanced_ticks.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,8 +7,8 @@ LL | | /// Because of the initial `unbalanced_tick` pair, the error message is\n LL | | /// very `confusing_and_misleading`.\n    | |____________________________________^\n    |\n-   = note: `-D clippy::doc-markdown` implied by `-D warnings`\n    = help: a backtick may be missing a pair\n+   = note: `-D clippy::doc-markdown` implied by `-D warnings`\n \n error: backticks are unbalanced\n   --> $DIR/unbalanced_ticks.rs:13:1"}, {"sha": "3d34557a881bd2da4a937af2355d9631c62fceab", "filename": "tests/ui/double_must_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdouble_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdouble_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_must_use.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: this function has an empty `#[must_use]` attribute, but returns a type al\n LL | pub fn must_use_result() -> Result<(), ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::double-must-use` implied by `-D warnings`\n    = help: either add some descriptive text or remove the attribute\n+   = note: `-D clippy::double-must-use` implied by `-D warnings`\n \n error: this function has an empty `#[must_use]` attribute, but returns a type already marked as `#[must_use]`\n   --> $DIR/double_must_use.rs:10:1"}, {"sha": "21adb3b3a50432f083dbe8035cae3161815b43b9", "filename": "tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a\n LL |     drop(s1);\n    |     ^^^^^^^^\n    |\n-   = note: `-D clippy::drop-copy` implied by `-D warnings`\n note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:33:10\n    |\n LL |     drop(s1);\n    |          ^^\n+   = note: `-D clippy::drop-copy` implied by `-D warnings`\n \n error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n   --> $DIR/drop_forget_copy.rs:34:5\n@@ -41,12 +41,12 @@ error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetti\n LL |     forget(s1);\n    |     ^^^^^^^^^^\n    |\n-   = note: `-D clippy::forget-copy` implied by `-D warnings`\n note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:39:12\n    |\n LL |     forget(s1);\n    |            ^^\n+   = note: `-D clippy::forget-copy` implied by `-D warnings`\n \n error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n   --> $DIR/drop_forget_copy.rs:40:5"}, {"sha": "b86057c0c321fd81c4bd3b690cac532dfed82154", "filename": "tests/ui/drop_non_drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdrop_non_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdrop_non_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_non_drop.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: call to `std::mem::drop` with a value that does not implement `Drop`. Dro\n LL |     drop(Foo);\n    |     ^^^^^^^^^\n    |\n-   = note: `-D clippy::drop-non-drop` implied by `-D warnings`\n note: argument has type `main::Foo`\n   --> $DIR/drop_non_drop.rs:22:10\n    |\n LL |     drop(Foo);\n    |          ^^^\n+   = note: `-D clippy::drop-non-drop` implied by `-D warnings`\n \n error: call to `std::mem::drop` with a value that does not implement `Drop`. Dropping such a type only extends its contained lifetimes\n   --> $DIR/drop_non_drop.rs:37:5"}, {"sha": "4743cf79b5d3cf4dfe1e74d5b0b724df014744f9", "filename": "tests/ui/drop_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: calls to `std::mem::drop` with a reference instead of an owned value. Dro\n LL |     drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::drop-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n   --> $DIR/drop_ref.rs:11:10\n    |\n LL |     drop(&SomeStruct);\n    |          ^^^^^^^^^^^\n+   = note: `-D clippy::drop-ref` implied by `-D warnings`\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_ref.rs:14:5"}, {"sha": "90ccfb4fad64171a0af6f8b429b0eb960305b4cc", "filename": "tests/ui/else_if_without_else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Felse_if_without_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Felse_if_without_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,8 +8,8 @@ LL | |         println!(\"else if\");\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::else-if-without-else` implied by `-D warnings`\n    = help: add an `else` block here\n+   = note: `-D clippy::else-if-without-else` implied by `-D warnings`\n \n error: `if` expression with an `else if`, but without a final `else`\n   --> $DIR/else_if_without_else.rs:54:12"}, {"sha": "0d9aa5818e28d615c69ebfbc6a0a9cf40ffb3a54", "filename": "tests/ui/empty_enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fempty_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fempty_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: enum with no variants\n LL | enum Empty {}\n    | ^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::empty-enum` implied by `-D warnings`\n    = help: consider using the uninhabited type `!` (never type) or a wrapper around it to introduce a type which can't be instantiated\n+   = note: `-D clippy::empty-enum` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "7602412334bbf10d8f14f82b69aad8fdfe821713", "filename": "tests/ui/empty_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fempty_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fempty_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: empty `loop {}` wastes CPU cycles\n LL |     loop {}\n    |     ^^^^^^^\n    |\n-   = note: `-D clippy::empty-loop` implied by `-D warnings`\n    = help: you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\n+   = note: `-D clippy::empty-loop` implied by `-D warnings`\n \n error: empty `loop {}` wastes CPU cycles\n   --> $DIR/empty_loop.rs:11:9"}, {"sha": "71af64f49d522c72f7846d0fad015115b4cd22de", "filename": "tests/ui/empty_loop_no_std.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fempty_loop_no_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fempty_loop_no_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop_no_std.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: empty `loop {}` wastes CPU cycles\n LL |     loop {}\n    |     ^^^^^^^\n    |\n-   = note: `-D clippy::empty-loop` implied by `-D warnings`\n    = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n+   = note: `-D clippy::empty-loop` implied by `-D warnings`\n \n error: empty `loop {}` wastes CPU cycles\n   --> $DIR/empty_loop_no_std.rs:25:5"}, {"sha": "f6738865cac12d9ef6f9750c7b2d7e989902c5e6", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: used `expect()` on `an Option` value\n LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::expect-used` implied by `-D warnings`\n    = help: if this value is `None`, it will panic\n+   = note: `-D clippy::expect-used` implied by `-D warnings`\n \n error: used `expect()` on `a Result` value\n   --> $DIR/expect.rs:10:13"}, {"sha": "28a061af664d723bb7064a25925157dc89617c91", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,17 +8,17 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-note: the lint level is defined here\n-  --> $DIR/fallible_impl_from.rs:1:9\n-   |\n-LL | #![deny(clippy::fallible_impl_from)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n   --> $DIR/fallible_impl_from.rs:7:13\n    |\n LL |         Foo(s.parse().unwrap())\n    |             ^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/fallible_impl_from.rs:1:9\n+   |\n+LL | #![deny(clippy::fallible_impl_from)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:26:1"}, {"sha": "710bb66a48a4078eb4b4fdcbf1479e1255ea201e", "filename": "tests/ui/field_reassign_with_default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffield_reassign_with_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffield_reassign_with_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: field assignment outside of initializer for an instance created with Defa\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n-   = note: `-D clippy::field-reassign-with-default` implied by `-D warnings`\n note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n   --> $DIR/field_reassign_with_default.rs:62:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::field-reassign-with-default` implied by `-D warnings`\n \n error: field assignment outside of initializer for an instance created with Default::default()\n   --> $DIR/field_reassign_with_default.rs:103:5"}, {"sha": "e51a90d6cfd246d058d771d06db083c2eb970075", "filename": "tests/ui/filetype_is_file.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffiletype_is_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffiletype_is_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffiletype_is_file.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `FileType::is_file()` only covers regular files\n LL |     if fs::metadata(\"foo.txt\")?.file_type().is_file() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::filetype-is-file` implied by `-D warnings`\n    = help: use `!FileType::is_dir()` instead\n+   = note: `-D clippy::filetype-is-file` implied by `-D warnings`\n \n error: `!FileType::is_file()` only denies regular files\n   --> $DIR/filetype_is_file.rs:13:8"}, {"sha": "e3e9f3949fdf8998aacf2ddac15c56892a626c8c", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: strict comparison of `f32` or `f64`\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(ONE as f64 - 2.0).abs() > error_margin`\n    |\n-   = note: `-D clippy::float-cmp` implied by `-D warnings`\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n+   = note: `-D clippy::float-cmp` implied by `-D warnings`\n \n error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:62:5"}, {"sha": "65c45648ab380885d9483e7b560eac484d0b2cbe", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: strict comparison of `f32` or `f64` constant\n LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^ help: consider comparing them within some margin of error: `(1f32 - ONE).abs() < error_margin`\n    |\n-   = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n+   = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:17:5"}, {"sha": "11627105691b7f5c5d6f2c9487f55d1aab146cc8", "filename": "tests/ui/fn_params_excessive_bools.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffn_params_excessive_bools.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffn_params_excessive_bools.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_params_excessive_bools.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: more than 3 bools in function parameters\n LL | fn g(_: bool, _: bool, _: bool, _: bool) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::fn-params-excessive-bools` implied by `-D warnings`\n    = help: consider refactoring bools into two-variant enums\n+   = note: `-D clippy::fn-params-excessive-bools` implied by `-D warnings`\n \n error: more than 3 bools in function parameters\n   --> $DIR/fn_params_excessive_bools.rs:21:1"}, {"sha": "68d2735b040e084fc8d271ebef242f0aa0b33027", "filename": "tests/ui/for_loops_over_fallibles.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: for loop over `option`, which is an `Option`. This is more readably writt\n LL |     for x in option {\n    |              ^^^^^^\n    |\n-   = note: `-D clippy::for-loops-over-fallibles` implied by `-D warnings`\n    = help: consider replacing `for x in option` with `if let Some(x) = option`\n+   = note: `-D clippy::for-loops-over-fallibles` implied by `-D warnings`\n \n error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement\n   --> $DIR/for_loops_over_fallibles.rs:14:14"}, {"sha": "194e37c8b42472b2118e6c18776e5d630a1d9902", "filename": "tests/ui/forget_non_drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fforget_non_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fforget_non_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_non_drop.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: call to `std::mem::forget` with a value that does not implement `Drop`. F\n LL |     forget(Foo);\n    |     ^^^^^^^^^^^\n    |\n-   = note: `-D clippy::forget-non-drop` implied by `-D warnings`\n note: argument has type `main::Foo`\n   --> $DIR/forget_non_drop.rs:13:12\n    |\n LL |     forget(Foo);\n    |            ^^^\n+   = note: `-D clippy::forget-non-drop` implied by `-D warnings`\n \n error: call to `std::mem::forget` with a value that does not implement `Drop`. Forgetting such a type is the same as dropping it\n   --> $DIR/forget_non_drop.rs:24:5"}, {"sha": "011cdefc665f886bc3b6857301f91370d4e2bba8", "filename": "tests/ui/forget_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: calls to `std::mem::forget` with a reference instead of an owned value. F\n LL |     forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::forget-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n   --> $DIR/forget_ref.rs:11:12\n    |\n LL |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n+   = note: `-D clippy::forget-ref` implied by `-D warnings`\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/forget_ref.rs:14:5"}, {"sha": "37a6afb1ba7bfe7c22482b349e9816ddc66fd4d2", "filename": "tests/ui/format_args_unfixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fformat_args_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fformat_args_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args_unfixable.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,9 +4,9 @@ error: `format!` in `println!` args\n LL |     println!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::format-in-format-args` implied by `-D warnings`\n    = help: combine the `format!(..)` arguments with the outer `println!(..)` call\n    = help: or consider changing `format!` to `format_args!`\n+   = note: `-D clippy::format-in-format-args` implied by `-D warnings`\n \n error: `format!` in `println!` args\n   --> $DIR/format_args_unfixable.rs:28:5"}, {"sha": "d7be9a5f206c1675954c096dc5a5811ef9a25659", "filename": "tests/ui/format_push_string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fformat_push_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fformat_push_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_push_string.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `format!(..)` appended to existing `String`\n LL |     string += &format!(\"{:?}\", 1234);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::format-push-string` implied by `-D warnings`\n    = help: consider using `write!` to avoid the extra allocation\n+   = note: `-D clippy::format-push-string` implied by `-D warnings`\n \n error: `format!(..)` appended to existing `String`\n   --> $DIR/format_push_string.rs:6:5"}, {"sha": "caccd5cba1784a6094915375543586b2b87ea8f6", "filename": "tests/ui/formatting.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: this looks like you are trying to use `.. -= ..`, but you really are doin\n LL |     a =- 35;\n    |      ^^^^\n    |\n-   = note: `-D clippy::suspicious-assignment-formatting` implied by `-D warnings`\n    = note: to remove this lint, use either `-=` or `= -`\n+   = note: `-D clippy::suspicious-assignment-formatting` implied by `-D warnings`\n \n error: this looks like you are trying to use `.. *= ..`, but you really are doing `.. = (* ..)`\n   --> $DIR/formatting.rs:17:6\n@@ -29,8 +29,8 @@ error: possibly missing a comma here\n LL |         -1, -2, -3 // <= no comma here\n    |                   ^\n    |\n-   = note: `-D clippy::possible-missing-comma` implied by `-D warnings`\n    = note: to remove this lint, add a comma or write the expr in a single line\n+   = note: `-D clippy::possible-missing-comma` implied by `-D warnings`\n \n error: possibly missing a comma here\n   --> $DIR/formatting.rs:33:19"}, {"sha": "469adadd2196dd6721abecf7fece4fc2f04e4e81", "filename": "tests/ui/from_over_into.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL | impl Into<StringWrapper> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::from-over-into` implied by `-D warnings`\n    = help: consider to implement `From<std::string::String>` instead\n+   = note: `-D clippy::from-over-into` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "5b6858e4568b52d119e4209a82b5f0be00f8d336", "filename": "tests/ui/future_not_send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffuture_not_send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ffuture_not_send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffuture_not_send.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,7 +4,6 @@ error: future cannot be sent between threads safely\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                                              ^^^^ future returned by `private_future` is not `Send`\n    |\n-   = note: `-D clippy::future-not-send` implied by `-D warnings`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/future_not_send.rs:8:19\n    |\n@@ -25,6 +24,7 @@ LL |     async { true }.await\n LL | }\n    | - `cell` is later dropped here\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n+   = note: `-D clippy::future-not-send` implied by `-D warnings`\n \n error: future cannot be sent between threads safely\n   --> $DIR/future_not_send.rs:11:42"}, {"sha": "937f85904083160c52e7b238e2320c9a2e3d4f6b", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -16,8 +16,8 @@ error: used `unwrap()` on `an Option` value\n LL |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:36:17"}, {"sha": "da0cc25f0ab52d17102212301d1c824f946b1037", "filename": "tests/ui/if_let_mutex.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fif_let_mutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fif_let_mutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_mutex.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -13,8 +13,8 @@ LL | |         do_stuff(lock);\n LL | |     };\n    | |_____^\n    |\n-   = note: `-D clippy::if-let-mutex` implied by `-D warnings`\n    = help: move the lock call outside of the `if let ...` expression\n+   = note: `-D clippy::if-let-mutex` implied by `-D warnings`\n \n error: calling `Mutex::lock` inside the scope of another `Mutex::lock` causes a deadlock\n   --> $DIR/if_let_mutex.rs:22:5"}, {"sha": "46671c15274f799d85d152fa1cd69d6d0f77913a", "filename": "tests/ui/if_not_else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fif_not_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fif_not_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,8 +8,8 @@ LL | |         println!(\"Bunny\");\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::if-not-else` implied by `-D warnings`\n    = help: remove the `!` and swap the blocks of the `if`/`else`\n+   = note: `-D clippy::if-not-else` implied by `-D warnings`\n \n error: unnecessary `!=` operation\n   --> $DIR/if_not_else.rs:17:5"}, {"sha": "fb23b81d36d72362270543ece778ae4311bf3162", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -11,7 +11,6 @@ LL | |         foo();\n LL | |     } else {\n    | |_____^\n    |\n-   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n note: same as this\n   --> $DIR/if_same_then_else.rs:31:12\n    |\n@@ -24,6 +23,7 @@ LL | |         0..10;\n LL | |         foo();\n LL | |     }\n    | |_____^\n+   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n \n error: this `if` has identical blocks\n   --> $DIR/if_same_then_else.rs:67:21"}, {"sha": "704cfd9669ac8a59e6fdb55a1f4d3c5ae39a5a23", "filename": "tests/ui/if_same_then_else2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fif_same_then_else2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fif_same_then_else2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -11,7 +11,6 @@ LL | |         }\n LL | |     } else {\n    | |_____^\n    |\n-   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n note: same as this\n   --> $DIR/if_same_then_else2.rs:23:12\n    |\n@@ -24,6 +23,7 @@ LL | |             let bar: &Option<_> = &Some::<u8>(42);\n LL | |         }\n LL | |     }\n    | |_____^\n+   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n \n error: this `if` has identical blocks\n   --> $DIR/if_same_then_else2.rs:35:13"}, {"sha": "24e0b5947f19dd44e436cfddc3bf45c40a816f77", "filename": "tests/ui/if_then_some_else_none.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fif_then_some_else_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fif_then_some_else_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_some_else_none.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -10,8 +10,8 @@ LL | |         None\n LL | |     };\n    | |_____^\n    |\n-   = note: `-D clippy::if-then-some-else-none` implied by `-D warnings`\n    = help: consider using `bool::then` like: `foo().then(|| { /* snippet */ \"foo\" })`\n+   = note: `-D clippy::if-then-some-else-none` implied by `-D warnings`\n \n error: this could be simplified with `bool::then`\n   --> $DIR/if_then_some_else_none.rs:14:13"}, {"sha": "4113087327a282b02faa9df21c72897f2e3309e3", "filename": "tests/ui/ifs_same_cond.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fifs_same_cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fifs_same_cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fifs_same_cond.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: this `if` has the same condition as a previous `if`\n LL |     } else if b {\n    |               ^\n    |\n-   = note: `-D clippy::ifs-same-cond` implied by `-D warnings`\n note: same as this\n   --> $DIR/ifs_same_cond.rs:8:8\n    |\n LL |     if b {\n    |        ^\n+   = note: `-D clippy::ifs-same-cond` implied by `-D warnings`\n \n error: this `if` has the same condition as a previous `if`\n   --> $DIR/ifs_same_cond.rs:14:15"}, {"sha": "e28b1bf0cdd94ee5934eaa34514575940cbfea19", "filename": "tests/ui/impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,14 +6,14 @@ LL | |     fn second() {}\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::multiple-inherent-impl` implied by `-D warnings`\n note: first implementation here\n   --> $DIR/impl.rs:6:1\n    |\n LL | / impl MyStruct {\n LL | |     fn first() {}\n LL | | }\n    | |_^\n+   = note: `-D clippy::multiple-inherent-impl` implied by `-D warnings`\n \n error: multiple implementations of this structure\n   --> $DIR/impl.rs:24:5"}, {"sha": "a8d8b38163d0dfb053aa7b2c8f22a43fc7623a9c", "filename": "tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -16,8 +16,8 @@ error: indexing may panic\n LL |     x[index];\n    |     ^^^^^^^^\n    |\n-   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:38:5"}, {"sha": "dc54bd41365d3e55b812479aaa6cdec42c97315c", "filename": "tests/ui/indexing_slicing_slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Findexing_slicing_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Findexing_slicing_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_slice.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: slicing may panic\n LL |     &x[index..];\n    |      ^^^^^^^^^^\n    |\n-   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n    = help: consider using `.get(n..)` or .get_mut(n..)` instead\n+   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:13:6"}, {"sha": "914dc92bfb65acd6a37d39569061ba3452b27071", "filename": "tests/ui/inefficient_to_string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Finefficient_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Finefficient_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: calling `to_string` on `&&str`\n LL |     let _: String = rrstr.to_string();\n    |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrstr).to_string()`\n    |\n+   = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`\n note: the lint level is defined here\n   --> $DIR/inefficient_to_string.rs:2:9\n    |\n LL | #![deny(clippy::inefficient_to_string)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&&str`\n   --> $DIR/inefficient_to_string.rs:12:21"}, {"sha": "85258b9d64f94f6792fe4326125c0f909e50b25b", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: variables in the condition are not mutated in the loop body\n LL |     while y < 10 {\n    |           ^^^^^^\n    |\n-   = note: `#[deny(clippy::while_immutable_condition)]` on by default\n    = note: this may lead to an infinite or to a never running loop\n+   = note: `#[deny(clippy::while_immutable_condition)]` on by default\n \n error: variables in the condition are not mutated in the loop body\n   --> $DIR/infinite_loop.rs:25:11"}, {"sha": "443fecae1aadfff104a0c884981ca37e23505ea5", "filename": "tests/ui/inherent_to_string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Finherent_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Finherent_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,8 +6,8 @@ LL | |         \"A.to_string()\".to_string()\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::inherent-to-string` implied by `-D warnings`\n    = help: implement trait `Display` for type `A` instead\n+   = note: `-D clippy::inherent-to-string` implied by `-D warnings`\n \n error: type `C` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\n   --> $DIR/inherent_to_string.rs:44:5\n@@ -17,12 +17,12 @@ LL | |         \"C.to_string()\".to_string()\n LL | |     }\n    | |_____^\n    |\n+   = help: remove the inherent method from type `C`\n note: the lint level is defined here\n   --> $DIR/inherent_to_string.rs:2:9\n    |\n LL | #![deny(clippy::inherent_to_string_shadow_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove the inherent method from type `C`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "67c2d5e53c78d40005fb11f28878457364fad2cf", "filename": "tests/ui/inspect_for_each.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Finspect_for_each.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Finspect_for_each.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finspect_for_each.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -9,8 +9,8 @@ LL | |         b.push(z);\n LL | |     });\n    | |______^\n    |\n-   = note: `-D clippy::inspect-for-each` implied by `-D warnings`\n    = help: move the code from `inspect(..)` to `for_each(..)` and remove the `inspect(..)`\n+   = note: `-D clippy::inspect-for-each` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "ca8001279207509754e661eed981e3004783f814", "filename": "tests/ui/integer_division.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Finteger_division.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Finteger_division.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_division.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: integer division\n LL |     let n = 1 / 2;\n    |             ^^^^^\n    |\n-   = note: `-D clippy::integer-division` implied by `-D warnings`\n    = help: division of integers may cause loss of precision. consider using floats\n+   = note: `-D clippy::integer-division` implied by `-D warnings`\n \n error: integer division\n   --> $DIR/integer_division.rs:6:13"}, {"sha": "240f4bcc38fd573c98f9e4b452bbfaf82685e471", "filename": "tests/ui/issue_4266.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fissue_4266.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fissue_4266.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -18,8 +18,8 @@ error: methods called `new` usually take no `self`\n LL |     pub async fn new(&mut self) -> Self {\n    |                      ^^^^^^^^^\n    |\n-   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n    = help: consider choosing a less ambiguous name\n+   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a0fe353bcf75cb5f2ade8b64b753da2369fb0d30", "filename": "tests/ui/iter_nth.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fiter_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fiter_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: called `.iter().nth()` on a Vec\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::iter-nth` implied by `-D warnings`\n    = help: calling `.get()` is both faster and more readable\n+   = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice\n   --> $DIR/iter_nth.rs:34:26"}, {"sha": "4062706f94206a9ddc367f64298b877b3225d720", "filename": "tests/ui/iter_skip_next_unfixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fiter_skip_next_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fiter_skip_next_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next_unfixable.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: called `skip(..).next()` on an iterator\n LL |     let _: Vec<&str> = sp.skip(1).next().unwrap().split(' ').collect();\n    |                          ^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(1)`\n    |\n-   = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n help: for this change `sp` has to be mutable\n   --> $DIR/iter_skip_next_unfixable.rs:8:9\n    |\n LL |     let sp = test_string.split('|').map(|s| s.trim());\n    |         ^^\n+   = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n \n error: called `skip(..).next()` on an iterator\n   --> $DIR/iter_skip_next_unfixable.rs:11:29"}, {"sha": "c7bf941ad00913edb3e8595f45672ad897f9735b", "filename": "tests/ui/large_stack_arrays.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flarge_stack_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flarge_stack_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_stack_arrays.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: allocating a local array larger than 512000 bytes\n LL |         [0u32; 20_000_000],\n    |         ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::large-stack-arrays` implied by `-D warnings`\n    = help: consider allocating on the heap with `vec![0u32; 20_000_000].into_boxed_slice()`\n+   = note: `-D clippy::large-stack-arrays` implied by `-D warnings`\n \n error: allocating a local array larger than 512000 bytes\n   --> $DIR/large_stack_arrays.rs:24:9"}, {"sha": "8e890e2e2590ea644aaf2610bddd48219d205593", "filename": "tests/ui/len_without_is_empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flen_without_is_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flen_without_is_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -92,8 +92,8 @@ error: this returns a `Result<_, ()>`\n LL |     pub fn len(&self) -> Result<usize, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::result-unit-err` implied by `-D warnings`\n    = help: use a custom `Error` type instead\n+   = note: `-D clippy::result-unit-err` implied by `-D warnings`\n \n error: this returns a `Result<_, ()>`\n   --> $DIR/len_without_is_empty.rs:240:5"}, {"sha": "f2e0edb6fbc30a338201493aca26409992cb617d", "filename": "tests/ui/let_if_seq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flet_if_seq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flet_if_seq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,8 +7,8 @@ LL | |         foo = 42;\n LL | |     }\n    | |_____^ help: it is more idiomatic to write: `let <mut> foo = if f() { 42 } else { 0 };`\n    |\n-   = note: `-D clippy::useless-let-if-seq` implied by `-D warnings`\n    = note: you might not need `mut` at all\n+   = note: `-D clippy::useless-let-if-seq` implied by `-D warnings`\n \n error: `if _ { .. } else { .. }` is an expression\n   --> $DIR/let_if_seq.rs:71:5"}, {"sha": "324b7cd431d4685da30289fea45c888dbedaa1b9", "filename": "tests/ui/let_underscore_drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flet_underscore_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flet_underscore_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_drop.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: non-binding `let` on a type that implements `Drop`\n LL |     let _ = Box::new(());\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n \n error: non-binding `let` on a type that implements `Drop`\n   --> $DIR/let_underscore_drop.rs:18:5"}, {"sha": "d7779e7b6c48af2c7ee4a9b21704c3e415c8b2da", "filename": "tests/ui/let_underscore_lock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flet_underscore_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flet_underscore_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_lock.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: non-binding let on a synchronization lock\n LL |     let _ = m.lock();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::let-underscore-lock` implied by `-D warnings`\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+   = note: `-D clippy::let-underscore-lock` implied by `-D warnings`\n \n error: non-binding let on a synchronization lock\n   --> $DIR/let_underscore_lock.rs:10:5"}, {"sha": "bae60f2ff9b79f7af718679cab33f8417c718ca2", "filename": "tests/ui/let_underscore_must_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flet_underscore_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flet_underscore_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: non-binding let on a result of a `#[must_use]` function\n LL |     let _ = f();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::let-underscore-must-use` implied by `-D warnings`\n    = help: consider explicitly using function result\n+   = note: `-D clippy::let-underscore-must-use` implied by `-D warnings`\n \n error: non-binding let on an expression with `#[must_use]` type\n   --> $DIR/let_underscore_must_use.rs:68:5"}, {"sha": "c76c9496131295c92c7a44798d3b96defd59b01e", "filename": "tests/ui/linkedlist.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flinkedlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Flinkedlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkedlist.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: you seem to be using a `LinkedList`! Perhaps you meant some other data st\n LL | const C: LinkedList<i32> = LinkedList::new();\n    |          ^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::linkedlist` implied by `-D warnings`\n    = help: a `VecDeque` might work\n+   = note: `-D clippy::linkedlist` implied by `-D warnings`\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n   --> $DIR/linkedlist.rs:9:11"}, {"sha": "ea04bb066e61d57eeebc6b5b606050b2f0247c09", "filename": "tests/ui/manual_find.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmanual_find.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmanual_find.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -9,8 +9,8 @@ LL | |     }\n LL | |     None\n    | |________^ help: replace with an iterator: `strings.into_iter().find(|s| s == String::new())`\n    |\n-   = note: `-D clippy::manual-find` implied by `-D warnings`\n    = note: you may need to dereference some variables\n+   = note: `-D clippy::manual-find` implied by `-D warnings`\n \n error: manual implementation of `Iterator::find`\n   --> $DIR/manual_find.rs:14:5"}, {"sha": "180a6ff4e9a739edd93a6739a751c31366407a17", "filename": "tests/ui/manual_flatten.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmanual_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmanual_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_flatten.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -11,14 +11,14 @@ LL | |         }\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::manual-flatten` implied by `-D warnings`\n help: ...and remove the `if let` statement in the for loop\n   --> $DIR/manual_flatten.rs:8:9\n    |\n LL | /         if let Some(y) = n {\n LL | |             println!(\"{}\", y);\n LL | |         }\n    | |_________^\n+   = note: `-D clippy::manual-flatten` implied by `-D warnings`\n \n error: unnecessary `if let` since only the `Ok` variant of the iterator element is used\n   --> $DIR/manual_flatten.rs:15:5"}, {"sha": "087f766be70d242a624c919f0c2ff664306602c1", "filename": "tests/ui/manual_non_exhaustive_enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmanual_non_exhaustive_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmanual_non_exhaustive_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_non_exhaustive_enum.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -13,12 +13,12 @@ LL | |     _C,\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::manual-non-exhaustive` implied by `-D warnings`\n help: remove this variant\n   --> $DIR/manual_non_exhaustive_enum.rs:9:5\n    |\n LL |     _C,\n    |     ^^\n+   = note: `-D clippy::manual-non-exhaustive` implied by `-D warnings`\n \n error: this seems like a manual implementation of the non-exhaustive pattern\n   --> $DIR/manual_non_exhaustive_enum.rs:14:1"}, {"sha": "d0bed8e11211aafd6173edec4a5c4ce37e414beb", "filename": "tests/ui/manual_non_exhaustive_struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmanual_non_exhaustive_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmanual_non_exhaustive_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_non_exhaustive_struct.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -12,12 +12,12 @@ LL | |         _c: (),\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::manual-non-exhaustive` implied by `-D warnings`\n help: remove this field\n   --> $DIR/manual_non_exhaustive_struct.rs:8:9\n    |\n LL |         _c: (),\n    |         ^^^^^^\n+   = note: `-D clippy::manual-non-exhaustive` implied by `-D warnings`\n \n error: this seems like a manual implementation of the non-exhaustive pattern\n   --> $DIR/manual_non_exhaustive_struct.rs:13:5"}, {"sha": "2191ccb85dd5d86fcd8712d64d0da45e2d8bdb2f", "filename": "tests/ui/manual_strip.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmanual_strip.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmanual_strip.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_strip.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: stripping a prefix manually\n LL |         str::to_string(&s[\"ab\".len()..]);\n    |                        ^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n   --> $DIR/manual_strip.rs:6:5\n    |\n LL |     if s.starts_with(\"ab\") {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::manual-strip` implied by `-D warnings`\n help: try using the `strip_prefix` method\n    |\n LL ~     if let Some(<stripped>) = s.strip_prefix(\"ab\") {"}, {"sha": "d44403a84a5640101fabaa1b1ae45093263894c0", "filename": "tests/ui/map_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmap_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmap_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `map_err(|_|...` wildcard pattern discards the original error\n LL |     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n    |                                ^^^\n    |\n-   = note: `-D clippy::map-err-ignore` implied by `-D warnings`\n    = help: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\n+   = note: `-D clippy::map-err-ignore` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "a72becbeb669bb739cb1b09eeb26ce8c4fa48573", "filename": "tests/ui/match_overlapping_arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmatch_overlapping_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmatch_overlapping_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: some ranges overlap\n LL |         0..=10 => println!(\"0..=10\"),\n    |         ^^^^^^\n    |\n-   = note: `-D clippy::match-overlapping-arm` implied by `-D warnings`\n note: overlaps with this\n   --> $DIR/match_overlapping_arm.rs:14:9\n    |\n LL |         0..=11 => println!(\"0..=11\"),\n    |         ^^^^^^\n+   = note: `-D clippy::match-overlapping-arm` implied by `-D warnings`\n \n error: some ranges overlap\n   --> $DIR/match_overlapping_arm.rs:19:9"}, {"sha": "db85b5964e8426a70dbef21c41dd7102faa27096", "filename": "tests/ui/match_same_arms.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmatch_same_arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmatch_same_arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,13 +4,13 @@ error: this match arm has an identical body to the `_` wildcard arm\n LL |         Abc::A => 0,\n    |         ^^^^^^^^^^^ help: try removing the arm\n    |\n-   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n    = help: or try changing either arm body\n note: `_` wildcard arm here\n   --> $DIR/match_same_arms.rs:13:9\n    |\n LL |         _ => 0, //~ ERROR match arms have same body\n    |         ^^^^^^\n+   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n \n error: this match arm has an identical body to another arm\n   --> $DIR/match_same_arms.rs:17:9"}, {"sha": "b260155d21890ebcb42ec3be22d11db3765bdeb8", "filename": "tests/ui/match_same_arms2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmatch_same_arms2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmatch_same_arms2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -10,7 +10,6 @@ LL | |             a\n LL | |         },\n    | |_________^ help: try removing the arm\n    |\n-   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n    = help: or try changing either arm body\n note: `_` wildcard arm here\n   --> $DIR/match_same_arms2.rs:20:9\n@@ -23,6 +22,7 @@ LL | |             let mut a = 42 + [23].len() as i32;\n LL | |             a\n LL | |         },\n    | |_________^\n+   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n \n error: this match arm has an identical body to another arm\n   --> $DIR/match_same_arms2.rs:34:9"}, {"sha": "525533bf07bb08958a977db61f19770c2ad2c58a", "filename": "tests/ui/match_wild_err_arm.edition2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `Err(_)` matches all errors\n LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n    |\n-   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n    = note: match each error separately or use the error output, or use `.expect(msg)` if the error case is unreachable\n+   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n \n error: `Err(_)` matches all errors\n   --> $DIR/match_wild_err_arm.rs:20:9"}, {"sha": "525533bf07bb08958a977db61f19770c2ad2c58a", "filename": "tests/ui/match_wild_err_arm.edition2021.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `Err(_)` matches all errors\n LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n    |\n-   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n    = note: match each error separately or use the error output, or use `.expect(msg)` if the error case is unreachable\n+   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n \n error: `Err(_)` matches all errors\n   --> $DIR/match_wild_err_arm.rs:20:9"}, {"sha": "6e749d2741c464850dd10e9c57100c1d0a447322", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: stripping a prefix manually\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n   --> $DIR/min_rust_version_attr.rs:203:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::manual-strip` implied by `-D warnings`\n help: try using the `strip_prefix` method\n    |\n LL ~         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {"}, {"sha": "9822c77c9dfea8ef9c4fda5984d2ff09ca1aaa03", "filename": "tests/ui/mismatched_target_os_unix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmismatched_target_os_unix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmismatched_target_os_unix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os_unix.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,8 +6,8 @@ LL | #[cfg(linux)]\n    |       |\n    |       help: try: `target_os = \"linux\"`\n    |\n-   = note: `-D clippy::mismatched-target-os` implied by `-D warnings`\n    = help: did you mean `unix`?\n+   = note: `-D clippy::mismatched-target-os` implied by `-D warnings`\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:9:1"}, {"sha": "204d4990557740d6d628fa4290f0445ec6947132", "filename": "tests/ui/mismatching_type_param_order.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmismatching_type_param_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmismatching_type_param_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatching_type_param_order.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `Foo` has a similarly named generic type parameter `B` in its declaration\n LL |     impl<B, A> Foo<B, A> {}\n    |                    ^\n    |\n-   = note: `-D clippy::mismatching-type-param-order` implied by `-D warnings`\n    = help: try `A`, or a name that does not conflict with `Foo`'s generic params\n+   = note: `-D clippy::mismatching-type-param-order` implied by `-D warnings`\n \n error: `Foo` has a similarly named generic type parameter `A` in its declaration, but in a different order\n   --> $DIR/mismatching_type_param_order.rs:11:23"}, {"sha": "c9ded7f1ad03e2296771cf9e16f9642ed228ef20", "filename": "tests/ui/missing_panics_doc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmissing_panics_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmissing_panics_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_panics_doc.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,12 +7,12 @@ LL | |     result.unwrap()\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::missing-panics-doc` implied by `-D warnings`\n note: first possible panic found here\n   --> $DIR/missing_panics_doc.rs:8:5\n    |\n LL |     result.unwrap()\n    |     ^^^^^^^^^^^^^^^\n+   = note: `-D clippy::missing-panics-doc` implied by `-D warnings`\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:12:1"}, {"sha": "8cc68b0ac7b4352d3663ad35b605cedc6dd92a10", "filename": "tests/ui/mixed_read_write_in_expression.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmixed_read_write_in_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmixed_read_write_in_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmixed_read_write_in_expression.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: unsequenced read of `x`\n LL |     } + x;\n    |         ^\n    |\n-   = note: `-D clippy::mixed-read-write-in-expression` implied by `-D warnings`\n note: whether read occurs before this write depends on evaluation order\n   --> $DIR/mixed_read_write_in_expression.rs:12:9\n    |\n LL |         x = 1;\n    |         ^^^^^\n+   = note: `-D clippy::mixed-read-write-in-expression` implied by `-D warnings`\n \n error: unsequenced read of `x`\n   --> $DIR/mixed_read_write_in_expression.rs:17:5"}, {"sha": "36106de31f0bcb3700dbf2051fb32b1ef2cfa0ad", "filename": "tests/ui/modulo_arithmetic_float.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmodulo_arithmetic_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmodulo_arithmetic_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_float.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: you are using modulo operator on constants with different signs: `-1.600\n LL |     -1.6 % 2.1;\n    |     ^^^^^^^^^^\n    |\n-   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n    = note: double check for expected result especially when interoperating with different languages\n+   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n \n error: you are using modulo operator on constants with different signs: `1.600 % -2.100`\n   --> $DIR/modulo_arithmetic_float.rs:7:5"}, {"sha": "9ff676ff6bcb1a34c3dfa9786372676247eca19e", "filename": "tests/ui/modulo_arithmetic_integral.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmodulo_arithmetic_integral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmodulo_arithmetic_integral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,9 +4,9 @@ error: you are using modulo operator on types that might have different signs\n LL |     a % b;\n    |     ^^^^^\n    |\n-   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n    = note: double check for expected result especially when interoperating with different languages\n    = note: or consider using `rem_euclid` or similar function\n+   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n \n error: you are using modulo operator on types that might have different signs\n   --> $DIR/modulo_arithmetic_integral.rs:9:5"}, {"sha": "1453d44f488f3d9fb639a739abf5f19599c6ee03", "filename": "tests/ui/modulo_arithmetic_integral_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,9 +4,9 @@ error: you are using modulo operator on constants with different signs: `-1 % 2`\n LL |     -1 % 2;\n    |     ^^^^^^\n    |\n-   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n    = note: double check for expected result especially when interoperating with different languages\n    = note: or consider using `rem_euclid` or similar function\n+   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n   --> $DIR/modulo_arithmetic_integral_const.rs:12:5"}, {"sha": "c20ff54bf949b03a75f67fc6aab601d6464724cb", "filename": "tests/ui/mut_from_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmut_from_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmut_from_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: mutable borrow from immutable input(s)\n LL |     fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n    |                                       ^^^^^^^^\n    |\n-   = note: `-D clippy::mut-from-ref` implied by `-D warnings`\n note: immutable borrow here\n   --> $DIR/mut_from_ref.rs:7:29\n    |\n LL |     fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n    |                             ^^^^^\n+   = note: `-D clippy::mut-from-ref` implied by `-D warnings`\n \n error: mutable borrow from immutable input(s)\n   --> $DIR/mut_from_ref.rs:13:25"}, {"sha": "e0c8dced382efc0b390f0d07f601d817c0141b73", "filename": "tests/ui/mut_range_bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmut_range_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fmut_range_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: attempt to mutate range bound within loop\n LL |         m = 5;\n    |         ^\n    |\n-   = note: `-D clippy::mut-range-bound` implied by `-D warnings`\n    = note: the range of the loop is unchanged\n+   = note: `-D clippy::mut-range-bound` implied by `-D warnings`\n \n error: attempt to mutate range bound within loop\n   --> $DIR/mut_range_bound.rs:15:9"}, {"sha": "005ba010f34f7e747d41de1627e7d930ea2c0692", "filename": "tests/ui/needless_continue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fneedless_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fneedless_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,7 +7,6 @@ LL | |             continue;\n LL | |         }\n    | |_________^\n    |\n-   = note: `-D clippy::needless-continue` implied by `-D warnings`\n    = help: consider dropping the `else` clause and merging the code that follows (in the loop) with the `if` block\n                    if i % 2 == 0 && i % 3 == 0 {\n                        println!(\"{}\", i);\n@@ -33,6 +32,7 @@ LL | |         }\n                        }\n                        println!(\"bleh\");\n                    }\n+   = note: `-D clippy::needless-continue` implied by `-D warnings`\n \n error: there is no need for an explicit `else` block for this `if` expression\n   --> $DIR/needless_continue.rs:44:9"}, {"sha": "e912b59a6e7b0a9324a87a49c1309567077b255a", "filename": "tests/ui/non_send_fields_in_send_ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,13 +4,13 @@ error: some fields in `RingBuffer<T>` are not safe to be sent to another thread\n LL | unsafe impl<T> Send for RingBuffer<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n note: it is not safe to send field `data` to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:12:5\n    |\n LL |     data: Vec<UnsafeCell<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameter `T` that satisfy `Vec<UnsafeCell<T>>: Send`\n+   = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n \n error: some fields in `MvccRwLock<T>` are not safe to be sent to another thread\n   --> $DIR/non_send_fields_in_send_ty.rs:25:1"}, {"sha": "295dc1798e36d140e889d14832b78c609009147a", "filename": "tests/ui/octal_escapes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Foctal_escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Foctal_escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foctal_escapes.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: octal-looking escape in string literal\n LL |     let _bad1 = \"/033[0m\";\n    |                 ^^^^^^^^^\n    |\n-   = note: `-D clippy::octal-escapes` implied by `-D warnings`\n    = help: octal escapes are not supported, `/0` is always a null character\n+   = note: `-D clippy::octal-escapes` implied by `-D warnings`\n help: if an octal escape was intended, use the hexadecimal representation instead\n    |\n LL |     let _bad1 = \"/x1b[0m\";"}, {"sha": "6c40adbb53dc269629827a6f18cb204bfe5525aa", "filename": "tests/ui/ok_expect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fok_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fok_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: called `ok().expect()` on a `Result` value\n LL |     res.ok().expect(\"disaster!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::ok-expect` implied by `-D warnings`\n    = help: you can call `expect()` directly on the `Result`\n+   = note: `-D clippy::ok-expect` implied by `-D warnings`\n \n error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:20:5"}, {"sha": "571e5c4b5faa95eea1527d3704ec4760d410972f", "filename": "tests/ui/only_used_in_recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fonly_used_in_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fonly_used_in_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fonly_used_in_recursion.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: parameter is only used in recursion\n LL | fn _one_unused(flag: u32, a: usize) -> usize {\n    |                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n    |\n-   = note: `-D clippy::only-used-in-recursion` implied by `-D warnings`\n note: parameter used here\n   --> $DIR/only_used_in_recursion.rs:12:53\n    |\n LL |     if flag == 0 { 0 } else { _one_unused(flag - 1, a) }\n    |                                                     ^\n+   = note: `-D clippy::only-used-in-recursion` implied by `-D warnings`\n \n error: parameter is only used in recursion\n   --> $DIR/only_used_in_recursion.rs:15:27"}, {"sha": "8dcbfdd612ef2f318e7f49339ab5d8411d78ea0f", "filename": "tests/ui/only_used_in_recursion2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fonly_used_in_recursion2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fonly_used_in_recursion2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fonly_used_in_recursion2.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: parameter is only used in recursion\n LL | fn _with_inner(flag: u32, a: u32, b: u32) -> usize {\n    |                                   ^ help: if this is intentional, prefix it with an underscore: `_b`\n    |\n-   = note: `-D clippy::only-used-in-recursion` implied by `-D warnings`\n note: parameter used here\n   --> $DIR/only_used_in_recursion2.rs:9:52\n    |\n LL |     if flag == 0 { 0 } else { _with_inner(flag, a, b + x) }\n    |                                                    ^\n+   = note: `-D clippy::only-used-in-recursion` implied by `-D warnings`\n \n error: parameter is only used in recursion\n   --> $DIR/only_used_in_recursion2.rs:4:25"}, {"sha": "bc188a07e9e0a9a3695479ed39c23cee750f93ca", "filename": "tests/ui/option_env_unwrap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Foption_env_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Foption_env_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: this will panic at run-time if the environment variable doesn't exist at\n LL |     let _ = option_env!(\"PATH\").unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::option-env-unwrap` implied by `-D warnings`\n    = help: consider using the `env!` macro instead\n+   = note: `-D clippy::option-env-unwrap` implied by `-D warnings`\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n   --> $DIR/option_env_unwrap.rs:19:13"}, {"sha": "e989f2ece308048de8ca3ae34a54bbdd2b926f82", "filename": "tests/ui/overly_complex_bool_expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Foverly_complex_bool_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Foverly_complex_bool_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverly_complex_bool_expr.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: this boolean expression contains a logic bug\n LL |     let _ = a && b || a;\n    |             ^^^^^^^^^^^ help: it would look like the following: `a`\n    |\n-   = note: `-D clippy::overly-complex-bool-expr` implied by `-D warnings`\n help: this expression can be optimized out by applying boolean operations to the outer expression\n   --> $DIR/overly_complex_bool_expr.rs:11:18\n    |\n LL |     let _ = a && b || a;\n    |                  ^\n+   = note: `-D clippy::overly-complex-bool-expr` implied by `-D warnings`\n \n error: this boolean expression contains a logic bug\n   --> $DIR/overly_complex_bool_expr.rs:13:13"}, {"sha": "97787bc84e2c57cc25a937f9a96dfcdbefac9d23", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,13 +7,13 @@ LL | |         panic!(\"error\");\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:8:9\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^\n+   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:11:5"}, {"sha": "eb0aacbb6a4417eab2ce004ab9e5b7b754db0082", "filename": "tests/ui/panic_in_result_fn_assertions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,13 +8,13 @@ LL | |         Ok(true)\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn_assertions.rs:9:9\n    |\n LL |         assert!(x == 5, \"wrong argument\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn_assertions.rs:13:5"}, {"sha": "87fb243b65efd7e10814f8dafbd39e848a592998", "filename": "tests/ui/pattern_type_mismatch/mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpattern_type_mismatch%2Fmutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpattern_type_mismatch%2Fmutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern_type_mismatch%2Fmutability.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: type of pattern does not match the expression type\n LL |         Some(_) => (),\n    |         ^^^^^^^\n    |\n-   = note: `-D clippy::pattern-type-mismatch` implied by `-D warnings`\n    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings\n+   = note: `-D clippy::pattern-type-mismatch` implied by `-D warnings`\n \n error: type of pattern does not match the expression type\n   --> $DIR/mutability.rs:15:9"}, {"sha": "a91b5ac6cf742722b122f605d4ced009a1c3c1a2", "filename": "tests/ui/pattern_type_mismatch/pattern_alternatives.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpattern_type_mismatch%2Fpattern_alternatives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpattern_type_mismatch%2Fpattern_alternatives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern_type_mismatch%2Fpattern_alternatives.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: type of pattern does not match the expression type\n LL |     if let Value::B | Value::A(_) = ref_value {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::pattern-type-mismatch` implied by `-D warnings`\n    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings\n+   = note: `-D clippy::pattern-type-mismatch` implied by `-D warnings`\n \n error: type of pattern does not match the expression type\n   --> $DIR/pattern_alternatives.rs:16:34"}, {"sha": "8bc5c63baab5b6d0b7aa0c31a6104c00b918d8b7", "filename": "tests/ui/pattern_type_mismatch/pattern_structs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpattern_type_mismatch%2Fpattern_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpattern_type_mismatch%2Fpattern_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern_type_mismatch%2Fpattern_structs.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: type of pattern does not match the expression type\n LL |     let Struct { .. } = ref_value;\n    |         ^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::pattern-type-mismatch` implied by `-D warnings`\n    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings\n+   = note: `-D clippy::pattern-type-mismatch` implied by `-D warnings`\n \n error: type of pattern does not match the expression type\n   --> $DIR/pattern_structs.rs:14:33"}, {"sha": "a1ef540d28313a5c559546b3d95f836d874cfee7", "filename": "tests/ui/pattern_type_mismatch/pattern_tuples.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpattern_type_mismatch%2Fpattern_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpattern_type_mismatch%2Fpattern_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern_type_mismatch%2Fpattern_tuples.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: type of pattern does not match the expression type\n LL |     let TupleStruct(_) = ref_value;\n    |         ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::pattern-type-mismatch` implied by `-D warnings`\n    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings\n+   = note: `-D clippy::pattern-type-mismatch` implied by `-D warnings`\n \n error: type of pattern does not match the expression type\n   --> $DIR/pattern_tuples.rs:12:25"}, {"sha": "f56a3a893801bf1d0de66e5a280c9b3b7fc69ced", "filename": "tests/ui/pattern_type_mismatch/syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: type of pattern does not match the expression type\n LL |         Some(_) => (),\n    |         ^^^^^^^\n    |\n-   = note: `-D clippy::pattern-type-mismatch` implied by `-D warnings`\n    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings\n+   = note: `-D clippy::pattern-type-mismatch` implied by `-D warnings`\n \n error: type of pattern does not match the expression type\n   --> $DIR/syntax.rs:30:12"}, {"sha": "c795f6ad0d25fb575da637a8a361e1e768832c23", "filename": "tests/ui/proc_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fproc_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fproc_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc_macro.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: approximate value of `f{32, 64}::consts::PI` found\n LL |     let _x = 3.14;\n    |              ^^^^\n    |\n-   = note: `#[deny(clippy::approx_constant)]` on by default\n    = help: consider using the constant directly\n+   = note: `#[deny(clippy::approx_constant)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "ba4ee732c05c45235d29ec25f9a447f88ce4a8f3", "filename": "tests/ui/pub_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpub_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fpub_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpub_use.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: using `pub use`\n LL |     pub use inner::Test;\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::pub-use` implied by `-D warnings`\n    = help: move the exported item to a public module instead\n+   = note: `-D clippy::pub-use` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "7814f5b54036bf9d07646880408aa163c918736a", "filename": "tests/ui/rc_clone_in_vec_init/arc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: initializing a reference-counted pointer in `vec![elem; len]`\n LL |     let v = vec![Arc::new(\"x\".to_string()); 2];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n    = note: each element will point to the same `Arc` instance\n+   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n help: consider initializing each `Arc` element individually\n    |\n LL ~     let v = {"}, {"sha": "80deb7cb9f24d9a47b91a782dd30eec72b8d6e04", "filename": "tests/ui/rc_clone_in_vec_init/rc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: initializing a reference-counted pointer in `vec![elem; len]`\n LL |     let v = vec![Rc::new(\"x\".to_string()); 2];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n    = note: each element will point to the same `Rc` instance\n+   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n help: consider initializing each `Rc` element individually\n    |\n LL ~     let v = {"}, {"sha": "789e14a302f6fa6635dc158d9cad8fd6b68ed367", "filename": "tests/ui/rc_clone_in_vec_init/weak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Frc_clone_in_vec_init%2Fweak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Frc_clone_in_vec_init%2Fweak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_clone_in_vec_init%2Fweak.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: initializing a reference-counted pointer in `vec![elem; len]`\n LL |     let v = vec![SyncWeak::<u32>::new(); 2];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n    = note: each element will point to the same `Weak` instance\n+   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n help: consider initializing each `Weak` element individually\n    |\n LL ~     let v = {"}, {"sha": "cee3bd8b224dc7ac8e10d4be926eb8004fdc52c6", "filename": "tests/ui/rc_mutex.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Frc_mutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Frc_mutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: usage of `Rc<Mutex<_>>`\n LL |     foo: Rc<Mutex<i32>>,\n    |          ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::rc-mutex` implied by `-D warnings`\n    = help: consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n+   = note: `-D clippy::rc-mutex` implied by `-D warnings`\n \n error: usage of `Rc<Mutex<_>>`\n   --> $DIR/rc_mutex.rs:26:18"}, {"sha": "e0826fefa6cfb01b0effeadaba29d419a9a024c7", "filename": "tests/ui/redundant_allocation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fredundant_allocation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fredundant_allocation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,9 +4,9 @@ error: usage of `Box<Rc<T>>`\n LL |     pub fn box_test6<T>(foo: Box<Rc<T>>) {}\n    |                              ^^^^^^^^^^\n    |\n-   = note: `-D clippy::redundant-allocation` implied by `-D warnings`\n    = note: `Rc<T>` is already on the heap, `Box<Rc<T>>` makes an extra allocation\n    = help: consider using just `Box<T>` or `Rc<T>`\n+   = note: `-D clippy::redundant-allocation` implied by `-D warnings`\n \n error: usage of `Box<Arc<T>>`\n   --> $DIR/redundant_allocation.rs:19:30"}, {"sha": "8dd4a6a268749b00cc43b27dfe83aca02a5319cf", "filename": "tests/ui/redundant_allocation_fixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fredundant_allocation_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fredundant_allocation_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation_fixable.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: usage of `Box<&T>`\n LL |     pub fn box_test1<T>(foo: Box<&T>) {}\n    |                              ^^^^^^^ help: try: `&T`\n    |\n-   = note: `-D clippy::redundant-allocation` implied by `-D warnings`\n    = note: `&T` is already a pointer, `Box<&T>` allocates a pointer on the heap\n+   = note: `-D clippy::redundant-allocation` implied by `-D warnings`\n \n error: usage of `Box<&MyStruct>`\n   --> $DIR/redundant_allocation_fixable.rs:28:27"}, {"sha": "782590034d051cb07c2486e07983958809029a77", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: redundant clone\n LL |     let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n    |                                          ^^^^^^^^^^^^ help: remove this\n    |\n-   = note: `-D clippy::redundant-clone` implied by `-D warnings`\n note: this value is dropped without further use\n   --> $DIR/redundant_clone.rs:10:14\n    |\n LL |     let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::redundant-clone` implied by `-D warnings`\n \n error: redundant clone\n   --> $DIR/redundant_clone.rs:13:15"}, {"sha": "de9d00a60246c1853eee48a0528bba6af068f4c5", "filename": "tests/ui/redundant_else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fredundant_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fredundant_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_else.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,8 +7,8 @@ LL | |             println!(\"yet don't pull down your hedge.\");\n LL | |         }\n    | |_________^\n    |\n-   = note: `-D clippy::redundant-else` implied by `-D warnings`\n    = help: remove the `else` block and move the contents out\n+   = note: `-D clippy::redundant-else` implied by `-D warnings`\n \n error: redundant else block\n   --> $DIR/redundant_else.rs:17:16"}, {"sha": "23f08103f358fc573fedd169ea182f44cac5f27d", "filename": "tests/ui/redundant_pattern_matching_drop_order.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fredundant_pattern_matching_drop_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fredundant_pattern_matching_drop_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_drop_order.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,9 +4,9 @@ error: redundant pattern matching, consider using `is_ok()`\n LL |     if let Ok(_) = m.lock() {}\n    |     -------^^^^^----------- help: try this: `if m.lock().is_ok()`\n    |\n-   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n    = note: this will change drop order of the result, as well as all temporaries\n    = note: add `#[allow(clippy::redundant_pattern_matching)]` if this is important\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n   --> $DIR/redundant_pattern_matching_drop_order.rs:13:12"}, {"sha": "2424644c6f6b14ea478439d6869d2b54c34820c7", "filename": "tests/ui/regex.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: trivial regex\n LL |     let pipe_in_wrong_position = Regex::new(\"|\");\n    |                                             ^^^\n    |\n-   = note: `-D clippy::trivial-regex` implied by `-D warnings`\n    = help: the regex is unlikely to be useful as it is\n+   = note: `-D clippy::trivial-regex` implied by `-D warnings`\n \n error: trivial regex\n   --> $DIR/regex.rs:14:60"}, {"sha": "e15633fb1a136c54da39287e22783fa6d4909da9", "filename": "tests/ui/rest_pat_in_fully_bound_structs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Frest_pat_in_fully_bound_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Frest_pat_in_fully_bound_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frest_pat_in_fully_bound_structs.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: unnecessary use of `..` pattern in struct binding. All fields were alread\n LL |         A { a: 5, b: 42, c: \"\", .. } => {}, // Lint\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::rest-pat-in-fully-bound-structs` implied by `-D warnings`\n    = help: consider removing `..` from this binding\n+   = note: `-D clippy::rest-pat-in-fully-bound-structs` implied by `-D warnings`\n \n error: unnecessary use of `..` pattern in struct binding. All fields were already bound\n   --> $DIR/rest_pat_in_fully_bound_structs.rs:23:9"}, {"sha": "bea101fe20bf25759c252e6ff7e911e1130c2855", "filename": "tests/ui/result_large_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fresult_large_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fresult_large_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_large_err.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: the `Err`-variant returned from this function is very large\n LL | pub fn large_err() -> Result<(), [u8; 512]> {\n    |                       ^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 512 bytes\n    |\n-   = note: `-D clippy::result-large-err` implied by `-D warnings`\n    = help: try reducing the size of `[u8; 512]`, for example by boxing large elements or replacing it with `Box<[u8; 512]>`\n+   = note: `-D clippy::result-large-err` implied by `-D warnings`\n \n error: the `Err`-variant returned from this function is very large\n   --> $DIR/result_large_err.rs:19:21"}, {"sha": "8393a4bf03bc02584e0247334dd01e0e899676be", "filename": "tests/ui/result_unit_error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fresult_unit_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fresult_unit_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_unit_error.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: this returns a `Result<_, ()>`\n LL | pub fn returns_unit_error() -> Result<u32, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::result-unit-err` implied by `-D warnings`\n    = help: use a custom `Error` type instead\n+   = note: `-D clippy::result-unit-err` implied by `-D warnings`\n \n error: this returns a `Result<_, ()>`\n   --> $DIR/result_unit_error.rs:12:5"}, {"sha": "34932fe1c2c557f3dbdd6630e9852af731da4627", "filename": "tests/ui/return_self_not_must_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Freturn_self_not_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Freturn_self_not_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn_self_not_must_use.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: missing `#[must_use]` attribute on a method returning `Self`\n LL |     fn what(&self) -> Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::return-self-not-must-use` implied by `-D warnings`\n    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type\n+   = note: `-D clippy::return-self-not-must-use` implied by `-D warnings`\n \n error: missing `#[must_use]` attribute on a method returning `Self`\n   --> $DIR/return_self_not_must_use.rs:18:5"}, {"sha": "3901546cbd65c66981f25390debeeef723702a47", "filename": "tests/ui/same_functions_in_if_condition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: this `if` has the same function call as a previous `if`\n LL |     } else if function() {\n    |               ^^^^^^^^^^\n    |\n-   = note: `-D clippy::same-functions-in-if-condition` implied by `-D warnings`\n note: same as this\n   --> $DIR/same_functions_in_if_condition.rs:30:8\n    |\n LL |     if function() {\n    |        ^^^^^^^^^^\n+   = note: `-D clippy::same-functions-in-if-condition` implied by `-D warnings`\n \n error: this `if` has the same function call as a previous `if`\n   --> $DIR/same_functions_in_if_condition.rs:36:15"}, {"sha": "1d1254d9fcc619910878aa863fa1b8ce87b7a83d", "filename": "tests/ui/same_item_push.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsame_item_push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsame_item_push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: it looks like the same item is being pushed into this Vec\n LL |         vec.push(item);\n    |         ^^^\n    |\n-   = note: `-D clippy::same-item-push` implied by `-D warnings`\n    = help: try using vec![item;SIZE] or vec.resize(NEW_SIZE, item)\n+   = note: `-D clippy::same-item-push` implied by `-D warnings`\n \n error: it looks like the same item is being pushed into this Vec\n   --> $DIR/same_item_push.rs:29:9"}, {"sha": "0c6908c09593fccf15414bcef8c78bf854eacb3f", "filename": "tests/ui/same_name_method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsame_name_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsame_name_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_name_method.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: method's name is the same as an existing method in a trait\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n-   = note: `-D clippy::same-name-method` implied by `-D warnings`\n note: existing `foo` defined here\n   --> $DIR/same_name_method.rs:25:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n+   = note: `-D clippy::same-name-method` implied by `-D warnings`\n \n error: method's name is the same as an existing method in a trait\n   --> $DIR/same_name_method.rs:35:13"}, {"sha": "6bea8c6747797134688617eae1cfd865333574a4", "filename": "tests/ui/search_is_some.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsearch_is_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsearch_is_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -8,8 +8,8 @@ LL | |                           }\n LL | |                    ).is_some();\n    | |______________________________^\n    |\n-   = note: `-D clippy::search-is-some` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `any()`\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n \n error: called `is_some()` after searching an `Iterator` with `position`\n   --> $DIR/search_is_some.rs:20:13"}, {"sha": "c3d7bc2a5360f48455211908e3cc610c2cd4c0cf", "filename": "tests/ui/shadow.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: `x` is shadowed by itself in `x`\n LL |     let x = x;\n    |         ^\n    |\n-   = note: `-D clippy::shadow-same` implied by `-D warnings`\n note: previous binding is here\n   --> $DIR/shadow.rs:5:9\n    |\n LL |     let x = 1;\n    |         ^\n+   = note: `-D clippy::shadow-same` implied by `-D warnings`\n \n error: `mut x` is shadowed by itself in `&x`\n   --> $DIR/shadow.rs:7:13\n@@ -53,12 +53,12 @@ error: `x` is shadowed\n LL |     let x = x.0;\n    |         ^\n    |\n-   = note: `-D clippy::shadow-reuse` implied by `-D warnings`\n note: previous binding is here\n   --> $DIR/shadow.rs:13:9\n    |\n LL |     let x = ([[0]], ());\n    |         ^\n+   = note: `-D clippy::shadow-reuse` implied by `-D warnings`\n \n error: `x` is shadowed\n   --> $DIR/shadow.rs:15:9\n@@ -150,12 +150,12 @@ error: `x` shadows a previous, unrelated binding\n LL |     let x = 2;\n    |         ^\n    |\n-   = note: `-D clippy::shadow-unrelated` implied by `-D warnings`\n note: previous binding is here\n   --> $DIR/shadow.rs:30:9\n    |\n LL |     let x = 1;\n    |         ^\n+   = note: `-D clippy::shadow-unrelated` implied by `-D warnings`\n \n error: `x` shadows a previous, unrelated binding\n   --> $DIR/shadow.rs:36:13"}, {"sha": "d2f41e3f934a7e8bae653dceba456a6ee6dae7d4", "filename": "tests/ui/should_impl_trait/method_list_1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,8 +6,8 @@ LL | |         unimplemented!()\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n    = help: consider implementing the trait `std::ops::Add` or choosing a less ambiguous method name\n+   = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: method `as_mut` can be confused for the standard trait method `std::convert::AsMut::as_mut`\n   --> $DIR/method_list_1.rs:29:5"}, {"sha": "10bfea68ff572a64b441db22ae8c26265c3bb948", "filename": "tests/ui/should_impl_trait/method_list_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,8 +6,8 @@ LL | |         unimplemented!()\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n    = help: consider implementing the trait `std::cmp::PartialEq` or choosing a less ambiguous method name\n+   = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: method `from_iter` can be confused for the standard trait method `std::iter::FromIterator::from_iter`\n   --> $DIR/method_list_2.rs:30:5"}, {"sha": "f1ed808ba087254d7409af799431a8b091334bb0", "filename": "tests/ui/significant_drop_in_scrutinee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -10,8 +10,8 @@ LL |             mutex.lock().unwrap().bar();\n LL |     };\n    |      - temporary lives until here\n    |\n-   = note: `-D clippy::significant-drop-in-scrutinee` implied by `-D warnings`\n    = note: this might lead to deadlocks or other unexpected behavior\n+   = note: `-D clippy::significant-drop-in-scrutinee` implied by `-D warnings`\n help: try moving the temporary above the match\n    |\n LL ~     let value = mutex.lock().unwrap().foo();"}, {"sha": "43c5cee4b4577c648bbf8934213f534808880330", "filename": "tests/ui/similar_names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsimilar_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsimilar_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimilar_names.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: binding's name is too similar to existing binding\n LL |     let bpple: i32;\n    |         ^^^^^\n    |\n-   = note: `-D clippy::similar-names` implied by `-D warnings`\n note: existing binding defined here\n   --> $DIR/similar_names.rs:19:9\n    |\n LL |     let apple: i32;\n    |         ^^^^^\n+   = note: `-D clippy::similar-names` implied by `-D warnings`\n \n error: binding's name is too similar to existing binding\n   --> $DIR/similar_names.rs:23:9"}, {"sha": "bfe6d44b5898d774c7e127c2b5508fb702865f45", "filename": "tests/ui/single_char_lifetime_names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsingle_char_lifetime_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsingle_char_lifetime_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_lifetime_names.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: single-character lifetime names are likely uninformative\n LL | struct DiagnosticCtx<'a, 'b>\n    |                      ^^\n    |\n-   = note: `-D clippy::single-char-lifetime-names` implied by `-D warnings`\n    = help: use a more informative name\n+   = note: `-D clippy::single-char-lifetime-names` implied by `-D warnings`\n \n error: single-character lifetime names are likely uninformative\n   --> $DIR/single_char_lifetime_names.rs:5:26"}, {"sha": "633546f6419a2f65cdea5d65e415bb90179e0fcc", "filename": "tests/ui/single_component_path_imports_nested_first.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: this import is redundant\n LL |     use {regex, serde};\n    |          ^^^^^\n    |\n-   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n    = help: remove this import\n+   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n \n error: this import is redundant\n   --> $DIR/single_component_path_imports_nested_first.rs:13:17"}, {"sha": "037f695f3ee9194ba70dd9b2746c46c0937da03f", "filename": "tests/ui/size_of_in_element_count/expressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: found a count of bytes instead of a count of elements of `T`\n LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n    |                                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::size-of-in-element-count` implied by `-D warnings`\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+   = note: `-D clippy::size-of-in-element-count` implied by `-D warnings`\n \n error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/expressions.rs:18:62"}, {"sha": "4351e6a14fe58214553e30cc5f8396f052b37546", "filename": "tests/ui/size_of_in_element_count/functions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: found a count of bytes instead of a count of elements of `T`\n LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                                    ^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::size-of-in-element-count` implied by `-D warnings`\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+   = note: `-D clippy::size-of-in-element-count` implied by `-D warnings`\n \n error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/functions.rs:19:62"}, {"sha": "7308ab4e55c9c3199b92aae84d784179f2a0e49b", "filename": "tests/ui/skip_while_next.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fskip_while_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fskip_while_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fskip_while_next.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: called `skip_while(<p>).next()` on an `Iterator`\n LL |     let _ = v.iter().skip_while(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::skip-while-next` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `.find(!<p>)` instead\n+   = note: `-D clippy::skip-while-next` implied by `-D warnings`\n \n error: called `skip_while(<p>).next()` on an `Iterator`\n   --> $DIR/skip_while_next.rs:17:13"}, {"sha": "1432fdcff77adefe5c8f0f95cd41eab235c6858b", "filename": "tests/ui/stable_sort_primitive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fstable_sort_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fstable_sort_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstable_sort_primitive.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: used `sort` on primitive type `i32`\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n    |\n-   = note: `-D clippy::stable-sort-primitive` implied by `-D warnings`\n    = note: an unstable sort typically performs faster without any observable difference for this data type\n+   = note: `-D clippy::stable-sort-primitive` implied by `-D warnings`\n \n error: used `sort` on primitive type `bool`\n   --> $DIR/stable_sort_primitive.rs:9:5"}, {"sha": "8138ccb82a000dc3ae947f21d96fb1ea35ccad95", "filename": "tests/ui/std_instead_of_core.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fstd_instead_of_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fstd_instead_of_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstd_instead_of_core.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: used import from `std` instead of `core`\n LL |     use std::hash::Hasher;\n    |         ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::std-instead-of-core` implied by `-D warnings`\n    = help: consider importing the item from `core`\n+   = note: `-D clippy::std-instead-of-core` implied by `-D warnings`\n \n error: used import from `std` instead of `core`\n   --> $DIR/std_instead_of_core.rs:11:9\n@@ -69,8 +69,8 @@ error: used import from `std` instead of `alloc`\n LL |     use std::vec;\n    |         ^^^^^^^^\n    |\n-   = note: `-D clippy::std-instead-of-alloc` implied by `-D warnings`\n    = help: consider importing the item from `alloc`\n+   = note: `-D clippy::std-instead-of-alloc` implied by `-D warnings`\n \n error: used import from `std` instead of `alloc`\n   --> $DIR/std_instead_of_core.rs:33:9\n@@ -86,8 +86,8 @@ error: used import from `alloc` instead of `core`\n LL |     use alloc::slice::from_ref;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::alloc-instead-of-core` implied by `-D warnings`\n    = help: consider importing the item from `core`\n+   = note: `-D clippy::alloc-instead-of-core` implied by `-D warnings`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "1d47da571fa1f370bb07fd6526f042a272669f0b", "filename": "tests/ui/str_to_string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fstr_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fstr_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstr_to_string.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `to_string()` called on a `&str`\n LL |     let hello = \"hello world\".to_string();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::str-to-string` implied by `-D warnings`\n    = help: consider using `.to_owned()`\n+   = note: `-D clippy::str-to-string` implied by `-D warnings`\n \n error: `to_string()` called on a `&str`\n   --> $DIR/str_to_string.rs:6:5"}, {"sha": "e304c3e346db1b29a2bb3dd868e5d0fefff96c64", "filename": "tests/ui/string_to_string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fstring_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fstring_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_to_string.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `to_string()` called on a `String`\n LL |     let mut v = message.to_string();\n    |                 ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::string-to-string` implied by `-D warnings`\n    = help: consider using `.clone()`\n+   = note: `-D clippy::string-to-string` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "e4d50043acb0bb9ed047104c85a838e28b3416e4", "filename": "tests/ui/struct_excessive_bools.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fstruct_excessive_bools.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fstruct_excessive_bools.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstruct_excessive_bools.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -9,8 +9,8 @@ LL | |     d: bool,\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::struct-excessive-bools` implied by `-D warnings`\n    = help: consider using a state machine or refactoring bools into two-variant enums\n+   = note: `-D clippy::struct-excessive-bools` implied by `-D warnings`\n \n error: more than 3 bools in a struct\n   --> $DIR/struct_excessive_bools.rs:38:5"}, {"sha": "2e512b47f1236396ab42b8baa08573e9274d5cc2", "filename": "tests/ui/suspicious_else_formatting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsuspicious_else_formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsuspicious_else_formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_else_formatting.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: this looks like an `else {..}` but the `else` is missing\n LL |     } {\n    |      ^\n    |\n-   = note: `-D clippy::suspicious-else-formatting` implied by `-D warnings`\n    = note: to remove this lint, add the missing `else` or add a new line before the next block\n+   = note: `-D clippy::suspicious-else-formatting` implied by `-D warnings`\n \n error: this looks like an `else if` but the `else` is missing\n   --> $DIR/suspicious_else_formatting.rs:21:6"}, {"sha": "e251674819e466ba5dfa0f2a1b93196b0985e49b", "filename": "tests/ui/suspicious_map.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsuspicious_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsuspicious_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_map.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: this call to `map()` won't have an effect on the call to `count()`\n LL |     let _ = (0..3).map(|x| x + 2).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::suspicious-map` implied by `-D warnings`\n    = help: make sure you did not confuse `map` with `filter`, `for_each` or `inspect`\n+   = note: `-D clippy::suspicious-map` implied by `-D warnings`\n \n error: this call to `map()` won't have an effect on the call to `count()`\n   --> $DIR/suspicious_map.rs:7:13"}, {"sha": "55ce63d4faa8cccb2daa3dc42cd9de3b450ab4f5", "filename": "tests/ui/suspicious_splitn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsuspicious_splitn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsuspicious_splitn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_splitn.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `splitn` called with `0` splits\n LL |     let _ = \"a,b\".splitn(0, ',');\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::suspicious-splitn` implied by `-D warnings`\n    = note: the resulting iterator will always return `None`\n+   = note: `-D clippy::suspicious-splitn` implied by `-D warnings`\n \n error: `rsplitn` called with `0` splits\n   --> $DIR/suspicious_splitn.rs:11:13"}, {"sha": "9f1289ccba0c078b9cda3af94314d9e00508d2b6", "filename": "tests/ui/suspicious_unary_op_formatting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsuspicious_unary_op_formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fsuspicious_unary_op_formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_unary_op_formatting.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: by not having a space between `>` and `-` it looks like `>-` is a single\n LL |     if a >- 30 {}\n    |         ^^^^\n    |\n-   = note: `-D clippy::suspicious-unary-op-formatting` implied by `-D warnings`\n    = help: put a space between `>` and `-` and remove the space after `-`\n+   = note: `-D clippy::suspicious-unary-op-formatting` implied by `-D warnings`\n \n error: by not having a space between `>=` and `-` it looks like `>=-` is a single operator\n   --> $DIR/suspicious_unary_op_formatting.rs:9:9"}, {"sha": "ee4b7a508a5e35b188c1072d7d81782edb539798", "filename": "tests/ui/swap.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,8 +6,8 @@ LL | |     bar.a = bar.b;\n LL | |     bar.b = temp;\n    | |________________^ help: try: `std::mem::swap(&mut bar.a, &mut bar.b)`\n    |\n-   = note: `-D clippy::manual-swap` implied by `-D warnings`\n    = note: or maybe you should use `std::mem::replace`?\n+   = note: `-D clippy::manual-swap` implied by `-D warnings`\n \n error: this looks like you are swapping elements of `foo` manually\n   --> $DIR/swap.rs:36:5\n@@ -96,8 +96,8 @@ LL | /     a = b;\n LL | |     b = a;\n    | |_________^ help: try: `std::mem::swap(&mut a, &mut b)`\n    |\n-   = note: `-D clippy::almost-swapped` implied by `-D warnings`\n    = note: or maybe you should use `std::mem::replace`?\n+   = note: `-D clippy::almost-swapped` implied by `-D warnings`\n \n error: this looks like you are trying to swap `c.0` and `a`\n   --> $DIR/swap.rs:140:5"}, {"sha": "2e1484400352d10998ba5e6a85c9794873f28f4f", "filename": "tests/ui/trailing_empty_array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ftrailing_empty_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ftrailing_empty_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_empty_array.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,8 +7,8 @@ LL | |     last: [usize; 0],\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::trailing-empty-array` implied by `-D warnings`\n    = help: consider annotating `RarelyUseful` with `#[repr(C)]` or another `repr` attribute\n+   = note: `-D clippy::trailing-empty-array` implied by `-D warnings`\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n   --> $DIR/trailing_empty_array.rs:10:1"}, {"sha": "4d56a94646cb6c0f8da6591cf299cd4f7317fbbc", "filename": "tests/ui/trait_duplication_in_bounds_unfixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: this trait bound is already specified in the where clause\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n    |               ^^^^^\n    |\n+   = help: consider removing this trait bound\n note: the lint level is defined here\n   --> $DIR/trait_duplication_in_bounds_unfixable.rs:1:9\n    |\n LL | #![deny(clippy::trait_duplication_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: consider removing this trait bound\n \n error: this trait bound is already specified in the where clause\n   --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:23"}, {"sha": "70d700c1cc46068d48ac1e45ad7d9e58b225c589", "filename": "tests/ui/type_repetition_in_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: this type has already been used as a bound predicate\n LL |     T: Clone,\n    |     ^^^^^^^^\n    |\n+   = help: consider combining the bounds: `T: Copy + Clone`\n note: the lint level is defined here\n   --> $DIR/type_repetition_in_bounds.rs:1:9\n    |\n LL | #![deny(clippy::type_repetition_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: consider combining the bounds: `T: Copy + Clone`\n \n error: this type has already been used as a bound predicate\n   --> $DIR/type_repetition_in_bounds.rs:25:5"}, {"sha": "2c466ff5c733b6f10aae80204b535b18594e0d4b", "filename": "tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: unsafe block missing a safety comment\n LL |     /* Safety: */ unsafe {}\n    |                   ^^^^^^^^^\n    |\n-   = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n    = help: consider adding a safety comment on the preceding line\n+   = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n \n error: unsafe block missing a safety comment\n   --> $DIR/undocumented_unsafe_blocks.rs:266:5"}, {"sha": "92611a9b7df4aec66d975aeb644807c07c5d5e5c", "filename": "tests/ui/undropped_manually_drops.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fundropped_manually_drops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fundropped_manually_drops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundropped_manually_drops.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: the inner value of this ManuallyDrop will not be dropped\n LL |     drop(std::mem::ManuallyDrop::new(S));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::undropped-manually-drops` implied by `-D warnings`\n    = help: to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\n+   = note: `-D clippy::undropped-manually-drops` implied by `-D warnings`\n \n error: the inner value of this ManuallyDrop will not be dropped\n   --> $DIR/undropped_manually_drops.rs:15:5"}, {"sha": "77fc689f076355babe7a4abfbdf756ee5363a542", "filename": "tests/ui/uninit_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funinit_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funinit_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit_vec.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe {\n LL |         vec.set_len(200);\n    |         ^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::uninit-vec` implied by `-D warnings`\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n+   = note: `-D clippy::uninit-vec` implied by `-D warnings`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n   --> $DIR/uninit_vec.rs:18:5"}, {"sha": "089d1212dd17adc1bfab4ba2e2fd547d4e78350a", "filename": "tests/ui/unit_hash.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funit_hash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funit_hash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_hash.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: this call to `hash` on the unit type will do nothing\n LL |         Foo::Empty => ().hash(&mut state),\n    |                       ^^^^^^^^^^^^^^^^^^^ help: remove the call to `hash` or consider using: `0_u8.hash(&mut state)`\n    |\n-   = note: `-D clippy::unit-hash` implied by `-D warnings`\n    = note: the implementation of `Hash` for `()` is a no-op\n+   = note: `-D clippy::unit-hash` implied by `-D warnings`\n \n error: this call to `hash` on the unit type will do nothing\n   --> $DIR/unit_hash.rs:24:5"}, {"sha": "1d9564ce225e175a6e539a983413550bc521501b", "filename": "tests/ui/unit_return_expecting_ord.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funit_return_expecting_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funit_return_expecting_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_return_expecting_ord.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: this closure returns the unit type which also implements Ord\n LL |     structs.sort_by_key(|s| {\n    |                         ^^^\n    |\n-   = note: `-D clippy::unit-return-expecting-ord` implied by `-D warnings`\n help: probably caused by this trailing semicolon\n   --> $DIR/unit_return_expecting_ord.rs:19:24\n    |\n LL |         double(s.field);\n    |                        ^\n+   = note: `-D clippy::unit-return-expecting-ord` implied by `-D warnings`\n \n error: this closure returns the unit type which also implements PartialOrd\n   --> $DIR/unit_return_expecting_ord.rs:22:30"}, {"sha": "db805eb3680bec4b0ced945141e28bedcb97ccc0", "filename": "tests/ui/unnecessary_self_imports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funnecessary_self_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funnecessary_self_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_self_imports.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,8 +6,8 @@ LL | use std::fs::{self as alias};\n    |          |\n    |          help: consider omitting `::{self}`: `fs as alias;`\n    |\n-   = note: `-D clippy::unnecessary-self-imports` implied by `-D warnings`\n    = note: this will slightly change semantics; any non-module items at the same path will also be imported\n+   = note: `-D clippy::unnecessary-self-imports` implied by `-D warnings`\n \n error: import ending with `::{self}`\n   --> $DIR/unnecessary_self_imports.rs:8:1"}, {"sha": "02bf45a33fbe1913ed1adaaee6fe7bddb4f7259b", "filename": "tests/ui/unnecessary_to_owned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funnecessary_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funnecessary_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: redundant clone\n LL |     require_c_str(&CString::from_vec_with_nul(vec![0]).unwrap().to_owned());\n    |                                                                ^^^^^^^^^^^ help: remove this\n    |\n-   = note: `-D clippy::redundant-clone` implied by `-D warnings`\n note: this value is dropped without further use\n   --> $DIR/unnecessary_to_owned.rs:151:20\n    |\n LL |     require_c_str(&CString::from_vec_with_nul(vec![0]).unwrap().to_owned());\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::redundant-clone` implied by `-D warnings`\n \n error: redundant clone\n   --> $DIR/unnecessary_to_owned.rs:152:40"}, {"sha": "6f7c315456969b91c54bcf3033a11c599a08fe54", "filename": "tests/ui/unneeded_field_pattern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funneeded_field_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funneeded_field_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_field_pattern.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: you matched a field with a wildcard pattern, consider using `..` instead\n LL |         Foo { a: _, b: 0, .. } => {},\n    |               ^^^^\n    |\n-   = note: `-D clippy::unneeded-field-pattern` implied by `-D warnings`\n    = help: try with `Foo { b: 0, .. }`\n+   = note: `-D clippy::unneeded-field-pattern` implied by `-D warnings`\n \n error: all the struct fields are matched to a wildcard pattern, consider using `..`\n   --> $DIR/unneeded_field_pattern.rs:16:9"}, {"sha": "8aaae2d7fff4835737c9559c67ab788173951b5a", "filename": "tests/ui/unsafe_derive_deserialize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funsafe_derive_deserialize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funsafe_derive_deserialize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_derive_deserialize.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: you are deriving `serde::Deserialize` on a type that has methods using `u\n LL | #[derive(Deserialize)]\n    |          ^^^^^^^^^^^\n    |\n-   = note: `-D clippy::unsafe-derive-deserialize` implied by `-D warnings`\n    = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n+   = note: `-D clippy::unsafe-derive-deserialize` implied by `-D warnings`\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`"}, {"sha": "cff3eccbd32bb9757e058e14bff86a69f20de0c9", "filename": "tests/ui/unused_async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funused_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funused_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_async.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,8 +6,8 @@ LL | |     4\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::unused-async` implied by `-D warnings`\n    = help: consider removing the `async` from this function\n+   = note: `-D clippy::unused-async` implied by `-D warnings`\n \n error: unused `async` for function with no await statements\n   --> $DIR/unused_async.rs:17:5"}, {"sha": "7ba7e09c0f0df3a42cd73197eee487450d302ec8", "filename": "tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: written amount is not handled\n LL |     s.write(b\"test\")?;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::unused-io-amount` implied by `-D warnings`\n    = help: use `Write::write_all` instead, or handle partial writes\n+   = note: `-D clippy::unused-io-amount` implied by `-D warnings`\n \n error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:11:5"}, {"sha": "54788f2fa2f4cfc00f02b3bfeb1873c63a1b3555", "filename": "tests/ui/unused_peekable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funused_peekable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funused_peekable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_peekable.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: `peek` never called on `Peekable` iterator\n LL |     let peekable = std::iter::empty::<u32>().peekable();\n    |         ^^^^^^^^\n    |\n-   = note: `-D clippy::unused-peekable` implied by `-D warnings`\n    = help: consider removing the call to `peekable`\n+   = note: `-D clippy::unused-peekable` implied by `-D warnings`\n \n error: `peek` never called on `Peekable` iterator\n   --> $DIR/unused_peekable.rs:18:9"}, {"sha": "23186122a9af7ef5dd4247c6df02e97438767aa8", "filename": "tests/ui/unused_self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funused_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funused_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: unused `self` argument\n LL |         fn unused_self_move(self) {}\n    |                             ^^^^\n    |\n-   = note: `-D clippy::unused-self` implied by `-D warnings`\n    = help: consider refactoring to a associated function\n+   = note: `-D clippy::unused-self` implied by `-D warnings`\n \n error: unused `self` argument\n   --> $DIR/unused_self.rs:12:28"}, {"sha": "e88d580f7bd28dfd464c82723ebd9564ed9f351c", "filename": "tests/ui/unwrap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: used `unwrap()` on `an Option` value\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n \n error: used `unwrap()` on `a Result` value\n   --> $DIR/unwrap.rs:10:13"}, {"sha": "211d2be18342d7da6e5f7803e733af55e983c8a1", "filename": "tests/ui/unwrap_expect_used.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funwrap_expect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funwrap_expect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,17 +4,17 @@ error: used `unwrap()` on `an Option` value\n LL |     Some(3).unwrap();\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n    = help: if this value is `None`, it will panic\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n \n error: used `expect()` on `an Option` value\n   --> $DIR/unwrap_expect_used.rs:24:5\n    |\n LL |     Some(3).expect(\"Hello world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::expect-used` implied by `-D warnings`\n    = help: if this value is `None`, it will panic\n+   = note: `-D clippy::expect-used` implied by `-D warnings`\n \n error: used `unwrap()` on `a Result` value\n   --> $DIR/unwrap_expect_used.rs:31:5"}, {"sha": "40e6bfe087e7d210e983f0f489e3c2ba9d3ee2bb", "filename": "tests/ui/unwrap_in_result.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funwrap_in_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Funwrap_in_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_in_result.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -10,13 +10,13 @@ LL | |         }\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::unwrap-in-result` implied by `-D warnings`\n    = help: unwrap and expect should not be used in a function that returns result or option\n note: potential non-recoverable error(s)\n   --> $DIR/unwrap_in_result.rs:24:17\n    |\n LL |         let i = i_str.parse::<i32>().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::unwrap-in-result` implied by `-D warnings`\n \n error: used unwrap or expect in a function that returns result or option\n   --> $DIR/unwrap_in_result.rs:32:5"}, {"sha": "9aef9dda6f685cac328bf67df0eaf29a3252c920", "filename": "tests/ui/useless_conversion_try.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fuseless_conversion_try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fuseless_conversion_try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,12 +4,12 @@ error: useless conversion to the same type: `T`\n LL |     let _ = T::try_from(val).unwrap();\n    |             ^^^^^^^^^^^^^^^^\n    |\n+   = help: consider removing `T::try_from()`\n note: the lint level is defined here\n   --> $DIR/useless_conversion_try.rs:1:9\n    |\n LL | #![deny(clippy::useless_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: consider removing `T::try_from()`\n \n error: useless conversion to the same type: `T`\n   --> $DIR/useless_conversion_try.rs:5:5"}, {"sha": "8851e9f38be49cc776b8efd70bb280a57738c6fd", "filename": "tests/ui/vec_resize_to_zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fvec_resize_to_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fvec_resize_to_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_resize_to_zero.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -6,8 +6,8 @@ LL |     v.resize(0, 5);\n    |       |\n    |       help: ...or you can empty the vector with: `clear()`\n    |\n-   = note: `-D clippy::vec-resize-to-zero` implied by `-D warnings`\n    = help: the arguments may be inverted...\n+   = note: `-D clippy::vec-resize-to-zero` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "44266c7c01f3908ac713669ac4a75a6a868be94b", "filename": "tests/ui/verbose_file_reads.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fverbose_file_reads.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fverbose_file_reads.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fverbose_file_reads.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: use of `File::read_to_end`\n LL |     f.read_to_end(&mut buffer)?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::verbose-file-reads` implied by `-D warnings`\n    = help: consider using `fs::read` instead\n+   = note: `-D clippy::verbose-file-reads` implied by `-D warnings`\n \n error: use of `File::read_to_string`\n   --> $DIR/verbose_file_reads.rs:26:5"}, {"sha": "14748f583f0cdfb6cfb2ca81e5d1a292bdda4f01", "filename": "tests/ui/vtable_address_comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fvtable_address_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fvtable_address_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvtable_address_comparisons.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: comparing trait object pointers compares a non-unique vtable address\n LL |     let _ = a == b;\n    |             ^^^^^^\n    |\n-   = note: `-D clippy::vtable-address-comparisons` implied by `-D warnings`\n    = help: consider extracting and comparing data pointers only\n+   = note: `-D clippy::vtable-address-comparisons` implied by `-D warnings`\n \n error: comparing trait object pointers compares a non-unique vtable address\n   --> $DIR/vtable_address_comparisons.rs:15:13"}, {"sha": "bd5860f45ca6862d33b17b22662f83ddc5293b42", "filename": "tests/ui/wild_in_or_pats.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fwild_in_or_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fwild_in_or_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwild_in_or_pats.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: wildcard pattern covers any other pattern as it will match anyway\n LL |         \"bar\" | _ => {\n    |         ^^^^^^^^^\n    |\n-   = note: `-D clippy::wildcard-in-or-patterns` implied by `-D warnings`\n    = help: consider handling `_` separately\n+   = note: `-D clippy::wildcard-in-or-patterns` implied by `-D warnings`\n \n error: wildcard pattern covers any other pattern as it will match anyway\n   --> $DIR/wild_in_or_pats.rs:16:9"}, {"sha": "d002e55c57086177d6c232c18ae31081aadd5757", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: methods called `from_*` usually take no `self`\n LL |     fn from_i32(self) {}\n    |                 ^^^^\n    |\n-   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n    = help: consider choosing a less ambiguous name\n+   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n \n error: methods called `from_*` usually take no `self`\n   --> $DIR/wrong_self_convention.rs:22:21"}, {"sha": "8de10e7be69c03cc3cd47bfcd2ef685db085b73f", "filename": "tests/ui/wrong_self_convention2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fwrong_self_convention2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fwrong_self_convention2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention2.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: methods called `from_*` usually take no `self`\n LL |         pub fn from_be_self(self) -> Self {\n    |                             ^^^^\n    |\n-   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n    = help: consider choosing a less ambiguous name\n+   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n \n error: methods called `from_*` usually take no `self`\n   --> $DIR/wrong_self_convention2.rs:63:25"}, {"sha": "3d009083cee3e9a221d3bb37e0d3402efbe76fc6", "filename": "tests/ui/wrong_self_conventions_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fwrong_self_conventions_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fwrong_self_conventions_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_conventions_mut.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: methods with the following characteristics: (`to_*` and `self` type is no\n LL |         pub fn to_many(&mut self) -> Option<&mut [T]> {\n    |                        ^^^^^^^^^\n    |\n-   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n    = help: consider choosing a less ambiguous name\n+   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n \n error: methods with the following characteristics: (`to_*` and `*_mut`) usually take `self` by mutable reference\n   --> $DIR/wrong_self_conventions_mut.rs:22:28"}, {"sha": "2793d160644599d4c7cb3bab4bd3c77958e4205c", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let nan = 0.0 / 0.0;\n    |               ^^^^^^^^^\n    |\n-   = note: `-D clippy::zero-divided-by-zero` implied by `-D warnings`\n    = help: consider using `f64::NAN` if you would like a constant representing NaN\n+   = note: `-D clippy::zero-divided-by-zero` implied by `-D warnings`\n \n error: constant division of `0.0` with `0.0` will always result in NaN\n   --> $DIR/zero_div_zero.rs:5:19"}, {"sha": "c6ba6fa76f0577ebf289ea61ef64fc0962f85eda", "filename": "tests/ui/zero_sized_btreemap_values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fzero_sized_btreemap_values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fzero_sized_btreemap_values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_sized_btreemap_values.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: map with zero-sized value type\n LL | const CONST_NOT_OK: Option<BTreeMap<String, ()>> = None;\n    |                            ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::zero-sized-map-values` implied by `-D warnings`\n    = help: consider using a set instead\n+   = note: `-D clippy::zero-sized-map-values` implied by `-D warnings`\n \n error: map with zero-sized value type\n   --> $DIR/zero_sized_btreemap_values.rs:8:30"}, {"sha": "75bdeb42ec0d4c573a3a908cdb2a6967cdc5f93d", "filename": "tests/ui/zero_sized_hashmap_values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fzero_sized_hashmap_values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f53d09af61d38d6de42450dbf6910982d3ea9/tests%2Fui%2Fzero_sized_hashmap_values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_sized_hashmap_values.stderr?ref=9e8f53d09af61d38d6de42450dbf6910982d3ea9", "patch": "@@ -4,8 +4,8 @@ error: map with zero-sized value type\n LL | const CONST_NOT_OK: Option<HashMap<String, ()>> = None;\n    |                            ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::zero-sized-map-values` implied by `-D warnings`\n    = help: consider using a set instead\n+   = note: `-D clippy::zero-sized-map-values` implied by `-D warnings`\n \n error: map with zero-sized value type\n   --> $DIR/zero_sized_hashmap_values.rs:8:30"}]}