{"sha": "bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYWVmZWQzZjYxYTI5NjI0ZWEzYTBjOTRmY2M0OThkMzRkMGMzMWY=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-02-03T16:27:36Z"}, "committer": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-02-03T16:27:36Z"}, "message": "fill match arm", "tree": {"sha": "29ada72c0ecb620a8b1cc1f892ee838b8f11a674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29ada72c0ecb620a8b1cc1f892ee838b8f11a674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "html_url": "https://github.com/rust-lang/rust/commit/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "581c97a5c3821e247df372f25cf8c01ed514bdd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/581c97a5c3821e247df372f25cf8c01ed514bdd9", "html_url": "https://github.com/rust-lang/rust/commit/581c97a5c3821e247df372f25cf8c01ed514bdd9"}], "stats": {"total": 309, "additions": 300, "deletions": 9}, "files": [{"sha": "2da251df5d1c34deef73a707f6d7731736752c10", "filename": "crates/ra_ide_api/src/assits.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Fassits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Fassits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fassits.rs?ref=bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "patch": "@@ -0,0 +1,89 @@\n+mod fill_match_arm;\n+\n+use ra_syntax::{\n+    TextRange, SourceFile, AstNode,\n+    algo::find_node_at_offset,\n+};\n+use ra_ide_api_light::{\n+    LocalEdit,\n+    assists::{\n+        Assist,\n+        AssistBuilder\n+    }\n+};\n+use crate::{\n+    db::RootDatabase,\n+    FileId\n+};\n+\n+/// Return all the assists applicable at the given position.\n+pub(crate) fn assists(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    file: &SourceFile,\n+    range: TextRange,\n+) -> Vec<LocalEdit> {\n+    let ctx = AssistCtx::new(db, file_id, file, range);\n+    [fill_match_arm::fill_match_arm]\n+        .iter()\n+        .filter_map(|&assist| ctx.clone().apply(assist))\n+        .collect()\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct AssistCtx<'a> {\n+    file_id: FileId,\n+    source_file: &'a SourceFile,\n+    db: &'a RootDatabase,\n+    range: TextRange,\n+    should_compute_edit: bool,\n+}\n+\n+impl<'a> AssistCtx<'a> {\n+    pub(crate) fn new(\n+        db: &'a RootDatabase,\n+        file_id: FileId,\n+        source_file: &'a SourceFile,\n+        range: TextRange,\n+    ) -> AssistCtx<'a> {\n+        AssistCtx {\n+            source_file,\n+            file_id,\n+            db,\n+            range,\n+            should_compute_edit: false,\n+        }\n+    }\n+\n+    pub fn apply(mut self, assist: fn(AssistCtx) -> Option<Assist>) -> Option<LocalEdit> {\n+        self.should_compute_edit = true;\n+        match assist(self) {\n+            None => None,\n+            Some(Assist::Edit(e)) => Some(e),\n+            Some(Assist::Applicable) => unreachable!(),\n+        }\n+    }\n+\n+    #[allow(unused)]\n+    pub fn check(mut self, assist: fn(AssistCtx) -> Option<Assist>) -> bool {\n+        self.should_compute_edit = false;\n+        match assist(self) {\n+            None => false,\n+            Some(Assist::Edit(_)) => unreachable!(),\n+            Some(Assist::Applicable) => true,\n+        }\n+    }\n+\n+    fn build(self, label: impl Into<String>, f: impl FnOnce(&mut AssistBuilder)) -> Option<Assist> {\n+        if !self.should_compute_edit {\n+            return Some(Assist::Applicable);\n+        }\n+        let mut edit = AssistBuilder::default();\n+        f(&mut edit);\n+        Some(edit.build(label))\n+    }\n+\n+    pub(crate) fn node_at_offset<N: AstNode>(&self) -> Option<&'a N> {\n+        find_node_at_offset(self.source_file.syntax(), self.range.start())\n+    }\n+}"}, {"sha": "d433861a07bd3bb74b8e5cd90281d46c259d1be2", "filename": "crates/ra_ide_api/src/assits/fill_match_arm.rs", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Fassits%2Ffill_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Fassits%2Ffill_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fassits%2Ffill_match_arm.rs?ref=bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "patch": "@@ -0,0 +1,157 @@\n+use std::fmt::Write;\n+use hir::{\n+    AdtDef,\n+    source_binder,\n+    Ty,\n+    FieldSource,\n+};\n+use ra_ide_api_light::{\n+    assists::{\n+        Assist,\n+        AssistBuilder\n+    }\n+};\n+use ra_syntax::{\n+    ast::{\n+        self,\n+        AstNode,\n+    }\n+};\n+\n+use crate::assits::AssistCtx;\n+\n+pub fn fill_match_arm(ctx: AssistCtx) -> Option<Assist> {\n+    let match_expr = ctx.node_at_offset::<ast::MatchExpr>()?;\n+\n+    // We already have some match arms, so we don't provide any assists.\n+    match match_expr.match_arm_list() {\n+        Some(arm_list) if arm_list.arms().count() > 0 => {\n+            return None;\n+        }\n+        _ => {}\n+    }\n+\n+    let expr = match_expr.expr()?;\n+    let function = source_binder::function_from_child_node(ctx.db, ctx.file_id, expr.syntax())?;\n+    let infer_result = function.infer(ctx.db);\n+    let syntax_mapping = function.body_syntax_mapping(ctx.db);\n+    let node_expr = syntax_mapping.node_expr(expr)?;\n+    let match_expr_ty = infer_result[node_expr].clone();\n+    match match_expr_ty {\n+        Ty::Adt { def_id, .. } => match def_id {\n+            AdtDef::Enum(e) => {\n+                let mut buf = format!(\"match {} {{\\n\", expr.syntax().text().to_string());\n+                let variants = e.variants(ctx.db);\n+                for variant in variants {\n+                    let name = variant.name(ctx.db)?;\n+                    write!(\n+                        &mut buf,\n+                        \"    {}::{}\",\n+                        e.name(ctx.db)?.to_string(),\n+                        name.to_string()\n+                    )\n+                    .expect(\"write fmt\");\n+\n+                    let pat = variant\n+                        .fields(ctx.db)\n+                        .into_iter()\n+                        .map(|field| {\n+                            let name = field.name(ctx.db).to_string();\n+                            let (_, source) = field.source(ctx.db);\n+                            match source {\n+                                FieldSource::Named(_) => name,\n+                                FieldSource::Pos(_) => \"_\".to_string(),\n+                            }\n+                        })\n+                        .collect::<Vec<_>>();\n+\n+                    match pat.first().map(|s| s.as_str()) {\n+                        Some(\"_\") => write!(&mut buf, \"({})\", pat.join(\", \")).expect(\"write fmt\"),\n+                        Some(_) => write!(&mut buf, \"{{{}}}\", pat.join(\", \")).expect(\"write fmt\"),\n+                        None => (),\n+                    };\n+\n+                    buf.push_str(\" => (),\\n\");\n+                }\n+                buf.push_str(\"}\");\n+                ctx.build(\"fill match arms\", |edit: &mut AssistBuilder| {\n+                    edit.replace_node_and_indent(match_expr.syntax(), buf);\n+                })\n+            }\n+            _ => None,\n+        },\n+        _ => None,\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use insta::assert_debug_snapshot_matches;\n+\n+    use ra_syntax::{TextRange, TextUnit};\n+\n+    use crate::{\n+        FileRange,\n+        mock_analysis::{analysis_and_position, single_file_with_position}\n+};\n+    use ra_db::SourceDatabase;\n+\n+    fn test_assit(name: &str, code: &str) {\n+        let (analysis, position) = if code.contains(\"//-\") {\n+            analysis_and_position(code)\n+        } else {\n+            single_file_with_position(code)\n+        };\n+        let frange = FileRange {\n+            file_id: position.file_id,\n+            range: TextRange::offset_len(position.offset, TextUnit::from(1)),\n+        };\n+        let source_file = analysis\n+            .with_db(|db| db.parse(frange.file_id))\n+            .expect(\"source file\");\n+        let ret = analysis\n+            .with_db(|db| crate::assits::assists(db, frange.file_id, &source_file, frange.range))\n+            .expect(\"assits\");\n+\n+        assert_debug_snapshot_matches!(name, ret);\n+    }\n+\n+    #[test]\n+    fn test_fill_match_arm() {\n+        test_assit(\n+            \"fill_match_arm1\",\n+            r#\"\n+        enum A {\n+            As,\n+            Bs,\n+            Cs(String),\n+            Ds(String, String),\n+            Es{x: usize, y: usize}\n+        }\n+\n+        fn main() {\n+            let a = A::As;\n+            match a<|>\n+        }\n+        \"#,\n+        );\n+\n+        test_assit(\n+            \"fill_match_arm2\",\n+            r#\"\n+        enum A {\n+            As,\n+            Bs,\n+            Cs(String),\n+            Ds(String, String),\n+            Es{x: usize, y: usize}\n+        }\n+\n+        fn main() {\n+            let a = A::As;\n+            match a<|> {}\n+        }\n+        \"#,\n+        );\n+    }\n+}"}, {"sha": "980726d92f6a3ee25aa5161c5560e7e88d5b17f9", "filename": "crates/ra_ide_api/src/assits/snapshots/tests__fill_match_arm1.snap", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Fassits%2Fsnapshots%2Ftests__fill_match_arm1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Fassits%2Fsnapshots%2Ftests__fill_match_arm1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fassits%2Fsnapshots%2Ftests__fill_match_arm1.snap?ref=bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "patch": "@@ -0,0 +1,20 @@\n+---\n+created: \"2019-02-03T15:38:46.094184+00:00\"\n+creator: insta@0.5.2\n+expression: ret\n+source: crates/ra_ide_api/src/assits/fill_match_arm.rs\n+---\n+[\n+    LocalEdit {\n+        label: \"fill match arms\",\n+        edit: TextEdit {\n+            atoms: [\n+                AtomTextEdit {\n+                    delete: [211; 218),\n+                    insert: \"match a {\\n                A::As => (),\\n                A::Bs => (),\\n                A::Cs(_) => (),\\n                A::Ds(_, _) => (),\\n                A::Es{x, y} => (),\\n            }\"\n+                }\n+            ]\n+        },\n+        cursor_position: None\n+    }\n+]"}, {"sha": "cee0efe74a60966487ee7099c6351a0ab954131a", "filename": "crates/ra_ide_api/src/assits/snapshots/tests__fill_match_arm2.snap", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Fassits%2Fsnapshots%2Ftests__fill_match_arm2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Fassits%2Fsnapshots%2Ftests__fill_match_arm2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fassits%2Fsnapshots%2Ftests__fill_match_arm2.snap?ref=bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "patch": "@@ -0,0 +1,20 @@\n+---\n+created: \"2019-02-03T15:41:34.640074+00:00\"\n+creator: insta@0.5.2\n+expression: ret\n+source: crates/ra_ide_api/src/assits/fill_match_arm.rs\n+---\n+[\n+    LocalEdit {\n+        label: \"fill match arms\",\n+        edit: TextEdit {\n+            atoms: [\n+                AtomTextEdit {\n+                    delete: [211; 221),\n+                    insert: \"match a {\\n                A::As => (),\\n                A::Bs => (),\\n                A::Cs(_) => (),\\n                A::Ds(_, _) => (),\\n                A::Es{x, y} => (),\\n            }\"\n+                }\n+            ]\n+        },\n+        cursor_position: None\n+    }\n+]"}, {"sha": "5f672367caf59e4d106e17a5cb0f90f1cfc0ca88", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "patch": "@@ -10,7 +10,7 @@ use ra_db::{\n     SourceDatabase, SourceRoot, SourceRootId,\n     salsa::{Database, SweepStrategy},\n };\n-use ra_ide_api_light::{self, assists, LocalEdit, Severity};\n+use ra_ide_api_light::{self, LocalEdit, Severity};\n use ra_syntax::{\n     algo::find_node_at_offset, ast::{self, NameOwner}, AstNode,\n     SourceFile,\n@@ -238,8 +238,9 @@ impl db::RootDatabase {\n \n     pub(crate) fn assists(&self, frange: FileRange) -> Vec<SourceChange> {\n         let file = self.parse(frange.file_id);\n-        assists::assists(&file, frange.range)\n+        ra_ide_api_light::assists::assists(&file, frange.range)\n             .into_iter()\n+            .chain(crate::assits::assists(self, frange.file_id, &file, frange.range).into_iter())\n             .map(|local_edit| SourceChange::from_local_edit(frange.file_id, local_edit))\n             .collect()\n     }"}, {"sha": "a087a2fff69db6ec3c92fc96b93d26ec756214cd", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "patch": "@@ -26,6 +26,7 @@ mod syntax_highlighting;\n mod parent_module;\n mod rename;\n mod impls;\n+mod assits;\n \n #[cfg(test)]\n mod marks;"}, {"sha": "e578805f1078de373075180f88123b5608cdd1d8", "filename": "crates/ra_ide_api_light/src/assists.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api_light%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaefed3f61a29624ea3a0c94fcc498d34d0c31f/crates%2Fra_ide_api_light%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fassists.rs?ref=bfaefed3f61a29624ea3a0c94fcc498d34d0c31f", "patch": "@@ -104,7 +104,7 @@ pub enum Assist {\n }\n \n #[derive(Default)]\n-struct AssistBuilder {\n+pub struct AssistBuilder {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextUnit>,\n }\n@@ -142,11 +142,7 @@ impl<'a> AssistCtx<'a> {\n         }\n         let mut edit = AssistBuilder::default();\n         f(&mut edit);\n-        Some(Assist::Edit(LocalEdit {\n-            label: label.into(),\n-            edit: edit.edit.finish(),\n-            cursor_position: edit.cursor_position,\n-        }))\n+        Some(edit.build(label))\n     }\n \n     pub(crate) fn leaf_at_offset(&self) -> LeafAtOffset<&'a SyntaxNode> {\n@@ -164,7 +160,7 @@ impl AssistBuilder {\n     fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n         self.edit.replace(range, replace_with.into())\n     }\n-    fn replace_node_and_indent(&mut self, node: &SyntaxNode, replace_with: impl Into<String>) {\n+    pub fn replace_node_and_indent(&mut self, node: &SyntaxNode, replace_with: impl Into<String>) {\n         let mut replace_with = replace_with.into();\n         if let Some(indent) = leading_indent(node) {\n             replace_with = reindent(&replace_with, indent)\n@@ -181,6 +177,13 @@ impl AssistBuilder {\n     fn set_cursor(&mut self, offset: TextUnit) {\n         self.cursor_position = Some(offset)\n     }\n+    pub fn build(self, label: impl Into<String>) -> Assist {\n+        Assist::Edit(LocalEdit {\n+            label: label.into(),\n+            cursor_position: self.cursor_position,\n+            edit: self.edit.finish(),\n+        })\n+    }\n }\n \n fn reindent(text: &str, indent: &str) -> String {"}]}