{"sha": "3993eb4a276079af826c75e233e1a1d2ab93de13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5OTNlYjRhMjc2MDc5YWY4MjZjNzVlMjMzZTFhMWQyYWI5M2RlMTM=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-03-29T23:49:06Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-04-18T00:43:16Z"}, "message": "Preserve sNaN payload when converting them to quiet NaNs", "tree": {"sha": "0183aa6b45f9f2bfc525f5fc253107967efceb7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0183aa6b45f9f2bfc525f5fc253107967efceb7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3993eb4a276079af826c75e233e1a1d2ab93de13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3993eb4a276079af826c75e233e1a1d2ab93de13", "html_url": "https://github.com/rust-lang/rust/commit/3993eb4a276079af826c75e233e1a1d2ab93de13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3993eb4a276079af826c75e233e1a1d2ab93de13/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc028b81803277f7552355052bb277b10a066249", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc028b81803277f7552355052bb277b10a066249", "html_url": "https://github.com/rust-lang/rust/commit/fc028b81803277f7552355052bb277b10a066249"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "8759f103dff1fb9fb6f7855767c9dc1655ad4f09", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3993eb4a276079af826c75e233e1a1d2ab93de13/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3993eb4a276079af826c75e233e1a1d2ab93de13/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=3993eb4a276079af826c75e233e1a1d2ab93de13", "patch": "@@ -1276,14 +1276,17 @@ impl f32 {\n     /// ```\n     #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"40470\")]\n     #[inline]\n-    pub fn from_bits(v: u32) -> Self {\n-        match v {\n-            // sNaN limits source:\n-            // https://www.doc.ic.ac.uk/~eedwards/compsys/float/nan.html\n-            0x7F800001 ... 0x7FBFFFFF |\n-            0xFF800001 ... 0xFFBFFFFF => ::f32::NAN,\n-            _ => unsafe { ::mem::transmute(v) },\n+    pub fn from_bits(mut v: u32) -> Self {\n+        const EXP_MASK: u32   = 0x7F800000;\n+        const QNAN_MASK: u32  = 0x00400000;\n+        const FRACT_MASK: u32 = 0x007FFFFF;\n+        if v & EXP_MASK == EXP_MASK && v & FRACT_MASK != 0 {\n+            // If we have a NaN value, we\n+            // convert signaling NaN values to quiet NaN\n+            // by setting the the highest bit of the fraction\n+            v |= QNAN_MASK;\n         }\n+        unsafe { ::mem::transmute(v) }\n     }\n }\n \n@@ -1941,4 +1944,19 @@ mod tests {\n         assert_approx_eq!(f32::from_bits(0x44a72000), 1337.0);\n         assert_approx_eq!(f32::from_bits(0xc1640000), -14.25);\n     }\n+    #[test]\n+    fn test_snan_masking() {\n+        let snan: u32 = 0x7F801337;\n+        const PAYLOAD_MASK: u32 = 0x003FFFFF;\n+        const QNAN_MASK: u32  = 0x00400000;\n+        let nan_masked_fl = f32::from_bits(snan);\n+        let nan_masked = nan_masked_fl.to_bits();\n+        // Ensure that signaling NaNs don't stay the same\n+        assert_ne!(nan_masked, snan);\n+        // Ensure that we have a quiet NaN\n+        assert_ne!(nan_masked & QNAN_MASK, 0);\n+        assert!(nan_masked_fl.is_nan());\n+        // Ensure the payload wasn't touched during conversion\n+        assert_eq!(nan_masked & PAYLOAD_MASK, snan & PAYLOAD_MASK);\n+    }\n }"}, {"sha": "a4645c3a70f97d2a8c706b0e6b8d908e9f7f5d7c", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3993eb4a276079af826c75e233e1a1d2ab93de13/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3993eb4a276079af826c75e233e1a1d2ab93de13/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=3993eb4a276079af826c75e233e1a1d2ab93de13", "patch": "@@ -1168,14 +1168,17 @@ impl f64 {\n     /// ```\n     #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"40470\")]\n     #[inline]\n-    pub fn from_bits(v: u64) -> Self {\n-        match v {\n-            // sNaN limits source:\n-            // https://www.doc.ic.ac.uk/~eedwards/compsys/float/nan.html\n-            0x7FF0000000000001 ... 0x7FF7FFFFFFFFFFFF |\n-            0xFFF0000000000001 ... 0xFFF7FFFFFFFFFFFF => ::f64::NAN,\n-            _ => unsafe { ::mem::transmute(v) },\n+    pub fn from_bits(mut v: u64) -> Self {\n+        const EXP_MASK: u64   = 0x7FF0000000000000;\n+        const QNAN_MASK: u64  = 0x0001000000000000;\n+        const FRACT_MASK: u64 = 0x000FFFFFFFFFFFFF;\n+        if v & EXP_MASK == EXP_MASK && v & FRACT_MASK != 0 {\n+            // If we have a NaN value, we\n+            // convert signaling NaN values to quiet NaN\n+            // by setting the the highest bit of the fraction\n+            v |= QNAN_MASK;\n         }\n+        unsafe { ::mem::transmute(v) }\n     }\n }\n "}]}