{"sha": "f1587ac26332c3378c41d3cc552b270ee6a45cc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNTg3YWMyNjMzMmMzMzc4YzQxZDNjYzU1MmIyNzBlZTZhNDVjYzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-14T11:20:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-14T11:20:42Z"}, "message": "Merge #4445\n\n4445: Correctly fill default type parameters r=flodiebold a=montekki\n\nFixes #3877 \r\n\r\nSo, basically even if the parameters are omitted from the `impl` block, check the parameters in `trait` if they have a default type, and if they do go from `hir` to `ast::TypeArg`. I've added a helper for that but I am not sure that it's a proper way to go from `hir` to `ast` here.\n\nCo-authored-by: Fedor Sakharov <fedor.sakharov@gmail.com>", "tree": {"sha": "a3a0d688da9315f72cad557af7598779e3937f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a0d688da9315f72cad557af7598779e3937f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1587ac26332c3378c41d3cc552b270ee6a45cc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevSmKCRBK7hj4Ov3rIwAAdHIIAJoqZBM3pFOpfy/ynN1e4vbY\nivmgw2dGkjzzAJv+8NvAKWu6ygPaBhiCp7Rs8s86pCMiY7XwAci+GGOsjRX4sZUb\nNDjwdAQ4n2QddEGQLnQ3VF9HkNfBEtWrayuuJuZJ+zqPB0wiC04tziL8NAdRH5Kj\nMGJ2PE7JOF/cyhviElObTIphTCDEBON42qj10lwyIb/Op6qxjWWscHTn1dGXmY4w\nPXmQV8w8E3Ow0ZFD3OdUCjtDcndH0OZ24xCj5Wd6Q2/QPOxNUGViHj8TfILCifCX\n1MOWsnoFQVTOtZgWOzhwM9GpBymr3IkRUMZEtt0qzDjJP4Ev54Oeg08RVHIOQ84=\n=biuM\n-----END PGP SIGNATURE-----\n", "payload": "tree a3a0d688da9315f72cad557af7598779e3937f19\nparent 5148d6dc66d80b375a98143dfbb556ec675bbffc\nparent ccd526837459724211c8281926aa86522b2506d5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589455242 +0000\ncommitter GitHub <noreply@github.com> 1589455242 +0000\n\nMerge #4445\n\n4445: Correctly fill default type parameters r=flodiebold a=montekki\n\nFixes #3877 \r\n\r\nSo, basically even if the parameters are omitted from the `impl` block, check the parameters in `trait` if they have a default type, and if they do go from `hir` to `ast::TypeArg`. I've added a helper for that but I am not sure that it's a proper way to go from `hir` to `ast` here.\n\nCo-authored-by: Fedor Sakharov <fedor.sakharov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1587ac26332c3378c41d3cc552b270ee6a45cc4", "html_url": "https://github.com/rust-lang/rust/commit/f1587ac26332c3378c41d3cc552b270ee6a45cc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1587ac26332c3378c41d3cc552b270ee6a45cc4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5148d6dc66d80b375a98143dfbb556ec675bbffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5148d6dc66d80b375a98143dfbb556ec675bbffc", "html_url": "https://github.com/rust-lang/rust/commit/5148d6dc66d80b375a98143dfbb556ec675bbffc"}, {"sha": "ccd526837459724211c8281926aa86522b2506d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd526837459724211c8281926aa86522b2506d5", "html_url": "https://github.com/rust-lang/rust/commit/ccd526837459724211c8281926aa86522b2506d5"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "3079a02a2d89e42f40e1d4bec41ce11abb26859f", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f1587ac26332c3378c41d3cc552b270ee6a45cc4/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1587ac26332c3378c41d3cc552b270ee6a45cc4/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=f1587ac26332c3378c41d3cc552b270ee6a45cc4", "patch": "@@ -1,7 +1,7 @@\n //! `AstTransformer`s are functions that replace nodes in an AST and can be easily combined.\n use rustc_hash::FxHashMap;\n \n-use hir::{PathResolution, SemanticsScope};\n+use hir::{HirDisplay, PathResolution, SemanticsScope};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::SyntaxRewriter,\n@@ -51,7 +51,27 @@ impl<'a> SubstituteTypeParams<'a> {\n             .into_iter()\n             // this is a trait impl, so we need to skip the first type parameter -- this is a bit hacky\n             .skip(1)\n-            .zip(substs.into_iter())\n+            // The actual list of trait type parameters may be longer than the one\n+            // used in the `impl` block due to trailing default type parametrs.\n+            // For that case we extend the `substs` with an empty iterator so we\n+            // can still hit those trailing values and check if they actually have\n+            // a default type. If they do, go for that type from `hir` to `ast` so\n+            // the resulting change can be applied correctly.\n+            .zip(substs.into_iter().map(Some).chain(std::iter::repeat(None)))\n+            .filter_map(|(k, v)| match v {\n+                Some(v) => Some((k, v)),\n+                None => {\n+                    let default = k.default(source_scope.db)?;\n+                    Some((\n+                        k,\n+                        ast::make::type_ref(\n+                            &default\n+                                .display_source_code(source_scope.db, source_scope.module()?.into())\n+                                .ok()?,\n+                        ),\n+                    ))\n+                }\n+            })\n             .collect();\n         return SubstituteTypeParams {\n             source_scope,"}, {"sha": "22e1156d2a165da00dfe7de854b4ccc6a5df879b", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f1587ac26332c3378c41d3cc552b270ee6a45cc4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1587ac26332c3378c41d3cc552b270ee6a45cc4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=f1587ac26332c3378c41d3cc552b270ee6a45cc4", "patch": "@@ -615,6 +615,56 @@ trait Foo {\n struct S;\n impl Foo for S {\n     <|>fn valid(some: u32) -> bool { false }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_generic_single_default_parameter() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Foo<T = Self> {\n+    fn bar(&self, other: &T);\n+}\n+\n+struct S;\n+impl Foo for S { <|> }\"#,\n+            r#\"\n+trait Foo<T = Self> {\n+    fn bar(&self, other: &T);\n+}\n+\n+struct S;\n+impl Foo for S {\n+    <|>fn bar(&self, other: &Self) {\n+        todo!()\n+    }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_generic_default_parameter_is_second() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Foo<T1, T2 = Self> {\n+    fn bar(&self, this: &T1, that: &T2);\n+}\n+\n+struct S<T>;\n+impl Foo<T> for S<T> { <|> }\"#,\n+            r#\"\n+trait Foo<T1, T2 = Self> {\n+    fn bar(&self, this: &T1, that: &T2);\n+}\n+\n+struct S<T>;\n+impl Foo<T> for S<T> {\n+    <|>fn bar(&self, this: &T, that: &Self) {\n+        todo!()\n+    }\n }\"#,\n         )\n     }"}, {"sha": "840cfdfc8238ef70579f1c2af3ee943cdd74ae2b", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1587ac26332c3378c41d3cc552b270ee6a45cc4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1587ac26332c3378c41d3cc552b270ee6a45cc4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f1587ac26332c3378c41d3cc552b270ee6a45cc4", "patch": "@@ -989,6 +989,17 @@ impl TypeParam {\n             ty: InEnvironment { value: ty, environment },\n         }\n     }\n+\n+    pub fn default(self, db: &dyn HirDatabase) -> Option<Type> {\n+        let params = db.generic_defaults(self.id.parent);\n+        let local_idx = hir_ty::param_idx(db, self.id)?;\n+        let resolver = self.id.parent.resolver(db.upcast());\n+        let environment = TraitEnvironment::lower(db, &resolver);\n+        params.get(local_idx).cloned().map(|ty| Type {\n+            krate: self.id.parent.module(db.upcast()).krate,\n+            ty: InEnvironment { value: ty, environment },\n+        })\n+    }\n }\n \n // FIXME: rename from `ImplDef` to `Impl`"}, {"sha": "ccc4348f4269b447ad0dc2524d9b6e98d96ed751", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1587ac26332c3378c41d3cc552b270ee6a45cc4/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1587ac26332c3378c41d3cc552b270ee6a45cc4/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=f1587ac26332c3378c41d3cc552b270ee6a45cc4", "patch": "@@ -427,6 +427,11 @@ impl Substs {\n     }\n }\n \n+/// Return an index of a parameter in the generic type parameter list by it's id.\n+pub fn param_idx(db: &dyn HirDatabase, id: TypeParamId) -> Option<usize> {\n+    generics(db.upcast(), id.parent).param_idx(id)\n+}\n+\n #[derive(Debug, Clone)]\n pub struct SubstsBuilder {\n     vec: Vec<Ty>,"}, {"sha": "d0e960fb497cd150d82451addfa21f72c75d7d15", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1587ac26332c3378c41d3cc552b270ee6a45cc4/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1587ac26332c3378c41d3cc552b270ee6a45cc4/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=f1587ac26332c3378c41d3cc552b270ee6a45cc4", "patch": "@@ -13,6 +13,10 @@ pub fn name_ref(text: &str) -> ast::NameRef {\n     ast_from_text(&format!(\"fn f() {{ {}; }}\", text))\n }\n \n+pub fn type_ref(text: &str) -> ast::TypeRef {\n+    ast_from_text(&format!(\"impl {} for D {{}};\", text))\n+}\n+\n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n     ast_from_text(&format!(\"use {};\", name_ref))\n }"}]}