{"sha": "6fc3e630fb98cc6200f60ebbb7c7f826b2d48407", "node_id": "C_kwDOAAsO6NoAKDZmYzNlNjMwZmI5OGNjNjIwMGY2MGViYmI3YzdmODI2YjJkNDg0MDc", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-26T08:56:04Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-26T09:48:59Z"}, "message": "add hacky closure to struct_tail_with_normalize in order to allow us to walk valtrees in lockstep with the type", "tree": {"sha": "eceed88d926f20e8f74e6d2f963a7785835659f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eceed88d926f20e8f74e6d2f963a7785835659f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fc3e630fb98cc6200f60ebbb7c7f826b2d48407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc3e630fb98cc6200f60ebbb7c7f826b2d48407", "html_url": "https://github.com/rust-lang/rust/commit/6fc3e630fb98cc6200f60ebbb7c7f826b2d48407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fc3e630fb98cc6200f60ebbb7c7f826b2d48407/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7eae4e580d1e4db03800732421288c2ab557f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7eae4e580d1e4db03800732421288c2ab557f1a", "html_url": "https://github.com/rust-lang/rust/commit/f7eae4e580d1e4db03800732421288c2ab557f1a"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "1509de0e93070aa44ce92a9e13bbe6e64bb845d8", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fc3e630fb98cc6200f60ebbb7c7f826b2d48407/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fc3e630fb98cc6200f60ebbb7c7f826b2d48407/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6fc3e630fb98cc6200f60ebbb7c7f826b2d48407", "patch": "@@ -2273,7 +2273,7 @@ impl<'tcx> Ty<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,\n     ) -> (Ty<'tcx>, bool) {\n-        let tail = tcx.struct_tail_with_normalize(self, normalize);\n+        let tail = tcx.struct_tail_with_normalize(self, normalize, || {});\n         match tail.kind() {\n             // Sized types\n             ty::Infer(ty::IntVar(_) | ty::FloatVar(_))"}, {"sha": "e7cc8b34270513d0c8687ccd07f0db370c482b74", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6fc3e630fb98cc6200f60ebbb7c7f826b2d48407/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fc3e630fb98cc6200f60ebbb7c7f826b2d48407/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=6fc3e630fb98cc6200f60ebbb7c7f826b2d48407", "patch": "@@ -187,7 +187,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// if input `ty` is not a structure at all.\n     pub fn struct_tail_without_normalization(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         let tcx = self;\n-        tcx.struct_tail_with_normalize(ty, |ty| ty)\n+        tcx.struct_tail_with_normalize(ty, |ty| ty, || {})\n     }\n \n     /// Returns the deeply last field of nested structures, or the same type if\n@@ -203,7 +203,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Ty<'tcx> {\n         let tcx = self;\n-        tcx.struct_tail_with_normalize(ty, |ty| tcx.normalize_erasing_regions(param_env, ty))\n+        tcx.struct_tail_with_normalize(ty, |ty| tcx.normalize_erasing_regions(param_env, ty), || {})\n     }\n \n     /// Returns the deeply last field of nested structures, or the same type if\n@@ -220,6 +220,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         mut ty: Ty<'tcx>,\n         mut normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,\n+        // This is a hack that is currently used to allow us to walk a ValTree\n+        // in lockstep with the type in order to get the ValTree branch that\n+        // corresponds to an unsized field.\n+        mut f: impl FnMut() -> (),\n     ) -> Ty<'tcx> {\n         let recursion_limit = self.recursion_limit();\n         for iteration in 0.. {\n@@ -235,12 +239,16 @@ impl<'tcx> TyCtxt<'tcx> {\n                         break;\n                     }\n                     match def.non_enum_variant().fields.last() {\n-                        Some(f) => ty = f.ty(self, substs),\n+                        Some(field) => {\n+                            f();\n+                            ty = field.ty(self, substs);\n+                        }\n                         None => break,\n                     }\n                 }\n \n                 ty::Tuple(tys) if let Some((&last_ty, _)) = tys.split_last() => {\n+                    f();\n                     ty = last_ty;\n                 }\n "}, {"sha": "c7a61cbe25a1aed118e1a7441ab08b2bace4d540", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6fc3e630fb98cc6200f60ebbb7c7f826b2d48407/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fc3e630fb98cc6200f60ebbb7c7f826b2d48407/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=6fc3e630fb98cc6200f60ebbb7c7f826b2d48407", "patch": "@@ -1519,18 +1519,22 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // Any type with multiple potential metadata types is therefore not eligible.\n                 let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n \n-                let tail = selcx.tcx().struct_tail_with_normalize(self_ty, |ty| {\n-                    // We throw away any obligations we get from this, since we normalize\n-                    // and confirm these obligations once again during confirmation\n-                    normalize_with_depth(\n-                        selcx,\n-                        obligation.param_env,\n-                        obligation.cause.clone(),\n-                        obligation.recursion_depth + 1,\n-                        ty,\n-                    )\n-                    .value\n-                });\n+                let tail = selcx.tcx().struct_tail_with_normalize(\n+                    self_ty,\n+                    |ty| {\n+                        // We throw away any obligations we get from this, since we normalize\n+                        // and confirm these obligations once again during confirmation\n+                        normalize_with_depth(\n+                            selcx,\n+                            obligation.param_env,\n+                            obligation.cause.clone(),\n+                            obligation.recursion_depth + 1,\n+                            ty,\n+                        )\n+                        .value\n+                    },\n+                    || {},\n+                );\n \n                 match tail.kind() {\n                     ty::Bool"}]}