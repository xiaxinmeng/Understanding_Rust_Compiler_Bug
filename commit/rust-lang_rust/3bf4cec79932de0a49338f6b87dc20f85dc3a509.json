{"sha": "3bf4cec79932de0a49338f6b87dc20f85dc3a509", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjRjZWM3OTkzMmRlMGE0OTMzOGY2Yjg3ZGMyMGY4NWRjM2E1MDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-03T08:49:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-03T08:49:59Z"}, "message": "Merge #7128\n\n7128: Implement HasAttrs for GenericParam r=matklad a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "047a6f37f5bc7ddc02e2089b39ea8c24b7cdab9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/047a6f37f5bc7ddc02e2089b39ea8c24b7cdab9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf4cec79932de0a49338f6b87dc20f85dc3a509", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8YU3CRBK7hj4Ov3rIwAAdHIIAJKWMHV6vk9Tnb+YqEwq+6EO\nNxgGDyzWWOg899AF6NMW6P7yLqrmvsJ2seNFkmA/DuWKHxBchYtOBw83KZmw3QWE\nqF4Gvac3rUr9L7CwC/7Ig2Q0vqNvR8j5rV5gwp77DsZJJk51+R9Q28WebzMCvfCy\n8DVqiAnKmFpCBHILj2lq7nnHD5bJY7zdvv1k2piyhmXquYxjICqc0L3O3zCqTq5i\n1iV2ZRhGTtpUm3IkAP4SK2PjFtXO2AP1Ke+eZH+WpaIpXg0q0rDx1+ydw8MJ1Cu8\nRFiJfFUSQrOrnjX2KbhIFX6vkbD3zgb4uxJ8TlXAzibHIO93rBRPO+xRt+Opn5k=\n=D4BX\n-----END PGP SIGNATURE-----\n", "payload": "tree 047a6f37f5bc7ddc02e2089b39ea8c24b7cdab9f\nparent 895d97cfa016ca46c648d250eccb8befa7863502\nparent 68336fdb61e080e1bfb008fd7742ee22ccc51829\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609663799 +0000\ncommitter GitHub <noreply@github.com> 1609663799 +0000\n\nMerge #7128\n\n7128: Implement HasAttrs for GenericParam r=matklad a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf4cec79932de0a49338f6b87dc20f85dc3a509", "html_url": "https://github.com/rust-lang/rust/commit/3bf4cec79932de0a49338f6b87dc20f85dc3a509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf4cec79932de0a49338f6b87dc20f85dc3a509/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "895d97cfa016ca46c648d250eccb8befa7863502", "url": "https://api.github.com/repos/rust-lang/rust/commits/895d97cfa016ca46c648d250eccb8befa7863502", "html_url": "https://github.com/rust-lang/rust/commit/895d97cfa016ca46c648d250eccb8befa7863502"}, {"sha": "68336fdb61e080e1bfb008fd7742ee22ccc51829", "url": "https://api.github.com/repos/rust-lang/rust/commits/68336fdb61e080e1bfb008fd7742ee22ccc51829", "html_url": "https://github.com/rust-lang/rust/commit/68336fdb61e080e1bfb008fd7742ee22ccc51829"}], "stats": {"total": 104, "additions": 86, "deletions": 18}, "files": [{"sha": "99fb65bac3f2b9325811a4b846b9fbda43077910", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3bf4cec79932de0a49338f6b87dc20f85dc3a509/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf4cec79932de0a49338f6b87dc20f85dc3a509/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=3bf4cec79932de0a49338f6b87dc20f85dc3a509", "patch": "@@ -3,15 +3,15 @@ use hir_def::{\n     attr::{Attrs, Documentation},\n     path::ModPath,\n     resolver::HasResolver,\n-    AttrDefId, ModuleDefId,\n+    AttrDefId, GenericParamId, ModuleDefId,\n };\n use hir_expand::hygiene::Hygiene;\n use hir_ty::db::HirDatabase;\n use syntax::ast;\n \n use crate::{\n-    Adt, Const, Enum, Field, Function, MacroDef, Module, ModuleDef, Static, Struct, Trait,\n-    TypeAlias, Union, Variant,\n+    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, LifetimeParam, MacroDef, Module,\n+    ModuleDef, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n };\n \n pub trait HasAttrs {\n@@ -62,25 +62,27 @@ impl_has_attrs![\n     (Function, FunctionId),\n     (Adt, AdtId),\n     (Module, ModuleId),\n+    (GenericParam, GenericParamId),\n ];\n \n-macro_rules! impl_has_attrs_adt {\n-    ($($adt:ident),*) => {$(\n-        impl HasAttrs for $adt {\n+macro_rules! impl_has_attrs_enum {\n+    ($($variant:ident),* for $enum:ident) => {$(\n+        impl HasAttrs for $variant {\n             fn attrs(self, db: &dyn HirDatabase) -> Attrs {\n-                Adt::$adt(self).attrs(db)\n+                $enum::$variant(self).attrs(db)\n             }\n             fn docs(self, db: &dyn HirDatabase) -> Option<Documentation> {\n-                Adt::$adt(self).docs(db)\n+                $enum::$variant(self).docs(db)\n             }\n             fn resolve_doc_path(self, db: &dyn HirDatabase, link: &str, ns: Option<Namespace>) -> Option<ModuleDef> {\n-                Adt::$adt(self).resolve_doc_path(db, link, ns)\n+                $enum::$variant(self).resolve_doc_path(db, link, ns)\n             }\n         }\n     )*};\n }\n \n-impl_has_attrs_adt![Struct, Union, Enum];\n+impl_has_attrs_enum![Struct, Union, Enum for Adt];\n+impl_has_attrs_enum![TypeParam, ConstParam, LifetimeParam for GenericParam];\n \n fn resolve_doc_path(\n     db: &dyn HirDatabase,\n@@ -99,6 +101,12 @@ fn resolve_doc_path(\n         AttrDefId::TraitId(it) => it.resolver(db.upcast()),\n         AttrDefId::TypeAliasId(it) => it.resolver(db.upcast()),\n         AttrDefId::ImplId(it) => it.resolver(db.upcast()),\n+        AttrDefId::GenericParamId(it) => match it {\n+            GenericParamId::TypeParamId(it) => it.parent,\n+            GenericParamId::LifetimeParamId(it) => it.parent,\n+            GenericParamId::ConstParamId(it) => it.parent,\n+        }\n+        .resolver(db.upcast()),\n         AttrDefId::MacroDefId(_) => return None,\n     };\n     let path = ast::Path::parse(link).ok()?;"}, {"sha": "3e47a5e9dbc229374cbf8dbdabf108180c048f18", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3bf4cec79932de0a49338f6b87dc20f85dc3a509/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf4cec79932de0a49338f6b87dc20f85dc3a509/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=3bf4cec79932de0a49338f6b87dc20f85dc3a509", "patch": "@@ -6,13 +6,13 @@\n use hir_def::{\n     expr::{LabelId, PatId},\n     item_scope::ItemInNs,\n-    AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, GenericDefId, ModuleDefId,\n-    VariantId,\n+    AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, GenericDefId, GenericParamId,\n+    ModuleDefId, VariantId,\n };\n \n use crate::{\n-    Adt, AssocItem, DefWithBody, Field, GenericDef, Label, Local, MacroDef, ModuleDef, Variant,\n-    VariantDef,\n+    code_model::GenericParam, Adt, AssocItem, DefWithBody, Field, GenericDef, Label, Local,\n+    MacroDef, ModuleDef, Variant, VariantDef,\n };\n \n macro_rules! from_id {\n@@ -68,6 +68,26 @@ impl From<Adt> for AdtId {\n     }\n }\n \n+impl From<GenericParamId> for GenericParam {\n+    fn from(id: GenericParamId) -> Self {\n+        match id {\n+            GenericParamId::TypeParamId(it) => GenericParam::TypeParam(it.into()),\n+            GenericParamId::LifetimeParamId(it) => GenericParam::LifetimeParam(it.into()),\n+            GenericParamId::ConstParamId(it) => GenericParam::ConstParam(it.into()),\n+        }\n+    }\n+}\n+\n+impl From<GenericParam> for GenericParamId {\n+    fn from(id: GenericParam) -> Self {\n+        match id {\n+            GenericParam::TypeParam(it) => GenericParamId::TypeParamId(it.id),\n+            GenericParam::LifetimeParam(it) => GenericParamId::LifetimeParamId(it.id),\n+            GenericParam::ConstParam(it) => GenericParamId::ConstParamId(it.id),\n+        }\n+    }\n+}\n+\n impl From<EnumVariantId> for Variant {\n     fn from(id: EnumVariantId) -> Self {\n         Variant { parent: id.parent.into(), id: id.local_id }"}, {"sha": "769945c474ecf1a5eb67d4360e8268c70a588034", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bf4cec79932de0a49338f6b87dc20f85dc3a509/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf4cec79932de0a49338f6b87dc20f85dc3a509/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3bf4cec79932de0a49338f6b87dc20f85dc3a509", "patch": "@@ -35,8 +35,9 @@ pub use crate::{\n     code_model::{\n         Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, Callable, CallableKind, Const,\n         ConstParam, Crate, CrateDependency, DefWithBody, Enum, Field, FieldSource, Function,\n-        GenericDef, HasVisibility, Impl, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef,\n-        ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, Variant, VariantDef,\n+        GenericDef, GenericParam, HasVisibility, Impl, Label, LifetimeParam, Local, MacroDef,\n+        Module, ModuleDef, ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Union,\n+        Variant, VariantDef,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope},"}, {"sha": "6b79e7badf3287f832bee82edaab27f39c75fd5b", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3bf4cec79932de0a49338f6b87dc20f85dc3a509/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf4cec79932de0a49338f6b87dc20f85dc3a509/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=3bf4cec79932de0a49338f6b87dc20f85dc3a509", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     nameres::ModuleSource,\n     path::{ModPath, PathKind},\n     src::HasChildSource,\n-    AdtId, AttrDefId, Lookup,\n+    AdtId, AttrDefId, GenericParamId, Lookup,\n };\n \n /// Holds documentation\n@@ -235,6 +235,25 @@ impl Attrs {\n             AttrDefId::StaticId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             AttrDefId::FunctionId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             AttrDefId::TypeAliasId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+            AttrDefId::GenericParamId(it) => match it {\n+                GenericParamId::TypeParamId(it) => {\n+                    let src = it.parent.child_source(db);\n+                    RawAttrs::from_attrs_owner(\n+                        db,\n+                        src.with_value(\n+                            src.value[it.local_id].as_ref().either(|it| it as _, |it| it as _),\n+                        ),\n+                    )\n+                }\n+                GenericParamId::LifetimeParamId(it) => {\n+                    let src = it.parent.child_source(db);\n+                    RawAttrs::from_attrs_owner(db, src.with_value(&src.value[it.local_id]))\n+                }\n+                GenericParamId::ConstParamId(it) => {\n+                    let src = it.parent.child_source(db);\n+                    RawAttrs::from_attrs_owner(db, src.with_value(&src.value[it.local_id]))\n+                }\n+            },\n         };\n \n         raw_attrs.filter(db, def.krate(db))"}, {"sha": "211cb2fafc08519455a678c4c3454f75259be91a", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3bf4cec79932de0a49338f6b87dc20f85dc3a509/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf4cec79932de0a49338f6b87dc20f85dc3a509/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=3bf4cec79932de0a49338f6b87dc20f85dc3a509", "patch": "@@ -261,6 +261,15 @@ pub enum AdtId {\n }\n impl_from!(StructId, UnionId, EnumId for AdtId);\n \n+/// A generic param\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum GenericParamId {\n+    TypeParamId(TypeParamId),\n+    LifetimeParamId(LifetimeParamId),\n+    ConstParamId(ConstParamId),\n+}\n+impl_from!(TypeParamId, LifetimeParamId, ConstParamId for GenericParamId);\n+\n /// The defs which can be visible in the module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ModuleDefId {\n@@ -357,6 +366,7 @@ pub enum AttrDefId {\n     TypeAliasId(TypeAliasId),\n     MacroDefId(MacroDefId),\n     ImplId(ImplId),\n+    GenericParamId(GenericParamId),\n }\n \n impl_from!(\n@@ -370,7 +380,8 @@ impl_from!(\n     TraitId,\n     TypeAliasId,\n     MacroDefId,\n-    ImplId\n+    ImplId,\n+    GenericParamId\n     for AttrDefId\n );\n \n@@ -495,6 +506,15 @@ impl AttrDefId {\n             AttrDefId::TraitId(it) => it.lookup(db).container.module(db).krate,\n             AttrDefId::TypeAliasId(it) => it.lookup(db).module(db).krate,\n             AttrDefId::ImplId(it) => it.lookup(db).container.module(db).krate,\n+            AttrDefId::GenericParamId(it) => {\n+                match it {\n+                    GenericParamId::TypeParamId(it) => it.parent,\n+                    GenericParamId::LifetimeParamId(it) => it.parent,\n+                    GenericParamId::ConstParamId(it) => it.parent,\n+                }\n+                .module(db)\n+                .krate\n+            }\n             // FIXME: `MacroDefId` should store the defining module, then this can implement\n             // `HasModule`\n             AttrDefId::MacroDefId(it) => it.krate,"}]}