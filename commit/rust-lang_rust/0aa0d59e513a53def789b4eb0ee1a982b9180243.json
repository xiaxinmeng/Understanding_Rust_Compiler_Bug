{"sha": "0aa0d59e513a53def789b4eb0ee1a982b9180243", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYTBkNTllNTEzYTUzZGVmNzg5YjRlYjBlZTFhOTgyYjkxODAyNDM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-08-09T23:34:09Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-08-11T12:48:25Z"}, "message": "Make concrete_opaque_types be FxHashSet<DefId>", "tree": {"sha": "9244086c878bd5c05a7f73198770b3fec704239c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9244086c878bd5c05a7f73198770b3fec704239c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa0d59e513a53def789b4eb0ee1a982b9180243", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmETxxkACgkQgTGiTgx5\n76+wpA//ZRaWV+1clvsYzkuaKHBbNnnUxIabjJ+FRoXM7iTZfXRCe+nVYoaq0CCI\nQo2u6cRUKExhQlkLp+4oJsaa6ewRaTkOn96lHaHt9LuoAbvyr7ijju/SQF18XyEY\n69hPaveRvVce+0oDk0PRipkfR3a2aNby1trnHX6CklOEWoOkEDOhHXpQPtUhdJi7\nPI3ux/7GCEeej3RewFnPV5a7/h+C9YLiNPb4LmXpWX1veWLCNzu0xBha0xh3sHuZ\nX5kvD9YEFXxC1ic+H6Nv4IqaTeND6ju8EjIhMBdvI0tERITvuAJpqOpZHQ6O2C4a\nl4HerC/rrLaw7zk92tUJnUi54eCaeMQzkd1MhX8Eteia3KIiOvq+aRgGRT3zRER9\ngBd3/3r7sqZGxzMsozIGeywH5ffGxgZpkhfKll/BK/ZvU1q+/F/RLEsQo27iz89R\n2nQmkiPvFQzBzuYIUiM9IZy/fFIrw/85DNeRFHYfkU/IxhUf+UBrMOAhwVgyn8AH\nPF+kZe9WRe36CxhdbbyVMkbGnueZcnG9hqGOlfeVx4+UUGI9vKnJ5LzVjkIycADO\nYMDxivSfPEYTxZ42d6/wBP/SzCt2zsOuPk7BP0cVXoKf7Wg7M/N/fPI66PNsuK4z\n5/7g/SMy96zh3C5/7IafmJo3TLQFaNG1MD8ILwlQ3y9FQAJ3onM=\n=0s9f\n-----END PGP SIGNATURE-----", "payload": "tree 9244086c878bd5c05a7f73198770b3fec704239c\nparent d488de82f30fd1dcb0220d57498638596622394e\nauthor Santiago Pastorino <spastorino@gmail.com> 1628552049 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1628686105 -0300\n\nMake concrete_opaque_types be FxHashSet<DefId>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa0d59e513a53def789b4eb0ee1a982b9180243", "html_url": "https://github.com/rust-lang/rust/commit/0aa0d59e513a53def789b4eb0ee1a982b9180243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa0d59e513a53def789b4eb0ee1a982b9180243/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d488de82f30fd1dcb0220d57498638596622394e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d488de82f30fd1dcb0220d57498638596622394e", "html_url": "https://github.com/rust-lang/rust/commit/d488de82f30fd1dcb0220d57498638596622394e"}], "stats": {"total": 30, "additions": 3, "deletions": 27}, "files": [{"sha": "ef0392e51970b27f96a16cdc942036e880811930", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0d59e513a53def789b4eb0ee1a982b9180243/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0d59e513a53def789b4eb0ee1a982b9180243/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0aa0d59e513a53def789b4eb0ee1a982b9180243", "patch": "@@ -32,7 +32,6 @@ use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n-use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -46,7 +45,6 @@ use rustc_hir::{\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::OpaqueTypeKey;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n use rustc_session::lint::{Level, Lint};\n@@ -477,7 +475,7 @@ pub struct TypeckResults<'tcx> {\n \n     /// All the opaque types that are restricted to concrete types\n     /// by this function.\n-    pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n+    pub concrete_opaque_types: FxHashSet<DefId>,\n \n     /// Tracks the minimum captures required for a closure;\n     /// see `MinCaptureInformationMap` for more details."}, {"sha": "a13157b460828a809cf7a251dbde2164bf729a8a", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0d59e513a53def789b4eb0ee1a982b9180243/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0d59e513a53def789b4eb0ee1a982b9180243/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=0aa0d59e513a53def789b4eb0ee1a982b9180243", "patch": "@@ -552,23 +552,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             // in some other location, or we'll end up emitting an error due\n             // to the lack of defining usage\n             if !skip_add {\n-                let old_concrete_ty = self\n-                    .typeck_results\n-                    .concrete_opaque_types\n-                    .insert(opaque_type_key, definition_ty);\n-                if let Some(old_concrete_ty) = old_concrete_ty {\n-                    if old_concrete_ty != definition_ty {\n-                        span_bug!(\n-                            span,\n-                            \"`visit_opaque_types` tried to write different types for the same \\\n-                                 opaque type: {:?}, {:?}, {:?}, {:?}\",\n-                            opaque_type_key.def_id,\n-                            definition_ty,\n-                            opaque_defn,\n-                            old_concrete_ty,\n-                        );\n-                    }\n-                }\n+                self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id);\n             }\n         }\n     }"}, {"sha": "e63c3346e02b1dfc5a4a2f3ae53e8f45cb6f9286", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0d59e513a53def789b4eb0ee1a982b9180243/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0d59e513a53def789b4eb0ee1a982b9180243/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=0aa0d59e513a53def789b4eb0ee1a982b9180243", "patch": "@@ -540,13 +540,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             }\n             // Calling `mir_borrowck` can lead to cycle errors through\n             // const-checking, avoid calling it if we don't have to.\n-            if self\n-                .tcx\n-                .typeck(def_id)\n-                .concrete_opaque_types\n-                .any_value_matching(|(key, _)| key.def_id == self.def_id)\n-                .is_none()\n-            {\n+            if !self.tcx.typeck(def_id).concrete_opaque_types.contains(&self.def_id) {\n                 debug!(\"no constraints in typeck results\");\n                 return;\n             }"}]}