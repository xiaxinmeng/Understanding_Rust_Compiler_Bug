{"sha": "f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MzA4YTA3Mjg2ZmM2NWEzNjVkODdlOGJhNWQ4YmE2YWQxNjAyN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-28T07:55:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-28T07:55:42Z"}, "message": "Auto merge of #1267 - RalfJung:macos-dtors, r=RalfJung\n\nimplement TLS cleanup for macOS\n\nNow that I can run macOS interpretation locally, this was not that hard to fix. ;)\nFixes https://github.com/rust-lang/miri/issues/443", "tree": {"sha": "9376bdeb7ff758d7bb68bb7a471004340aba7ab5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9376bdeb7ff758d7bb68bb7a471004340aba7ab5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "html_url": "https://github.com/rust-lang/rust/commit/f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01bc08a3720f0d046af3f098fc70c4fae99cb01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/01bc08a3720f0d046af3f098fc70c4fae99cb01e", "html_url": "https://github.com/rust-lang/rust/commit/01bc08a3720f0d046af3f098fc70c4fae99cb01e"}, {"sha": "c5ef8a656fd211dd1d3c6d73cb3705dc4b301907", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ef8a656fd211dd1d3c6d73cb3705dc4b301907", "html_url": "https://github.com/rust-lang/rust/commit/c5ef8a656fd211dd1d3c6d73cb3705dc4b301907"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "7f07fc1a7db6b0bb76138688df9ede07de2d47a4", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "patch": "@@ -186,8 +186,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n     // FIXME: We always ignore leaks on some OSs where we do not\n     // correctly implement TLS destructors.\n-    let target_os = tcx.sess.target.target.target_os.as_str();\n-    let ignore_leaks = config.ignore_leaks || target_os == \"windows\" || target_os == \"macos\";\n+    let target_os = &tcx.sess.target.target.target_os;\n+    let ignore_leaks = config.ignore_leaks || target_os == \"windows\";\n \n     let (mut ecx, ret_place) = match create_ecx(tcx, main_id, config) {\n         Ok(v) => v,"}, {"sha": "325be877d0443a94ea181c36cca3db59fd766af9", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "patch": "@@ -87,7 +87,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             \"_tlv_atexit\" => {\n-                // FIXME: register the destructor.\n+                let dtor = this.read_scalar(args[0])?.not_undef()?;\n+                let dtor = this.memory.get_fn(dtor)?.as_instance()?;\n+                let data = this.read_scalar(args[1])?.not_undef()?;\n+                this.machine.tls.set_global_dtor(dtor, data)?;\n             }\n \n             \"_NSGetArgc\" => {"}, {"sha": "6635978cb2e37a472e61772de7ccdfd5f69143c7", "filename": "src/shims/tls.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "patch": "@@ -25,13 +25,21 @@ pub struct TlsData<'tcx> {\n \n     /// pthreads-style thread-local storage.\n     keys: BTreeMap<TlsKey, TlsEntry<'tcx>>,\n+\n+    /// A single global dtor (that's how things work on macOS) with a data argument.\n+    global_dtor: Option<(ty::Instance<'tcx>, Scalar<Tag>)>,\n+\n+    /// Whether we are in the \"destruct\" phase, during which some operations are UB.\n+    dtors_running: bool,\n }\n \n impl<'tcx> Default for TlsData<'tcx> {\n     fn default() -> Self {\n         TlsData {\n             next_key: 1, // start with 1 as we must not use 0 on Windows\n             keys: Default::default(),\n+            global_dtor: None,\n+            dtors_running: false,\n         }\n     }\n }\n@@ -86,6 +94,19 @@ impl<'tcx> TlsData<'tcx> {\n         }\n     }\n \n+    pub fn set_global_dtor(&mut self, dtor: ty::Instance<'tcx>, data: Scalar<Tag>) -> InterpResult<'tcx> {\n+        if self.dtors_running {\n+            // UB, according to libstd docs.\n+            throw_ub_format!(\"setting global destructor while destructors are already running\");\n+        }\n+        if self.global_dtor.is_some() {\n+            throw_unsup_format!(\"setting more than one global destructor is not supported\");\n+        }\n+\n+        self.global_dtor = Some((dtor, data));\n+        Ok(())\n+    }\n+\n     /// Returns a dtor, its argument and its index, if one is supposed to run\n     ///\n     /// An optional destructor function may be associated with each key value.\n@@ -134,11 +155,30 @@ impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tc\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn run_tls_dtors(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n+        assert!(!this.machine.tls.dtors_running, \"running TLS dtors twice\");\n+        this.machine.tls.dtors_running = true;\n+\n+        // The macOS global dtor runs \"before any TLS slots get freed\", so do that first.\n+        if let Some((instance, data)) = this.machine.tls.global_dtor {\n+            trace!(\"Running global dtor {:?} on {:?}\", instance, data);\n+\n+            let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n+            this.call_function(\n+                instance,\n+                &[data.into()],\n+                Some(ret_place),\n+                StackPopCleanup::None { cleanup: true },\n+            )?;\n+\n+            // step until out of stackframes\n+            this.run()?;\n+        }\n+\n+        // Now run the \"keyed\" destructors.\n         let mut dtor = this.machine.tls.fetch_tls_dtor(None);\n-        // FIXME: replace loop by some structure that works with stepping\n         while let Some((instance, ptr, key)) = dtor {\n             trace!(\"Running TLS dtor {:?} on {:?}\", instance, ptr);\n-            assert!(!this.is_null(ptr).unwrap(), \"Data can't be NULL when dtor is called!\");\n+            assert!(!this.is_null(ptr).unwrap(), \"data can't be NULL when dtor is called!\");\n \n             let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n             this.call_function("}, {"sha": "c3b27abcdbb288bdec855c44c0c8e475ee07a69d", "filename": "tests/compile-fail/memleak.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/tests%2Fcompile-fail%2Fmemleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/tests%2Fcompile-fail%2Fmemleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak.rs?ref=f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "patch": "@@ -1,5 +1,4 @@\n // ignore-windows: We do not check leaks on Windows\n-// ignore-macos: We do not check leaks on macOS\n \n //error-pattern: the evaluated program leaked memory\n "}, {"sha": "446d28681b9ebca8f712b51779ae6e74d6c3e419", "filename": "tests/compile-fail/memleak_rc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/tests%2Fcompile-fail%2Fmemleak_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4308a07286fc65a365d87e8ba5d8ba6ad16027e/tests%2Fcompile-fail%2Fmemleak_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak_rc.rs?ref=f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "patch": "@@ -1,5 +1,4 @@\n // ignore-windows: We do not check leaks on Windows\n-// ignore-macos: We do not check leaks on macOS\n \n //error-pattern: the evaluated program leaked memory\n "}]}