{"sha": "e38cdf6e56d963525fcc656b80965e7114756496", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOGNkZjZlNTZkOTYzNTI1ZmNjNjU2YjgwOTY1ZTcxMTQ3NTY0OTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-29T13:19:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-29T13:19:45Z"}, "message": "Merge #2114\n\n2114: Move macro expansion to a separate crate r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4ca01adaa4ade6e90d7bcf20748dd691cdb5151d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca01adaa4ade6e90d7bcf20748dd691cdb5151d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e38cdf6e56d963525fcc656b80965e7114756496", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJduDxxCRBK7hj4Ov3rIwAAdHIIAAJXg9usJbB+RdllG6ztk8Ca\n9dCsU/vvYybbnuKtT2V2VeCbFi3Ah68rBwoWNI9dQRBjtq6dEV9byq2wq3G1OK/w\nKtqfPec3WmlIj/aE+Bv+CrZk3zZy9xY0V/0UESvuUFPkTEiiH76FhIOrAu9vPNdo\nIPgXa6IS6acc5Bot14aX7SDK7iSQzxQDtV435N3e+1Eoaf0F3BZQK9IQgVkY4UPc\nBwirqXgUOV4cgyMzEWT32xrAHKFyshQ5So1JnjSNk/YfijQA8LU+tMccWqU6lLY1\nOlgQuOEJLszV1MxrKy+wBrADtokdzRAXLBYghpOLfv+yRw+2ZcEwkAMr3ZWXuB4=\n=6wEu\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ca01adaa4ade6e90d7bcf20748dd691cdb5151d\nparent e960414a4d2a654898e697d267a5d95eb93271a0\nparent bca708ba4c5eb474448ef2f2882a66ec935f2fee\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572355185 +0000\ncommitter GitHub <noreply@github.com> 1572355185 +0000\n\nMerge #2114\n\n2114: Move macro expansion to a separate crate r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e38cdf6e56d963525fcc656b80965e7114756496", "html_url": "https://github.com/rust-lang/rust/commit/e38cdf6e56d963525fcc656b80965e7114756496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e38cdf6e56d963525fcc656b80965e7114756496/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e960414a4d2a654898e697d267a5d95eb93271a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e960414a4d2a654898e697d267a5d95eb93271a0", "html_url": "https://github.com/rust-lang/rust/commit/e960414a4d2a654898e697d267a5d95eb93271a0"}, {"sha": "bca708ba4c5eb474448ef2f2882a66ec935f2fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/bca708ba4c5eb474448ef2f2882a66ec935f2fee", "html_url": "https://github.com/rust-lang/rust/commit/bca708ba4c5eb474448ef2f2882a66ec935f2fee"}], "stats": {"total": 691, "additions": 338, "deletions": 353}, "files": [{"sha": "18d2fb9d56e1e51d6423e3d6fc6621115128208f", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -1003,7 +1003,7 @@ dependencies = [\n  \"ra_arena 0.1.0\",\n  \"ra_cfg 0.1.0\",\n  \"ra_db 0.1.0\",\n- \"ra_hir_def 0.1.0\",\n+ \"ra_hir_expand 0.1.0\",\n  \"ra_mbe 0.1.0\",\n  \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n@@ -1014,12 +1014,16 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"ra_hir_def\"\n+name = \"ra_hir_expand\"\n version = \"0.1.0\"\n dependencies = [\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n+ \"ra_mbe 0.1.0\",\n+ \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n+ \"ra_tt 0.1.0\",\n ]\n \n [[package]]"}, {"sha": "143dae6bdcdbf9455a47bdc73e8f7bc248d05987", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -19,7 +19,7 @@ ra_cfg = { path = \"../ra_cfg\" }\n ra_db = { path = \"../ra_db\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n-hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n+hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n test_utils = { path = \"../test_utils\" }\n ra_prof = { path = \"../ra_prof\" }\n "}, {"sha": "6d34c671dce3ce953f66c161b5eb0daa7f848c83", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -3,7 +3,7 @@\n use std::sync::Arc;\n \n use ra_db::{salsa, SourceDatabase};\n-use ra_syntax::{ast, Parse, SmolStr, SyntaxNode};\n+use ra_syntax::{ast, SmolStr};\n \n use crate::{\n     adt::{EnumData, StructData},\n@@ -19,9 +19,13 @@ use crate::{\n         InferenceResult, Substs, Ty, TypableDef, TypeCtor,\n     },\n     type_alias::TypeAliasData,\n-    AstIdMap, Const, ConstData, Crate, DefWithBody, Enum, ErasedFileAstId, ExprScopes, FnData,\n-    Function, HirFileId, MacroCallLoc, MacroDefId, Module, Static, Struct, StructField, Trait,\n-    TypeAlias,\n+    Const, ConstData, Crate, DefWithBody, Enum, ExprScopes, FnData, Function, HirFileId, Module,\n+    Static, Struct, StructField, Trait, TypeAlias,\n+};\n+\n+pub use hir_expand::db::{\n+    AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n+    ParseMacroQuery,\n };\n \n /// We store all interned things in the single QueryGroup.\n@@ -31,8 +35,6 @@ use crate::{\n /// two.\n #[salsa::query_group(InternDatabaseStorage)]\n pub trait InternDatabase: SourceDatabase {\n-    #[salsa::interned]\n-    fn intern_macro(&self, macro_call: MacroCallLoc) -> ids::MacroCallId;\n     #[salsa::interned]\n     fn intern_function(&self, loc: ids::ItemLoc<ast::FnDef>) -> ids::FunctionId;\n     #[salsa::interned]\n@@ -55,38 +57,10 @@ pub trait InternDatabase: SourceDatabase {\n     fn intern_impl(&self, impl_: Impl) -> ids::GlobalImplId;\n }\n \n-/// This database has access to source code, so queries here are not really\n-/// incremental.\n-#[salsa::query_group(AstDatabaseStorage)]\n-pub trait AstDatabase: InternDatabase {\n-    #[salsa::invoke(crate::source_id::ast_id_map_query)]\n-    fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n-\n-    #[salsa::transparent]\n-    #[salsa::invoke(crate::source_id::file_item_query)]\n-    fn ast_id_to_node(&self, file_id: HirFileId, ast_id: ErasedFileAstId) -> SyntaxNode;\n-\n-    #[salsa::transparent]\n-    #[salsa::invoke(crate::ids::HirFileId::parse_or_expand_query)]\n-    fn parse_or_expand(&self, file_id: HirFileId) -> Option<SyntaxNode>;\n-\n-    #[salsa::invoke(crate::ids::HirFileId::parse_macro_query)]\n-    fn parse_macro(&self, macro_file: ids::MacroFile) -> Option<Parse<SyntaxNode>>;\n-\n-    #[salsa::invoke(crate::ids::macro_def_query)]\n-    fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n-\n-    #[salsa::invoke(crate::ids::macro_arg_query)]\n-    fn macro_arg(&self, macro_call: ids::MacroCallId) -> Option<Arc<tt::Subtree>>;\n-\n-    #[salsa::invoke(crate::ids::macro_expand_query)]\n-    fn macro_expand(&self, macro_call: ids::MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n-}\n-\n // This database uses `AstDatabase` internally,\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]\n-pub trait DefDatabase: InternDatabase + HirDebugDatabase {\n+pub trait DefDatabase: InternDatabase + HirDebugDatabase + AstDatabase {\n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n     fn struct_data(&self, s: Struct) -> Arc<StructData>;\n "}, {"sha": "4f3e922c3c5c35057e62d9773dbd6ef59cafb259", "filename": "crates/ra_hir/src/debug.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdebug.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -36,12 +36,6 @@ impl Module {\n     }\n }\n \n-impl HirFileId {\n-    pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {\n-        debug_fn(move |fmt| db.debug_hir_file_id(self, fmt))\n-    }\n-}\n-\n pub trait HirDebugHelper: HirDatabase {\n     fn crate_name(&self, _krate: CrateId) -> Option<String> {\n         None"}, {"sha": "b3a9a2e6b9a6c5e10837b125b2b65ed376e7f4d1", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -465,7 +465,7 @@ where\n \n                 if let Some(path) = e.path().and_then(|path| self.parse_path(path)) {\n                     if let Some(def) = self.resolver.resolve_path_as_macro(self.db, &path) {\n-                        let call_id = MacroCallLoc { def: def.id, ast_id }.id(self.db);\n+                        let call_id = self.db.intern_macro(MacroCallLoc { def: def.id, ast_id });\n                         let file_id = call_id.as_file(MacroFileKind::Expr);\n                         if let Some(node) = self.db.parse_or_expand(file_id) {\n                             if let Some(expr) = ast::Expr::cast(node) {"}, {"sha": "dea288eb7bc974898fd43dbdfa21e2c5278c0c01", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 14, "deletions": 190, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -1,168 +1,21 @@\n-//! FIXME: write short doc here\n+//! hir makes heavy use of ids: integer (u32) handlers to various things. You\n+//! can think of id as a pointer (but without a lifetime) or a file descriptor\n+//! (but for hir objects).\n+//!\n+//! This module defines a bunch of ids we are using. The most important ones are\n+//! probably `HirFileId` and `DefId`.\n \n-use std::{\n-    hash::{Hash, Hasher},\n-    sync::Arc,\n-};\n+use std::hash::{Hash, Hasher};\n \n-use mbe::MacroRules;\n-use ra_db::{salsa, FileId};\n-use ra_prof::profile;\n-use ra_syntax::{ast, AstNode, Parse, SyntaxNode};\n+use ra_db::salsa;\n+use ra_syntax::{ast, AstNode};\n \n use crate::{\n     db::{AstDatabase, InternDatabase},\n-    AstId, Crate, FileAstId, Module, Source,\n+    AstId, FileAstId, Module, Source,\n };\n \n-/// hir makes heavy use of ids: integer (u32) handlers to various things. You\n-/// can think of id as a pointer (but without a lifetime) or a file descriptor\n-/// (but for hir objects).\n-///\n-/// This module defines a bunch of ids we are using. The most important ones are\n-/// probably `HirFileId` and `DefId`.\n-\n-/// Input to the analyzer is a set of files, where each file is identified by\n-/// `FileId` and contains source code. However, another source of source code in\n-/// Rust are macros: each macro can be thought of as producing a \"temporary\n-/// file\". To assign an id to such a file, we use the id of the macro call that\n-/// produced the file. So, a `HirFileId` is either a `FileId` (source code\n-/// written by user), or a `MacroCallId` (source code produced by macro).\n-///\n-/// What is a `MacroCallId`? Simplifying, it's a `HirFileId` of a file\n-/// containing the call plus the offset of the macro call in the file. Note that\n-/// this is a recursive definition! However, the size_of of `HirFileId` is\n-/// finite (because everything bottoms out at the real `FileId`) and small\n-/// (`MacroCallId` uses the location interner).\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct HirFileId(HirFileIdRepr);\n-\n-impl HirFileId {\n-    /// For macro-expansion files, returns the file original source file the\n-    /// expansion originated from.\n-    pub fn original_file(self, db: &impl InternDatabase) -> FileId {\n-        match self.0 {\n-            HirFileIdRepr::File(file_id) => file_id,\n-            HirFileIdRepr::Macro(macro_file) => {\n-                let loc = macro_file.macro_call_id.loc(db);\n-                loc.ast_id.file_id().original_file(db)\n-            }\n-        }\n-    }\n-\n-    /// Get the crate which the macro lives in, if it is a macro file.\n-    pub(crate) fn macro_crate(self, db: &impl AstDatabase) -> Option<Crate> {\n-        match self.0 {\n-            HirFileIdRepr::File(_) => None,\n-            HirFileIdRepr::Macro(macro_file) => {\n-                let loc = macro_file.macro_call_id.loc(db);\n-                Some(loc.def.krate)\n-            }\n-        }\n-    }\n-\n-    pub(crate) fn parse_or_expand_query(\n-        db: &impl AstDatabase,\n-        file_id: HirFileId,\n-    ) -> Option<SyntaxNode> {\n-        match file_id.0 {\n-            HirFileIdRepr::File(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n-            HirFileIdRepr::Macro(macro_file) => {\n-                db.parse_macro(macro_file).map(|it| it.syntax_node())\n-            }\n-        }\n-    }\n-\n-    pub(crate) fn parse_macro_query(\n-        db: &impl AstDatabase,\n-        macro_file: MacroFile,\n-    ) -> Option<Parse<SyntaxNode>> {\n-        let _p = profile(\"parse_macro_query\");\n-        let macro_call_id = macro_file.macro_call_id;\n-        let tt = db\n-            .macro_expand(macro_call_id)\n-            .map_err(|err| {\n-                // Note:\n-                // The final goal we would like to make all parse_macro success,\n-                // such that the following log will not call anyway.\n-                log::warn!(\"fail on macro_parse: (reason: {})\", err,);\n-            })\n-            .ok()?;\n-        match macro_file.macro_file_kind {\n-            MacroFileKind::Items => mbe::token_tree_to_items(&tt).ok().map(Parse::to_syntax),\n-            MacroFileKind::Expr => mbe::token_tree_to_expr(&tt).ok().map(Parse::to_syntax),\n-        }\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-enum HirFileIdRepr {\n-    File(FileId),\n-    Macro(MacroFile),\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroFile {\n-    macro_call_id: MacroCallId,\n-    macro_file_kind: MacroFileKind,\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) enum MacroFileKind {\n-    Items,\n-    Expr,\n-}\n-\n-impl From<FileId> for HirFileId {\n-    fn from(file_id: FileId) -> HirFileId {\n-        HirFileId(HirFileIdRepr::File(file_id))\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroDefId {\n-    pub(crate) ast_id: AstId<ast::MacroCall>,\n-    pub(crate) krate: Crate,\n-}\n-\n-pub(crate) fn macro_def_query(db: &impl AstDatabase, id: MacroDefId) -> Option<Arc<MacroRules>> {\n-    let macro_call = id.ast_id.to_node(db);\n-    let arg = macro_call.token_tree()?;\n-    let (tt, _) = mbe::ast_to_token_tree(&arg).or_else(|| {\n-        log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n-        None\n-    })?;\n-    let rules = MacroRules::parse(&tt).ok().or_else(|| {\n-        log::warn!(\"fail on macro_def parse: {:#?}\", tt);\n-        None\n-    })?;\n-    Some(Arc::new(rules))\n-}\n-\n-pub(crate) fn macro_arg_query(db: &impl AstDatabase, id: MacroCallId) -> Option<Arc<tt::Subtree>> {\n-    let loc = id.loc(db);\n-    let macro_call = loc.ast_id.to_node(db);\n-    let arg = macro_call.token_tree()?;\n-    let (tt, _) = mbe::ast_to_token_tree(&arg)?;\n-    Some(Arc::new(tt))\n-}\n-\n-pub(crate) fn macro_expand_query(\n-    db: &impl AstDatabase,\n-    id: MacroCallId,\n-) -> Result<Arc<tt::Subtree>, String> {\n-    let loc = id.loc(db);\n-    let macro_arg = db.macro_arg(id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n-\n-    let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n-    let tt = macro_rules.expand(&macro_arg).map_err(|err| format!(\"{:?}\", err))?;\n-    // Set a hard limit for the expanded tt\n-    let count = tt.count();\n-    if count > 65536 {\n-        return Err(format!(\"Total tokens count exceed limit : count = {}\", count));\n-    }\n-    Ok(Arc::new(tt))\n-}\n+pub use hir_expand::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, MacroFileKind};\n \n macro_rules! impl_intern_key {\n     ($name:ident) => {\n@@ -177,35 +30,6 @@ macro_rules! impl_intern_key {\n     };\n }\n \n-/// `MacroCallId` identifies a particular macro invocation, like\n-/// `println!(\"Hello, {}\", world)`.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroCallId(salsa::InternId);\n-impl_intern_key!(MacroCallId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MacroCallLoc {\n-    pub(crate) def: MacroDefId,\n-    pub(crate) ast_id: AstId<ast::MacroCall>,\n-}\n-\n-impl MacroCallId {\n-    pub(crate) fn loc(self, db: &impl InternDatabase) -> MacroCallLoc {\n-        db.lookup_intern_macro(self)\n-    }\n-\n-    pub(crate) fn as_file(self, kind: MacroFileKind) -> HirFileId {\n-        let macro_file = MacroFile { macro_call_id: self, macro_file_kind: kind };\n-        HirFileId(HirFileIdRepr::Macro(macro_file))\n-    }\n-}\n-\n-impl MacroCallLoc {\n-    pub(crate) fn id(self, db: &impl InternDatabase) -> MacroCallId {\n-        db.intern_macro(self)\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct ItemLoc<N: AstNode> {\n     pub(crate) module: Module,\n@@ -244,7 +68,7 @@ impl<'a, DB> LocationCtx<&'a DB> {\n     }\n }\n \n-impl<'a, DB: AstDatabase> LocationCtx<&'a DB> {\n+impl<'a, DB: AstDatabase + InternDatabase> LocationCtx<&'a DB> {\n     pub(crate) fn to_def<N, DEF>(self, ast: &N) -> DEF\n     where\n         N: AstNode,\n@@ -258,7 +82,7 @@ pub(crate) trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n     fn intern(db: &impl InternDatabase, loc: ItemLoc<N>) -> Self;\n     fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<N>;\n \n-    fn from_ast(ctx: LocationCtx<&impl AstDatabase>, ast: &N) -> Self {\n+    fn from_ast(ctx: LocationCtx<&(impl AstDatabase + InternDatabase)>, ast: &N) -> Self {\n         let items = ctx.db.ast_id_map(ctx.file_id);\n         let item_id = items.ast_id(ast);\n         Self::from_ast_id(ctx, item_id)\n@@ -267,7 +91,7 @@ pub(crate) trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n         let loc = ItemLoc { module: ctx.module, ast_id: AstId::new(ctx.file_id, ast_id) };\n         Self::intern(ctx.db, loc)\n     }\n-    fn source(self, db: &impl AstDatabase) -> Source<N> {\n+    fn source(self, db: &(impl AstDatabase + InternDatabase)) -> Source<N> {\n         let loc = self.lookup_intern(db);\n         let ast = loc.ast_id.to_node(db);\n         Source { file_id: loc.ast_id.file_id(), ast }"}, {"sha": "1a52236806d666042cfced0a3ca9f2146c724ecc", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -263,7 +263,7 @@ impl ModuleImplBlocks {\n                     {\n                         if let Some(def) = self.module.resolver(db).resolve_path_as_macro(db, &path)\n                         {\n-                            let call_id = MacroCallLoc { def: def.id, ast_id }.id(db);\n+                            let call_id = db.intern_macro(MacroCallLoc { def: def.id, ast_id });\n                             let file_id = call_id.as_file(MacroFileKind::Items);\n                             if let Some(item_list) =\n                                 db.parse_or_expand(file_id).and_then(ast::MacroItems::cast)"}, {"sha": "0f2d233bb1b9ac6727d81c3dea903ff2cd376c88", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -35,7 +35,6 @@ pub mod mock;\n mod path;\n pub mod source_binder;\n \n-mod source_id;\n mod ids;\n mod name;\n mod nameres;\n@@ -60,14 +59,14 @@ pub mod from_source;\n #[cfg(test)]\n mod marks;\n \n-use crate::{\n-    ids::MacroFileKind,\n-    name::AsName,\n-    resolve::Resolver,\n-    source_id::{AstId, FileAstId},\n+use hir_expand::{\n+    ast_id_map::{AstIdMap, FileAstId},\n+    AstId,\n };\n \n-pub use self::{\n+use crate::{ids::MacroFileKind, name::AsName, resolve::Resolver};\n+\n+pub use crate::{\n     adt::VariantDef,\n     either::Either,\n     expr::ExprScopes,\n@@ -80,7 +79,6 @@ pub use self::{\n     path::{Path, PathKind},\n     resolve::ScopeDef,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n-    source_id::{AstIdMap, ErasedFileAstId},\n     ty::{\n         display::HirDisplay, ApplicationTy, CallableDef, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n     },"}, {"sha": "dc591e8d349a9edf157c05f99cb86cd6bb6c836b", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -448,7 +448,7 @@ where\n             );\n \n             if let Some(def) = resolved_res.resolved_def.get_macros() {\n-                let call_id = MacroCallLoc { def: def.id, ast_id: *ast_id }.id(self.db);\n+                let call_id = self.db.intern_macro(MacroCallLoc { def: def.id, ast_id: *ast_id });\n                 resolved.push((*module_id, call_id, def.id));\n                 res = ReachedFixedPoint::No;\n                 return false;\n@@ -676,7 +676,8 @@ where\n         // Case 1: macro rules, define a macro in crate-global mutable scope\n         if is_macro_rules(&mac.path) {\n             if let Some(name) = &mac.name {\n-                let macro_id = MacroDefId { ast_id, krate: self.def_collector.def_map.krate };\n+                let macro_id =\n+                    MacroDefId { ast_id, krate: self.def_collector.def_map.krate.crate_id };\n                 let macro_ = MacroDef { id: macro_id };\n                 self.def_collector.define_macro(self.module_id, name.clone(), macro_, mac.export);\n             }\n@@ -689,7 +690,7 @@ where\n             self.def_collector.def_map[self.module_id].scope.get_legacy_macro(&name)\n         }) {\n             let def = macro_def.id;\n-            let macro_call_id = MacroCallLoc { def, ast_id }.id(self.def_collector.db);\n+            let macro_call_id = self.def_collector.db.intern_macro(MacroCallLoc { def, ast_id });\n \n             self.def_collector.collect_macro_expansion(self.module_id, macro_call_id, def);\n             return;"}, {"sha": "bbe536bcb4a98a017b2a2812cf4f2c35d9e1582f", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -66,7 +66,12 @@ impl Path {\n         mut cb: impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n     ) {\n         if let Some(tree) = item_src.ast.use_tree() {\n-            expand_use_tree(None, tree, &|| item_src.file_id.macro_crate(db), &mut cb);\n+            expand_use_tree(\n+                None,\n+                tree,\n+                &|| item_src.file_id.macro_crate(db).map(|crate_id| Crate { crate_id }),\n+                &mut cb,\n+            );\n         }\n     }\n \n@@ -90,7 +95,7 @@ impl Path {\n     /// It correctly handles `$crate` based path from macro call.\n     pub fn from_src(source: Source<ast::Path>, db: &impl AstDatabase) -> Option<Path> {\n         let file_id = source.file_id;\n-        Path::parse(source.ast, &|| file_id.macro_crate(db))\n+        Path::parse(source.ast, &|| file_id.macro_crate(db).map(|crate_id| Crate { crate_id }))\n     }\n \n     fn parse(mut path: ast::Path, macro_crate: &impl Fn() -> Option<Crate>) -> Option<Path> {"}, {"sha": "260b7966106b0890dafafdfd39b7c860ad779976", "filename": "crates/ra_hir/src/source_id.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e960414a4d2a654898e697d267a5d95eb93271a0/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960414a4d2a654898e697d267a5d95eb93271a0/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=e960414a4d2a654898e697d267a5d95eb93271a0", "patch": "@@ -1,73 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use std::{\n-    hash::{Hash, Hasher},\n-    sync::Arc,\n-};\n-\n-pub use hir_def::ast_id_map::{AstIdMap, ErasedFileAstId, FileAstId};\n-use ra_syntax::{AstNode, SyntaxNode};\n-\n-use crate::{db::AstDatabase, HirFileId};\n-\n-/// `AstId` points to an AST node in any file.\n-///\n-/// It is stable across reparses, and can be used as salsa key/value.\n-// FIXME: isn't this just a `Source<FileAstId<N>>` ?\n-#[derive(Debug)]\n-pub(crate) struct AstId<N: AstNode> {\n-    file_id: HirFileId,\n-    file_ast_id: FileAstId<N>,\n-}\n-\n-impl<N: AstNode> Clone for AstId<N> {\n-    fn clone(&self) -> AstId<N> {\n-        *self\n-    }\n-}\n-impl<N: AstNode> Copy for AstId<N> {}\n-\n-impl<N: AstNode> PartialEq for AstId<N> {\n-    fn eq(&self, other: &Self) -> bool {\n-        (self.file_id, self.file_ast_id) == (other.file_id, other.file_ast_id)\n-    }\n-}\n-impl<N: AstNode> Eq for AstId<N> {}\n-impl<N: AstNode> Hash for AstId<N> {\n-    fn hash<H: Hasher>(&self, hasher: &mut H) {\n-        (self.file_id, self.file_ast_id).hash(hasher);\n-    }\n-}\n-\n-impl<N: AstNode> AstId<N> {\n-    pub fn new(file_id: HirFileId, file_ast_id: FileAstId<N>) -> AstId<N> {\n-        AstId { file_id, file_ast_id }\n-    }\n-\n-    pub(crate) fn file_id(&self) -> HirFileId {\n-        self.file_id\n-    }\n-\n-    pub(crate) fn to_node(&self, db: &impl AstDatabase) -> N {\n-        let syntax_node = db.ast_id_to_node(self.file_id, self.file_ast_id.into());\n-        N::cast(syntax_node).unwrap()\n-    }\n-}\n-\n-pub(crate) fn ast_id_map_query(db: &impl AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n-    let map = if let Some(node) = db.parse_or_expand(file_id) {\n-        AstIdMap::from_source(&node)\n-    } else {\n-        AstIdMap::default()\n-    };\n-    Arc::new(map)\n-}\n-\n-pub(crate) fn file_item_query(\n-    db: &impl AstDatabase,\n-    file_id: HirFileId,\n-    ast_id: ErasedFileAstId,\n-) -> SyntaxNode {\n-    let node = db.parse_or_expand(file_id).unwrap();\n-    db.ast_id_map(file_id)[ast_id].to_node(&node)\n-}"}, {"sha": "4d4d2cb19c740baf5dbb7b151bbcd76aafad83ac", "filename": "crates/ra_hir_def/src/lib.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e960414a4d2a654898e697d267a5d95eb93271a0/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e960414a4d2a654898e697d267a5d95eb93271a0/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=e960414a4d2a654898e697d267a5d95eb93271a0", "patch": "@@ -1,7 +0,0 @@\n-//! `ra_hir_def` contains initial \"phases\" of the compiler. Roughly, everything\n-//! before types.\n-//!\n-//! Note that we are in the process of moving parts of `ra_hir` into\n-//! `ra_hir_def`, so this crates doesn't contain a lot at the moment.\n-\n-pub mod ast_id_map;"}, {"sha": "9bf5b79187512ecf9782c13c2f3ea5a00880168e", "filename": "crates/ra_hir_expand/Cargo.toml", "status": "renamed", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2FCargo.toml?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -1,10 +1,15 @@\n [package]\n edition = \"2018\"\n-name = \"ra_hir_def\"\n+name = \"ra_hir_expand\"\n version = \"0.1.0\"\n authors = [\"rust-analyzer developers\"]\n \n [dependencies]\n+log = \"0.4.5\"\n+\n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }\n ra_syntax = { path = \"../ra_syntax\" }\n+ra_prof = { path = \"../ra_prof\" }\n+tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n+mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }", "previous_filename": "crates/ra_hir_def/Cargo.toml"}, {"sha": "cb464c3ff17d294cbe07add19f587a82e480ac31", "filename": "crates/ra_hir_expand/src/ast_id_map.rs", "status": "renamed", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -8,11 +8,10 @@\n use std::{\n     hash::{Hash, Hasher},\n     marker::PhantomData,\n-    ops,\n };\n \n use ra_arena::{impl_arena_id, Arena, RawId};\n-use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxNodePtr};\n+use ra_syntax::{ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n \n /// `AstId` points to an AST node in a specific file.\n #[derive(Debug)]\n@@ -40,14 +39,8 @@ impl<N: AstNode> Hash for FileAstId<N> {\n     }\n }\n \n-impl<N: AstNode> From<FileAstId<N>> for ErasedFileAstId {\n-    fn from(id: FileAstId<N>) -> Self {\n-        id.raw\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct ErasedFileAstId(RawId);\n+struct ErasedFileAstId(RawId);\n impl_arena_id!(ErasedFileAstId);\n \n /// Maps items' `SyntaxNode`s to `ErasedFileAstId`s and back.\n@@ -57,7 +50,7 @@ pub struct AstIdMap {\n }\n \n impl AstIdMap {\n-    pub fn from_source(node: &SyntaxNode) -> AstIdMap {\n+    pub(crate) fn from_source(node: &SyntaxNode) -> AstIdMap {\n         assert!(node.parent().is_none());\n         let mut res = AstIdMap { arena: Arena::default() };\n         // By walking the tree in bread-first order we make sure that parents\n@@ -75,31 +68,30 @@ impl AstIdMap {\n     }\n \n     pub fn ast_id<N: AstNode>(&self, item: &N) -> FileAstId<N> {\n-        let ptr = SyntaxNodePtr::new(item.syntax());\n-        let raw = match self.arena.iter().find(|(_id, i)| **i == ptr) {\n+        let raw = self.erased_ast_id(item.syntax());\n+        FileAstId { raw, _ty: PhantomData }\n+    }\n+    fn erased_ast_id(&self, item: &SyntaxNode) -> ErasedFileAstId {\n+        let ptr = SyntaxNodePtr::new(item);\n+        match self.arena.iter().find(|(_id, i)| **i == ptr) {\n             Some((it, _)) => it,\n             None => panic!(\n                 \"Can't find {:?} in AstIdMap:\\n{:?}\",\n-                item.syntax(),\n+                item,\n                 self.arena.iter().map(|(_id, i)| i).collect::<Vec<_>>(),\n             ),\n-        };\n+        }\n+    }\n \n-        FileAstId { raw, _ty: PhantomData }\n+    pub(crate) fn get<N: AstNode>(&self, id: FileAstId<N>) -> AstPtr<N> {\n+        self.arena[id.raw].cast::<N>().unwrap()\n     }\n \n     fn alloc(&mut self, item: &SyntaxNode) -> ErasedFileAstId {\n         self.arena.alloc(SyntaxNodePtr::new(item))\n     }\n }\n \n-impl ops::Index<ErasedFileAstId> for AstIdMap {\n-    type Output = SyntaxNodePtr;\n-    fn index(&self, index: ErasedFileAstId) -> &SyntaxNodePtr {\n-        &self.arena[index]\n-    }\n-}\n-\n /// Walks the subtree in bfs order, calling `f` for each node.\n fn bfs(node: &SyntaxNode, mut f: impl FnMut(SyntaxNode)) {\n     let mut curr_layer = vec![node.clone()];", "previous_filename": "crates/ra_hir_def/src/ast_id_map.rs"}, {"sha": "a4ee9a529a1c4b26f7cd1bf0351d170d308f1922", "filename": "crates/ra_hir_expand/src/db.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -0,0 +1,104 @@\n+//! Defines database & queries for macro expansion.\n+\n+use std::sync::Arc;\n+\n+use mbe::MacroRules;\n+use ra_db::{salsa, SourceDatabase};\n+use ra_prof::profile;\n+use ra_syntax::{AstNode, Parse, SyntaxNode};\n+\n+use crate::{\n+    ast_id_map::AstIdMap, HirFileId, HirFileIdRepr, MacroCallId, MacroCallLoc, MacroDefId,\n+    MacroFile, MacroFileKind,\n+};\n+\n+// FIXME: rename to ExpandDatabase\n+#[salsa::query_group(AstDatabaseStorage)]\n+pub trait AstDatabase: SourceDatabase {\n+    fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n+\n+    #[salsa::transparent]\n+    fn parse_or_expand(&self, file_id: HirFileId) -> Option<SyntaxNode>;\n+\n+    #[salsa::interned]\n+    fn intern_macro(&self, macro_call: MacroCallLoc) -> MacroCallId;\n+    fn macro_arg(&self, id: MacroCallId) -> Option<Arc<tt::Subtree>>;\n+    fn macro_def(&self, id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n+    fn parse_macro(&self, macro_file: MacroFile) -> Option<Parse<SyntaxNode>>;\n+    fn macro_expand(&self, macro_call: MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n+}\n+\n+pub(crate) fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n+    let map =\n+        db.parse_or_expand(file_id).map_or_else(AstIdMap::default, |it| AstIdMap::from_source(&it));\n+    Arc::new(map)\n+}\n+\n+pub(crate) fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<MacroRules>> {\n+    let macro_call = id.ast_id.to_node(db);\n+    let arg = macro_call.token_tree()?;\n+    let (tt, _) = mbe::ast_to_token_tree(&arg).or_else(|| {\n+        log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n+        None\n+    })?;\n+    let rules = MacroRules::parse(&tt).ok().or_else(|| {\n+        log::warn!(\"fail on macro_def parse: {:#?}\", tt);\n+        None\n+    })?;\n+    Some(Arc::new(rules))\n+}\n+\n+pub(crate) fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<tt::Subtree>> {\n+    let loc = db.lookup_intern_macro(id);\n+    let macro_call = loc.ast_id.to_node(db);\n+    let arg = macro_call.token_tree()?;\n+    let (tt, _) = mbe::ast_to_token_tree(&arg)?;\n+    Some(Arc::new(tt))\n+}\n+\n+pub(crate) fn macro_expand(\n+    db: &dyn AstDatabase,\n+    id: MacroCallId,\n+) -> Result<Arc<tt::Subtree>, String> {\n+    let loc = db.lookup_intern_macro(id);\n+    let macro_arg = db.macro_arg(id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n+\n+    let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n+    let tt = macro_rules.expand(&macro_arg).map_err(|err| format!(\"{:?}\", err))?;\n+    // Set a hard limit for the expanded tt\n+    let count = tt.count();\n+    if count > 65536 {\n+        return Err(format!(\"Total tokens count exceed limit : count = {}\", count));\n+    }\n+    Ok(Arc::new(tt))\n+}\n+\n+pub(crate) fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n+    match file_id.0 {\n+        HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n+        HirFileIdRepr::MacroFile(macro_file) => {\n+            db.parse_macro(macro_file).map(|it| it.syntax_node())\n+        }\n+    }\n+}\n+\n+pub(crate) fn parse_macro(\n+    db: &dyn AstDatabase,\n+    macro_file: MacroFile,\n+) -> Option<Parse<SyntaxNode>> {\n+    let _p = profile(\"parse_macro_query\");\n+    let macro_call_id = macro_file.macro_call_id;\n+    let tt = db\n+        .macro_expand(macro_call_id)\n+        .map_err(|err| {\n+            // Note:\n+            // The final goal we would like to make all parse_macro success,\n+            // such that the following log will not call anyway.\n+            log::warn!(\"fail on macro_parse: (reason: {})\", err,);\n+        })\n+        .ok()?;\n+    match macro_file.macro_file_kind {\n+        MacroFileKind::Items => mbe::token_tree_to_items(&tt).ok().map(Parse::to_syntax),\n+        MacroFileKind::Expr => mbe::token_tree_to_expr(&tt).ok().map(Parse::to_syntax),\n+    }\n+}"}, {"sha": "6b35386730c9c0f38b8fe263f21daa7d7d27cb4d", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -0,0 +1,161 @@\n+//! `ra_hir_expand` deals with macro expansion.\n+//!\n+//! Specifically, it implements a concept of `MacroFile` -- a file whose syntax\n+//! tree originates not from the text of some `FileId`, but from some macro\n+//! expansion.\n+\n+pub mod db;\n+pub mod ast_id_map;\n+\n+use std::hash::{Hash, Hasher};\n+\n+use ra_db::{salsa, CrateId, FileId};\n+use ra_syntax::ast::{self, AstNode};\n+\n+use crate::{ast_id_map::FileAstId, db::AstDatabase};\n+\n+/// Input to the analyzer is a set of files, where each file is identified by\n+/// `FileId` and contains source code. However, another source of source code in\n+/// Rust are macros: each macro can be thought of as producing a \"temporary\n+/// file\". To assign an id to such a file, we use the id of the macro call that\n+/// produced the file. So, a `HirFileId` is either a `FileId` (source code\n+/// written by user), or a `MacroCallId` (source code produced by macro).\n+///\n+/// What is a `MacroCallId`? Simplifying, it's a `HirFileId` of a file\n+/// containing the call plus the offset of the macro call in the file. Note that\n+/// this is a recursive definition! However, the size_of of `HirFileId` is\n+/// finite (because everything bottoms out at the real `FileId`) and small\n+/// (`MacroCallId` uses the location interner).\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct HirFileId(HirFileIdRepr);\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+enum HirFileIdRepr {\n+    FileId(FileId),\n+    MacroFile(MacroFile),\n+}\n+\n+impl From<FileId> for HirFileId {\n+    fn from(id: FileId) -> Self {\n+        HirFileId(HirFileIdRepr::FileId(id))\n+    }\n+}\n+\n+impl From<MacroFile> for HirFileId {\n+    fn from(id: MacroFile) -> Self {\n+        HirFileId(HirFileIdRepr::MacroFile(id))\n+    }\n+}\n+\n+impl HirFileId {\n+    /// For macro-expansion files, returns the file original source file the\n+    /// expansion originated from.\n+    pub fn original_file(self, db: &dyn AstDatabase) -> FileId {\n+        match self.0 {\n+            HirFileIdRepr::FileId(file_id) => file_id,\n+            HirFileIdRepr::MacroFile(macro_file) => {\n+                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                loc.ast_id.file_id().original_file(db)\n+            }\n+        }\n+    }\n+\n+    /// Get the crate which the macro lives in, if it is a macro file.\n+    pub fn macro_crate(self, db: &dyn AstDatabase) -> Option<CrateId> {\n+        match self.0 {\n+            HirFileIdRepr::FileId(_) => None,\n+            HirFileIdRepr::MacroFile(macro_file) => {\n+                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                Some(loc.def.krate)\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroFile {\n+    macro_call_id: MacroCallId,\n+    macro_file_kind: MacroFileKind,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum MacroFileKind {\n+    Items,\n+    Expr,\n+}\n+\n+/// `MacroCallId` identifies a particular macro invocation, like\n+/// `println!(\"Hello, {}\", world)`.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroCallId(salsa::InternId);\n+impl salsa::InternKey for MacroCallId {\n+    fn from_intern_id(v: salsa::InternId) -> Self {\n+        MacroCallId(v)\n+    }\n+    fn as_intern_id(&self) -> salsa::InternId {\n+        self.0\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroDefId {\n+    pub krate: CrateId,\n+    pub ast_id: AstId<ast::MacroCall>,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct MacroCallLoc {\n+    pub def: MacroDefId,\n+    pub ast_id: AstId<ast::MacroCall>,\n+}\n+\n+impl MacroCallId {\n+    pub fn as_file(self, kind: MacroFileKind) -> HirFileId {\n+        let macro_file = MacroFile { macro_call_id: self, macro_file_kind: kind };\n+        macro_file.into()\n+    }\n+}\n+\n+/// `AstId` points to an AST node in any file.\n+///\n+/// It is stable across reparses, and can be used as salsa key/value.\n+// FIXME: isn't this just a `Source<FileAstId<N>>` ?\n+#[derive(Debug)]\n+pub struct AstId<N: AstNode> {\n+    file_id: HirFileId,\n+    file_ast_id: FileAstId<N>,\n+}\n+\n+impl<N: AstNode> Clone for AstId<N> {\n+    fn clone(&self) -> AstId<N> {\n+        *self\n+    }\n+}\n+impl<N: AstNode> Copy for AstId<N> {}\n+\n+impl<N: AstNode> PartialEq for AstId<N> {\n+    fn eq(&self, other: &Self) -> bool {\n+        (self.file_id, self.file_ast_id) == (other.file_id, other.file_ast_id)\n+    }\n+}\n+impl<N: AstNode> Eq for AstId<N> {}\n+impl<N: AstNode> Hash for AstId<N> {\n+    fn hash<H: Hasher>(&self, hasher: &mut H) {\n+        (self.file_id, self.file_ast_id).hash(hasher);\n+    }\n+}\n+\n+impl<N: AstNode> AstId<N> {\n+    pub fn new(file_id: HirFileId, file_ast_id: FileAstId<N>) -> AstId<N> {\n+        AstId { file_id, file_ast_id }\n+    }\n+\n+    pub fn file_id(&self) -> HirFileId {\n+        self.file_id\n+    }\n+\n+    pub fn to_node(&self, db: &dyn AstDatabase) -> N {\n+        let root = db.parse_or_expand(self.file_id).unwrap();\n+        db.ast_id_map(self.file_id).get(self.file_ast_id).to_node(&root)\n+    }\n+}"}, {"sha": "bf6ef12f3ffb2be621af8f9d9244002e755067ff", "filename": "crates/ra_ide_api/Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_ide_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e38cdf6e56d963525fcc656b80965e7114756496/crates%2Fra_ide_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2FCargo.toml?ref=e38cdf6e56d963525fcc656b80965e7114756496", "patch": "@@ -27,10 +27,13 @@ ra_db = { path = \"../ra_db\" }\n ra_cfg = { path = \"../ra_cfg\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_prof = { path = \"../ra_prof\" }\n-hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n test_utils = { path = \"../test_utils\" }\n ra_assists = { path = \"../ra_assists\" }\n \n+# ra_ide_api should depend only on the top-level `hir` package. if you need\n+# something from some `hir_xxx` subpackage, reexport the API via `hir`.\n+hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n+\n [dev-dependencies]\n insta = \"0.12.0\"\n "}]}