{"sha": "f69cd1b30e70487147d812225baea37c39918e3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OWNkMWIzMGU3MDQ4NzE0N2Q4MTIyMjViYWVhMzdjMzk5MThlM2I=", "commit": {"author": {"name": "Cristi Cobzarenco", "email": "cristi.cobzarenco@gmail.com", "date": "2016-10-23T13:27:49Z"}, "committer": {"name": "Cristi Cobzarenco", "email": "cristi.cobzarenco@gmail.com", "date": "2016-10-23T13:29:37Z"}, "message": "Implement ops on `&Wrapping<T>`", "tree": {"sha": "bafe80e4e220988205dd887f5438061221dcaf71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bafe80e4e220988205dd887f5438061221dcaf71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f69cd1b30e70487147d812225baea37c39918e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f69cd1b30e70487147d812225baea37c39918e3b", "html_url": "https://github.com/rust-lang/rust/commit/f69cd1b30e70487147d812225baea37c39918e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f69cd1b30e70487147d812225baea37c39918e3b/comments", "author": {"login": "cristicbz", "id": 801328, "node_id": "MDQ6VXNlcjgwMTMyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/801328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cristicbz", "html_url": "https://github.com/cristicbz", "followers_url": "https://api.github.com/users/cristicbz/followers", "following_url": "https://api.github.com/users/cristicbz/following{/other_user}", "gists_url": "https://api.github.com/users/cristicbz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cristicbz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cristicbz/subscriptions", "organizations_url": "https://api.github.com/users/cristicbz/orgs", "repos_url": "https://api.github.com/users/cristicbz/repos", "events_url": "https://api.github.com/users/cristicbz/events{/privacy}", "received_events_url": "https://api.github.com/users/cristicbz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cristicbz", "id": 801328, "node_id": "MDQ6VXNlcjgwMTMyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/801328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cristicbz", "html_url": "https://github.com/cristicbz", "followers_url": "https://api.github.com/users/cristicbz/followers", "following_url": "https://api.github.com/users/cristicbz/following{/other_user}", "gists_url": "https://api.github.com/users/cristicbz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cristicbz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cristicbz/subscriptions", "organizations_url": "https://api.github.com/users/cristicbz/orgs", "repos_url": "https://api.github.com/users/cristicbz/repos", "events_url": "https://api.github.com/users/cristicbz/events{/privacy}", "received_events_url": "https://api.github.com/users/cristicbz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87af2324bb43ca5fa2689da0560d116399b3456a", "url": "https://api.github.com/repos/rust-lang/rust/commits/87af2324bb43ca5fa2689da0560d116399b3456a", "html_url": "https://github.com/rust-lang/rust/commit/87af2324bb43ca5fa2689da0560d116399b3456a"}], "stats": {"total": 127, "additions": 75, "deletions": 52}, "files": [{"sha": "f2cdc9d6a98c540de1c55271509687c2f0a89b71", "filename": "src/libcore/internal_macros.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f69cd1b30e70487147d812225baea37c39918e3b/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69cd1b30e70487147d812225baea37c39918e3b/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=f69cd1b30e70487147d812225baea37c39918e3b", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// implements the unary operator \"op &T\"\n+// based on \"op T\" where T is expected to be `Copy`able\n+macro_rules! forward_ref_unop {\n+    (impl $imp:ident, $method:ident for $t:ty) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a> $imp for &'a $t {\n+            type Output = <$t as $imp>::Output;\n+\n+            #[inline]\n+            fn $method(self) -> <$t as $imp>::Output {\n+                $imp::$method(*self)\n+            }\n+        }\n+    }\n+}\n+\n+// implements binary operators \"&T op U\", \"T op &U\", \"&T op &U\"\n+// based on \"T op U\" where T and U are expected to be `Copy`able\n+macro_rules! forward_ref_binop {\n+    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a> $imp<$u> for &'a $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(*self, other)\n+            }\n+        }\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a> $imp<&'a $u> for $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(self, *other)\n+            }\n+        }\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a, 'b> $imp<&'a $u> for &'b $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(*self, *other)\n+            }\n+        }\n+    }\n+}"}, {"sha": "07f5e725e2003bbcb7001b448a1072972e33e83d", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f69cd1b30e70487147d812225baea37c39918e3b/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69cd1b30e70487147d812225baea37c39918e3b/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f69cd1b30e70487147d812225baea37c39918e3b", "patch": "@@ -100,6 +100,9 @@ use prelude::v1::*;\n #[macro_use]\n mod macros;\n \n+#[macro_use]\n+mod internal_macros;\n+\n #[path = \"num/float_macros.rs\"]\n #[macro_use]\n mod float_macros;"}, {"sha": "50d64838a5c0b0507af36fc83ff86c716df3781d", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f69cd1b30e70487147d812225baea37c39918e3b/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69cd1b30e70487147d812225baea37c39918e3b/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=f69cd1b30e70487147d812225baea37c39918e3b", "patch": "@@ -131,6 +131,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0.wrapping_add(other.0))\n             }\n         }\n+        forward_ref_binop! { impl Add, add for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl AddAssign for Wrapping<$t> {\n@@ -149,6 +150,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0.wrapping_sub(other.0))\n             }\n         }\n+        forward_ref_binop! { impl Sub, sub for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl SubAssign for Wrapping<$t> {\n@@ -167,6 +169,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0.wrapping_mul(other.0))\n             }\n         }\n+        forward_ref_binop! { impl Mul, mul for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl MulAssign for Wrapping<$t> {\n@@ -185,6 +188,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0.wrapping_div(other.0))\n             }\n         }\n+        forward_ref_binop! { impl Div, div for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl DivAssign for Wrapping<$t> {\n@@ -203,6 +207,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0.wrapping_rem(other.0))\n             }\n         }\n+        forward_ref_binop! { impl Rem, rem for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl RemAssign for Wrapping<$t> {\n@@ -221,6 +226,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(!self.0)\n             }\n         }\n+        forward_ref_unop! { impl Not, not for Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl BitXor for Wrapping<$t> {\n@@ -231,6 +237,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0 ^ other.0)\n             }\n         }\n+        forward_ref_binop! { impl BitXor, bitxor for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitXorAssign for Wrapping<$t> {\n@@ -249,6 +256,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0 | other.0)\n             }\n         }\n+        forward_ref_binop! { impl BitOr, bitor for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitOrAssign for Wrapping<$t> {\n@@ -267,6 +275,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0 & other.0)\n             }\n         }\n+        forward_ref_binop! { impl BitAnd, bitand for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitAndAssign for Wrapping<$t> {\n@@ -284,6 +293,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(0) - self\n             }\n         }\n+        forward_ref_unop! { impl Neg, neg for Wrapping<$t> }\n     )*)\n }\n "}, {"sha": "06b662ea20d77c9652b28c08e4753ebb5b725dbb", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f69cd1b30e70487147d812225baea37c39918e3b/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69cd1b30e70487147d812225baea37c39918e3b/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=f69cd1b30e70487147d812225baea37c39918e3b", "patch": "@@ -196,58 +196,6 @@ pub trait Drop {\n     fn drop(&mut self);\n }\n \n-// implements the unary operator \"op &T\"\n-// based on \"op T\" where T is expected to be `Copy`able\n-macro_rules! forward_ref_unop {\n-    (impl $imp:ident, $method:ident for $t:ty) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a> $imp for &'a $t {\n-            type Output = <$t as $imp>::Output;\n-\n-            #[inline]\n-            fn $method(self) -> <$t as $imp>::Output {\n-                $imp::$method(*self)\n-            }\n-        }\n-    }\n-}\n-\n-// implements binary operators \"&T op U\", \"T op &U\", \"&T op &U\"\n-// based on \"T op U\" where T and U are expected to be `Copy`able\n-macro_rules! forward_ref_binop {\n-    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a> $imp<$u> for &'a $t {\n-            type Output = <$t as $imp<$u>>::Output;\n-\n-            #[inline]\n-            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {\n-                $imp::$method(*self, other)\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a> $imp<&'a $u> for $t {\n-            type Output = <$t as $imp<$u>>::Output;\n-\n-            #[inline]\n-            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n-                $imp::$method(self, *other)\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, 'b> $imp<&'a $u> for &'b $t {\n-            type Output = <$t as $imp<$u>>::Output;\n-\n-            #[inline]\n-            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n-                $imp::$method(*self, *other)\n-            }\n-        }\n-    }\n-}\n-\n /// The `Add` trait is used to specify the functionality of `+`.\n ///\n /// # Examples"}]}