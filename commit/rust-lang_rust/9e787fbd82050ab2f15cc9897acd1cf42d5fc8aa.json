{"sha": "9e787fbd82050ab2f15cc9897acd1cf42d5fc8aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNzg3ZmJkODIwNTBhYjJmMTVjYzk4OTdhY2QxY2Y0MmQ1ZmM4YWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-08T14:29:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-08T15:09:26Z"}, "message": "Dump all allocs when dumping locals", "tree": {"sha": "d633b3f42c3d0a31d73fd7fc13e0f2a53ee544e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d633b3f42c3d0a31d73fd7fc13e0f2a53ee544e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e787fbd82050ab2f15cc9897acd1cf42d5fc8aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmJ1CYACgkQpp+NIls6\n19ndiBAAr7DiA5rMWAQHAJPq1oQv7t5C07sgJbFCmtmdD7b0SzgzHvy0BT9fzy83\nQbrP2ijZKfyfwFgJ2/Bc4/q97wa0YGk0uzBmPihexRw5bjdVFwsPa0BtnYdTa3FP\nOECR4D50fOON5kuAzb8AwT62g1BhMFbVXMEQvXwsObYfe1NEbjOVpOjThXQF2RWP\nR/ozumlU0E7vwQ6ukwhHvl0n7yC/IA9a2WECdjVCiIJZ2PzAV3TsTkthkREtP4Gq\nmMaauyM+XtiLNeEhd968hxqc6M8Tvwuho6xktzlBmLXVQk/PUJts2fo9wJprZkjw\nWU0iZqKA52KPpktjoEsMPoa7QC52GXJ3wim4cRdnybaqQEjl4zHD0P1WeEToH4+R\nyGy161otuj+izu9ewzvGURgj6gIPPT+zD28VcJXsD210xe1vqYALEgFLeantNz5H\n0+/NHmeOkd4uIL1YiF3Ej6r2G6g6NSZplLZhfq4brwF2xa0b8K+Y3tMKrNUp+pOJ\nmWC9h7LyZrnfIeedDQPKot/5I1PsY+vaxfL2WmyPbulicVBPjp+Sl3GCSNi4e6uj\nqLZjx7e28z54o710jmoDaFQV0DeN0j4s/HKKjqWR5gzPS+pcYafRWrGlftsOfWBw\nVakLf1x9aseDcDQrKOMRlkK5jHePaJ2RhpjzwsEXhuSi8KU+/x4=\n=hvDI\n-----END PGP SIGNATURE-----", "payload": "tree d633b3f42c3d0a31d73fd7fc13e0f2a53ee544e1\nparent 897b563e70f7b6a1079b3ef292a836a34aa64ff1\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1502202587 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1502204966 +0200\n\nDump all allocs when dumping locals\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e787fbd82050ab2f15cc9897acd1cf42d5fc8aa", "html_url": "https://github.com/rust-lang/rust/commit/9e787fbd82050ab2f15cc9897acd1cf42d5fc8aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e787fbd82050ab2f15cc9897acd1cf42d5fc8aa/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "897b563e70f7b6a1079b3ef292a836a34aa64ff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/897b563e70f7b6a1079b3ef292a836a34aa64ff1", "html_url": "https://github.com/rust-lang/rust/commit/897b563e70f7b6a1079b3ef292a836a34aa64ff1"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "eb6e33a52f64753c2aacb9b349151cc6500adb85", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9e787fbd82050ab2f15cc9897acd1cf42d5fc8aa/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e787fbd82050ab2f15cc9897acd1cf42d5fc8aa/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=9e787fbd82050ab2f15cc9897acd1cf42d5fc8aa", "patch": "@@ -1621,41 +1621,52 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n     pub fn dump_local(&self, lvalue: Lvalue) {\n         // Debug output\n-        if let Lvalue::Local { frame, local } = lvalue {\n-            let mut allocs = Vec::new();\n-            let mut msg = format!(\"{:?}\", local);\n-            if frame != self.cur_frame() {\n-                write!(msg, \" ({} frames up)\", self.cur_frame() - frame).unwrap();\n-            }\n-            write!(msg, \":\").unwrap();\n-\n-            match self.stack[frame].get_local(local) {\n-                Err(EvalError{ kind: EvalErrorKind::DeadLocal, ..} ) => {\n-                    write!(msg, \" is dead\").unwrap();\n+        match lvalue {\n+            Lvalue::Local { frame, local } => {\n+                let mut allocs = Vec::new();\n+                let mut msg = format!(\"{:?}\", local);\n+                if frame != self.cur_frame() {\n+                    write!(msg, \" ({} frames up)\", self.cur_frame() - frame).unwrap();\n                 }\n-                Err(err) => {\n-                    panic!(\"Failed to access local: {:?}\", err);\n+                write!(msg, \":\").unwrap();\n+\n+                match self.stack[frame].get_local(local) {\n+                    Err(EvalError{ kind: EvalErrorKind::DeadLocal, ..} ) => {\n+                        write!(msg, \" is dead\").unwrap();\n+                    }\n+                    Err(err) => {\n+                        panic!(\"Failed to access local: {:?}\", err);\n+                    }\n+                    Ok(Value::ByRef(PtrAndAlign{ ptr, aligned })) => match ptr.into_inner_primval() {\n+                        PrimVal::Ptr(ptr) => {\n+                            write!(msg, \" by {}ref:\", if aligned { \"\" } else { \"unaligned \" }).unwrap();\n+                            allocs.push(ptr.alloc_id);\n+                        },\n+                        ptr => write!(msg, \" integral by ref: {:?}\", ptr).unwrap(),\n+                    },\n+                    Ok(Value::ByVal(val)) => {\n+                        write!(msg, \" {:?}\", val).unwrap();\n+                        if let PrimVal::Ptr(ptr) = val { allocs.push(ptr.alloc_id); }\n+                    }\n+                    Ok(Value::ByValPair(val1, val2)) => {\n+                        write!(msg, \" ({:?}, {:?})\", val1, val2).unwrap();\n+                        if let PrimVal::Ptr(ptr) = val1 { allocs.push(ptr.alloc_id); }\n+                        if let PrimVal::Ptr(ptr) = val2 { allocs.push(ptr.alloc_id); }\n+                    }\n                 }\n-                Ok(Value::ByRef(PtrAndAlign{ ptr, aligned })) => match ptr.into_inner_primval() {\n+\n+                trace!(\"{}\", msg);\n+                self.memory.dump_allocs(allocs);\n+            }\n+            Lvalue::Ptr { ptr: PtrAndAlign { ptr, aligned }, .. } => {\n+                match ptr.into_inner_primval() {\n                     PrimVal::Ptr(ptr) => {\n-                        write!(msg, \" by {}ref:\", if aligned { \"\" } else { \"unaligned \" }).unwrap();\n-                        allocs.push(ptr.alloc_id);\n+                        trace!(\"by {}ref:\", if aligned { \"\" } else { \"unaligned \" });\n+                        self.memory.dump_alloc(ptr.alloc_id);\n                     },\n-                    ptr => write!(msg, \" integral by ref: {:?}\", ptr).unwrap(),\n-                },\n-                Ok(Value::ByVal(val)) => {\n-                    write!(msg, \" {:?}\", val).unwrap();\n-                    if let PrimVal::Ptr(ptr) = val { allocs.push(ptr.alloc_id); }\n-                }\n-                Ok(Value::ByValPair(val1, val2)) => {\n-                    write!(msg, \" ({:?}, {:?})\", val1, val2).unwrap();\n-                    if let PrimVal::Ptr(ptr) = val1 { allocs.push(ptr.alloc_id); }\n-                    if let PrimVal::Ptr(ptr) = val2 { allocs.push(ptr.alloc_id); }\n+                    ptr => trace!(\" integral by ref: {:?}\", ptr),\n                 }\n             }\n-\n-            trace!(\"{}\", msg);\n-            self.memory.dump_allocs(allocs);\n         }\n     }\n "}]}