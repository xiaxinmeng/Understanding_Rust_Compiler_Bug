{"sha": "c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZTI3MGExYWE4YmYzZmRiYzI2MjMwNTMyYjMyZTQ2ZmUxZDQ0YTc=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-11-01T08:07:14Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-11-01T08:08:38Z"}, "message": "Small fixes for `get_unwrap` lint", "tree": {"sha": "9d93990950df40cb312ea9b1986540cc2f0e20fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d93990950df40cb312ea9b1986540cc2f0e20fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7", "html_url": "https://github.com/rust-lang/rust/commit/c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc741405b049b5d7a94d401b7a97cd7ce9eda14", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc741405b049b5d7a94d401b7a97cd7ce9eda14", "html_url": "https://github.com/rust-lang/rust/commit/cfc741405b049b5d7a94d401b7a97cd7ce9eda14"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "5e3c7c6ab43aa1ef4223d1f6cc181009f4dcf653", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7", "patch": "@@ -476,7 +476,7 @@ declare_lint! {\n /// ```rust\n /// let some_vec = vec![0, 1, 2, 3];\n /// let last = some_vec.get(3).unwrap();\n-/// some_vec.get_mut(0).unwrap() = 1;\n+/// *some_vec.get_mut(0).unwrap() = 1;\n /// ```\n /// The correct use would be:\n /// ```rust\n@@ -519,6 +519,7 @@ impl LintPass for Pass {\n }\n \n impl LateLintPass for Pass {\n+    #[allow(cyclomatic_complexity)]\n     fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n         if in_macro(cx, expr.span) {\n             return;\n@@ -527,7 +528,12 @@ impl LateLintPass for Pass {\n         match expr.node {\n             hir::ExprMethodCall(name, _, ref args) => {\n                 // Chain calls\n-                if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n+                // GET_UNWRAP needs to be checked before general `UNWRAP` lints\n+                if let Some(arglists) = method_chain_args(expr, &[\"get\", \"unwrap\"]) {\n+                lint_get_unwrap(cx, expr, arglists[0], false);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"get_mut\", \"unwrap\"]) {\n+                    lint_get_unwrap(cx, expr, arglists[0], true);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n                     lint_unwrap(cx, expr, arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"ok\", \"expect\"]) {\n                     lint_ok_expect(cx, expr, arglists[0]);\n@@ -559,10 +565,6 @@ impl LateLintPass for Pass {\n                     lint_iter_nth(cx, expr, arglists[0], false);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"iter_mut\", \"nth\"]) {\n                     lint_iter_nth(cx, expr, arglists[0], true);\n-                } else if let Some(arglists) = method_chain_args(expr, &[\"get\", \"unwrap\"]) {\n-                    lint_get_unwrap(cx, expr, arglists[0], false);\n-                } else if let Some(arglists) = method_chain_args(expr, &[\"get_mut\", \"unwrap\"]) {\n-                    lint_get_unwrap(cx, expr, arglists[0], true);\n                 } else if method_chain_args(expr, &[\"skip\", \"next\"]).is_some() {\n                     lint_iter_skip_next(cx, expr);\n                 }"}]}