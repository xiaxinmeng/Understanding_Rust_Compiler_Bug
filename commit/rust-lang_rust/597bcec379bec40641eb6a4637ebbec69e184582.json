{"sha": "597bcec379bec40641eb6a4637ebbec69e184582", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5N2JjZWMzNzliZWM0MDY0MWViNmE0NjM3ZWJiZWM2OWUxODQ1ODI=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-03-26T15:06:39Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-03-26T15:06:39Z"}, "message": "Expanded top-level docs for std::net{TcpListener,TcpStream,UdpSocket}\n\nPart of #29363", "tree": {"sha": "b1ee576f55b57e17d294871c1fdc83abc58ef4ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ee576f55b57e17d294871c1fdc83abc58ef4ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/597bcec379bec40641eb6a4637ebbec69e184582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/597bcec379bec40641eb6a4637ebbec69e184582", "html_url": "https://github.com/rust-lang/rust/commit/597bcec379bec40641eb6a4637ebbec69e184582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/597bcec379bec40641eb6a4637ebbec69e184582/comments", "author": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad816f81748e6314b428a91352b0eb536f7fffc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad816f81748e6314b428a91352b0eb536f7fffc5", "html_url": "https://github.com/rust-lang/rust/commit/ad816f81748e6314b428a91352b0eb536f7fffc5"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "cf119720e5a17cc1d3f9ae62cfb772d5c6d49287", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/597bcec379bec40641eb6a4637ebbec69e184582/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597bcec379bec40641eb6a4637ebbec69e184582/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=597bcec379bec40641eb6a4637ebbec69e184582", "patch": "@@ -17,10 +17,25 @@ use sys_common::net as net_imp;\n use sys_common::{AsInner, FromInner, IntoInner};\n use time::Duration;\n \n-/// A structure which represents a TCP stream between a local socket and a\n-/// remote socket.\n+/// A TCP stream between a local and a remote socket.\n ///\n-/// The socket will be closed when the value is dropped.\n+/// After creating a `TcpStream` by either [`connect`]ing to a remote host or\n+/// [`accept`]ing a connection on a [`TcpListener`], data can be transmitted\n+/// by [reading] and [writing] to it.\n+///\n+/// The connection will be closed when the value is dropped. The reading and writing\n+/// portions of the connection can also be shut down individually with the [`shutdown`]\n+/// method.\n+///\n+/// The Transmission Control Protocol is specified in [IETF RFC 793].\n+///\n+/// [`accept`]: ../../std/net/struct.TcpListener.html#method.accept\n+/// [`connect`]: #method.connect\n+/// [IETF RFC 793]: https://tools.ietf.org/html/rfc793\n+/// [reading]: ../../std/io/trait.Read.html\n+/// [`shutdown`]: #method.shutdown\n+/// [`TcpListener`]: ../../std/net/struct.TcpListener.html\n+/// [writing]: ../../std/io/trait.Write.html\n ///\n /// # Examples\n ///\n@@ -39,7 +54,21 @@ use time::Duration;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct TcpStream(net_imp::TcpStream);\n \n-/// A structure representing a socket server.\n+/// A TCP socket server, listening for connections.\n+///\n+/// After creating a `TcpListener` by [`bind`]ing it to a socket address, it listens\n+/// for incoming TCP connections. These can be accepted by calling [`accept`] or by\n+/// iterating over the [`Incoming`] iterator returned by [`incoming`].\n+///\n+/// The socket will be closed when the value is dropped.\n+///\n+/// The Transmission Control Protocol is specified in [IETF RFC 793].\n+///\n+/// [`accept`]: #method.accept\n+/// [`bind`]: #method.bind\n+/// [IETF RFC 793]: https://tools.ietf.org/html/rfc793\n+/// [`Incoming`]: ../../std/net/struct.Incoming.html\n+/// [`incoming`]: #method.incoming\n ///\n /// # Examples\n ///"}, {"sha": "cdf04f7f1a484bb02f5f257000060fe82d98b7b8", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/597bcec379bec40641eb6a4637ebbec69e184582/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597bcec379bec40641eb6a4637ebbec69e184582/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=597bcec379bec40641eb6a4637ebbec69e184582", "patch": "@@ -15,11 +15,29 @@ use sys_common::net as net_imp;\n use sys_common::{AsInner, FromInner, IntoInner};\n use time::Duration;\n \n-/// A User Datagram Protocol socket.\n+/// A UDP socket.\n ///\n-/// This is an implementation of a bound UDP socket. This supports both IPv4 and\n-/// IPv6 addresses, and there is no corresponding notion of a server because UDP\n-/// is a datagram protocol.\n+/// After creating a `UdpSocket` by [`bind`]ing it to a socket address, data can be\n+/// [sent to] and [received from] any other socket address.\n+///\n+/// Although UDP is a connectionless protocol, this implementation provides an interface\n+/// to set an address where data should be sent and received from. After setting a remote\n+/// address with [`connect`], data can be sent to and received from that address with\n+/// [`send`] and [`recv`].\n+///\n+/// As stated in the User Datagram Protocol's specification in [IETF RFC 768], UDP is\n+/// an unordered, unreliable protocol; refer to [`TcpListener`] and [`TcpStream`] for TCP\n+/// primitives.\n+///\n+/// [`bind`]: #method.bind\n+/// [`connect`]: #method.connect\n+/// [IETF RFC 768]: https://tools.ietf.org/html/rfc768\n+/// [`recv`]: #method.recv\n+/// [received from]: #method.recv_from\n+/// [`send`]: #method.send\n+/// [sent to]: #method.send_to\n+/// [`TcpListener`]: ../../std/net/struct.TcpListener.html\n+/// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n ///\n /// # Examples\n ///\n@@ -582,9 +600,11 @@ impl UdpSocket {\n     /// Receives data on the socket from the remote address to which it is\n     /// connected.\n     ///\n-    /// The `connect` method will connect this socket to a remote address. This\n+    /// The [`connect`] method will connect this socket to a remote address. This\n     /// method will fail if the socket is not connected.\n     ///\n+    /// [`connect`]: #method.connect\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run"}]}