{"sha": "1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNTI5NWMwYmY2ZTY5YTc3MjEyMGVjNmE1NmUwZmRiMzAyMWRlZDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-13T00:40:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-13T20:54:17Z"}, "message": "Register new snapshots", "tree": {"sha": "b4c3ab032249a36a7885046556949d086f390366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4c3ab032249a36a7885046556949d086f390366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "html_url": "https://github.com/rust-lang/rust/commit/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e6883d1462ed4072b1d6a3ce6702bc14065045", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e6883d1462ed4072b1d6a3ce6702bc14065045", "html_url": "https://github.com/rust-lang/rust/commit/44e6883d1462ed4072b1d6a3ce6702bc14065045"}], "stats": {"total": 213, "additions": 11, "deletions": 202}, "files": [{"sha": "ef1701a61e80b8502c5b99f24db8c8507166ef7e", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -125,10 +125,7 @@ ifdef TRACE\n   CFG_RUSTC_FLAGS += -Z trace\n endif\n ifdef CFG_DISABLE_RPATH\n-# NOTE: make this CFG_RUSTC_FLAGS after stage0 snapshot\n-RUSTFLAGS_STAGE1 += -C no-rpath\n-RUSTFLAGS_STAGE2 += -C no-rpath\n-RUSTFLAGS_STAGE3 += -C no-rpath\n+CFG_RUSTC_FLAGS += -C no-rpath\n endif\n \n # The executables crated during this compilation process have no need to include\n@@ -140,8 +137,7 @@ endif\n # snapshot will be generated with a statically linked rustc so we only have to\n # worry about the distribution of one file (with its native dynamic\n # dependencies)\n-#\n-# NOTE: after a snapshot (stage0), put this on stage0 as well\n+RUSTFLAGS_STAGE0 += -C prefer-dynamic\n RUSTFLAGS_STAGE1 += -C prefer-dynamic\n \n # platform-specific auto-configuration"}, {"sha": "c630ac096f622ad578cec3399723567274c59064", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -35,20 +35,10 @@ Rust extras are part of the standard Rust distribution.\n #[deny(missing_doc)];\n \n extern mod sync;\n-#[cfg(not(stage0))]\n extern mod serialize;\n \n extern mod collections;\n \n-#[cfg(stage0)]\n-pub mod serialize {\n-    #[allow(missing_doc)];\n-    // Temp re-export until after a snapshot\n-    extern mod serialize = \"serialize\";\n-    pub use self::serialize::{Encoder, Decoder, Encodable, Decodable,\n-                                   EncoderHelpers, DecoderHelpers};\n-}\n-\n // Utility modules\n \n pub mod c_vec;"}, {"sha": "dd43d8e2971a83a5332d1b1a5ed8ad38f79357f9", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -57,53 +57,6 @@ fn debug_mem() -> bool {\n }\n \n /// Destroys all managed memory (i.e. @ boxes) held by the current task.\n-#[cfg(stage0)]\n-pub unsafe fn annihilate() {\n-    use rt::local_heap::local_free;\n-\n-    let mut n_total_boxes = 0u;\n-\n-    // Pass 1: Make all boxes immortal.\n-    //\n-    // In this pass, nothing gets freed, so it does not matter whether\n-    // we read the next field before or after the callback.\n-    each_live_alloc(true, |alloc| {\n-        n_total_boxes += 1;\n-        (*alloc).ref_count = RC_IMMORTAL;\n-        true\n-    });\n-\n-    // Pass 2: Drop all boxes.\n-    //\n-    // In this pass, unique-managed boxes may get freed, but not\n-    // managed boxes, so we must read the `next` field *after* the\n-    // callback, as the original value may have been freed.\n-    each_live_alloc(false, |alloc| {\n-        let tydesc = (*alloc).type_desc;\n-        let data = &(*alloc).data as *();\n-        ((*tydesc).drop_glue)(data as *i8);\n-        true\n-    });\n-\n-    // Pass 3: Free all boxes.\n-    //\n-    // In this pass, managed boxes may get freed (but not\n-    // unique-managed boxes, though I think that none of those are\n-    // left), so we must read the `next` field before, since it will\n-    // not be valid after.\n-    each_live_alloc(true, |alloc| {\n-        local_free(alloc as *u8);\n-        true\n-    });\n-\n-    if debug_mem() {\n-        // We do logging here w/o allocation.\n-        debug!(\"total boxes annihilated: {}\", n_total_boxes);\n-    }\n-}\n-\n-/// Destroys all managed memory (i.e. @ boxes) held by the current task.\n-#[cfg(not(stage0))]\n pub unsafe fn annihilate() {\n     use rt::local_heap::local_free;\n "}, {"sha": "f88da60ae9b7971a219783371273635ad6e5a1a8", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -441,11 +441,4 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         self.align_to::<&'static u8>();\n         true\n     }\n-\n-    // NOTE Remove after next snapshot.\n-    #[cfg(stage0)]\n-    fn visit_type(&mut self) -> bool {\n-        if ! self.inner.visit_type() { return false; }\n-        true\n-    }\n }"}, {"sha": "dc745ff548f02b0a39de4254d3999a89b1b037c7", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -601,10 +601,6 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n \n     fn visit_param(&mut self, _i: uint) -> bool { true }\n     fn visit_self(&mut self) -> bool { true }\n-\n-    // NOTE Remove after next snapshot.\n-    #[cfg(stage0)]\n-    fn visit_type(&mut self) -> bool { true }\n }\n \n pub fn write_repr<T>(writer: &mut io::Writer, object: &T) -> io::IoResult<()> {"}, {"sha": "4bce16706ee60c3235c710a598daf281cfe4378b", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -10,8 +10,6 @@\n \n use libc::{c_void, size_t, free, malloc, realloc};\n use ptr::{RawPtr, mut_null};\n-#[cfg(stage0)]\n-use unstable::intrinsics::TyDesc;\n use unstable::intrinsics::abort;\n use unstable::raw;\n use mem::size_of;\n@@ -75,40 +73,14 @@ pub unsafe fn exchange_malloc(size: uint) -> *u8 {\n }\n \n // FIXME: #7496\n-#[cfg(not(test), stage0)]\n-#[lang=\"closure_exchange_malloc\"]\n-#[inline]\n-pub unsafe fn closure_exchange_malloc_(td: *u8, size: uint) -> *u8 {\n-    closure_exchange_malloc(td, size)\n-}\n-\n-// FIXME: #7496\n-#[cfg(not(test), not(stage0))]\n+#[cfg(not(test))]\n #[lang=\"closure_exchange_malloc\"]\n #[inline]\n pub unsafe fn closure_exchange_malloc_(drop_glue: fn(*mut u8), size: uint, align: uint) -> *u8 {\n     closure_exchange_malloc(drop_glue, size, align)\n }\n \n #[inline]\n-#[cfg(stage0)]\n-pub unsafe fn closure_exchange_malloc(td: *u8, size: uint) -> *u8 {\n-    let td = td as *TyDesc;\n-    let size = size;\n-\n-    assert!(td.is_not_null());\n-\n-    let total_size = get_box_size(size, (*td).align);\n-    let p = malloc_raw(total_size);\n-\n-    let alloc = p as *mut raw::Box<()>;\n-    (*alloc).type_desc = td;\n-\n-    alloc as *u8\n-}\n-\n-#[inline]\n-#[cfg(not(stage0))]\n pub unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *u8 {\n     let total_size = get_box_size(size, align);\n     let p = malloc_raw(total_size);"}, {"sha": "023f712d3a08ad1d9f5150b1de4a9a5ff4b8921e", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -21,8 +21,6 @@ use rt::env;\n use rt::global_heap;\n use rt::local::Local;\n use rt::task::Task;\n-#[cfg(stage0)]\n-use unstable::intrinsics::TyDesc;\n use unstable::raw;\n use vec::ImmutableVector;\n \n@@ -61,29 +59,6 @@ impl LocalHeap {\n     }\n \n     #[inline]\n-    #[cfg(stage0)]\n-    pub fn alloc(&mut self, td: *TyDesc, size: uint) -> *mut Box {\n-        let total_size = global_heap::get_box_size(size, unsafe { (*td).align });\n-        let alloc = self.memory_region.malloc(total_size);\n-        {\n-            // Make sure that we can't use `mybox` outside of this scope\n-            let mybox: &mut Box = unsafe { cast::transmute(alloc) };\n-            // Clear out this box, and move it to the front of the live\n-            // allocations list\n-            mybox.type_desc = td;\n-            mybox.ref_count = 1;\n-            mybox.prev = ptr::mut_null();\n-            mybox.next = self.live_allocs;\n-            if !self.live_allocs.is_null() {\n-                unsafe { (*self.live_allocs).prev = alloc; }\n-            }\n-            self.live_allocs = alloc;\n-        }\n-        return alloc;\n-    }\n-\n-    #[inline]\n-    #[cfg(not(stage0))]\n     pub fn alloc(&mut self, drop_glue: fn(*mut u8), size: uint, align: uint) -> *mut Box {\n         let total_size = global_heap::get_box_size(size, align);\n         let alloc = self.memory_region.malloc(total_size);\n@@ -126,41 +101,6 @@ impl LocalHeap {\n     }\n \n     #[inline]\n-    #[cfg(stage0)]\n-    pub fn free(&mut self, alloc: *mut Box) {\n-        {\n-            // Make sure that we can't use `mybox` outside of this scope\n-            let mybox: &mut Box = unsafe { cast::transmute(alloc) };\n-            assert!(!mybox.type_desc.is_null());\n-\n-            // Unlink it from the linked list\n-            if !mybox.prev.is_null() {\n-                unsafe { (*mybox.prev).next = mybox.next; }\n-            }\n-            if !mybox.next.is_null() {\n-                unsafe { (*mybox.next).prev = mybox.prev; }\n-            }\n-            if self.live_allocs == alloc {\n-                self.live_allocs = mybox.next;\n-            }\n-\n-            // Destroy the box memory-wise\n-            if self.poison_on_free {\n-                unsafe {\n-                    let ptr: *mut u8 = cast::transmute(&mybox.data);\n-                    ptr::set_memory(ptr, 0xab, (*mybox.type_desc).size);\n-                }\n-            }\n-            mybox.prev = ptr::mut_null();\n-            mybox.next = ptr::mut_null();\n-            mybox.type_desc = ptr::null();\n-        }\n-\n-        self.memory_region.free(alloc);\n-    }\n-\n-    #[inline]\n-    #[cfg(not(stage0))]\n     pub fn free(&mut self, alloc: *mut Box) {\n         {\n             // Make sure that we can't use `mybox` outside of this scope\n@@ -339,20 +279,6 @@ impl Drop for MemoryRegion {\n }\n \n #[inline]\n-#[cfg(stage0)]\n-pub unsafe fn local_malloc(td: *u8, size: uint) -> *u8 {\n-    // FIXME: Unsafe borrow for speed. Lame.\n-    let task: Option<*mut Task> = Local::try_unsafe_borrow();\n-    match task {\n-        Some(task) => {\n-            (*task).heap.alloc(td as *TyDesc, size) as *u8\n-        }\n-        None => rtabort!(\"local malloc outside of task\")\n-    }\n-}\n-\n-#[inline]\n-#[cfg(not(stage0))]\n pub unsafe fn local_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *u8 {\n     // FIXME: Unsafe borrow for speed. Lame.\n     let task: Option<*mut Task> = Local::try_unsafe_borrow();"}, {"sha": "c983d82563caf7000a44aae32f074d1c70f378dc", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -160,10 +160,6 @@ pub trait TyVisitor {\n     fn visit_trait(&mut self, name: &str) -> bool;\n     fn visit_param(&mut self, i: uint) -> bool;\n     fn visit_self(&mut self) -> bool;\n-\n-    // NOTE Remove after next snapshot.\n-    #[cfg(stage0)]\n-    fn visit_type(&mut self) -> bool;\n }\n \n extern \"rust-intrinsic\" {"}, {"sha": "4648f149a9fed92c287939d30f67c5e02cce9a5f", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -27,14 +27,6 @@ pub fn fail_bounds_check(file: *u8, line: uint, index: uint, len: uint) -> ! {\n }\n \n #[lang=\"malloc\"]\n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn local_malloc(td: *u8, size: uint) -> *u8 {\n-    ::rt::local_heap::local_malloc(td, size)\n-}\n-\n-#[lang=\"malloc\"]\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn local_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *u8 {\n     ::rt::local_heap::local_malloc(drop_glue, size, align)"}, {"sha": "87547997798f5f1049107c46033fbc2a7c0aa70c", "filename": "src/libstd/unstable/raw.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Funstable%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Flibstd%2Funstable%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fraw.rs?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -9,21 +9,8 @@\n // except according to those terms.\n \n use cast;\n-#[cfg(stage0)]\n-use unstable::intrinsics::TyDesc;\n \n /// The representation of a Rust managed box\n-#[cfg(stage0)]\n-pub struct Box<T> {\n-    ref_count: uint,\n-    type_desc: *TyDesc,\n-    prev: *mut Box<T>,\n-    next: *mut Box<T>,\n-    data: T\n-}\n-\n-/// The representation of a Rust managed box\n-#[cfg(not(stage0))]\n pub struct Box<T> {\n     ref_count: uint,\n     drop_glue: fn(ptr: *mut u8),"}, {"sha": "2db884fdb6436d2df391db5fdab3c688924638bb", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1c5295c0bf6e69a772120ec6a56e0fdb3021ded4/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=1c5295c0bf6e69a772120ec6a56e0fdb3021ded4", "patch": "@@ -1,3 +1,11 @@\n+S 2014-02-12 c62f6ce\n+  freebsd-x86_64 737a423c5f803119ff5a692eac432fa9d0c595a8\n+  linux-i386 a7e90e27e8b6a3fa79ddc15f0ed217ccbade875d\n+  linux-x86_64 8f5fdf9f07b2afbc55d8d8c06c60aeb532b5ea83\n+  macos-i386 57bb225f45bc57fef4c34552a2d5814ab4913087\n+  macos-x86_64 d37b62478aa1c1dd1babb19d1df494d2aaf59c4c\n+  winnt-i386 2c5c5f7228140cd79f120201805504a9e07ad245\n+\n S 2014-02-03 346d378\n   freebsd-x86_64 d369c1a83a2be6eb42bd0e550a1adc38ffed0804\n   linux-i386 a6d4ab441f5b285d7aecbb940fa733526b413f34"}]}