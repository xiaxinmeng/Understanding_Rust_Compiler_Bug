{"sha": "fc8f88e04e04f83879e7d2548de5b5addac10600", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOGY4OGUwNGUwNGY4Mzg3OWU3ZDI1NDhkZTViNWFkZGFjMTA2MDA=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T04:08:27Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T04:08:27Z"}, "message": "change helper fn 'write_os_str_to_wide_str'", "tree": {"sha": "0e74971f408cfd3724032e6a9e8515a164272977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e74971f408cfd3724032e6a9e8515a164272977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc8f88e04e04f83879e7d2548de5b5addac10600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8f88e04e04f83879e7d2548de5b5addac10600", "html_url": "https://github.com/rust-lang/rust/commit/fc8f88e04e04f83879e7d2548de5b5addac10600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc8f88e04e04f83879e7d2548de5b5addac10600/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0a457c8b1750e82f19527b18b313f3514633f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a457c8b1750e82f19527b18b313f3514633f0", "html_url": "https://github.com/rust-lang/rust/commit/0d0a457c8b1750e82f19527b18b313f3514633f0"}], "stats": {"total": 28, "additions": 6, "deletions": 22}, "files": [{"sha": "a11e231acb30e2ee7aa7f29160a6a1bcb22257d0", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc8f88e04e04f83879e7d2548de5b5addac10600/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/fc8f88e04e04f83879e7d2548de5b5addac10600/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=fc8f88e04e04f83879e7d2548de5b5addac10600", "patch": "@@ -1 +1 @@\n-a5fb9ae5b2ed3cb011ada9dc1e8633aa0927f279\n+7b73d14b0b35e7b4f79f2d71dc1bbbab31698288"}, {"sha": "cdad723502ebbd62a9a5f14938e45b1b7747287a", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fc8f88e04e04f83879e7d2548de5b5addac10600/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8f88e04e04f83879e7d2548de5b5addac10600/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=fc8f88e04e04f83879e7d2548de5b5addac10600", "patch": "@@ -463,18 +463,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n-    /// Dispatches to appropriate implementations for reading an OsString from Memory,\n-    /// depending on the interpretation target.\n-    /// FIXME: Use `Cow` to avoid copies\n-    fn read_os_str_from_target_str(&self, scalar: Scalar<Tag>) -> InterpResult<'tcx, OsString> {\n-        let target_os = self.eval_context_ref().tcx.sess.target.target.target_os.as_str();\n-        match target_os {\n-            \"linux\" | \"macos\" => self.read_os_str_from_c_str(scalar).map(|x| x.to_os_string()),\n-            \"windows\" => self.read_os_str_from_wide_str(scalar),\n-            unsupported => throw_unsup_format!(\"OsString support for target OS `{}` not yet available\", unsupported),\n-        }\n-    }\n-\n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle.\n     fn read_os_str_from_c_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, &'a OsStr>\n@@ -567,7 +555,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn write_os_str_to_wide_str(\n         &mut self,\n         os_str: &OsStr,\n-        mplace: MPlaceTy<'tcx, Tag>,\n+        scalar: Scalar<Tag>,\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         #[cfg(windows)]\n@@ -593,14 +581,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok((false, string_length));\n         }\n \n-        let this = self.eval_context_mut();\n-\n         // Store the UTF-16 string.\n-        let char_size = Size::from_bytes(2);\n-        for (idx, c) in u16_vec.into_iter().chain(iter::once(0x0000)).enumerate() {\n-            let place = this.mplace_field(mplace, idx)?;\n-            this.write_scalar(Scalar::from_uint(c, char_size), place.into())?;\n-        }\n+        self.eval_context_mut()\n+            .memory\n+            .write_u16s(scalar, u16_vec.into_iter().chain(iter::once(0x0000)))?;\n         Ok((true, string_length))\n     }\n \n@@ -645,7 +629,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u16, size);\n         let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind);\n-        assert!(self.write_os_str_to_wide_str(os_str, arg_place, size).unwrap().0);\n+        assert!(self.write_os_str_to_wide_str(os_str, arg_place.ptr, size).unwrap().0);\n         arg_place.ptr.assert_ptr()\n     }\n "}]}