{"sha": "dfb32af87d9524caae3edb2c74d6165380eda063", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYjMyYWY4N2Q5NTI0Y2FhZTNlZGIyYzc0ZDYxNjUzODBlZGEwNjM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-03T15:42:36Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-03T18:12:55Z"}, "message": "Rollup merge of #50421 - kennytm:fix-50415-ice-when-returning-range-inclusive-from-closure, r=michaelwoerister\n\nFix ICE when using a..=b in a closure.\n\nFix #50415.", "tree": {"sha": "1d3ca26cccc27c85a97c5dda718fee02239689d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d3ca26cccc27c85a97c5dda718fee02239689d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb32af87d9524caae3edb2c74d6165380eda063", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrrUScACgkQ/vbIBR0O\nATw4exAAk8Eg9zOYY/BxJ0+/55ZX+QiqB6uIzK+LYPWMwj/Yp1B/1IS63eACnovC\n5nlMrECErgvPgKfRnl1IVh/dFp2i3cXNeD/4bbeCGe64Th1WN4I0qNIVsgDy7TIz\nGN9f6twRw2DAu8G+Ow4cum7WmS9q1h8yOijkqz5ZWBce/SdSkhYu7DxkNO5EIM9X\nL15Otq9jRTfFSlxl2Isng9JmU30U80aJrI230X7LZuzxPninCvZJeIz4fyOPfhyX\npCax7brSe6GLKLoqLY3It9MoooCtHaRzCgdtB8B927IThjvHfMPGWJewOmw5XlUV\n3A+zXKv6WC7ZBnnSSY/9C0TPjC3t7p2gRahs0WUcd3TZzQTixw8Gw1282r3Z+zFm\ngG4vqNB7wnqN/Gno5NErrYs3CNHl1eWzA8pKfmJIUOmlK/3mNg5gx5hQaWh8pOX7\n1QANVbXPwF1fR5dsYfOEPKV6FNiEGwqU7fCAvqo1MAgnxzEdCjvhFwztk1yUtySd\nHJ9Ydno3G40UECnSEO0Y4gGvnDfae6kTg3ijwDs8/C8LND9EX6rdWPVXnxnaMlxX\nboYfQ5MIL3B1xj2yey0g0XP5WncgCLZj114Zf9jIUUh+NG3KMSZBcjow3YXoTSdA\nvIpRAd08dyBOxSmnPpznTwXlKgyH9Yj6xN2ztsdXtcwJdg2sPp4=\n=HHYE\n-----END PGP SIGNATURE-----", "payload": "tree 1d3ca26cccc27c85a97c5dda718fee02239689d7\nparent 5976e8ac6b62cb77e9f299c46557e61fd4588d2f\nparent 83c45051f83e7dac6f5cb2d53f00f42b574d8165\nauthor kennytm <kennytm@gmail.com> 1525362156 +0800\ncommitter kennytm <kennytm@gmail.com> 1525371175 +0800\n\nRollup merge of #50421 - kennytm:fix-50415-ice-when-returning-range-inclusive-from-closure, r=michaelwoerister\n\nFix ICE when using a..=b in a closure.\n\nFix #50415.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb32af87d9524caae3edb2c74d6165380eda063", "html_url": "https://github.com/rust-lang/rust/commit/dfb32af87d9524caae3edb2c74d6165380eda063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb32af87d9524caae3edb2c74d6165380eda063/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5976e8ac6b62cb77e9f299c46557e61fd4588d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5976e8ac6b62cb77e9f299c46557e61fd4588d2f", "html_url": "https://github.com/rust-lang/rust/commit/5976e8ac6b62cb77e9f299c46557e61fd4588d2f"}, {"sha": "83c45051f83e7dac6f5cb2d53f00f42b574d8165", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c45051f83e7dac6f5cb2d53f00f42b574d8165", "html_url": "https://github.com/rust-lang/rust/commit/83c45051f83e7dac6f5cb2d53f00f42b574d8165"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "51f0c1d7047c91613c76e3ece8213546ec6db877", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=dfb32af87d9524caae3edb2c74d6165380eda063", "patch": "@@ -3121,9 +3121,9 @@ impl<'a> LoweringContext<'a> {\n             }\n             // Desugar `<start>..=<end>` to `std::ops::RangeInclusive::new(<start>, <end>)`\n             ExprKind::Range(Some(ref e1), Some(ref e2), RangeLimits::Closed) => {\n-                // FIXME: Use head_sp directly after RangeInclusive::new() is stabilized in stage0.\n+                // FIXME: Use e.span directly after RangeInclusive::new() is stabilized in stage0.\n                 let span = self.allow_internal_unstable(CompilerDesugaringKind::DotFill, e.span);\n-                let id = self.lower_node_id(e.id);\n+                let id = self.next_id();\n                 let e1 = self.lower_expr(e1);\n                 let e2 = self.lower_expr(e2);\n                 let ty_path = P(self.std_path(span, &[\"ops\", \"RangeInclusive\"], false));"}, {"sha": "b5461d61dd4f6e15fd3aa85fb3037603b8654469", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=dfb32af87d9524caae3edb2c74d6165380eda063", "patch": "@@ -1252,10 +1252,7 @@ impl LitKind {\n \n         match *self {\n             LitKind::Str(string, ast::StrStyle::Cooked) => {\n-                let mut escaped = String::new();\n-                for ch in string.as_str().chars() {\n-                    escaped.extend(ch.escape_unicode());\n-                }\n+                let escaped = string.as_str().escape_default();\n                 Token::Literal(token::Lit::Str_(Symbol::intern(&escaped)), None)\n             }\n             LitKind::Str(string, ast::StrStyle::Raw(n)) => {"}, {"sha": "f148aaf7267eec9dc581fdfc025d8f2884df44b6", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=dfb32af87d9524caae3edb2c74d6165380eda063", "patch": "@@ -25,6 +25,7 @@\n #![feature(non_exhaustive)]\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]\n+#![feature(str_escape)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "f252020bc31698836dc454794a6a8588288a8327", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=dfb32af87d9524caae3edb2c74d6165380eda063", "patch": "@@ -298,14 +298,10 @@ pub fn char_lit(lit: &str, diag: Option<(Span, &Handler)>) -> (char, isize) {\n     }\n }\n \n-pub fn escape_default(s: &str) -> String {\n-    s.chars().map(char::escape_default).flat_map(|x| x).collect()\n-}\n-\n /// Parse a string representing a string literal into its final form. Does\n /// unescaping.\n pub fn str_lit(lit: &str, diag: Option<(Span, &Handler)>) -> String {\n-    debug!(\"parse_str_lit: given {}\", escape_default(lit));\n+    debug!(\"str_lit: given {}\", lit.escape_default());\n     let mut res = String::with_capacity(lit.len());\n \n     let error = |i| format!(\"lexer should have rejected {} at {}\", lit, i);\n@@ -374,7 +370,7 @@ pub fn str_lit(lit: &str, diag: Option<(Span, &Handler)>) -> String {\n /// Parse a string representing a raw string literal into its final form. The\n /// only operation this does is convert embedded CRLF into a single LF.\n pub fn raw_str_lit(lit: &str) -> String {\n-    debug!(\"raw_str_lit: given {}\", escape_default(lit));\n+    debug!(\"raw_str_lit: given {}\", lit.escape_default());\n     let mut res = String::with_capacity(lit.len());\n \n     let mut chars = lit.chars().peekable();"}, {"sha": "27c5a14ff0e8b4ee06b7e37a1cc7e9796a7d7acf", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dfb32af87d9524caae3edb2c74d6165380eda063", "patch": "@@ -656,7 +656,7 @@ pub trait PrintState<'a> {\n                     style: ast::StrStyle) -> io::Result<()> {\n         let st = match style {\n             ast::StrStyle::Cooked => {\n-                (format!(\"\\\"{}\\\"\", parse::escape_default(st)))\n+                (format!(\"\\\"{}\\\"\", st.escape_default()))\n             }\n             ast::StrStyle::Raw(n) => {\n                 (format!(\"r{delim}\\\"{string}\\\"{delim}\","}, {"sha": "aa493ce03213027f80be84d13086c17c250b8b81", "filename": "src/test/run-pass/issue-50415.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Ftest%2Frun-pass%2Fissue-50415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb32af87d9524caae3edb2c74d6165380eda063/src%2Ftest%2Frun-pass%2Fissue-50415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-50415.rs?ref=dfb32af87d9524caae3edb2c74d6165380eda063", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    // -------- Simplified test case --------\n+\n+    let _ = || 0..=1;\n+\n+    // -------- Original test case --------\n+\n+    let full_length = 1024;\n+    let range = {\n+        // do some stuff, omit here\n+        None\n+    };\n+\n+    let range = range.map(|(s, t)| s..=t).unwrap_or(0..=(full_length-1));\n+\n+    assert_eq!(range, 0..=1023);\n+}"}]}