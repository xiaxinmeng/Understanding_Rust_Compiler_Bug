{"sha": "b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMDU3ZjRkNWZlNzE1NmFhODVlMTg0NGQzNjM4ZmExNGJhNDhiNzk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-28T11:41:46Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:29Z"}, "message": "Check projections are well-formed when using projection candidates", "tree": {"sha": "3dcb6de03084fe3bdd14ba25d09009c6b427b5cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dcb6de03084fe3bdd14ba25d09009c6b427b5cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "html_url": "https://github.com/rust-lang/rust/commit/b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf", "html_url": "https://github.com/rust-lang/rust/commit/87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf"}], "stats": {"total": 308, "additions": 278, "deletions": 30}, "files": [{"sha": "6c7732f28e41f5500d64ffca78f855df6579d812", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -323,9 +323,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => return,\n         }\n \n-        let result = self\n-            .infcx\n-            .probe(|_| self.match_projection_obligation_against_definition_bounds(obligation));\n+        let result = self.infcx.probe(|_| {\n+            self.match_projection_obligation_against_definition_bounds(obligation).is_some()\n+        });\n \n         if result {\n             candidates.vec.push(ProjectionCandidate);"}, {"sha": "625bb5d7a44fa7bf40a0ad8d9ecbb628e4975863", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -69,8 +69,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ProjectionCandidate => {\n-                self.confirm_projection_candidate(obligation);\n-                Ok(ImplSource::Param(Vec::new()))\n+                let obligations = self.confirm_projection_candidate(obligation);\n+                Ok(ImplSource::Param(obligations))\n             }\n \n             ClosureCandidate => {\n@@ -116,10 +116,34 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    fn confirm_projection_candidate(&mut self, obligation: &TraitObligation<'tcx>) {\n+    fn confirm_projection_candidate(\n+        &mut self,\n+        obligation: &TraitObligation<'tcx>,\n+    ) -> Vec<PredicateObligation<'tcx>> {\n         self.infcx.commit_unconditionally(|_| {\n-            let result = self.match_projection_obligation_against_definition_bounds(obligation);\n-            assert!(result);\n+            let candidate = self\n+                .match_projection_obligation_against_definition_bounds(obligation)\n+                .unwrap_or_else(|| bug!(\"Can't find selected projection candidate\"));\n+            let mut obligations = self\n+                .infcx\n+                .at(&obligation.cause, obligation.param_env)\n+                .sup(obligation.predicate.to_poly_trait_ref(), candidate)\n+                .map(|InferOk { obligations, .. }| obligations)\n+                .unwrap_or_else(|_| {\n+                    bug!(\n+                        \"Projection bound `{:?}` was applicable to `{:?}` but now is not\",\n+                        candidate,\n+                        obligation\n+                    );\n+                });\n+            // Require that the projection is well-formed.\n+            let self_ty = obligation.predicate.skip_binder().self_ty();\n+            obligations.push(Obligation::new(\n+                obligation.cause.clone(),\n+                obligation.param_env,\n+                ty::PredicateKind::WellFormed(self_ty.into()).to_predicate(self.tcx()),\n+            ));\n+            obligations\n         })\n     }\n "}, {"sha": "2d6ccfe031e5b23e07393e4bab9c1ed802724c11", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -1159,7 +1159,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn match_projection_obligation_against_definition_bounds(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-    ) -> bool {\n+    ) -> Option<ty::PolyTraitRef<'tcx>> {\n         let poly_trait_predicate = self.infcx().resolve_vars_if_possible(&obligation.predicate);\n         let (placeholder_trait_predicate, _) =\n             self.infcx().replace_bound_vars_with_placeholders(&poly_trait_predicate);\n@@ -1170,9 +1170,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         );\n \n         let tcx = self.infcx.tcx;\n-        let predicates = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {\n-            ty::Projection(ref data) => tcx.item_bounds(data.item_def_id).subst(tcx, data.substs),\n-            ty::Opaque(def_id, substs) => tcx.item_bounds(def_id).subst(tcx, substs),\n+        let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {\n+            ty::Projection(ref data) => (data.item_def_id, data.substs),\n+            ty::Opaque(def_id, substs) => (def_id, substs),\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,\n@@ -1182,12 +1182,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n             }\n         };\n+        let bounds = tcx.item_bounds(def_id).subst(tcx, substs);\n \n-        let matching_bound = predicates.iter().find_map(|bound| {\n+        let matching_bound = bounds.iter().find_map(|bound| {\n             if let ty::PredicateAtom::Trait(pred, _) = bound.skip_binders() {\n                 let bound = ty::Binder::bind(pred.trait_ref);\n                 if self.infcx.probe(|_| {\n                     self.match_projection(obligation, bound, placeholder_trait_predicate.trait_ref)\n+                        .is_ok()\n                 }) {\n                     return Some(bound);\n                 }\n@@ -1200,30 +1202,21 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n              matching_bound={:?}\",\n             matching_bound\n         );\n-        match matching_bound {\n-            None => false,\n-            Some(bound) => {\n-                // Repeat the successful match, if any, this time outside of a probe.\n-                let result =\n-                    self.match_projection(obligation, bound, placeholder_trait_predicate.trait_ref);\n-\n-                assert!(result);\n-                true\n-            }\n-        }\n+        matching_bound\n     }\n \n     fn match_projection(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         trait_bound: ty::PolyTraitRef<'tcx>,\n         placeholder_trait_ref: ty::TraitRef<'tcx>,\n-    ) -> bool {\n+    ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {\n         debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());\n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n             .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)\n-            .is_ok()\n+            .map(|InferOk { obligations, .. }| obligations)\n+            .map_err(|_| ())\n     }\n \n     fn evaluate_where_clause<'o>("}, {"sha": "b059b03bc058ab13481be49220c50f7e04405e73", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -1269,7 +1269,11 @@ pub fn check_type_bounds<'tcx>(\n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n         let fcx = FnCtxt::new(&inh, param_env, impl_ty_hir_id);\n-        fcx.regionck_item(impl_ty_hir_id, impl_ty_span, &[]);\n+        let implied_bounds = match impl_ty.container {\n+            ty::TraitContainer(_) => vec![],\n+            ty::ImplContainer(def_id) => fcx.impl_implied_bounds(def_id, impl_ty_span),\n+        };\n+        fcx.regionck_item(impl_ty_hir_id, impl_ty_span, &implied_bounds);\n \n         Ok(())\n     })"}, {"sha": "b4e950ab6e9e50b7771b25ca7c3cff6eb6c8ddbf", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -1425,7 +1425,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .collect()\n     }\n \n-    fn impl_implied_bounds(&self, impl_def_id: DefId, span: Span) -> Vec<Ty<'tcx>> {\n+    pub(super) fn impl_implied_bounds(&self, impl_def_id: DefId, span: Span) -> Vec<Ty<'tcx>> {\n         match self.tcx.impl_trait_ref(impl_def_id) {\n             Some(ref trait_ref) => {\n                 // Trait impl: take implied bounds from all types that"}, {"sha": "c88fb8ad96e3ea970fd269a59e5b540c51646f03", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -0,0 +1,62 @@\n+// Like `projection-bound-cycle.rs` but this avoids using\n+// `feature(trivial_bounds)`.\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n+\n+trait Print {\n+    fn print();\n+}\n+\n+trait Foo {\n+    type Item: Sized where <Self as Foo>::Item: Sized;\n+}\n+\n+struct Number<T> { t: T }\n+\n+impl<T> Foo for Number<T> {\n+    // Well-formedness checks require that the following\n+    // goal is true:\n+    // ```\n+    // if ([T]: Sized) { # if the where clauses hold\n+    //     [T]: Sized # then the bound on the associated type hold\n+    // }\n+    // ```\n+    // which it is :)\n+    type Item where [T]: Sized = [T];\n+}\n+\n+struct OnlySized<T> where T: Sized { f: T }\n+impl<T> Print for OnlySized<T> {\n+    fn print() {\n+        println!(\"{}\", std::mem::size_of::<T>());\n+    }\n+}\n+\n+trait Bar {\n+    type Assoc: Print;\n+}\n+\n+impl<T> Bar for T where T: Foo {\n+    // This is not ok, we need to prove `wf(<T as Foo>::Item)`, which requires\n+    // knowing that `<T as Foo>::Item: Sized` to satisfy the where clause. We\n+    // can use the bound on `Foo::Item` for this, but that requires\n+    // `wf(<T as Foo>::Item)`, which is an invalid cycle.\n+    type Assoc = OnlySized<<T as Foo>::Item>;\n+    //~^ ERROR overflow evaluating the requirement `<T as Foo>::Item: std::marker::Sized`\n+}\n+\n+fn foo<T: Print>() {\n+    T::print() // oops, in fact `T = OnlySized<str>` which is ill-formed\n+}\n+\n+fn bar<T: Bar>() {\n+    // we have `FromEnv(T: Bar)` hence\n+    // `<T as Bar>::Assoc` is well-formed and\n+    // `Implemented(<T as Bar>::Assoc: Print)` hold\n+    foo::<<T as Bar>::Assoc>()\n+}\n+\n+fn main() {\n+    bar::<Number<u8>>()\n+}"}, {"sha": "5967752ef7973176b462fdac0e472b00261b9662", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/projection-bound-cycle-generic.rs:4:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: std::marker::Sized`\n+  --> $DIR/projection-bound-cycle-generic.rs:45:5\n+   |\n+LL | struct OnlySized<T> where T: Sized { f: T }\n+   |                  - required by this bound in `OnlySized`\n+...\n+LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "0728dc1bcbc9b8ee18375fb90497c9353c61e213", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -0,0 +1,64 @@\n+// Test case from Chalk.\n+// Make sure that we make sure that we don't allow arbitrary bounds to be\n+// proven when a bound and a where clause of an associated type are the same.\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n+#![feature(trivial_bounds)]\n+\n+trait Print {\n+    fn print();\n+}\n+\n+trait Foo {\n+    type Item: Sized where <Self as Foo>::Item: Sized;\n+}\n+\n+struct Number { }\n+\n+impl Foo for Number {\n+    // Well-formedness checks require that the following\n+    // goal is true:\n+    // ```\n+    // if (str: Sized) { # if the where clauses hold\n+    //     str: Sized # then the bound on the associated type hold\n+    // }\n+    // ```\n+    // which it is :)\n+    type Item where str: Sized = str;\n+}\n+\n+struct OnlySized<T> where T: Sized { f: T }\n+impl<T> Print for OnlySized<T> {\n+    fn print() {\n+        println!(\"{}\", std::mem::size_of::<T>());\n+    }\n+}\n+\n+trait Bar {\n+    type Assoc: Print;\n+}\n+\n+impl<T> Bar for T where T: Foo {\n+    // This is not ok, we need to prove `wf(<T as Foo>::Item)`, which requires\n+    // knowing that `<T as Foo>::Item: Sized` to satisfy the where clause. We\n+    // can use the bound on `Foo::Item` for this, but that requires\n+    // `wf(<T as Foo>::Item)`, which is an invalid cycle.\n+    type Assoc = OnlySized<<T as Foo>::Item>;\n+    //~^ ERROR overflow evaluating the requirement `<T as Foo>::Item: std::marker::Sized`\n+}\n+\n+fn foo<T: Print>() {\n+    T::print() // oops, in fact `T = OnlySized<str>` which is ill-formed\n+}\n+\n+fn bar<T: Bar>() {\n+    // we have `FromEnv(T: Bar)` hence\n+    // `<T as Bar>::Assoc` is well-formed and\n+    // `Implemented(<T as Bar>::Assoc: Print)` hold\n+    foo::<<T as Bar>::Assoc>()\n+}\n+\n+fn main() {\n+    bar::<Number>()\n+}"}, {"sha": "80d102013a79b1952d99702e60ba40ad7fd08e93", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/projection-bound-cycle.rs:5:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: std::marker::Sized`\n+  --> $DIR/projection-bound-cycle.rs:47:5\n+   |\n+LL | struct OnlySized<T> where T: Sized { f: T }\n+   |                  - required by this bound in `OnlySized`\n+...\n+LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "da7f6737733564340d487c8b5b57e012ea0060bc", "filename": "src/test/ui/specialization/issue-38091-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.rs?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -0,0 +1,23 @@\n+#![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n+\n+trait Iterate<'a> {\n+    type Ty: Valid;\n+    fn iterate(self);\n+}\n+impl<'a, T> Iterate<'a> for T where T: Check {\n+    default type Ty = ();\n+    default fn iterate(self) {}\n+}\n+\n+trait Check {}\n+impl<'a, T> Check for T where <T as Iterate<'a>>::Ty: Valid {}\n+\n+trait Valid {}\n+\n+impl Valid for () {}\n+\n+fn main() {\n+    Iterate::iterate(0);\n+    //~^ ERROR overflow evaluating the requirement `{integer}: Check`\n+}"}, {"sha": "e776ff0fafb23c3505104f49889ef598fc8c03eb", "filename": "src/test/ui/specialization/issue-38091-2.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-38091-2.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+error[E0275]: overflow evaluating the requirement `{integer}: Check`\n+  --> $DIR/issue-38091-2.rs:21:5\n+   |\n+LL |     fn iterate(self);\n+   |     ----------------- required by `Iterate::iterate`\n+...\n+LL |     Iterate::iterate(0);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: required because of the requirements on the impl of `Iterate<'_>` for `{integer}`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "cc0eeb53687de192aed7540591df684ab4d89e10", "filename": "src/test/ui/specialization/issue-38091.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.rs?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -18,4 +18,5 @@ trait Valid {}\n \n fn main() {\n     Iterate::iterate(0);\n+    //~^ ERROR overflow evaluating the requirement `{integer}: Check`\n }", "previous_filename": "src/test/ui/issues/issue-38091.rs"}, {"sha": "beec702b89e46ea55f6a7e39c848c8ffc00b3c6f", "filename": "src/test/ui/specialization/issue-38091.stderr", "status": "renamed", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3057f4d5fe7156aa85e1844d3638fa14ba48b79/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr?ref=b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "patch": "@@ -16,6 +16,18 @@ LL |     type Ty: Valid;\n LL |     default type Ty = ();\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Valid` is not implemented for `()`\n \n-error: aborting due to previous error; 1 warning emitted\n+error[E0275]: overflow evaluating the requirement `{integer}: Check`\n+  --> $DIR/issue-38091.rs:20:5\n+   |\n+LL |     fn iterate(self);\n+   |     ----------------- required by `Iterate::iterate`\n+...\n+LL |     Iterate::iterate(0);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: required because of the requirements on the impl of `Iterate<'_>` for `{integer}`\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0275, E0277.\n+For more information about an error, try `rustc --explain E0275`.", "previous_filename": "src/test/ui/issues/issue-38091.stderr"}]}