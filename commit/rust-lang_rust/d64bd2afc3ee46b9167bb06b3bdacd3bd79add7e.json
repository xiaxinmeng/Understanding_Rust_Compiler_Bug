{"sha": "d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NGJkMmFmYzNlZTQ2YjkxNjdiYjA2YjNiZGFjZDNiZDc5YWRkN2U=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-03-28T08:08:03Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-03-28T08:08:03Z"}, "message": "Push AllowTwoPhase down to the HAIR level\n\nFor consistency, use AllowTwoPhase everywhere between the frontend and MIR.", "tree": {"sha": "a48d76ca23a2df031e47b1dbdc02073247889f1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48d76ca23a2df031e47b1dbdc02073247889f1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "html_url": "https://github.com/rust-lang/rust/commit/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96ae0ee382a32d8218da454dc4fd2b2a6fa37c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/96ae0ee382a32d8218da454dc4fd2b2a6fa37c4a", "html_url": "https://github.com/rust-lang/rust/commit/96ae0ee382a32d8218da454dc4fd2b2a6fa37c4a"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "89b8bfcd4ca23b70d96fe8532c41ddeef5755ad7", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "patch": "@@ -188,6 +188,10 @@ for ty::adjustment::Adjust<'gcx> {\n impl_stable_hash_for!(struct ty::adjustment::Adjustment<'tcx> { kind, target });\n impl_stable_hash_for!(struct ty::adjustment::OverloadedDeref<'tcx> { region, mutbl });\n impl_stable_hash_for!(struct ty::UpvarBorrow<'tcx> { kind, region });\n+impl_stable_hash_for!(enum ty::adjustment::AllowTwoPhase {\n+    Yes,\n+    No\n+});\n \n impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::adjustment::AutoBorrowMutability {\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "a0c31e8b509239230c7b909d180bf3f86f9f224a", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "patch": "@@ -131,14 +131,15 @@ impl<'a, 'gcx, 'tcx> OverloadedDeref<'tcx> {\n /// new code via two-phase borrows, so we try to limit where we create two-phase\n /// capable mutable borrows.\n /// See #49434 for tracking.\n+#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n pub enum AllowTwoPhase {\n     Yes,\n     No\n }\n \n #[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n pub enum AutoBorrowMutability {\n-    Mutable { allow_two_phase_borrow: bool },\n+    Mutable { allow_two_phase_borrow: AllowTwoPhase },\n     Immutable,\n }\n "}, {"sha": "5b3739084801f093e80d25013dfc1228ae36bac4", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "patch": "@@ -662,9 +662,13 @@ trait ToBorrowKind { fn to_borrow_kind(&self) -> BorrowKind; }\n \n impl ToBorrowKind for AutoBorrowMutability {\n     fn to_borrow_kind(&self) -> BorrowKind {\n+        use rustc::ty::adjustment::AllowTwoPhase;\n         match *self {\n             AutoBorrowMutability::Mutable { allow_two_phase_borrow } =>\n-                BorrowKind::Mut { allow_two_phase_borrow },\n+                BorrowKind::Mut { allow_two_phase_borrow: match allow_two_phase_borrow {\n+                    AllowTwoPhase::Yes => true,\n+                    AllowTwoPhase::No => false\n+                }},\n             AutoBorrowMutability::Immutable =>\n                 BorrowKind::Shared,\n         }"}, {"sha": "b1fb0938698cbe3f5899fd750d9bae38c1245052", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "patch": "@@ -16,7 +16,7 @@ use hir::def::Def;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::{infer, traits};\n use rustc::ty::{self, TyCtxt, TypeFoldable, Ty};\n-use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n+use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use syntax::abi;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n@@ -182,7 +182,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     // For initial two-phase borrow\n                                     // deployment, conservatively omit\n                                     // overloaded function call ops.\n-                                    allow_two_phase_borrow: false,\n+                                    allow_two_phase_borrow: AllowTwoPhase::No,\n                                 }\n                             };\n                             autoref = Some(Adjustment {"}, {"sha": "a956dd9a4ee03d8a3eb959dbc7e353efe7ea3100", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "patch": "@@ -434,10 +434,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         let mutbl = match mt_b.mutbl {\n             hir::MutImmutable => AutoBorrowMutability::Immutable,\n             hir::MutMutable => AutoBorrowMutability::Mutable {\n-                allow_two_phase_borrow: match self.allow_two_phase {\n-                    AllowTwoPhase::Yes => true,\n-                    AllowTwoPhase::No => false\n-                },\n+                allow_two_phase_borrow: self.allow_two_phase,\n             }\n         };\n         adjustments.push(Adjustment {\n@@ -486,7 +483,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                         // We don't allow two-phase borrows here, at least for initial\n                         // implementation. If it happens that this coercion is a function argument,\n                         // the reborrow in coerce_borrowed_ptr will pick it up.\n-                        allow_two_phase_borrow: false,\n+                        allow_two_phase_borrow: AllowTwoPhase::No,\n                     }\n                 };\n                 Some((Adjustment {"}, {"sha": "8a37c11f191e7534315ee7ce10b69582b88daae2", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "patch": "@@ -17,7 +17,7 @@ use rustc::ty::subst::Substs;\n use rustc::traits;\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::Subst;\n-use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability, OverloadedDeref};\n+use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, OverloadedDeref};\n use rustc::ty::fold::TypeFoldable;\n use rustc::infer::{self, InferOk};\n use syntax_pos::Span;\n@@ -170,7 +170,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                 hir::MutMutable => AutoBorrowMutability::Mutable {\n                     // Method call receivers are the primary use case\n                     // for two-phase borrows.\n-                    allow_two_phase_borrow: true,\n+                    allow_two_phase_borrow: AllowTwoPhase::Yes,\n                 }\n             };\n             adjustments.push(Adjustment {\n@@ -544,7 +544,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                             // For initial two-phase borrow\n                             // deployment, conservatively omit\n                             // overloaded operators.\n-                            allow_two_phase_borrow: false,\n+                            allow_two_phase_borrow: AllowTwoPhase::No,\n                         }\n                     };\n                     adjustment.kind = Adjust::Borrow(AutoBorrow::Ref(region, mutbl));"}, {"sha": "a377ff4d29d2dfb30893cf16555513b13f8b86aa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "patch": "@@ -2341,12 +2341,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let mutbl = match mt.mutbl {\n                         hir::MutImmutable => AutoBorrowMutability::Immutable,\n                         hir::MutMutable => AutoBorrowMutability::Mutable {\n-                            // FIXME (#46747): arguably indexing is\n-                            // \"just another kind of call\"; perhaps it\n-                            // would be more consistent to allow\n-                            // two-phase borrows for .index()\n-                            // receivers here.\n-                            allow_two_phase_borrow: false,\n+                            // Indexing can be desugared to a method call,\n+                            // so maybe we could use two-phase here.\n+                            // See the documentation of AllowTwoPhase for why that's\n+                            // not the case today.\n+                            allow_two_phase_borrow: AllowTwoPhase::No,\n                         }\n                     };\n                     adjustments.push(Adjustment {\n@@ -3647,7 +3646,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                         // (It shouldn't actually matter for unary ops whether\n                                         // we enable two-phase borrows or not, since a unary\n                                         // op has no additional operands.)\n-                                        allow_two_phase_borrow: false,\n+                                        allow_two_phase_borrow: AllowTwoPhase::No,\n                                     }\n                                 };\n                                 self.apply_adjustments(oprnd, vec![Adjustment {"}, {"sha": "a6fa3a6453fd0b3dae1c13e1599e903cf8259c6c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=d64bd2afc3ee46b9167bb06b3bdacd3bd79add7e", "patch": "@@ -14,7 +14,7 @@ use super::{FnCtxt, Needs};\n use super::method::MethodCallee;\n use rustc::ty::{self, Ty, TypeFoldable, TypeVariants};\n use rustc::ty::TypeVariants::{TyStr, TyRef, TyAdt};\n-use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n+use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::infer::type_variable::TypeVariableOrigin;\n use errors;\n use syntax_pos::Span;\n@@ -206,7 +206,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             hir::MutMutable => AutoBorrowMutability::Mutable {\n                                 // Allow two-phase borrows for binops in initial deployment\n                                 // since they desugar to methods\n-                                allow_two_phase_borrow: true,\n+                                allow_two_phase_borrow: AllowTwoPhase::Yes,\n                             }\n                         };\n                         let autoref = Adjustment {\n@@ -223,7 +223,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             hir::MutMutable => AutoBorrowMutability::Mutable {\n                                 // Allow two-phase borrows for binops in initial deployment\n                                 // since they desugar to methods\n-                                allow_two_phase_borrow: true,\n+                                allow_two_phase_borrow: AllowTwoPhase::Yes,\n                             }\n                         };\n                         let autoref = Adjustment {"}]}