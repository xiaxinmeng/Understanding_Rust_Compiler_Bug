{"sha": "a6741b0592a2b0645a8f0352db890474fd58e23e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NzQxYjA1OTJhMmIwNjQ1YThmMDM1MmRiODkwNDc0ZmQ1OGUyM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T06:45:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T06:45:44Z"}, "message": "Auto merge of #1541 - RalfJung:rustup, r=RalfJung\n\nRustup, expand collection tests", "tree": {"sha": "806e969e0d729e4668cf3219e2100b5b18eaf242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/806e969e0d729e4668cf3219e2100b5b18eaf242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6741b0592a2b0645a8f0352db890474fd58e23e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6741b0592a2b0645a8f0352db890474fd58e23e", "html_url": "https://github.com/rust-lang/rust/commit/a6741b0592a2b0645a8f0352db890474fd58e23e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6741b0592a2b0645a8f0352db890474fd58e23e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc0a54c862132b8e772fbd05310a8845bd645ba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0a54c862132b8e772fbd05310a8845bd645ba6", "html_url": "https://github.com/rust-lang/rust/commit/dc0a54c862132b8e772fbd05310a8845bd645ba6"}, {"sha": "e61be0b8b8c0409ea2c7afac50bfd6afc09cf811", "url": "https://api.github.com/repos/rust-lang/rust/commits/e61be0b8b8c0409ea2c7afac50bfd6afc09cf811", "html_url": "https://github.com/rust-lang/rust/commit/e61be0b8b8c0409ea2c7afac50bfd6afc09cf811"}], "stats": {"total": 101, "additions": 93, "deletions": 8}, "files": [{"sha": "8e33b80ff68f562db0ae8c98e5d69887bfd4e26f", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6741b0592a2b0645a8f0352db890474fd58e23e/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/a6741b0592a2b0645a8f0352db890474fd58e23e/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=a6741b0592a2b0645a8f0352db890474fd58e23e", "patch": "@@ -1 +1 @@\n-e114d6228b948ce056de0bcdec2603c8e89d3727\n+a1894e4afe1a39f718cc27232a5a2f0d02b501f6"}, {"sha": "8b8fa6458e6503aff50a84e77128c57c7728ec08", "filename": "tests/run-pass/binary-heap.rs", "status": "renamed", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a6741b0592a2b0645a8f0352db890474fd58e23e/tests%2Frun-pass%2Fbinary-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6741b0592a2b0645a8f0352db890474fd58e23e/tests%2Frun-pass%2Fbinary-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbinary-heap.rs?ref=a6741b0592a2b0645a8f0352db890474fd58e23e", "patch": "@@ -1,7 +1,7 @@\n use std::collections::BinaryHeap;\n use std::iter::Iterator;\n \n-fn main() {\n+fn zero_sized_push() {\n     const N: usize = 8;\n \n     for len in 0..N {\n@@ -16,3 +16,22 @@ fn main() {\n         tester.clear();\n     }\n }\n+\n+fn drain() {\n+    let mut heap = (0..128i32).collect::<BinaryHeap<_>>();\n+\n+    assert!(!heap.is_empty());\n+\n+    let mut sum = 0;\n+    for x in heap.drain() {\n+        sum += x;\n+    }\n+    assert_eq!(sum, 127*128/2);\n+\n+    assert!(heap.is_empty());\n+}\n+\n+fn main() {\n+    zero_sized_push();\n+    drain();\n+}", "previous_filename": "tests/run-pass/zero-sized-binary-heap-push.rs"}, {"sha": "603674cc4503dc97ac3552ac6399ebb4f878f3d4", "filename": "tests/run-pass/btreemap.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a6741b0592a2b0645a8f0352db890474fd58e23e/tests%2Frun-pass%2Fbtreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6741b0592a2b0645a8f0352db890474fd58e23e/tests%2Frun-pass%2Fbtreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbtreemap.rs?ref=a6741b0592a2b0645a8f0352db890474fd58e23e", "patch": "@@ -7,6 +7,20 @@ pub enum Foo {\n     _C,\n }\n \n+// Gather all references from a mutable iterator and make sure Miri notices if\n+// using them is dangerous.\n+fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {\n+    // Gather all those references.\n+    let mut refs: Vec<&mut T> = iter.collect();\n+    // Use them all. Twice, to be sure we got all interleavings.\n+    for r in refs.iter_mut() {\n+        std::mem::swap(dummy, r);\n+    }\n+    for r in refs {\n+        std::mem::swap(dummy, r);\n+    }\n+}\n+\n pub fn main() {\n     let mut b = BTreeSet::new();\n     b.insert(Foo::A(\"\\'\"));\n@@ -19,11 +33,14 @@ pub fn main() {\n     // Also test a lower-alignment type, where the NodeHeader overlaps with\n     // the keys.\n     let mut b = BTreeSet::new();\n-    b.insert(1024);\n-    b.insert(7);\n+    b.insert(1024u16);\n+    b.insert(7u16);\n \n     let mut b = BTreeMap::new();\n-    b.insert(\"bar\", 1024);\n-    b.insert(\"baz\", 7);\n-    for _val in b.iter_mut() {}\n+    b.insert(format!(\"bar\"), 1024);\n+    b.insert(format!(\"baz\"), 7);\n+    for i in 0..60 {\n+        b.insert(format!(\"key{}\", i), i);\n+    }\n+    test_all_refs(&mut 13, b.values_mut());\n }"}, {"sha": "215f762efcc98bfe14d61a250d18edd853bb84e8", "filename": "tests/run-pass/hashmap.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6741b0592a2b0645a8f0352db890474fd58e23e/tests%2Frun-pass%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6741b0592a2b0645a8f0352db890474fd58e23e/tests%2Frun-pass%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhashmap.rs?ref=a6741b0592a2b0645a8f0352db890474fd58e23e", "patch": "@@ -1,6 +1,20 @@\n use std::collections::HashMap;\n use std::hash::BuildHasher;\n \n+// Gather all references from a mutable iterator and make sure Miri notices if\n+// using them is dangerous.\n+fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {\n+    // Gather all those references.\n+    let mut refs: Vec<&mut T> = iter.collect();\n+    // Use them all. Twice, to be sure we got all interleavings.\n+    for r in refs.iter_mut() {\n+        std::mem::swap(dummy, r);\n+    }\n+    for r in refs {\n+        std::mem::swap(dummy, r);\n+    }\n+}\n+\n fn smoketest_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {\n     map.insert(0, 0);\n     assert_eq!(map.values().fold(0, |x, y| x+y), 0);\n@@ -16,6 +30,8 @@ fn smoketest_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {\n         map.insert(i, num-1-i);\n     }\n     assert_eq!(map.values().fold(0, |x, y| x+y), num*(num-1)/2);\n+\n+    test_all_refs(&mut 13, map.values_mut());\n }\n \n fn main() {"}, {"sha": "0ed9d6032d0e5e12123f6dc0d12a2a7dcaeaa10c", "filename": "tests/run-pass/linked-list.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a6741b0592a2b0645a8f0352db890474fd58e23e/tests%2Frun-pass%2Flinked-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6741b0592a2b0645a8f0352db890474fd58e23e/tests%2Frun-pass%2Flinked-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flinked-list.rs?ref=a6741b0592a2b0645a8f0352db890474fd58e23e", "patch": "@@ -4,7 +4,21 @@ use std::collections::LinkedList;\n fn list_from<T: Clone>(v: &[T]) -> LinkedList<T> {\n     v.iter().cloned().collect()\n }\n-    \n+\n+// Gather all references from a mutable iterator and make sure Miri notices if\n+// using them is dangerous.\n+fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {\n+    // Gather all those references.\n+    let mut refs: Vec<&mut T> = iter.collect();\n+    // Use them all. Twice, to be sure we got all interleavings.\n+    for r in refs.iter_mut() {\n+        std::mem::swap(dummy, r);\n+    }\n+    for r in refs {\n+        std::mem::swap(dummy, r);\n+    }\n+}\n+\n fn main() {\n     let mut m = list_from(&[0, 2, 4, 6, 8]);\n     let len = m.len();\n@@ -30,6 +44,9 @@ fn main() {\n     }\n \n     assert_eq!(m.len(), 3 + len * 2);\n+    let mut m2 = m.clone();\n     assert_eq!(m.into_iter().collect::<Vec<_>>(),\n                [-10, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 99]);\n+\n+    test_all_refs(&mut 13, m2.iter_mut());\n }"}, {"sha": "5fea4a9147a0bca35a117b86ffb52795c874db2e", "filename": "tests/run-pass/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6741b0592a2b0645a8f0352db890474fd58e23e/tests%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6741b0592a2b0645a8f0352db890474fd58e23e/tests%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec.rs?ref=a6741b0592a2b0645a8f0352db890474fd58e23e", "patch": "@@ -1,3 +1,17 @@\n+// Gather all references from a mutable iterator and make sure Miri notices if\n+// using them is dangerous.\n+fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {\n+    // Gather all those references.\n+    let mut refs: Vec<&mut T> = iter.collect();\n+    // Use them all. Twice, to be sure we got all interleavings.\n+    for r in refs.iter_mut() {\n+        std::mem::swap(dummy, r);\n+    }\n+    for r in refs {\n+        std::mem::swap(dummy, r);\n+    }\n+}\n+\n fn make_vec() -> Vec<u8> {\n     let mut v = Vec::with_capacity(4);\n     v.push(1);\n@@ -53,6 +67,8 @@ fn vec_iter_and_mut() {\n         *i += 1;\n     }\n     assert_eq!(v.iter().sum::<i32>(), 2+3+4+5);\n+\n+    test_all_refs(&mut 13, v.iter_mut());\n }\n \n fn vec_iter_and_mut_rev() {"}]}