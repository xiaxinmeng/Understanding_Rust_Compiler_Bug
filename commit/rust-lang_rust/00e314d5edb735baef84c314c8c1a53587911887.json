{"sha": "00e314d5edb735baef84c314c8c1a53587911887", "node_id": "C_kwDOAAsO6NoAKDAwZTMxNGQ1ZWRiNzM1YmFlZjg0YzMxNGM4YzFhNTM1ODc5MTE4ODc", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-10-18T02:08:15Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-11-07T22:39:29Z"}, "message": "Add an optional Span to BrAnon and use it to print better error for HRTB error from generator interior", "tree": {"sha": "d49564c2d114cc498792937a80690e8511590560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d49564c2d114cc498792937a80690e8511590560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00e314d5edb735baef84c314c8c1a53587911887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00e314d5edb735baef84c314c8c1a53587911887", "html_url": "https://github.com/rust-lang/rust/commit/00e314d5edb735baef84c314c8c1a53587911887", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00e314d5edb735baef84c314c8c1a53587911887/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1e5b8d98750a162335f64ec3c792ce80c9866c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1e5b8d98750a162335f64ec3c792ce80c9866c", "html_url": "https://github.com/rust-lang/rust/commit/1e1e5b8d98750a162335f64ec3c792ce80c9866c"}], "stats": {"total": 314, "additions": 251, "deletions": 63}, "files": [{"sha": "897a161f78563cbca11919475f651a1ce72a00f9", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -158,6 +158,7 @@ trait TypeOpInfo<'tcx> {\n         error_region: Option<ty::Region<'tcx>>,\n     ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>>;\n \n+    #[instrument(level = \"debug\", skip(self, mbcx))]\n     fn report_error(\n         &self,\n         mbcx: &mut MirBorrowckCtxt<'_, 'tcx>,\n@@ -167,6 +168,7 @@ trait TypeOpInfo<'tcx> {\n     ) {\n         let tcx = mbcx.infcx.tcx;\n         let base_universe = self.base_universe();\n+        debug!(?base_universe);\n \n         let Some(adjusted_universe) =\n             placeholder.universe.as_u32().checked_sub(base_universe.as_u32())\n@@ -389,6 +391,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n     )\n }\n \n+#[instrument(level = \"debug\", skip(infcx, region_var_origin, universe_of_region))]\n fn try_extract_error_from_region_constraints<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     placeholder_region: ty::Region<'tcx>,"}, {"sha": "f9741bacd17028bf46d0d7f04a9c61f7b8feca6a", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -355,7 +355,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     })\n                 }\n \n-                ty::BoundRegionKind::BrAnon(_) => None,\n+                ty::BoundRegionKind::BrAnon(..) => None,\n             },\n \n             ty::ReLateBound(..) | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReErased => None,"}, {"sha": "0e3d318dc4ca9538592cd55d50962f048f89c3e7", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -2976,15 +2976,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     ) {\n         for br in referenced_regions.difference(&constrained_regions) {\n             let br_name = match *br {\n-                ty::BrNamed(_, kw::UnderscoreLifetime) | ty::BrAnon(_) | ty::BrEnv => {\n+                ty::BrNamed(_, kw::UnderscoreLifetime) | ty::BrAnon(..) | ty::BrEnv => {\n                     \"an anonymous lifetime\".to_string()\n                 }\n                 ty::BrNamed(_, name) => format!(\"lifetime `{}`\", name),\n             };\n \n             let mut err = generate_err(&br_name);\n \n-            if let ty::BrNamed(_, kw::UnderscoreLifetime) | ty::BrAnon(_) = *br {\n+            if let ty::BrNamed(_, kw::UnderscoreLifetime) | ty::BrAnon(..) = *br {\n                 // The only way for an anonymous lifetime to wind up\n                 // in the return type but **also** be unconstrained is\n                 // if it only appears in \"associated types\" in the"}, {"sha": "69e54b41d4c04331081c51aaa179e1bf75f00441", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -134,15 +134,18 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let name_str = intrinsic_name.as_str();\n \n     let bound_vars = tcx.mk_bound_variable_kinds(\n-        [ty::BoundVariableKind::Region(ty::BrAnon(0)), ty::BoundVariableKind::Region(ty::BrEnv)]\n-            .iter()\n-            .copied(),\n+        [\n+            ty::BoundVariableKind::Region(ty::BrAnon(0, None)),\n+            ty::BoundVariableKind::Region(ty::BrEnv),\n+        ]\n+        .iter()\n+        .copied(),\n     );\n     let mk_va_list_ty = |mutbl| {\n         tcx.lang_items().va_list().map(|did| {\n             let region = tcx.mk_region(ty::ReLateBound(\n                 ty::INNERMOST,\n-                ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0) },\n+                ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) },\n             ));\n             let env_region = tcx.mk_region(ty::ReLateBound(\n                 ty::INNERMOST,\n@@ -364,7 +367,8 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 );\n                 let discriminant_def_id = assoc_items[0];\n \n-                let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0) };\n+                let br =\n+                    ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) };\n                 (\n                     1,\n                     vec![\n@@ -418,7 +422,8 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::nontemporal_store => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)], tcx.mk_unit()),\n \n             sym::raw_eq => {\n-                let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0) };\n+                let br =\n+                    ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) };\n                 let param_ty =\n                     tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)), param(0));\n                 (1, vec![param_ty; 2], tcx.types.bool)"}, {"sha": "06f6d84099090417de91433e3235c44f8cd0b35e", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 64, "deletions": 24, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -13,8 +13,9 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdSet;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind};\n+use rustc_infer::infer::RegionVariableOrigin;\n use rustc_middle::middle::region::{self, Scope, ScopeData, YieldData};\n-use rustc_middle::ty::{self, RvalueScopes, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, BoundVariableKind, RvalueScopes, Ty, TyCtxt, TypeVisitable};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -211,43 +212,82 @@ pub fn resolve_interior<'a, 'tcx>(\n \n     debug!(\"types in generator {:?}, span = {:?}\", types, body.value.span);\n \n-    let mut counter = 0;\n+    // We want to deduplicate if the lifetimes are the same modulo some non-informative counter.\n+    // So, we need to actually do two passes: first by type to anonymize (preserving information\n+    // required for diagnostics), then a second pass over all captured types to reassign disjoint\n+    // region indices.\n     let mut captured_tys = FxHashSet::default();\n     let type_causes: Vec<_> = types\n         .into_iter()\n         .filter_map(|mut cause| {\n-            // Erase regions and canonicalize late-bound regions to deduplicate as many types as we\n-            // can.\n-            let ty = fcx.normalize_associated_types_in(cause.span, cause.ty);\n-            let erased = fcx.tcx.erase_regions(ty);\n-            if captured_tys.insert(erased) {\n-                // Replace all regions inside the generator interior with late bound regions.\n-                // Note that each region slot in the types gets a new fresh late bound region,\n-                // which means that none of the regions inside relate to any other, even if\n-                // typeck had previously found constraints that would cause them to be related.\n-                let folded = fcx.tcx.fold_regions(erased, |_, current_depth| {\n-                    let br = ty::BoundRegion {\n-                        var: ty::BoundVar::from_u32(counter),\n-                        kind: ty::BrAnon(counter),\n-                    };\n-                    let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, br));\n-                    counter += 1;\n-                    r\n-                });\n+            // Replace all regions inside the generator interior with late bound regions.\n+            // Note that each region slot in the types gets a new fresh late bound region,\n+            // which means that none of the regions inside relate to any other, even if\n+            // typeck had previously found constraints that would cause them to be related.\n \n-                cause.ty = folded;\n+            let mut counter = 0;\n+            let ty = fcx.normalize_associated_types_in(cause.span, cause.ty);\n+            let ty = fcx.tcx.fold_regions(ty, |region, current_depth| {\n+                let br = match region.kind() {\n+                    ty::ReVar(vid) => {\n+                        let origin = fcx.region_var_origin(vid);\n+                        match origin {\n+                            RegionVariableOrigin::EarlyBoundRegion(span, _) => {\n+                                let kind = ty::BrAnon(counter, Some(span));\n+                                let var = ty::BoundVar::from_u32(counter);\n+                                counter += 1;\n+                                ty::BoundRegion { var, kind }\n+                            }\n+                            _ => {\n+                                let kind = ty::BrAnon(counter, None);\n+                                let var = ty::BoundVar::from_u32(counter);\n+                                counter += 1;\n+                                ty::BoundRegion { var, kind }\n+                            }\n+                        }\n+                    }\n+                    _ => {\n+                        let kind = ty::BrAnon(counter, None);\n+                        let var = ty::BoundVar::from_u32(counter);\n+                        counter += 1;\n+                        ty::BoundRegion { var, kind }\n+                    }\n+                };\n+                let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, br));\n+                r\n+            });\n+            if captured_tys.insert(ty) {\n+                cause.ty = ty;\n                 Some(cause)\n             } else {\n                 None\n             }\n         })\n         .collect();\n \n+    let mut bound_vars: Vec<BoundVariableKind> = vec![];\n+    let mut counter = 0;\n+    let type_causes = fcx.tcx.fold_regions(type_causes, |region, current_depth| {\n+        let br = match region.kind() {\n+            ty::ReLateBound(_, br) => {\n+                let kind = match br.kind {\n+                    ty::BrAnon(_, span) => ty::BrAnon(counter, span),\n+                    _ => br.kind,\n+                };\n+                let var = ty::BoundVar::from_usize(bound_vars.len());\n+                bound_vars.push(ty::BoundVariableKind::Region(kind));\n+                counter += 1;\n+                ty::BoundRegion { var, kind }\n+            }\n+            _ => bug!(\"All regions should have been replaced by ReLateBound\"),\n+        };\n+        let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, br));\n+        r\n+    });\n+\n     // Extract type components to build the witness type.\n     let type_list = fcx.tcx.mk_type_list(type_causes.iter().map(|cause| cause.ty));\n-    let bound_vars = fcx.tcx.mk_bound_variable_kinds(\n-        (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),\n-    );\n+    let bound_vars = fcx.tcx.mk_bound_variable_kinds(bound_vars.iter());\n     let witness =\n         fcx.tcx.mk_generator_witness(ty::Binder::bind_with_vars(type_list, bound_vars.clone()));\n "}, {"sha": "93c58475cfc7c4edfb0e8991916a3df34991b848", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -209,6 +209,7 @@ fn diagnostic_only_typeck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::T\n     typeck_with_fallback(tcx, def_id, fallback)\n }\n \n+#[instrument(level = \"debug\", skip(tcx, fallback), ret)]\n fn typeck_with_fallback<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,"}, {"sha": "7aaa5ce2f4242bd83ded5184a09162e5a0f6b855", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -89,10 +89,13 @@ impl<'a> DescriptionCtx<'a> {\n                             };\n                             me.span = Some(sp);\n                         }\n-                        ty::BrAnon(idx) => {\n+                        ty::BrAnon(idx, span) => {\n                             me.kind = \"anon_num_here\";\n                             me.num_arg = idx+1;\n-                            me.span = Some(tcx.def_span(scope));\n+                            me.span = match span {\n+                                Some(_) => span,\n+                                None => Some(tcx.def_span(scope)),\n+                            }\n                         },\n                         _ => {\n                             me.kind = \"defined_here_reg\";"}, {"sha": "3dc0d60b1eb0fab07d2358d1cf9c2c959f5c0cbd", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -738,7 +738,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n         let var = self.canonical_var(info, r.into());\n-        let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32()) };\n+        let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32(), None) };\n         let region = ty::ReLateBound(self.binder_index, br);\n         self.tcx().mk_region(region)\n     }"}, {"sha": "8a509cb8287a41b65f4368ea2d6da29565e09c00", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -206,9 +206,12 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n                         };\n                         (text, sp)\n                     }\n-                    ty::BrAnon(idx) => (\n+                    ty::BrAnon(idx, span) => (\n                         format!(\"the anonymous lifetime #{} defined here\", idx + 1),\n-                        tcx.def_span(scope)\n+                        match span {\n+                            Some(span) => span,\n+                            None => tcx.def_span(scope)\n+                        }\n                     ),\n                     _ => (\n                         format!(\"the lifetime `{}` as defined here\", region),"}, {"sha": "8a0e332f9c704b4f5f958e6f59bd546c65fa629a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -10,6 +10,7 @@ pub mod find_anon_type;\n mod mismatched_static_lifetime;\n mod named_anon_conflict;\n mod placeholder_error;\n+mod placeholder_relation;\n mod static_impl_trait;\n mod trait_impl_difference;\n mod util;\n@@ -52,7 +53,9 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n     pub fn try_report_from_nll(&self) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         // Due to the improved diagnostics returned by the MIR borrow checker, only a subset of\n         // the nice region errors are required when running under the MIR borrow checker.\n-        self.try_report_named_anon_conflict().or_else(|| self.try_report_placeholder_conflict())\n+        self.try_report_named_anon_conflict()\n+            .or_else(|| self.try_report_placeholder_conflict())\n+            .or_else(|| self.try_report_placeholder_relation())\n     }\n \n     pub fn try_report(&self) -> Option<ErrorGuaranteed> {"}, {"sha": "3fe7c1598fc3fbbf2e6ad540f2b2e9a557387e40", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let is_impl_item = region_info.is_impl_item;\n \n         match br {\n-            ty::BrNamed(_, kw::UnderscoreLifetime) | ty::BrAnon(_) => {}\n+            ty::BrNamed(_, kw::UnderscoreLifetime) | ty::BrAnon(..) => {}\n             _ => {\n                 /* not an anonymous region */\n                 debug!(\"try_report_named_anon_conflict: not an anonymous region\");"}, {"sha": "7f39de1944fd510ff62cbd487b5e518bb7687f8c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_relation.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -0,0 +1,78 @@\n+use crate::infer::{\n+    error_reporting::nice_region_error::NiceRegionError, RegionResolutionError, SubregionOrigin,\n+};\n+use rustc_data_structures::intern::Interned;\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_middle::ty::{self, RePlaceholder, Region};\n+\n+impl<'tcx> NiceRegionError<'_, 'tcx> {\n+    /// Emitted wwhen given a `ConcreteFailure` when relating two placeholders.\n+    pub(super) fn try_report_placeholder_relation(\n+        &self,\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n+        match &self.error {\n+            Some(RegionResolutionError::ConcreteFailure(\n+                SubregionOrigin::RelateRegionParamBound(span),\n+                Region(Interned(RePlaceholder(ty::Placeholder { name: sub_name, .. }), _)),\n+                Region(Interned(RePlaceholder(ty::Placeholder { name: sup_name, .. }), _)),\n+            )) => {\n+                let msg = \"lifetime bound not satisfied\";\n+                let mut err = self.tcx().sess.struct_span_err(*span, msg);\n+                let (sub_span, sub_symbol) = match sub_name {\n+                    ty::BrNamed(def_id, symbol) => {\n+                        (Some(self.tcx().def_span(def_id)), Some(symbol))\n+                    }\n+                    ty::BrAnon(_, span) => (*span, None),\n+                    ty::BrEnv => (None, None),\n+                };\n+                let (sup_span, sup_symbol) = match sup_name {\n+                    ty::BrNamed(def_id, symbol) => {\n+                        (Some(self.tcx().def_span(def_id)), Some(symbol))\n+                    }\n+                    ty::BrAnon(_, span) => (*span, None),\n+                    ty::BrEnv => (None, None),\n+                };\n+                match (sub_span, sup_span, sub_symbol, sup_symbol) {\n+                    (Some(sub_span), Some(sup_span), Some(sub_symbol), Some(sup_symbol)) => {\n+                        err.span_note(\n+                            sub_span,\n+                            format!(\"the lifetime `{sub_symbol}` defined here...\"),\n+                        );\n+                        err.span_note(\n+                            sup_span,\n+                            format!(\"...must outlive the lifetime `{sup_symbol}` defined here\"),\n+                        );\n+                    }\n+                    (Some(sub_span), Some(sup_span), _, Some(sup_symbol)) => {\n+                        err.span_note(sub_span, format!(\"the lifetime defined here...\"));\n+                        err.span_note(\n+                            sup_span,\n+                            format!(\"...must outlive the lifetime `{sup_symbol}` defined here\"),\n+                        );\n+                    }\n+                    (Some(sub_span), Some(sup_span), Some(sub_symbol), _) => {\n+                        err.span_note(\n+                            sub_span,\n+                            format!(\"the lifetime `{sub_symbol}` defined here...\"),\n+                        );\n+                        err.span_note(\n+                            sup_span,\n+                            format!(\"...must outlive the lifetime defined here\"),\n+                        );\n+                    }\n+                    (Some(sub_span), Some(sup_span), _, _) => {\n+                        err.span_note(sub_span, format!(\"the lifetime defined here, ...\"));\n+                        err.span_note(\n+                            sup_span,\n+                            format!(\"...must outlive the lifetime defined here\"),\n+                        );\n+                    }\n+                    _ => {}\n+                }\n+                Some(err)\n+            }\n+\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "0331d764b38a1469bcdf81dc65129478167f5978", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -336,8 +336,10 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                         tcx.mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i).into())).into()\n                     }\n                     GenericArgKind::Lifetime(..) => {\n-                        let br =\n-                            ty::BoundRegion { var: ty::BoundVar::from_u32(i), kind: ty::BrAnon(i) };\n+                        let br = ty::BoundRegion {\n+                            var: ty::BoundVar::from_u32(i),\n+                            kind: ty::BrAnon(i, None),\n+                        };\n                         tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n                     }\n                     GenericArgKind::Const(ct) => tcx"}, {"sha": "2842b3c3102d24cceadc3058acb654015b0b4fc7", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -598,15 +598,15 @@ impl<'tcx> TyCtxt<'tcx> {\n             .replace_late_bound_regions(sig, |_| {\n                 let br = ty::BoundRegion {\n                     var: ty::BoundVar::from_u32(counter),\n-                    kind: ty::BrAnon(counter),\n+                    kind: ty::BrAnon(counter, None),\n                 };\n                 let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));\n                 counter += 1;\n                 r\n             })\n             .0;\n         let bound_vars = self.mk_bound_variable_kinds(\n-            (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),\n+            (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n         );\n         Binder::bind_with_vars(inner, bound_vars)\n     }\n@@ -626,7 +626,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let index = entry.index();\n                 let var = ty::BoundVar::from_usize(index);\n                 let kind = entry\n-                    .or_insert_with(|| ty::BoundVariableKind::Region(ty::BrAnon(index as u32)))\n+                    .or_insert_with(|| {\n+                        ty::BoundVariableKind::Region(ty::BrAnon(index as u32, None))\n+                    })\n                     .expect_region();\n                 let br = ty::BoundRegion { var, kind };\n                 self.tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br))"}, {"sha": "c8815537835b1ac7194d2770a4d412deecd6a867", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -2115,7 +2115,7 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n                 // If this is an anonymous placeholder, don't rename. Otherwise, in some\n                 // async fns, we get a `for<'r> Send` bound\n                 match kind {\n-                    ty::BrAnon(_) | ty::BrEnv => r,\n+                    ty::BrAnon(..) | ty::BrEnv => r,\n                     _ => {\n                         // Index doesn't matter, since this is just for naming and these never get bound\n                         let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind };\n@@ -2226,10 +2226,10 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                     let ty::BoundVariableKind::Region(var) = var else {\n                     // This doesn't really matter because it doesn't get used,\n                     // it's just an empty value\n-                    return ty::BrAnon(0);\n+                    return ty::BrAnon(0, None);\n                 };\n                     match var {\n-                        ty::BrAnon(_) | ty::BrEnv => {\n+                        ty::BrAnon(..) | ty::BrEnv => {\n                             start_or_continue(&mut self, \"for<\", \", \");\n                             let name = next_name(&self);\n                             debug!(?name);\n@@ -2271,7 +2271,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                             binder_level_idx: ty::DebruijnIndex,\n                             br: ty::BoundRegion| {\n                 let (name, kind) = match br.kind {\n-                    ty::BrAnon(_) | ty::BrEnv => {\n+                    ty::BrAnon(..) | ty::BrEnv => {\n                         let name = next_name(&self);\n \n                         if let Some(lt_idx) = lifetime_idx {"}, {"sha": "9f0598d0ba86b2e461b2110c57f4465859bbc92a", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> fmt::Debug for ty::adjustment::Adjustment<'tcx> {\n impl fmt::Debug for ty::BoundRegionKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n-            ty::BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n+            ty::BrAnon(n, span) => write!(f, \"BrAnon({n:?}, {span:?})\"),\n             ty::BrNamed(did, name) => {\n                 if did.is_crate_root() {\n                     write!(f, \"BrNamed({})\", name)"}, {"sha": "49d82b503a4bb9f59caee7ddf9753aa951aab749", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -59,7 +59,7 @@ pub struct FreeRegion {\n #[derive(HashStable)]\n pub enum BoundRegionKind {\n     /// An anonymous region parameter for a given fn (&T)\n-    BrAnon(u32),\n+    BrAnon(u32, Option<Span>),\n \n     /// Named region parameters for functions (a in &'a T)\n     ///"}, {"sha": "e540e2f2a2192397be2a6571d008d4d6aaec3cd4", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -218,7 +218,7 @@ impl<'tcx> SymbolMangler<'tcx> {\n         let lifetimes = regions\n             .into_iter()\n             .map(|br| match br {\n-                ty::BrAnon(i) => i,\n+                ty::BrAnon(i, _) => i,\n                 _ => bug!(\"symbol_names: non-anonymized region `{:?}` in `{:?}`\", br, value),\n             })\n             .max()\n@@ -335,7 +335,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n             // Late-bound lifetimes use indices starting at 1,\n             // see `BinderLevel` for more details.\n-            ty::ReLateBound(debruijn, ty::BoundRegion { kind: ty::BrAnon(i), .. }) => {\n+            ty::ReLateBound(debruijn, ty::BoundRegion { kind: ty::BrAnon(i, _), .. }) => {\n                 let binder = &self.binders[self.binders.len() - 1 - debruijn.index()];\n                 let depth = binder.lifetime_depths.start + i;\n "}, {"sha": "debf06593459fd980f52b61513e92359d46c3dab", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -1975,6 +1975,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// Bar<i32> where struct Bar<T> { x: T, y: u32 } -> [i32, u32]\n     /// Zed<i32> where enum Zed { A(T), B(u32) } -> [i32, u32]\n     /// ```\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn constituent_types_for_ty(\n         &self,\n         t: ty::Binder<'tcx, Ty<'tcx>>,"}, {"sha": "07f92299f72b43326f5195dd87fbe87e9ae704de", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -728,7 +728,7 @@ fn bound_vars_for_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx\n         ty::GenericParamDefKind::Lifetime => {\n             let br = ty::BoundRegion {\n                 var: ty::BoundVar::from_usize(substs.len()),\n-                kind: ty::BrAnon(substs.len() as u32),\n+                kind: ty::BrAnon(substs.len() as u32, None),\n             };\n             tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n         }"}, {"sha": "b64d53e60dee6d8211103c879d713f58f4b33ba1", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -498,13 +498,13 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n                 ty::DebruijnIndex::from_u32(var.debruijn.depth()),\n                 ty::BoundRegion {\n                     var: ty::BoundVar::from_usize(var.index),\n-                    kind: ty::BrAnon(var.index as u32),\n+                    kind: ty::BrAnon(var.index as u32, None),\n                 },\n             ),\n             chalk_ir::LifetimeData::InferenceVar(_var) => unimplemented!(),\n             chalk_ir::LifetimeData::Placeholder(p) => ty::RePlaceholder(ty::Placeholder {\n                 universe: ty::UniverseIndex::from_usize(p.ui.counter),\n-                name: ty::BoundRegionKind::BrAnon(p.idx as u32),\n+                name: ty::BoundRegionKind::BrAnon(p.idx as u32, None),\n             }),\n             chalk_ir::LifetimeData::Static => return interner.tcx.lifetimes.re_static,\n             chalk_ir::LifetimeData::Empty(_) => {\n@@ -933,7 +933,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n                     }\n                 }\n \n-                ty::BoundRegionKind::BrAnon(var) => match self.parameters.entry(var) {\n+                ty::BoundRegionKind::BrAnon(var, _) => match self.parameters.entry(var) {\n                     Entry::Vacant(entry) => {\n                         entry.insert(chalk_ir::VariableKind::Lifetime);\n                     }\n@@ -991,13 +991,13 @@ impl<'a, 'tcx> TypeFolder<'tcx> for NamedBoundVarSubstitutor<'a, 'tcx> {\n             ty::ReLateBound(index, br) if index == self.binder_index => match br.kind {\n                 ty::BrNamed(def_id, _name) => match self.named_parameters.get(&def_id) {\n                     Some(idx) => {\n-                        let new_br = ty::BoundRegion { var: br.var, kind: ty::BrAnon(*idx) };\n+                        let new_br = ty::BoundRegion { var: br.var, kind: ty::BrAnon(*idx, None) };\n                         return self.tcx.mk_region(ty::ReLateBound(index, new_br));\n                     }\n                     None => panic!(\"Missing `BrNamed`.\"),\n                 },\n                 ty::BrEnv => unimplemented!(),\n-                ty::BrAnon(_) => {}\n+                ty::BrAnon(..) => {}\n             },\n             _ => (),\n         };\n@@ -1072,14 +1072,16 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n                 Some(idx) => {\n                     let br = ty::BoundRegion {\n                         var: ty::BoundVar::from_u32(*idx),\n-                        kind: ty::BrAnon(*idx),\n+                        kind: ty::BrAnon(*idx, None),\n                     };\n                     self.tcx.mk_region(ty::ReLateBound(self.binder_index, br))\n                 }\n                 None => {\n                     let idx = self.named_regions.len() as u32;\n-                    let br =\n-                        ty::BoundRegion { var: ty::BoundVar::from_u32(idx), kind: ty::BrAnon(idx) };\n+                    let br = ty::BoundRegion {\n+                        var: ty::BoundVar::from_u32(idx),\n+                        kind: ty::BrAnon(idx, None),\n+                    };\n                     self.named_regions.insert(_re.def_id, idx);\n                     self.tcx.mk_region(ty::ReLateBound(self.binder_index, br))\n                 }\n@@ -1156,7 +1158,7 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n     fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *r {\n             ty::RePlaceholder(p) if p.universe == self.universe_index => {\n-                if let ty::BoundRegionKind::BrAnon(anon) = p.name {\n+                if let ty::BoundRegionKind::BrAnon(anon, _) = p.name {\n                     self.next_anon_region_placeholder = self.next_anon_region_placeholder.max(anon);\n                 }\n             }"}, {"sha": "f995591d76ca6b3f2584b742b803aff22a20fa23", "filename": "src/test/ui/generic-associated-types/bugs/issue-100013.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -0,0 +1,22 @@\n+// check-fail\n+// known-bug\n+// edition: 2021\n+\n+// We really should accept this, but we need implied bounds between the regions\n+// in a generator interior.\n+\n+pub trait FutureIterator {\n+    type Future<'s, 'cx>: Send\n+    where\n+        's: 'cx;\n+}\n+\n+fn call_2<I: FutureIterator>() -> impl Send {\n+    async { // a generator checked for autotrait impl `Send`\n+        //~^ lifetime bound not satisfied\n+        let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n+        async {}.await; // a yield point\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "11d149faa8fb13968e859b5d6cd06b457594da83", "filename": "src/test/ui/generic-associated-types/bugs/issue-100013.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/00e314d5edb735baef84c314c8c1a53587911887/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00e314d5edb735baef84c314c8c1a53587911887/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr?ref=00e314d5edb735baef84c314c8c1a53587911887", "patch": "@@ -0,0 +1,23 @@\n+error: lifetime bound not satisfied\n+  --> $DIR/issue-100013.rs:15:5\n+   |\n+LL | /     async { // a generator checked for autotrait impl `Send`\n+LL | |\n+LL | |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n+LL | |         async {}.await; // a yield point\n+LL | |     }\n+   | |_____^\n+   |\n+note: the lifetime defined here, ...\n+  --> $DIR/issue-100013.rs:17:38\n+   |\n+LL |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n+   |                                      ^^\n+note: ...must outlive the lifetime defined here\n+  --> $DIR/issue-100013.rs:17:34\n+   |\n+LL |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n+   |                                  ^^\n+\n+error: aborting due to previous error\n+"}]}