{"sha": "8601c79aff521a72565cbd5d4c5ae0ad84080217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MDFjNzlhZmY1MjFhNzI1NjVjYmQ1ZDRjNWFlMGFkODQwODAyMTc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T06:56:54Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T14:40:33Z"}, "message": "Rollup merge of #59169 - tmandry:allow-features-flag, r=cramertj\n\nAdd `-Z allow_features=...` flag\n\nAdds a compiler option to allow only whitelisted features.\n\nFor projects on nightly that want to prevent feature-creep (and maybe, someday, move off of nightly). Not being able to enforce this has been a problem on Fuchsia and at other big companies.\n\nThis doesn't support filtering edition feature flags, but someone is welcome to add that if they need it.", "tree": {"sha": "7ecf991d97e6dd0d4e3f2b7c9c01a5aff164c877", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ecf991d97e6dd0d4e3f2b7c9c01a5aff164c877"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8601c79aff521a72565cbd5d4c5ae0ad84080217", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlyNCuEACgkQ/vbIBR0O\nATy2dg/+J3m0VfT4lB9MZzjZFmOLrivgMdl5MX+gRdwz3rin5K6W3uSD7ngHaG58\njYMEUANZgi+71Dr3xQINB1Qr/H+I7EL9sK1VJ0Y2YpO1QnYpM4SSojhTge+E8eF/\n0cs0fLzNsH0lBgecVIE839l1I7lR95eSa2i+/h9M/Fy7ArdanmB9LDNwxsZUvxjT\n100WxQS4PlBVDkkXBohPTHMVgss9oaeCWS8d7PC2X2qOgvhoGlTY1tytu3WKl+bN\n6FF0ra2is8nbNJdmIiTkGU4rH6niz3FsUzuGGxDj+W+MXBo+v1M1hMoHeX25cMhn\nkpyTRchj93/Daos46ZBZOtn719aoGaQeAxyJvla3sLCyqwjABHMiY0FUZ1qmbUa4\n+w8rJltXvm+05lEP3Gm1aJrsC9Wj2nxtyBX9wlfe5/FwdnSGTCqYUIY3k8qQHNLf\nvaPoLXO0m9A9FCi/ItQDjqOolyRF+tPqGi7F01ENGPXZ8iK1kLnqlDpMoD++Pj5k\nvd4EOnMqYYWHg5on2zUuGJO1g1MlyxI34usfh41dAj5zwPH4SjhipuA9sNNBC2iy\nsQ1PHGBIQGL9qnFO/aW4OrJr07JTcAqWMrAzzx4jL4WwTHs8f2aupsmg7bG39Lpd\n/B1eMXWr0yTXkogAP9qGNkBsS9QBiji9fj8jsXgPVF37lRltIao=\n=YxaR\n-----END PGP SIGNATURE-----", "payload": "tree 7ecf991d97e6dd0d4e3f2b7c9c01a5aff164c877\nparent 25e4366b4cea8ef52f3d1f1ff4f26df3587ae9f6\nparent 7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5\nauthor kennytm <kennytm@gmail.com> 1552719414 +0800\ncommitter kennytm <kennytm@gmail.com> 1552747233 +0800\n\nRollup merge of #59169 - tmandry:allow-features-flag, r=cramertj\n\nAdd `-Z allow_features=...` flag\n\nAdds a compiler option to allow only whitelisted features.\n\nFor projects on nightly that want to prevent feature-creep (and maybe, someday, move off of nightly). Not being able to enforce this has been a problem on Fuchsia and at other big companies.\n\nThis doesn't support filtering edition feature flags, but someone is welcome to add that if they need it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8601c79aff521a72565cbd5d4c5ae0ad84080217", "html_url": "https://github.com/rust-lang/rust/commit/8601c79aff521a72565cbd5d4c5ae0ad84080217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8601c79aff521a72565cbd5d4c5ae0ad84080217/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25e4366b4cea8ef52f3d1f1ff4f26df3587ae9f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e4366b4cea8ef52f3d1f1ff4f26df3587ae9f6", "html_url": "https://github.com/rust-lang/rust/commit/25e4366b4cea8ef52f3d1f1ff4f26df3587ae9f6"}, {"sha": "7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "html_url": "https://github.com/rust-lang/rust/commit/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5"}], "stats": {"total": 102, "additions": 98, "deletions": 4}, "files": [{"sha": "ff18678f091b90f108e23c504364f49cff33b23e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=8601c79aff521a72565cbd5d4c5ae0ad84080217", "patch": "@@ -800,6 +800,7 @@ macro_rules! options {\n         pub const parse_opt_pathbuf: Option<&str> = Some(\"a path\");\n         pub const parse_list: Option<&str> = Some(\"a space-separated list of strings\");\n         pub const parse_opt_list: Option<&str> = Some(\"a space-separated list of strings\");\n+        pub const parse_opt_comma_list: Option<&str> = Some(\"a comma-separated list of strings\");\n         pub const parse_uint: Option<&str> = Some(\"a number\");\n         pub const parse_passes: Option<&str> =\n             Some(\"a space-separated list of passes, or `all`\");\n@@ -926,6 +927,18 @@ macro_rules! options {\n             }\n         }\n \n+        fn parse_opt_comma_list(slot: &mut Option<Vec<String>>, v: Option<&str>)\n+                      -> bool {\n+            match v {\n+                Some(s) => {\n+                    let v = s.split(',').map(|s| s.to_string()).collect();\n+                    *slot = Some(v);\n+                    true\n+                },\n+                None => false,\n+            }\n+        }\n+\n         fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool {\n             match v.and_then(|s| s.parse().ok()) {\n                 Some(i) => { *slot = i; true },\n@@ -1427,6 +1440,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n         \"control the operation of the MergeFunctions LLVM pass, taking\n          the same values as the target option of the same name\"),\n+    allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n+        \"only allow the listed language features to be enabled in code (space separated)\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -3273,6 +3288,10 @@ mod tests {\n         opts = reference.clone();\n         opts.debugging_opts.merge_functions = Some(MergeFunctions::Disabled);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+        opts = reference.clone();\n+        opts.debugging_opts.allow_features = Some(vec![String::from(\"lang_items\")]);\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n \n     #[test]"}, {"sha": "0c710fd283be83fd37608a1190d770c7c89f49d3", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=8601c79aff521a72565cbd5d4c5ae0ad84080217", "patch": "@@ -243,6 +243,7 @@ pub fn register_plugins<'a>(\n         krate,\n         &sess.parse_sess,\n         sess.edition(),\n+        &sess.opts.debugging_opts.allow_features,\n     );\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);"}, {"sha": "2abb7e407eb026d1d22f94f51ef8ca91d131c253", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=8601c79aff521a72565cbd5d4c5ae0ad84080217", "patch": "@@ -24,8 +24,8 @@ pub struct StripUnconfigured<'a> {\n }\n \n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(mut krate: ast::Crate, sess: &ParseSess, edition: Edition)\n-                -> (ast::Crate, Features) {\n+pub fn features(mut krate: ast::Crate, sess: &ParseSess, edition: Edition,\n+                allow_features: &Option<Vec<String>>) -> (ast::Crate, Features) {\n     let features;\n     {\n         let mut strip_unconfigured = StripUnconfigured {\n@@ -43,7 +43,7 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, edition: Edition)\n             return (krate, Features::new());\n         }\n \n-        features = get_features(&sess.span_diagnostic, &krate.attrs, edition);\n+        features = get_features(&sess.span_diagnostic, &krate.attrs, edition, allow_features);\n \n         // Avoid reconfiguring malformed `cfg_attr`s\n         if err_count == sess.span_diagnostic.err_count() {"}, {"sha": "ac24475cab89fa1d6c614c3e2c3d9bd9f6a1e6d0", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=8601c79aff521a72565cbd5d4c5ae0ad84080217", "patch": "@@ -378,6 +378,21 @@ Erroneous code example:\n \n \"##,\n \n+E0725: r##\"\n+A feature attribute named a feature that was disallowed in the compiler\n+command line flags.\n+\n+Erroneous code example:\n+\n+```ignore (can't specify compiler flags from doctests)\n+#![feature(never_type)] // error: the feature `never_type` is not in\n+                        // the list of allowed features\n+```\n+\n+Delete the offending feature attribute, or add it to the list of allowed\n+features in the `-Z allow_features` flag.\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "280b17da0be3f313e538d9c9a6a22a1313af50c4", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8601c79aff521a72565cbd5d4c5ae0ad84080217", "patch": "@@ -2008,7 +2008,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n-                    crate_edition: Edition) -> Features {\n+                    crate_edition: Edition, allow_features: &Option<Vec<String>>) -> Features {\n     fn feature_removed(span_handler: &Handler, span: Span, reason: Option<&str>) {\n         let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n         if let Some(reason) = reason {\n@@ -2127,6 +2127,15 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             }\n \n             if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n+                if let Some(allowed) = allow_features.as_ref() {\n+                    if allowed.iter().find(|f| *f == name.as_str()).is_none() {\n+                        span_err!(span_handler, mi.span, E0725,\n+                                  \"the feature `{}` is not in the list of allowed features\",\n+                                  name);\n+                        continue;\n+                    }\n+                }\n+\n                 set(&mut features, mi.span);\n                 features.declared_lang_features.push((name, mi.span, None));\n                 continue"}, {"sha": "83250052cb506f83b7e9612104b24fa511dfc993", "filename": "src/test/ui/feature-gate/allow-features-empty.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs?ref=8601c79aff521a72565cbd5d4c5ae0ad84080217", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z allow_features=\n+// Note: This test uses rustc internal flags because they will never stabilize.\n+\n+#![feature(rustc_diagnostic_macros)] //~ ERROR\n+\n+#![feature(rustc_const_unstable)] //~ ERROR\n+\n+#![feature(lang_items)] //~ ERROR\n+\n+fn main() {}"}, {"sha": "cce2c4078c242b5141ffe6bfc94f6a8b99625027", "filename": "src/test/ui/feature-gate/allow-features-empty.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr?ref=8601c79aff521a72565cbd5d4c5ae0ad84080217", "patch": "@@ -0,0 +1,21 @@\n+error[E0725]: the feature `rustc_diagnostic_macros` is not in the list of allowed features\n+  --> $DIR/allow-features-empty.rs:4:12\n+   |\n+LL | #![feature(rustc_diagnostic_macros)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0725]: the feature `rustc_const_unstable` is not in the list of allowed features\n+  --> $DIR/allow-features-empty.rs:6:12\n+   |\n+LL | #![feature(rustc_const_unstable)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0725]: the feature `lang_items` is not in the list of allowed features\n+  --> $DIR/allow-features-empty.rs:8:12\n+   |\n+LL | #![feature(lang_items)]\n+   |            ^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0725`."}, {"sha": "1cebc8f34f26fff1be71850b2d1f5499d8e0c4e4", "filename": "src/test/ui/feature-gate/allow-features.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs?ref=8601c79aff521a72565cbd5d4c5ae0ad84080217", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z allow_features=rustc_diagnostic_macros,lang_items\n+// Note: This test uses rustc internal flags because they will never stabilize.\n+\n+#![feature(rustc_diagnostic_macros)]\n+\n+#![feature(rustc_const_unstable)] //~ ERROR\n+\n+#![feature(lang_items)]\n+\n+fn main() {}"}, {"sha": "b13560fb81c6a07586a12ecc5395da9ad5af9a92", "filename": "src/test/ui/feature-gate/allow-features.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8601c79aff521a72565cbd5d4c5ae0ad84080217/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr?ref=8601c79aff521a72565cbd5d4c5ae0ad84080217", "patch": "@@ -0,0 +1,9 @@\n+error[E0725]: the feature `rustc_const_unstable` is not in the list of allowed features\n+  --> $DIR/allow-features.rs:6:12\n+   |\n+LL | #![feature(rustc_const_unstable)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0725`."}]}