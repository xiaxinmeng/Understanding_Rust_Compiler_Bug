{"sha": "ee71b2e140583cbb5afb7551582bab36f04035cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNzFiMmUxNDA1ODNjYmI1YWZiNzU1MTU4MmJhYjM2ZjA0MDM1Y2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-20T15:18:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-20T15:18:06Z"}, "message": "Auto merge of #1243 - RalfJung:instant, r=RalfJung\n\nimplement Instant::now\n\nFor now, this is Linux-only.\n\nUnlike `SystemTime`, we cannot convert `Instant` to something absolute via an epoch. But that's okay, that clock is relative anyway, so we just make up our own time anchor when interpretation starts.\n\nFixes https://github.com/rust-lang/miri/issues/1242", "tree": {"sha": "866b363c497cf424efe757fecd482a8b73afa526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/866b363c497cf424efe757fecd482a8b73afa526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee71b2e140583cbb5afb7551582bab36f04035cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee71b2e140583cbb5afb7551582bab36f04035cc", "html_url": "https://github.com/rust-lang/rust/commit/ee71b2e140583cbb5afb7551582bab36f04035cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee71b2e140583cbb5afb7551582bab36f04035cc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cfb20d9ea716c49b642e195b74cb648e5f44348", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cfb20d9ea716c49b642e195b74cb648e5f44348", "html_url": "https://github.com/rust-lang/rust/commit/0cfb20d9ea716c49b642e195b74cb648e5f44348"}, {"sha": "f430e544561a430f267c9fbde20962cef4702332", "url": "https://api.github.com/repos/rust-lang/rust/commits/f430e544561a430f267c9fbde20962cef4702332", "html_url": "https://github.com/rust-lang/rust/commit/f430e544561a430f267c9fbde20962cef4702332"}], "stats": {"total": 97, "additions": 63, "deletions": 34}, "files": [{"sha": "3cf00781338c25f23787c3868ba39145670114fc", "filename": "src/machine.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee71b2e140583cbb5afb7551582bab36f04035cc/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee71b2e140583cbb5afb7551582bab36f04035cc/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ee71b2e140583cbb5afb7551582bab36f04035cc", "patch": "@@ -5,6 +5,7 @@ use std::borrow::Cow;\n use std::cell::RefCell;\n use std::num::NonZeroU64;\n use std::rc::Rc;\n+use std::time::Instant;\n \n use rand::rngs::StdRng;\n \n@@ -164,6 +165,9 @@ pub struct Evaluator<'tcx> {\n     /// the call to `miri_start_panic` (the panic payload) when unwinding.\n     /// This is pointer-sized, and matches the `Payload` type in `src/libpanic_unwind/miri.rs`.\n     pub(crate) panic_payload: Option<Scalar<Tag>>,\n+\n+    /// The \"time anchor\" for this machine's monotone clock (for `Instant` simulation).\n+    pub(crate) time_anchor: Instant,\n }\n \n impl<'tcx> Evaluator<'tcx> {\n@@ -182,6 +186,7 @@ impl<'tcx> Evaluator<'tcx> {\n             file_handler: Default::default(),\n             dir_handler: Default::default(),\n             panic_payload: None,\n+            time_anchor: Instant::now(),\n         }\n     }\n }"}, {"sha": "0bb4710769d977675359d73d55efc5b224c3535f", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee71b2e140583cbb5afb7551582bab36f04035cc/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee71b2e140583cbb5afb7551582bab36f04035cc/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=ee71b2e140583cbb5afb7551582bab36f04035cc", "patch": "@@ -66,6 +66,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.gettimeofday(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n+            \"mach_absolute_time\" => {\n+                let result = this.mach_absolute_time()?;\n+                this.write_scalar(Scalar::from_uint(result, dest.layout.size), dest)?;\n+            }\n \n             // Other shims\n             \"pthread_attr_get_np\" => {"}, {"sha": "a5aae5ed90c3abd5b74d100e816e72bc54ca45cb", "filename": "src/shims/fs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee71b2e140583cbb5afb7551582bab36f04035cc/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee71b2e140583cbb5afb7551582bab36f04035cc/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=ee71b2e140583cbb5afb7551582bab36f04035cc", "patch": "@@ -574,8 +574,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        this.check_no_isolation(\"stat\")?;\n         this.assert_platform(\"macos\", \"stat\");\n+        this.check_no_isolation(\"stat\")?;\n         // `stat` always follows symlinks.\n         this.macos_stat_or_lstat(true, path_op, buf_op)\n     }\n@@ -587,8 +587,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        this.check_no_isolation(\"lstat\")?;\n         this.assert_platform(\"macos\", \"lstat\");\n+        this.check_no_isolation(\"lstat\")?;\n         this.macos_stat_or_lstat(false, path_op, buf_op)\n     }\n \n@@ -599,8 +599,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"fstat\")?;\n         this.assert_platform(\"macos\", \"fstat\");\n+        this.check_no_isolation(\"fstat\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n@@ -621,8 +621,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"statx\")?;\n         this.assert_platform(\"linux\", \"statx\");\n+        this.check_no_isolation(\"statx\")?;\n \n         let statxbuf_scalar = this.read_scalar(statxbuf_op)?.not_undef()?;\n         let pathname_scalar = this.read_scalar(pathname_op)?.not_undef()?;\n@@ -880,8 +880,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"readdir64_r\")?;\n         this.assert_platform(\"linux\", \"readdir64_r\");\n+        this.check_no_isolation(\"readdir64_r\")?;\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n@@ -967,8 +967,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"readdir_r\")?;\n         this.assert_platform(\"macos\", \"readdir_r\");\n+        this.check_no_isolation(\"readdir_r\")?;\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n "}, {"sha": "b270c9770f809adc555adfbf1293b394731ab075", "filename": "src/shims/time.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ee71b2e140583cbb5afb7551582bab36f04035cc/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee71b2e140583cbb5afb7551582bab36f04035cc/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=ee71b2e140583cbb5afb7551582bab36f04035cc", "patch": "@@ -1,14 +1,10 @@\n-use std::time::{Duration, SystemTime};\n+use std::time::{Duration, SystemTime, Instant};\n+use std::convert::TryFrom;\n \n use crate::stacked_borrows::Tag;\n use crate::*;\n use helpers::immty_from_int_checked;\n \n-// Returns the time elapsed between now and the unix epoch as a `Duration`.\n-fn get_time<'tcx>() -> InterpResult<'tcx, Duration> {\n-    system_time_to_duration(&SystemTime::now())\n-}\n-\n /// Returns the time elapsed between the provided time and the unix epoch as a `Duration`.\n pub fn system_time_to_duration<'tcx>(time: &SystemTime) -> InterpResult<'tcx, Duration> {\n     time.duration_since(SystemTime::UNIX_EPOCH)\n@@ -17,26 +13,31 @@ pub fn system_time_to_duration<'tcx>(time: &SystemTime) -> InterpResult<'tcx, Du\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    // Foreign function used by linux\n     fn clock_gettime(\n         &mut self,\n         clk_id_op: OpTy<'tcx, Tag>,\n         tp_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        this.assert_platform(\"linux\", \"clock_gettime\");\n         this.check_no_isolation(\"clock_gettime\")?;\n \n         let clk_id = this.read_scalar(clk_id_op)?.to_i32()?;\n-        if clk_id != this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n+        let tp = this.deref_operand(tp_op)?;\n+\n+        let duration = if clk_id == this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n+            system_time_to_duration(&SystemTime::now())?\n+        } else if clk_id == this.eval_libc_i32(\"CLOCK_MONOTONIC\")? {\n+            // Absolute time does not matter, only relative time does, so we can just\n+            // use our own time anchor here.\n+            Instant::now().duration_since(this.machine.time_anchor)\n+        } else {\n             let einval = this.eval_libc(\"EINVAL\")?;\n             this.set_last_error(einval)?;\n             return Ok(-1);\n-        }\n-\n-        let tp = this.deref_operand(tp_op)?;\n+        };\n \n-        let duration = get_time()?;\n         let tv_sec = duration.as_secs();\n         let tv_nsec = duration.subsec_nanos();\n \n@@ -49,15 +50,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         Ok(0)\n     }\n-    // Foreign function used by generic unix (in particular macOS)\n+\n     fn gettimeofday(\n         &mut self,\n         tv_op: OpTy<'tcx, Tag>,\n         tz_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        this.assert_platform(\"macos\", \"gettimeofday\");\n         this.check_no_isolation(\"gettimeofday\")?;\n+\n         // Using tz is obsolete and should always be null\n         let tz = this.read_scalar(tz_op)?.not_undef()?;\n         if !this.is_null(tz)? {\n@@ -68,7 +71,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let tv = this.deref_operand(tv_op)?;\n \n-        let duration = get_time()?;\n+        let duration = system_time_to_duration(&SystemTime::now())?;\n         let tv_sec = duration.as_secs();\n         let tv_usec = duration.subsec_micros();\n \n@@ -81,4 +84,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         Ok(0)\n     }\n+\n+    fn mach_absolute_time(&self) -> InterpResult<'tcx, u64> {\n+        let this = self.eval_context_ref();\n+\n+        this.assert_platform(\"macos\", \"mach_absolute_time\");\n+        this.check_no_isolation(\"mach_absolute_time\")?;\n+\n+        // This returns a u64, with time units determined dynamically by `mach_timebase_info`.\n+        // We return plain nanoseconds.\n+        let duration = Instant::now().duration_since(this.machine.time_anchor);\n+        u64::try_from(duration.as_nanos())\n+            .map_err(|_| err_unsup_format!(\"programs running longer than 2^64 nanoseconds are not supported\").into())\n+    }\n }"}, {"sha": "b4c3fa08fdc60d2cab4c692fbb8790eb868a2384", "filename": "tests/run-pass/clock.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cfb20d9ea716c49b642e195b74cb648e5f44348/tests%2Frun-pass%2Fclock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfb20d9ea716c49b642e195b74cb648e5f44348/tests%2Frun-pass%2Fclock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclock.rs?ref=0cfb20d9ea716c49b642e195b74cb648e5f44348", "patch": "@@ -1,14 +0,0 @@\n-// ignore-windows: TODO clock shims are not implemented on Windows\n-// compile-flags: -Zmiri-disable-isolation\n-\n-use std::time::SystemTime;\n-\n-fn main() {\n-   let now1 = SystemTime::now();\n-\n-    // Do some work to make time pass.\n-    for _ in 0..10 { drop(vec![42]); }\n-\n-   let now2 = SystemTime::now();\n-   assert!(now2 > now1);\n-}"}, {"sha": "bbe8b4011dfa6237d9e31d7d8b1c126335e23fd3", "filename": "tests/run-pass/time.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee71b2e140583cbb5afb7551582bab36f04035cc/tests%2Frun-pass%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee71b2e140583cbb5afb7551582bab36f04035cc/tests%2Frun-pass%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftime.rs?ref=ee71b2e140583cbb5afb7551582bab36f04035cc", "patch": "@@ -0,0 +1,18 @@\n+// ignore-windows: TODO clock shims are not implemented on Windows\n+// compile-flags: -Zmiri-disable-isolation\n+\n+use std::time::{SystemTime, Instant};\n+\n+fn main() {\n+    let now1 = SystemTime::now();\n+    // Do some work to make time pass.\n+    for _ in 0..10 { drop(vec![42]); }\n+    let now2 = SystemTime::now();\n+    assert!(now2 > now1);\n+\n+    let now1 = Instant::now();\n+    // Do some work to make time pass.\n+    for _ in 0..10 { drop(vec![42]); }\n+    let now2 = Instant::now();\n+    assert!(now2 > now1);\n+}"}]}