{"sha": "a0dcbdf7fd826bac839fc7c8097f807812cc02a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZGNiZGY3ZmQ4MjZiYWM4MzlmYzdjODA5N2Y4MDc4MTJjYzAyYTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-25T21:15:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-25T21:15:12Z"}, "message": "Rollup merge of #84486 - Smittyvb:else-if-let-hir-pretty-print, r=petrochenkov\n\nHandle pretty printing of `else if let` clauses without ICEing\n\nWhen pretty printing the HIR of `if ... {} else if let ... {}` clauses, this displays it the `else if let` part as `match` it gets desugared to, the same way normal `if let` statements are currently displayed, instead of ICEing.\n\n```rust\npub fn main() {\n    if true {\n        // 1\n    } else if let a = 1 {\n        // 2\n    } else {\n        // 3\n    }\n}\n```\n\nnow gets desugared (via `rustc -Zunpretty=hir,typed src/x.rs`) to:\n\n```rust\n#[prelude_import]\nuse ::std::prelude::rust_2015::*;\n#[macro_use]\nextern crate std;\npub fn main() ({\n                   (if (true as bool)\n                       ({\n                            // 1\n                        } as\n                           ()) else {match (1 as i32) {\n                                         a => {\n                                             // 2\n                                         }\n                                         _ => {\n                                             // 3\n                                         }\n                                     }} as ())\n                    } as ())\n```\n\nFor comparison, this code gets HIR prettyprinted the same way before and after this change:\n\n```rust\npub fn main() {\n    if let a = 1 {\n        // 2\n    } else {\n        // 3\n    }\n}\n```\nturns into\n```rust\n#[prelude_import]\nuse ::std::prelude::rust_2015::*;\n#[macro_use]\nextern crate std;\npub fn main() ({\n                   (match (1 as i32) {\n                        a => {\n                            // 2\n                        }\n                        _ => {\n                            // 3\n                        }\n                    } as ())\n               } as ())\n```\n\nThis closes #82329. It closes #84434 as well, due to having the same root cause.", "tree": {"sha": "1187ea3811adf2f61839db58b5247af3e886502c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1187ea3811adf2f61839db58b5247af3e886502c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0dcbdf7fd826bac839fc7c8097f807812cc02a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghdvhCRBK7hj4Ov3rIwAAtsQIABIeaac0QLWj5zaTPX4Ips/+\nH9/3umvbkaJgK9dlk5Np3nrfK27ZT6/6XEP74N7tjITkpYj066Mrm38nCUGnoZeE\nDbogYKGaGWxIsq30xud50Ej6HKzSp0KcBl6Wby6fCbH0Ezz3RKmufqO8G+kguxT9\nJal6EEUhcVu7Bn3Bh8MVkt3NPTUnQtcIuOxu9EEnH9x75F9M1ELDRT5us5jYo75+\nKxuROdduo4NHzvJFqmLy63g0i3odJR32PSZJ1m9GontM5E4TSEgUnHZ+8mlGzuKt\nXPy0ECWJ58Ebo7mPMoJz4WX+3LHGB4Ux52VVmtT6H2nDUD3xtL+Z+z6OE+3M490=\n=SSXx\n-----END PGP SIGNATURE-----\n", "payload": "tree 1187ea3811adf2f61839db58b5247af3e886502c\nparent 379a55c64ef72df1c8272ac33ba730244d1395d4\nparent fc97ce6daed320027a47c1a0ddb86c9242ebde0c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619385312 +0200\ncommitter GitHub <noreply@github.com> 1619385312 +0200\n\nRollup merge of #84486 - Smittyvb:else-if-let-hir-pretty-print, r=petrochenkov\n\nHandle pretty printing of `else if let` clauses without ICEing\n\nWhen pretty printing the HIR of `if ... {} else if let ... {}` clauses, this displays it the `else if let` part as `match` it gets desugared to, the same way normal `if let` statements are currently displayed, instead of ICEing.\n\n```rust\npub fn main() {\n    if true {\n        // 1\n    } else if let a = 1 {\n        // 2\n    } else {\n        // 3\n    }\n}\n```\n\nnow gets desugared (via `rustc -Zunpretty=hir,typed src/x.rs`) to:\n\n```rust\n#[prelude_import]\nuse ::std::prelude::rust_2015::*;\n#[macro_use]\nextern crate std;\npub fn main() ({\n                   (if (true as bool)\n                       ({\n                            // 1\n                        } as\n                           ()) else {match (1 as i32) {\n                                         a => {\n                                             // 2\n                                         }\n                                         _ => {\n                                             // 3\n                                         }\n                                     }} as ())\n                    } as ())\n```\n\nFor comparison, this code gets HIR prettyprinted the same way before and after this change:\n\n```rust\npub fn main() {\n    if let a = 1 {\n        // 2\n    } else {\n        // 3\n    }\n}\n```\nturns into\n```rust\n#[prelude_import]\nuse ::std::prelude::rust_2015::*;\n#[macro_use]\nextern crate std;\npub fn main() ({\n                   (match (1 as i32) {\n                        a => {\n                            // 2\n                        }\n                        _ => {\n                            // 3\n                        }\n                    } as ())\n               } as ())\n```\n\nThis closes #82329. It closes #84434 as well, due to having the same root cause.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0dcbdf7fd826bac839fc7c8097f807812cc02a0", "html_url": "https://github.com/rust-lang/rust/commit/a0dcbdf7fd826bac839fc7c8097f807812cc02a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0dcbdf7fd826bac839fc7c8097f807812cc02a0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "379a55c64ef72df1c8272ac33ba730244d1395d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/379a55c64ef72df1c8272ac33ba730244d1395d4", "html_url": "https://github.com/rust-lang/rust/commit/379a55c64ef72df1c8272ac33ba730244d1395d4"}, {"sha": "fc97ce6daed320027a47c1a0ddb86c9242ebde0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc97ce6daed320027a47c1a0ddb86c9242ebde0c", "html_url": "https://github.com/rust-lang/rust/commit/fc97ce6daed320027a47c1a0ddb86c9242ebde0c"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "77d083fc5e967b4cae32fd111f2efdc40646c105", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a0dcbdf7fd826bac839fc7c8097f807812cc02a0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dcbdf7fd826bac839fc7c8097f807812cc02a0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a0dcbdf7fd826bac839fc7c8097f807812cc02a0", "patch": "@@ -1095,8 +1095,8 @@ impl<'a> State<'a> {\n \n     fn print_else(&mut self, els: Option<&hir::Expr<'_>>) {\n         match els {\n-            Some(_else) => {\n-                match _else.kind {\n+            Some(else_) => {\n+                match else_.kind {\n                     // \"another else-if\"\n                     hir::ExprKind::If(ref i, ref then, ref e) => {\n                         self.cbox(INDENT_UNIT - 1);\n@@ -1114,6 +1114,26 @@ impl<'a> State<'a> {\n                         self.s.word(\" else \");\n                         self.print_block(&b)\n                     }\n+                    hir::ExprKind::Match(ref expr, arms, _) => {\n+                        // else if let desugared to match\n+                        assert!(arms.len() == 2, \"if let desugars to match with two arms\");\n+\n+                        self.s.word(\" else \");\n+                        self.s.word(\"{\");\n+\n+                        self.cbox(INDENT_UNIT);\n+                        self.ibox(INDENT_UNIT);\n+                        self.word_nbsp(\"match\");\n+                        self.print_expr_as_cond(&expr);\n+                        self.s.space();\n+                        self.bopen();\n+                        for arm in arms {\n+                            self.print_arm(arm);\n+                        }\n+                        self.bclose(expr.span);\n+\n+                        self.s.word(\"}\");\n+                    }\n                     // BLEAH, constraints would be great here\n                     _ => {\n                         panic!(\"print_if saw if with weird alternative\");"}, {"sha": "d26d883040b485e9a1122234152ffdaec2fa5152", "filename": "src/test/ui/match/issue-82392.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a0dcbdf7fd826bac839fc7c8097f807812cc02a0/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dcbdf7fd826bac839fc7c8097f807812cc02a0/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.rs?ref=a0dcbdf7fd826bac839fc7c8097f807812cc02a0", "patch": "@@ -0,0 +1,9 @@\n+// https://github.com/rust-lang/rust/issues/82329\n+// compile-flags: -Zunpretty=hir,typed\n+// check-pass\n+\n+pub fn main() {\n+    if true {\n+    } else if let Some(a) = Some(3) {\n+    }\n+}"}, {"sha": "8ff76c64fc789f907633a8c3d186daaeb3ae5b22", "filename": "src/test/ui/match/issue-82392.stdout", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a0dcbdf7fd826bac839fc7c8097f807812cc02a0/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a0dcbdf7fd826bac839fc7c8097f807812cc02a0/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout?ref=a0dcbdf7fd826bac839fc7c8097f807812cc02a0", "patch": "@@ -0,0 +1,20 @@\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+// https://github.com/rust-lang/rust/issues/82329\n+// compile-flags: -Zunpretty=hir,typed\n+// check-pass\n+\n+pub fn main() ({\n+                   (if (true as bool)\n+                       ({ } as\n+                           ()) else {match ((Some as\n+                                                fn(i32) -> Option<i32> {Option::<i32>::Some})((3\n+                                                                                                  as\n+                                                                                                  i32))\n+                                               as Option<i32>) {\n+                                         Some(a) => { }\n+                                         _ => { }\n+                                     }} as ())\n+                    } as ())"}, {"sha": "423481fd5f02d0f461fb4ac41dcedafbd12793d8", "filename": "src/test/ui/match/issue-84434.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a0dcbdf7fd826bac839fc7c8097f807812cc02a0/src%2Ftest%2Fui%2Fmatch%2Fissue-84434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dcbdf7fd826bac839fc7c8097f807812cc02a0/src%2Ftest%2Fui%2Fmatch%2Fissue-84434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-84434.rs?ref=a0dcbdf7fd826bac839fc7c8097f807812cc02a0", "patch": "@@ -0,0 +1,18 @@\n+// https://github.com/rust-lang/rust/issues/84434\n+// check-pass\n+\n+use std::path::Path;\n+struct A {\n+    pub func: fn(check: bool, a: &Path, b: Option<&Path>),\n+}\n+const MY_A: A = A {\n+    func: |check, a, b| {\n+        if check {\n+            let _ = ();\n+        } else if let Some(parent) = b.and_then(|p| p.parent()) {\n+            let _ = ();\n+        }\n+    },\n+};\n+\n+fn main() {}"}]}