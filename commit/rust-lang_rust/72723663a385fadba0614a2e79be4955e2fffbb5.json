{"sha": "72723663a385fadba0614a2e79be4955e2fffbb5", "node_id": "C_kwDOAAsO6NoAKDcyNzIzNjYzYTM4NWZhZGJhMDYxNGEyZTc5YmU0OTU1ZTJmZmZiYjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T17:41:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T17:41:00Z"}, "message": "Auto merge of #7793 - mikerite:new_lint-msrv-2, r=Manishearth\n\nAdd option to `new_lint` to generate MSRV enabled lint\n\nchangelog: none", "tree": {"sha": "0e4d4ed8968a3fb649b27bfacdf57fb50ad95945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e4d4ed8968a3fb649b27bfacdf57fb50ad95945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72723663a385fadba0614a2e79be4955e2fffbb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72723663a385fadba0614a2e79be4955e2fffbb5", "html_url": "https://github.com/rust-lang/rust/commit/72723663a385fadba0614a2e79be4955e2fffbb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72723663a385fadba0614a2e79be4955e2fffbb5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc9ad848eb115164f1b88b07ad58447dbd6069bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9ad848eb115164f1b88b07ad58447dbd6069bd", "html_url": "https://github.com/rust-lang/rust/commit/bc9ad848eb115164f1b88b07ad58447dbd6069bd"}, {"sha": "7d9b21b90bc77ab26c8afefc78d6087aff34e4ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d9b21b90bc77ab26c8afefc78d6087aff34e4ad", "html_url": "https://github.com/rust-lang/rust/commit/7d9b21b90bc77ab26c8afefc78d6087aff34e4ad"}], "stats": {"total": 227, "additions": 149, "deletions": 78}, "files": [{"sha": "affb283017c8ce50252ae6d9750e553591e21497", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72723663a385fadba0614a2e79be4955e2fffbb5/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72723663a385fadba0614a2e79be4955e2fffbb5/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=72723663a385fadba0614a2e79be4955e2fffbb5", "patch": "@@ -6,6 +6,7 @@ edition = \"2021\"\n [dependencies]\n bytecount = \"0.6\"\n clap = \"2.33\"\n+indoc = \"1.0\"\n itertools = \"0.10\"\n opener = \"0.5\"\n regex = \"1.5\""}, {"sha": "b5c04efce3bc95bca885102df44ed2c612c6e8f1", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72723663a385fadba0614a2e79be4955e2fffbb5/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72723663a385fadba0614a2e79be4955e2fffbb5/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=72723663a385fadba0614a2e79be4955e2fffbb5", "patch": "@@ -28,6 +28,7 @@ fn main() {\n                 matches.value_of(\"pass\"),\n                 matches.value_of(\"name\"),\n                 matches.value_of(\"category\"),\n+                matches.is_present(\"msrv\"),\n             ) {\n                 Ok(_) => update_lints::run(update_lints::UpdateMode::Change),\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n@@ -147,6 +148,11 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                             \"internal_warn\",\n                         ])\n                         .takes_value(true),\n+                )\n+                .arg(\n+                    Arg::with_name(\"msrv\")\n+                        .long(\"msrv\")\n+                        .help(\"Add MSRV config code to the lint\"),\n                 ),\n         )\n         .subcommand("}, {"sha": "25320907bb492767f36da58f48e97d0b2d366477", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 142, "deletions": 78, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/72723663a385fadba0614a2e79be4955e2fffbb5/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72723663a385fadba0614a2e79be4955e2fffbb5/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=72723663a385fadba0614a2e79be4955e2fffbb5", "patch": "@@ -1,4 +1,5 @@\n use crate::clippy_project_root;\n+use indoc::indoc;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n use std::io::{self, ErrorKind};\n@@ -32,37 +33,20 @@ impl<T> Context for io::Result<T> {\n /// # Errors\n ///\n /// This function errors out if the files couldn't be created or written to.\n-pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>) -> io::Result<()> {\n+pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>, msrv: bool) -> io::Result<()> {\n     let lint = LintData {\n         pass: pass.expect(\"`pass` argument is validated by clap\"),\n         name: lint_name.expect(\"`name` argument is validated by clap\"),\n         category: category.expect(\"`category` argument is validated by clap\"),\n         project_root: clippy_project_root(),\n     };\n \n-    create_lint(&lint).context(\"Unable to create lint implementation\")?;\n+    create_lint(&lint, msrv).context(\"Unable to create lint implementation\")?;\n     create_test(&lint).context(\"Unable to create a test for the new lint\")\n }\n \n-fn create_lint(lint: &LintData<'_>) -> io::Result<()> {\n-    let (pass_type, pass_lifetimes, pass_import, context_import) = match lint.pass {\n-        \"early\" => (\"EarlyLintPass\", \"\", \"use rustc_ast::ast::*;\", \"EarlyContext\"),\n-        \"late\" => (\"LateLintPass\", \"<'_>\", \"use rustc_hir::*;\", \"LateContext\"),\n-        _ => {\n-            unreachable!(\"`pass_type` should only ever be `early` or `late`!\");\n-        },\n-    };\n-\n-    let camel_case_name = to_camel_case(lint.name);\n-    let lint_contents = get_lint_file_contents(\n-        pass_type,\n-        pass_lifetimes,\n-        lint.name,\n-        &camel_case_name,\n-        lint.category,\n-        pass_import,\n-        context_import,\n-    );\n+fn create_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n+    let lint_contents = get_lint_file_contents(lint, enable_msrv);\n \n     let lint_path = format!(\"clippy_lints/src/{}.rs\", lint.name);\n     write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())\n@@ -122,12 +106,13 @@ fn to_camel_case(name: &str) -> String {\n \n fn get_test_file_contents(lint_name: &str, header_commands: Option<&str>) -> String {\n     let mut contents = format!(\n-        \"#![warn(clippy::{})]\n+        indoc! {\"\n+            #![warn(clippy::{})]\n \n-fn main() {{\n-    // test code goes here\n-}}\n-\",\n+            fn main() {{\n+                // test code goes here\n+            }}\n+        \"},\n         lint_name\n     );\n \n@@ -140,64 +125,143 @@ fn main() {{\n \n fn get_manifest_contents(lint_name: &str, hint: &str) -> String {\n     format!(\n-        r#\"\n-# {}\n+        indoc! {r#\"\n+            # {}\n \n-[package]\n-name = \"{}\"\n-version = \"0.1.0\"\n-publish = false\n+            [package]\n+            name = \"{}\"\n+            version = \"0.1.0\"\n+            publish = false\n \n-[workspace]\n-\"#,\n+            [workspace]\n+        \"#},\n         hint, lint_name\n     )\n }\n \n-fn get_lint_file_contents(\n-    pass_type: &str,\n-    pass_lifetimes: &str,\n-    lint_name: &str,\n-    camel_case_name: &str,\n-    category: &str,\n-    pass_import: &str,\n-    context_import: &str,\n-) -> String {\n-    format!(\n-        \"use rustc_lint::{{{type}, {context_import}}};\n-use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n-{pass_import}\n-\n-declare_clippy_lint! {{\n-    /// ### What it does\n-    ///\n-    /// ### Why is this bad?\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// // example code where clippy issues a warning\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// // example code which does not raise clippy warning\n-    /// ```\n-    pub {name_upper},\n-    {category},\n-    \\\"default lint description\\\"\n-}}\n-\n-declare_lint_pass!({name_camel} => [{name_upper}]);\n-\n-impl {type}{lifetimes} for {name_camel} {{}}\n-\",\n-        type=pass_type,\n-        lifetimes=pass_lifetimes,\n-        name_upper=lint_name.to_uppercase(),\n-        name_camel=camel_case_name,\n-        category=category,\n-        pass_import=pass_import,\n-        context_import=context_import\n-    )\n+fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n+    let mut result = String::new();\n+\n+    let (pass_type, pass_lifetimes, pass_import, context_import) = match lint.pass {\n+        \"early\" => (\"EarlyLintPass\", \"\", \"use rustc_ast::ast::*;\", \"EarlyContext\"),\n+        \"late\" => (\"LateLintPass\", \"<'_>\", \"use rustc_hir::*;\", \"LateContext\"),\n+        _ => {\n+            unreachable!(\"`pass_type` should only ever be `early` or `late`!\");\n+        },\n+    };\n+\n+    let lint_name = lint.name;\n+    let pass_name = lint.pass;\n+    let category = lint.category;\n+    let name_camel = to_camel_case(lint.name);\n+    let name_upper = lint_name.to_uppercase();\n+\n+    result.push_str(&if enable_msrv {\n+        format!(\n+            indoc! {\"\n+                use clippy_utils::msrvs;\n+                {pass_import}\n+                use rustc_lint::{{{context_import}, {pass_type}, LintContext}};\n+                use rustc_semver::RustcVersion;\n+                use rustc_session::{{declare_tool_lint, impl_lint_pass}};\n+\n+            \"},\n+            pass_type = pass_type,\n+            pass_import = pass_import,\n+            context_import = context_import,\n+        )\n+    } else {\n+        format!(\n+            indoc! {\"\n+                {pass_import}\n+                use rustc_lint::{{{context_import}, {pass_type}}};\n+                use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n+\n+            \"},\n+            pass_import = pass_import,\n+            pass_type = pass_type,\n+            context_import = context_import\n+        )\n+    });\n+\n+    result.push_str(&format!(\n+        indoc! {\"\n+            declare_clippy_lint! {{\n+                /// ### What it does\n+                ///\n+                /// ### Why is this bad?\n+                ///\n+                /// ### Example\n+                /// ```rust\n+                /// // example code where clippy issues a warning\n+                /// ```\n+                /// Use instead:\n+                /// ```rust\n+                /// // example code which does not raise clippy warning\n+                /// ```\n+                pub {name_upper},\n+                {category},\n+                \\\"default lint description\\\"\n+            }}\n+        \"},\n+        name_upper = name_upper,\n+        category = category,\n+    ));\n+\n+    result.push_str(&if enable_msrv {\n+        format!(\n+            indoc! {\"\n+                pub struct {name_camel} {{\n+                    msrv: Option<RustcVersion>,\n+                }}\n+\n+                impl {name_camel} {{\n+                    #[must_use]\n+                    pub fn new(msrv: Option<RustcVersion>) -> Self {{\n+                        Self {{ msrv }}\n+                    }}\n+                }}\n+\n+                impl_lint_pass!({name_camel} => [{name_upper}]);\n+\n+                impl {pass_type}{pass_lifetimes} for {name_camel} {{\n+                    extract_msrv_attr!({context_import});\n+                }}\n+\n+                // TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n+                //       e.g. store.register_{pass_name}_pass(move || Box::new({module_name}::{name_camel}::new(msrv)));\n+                // TODO: Add MSRV level to `clippy_utils/src/msrvs.rs` if needed.\n+                // TODO: Add MSRV test to `tests/ui/min_rust_version_attr.rs`.\n+                // TODO: Update msrv config comment in `clippy_lints/src/utils/conf.rs`\n+            \"},\n+            pass_type = pass_type,\n+            pass_lifetimes = pass_lifetimes,\n+            pass_name = pass_name,\n+            name_upper = name_upper,\n+            name_camel = name_camel,\n+            module_name = lint_name,\n+            context_import = context_import,\n+        )\n+    } else {\n+        format!(\n+            indoc! {\"\n+                declare_lint_pass!({name_camel} => [{name_upper}]);\n+\n+                impl {pass_type}{pass_lifetimes} for {name_camel} {{}}\n+                //\n+                // TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n+                //       e.g. store.register_{pass_name}_pass(|| Box::new({module_name}::{name_camel}));\n+            \"},\n+            pass_type = pass_type,\n+            pass_lifetimes = pass_lifetimes,\n+            pass_name = pass_name,\n+            name_upper = name_upper,\n+            name_camel = name_camel,\n+            module_name = lint_name,\n+        )\n+    });\n+\n+    result\n }\n \n #[test]"}]}