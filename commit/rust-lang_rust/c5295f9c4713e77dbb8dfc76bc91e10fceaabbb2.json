{"sha": "c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1Mjk1ZjljNDcxM2U3N2RiYjhkZmM3NmJjOTFlMTBmY2VhYWJiYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-04T19:36:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-04T19:36:36Z"}, "message": "auto merge of #9717 : blake2-ppc/rust/rustc-static-str, r=alexcrichton\n\nrustc: Use static strings in a few literals\r\n\r\nAvoid allocating extra copies of strings by using \"\" instead of ~\"\" for\r\nthe debug options list and for the `time` function. This is a small\r\nchange, but it is in a path that's always executed.", "tree": {"sha": "e13701e3f26f324ae9e636b35e059b591874e68b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e13701e3f26f324ae9e636b35e059b591874e68b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2", "html_url": "https://github.com/rust-lang/rust/commit/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d54acc3eb8f381f481d070a34d27651f86785e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d54acc3eb8f381f481d070a34d27651f86785e", "html_url": "https://github.com/rust-lang/rust/commit/a9d54acc3eb8f381f481d070a34d27651f86785e"}, {"sha": "9ac175c503e0c839551868fa8d624943c3af9d99", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac175c503e0c839551868fa8d624943c3af9d99", "html_url": "https://github.com/rust-lang/rust/commit/9ac175c503e0c839551868fa8d624943c3af9d99"}], "stats": {"total": 181, "additions": 90, "deletions": 91}, "files": [{"sha": "c19b5a83315d93c4644cb52e979c7362b8d04b85", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2", "patch": "@@ -1007,9 +1007,9 @@ pub fn link_args(sess: Session,\n             continue;\n         }\n         let dir = cratepath.dirname();\n-        if dir != ~\"\" { args.push(~\"-L\" + dir); }\n+        if !dir.is_empty() { args.push(\"-L\" + dir); }\n         let libarg = unlib(sess.targ_cfg, cratepath.filestem().unwrap().to_owned());\n-        args.push(~\"-l\" + libarg);\n+        args.push(\"-l\" + libarg);\n     }\n \n     let ula = cstore::get_used_link_args(cstore);\n@@ -1032,12 +1032,12 @@ pub fn link_args(sess: Session,\n     // forces to make sure that library can be found at runtime.\n \n     for path in sess.opts.addl_lib_search_paths.iter() {\n-        args.push(~\"-L\" + path.to_str());\n+        args.push(\"-L\" + path.to_str());\n     }\n \n     let rustpath = filesearch::rust_path();\n     for path in rustpath.iter() {\n-        args.push(~\"-L\" + path.to_str());\n+        args.push(\"-L\" + path.to_str());\n     }\n \n     // The names of the extern libraries\n@@ -1050,7 +1050,7 @@ pub fn link_args(sess: Session,\n         // On mac we need to tell the linker to let this library\n         // be rpathed\n         if sess.targ_cfg.os == session::OsMacos {\n-            args.push(~\"-Wl,-install_name,@rpath/\"\n+            args.push(\"-Wl,-install_name,@rpath/\"\n                       + output.filename().unwrap());\n         }\n     }"}, {"sha": "00f722e7890a4b8d5c1b5456f47a9265b876ee61", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2", "patch": "@@ -131,7 +131,7 @@ pub enum input {\n \n pub fn phase_1_parse_input(sess: Session, cfg: ast::CrateConfig, input: &input)\n     -> ast::Crate {\n-    time(sess.time_passes(), ~\"parsing\", (), |_| {\n+    time(sess.time_passes(), \"parsing\", (), |_| {\n         match *input {\n             file_input(ref file) => {\n                 parse::parse_crate_from_file(&(*file), cfg.clone(), sess.parse_sess)\n@@ -167,29 +167,29 @@ pub fn phase_2_configure_and_expand(sess: Session,\n     //   mod bar { macro_rules! baz!(() => {{}}) }\n     //\n     // baz! should not use this definition unless foo is enabled.\n-    crate = time(time_passes, ~\"std macros injection\", crate, |crate|\n+    crate = time(time_passes, \"std macros injection\", crate, |crate|\n                  syntax::ext::expand::inject_std_macros(sess.parse_sess,\n                                                         cfg.clone(),\n                                                         crate));\n \n-    crate = time(time_passes, ~\"configuration 1\", crate, |crate|\n+    crate = time(time_passes, \"configuration 1\", crate, |crate|\n                  front::config::strip_unconfigured_items(crate));\n \n-    crate = time(time_passes, ~\"expansion\", crate, |crate|\n+    crate = time(time_passes, \"expansion\", crate, |crate|\n                  syntax::ext::expand::expand_crate(sess.parse_sess, cfg.clone(),\n                                                    crate));\n \n     // strip again, in case expansion added anything with a #[cfg].\n-    crate = time(time_passes, ~\"configuration 2\", crate, |crate|\n+    crate = time(time_passes, \"configuration 2\", crate, |crate|\n                  front::config::strip_unconfigured_items(crate));\n \n-    crate = time(time_passes, ~\"maybe building test harness\", crate, |crate|\n+    crate = time(time_passes, \"maybe building test harness\", crate, |crate|\n                  front::test::modify_for_testing(sess, crate));\n \n-    crate = time(time_passes, ~\"std injection\", crate, |crate|\n+    crate = time(time_passes, \"std injection\", crate, |crate|\n                  front::std_inject::maybe_inject_libstd_ref(sess, crate));\n \n-    crate = time(time_passes, ~\"assigning node ids\", crate, |crate|\n+    crate = time(time_passes, \"assigning node ids\", crate, |crate|\n                  front::assign_node_ids::assign_node_ids(sess, crate));\n \n     return crate;\n@@ -211,37 +211,37 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n \n     let time_passes = sess.time_passes();\n \n-    let ast_map = time(time_passes, ~\"ast indexing\", (), |_|\n+    let ast_map = time(time_passes, \"ast indexing\", (), |_|\n                        syntax::ast_map::map_crate(sess.diagnostic(), crate));\n \n-    time(time_passes, ~\"external crate/lib resolution\", (), |_|\n+    time(time_passes, \"external crate/lib resolution\", (), |_|\n          creader::read_crates(sess.diagnostic(), crate, sess.cstore,\n                               sess.filesearch,\n                               session::sess_os_to_meta_os(sess.targ_cfg.os),\n                               sess.opts.is_static,\n                               token::get_ident_interner()));\n \n-    let lang_items = time(time_passes, ~\"language item collection\", (), |_|\n+    let lang_items = time(time_passes, \"language item collection\", (), |_|\n                           middle::lang_items::collect_language_items(crate, sess));\n \n     let middle::resolve::CrateMap {\n         def_map: def_map,\n         exp_map2: exp_map2,\n         trait_map: trait_map\n     } =\n-        time(time_passes, ~\"resolution\", (), |_|\n+        time(time_passes, \"resolution\", (), |_|\n              middle::resolve::resolve_crate(sess, lang_items, crate));\n \n-    time(time_passes, ~\"looking for entry point\", (),\n+    time(time_passes, \"looking for entry point\", (),\n          |_| middle::entry::find_entry_point(sess, crate, ast_map));\n \n-    let freevars = time(time_passes, ~\"freevar finding\", (), |_|\n+    let freevars = time(time_passes, \"freevar finding\", (), |_|\n                         freevars::annotate_freevars(def_map, crate));\n \n-    let region_map = time(time_passes, ~\"region resolution\", (), |_|\n+    let region_map = time(time_passes, \"region resolution\", (), |_|\n                           middle::region::resolve_crate(sess, def_map, crate));\n \n-    let rp_set = time(time_passes, ~\"region parameterization inference\", (), |_|\n+    let rp_set = time(time_passes, \"region parameterization inference\", (), |_|\n                       middle::region::determine_rp_in_crate(sess, ast_map, def_map, crate));\n \n     let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars,\n@@ -252,53 +252,53 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n         ty_cx, trait_map, crate);\n \n     // These next two const passes can probably be merged\n-    time(time_passes, ~\"const marking\", (), |_|\n+    time(time_passes, \"const marking\", (), |_|\n          middle::const_eval::process_crate(crate, ty_cx));\n \n-    time(time_passes, ~\"const checking\", (), |_|\n+    time(time_passes, \"const checking\", (), |_|\n          middle::check_const::check_crate(sess, crate, ast_map, def_map,\n                                           method_map, ty_cx));\n \n     let exported_items =\n-        time(time_passes, ~\"privacy checking\", (), |_|\n+        time(time_passes, \"privacy checking\", (), |_|\n              middle::privacy::check_crate(ty_cx, &method_map, &exp_map2, crate));\n \n-    time(time_passes, ~\"effect checking\", (), |_|\n+    time(time_passes, \"effect checking\", (), |_|\n          middle::effect::check_crate(ty_cx, method_map, crate));\n \n-    time(time_passes, ~\"loop checking\", (), |_|\n+    time(time_passes, \"loop checking\", (), |_|\n          middle::check_loop::check_crate(ty_cx, crate));\n \n-    time(time_passes, ~\"stack checking\", (), |_|\n+    time(time_passes, \"stack checking\", (), |_|\n          middle::stack_check::stack_check_crate(ty_cx, crate));\n \n     let middle::moves::MoveMaps {moves_map, moved_variables_set,\n                                  capture_map} =\n-        time(time_passes, ~\"compute moves\", (), |_|\n+        time(time_passes, \"compute moves\", (), |_|\n              middle::moves::compute_moves(ty_cx, method_map, crate));\n \n-    time(time_passes, ~\"match checking\", (), |_|\n+    time(time_passes, \"match checking\", (), |_|\n          middle::check_match::check_crate(ty_cx, method_map,\n                                           moves_map, crate));\n \n-    time(time_passes, ~\"liveness checking\", (), |_|\n+    time(time_passes, \"liveness checking\", (), |_|\n          middle::liveness::check_crate(ty_cx, method_map,\n                                        capture_map, crate));\n \n     let (root_map, write_guard_map) =\n-        time(time_passes, ~\"borrow checking\", (), |_|\n+        time(time_passes, \"borrow checking\", (), |_|\n              middle::borrowck::check_crate(ty_cx, method_map,\n                                            moves_map, moved_variables_set,\n                                            capture_map, crate));\n \n-    time(time_passes, ~\"kind checking\", (), |_|\n+    time(time_passes, \"kind checking\", (), |_|\n          kind::check_crate(ty_cx, method_map, crate));\n \n     let reachable_map =\n-        time(time_passes, ~\"reachability checking\", (), |_|\n+        time(time_passes, \"reachability checking\", (), |_|\n              reachable::find_reachable(ty_cx, method_map, crate));\n \n-    time(time_passes, ~\"lint checking\", (), |_|\n+    time(time_passes, \"lint checking\", (), |_|\n          lint::check_crate(ty_cx, crate));\n \n     CrateAnalysis {\n@@ -328,7 +328,7 @@ pub fn phase_4_translate_to_llvm(sess: Session,\n                                  crate: ast::Crate,\n                                  analysis: &CrateAnalysis,\n                                  outputs: &OutputFilenames) -> CrateTranslation {\n-    time(sess.time_passes(), ~\"translation\", crate, |crate|\n+    time(sess.time_passes(), \"translation\", crate, |crate|\n          trans::base::trans_crate(sess, crate, analysis,\n                                   &outputs.obj_filename))\n }\n@@ -349,7 +349,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n         let output_type = link::output_type_assembly;\n         let asm_filename = outputs.obj_filename.with_filetype(\"s\");\n \n-        time(sess.time_passes(), ~\"LLVM passes\", (), |_|\n+        time(sess.time_passes(), \"LLVM passes\", (), |_|\n             link::write::run_passes(sess,\n                                     trans.context,\n                                     trans.module,\n@@ -363,7 +363,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n             os::remove_file(&asm_filename);\n         }\n     } else {\n-        time(sess.time_passes(), ~\"LLVM passes\", (), |_|\n+        time(sess.time_passes(), \"LLVM passes\", (), |_|\n             link::write::run_passes(sess,\n                                     trans.context,\n                                     trans.module,\n@@ -377,7 +377,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n pub fn phase_6_link_output(sess: Session,\n                            trans: &CrateTranslation,\n                            outputs: &OutputFilenames) {\n-    time(sess.time_passes(), ~\"linking\", (), |_|\n+    time(sess.time_passes(), \"linking\", (), |_|\n          link::link_binary(sess,\n                            &outputs.obj_filename,\n                            &outputs.out_filename,\n@@ -596,12 +596,12 @@ pub fn build_target_config(sopts: @session::options,\n                            -> @session::config {\n     let os = match get_os(sopts.target_triple) {\n       Some(os) => os,\n-      None => early_error(demitter, ~\"unknown operating system\")\n+      None => early_error(demitter, \"unknown operating system\")\n     };\n     let arch = match get_arch(sopts.target_triple) {\n       Some(arch) => arch,\n       None => early_error(demitter,\n-                          ~\"unknown architecture: \" + sopts.target_triple)\n+                          \"unknown architecture: \" + sopts.target_triple)\n     };\n     let (int_type, uint_type) = match arch {\n       abi::X86 => (ast::ty_i32, ast::ty_u32),\n@@ -686,7 +686,7 @@ pub fn build_session_options(binary: @str,\n         let mut this_bit = 0u;\n         for tuple in debug_map.iter() {\n             let (name, bit) = match *tuple { (ref a, _, b) => (a, b) };\n-            if name == debug_flag { this_bit = bit; break; }\n+            if *name == *debug_flag { this_bit = bit; break; }\n         }\n         if this_bit == 0u {\n             early_error(demitter, format!(\"unknown debug flag: {}\", *debug_flag))\n@@ -726,7 +726,7 @@ pub fn build_session_options(binary: @str,\n             No\n         } else if matches.opt_present(\"O\") {\n             if matches.opt_present(\"opt-level\") {\n-                early_error(demitter, ~\"-O and --opt-level both provided\");\n+                early_error(demitter, \"-O and --opt-level both provided\");\n             }\n             Default\n         } else if matches.opt_present(\"opt-level\") {\n@@ -736,7 +736,7 @@ pub fn build_session_options(binary: @str,\n               ~\"2\" => Default,\n               ~\"3\" => Aggressive,\n               _ => {\n-                early_error(demitter, ~\"optimization level needs to be between 0-3\")\n+                early_error(demitter, \"optimization level needs to be between 0-3\")\n               }\n             }\n         } else { No }\n@@ -1030,7 +1030,7 @@ pub fn build_output_filenames(input: &input,\n     }\n }\n \n-pub fn early_error(emitter: @diagnostic::Emitter, msg: ~str) -> ! {\n+pub fn early_error(emitter: @diagnostic::Emitter, msg: &str) -> ! {\n     emitter.emit(None, msg, diagnostic::fatal);\n     fail2!();\n }"}, {"sha": "e4a08c3e16e5dd02d383b7355261b3abc9af9c1d", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2", "patch": "@@ -81,61 +81,60 @@ pub static no_vectorize_slp:        uint = 1 << 28;\n pub static no_prepopulate_passes:   uint = 1 << 29;\n pub static use_softfp:              uint = 1 << 30;\n \n-pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n-    ~[(~\"verbose\", ~\"in general, enable more debug printouts\", verbose),\n-     (~\"time-passes\", ~\"measure time of each rustc pass\", time_passes),\n-     (~\"count-llvm-insns\", ~\"count where LLVM \\\n+pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n+    ~[(\"verbose\", \"in general, enable more debug printouts\", verbose),\n+     (\"time-passes\", \"measure time of each rustc pass\", time_passes),\n+     (\"count-llvm-insns\", \"count where LLVM \\\n                            instrs originate\", count_llvm_insns),\n-     (~\"time-llvm-passes\", ~\"measure time of each LLVM pass\",\n+     (\"time-llvm-passes\", \"measure time of each LLVM pass\",\n       time_llvm_passes),\n-     (~\"trans-stats\", ~\"gather trans statistics\", trans_stats),\n-     (~\"asm-comments\", ~\"generate comments into the assembly (may change behavior)\", asm_comments),\n-     (~\"no-verify\", ~\"skip LLVM verification\", no_verify),\n-     (~\"trace\", ~\"emit trace logs\", trace),\n-     (~\"coherence\", ~\"perform coherence checking\", coherence),\n-     (~\"borrowck-stats\", ~\"gather borrowck statistics\",  borrowck_stats),\n-     (~\"borrowck-note-pure\", ~\"note where purity is req'd\",\n+     (\"trans-stats\", \"gather trans statistics\", trans_stats),\n+     (\"asm-comments\", \"generate comments into the assembly (may change behavior)\", asm_comments),\n+     (\"no-verify\", \"skip LLVM verification\", no_verify),\n+     (\"trace\", \"emit trace logs\", trace),\n+     (\"coherence\", \"perform coherence checking\", coherence),\n+     (\"borrowck-stats\", \"gather borrowck statistics\",  borrowck_stats),\n+     (\"borrowck-note-pure\", \"note where purity is req'd\",\n       borrowck_note_pure),\n-     (~\"borrowck-note-loan\", ~\"note where loans are req'd\",\n+     (\"borrowck-note-loan\", \"note where loans are req'd\",\n       borrowck_note_loan),\n-     (~\"no-landing-pads\", ~\"omit landing pads for unwinding\",\n+     (\"no-landing-pads\", \"omit landing pads for unwinding\",\n       no_landing_pads),\n-     (~\"debug-llvm\", ~\"enable debug output from LLVM\", debug_llvm),\n-     (~\"count-type-sizes\", ~\"count the sizes of aggregate types\",\n+     (\"debug-llvm\", \"enable debug output from LLVM\", debug_llvm),\n+     (\"count-type-sizes\", \"count the sizes of aggregate types\",\n       count_type_sizes),\n-     (~\"meta-stats\", ~\"gather metadata statistics\", meta_stats),\n-     (~\"no-opt\", ~\"do not optimize, even if -O is passed\", no_opt),\n-     (~\"print-link-args\", ~\"Print the arguments passed to the linker\", print_link_args),\n-     (~\"gc\", ~\"Garbage collect shared data (experimental)\", gc),\n-     (~\"jit\", ~\"Execute using JIT (experimental)\", jit),\n-     (~\"extra-debug-info\", ~\"Extra debugging info (experimental)\",\n+     (\"meta-stats\", \"gather metadata statistics\", meta_stats),\n+     (\"no-opt\", \"do not optimize, even if -O is passed\", no_opt),\n+     (\"print-link-args\", \"Print the arguments passed to the linker\", print_link_args),\n+     (\"gc\", \"Garbage collect shared data (experimental)\", gc),\n+     (\"jit\", \"Execute using JIT (experimental)\", jit),\n+     (\"extra-debug-info\", \"Extra debugging info (experimental)\",\n       extra_debug_info),\n-     (~\"debug-info\", ~\"Produce debug info (experimental)\", debug_info),\n-     (~\"static\", ~\"Use or produce static libraries or binaries \" +\n-      \"(experimental)\", statik),\n-     (~\"no-debug-borrows\",\n-      ~\"do not show where borrow checks fail\",\n+     (\"debug-info\", \"Produce debug info (experimental)\", debug_info),\n+     (\"static\", \"Use or produce static libraries or binaries (experimental)\", statik),\n+     (\"no-debug-borrows\",\n+      \"do not show where borrow checks fail\",\n       no_debug_borrows),\n-     (~\"lint-llvm\",\n-      ~\"Run the LLVM lint pass on the pre-optimization IR\",\n+     (\"lint-llvm\",\n+      \"Run the LLVM lint pass on the pre-optimization IR\",\n       lint_llvm),\n-     (~\"once-fns\",\n-      ~\"Allow 'once fn' closures to deinitialize captured variables\",\n+     (\"once-fns\",\n+      \"Allow 'once fn' closures to deinitialize captured variables\",\n       once_fns),\n-     (~\"print-llvm-passes\",\n-      ~\"Prints the llvm optimization passes being run\",\n+     (\"print-llvm-passes\",\n+      \"Prints the llvm optimization passes being run\",\n       print_llvm_passes),\n-     (~\"no-prepopulate-passes\",\n-      ~\"Don't pre-populate the pass managers with a list of passes, only use \\\n+     (\"no-prepopulate-passes\",\n+      \"Don't pre-populate the pass managers with a list of passes, only use \\\n         the passes from --passes\",\n       no_prepopulate_passes),\n-     (~\"no-vectorize-loops\",\n-      ~\"Don't run the loop vectorization optimization passes\",\n+     (\"no-vectorize-loops\",\n+      \"Don't run the loop vectorization optimization passes\",\n       no_vectorize_loops),\n-     (~\"no-vectorize-slp\",\n-      ~\"Don't run LLVM's SLP vectorization passes\",\n+     (\"no-vectorize-slp\",\n+      \"Don't run LLVM's SLP vectorization passes\",\n       no_vectorize_slp),\n-     (~\"soft-float\", ~\"Generate software floating point library calls\", use_softfp),\n+     (\"soft-float\", \"Generate software floating point library calls\", use_softfp),\n     ]\n }\n "}, {"sha": "116d26967b2b551f37f6d07cdea5f547cf591c2b", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2", "patch": "@@ -447,17 +447,17 @@ pub fn check_crate(tcx: ty::ctxt,\n         tcx: tcx\n     };\n \n-    time(time_passes, ~\"type collecting\", (), |_|\n+    time(time_passes, \"type collecting\", (), |_|\n         collect::collect_item_types(ccx, crate));\n \n     // this ensures that later parts of type checking can assume that items\n     // have valid types and not error\n     tcx.sess.abort_if_errors();\n \n-    time(time_passes, ~\"coherence checking\", (), |_|\n+    time(time_passes, \"coherence checking\", (), |_|\n         coherence::check_coherence(ccx, crate));\n \n-    time(time_passes, ~\"type checking\", (), |_|\n+    time(time_passes, \"type checking\", (), |_|\n         check::check_item_types(ccx, crate));\n \n     check_for_entry_fn(ccx);"}, {"sha": "2cf04e8d3e11f4dfb6764b00f375f21a0415c12d", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2", "patch": "@@ -243,7 +243,7 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n         return;\n     }\n     let input = match matches.free.len() {\n-      0u => early_error(demitter, ~\"no input filename given\"),\n+      0u => early_error(demitter, \"no input filename given\"),\n       1u => {\n         let ifile = matches.free[0].as_slice();\n         if \"-\" == ifile {\n@@ -253,7 +253,7 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n             file_input(Path(ifile))\n         }\n       }\n-      _ => early_error(demitter, ~\"multiple input filenames provided\")\n+      _ => early_error(demitter, \"multiple input filenames provided\")\n     };\n \n     let sopts = build_session_options(binary, matches, demitter);\n@@ -278,7 +278,7 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n             list_metadata(sess, &(*ifile), io::stdout());\n           }\n           str_input(_) => {\n-            early_error(demitter, ~\"can not list metadata for stdin\");\n+            early_error(demitter, \"can not list metadata for stdin\");\n           }\n         }\n         return;"}, {"sha": "46c71ea12f58331306f8e9c337e96da686c79248", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=c5295f9c4713e77dbb8dfc76bc91e10fceaabbb2", "patch": "@@ -17,7 +17,7 @@ use syntax::visit::Visitor;\n use std::hashmap::HashSet;\n use extra;\n \n-pub fn time<T, U>(do_it: bool, what: ~str, u: U, f: &fn(U) -> T) -> T {\n+pub fn time<T, U>(do_it: bool, what: &str, u: U, f: &fn(U) -> T) -> T {\n     if !do_it { return f(u); }\n     let start = extra::time::precise_time_s();\n     let rv = f(u);"}]}