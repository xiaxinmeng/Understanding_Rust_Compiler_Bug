{"sha": "9289d03c9d263ac32a9dd0a5c581779fe1def7d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODlkMDNjOWQyNjNhYzMyYTlkZDBhNWM1ODE3NzlmZTFkZWY3ZDM=", "commit": {"author": {"name": "tyler", "email": "tyler@brainiumstudios.com", "date": "2019-05-15T14:18:24Z"}, "committer": {"name": "tyler", "email": "tyler@brainiumstudios.com", "date": "2019-05-15T14:30:34Z"}, "message": "llvm makes good inlining choices with only the #[cold] attribute", "tree": {"sha": "efd33e4523da7be0ee2c7d4bd64ccd0e5a726bcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd33e4523da7be0ee2c7d4bd64ccd0e5a726bcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9289d03c9d263ac32a9dd0a5c581779fe1def7d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9289d03c9d263ac32a9dd0a5c581779fe1def7d3", "html_url": "https://github.com/rust-lang/rust/commit/9289d03c9d263ac32a9dd0a5c581779fe1def7d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9289d03c9d263ac32a9dd0a5c581779fe1def7d3/comments", "author": {"login": "mtak-", "id": 6643140, "node_id": "MDQ6VXNlcjY2NDMxNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6643140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtak-", "html_url": "https://github.com/mtak-", "followers_url": "https://api.github.com/users/mtak-/followers", "following_url": "https://api.github.com/users/mtak-/following{/other_user}", "gists_url": "https://api.github.com/users/mtak-/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtak-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtak-/subscriptions", "organizations_url": "https://api.github.com/users/mtak-/orgs", "repos_url": "https://api.github.com/users/mtak-/repos", "events_url": "https://api.github.com/users/mtak-/events{/privacy}", "received_events_url": "https://api.github.com/users/mtak-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mtak-", "id": 6643140, "node_id": "MDQ6VXNlcjY2NDMxNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6643140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtak-", "html_url": "https://github.com/mtak-", "followers_url": "https://api.github.com/users/mtak-/followers", "following_url": "https://api.github.com/users/mtak-/following{/other_user}", "gists_url": "https://api.github.com/users/mtak-/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtak-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtak-/subscriptions", "organizations_url": "https://api.github.com/users/mtak-/orgs", "repos_url": "https://api.github.com/users/mtak-/repos", "events_url": "https://api.github.com/users/mtak-/events{/privacy}", "received_events_url": "https://api.github.com/users/mtak-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b3642b95b04b4078405f4bc20ba537ce5512c00", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b3642b95b04b4078405f4bc20ba537ce5512c00", "html_url": "https://github.com/rust-lang/rust/commit/2b3642b95b04b4078405f4bc20ba537ce5512c00"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "733c772a1f5f7fa79e0f0aee6b3cb280e1942661", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9289d03c9d263ac32a9dd0a5c581779fe1def7d3/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9289d03c9d263ac32a9dd0a5c581779fe1def7d3/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=9289d03c9d263ac32a9dd0a5c581779fe1def7d3", "patch": "@@ -414,46 +414,42 @@ pub mod fast {\n         }\n \n         // `try_initialize` is only called once per fast thread local variable,\n-        // except in corner cases where it is being recursively initialized.\n+        // except in corner cases where thread_local dtors reference other\n+        // thread_local's, or it is being recursively initialized.\n+        //\n+        // Macos: Inlining this function can cause two `tlv_get_addr` calls to\n+        // be performed for every call to `Key::get`. The #[cold] hint makes\n+        // that less likely.\n+        // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722\n         #[cold]\n         unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {\n-            if mem::needs_drop::<T>() {\n-                self.try_initialize_drop(init)\n-            } else {\n+            if !mem::needs_drop::<T>() || self.try_register_dtor() {\n                 Some(self.inner.initialize(init))\n+            } else {\n+                None\n             }\n         }\n \n-        // `try_initialize_drop` is only called once per fast thread local\n+        // `try_register_dtor` is only called once per fast thread local\n         // variable, except in corner cases where thread_local dtors reference\n         // other thread_local's, or it is being recursively initialized.\n-        //\n-        // Macos: Inlining this function causes two `tlv_get_addr` calls to be\n-        // performed for every call to `Key::get`.\n-        // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722\n-        #[inline(never)]\n-        #[cold]\n-        unsafe fn try_initialize_drop<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {\n-            // We don't put a `needs_drop` check around this and call it a day\n-            // because this function is not inlined. Unwrapping code gets\n-            // generated for callers of `LocalKey::with` even if we always\n-            // return `Some` here.\n+        unsafe fn try_register_dtor(&self) -> bool {\n             match self.dtor_state.get() {\n                 DtorState::Unregistered => {\n                     // dtor registration happens before initialization.\n                     register_dtor(self as *const _ as *mut u8,\n                                 destroy_value::<T>);\n                     self.dtor_state.set(DtorState::Registered);\n+                    true\n                 }\n                 DtorState::Registered => {\n                     // recursively initialized\n+                    true\n                 }\n                 DtorState::RunningOrHasRun => {\n-                    return None\n+                    false\n                 }\n             }\n-\n-            Some(self.inner.initialize(init))\n         }\n     }\n "}]}