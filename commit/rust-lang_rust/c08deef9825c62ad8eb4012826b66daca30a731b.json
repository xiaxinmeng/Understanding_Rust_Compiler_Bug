{"sha": "c08deef9825c62ad8eb4012826b66daca30a731b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOGRlZWY5ODI1YzYyYWQ4ZWI0MDEyODI2YjY2ZGFjYTMwYTczMWI=", "commit": {"author": {"name": "J\u00f8rn Lode", "email": "jlode90@gmail.com", "date": "2015-09-06T01:20:53Z"}, "committer": {"name": "J\u00f8rn Lode", "email": "jlode90@gmail.com", "date": "2015-09-06T01:44:13Z"}, "message": "Rustonomicon: Fix bug in implementation of Vec::drain()\n\nIn the last code snippet on the following page there is a bug in the\nimplementation of Vec::drain().\n\nhttps://doc.rust-lang.org/nightly/nomicon/vec-drain.html\n\n```rust\npub fn drain(&mut self) -> Drain<T> {\n    // Oops, setting it to 0 while we still need the old value!\n    self.len = 0;\n\n    unsafe {\n        Drain {\n            // len is used to create a &[T] from &self here,\n            // so we end up always creating an empty slice.\n            iter: RawValIter::new(&self),\n            vec: PhantomData,\n        }\n    }\n}\n```\n\nA simple test to verify that Drain is broken can be found here:\nhttps://play.rust-lang.org/?gist=30f579565e4bbf4836ce&version=nightly\n\nAnd here's one with a fixed implementation:\nhttps://play.rust-lang.org/?gist=2ec0c1a6dcf5defd7a53&version=nightly", "tree": {"sha": "fc24cb611e57a4eeff623921ed99f05069127e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc24cb611e57a4eeff623921ed99f05069127e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08deef9825c62ad8eb4012826b66daca30a731b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08deef9825c62ad8eb4012826b66daca30a731b", "html_url": "https://github.com/rust-lang/rust/commit/c08deef9825c62ad8eb4012826b66daca30a731b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08deef9825c62ad8eb4012826b66daca30a731b/comments", "author": {"login": "boblehest", "id": 639444, "node_id": "MDQ6VXNlcjYzOTQ0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/639444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boblehest", "html_url": "https://github.com/boblehest", "followers_url": "https://api.github.com/users/boblehest/followers", "following_url": "https://api.github.com/users/boblehest/following{/other_user}", "gists_url": "https://api.github.com/users/boblehest/gists{/gist_id}", "starred_url": "https://api.github.com/users/boblehest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boblehest/subscriptions", "organizations_url": "https://api.github.com/users/boblehest/orgs", "repos_url": "https://api.github.com/users/boblehest/repos", "events_url": "https://api.github.com/users/boblehest/events{/privacy}", "received_events_url": "https://api.github.com/users/boblehest/received_events", "type": "User", "site_admin": false}, "committer": {"login": "boblehest", "id": 639444, "node_id": "MDQ6VXNlcjYzOTQ0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/639444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boblehest", "html_url": "https://github.com/boblehest", "followers_url": "https://api.github.com/users/boblehest/followers", "following_url": "https://api.github.com/users/boblehest/following{/other_user}", "gists_url": "https://api.github.com/users/boblehest/gists{/gist_id}", "starred_url": "https://api.github.com/users/boblehest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boblehest/subscriptions", "organizations_url": "https://api.github.com/users/boblehest/orgs", "repos_url": "https://api.github.com/users/boblehest/repos", "events_url": "https://api.github.com/users/boblehest/events{/privacy}", "received_events_url": "https://api.github.com/users/boblehest/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53e694e19be805a3e14d257120b5515a7670e122", "url": "https://api.github.com/repos/rust-lang/rust/commits/53e694e19be805a3e14d257120b5515a7670e122", "html_url": "https://github.com/rust-lang/rust/commit/53e694e19be805a3e14d257120b5515a7670e122"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "edad06cd00984fb5fa6453c167f14bb32ab60564", "filename": "src/doc/nomicon/vec-drain.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c08deef9825c62ad8eb4012826b66daca30a731b/src%2Fdoc%2Fnomicon%2Fvec-drain.md", "raw_url": "https://github.com/rust-lang/rust/raw/c08deef9825c62ad8eb4012826b66daca30a731b/src%2Fdoc%2Fnomicon%2Fvec-drain.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fvec-drain.md?ref=c08deef9825c62ad8eb4012826b66daca30a731b", "patch": "@@ -129,14 +129,16 @@ impl<'a, T> Drop for Drain<'a, T> {\n \n impl<T> Vec<T> {\n     pub fn drain(&mut self) -> Drain<T> {\n-        // this is a mem::forget safety thing. If Drain is forgotten, we just\n-        // leak the whole Vec's contents. Also we need to do this eventually\n-        // anyway, so why not do it now?\n-        self.len = 0;\n-\n         unsafe {\n+            let iter = RawValIter::new(&self);\n+\n+            // this is a mem::forget safety thing. If this is forgotten, we just\n+            // leak the whole Vec's contents. Also we need to do this *eventually*\n+            // anyway, so why not do it now?\n+            self.len = 0;\n+\n             Drain {\n-                iter: RawValIter::new(&self),\n+                iter: iter,\n                 vec: PhantomData,\n             }\n         }"}, {"sha": "ace8f2091fe2bd4f04077f6e9cdba3a16e3599f5", "filename": "src/doc/nomicon/vec-final.md", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c08deef9825c62ad8eb4012826b66daca30a731b/src%2Fdoc%2Fnomicon%2Fvec-final.md", "raw_url": "https://github.com/rust-lang/rust/raw/c08deef9825c62ad8eb4012826b66daca30a731b/src%2Fdoc%2Fnomicon%2Fvec-final.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fvec-final.md?ref=c08deef9825c62ad8eb4012826b66daca30a731b", "patch": "@@ -155,13 +155,16 @@ impl<T> Vec<T> {\n     }\n \n     pub fn drain(&mut self) -> Drain<T> {\n-        // this is a mem::forget safety thing. If this is forgotten, we just\n-        // leak the whole Vec's contents. Also we need to do this *eventually*\n-        // anyway, so why not do it now?\n-        self.len = 0;\n         unsafe {\n+            let iter = RawValIter::new(&self);\n+\n+            // this is a mem::forget safety thing. If this is forgotten, we just\n+            // leak the whole Vec's contents. Also we need to do this *eventually*\n+            // anyway, so why not do it now?\n+            self.len = 0;\n+\n             Drain {\n-                iter: RawValIter::new(&self),\n+                iter: iter,\n                 vec: PhantomData,\n             }\n         }"}]}