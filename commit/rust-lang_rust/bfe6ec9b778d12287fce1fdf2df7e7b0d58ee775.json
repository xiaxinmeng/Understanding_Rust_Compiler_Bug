{"sha": "bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775", "node_id": "C_kwDOAAsO6NoAKGJmZTZlYzliNzc4ZDEyMjg3ZmNlMWZkZjJkZjdlN2IwZDU4ZWU3NzU", "commit": {"author": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2022-10-09T22:12:08Z"}, "committer": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2022-10-09T22:46:31Z"}, "message": "Add `{TypeParam, ConstParam}::remove_default`\n\nAlso includes a drive-by refactor of `utils::generate_impl_text_inner`,\nsince that's what drove this change", "tree": {"sha": "1107c60cc464637259a939f0f37433e99d2ec3fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1107c60cc464637259a939f0f37433e99d2ec3fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775", "html_url": "https://github.com/rust-lang/rust/commit/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775/comments", "author": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75f641799effae2c0138215eca968b33429d23fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/75f641799effae2c0138215eca968b33429d23fe", "html_url": "https://github.com/rust-lang/rust/commit/75f641799effae2c0138215eca968b33429d23fe"}], "stats": {"total": 125, "additions": 87, "deletions": 38}, "files": [{"sha": "307cea3d0a4f875aee3a92d954c133c0688c22c1", "filename": "crates/ide-assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775", "patch": "@@ -52,6 +52,7 @@ mod tests {\n \n     use super::*;\n \n+    // FIXME: break up into separate test fns\n     #[test]\n     fn test_add_impl() {\n         check_assist(\n@@ -134,6 +135,18 @@ mod tests {\n             }\"#,\n         );\n \n+        check_assist(\n+            generate_impl,\n+            r#\"\n+            struct Defaulted<const N: i32 = 0> {}$0\"#,\n+            r#\"\n+            struct Defaulted<const N: i32 = 0> {}\n+\n+            impl<const N: i32> Defaulted<N> {\n+                $0\n+            }\"#,\n+        );\n+\n         check_assist(\n             generate_impl,\n             r#\"pub trait Trait {}"}, {"sha": "38396cd7d7bafd47c36e4d4d473915cdc41f827a", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775", "patch": "@@ -2,8 +2,6 @@\n \n use std::ops;\n \n-use itertools::Itertools;\n-\n pub(crate) use gen_trait_fn_body::gen_trait_fn_body;\n use hir::{db::HirDatabase, HirDisplay, Semantics};\n use ide_db::{famous_defs::FamousDefs, path_transform::PathTransform, RootDatabase, SnippetCap};\n@@ -15,7 +13,7 @@ use syntax::{\n         edit_in_place::{AttrsOwnerEdit, Removable},\n         make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n     },\n-    ted, AstNode, AstToken, Direction, SmolStr, SourceFile,\n+    ted, AstNode, AstToken, Direction, SourceFile,\n     SyntaxKind::*,\n     SyntaxNode, TextRange, TextSize, T,\n };\n@@ -424,34 +422,44 @@ pub(crate) fn generate_trait_impl_text(adt: &ast::Adt, trait_text: &str, code: &\n }\n \n fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str) -> String {\n-    let generic_params = adt.generic_param_list();\n+    // Ensure lifetime params are before type & const params\n+    let generic_params = adt.generic_param_list().map(|generic_params| {\n+        let lifetime_params =\n+            generic_params.lifetime_params().map(ast::GenericParam::LifetimeParam);\n+        let ty_or_const_params = generic_params.type_or_const_params().filter_map(|param| {\n+            // remove defaults since they can't be specified in impls\n+            match param {\n+                ast::TypeOrConstParam::Type(param) => {\n+                    let param = param.clone_for_update();\n+                    param.remove_default();\n+                    Some(ast::GenericParam::TypeParam(param))\n+                }\n+                ast::TypeOrConstParam::Const(param) => {\n+                    let param = param.clone_for_update();\n+                    param.remove_default();\n+                    Some(ast::GenericParam::ConstParam(param))\n+                }\n+            }\n+        });\n+\n+        make::generic_param_list(itertools::chain(lifetime_params, ty_or_const_params))\n+    });\n+\n+    // FIXME: use syntax::make & mutable AST apis instead\n+    // `trait_text` and `code` can't be opaque blobs of text\n     let mut buf = String::with_capacity(code.len());\n+\n+    // Copy any cfg attrs from the original adt\n     buf.push_str(\"\\n\\n\");\n-    adt.attrs()\n-        .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false))\n-        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr).as_str()));\n+    let cfg_attrs = adt\n+        .attrs()\n+        .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false));\n+    cfg_attrs.for_each(|attr| buf.push_str(&format!(\"{attr}\\n\")));\n+\n+    // `impl{generic_params} {trait_text} for {name}{generic_params.to_generic_args()}`\n     buf.push_str(\"impl\");\n     if let Some(generic_params) = &generic_params {\n-        let lifetimes = generic_params.lifetime_params().map(|lt| format!(\"{}\", lt.syntax()));\n-        let toc_params = generic_params.type_or_const_params().map(|toc_param| {\n-            let type_param = match toc_param {\n-                ast::TypeOrConstParam::Type(x) => x,\n-                ast::TypeOrConstParam::Const(x) => return x.syntax().to_string(),\n-            };\n-            let mut buf = String::new();\n-            if let Some(it) = type_param.name() {\n-                format_to!(buf, \"{}\", it.syntax());\n-            }\n-            if let Some(it) = type_param.colon_token() {\n-                format_to!(buf, \"{} \", it);\n-            }\n-            if let Some(it) = type_param.type_bound_list() {\n-                format_to!(buf, \"{}\", it.syntax());\n-            }\n-            buf\n-        });\n-        let generics = lifetimes.chain(toc_params).format(\", \");\n-        format_to!(buf, \"<{}>\", generics);\n+        format_to!(buf, \"{generic_params}\");\n     }\n     buf.push(' ');\n     if let Some(trait_text) = trait_text {\n@@ -460,23 +468,15 @@ fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str\n     }\n     buf.push_str(&adt.name().unwrap().text());\n     if let Some(generic_params) = generic_params {\n-        let lifetime_params = generic_params\n-            .lifetime_params()\n-            .filter_map(|it| it.lifetime())\n-            .map(|it| SmolStr::from(it.text()));\n-        let toc_params = generic_params\n-            .type_or_const_params()\n-            .filter_map(|it| it.name())\n-            .map(|it| SmolStr::from(it.text()));\n-        format_to!(buf, \"<{}>\", lifetime_params.chain(toc_params).format(\", \"))\n+        format_to!(buf, \"{}\", generic_params.to_generic_args());\n     }\n \n     match adt.where_clause() {\n         Some(where_clause) => {\n-            format_to!(buf, \"\\n{}\\n{{\\n{}\\n}}\", where_clause, code);\n+            format_to!(buf, \"\\n{where_clause}\\n{{\\n{code}\\n}}\");\n         }\n         None => {\n-            format_to!(buf, \" {{\\n{}\\n}}\", code);\n+            format_to!(buf, \" {{\\n{code}\\n}}\");\n         }\n     }\n "}, {"sha": "173c064ccc971647b98f0c5cad8a51a7fcb3ec04", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775", "patch": "@@ -265,6 +265,42 @@ impl ast::WhereClause {\n     }\n }\n \n+impl ast::TypeParam {\n+    pub fn remove_default(&self) {\n+        if let Some((eq, last)) = self\n+            .syntax()\n+            .children_with_tokens()\n+            .find(|it| it.kind() == T![=])\n+            .zip(self.syntax().last_child_or_token())\n+        {\n+            ted::remove_all(eq..=last);\n+\n+            // remove any trailing ws\n+            if let Some(last) = self.syntax().last_token().filter(|it| it.kind() == WHITESPACE) {\n+                last.detach();\n+            }\n+        }\n+    }\n+}\n+\n+impl ast::ConstParam {\n+    pub fn remove_default(&self) {\n+        if let Some((eq, last)) = self\n+            .syntax()\n+            .children_with_tokens()\n+            .find(|it| it.kind() == T![=])\n+            .zip(self.syntax().last_child_or_token())\n+        {\n+            ted::remove_all(eq..=last);\n+\n+            // remove any trailing ws\n+            if let Some(last) = self.syntax().last_token().filter(|it| it.kind() == WHITESPACE) {\n+                last.detach();\n+            }\n+        }\n+    }\n+}\n+\n pub trait Removable: AstNode {\n     fn remove(&self);\n }"}]}