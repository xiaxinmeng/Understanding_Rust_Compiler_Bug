{"sha": "939befd65e17432b3bdee6b48d7858b608e962c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOWJlZmQ2NWUxNzQzMmIzYmRlZTZiNDhkNzg1OGI2MDhlOTYyYzU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-14T21:47:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T21:47:04Z"}, "message": "Rollup merge of #75531 - ssomers:btree_tests_migration, r=Mark-Simulacrum\n\nMigrate unit tests of btree collections to their native breeding ground\n\nThere's one BTreeSet test case that I couldn't easily convince to come along, maybe because it truly is an integration test. But leaving it in place would mean git wouldn't see the move so I also moved it to a new file.\n\nr? @Mark-Simulacrum", "tree": {"sha": "069f45ea63dbee1f560f9e418ede75b2554d9ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/069f45ea63dbee1f560f9e418ede75b2554d9ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939befd65e17432b3bdee6b48d7858b608e962c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNwZZCRBK7hj4Ov3rIwAAdHIIAFihxLKuOlugyU8UdB0zKHDr\nsgfrVwaydS0Me4fHY0pb2XLNwZ1YA6x6QXizW8f02UIRoQF8zy/0Vqhs5EFXC5Ti\neANC16namt7jsnrZyX+/Mh+qqLoo7mVcYpOfp/LN6yU0E0HYqshcHwjHngaHSBvc\nsRSAJFavVz+FN0GlmjHkd9uLbxHtRddT19p0EAddiZlNVmMclo01AqX3hXOOVfpX\nsNA7C+d9d91PttMGTHal+/WKDOy56HRsMuzKUMwSVwq5ufvL+xvWhDcwtNZnUyoh\np6OkZ6kt+Nob9BFQFCGi6uQlqgHq7bDZ89Lzp2j3FuTleIiTtAd7ALBgMTSd48U=\n=nLmF\n-----END PGP SIGNATURE-----\n", "payload": "tree 069f45ea63dbee1f560f9e418ede75b2554d9ee2\nparent 6d09e29f5e977d7d6da612d94e9a78afd83fa104\nparent ff45df2acf8cb31e50930840d48d5285b67b23ec\nauthor Tyler Mandry <tmandry@gmail.com> 1597441624 -0700\ncommitter GitHub <noreply@github.com> 1597441624 -0700\n\nRollup merge of #75531 - ssomers:btree_tests_migration, r=Mark-Simulacrum\n\nMigrate unit tests of btree collections to their native breeding ground\n\nThere's one BTreeSet test case that I couldn't easily convince to come along, maybe because it truly is an integration test. But leaving it in place would mean git wouldn't see the move so I also moved it to a new file.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939befd65e17432b3bdee6b48d7858b608e962c5", "html_url": "https://github.com/rust-lang/rust/commit/939befd65e17432b3bdee6b48d7858b608e962c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939befd65e17432b3bdee6b48d7858b608e962c5/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d09e29f5e977d7d6da612d94e9a78afd83fa104", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d09e29f5e977d7d6da612d94e9a78afd83fa104", "html_url": "https://github.com/rust-lang/rust/commit/6d09e29f5e977d7d6da612d94e9a78afd83fa104"}, {"sha": "ff45df2acf8cb31e50930840d48d5285b67b23ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff45df2acf8cb31e50930840d48d5285b67b23ec", "html_url": "https://github.com/rust-lang/rust/commit/ff45df2acf8cb31e50930840d48d5285b67b23ec"}], "stats": {"total": 124, "additions": 68, "deletions": 56}, "files": [{"sha": "b22eb1ff6354b6f9786240b927b058e56d8f4106", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=939befd65e17432b3bdee6b48d7858b608e962c5", "patch": "@@ -3024,3 +3024,6 @@ impl<K: Ord, V, I: Iterator<Item = (K, V)>> Iterator for MergeIter<K, V, I> {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "910e7043092a550c09f2ef40436285eda2d263df", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "renamed", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=939befd65e17432b3bdee6b48d7858b608e962c5", "patch": "@@ -1,16 +1,20 @@\n-use std::collections::btree_map::Entry::{Occupied, Vacant};\n-use std::collections::BTreeMap;\n+use crate::boxed::Box;\n+use crate::collections::btree_map::Entry::{Occupied, Vacant};\n+use crate::collections::BTreeMap;\n+use crate::fmt::Debug;\n+use crate::rc::Rc;\n+use crate::string::String;\n+use crate::string::ToString;\n+use crate::vec::Vec;\n use std::convert::TryFrom;\n-use std::fmt::Debug;\n use std::iter::FromIterator;\n use std::mem;\n use std::ops::Bound::{self, Excluded, Included, Unbounded};\n use std::ops::RangeBounds;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n-use std::rc::Rc;\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n-use super::DeterministicRng;\n+use super::super::DeterministicRng;\n \n // Value of node::CAPACITY, thus capacity of a tree with a single level,\n // i.e. a tree who's root is a leaf node at height 0.", "previous_filename": "library/alloc/tests/btree/map.rs"}, {"sha": "6c8a588eb58f33db5d98c32d2f53f2cb7695d80a", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=939befd65e17432b3bdee6b48d7858b608e962c5", "patch": "@@ -25,3 +25,30 @@ pub unsafe fn unwrap_unchecked<T>(val: Option<T>) -> T {\n         }\n     })\n }\n+\n+#[cfg(test)]\n+/// XorShiftRng\n+struct DeterministicRng {\n+    x: u32,\n+    y: u32,\n+    z: u32,\n+    w: u32,\n+}\n+\n+#[cfg(test)]\n+impl DeterministicRng {\n+    fn new() -> Self {\n+        DeterministicRng { x: 0x193a6754, y: 0xa8a7d469, z: 0x97830e05, w: 0x113ba7bb }\n+    }\n+\n+    fn next(&mut self) -> u32 {\n+        let x = self.x;\n+        let t = x ^ (x << 11);\n+        self.x = self.y;\n+        self.y = self.z;\n+        self.z = self.w;\n+        let w_ = self.w;\n+        self.w = w_ ^ (w_ >> 19) ^ (t ^ (t >> 8));\n+        self.w\n+    }\n+}"}, {"sha": "a559e87e4e29855956eb15258660871a45afb54b", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=939befd65e17432b3bdee6b48d7858b608e962c5", "patch": "@@ -1572,3 +1572,6 @@ impl<'a, T: Ord> Iterator for Union<'a, T> {\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T: Ord> FusedIterator for Union<'_, T> {}\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "f4e957e22fe15ae07d0141ae2cc89f3e9bda908a", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "renamed", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=939befd65e17432b3bdee6b48d7858b608e962c5", "patch": "@@ -1,9 +1,10 @@\n-use std::collections::BTreeSet;\n+use crate::collections::BTreeSet;\n+use crate::vec::Vec;\n use std::iter::FromIterator;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::sync::atomic::{AtomicU32, Ordering};\n \n-use super::DeterministicRng;\n+use super::super::DeterministicRng;\n \n #[test]\n fn test_clone_eq() {\n@@ -15,24 +16,6 @@ fn test_clone_eq() {\n     assert_eq!(m.clone(), m);\n }\n \n-#[test]\n-fn test_hash() {\n-    use crate::hash;\n-\n-    let mut x = BTreeSet::new();\n-    let mut y = BTreeSet::new();\n-\n-    x.insert(1);\n-    x.insert(2);\n-    x.insert(3);\n-\n-    y.insert(3);\n-    y.insert(2);\n-    y.insert(1);\n-\n-    assert_eq!(hash(&x), hash(&y));\n-}\n-\n #[test]\n fn test_iter_min_max() {\n     let mut a = BTreeSet::new();", "previous_filename": "library/alloc/tests/btree/set.rs"}, {"sha": "2d25941a52412187c8a43f1bb03c25fb865eb3ab", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=939befd65e17432b3bdee6b48d7858b608e962c5", "patch": "@@ -80,6 +80,7 @@\n #![feature(arbitrary_self_types)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(btree_drain_filter)]\n #![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n@@ -102,6 +103,8 @@\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]\n #![feature(libc)]\n+#![feature(map_first_last)]\n+#![feature(map_into_keys_values)]\n #![feature(negative_impls)]\n #![feature(new_uninit)]\n #![feature(nll)]"}, {"sha": "1d08ae13e054011cd3e9f9285539fb15dfc34675", "filename": "library/alloc/tests/btree/mod.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Falloc%2Ftests%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Falloc%2Ftests%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fbtree%2Fmod.rs?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -1,27 +0,0 @@\n-mod map;\n-mod set;\n-\n-/// XorShiftRng\n-struct DeterministicRng {\n-    x: u32,\n-    y: u32,\n-    z: u32,\n-    w: u32,\n-}\n-\n-impl DeterministicRng {\n-    fn new() -> Self {\n-        DeterministicRng { x: 0x193a6754, y: 0xa8a7d469, z: 0x97830e05, w: 0x113ba7bb }\n-    }\n-\n-    fn next(&mut self) -> u32 {\n-        let x = self.x;\n-        let t = x ^ (x << 11);\n-        self.x = self.y;\n-        self.y = self.z;\n-        self.z = self.w;\n-        let w_ = self.w;\n-        self.w = w_ ^ (w_ >> 19) ^ (t ^ (t >> 8));\n-        self.w\n-    }\n-}"}, {"sha": "e06a95ded94c75dc09577214ea54bc8b71ae921f", "filename": "library/alloc/tests/btree_set_hash.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Ftests%2Fbtree_set_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Ftests%2Fbtree_set_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fbtree_set_hash.rs?ref=939befd65e17432b3bdee6b48d7858b608e962c5", "patch": "@@ -0,0 +1,19 @@\n+use std::collections::BTreeSet;\n+\n+#[test]\n+fn test_hash() {\n+    use crate::hash;\n+\n+    let mut x = BTreeSet::new();\n+    let mut y = BTreeSet::new();\n+\n+    x.insert(1);\n+    x.insert(2);\n+    x.insert(3);\n+\n+    y.insert(3);\n+    y.insert(2);\n+    y.insert(1);\n+\n+    assert_eq!(hash(&x), hash(&y));\n+}"}, {"sha": "f2ba1ab64810b11a73a86d910516e36a3ea4f377", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939befd65e17432b3bdee6b48d7858b608e962c5/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=939befd65e17432b3bdee6b48d7858b608e962c5", "patch": "@@ -1,10 +1,7 @@\n #![feature(allocator_api)]\n #![feature(box_syntax)]\n-#![feature(btree_drain_filter)]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n-#![feature(map_first_last)]\n-#![feature(map_into_keys_values)]\n #![feature(new_uninit)]\n #![feature(pattern)]\n #![feature(str_split_once)]\n@@ -25,7 +22,7 @@ mod arc;\n mod binary_heap;\n mod borrow;\n mod boxed;\n-mod btree;\n+mod btree_set_hash;\n mod cow_str;\n mod fmt;\n mod heap;"}]}