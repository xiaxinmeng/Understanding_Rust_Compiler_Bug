{"sha": "b30a58abe24643bdad8473850945f46927fb186b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMGE1OGFiZTI0NjQzYmRhZDg0NzM4NTA5NDVmNDY5MjdmYjE4NmI=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-23T23:58:47Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-24T00:09:17Z"}, "message": "Convert bench and run-pass tests to new task_builder interface", "tree": {"sha": "54eca28627a26c48132a6e64ddc57def122774bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54eca28627a26c48132a6e64ddc57def122774bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b30a58abe24643bdad8473850945f46927fb186b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b30a58abe24643bdad8473850945f46927fb186b", "html_url": "https://github.com/rust-lang/rust/commit/b30a58abe24643bdad8473850945f46927fb186b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b30a58abe24643bdad8473850945f46927fb186b/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8", "html_url": "https://github.com/rust-lang/rust/commit/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8"}], "stats": {"total": 114, "additions": 49, "deletions": 65}, "files": [{"sha": "e6fe83e4499fd3c7e394dfae69ecee615f22b392", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -57,10 +57,10 @@ fn run(args: &[~str]) {\n     let start = std::time::precise_time_s();\n     let mut worker_results = ~[];\n     for uint::range(0u, workers) |i| {\n-        let builder = task::builder();\n-        vec::push(worker_results, task::future_result(builder));\n         let to_child = to_child.clone();\n-        do task::run(builder) {\n+        do task::task().future_result(|-r| {\n+            vec::push(worker_results, r);\n+        }).spawn {\n             for uint::range(0u, size / workers) |_i| {\n                 //#error(\"worker %?: sending %? bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));"}, {"sha": "83fbba23c442b3cec76b224c8c4c8d614747e3fe", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -52,11 +52,11 @@ fn run(args: &[~str]) {\n     let start = std::time::precise_time_s();\n     let mut worker_results = ~[];\n     for uint::range(0u, workers) |i| {\n-        let builder = task::builder();\n-        vec::push(worker_results, task::future_result(builder));\n         let (to_child, from_parent_) = pipes::stream();\n         from_parent.add(from_parent_);\n-        do task::run(builder) {\n+        do task::task().future_result(|-r| {\n+            vec::push(worker_results, r);\n+        }).spawn {\n             for uint::range(0u, size / workers) |_i| {\n                 //#error(\"worker %?: sending %? bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));"}, {"sha": "a1407374fa08df423aca04bd444b4be169d69b4d", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -39,9 +39,9 @@ fn run(args: ~[~str]) {\n     let to_child = to_child;\n     let mut worker_results = ~[];\n     for uint::range(0u, workers) |_i| {\n-        let builder = task::builder();\n-        vec::push(worker_results, task::future_result(builder));\n-        do task::run(builder) {\n+        do task::task().future_result(|-r| {\n+            vec::push(worker_results, r);\n+        }).spawn {\n             for uint::range(0u, size / workers) |_i| {\n                 comm::send(to_child, bytes(100u));\n             }"}, {"sha": "f1e83b58ea3ce6da40ca515453204f028f7f8836", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -71,9 +71,11 @@ fn stress_task(&&id: int) {\n fn stress(num_tasks: int) {\n     let mut results = ~[];\n     for range(0, num_tasks) |i| {\n-        let builder = task::builder();\n-        results += ~[task::future_result(builder)];\n-        task::run(builder, || stress_task(i) );\n+        do task::task().future_result(|-r| {\n+            results += ~[r];\n+        }).spawn {\n+            stress_task(i);\n+        }\n     }\n     for results.each |r| { future::get(r); }\n }"}, {"sha": "6dcc1fd876df1db815c545f89d50605965c312a7", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -62,9 +62,11 @@ mod map_reduce {\n        ~[future::future<task::task_result>] {\n         let mut results = ~[];\n         for inputs.each |i| {\n-            let builder = task::builder();\n-            results += ~[task::future_result(builder)];\n-            task::run(builder, || map_task(ctrl, i));\n+            do task::task().future_result(|-r| {\n+                results += ~[r]; // Add result for this task to the list\n+            }).spawn {\n+                map_task(ctrl, i); // Task body\n+            }\n         }\n         ret results;\n     }\n@@ -160,9 +162,11 @@ mod map_reduce {\n                     // log(error, \"creating new reducer for \" + k);\n                     let p = port();\n                     let ch = chan(p);\n-                    let builder = task::builder();\n-                    results += ~[task::future_result(builder)];\n-                    task::run(builder, || reduce_task(k, ch) );\n+                    do task::task().future_result(|-r| {\n+                        results += ~[r]; // Add result for this task\n+                    }).spawn {\n+                        reduce_task(k, ch); // Task body\n+                    }\n                     c = recv(p);\n                     reducers.insert(k, c);\n                   }"}, {"sha": "f4736e759496ac71d82f406f88ffb13099f68597", "filename": "src/test/run-pass/osmain.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Fosmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Fosmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fosmain.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -14,29 +14,9 @@ fn run(i: int) {\n         ret;\n     }\n \n-    let builder = task::builder();\n-    let opts = {\n-        sched: some({\n-            mode: task::osmain,\n-            foreign_stack_size: none\n-        })\n-        with task::get_opts(builder)\n-    };\n-    task::set_opts(builder, opts);\n-    task::unsupervise(builder);\n-    do task::run(builder) {\n+    do task::task().sched_mode(task::osmain).unlinked().spawn {\n         task::yield();\n-        let builder = task::builder();\n-        let opts = {\n-            sched: some({\n-                mode: task::single_threaded,\n-                foreign_stack_size: none\n-            })\n-            with task::get_opts(builder)\n-        };\n-        task::set_opts(builder, opts);\n-        task::unsupervise(builder);\n-        do task::run(builder) {\n+        do task::task().sched_mode(task::single_threaded).unlinked().spawn {\n             task::yield();\n             run(i - 1);\n             task::yield();"}, {"sha": "60223dc1622655a8b52b9e9a9514780fb8422e1f", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -7,9 +7,10 @@ fn start(&&task_number: int) { #debug(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;\n-    let builder = task::builder();\n-    let r = task::future_result(builder);\n-    task::run(builder, || start(i) );\n+    let mut result = none;\n+    do task::task().future_result(|-r| { result = some(r); }).spawn {\n+        start(i)\n+    }\n \n     // Sleep long enough for the task to finish.\n     let mut i = 0;\n@@ -19,7 +20,7 @@ fn test00() {\n     }\n \n     // Try joining tasks that have already finished.\n-    future::get(r);\n+    future::get(option::unwrap(result));\n \n     #debug(\"Joined task.\");\n }"}, {"sha": "c03db4420226162e42539da978b7f163a5c2816e", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -32,9 +32,9 @@ fn test00() {\n     // Create and spawn tasks...\n     let mut results = ~[];\n     while i < number_of_tasks {\n-        let builder = task::builder();\n-        results += ~[task::future_result(builder)];\n-        do task::run(builder) |copy i| {\n+        do task::task().future_result(|-r| {\n+            results += ~[r];\n+        }).spawn |copy i| {\n             test00_start(ch, i, number_of_messages)\n         }\n         i = i + 1;"}, {"sha": "964029dee207120d0981857fed93d9f0f85ed930", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -16,9 +16,8 @@ fn test00() {\n     let number_of_messages: int = 10;\n     let ch = comm::chan(p);\n \n-    let builder = task::builder();\n-    let r = task::future_result(builder);\n-    do task::run(builder) {\n+    let mut result = none;\n+    do task::task().future_result(|-r| { result = some(r); }).spawn {\n         test00_start(ch, number_of_messages);\n     }\n \n@@ -29,7 +28,7 @@ fn test00() {\n         i += 1;\n     }\n \n-    future::get(r);\n+    future::get(option::unwrap(result));\n \n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);\n }"}, {"sha": "6f6d00da473efb93eea35091fc6a8e03cecf3d6b", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -41,9 +41,9 @@ fn test00() {\n     let mut results = ~[];\n     while i < number_of_tasks {\n         i = i + 1;\n-        let builder = task::builder();\n-        results += ~[task::future_result(builder)];\n-        do task::run(builder) |copy i| {\n+        do task::task().future_result(|-r| {\n+            results += ~[r];\n+        }).spawn |copy i| {\n             test00_start(ch, i, number_of_messages);\n         }\n     }\n@@ -128,9 +128,9 @@ fn test06() {\n     let mut results = ~[];\n     while i < number_of_tasks {\n         i = i + 1;\n-        let builder = task::builder();\n-        results += ~[task::future_result(builder)];\n-        do task::run(builder) |copy i| {\n+        do task::task().future_result(|-r| {\n+            results += ~[r];\n+        }).spawn |copy i| {\n             test06_start(i);\n         };\n     }"}, {"sha": "3f100da5fbcf79864e5c5e17b7983789ef011fd0", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -4,15 +4,14 @@ import task;\n import task::*;\n \n fn main() {\n-    let builder = task::builder();\n-    let result = task::future_result(builder);\n-    task::run(builder, || child() );\n+    let mut result = none;\n+    task::task().future_result(|-r| { result = some(r); }).spawn(child);\n     #error(\"1\");\n     yield();\n     #error(\"2\");\n     yield();\n     #error(\"3\");\n-    future::get(result);\n+    future::get(option::unwrap(result));\n }\n \n fn child() {"}, {"sha": "d22697b5ff8c2280ae18918f3d819d5b295b8a8d", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30a58abe24643bdad8473850945f46927fb186b/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=b30a58abe24643bdad8473850945f46927fb186b", "patch": "@@ -4,12 +4,11 @@ import task;\n import task::*;\n \n fn main() {\n-    let builder = task::builder();\n-    let result = task::future_result(builder);\n-    task::run(builder, || child() );\n+    let mut result = none;\n+    task::task().future_result(|-r| { result = some(r); }).spawn(child);\n     #error(\"1\");\n     yield();\n-    future::get(result);\n+    future::get(option::unwrap(result));\n }\n \n fn child() { #error(\"2\"); }"}]}