{"sha": "dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYWQ5ZjE4OTNkNmJkNGQwOWZlMWM0OGVhNGI1MDBiZTEwOTYwMzE=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-07T23:01:03Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-16T23:56:37Z"}, "message": "More review comments", "tree": {"sha": "5cd3fc19439e73f2c313f9fb2fd835410cbd0306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cd3fc19439e73f2c313f9fb2fd835410cbd0306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "html_url": "https://github.com/rust-lang/rust/commit/dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dea68de1d75c388beea3378a4d15371b713f157", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dea68de1d75c388beea3378a4d15371b713f157", "html_url": "https://github.com/rust-lang/rust/commit/3dea68de1d75c388beea3378a4d15371b713f157"}], "stats": {"total": 49, "additions": 20, "deletions": 29}, "files": [{"sha": "07c75d50d91da2bed9ccd65dac7e0424f3844b21", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "patch": "@@ -6,7 +6,6 @@ pub mod verify;\n \n use rustc_middle::traits::query::OutlivesBound;\n use rustc_middle::ty;\n-use rustc_middle::ty::fold::TypeFoldable;\n \n pub fn explicit_outlives_bounds<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n@@ -16,9 +15,8 @@ pub fn explicit_outlives_bounds<'tcx>(\n         .caller_bounds()\n         .into_iter()\n         .map(ty::Predicate::kind)\n-        .map(ty::Binder::skip_binder)\n-        .filter(|atom| !atom.has_escaping_bound_vars())\n-        .filter_map(move |atom| match atom {\n+        .filter_map(ty::Binder::no_bound_vars)\n+        .filter_map(move |kind| match kind {\n             ty::PredicateKind::Projection(..)\n             | ty::PredicateKind::Trait(..)\n             | ty::PredicateKind::Subtype(..)"}, {"sha": "3c53c42679522970db62a145a09759918b006a05", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "patch": "@@ -133,13 +133,13 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n \n     #[inline(never)]\n-    fn intern_predicate(&self, binder: Binder<PredicateKind<'tcx>>) -> &'tcx PredicateInner<'tcx> {\n+    fn intern_predicate(&self, kind: Binder<PredicateKind<'tcx>>) -> &'tcx PredicateInner<'tcx> {\n         self.predicate\n-            .intern(binder, |binder| {\n-                let flags = super::flags::FlagComputation::for_predicate(binder);\n+            .intern(kind, |kind| {\n+                let flags = super::flags::FlagComputation::for_predicate(kind);\n \n                 let predicate_struct = PredicateInner {\n-                    binder,\n+                    kind,\n                     flags: flags.flags,\n                     outer_exclusive_binder: flags.outer_exclusive_binder,\n                 };\n@@ -1936,21 +1936,21 @@ impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {\n // N.B., an `Interned<PredicateInner>` compares and hashes as a `PredicateKind`.\n impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {\n     fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {\n-        self.0.binder == other.0.binder\n+        self.0.kind == other.0.kind\n     }\n }\n \n impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}\n \n impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n-        self.0.binder.hash(s)\n+        self.0.kind.hash(s)\n     }\n }\n \n impl<'tcx> Borrow<Binder<PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {\n     fn borrow<'a>(&'a self) -> &'a Binder<PredicateKind<'tcx>> {\n-        &self.0.binder\n+        &self.0.kind\n     }\n }\n "}, {"sha": "76d3bc7a3d51a231659e71dde26e64d3875b21b7", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "patch": "@@ -1030,7 +1030,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n \n #[derive(Debug)]\n crate struct PredicateInner<'tcx> {\n-    binder: Binder<PredicateKind<'tcx>>,\n+    kind: Binder<PredicateKind<'tcx>>,\n     flags: TypeFlags,\n     /// See the comment for the corresponding field of [TyS].\n     outer_exclusive_binder: ty::DebruijnIndex,\n@@ -1060,29 +1060,29 @@ impl Hash for Predicate<'_> {\n impl<'tcx> Eq for Predicate<'tcx> {}\n \n impl<'tcx> Predicate<'tcx> {\n-    /// Converts this to a `Binder<PredicateKind<'tcx>>`. If the value was an\n-    /// `Atom`, then it is not allowed to contain escaping bound vars.\n+    /// Gets the inner `Binder<PredicateKind<'tcx>>`.\n     pub fn kind(self) -> Binder<PredicateKind<'tcx>> {\n-        self.inner.binder\n+        self.inner.kind\n     }\n \n-    pub fn kind_ref(self) -> &'tcx Binder<PredicateKind<'tcx>> {\n-        &self.inner.binder\n+    /// Like `kind` but returns a reference. Only needed because of encoding.\n+    pub(super) fn kind_ref(self) -> &'tcx Binder<PredicateKind<'tcx>> {\n+        &self.inner.kind\n     }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let PredicateInner {\n-            ref binder,\n+            ref kind,\n \n             // The other fields just provide fast access to information that is\n             // also contained in `kind`, so no need to hash them.\n             flags: _,\n             outer_exclusive_binder: _,\n         } = self.inner;\n \n-        binder.hash_stable(hcx, hasher);\n+        kind.hash_stable(hcx, hasher);\n     }\n }\n \n@@ -1221,7 +1221,7 @@ impl<'tcx> Predicate<'tcx> {\n         let substs = trait_ref.skip_binder().substs;\n         let pred = self.kind().skip_binder();\n         let new = pred.subst(tcx, substs);\n-        if new != pred { ty::Binder::bind(new).to_predicate(tcx) } else { self }\n+        tcx.reuse_or_mk_predicate(self, ty::Binder::bind(new))\n     }\n }\n \n@@ -1352,7 +1352,6 @@ impl ToPredicate<'tcx> for Binder<PredicateKind<'tcx>> {\n impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        debug_assert!(!self.has_escaping_bound_vars(), \"escaping bound vars for {:?}\", self);\n         tcx.mk_predicate(Binder::dummy(self))\n     }\n }"}, {"sha": "8911de41c6d8ebec3ae67669ee5b49f3aac3f1e9", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "patch": "@@ -623,10 +623,6 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(\"impl\");\n                     for (predicate, _) in bounds {\n                         let predicate = predicate.subst(self.tcx(), substs);\n-                        // Note: We can't use `to_opt_poly_trait_ref` here as `predicate`\n-                        // may contain unbound variables. We therefore do this manually.\n-                        //\n-                        // FIXME(lcnr): Find out why exactly this is the case :)\n                         let bound_predicate = predicate.kind();\n                         if let ty::PredicateKind::Trait(pred, _) = bound_predicate.skip_binder() {\n                             let trait_ref = bound_predicate.rebind(pred.trait_ref);"}, {"sha": "44c173e356dfb8fbca34ef3063461d7a6ca1e7ae", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "patch": "@@ -1017,12 +1017,12 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        let new = self.inner.binder.fold_with(folder);\n+        let new = self.inner.kind.fold_with(folder);\n         folder.tcx().reuse_or_mk_predicate(self, new)\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.inner.binder.visit_with(visitor)\n+        self.inner.kind.visit_with(visitor)\n     }\n \n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {"}, {"sha": "3ddb2adbf0aa742eaa22b4679c0b6199d9c7f7e7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcad9f1893d6bd4d09fe1c48ea4b500be1096031/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "patch": "@@ -1684,8 +1684,6 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let mut bounds = bounds\n                     .iter()\n                     .filter_map(|bound| {\n-                        // Note: The substs of opaque types can contain unbound variables,\n-                        // meaning that we have to use `ignore_quantifiers_with_unbound_vars` here.\n                         let bound_predicate = bound.kind();\n                         let trait_ref = match bound_predicate.skip_binder() {\n                             ty::PredicateKind::Trait(tr, _constness) => {"}]}