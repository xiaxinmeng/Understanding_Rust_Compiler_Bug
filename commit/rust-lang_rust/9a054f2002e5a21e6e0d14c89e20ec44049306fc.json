{"sha": "9a054f2002e5a21e6e0d14c89e20ec44049306fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMDU0ZjIwMDJlNWEyMWU2ZTBkMTRjODllMjBlYzQ0MDQ5MzA2ZmM=", "commit": {"author": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-07T14:17:11Z"}, "committer": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-07T14:31:05Z"}, "message": "Fix translation of external spans.", "tree": {"sha": "6c2efec8a5277389e5470c82e938f00ab0b96186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c2efec8a5277389e5470c82e938f00ab0b96186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a054f2002e5a21e6e0d14c89e20ec44049306fc", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXezFNCHL3+3lgSPSfvyOxSJN6OwFAlk4DjEACgkQfvyOxSJN\n6Oygtw//Q1Dd1VsZL0H3fmboLqAFaFgkbioLbLTnSf67/wQTcoNDHW+Qto43wDhs\njN2qs7nrifQL81bMfBxKLvI7LhaD+KVu85vbzkX7BGv20T5mPRd5CMbwagSdaUct\npB7jaodzyqFk40wJQG3lCsS9UiqMb2j2ud8pxJwmZvFNum0efbVibppeWB1eDeFL\nzy+BzChw6/R4ROMC3zIC5Y8YdR3YnVYdCt2Q2xYBU1fLzVWoVKr2rOB7DSFxuse2\nzCdu99KbtRjUkcfvF6s0Yf6pjgCkz67R06YIYUA0IAhjCYsC48g6EAhafWJ8ZRpp\n2R9e34PJrmSD45Ozul+/iuuCS4yPS9j4IohGs6KrszTud1pxaRdkLCCZ0UPeZSNL\nMOGNEdwwKY7CSWPbFl27m3kooSmeQMIdLhJ8exvl9OAiSbbz44REQFH9ZxFRBKMa\nKLPD7sDkQKBdYz7aLaJThreen4BIDn8DyiW/q91SH/E4k0P4sFKIDWE7XPyxeCkR\n+8ANDHB9E+dguKr+/O2ukH5TKZlcYBbqAtnI/x1L9yPgCRrN9hqtFiripdhloSUV\nsX8CFlm4y3O92j2Llar4RbBY3uIFRyu7CLee/spaUAbuleu82FQMKlO20Y5VMmb1\nQhuv4vjaLpO9i83Xk+batwk9XvUCknMt/5ahvyhSk81bXVMRNRI=\n=ireH\n-----END PGP SIGNATURE-----", "payload": "tree 6c2efec8a5277389e5470c82e938f00ab0b96186\nparent f73f675a864e966aedde79f8d2a8c821128e6b10\nauthor Inokentiy Babushkin <twk@twki.de> 1496845031 +0200\ncommitter Inokentiy Babushkin <twk@twki.de> 1496845865 +0200\n\nFix translation of external spans.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a054f2002e5a21e6e0d14c89e20ec44049306fc", "html_url": "https://github.com/rust-lang/rust/commit/9a054f2002e5a21e6e0d14c89e20ec44049306fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a054f2002e5a21e6e0d14c89e20ec44049306fc/comments", "author": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73f675a864e966aedde79f8d2a8c821128e6b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73f675a864e966aedde79f8d2a8c821128e6b10", "html_url": "https://github.com/rust-lang/rust/commit/f73f675a864e966aedde79f8d2a8c821128e6b10"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "6c902b8c5c64b3597a1097835e4e528ea6752199", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=9a054f2002e5a21e6e0d14c89e20ec44049306fc", "patch": "@@ -232,7 +232,7 @@ pub trait CrateStore {\n \n     // item info\n     fn visibility(&self, def: DefId) -> ty::Visibility;\n-    fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>>;\n+    fn visible_parent_map<'a>(&'a self, sess: &Session) -> ::std::cell::Ref<'a, DefIdMap<DefId>>;\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics;\n \n     // trait info\n@@ -285,7 +285,7 @@ pub trait CrateStore {\n     fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash;\n     fn def_path_table(&self, cnum: CrateNum) -> Rc<DefPathTable>;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n-    fn item_children(&self, did: DefId) -> Vec<def::Export>;\n+    fn item_children(&self, did: DefId, sess: &Session) -> Vec<def::Export>;\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro;\n \n     // misc. metadata\n@@ -347,7 +347,9 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"crate_data_as_rc_any\") }\n     // item info\n     fn visibility(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }\n-    fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>> {\n+    fn visible_parent_map<'a>(&'a self, session: &Session)\n+        -> ::std::cell::Ref<'a, DefIdMap<DefId>>\n+    {\n         bug!(\"visible_parent_map\")\n     }\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics\n@@ -421,7 +423,9 @@ impl CrateStore for DummyCrateStore {\n         bug!(\"def_path_table\")\n     }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }\n-    fn item_children(&self, did: DefId) -> Vec<def::Export> { bug!(\"item_children\") }\n+    fn item_children(&self, did: DefId, sess: &Session) -> Vec<def::Export> {\n+        bug!(\"item_children\")\n+    }\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro { bug!(\"load_macro\") }\n \n     // misc. metadata"}, {"sha": "9000aab8a6a3185568d8dd02f02b9dc32b60a93f", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=9a054f2002e5a21e6e0d14c89e20ec44049306fc", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn try_push_visible_item_path<T>(self, buffer: &mut T, external_def_id: DefId) -> bool\n         where T: ItemPathBuffer\n     {\n-        let visible_parent_map = self.sess.cstore.visible_parent_map();\n+        let visible_parent_map = self.sess.cstore.visible_parent_map(self.sess);\n \n         let (mut cur_def, mut cur_path) = (external_def_id, Vec::<ast::Name>::new());\n         loop {"}, {"sha": "f297276ff3ad36840c6397cd93d690bc1e76a4d8", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=9a054f2002e5a21e6e0d14c89e20ec44049306fc", "patch": "@@ -80,7 +80,7 @@ provide! { <'tcx> tcx, def_id, cdata\n     variances_of => { Rc::new(cdata.get_item_variances(def_id.index)) }\n     associated_item_def_ids => {\n         let mut result = vec![];\n-        cdata.each_child_of_item(def_id.index, |child| result.push(child.def.def_id()));\n+        cdata.each_child_of_item(def_id.index, |child| result.push(child.def.def_id()), tcx.sess);\n         Rc::new(result)\n     }\n     associated_item => { cdata.get_associated_item(def_id.index) }\n@@ -348,12 +348,12 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).get_struct_field_names(def.index)\n     }\n \n-    fn item_children(&self, def_id: DefId) -> Vec<def::Export>\n+    fn item_children(&self, def_id: DefId, sess: &Session) -> Vec<def::Export>\n     {\n         self.dep_graph.read(DepNode::MetaData(def_id));\n         let mut result = vec![];\n         self.get_crate_data(def_id.krate)\n-            .each_child_of_item(def_id.index, |child| result.push(child));\n+            .each_child_of_item(def_id.index, |child| result.push(child), sess);\n         result\n     }\n \n@@ -456,7 +456,7 @@ impl CrateStore for cstore::CStore {\n     /// Returns a map from a sufficiently visible external item (i.e. an external item that is\n     /// visible from at least one local module) to a sufficiently visible parent (considering\n     /// modules that re-export the external item to be parents).\n-    fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>> {\n+    fn visible_parent_map<'a>(&'a self, sess: &Session) -> ::std::cell::Ref<'a, DefIdMap<DefId>> {\n         {\n             let visible_parent_map = self.visible_parent_map.borrow();\n             if !visible_parent_map.is_empty() {\n@@ -506,7 +506,7 @@ impl CrateStore for cstore::CStore {\n                 index: CRATE_DEF_INDEX\n             });\n             while let Some(def) = bfs_queue.pop_front() {\n-                for child in self.item_children(def) {\n+                for child in self.item_children(def, sess) {\n                     add_child(bfs_queue, child, def);\n                 }\n             }"}, {"sha": "b08a9c4c123701f62e2df944e6e251143ee6f5a7", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=9a054f2002e5a21e6e0d14c89e20ec44049306fc", "patch": "@@ -653,7 +653,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     /// Iterates over each child of the given item.\n-    pub fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F)\n+    pub fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F, sess: &Session)\n         where F: FnMut(def::Export)\n     {\n         if let Some(ref proc_macros) = self.proc_macros {\n@@ -676,19 +676,19 @@ impl<'a, 'tcx> CrateMetadata {\n         // Find the item.\n         let item = match self.maybe_entry(id) {\n             None => return,\n-            Some(item) => item.decode(self),\n+            Some(item) => item.decode((self, sess)),\n         };\n \n         // Iterate over all children.\n         let macros_only = self.dep_kind.get().macros_only();\n-        for child_index in item.children.decode(self) {\n+        for child_index in item.children.decode((self, sess)) {\n             if macros_only {\n                 continue\n             }\n \n             // Get the item.\n             if let Some(child) = self.maybe_entry(child_index) {\n-                let child = child.decode(self);\n+                let child = child.decode((self, sess));\n                 match child.kind {\n                     EntryKind::MacroDef(..) => {}\n                     _ if macros_only => continue,\n@@ -699,12 +699,12 @@ impl<'a, 'tcx> CrateMetadata {\n                 match child.kind {\n                     // FIXME(eddyb) Don't encode these in children.\n                     EntryKind::ForeignMod => {\n-                        for child_index in child.children.decode(self) {\n+                        for child_index in child.children.decode((self, sess)) {\n                             if let Some(def) = self.get_def(child_index) {\n                                 callback(def::Export {\n                                     def: def,\n                                     ident: Ident::with_empty_ctxt(self.item_name(child_index)),\n-                                    span: self.entry(child_index).span.decode(self),\n+                                    span: self.entry(child_index).span.decode((self, sess)),\n                                 });\n                             }\n                         }\n@@ -717,7 +717,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 }\n \n                 let def_key = self.def_key(child_index);\n-                let span = child.span.decode(self);\n+                let span = child.span.decode((self, sess));\n                 if let (Some(def), Some(name)) =\n                     (self.get_def(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n                     let ident = Ident::with_empty_ctxt(name);\n@@ -746,7 +746,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n \n         if let EntryKind::Mod(data) = item.kind {\n-            for exp in data.decode(self).reexports.decode(self) {\n+            for exp in data.decode((self, sess)).reexports.decode((self, sess)) {\n                 match exp.def {\n                     Def::Macro(..) => {}\n                     _ if macros_only => continue,"}, {"sha": "49fb44f9d3720b3f3d065fe0eb00eebd5d11030b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9a054f2002e5a21e6e0d14c89e20ec44049306fc", "patch": "@@ -478,7 +478,7 @@ impl<'a> Resolver<'a> {\n                                              span);\n                 self.define(parent, ident, TypeNS, (module, vis, DUMMY_SP, expansion));\n \n-                for child in self.session.cstore.item_children(def_id) {\n+                for child in self.session.cstore.item_children(def_id, self.session) {\n                     let ns = if let Def::AssociatedTy(..) = child.def { TypeNS } else { ValueNS };\n                     self.define(module, child.ident, ns,\n                                 (child.def, ty::Visibility::Public, DUMMY_SP, expansion));\n@@ -564,7 +564,7 @@ impl<'a> Resolver<'a> {\n     /// is built, building it if it is not.\n     pub fn populate_module_if_necessary(&mut self, module: Module<'a>) {\n         if module.populated.get() { return }\n-        for child in self.session.cstore.item_children(module.def_id().unwrap()) {\n+        for child in self.session.cstore.item_children(module.def_id().unwrap(), self.session) {\n             self.build_reduced_graph_for_external_crate_def(module, child);\n         }\n         module.populated.set(true)"}, {"sha": "4faf71e0cc94514a279a83267a2320f467cc670a", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9a054f2002e5a21e6e0d14c89e20ec44049306fc", "patch": "@@ -526,7 +526,7 @@ pub fn all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> AllTraits<'a>\n                     if !external_mods.insert(def_id) {\n                         return;\n                     }\n-                    for child in tcx.sess.cstore.item_children(def_id) {\n+                    for child in tcx.sess.cstore.item_children(def_id, tcx.sess) {\n                         handle_external_def(tcx, traits, external_mods, child.def)\n                     }\n                 }"}, {"sha": "89c1bc99c2255326b0c44ec849d69c52211db491", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9a054f2002e5a21e6e0d14c89e20ec44049306fc", "patch": "@@ -443,7 +443,7 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n         // two namespaces, so the target may be listed twice. Make sure we only\n         // visit each node at most once.\n         let mut visited = FxHashSet();\n-        for item in cx.tcx.sess.cstore.item_children(did) {\n+        for item in cx.tcx.sess.cstore.item_children(did, cx.tcx.sess) {\n             let def_id = item.def.def_id();\n             if cx.tcx.sess.cstore.visibility(def_id) == ty::Visibility::Public {\n                 if !visited.insert(def_id) { continue }"}, {"sha": "bba4df6bd5f824b2b98a00b5292c45a4f5add5be", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9a054f2002e5a21e6e0d14c89e20ec44049306fc", "patch": "@@ -241,7 +241,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                 }\n             }).collect()\n         } else {\n-            cx.tcx.sess.cstore.item_children(root).iter().map(|item| item.def)\n+            cx.tcx.sess.cstore.item_children(root, cx.tcx.sess).iter().map(|item| item.def)\n               .filter_map(as_primitive).collect()\n         };\n "}, {"sha": "5518d854348cda0c932101997ca171d6ecf4de88", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a054f2002e5a21e6e0d14c89e20ec44049306fc/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=9a054f2002e5a21e6e0d14c89e20ec44049306fc", "patch": "@@ -70,7 +70,7 @@ impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n             return;\n         }\n \n-        for item in self.cstore.item_children(def_id) {\n+        for item in self.cstore.item_children(def_id, self.cx.tcx.sess) {\n             self.visit_item(item.def);\n         }\n     }"}]}