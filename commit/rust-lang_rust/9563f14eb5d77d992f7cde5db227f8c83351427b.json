{"sha": "9563f14eb5d77d992f7cde5db227f8c83351427b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NjNmMTRlYjVkNzdkOTkyZjdjZGU1ZGIyMjdmOGM4MzM1MTQyN2I=", "commit": {"author": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-18T20:04:53Z"}, "committer": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-18T20:04:53Z"}, "message": "demonstrate `RHS != Self` use cases for `Mul` and `Div`\n\nVector-scalar multipication is a good usecase for this. Thanks #rust!", "tree": {"sha": "b85b41e98a8903c98d52aa4d836973a8098699d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b85b41e98a8903c98d52aa4d836973a8098699d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9563f14eb5d77d992f7cde5db227f8c83351427b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9563f14eb5d77d992f7cde5db227f8c83351427b", "html_url": "https://github.com/rust-lang/rust/commit/9563f14eb5d77d992f7cde5db227f8c83351427b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9563f14eb5d77d992f7cde5db227f8c83351427b/comments", "author": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f880588791930cb130071c2cb972fc3c3354ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f880588791930cb130071c2cb972fc3c3354ed", "html_url": "https://github.com/rust-lang/rust/commit/11f880588791930cb130071c2cb972fc3c3354ed"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "aefafa1b739cb5f65d3f259330b60c1f7f70d006", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9563f14eb5d77d992f7cde5db227f8c83351427b/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9563f14eb5d77d992f7cde5db227f8c83351427b/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=9563f14eb5d77d992f7cde5db227f8c83351427b", "patch": "@@ -295,6 +295,37 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     Foo * Foo;\n /// }\n /// ```\n+///\n+/// Note that `RHS = Self` by default, but this is not mandatory. Here is an\n+/// implementation which enables multiplication of vectors by scalars, as is\n+/// done in linear algebra.\n+///\n+/// ```\n+/// use std::ops::Mul;\n+///\n+/// struct Scalar {value: usize};\n+///\n+/// #[derive(Debug)]\n+/// struct Vector {value: Vec<usize>};\n+///\n+/// impl Mul<Vector> for Scalar {\n+///     type Output = Vector;\n+///\n+///     fn mul(self, rhs: Vector) -> Vector {\n+///         Vector {value: rhs.value.iter().map(|v| self.value * v).collect()}\n+///     }\n+/// }\n+///\n+/// impl PartialEq<Vector> for Vector {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.value == other.value\n+///     }\n+/// }\n+///\n+/// let scalar = Scalar{value: 3};\n+/// let vector = Vector{value: vec![2, 4, 6]};\n+/// assert_eq!(scalar * vector, Vector{value: vec![6, 12, 18]});\n+/// ```\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Mul<RHS=Self> {\n@@ -349,6 +380,37 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     Foo / Foo;\n /// }\n /// ```\n+///\n+/// Note that `RHS = Self` by default, but this is not mandatory. Here is an\n+/// implementation which enables division of vectors by scalars, as is done in\n+/// linear algebra.\n+///\n+/// ```\n+/// use std::ops::Div;\n+///\n+/// struct Scalar {value: f32};\n+///\n+/// #[derive(Debug)]\n+/// struct Vector {value: Vec<f32>};\n+///\n+/// impl Div<Scalar> for Vector {\n+///     type Output = Vector;\n+///\n+///     fn div(self, rhs: Scalar) -> Vector {\n+///         Vector {value: self.value.iter().map(|v| v / rhs.value).collect()}\n+///     }\n+/// }\n+///\n+/// impl PartialEq<Vector> for Vector {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.value == other.value\n+///     }\n+/// }\n+///\n+/// let scalar = Scalar{value: 2f32};\n+/// let vector = Vector{value: vec![2f32, 4f32, 6f32]};\n+/// assert_eq!(vector / scalar, Vector{value: vec![1f32, 2f32, 3f32]});\n+/// ```\n #[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Div<RHS=Self> {"}]}