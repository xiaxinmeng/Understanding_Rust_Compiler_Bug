{"sha": "4789a993eb26963a2411dcc3041733a3b034634a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ODlhOTkzZWIyNjk2M2EyNDExZGNjMzA0MTczM2EzYjAzNDYzNGE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-28T20:42:58Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:10Z"}, "message": "Fix printing of function types", "tree": {"sha": "21c59c8c814d34b68b6879d5a8d096ff58656c92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c59c8c814d34b68b6879d5a8d096ff58656c92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4789a993eb26963a2411dcc3041733a3b034634a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4789a993eb26963a2411dcc3041733a3b034634a", "html_url": "https://github.com/rust-lang/rust/commit/4789a993eb26963a2411dcc3041733a3b034634a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4789a993eb26963a2411dcc3041733a3b034634a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16c69374471a0072541c21a5551b4fd97f7e12ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/16c69374471a0072541c21a5551b4fd97f7e12ba", "html_url": "https://github.com/rust-lang/rust/commit/16c69374471a0072541c21a5551b4fd97f7e12ba"}], "stats": {"total": 145, "additions": 73, "deletions": 72}, "files": [{"sha": "1f0fd11280afa62d5c0c16f693b8f57cf71e5489", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=4789a993eb26963a2411dcc3041733a3b034634a", "patch": "@@ -912,7 +912,8 @@ impl HirDisplay for ApplicationTy {\n                 write!(f, \") -> {}\", sig.ret().display(f.db))?;\n             }\n             TypeCtor::FnDef(def) => {\n-                let sig = f.db.callable_item_signature(def);\n+                let sig = f.db.callable_item_signature(def)\n+                    .subst(&self.parameters);\n                 let name = match def {\n                     CallableDef::FunctionId(ff) => f.db.function_data(ff).name.clone(),\n                     CallableDef::StructId(s) => f.db.struct_data(s).name.clone(),\n@@ -933,8 +934,8 @@ impl HirDisplay for ApplicationTy {\n                     write!(f, \">\")?;\n                 }\n                 write!(f, \"(\")?;\n-                f.write_joined(sig.value.params(), \", \")?;\n-                write!(f, \") -> {}\", sig.value.ret().display(f.db))?;\n+                f.write_joined(sig.params(), \", \")?;\n+                write!(f, \") -> {}\", sig.ret().display(f.db))?;\n             }\n             TypeCtor::Adt(def_id) => {\n                 let name = match def_id {"}, {"sha": "fc5ef36a59f5ae0d1c5019999214a57e312b5f2c", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=4789a993eb26963a2411dcc3041733a3b034634a", "patch": "@@ -75,7 +75,7 @@ fn test2() {\n     [124; 131) 'loop {}': !\n     [129; 131) '{}': ()\n     [160; 173) '{     gen() }': *mut [U]\n-    [166; 169) 'gen': fn gen<U>() -> *mut [T; _]\n+    [166; 169) 'gen': fn gen<U>() -> *mut [U; _]\n     [166; 171) 'gen()': *mut [U; _]\n     [186; 420) '{     ...rr); }': ()\n     [196; 199) 'arr': &[u8; _]\n@@ -85,14 +85,14 @@ fn test2() {\n     [227; 228) 'a': &[u8]\n     [237; 240) 'arr': &[u8; _]\n     [250; 251) 'b': u8\n-    [254; 255) 'f': fn f<u8>(&[T]) -> T\n+    [254; 255) 'f': fn f<u8>(&[u8]) -> u8\n     [254; 260) 'f(arr)': u8\n     [256; 259) 'arr': &[u8; _]\n     [270; 271) 'c': &[u8]\n     [280; 287) '{ arr }': &[u8]\n     [282; 285) 'arr': &[u8; _]\n     [297; 298) 'd': u8\n-    [301; 302) 'g': fn g<u8>(S<&[T]>) -> T\n+    [301; 302) 'g': fn g<u8>(S<&[u8]>) -> u8\n     [301; 316) 'g(S { a: arr })': u8\n     [303; 315) 'S { a: arr }': S<&[u8]>\n     [310; 313) 'arr': &[u8; _]\n@@ -164,15 +164,15 @@ fn test(a: A<[u8; 2]>, b: B<[u8; 2]>, c: C<[u8; 2]>) {\n     [400; 401) 'c': C<[u8; _]>\n     [415; 481) '{     ...(c); }': ()\n     [425; 426) 'd': A<[{unknown}]>\n-    [429; 433) 'foo1': fn foo1<{unknown}>(A<[T]>) -> A<[T]>\n+    [429; 433) 'foo1': fn foo1<{unknown}>(A<[{unknown}]>) -> A<[{unknown}]>\n     [429; 436) 'foo1(a)': A<[{unknown}]>\n     [434; 435) 'a': A<[u8; _]>\n     [446; 447) 'e': B<[u8]>\n-    [450; 454) 'foo2': fn foo2<u8>(B<[T]>) -> B<[T]>\n+    [450; 454) 'foo2': fn foo2<u8>(B<[u8]>) -> B<[u8]>\n     [450; 457) 'foo2(b)': B<[u8]>\n     [455; 456) 'b': B<[u8; _]>\n     [467; 468) 'f': C<[u8]>\n-    [471; 475) 'foo3': fn foo3<u8>(C<[T]>) -> C<[T]>\n+    [471; 475) 'foo3': fn foo3<u8>(C<[u8]>) -> C<[u8]>\n     [471; 478) 'foo3(c)': C<[u8]>\n     [476; 477) 'c': C<[u8; _]>\n     \"###\n@@ -202,7 +202,7 @@ fn test() {\n     [64; 123) 'if tru...     }': &[i32]\n     [67; 71) 'true': bool\n     [72; 97) '{     ...     }': &[i32]\n-    [82; 85) 'foo': fn foo<i32>(&[T]) -> &[T]\n+    [82; 85) 'foo': fn foo<i32>(&[i32]) -> &[i32]\n     [82; 91) 'foo(&[1])': &[i32]\n     [86; 90) '&[1]': &[i32; _]\n     [87; 90) '[1]': [i32; _]\n@@ -242,7 +242,7 @@ fn test() {\n     [83; 86) '[1]': [i32; _]\n     [84; 85) '1': i32\n     [98; 123) '{     ...     }': &[i32]\n-    [108; 111) 'foo': fn foo<i32>(&[T]) -> &[T]\n+    [108; 111) 'foo': fn foo<i32>(&[i32]) -> &[i32]\n     [108; 117) 'foo(&[1])': &[i32]\n     [112; 116) '&[1]': &[i32; _]\n     [113; 116) '[1]': [i32; _]\n@@ -275,7 +275,7 @@ fn test(i: i32) {\n     [70; 147) 'match ...     }': &[i32]\n     [76; 77) 'i': i32\n     [88; 89) '2': i32\n-    [93; 96) 'foo': fn foo<i32>(&[T]) -> &[T]\n+    [93; 96) 'foo': fn foo<i32>(&[i32]) -> &[i32]\n     [93; 102) 'foo(&[2])': &[i32]\n     [97; 101) '&[2]': &[i32; _]\n     [98; 101) '[2]': [i32; _]\n@@ -320,7 +320,7 @@ fn test(i: i32) {\n     [94; 97) '[1]': [i32; _]\n     [95; 96) '1': i32\n     [107; 108) '2': i32\n-    [112; 115) 'foo': fn foo<i32>(&[T]) -> &[T]\n+    [112; 115) 'foo': fn foo<i32>(&[i32]) -> &[i32]\n     [112; 121) 'foo(&[2])': &[i32]\n     [116; 120) '&[2]': &[i32; _]\n     [117; 120) '[2]': [i32; _]\n@@ -438,16 +438,16 @@ fn test() {\n     [43; 45) '*x': T\n     [44; 45) 'x': &T\n     [58; 127) '{     ...oo); }': ()\n-    [64; 73) 'takes_ref': fn takes_ref<Foo>(&T) -> T\n+    [64; 73) 'takes_ref': fn takes_ref<Foo>(&Foo) -> Foo\n     [64; 79) 'takes_ref(&Foo)': Foo\n     [74; 78) '&Foo': &Foo\n     [75; 78) 'Foo': Foo\n-    [85; 94) 'takes_ref': fn takes_ref<&Foo>(&T) -> T\n+    [85; 94) 'takes_ref': fn takes_ref<&Foo>(&&Foo) -> &Foo\n     [85; 101) 'takes_...&&Foo)': &Foo\n     [95; 100) '&&Foo': &&Foo\n     [96; 100) '&Foo': &Foo\n     [97; 100) 'Foo': Foo\n-    [107; 116) 'takes_ref': fn takes_ref<&&Foo>(&T) -> T\n+    [107; 116) 'takes_ref': fn takes_ref<&&Foo>(&&&Foo) -> &&Foo\n     [107; 124) 'takes_...&&Foo)': &&Foo\n     [117; 123) '&&&Foo': &&&Foo\n     [118; 123) '&&Foo': &&Foo"}, {"sha": "6c7f6706a2d7d452607577678f4e0f00eb1eb74c", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=4789a993eb26963a2411dcc3041733a3b034634a", "patch": "@@ -27,7 +27,7 @@ fn test() {\n     [66; 73) 'loop {}': !\n     [71; 73) '{}': ()\n     [133; 160) '{     ...o\"); }': ()\n-    [139; 149) '<[_]>::foo': fn foo<u8>(&[T]) -> T\n+    [139; 149) '<[_]>::foo': fn foo<u8>(&[u8]) -> u8\n     [139; 157) '<[_]>:...\"foo\")': u8\n     [150; 156) 'b\"foo\"': &[u8]\n     \"###\n@@ -175,7 +175,7 @@ fn test() {\n     [98; 101) 'val': T\n     [123; 155) '{     ...32); }': ()\n     [133; 134) 'a': Gen<u32>\n-    [137; 146) 'Gen::make': fn make<u32>(T) -> Gen<T>\n+    [137; 146) 'Gen::make': fn make<u32>(u32) -> Gen<u32>\n     [137; 152) 'Gen::make(0u32)': Gen<u32>\n     [147; 151) '0u32': u32\n     \"###\n@@ -206,7 +206,7 @@ fn test() {\n     [95; 98) '{ }': ()\n     [118; 146) '{     ...e(); }': ()\n     [128; 129) 'a': Gen<u32>\n-    [132; 141) 'Gen::make': fn make<u32>() -> Gen<T>\n+    [132; 141) 'Gen::make': fn make<u32>() -> Gen<u32>\n     [132; 143) 'Gen::make()': Gen<u32>\n     \"###\n     );\n@@ -260,7 +260,7 @@ fn test() {\n     [91; 94) '{ }': ()\n     [114; 149) '{     ...e(); }': ()\n     [124; 125) 'a': Gen<u32>\n-    [128; 144) 'Gen::<...::make': fn make<u32>() -> Gen<T>\n+    [128; 144) 'Gen::<...::make': fn make<u32>() -> Gen<u32>\n     [128; 146) 'Gen::<...make()': Gen<u32>\n     \"###\n     );\n@@ -291,7 +291,7 @@ fn test() {\n     [117; 120) '{ }': ()\n     [140; 180) '{     ...e(); }': ()\n     [150; 151) 'a': Gen<u32, u64>\n-    [154; 175) 'Gen::<...::make': fn make<u64>() -> Gen<u32, T>\n+    [154; 175) 'Gen::<...::make': fn make<u64>() -> Gen<u32, u64>\n     [154; 177) 'Gen::<...make()': Gen<u32, u64>\n     \"###\n     );\n@@ -475,7 +475,7 @@ fn test() {\n         @r###\"\n     [33; 37) 'self': &Self\n     [102; 127) '{     ...d(); }': ()\n-    [108; 109) 'S': S<u32>(T) -> S<T>\n+    [108; 109) 'S': S<u32>(u32) -> S<u32>\n     [108; 115) 'S(1u32)': S<u32>\n     [108; 124) 'S(1u32...thod()': u32\n     [110; 114) '1u32': u32\n@@ -501,13 +501,13 @@ fn test() {\n         @r###\"\n     [87; 193) '{     ...t(); }': ()\n     [97; 99) 's1': S\n-    [105; 121) 'Defaul...efault': fn default<S>() -> Self\n+    [105; 121) 'Defaul...efault': fn default<S>() -> S\n     [105; 123) 'Defaul...ault()': S\n     [133; 135) 's2': S\n-    [138; 148) 'S::default': fn default<S>() -> Self\n+    [138; 148) 'S::default': fn default<S>() -> S\n     [138; 150) 'S::default()': S\n     [160; 162) 's3': S\n-    [165; 188) '<S as ...efault': fn default<S>() -> Self\n+    [165; 188) '<S as ...efault': fn default<S>() -> S\n     [165; 190) '<S as ...ault()': S\n     \"###\n     );\n@@ -533,13 +533,13 @@ fn test() {\n         @r###\"\n     [127; 211) '{     ...e(); }': ()\n     [137; 138) 'a': u32\n-    [141; 148) 'S::make': fn make<S, u32>() -> T\n+    [141; 148) 'S::make': fn make<S, u32>() -> u32\n     [141; 150) 'S::make()': u32\n     [160; 161) 'b': u64\n-    [164; 178) 'G::<u64>::make': fn make<G<u64>, u64>() -> T\n+    [164; 178) 'G::<u64>::make': fn make<G<u64>, u64>() -> u64\n     [164; 180) 'G::<u6...make()': u64\n     [190; 191) 'c': f64\n-    [199; 206) 'G::make': fn make<G<f64>, f64>() -> T\n+    [199; 206) 'G::make': fn make<G<f64>, f64>() -> f64\n     [199; 208) 'G::make()': f64\n     \"###\n     );\n@@ -567,19 +567,19 @@ fn test() {\n         @r###\"\n     [135; 313) '{     ...e(); }': ()\n     [145; 146) 'a': (u32, i64)\n-    [149; 163) 'S::make::<i64>': fn make<S, u32, i64>() -> (T, U)\n+    [149; 163) 'S::make::<i64>': fn make<S, u32, i64>() -> (u32, i64)\n     [149; 165) 'S::mak...i64>()': (u32, i64)\n     [175; 176) 'b': (u32, i64)\n-    [189; 196) 'S::make': fn make<S, u32, i64>() -> (T, U)\n+    [189; 196) 'S::make': fn make<S, u32, i64>() -> (u32, i64)\n     [189; 198) 'S::make()': (u32, i64)\n     [208; 209) 'c': (u32, i64)\n-    [212; 233) 'G::<u3...:<i64>': fn make<G<u32>, u32, i64>() -> (T, U)\n+    [212; 233) 'G::<u3...:<i64>': fn make<G<u32>, u32, i64>() -> (u32, i64)\n     [212; 235) 'G::<u3...i64>()': (u32, i64)\n     [245; 246) 'd': (u32, i64)\n-    [259; 273) 'G::make::<i64>': fn make<G<u32>, u32, i64>() -> (T, U)\n+    [259; 273) 'G::make::<i64>': fn make<G<u32>, u32, i64>() -> (u32, i64)\n     [259; 275) 'G::mak...i64>()': (u32, i64)\n     [285; 286) 'e': (u32, i64)\n-    [301; 308) 'G::make': fn make<G<u32>, u32, i64>() -> (T, U)\n+    [301; 308) 'G::make': fn make<G<u32>, u32, i64>() -> (u32, i64)\n     [301; 310) 'G::make()': (u32, i64)\n     \"###\n     );\n@@ -601,7 +601,7 @@ fn test() {\n         @r###\"\n     [101; 127) '{     ...e(); }': ()\n     [111; 112) 'a': (S<i32>, i64)\n-    [115; 122) 'S::make': fn make<S<i32>, i64>() -> (Self, T)\n+    [115; 122) 'S::make': fn make<S<i32>, i64>() -> (S<i32>, i64)\n     [115; 124) 'S::make()': (S<i32>, i64)\n     \"###\n     );\n@@ -625,10 +625,10 @@ fn test() {\n         @r###\"\n     [131; 203) '{     ...e(); }': ()\n     [141; 142) 'a': (S<u64>, i64)\n-    [158; 165) 'S::make': fn make<S<u64>, i64>() -> (Self, T)\n+    [158; 165) 'S::make': fn make<S<u64>, i64>() -> (S<u64>, i64)\n     [158; 167) 'S::make()': (S<u64>, i64)\n     [177; 178) 'b': (S<u32>, i32)\n-    [191; 198) 'S::make': fn make<S<u32>, i32>() -> (Self, T)\n+    [191; 198) 'S::make': fn make<S<u32>, i32>() -> (S<u32>, i32)\n     [191; 200) 'S::make()': (S<u32>, i32)\n     \"###\n     );\n@@ -728,7 +728,7 @@ fn test() {\n     [157; 158) 'S': S\n     [157; 165) 'S.into()': u64\n     [175; 176) 'z': u64\n-    [179; 196) 'Into::...::into': fn into<S, u64>(Self) -> T\n+    [179; 196) 'Into::...::into': fn into<S, u64>(S) -> u64\n     [179; 199) 'Into::...nto(S)': u64\n     [197; 198) 'S': S\n     \"###"}, {"sha": "e25d6dbc43d46b32f092c401e8f4db7f631a0596", "filename": "crates/ra_hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=4789a993eb26963a2411dcc3041733a3b034634a", "patch": "@@ -96,13 +96,13 @@ fn test() {\n     [38; 42) 'A(n)': A<i32>\n     [40; 41) 'n': &i32\n     [45; 50) '&A(1)': &A<i32>\n-    [46; 47) 'A': A<i32>(T) -> A<T>\n+    [46; 47) 'A': A<i32>(i32) -> A<i32>\n     [46; 50) 'A(1)': A<i32>\n     [48; 49) '1': i32\n     [60; 64) 'A(n)': A<i32>\n     [62; 63) 'n': &mut i32\n     [67; 76) '&mut A(1)': &mut A<i32>\n-    [72; 73) 'A': A<i32>(T) -> A<T>\n+    [72; 73) 'A': A<i32>(i32) -> A<i32>\n     [72; 76) 'A(1)': A<i32>\n     [74; 75) '1': i32\n     \"###"}, {"sha": "14c8ed3a9b7a942ebe00731fb43db7f6d3792e62", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=4789a993eb26963a2411dcc3041733a3b034634a", "patch": "@@ -346,7 +346,7 @@ pub fn main_loop() {\n     @r###\"\n     [144; 146) '{}': ()\n     [169; 198) '{     ...t(); }': ()\n-    [175; 193) 'FxHash...efault': fn default<{unknown}, FxHasher>() -> HashSet<T, H>\n+    [175; 193) 'FxHash...efault': fn default<{unknown}, FxHasher>() -> HashSet<{unknown}, FxHasher>\n     [175; 195) 'FxHash...ault()': HashSet<{unknown}, FxHasher>\n     \"###\n     );"}, {"sha": "b08355227d1c97f604f6e773607e013f8dfede08", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=4789a993eb26963a2411dcc3041733a3b034634a", "patch": "@@ -754,15 +754,15 @@ fn test() {\n     [289; 295) 'self.0': T\n     [315; 353) '{     ...))); }': ()\n     [325; 326) 't': &i32\n-    [329; 335) 'A::foo': fn foo<i32>(&A<T>) -> &T\n+    [329; 335) 'A::foo': fn foo<i32>(&A<i32>) -> &i32\n     [329; 350) 'A::foo...42))))': &i32\n     [336; 349) '&&B(B(A(42)))': &&B<B<A<i32>>>\n     [337; 349) '&B(B(A(42)))': &B<B<A<i32>>>\n-    [338; 339) 'B': B<B<A<i32>>>(T) -> B<T>\n+    [338; 339) 'B': B<B<A<i32>>>(B<A<i32>>) -> B<B<A<i32>>>\n     [338; 349) 'B(B(A(42)))': B<B<A<i32>>>\n-    [340; 341) 'B': B<A<i32>>(T) -> B<T>\n+    [340; 341) 'B': B<A<i32>>(A<i32>) -> B<A<i32>>\n     [340; 348) 'B(A(42))': B<A<i32>>\n-    [342; 343) 'A': A<i32>(T) -> A<T>\n+    [342; 343) 'A': A<i32>(i32) -> A<i32>\n     [342; 347) 'A(42)': A<i32>\n     [344; 346) '42': i32\n     \"###\n@@ -817,16 +817,16 @@ fn test(a: A<i32>) {\n     [326; 327) 'a': A<i32>\n     [337; 383) '{     ...))); }': ()\n     [347; 348) 't': &i32\n-    [351; 352) 'A': A<i32>(*mut T) -> A<T>\n+    [351; 352) 'A': A<i32>(*mut i32) -> A<i32>\n     [351; 365) 'A(0 as *mut _)': A<i32>\n     [351; 380) 'A(0 as...B(a)))': &i32\n     [353; 354) '0': i32\n     [353; 364) '0 as *mut _': *mut i32\n     [370; 379) '&&B(B(a))': &&B<B<A<i32>>>\n     [371; 379) '&B(B(a))': &B<B<A<i32>>>\n-    [372; 373) 'B': B<B<A<i32>>>(T) -> B<T>\n+    [372; 373) 'B': B<B<A<i32>>>(B<A<i32>>) -> B<B<A<i32>>>\n     [372; 379) 'B(B(a))': B<B<A<i32>>>\n-    [374; 375) 'B': B<A<i32>>(T) -> B<T>\n+    [374; 375) 'B': B<A<i32>>(A<i32>) -> B<A<i32>>\n     [374; 378) 'B(a)': B<A<i32>>\n     [376; 377) 'a': A<i32>\n     \"###\n@@ -1205,14 +1205,14 @@ fn test() {\n     [21; 26) '{ t }': T\n     [23; 24) 't': T\n     [38; 98) '{     ...(1); }': ()\n-    [44; 46) 'id': fn id<u32>(T) -> T\n+    [44; 46) 'id': fn id<u32>(u32) -> u32\n     [44; 52) 'id(1u32)': u32\n     [47; 51) '1u32': u32\n-    [58; 68) 'id::<i128>': fn id<i128>(T) -> T\n+    [58; 68) 'id::<i128>': fn id<i128>(i128) -> i128\n     [58; 71) 'id::<i128>(1)': i128\n     [69; 70) '1': i128\n     [81; 82) 'x': u64\n-    [90; 92) 'id': fn id<u64>(T) -> T\n+    [90; 92) 'id': fn id<u64>(u64) -> u64\n     [90; 95) 'id(1)': u64\n     [93; 94) '1': u64\n     \"###\n@@ -1349,16 +1349,16 @@ fn test() -> i128 {\n     [146; 147) 'x': i128\n     [150; 151) '1': i128\n     [162; 163) 'y': i128\n-    [166; 168) 'id': fn id<i128>(T) -> T\n+    [166; 168) 'id': fn id<i128>(i128) -> i128\n     [166; 171) 'id(x)': i128\n     [169; 170) 'x': i128\n     [182; 183) 'a': A<i128>\n     [186; 200) 'A { x: id(y) }': A<i128>\n-    [193; 195) 'id': fn id<i128>(T) -> T\n+    [193; 195) 'id': fn id<i128>(i128) -> i128\n     [193; 198) 'id(y)': i128\n     [196; 197) 'y': i128\n     [211; 212) 'z': i128\n-    [215; 217) 'id': fn id<i128>(T) -> T\n+    [215; 217) 'id': fn id<i128>(i128) -> i128\n     [215; 222) 'id(a.x)': i128\n     [218; 219) 'a': A<i128>\n     [218; 221) 'a.x': i128\n@@ -1502,14 +1502,14 @@ fn test() {\n     [78; 158) '{     ...(1); }': ()\n     [88; 89) 'y': u32\n     [92; 97) '10u32': u32\n-    [103; 105) 'id': fn id<u32>(T) -> T\n+    [103; 105) 'id': fn id<u32>(u32) -> u32\n     [103; 108) 'id(y)': u32\n     [106; 107) 'y': u32\n     [118; 119) 'x': bool\n-    [128; 133) 'clone': fn clone<bool>(&T) -> T\n+    [128; 133) 'clone': fn clone<bool>(&bool) -> bool\n     [128; 136) 'clone(z)': bool\n     [134; 135) 'z': &bool\n-    [142; 152) 'id::<i128>': fn id<i128>(T) -> T\n+    [142; 152) 'id::<i128>': fn id<i128>(i128) -> i128\n     [142; 155) 'id::<i128>(1)': i128\n     [153; 154) '1': i128\n     \"###"}, {"sha": "eae6e96816cd6cde9b0a7df2870f062cfc7069b0", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4789a993eb26963a2411dcc3041733a3b034634a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=4789a993eb26963a2411dcc3041733a3b034634a", "patch": "@@ -261,10 +261,10 @@ fn test() {\n     [92; 94) '{}': ()\n     [105; 144) '{     ...(s); }': ()\n     [115; 116) 's': S<u32>\n-    [119; 120) 'S': S<u32>(T) -> S<T>\n+    [119; 120) 'S': S<u32>(u32) -> S<u32>\n     [119; 129) 'S(unknown)': S<u32>\n     [121; 128) 'unknown': u32\n-    [135; 138) 'foo': fn foo<S<u32>>(T) -> ()\n+    [135; 138) 'foo': fn foo<S<u32>>(S<u32>) -> ()\n     [135; 141) 'foo(s)': ()\n     [139; 140) 's': S<u32>\n     \"###\n@@ -289,11 +289,11 @@ fn test() {\n     [98; 100) '{}': ()\n     [111; 163) '{     ...(s); }': ()\n     [121; 122) 's': S<u32>\n-    [125; 126) 'S': S<u32>(T) -> S<T>\n+    [125; 126) 'S': S<u32>(u32) -> S<u32>\n     [125; 135) 'S(unknown)': S<u32>\n     [127; 134) 'unknown': u32\n     [145; 146) 'x': u32\n-    [154; 157) 'foo': fn foo<u32, S<u32>>(T) -> U\n+    [154; 157) 'foo': fn foo<u32, S<u32>>(S<u32>) -> u32\n     [154; 160) 'foo(s)': u32\n     [158; 159) 's': S<u32>\n     \"###\n@@ -1066,26 +1066,26 @@ fn test<T: Trait<Type = u32>>(x: T, y: impl Trait<Type = i64>) {\n     [296; 299) 'get': fn get<T>(T) -> <T as Trait>::Type\n     [296; 302) 'get(x)': {unknown}\n     [300; 301) 'x': T\n-    [308; 312) 'get2': fn get2<{unknown}, T>(T) -> U\n+    [308; 312) 'get2': fn get2<{unknown}, T>(T) -> {unknown}\n     [308; 315) 'get2(x)': {unknown}\n     [313; 314) 'x': T\n-    [321; 324) 'get': fn get<impl Trait<Type = i64>>(T) -> <T as Trait>::Type\n+    [321; 324) 'get': fn get<impl Trait<Type = i64>>(impl Trait<Type = i64>) -> <impl Trait<Type = i64> as Trait>::Type\n     [321; 327) 'get(y)': {unknown}\n     [325; 326) 'y': impl Trait<Type = i64>\n-    [333; 337) 'get2': fn get2<{unknown}, impl Trait<Type = i64>>(T) -> U\n+    [333; 337) 'get2': fn get2<{unknown}, impl Trait<Type = i64>>(impl Trait<Type = i64>) -> {unknown}\n     [333; 340) 'get2(y)': {unknown}\n     [338; 339) 'y': impl Trait<Type = i64>\n-    [346; 349) 'get': fn get<S<u64>>(T) -> <T as Trait>::Type\n+    [346; 349) 'get': fn get<S<u64>>(S<u64>) -> <S<u64> as Trait>::Type\n     [346; 357) 'get(set(S))': u64\n-    [350; 353) 'set': fn set<S<u64>>(T) -> T\n+    [350; 353) 'set': fn set<S<u64>>(S<u64>) -> S<u64>\n     [350; 356) 'set(S)': S<u64>\n     [354; 355) 'S': S<u64>\n-    [363; 367) 'get2': fn get2<u64, S<u64>>(T) -> U\n+    [363; 367) 'get2': fn get2<u64, S<u64>>(S<u64>) -> u64\n     [363; 375) 'get2(set(S))': u64\n-    [368; 371) 'set': fn set<S<u64>>(T) -> T\n+    [368; 371) 'set': fn set<S<u64>>(S<u64>) -> S<u64>\n     [368; 374) 'set(S)': S<u64>\n     [372; 373) 'S': S<u64>\n-    [381; 385) 'get2': fn get2<str, S<str>>(T) -> U\n+    [381; 385) 'get2': fn get2<str, S<str>>(S<str>) -> str\n     [381; 395) 'get2(S::<str>)': str\n     [386; 394) 'S::<str>': S<str>\n     \"###\n@@ -1258,9 +1258,9 @@ fn test() {\n     [157; 160) '{t}': T\n     [158; 159) 't': T\n     [259; 280) '{     ...S)); }': ()\n-    [265; 269) 'get2': fn get2<u64, S<u64>>(T) -> U\n+    [265; 269) 'get2': fn get2<u64, S<u64>>(S<u64>) -> u64\n     [265; 277) 'get2(set(S))': u64\n-    [270; 273) 'set': fn set<S<u64>>(T) -> T\n+    [270; 273) 'set': fn set<S<u64>>(S<u64>) -> S<u64>\n     [270; 276) 'set(S)': S<u64>\n     [274; 275) 'S': S<u64>\n     \"###\n@@ -1432,15 +1432,15 @@ fn test() {\n     [340; 342) '{}': ()\n     [356; 515) '{     ... S); }': ()\n     [366; 368) 'x1': u64\n-    [371; 375) 'foo1': fn foo1<S, u64, |S| -> u64>(T, F) -> U\n+    [371; 375) 'foo1': fn foo1<S, u64, |S| -> u64>(S, |S| -> u64) -> u64\n     [371; 394) 'foo1(S...hod())': u64\n     [376; 377) 'S': S\n     [379; 393) '|s| s.method()': |S| -> u64\n     [380; 381) 's': S\n     [383; 384) 's': S\n     [383; 393) 's.method()': u64\n     [404; 406) 'x2': u64\n-    [409; 413) 'foo2': fn foo2<S, u64, |S| -> u64>(F, T) -> U\n+    [409; 413) 'foo2': fn foo2<S, u64, |S| -> u64>(|S| -> u64, S) -> u64\n     [409; 432) 'foo2(|...(), S)': u64\n     [414; 428) '|s| s.method()': |S| -> u64\n     [415; 416) 's': S"}]}