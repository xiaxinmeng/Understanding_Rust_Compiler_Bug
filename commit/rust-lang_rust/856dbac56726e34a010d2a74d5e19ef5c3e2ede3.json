{"sha": "856dbac56726e34a010d2a74d5e19ef5c3e2ede3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NmRiYWM1NjcyNmUzNGEwMTBkMmE3NGQ1ZTE5ZWY1YzNlMmVkZTM=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakubw@jakubw.net", "date": "2012-12-15T23:06:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-18T00:50:40Z"}, "message": "Use the same logic for _ and [..tail] when checking reachability", "tree": {"sha": "2fd753300f8205cb46ecff74fe916056b1cee72c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fd753300f8205cb46ecff74fe916056b1cee72c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/856dbac56726e34a010d2a74d5e19ef5c3e2ede3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/856dbac56726e34a010d2a74d5e19ef5c3e2ede3", "html_url": "https://github.com/rust-lang/rust/commit/856dbac56726e34a010d2a74d5e19ef5c3e2ede3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/856dbac56726e34a010d2a74d5e19ef5c3e2ede3/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1968cb315af9d128ee4457738fddd1eba275277f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1968cb315af9d128ee4457738fddd1eba275277f", "html_url": "https://github.com/rust-lang/rust/commit/1968cb315af9d128ee4457738fddd1eba275277f"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "9246bb0c706b60d85e334544b878f802b2cc2862", "filename": "src/librustc/middle/check_alt.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/856dbac56726e34a010d2a74d5e19ef5c3e2ede3/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856dbac56726e34a010d2a74d5e19ef5c3e2ede3/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs?ref=856dbac56726e34a010d2a74d5e19ef5c3e2ede3", "patch": "@@ -173,8 +173,7 @@ enum ctor {\n     variant(def_id),\n     val(const_val),\n     range(const_val, const_val),\n-    vec(uint),\n-    vec_with_tail(uint)\n+    vec(uint)\n }\n \n impl ctor : cmp::Eq {\n@@ -189,11 +188,8 @@ impl ctor : cmp::Eq {\n                 (*cv0_self) == (*cv0_other) && (*cv1_self) == (*cv1_other)\n             }\n             (vec(n_self), vec(n_other)) => n_self == n_other,\n-            (vec_with_tail(n_self), vec_with_tail(n_other)) => {\n-                n_self == n_other\n-            }\n             (single, _) | (variant(_), _) | (val(_), _) |\n-            (range(*), _) | (vec(*), _) | (vec_with_tail(*), _) => {\n+            (range(*), _) | (vec(*), _) => {\n                 false\n             }\n         }\n@@ -328,7 +324,7 @@ fn pat_ctor_id(cx: @AltCheckCtxt, p: @pat) -> Option<ctor> {\n       }\n       pat_vec(elems, tail) => {\n         match tail {\n-          Some(_) => Some(vec_with_tail(elems.len())),\n+          Some(_) => None,\n           None => Some(vec(elems.len()))\n         }\n       }\n@@ -465,7 +461,7 @@ fn ctor_arity(cx: @AltCheckCtxt, ctor: ctor, ty: ty::t) -> uint {\n       ty::ty_struct(cid, _) => ty::lookup_struct_fields(cx.tcx, cid).len(),\n       ty::ty_unboxed_vec(*) | ty::ty_evec(*) => {\n         match ctor {\n-          vec(n) | vec_with_tail(n) => n,\n+          vec(n) => n,\n           _ => 0u\n         }\n       }\n@@ -614,19 +610,12 @@ fn specialize(cx: @AltCheckCtxt, r: ~[@pat], ctor_id: ctor, arity: uint,\n       }\n       pat_vec(elems, tail) => {\n         match ctor_id {\n-          vec_with_tail(_) => {\n-            if elems.len() >= arity {\n-              Some(vec::append(elems.slice(0, arity), vec::tail(r)))\n-            } else {\n-              None\n-            }\n-          }\n           vec(_) => {\n             if elems.len() < arity && tail.is_some() {\n               Some(vec::append(\n                 vec::append(elems, vec::from_elem(\n-                    arity - elems.len(), wild())\n-                ),\n+                    arity - elems.len(), wild()\n+                )),\n                 vec::tail(r)\n               ))\n             } else if elems.len() == arity {"}]}