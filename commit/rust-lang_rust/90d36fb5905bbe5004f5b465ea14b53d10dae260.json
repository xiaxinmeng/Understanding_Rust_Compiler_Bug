{"sha": "90d36fb5905bbe5004f5b465ea14b53d10dae260", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZDM2ZmI1OTA1YmJlNTAwNGY1YjQ2NWVhMTRiNTNkMTBkYWUyNjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-13T15:22:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-13T15:22:05Z"}, "message": "Auto merge of #53621 - jordanrh1:windows-arm, r=alexcrichton\n\nAdd target thumbv7a-pc-windows-msvc\n\nThis is an early draft of support for Windows/ARM. To test it,\n\n1. Install Visual Studio 2017 and Windows SDK version 17134.\n1. Obtain alexcrichton/xz2-rs#35, rust-lang-nursery/compiler-builtins#256, and the fix for [LLVM Bug 38620](https://bugs.llvm.org/show_bug.cgi?id=38620).\n2. Open a command prompt and run\n```\nset CC_thumbv7a-pc-windows-msvc=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.11.25503\\bin\\HostX64\\arm\\CL.exe\nset CFLAGS_thumbv7a-pc-windows-msvc=/D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE=1 /nologo\nc:\\python27\\python.exe x.py build --host x86_64-pc-windows-msvc --build x86_64-pc-windows-msvc --target thumbv7a-pc-windows-msvc\n```\n\nIt will build the stage 2 compiler, but fail building stage 2 test. To build an executable targeting windows/arm,\n1. Copy `build\\x86_64-pc-windows-msvc\\stage0\\bin\\cargo.exe` to `build\\x86_64-pc-windows-msvc\\stage2\\bin`\n2. Open a command prompt and run\n```\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\"\nset PATH=build\\x86_64-pc-windows-msvc\\stage2\\bin;%PATH%\ncargo new hello\ncd hello\ncargo build --target thumbv7a-pc-windows-msvc \u2013release\n```\n\nCopy target\\thumbv7a-pc-windows-msvc\\release\\hello.exe to your platform and run.\n\nThere are a number of open issues that I'm hoping to get help with:\n\n - Error when compiling the `test` crate: `error: cannot link together two panic runtimes: panic_abort and panic_unwind`\n - Warnings when building the compiler_builtins crate: `warning: cl : Command line warning D9002 : ignoring unknown option '-fvisibility=hidden'`. It looks like the build system is passing GCC-style flags to MSVC.\n - How to specify the LIBPATH entries for ARM. Right now they are hardcoded as absolute paths in the target spec.\n\nThis pull request depends on\n - alexcrichton/xz2-rs#35 - update vcxproj to Visual Studio 2017\n - rust-lang-nursery/compiler-builtins#256 - fix compile errors when building for windows/arm\n - [Bug 38620 - ARM: Incorrect COFF relocation type for thumb bl instruction](https://bugs.llvm.org/show_bug.cgi?id=38620)\n\nThis PR updates #52659", "tree": {"sha": "afcc620e767d325667feca17c52dd4bbb043ca0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afcc620e767d325667feca17c52dd4bbb043ca0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90d36fb5905bbe5004f5b465ea14b53d10dae260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90d36fb5905bbe5004f5b465ea14b53d10dae260", "html_url": "https://github.com/rust-lang/rust/commit/90d36fb5905bbe5004f5b465ea14b53d10dae260", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90d36fb5905bbe5004f5b465ea14b53d10dae260/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "994cdd918589535d705177545bf503cd0c3c5148", "url": "https://api.github.com/repos/rust-lang/rust/commits/994cdd918589535d705177545bf503cd0c3c5148", "html_url": "https://github.com/rust-lang/rust/commit/994cdd918589535d705177545bf503cd0c3c5148"}, {"sha": "fd41c390534e15c223200031c93a10173046ebfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd41c390534e15c223200031c93a10173046ebfa", "html_url": "https://github.com/rust-lang/rust/commit/fd41c390534e15c223200031c93a10173046ebfa"}], "stats": {"total": 117, "additions": 115, "deletions": 2}, "files": [{"sha": "832a0aff71be1b6e4dc434de60245ed7673b653a", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d36fb5905bbe5004f5b465ea14b53d10dae260/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d36fb5905bbe5004f5b465ea14b53d10dae260/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=90d36fb5905bbe5004f5b465ea14b53d10dae260", "patch": "@@ -119,7 +119,7 @@ mod imp {\n     }\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\"))]\n #[macro_use]\n mod imp {\n     pub type ptr_t = u32;"}, {"sha": "3c68b5a7ab1163d6c640aeb351ddc95b33ab10e4", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90d36fb5905bbe5004f5b465ea14b53d10dae260/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d36fb5905bbe5004f5b465ea14b53d10dae260/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=90d36fb5905bbe5004f5b465ea14b53d10dae260", "patch": "@@ -386,6 +386,7 @@ supported_targets! {\n     (\"x86_64-pc-windows-msvc\", x86_64_pc_windows_msvc),\n     (\"i686-pc-windows-msvc\", i686_pc_windows_msvc),\n     (\"i586-pc-windows-msvc\", i586_pc_windows_msvc),\n+    (\"thumbv7a-pc-windows-msvc\", thumbv7a_pc_windows_msvc),\n \n     (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),"}, {"sha": "dab10ca241ebcfc0c41c28919176838de418e599", "filename": "src/librustc_target/spec/thumbv7a_pc_windows_msvc.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/90d36fb5905bbe5004f5b465ea14b53d10dae260/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d36fb5905bbe5004f5b465ea14b53d10dae260/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=90d36fb5905bbe5004f5b465ea14b53d10dae260", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult, PanicStrategy};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::windows_msvc_base::opts();\n+\n+    // Prevent error LNK2013: BRANCH24(T) fixup overflow\n+    // The LBR optimization tries to eliminate branch islands,\n+    // but if the displacement is larger than can fit\n+    // in the instruction, this error will occur. The linker\n+    // should be smart enough to insert branch islands only\n+    // where necessary, but this is not the observed behavior.\n+    // Disabling the LBR optimization works around the issue.\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\n+        \"/OPT:NOLBR\".to_string());\n+\n+    // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n+    // implemented for windows/arm in LLVM\n+    base.panic_strategy = PanicStrategy::Abort;\n+\n+    Ok(Target {\n+        llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:w-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"windows\".to_string(),\n+        target_env: \"msvc\".to_string(),\n+        target_vendor: \"pc\".to_string(),\n+        linker_flavor: LinkerFlavor::Msvc,\n+\n+        options: TargetOptions {\n+            features: \"+vfp3,+neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "cfa9e7b7c25b31ad8cd4c6b1a5cfdd64a95f65f6", "filename": "src/libstd/sys/windows/backtrace/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/90d36fb5905bbe5004f5b465ea14b53d10dae260/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d36fb5905bbe5004f5b465ea14b53d10dae260/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs?ref=90d36fb5905bbe5004f5b465ea14b53d10dae260", "patch": "@@ -248,6 +248,17 @@ impl StackFrame for c::STACKFRAME_EX {\n         c::IMAGE_FILE_MACHINE_AMD64\n     }\n \n+    #[cfg(target_arch = \"arm\")]\n+    fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n+        self.AddrPC.Offset = ctx.Pc as u64;\n+        self.AddrPC.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrStack.Offset = ctx.Sp as u64;\n+        self.AddrStack.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrFrame.Offset = ctx.R11 as u64;\n+        self.AddrFrame.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        c::IMAGE_FILE_MACHINE_ARMNT\n+    }\n+\n     #[cfg(target_arch = \"aarch64\")]\n     fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n         self.AddrPC.Offset = ctx.Pc as u64;\n@@ -291,6 +302,17 @@ impl StackFrame for c::STACKFRAME64 {\n         c::IMAGE_FILE_MACHINE_AMD64\n     }\n \n+    #[cfg(target_arch = \"arm\")]\n+    fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n+        self.AddrPC.Offset = ctx.Pc as u64;\n+        self.AddrPC.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrStack.Offset = ctx.Sp as u64;\n+        self.AddrStack.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrFrame.Offset = ctx.R11 as u64;\n+        self.AddrFrame.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        c::IMAGE_FILE_MACHINE_ARMNT\n+    }\n+\n     #[cfg(target_arch = \"aarch64\")]\n     fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n         self.AddrPC.Offset = ctx.Pc as u64;"}, {"sha": "f4bd9c22bb93fc1d1637c2d8e8a0d4088cd69c4d", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/90d36fb5905bbe5004f5b465ea14b53d10dae260/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d36fb5905bbe5004f5b465ea14b53d10dae260/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=90d36fb5905bbe5004f5b465ea14b53d10dae260", "patch": "@@ -114,6 +114,11 @@ pub const SECURITY_SQOS_PRESENT: DWORD = 0x00100000;\n \n pub const FIONBIO: c_ulong = 0x8004667e;\n \n+#[cfg(target_arch = \"arm\")]\n+const ARM_MAX_BREAKPOINTS: usize = 8;\n+#[cfg(target_arch = \"arm\")]\n+const ARM_MAX_WATCHPOINTS: usize = 1;\n+\n #[repr(C)]\n #[derive(Copy)]\n pub struct WIN32_FIND_DATAW {\n@@ -283,6 +288,9 @@ pub const IMAGE_FILE_MACHINE_AMD64: DWORD = 0x8664;\n #[cfg(target_arch = \"aarch64\")]\n #[cfg(feature = \"backtrace\")]\n pub const IMAGE_FILE_MACHINE_ARM64: DWORD = 0xAA64;\n+#[cfg(target_arch = \"arm\")]\n+#[cfg(feature = \"backtrace\")]\n+pub const IMAGE_FILE_MACHINE_ARMNT: DWORD = 0x01c4;\n \n pub const EXCEPTION_CONTINUE_SEARCH: LONG = 0;\n pub const EXCEPTION_STACK_OVERFLOW: DWORD = 0xc00000fd;\n@@ -789,12 +797,44 @@ pub struct FLOATING_SAVE_AREA {\n     _Dummy: [u8; 512] // FIXME: Fill this out\n }\n \n+#[cfg(target_arch = \"arm\")]\n+#[repr(C)]\n+pub struct CONTEXT {\n+    pub ContextFlags: ULONG,\n+    pub R0: ULONG,\n+    pub R1: ULONG,\n+    pub R2: ULONG,\n+    pub R3: ULONG,\n+    pub R4: ULONG,\n+    pub R5: ULONG,\n+    pub R6: ULONG,\n+    pub R7: ULONG,\n+    pub R8: ULONG,\n+    pub R9: ULONG,\n+    pub R10: ULONG,\n+    pub R11: ULONG,\n+    pub R12: ULONG,\n+    pub Sp: ULONG,\n+    pub Lr: ULONG,\n+    pub Pc: ULONG,\n+    pub Cpsr: ULONG,\n+    pub Fpscr: ULONG,\n+    pub Padding: ULONG,\n+    pub D: [u64; 32],\n+    pub Bvr: [ULONG; ARM_MAX_BREAKPOINTS],\n+    pub Bcr: [ULONG; ARM_MAX_BREAKPOINTS],\n+    pub Wvr: [ULONG; ARM_MAX_WATCHPOINTS],\n+    pub Wcr: [ULONG; ARM_MAX_WATCHPOINTS],\n+    pub Padding2: [ULONG; 2]\n+}\n+\n // FIXME(#43348): This structure is used for backtrace only, and a fake\n // definition is provided here only to allow rustdoc to pass type-check. This\n // will not appear in the final documentation. This should be also defined for\n // other architectures supported by Windows such as ARM, and for historical\n // interest, maybe MIPS and PowerPC as well.\n-#[cfg(all(rustdoc, not(any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"aarch64\"))))]\n+#[cfg(all(rustdoc, not(any(target_arch = \"x86_64\", target_arch = \"x86\",\n+      target_arch = \"aarch64\", target_arch = \"arm\"))))]\n pub enum CONTEXT {}\n \n #[cfg(target_arch = \"aarch64\")]"}]}