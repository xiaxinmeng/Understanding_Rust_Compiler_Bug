{"sha": "9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNmU3ZTY4OTFkZDg2ZjI2ZjRiMzU2NzFlNmJhNmM0NmY0MWRjNzU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-16T16:17:32Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-16T16:22:25Z"}, "message": "Beginning of build-system upgrade.", "tree": {"sha": "770db89766cfac2e913084cebe859ca23c28a496", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/770db89766cfac2e913084cebe859ca23c28a496"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75", "html_url": "https://github.com/rust-lang/rust/commit/9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65e1716a7086c365214e1b1c551c4d16af933d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65e1716a7086c365214e1b1c551c4d16af933d5", "html_url": "https://github.com/rust-lang/rust/commit/e65e1716a7086c365214e1b1c551c4d16af933d5"}], "stats": {"total": 168, "additions": 168, "deletions": 0}, "files": [{"sha": "fd4bd317067ea65e330a219701d0e9a217912117", "filename": "src/Makefile.in", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75/src%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75/src%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile.in?ref=9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75", "patch": "@@ -0,0 +1,129 @@\n+######################################################################\n+# Residual auto-configuration\n+######################################################################\n+\n+include config.mk\n+MKFILES := Makefile config.mk\n+\n+ifneq ($(MAKE_RESTARTS),)\n+CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))\n+endif\n+\n+CFG_INFO := $(info cfg: building on $(CFG_OSTYPE) $(CFG_CPUTYPE))\n+\n+ifdef CFG_OCAMLC_OPT\n+  $(info cfg: using ocaml native compiler)\n+  OPT=.opt\n+else\n+  $(info cfg: using ocaml bytecode compiler)\n+endif\n+\n+ifdef PROFILE_BOOT\n+  $(info cfg: building bootstrap compiler with profiling (forcing native))\n+  CFG_NATIVE_BOOT := 1\n+  CFG_OCAMLOPT_PROFILE_FLAGS := -p\n+endif\n+\n+ifdef DEBUG\n+  $(info cfg: forcing bytecode bootstrap compiler)\n+  CFG_NATIVE_BOOT :=\n+endif\n+\n+ifdef CFG_NATIVE_BOOT\n+  $(info cfg: building native bootstrap compiler)\n+else\n+  $(info cfg: building bytecode bootstrap compiler)\n+endif\n+\n+ifdef NO_VALGRIND\n+    CFG_VALGRIND :=\n+endif\n+\n+\n+######################################################################\n+# Bootstrap compiler variables\n+######################################################################\n+\n+# We must list them in link order.\n+# Nobody calculates the link-order DAG automatically, sadly.\n+\n+BOOT_MLS :=                                              \\\n+    $(addsuffix .ml,                                     \\\n+        $(addprefix boot/util/, version fmt common bits) \\\n+        $(addprefix boot/driver/, session)               \\\n+        $(addprefix boot/fe/, ast token lexer parser     \\\n+          extfmt pexp item cexp fuzz)                    \\\n+        $(addprefix boot/be/, asm il abi)                \\\n+        $(addprefix boot/me/, walk semant resolve alias  \\\n+          simplify type dead layer effect typestate      \\\n+         loop layout transutil trans dwarf)              \\\n+        $(addprefix boot/be/, x86 ra pe elf macho)       \\\n+        $(addprefix boot/driver/, lib glue main))        \\\n+\n+BOOT_CMOS := $(BOOT_MLS:.ml=.cmo)\n+BOOT_CMXS := $(BOOT_MLS:.ml=.cmx)\n+BOOT_OBJS := $(BOOT_MLS:.ml=.o)\n+BOOT_CMIS := $(BOOT_MLS:.ml=.cmi)\n+\n+ML_DEP_INCS := -I $(S)boot/fe     -I $(S)boot/me   -I $(S)boot/be \\\n+               -I $(S)boot/driver -I $(S)boot/util\n+\n+ML_INCS        := $(ML_DEP_INCS)\n+ML_LIBS        := unix.cma  nums.cma  bigarray.cma\n+ML_NATIVE_LIBS := unix.cmxa nums.cmxa bigarray.cmxa\n+OCAMLC_FLAGS   := -g $(ML_INCS) -w Ael -warn-error Ael\n+\n+\n+######################################################################\n+# Target-and-rule \"utility variables\"\n+######################################################################\n+\n+ifdef VERBOSE\n+  Q :=\n+  E =\n+else\n+  Q := @\n+  E = echo $(1)\n+endif\n+\n+S := $(CFG_SRC_DIR)\n+X := $(CFG_EXE_SUFFIX)\n+\n+# Look in src dir.\n+VPATH := $(CFG_SRC_DIR)\n+\n+# Delete the built-in rules.\n+.SUFFIXES:\n+%:: %,v\n+%:: RCS/%,v\n+%:: RCS/%\n+%:: s.%\n+%:: SCCS/s.%\n+\n+######################################################################\n+# Targets and rules\n+######################################################################\n+\n+all: rustboot$(X)\n+\n+ifdef CFG_NATIVE_BOOT\n+rustboot$(X): $(BOOT_CMXS) $(MKFILES)\n+\t@$(call E, compile: $@)\n+\t$(Q)ocamlopt$(OPT) -o $@ $(OCAMLOPT_FLAGS) $(ML_NATIVE_LIBS) \\\n+        $(BOOT_CMXS)\n+else\n+rustboot$(X): $(BOOT_CMOS) $(MKFILES)\n+\t@$(call E, compile: $@)\n+\t$(Q)ocamlc$(OPT) -o $@ $(OCAMLC_FLAGS) $(ML_LIBS) $(BOOT_CMOS)\n+endif\n+\n+\n+boot/util/version.ml: $(MKFILES)\n+\t$(Q)git log -1 \\\n+      --pretty=format:'let version = \"prerelease (%h %ci)\";;' >$@ || exit 1\n+\n+%.cmo: %.ml $(MKFILES)\n+\t@$(call E, compile: $@)\n+\t$(Q)ocamlc$(OPT) -c -o $@ $(OCAMLC_FLAGS) $<\n+\n+%.cmo: %.cmi $(MKFILES)"}, {"sha": "eb7416805aaa34b0d8712de6a2e39e7a8ebaa8c9", "filename": "src/configure.sh", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75/src%2Fconfigure.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75/src%2Fconfigure.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfigure.sh?ref=9c6e7e6891dd86f26f4b35671e6ba6c46f41dc75", "patch": "@@ -0,0 +1,39 @@\n+#!/bin/sh\n+\n+CFG_SRC_DIR=${0%${0##*/}}\n+CFG_BUILD_DIR=$PWD\n+\n+CFG_OSTYPE=$(uname -s)\n+CFG_CPUTYPE=$(uname -m)\n+\n+echo \"configuring on $CFG_CPUTYPE $CFG_OSTYPE\"\n+\n+echo \"setting up build directories\"\n+for i in boot/{fe,me,be,driver,util} \\\n+         rt/{isaac,bigint,sync,test} \\\n+         stage{0,1,2}                \\\n+         test/{run-pass,compile-{pass,fail}}\n+do\n+    mkdir -p -v $i\n+done\n+\n+CFG_VALGRIND=$(sh which valgrind)\n+CFG_OCAMLC_OPT=$(sh which ocamlc.opt)\n+\n+echo \"copying Makefile\"\n+cp -v ${CFG_SRC_DIR}Makefile.in ./Makefile\n+\n+echo \"writing config.mk\"\n+cat >config.mk <<EOF\n+\n+CFG_OSTYPE        := $CFG_OSTYPE\n+CFG_CPUTYPE       := $CFG_CPUTYPE\n+CFG_SRC_DIR       := $CFG_SRC_DIR\n+CFG_BUILD_DIR     := $CFG_BUILD_DIR\n+\n+CFG_VALGRIND      := $CFG_VALGRIND\n+CFG_OCAMLC_OPT    := $CFG_OCAMLC_OPT\n+\n+EOF\n+\n+echo \"configured ok\""}]}