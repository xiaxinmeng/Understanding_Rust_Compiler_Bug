{"sha": "8a9b78f5cca1a0585e52a19d79ea9503f5534345", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOWI3OGY1Y2NhMWEwNTg1ZTUyYTE5ZDc5ZWE5NTAzZjU1MzQzNDU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-08-05T13:11:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-11T05:41:15Z"}, "message": "rustc: use ty::Const for the length of TyArray.", "tree": {"sha": "b6ad436a5c183c4577c8155d74e217e5735924e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6ad436a5c183c4577c8155d74e217e5735924e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a9b78f5cca1a0585e52a19d79ea9503f5534345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9b78f5cca1a0585e52a19d79ea9503f5534345", "html_url": "https://github.com/rust-lang/rust/commit/8a9b78f5cca1a0585e52a19d79ea9503f5534345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a9b78f5cca1a0585e52a19d79ea9503f5534345/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ce31eb99076261291c1a0ae4b542f52e6ca0f0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce31eb99076261291c1a0ae4b542f52e6ca0f0a", "html_url": "https://github.com/rust-lang/rust/commit/3ce31eb99076261291c1a0ae4b542f52e6ca0f0a"}], "stats": {"total": 275, "additions": 215, "deletions": 60}, "files": [{"sha": "05e4f0da001cf7406a2cae8b5569e3914feee89a", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -247,18 +247,23 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n }\n \n /// Returns the value of the length-valued expression\n-pub fn eval_length(tcx: TyCtxt,\n-                   count: hir::BodyId,\n-                   reason: &str)\n-                   -> Result<ConstUsize, ErrorReported>\n+pub fn eval_length<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                   count: hir::BodyId,\n+                                   reason: &str)\n+                                   -> Result<&'gcx ty::Const<'gcx>, ErrorReported>\n {\n     let count_expr = &tcx.hir.body(count).value;\n     let count_def_id = tcx.hir.body_owner_def_id(count);\n     let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n     let substs = Substs::identity_for_item(tcx.global_tcx(), count_def_id);\n     match tcx.at(count_expr.span).const_eval(param_env.and((count_def_id, substs))) {\n-        Ok(&ty::Const { val: Integral(Usize(count)), .. }) => Ok(count),\n-        Ok(_) | Err(ConstEvalErr { kind: ErrKind::TypeckError, .. }) => Err(ErrorReported),\n+        Ok(count) => {\n+            // Elsewhere in the compiler this is enforced even in the presence\n+            // of erroneous code (type mismatch error has already been emitted).\n+            assert_eq!(count.ty, tcx.types.usize);\n+            Ok(count)\n+        }\n+        Err(ConstEvalErr { kind: ErrKind::TypeckError, .. }) => Err(ErrorReported),\n         Err(err) => {\n             let mut diag = err.struct_error(tcx, count_expr.span, reason);\n "}, {"sha": "a270e0873c1dde3148bfeb84ce230283f02e36d9", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -876,7 +876,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n         // Always promote `[T; 0]` (even when e.g. borrowed mutably).\n         let promotable = match expr_ty.sty {\n-            ty::TyArray(_, len) if len.as_u64() == 0 => true,\n+            ty::TyArray(_, len) if len.val.to_const_int().unwrap().to_u64().unwrap() == 0 => true,\n             _ => promotable,\n         };\n "}, {"sha": "d645a00e15781a3436c9bdbeb696d4e184c9ab42", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -70,7 +70,8 @@ impl<'a, 'gcx, 'tcx> LvalueTy<'tcx> {\n                 LvalueTy::Ty {\n                     ty: match ty.sty {\n                         ty::TyArray(inner, size) => {\n-                            let len = size.as_u64() - (from as u64) - (to as u64);\n+                            let size = size.val.to_const_int().unwrap().to_u64().unwrap();\n+                            let len = size - (from as u64) - (to as u64);\n                             tcx.mk_array(inner, len)\n                         }\n                         ty::TySlice(..) => ty,\n@@ -148,7 +149,7 @@ impl<'tcx> Rvalue<'tcx> {\n         match *self {\n             Rvalue::Use(ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Repeat(ref operand, count) => {\n-                tcx.mk_array(operand.ty(local_decls, tcx), count.as_u64())\n+                tcx.mk_array_const_usize(operand.ty(local_decls, tcx), count)\n             }\n             Rvalue::Ref(reg, bk, ref lv) => {\n                 let lv_ty = lv.ty(local_decls, tcx).to_ty(tcx);"}, {"sha": "e02493add31fb1c63d832da97154bc19ecbc1f8e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -21,6 +21,7 @@ use hir::map as hir_map;\n use hir::map::DefPathHash;\n use lint::{self, Lint};\n use ich::{self, StableHashingContext, NodeIdHashingMode};\n+use middle::const_val::ConstVal;\n use middle::free_region::FreeRegionMap;\n use middle::lang_items;\n use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n@@ -49,7 +50,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n \n use arena::{TypedArena, DroplessArena};\n-use rustc_const_math::ConstUsize;\n+use rustc_const_math::{ConstInt, ConstUsize};\n use rustc_data_structures::indexed_vec::IndexVec;\n use std::borrow::Borrow;\n use std::cell::{Cell, RefCell};\n@@ -1757,7 +1758,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {\n         let n = ConstUsize::new(n, self.sess.target.usize_ty).unwrap();\n-        self.mk_ty(TyArray(ty, n))\n+        self.mk_array_const_usize(ty, n)\n+    }\n+\n+    pub fn mk_array_const_usize(self, ty: Ty<'tcx>, n: ConstUsize) -> Ty<'tcx> {\n+        self.mk_ty(TyArray(ty, self.mk_const(ty::Const {\n+            val: ConstVal::Integral(ConstInt::Usize(n)),\n+            ty: self.types.usize\n+        })))\n     }\n \n     pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {"}, {"sha": "52a8389bd8f5fcebb63921f425f466310ba6df99", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -10,6 +10,7 @@\n \n use hir::def_id::DefId;\n use infer::type_variable;\n+use middle::const_val::ConstVal;\n use ty::{self, BoundRegion, DefIdTree, Region, Ty, TyCtxt};\n \n use std::fmt;\n@@ -18,7 +19,7 @@ use syntax::ast;\n use errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n-use rustc_const_math::ConstUsize;\n+use rustc_const_math::ConstInt;\n \n use hir;\n \n@@ -36,7 +37,7 @@ pub enum TypeError<'tcx> {\n     AbiMismatch(ExpectedFound<abi::Abi>),\n     Mutability,\n     TupleSize(ExpectedFound<usize>),\n-    FixedArraySize(ExpectedFound<ConstUsize>),\n+    FixedArraySize(ExpectedFound<u64>),\n     ArgCount,\n \n     RegionsDoesNotOutlive(Region<'tcx>, Region<'tcx>),\n@@ -181,7 +182,13 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::TyTuple(ref tys, _) if tys.is_empty() => self.to_string(),\n \n             ty::TyAdt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)),\n-            ty::TyArray(_, n) => format!(\"array of {} elements\", n),\n+            ty::TyArray(_, n) => {\n+                if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n+                    format!(\"array of {} elements\", n)\n+                } else {\n+                    \"array\".to_string()\n+                }\n+            }\n             ty::TySlice(_) => \"slice\".to_string(),\n             ty::TyRawPtr(_) => \"*-ptr\".to_string(),\n             ty::TyRef(region, tymut) => {"}, {"sha": "62e39a507f2bd619580420174e0978bcf0d446bb", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::const_val::{ConstVal, ConstAggregate};\n use ty::subst::Substs;\n use ty::{self, Ty, TypeFlags, TypeFoldable};\n \n@@ -145,7 +146,12 @@ impl FlagComputation {\n                 self.add_region(r);\n             }\n \n-            &ty::TyArray(tt, _) | &ty::TySlice(tt) => {\n+            &ty::TyArray(tt, len) => {\n+                self.add_ty(tt);\n+                self.add_const(len);\n+            }\n+\n+            &ty::TySlice(tt) => {\n                 self.add_ty(tt)\n             }\n \n@@ -202,6 +208,36 @@ impl FlagComputation {\n         }\n     }\n \n+    fn add_const(&mut self, constant: &ty::Const) {\n+        self.add_ty(constant.ty);\n+        match constant.val {\n+            ConstVal::Integral(_) |\n+            ConstVal::Float(_) |\n+            ConstVal::Str(_) |\n+            ConstVal::ByteStr(_) |\n+            ConstVal::Bool(_) |\n+            ConstVal::Char(_) |\n+            ConstVal::Variant(_) => {}\n+            ConstVal::Function(_, substs) => {\n+                self.add_substs(substs);\n+            }\n+            ConstVal::Aggregate(ConstAggregate::Struct(fields)) => {\n+                for &(_, v) in fields {\n+                    self.add_const(v);\n+                }\n+            }\n+            ConstVal::Aggregate(ConstAggregate::Tuple(fields)) |\n+            ConstVal::Aggregate(ConstAggregate::Array(fields)) => {\n+                for v in fields {\n+                    self.add_const(v);\n+                }\n+            }\n+            ConstVal::Aggregate(ConstAggregate::Repeat(v, _)) => {\n+                self.add_const(v);\n+            }\n+        }\n+    }\n+\n     fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection) {\n         self.add_substs(projection.substs);\n         self.add_ty(projection.ty);"}, {"sha": "e10a4fb9f930864a428edd8cc252bf805336733c", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -205,7 +205,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                 }))\n             },\n             TyArray(ty, len) => {\n-                if len.as_u64() == 0 {\n+                if len.val.to_const_int().unwrap().to_u64().unwrap() == 0 {\n                     DefIdForest::empty()\n                 } else {\n                     ty.uninhabited_from(visited, tcx)"}, {"sha": "bb16413c17fae62166487e05ff30c1a75f66e051", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -837,7 +837,7 @@ impl<'a, 'tcx> Struct {\n \n             // Is this a fixed-size array of something non-zero\n             // with at least one element?\n-            (_, &ty::TyArray(ety, d)) if d.as_u64() > 0 => {\n+            (_, &ty::TyArray(ety, d)) if d.val.to_const_int().unwrap().to_u64().unwrap() != 0 => {\n                 Struct::non_zero_field_paths(\n                     tcx,\n                     param_env,\n@@ -1177,7 +1177,7 @@ impl<'a, 'tcx> Layout {\n             ty::TyArray(element, count) => {\n                 let element = element.layout(tcx, param_env)?;\n                 let element_size = element.size(dl);\n-                let count = count.as_u64();\n+                let count = count.val.to_const_int().unwrap().to_u64().unwrap();\n                 if element_size.checked_mul(count, dl).is_none() {\n                     return Err(LayoutError::SizeOverflow(ty));\n                 }"}, {"sha": "eb465ed16a2646652e05ede26eb57aaf59763db2", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -428,10 +428,14 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n         (&ty::TyArray(a_t, sz_a), &ty::TyArray(b_t, sz_b)) =>\n         {\n             let t = relation.relate(&a_t, &b_t)?;\n-            if sz_a == sz_b {\n-                Ok(tcx.mk_array(t, sz_a.as_u64()))\n+            assert_eq!(sz_a.ty, tcx.types.usize);\n+            assert_eq!(sz_b.ty, tcx.types.usize);\n+            let sz_a_u64 = sz_a.val.to_const_int().unwrap().to_u64().unwrap();\n+            let sz_b_u64 = sz_b.val.to_const_int().unwrap().to_u64().unwrap();\n+            if sz_a_u64 == sz_b_u64 {\n+                Ok(tcx.mk_ty(ty::TyArray(t, sz_a)))\n             } else {\n-                Err(TypeError::FixedArraySize(expected_found(relation, &sz_a, &sz_b)))\n+                Err(TypeError::FixedArraySize(expected_found(relation, &sz_a_u64, &sz_b_u64)))\n             }\n         }\n "}, {"sha": "758edd7d0c3bc8b2dff4a2b62acd20bf8429d96f", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -552,7 +552,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         let sty = match self.sty {\n             ty::TyRawPtr(tm) => ty::TyRawPtr(tm.fold_with(folder)),\n-            ty::TyArray(typ, sz) => ty::TyArray(typ.fold_with(folder), sz),\n+            ty::TyArray(typ, sz) => ty::TyArray(typ.fold_with(folder), sz.fold_with(folder)),\n             ty::TySlice(typ) => ty::TySlice(typ.fold_with(folder)),\n             ty::TyAdt(tid, substs) => ty::TyAdt(tid, substs.fold_with(folder)),\n             ty::TyDynamic(ref trait_ty, ref region) =>\n@@ -590,7 +590,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match self.sty {\n             ty::TyRawPtr(ref tm) => tm.visit_with(visitor),\n-            ty::TyArray(typ, _sz) => typ.visit_with(visitor),\n+            ty::TyArray(typ, sz) => typ.visit_with(visitor) || sz.visit_with(visitor),\n             ty::TySlice(typ) => typ.visit_with(visitor),\n             ty::TyAdt(_, substs) => substs.visit_with(visitor),\n             ty::TyDynamic(ref trait_ty, ref reg) =>"}, {"sha": "f17f81ca06bea5bbc2534887b003bdee9dd0d544", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -27,8 +27,6 @@ use syntax::ast::{self, Name};\n use syntax::symbol::keywords;\n use util::nodemap::FxHashMap;\n \n-use rustc_const_math::ConstUsize;\n-\n use serialize;\n \n use hir;\n@@ -112,7 +110,7 @@ pub enum TypeVariants<'tcx> {\n     TyStr,\n \n     /// An array with the given length. Written as `[T; n]`.\n-    TyArray(Ty<'tcx>, ConstUsize),\n+    TyArray(Ty<'tcx>, &'tcx ty::Const<'tcx>),\n \n     /// The pointee of an array slice.  Written as `[T]`.\n     TySlice(Ty<'tcx>),"}, {"sha": "95618717e0ea3801171d19f9345bc347a6238487", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -697,7 +697,9 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             TyInt(i) => self.hash(i),\n             TyUint(u) => self.hash(u),\n             TyFloat(f) => self.hash(f),\n-            TyArray(_, n) => self.hash(n),\n+            TyArray(_, n) => {\n+                self.hash(n.val.to_const_int().unwrap().to_u64().unwrap())\n+            }\n             TyRawPtr(m) |\n             TyRef(_, m) => self.hash(m.mutbl),\n             TyClosure(def_id, _) |"}, {"sha": "4d7eb37ca26ed4d1547392167bc0493ff626043a", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -11,6 +11,7 @@\n //! An iterator over the type substructure.\n //! WARNING: this does not keep track of the region depth.\n \n+use middle::const_val::{ConstVal, ConstAggregate};\n use ty::{self, Ty};\n use rustc_data_structures::small_vec::SmallVec;\n use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n@@ -83,7 +84,11 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n         ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyNever | ty::TyError => {\n         }\n-        ty::TyArray(ty, _) | ty::TySlice(ty) => {\n+        ty::TyArray(ty, len) => {\n+            push_const(stack, len);\n+            stack.push(ty);\n+        }\n+        ty::TySlice(ty) => {\n             stack.push(ty);\n         }\n         ty::TyRawPtr(ref mt) | ty::TyRef(_, ref mt) => {\n@@ -122,13 +127,39 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::TyFnDef(_, substs) => {\n             stack.extend(substs.types().rev());\n         }\n-        ty::TyFnPtr(ft) => {\n-            push_sig_subtypes(stack, ft);\n+        ty::TyFnPtr(sig) => {\n+            stack.push(sig.skip_binder().output());\n+            stack.extend(sig.skip_binder().inputs().iter().cloned().rev());\n         }\n     }\n }\n \n-fn push_sig_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, sig: ty::PolyFnSig<'tcx>) {\n-    stack.push(sig.skip_binder().output());\n-    stack.extend(sig.skip_binder().inputs().iter().cloned().rev());\n+fn push_const<'tcx>(stack: &mut TypeWalkerStack<'tcx>, constant: &'tcx ty::Const<'tcx>) {\n+    match constant.val {\n+        ConstVal::Integral(_) |\n+        ConstVal::Float(_) |\n+        ConstVal::Str(_) |\n+        ConstVal::ByteStr(_) |\n+        ConstVal::Bool(_) |\n+        ConstVal::Char(_) |\n+        ConstVal::Variant(_) => {}\n+        ConstVal::Function(_, substs) => {\n+            stack.extend(substs.types().rev());\n+        }\n+        ConstVal::Aggregate(ConstAggregate::Struct(fields)) => {\n+            for &(_, v) in fields.iter().rev() {\n+                push_const(stack, v);\n+            }\n+        }\n+        ConstVal::Aggregate(ConstAggregate::Tuple(fields)) |\n+        ConstVal::Aggregate(ConstAggregate::Array(fields)) => {\n+            for v in fields.iter().rev() {\n+                push_const(stack, v);\n+            }\n+        }\n+        ConstVal::Aggregate(ConstAggregate::Repeat(v, _)) => {\n+            push_const(stack, v);\n+        }\n+    }\n+    stack.push(constant.ty);\n }"}, {"sha": "4d2b15b6bf069865b8a4a15ca80ae05044ac01f5", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -207,6 +207,10 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Pushes the obligations required for a constant value to be WF\n+    /// into `self.out`.\n+    fn compute_const(&mut self, _constant: &'tcx ty::Const<'tcx>) {}\n+\n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_regions() {\n             let cause = self.cause(cause);\n@@ -239,9 +243,14 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                     // WfScalar, WfParameter, etc\n                 }\n \n-                ty::TySlice(subty) |\n-                ty::TyArray(subty, _) => {\n+                ty::TySlice(subty) => {\n+                    self.require_sized(subty, traits::SliceOrArrayElem);\n+                }\n+\n+                ty::TyArray(subty, len) => {\n                     self.require_sized(subty, traits::SliceOrArrayElem);\n+                    assert_eq!(len.ty, self.infcx.tcx.types.usize);\n+                    self.compute_const(len);\n                 }\n \n                 ty::TyTuple(ref tys, _) => {"}, {"sha": "6b74022806cf54c7c4b1b2f800de594f2a5e44bd", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -10,6 +10,7 @@\n \n use hir::def_id::DefId;\n use hir::map::definitions::DefPathData;\n+use middle::const_val::ConstVal;\n use middle::region::{self, BlockRemainder};\n use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n@@ -24,6 +25,7 @@ use std::cell::Cell;\n use std::fmt;\n use std::usize;\n \n+use rustc_const_math::ConstInt;\n use syntax::abi::Abi;\n use syntax::ast::CRATE_NODE_ID;\n use syntax::symbol::Symbol;\n@@ -886,7 +888,18 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n \n                 write!(f, \"]\")\n             }),\n-            TyArray(ty, sz) => write!(f, \"[{}; {}]\",  ty, sz),\n+            TyArray(ty, sz) => {\n+                write!(f, \"[{}; \", ty)?;\n+                match sz.val {\n+                    ConstVal::Integral(ConstInt::Usize(sz)) => {\n+                        write!(f, \"{}\", sz)?;\n+                    }\n+                    _ => {\n+                        write!(f, \"{:?}\", sz)?;\n+                    }\n+                }\n+                write!(f, \"]\")\n+            }\n             TySlice(ty) => write!(f, \"[{}]\",  ty)\n         }\n     }"}, {"sha": "efe6cfb5464ef6f57475967e28692f98c23c9a77", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -422,11 +422,12 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 (0..pcx.max_slice_length+1).map(|length| Slice(length)).collect()\n             }\n         }\n-        ty::TyArray(ref sub_ty, length) => {\n-            if length.as_u64() > 0 && cx.is_uninhabited(sub_ty) {\n+        ty::TyArray(ref sub_ty, len) => {\n+            let len = len.val.to_const_int().unwrap().to_u64().unwrap();\n+            if len != 0 && cx.is_uninhabited(sub_ty) {\n                 vec![]\n             } else {\n-                vec![Slice(length.as_u64())]\n+                vec![Slice(len)]\n             }\n         }\n         ty::TyAdt(def, substs) if def.is_enum() && def.variants.len() != 1 => {\n@@ -729,7 +730,9 @@ fn pat_constructors<'tcx>(_cx: &mut MatchCheckCtxt,\n         PatternKind::Range { lo, hi, end } =>\n             Some(vec![ConstantRange(lo, hi, end)]),\n         PatternKind::Array { .. } => match pcx.ty.sty {\n-            ty::TyArray(_, length) => Some(vec![Slice(length.as_u64())]),\n+            ty::TyArray(_, length) => Some(vec![\n+                Slice(length.val.to_const_int().unwrap().to_u64().unwrap())\n+            ]),\n             _ => span_bug!(pat.span, \"bad ty {:?} for array pattern\", pcx.ty)\n         },\n         PatternKind::Slice { ref prefix, ref slice, ref suffix } => {"}, {"sha": "1e3d11812816345e7215916db758cc104eca83ed", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -456,7 +456,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n       }\n       hir::ExprRepeat(ref elem, _) => {\n           let n = match ty.sty {\n-            ty::TyArray(_, n) => n.as_u64(),\n+            ty::TyArray(_, n) => n.val.to_const_int().unwrap().to_u64().unwrap(),\n             _ => span_bug!(e.span, \"typeck error\")\n           };\n           mk_const(Aggregate(Repeat(cx.eval(elem)?, n)))\n@@ -635,8 +635,13 @@ fn cast_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 Err(ErrKind::UnimplementedConstVal(\"casting a bytestr to a raw ptr\"))\n             },\n             ty::TyRef(_, ty::TypeAndMut { ref ty, mutbl: hir::MutImmutable }) => match ty.sty {\n-                ty::TyArray(ty, n) if ty == tcx.types.u8 && n.as_u64() == b.data.len() as u64 => {\n-                    Ok(val)\n+                ty::TyArray(ty, n) => {\n+                    let n = n.val.to_const_int().unwrap().to_u64().unwrap();\n+                    if ty == tcx.types.u8 && n == b.data.len() as u64 {\n+                        Ok(val)\n+                    } else {\n+                        Err(CannotCast)\n+                    }\n                 }\n                 ty::TySlice(_) => {\n                     Err(ErrKind::UnimplementedConstVal(\"casting a bytestr to slice\"))"}, {"sha": "0a2e78dd51a35e6468946057eeda631a11edf7e4", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -537,7 +537,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n             ty::TyArray(_, len) => {\n                 // fixed-length array\n-                assert!(len.as_u64() >= prefix.len() as u64 + suffix.len() as u64);\n+                let len = len.val.to_const_int().unwrap().to_u64().unwrap();\n+                assert!(len >= prefix.len() as u64 + suffix.len() as u64);\n                 PatternKind::Array { prefix: prefix, slice: slice, suffix: suffix }\n             }\n "}, {"sha": "00ee417e02b5534ab984e243da49c1c86891aff5", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -292,7 +292,10 @@ fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n \n     match self_ty.sty {\n         _ if is_copy => builder.copy_shim(),\n-        ty::TyArray(ty, len) => builder.array_shim(ty, len.as_u64()),\n+        ty::TyArray(ty, len) => {\n+            let len = len.val.to_const_int().unwrap().to_u64().unwrap();\n+            builder.array_shim(ty, len)\n+        }\n         ty::TyTuple(tys, _) => builder.tuple_shim(tys),\n         _ => {\n             bug!(\"clone shim for `{:?}` which is not `Copy` and is not an aggregate\", self_ty);"}, {"sha": "2267e611531f3f0f342fa37952760861b8dc8ab2", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -696,7 +696,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             _ => false\n                         }\n                     } else if let ty::TyArray(_, len) = ty.sty {\n-                        len.as_u64() == 0 && self.mode == Mode::Fn\n+                        len.val.to_const_int().unwrap().to_u64().unwrap() == 0 &&\n+                            self.mode == Mode::Fn\n                     } else {\n                         false\n                     };"}, {"sha": "ab5998a34805b085f930fbd444799b5e8c9b4d88", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                 LvalueTy::Ty {\n                     ty: match base_ty.sty {\n                         ty::TyArray(inner, size) => {\n-                            let size = size.as_u64();\n+                            let size = size.val.to_const_int().unwrap().to_u64().unwrap();\n                             let min_size = (from as u64) + (to as u64);\n                             if let Some(rest_size) = size.checked_sub(min_size) {\n                                 tcx.mk_array(inner, rest_size)"}, {"sha": "73209affe994b4462f51e08c2c079203ea054f7e", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -201,7 +201,9 @@ pub fn unsized_info<'ccx, 'tcx>(ccx: &CrateContext<'ccx, 'tcx>,\n                                 -> ValueRef {\n     let (source, target) = ccx.tcx().struct_lockstep_tails(source, target);\n     match (&source.sty, &target.sty) {\n-        (&ty::TyArray(_, len), &ty::TySlice(_)) => C_usize(ccx, len.as_u64()),\n+        (&ty::TyArray(_, len), &ty::TySlice(_)) => {\n+            C_usize(ccx, len.val.to_const_int().unwrap().to_u64().unwrap())\n+        }\n         (&ty::TyDynamic(..), &ty::TyDynamic(..)) => {\n             // For now, upcasts are limited to changes in marker\n             // traits, and hence never actually require an actual"}, {"sha": "3c87bc293b5b58cc67faf14f7127025e780d3614", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -530,7 +530,8 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             MetadataCreationResult::new(basic_type_metadata(cx, t), false)\n         }\n         ty::TyArray(typ, len) => {\n-            fixed_vec_metadata(cx, unique_type_id, typ, Some(len.as_u64()), usage_site_span)\n+            let len = len.val.to_const_int().unwrap().to_u64().unwrap();\n+            fixed_vec_metadata(cx, unique_type_id, typ, Some(len), usage_site_span)\n         }\n         ty::TySlice(typ) => {\n             fixed_vec_metadata(cx, unique_type_id, typ, None, usage_site_span)"}, {"sha": "7bf9d39ea2f252bdee9f0704c3c0e97369464e64", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -96,7 +96,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::TyArray(inner_type, len) => {\n             output.push('[');\n             push_debuginfo_type_name(cx, inner_type, true, output);\n-            output.push_str(&format!(\"; {}\", len));\n+            output.push_str(&format!(\"; {}\", len.val.to_const_int().unwrap().to_u64().unwrap()));\n             output.push(']');\n         },\n         ty::TySlice(inner_type) => {"}, {"sha": "072d351dd617a64944b6282253ce74cc15f5354e", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -200,7 +200,9 @@ impl<'tcx> ConstLvalue<'tcx> {\n \n     pub fn len<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> ValueRef {\n         match self.ty.sty {\n-            ty::TyArray(_, n) => C_usize(ccx, n.as_u64()),\n+            ty::TyArray(_, n) => {\n+                C_usize(ccx, n.val.to_const_int().unwrap().to_u64().unwrap())\n+            }\n             ty::TySlice(_) | ty::TyStr => {\n                 assert!(self.llextra != ptr::null_mut());\n                 self.llextra"}, {"sha": "6799e52904d3432f6c27d943d9d0a9ea4e588ab4", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -106,7 +106,9 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n     pub fn len(&self, ccx: &CrateContext<'a, 'tcx>) -> ValueRef {\n         let ty = self.ty.to_ty(ccx.tcx());\n         match ty.sty {\n-            ty::TyArray(_, n) => common::C_usize(ccx, n.as_u64()),\n+            ty::TyArray(_, n) => {\n+                common::C_usize(ccx, n.val.to_const_int().unwrap().to_u64().unwrap())\n+            }\n             ty::TySlice(_) | ty::TyStr => {\n                 assert!(self.llextra != ptr::null_mut());\n                 self.llextra"}, {"sha": "20ed4ab50a00f136065345fa903640923359048b", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -521,7 +521,8 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             if let LocalRef::Operand(Some(op)) = self.locals[index] {\n                 if common::type_is_zero_size(bcx.ccx, op.ty) {\n                     if let ty::TyArray(_, n) = op.ty.sty {\n-                        return common::C_usize(bcx.ccx, n.as_u64());\n+                        let n = n.val.to_const_int().unwrap().to_u64().unwrap();\n+                        return common::C_usize(bcx.ccx, n);\n                     }\n                 }\n             }"}, {"sha": "1f27eb9fcb3095af2079e8ce2dd4101c84d6c18c", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -446,7 +446,8 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::TyArray(inner_type, len) => {\n                 output.push('[');\n                 self.push_type_name(inner_type, output);\n-                write!(output, \"; {}\", len).unwrap();\n+                write!(output, \"; {}\",\n+                    len.val.to_const_int().unwrap().to_u64().unwrap()).unwrap();\n                 output.push(']');\n             },\n             ty::TySlice(inner_type) => {"}, {"sha": "992c74b9020c314eddd516664cb693fc6c1279e0", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -149,7 +149,8 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n \n       ty::TyArray(ty, size) => {\n           let llty = in_memory_type_of(cx, ty);\n-          Type::array(&llty, size.as_u64())\n+          let size = size.val.to_const_int().unwrap().to_u64().unwrap();\n+          Type::array(&llty, size)\n       }\n \n       // Unsized slice types (and str) have the type of their element, and"}, {"sha": "6759b6a422d09a435c8ecbe4738d3006ec623add", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -1083,7 +1083,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n             hir::TyArray(ref ty, length) => {\n                 if let Ok(length) = eval_length(tcx, length, \"array length\") {\n-                    tcx.mk_array(self.ast_ty_to_ty(&ty), length.as_u64())\n+                    tcx.mk_ty(ty::TyArray(self.ast_ty_to_ty(&ty), length))\n                 } else {\n                     self.tcx().types.err\n                 }"}, {"sha": "cbf58209d056aea6ed16e91be89041610f4f55a3", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 let (inner_ty, slice_ty) = match expected_ty.sty {\n                     ty::TyArray(inner_ty, size) => {\n-                        let size = size.as_u64();\n+                        let size = size.val.to_const_int().unwrap().to_u64().unwrap();\n                         let min_len = before.len() as u64 + after.len() as u64;\n                         if slice.is_none() {\n                             if min_len != size {"}, {"sha": "0ed3cc1e905cb2df77a4c7d4457cacae47a81c19", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -3923,7 +3923,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             };\n \n             if let Ok(count) = count {\n-                if count.as_u64() > 1 {\n+                let zero_or_one = count.val.to_const_int().and_then(|count| {\n+                    count.to_u64().map(|count| count <= 1)\n+                }).unwrap_or(false);\n+                if !zero_or_one {\n                     // For [foo, ..n] where n > 1, `foo` must have\n                     // Copy type:\n                     let lang_item = self.tcx.require_lang_item(lang_items::CopyTraitLangItem);"}, {"sha": "69c05050dacc936d8f10682acda6b1645ed500af", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -27,6 +27,7 @@ use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::{self, DUMMY_SP, Pos};\n \n+use rustc::middle::const_val::ConstVal;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::resolve_lifetime as rl;\n use rustc::middle::lang_items;\n@@ -40,6 +41,7 @@ use rustc_typeck::hir_ty_to_ty;\n \n use rustc::hir;\n \n+use rustc_const_math::ConstInt;\n use std::{mem, slice, vec};\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -1785,7 +1787,12 @@ impl Clean<Type> for hir::Ty {\n             TyArray(ref ty, length) => {\n                 use rustc::middle::const_val::eval_length;\n                 let n = eval_length(cx.tcx, length, \"array length\").unwrap();\n-                Array(box ty.clean(cx), n.to_string())\n+                let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n+                    n.to_string()\n+                } else {\n+                    format!(\"{:?}\", n)\n+                };\n+                Array(box ty.clean(cx), n)\n             },\n             TyTup(ref tys) => Tuple(tys.clean(cx)),\n             TyPath(hir::QPath::Resolved(None, ref path)) => {\n@@ -1895,7 +1902,14 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             ty::TyFloat(float_ty) => Primitive(float_ty.into()),\n             ty::TyStr => Primitive(PrimitiveType::Str),\n             ty::TySlice(ty) => Slice(box ty.clean(cx)),\n-            ty::TyArray(ty, n) => Array(box ty.clean(cx), n.to_string()),\n+            ty::TyArray(ty, n) => {\n+                let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n+                    n.to_string()\n+                } else {\n+                    format!(\"{:?}\", n)\n+                };\n+                Array(box ty.clean(cx), n)\n+            }\n             ty::TyRawPtr(mt) => RawPointer(mt.mutbl.clean(cx), box mt.ty.clean(cx)),\n             ty::TyRef(r, mt) => BorrowedRef {\n                 lifetime: r.clean(cx),"}, {"sha": "9563ccfcc65fd9e9617a4c29e2226ccb82e0eb72", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9b78f5cca1a0585e52a19d79ea9503f5534345/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8a9b78f5cca1a0585e52a19d79ea9503f5534345", "patch": "@@ -32,6 +32,7 @@ extern crate html_diff;\n extern crate libc;\n extern crate rustc;\n extern crate rustc_data_structures;\n+extern crate rustc_const_math;\n extern crate rustc_trans;\n extern crate rustc_driver;\n extern crate rustc_resolve;"}]}