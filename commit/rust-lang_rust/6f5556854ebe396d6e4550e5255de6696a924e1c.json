{"sha": "6f5556854ebe396d6e4550e5255de6696a924e1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNTU1Njg1NGViZTM5NmQ2ZTQ1NTBlNTI1NWRlNjY5NmE5MjRlMWM=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-09-28T16:25:16Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-11-03T20:27:40Z"}, "message": "Use direct implementation on u8/char to implement AsciiExt\n\nThe methods were copied to u8/char, so we can just use it in\nAsciiExt impls to avoid duplicate code.", "tree": {"sha": "b0e0108cededb2d7ca96c21a67fd037d82f65a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0e0108cededb2d7ca96c21a67fd037d82f65a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5556854ebe396d6e4550e5255de6696a924e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5556854ebe396d6e4550e5255de6696a924e1c", "html_url": "https://github.com/rust-lang/rust/commit/6f5556854ebe396d6e4550e5255de6696a924e1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5556854ebe396d6e4550e5255de6696a924e1c/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d425f8d2266f481bab447f30816fc9a1b4907868", "url": "https://api.github.com/repos/rust-lang/rust/commits/d425f8d2266f481bab447f30816fc9a1b4907868", "html_url": "https://github.com/rust-lang/rust/commit/d425f8d2266f481bab447f30816fc9a1b4907868"}], "stats": {"total": 321, "additions": 41, "deletions": 280}, "files": [{"sha": "3dd8b2b08e6d62fdf2d3bfcd838bfeb05ae1c8a1", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 41, "deletions": 280, "changes": 321, "blob_url": "https://github.com/rust-lang/rust/blob/6f5556854ebe396d6e4550e5255de6696a924e1c/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5556854ebe396d6e4550e5255de6696a924e1c/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=6f5556854ebe396d6e4550e5255de6696a924e1c", "patch": "@@ -753,202 +753,66 @@ impl AsciiExt for [u8] {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl AsciiExt for u8 {\n-    type Owned = u8;\n-    #[inline]\n-    fn is_ascii(&self) -> bool { *self & 128 == 0 }\n-    #[inline]\n-    fn to_ascii_uppercase(&self) -> u8 { ASCII_UPPERCASE_MAP[*self as usize] }\n-    #[inline]\n-    fn to_ascii_lowercase(&self) -> u8 { ASCII_LOWERCASE_MAP[*self as usize] }\n-    #[inline]\n-    fn eq_ignore_ascii_case(&self, other: &u8) -> bool {\n-        self.to_ascii_lowercase() == other.to_ascii_lowercase()\n-    }\n-    #[inline]\n-    fn make_ascii_uppercase(&mut self) { *self = self.to_ascii_uppercase(); }\n-    #[inline]\n-    fn make_ascii_lowercase(&mut self) { *self = self.to_ascii_lowercase(); }\n+macro_rules! impl_by_delegating {\n+    ($ty:ty, $owned:ty) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl AsciiExt for $ty {\n+            type Owned = $owned;\n \n-    #[inline]\n-    fn is_ascii_alphabetic(&self) -> bool {\n-        if *self >= 0x80 { return false; }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            L|Lx|U|Ux => true,\n-            _ => false\n-        }\n-    }\n+            #[inline]\n+            fn is_ascii(&self) -> bool { self.is_ascii() }\n \n-    #[inline]\n-    fn is_ascii_uppercase(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            U|Ux => true,\n-            _ => false\n-        }\n-    }\n+            #[inline]\n+            fn to_ascii_uppercase(&self) -> Self::Owned { self.to_ascii_uppercase() }\n \n-    #[inline]\n-    fn is_ascii_lowercase(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            L|Lx => true,\n-            _ => false\n-        }\n-    }\n+            #[inline]\n+            fn to_ascii_lowercase(&self) -> Self::Owned { self.to_ascii_lowercase() }\n \n-    #[inline]\n-    fn is_ascii_alphanumeric(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            D|L|Lx|U|Ux => true,\n-            _ => false\n-        }\n-    }\n+            #[inline]\n+            fn eq_ignore_ascii_case(&self, o: &Self) -> bool { self.eq_ignore_ascii_case(o) }\n \n-    #[inline]\n-    fn is_ascii_digit(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            D => true,\n-            _ => false\n-        }\n-    }\n+            #[inline]\n+            fn make_ascii_uppercase(&mut self) { self.make_ascii_uppercase(); }\n \n-    #[inline]\n-    fn is_ascii_hexdigit(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            D|Lx|Ux => true,\n-            _ => false\n-        }\n-    }\n+            #[inline]\n+            fn make_ascii_lowercase(&mut self) { self.make_ascii_lowercase(); }\n \n-    #[inline]\n-    fn is_ascii_punctuation(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            P => true,\n-            _ => false\n-        }\n-    }\n+            #[inline]\n+            fn is_ascii_alphabetic(&self) -> bool { self.is_ascii_alphabetic() }\n \n-    #[inline]\n-    fn is_ascii_graphic(&self) -> bool {\n-        if *self >= 0x80 { return false; }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            Ux|U|Lx|L|D|P => true,\n-            _ => false\n-        }\n-    }\n+            #[inline]\n+            fn is_ascii_uppercase(&self) -> bool { self.is_ascii_uppercase() }\n \n-    #[inline]\n-    fn is_ascii_whitespace(&self) -> bool {\n-        if *self >= 0x80 { return false; }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            Cw|W => true,\n-            _ => false\n-        }\n-    }\n+            #[inline]\n+            fn is_ascii_lowercase(&self) -> bool { self.is_ascii_lowercase() }\n \n-    #[inline]\n-    fn is_ascii_control(&self) -> bool {\n-        if *self >= 0x80 { return false; }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            C|Cw => true,\n-            _ => false\n-        }\n-    }\n-}\n+            #[inline]\n+            fn is_ascii_alphanumeric(&self) -> bool { self.is_ascii_alphanumeric() }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl AsciiExt for char {\n-    type Owned = char;\n-    #[inline]\n-    fn is_ascii(&self) -> bool {\n-        *self as u32 <= 0x7F\n-    }\n+            #[inline]\n+            fn is_ascii_digit(&self) -> bool { self.is_ascii_digit() }\n \n-    #[inline]\n-    fn to_ascii_uppercase(&self) -> char {\n-        if self.is_ascii() {\n-            (*self as u8).to_ascii_uppercase() as char\n-        } else {\n-            *self\n-        }\n-    }\n-\n-    #[inline]\n-    fn to_ascii_lowercase(&self) -> char {\n-        if self.is_ascii() {\n-            (*self as u8).to_ascii_lowercase() as char\n-        } else {\n-            *self\n-        }\n-    }\n-\n-    #[inline]\n-    fn eq_ignore_ascii_case(&self, other: &char) -> bool {\n-        self.to_ascii_lowercase() == other.to_ascii_lowercase()\n-    }\n-\n-    #[inline]\n-    fn make_ascii_uppercase(&mut self) { *self = self.to_ascii_uppercase(); }\n-    #[inline]\n-    fn make_ascii_lowercase(&mut self) { *self = self.to_ascii_lowercase(); }\n-\n-    #[inline]\n-    fn is_ascii_alphabetic(&self) -> bool {\n-        (*self as u32 <= 0x7f) && (*self as u8).is_ascii_alphabetic()\n-    }\n-\n-    #[inline]\n-    fn is_ascii_uppercase(&self) -> bool {\n-        (*self as u32 <= 0x7f) && (*self as u8).is_ascii_uppercase()\n-    }\n-\n-    #[inline]\n-    fn is_ascii_lowercase(&self) -> bool {\n-        (*self as u32 <= 0x7f) && (*self as u8).is_ascii_lowercase()\n-    }\n-\n-    #[inline]\n-    fn is_ascii_alphanumeric(&self) -> bool {\n-        (*self as u32 <= 0x7f) && (*self as u8).is_ascii_alphanumeric()\n-    }\n-\n-    #[inline]\n-    fn is_ascii_digit(&self) -> bool {\n-        (*self as u32 <= 0x7f) && (*self as u8).is_ascii_digit()\n-    }\n+            #[inline]\n+            fn is_ascii_hexdigit(&self) -> bool { self.is_ascii_hexdigit() }\n \n-    #[inline]\n-    fn is_ascii_hexdigit(&self) -> bool {\n-        (*self as u32 <= 0x7f) && (*self as u8).is_ascii_hexdigit()\n-    }\n-\n-    #[inline]\n-    fn is_ascii_punctuation(&self) -> bool {\n-        (*self as u32 <= 0x7f) && (*self as u8).is_ascii_punctuation()\n-    }\n+            #[inline]\n+            fn is_ascii_punctuation(&self) -> bool { self.is_ascii_punctuation() }\n \n-    #[inline]\n-    fn is_ascii_graphic(&self) -> bool {\n-        (*self as u32 <= 0x7f) && (*self as u8).is_ascii_graphic()\n-    }\n+            #[inline]\n+            fn is_ascii_graphic(&self) -> bool { self.is_ascii_graphic() }\n \n-    #[inline]\n-    fn is_ascii_whitespace(&self) -> bool {\n-        (*self as u32 <= 0x7f) && (*self as u8).is_ascii_whitespace()\n-    }\n+            #[inline]\n+            fn is_ascii_whitespace(&self) -> bool { self.is_ascii_whitespace() }\n \n-    #[inline]\n-    fn is_ascii_control(&self) -> bool {\n-        (*self as u32 <= 0x7f) && (*self as u8).is_ascii_control()\n+            #[inline]\n+            fn is_ascii_control(&self) -> bool { self.is_ascii_control() }\n+        }\n     }\n }\n \n+impl_by_delegating!(u8, u8);\n+impl_by_delegating!(char, char);\n+\n /// An iterator over the escaped version of a byte.\n ///\n /// This `struct` is created by the [`escape_default`] function. See its\n@@ -1066,109 +930,6 @@ impl fmt::Debug for EscapeDefault {\n }\n \n \n-static ASCII_LOWERCASE_MAP: [u8; 256] = [\n-    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n-    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n-    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n-    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n-    b' ', b'!', b'\"', b'#', b'$', b'%', b'&', b'\\'',\n-    b'(', b')', b'*', b'+', b',', b'-', b'.', b'/',\n-    b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7',\n-    b'8', b'9', b':', b';', b'<', b'=', b'>', b'?',\n-    b'@',\n-\n-          b'a', b'b', b'c', b'd', b'e', b'f', b'g',\n-    b'h', b'i', b'j', b'k', b'l', b'm', b'n', b'o',\n-    b'p', b'q', b'r', b's', b't', b'u', b'v', b'w',\n-    b'x', b'y', b'z',\n-\n-                      b'[', b'\\\\', b']', b'^', b'_',\n-    b'`', b'a', b'b', b'c', b'd', b'e', b'f', b'g',\n-    b'h', b'i', b'j', b'k', b'l', b'm', b'n', b'o',\n-    b'p', b'q', b'r', b's', b't', b'u', b'v', b'w',\n-    b'x', b'y', b'z', b'{', b'|', b'}', b'~', 0x7f,\n-    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n-    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n-    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,\n-    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,\n-    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,\n-    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,\n-    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,\n-    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,\n-    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,\n-    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,\n-    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,\n-    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,\n-    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,\n-    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,\n-    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,\n-    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n-];\n-\n-static ASCII_UPPERCASE_MAP: [u8; 256] = [\n-    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n-    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n-    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n-    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n-    b' ', b'!', b'\"', b'#', b'$', b'%', b'&', b'\\'',\n-    b'(', b')', b'*', b'+', b',', b'-', b'.', b'/',\n-    b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7',\n-    b'8', b'9', b':', b';', b'<', b'=', b'>', b'?',\n-    b'@', b'A', b'B', b'C', b'D', b'E', b'F', b'G',\n-    b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O',\n-    b'P', b'Q', b'R', b'S', b'T', b'U', b'V', b'W',\n-    b'X', b'Y', b'Z', b'[', b'\\\\', b']', b'^', b'_',\n-    b'`',\n-\n-          b'A', b'B', b'C', b'D', b'E', b'F', b'G',\n-    b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O',\n-    b'P', b'Q', b'R', b'S', b'T', b'U', b'V', b'W',\n-    b'X', b'Y', b'Z',\n-\n-                      b'{', b'|', b'}', b'~', 0x7f,\n-    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n-    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n-    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,\n-    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,\n-    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,\n-    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,\n-    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,\n-    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,\n-    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,\n-    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,\n-    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,\n-    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,\n-    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,\n-    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,\n-    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,\n-    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n-];\n-\n-enum AsciiCharacterClass {\n-    C,  // control\n-    Cw, // control whitespace\n-    W,  // whitespace\n-    D,  // digit\n-    L,  // lowercase\n-    Lx, // lowercase hex digit\n-    U,  // uppercase\n-    Ux, // uppercase hex digit\n-    P,  // punctuation\n-}\n-use self::AsciiCharacterClass::*;\n-\n-static ASCII_CHARACTER_CLASS: [AsciiCharacterClass; 128] = [\n-//  _0 _1 _2 _3 _4 _5 _6 _7 _8 _9 _a _b _c _d _e _f\n-    C, C, C, C, C, C, C, C, C, Cw,Cw,C, Cw,Cw,C, C, // 0_\n-    C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, // 1_\n-    W, P, P, P, P, P, P, P, P, P, P, P, P, P, P, P, // 2_\n-    D, D, D, D, D, D, D, D, D, D, P, P, P, P, P, P, // 3_\n-    P, Ux,Ux,Ux,Ux,Ux,Ux,U, U, U, U, U, U, U, U, U, // 4_\n-    U, U, U, U, U, U, U, U, U, U, U, P, P, P, P, P, // 5_\n-    P, Lx,Lx,Lx,Lx,Lx,Lx,L, L, L, L, L, L, L, L, L, // 6_\n-    L, L, L, L, L, L, L, L, L, L, L, P, P, P, P, C, // 7_\n-];\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}