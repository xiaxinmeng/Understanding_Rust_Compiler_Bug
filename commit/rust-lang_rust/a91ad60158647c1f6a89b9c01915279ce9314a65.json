{"sha": "a91ad60158647c1f6a89b9c01915279ce9314a65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MWFkNjAxNTg2NDdjMWY2YTg5YjljMDE5MTUyNzljZTkzMTRhNjU=", "commit": {"author": {"name": "Peter Todd", "email": "pete@petertodd.org", "date": "2019-05-19T02:27:33Z"}, "committer": {"name": "Peter Todd", "email": "pete@petertodd.org", "date": "2019-05-19T02:27:33Z"}, "message": "Make clear that status quo \u2260 guarantee", "tree": {"sha": "11ed465f79c16a4331455dd4e21aba1b63aded36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11ed465f79c16a4331455dd4e21aba1b63aded36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a91ad60158647c1f6a89b9c01915279ce9314a65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEFcyURjhyM68BBPYTJIFAPaXwkfsFAlzgvyIACgkQJIFAPaXw\nkfshlggAqLM3CRAOSj8ku8wkIKAoNBDaHUFq1oTZIdpPSNN1XqeeIEl1nYm8ErrQ\n/MlPKlLJ5JPE4iuM1FpgMv0sTiGzKlpqJ2EMLlqzF1NhCeK2Tc6LSf1BfTEiWdPm\nr/+/DFltyTQXYTEYCNOhF4OlnltB9QdrIPHfZLYQ45ANU7ax4yUTl0WUtGbX1osy\nL5X3rNmq9MtsMVmguFryFEgeUUkE8VrCkbi+okPYAHaGu0pKJA8tfEvuyY4Dla2w\nJrrnlNuh0roxIjLppwA2fa+E1LXShLNjopba7f0ED9V51Qt8FMcj/9avuhd43uMr\nxAud6dzNWm6/IX7hNdKKkRp712MBXQ==\n=U1TW\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFPn5HNVLYG08OkH5cG7pt0botxTmqMc5T+aK0wJnYg4CP/wEAEgJy6W31ve\n7yOvnrm7FXsI8CCQ85XEqpn/doHhjhFhouybCf8Bzq4NMhhyHVoyZWA+/gjxBFzg\nvynwCJuVq5j33/o9AIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BBD5dIfMTqyrkoz6cG7GScHCPAQSU5kdhcL\n0z7X+IMPyeFakQjxIMlrPO0EBWW2056BgzxguHGteVC0DdU6Ui+EHNXqnzIQCPEE\nXOC/KfAIH9gPqDuR7HoAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFy\nLmV0ZXJuaXR5d2FsbC5jb23/8BBQnwTWat3WY+o0XUMp0umkCPEEXOC/KPAIhir4\nvFFtx9YAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb23wEKMOcxQfq1Cu2LWFJTHdwBEI8QRc4L8o8AgPCIKrHzuXuwCD3+MNLvkMjiwr\naHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----", "payload": "tree 11ed465f79c16a4331455dd4e21aba1b63aded36\nparent aa1db2476a7b6e3155bf40cc48f6bc897575c622\nauthor Peter Todd <pete@petertodd.org> 1558232853 -0400\ncommitter Peter Todd <pete@petertodd.org> 1558232853 -0400\n\nMake clear that status quo \u2260 guarantee\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a91ad60158647c1f6a89b9c01915279ce9314a65", "html_url": "https://github.com/rust-lang/rust/commit/a91ad60158647c1f6a89b9c01915279ce9314a65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a91ad60158647c1f6a89b9c01915279ce9314a65/comments", "author": {"login": "petertodd", "id": 7042, "node_id": "MDQ6VXNlcjcwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petertodd", "html_url": "https://github.com/petertodd", "followers_url": "https://api.github.com/users/petertodd/followers", "following_url": "https://api.github.com/users/petertodd/following{/other_user}", "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions", "organizations_url": "https://api.github.com/users/petertodd/orgs", "repos_url": "https://api.github.com/users/petertodd/repos", "events_url": "https://api.github.com/users/petertodd/events{/privacy}", "received_events_url": "https://api.github.com/users/petertodd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petertodd", "id": 7042, "node_id": "MDQ6VXNlcjcwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petertodd", "html_url": "https://github.com/petertodd", "followers_url": "https://api.github.com/users/petertodd/followers", "following_url": "https://api.github.com/users/petertodd/following{/other_user}", "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions", "organizations_url": "https://api.github.com/users/petertodd/orgs", "repos_url": "https://api.github.com/users/petertodd/repos", "events_url": "https://api.github.com/users/petertodd/events{/privacy}", "received_events_url": "https://api.github.com/users/petertodd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1db2476a7b6e3155bf40cc48f6bc897575c622", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1db2476a7b6e3155bf40cc48f6bc897575c622", "html_url": "https://github.com/rust-lang/rust/commit/aa1db2476a7b6e3155bf40cc48f6bc897575c622"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "bd84b46bf3d234a9e6bbb3db18775974d837241b", "filename": "src/test/run-pass/union/union-nonzero.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a91ad60158647c1f6a89b9c01915279ce9314a65/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91ad60158647c1f6a89b9c01915279ce9314a65/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs?ref=a91ad60158647c1f6a89b9c01915279ce9314a65", "patch": "@@ -6,8 +6,9 @@\n // For example, if a union `U` can contain both a `&T` and a `*const T`, there's definitely no\n // bit-value that an `Option<U>` could reuse as `None`; this test makes sure that isn't done.\n //\n-// Secondly, this tests the status quo to not apply such optimizations to types containing unions\n-// even if they're theoretically possible. (discussion: https://github.com/rust-lang/rust/issues/36394)\n+// Secondly, this tests the status quo (not a guarantee; subject to change!) to not apply such\n+// optimizations to types containing unions even if they're theoretically possible. (discussion:\n+// https://github.com/rust-lang/rust/issues/36394)\n //\n // Notably this nails down part of the behavior that `MaybeUninit` assumes: that a\n // `Option<MaybeUninit<&u8>>` does not take advantage of non-zero optimization, and thus is a safe"}]}