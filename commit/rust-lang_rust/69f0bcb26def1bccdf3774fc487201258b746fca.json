{"sha": "69f0bcb26def1bccdf3774fc487201258b746fca", "node_id": "C_kwDOAAsO6NoAKDY5ZjBiY2IyNmRlZjFiY2NkZjM3NzRmYzQ4NzIwMTI1OGI3NDZmY2E", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-28T09:28:40Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-29T14:30:54Z"}, "message": "Use futex-based locks and thread parker on DragonFlyBSD.", "tree": {"sha": "be4309b7295a8f2f31ccb446f0f86bd0e726f2f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be4309b7295a8f2f31ccb446f0f86bd0e726f2f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69f0bcb26def1bccdf3774fc487201258b746fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69f0bcb26def1bccdf3774fc487201258b746fca", "html_url": "https://github.com/rust-lang/rust/commit/69f0bcb26def1bccdf3774fc487201258b746fca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69f0bcb26def1bccdf3774fc487201258b746fca/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dfad1e3f81d649124bba15f96fd8e96431cd4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dfad1e3f81d649124bba15f96fd8e96431cd4fc", "html_url": "https://github.com/rust-lang/rust/commit/2dfad1e3f81d649124bba15f96fd8e96431cd4fc"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "cfb2d1f07de25ea13ffb57be0f324702e7387f4e", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/69f0bcb26def1bccdf3774fc487201258b746fca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f0bcb26def1bccdf3774fc487201258b746fca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=69f0bcb26def1bccdf3774fc487201258b746fca", "patch": "@@ -4,6 +4,7 @@\n     all(target_os = \"emscripten\", target_feature = \"atomics\"),\n     target_os = \"openbsd\",\n     target_os = \"netbsd\",\n+    target_os = \"dragonfly\",\n ))]\n \n use crate::sync::atomic::AtomicU32;\n@@ -158,6 +159,35 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n     }\n }\n \n+#[cfg(target_os = \"dragonfly\")]\n+pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n+    use crate::convert::TryFrom;\n+    let r = unsafe {\n+        libc::umtx_sleep(\n+            futex as *const AtomicU32 as *const i32,\n+            expected as i32,\n+            // A timeout of 0 means infinite, so we round smaller timeouts up to 1 millisecond.\n+            // Timeouts larger than i32::MAX milliseconds saturate.\n+            timeout.map_or(0, |d| {\n+                i32::try_from(d.as_millis()).map_or(i32::MAX, |millis| millis.max(1))\n+            }),\n+        )\n+    };\n+\n+    r == 0 || super::os::errno() != libc::ETIMEDOUT\n+}\n+\n+// DragonflyBSD doesn't tell us how many threads are woken up, so this doesn't return a bool.\n+#[cfg(target_os = \"dragonfly\")]\n+pub fn futex_wake(futex: &AtomicU32) {\n+    unsafe { libc::umtx_wakeup(futex as *const AtomicU32 as *const i32, 1) };\n+}\n+\n+#[cfg(target_os = \"dragonfly\")]\n+pub fn futex_wake_all(futex: &AtomicU32) {\n+    unsafe { libc::umtx_wakeup(futex as *const AtomicU32 as *const i32, i32::MAX) };\n+}\n+\n #[cfg(target_os = \"emscripten\")]\n extern \"C\" {\n     fn emscripten_futex_wake(addr: *const AtomicU32, count: libc::c_int) -> libc::c_int;"}, {"sha": "8829ed4db2574b9dc6d8236544c9e0e559afc44c", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/69f0bcb26def1bccdf3774fc487201258b746fca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f0bcb26def1bccdf3774fc487201258b746fca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=69f0bcb26def1bccdf3774fc487201258b746fca", "patch": "@@ -283,7 +283,18 @@ impl RwLock {\n     /// writer that was about to go to sleep.\n     fn wake_writer(&self) -> bool {\n         self.writer_notify.fetch_add(1, Release);\n-        futex_wake(&self.writer_notify)\n+        cfg_if::cfg_if! {\n+            if #[cfg(target_os = \"dragonfly\")] {\n+                // DragonFlyBSD doesn't tell us whether it woke up any threads or not.\n+                // So, we always return `false` here, as that still results in correct behaviour.\n+                // The downside is an extra syscall in case both readers and writers were waiting,\n+                // and unnecessarily waking up readers when a writer is about to attempt to lock the lock.\n+                futex_wake(&self.writer_notify);\n+                false\n+            } else {\n+                futex_wake(&self.writer_notify)\n+            }\n+        }\n     }\n \n     /// Spin for a while, but stop directly at the given condition."}, {"sha": "d39da200dda19b19eabb903f4fd24cfb7f8b2ea6", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69f0bcb26def1bccdf3774fc487201258b746fca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f0bcb26def1bccdf3774fc487201258b746fca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=69f0bcb26def1bccdf3774fc487201258b746fca", "patch": "@@ -5,6 +5,7 @@ cfg_if::cfg_if! {\n         all(target_os = \"emscripten\", target_feature = \"atomics\"),\n         target_os = \"openbsd\",\n         target_os = \"netbsd\",\n+        target_os = \"dragonfly\",\n     ))] {\n         mod futex;\n         mod futex_rwlock;"}, {"sha": "7fd4d3610caae54e5e496027b61548dd8d837bb8", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69f0bcb26def1bccdf3774fc487201258b746fca/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f0bcb26def1bccdf3774fc487201258b746fca/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=69f0bcb26def1bccdf3774fc487201258b746fca", "patch": "@@ -5,6 +5,7 @@ cfg_if::cfg_if! {\n         all(target_arch = \"wasm32\", target_feature = \"atomics\"),\n         target_os = \"openbsd\",\n         target_os = \"netbsd\",\n+        target_os = \"dragonfly\",\n     ))] {\n         mod futex;\n         pub use futex::Parker;"}]}