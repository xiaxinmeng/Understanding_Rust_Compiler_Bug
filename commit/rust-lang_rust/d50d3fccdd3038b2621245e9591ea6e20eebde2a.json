{"sha": "d50d3fccdd3038b2621245e9591ea6e20eebde2a", "node_id": "C_kwDOAAsO6NoAKGQ1MGQzZmNjZGQzMDM4YjI2MjEyNDVlOTU5MWVhNmUyMGVlYmRlMmE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-05T09:57:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-18T04:20:24Z"}, "message": "better lvalue errors for things implementing DerefMut", "tree": {"sha": "f8709c00fa23bce6de8f8215722a505cec13d366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8709c00fa23bce6de8f8215722a505cec13d366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d50d3fccdd3038b2621245e9591ea6e20eebde2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d50d3fccdd3038b2621245e9591ea6e20eebde2a", "html_url": "https://github.com/rust-lang/rust/commit/d50d3fccdd3038b2621245e9591ea6e20eebde2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d50d3fccdd3038b2621245e9591ea6e20eebde2a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b26580f2149c7f4196eac76525cc1d53f215b29b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b26580f2149c7f4196eac76525cc1d53f215b29b", "html_url": "https://github.com/rust-lang/rust/commit/b26580f2149c7f4196eac76525cc1d53f215b29b"}], "stats": {"total": 273, "additions": 218, "deletions": 55}, "files": [{"sha": "22683b1de75f13d63e9c62afa2e53fa40ca390d3", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -58,7 +58,8 @@ use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{self, BytePos, DesugaringKind, Span};\n use rustc_target::spec::abi::Abi;\n-use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n+use rustc_trait_selection::infer::InferCtxtExt as _;\n+use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n \n use smallvec::{smallvec, SmallVec};\n@@ -962,6 +963,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .find_map(|(ty, steps)| self.probe(|_| coerce.unify(ty, target)).ok().map(|_| steps))\n     }\n \n+    /// Given a type, this function will calculate and return the type given\n+    /// for `<Ty as Deref>::Target` only if `Ty` also implements `DerefMut`.\n+    ///\n+    /// This function is for diagnostics only, since it does not register\n+    /// trait or region sub-obligations. (presumably we could, but it's not\n+    /// particularly important for diagnostics...)\n+    pub fn deref_once_mutably_for_diagnostic(&self, expr_ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+        self.autoderef(rustc_span::DUMMY_SP, expr_ty).nth(1).and_then(|(deref_ty, _)| {\n+            self.infcx\n+                .type_implements_trait(\n+                    self.infcx.tcx.lang_items().deref_mut_trait()?,\n+                    expr_ty,\n+                    ty::List::empty(),\n+                    self.param_env,\n+                )\n+                .may_apply()\n+                .then(|| deref_ty)\n+        })\n+    }\n+\n     /// Given some expressions, their known unified type and another expression,\n     /// tries to unify the types, potentially inserting coercions on any of the\n     /// provided expressions and returns their LUB (aka \"common supertype\")."}, {"sha": "ede2180a8e9e73cf811ae198f9934e32e6280c4a", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -696,28 +696,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         };\n \n                         if let Some(hir::Node::Expr(hir::Expr {\n-                            kind: hir::ExprKind::Assign(left_expr, ..),\n+                            kind: hir::ExprKind::Assign(..),\n                             ..\n                         })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n                         {\n                             if mutability == hir::Mutability::Mut {\n-                                // Found the following case:\n-                                // fn foo(opt: &mut Option<String>){ opt = None }\n-                                //                                   ---   ^^^^\n-                                //                                   |     |\n-                                //    consider dereferencing here: `*opt`  |\n-                                // expected mutable reference, found enum `Option`\n-                                if sm.span_to_snippet(left_expr.span).is_ok() {\n-                                    return Some((\n-                                        left_expr.span.shrink_to_lo(),\n-                                        \"consider dereferencing here to assign to the mutable \\\n-                                         borrowed piece of memory\"\n-                                            .to_string(),\n-                                        \"*\".to_string(),\n-                                        Applicability::MachineApplicable,\n-                                        true,\n-                                    ));\n-                                }\n+                                // Suppressing this diagnostic, we'll properly print it in `check_expr_assign`\n+                                return None;\n                             }\n                         }\n "}, {"sha": "6d56445771a07885aa036ba00f3570fe343144e0", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -51,6 +51,7 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};\n+use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -1055,25 +1056,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n \n-        self.check_lhs_assignable(lhs, \"E0070\", span, |err| {\n-            let rhs_ty = self.check_expr(&rhs);\n-\n-            // FIXME: This could be done any time lhs_ty is DerefMut into something that\n-            // is compatible with rhs_ty, and not _just_ `&mut`\n-            if let ty::Ref(_, lhs_inner_ty, hir::Mutability::Mut) = lhs_ty.kind() {\n-                if self.can_coerce(rhs_ty, *lhs_inner_ty) {\n+        let suggest_deref_binop = |err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+                                   rhs_ty: Ty<'tcx>| {\n+            if let Some(lhs_deref_ty) = self.deref_once_mutably_for_diagnostic(lhs_ty) {\n+                // Can only assign if the type is sized, so if `DerefMut` yields a type that is\n+                // unsized, do not suggest dereferencing it.\n+                let lhs_deref_ty_is_sized = self\n+                    .infcx\n+                    .type_implements_trait(\n+                        self.tcx.lang_items().sized_trait().unwrap(),\n+                        lhs_deref_ty,\n+                        ty::List::empty(),\n+                        self.param_env,\n+                    )\n+                    .may_apply();\n+                if lhs_deref_ty_is_sized && self.can_coerce(rhs_ty, lhs_deref_ty) {\n                     err.span_suggestion_verbose(\n                         lhs.span.shrink_to_lo(),\n-                        \"consider dereferencing here to assign to the mutable \\\n-                    borrowed piece of memory\",\n+                        \"consider dereferencing here to assign to the mutably borrowed value\",\n                         \"*\".to_string(),\n                         Applicability::MachineApplicable,\n                     );\n                 }\n             }\n+        };\n+\n+        self.check_lhs_assignable(lhs, \"E0070\", span, |err| {\n+            let rhs_ty = self.check_expr(&rhs);\n+            suggest_deref_binop(err, rhs_ty);\n         });\n \n-        let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty, Some(lhs));\n+        // This is (basically) inlined `check_expr_coercable_to_type`, but we want\n+        // to suggest an additional fixup here in `suggest_deref_binop`.\n+        let rhs_ty = self.check_expr_with_hint(&rhs, lhs_ty);\n+        if let (_, Some(mut diag)) =\n+            self.demand_coerce_diag(rhs, rhs_ty, lhs_ty, Some(lhs), AllowTwoPhase::No)\n+        {\n+            suggest_deref_binop(&mut diag, rhs_ty);\n+            diag.emit();\n+        }\n \n         self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);\n "}, {"sha": "c99d9d8f9230d2824b2f1e944076f53c5ffffd8c", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -42,9 +42,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n \n         self.check_lhs_assignable(lhs, \"E0067\", op.span, |err| {\n-            if let Ref(_, rty, hir::Mutability::Mut) = lhs_ty.kind() {\n+            if let Some(lhs_deref_ty) = self.deref_once_mutably_for_diagnostic(lhs_ty) {\n                 if self\n-                    .lookup_op_method(*rty, Some(rhs_ty), Some(rhs), Op::Binary(op, IsAssign::Yes))\n+                    .lookup_op_method(\n+                        lhs_deref_ty,\n+                        Some(rhs_ty),\n+                        Some(rhs),\n+                        Op::Binary(op, IsAssign::Yes),\n+                    )\n                     .is_ok()\n                 {\n                     // Suppress this error, since we already emitted\n@@ -415,23 +420,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         (err, missing_trait, use_output)\n                     }\n                 };\n-                if let Ref(_, rty, mutability) = lhs_ty.kind() {\n-                    let is_copy =\n-                        self.infcx.type_is_copy_modulo_regions(self.param_env, *rty, lhs_expr.span);\n-                    // We should suggest `a + b` => `*a + b` if `a` is copy, and suggest\n-                    // `a += b` => `*a += b` if a is a mut ref.\n-                    // FIXME: This could be done any time lhs_ty is DerefMut into something that\n-                    // is compatible with rhs_ty, and not _just_ `&mut` (for IsAssign::Yes).\n-                    if ((is_assign == IsAssign::No && is_copy)\n-                        || (is_assign == IsAssign::Yes && *mutability == hir::Mutability::Mut))\n-                        && self\n-                            .lookup_op_method(\n-                                *rty,\n-                                Some(rhs_ty),\n-                                Some(rhs_expr),\n-                                Op::Binary(op, is_assign),\n-                            )\n-                            .is_ok()\n+\n+                let mut suggest_deref_binop = |lhs_deref_ty: Ty<'tcx>| {\n+                    if self\n+                        .lookup_op_method(\n+                            lhs_deref_ty,\n+                            Some(rhs_ty),\n+                            Some(rhs_expr),\n+                            Op::Binary(op, is_assign),\n+                        )\n+                        .is_ok()\n                     {\n                         if let Ok(lstring) = source_map.span_to_snippet(lhs_expr.span) {\n                             let msg = &format!(\n@@ -441,7 +439,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     IsAssign::Yes => \"=\",\n                                     IsAssign::No => \"\",\n                                 },\n-                                rty.peel_refs(),\n+                                lhs_deref_ty.peel_refs(),\n                                 lstring,\n                             );\n                             err.span_suggestion_verbose(\n@@ -452,6 +450,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             );\n                         }\n                     }\n+                };\n+\n+                // We should suggest `a + b` => `*a + b` if `a` is copy, and suggest\n+                // `a += b` => `*a += b` if a is a mut ref.\n+                if is_assign == IsAssign::Yes\n+                    && let Some(lhs_deref_ty) = self.deref_once_mutably_for_diagnostic(lhs_ty) {\n+                        suggest_deref_binop(lhs_deref_ty);\n+                } else if is_assign == IsAssign::No\n+                    && let Ref(_, lhs_deref_ty, _) = lhs_ty.kind() {\n+                    if self.infcx.type_is_copy_modulo_regions(self.param_env, *lhs_deref_ty, lhs_expr.span) {\n+                        suggest_deref_binop(*lhs_deref_ty);\n+                    }\n                 }\n                 if let Some(missing_trait) = missing_trait {\n                     let mut visitor = TypeParamVisitor(vec![]);"}, {"sha": "b3cb6dd06142be65bca5fe37c3d00e0a9706edd2", "filename": "src/test/ui/suggestions/mut-ref-reassignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -8,7 +8,7 @@ LL |     opt = None;\n    |\n    = note: expected mutable reference `&mut Option<String>`\n                            found enum `Option<_>`\n-help: consider dereferencing here to assign to the mutable borrowed piece of memory\n+help: consider dereferencing here to assign to the mutably borrowed value\n    |\n LL |     *opt = None;\n    |     +\n@@ -34,7 +34,7 @@ LL |     opt = Some(String::new())\n    |\n    = note: expected mutable reference `&mut Option<String>`\n                            found enum `Option<String>`\n-help: consider dereferencing here to assign to the mutable borrowed piece of memory\n+help: consider dereferencing here to assign to the mutably borrowed value\n    |\n LL |     *opt = Some(String::new())\n    |     +"}, {"sha": "0c23199af22706526f6a4acf73b8cb12622dcf53", "filename": "src/test/ui/typeck/assign-non-lval-derefmut.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.fixed?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+fn main() {\n+    let x = std::sync::Mutex::new(1usize);\n+    *x.lock().unwrap() = 2;\n+    //~^ ERROR invalid left-hand side of assignment\n+    *x.lock().unwrap() += 1;\n+    //~^ ERROR binary assignment operation `+=` cannot be applied to type `MutexGuard<'_, usize>`\n+\n+    let mut y = x.lock().unwrap();\n+    *y = 2;\n+    //~^ ERROR mismatched types\n+    *y += 1;\n+    //~^ ERROR binary assignment operation `+=` cannot be applied to type `MutexGuard<'_, usize>`\n+}"}, {"sha": "ec1882f5271b19e89dba3b0f76615685d4da4015", "filename": "src/test/ui/typeck/assign-non-lval-derefmut.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.rs?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+fn main() {\n+    let x = std::sync::Mutex::new(1usize);\n+    x.lock().unwrap() = 2;\n+    //~^ ERROR invalid left-hand side of assignment\n+    x.lock().unwrap() += 1;\n+    //~^ ERROR binary assignment operation `+=` cannot be applied to type `MutexGuard<'_, usize>`\n+\n+    let mut y = x.lock().unwrap();\n+    y = 2;\n+    //~^ ERROR mismatched types\n+    y += 1;\n+    //~^ ERROR binary assignment operation `+=` cannot be applied to type `MutexGuard<'_, usize>`\n+}"}, {"sha": "a6fcdfe21f481a3fb99435827c80454274974b32", "filename": "src/test/ui/typeck/assign-non-lval-derefmut.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-derefmut.stderr?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -0,0 +1,58 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/assign-non-lval-derefmut.rs:5:23\n+   |\n+LL |     x.lock().unwrap() = 2;\n+   |     ----------------- ^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+help: consider dereferencing here to assign to the mutably borrowed value\n+   |\n+LL |     *x.lock().unwrap() = 2;\n+   |     +\n+\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `MutexGuard<'_, usize>`\n+  --> $DIR/assign-non-lval-derefmut.rs:7:5\n+   |\n+LL |     x.lock().unwrap() += 1;\n+   |     -----------------^^^^^\n+   |     |\n+   |     cannot use `+=` on type `MutexGuard<'_, usize>`\n+   |\n+help: `+=` can be used on `usize`, you can dereference `x.lock().unwrap()`\n+   |\n+LL |     *x.lock().unwrap() += 1;\n+   |     +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/assign-non-lval-derefmut.rs:11:9\n+   |\n+LL |     let mut y = x.lock().unwrap();\n+   |                 ----------------- expected due to this value\n+LL |     y = 2;\n+   |         ^ expected struct `MutexGuard`, found integer\n+   |\n+   = note: expected struct `MutexGuard<'_, usize>`\n+                found type `{integer}`\n+help: consider dereferencing here to assign to the mutably borrowed value\n+   |\n+LL |     *y = 2;\n+   |     +\n+\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `MutexGuard<'_, usize>`\n+  --> $DIR/assign-non-lval-derefmut.rs:13:5\n+   |\n+LL |     y += 1;\n+   |     -^^^^^\n+   |     |\n+   |     cannot use `+=` on type `MutexGuard<'_, usize>`\n+   |\n+help: `+=` can be used on `usize`, you can dereference `y`\n+   |\n+LL |     *y += 1;\n+   |     +\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0070, E0308, E0368.\n+For more information about an error, try `rustc --explain E0070`."}, {"sha": "10c7b9dbfb331182333e6dfa58a7ba27f3ab0af9", "filename": "src/test/ui/typeck/assign-non-lval-mut-ref.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.fixed?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -6,4 +6,10 @@ fn main() {\n     //~^ ERROR invalid left-hand side of assignment\n     *x.last_mut().unwrap() += 1;\n     //~^ ERROR binary assignment operation `+=` cannot be applied to type `&mut usize`\n+\n+    let y = x.last_mut().unwrap();\n+    *y = 2;\n+    //~^ ERROR mismatched types\n+    *y += 1;\n+    //~^ ERROR binary assignment operation `+=` cannot be applied to type `&mut usize`\n }"}, {"sha": "bceff0ef09d190c92eea614259fe431f8c11a5b9", "filename": "src/test/ui/typeck/assign-non-lval-mut-ref.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.rs?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -6,4 +6,10 @@ fn main() {\n     //~^ ERROR invalid left-hand side of assignment\n     x.last_mut().unwrap() += 1;\n     //~^ ERROR binary assignment operation `+=` cannot be applied to type `&mut usize`\n+\n+    let y = x.last_mut().unwrap();\n+    y = 2;\n+    //~^ ERROR mismatched types\n+    y += 1;\n+    //~^ ERROR binary assignment operation `+=` cannot be applied to type `&mut usize`\n }"}, {"sha": "be2e9fe95e87144a3e27ffcfe1d4d14267c2d14e", "filename": "src/test/ui/typeck/assign-non-lval-mut-ref.stderr", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -6,7 +6,7 @@ LL |     x.last_mut().unwrap() = 2;\n    |     |\n    |     cannot assign to this expression\n    |\n-help: consider dereferencing here to assign to the mutable borrowed piece of memory\n+help: consider dereferencing here to assign to the mutably borrowed value\n    |\n LL |     *x.last_mut().unwrap() = 2;\n    |     +\n@@ -24,7 +24,33 @@ help: `+=` can be used on `usize`, you can dereference `x.last_mut().unwrap()`\n LL |     *x.last_mut().unwrap() += 1;\n    |     +\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/assign-non-lval-mut-ref.rs:11:9\n+   |\n+LL |     let y = x.last_mut().unwrap();\n+   |             --------------------- expected due to this value\n+LL |     y = 2;\n+   |         ^ expected `&mut usize`, found integer\n+   |\n+help: consider dereferencing here to assign to the mutably borrowed value\n+   |\n+LL |     *y = 2;\n+   |     +\n+\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `&mut usize`\n+  --> $DIR/assign-non-lval-mut-ref.rs:13:5\n+   |\n+LL |     y += 1;\n+   |     -^^^^^\n+   |     |\n+   |     cannot use `+=` on type `&mut usize`\n+   |\n+help: `+=` can be used on `usize`, you can dereference `y`\n+   |\n+LL |     *y += 1;\n+   |     +\n+\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0070, E0368.\n+Some errors have detailed explanations: E0070, E0308, E0368.\n For more information about an error, try `rustc --explain E0070`."}, {"sha": "167edc8942aec47d11cc2c26860ec9ca269de9d1", "filename": "src/test/ui/typeck/issue-93486.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fissue-93486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d50d3fccdd3038b2621245e9591ea6e20eebde2a/src%2Ftest%2Fui%2Ftypeck%2Fissue-93486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-93486.stderr?ref=d50d3fccdd3038b2621245e9591ea6e20eebde2a", "patch": "@@ -6,7 +6,7 @@ LL |         vec![].last_mut().unwrap() = 3_u8;\n    |         |\n    |         cannot assign to this expression\n    |\n-help: consider dereferencing here to assign to the mutable borrowed piece of memory\n+help: consider dereferencing here to assign to the mutably borrowed value\n    |\n LL |         *vec![].last_mut().unwrap() = 3_u8;\n    |         +"}]}