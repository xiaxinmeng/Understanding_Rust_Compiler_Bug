{"sha": "388e6afa1db74637169dcb65b1720c5e2f73c1d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OGU2YWZhMWRiNzQ2MzcxNjlkY2I2NWIxNzIwYzVlMmY3M2MxZDU=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-01-05T10:02:58Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-01-05T10:02:58Z"}, "message": "Add tests for drops", "tree": {"sha": "48b2abafdbc3b89bd9f344440d3325da3065cffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b2abafdbc3b89bd9f344440d3325da3065cffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/388e6afa1db74637169dcb65b1720c5e2f73c1d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/388e6afa1db74637169dcb65b1720c5e2f73c1d5", "html_url": "https://github.com/rust-lang/rust/commit/388e6afa1db74637169dcb65b1720c5e2f73c1d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/388e6afa1db74637169dcb65b1720c5e2f73c1d5/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "100a4698defac5d060ecb89c30d9c5f0dc770c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/100a4698defac5d060ecb89c30d9c5f0dc770c15", "html_url": "https://github.com/rust-lang/rust/commit/100a4698defac5d060ecb89c30d9c5f0dc770c15"}], "stats": {"total": 127, "additions": 126, "deletions": 1}, "files": [{"sha": "32053e048a98fcce908446b0b41b85c60713cb05", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 126, "deletions": 1, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/388e6afa1db74637169dcb65b1720c5e2f73c1d5/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388e6afa1db74637169dcb65b1720c5e2f73c1d5/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=388e6afa1db74637169dcb65b1720c5e2f73c1d5", "patch": "@@ -561,9 +561,11 @@ mod tests {\n     extern crate test;\n     use self::test::Bencher;\n     use super::{Arena, TypedArena};\n+    use std::cell::Cell;\n     use std::rc::Rc;\n \n     #[allow(dead_code)]\n+    #[derive(Debug, Eq, PartialEq)]\n     struct Point {\n         x: i32,\n         y: i32,\n@@ -668,11 +670,16 @@ mod tests {\n     #[test]\n     pub fn test_arena_zero_sized() {\n         let arena = Arena::new();\n+        let mut points = vec![];\n         for _ in 0..1000 {\n             for _ in 0..100 {\n                 arena.alloc(|| ());\n             }\n-            arena.alloc(|| Point { x: 1, y: 2, z: 3 });\n+            let point = arena.alloc(|| Point { x: 1, y: 2, z: 3 });\n+            points.push(point);\n+        }\n+        for point in &points {\n+            assert_eq!(**point, Point { x: 1, y: 2, z: 3 });\n         }\n     }\n \n@@ -747,6 +754,124 @@ mod tests {\n         });\n     }\n \n+    // Drop tests\n+\n+    struct DropCounter<'a> {\n+        count: &'a Cell<u32>,\n+    }\n+\n+    impl<'a> Drop for DropCounter<'a> {\n+        fn drop(&mut self) {\n+            self.count.set(self.count.get() + 1);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_arena_drop_count() {\n+        let counter = Cell::new(0);\n+        {\n+            let arena = Arena::new();\n+            for _ in 0..100 {\n+                // Allocate something with drop glue to make sure it doesn't leak.\n+                arena.alloc(|| DropCounter { count: &counter });\n+                // Allocate something with funny size and alignment, to keep\n+                // things interesting.\n+                arena.alloc(|| [0u8, 1u8, 2u8]);\n+            }\n+            // dropping\n+        };\n+        assert_eq!(counter.get(), 100);\n+    }\n+\n+    #[test]\n+    fn test_arena_drop_on_clear() {\n+        let counter = Cell::new(0);\n+        for i in 0..10 {\n+            let mut arena = Arena::new();\n+            for _ in 0..100 {\n+                // Allocate something with drop glue to make sure it doesn't leak.\n+                arena.alloc(|| DropCounter { count: &counter });\n+                // Allocate something with funny size and alignment, to keep\n+                // things interesting.\n+                arena.alloc(|| [0u8, 1u8, 2u8]);\n+            }\n+            arena.clear();\n+            assert_eq!(counter.get(), i * 100 + 100);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_typed_arena_drop_count() {\n+        let counter = Cell::new(0);\n+        {\n+            let arena: TypedArena<DropCounter> = TypedArena::new();\n+            for _ in 0..100 {\n+                // Allocate something with drop glue to make sure it doesn't leak.\n+                arena.alloc(DropCounter { count: &counter });\n+            }\n+        };\n+        assert_eq!(counter.get(), 100);\n+    }\n+\n+    #[test]\n+    fn test_typed_arena_drop_on_clear() {\n+        let counter = Cell::new(0);\n+        let mut arena: TypedArena<DropCounter> = TypedArena::new();\n+        for i in 0..10 {\n+            for _ in 0..100 {\n+                // Allocate something with drop glue to make sure it doesn't leak.\n+                arena.alloc(DropCounter { count: &counter });\n+            }\n+            arena.clear();\n+            assert_eq!(counter.get(), i * 100 + 100);\n+        }\n+    }\n+\n+    thread_local! {\n+        static DROP_COUNTER: Cell<u32> = Cell::new(0)\n+    }\n+\n+    struct SmallDroppable;\n+\n+    impl Drop for SmallDroppable {\n+        fn drop(&mut self) {\n+            DROP_COUNTER.with(|c| c.set(c.get() + 1));\n+        }\n+    }\n+\n+    #[test]\n+    fn test_arena_drop_small_count() {\n+        DROP_COUNTER.with(|c| c.set(0));\n+        {\n+            let arena = Arena::new();\n+            for _ in 0..10 {\n+                for _ in 0..10 {\n+                    // Allocate something with drop glue to make sure it doesn't leak.\n+                    arena.alloc(|| SmallDroppable);\n+                }\n+                // Allocate something with funny size and alignment, to keep\n+                // things interesting.\n+                arena.alloc(|| [0u8, 1u8, 2u8]);\n+            }\n+            // dropping\n+        };\n+        assert_eq!(DROP_COUNTER.with(|c| c.get()), 100);\n+    }\n+\n+    #[test]\n+    fn test_typed_arena_drop_small_count() {\n+        DROP_COUNTER.with(|c| c.set(0));\n+        {\n+            let arena: TypedArena<SmallDroppable> = TypedArena::new();\n+            for _ in 0..100 {\n+                // Allocate something with drop glue to make sure it doesn't leak.\n+                arena.alloc(SmallDroppable);\n+            }\n+            // dropping\n+        };\n+        assert_eq!(DROP_COUNTER.with(|c| c.get()), 100);\n+    }\n+\n     #[bench]\n     pub fn bench_noncopy(b: &mut Bencher) {\n         let arena = TypedArena::new();"}]}