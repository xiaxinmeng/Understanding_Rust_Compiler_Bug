{"sha": "89bdd481e59c5416f75668bc1b4782b57a167333", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YmRkNDgxZTU5YzU0MTZmNzU2NjhiYzFiNDc4MmI1N2ExNjczMzM=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-03T02:03:11Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-06T17:42:39Z"}, "message": "Port future to pipes. Graph500 is about 21% faster now.\n\nMaking all tests pass.", "tree": {"sha": "336bf3b732bc07cc645f4fb4e87dfab3e34cbd49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/336bf3b732bc07cc645f4fb4e87dfab3e34cbd49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89bdd481e59c5416f75668bc1b4782b57a167333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89bdd481e59c5416f75668bc1b4782b57a167333", "html_url": "https://github.com/rust-lang/rust/commit/89bdd481e59c5416f75668bc1b4782b57a167333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89bdd481e59c5416f75668bc1b4782b57a167333/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5c9cb2b3df91df4207d63611a1918e461219456", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c9cb2b3df91df4207d63611a1918e461219456", "html_url": "https://github.com/rust-lang/rust/commit/e5c9cb2b3df91df4207d63611a1918e461219456"}], "stats": {"total": 136, "additions": 112, "deletions": 24}, "files": [{"sha": "8bc46de26b29744b85ff58f886b0c82ec0d547f4", "filename": "src/libcore/future.rs", "status": "modified", "additions": 78, "deletions": 19, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/89bdd481e59c5416f75668bc1b4782b57a167333/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bdd481e59c5416f75668bc1b4782b57a167333/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=89bdd481e59c5416f75668bc1b4782b57a167333", "patch": "@@ -22,7 +22,10 @@ export get;\n export with;\n export spawn;\n \n-/// The future type\n+// for task.rs\n+export future_pipe;\n+\n+#[doc = \"The future type\"]\n enum future<A> = {\n     mut v: either<@A, fn@() -> A>\n };\n@@ -56,16 +59,34 @@ fn from_value<A>(+val: A) -> future<A> {\n     })\n }\n \n-fn from_port<A:send>(-port: comm::port<A>) -> future<A> {\n-    /*!\n-     * Create a future from a port\n-     *\n-     * The first time that the value is requested the task will block\n-     * waiting for the result to be received on the port.\n-     */\n+fn macros() {\n+    #macro[\n+        [#recv[chan],\n+         chan.recv()(chan)]\n+    ];\n+    #macro[\n+        [#move[x],\n+         unsafe { let y <- *ptr::addr_of(x); y }]\n+    ];\n+}\n \n-    do from_fn {\n-        comm::recv(port)\n+fn from_port<A:send>(-port: future_pipe::client::waiting<A>) -> future<A> {\n+    #[doc = \"\n+    Create a future from a port\n+\n+    The first time that the value is requested the task will block\n+    waiting for the result to be received on the port.\n+    \"];\n+    import future_pipe::client::recv;\n+\n+    let port = ~mut some(port);\n+    do from_fn |move port| {\n+        let mut port_ = none;\n+        port_ <-> *port;\n+        let port = option::unwrap(port_);\n+        alt (#recv(port)) {\n+          future_pipe::completed(data, _next) { #move(data) }\n+        }\n     }\n }\n \n@@ -91,12 +112,9 @@ fn spawn<A:send>(+blk: fn~() -> A) -> future<A> {\n      * value of the future.\n      */\n \n-    let mut po = comm::port();\n-    let ch = comm::chan(po);\n-    do task::spawn {\n-        comm::send(ch, blk())\n-    };\n-    from_port(po)\n+    from_port(pipes::spawn_service_recv(future_pipe::init, |ch| {\n+        future_pipe::server::completed(ch, blk());\n+    }))\n }\n \n fn get<A:copy>(future: future<A>) -> A {\n@@ -119,6 +137,48 @@ fn with<A,B>(future: future<A>, blk: fn(A) -> B) -> B {\n     blk(*v)\n }\n \n+// The pipe protocol, generated by pipec\n+mod future_pipe {\n+    fn init<T: send>() -> (client::waiting<T>, server::waiting<T>) {\n+        { let (s, c) = pipes::entangle(); (c, s) }\n+    }\n+    enum waiting<T: send> { completed(T, client::terminated), }\n+    enum terminated { }\n+    mod client {\n+        impl recv<T: send> for waiting<T> {\n+            fn recv() -> extern fn(+waiting<T>) -> future_pipe::waiting<T> {\n+                fn recv<T: send>(+pipe: waiting<T>) ->\n+                   future_pipe::waiting<T> {\n+                    option::unwrap(pipes::recv(pipe))\n+                }\n+                recv\n+            }\n+        }\n+        type waiting<T: send> = pipes::recv_packet<future_pipe::waiting<T>>;\n+        type terminated = pipes::send_packet<future_pipe::terminated>;\n+    }\n+    mod server {\n+        fn completed<T: send>(+pipe: waiting<T>, +x_0: T) -> terminated {\n+            {\n+                let (s, c) = pipes::entangle();\n+                let message = future_pipe::completed(x_0, s);\n+                pipes::send(pipe, message);\n+                c\n+            }\n+        }\n+        type waiting<T: send> = pipes::send_packet<future_pipe::waiting<T>>;\n+        impl recv for terminated {\n+            fn recv() -> extern fn(+terminated) -> future_pipe::terminated {\n+                fn recv(+pipe: terminated) -> future_pipe::terminated {\n+                    option::unwrap(pipes::recv(pipe))\n+                }\n+                recv\n+            }\n+        }\n+        type terminated = pipes::recv_packet<future_pipe::terminated>;\n+    }\n+}\n+\n #[test]\n fn test_from_value() {\n     let f = from_value(\"snail\");\n@@ -127,9 +187,8 @@ fn test_from_value() {\n \n #[test]\n fn test_from_port() {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n-    comm::send(ch, \"whale\");\n+    let (po, ch) = future_pipe::init();\n+    future_pipe::server::completed(ch, \"whale\");\n     let f = from_port(po);\n     assert get(f) == \"whale\";\n }"}, {"sha": "88f695554397aa58ae09224327376b34c07e62e1", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/89bdd481e59c5416f75668bc1b4782b57a167333/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bdd481e59c5416f75668bc1b4782b57a167333/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=89bdd481e59c5416f75668bc1b4782b57a167333", "patch": "@@ -239,3 +239,22 @@ fn spawn_service<T: send>(\n \n     client\n }\n+\n+fn spawn_service_recv<T: send>(\n+    init: native fn() -> (recv_packet<T>, send_packet<T>),\n+    +service: fn~(+send_packet<T>))\n+    -> recv_packet<T>\n+{\n+    let (client, server) = init();\n+\n+    // This is some nasty gymnastics required to safely move the pipe\n+    // into a new task.\n+    let server = ~mut some(server);\n+    do task::spawn |move service| {\n+        let mut server_ = none;\n+        server_ <-> *server;\n+        service(option::unwrap(server_))\n+    }\n+\n+    client\n+}"}, {"sha": "2d2c2660fc8807c150e0a8b657b099a88b94486d", "filename": "src/libcore/task.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/89bdd481e59c5416f75668bc1b4782b57a167333/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bdd481e59c5416f75668bc1b4782b57a167333/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=89bdd481e59c5416f75668bc1b4782b57a167333", "patch": "@@ -308,11 +308,21 @@ fn future_result(builder: builder) -> future::future<task_result> {\n fn future_task(builder: builder) -> future::future<task> {\n     //! Get a future representing the handle to the new task\n \n-    let mut po = comm::port();\n-    let ch = comm::chan(po);\n-    do add_wrapper(builder) |body| {\n-        fn~() {\n-            comm::send(ch, get_task());\n+    import future::future_pipe;\n+\n+    let (po, ch) = future_pipe::init();\n+\n+    let ch = ~mut some(ch);\n+\n+    do add_wrapper(builder) |body, move ch| {\n+        let ch = { let mut t = none;\n+                  t <-> *ch;\n+                  ~mut t};\n+        fn~(move ch) {\n+            let mut po = none;\n+            po <-> *ch;\n+            future_pipe::server::completed(option::unwrap(po),\n+                                           get_task());\n             body();\n         }\n     }"}]}