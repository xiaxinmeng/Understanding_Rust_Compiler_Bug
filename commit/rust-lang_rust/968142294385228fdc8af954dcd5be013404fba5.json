{"sha": "968142294385228fdc8af954dcd5be013404fba5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ODE0MjI5NDM4NTIyOGZkYzhhZjk1NGRjZDViZTAxMzQwNGZiYTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-09T20:43:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-11T18:44:23Z"}, "message": "we are on 2018 edition, use try block", "tree": {"sha": "1952e71eefde84fb9ee117a96959eb64bbbc6868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1952e71eefde84fb9ee117a96959eb64bbbc6868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/968142294385228fdc8af954dcd5be013404fba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/968142294385228fdc8af954dcd5be013404fba5", "html_url": "https://github.com/rust-lang/rust/commit/968142294385228fdc8af954dcd5be013404fba5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/968142294385228fdc8af954dcd5be013404fba5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8f81680a1232638df81e684b60ac60f3e0318f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f81680a1232638df81e684b60ac60f3e0318f7", "html_url": "https://github.com/rust-lang/rust/commit/d8f81680a1232638df81e684b60ac60f3e0318f7"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "ef46038c3cbfc8670fcc0dc70bc963441051026c", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/968142294385228fdc8af954dcd5be013404fba5/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968142294385228fdc8af954dcd5be013404fba5/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=968142294385228fdc8af954dcd5be013404fba5", "patch": "@@ -261,10 +261,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     StackPopCleanup::Goto { ret: ret.map(|p| p.1), unwind },\n                 )?;\n \n-                // We want to pop this frame again in case there was an error, to put\n-                // the blame in the right location.  Until the 2018 edition is used in\n-                // the compiler, we have to do this with an immediately invoked function.\n-                let res = (|| {\n+                // If an error is raised here, pop the frame again to get an accurate backtrace.\n+                // To this end, we wrap it all in a `try` block.\n+                let res: InterpResult<'tcx> = try {\n                     trace!(\n                         \"caller ABI: {:?}, args: {:#?}\",\n                         caller_abi,\n@@ -363,8 +362,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             throw_ub_format!(\"calling a returning function without a return place\")\n                         }\n                     }\n-                    Ok(())\n-                })();\n+                };\n                 match res {\n                     Err(err) => {\n                         self.stack.pop();"}]}