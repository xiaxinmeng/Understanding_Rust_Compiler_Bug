{"sha": "be17a1b08c17b3381e86e3bea828a63ab69e67a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMTdhMWIwOGMxN2IzMzgxZTg2ZTNiZWE4MjhhNjNhYjY5ZTY3YTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-28T00:36:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:59Z"}, "message": "libsyntax: De-`@mut` `SCTable::table`", "tree": {"sha": "d7e30a7e3fe6afaab9ace7989b6d0810534899cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e30a7e3fe6afaab9ace7989b6d0810534899cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be17a1b08c17b3381e86e3bea828a63ab69e67a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be17a1b08c17b3381e86e3bea828a63ab69e67a9", "html_url": "https://github.com/rust-lang/rust/commit/be17a1b08c17b3381e86e3bea828a63ab69e67a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be17a1b08c17b3381e86e3bea828a63ab69e67a9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96f807def6abb5da33618712dbdd4a8cc7cb81cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/96f807def6abb5da33618712dbdd4a8cc7cb81cf", "html_url": "https://github.com/rust-lang/rust/commit/96f807def6abb5da33618712dbdd4a8cc7cb81cf"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "977a250be84fd3feffaa8d0e5e31b822a6576b74", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be17a1b08c17b3381e86e3bea828a63ab69e67a9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be17a1b08c17b3381e86e3bea828a63ab69e67a9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=be17a1b08c17b3381e86e3bea828a63ab69e67a9", "patch": "@@ -15,6 +15,7 @@ use abi::AbiSet;\n use opt_vec::OptVec;\n use parse::token::{interner_get, str_to_ident};\n \n+use std::cell::RefCell;\n use std::hashmap::HashMap;\n use std::option::Option;\n use std::to_str::ToStr;\n@@ -88,7 +89,7 @@ pub type SyntaxContext = u32;\n // it should cut down on memory use *a lot*; applying a mark\n // to a tree containing 50 identifiers would otherwise generate\n pub struct SCTable {\n-    table : ~[SyntaxContext_],\n+    table : RefCell<~[SyntaxContext_]>,\n     mark_memo : HashMap<(SyntaxContext,Mrk),SyntaxContext>,\n     rename_memo : HashMap<(SyntaxContext,Ident,Name),SyntaxContext>\n }"}, {"sha": "3e34c44fdcbc64a707e72aa99fdfe6b9abad7a52", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/be17a1b08c17b3381e86e3bea828a63ab69e67a9/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be17a1b08c17b3381e86e3bea828a63ab69e67a9/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=be17a1b08c17b3381e86e3bea828a63ab69e67a9", "patch": "@@ -719,7 +719,10 @@ pub fn new_mark_internal(m:Mrk, tail:SyntaxContext,table:&mut SCTable)\n     // let try_lookup = table.mark_memo.find(&key);\n     match table.mark_memo.contains_key(&key) {\n         false => {\n-            let new_idx = idx_push(&mut table.table,Mark(m,tail));\n+            let new_idx = {\n+                let mut table = table.table.borrow_mut();\n+                idx_push(table.get(), Mark(m,tail))\n+            };\n             table.mark_memo.insert(key,new_idx);\n             new_idx\n         }\n@@ -746,7 +749,10 @@ pub fn new_rename_internal(id:Ident, to:Name, tail:SyntaxContext, table: &mut SC\n     //let try_lookup = table.rename_memo.find(&key);\n     match table.rename_memo.contains_key(&key) {\n         false => {\n-            let new_idx = idx_push(&mut table.table,Rename(id,to,tail));\n+            let new_idx = {\n+                let mut table = table.table.borrow_mut();\n+                idx_push(table.get(), Rename(id,to,tail))\n+            };\n             table.rename_memo.insert(key,new_idx);\n             new_idx\n         }\n@@ -764,7 +770,7 @@ pub fn new_rename_internal(id:Ident, to:Name, tail:SyntaxContext, table: &mut SC\n // FIXME #8215 : currently pub to allow testing\n pub fn new_sctable_internal() -> SCTable {\n     SCTable {\n-        table: ~[EmptyCtxt,IllegalCtxt],\n+        table: RefCell::new(~[EmptyCtxt,IllegalCtxt]),\n         mark_memo: HashMap::new(),\n         rename_memo: HashMap::new()\n     }\n@@ -786,7 +792,8 @@ pub fn get_sctable() -> @mut SCTable {\n /// print out an SCTable for debugging\n pub fn display_sctable(table : &SCTable) {\n     error!(\"SC table:\");\n-    for (idx,val) in table.table.iter().enumerate() {\n+    let table = table.table.borrow();\n+    for (idx,val) in table.get().iter().enumerate() {\n         error!(\"{:4u} : {:?}\",idx,val);\n     }\n }\n@@ -832,7 +839,11 @@ pub fn resolve_internal(id : Ident,\n     match resolve_table.contains_key(&key) {\n         false => {\n             let resolved = {\n-                match table.table[id.ctxt] {\n+                let result = {\n+                    let table = table.table.borrow();\n+                    table.get()[id.ctxt]\n+                };\n+                match result {\n                     EmptyCtxt => id.name,\n                     // ignore marks here:\n                     Mark(_,subctxt) =>\n@@ -877,7 +888,11 @@ pub fn marksof(ctxt: SyntaxContext, stopname: Name, table: &SCTable) -> ~[Mrk] {\n     let mut result = ~[];\n     let mut loopvar = ctxt;\n     loop {\n-        match table.table[loopvar] {\n+        let table_entry = {\n+            let table = table.table.borrow();\n+            table.get()[loopvar]\n+        };\n+        match table_entry {\n             EmptyCtxt => {return result;},\n             Mark(mark,tl) => {\n                 xorPush(&mut result,mark);\n@@ -901,7 +916,8 @@ pub fn marksof(ctxt: SyntaxContext, stopname: Name, table: &SCTable) -> ~[Mrk] {\n /// FAILS when outside is not a mark.\n pub fn mtwt_outer_mark(ctxt: SyntaxContext) -> Mrk {\n     let sctable = get_sctable();\n-    match sctable.table[ctxt] {\n+    let table = sctable.table.borrow();\n+    match table.get()[ctxt] {\n         ast::Mark(mrk,_) => mrk,\n         _ => fail!(\"can't retrieve outer mark when outside is not a mark\")\n     }\n@@ -1018,7 +1034,8 @@ mod test {\n     fn refold_test_sc(mut sc: SyntaxContext, table : &SCTable) -> ~[TestSC] {\n         let mut result = ~[];\n         loop {\n-            match table.table[sc] {\n+            let table = table.table.borrow();\n+            match table.get()[sc] {\n                 EmptyCtxt => {return result;},\n                 Mark(mrk,tail) => {\n                     result.push(M(mrk));\n@@ -1040,9 +1057,12 @@ mod test {\n \n         let test_sc = ~[M(3),R(id(101,0),14),M(9)];\n         assert_eq!(unfold_test_sc(test_sc.clone(),EMPTY_CTXT,&mut t),4);\n-        assert_eq!(t.table[2],Mark(9,0));\n-        assert_eq!(t.table[3],Rename(id(101,0),14,2));\n-        assert_eq!(t.table[4],Mark(3,3));\n+        {\n+            let table = t.table.borrow();\n+            assert_eq!(table.get()[2],Mark(9,0));\n+            assert_eq!(table.get()[3],Rename(id(101,0),14,2));\n+            assert_eq!(table.get()[4],Mark(3,3));\n+        }\n         assert_eq!(refold_test_sc(4,&t),test_sc);\n     }\n \n@@ -1057,8 +1077,11 @@ mod test {\n         let mut t = new_sctable_internal();\n \n         assert_eq!(unfold_marks(~[3,7],EMPTY_CTXT,&mut t),3);\n-        assert_eq!(t.table[2],Mark(7,0));\n-        assert_eq!(t.table[3],Mark(3,2));\n+        {\n+            let table = t.table.borrow();\n+            assert_eq!(table.get()[2],Mark(7,0));\n+            assert_eq!(table.get()[3],Mark(3,2));\n+        }\n     }\n \n     #[test] fn test_marksof () {"}, {"sha": "4df29dc21b14113131c5884cfea3b1a88876469c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be17a1b08c17b3381e86e3bea828a63ab69e67a9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be17a1b08c17b3381e86e3bea828a63ab69e67a9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=be17a1b08c17b3381e86e3bea828a63ab69e67a9", "patch": "@@ -1516,8 +1516,12 @@ foo_module!()\n                          mtwt_resolve(v.segments[0].identifier));\n                 let table = get_sctable();\n                 println(\"SC table:\");\n-                for (idx,val) in table.table.iter().enumerate() {\n-                    println!(\"{:4u} : {:?}\",idx,val);\n+\n+                {\n+                    let table = table.table.borrow();\n+                    for (idx,val) in table.get().iter().enumerate() {\n+                        println!(\"{:4u} : {:?}\",idx,val);\n+                    }\n                 }\n             }\n             assert_eq!(mtwt_resolve(v.segments[0].identifier),resolved_binding);"}]}