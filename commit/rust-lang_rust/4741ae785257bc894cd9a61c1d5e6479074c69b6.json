{"sha": "4741ae785257bc894cd9a61c1d5e6479074c69b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDFhZTc4NTI1N2JjODk0Y2Q5YTYxYzFkNWU2NDc5MDc0YzY5YjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-28T07:53:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-28T07:53:19Z"}, "message": "Merge #3359\n\n3359: Remove AnalysisHost::type_of  r=matklad a=edwin0cheng\n\nThis PR remove ` AnalysisHost::type_of` (It is subsume by hover now) and use `Semantics::type_of_x` to infer the type inside `hover` directly. \r\n\r\nAnd this also solved a bug : Right now hovering on a string literal inside a macro will show up a `&str` popup correctly. (Except if that involved builtin macro, e.g. `println`)\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "ad1607d7f7018ba36a6fd2f64907fe9200bb9dd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad1607d7f7018ba36a6fd2f64907fe9200bb9dd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4741ae785257bc894cd9a61c1d5e6479074c69b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWMbvCRBK7hj4Ov3rIwAAdHIIAK5Olr3QQkX4oI0dUu0uHqZ1\ndfI1jE7IbvxNe4Ybpkrj7dvLsOHAWz9Gq709zrww1Plcm8os47FgGzi+jmeDkS7L\nSiHNwJk5U68cHF4+OCVv+AHxC+HToK1VQGUDDgo6DsxZrNAKRK8dmwWuNjK+9wdC\npU2QQV/RrU9t/MnTzwIvh0RMlYf5EtQK+1NQZqT03NgQhywYrO+aJF9aMvvV2F46\nPio15gGFsmKcL2/+xcYhwzMX6Bt8nxM0Rwcuf833fh/HHuvROTC4uVQW8jP5NjSb\n9u+HtV98+TaMfmhpKXzVZlu27VI3F96w2TDdrRL8Pmho8mawrBJ7RysCMvrktQA=\n=x2VK\n-----END PGP SIGNATURE-----\n", "payload": "tree ad1607d7f7018ba36a6fd2f64907fe9200bb9dd1\nparent 901edac5f13ba685f67a0f2fc45b84ae65697b8b\nparent cda04d20776e5b016fbce9be350bc2b9afde9f5e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582876399 +0000\ncommitter GitHub <noreply@github.com> 1582876399 +0000\n\nMerge #3359\n\n3359: Remove AnalysisHost::type_of  r=matklad a=edwin0cheng\n\nThis PR remove ` AnalysisHost::type_of` (It is subsume by hover now) and use `Semantics::type_of_x` to infer the type inside `hover` directly. \r\n\r\nAnd this also solved a bug : Right now hovering on a string literal inside a macro will show up a `&str` popup correctly. (Except if that involved builtin macro, e.g. `println`)\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4741ae785257bc894cd9a61c1d5e6479074c69b6", "html_url": "https://github.com/rust-lang/rust/commit/4741ae785257bc894cd9a61c1d5e6479074c69b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4741ae785257bc894cd9a61c1d5e6479074c69b6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "901edac5f13ba685f67a0f2fc45b84ae65697b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/901edac5f13ba685f67a0f2fc45b84ae65697b8b", "html_url": "https://github.com/rust-lang/rust/commit/901edac5f13ba685f67a0f2fc45b84ae65697b8b"}, {"sha": "cda04d20776e5b016fbce9be350bc2b9afde9f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda04d20776e5b016fbce9be350bc2b9afde9f5e", "html_url": "https://github.com/rust-lang/rust/commit/cda04d20776e5b016fbce9be350bc2b9afde9f5e"}], "stats": {"total": 103, "additions": 24, "deletions": 79}, "files": [{"sha": "7ba4bfcacb4f669dd7711d05b63d91542f096163", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 24, "deletions": 74, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/4741ae785257bc894cd9a61c1d5e6479074c69b6/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4741ae785257bc894cd9a61c1d5e6479074c69b6/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=4741ae785257bc894cd9a61c1d5e6479074c69b6", "patch": "@@ -6,7 +6,6 @@ use ra_ide_db::{\n     RootDatabase,\n };\n use ra_syntax::{\n-    algo::find_covering_element,\n     ast::{self, DocCommentsOwner},\n     match_ast, AstNode,\n     SyntaxKind::*,\n@@ -16,7 +15,7 @@ use ra_syntax::{\n use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n     references::classify_name_ref,\n-    FilePosition, FileRange, RangeInfo,\n+    FilePosition, RangeInfo,\n };\n \n /// Contains the results when hovering over an item\n@@ -174,23 +173,25 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         .ancestors()\n         .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())?;\n \n-    // if this node is a MACRO_CALL, it means that `descend_into_macros` is failed to resolve.\n-    // (e.g expanding a builtin macro). So we give up here.\n-    if node.kind() == MACRO_CALL {\n-        return None;\n-    }\n-\n-    // FIXME: Currently `hover::typeof` do not work inside\n-    // macro expansion such that if the hover range is pointing to\n-    // a string literal, the following type_of will return None.\n-    // See also `test_hover_through_literal_string_in_macro`\n-    let frange = sema.original_range(&node);\n-    res.extend(type_of(db, frange).map(rust_code_markup));\n-    if res.is_empty() {\n-        return None;\n-    }\n-    let range = node.text_range();\n+    let ty = match_ast! {\n+        match node {\n+            ast::MacroCall(_it) => {\n+                // If this node is a MACRO_CALL, it means that `descend_into_macros` failed to resolve.\n+                // (e.g expanding a builtin macro). So we give up here.\n+                return None;\n+            },\n+            ast::Expr(it) => {\n+                sema.type_of_expr(&it)\n+            },\n+            ast::Pat(it) => {\n+                sema.type_of_pat(&it)\n+            },\n+            _ => None,\n+        }\n+    }?;\n \n+    res.extend(Some(rust_code_markup(ty.display_truncated(db, None).to_string())));\n+    let range = sema.original_range(&node).range;\n     Some(RangeInfo::new(range, res))\n }\n \n@@ -206,33 +207,12 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     }\n }\n \n-pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n-    let sema = Semantics::new(db);\n-    let source_file = sema.parse(frange.file_id);\n-    let leaf_node = find_covering_element(source_file.syntax(), frange.range);\n-    // if we picked identifier, expand to pattern/expression\n-    let node = leaf_node\n-        .ancestors()\n-        .take_while(|it| it.text_range() == leaf_node.text_range())\n-        .find(|it| ast::Expr::cast(it.clone()).is_some() || ast::Pat::cast(it.clone()).is_some())?;\n-    let ty = if let Some(ty) = ast::Expr::cast(node.clone()).and_then(|e| sema.type_of_expr(&e)) {\n-        ty\n-    } else if let Some(ty) = ast::Pat::cast(node).and_then(|p| sema.type_of_pat(&p)) {\n-        ty\n-    } else {\n-        return None;\n-    };\n-    Some(ty.display_truncated(db, None).to_string())\n-}\n-\n #[cfg(test)]\n mod tests {\n     use ra_db::FileLoader;\n     use ra_syntax::TextRange;\n \n-    use crate::mock_analysis::{\n-        analysis_and_position, single_file_with_position, single_file_with_range,\n-    };\n+    use crate::mock_analysis::{analysis_and_position, single_file_with_position};\n \n     fn trim_markup(s: &str) -> &str {\n         s.trim_start_matches(\"```rust\\n\").trim_end_matches(\"\\n```\")\n@@ -524,37 +504,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n     }\n \n-    #[test]\n-    fn test_type_of_for_function() {\n-        let (analysis, range) = single_file_with_range(\n-            \"\n-            pub fn foo() -> u32 { 1 };\n-\n-            fn main() {\n-                let foo_test = <|>foo()<|>;\n-            }\n-            \",\n-        );\n-\n-        let type_name = analysis.type_of(range).unwrap().unwrap();\n-        assert_eq!(\"u32\", &type_name);\n-    }\n-\n-    #[test]\n-    fn test_type_of_for_expr() {\n-        let (analysis, range) = single_file_with_range(\n-            \"\n-            fn main() {\n-                let foo: usize = 1;\n-                let bar = <|>1 + foo<|>;\n-            }\n-            \",\n-        );\n-\n-        let type_name = analysis.type_of(range).unwrap().unwrap();\n-        assert_eq!(\"usize\", &type_name);\n-    }\n-\n     #[test]\n     fn test_hover_infer_associated_method_result() {\n         let (analysis, position) = single_file_with_position(\n@@ -791,9 +740,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_through_literal_string_in_macro() {\n-        // FIXME: Currently `hover::type_of` do not work inside\n-        // macro expansion\n-        check_hover_no_result(\n+        let hover_on = check_hover_result(\n             r#\"\n             //- /lib.rs\n             macro_rules! arr {\n@@ -804,7 +751,10 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let _ = arr!(\"Tr<|>acks\", &mastered_for_itunes);\n             }\n             \"#,\n+            &[\"&str\"],\n         );\n+\n+        assert_eq!(hover_on, \"\\\"Tracks\\\"\");\n     }\n \n     #[test]"}, {"sha": "f61028f78c0b18377793e18cdc6082725b5e2c4b", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4741ae785257bc894cd9a61c1d5e6479074c69b6/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4741ae785257bc894cd9a61c1d5e6479074c69b6/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=4741ae785257bc894cd9a61c1d5e6479074c69b6", "patch": "@@ -455,11 +455,6 @@ impl Analysis {\n         self.with_db(|db| diagnostics::diagnostics(db, file_id))\n     }\n \n-    /// Computes the type of the expression at the given position.\n-    pub fn type_of(&self, frange: FileRange) -> Cancelable<Option<String>> {\n-        self.with_db(|db| hover::type_of(db, frange))\n-    }\n-\n     /// Returns the edit required to rename reference at the position to the new\n     /// name.\n     pub fn rename("}]}