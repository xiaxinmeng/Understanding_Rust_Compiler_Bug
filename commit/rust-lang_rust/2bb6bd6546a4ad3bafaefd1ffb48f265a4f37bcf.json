{"sha": "2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf", "node_id": "C_kwDOAAsO6NoAKDJiYjZiZDY1NDZhNGFkM2JhZmFlZmQxZmZiNDhmMjY1YTRmMzdiY2Y", "commit": {"author": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-12-01T18:50:39Z"}, "committer": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-12-11T19:51:46Z"}, "message": "Add batch flag to remote-test-server\n\nWhen using this flag, the stdout and stderr is sent in a single batch\ninstead of being streamed. It also used `Command::output` instead of\n`Command::spawn`. This is useful for targets that might support std\nbut not threading (Eg: UEFI).\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>", "tree": {"sha": "54b537d9ebe06fc421c251da8207243e83d5b3a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b537d9ebe06fc421c251da8207243e83d5b3a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE38wTHvJPLWVvpQTWBc71x4nlWnQFAmOWNNMACgkQBc71x4nl\nWnQTJw//RJ/pOxD27xQeS9D8/MDaC2qrXcpGKnPcUrAXWyy377awWQ4wqK4wuj/v\nnp6auHZLG4QwxHEZN68/9nc+lbVc02Wn6JMfaySPiWSK7gnumfdlZtnro+gnHYFZ\n9aVDehjvNkmeS6DuWRC0WP/WVPccx+j6vMRGlkY1Fv6DOSdPa3jpC2+RHfIOL0Bp\n8LumqyYp3xygThg7XA0LUNuyPlJoxxCSI9xc4S+s/6tJWRpP5hJv2YksXA4KiAVI\n0dIvP3vHQUJHEMX5ZMGzxQAq+QE/xE2nLdu/zX3CIxIeKez6Fya6piQDKJf3OQ12\n1URGwJnx/jymk49HKpO+Zvy47nLeMKo04DvoHveafkp56zrYNp71bcwlBXqaXL0e\nDY3GgfE+osifr34iYSmSukQSSP6sYx90ND1Nny4xP3RVFWq54zc5m5e5UXdFVNB5\nJQlqvbvm4+wOs8TluhOCMcNpYTtbmM+0Bri8Hma0fzdIrhYQZpA6bK1EDzfdAF1n\niqj/rkfcOawLLHx65tISVWIFi9uI1KfLqr2Q8XKe0GFNhV0CfD95ClfvZ3GW8nzC\nrwmxLavE/q5ImuIwDYHCshqJwVIw9ryPG0YjQ9ybG8Q9YVjIAU0Fhze/RkJPUbfU\nRLwqArzmPuig/lmBMcqDGcGJ4gJ8JC3C0UcJZ6mHDtnmPObVWmA=\n=vsEq\n-----END PGP SIGNATURE-----", "payload": "tree 54b537d9ebe06fc421c251da8207243e83d5b3a3\nparent 742d3f02c243964e5b868d90afd60c2907be5853\nauthor Ayush Singh <ayushsingh1325@gmail.com> 1669920639 +0530\ncommitter Ayush Singh <ayushsingh1325@gmail.com> 1670788306 +0530\n\nAdd batch flag to remote-test-server\n\nWhen using this flag, the stdout and stderr is sent in a single batch\ninstead of being streamed. It also used `Command::output` instead of\n`Command::spawn`. This is useful for targets that might support std\nbut not threading (Eg: UEFI).\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf", "html_url": "https://github.com/rust-lang/rust/commit/2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf/comments", "author": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742d3f02c243964e5b868d90afd60c2907be5853", "url": "https://api.github.com/repos/rust-lang/rust/commits/742d3f02c243964e5b868d90afd60c2907be5853", "html_url": "https://github.com/rust-lang/rust/commit/742d3f02c243964e5b868d90afd60c2907be5853"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "b81b853619152cb191cc1ee486a028439145ac2d", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf", "patch": "@@ -44,6 +44,7 @@ static TEST: AtomicUsize = AtomicUsize::new(0);\n struct Config {\n     verbose: bool,\n     sequential: bool,\n+    batch: bool,\n     bind: SocketAddr,\n }\n \n@@ -52,6 +53,7 @@ impl Config {\n         Config {\n             verbose: false,\n             sequential: false,\n+            batch: false,\n             bind: if cfg!(target_os = \"android\") || cfg!(windows) {\n                 ([0, 0, 0, 0], 12345).into()\n             } else {\n@@ -73,6 +75,7 @@ impl Config {\n                 }\n                 \"--bind\" => next_is_bind = true,\n                 \"--sequential\" => config.sequential = true,\n+                \"--batch\" => config.batch = true,\n                 \"--verbose\" | \"-v\" => config.verbose = true,\n                 \"--help\" | \"-h\" => {\n                     show_help();\n@@ -98,6 +101,7 @@ fn show_help() {\n OPTIONS:\n     --bind <IP>:<PORT>   Specify IP address and port to listen for requests, e.g. \"0.0.0.0:12345\"\n     --sequential         Run only one test at a time\n+    --batch              Send stdout and stderr in batch instead of streaming\n     -v, --verbose        Show status messages\n     -h, --help           Show this help screen\n \"#,\n@@ -268,22 +272,30 @@ fn handle_run(socket: TcpStream, work: &Path, tmp: &Path, lock: &Mutex<()>, conf\n     // Some tests assume RUST_TEST_TMPDIR exists\n     cmd.env(\"RUST_TEST_TMPDIR\", tmp.to_owned());\n \n-    // Spawn the child and ferry over stdout/stderr to the socket in a framed\n-    // fashion (poor man's style)\n-    let mut child =\n-        t!(cmd.stdin(Stdio::null()).stdout(Stdio::piped()).stderr(Stdio::piped()).spawn());\n-    drop(lock);\n-    let mut stdout = child.stdout.take().unwrap();\n-    let mut stderr = child.stderr.take().unwrap();\n     let socket = Arc::new(Mutex::new(reader.into_inner()));\n-    let socket2 = socket.clone();\n-    let thread = thread::spawn(move || my_copy(&mut stdout, 0, &*socket2));\n-    my_copy(&mut stderr, 1, &*socket);\n-    thread.join().unwrap();\n \n-    // Finally send over the exit status.\n-    let status = t!(child.wait());\n+    let status = if config.batch {\n+        let child =\n+            t!(cmd.stdin(Stdio::null()).stdout(Stdio::piped()).stderr(Stdio::piped()).output());\n+        batch_copy(&child.stdout, 0, &*socket);\n+        batch_copy(&child.stderr, 1, &*socket);\n+        child.status\n+    } else {\n+        // Spawn the child and ferry over stdout/stderr to the socket in a framed\n+        // fashion (poor man's style)\n+        let mut child =\n+            t!(cmd.stdin(Stdio::null()).stdout(Stdio::piped()).stderr(Stdio::piped()).spawn());\n+        drop(lock);\n+        let mut stdout = child.stdout.take().unwrap();\n+        let mut stderr = child.stderr.take().unwrap();\n+        let socket2 = socket.clone();\n+        let thread = thread::spawn(move || my_copy(&mut stdout, 0, &*socket2));\n+        my_copy(&mut stderr, 1, &*socket);\n+        thread.join().unwrap();\n+        t!(child.wait())\n+    };\n \n+    // Finally send over the exit status.\n     let (which, code) = get_status_code(&status);\n \n     t!(socket.lock().unwrap().write_all(&[\n@@ -356,6 +368,17 @@ fn my_copy(src: &mut dyn Read, which: u8, dst: &Mutex<dyn Write>) {\n     }\n }\n \n+fn batch_copy(buf: &[u8], which: u8, dst: &Mutex<dyn Write>) {\n+    let n = buf.len();\n+    let mut dst = dst.lock().unwrap();\n+    t!(dst.write_all(&[which, (n >> 24) as u8, (n >> 16) as u8, (n >> 8) as u8, (n >> 0) as u8,]));\n+    if n > 0 {\n+        t!(dst.write_all(buf));\n+        // Marking buf finished\n+        t!(dst.write_all(&[which, 0, 0, 0, 0,]));\n+    }\n+}\n+\n fn read_u32(r: &mut dyn Read) -> u32 {\n     let mut len = [0; 4];\n     t!(r.read_exact(&mut len));"}]}