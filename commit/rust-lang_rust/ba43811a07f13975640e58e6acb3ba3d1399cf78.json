{"sha": "ba43811a07f13975640e58e6acb3ba3d1399cf78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNDM4MTFhMDdmMTM5NzU2NDBlNThlNmFjYjNiYTNkMTM5OWNmNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-03T05:51:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-03T05:51:44Z"}, "message": "Auto merge of #58793 - Mark-Simulacrum:master-next, r=alexcrichton\n\nBootstrap compiler update for 1.35 release\n\nr? @alexcrichton", "tree": {"sha": "5b9c9a7e8b2f837d7d687ee87ff6b4dbbc635986", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b9c9a7e8b2f837d7d687ee87ff6b4dbbc635986"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba43811a07f13975640e58e6acb3ba3d1399cf78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba43811a07f13975640e58e6acb3ba3d1399cf78", "html_url": "https://github.com/rust-lang/rust/commit/ba43811a07f13975640e58e6acb3ba3d1399cf78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba43811a07f13975640e58e6acb3ba3d1399cf78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbba3d03c5d3e9fdb96556eac1be49449c41edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbba3d03c5d3e9fdb96556eac1be49449c41edc", "html_url": "https://github.com/rust-lang/rust/commit/7dbba3d03c5d3e9fdb96556eac1be49449c41edc"}, {"sha": "04679431a249570bb2ca6d5813ebb37db76cc9db", "url": "https://api.github.com/repos/rust-lang/rust/commits/04679431a249570bb2ca6d5813ebb37db76cc9db", "html_url": "https://github.com/rust-lang/rust/commit/04679431a249570bb2ca6d5813ebb37db76cc9db"}], "stats": {"total": 178, "additions": 26, "deletions": 152}, "files": [{"sha": "aa683161b6547fe5a47f102c9b6eb1078998bda4", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -14,7 +14,7 @@ use crate::Build;\n use crate::config::Config;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.34.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.35.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "dd128e096f952c521c67816020ecdbddee54c012", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -34,8 +34,7 @@\n #[cfg(not(test))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(stage0), allow_internal_unstable(box_syntax))]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n+#[allow_internal_unstable(box_syntax)]\n macro_rules! vec {\n     ($elem:expr; $n:expr) => (\n         $crate::vec::from_elem($elem, $n)"}, {"sha": "75a33394e3d2f6edb4f74ec08415c8348a7b292b", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -1282,13 +1282,11 @@ extern \"rust-intrinsic\" {\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_add` method. For example,\n     /// [`std::u32::saturating_add`](../../std/primitive.u32.html#method.saturating_add)\n-    #[cfg(not(stage0))]\n     pub fn saturating_add<T>(a: T, b: T) -> T;\n     /// Computes `a - b`, while saturating at numeric bounds.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_sub` method. For example,\n     /// [`std::u32::saturating_sub`](../../std/primitive.u32.html#method.saturating_sub)\n-    #[cfg(not(stage0))]\n     pub fn saturating_sub<T>(a: T, b: T) -> T;\n \n     /// Returns the value of the discriminant for the variant in 'v',"}, {"sha": "b052f59b0f5c2ae07f2f178764012852fae66ac5", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -1,7 +1,6 @@\n /// Entry point of thread panic. For details, see `std::macros`.\n #[macro_export]\n-#[cfg_attr(not(stage0), allow_internal_unstable(core_panic, __rust_unstable_column))]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n+#[allow_internal_unstable(core_panic, __rust_unstable_column)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {\n     () => (\n@@ -422,8 +421,7 @@ macro_rules! write {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n-#[cfg_attr(not(stage0), allow_internal_unstable(format_args_nl))]\n+#[allow_internal_unstable(format_args_nl)]\n macro_rules! writeln {\n     ($dst:expr) => (\n         write!($dst, \"\\n\")"}, {"sha": "9b1ead7edd68b03d6dd4cd7bc1b8f6ede6e32ab3", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -636,7 +636,7 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// [`Pin<P>`]: ../pin/struct.Pin.html\n /// [`pin module`]: ../../std/pin/index.html\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-#[cfg_attr(not(stage0), lang = \"unpin\")]\n+#[lang = \"unpin\"]\n pub auto trait Unpin {}\n \n /// A marker type which does not implement `Unpin`."}, {"sha": "502e3de8c637d2a49075a4268d72044628fa4f64", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -874,33 +874,6 @@ bounds instead of overflowing.\n \n Basic usage:\n \n-```\n-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n-assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_add(100), \", stringify!($SelfT),\n-\"::max_value());\",\n-$EndFeature, \"\n-```\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[inline]\n-            #[cfg(stage0)]\n-            pub fn saturating_add(self, rhs: Self) -> Self {\n-                match self.checked_add(rhs) {\n-                    Some(x) => x,\n-                    None if rhs >= 0 => Self::max_value(),\n-                    None => Self::min_value(),\n-                }\n-            }\n-\n-        }\n-\n-        doc_comment! {\n-            concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at the numeric\n-bounds instead of overflowing.\n-\n-# Examples\n-\n-Basic usage:\n-\n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_add(100), \", stringify!($SelfT),\n@@ -911,37 +884,11 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n                 intrinsics::saturating_add(self, rhs)\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating at the\n-numeric bounds instead of overflowing.\n-\n-# Examples\n-\n-Basic usage:\n-\n-```\n-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(127), -27);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_sub(100), \", stringify!($SelfT),\n-\"::min_value());\",\n-$EndFeature, \"\n-```\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[inline]\n-            #[cfg(stage0)]\n-            pub fn saturating_sub(self, rhs: Self) -> Self {\n-                match self.checked_sub(rhs) {\n-                    Some(x) => x,\n-                    None if rhs >= 0 => Self::min_value(),\n-                    None => Self::max_value(),\n-                }\n-            }\n-        }\n \n         doc_comment! {\n             concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating at the\n@@ -960,7 +907,6 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {\n                 intrinsics::saturating_sub(self, rhs)\n             }\n@@ -2780,29 +2726,6 @@ the numeric bounds instead of overflowing.\n \n Basic usage:\n \n-```\n-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n-assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n-```\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[inline]\n-            #[cfg(stage0)]\n-            pub fn saturating_add(self, rhs: Self) -> Self {\n-                match self.checked_add(rhs) {\n-                    Some(x) => x,\n-                    None => Self::max_value(),\n-                }\n-            }\n-        }\n-\n-        doc_comment! {\n-            concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at\n-the numeric bounds instead of overflowing.\n-\n-# Examples\n-\n-Basic usage:\n-\n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n@@ -2811,7 +2734,6 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n                 intrinsics::saturating_add(self, rhs)\n             }\n@@ -2825,37 +2747,13 @@ at the numeric bounds instead of overflowing.\n \n Basic usage:\n \n-```\n-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(27), 73);\n-assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n-```\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[inline]\n-            #[cfg(stage0)]\n-            pub fn saturating_sub(self, rhs: Self) -> Self {\n-                match self.checked_sub(rhs) {\n-                    Some(x) => x,\n-                    None => Self::min_value(),\n-                }\n-            }\n-        }\n-\n-        doc_comment! {\n-            concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating\n-at the numeric bounds instead of overflowing.\n-\n-# Examples\n-\n-Basic usage:\n-\n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(27), 73);\n assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {\n                 intrinsics::saturating_sub(self, rhs)\n             }"}, {"sha": "11e5b0adcc4b832a0886a29216e207d30174223a", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -279,7 +279,7 @@ use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n // implementations, are allowed because they all only use `&P`, so they cannot move\n // the value behind `pointer`.\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-#[cfg_attr(not(stage0), lang = \"pin\")]\n+#[lang = \"pin\"]\n #[fundamental]\n #[repr(transparent)]\n #[derive(Copy, Clone, Hash, Eq, Ord)]"}, {"sha": "04a49d253015f439913b542367db8a5a02cdff3a", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -290,15 +290,11 @@ pub enum Ordering {\n /// [`AtomicBool`]: struct.AtomicBool.html\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(stage0), rustc_deprecated(\n+#[rustc_deprecated(\n     since = \"1.34.0\",\n     reason = \"the `new` function is now preferred\",\n     suggestion = \"AtomicBool::new(false)\",\n-))]\n-#[cfg_attr(stage0, rustc_deprecated(\n-    since = \"1.34.0\",\n-    reason = \"the `new` function is now preferred\",\n-))]\n+)]\n pub const ATOMIC_BOOL_INIT: AtomicBool = AtomicBool::new(false);\n \n #[cfg(target_has_atomic = \"8\")]\n@@ -1158,15 +1154,11 @@ macro_rules! atomic_int {\n \n         /// An atomic integer initialized to `0`.\n         #[$stable_init_const]\n-        #[cfg_attr(stage0, rustc_deprecated(\n-            since = \"1.34.0\",\n-            reason = \"the `new` function is now preferred\",\n-        ))]\n-        #[cfg_attr(not(stage0), rustc_deprecated(\n+        #[rustc_deprecated(\n             since = \"1.34.0\",\n             reason = \"the `new` function is now preferred\",\n             suggestion = $atomic_new,\n-        ))]\n+        )]\n         pub const $atomic_init: $atomic_type = $atomic_type::new(0);\n \n         #[$stable]"}, {"sha": "029e7267c8247d40e0e5c91e4292a57966aef2ee", "filename": "src/librustc_data_structures/macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibrustc_data_structures%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibrustc_data_structures%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fmacros.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -1,8 +1,7 @@\n /// A simple static assertion macro. The first argument should be a unique\n /// ALL_CAPS identifier that describes the condition.\n #[macro_export]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n-#[cfg_attr(not(stage0), allow_internal_unstable(type_ascription))]\n+#[allow_internal_unstable(type_ascription)]\n macro_rules! static_assert {\n     ($name:ident: $test:expr) => {\n         // Use the bool to access an array such that if the bool is false, the access"}, {"sha": "9d0eb2e6b1cefc5f015926a39095afb7df53dd0c", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -53,8 +53,7 @@\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n-#[cfg_attr(not(stage0), allow_internal_unstable(__rust_unstable_column, libstd_sys_internals))]\n+#[allow_internal_unstable(__rust_unstable_column, libstd_sys_internals)]\n macro_rules! panic {\n     () => ({\n         panic!(\"explicit panic\")\n@@ -112,8 +111,7 @@ macro_rules! panic {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n-#[cfg_attr(not(stage0), allow_internal_unstable(print_internals))]\n+#[allow_internal_unstable(print_internals)]\n macro_rules! print {\n     ($($arg:tt)*) => ($crate::io::_print(format_args!($($arg)*)));\n }\n@@ -145,8 +143,7 @@ macro_rules! print {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n-#[cfg_attr(not(stage0), allow_internal_unstable(print_internals, format_args_nl))]\n+#[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! println {\n     () => (print!(\"\\n\"));\n     ($($arg:tt)*) => ({\n@@ -177,8 +174,7 @@ macro_rules! println {\n /// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n-#[cfg_attr(not(stage0), allow_internal_unstable(print_internals))]\n+#[allow_internal_unstable(print_internals)]\n macro_rules! eprint {\n     ($($arg:tt)*) => ($crate::io::_eprint(format_args!($($arg)*)));\n }\n@@ -206,8 +202,7 @@ macro_rules! eprint {\n /// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n-#[cfg_attr(not(stage0), allow_internal_unstable(print_internals, format_args_nl))]\n+#[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! eprintln {\n     () => (eprint!(\"\\n\"));\n     ($($arg:tt)*) => ({\n@@ -330,8 +325,7 @@ macro_rules! dbg {\n /// A macro to await on an async call.\n #[macro_export]\n #[unstable(feature = \"await_macro\", issue = \"50547\")]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n-#[cfg_attr(not(stage0), allow_internal_unstable(gen_future, generators))]\n+#[allow_internal_unstable(gen_future, generators)]\n #[allow_internal_unsafe]\n macro_rules! r#await {\n     ($e:expr) => { {"}, {"sha": "3a876e05eccbdaf3cf5c57300be203f22917073d", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -126,8 +126,7 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// [`std::thread::LocalKey`]: ../std/thread/struct.LocalKey.html\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n-#[cfg_attr(not(stage0), allow_internal_unstable(thread_local_internals))]\n+#[allow_internal_unstable(thread_local_internals)]\n macro_rules! thread_local {\n     // empty (base case for the recursion)\n     () => {};\n@@ -149,10 +148,7 @@ macro_rules! thread_local {\n            reason = \"should not be necessary\",\n            issue = \"0\")]\n #[macro_export]\n-#[cfg_attr(stage0, allow_internal_unstable)]\n-#[cfg_attr(not(stage0), allow_internal_unstable(\n-    thread_local_internals, cfg_target_thread_local, thread_local,\n-))]\n+#[allow_internal_unstable(thread_local_internals, cfg_target_thread_local, thread_local)]\n #[allow_internal_unsafe]\n macro_rules! __thread_local_inner {\n     (@key $(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $init:expr) => {"}, {"sha": "274c0f90442f6bac0872b6be4a3a7cbfb1d776fd", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2019-02-17\n+date: 2019-02-27\n rustc: beta\n cargo: beta\n "}, {"sha": "3f74a17e0bb98ecd711feaf8cb893cf15c76162b", "filename": "src/test/run-make-fulldeps/cross-lang-lto-clang/Makefile", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ba43811a07f13975640e58e6acb3ba3d1399cf78/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile?ref=ba43811a07f13975640e58e6acb3ba3d1399cf78", "patch": "@@ -9,17 +9,17 @@ all: cpp-executable rust-executable\n \n cpp-executable:\n \t$(RUSTC) -Clinker-plugin-lto=on -o $(TMPDIR)/librustlib-xlto.a -Copt-level=2 -Ccodegen-units=1 ./rustlib.rs\n-\t$(CLANG) -flto=thin -fuse-ld=lld -L $(TMPDIR) -lrustlib-xlto -o $(TMPDIR)/cmain ./cmain.c -O3\n+\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) $(CLANG) -flto=thin -fuse-ld=lld -L $(TMPDIR) -lrustlib-xlto -o $(TMPDIR)/cmain ./cmain.c -O3\n \t# Make sure we don't find a call instruction to the function we expect to\n \t# always be inlined.\n-\tllvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -v -e \"call.*rust_always_inlined\"\n+\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -v -e \"call.*rust_always_inlined\"\n \t# As a sanity check, make sure we do find a call instruction to a\n \t# non-inlined function\n-\tllvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -e \"call.*rust_never_inlined\"\n+\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -e \"call.*rust_never_inlined\"\n \n rust-executable:\n-\t$(CLANG) ./clib.c -flto=thin -c -o $(TMPDIR)/clib.o -O2\n+\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) $(CLANG) ./clib.c -flto=thin -c -o $(TMPDIR)/clib.o -O2\n \t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n \t$(RUSTC) -Clinker-plugin-lto=on -L$(TMPDIR) -Copt-level=2 -Clinker=$(CLANG) -Clink-arg=-fuse-ld=lld ./main.rs -o $(TMPDIR)/rsmain\n-\tllvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -e \"call.*c_never_inlined\"\n-\tllvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -v -e \"call.*c_always_inlined\"\n+\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -e \"call.*c_never_inlined\"\n+\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -v -e \"call.*c_always_inlined\""}]}