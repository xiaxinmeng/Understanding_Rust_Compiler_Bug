{"sha": "c160192f5f26279eb065a163e651ce610247b108", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNjAxOTJmNWYyNjI3OWViMDY1YTE2M2U2NTFjZTYxMDI0N2IxMDg=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-06-08T14:55:35Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-06-08T14:55:35Z"}, "message": "Replace usage of String::from_str with String:from", "tree": {"sha": "31a1254935adda45a13dc61d8e4c28b9aad8b03b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a1254935adda45a13dc61d8e4c28b9aad8b03b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c160192f5f26279eb065a163e651ce610247b108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c160192f5f26279eb065a163e651ce610247b108", "html_url": "https://github.com/rust-lang/rust/commit/c160192f5f26279eb065a163e651ce610247b108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c160192f5f26279eb065a163e651ce610247b108/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ff42435c21289cdc668081446ca349f5eb4323c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff42435c21289cdc668081446ca349f5eb4323c", "html_url": "https://github.com/rust-lang/rust/commit/2ff42435c21289cdc668081446ca349f5eb4323c"}], "stats": {"total": 211, "additions": 105, "deletions": 106}, "files": [{"sha": "185a969cbc6270d1497532a8a38eda43ef6ba869", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -651,7 +651,7 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n \n     // Write debugger script:\n     // We don't want to hang when calling `quit` while the process is still running\n-    let mut script_str = String::from_str(\"settings set auto-confirm true\\n\");\n+    let mut script_str = String::from(\"settings set auto-confirm true\\n\");\n \n     // Make LLDB emit its version, so we have it documented in the test output\n     script_str.push_str(\"version\\n\");"}, {"sha": "3235389f1d19309bf83d68418185ef987a36b18f", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -287,7 +287,7 @@ fn main() {\n     let options = config::basic_options();\n     let session = session::build_session(options, None,\n                                          syntax::diagnostics::registry::Registry::new(&[]));\n-    let filemap = session.parse_sess.codemap().new_filemap(String::from_str(\"<n/a>\"), code);\n+    let filemap = session.parse_sess.codemap().new_filemap(String::from(\"<n/a>\"), code);\n     let mut lexer = lexer::StringReader::new(session.diagnostic(), filemap);\n     let cm = session.codemap();\n "}, {"sha": "4194ac63d39fad2bbd2dda65610e18cf1380a99e", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -89,7 +89,7 @@ impl String {\n     ///\n     /// ```\n     /// # #![feature(collections)]\n-    /// let s = String::from_str(\"hello\");\n+    /// let s = String::from(\"hello\");\n     /// assert_eq!(&s[..], \"hello\");\n     /// ```\n     #[inline]\n@@ -1002,7 +1002,7 @@ pub fn as_string<'a>(x: &'a str) -> DerefString<'a> {\n     DerefString { x: as_vec(x.as_bytes()) }\n }\n \n-/// Error returned from `String::from_str`\n+/// Error returned from `String::from`\n #[unstable(feature = \"str_parse_error\", reason = \"may want to be replaced with \\\n                                                   Void if it ever exists\")]\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -1013,7 +1013,7 @@ impl FromStr for String {\n     type Err = ParseError;\n     #[inline]\n     fn from_str(s: &str) -> Result<String, ParseError> {\n-        Ok(String::from_str(s))\n+        Ok(String::from(s))\n     }\n }\n "}, {"sha": "1019e98153e6baa1703755d548123daccc7a1b13", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -71,17 +71,17 @@ fn test_rfind() {\n \n #[test]\n fn test_collect() {\n-    let empty = String::from_str(\"\");\n+    let empty = String::from(\"\");\n     let s: String = empty.chars().collect();\n     assert_eq!(empty, s);\n-    let data = String::from_str(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n+    let data = String::from(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n     let s: String = data.chars().collect();\n     assert_eq!(data, s);\n }\n \n #[test]\n fn test_into_bytes() {\n-    let data = String::from_str(\"asdf\");\n+    let data = String::from(\"asdf\");\n     let buf = data.into_bytes();\n     assert_eq!(buf, b\"asdf\");\n }\n@@ -98,7 +98,7 @@ fn test_find_str() {\n     assert!(data[2..4].find(\"ab\").is_none());\n \n     let string = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-    let mut data = String::from_str(string);\n+    let mut data = String::from(string);\n     data.push_str(string);\n     assert!(data.find(\"\u0e44\u0e17\u534e\").is_none());\n     assert_eq!(data[0..43].find(\"\"), Some(0));\n@@ -211,7 +211,7 @@ fn test_unsafe_slice() {\n     }\n     let letters = a_million_letter_a();\n     assert!(half_a_million_letter_a() ==\n-        unsafe {String::from_str(letters.slice_unchecked(\n+        unsafe {String::from(letters.slice_unchecked(\n                                  0,\n                                  500000))});\n }\n@@ -247,13 +247,13 @@ fn test_is_empty() {\n #[test]\n fn test_replace() {\n     let a = \"a\";\n-    assert_eq!(\"\".replace(a, \"b\"), String::from_str(\"\"));\n-    assert_eq!(\"a\".replace(a, \"b\"), String::from_str(\"b\"));\n-    assert_eq!(\"ab\".replace(a, \"b\"), String::from_str(\"bb\"));\n+    assert_eq!(\"\".replace(a, \"b\"), String::from(\"\"));\n+    assert_eq!(\"a\".replace(a, \"b\"), String::from(\"b\"));\n+    assert_eq!(\"ab\".replace(a, \"b\"), String::from(\"bb\"));\n     let test = \"test\";\n     assert!(\" test test \".replace(test, \"toast\") ==\n-        String::from_str(\" toast toast \"));\n-    assert_eq!(\" test test \".replace(test, \"\"), String::from_str(\"   \"));\n+        String::from(\" toast toast \"));\n+    assert_eq!(\" test test \".replace(test, \"\"), String::from(\"   \"));\n }\n \n #[test]\n@@ -328,7 +328,7 @@ fn test_slice() {\n     }\n     let letters = a_million_letter_x();\n     assert!(half_a_million_letter_x() ==\n-        String::from_str(&letters[0..3 * 500000]));\n+        String::from(&letters[0..3 * 500000]));\n }\n \n #[test]\n@@ -581,7 +581,7 @@ fn test_as_bytes() {\n fn test_as_bytes_fail() {\n     // Don't double free. (I'm not sure if this exercises the\n     // original problem code path anymore.)\n-    let s = String::from_str(\"\");\n+    let s = String::from(\"\");\n     let _bytes = s.as_bytes();\n     panic!();\n }\n@@ -623,10 +623,10 @@ fn test_subslice_offset_2() {\n \n #[test]\n fn vec_str_conversions() {\n-    let s1: String = String::from_str(\"All mimsy were the borogoves\");\n+    let s1: String = String::from(\"All mimsy were the borogoves\");\n \n     let v: Vec<u8> = s1.as_bytes().to_vec();\n-    let s2: String = String::from_str(from_utf8(&v).unwrap());\n+    let s2: String = String::from(from_utf8(&v).unwrap());\n     let mut i = 0;\n     let n1 = s1.len();\n     let n2 = v.len();\n@@ -691,39 +691,39 @@ fn test_char_at_reverse() {\n #[test]\n fn test_escape_unicode() {\n     assert_eq!(\"abc\".escape_unicode(),\n-               String::from_str(\"\\\\u{61}\\\\u{62}\\\\u{63}\"));\n+               String::from(\"\\\\u{61}\\\\u{62}\\\\u{63}\"));\n     assert_eq!(\"a c\".escape_unicode(),\n-               String::from_str(\"\\\\u{61}\\\\u{20}\\\\u{63}\"));\n+               String::from(\"\\\\u{61}\\\\u{20}\\\\u{63}\"));\n     assert_eq!(\"\\r\\n\\t\".escape_unicode(),\n-               String::from_str(\"\\\\u{d}\\\\u{a}\\\\u{9}\"));\n+               String::from(\"\\\\u{d}\\\\u{a}\\\\u{9}\"));\n     assert_eq!(\"'\\\"\\\\\".escape_unicode(),\n-               String::from_str(\"\\\\u{27}\\\\u{22}\\\\u{5c}\"));\n+               String::from(\"\\\\u{27}\\\\u{22}\\\\u{5c}\"));\n     assert_eq!(\"\\x00\\x01\\u{fe}\\u{ff}\".escape_unicode(),\n-               String::from_str(\"\\\\u{0}\\\\u{1}\\\\u{fe}\\\\u{ff}\"));\n+               String::from(\"\\\\u{0}\\\\u{1}\\\\u{fe}\\\\u{ff}\"));\n     assert_eq!(\"\\u{100}\\u{ffff}\".escape_unicode(),\n-               String::from_str(\"\\\\u{100}\\\\u{ffff}\"));\n+               String::from(\"\\\\u{100}\\\\u{ffff}\"));\n     assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_unicode(),\n-               String::from_str(\"\\\\u{10000}\\\\u{10ffff}\"));\n+               String::from(\"\\\\u{10000}\\\\u{10ffff}\"));\n     assert_eq!(\"ab\\u{fb00}\".escape_unicode(),\n-               String::from_str(\"\\\\u{61}\\\\u{62}\\\\u{fb00}\"));\n+               String::from(\"\\\\u{61}\\\\u{62}\\\\u{fb00}\"));\n     assert_eq!(\"\\u{1d4ea}\\r\".escape_unicode(),\n-               String::from_str(\"\\\\u{1d4ea}\\\\u{d}\"));\n+               String::from(\"\\\\u{1d4ea}\\\\u{d}\"));\n }\n \n #[test]\n fn test_escape_default() {\n-    assert_eq!(\"abc\".escape_default(), String::from_str(\"abc\"));\n-    assert_eq!(\"a c\".escape_default(), String::from_str(\"a c\"));\n-    assert_eq!(\"\\r\\n\\t\".escape_default(), String::from_str(\"\\\\r\\\\n\\\\t\"));\n-    assert_eq!(\"'\\\"\\\\\".escape_default(), String::from_str(\"\\\\'\\\\\\\"\\\\\\\\\"));\n+    assert_eq!(\"abc\".escape_default(), String::from(\"abc\"));\n+    assert_eq!(\"a c\".escape_default(), String::from(\"a c\"));\n+    assert_eq!(\"\\r\\n\\t\".escape_default(), String::from(\"\\\\r\\\\n\\\\t\"));\n+    assert_eq!(\"'\\\"\\\\\".escape_default(), String::from(\"\\\\'\\\\\\\"\\\\\\\\\"));\n     assert_eq!(\"\\u{100}\\u{ffff}\".escape_default(),\n-               String::from_str(\"\\\\u{100}\\\\u{ffff}\"));\n+               String::from(\"\\\\u{100}\\\\u{ffff}\"));\n     assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_default(),\n-               String::from_str(\"\\\\u{10000}\\\\u{10ffff}\"));\n+               String::from(\"\\\\u{10000}\\\\u{10ffff}\"));\n     assert_eq!(\"ab\\u{fb00}\".escape_default(),\n-               String::from_str(\"ab\\\\u{fb00}\"));\n+               String::from(\"ab\\\\u{fb00}\"));\n     assert_eq!(\"\\u{1d4ea}\\r\".escape_default(),\n-               String::from_str(\"\\\\u{1d4ea}\\\\r\"));\n+               String::from(\"\\\\u{1d4ea}\\\\r\"));\n }\n \n #[test]\n@@ -1490,12 +1490,12 @@ fn test_str_container() {\n         v.iter().map(|x| x.len()).sum()\n     }\n \n-    let s = String::from_str(\"01234\");\n+    let s = String::from(\"01234\");\n     assert_eq!(5, sum_len(&[\"012\", \"\", \"34\"]));\n-    assert_eq!(5, sum_len(&[&String::from_str(\"01\"),\n-                            &String::from_str(\"2\"),\n-                            &String::from_str(\"34\"),\n-                            &String::from_str(\"\")]));\n+    assert_eq!(5, sum_len(&[&String::from(\"01\"),\n+                            &String::from(\"2\"),\n+                            &String::from(\"34\"),\n+                            &String::from(\"\")]));\n     assert_eq!(5, sum_len(&[&s]));\n }\n "}, {"sha": "a21906f2f93a0c417f4c9bb89135f5819cf5ff97", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -37,11 +37,11 @@ fn test_unsized_to_string() {\n fn test_from_utf8() {\n     let xs = b\"hello\".to_vec();\n     assert_eq!(String::from_utf8(xs).unwrap(),\n-               String::from_str(\"hello\"));\n+               String::from(\"hello\"));\n \n     let xs = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes().to_vec();\n     assert_eq!(String::from_utf8(xs).unwrap(),\n-               String::from_str(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n+               String::from(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n     let xs = b\"hello\\xFF\".to_vec();\n     let err = String::from_utf8(xs).err().unwrap();\n@@ -60,52 +60,52 @@ fn test_from_utf8_lossy() {\n \n     let xs = b\"Hello\\xC2 There\\xFF Goodbye\";\n     assert_eq!(String::from_utf8_lossy(xs),\n-               String::from_str(\"Hello\\u{FFFD} There\\u{FFFD} Goodbye\").into_cow());\n+               String::from(\"Hello\\u{FFFD} There\\u{FFFD} Goodbye\").into_cow());\n \n     let xs = b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\";\n     assert_eq!(String::from_utf8_lossy(xs),\n-               String::from_str(\"Hello\\u{FFFD}\\u{FFFD} There\\u{FFFD} Goodbye\").into_cow());\n+               String::from(\"Hello\\u{FFFD}\\u{FFFD} There\\u{FFFD} Goodbye\").into_cow());\n \n     let xs = b\"\\xF5foo\\xF5\\x80bar\";\n     assert_eq!(String::from_utf8_lossy(xs),\n-               String::from_str(\"\\u{FFFD}foo\\u{FFFD}\\u{FFFD}bar\").into_cow());\n+               String::from(\"\\u{FFFD}foo\\u{FFFD}\\u{FFFD}bar\").into_cow());\n \n     let xs = b\"\\xF1foo\\xF1\\x80bar\\xF1\\x80\\x80baz\";\n     assert_eq!(String::from_utf8_lossy(xs),\n-               String::from_str(\"\\u{FFFD}foo\\u{FFFD}bar\\u{FFFD}baz\").into_cow());\n+               String::from(\"\\u{FFFD}foo\\u{FFFD}bar\\u{FFFD}baz\").into_cow());\n \n     let xs = b\"\\xF4foo\\xF4\\x80bar\\xF4\\xBFbaz\";\n     assert_eq!(String::from_utf8_lossy(xs),\n-               String::from_str(\"\\u{FFFD}foo\\u{FFFD}bar\\u{FFFD}\\u{FFFD}baz\").into_cow());\n+               String::from(\"\\u{FFFD}foo\\u{FFFD}bar\\u{FFFD}\\u{FFFD}baz\").into_cow());\n \n     let xs = b\"\\xF0\\x80\\x80\\x80foo\\xF0\\x90\\x80\\x80bar\";\n-    assert_eq!(String::from_utf8_lossy(xs), String::from_str(\"\\u{FFFD}\\u{FFFD}\\u{FFFD}\\u{FFFD}\\\n+    assert_eq!(String::from_utf8_lossy(xs), String::from(\"\\u{FFFD}\\u{FFFD}\\u{FFFD}\\u{FFFD}\\\n                                            foo\\u{10000}bar\").into_cow());\n \n     // surrogates\n     let xs = b\"\\xED\\xA0\\x80foo\\xED\\xBF\\xBFbar\";\n-    assert_eq!(String::from_utf8_lossy(xs), String::from_str(\"\\u{FFFD}\\u{FFFD}\\u{FFFD}foo\\\n+    assert_eq!(String::from_utf8_lossy(xs), String::from(\"\\u{FFFD}\\u{FFFD}\\u{FFFD}foo\\\n                                            \\u{FFFD}\\u{FFFD}\\u{FFFD}bar\").into_cow());\n }\n \n #[test]\n fn test_from_utf16() {\n     let pairs =\n-        [(String::from_str(\"\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\\n\"),\n+        [(String::from(\"\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\\n\"),\n           vec![0xd800, 0xdf45, 0xd800, 0xdf3f,\n             0xd800, 0xdf3b, 0xd800, 0xdf46,\n             0xd800, 0xdf39, 0xd800, 0xdf3b,\n             0xd800, 0xdf30, 0x000a]),\n \n-         (String::from_str(\"\ud801\udc12\ud801\udc49\ud801\udc2e\ud801\udc40\ud801\udc32\ud801\udc4b \ud801\udc0f\ud801\udc32\ud801\udc4d\\n\"),\n+         (String::from(\"\ud801\udc12\ud801\udc49\ud801\udc2e\ud801\udc40\ud801\udc32\ud801\udc4b \ud801\udc0f\ud801\udc32\ud801\udc4d\\n\"),\n           vec![0xd801, 0xdc12, 0xd801,\n             0xdc49, 0xd801, 0xdc2e, 0xd801,\n             0xdc40, 0xd801, 0xdc32, 0xd801,\n             0xdc4b, 0x0020, 0xd801, 0xdc0f,\n             0xd801, 0xdc32, 0xd801, 0xdc4d,\n             0x000a]),\n \n-         (String::from_str(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u00b7\ud800\udf0c\ud800\udf04\ud800\udf15\ud800\udf04\ud800\udf0b\ud800\udf09\ud800\udf11\\n\"),\n+         (String::from(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u00b7\ud800\udf0c\ud800\udf04\ud800\udf15\ud800\udf04\ud800\udf0b\ud800\udf09\ud800\udf11\\n\"),\n           vec![0xd800, 0xdf00, 0xd800, 0xdf16,\n             0xd800, 0xdf0b, 0xd800, 0xdf04,\n             0xd800, 0xdf11, 0xd800, 0xdf09,\n@@ -114,7 +114,7 @@ fn test_from_utf16() {\n             0xdf04, 0xd800, 0xdf0b, 0xd800,\n             0xdf09, 0xd800, 0xdf11, 0x000a ]),\n \n-         (String::from_str(\"\ud801\udc8b\ud801\udc98\ud801\udc88\ud801\udc91\ud801\udc9b\ud801\udc92 \ud801\udc95\ud801\udc93 \ud801\udc88\ud801\udc9a\ud801\udc8d \ud801\udc8f\ud801\udc9c\ud801\udc92\ud801\udc96\ud801\udc86 \ud801\udc95\ud801\udc86\\n\"),\n+         (String::from(\"\ud801\udc8b\ud801\udc98\ud801\udc88\ud801\udc91\ud801\udc9b\ud801\udc92 \ud801\udc95\ud801\udc93 \ud801\udc88\ud801\udc9a\ud801\udc8d \ud801\udc8f\ud801\udc9c\ud801\udc92\ud801\udc96\ud801\udc86 \ud801\udc95\ud801\udc86\\n\"),\n           vec![0xd801, 0xdc8b, 0xd801, 0xdc98,\n             0xd801, 0xdc88, 0xd801, 0xdc91,\n             0xd801, 0xdc9b, 0xd801, 0xdc92,\n@@ -127,7 +127,7 @@ fn test_from_utf16() {\n             0xd801, 0xdc95, 0xd801, 0xdc86,\n             0x000a ]),\n          // Issue #12318, even-numbered non-BMP planes\n-         (String::from_str(\"\\u{20000}\"),\n+         (String::from(\"\\u{20000}\"),\n           vec![0xD840, 0xDC00])];\n \n     for p in &pairs {\n@@ -165,22 +165,22 @@ fn test_utf16_invalid() {\n fn test_from_utf16_lossy() {\n     // completely positive cases tested above.\n     // lead + eof\n-    assert_eq!(String::from_utf16_lossy(&[0xD800]), String::from_str(\"\\u{FFFD}\"));\n+    assert_eq!(String::from_utf16_lossy(&[0xD800]), String::from(\"\\u{FFFD}\"));\n     // lead + lead\n     assert_eq!(String::from_utf16_lossy(&[0xD800, 0xD800]),\n-               String::from_str(\"\\u{FFFD}\\u{FFFD}\"));\n+               String::from(\"\\u{FFFD}\\u{FFFD}\"));\n \n     // isolated trail\n-    assert_eq!(String::from_utf16_lossy(&[0x0061, 0xDC00]), String::from_str(\"a\\u{FFFD}\"));\n+    assert_eq!(String::from_utf16_lossy(&[0x0061, 0xDC00]), String::from(\"a\\u{FFFD}\"));\n \n     // general\n     assert_eq!(String::from_utf16_lossy(&[0xD800, 0xd801, 0xdc8b, 0xD800]),\n-               String::from_str(\"\\u{FFFD}\ud801\udc8b\\u{FFFD}\"));\n+               String::from(\"\\u{FFFD}\ud801\udc8b\\u{FFFD}\"));\n }\n \n #[test]\n fn test_push_bytes() {\n-    let mut s = String::from_str(\"ABC\");\n+    let mut s = String::from(\"ABC\");\n     unsafe {\n         let mv = s.as_mut_vec();\n         mv.push_all(&[b'D']);\n@@ -201,7 +201,7 @@ fn test_push_str() {\n \n #[test]\n fn test_push() {\n-    let mut data = String::from_str(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n+    let mut data = String::from(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n     data.push('\u534e');\n     data.push('b'); // 1 byte\n     data.push('\u00a2'); // 2 byte\n@@ -212,7 +212,7 @@ fn test_push() {\n \n #[test]\n fn test_pop() {\n-    let mut data = String::from_str(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eb\u00a2\u20ac\ud852\udf62\");\n+    let mut data = String::from(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eb\u00a2\u20ac\ud852\udf62\");\n     assert_eq!(data.pop().unwrap(), '\ud852\udf62'); // 4 bytes\n     assert_eq!(data.pop().unwrap(), '\u20ac'); // 3 bytes\n     assert_eq!(data.pop().unwrap(), '\u00a2'); // 2 bytes\n@@ -223,15 +223,15 @@ fn test_pop() {\n \n #[test]\n fn test_str_truncate() {\n-    let mut s = String::from_str(\"12345\");\n+    let mut s = String::from(\"12345\");\n     s.truncate(5);\n     assert_eq!(s, \"12345\");\n     s.truncate(3);\n     assert_eq!(s, \"123\");\n     s.truncate(0);\n     assert_eq!(s, \"\");\n \n-    let mut s = String::from_str(\"12345\");\n+    let mut s = String::from(\"12345\");\n     let p = s.as_ptr();\n     s.truncate(3);\n     s.push_str(\"6\");\n@@ -242,28 +242,28 @@ fn test_str_truncate() {\n #[test]\n #[should_panic]\n fn test_str_truncate_invalid_len() {\n-    let mut s = String::from_str(\"12345\");\n+    let mut s = String::from(\"12345\");\n     s.truncate(6);\n }\n \n #[test]\n #[should_panic]\n fn test_str_truncate_split_codepoint() {\n-    let mut s = String::from_str(\"\\u{FC}\"); // \u00fc\n+    let mut s = String::from(\"\\u{FC}\"); // \u00fc\n     s.truncate(1);\n }\n \n #[test]\n fn test_str_clear() {\n-    let mut s = String::from_str(\"12345\");\n+    let mut s = String::from(\"12345\");\n     s.clear();\n     assert_eq!(s.len(), 0);\n     assert_eq!(s, \"\");\n }\n \n #[test]\n fn test_str_add() {\n-    let a = String::from_str(\"12345\");\n+    let a = String::from(\"12345\");\n     let b = a + \"2\";\n     let b = b + \"2\";\n     assert_eq!(b.len(), 7);\n@@ -473,7 +473,7 @@ fn bench_from_str(b: &mut Bencher) {\n     let s = \"Hello there, the quick brown fox jumped over the lazy dog! \\\n              Lorem ipsum dolor sit amet, consectetur. \";\n     b.iter(|| {\n-        String::from_str(s)\n+        String::from(s)\n     })\n }\n "}, {"sha": "c9a863c096352a944a26f9f8b3e9b490ae80666e", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -1783,7 +1783,7 @@ impl LifeGiver {\n     fn give_lifetime(&self) -> ast::Lifetime {\n         let mut lifetime;\n         loop {\n-            let mut s = String::from_str(\"'\");\n+            let mut s = String::from(\"'\");\n             s.push_str(&num_to_string(self.counter.get()));\n             if !self.taken.contains(&s) {\n                 lifetime = name_to_dummy_lifetime("}, {"sha": "3de91d58740b802fa2031b6cd59fd432463edacb", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -210,7 +210,7 @@ fn symbol_hash<'tcx>(tcx: &ty::ctxt<'tcx>,\n     symbol_hasher.input_str(\"-\");\n     symbol_hasher.input_str(&encoder::encoded_ty(tcx, t));\n     // Prefix with 'h' so that it never blends into adjacent digits\n-    let mut hash = String::from_str(\"h\");\n+    let mut hash = String::from(\"h\");\n     hash.push_str(&truncated_hash_result(symbol_hasher));\n     hash\n }\n@@ -294,7 +294,7 @@ pub fn mangle<PI: Iterator<Item=PathElem>>(path: PI,\n     // To be able to work on all platforms and get *some* reasonable output, we\n     // use C++ name-mangling.\n \n-    let mut n = String::from_str(\"_ZN\"); // _Z == Begin name-sequence, N == nested\n+    let mut n = String::from(\"_ZN\"); // _Z == Begin name-sequence, N == nested\n \n     fn push(n: &mut String, s: &str) {\n         let sani = sanitize(s);"}, {"sha": "30c72d68fb0e8a690fac2a6ea508ad675de136de", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -318,7 +318,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                     scope_id = item.id;\n                     match item.node {\n                         ast::ItemImpl(_, _, _, _, ref ty, _) => {\n-                            let mut result = String::from_str(\"<\");\n+                            let mut result = String::from(\"<\");\n                             result.push_str(&ty_to_string(&**ty));\n \n                             match ty::trait_of_item(&self.analysis.ty_cx,\n@@ -1341,7 +1341,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                     return\n                 }\n \n-                let mut id = String::from_str(\"$\");\n+                let mut id = String::from(\"$\");\n                 id.push_str(&ex.id.to_string());\n                 self.process_formals(&decl.inputs, &id);\n "}, {"sha": "1249d22946f65b08f9c36af36fefab1a304be505", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -152,7 +152,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n                 // If the variable is immutable, save the initialising expression.\n                 let (value, keyword) = match mt {\n-                    ast::MutMutable => (String::from_str(\"<mutable>\"), keywords::Mut),\n+                    ast::MutMutable => (String::from(\"<mutable>\"), keywords::Mut),\n                     ast::MutImmutable => (self.span_utils.snippet(expr.span), keywords::Static),\n                 };\n \n@@ -326,7 +326,7 @@ pub fn process_crate(sess: &Session,\n         Some(name) => name.to_string(),\n         None => {\n             info!(\"Could not find crate name, using 'unknown_crate'\");\n-            String::from_str(\"unknown_crate\")\n+            String::from(\"unknown_crate\")\n         },\n     };\n "}, {"sha": "c7759f4266ba5901efc5f0f7f906ee9e09e224dd", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -178,7 +178,7 @@ impl<'a> FmtStrs<'a> {\n         });\n \n         let pairs = fields.iter().zip(values);\n-        let strs = pairs.map(|(f, v)| format!(\",{},\\\"{}\\\"\", f, escape(String::from_str(v))));\n+        let strs = pairs.map(|(f, v)| format!(\",{},\\\"{}\\\"\", f, escape(String::from(v))));\n         Some(strs.fold(String::new(), |mut s, ss| {\n             s.push_str(&ss[..]);\n             s\n@@ -207,7 +207,7 @@ impl<'a> FmtStrs<'a> {\n             None => return,\n         };\n \n-        let mut result = String::from_str(label);\n+        let mut result = String::from(label);\n         result.push_str(&values_str[..]);\n         result.push_str(\"\\n\");\n         self.recorder.record(&result[..]);\n@@ -269,7 +269,7 @@ impl<'a> FmtStrs<'a> {\n         // the local case they can be overridden in one block and there is no nice way\n         // to refer to such a scope in english, so we just hack it by appending the\n         // variable def's node id\n-        let mut qualname = String::from_str(name);\n+        let mut qualname = String::from(name);\n         qualname.push_str(\"$\");\n         qualname.push_str(&id.to_string());\n         self.check_and_record(Variable,\n@@ -286,7 +286,7 @@ impl<'a> FmtStrs<'a> {\n                       fn_name: &str,\n                       name: &str,\n                       typ: &str) {\n-        let mut qualname = String::from_str(fn_name);\n+        let mut qualname = String::from(fn_name);\n         qualname.push_str(\"::\");\n         qualname.push_str(name);\n         self.check_and_record(Variable,"}, {"sha": "08cbd777c095cdefc09644f86761b0c7b4ffb050", "filename": "src/librustc_trans/save/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -83,7 +83,7 @@ impl<'a> SpanUtils<'a> {\n         // the codemap as a new filemap. This is mostly OK, but means we should\n         // not iterate over the codemap. Also, any spans over the new filemap\n         // are incompatible with spans over other filemaps.\n-        let filemap = self.sess.codemap().new_filemap(String::from_str(\"<anon-dxr>\"),\n+        let filemap = self.sess.codemap().new_filemap(String::from(\"<anon-dxr>\"),\n                                                       self.snippet(span));\n         let s = self.sess;\n         lexer::StringReader::new(s.diagnostic(), filemap)"}, {"sha": "9ba1f84407c51eb4327144db0fa9b55d65b022a5", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // Pass 2: concat strings for each elt, skipping\n                 // forwards over any cycles by advancing to rightmost\n                 // occurrence of each element in path.\n-                let mut s = String::from_str(\".\");\n+                let mut s = String::from(\".\");\n                 i = 0;\n                 while i < len {\n                     i = mm[v[i]];"}, {"sha": "71312bb60a2a59b4692e782278412b8c309f68d5", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -331,7 +331,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     // Get_template_parameters() will append a `<...>` clause to the function\n     // name if necessary.\n-    let mut function_name = String::from_str(&token::get_name(name));\n+    let mut function_name = String::from(&*token::get_name(name));\n     let template_parameters = get_template_parameters(cx,\n                                                       generics,\n                                                       param_substs,"}, {"sha": "a41a62dcd4cfafab3ef1bad2608e476119babb19", "filename": "src/librustc_trans/trans/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fnamespace.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -41,7 +41,7 @@ impl NamespaceTreeNode {\n             output.push_str(&string);\n         }\n \n-        let mut name = String::from_str(\"_ZN\");\n+        let mut name = String::from(\"_ZN\");\n         fill_nested(self, &mut name);\n         name.push_str(&format!(\"{}\", item_name.len()));\n         name.push_str(item_name);"}, {"sha": "088ada74872553c620290aacc94c5db1a63c3d85", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -2521,7 +2521,7 @@ fn lit_to_string(lit: &ast::Lit) -> String {\n         ast::LitStr(ref st, _) => st.to_string(),\n         ast::LitBinary(ref data) => format!(\"{:?}\", data),\n         ast::LitByte(b) => {\n-            let mut res = String::from_str(\"b'\");\n+            let mut res = String::from(\"b'\");\n             for c in (b as char).escape_default() {\n                 res.push(c);\n             }"}, {"sha": "9439fc3c5f405ffedf729376462f0dc3f5c491e6", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -335,8 +335,7 @@ fn resolved_path(w: &mut fmt::Formatter, did: ast::DefId, path: &clean::Path,\n     if print_all {\n         let amt = path.segments.len() - 1;\n         match rel_root {\n-            Some(root) => {\n-                let mut root = String::from_str(&root);\n+            Some(mut root) => {\n                 for seg in &path.segments[..amt] {\n                     if \"super\" == seg.name || \"self\" == seg.name {\n                         try!(write!(w, \"{}::\", seg.name));"}, {"sha": "ebf4b29a69664f49c2975eee8d733190899a9e14", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -817,7 +817,7 @@ impl<'a> SourceCollector<'a> {\n \n         // Create the intermediate directories\n         let mut cur = self.dst.clone();\n-        let mut root_path = String::from_str(\"../../\");\n+        let mut root_path = String::from(\"../../\");\n         clean_srcpath(&self.cx.src_root, &p, false, |component| {\n             cur.push(component);\n             mkdir(&cur).unwrap();"}, {"sha": "8f3e63820dac9ca30382c143a562278539b9e0b8", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -145,7 +145,7 @@ impl TocBuilder {\n                     (0, &self.top_level)\n                 }\n                 Some(entry) => {\n-                    sec_number = String::from_str(&entry.sec_number);\n+                    sec_number = entry.sec_number.clone();\n                     sec_number.push_str(\".\");\n                     (entry.level, &entry.children)\n                 }"}, {"sha": "e48651a154eb067ecbfb7990c1c04c6b0ac17484", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -90,7 +90,7 @@ fn libname(mut n: String) -> String {\n \n #[cfg(all(not(target_os=\"windows\"), not(target_os=\"macos\")))]\n fn libname(n: String) -> String {\n-    let mut i = String::from_str(\"lib\");\n+    let mut i = String::from(\"lib\");\n     i.push_str(&n);\n     i.push_str(\".so\");\n     i"}, {"sha": "0096d8d22ae8a1827f43d558713873e86f281976", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -457,7 +457,7 @@ fn spaces(wr: &mut fmt::Write, mut n: usize) -> EncodeResult {\n \n fn fmt_number_or_null(v: f64) -> string::String {\n     match v.classify() {\n-        Fp::Nan | Fp::Infinite => string::String::from_str(\"null\"),\n+        Fp::Nan | Fp::Infinite => string::String::from(\"null\"),\n         _ if v.fract() != 0f64 => v.to_string(),\n         _ => v.to_string() + \".0\",\n     }"}, {"sha": "328c75b6d9e20b92097a1f8af038b7242ab99f08", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -121,7 +121,7 @@ impl From<String> for Box<Error + Send + Sync> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, 'b> From<&'b str> for Box<Error + Send + Sync + 'a> {\n     fn from(err: &'b str) -> Box<Error + Send + Sync + 'a> {\n-        From::from(String::from_str(err))\n+        From::from(String::from(err))\n     }\n }\n "}, {"sha": "b2dc01e3ccb199a52c0af28ee8052f66f0fc70e8", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -906,8 +906,8 @@ mod tests {\n \n     #[test]\n     fn wtf8buf_from_string() {\n-        assert_eq!(Wtf8Buf::from_string(String::from_str(\"\")).bytes, b\"\");\n-        assert_eq!(Wtf8Buf::from_string(String::from_str(\"a\u00e9 \ud83d\udca9\")).bytes,\n+        assert_eq!(Wtf8Buf::from_string(String::from(\"\")).bytes, b\"\");\n+        assert_eq!(Wtf8Buf::from_string(String::from(\"a\u00e9 \ud83d\udca9\")).bytes,\n                    b\"a\\xC3\\xA9 \\xF0\\x9F\\x92\\xA9\");\n     }\n \n@@ -1049,17 +1049,17 @@ mod tests {\n     #[test]\n     fn wtf8buf_into_string() {\n         let mut string = Wtf8Buf::from_str(\"a\u00e9 \ud83d\udca9\");\n-        assert_eq!(string.clone().into_string(), Ok(String::from_str(\"a\u00e9 \ud83d\udca9\")));\n+        assert_eq!(string.clone().into_string(), Ok(String::from(\"a\u00e9 \ud83d\udca9\")));\n         string.push(CodePoint::from_u32(0xD800).unwrap());\n         assert_eq!(string.clone().into_string(), Err(string));\n     }\n \n     #[test]\n     fn wtf8buf_into_string_lossy() {\n         let mut string = Wtf8Buf::from_str(\"a\u00e9 \ud83d\udca9\");\n-        assert_eq!(string.clone().into_string_lossy(), String::from_str(\"a\u00e9 \ud83d\udca9\"));\n+        assert_eq!(string.clone().into_string_lossy(), String::from(\"a\u00e9 \ud83d\udca9\"));\n         string.push(CodePoint::from_u32(0xD800).unwrap());\n-        assert_eq!(string.clone().into_string_lossy(), String::from_str(\"a\u00e9 \ud83d\udca9\ufffd\"));\n+        assert_eq!(string.clone().into_string_lossy(), String::from(\"a\u00e9 \ud83d\udca9\ufffd\"));\n     }\n \n     #[test]\n@@ -1226,7 +1226,7 @@ mod tests {\n         assert_eq!(Wtf8::from_str(\"a\u00e9 \ud83d\udca9\").to_string_lossy(), Cow::Borrowed(\"a\u00e9 \ud83d\udca9\"));\n         let mut string = Wtf8Buf::from_str(\"a\u00e9 \ud83d\udca9\");\n         string.push(CodePoint::from_u32(0xD800).unwrap());\n-        let expected: Cow<str> = Cow::Owned(String::from_str(\"a\u00e9 \ud83d\udca9\ufffd\"));\n+        let expected: Cow<str> = Cow::Owned(String::from(\"a\u00e9 \ud83d\udca9\ufffd\"));\n         assert_eq!(string.to_string_lossy(), expected);\n     }\n "}, {"sha": "ab513f0105b41d5a245c744ea576784c4ecb15a8", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -127,7 +127,7 @@ enum NamePadding {\n \n impl TestDesc {\n     fn padded_name(&self, column_count: usize, align: NamePadding) -> String {\n-        let mut name = String::from_str(self.name.as_slice());\n+        let mut name = String::from(self.name.as_slice());\n         let fill = column_count.saturating_sub(name.len());\n         let pad = repeat(\" \").take(fill).collect::<String>();\n         match align {"}, {"sha": "cff431065ffedc951206df31122a9355b17a4043", "filename": "src/test/run-pass/issue-19811-escape-unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Fissue-19811-escape-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Fissue-19811-escape-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19811-escape-unicode.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -12,7 +12,7 @@\n #![feature(collections)]\n \n fn main() {\n-    let mut escaped = String::from_str(\"\");\n+    let mut escaped = String::from(\"\");\n     for c in '\\u{10401}'.escape_unicode() {\n         escaped.push(c);\n     }"}, {"sha": "6cc8751c554ca6ce01b6990f745258621e4e8b22", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -41,12 +41,12 @@ fn test_append() {\n     s.push_str(\"a\");\n     assert_eq!(s, \"a\");\n \n-    let mut s = String::from_str(\"a\");\n+    let mut s = String::from(\"a\");\n     s.push_str(\"b\");\n     println!(\"{}\", s.clone());\n     assert_eq!(s, \"ab\");\n \n-    let mut s = String::from_str(\"c\");\n+    let mut s = String::from(\"c\");\n     s.push_str(\"offee\");\n     assert!(s == \"coffee\");\n "}, {"sha": "83c2dadcd2f7c35a5d6772c7b3c3ca242c32709b", "filename": "src/test/run-pass/new-unicode-escapes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Fnew-unicode-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Fnew-unicode-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-unicode-escapes.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     assert_eq!(s, \"\u2a10\u2a01\u2aa0\");\n \n     let s = \"\\\\{20}\";\n-    let mut correct_s = String::from_str(\"\\\\\");\n+    let mut correct_s = String::from(\"\\\\\");\n     correct_s.push_str(\"{20}\");\n     assert_eq!(s, correct_s);\n }"}, {"sha": "ed3ddb43b261734b1911d838e6d68cdde2cccfc2", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     let s = Rc::new(\"foo\".to_string());\n     assert_eq!(&**s, \"foo\");\n \n-    let mut_s = Rc::new(RefCell::new(String::from_str(\"foo\")));\n+    let mut_s = Rc::new(RefCell::new(String::from(\"foo\")));\n     mut_s.borrow_mut().push_str(\"bar\");\n     // HACK assert_eq! would panic here because it stores the LHS and RHS in two locals.\n     assert!(&**mut_s.borrow() == \"foobar\");"}, {"sha": "3590b7c616cffe37d899e93502300162afecb57b", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     assert_eq!(*s, \"foo\".to_string());\n     assert_eq!((*s), \"foo\");\n \n-    let mut_s = Rc::new(RefCell::new(String::from_str(\"foo\")));\n+    let mut_s = Rc::new(RefCell::new(String::from(\"foo\")));\n     (*(*mut_s).borrow_mut()).push_str(\"bar\");\n     // assert_eq! would panic here because it stores the LHS and RHS in two locals.\n     assert!((*(*mut_s).borrow()) == \"foobar\");"}, {"sha": "e4ca5515653cbb5035b19489d385f023a3888a71", "filename": "src/test/run-pass/while-prelude-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c160192f5f26279eb065a163e651ce610247b108/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs?ref=c160192f5f26279eb065a163e651ce610247b108", "patch": "@@ -17,7 +17,7 @@ enum t { a, b(String), }\n \n fn make(i: isize) -> t {\n     if i > 10 { return t::a; }\n-    let mut s = String::from_str(\"hello\");\n+    let mut s = String::from(\"hello\");\n     // Ensure s is non-const.\n \n     s.push_str(\"there\");"}]}