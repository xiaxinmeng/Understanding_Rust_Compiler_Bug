{"sha": "f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMjg1YmRhZjU3ZTljYjU2MTIwOTAyYWU0YjNiMGEyNmQ3NjFmMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-02T08:47:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-02T08:47:59Z"}, "message": "Auto merge of #32549 - respeccing:rust_backtrace_disabled, r=alexcrichton\n\nallow RUST_BACKTRACE=0 to act as if unset\n\n**UPDATE:** `RUST_BACKTRACE=0` to act as if the env. var is unset! (now `0` is what `disabled` was for, below)\n\nWhen RUST_BACKTRACE is set to \"disabled\" then this acts as if the env. var is unset. So, either make sure `RUST_BACKTRACE` is not set OR set it to `disabled` to achieve the same effect.\n\nSample usage:\n\n```bash\n$ rustc -o /tmp/a.out -- <(echo 'fn main(){ panic!() }') && RUST_BACKTRACE=disabled /tmp/a.out\n!! executing '/home/zazdxscf/build/1nonpkgs/rust/rust//x86_64-unknown-linux-gnu/stage2/bin//rustc' with args: '-o /tmp/a.out -- /dev/fd/63'\nthread '<main>' panicked at 'explicit panic', /dev/fd/63:1\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n$ rustc -o /tmp/a.out -- <(echo 'fn main(){ panic!() }') && RUST_BACKTRACE=1 /tmp/a.out\n!! executing '/home/zazdxscf/build/1nonpkgs/rust/rust//x86_64-unknown-linux-gnu/stage2/bin//rustc' with args: '-o /tmp/a.out -- /dev/fd/63'\nthread '<main>' panicked at 'explicit panic', /dev/fd/63:1\nstack backtrace:\n   1:     0x55709e8148c0 - sys::backtrace::tracing::imp::write::h140f24a0cfc189b98Ru\n   2:     0x55709e816a5b - panicking::default_hook::_$u7b$$u7b$closure$u7d$$u7d$::closure.45165\n   3:     0x55709e8166e8 - panicking::default_hook::hed419823688cb82aXoA\n   4:     0x55709e810fff - sys_common::unwind::begin_unwind_inner::hbb9642f6e212d56fmHt\n   5:     0x55709e810513 - sys_common::unwind::begin_unwind::h16232867470678019594\n   6:     0x55709e810489 - main::hb524f9576270962feaa\n   7:     0x55709e816314 - sys_common::unwind::try::try_fn::h1274188004693518534\n   8:     0x55709e813dfb - __rust_try\n   9:     0x55709e815dab - rt::lang_start::h712b1cd650781872ahA\n  10:     0x55709e810679 - main\n  11:     0x7efd1026859f - __libc_start_main\n  12:     0x55709e810348 - _start\n  13:                0x0 - <unknown>\n```\n\nSome programs(eg. [vim's syntactic](https://github.com/scrooloose/syntastic) used by [rust.vim](https://github.com/rust-lang/rust.vim)) cannot unset the env. var RUST_BACKTRACE if it's already set(eg. in .bashrc) but [they can set it to some value](https://github.com/respeccing/gentooskyline/blob/cb5533e1598f871d3fdf7c3d8248ce767b5b9360/system/Z575/OSes/gentoo/on_baremetal/filesystem_now/gentoo/home/zazdxscf/build/1nonpkgs/rust.vim/upd#L17), and I needed to ensure the env. var is unset in order to avoid this issue: https://github.com/rust-lang/rust/issues/29293\n\n**EDIT:** Sample usage 2:\n\n```bash\n$ export RUST_BACKTRACE=1\n\n$ rustc -o /tmp/a.out -- <(echo 'fn main(){ panic!() }') && /tmp/a.out\n!! executing '/home/zazdxscf/build/1nonpkgs/rust/rust//x86_64-unknown-linux-gnu/stage2/bin//rustc' with args: '-o /tmp/a.out -- /dev/fd/63'\nthread '<main>' panicked at 'explicit panic', /dev/fd/63:1\nstack backtrace:\n   1:     0x55c2696738c0 - sys::backtrace::tracing::imp::write::h140f24a0cfc189b98Ru\n   2:     0x55c269675a5b - panicking::default_hook::_$u7b$$u7b$closure$u7d$$u7d$::closure.45165\n   3:     0x55c2696756e8 - panicking::default_hook::hed419823688cb82aXoA\n   4:     0x55c26966ffff - sys_common::unwind::begin_unwind_inner::hbb9642f6e212d56fmHt\n   5:     0x55c26966f513 - sys_common::unwind::begin_unwind::h16023941661074805588\n   6:     0x55c26966f489 - main::hb524f9576270962feaa\n   7:     0x55c269675314 - sys_common::unwind::try::try_fn::h1274188004693518534\n   8:     0x55c269672dfb - __rust_try\n   9:     0x55c269674dab - rt::lang_start::h712b1cd650781872ahA\n  10:     0x55c26966f679 - main\n  11:     0x7f593d58459f - __libc_start_main\n  12:     0x55c26966f348 - _start\n  13:                0x0 - <unknown>\n\n$ rustc -o /tmp/a.out -- <(echo 'fn main(){ panic!() }') && RUST_BACKTRACE=disabled /tmp/a.out\n!! executing '/home/zazdxscf/build/1nonpkgs/rust/rust//x86_64-unknown-linux-gnu/stage2/bin//rustc' with args: '-o /tmp/a.out -- /dev/fd/63'\nthread '<main>' panicked at 'explicit panic', /dev/fd/63:1\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n```", "tree": {"sha": "96e36e0edccd794ec0e137725711a122f4c22df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96e36e0edccd794ec0e137725711a122f4c22df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "html_url": "https://github.com/rust-lang/rust/commit/f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211c35afcbb7842f6f9d7fa45cee4cd192e4bfe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/211c35afcbb7842f6f9d7fa45cee4cd192e4bfe6", "html_url": "https://github.com/rust-lang/rust/commit/211c35afcbb7842f6f9d7fa45cee4cd192e4bfe6"}, {"sha": "e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "html_url": "https://github.com/rust-lang/rust/commit/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "10598e78ec5cb50c58f11e254d8c17362edf5e72", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "patch": "@@ -71,7 +71,8 @@ which includes important information about what platform you're on, what\n version of Rust you're using, etc.\n \n Sometimes, a backtrace is helpful, and so including that is nice. To get\n-a backtrace, set the `RUST_BACKTRACE` environment variable. The easiest way\n+a backtrace, set the `RUST_BACKTRACE` environment variable to a value\n+other than `0`. The easiest way\n to do this is to invoke `rustc` like this:\n \n ```bash"}, {"sha": "a034e471b6efcd9b88800d7a8490bd587fb4539f", "filename": "man/rustc.1", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "patch": "@@ -268,15 +268,15 @@ the maximum number of threads used for this purpose.\n \n .TP\n \\fBRUST_TEST_NOCAPTURE\\fR\n-A synonym for the --nocapture flag.\n+If set to a value other than \"0\", a synonym for the --nocapture flag.\n \n .TP\n \\fBRUST_MIN_STACK\\fR\n Sets the minimum stack size for new threads.\n \n .TP\n \\fBRUST_BACKTRACE\\fR\n-If set, produces a backtrace in the output of a program which panics.\n+If set to a value different than \"0\", produces a backtrace in the output of a program which panics.\n \n .SH \"EXAMPLES\"\n To build an executable from a source file with a main function:"}, {"sha": "787d77bc56c3833985b584729f00553b06b5e79c", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "patch": "@@ -263,7 +263,10 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         logfile: config.logfile.clone(),\n         run_tests: true,\n         bench_benchmarks: true,\n-        nocapture: env::var(\"RUST_TEST_NOCAPTURE\").is_ok(),\n+        nocapture: match env::var(\"RUST_TEST_NOCAPTURE\") {\n+            Ok(val) => &val != \"0\",\n+            Err(_) => false\n+        },\n         color: test::AutoColor,\n     }\n }"}, {"sha": "8a2444323f1ec61bf47c55297fe130a13b7b7d9d", "filename": "src/doc/book/functions.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Fdoc%2Fbook%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Fdoc%2Fbook%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ffunctions.md?ref=f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "patch": "@@ -246,6 +246,19 @@ stack backtrace:\n   13:                0x0 - <unknown>\n ```\n \n+If you need to override an already set `RUST_BACKTRACE`, \n+in cases when you cannot just unset the variable, \n+then set it to `0` to avoid getting a backtrace. \n+Any other value(even no value at all) turns on backtrace.\n+\n+```text\n+$ export RUST_BACKTRACE=1\n+...\n+$ RUST_BACKTRACE=0 ./diverges \n+thread '<main>' panicked at 'This function never returns!', hello.rs:2\n+note: Run with `RUST_BACKTRACE=1` for a backtrace.\n+```\n+\n `RUST_BACKTRACE` also works with Cargo\u2019s `run` command:\n \n ```text"}, {"sha": "3444b770cc8b1443ff6183bcfe2e1839c57b2780", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "patch": "@@ -1059,7 +1059,10 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n             for note in &xs {\n                 emitter.emit(None, &note[..], None, errors::Level::Note)\n             }\n-            if let None = env::var_os(\"RUST_BACKTRACE\") {\n+            if match env::var_os(\"RUST_BACKTRACE\") {\n+                Some(val) => &val != \"0\",\n+                None => false,\n+            } {\n                 emitter.emit(None,\n                              \"run with `RUST_BACKTRACE=1` for a backtrace\",\n                              None,"}, {"sha": "24e1a82a593bad2d248a3da706e55a5fb07d50c8", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "patch": "@@ -36,7 +36,7 @@ pub fn log_enabled() -> bool {\n     }\n \n     let val = match env::var_os(\"RUST_BACKTRACE\") {\n-        Some(..) => 2,\n+        Some(x) => if &x == \"0\" { 1 } else { 2 },\n         None => 1,\n     };\n     ENABLED.store(val, Ordering::SeqCst);"}, {"sha": "e7fe128a7ae8d46539850bcb97348320205aadcc", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "patch": "@@ -349,8 +349,8 @@ By default, all tests are run in parallel. This can be altered with the\n RUST_TEST_THREADS environment variable when running tests (set it to 1).\n \n All tests have their standard output and standard error captured by default.\n-This can be overridden with the --nocapture flag or the RUST_TEST_NOCAPTURE=1\n-environment variable. Logging is not captured by default.\n+This can be overridden with the --nocapture flag or setting RUST_TEST_NOCAPTURE\n+environment variable to a value other than \"0\". Logging is not captured by default.\n \n Test Attributes:\n \n@@ -399,7 +399,10 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n \n     let mut nocapture = matches.opt_present(\"nocapture\");\n     if !nocapture {\n-        nocapture = env::var(\"RUST_TEST_NOCAPTURE\").is_ok();\n+        nocapture = match env::var(\"RUST_TEST_NOCAPTURE\") {\n+            Ok(val) => &val != \"0\",\n+            Err(_) => false\n+        };\n     }\n \n     let color = match matches.opt_str(\"color\").as_ref().map(|s| &**s) {"}, {"sha": "a2108ff041dac959df70fe8bf91903dbe72ec1d0", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "patch": "@@ -86,6 +86,16 @@ fn runtest(me: &str) {\n     assert!(!s.contains(\"stack backtrace\") && !s.contains(&expected(\"foo\")),\n             \"bad output2: {}\", s);\n \n+    // Make sure the stack trace is *not* printed\n+    // (RUST_BACKTRACE=0 acts as if it were unset from our own environment,\n+    // in case developer is running `make check` with it set.)\n+    let p = template(me).arg(\"fail\").env(\"RUST_BACKTRACE\",\"0\").spawn().unwrap();\n+    let out = p.wait_with_output().unwrap();\n+    assert!(!out.status.success());\n+    let s = str::from_utf8(&out.stderr).unwrap();\n+    assert!(!s.contains(\"stack backtrace\") && !s.contains(\" - foo\"),\n+            \"bad output3: {}\", s);\n+\n     // Make sure a stack trace is printed\n     let p = template(me).arg(\"double-fail\").spawn().unwrap();\n     let out = p.wait_with_output().unwrap();"}, {"sha": "8e0b14128c83b0896cb93b218ad8c5b61829c460", "filename": "src/test/run-pass/multi-panic.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2285bdaf57e9cb56120902ae4b3b0a26d761f31/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-panic.rs?ref=f2285bdaf57e9cb56120902ae4b3b0a26d761f31", "patch": "@@ -8,6 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn check_for_no_backtrace(test: std::process::Output) {\n+    assert!(!test.status.success());\n+    let err = String::from_utf8_lossy(&test.stderr);\n+    let mut it = err.lines();\n+\n+    assert_eq!(it.next().map(|l| l.starts_with(\"thread '<unnamed>' panicked at\")), Some(true));\n+    assert_eq!(it.next(), Some(\"note: Run with `RUST_BACKTRACE=1` for a backtrace.\"));\n+    assert_eq!(it.next().map(|l| l.starts_with(\"thread '<main>' panicked at\")), Some(true));\n+    assert_eq!(it.next(), None);\n+}\n+\n fn main() {\n     let args: Vec<String> = std::env::args().collect();\n     if args.len() > 1 && args[1] == \"run_test\" {\n@@ -21,13 +32,11 @@ fn main() {\n                                                        .env_remove(\"RUST_BACKTRACE\")\n                                                        .output()\n                                                        .unwrap();\n-        assert!(!test.status.success());\n-        let err = String::from_utf8_lossy(&test.stderr);\n-        let mut it = err.lines();\n-\n-        assert_eq!(it.next().map(|l| l.starts_with(\"thread '<unnamed>' panicked at\")), Some(true));\n-        assert_eq!(it.next(), Some(\"note: Run with `RUST_BACKTRACE=1` for a backtrace.\"));\n-        assert_eq!(it.next().map(|l| l.starts_with(\"thread '<main>' panicked at\")), Some(true));\n-        assert_eq!(it.next(), None);\n+        check_for_no_backtrace(test);\n+        let test = std::process::Command::new(&args[0]).arg(\"run_test\")\n+                                                       .env(\"RUST_BACKTRACE\",\"0\")\n+                                                       .output()\n+                                                       .unwrap();\n+        check_for_no_backtrace(test);\n     }\n }"}]}