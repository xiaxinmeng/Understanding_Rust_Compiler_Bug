{"sha": "6b52ac240a7b855630f766b58c5def50b6a94071", "node_id": "C_kwDOAAsO6NoAKDZiNTJhYzI0MGE3Yjg1NTYzMGY3NjZiNThjNWRlZjUwYjZhOTQwNzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-14T07:03:10Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-26T01:16:58Z"}, "message": "Suggest {} around more bad const generic exprs", "tree": {"sha": "33f8b68de84bec7383115777c4afaf1c52c32bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33f8b68de84bec7383115777c4afaf1c52c32bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b52ac240a7b855630f766b58c5def50b6a94071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b52ac240a7b855630f766b58c5def50b6a94071", "html_url": "https://github.com/rust-lang/rust/commit/6b52ac240a7b855630f766b58c5def50b6a94071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b52ac240a7b855630f766b58c5def50b6a94071/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "html_url": "https://github.com/rust-lang/rust/commit/d3ad51b48f83329fac0cd8a9f1253f3146613c1c"}], "stats": {"total": 139, "additions": 121, "deletions": 18}, "files": [{"sha": "50310b28f9a7355bc2f3d6244ca739de2289b5e0", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6b52ac240a7b855630f766b58c5def50b6a94071/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b52ac240a7b855630f766b58c5def50b6a94071/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=6b52ac240a7b855630f766b58c5def50b6a94071", "patch": "@@ -2030,7 +2030,7 @@ impl<'a> Parser<'a> {\n         start: Span,\n         mut err: DiagnosticBuilder<'a, ErrorReported>,\n     ) -> PResult<'a, GenericArg> {\n-        let is_op = AssocOp::from_token(&self.token)\n+        let is_op_or_dot = AssocOp::from_token(&self.token)\n             .and_then(|op| {\n                 if let AssocOp::Greater\n                 | AssocOp::Less\n@@ -2046,17 +2046,18 @@ impl<'a> Parser<'a> {\n                     Some(op)\n                 }\n             })\n-            .is_some();\n+            .is_some()\n+            || self.token.kind == TokenKind::Dot;\n         // This will be true when a trait object type `Foo +` or a path which was a `const fn` with\n         // type params has been parsed.\n         let was_op =\n             matches!(self.prev_token.kind, token::BinOp(token::Plus | token::Shr) | token::Gt);\n-        if !is_op && !was_op {\n+        if !is_op_or_dot && !was_op {\n             // We perform these checks and early return to avoid taking a snapshot unnecessarily.\n             return Err(err);\n         }\n         let snapshot = self.clone();\n-        if is_op {\n+        if is_op_or_dot {\n             self.bump();\n         }\n         match self.parse_expr_res(Restrictions::CONST_EXPR, None) {\n@@ -2080,18 +2081,7 @@ impl<'a> Parser<'a> {\n                     //    |\n                     // LL |     let sr: Vec<{ (u32, _, _) = vec![] };\n                     //    |                 ^                      ^\n-                    err.multipart_suggestion(\n-                        \"expressions must be enclosed in braces to be used as const generic \\\n-                         arguments\",\n-                        vec![\n-                            (start.shrink_to_lo(), \"{ \".to_string()),\n-                            (expr.span.shrink_to_hi(), \" }\".to_string()),\n-                        ],\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    let value = self.mk_expr_err(start.to(expr.span));\n-                    err.emit();\n-                    return Ok(GenericArg::Const(AnonConst { id: ast::DUMMY_NODE_ID, value }));\n+                    return Ok(self.dummy_const_arg_needs_braces(err, start.to(expr.span)));\n                 }\n             }\n             Err(err) => {\n@@ -2102,6 +2092,23 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n+    /// Creates a dummy const argument, and reports that the expression must be enclosed in braces\n+    pub fn dummy_const_arg_needs_braces(\n+        &self,\n+        mut err: DiagnosticBuilder<'a, ErrorReported>,\n+        span: Span,\n+    ) -> GenericArg {\n+        err.multipart_suggestion(\n+            \"expressions must be enclosed in braces to be used as const generic \\\n+             arguments\",\n+            vec![(span.shrink_to_lo(), \"{ \".to_string()), (span.shrink_to_hi(), \" }\".to_string())],\n+            Applicability::MaybeIncorrect,\n+        );\n+        let value = self.mk_expr_err(span);\n+        err.emit();\n+        GenericArg::Const(AnonConst { id: ast::DUMMY_NODE_ID, value })\n+    }\n+\n     /// Get the diagnostics for the cases where `move async` is found.\n     ///\n     /// `move_async_span` starts at the 'm' of the move keyword and ends with the 'c' of the async keyword"}, {"sha": "0ffc9d09355247201dff633d99e511d4607574bf", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b52ac240a7b855630f766b58c5def50b6a94071/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b52ac240a7b855630f766b58c5def50b6a94071/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=6b52ac240a7b855630f766b58c5def50b6a94071", "patch": "@@ -1,5 +1,5 @@\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n-use super::{Parser, TokenType};\n+use super::{Parser, Restrictions, TokenType};\n use crate::maybe_whole;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n@@ -634,7 +634,22 @@ impl<'a> Parser<'a> {\n         } else if self.token.is_keyword(kw::Const) {\n             return self.recover_const_param_declaration(ty_generics);\n         } else {\n-            return Ok(None);\n+            // Fall back by trying to parse a const-expr expression. If we successfully do so,\n+            // then we should report an error that it needs to be wrapped in braces.\n+            let snapshot = self.clone();\n+            match self.parse_expr_res(Restrictions::CONST_EXPR, None) {\n+                Ok(expr) => {\n+                    return Ok(Some(self.dummy_const_arg_needs_braces(\n+                        self.struct_span_err(expr.span, \"invalid const generic expression\"),\n+                        expr.span,\n+                    )));\n+                }\n+                Err(err) => {\n+                    *self = snapshot;\n+                    err.cancel();\n+                    return Ok(None);\n+                }\n+            }\n         };\n         Ok(Some(arg))\n     }"}, {"sha": "ca91643edf72735d4a885579c97c17ded0591dd2", "filename": "src/test/ui/const-generics/bad-const-generic-exprs.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b52ac240a7b855630f766b58c5def50b6a94071/src%2Ftest%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b52ac240a7b855630f766b58c5def50b6a94071/src%2Ftest%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.rs?ref=6b52ac240a7b855630f766b58c5def50b6a94071", "patch": "@@ -0,0 +1,22 @@\n+struct Wow<const N: usize>;\n+\n+fn main() {\n+    let _: Wow<if true {}>;\n+    //~^ ERROR invalid const generic expression\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<|| ()>;\n+    //~^ ERROR invalid const generic expression\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<A.b>;\n+    //~^ ERROR expected one of\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<A.0>;\n+    //~^ ERROR expected one of\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+\n+    // FIXME(compiler-errors): This one is still unsatisfying,\n+    // and probably a case I could see someone typing by accident..\n+    let _: Wow<[12]>;\n+    //~^ ERROR expected type, found\n+    //~| ERROR type provided when a constant was expected\n+}"}, {"sha": "24668b08b8a568c611a1b88d654c6e3e49767e39", "filename": "src/test/ui/const-generics/bad-const-generic-exprs.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6b52ac240a7b855630f766b58c5def50b6a94071/src%2Ftest%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b52ac240a7b855630f766b58c5def50b6a94071/src%2Ftest%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.stderr?ref=6b52ac240a7b855630f766b58c5def50b6a94071", "patch": "@@ -0,0 +1,59 @@\n+error: invalid const generic expression\n+  --> $DIR/bad-const-generic-exprs.rs:4:16\n+   |\n+LL |     let _: Wow<if true {}>;\n+   |                ^^^^^^^^^^\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ if true {} }>;\n+   |                +            +\n+\n+error: invalid const generic expression\n+  --> $DIR/bad-const-generic-exprs.rs:7:16\n+   |\n+LL |     let _: Wow<|| ()>;\n+   |                ^^^^^\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ || () }>;\n+   |                +       +\n+\n+error: expected one of `,` or `>`, found `.`\n+  --> $DIR/bad-const-generic-exprs.rs:10:17\n+   |\n+LL |     let _: Wow<A.b>;\n+   |                 ^ expected one of `,` or `>`\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ A.b }>;\n+   |                +     +\n+\n+error: expected one of `,` or `>`, found `.`\n+  --> $DIR/bad-const-generic-exprs.rs:13:17\n+   |\n+LL |     let _: Wow<A.0>;\n+   |                 ^ expected one of `,` or `>`\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ A.0 }>;\n+   |                +     +\n+\n+error: expected type, found `12`\n+  --> $DIR/bad-const-generic-exprs.rs:19:17\n+   |\n+LL |     let _: Wow<[12]>;\n+   |                 ^^ expected type\n+\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/bad-const-generic-exprs.rs:19:16\n+   |\n+LL |     let _: Wow<[12]>;\n+   |                ^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0747`."}]}