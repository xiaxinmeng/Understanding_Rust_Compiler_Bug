{"sha": "360edd611d3de389c09685097cd9944d61bc8f07", "node_id": "C_kwDOAAsO6NoAKDM2MGVkZDYxMWQzZGUzODljMDk2ODUwOTdjZDk5NDRkNjFiYzhmMDc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-23T13:34:39Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-28T17:09:00Z"}, "message": "Also use the RPIT back compat hack in trait projection", "tree": {"sha": "4bd28960d43c6f0f66262358958d97540b01b8a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd28960d43c6f0f66262358958d97540b01b8a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360edd611d3de389c09685097cd9944d61bc8f07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360edd611d3de389c09685097cd9944d61bc8f07", "html_url": "https://github.com/rust-lang/rust/commit/360edd611d3de389c09685097cd9944d61bc8f07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360edd611d3de389c09685097cd9944d61bc8f07/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "html_url": "https://github.com/rust-lang/rust/commit/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5"}], "stats": {"total": 72, "additions": 29, "deletions": 43}, "files": [{"sha": "e8cd5988b96ec93269fc6724c179a0c6c40947c1", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/360edd611d3de389c09685097cd9944d61bc8f07/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360edd611d3de389c09685097cd9944d61bc8f07/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=360edd611d3de389c09685097cd9944d61bc8f07", "patch": "@@ -39,15 +39,20 @@ pub struct OpaqueTypeDecl<'tcx> {\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    pub fn replace_opaque_types_with_inference_vars(\n+    /// This is a backwards compatibility hack to prevent breaking changes from\n+    /// lazy TAIT around RPIT handling.\n+    pub fn replace_opaque_types_with_inference_vars<T: TypeFoldable<'tcx>>(\n         &self,\n-        ty: Ty<'tcx>,\n+        value: T,\n         body_id: HirId,\n         span: Span,\n         param_env: ty::ParamEnv<'tcx>,\n-    ) -> InferOk<'tcx, Ty<'tcx>> {\n+    ) -> InferOk<'tcx, T> {\n+        if !value.has_opaque_types() {\n+            return InferOk { value, obligations: vec![] };\n+        }\n         let mut obligations = vec![];\n-        let value = ty.fold_with(&mut ty::fold::BottomUpFolder {\n+        let value = value.fold_with(&mut ty::fold::BottomUpFolder {\n             tcx: self.tcx,\n             lt_op: |lt| lt,\n             ct_op: |ct| ct,"}, {"sha": "d4ec677a0b1c55602601c8edf29222e865e29562", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/360edd611d3de389c09685097cd9944d61bc8f07/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360edd611d3de389c09685097cd9944d61bc8f07/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=360edd611d3de389c09685097cd9944d61bc8f07", "patch": "@@ -214,10 +214,21 @@ fn project_and_unify_type<'cx, 'tcx>(\n         Err(InProgress) => return Ok(Err(InProgress)),\n     };\n     debug!(?normalized, ?obligations, \"project_and_unify_type result\");\n-    match infcx\n-        .at(&obligation.cause, obligation.param_env)\n-        .eq(normalized, obligation.predicate.term)\n-    {\n+    let actual = obligation.predicate.term;\n+    // HACK: lazy TAIT would regress src/test/ui/impl-trait/nested-return-type2.rs, so we add\n+    // a back-compat hack hat converts the RPITs into inference vars, just like they were before\n+    // lazy TAIT.\n+    // This does not affect TAITs in general, as tested in the nested-return-type-tait* tests.\n+    let InferOk { value: actual, obligations: new } =\n+        selcx.infcx().replace_opaque_types_with_inference_vars(\n+            actual,\n+            obligation.cause.body_id,\n+            obligation.cause.span,\n+            obligation.param_env,\n+        );\n+    obligations.extend(new);\n+\n+    match infcx.at(&obligation.cause, obligation.param_env).eq(normalized, actual) {\n         Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n             obligations.extend(inferred_obligations);\n             Ok(Ok(Some(obligations)))"}, {"sha": "39928d543e15d79a2d0e74d1c5b7affdb5ae2bf0", "filename": "src/test/ui/impl-trait/nested-return-type2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/360edd611d3de389c09685097cd9944d61bc8f07/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360edd611d3de389c09685097cd9944d61bc8f07/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs?ref=360edd611d3de389c09685097cd9944d61bc8f07", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n trait Duh {}\n \n impl Duh for i32 {}\n@@ -17,10 +19,10 @@ impl<R: Duh, F: FnMut() -> R> Trait for F {\n // created, causing the inference var to be set to `impl Send` instead of\n // the hidden type. We already have obligations registered on the inference\n // var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n-// type does not implement `Duh`, even if its hidden type does. So we error out.\n+// type does not implement `Duh`, even if its hidden type does.\n+// Lazy TAIT would error out, but we inserted a hack to make it work again,\n+// keeping backwards compatibility.\n fn foo() -> impl Trait<Assoc = impl Send> {\n-    //~^ ERROR `impl Send: Duh` is not satisfied\n-    //~| ERROR `impl Send: Duh` is not satisfied\n     || 42\n }\n "}, {"sha": "be6c19795ae7b93ea30dda9f5b44af2bd57cf336", "filename": "src/test/ui/impl-trait/nested-return-type2.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr?ref=dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "patch": "@@ -1,32 +0,0 @@\n-error[E0277]: the trait bound `impl Send: Duh` is not satisfied\n-  --> $DIR/nested-return-type2.rs:21:13\n-   |\n-LL | fn foo() -> impl Trait<Assoc = impl Send> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Duh` is not implemented for `impl Send`\n-   |\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2.rs:24:5: 24:10]`\n-  --> $DIR/nested-return-type2.rs:12:31\n-   |\n-LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n-   |                               ^^^^^     ^\n-\n-error[E0277]: the trait bound `impl Send: Duh` is not satisfied\n-  --> $DIR/nested-return-type2.rs:21:43\n-   |\n-LL |   fn foo() -> impl Trait<Assoc = impl Send> {\n-   |  ___________________________________________^\n-LL | |\n-LL | |\n-LL | |     || 42\n-LL | | }\n-   | |_^ the trait `Duh` is not implemented for `impl Send`\n-   |\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2.rs:24:5: 24:10]`\n-  --> $DIR/nested-return-type2.rs:12:31\n-   |\n-LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n-   |                               ^^^^^     ^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}]}