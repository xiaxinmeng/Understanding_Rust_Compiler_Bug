{"sha": "8c3a066d8d6fec4720c171130816c97ed209ce95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjM2EwNjZkOGQ2ZmVjNDcyMGMxNzExMzA4MTZjOTdlZDIwOWNlOTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-09T15:24:42Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-09T15:24:42Z"}, "message": "get rid of the constants cache in the stepper\n\nthis is possible due to the removal of `FnEvalContext`", "tree": {"sha": "9b7be55eb77070690a61f3f90e526d9156420bfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b7be55eb77070690a61f3f90e526d9156420bfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c3a066d8d6fec4720c171130816c97ed209ce95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWYo6AAoJEFbW7qD8Z6xGb3QQAIj9tFnTfhMPe2lY0lGqfcNi\nCn4R+Xx60NnWn88XCQVwolMVCkGTFXjhiVkf+GTPIS3y2rY6pps150REN2Z9WYik\nco3KoIeuGNSrFEb+Eum2CNBANvzmVIj2Nqocqjn4HJYFxowbpN04HTXS/SAoPmHD\nPH7NUzapXrWFqQeqmgUIkaB2X+/mdtcXJt0ig8rZZ/3V5W1jiz1bDoXY5C9ynXlc\nOyVsEuN79KvbxE3TiMHkg5DUS4D6VQjGWG6J2pCraAIY+N3f84KWnPGS2+LV2vHB\ndwo7IES8OZI5p14JcHpEe3TQ+z09CpI3le2l8nEK45Vs/qI5xEpNQ9b53ZQb5PMz\na1XUqiqVKqJPEej5DooXZ1fKEEbh8YGAisu/5m8eaiV2mQsAjd4zX5Dm7ZKtmTw5\nz+WGuyKRZZzSnWqesboxJripG44xdpLtxtsLLEITRLrvCkL2kUY43MGhNW2nwjvA\n0Fs/1zUaK+JG7rswVfHBnXd28bHAq8VBGVxEPBf7GWg56/Ppf/D/QPoVur5VLXEI\nbOLib5R1stJkyAyuioo4z+vTG0uwgL6wokodknQRfwDwzMUUjH6VVqt2O5iEbuS+\n64BbQhkEcN7dnWPSL5lGFgsz+/Dr/CyaW4YRWtjE9ddDIJz5cEXs6BvO10QueY5K\nZiSzawTufHMBOXAdExgo\n=ekNP\n-----END PGP SIGNATURE-----", "payload": "tree 9b7be55eb77070690a61f3f90e526d9156420bfc\nparent 336206cec24b9e4bc38445f490ee4d32c9c815a1\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465485882 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465485882 +0200\n\nget rid of the constants cache in the stepper\n\nthis is possible due to the removal of `FnEvalContext`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c3a066d8d6fec4720c171130816c97ed209ce95", "html_url": "https://github.com/rust-lang/rust/commit/8c3a066d8d6fec4720c171130816c97ed209ce95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c3a066d8d6fec4720c171130816c97ed209ce95/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336206cec24b9e4bc38445f490ee4d32c9c815a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/336206cec24b9e4bc38445f490ee4d32c9c815a1", "html_url": "https://github.com/rust-lang/rust/commit/336206cec24b9e4bc38445f490ee4d32c9c815a1"}], "stats": {"total": 51, "additions": 19, "deletions": 32}, "files": [{"sha": "47ee9874ad668ce2cf6204a13e0b0aad62696bb9", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8c3a066d8d6fec4720c171130816c97ed209ce95/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c3a066d8d6fec4720c171130816c97ed209ce95/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=8c3a066d8d6fec4720c171130816c97ed209ce95", "patch": "@@ -11,21 +11,15 @@ use rustc::hir::def_id::DefId;\n use rustc::mir::visit::{Visitor, LvalueContext};\n use syntax::codemap::Span;\n use std::rc::Rc;\n-use memory::Pointer;\n \n pub struct Stepper<'fncx, 'a: 'fncx, 'tcx: 'a>{\n     gecx: &'fncx mut GlobalEvalContext<'a, 'tcx>,\n-\n-    // a cache of the constants to be computed before the next statement/terminator\n-    // this is an optimization, so we don't have to allocate a new vector for every statement\n-    constants: Vec<(ConstantId<'tcx>, Span, Pointer, CachedMir<'a, 'tcx>)>,\n }\n \n impl<'fncx, 'a, 'tcx> Stepper<'fncx, 'a, 'tcx> {\n     pub(super) fn new(gecx: &'fncx mut GlobalEvalContext<'a, 'tcx>) -> Self {\n         Stepper {\n             gecx: gecx,\n-            constants: Vec::new(),\n         }\n     }\n \n@@ -60,64 +54,57 @@ impl<'fncx, 'a, 'tcx> Stepper<'fncx, 'a, 'tcx> {\n         let basic_block = mir.basic_block_data(block);\n \n         if let Some(ref stmt) = basic_block.statements.get(stmt) {\n-            assert!(self.constants.is_empty());\n+            let current_stack = self.gecx.stack.len();\n             ConstantExtractor {\n                 span: stmt.span,\n                 substs: self.gecx.substs(),\n                 def_id: self.gecx.frame().def_id,\n                 gecx: self.gecx,\n-                constants: &mut self.constants,\n                 mir: &mir,\n             }.visit_statement(block, stmt);\n-            if self.constants.is_empty() {\n+            if current_stack == self.gecx.stack.len() {\n                 self.statement(stmt)?;\n             } else {\n-                self.extract_constants()?;\n+                // ConstantExtractor added some new frames for statics/constants/promoteds\n+                // self.step() can't be \"done\", so it can't return false\n+                assert!(self.step()?);\n             }\n             return Ok(true);\n         }\n \n         let terminator = basic_block.terminator();\n-        assert!(self.constants.is_empty());\n+        let current_stack = self.gecx.stack.len();\n         ConstantExtractor {\n             span: terminator.span,\n             substs: self.gecx.substs(),\n             def_id: self.gecx.frame().def_id,\n             gecx: self.gecx,\n-            constants: &mut self.constants,\n             mir: &mir,\n         }.visit_terminator(block, terminator);\n-        if self.constants.is_empty() {\n+        if current_stack == self.gecx.stack.len() {\n             self.terminator(terminator)?;\n         } else {\n-            self.extract_constants()?;\n+            // ConstantExtractor added some new frames for statics/constants/promoteds\n+            // self.step() can't be \"done\", so it can't return false\n+            assert!(self.step()?);\n         }\n         Ok(true)\n     }\n-\n-    fn extract_constants(&mut self) -> EvalResult<()> {\n-        assert!(!self.constants.is_empty());\n-        for (cid, span, return_ptr, mir) in self.constants.drain(..) {\n-            trace!(\"queuing a constant\");\n-            self.gecx.push_stack_frame(cid.def_id, span, mir, cid.substs, Some(return_ptr));\n-        }\n-        // self.step() can't be \"done\", so it can't return false\n-        assert!(self.step()?);\n-        Ok(())\n-    }\n }\n \n-struct ConstantExtractor<'a, 'b: 'mir, 'mir: 'a, 'tcx: 'b> {\n+// WARNING: make sure that any methods implemented on this type don't ever access gecx.stack\n+// this includes any method that might access the stack\n+// basically don't call anything other than `load_mir`, `alloc_ret_ptr`, `push_stack_frame`\n+// The reason for this is, that `push_stack_frame` modifies the stack out of obvious reasons\n+struct ConstantExtractor<'a, 'b: 'a, 'tcx: 'b> {\n     span: Span,\n-    // FIXME: directly push the new stackframes instead of doing this intermediate caching\n-    constants: &'a mut Vec<(ConstantId<'tcx>, Span, Pointer, CachedMir<'mir, 'tcx>)>,\n     gecx: &'a mut GlobalEvalContext<'b, 'tcx>,\n     mir: &'a mir::Mir<'tcx>,\n     def_id: DefId,\n     substs: &'tcx subst::Substs<'tcx>,\n }\n \n-impl<'a, 'b, 'mir, 'tcx> ConstantExtractor<'a, 'b, 'mir, 'tcx> {\n+impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n     fn global_item(&mut self, def_id: DefId, substs: &'tcx subst::Substs<'tcx>, span: Span) {\n         let cid = ConstantId {\n             def_id: def_id,\n@@ -130,11 +117,11 @@ impl<'a, 'b, 'mir, 'tcx> ConstantExtractor<'a, 'b, 'mir, 'tcx> {\n         let mir = self.gecx.load_mir(def_id);\n         let ptr = self.gecx.alloc_ret_ptr(mir.return_ty, substs).expect(\"there's no such thing as an unreachable static\");\n         self.gecx.statics.insert(cid.clone(), ptr);\n-        self.constants.push((cid, span, ptr, mir));\n+        self.gecx.push_stack_frame(def_id, span, mir, substs, Some(ptr));\n     }\n }\n \n-impl<'a, 'b, 'mir, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'mir, 'tcx> {\n+impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n     fn visit_constant(&mut self, constant: &mir::Constant<'tcx>) {\n         self.super_constant(constant);\n         match constant.literal {\n@@ -163,7 +150,7 @@ impl<'a, 'b, 'mir, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'mir, 'tcx>\n                 let return_ptr = self.gecx.alloc_ret_ptr(return_ty, cid.substs).expect(\"there's no such thing as an unreachable static\");\n                 let mir = CachedMir::Owned(Rc::new(mir));\n                 self.gecx.statics.insert(cid.clone(), return_ptr);\n-                self.constants.push((cid, constant.span, return_ptr, mir));\n+                self.gecx.push_stack_frame(self.def_id, constant.span, mir, self.substs, Some(return_ptr));\n             }\n         }\n     }"}]}