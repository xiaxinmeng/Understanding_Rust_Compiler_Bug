{"sha": "65ded84d204339eb9ac69b53c5e32a0128805f5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZGVkODRkMjA0MzM5ZWI5YWM2OWI1M2M1ZTMyYTAxMjg4MDVmNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-08T19:24:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-08T19:24:39Z"}, "message": "auto merge of #6119 : brson/rust/main, r=brson\n\nr? @ILyoan\r\n\r\nThis pulls all the logic for discovering the crate entry point into a new pass (out of resolve and typeck), then changes it so that main is only looked for at the crate level (`#[main]` can still be used anywhere).\r\n\r\nI don't understand the special android logic here and worry that I may have broken it.", "tree": {"sha": "cc0149957ce0b90e53a5774cbca3ce1bcf2703b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc0149957ce0b90e53a5774cbca3ce1bcf2703b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ded84d204339eb9ac69b53c5e32a0128805f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ded84d204339eb9ac69b53c5e32a0128805f5f", "html_url": "https://github.com/rust-lang/rust/commit/65ded84d204339eb9ac69b53c5e32a0128805f5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ded84d204339eb9ac69b53c5e32a0128805f5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "270b508174ca33edb28e40c216e9adf395ac7f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/270b508174ca33edb28e40c216e9adf395ac7f22", "html_url": "https://github.com/rust-lang/rust/commit/270b508174ca33edb28e40c216e9adf395ac7f22"}, {"sha": "3970d02ec5fb33b2e10132b48dd193b86c245596", "url": "https://api.github.com/repos/rust-lang/rust/commits/3970d02ec5fb33b2e10132b48dd193b86c245596", "html_url": "https://github.com/rust-lang/rust/commit/3970d02ec5fb33b2e10132b48dd193b86c245596"}], "stats": {"total": 261, "additions": 172, "deletions": 89}, "files": [{"sha": "5bda6daa69b9f7ccd386c3927152ae03ea0594af", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -225,6 +225,9 @@ pub fn compile_rest(sess: Session,\n         time(time_passes, ~\"resolution\", ||\n              middle::resolve::resolve_crate(sess, lang_items, crate));\n \n+    time(time_passes, ~\"looking for entry point\",\n+         || middle::entry::find_entry_point(sess, crate, ast_map));\n+\n     let freevars = time(time_passes, ~\"freevar finding\", ||\n         freevars::annotate_freevars(def_map, crate));\n "}, {"sha": "9ffd0e6f22c3c5855b0618e09c2af2b9b8fa9124", "filename": "src/librustc/middle/entry.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -0,0 +1,150 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use driver::session;\n+use driver::session::Session;\n+use syntax::parse::token::special_idents;\n+use syntax::ast::{crate, node_id, item, item_fn};\n+use syntax::codemap::span;\n+use syntax::visit::{default_visitor, mk_vt, vt, Visitor, visit_crate, visit_item};\n+use syntax::attr::{attrs_contains_name};\n+use syntax::ast_map;\n+use core::util;\n+\n+struct EntryContext {\n+    session: Session,\n+\n+    ast_map: ast_map::map,\n+\n+    // The top-level function called 'main'\n+    main_fn: Option<(node_id, span)>,\n+\n+    // The function that has attribute named 'main'\n+    attr_main_fn: Option<(node_id, span)>,\n+\n+    // The function that has the attribute 'start' on it\n+    start_fn: Option<(node_id, span)>,\n+\n+    // The functions that one might think are 'main' but aren't, e.g.\n+    // main functions not defined at the top level. For diagnostics.\n+    non_main_fns: ~[(node_id, span)],\n+}\n+\n+type EntryVisitor = vt<@mut EntryContext>;\n+\n+pub fn find_entry_point(session: Session, crate: @crate, ast_map: ast_map::map) {\n+\n+    // FIXME #4404 android JNI hacks\n+    if *session.building_library &&\n+        session.targ_cfg.os != session::os_android {\n+        // No need to find a main function\n+        return;\n+    }\n+\n+    let ctxt = @mut EntryContext {\n+        session: session,\n+        ast_map: ast_map,\n+        main_fn: None,\n+        attr_main_fn: None,\n+        start_fn: None,\n+        non_main_fns: ~[],\n+    };\n+\n+    visit_crate(crate, ctxt, mk_vt(@Visitor {\n+        visit_item: |item, ctxt, visitor| find_item(item, ctxt, visitor),\n+        .. *default_visitor()\n+    }));\n+\n+    configure_main(ctxt);\n+}\n+\n+fn find_item(item: @item, ctxt: @mut EntryContext, visitor: EntryVisitor) {\n+    match item.node {\n+        item_fn(*) => {\n+            if item.ident == special_idents::main {\n+                match ctxt.ast_map.find(&item.id) {\n+                    Some(&ast_map::node_item(_, path)) => {\n+                        if path.len() == 0 {\n+                            // This is a top-level function so can be 'main'\n+                            if ctxt.main_fn.is_none() {\n+                                ctxt.main_fn = Some((item.id, item.span));\n+                            } else {\n+                                ctxt.session.span_err(\n+                                    item.span,\n+                                    ~\"multiple 'main' functions\");\n+                            }\n+                        } else {\n+                            // This isn't main\n+                            ctxt.non_main_fns.push((item.id, item.span));\n+                        }\n+                    }\n+                    _ => util::unreachable()\n+                }\n+            }\n+\n+            if attrs_contains_name(item.attrs, ~\"main\") {\n+                if ctxt.attr_main_fn.is_none() {\n+                    ctxt.attr_main_fn = Some((item.id, item.span));\n+                } else {\n+                    ctxt.session.span_err(\n+                        item.span,\n+                        ~\"multiple 'main' functions\");\n+                }\n+            }\n+\n+            if attrs_contains_name(item.attrs, ~\"start\") {\n+                if ctxt.start_fn.is_none() {\n+                    ctxt.start_fn = Some((item.id, item.span));\n+                } else {\n+                    ctxt.session.span_err(\n+                        item.span,\n+                        ~\"multiple 'start' functions\");\n+                }\n+            }\n+        }\n+        _ => ()\n+    }\n+\n+    visit_item(item, ctxt, visitor);\n+}\n+\n+fn configure_main(ctxt: @mut EntryContext) {\n+    let this = &mut *ctxt;\n+    if this.start_fn.is_some() {\n+        *this.session.entry_fn = this.start_fn;\n+        *this.session.entry_type = Some(session::EntryStart);\n+    } else if this.attr_main_fn.is_some() {\n+        *this.session.entry_fn = this.attr_main_fn;\n+        *this.session.entry_type = Some(session::EntryMain);\n+    } else if this.main_fn.is_some() {\n+        *this.session.entry_fn = this.main_fn;\n+        *this.session.entry_type = Some(session::EntryMain);\n+    } else {\n+        if !*this.session.building_library {\n+            // No main function\n+            this.session.err(~\"main function not found\");\n+            if !this.non_main_fns.is_empty() {\n+                // There were some functions named 'main' though. Try to give the user a hint.\n+                this.session.note(~\"the main function must be defined at the crate level \\\n+                                    but you have one or more functions named 'main' that are not \\\n+                                    defined at the crate level. Either move the definition or \\\n+                                    attach the `#[main]` attribute to override this behavior.\");\n+                for this.non_main_fns.each |&(_, span)| {\n+                    this.session.span_note(span, ~\"here is a function named 'main'\");\n+                }\n+            }\n+            this.session.abort_if_errors();\n+        } else {\n+            // If we *are* building a library, then we're on android where we still might\n+            // optionally want to translate main $4404\n+            assert!(this.session.targ_cfg.os == session::os_android);\n+        }\n+    }\n+}"}, {"sha": "cabe0353b8a481e127ebe4323812276ab4f963da", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use driver::session;\n use driver::session::Session;\n use metadata::csearch::{each_path, get_trait_method_def_ids};\n use metadata::csearch::get_method_name_and_self_ty;\n@@ -794,11 +793,6 @@ pub fn Resolver(session: Session,\n \n         namespaces: ~[ TypeNS, ValueNS ],\n \n-        attr_main_fn: None,\n-        main_fns: ~[],\n-\n-        start_fn: None,\n-\n         def_map: @mut HashMap::new(),\n         export_map2: @mut HashMap::new(),\n         trait_map: HashMap::new(),\n@@ -856,15 +850,6 @@ pub struct Resolver {\n     // The four namespaces.\n     namespaces: ~[Namespace],\n \n-    // The function that has attribute named 'main'\n-    attr_main_fn: Option<(node_id, span)>,\n-\n-    // The functions that could be main functions\n-    main_fns: ~[Option<(node_id, span)>],\n-\n-    // The function that has the attribute 'start' on it\n-    start_fn: Option<(node_id, span)>,\n-\n     def_map: DefMap,\n     export_map2: ExportMap2,\n     trait_map: TraitMap,\n@@ -885,7 +870,6 @@ pub impl Resolver {\n         self.resolve_crate();\n         self.session.abort_if_errors();\n \n-        self.check_duplicate_main();\n         self.check_for_unused_imports_if_necessary();\n     }\n \n@@ -3544,40 +3528,6 @@ pub impl Resolver {\n             }\n \n             item_fn(ref fn_decl, _, _, ref generics, ref block) => {\n-                // If this is the main function, we must record it in the\n-                // session.\n-\n-                // FIXME #4404 android JNI hacks\n-                if !*self.session.building_library ||\n-                    self.session.targ_cfg.os == session::os_android {\n-\n-                    if self.attr_main_fn.is_none() &&\n-                           item.ident == special_idents::main {\n-\n-                        self.main_fns.push(Some((item.id, item.span)));\n-                    }\n-\n-                    if attrs_contains_name(item.attrs, ~\"main\") {\n-                        if self.attr_main_fn.is_none() {\n-                            self.attr_main_fn = Some((item.id, item.span));\n-                        } else {\n-                            self.session.span_err(\n-                                    item.span,\n-                                    ~\"multiple 'main' functions\");\n-                        }\n-                    }\n-\n-                    if attrs_contains_name(item.attrs, ~\"start\") {\n-                        if self.start_fn.is_none() {\n-                            self.start_fn = Some((item.id, item.span));\n-                        } else {\n-                            self.session.span_err(\n-                                    item.span,\n-                                    ~\"multiple 'start' functions\");\n-                        }\n-                    }\n-                }\n-\n                 self.resolve_function(OpaqueFunctionRibKind,\n                                       Some(fn_decl),\n                                       HasTypeParameters\n@@ -5089,35 +5039,6 @@ pub impl Resolver {\n         }\n     }\n \n-    //\n-    // main function checking\n-    //\n-    // be sure that there is only one main function\n-    //\n-    fn check_duplicate_main(@mut self) {\n-        let this = &mut *self;\n-        if this.attr_main_fn.is_none() && this.start_fn.is_none() {\n-            if this.main_fns.len() >= 1u {\n-                let mut i = 1u;\n-                while i < this.main_fns.len() {\n-                    let (_, dup_main_span) = this.main_fns[i].unwrap();\n-                    this.session.span_err(\n-                        dup_main_span,\n-                        ~\"multiple 'main' functions\");\n-                    i += 1;\n-                }\n-                *this.session.entry_fn = this.main_fns[0];\n-                *this.session.entry_type = Some(session::EntryMain);\n-            }\n-        } else if !this.start_fn.is_none() {\n-            *this.session.entry_fn = this.start_fn;\n-            *this.session.entry_type = Some(session::EntryStart);\n-        } else {\n-            *this.session.entry_fn = this.attr_main_fn;\n-            *this.session.entry_type = Some(session::EntryMain);\n-        }\n-    }\n-\n     //\n     // Unused import checking\n     //"}, {"sha": "5da14d99171739db9ea5fa41aeb6b689afe45ee7", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -393,7 +393,7 @@ fn check_for_entry_fn(ccx: @mut CrateCtxt) {\n               Some(session::EntryStart) => check_start_fn_ty(ccx, id, sp),\n               None => tcx.sess.bug(~\"entry function without a type\")\n           },\n-          None => tcx.sess.err(~\"entry function not found\")\n+          None => tcx.sess.bug(~\"type checking without entry function\")\n         }\n     }\n }"}, {"sha": "f69a38c96dce42f0f2f4a2db2b98e799b74a5e27", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -100,6 +100,7 @@ pub mod middle {\n     pub mod lang_items;\n     pub mod privacy;\n     pub mod moves;\n+    pub mod entry;\n }\n \n pub mod front {"}, {"sha": "b62214b12f9a03edc2af928eaca23d8942783c21", "filename": "src/test/compile-fail/elided-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Fcompile-fail%2Felided-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Fcompile-fail%2Felided-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Felided-test.rs?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: entry function not found\n+// error-pattern: main function not found\n \n // Since we're not compiling a test runner this function should be elided\n // and the build will fail because main doesn't exist"}, {"sha": "3e771eef970f7e1e364a1ce7b15a3acb835d7c72", "filename": "src/test/compile-fail/issue-2995.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -11,3 +11,5 @@\n fn bad (p: *int) {\n     let _q: &int = p as &int; //~ ERROR non-scalar cast\n }\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "90ef7843d4bf921fad612d04673e4d7947e8e601", "filename": "src/test/compile-fail/main-wrong-location.rs", "status": "renamed", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Fcompile-fail%2Fmain-wrong-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Fcompile-fail%2Fmain-wrong-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-location.rs?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n-}\n-\n-mod foo {\n-    fn main() { //~ ERROR multiple 'main' functions\n-    }\n-}\n+mod m {\n+    // An inferred main entry point (that doesn't use #[main])\n+    // must appear at the top of the crate\n+    fn main() { } //~ NOTE here is a function named 'main'\n+}\n\\ No newline at end of file", "previous_filename": "src/test/compile-fail/multiple-main.rs"}, {"sha": "4bfdaf69480e6c1e8a9ed5e08a0b2bea30735cdb", "filename": "src/test/compile-fail/missing-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:entry function not found\n+// error-pattern:main function not found\n fn mian() { }"}, {"sha": "216779fac7c467d38bc6041680c397982480ce97", "filename": "src/test/compile-fail/tag-variant-disr-dup.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -19,3 +19,5 @@ enum color {\n     black = 0x000000,\n     white = 0x000000,\n }\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "9bd63a8d646d36546153e532950d5e2b0c693b15", "filename": "src/test/run-pass/dupe-first-attr.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -25,3 +25,5 @@ mod hello;\n \n #[cfg(target_os = \"android\")]\n mod hello;\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "cce3d8066ec1953c876d3217edc5ea678b7d562b", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ded84d204339eb9ac69b53c5e32a0128805f5f/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=65ded84d204339eb9ac69b53c5e32a0128805f5f", "patch": "@@ -22,6 +22,7 @@ mod rusti {\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n mod m {\n+    #[main]\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {\n         unsafe {\n@@ -30,6 +31,7 @@ mod m {\n         }\n     }\n \n+    #[main]\n     #[cfg(target_arch = \"x86_64\")]\n     pub fn main() {\n         unsafe {\n@@ -41,6 +43,7 @@ mod m {\n \n #[cfg(target_os = \"win32\")]\n mod m {\n+    #[main]\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {\n         unsafe {\n@@ -52,6 +55,7 @@ mod m {\n \n #[cfg(target_os = \"android\")]\n mod m {\n+    #[main]\n     #[cfg(target_arch = \"arm\")]\n     pub fn main() {\n         unsafe {"}]}