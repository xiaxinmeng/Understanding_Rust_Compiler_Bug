{"sha": "99be102a6d18ec05178a0f55ece6c65f65e38c48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YmUxMDJhNmQxOGVjMDUxNzhhMGY1NWVjZTZjNjVmNjVlMzhjNDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-19T06:55:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T06:55:59Z"}, "message": "Rollup merge of #72486 - Ralith:asinh-fix, r=dtolnay\n\nFix asinh of negative values\n\nRust's current implementation of asinh has [large errors](https://www.wolframalpha.com/input/?i=arcsinh%28x%29%2C+ln%28x%2B%28x%5E2%2B1%29%5E0.5%29%2C+x+from+-67452095.07139316+to+0) in its negative range. ~These are (mostly) not numerical, but rather seem due to an incorrect implementation.~ This appears to be due to avoidable catastrophic cancellation.\n[Playground before/after](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=bd04ae6d86d06612e4e389a8b95d19ab).\n[glibc uses](https://github.com/bminor/glibc/blob/81dca813cc35f91414731fdd0ff6b756d5e1827f/sysdeps/ieee754/dbl-64/s_asinh.c#L56) abs here.\n\nMany thanks to @danieldeankon for finding this weird behavior, @jebrosen for diagnosing it, and @toasteater for identifying the probable implementation error!", "tree": {"sha": "b7cd435ac7928cae51b04cf00b88c77d01a8f767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7cd435ac7928cae51b04cf00b88c77d01a8f767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99be102a6d18ec05178a0f55ece6c65f65e38c48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7GGACRBK7hj4Ov3rIwAAdHIIAFDZwHHVD0B6HmJZ0EeaW4rV\nCZLXxNc9zEsRBvKB0jmrrJ1Rau6ZdWDxD6YoPABi5k3tsOjn28nMcrLWsfxhMiBo\nUfgm3EIOgp6b0LjfSNwdgdyHj5lIC0sgZblPub4jFoif0IeuDi55gskq832ErL7M\nsNui22Nu84CPBq2PjidiGu8YUxeydOws6/fWch8MqYWeJeck56OcB6H6MzoDKzpY\n+ZgePWU6zxdEa4nKDgur4uXqycSI48xc0fxkNi7YDiWhaJ9MtZ08/Ecqv5qN2zUh\nu2jlyJTLfasWNNfGztZFmXfDTiwgVh4wnKeR3GDgaovT+CYstB7rXniWW9ifkkc=\n=6W80\n-----END PGP SIGNATURE-----\n", "payload": "tree b7cd435ac7928cae51b04cf00b88c77d01a8f767\nparent 9c54c65c9d0b3e99f75dbacfaef52953a9a4d0a7\nparent 35a2915bf3f24edbbee2d6a9c8f2318304b99df3\nauthor Ralf Jung <post@ralfj.de> 1592549759 +0200\ncommitter GitHub <noreply@github.com> 1592549759 +0200\n\nRollup merge of #72486 - Ralith:asinh-fix, r=dtolnay\n\nFix asinh of negative values\n\nRust's current implementation of asinh has [large errors](https://www.wolframalpha.com/input/?i=arcsinh%28x%29%2C+ln%28x%2B%28x%5E2%2B1%29%5E0.5%29%2C+x+from+-67452095.07139316+to+0) in its negative range. ~These are (mostly) not numerical, but rather seem due to an incorrect implementation.~ This appears to be due to avoidable catastrophic cancellation.\n[Playground before/after](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=bd04ae6d86d06612e4e389a8b95d19ab).\n[glibc uses](https://github.com/bminor/glibc/blob/81dca813cc35f91414731fdd0ff6b756d5e1827f/sysdeps/ieee754/dbl-64/s_asinh.c#L56) abs here.\n\nMany thanks to @danieldeankon for finding this weird behavior, @jebrosen for diagnosing it, and @toasteater for identifying the probable implementation error!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99be102a6d18ec05178a0f55ece6c65f65e38c48", "html_url": "https://github.com/rust-lang/rust/commit/99be102a6d18ec05178a0f55ece6c65f65e38c48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99be102a6d18ec05178a0f55ece6c65f65e38c48/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c54c65c9d0b3e99f75dbacfaef52953a9a4d0a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c54c65c9d0b3e99f75dbacfaef52953a9a4d0a7", "html_url": "https://github.com/rust-lang/rust/commit/9c54c65c9d0b3e99f75dbacfaef52953a9a4d0a7"}, {"sha": "35a2915bf3f24edbbee2d6a9c8f2318304b99df3", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a2915bf3f24edbbee2d6a9c8f2318304b99df3", "html_url": "https://github.com/rust-lang/rust/commit/35a2915bf3f24edbbee2d6a9c8f2318304b99df3"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "b392d6e7226d2d7bba2080ebefae53cd89626c45", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99be102a6d18ec05178a0f55ece6c65f65e38c48/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99be102a6d18ec05178a0f55ece6c65f65e38c48/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=99be102a6d18ec05178a0f55ece6c65f65e38c48", "patch": "@@ -832,11 +832,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f32 {\n-        if self == Self::NEG_INFINITY {\n-            Self::NEG_INFINITY\n-        } else {\n-            (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n-        }\n+        (self.abs() + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n     }\n \n     /// Inverse hyperbolic cosine function.\n@@ -1413,6 +1409,8 @@ mod tests {\n         assert!((-0.0f32).asinh().is_sign_negative()); // issue 63271\n         assert_approx_eq!(2.0f32.asinh(), 1.443635475178810342493276740273105f32);\n         assert_approx_eq!((-2.0f32).asinh(), -1.443635475178810342493276740273105f32);\n+        // regression test for the catastrophic cancellation fixed in 72486\n+        assert_approx_eq!((-3000.0f32).asinh(), -8.699514775987968673236893537700647f32);\n     }\n \n     #[test]"}, {"sha": "72268d2cc2f984be863501d2e4df84197d3fbb61", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99be102a6d18ec05178a0f55ece6c65f65e38c48/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99be102a6d18ec05178a0f55ece6c65f65e38c48/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=99be102a6d18ec05178a0f55ece6c65f65e38c48", "patch": "@@ -834,11 +834,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f64 {\n-        if self == Self::NEG_INFINITY {\n-            Self::NEG_INFINITY\n-        } else {\n-            (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n-        }\n+        (self.abs() + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n     }\n \n     /// Inverse hyperbolic cosine function.\n@@ -1442,6 +1438,8 @@ mod tests {\n         // issue 63271\n         assert_approx_eq!(2.0f64.asinh(), 1.443635475178810342493276740273105f64);\n         assert_approx_eq!((-2.0f64).asinh(), -1.443635475178810342493276740273105f64);\n+        // regression test for the catastrophic cancellation fixed in 72486\n+        assert_approx_eq!((-67452098.07139316f64).asinh(), -18.72007542627454439398548429400083);\n     }\n \n     #[test]"}]}