{"sha": "4b1b277cf90886466e2e0dc5017ea535ef5e00ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMWIyNzdjZjkwODg2NDY2ZTJlMGRjNTAxN2VhNTM1ZWY1ZTAwY2U=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-26T00:33:15Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-26T00:33:15Z"}, "message": "Add missing code to `find_closest_parent_module`", "tree": {"sha": "ad761f6ea9ac7c399594221844134bee8873918e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad761f6ea9ac7c399594221844134bee8873918e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b1b277cf90886466e2e0dc5017ea535ef5e00ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1b277cf90886466e2e0dc5017ea535ef5e00ce", "html_url": "https://github.com/rust-lang/rust/commit/4b1b277cf90886466e2e0dc5017ea535ef5e00ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b1b277cf90886466e2e0dc5017ea535ef5e00ce/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb4761d1ebd47ec966a4774c087c645dc3a0227d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4761d1ebd47ec966a4774c087c645dc3a0227d", "html_url": "https://github.com/rust-lang/rust/commit/bb4761d1ebd47ec966a4774c087c645dc3a0227d"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "4b9541b7e14216d61b47b3731a95ddb04ad6f307", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4b1b277cf90886466e2e0dc5017ea535ef5e00ce/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1b277cf90886466e2e0dc5017ea535ef5e00ce/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=4b1b277cf90886466e2e0dc5017ea535ef5e00ce", "patch": "@@ -626,23 +626,31 @@ where\n }\n \n crate fn find_closest_parent_module(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n-    let mut current = def_id;\n-    // The immediate parent might not always be a module.\n-    // Find the first parent which is.\n-    loop {\n-        if let Some(parent) = tcx.parent(current) {\n-            if tcx.def_kind(parent) == DefKind::Mod {\n-                break Some(parent);\n+    if item.is_fake() {\n+        // FIXME: is this correct?\n+        None\n+    // If we're documenting the crate root itself, it has no parent. Use the root instead.\n+    } else if item.def_id.is_top_level_module() {\n+        Some(item.def_id)\n+    } else {\n+        let mut current = def_id;\n+        // The immediate parent might not always be a module.\n+        // Find the first parent which is.\n+        loop {\n+            if let Some(parent) = tcx.parent(current) {\n+                if tcx.def_kind(parent) == DefKind::Mod {\n+                    break Some(parent);\n+                }\n+                current = parent;\n+            } else {\n+                debug!(\n+                    \"{:?} has no parent (kind={:?}, original was {:?})\",\n+                    current,\n+                    tcx.def_kind(current),\n+                    def_id\n+                );\n+                break None;\n             }\n-            current = parent;\n-        } else {\n-            debug!(\n-                \"{:?} has no parent (kind={:?}, original was {:?})\",\n-                current,\n-                tcx.def_kind(current),\n-                def_id\n-            );\n-            break None;\n         }\n     }\n }"}, {"sha": "4e261c3fd193436e47d11aaa52ccfe213b61417f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b1b277cf90886466e2e0dc5017ea535ef5e00ce/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1b277cf90886466e2e0dc5017ea535ef5e00ce/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=4b1b277cf90886466e2e0dc5017ea535ef5e00ce", "patch": "@@ -767,15 +767,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         use rustc_middle::ty::DefIdTree;\n \n-        let parent_node = if item.is_fake() {\n-            // FIXME: is this correct?\n-            None\n-        // If we're documenting the crate root itself, it has no parent. Use the root instead.\n-        } else if item.def_id.is_top_level_module() {\n-            Some(item.def_id)\n-        } else {\n-            find_closest_parent_module(self.cx.tcx, item.def_id)\n-        };\n+        let parent_node = find_closest_parent_module(self.cx.tcx, item.def_id);\n \n         if parent_node.is_some() {\n             trace!(\"got parent node for {:?} {:?}, id {:?}\", item.type_(), item.name, item.def_id);"}]}