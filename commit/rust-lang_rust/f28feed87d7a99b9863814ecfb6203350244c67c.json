{"sha": "f28feed87d7a99b9863814ecfb6203350244c67c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOGZlZWQ4N2Q3YTk5Yjk4NjM4MTRlY2ZiNjIwMzM1MDI0NGM2N2M=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-25T21:00:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-25T21:00:53Z"}, "message": "Merge pull request #36 from oli-obk/alignment\n\nUse target byte order instead of host byteorder", "tree": {"sha": "da8899546e45aa5f31f53c9549119cf59bf1005a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8899546e45aa5f31f53c9549119cf59bf1005a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f28feed87d7a99b9863814ecfb6203350244c67c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f28feed87d7a99b9863814ecfb6203350244c67c", "html_url": "https://github.com/rust-lang/rust/commit/f28feed87d7a99b9863814ecfb6203350244c67c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f28feed87d7a99b9863814ecfb6203350244c67c/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba23b8751eb4f5f0dcb0c11eeac45aeb453a35a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba23b8751eb4f5f0dcb0c11eeac45aeb453a35a6", "html_url": "https://github.com/rust-lang/rust/commit/ba23b8751eb4f5f0dcb0c11eeac45aeb453a35a6"}, {"sha": "37287d2a5d68888f4a39539d148921b57cc3ac49", "url": "https://api.github.com/repos/rust-lang/rust/commits/37287d2a5d68888f4a39539d148921b57cc3ac49", "html_url": "https://github.com/rust-lang/rust/commit/37287d2a5d68888f4a39539d148921b57cc3ac49"}], "stats": {"total": 95, "additions": 76, "deletions": 19}, "files": [{"sha": "e8e3f09621ddf5c6fb3072c24cc5f78f4c066127", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f28feed87d7a99b9863814ecfb6203350244c67c/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28feed87d7a99b9863814ecfb6203350244c67c/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=f28feed87d7a99b9863814ecfb6203350244c67c", "patch": "@@ -169,14 +169,32 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     // TODO(solson): Try making const_to_primval instead.\n     fn const_to_ptr(&mut self, const_val: &const_val::ConstVal) -> EvalResult<'tcx, Pointer> {\n         use rustc::middle::const_val::ConstVal::*;\n+        use rustc_const_math::{ConstInt, ConstIsize, ConstUsize};\n+        macro_rules! i2p {\n+            ($i:ident, $n:expr) => {{\n+                let ptr = self.memory.allocate($n);\n+                self.memory.write_int(ptr, $i as i64, $n)?;\n+                Ok(ptr)\n+            }}\n+        }\n         match *const_val {\n             Float(_f) => unimplemented!(),\n-            Integral(int) => {\n-                // TODO(solson): Check int constant type.\n-                let ptr = self.memory.allocate(8);\n-                self.memory.write_uint(ptr, int.to_u64_unchecked(), 8)?;\n-                Ok(ptr)\n-            }\n+            Integral(ConstInt::Infer(_)) => unreachable!(),\n+            Integral(ConstInt::InferSigned(_)) => unreachable!(),\n+            Integral(ConstInt::I8(i)) => i2p!(i, 1),\n+            Integral(ConstInt::U8(i)) => i2p!(i, 1),\n+            Integral(ConstInt::I16(i)) => i2p!(i, 2),\n+            Integral(ConstInt::U16(i)) => i2p!(i, 2),\n+            Integral(ConstInt::I32(i)) => i2p!(i, 4),\n+            Integral(ConstInt::U32(i)) => i2p!(i, 4),\n+            Integral(ConstInt::I64(i)) => i2p!(i, 8),\n+            Integral(ConstInt::U64(i)) => i2p!(i, 8),\n+            Integral(ConstInt::Isize(ConstIsize::Is16(i))) => i2p!(i, 2),\n+            Integral(ConstInt::Isize(ConstIsize::Is32(i))) => i2p!(i, 4),\n+            Integral(ConstInt::Isize(ConstIsize::Is64(i))) => i2p!(i, 8),\n+            Integral(ConstInt::Usize(ConstUsize::Us16(i))) => i2p!(i, 2),\n+            Integral(ConstInt::Usize(ConstUsize::Us32(i))) => i2p!(i, 4),\n+            Integral(ConstInt::Usize(ConstUsize::Us64(i))) => i2p!(i, 8),\n             Str(ref s) => {\n                 let psize = self.memory.pointer_size();\n                 let static_ptr = self.memory.allocate(s.len());"}, {"sha": "dd3c491e6b2b9787d19f8d08f9cb52935e888cdb", "filename": "src/memory.rs", "status": "modified", "additions": 52, "deletions": 13, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f28feed87d7a99b9863814ecfb6203350244c67c/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28feed87d7a99b9863814ecfb6203350244c67c/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=f28feed87d7a99b9863814ecfb6203350244c67c", "patch": "@@ -1,12 +1,12 @@\n-use byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};\n+use byteorder::{ReadBytesExt, WriteBytesExt, LittleEndian, BigEndian, self};\n use std::collections::Bound::{Included, Excluded};\n use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque};\n use std::{fmt, iter, mem, ptr};\n \n use rustc::hir::def_id::DefId;\n use rustc::ty::BareFnTy;\n use rustc::ty::subst::Substs;\n-use rustc::ty::layout::TargetDataLayout;\n+use rustc::ty::layout::{self, TargetDataLayout};\n \n use error::{EvalError, EvalResult};\n use primval::PrimVal;\n@@ -159,6 +159,10 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn pointer_size(&self) -> usize {\n         self.layout.pointer_size.bytes() as usize\n     }\n+\n+    pub fn endianess(&self) -> layout::Endian {\n+        self.layout.endian\n+    }\n }\n \n /// Allocation accessors\n@@ -339,8 +343,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn read_ptr(&self, ptr: Pointer) -> EvalResult<'tcx, Pointer> {\n         let size = self.pointer_size();\n         self.check_defined(ptr, size)?;\n-        let offset = self.get_bytes_unchecked(ptr, size)?\n-            .read_uint::<NativeEndian>(size).unwrap() as usize;\n+        let endianess = self.endianess();\n+        let bytes = self.get_bytes_unchecked(ptr, size)?;\n+        let offset = read_target_uint(endianess, bytes).unwrap() as usize;\n         let alloc = self.get(ptr.alloc_id)?;\n         match alloc.relocations.get(&ptr.offset) {\n             Some(&alloc_id) => Ok(Pointer { alloc_id: alloc_id, offset: offset }),\n@@ -349,11 +354,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn write_ptr(&mut self, dest: Pointer, ptr: Pointer) -> EvalResult<'tcx, ()> {\n-        {\n-            let size = self.pointer_size();\n-            let mut bytes = self.get_bytes_mut(dest, size)?;\n-            bytes.write_uint::<NativeEndian>(ptr.offset as u64, size).unwrap();\n-        }\n+        self.write_usize(dest, ptr.offset as u64)?;\n         self.get_mut(dest.alloc_id)?.relocations.insert(dest.offset, ptr.alloc_id);\n         Ok(())\n     }\n@@ -391,19 +392,25 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn read_int(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, i64> {\n-        self.get_bytes(ptr, size).map(|mut b| b.read_int::<NativeEndian>(size).unwrap())\n+        self.get_bytes(ptr, size).map(|b| read_target_int(self.endianess(), b).unwrap())\n     }\n \n     pub fn write_int(&mut self, ptr: Pointer, n: i64, size: usize) -> EvalResult<'tcx, ()> {\n-        self.get_bytes_mut(ptr, size).map(|mut b| b.write_int::<NativeEndian>(n, size).unwrap())\n+        let endianess = self.endianess();\n+        let b = self.get_bytes_mut(ptr, size)?;\n+        write_target_int(endianess, b, n).unwrap();\n+        Ok(())\n     }\n \n     pub fn read_uint(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, u64> {\n-        self.get_bytes(ptr, size).map(|mut b| b.read_uint::<NativeEndian>(size).unwrap())\n+        self.get_bytes(ptr, size).map(|b| read_target_uint(self.endianess(), b).unwrap())\n     }\n \n     pub fn write_uint(&mut self, ptr: Pointer, n: u64, size: usize) -> EvalResult<'tcx, ()> {\n-        self.get_bytes_mut(ptr, size).map(|mut b| b.write_uint::<NativeEndian>(n, size).unwrap())\n+        let endianess = self.endianess();\n+        let b = self.get_bytes_mut(ptr, size)?;\n+        write_target_uint(endianess, b, n).unwrap();\n+        Ok(())\n     }\n \n     pub fn read_isize(&self, ptr: Pointer) -> EvalResult<'tcx, i64> {\n@@ -513,6 +520,38 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+// Methods to access integers in the target endianess\n+////////////////////////////////////////////////////////////////////////////////\n+\n+fn write_target_uint(endianess: layout::Endian, mut target: &mut [u8], data: u64) -> Result<(), byteorder::Error> {\n+    let len = target.len();\n+    match endianess {\n+        layout::Endian::Little => target.write_uint::<LittleEndian>(data, len),\n+        layout::Endian::Big => target.write_uint::<BigEndian>(data, len),\n+    }\n+}\n+fn write_target_int(endianess: layout::Endian, mut target: &mut [u8], data: i64) -> Result<(), byteorder::Error> {\n+    let len = target.len();\n+    match endianess {\n+        layout::Endian::Little => target.write_int::<LittleEndian>(data, len),\n+        layout::Endian::Big => target.write_int::<BigEndian>(data, len),\n+    }\n+}\n+\n+fn read_target_uint(endianess: layout::Endian, mut source: &[u8]) -> Result<u64, byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => source.read_uint::<LittleEndian>(source.len()),\n+        layout::Endian::Big => source.read_uint::<BigEndian>(source.len()),\n+    }\n+}\n+fn read_target_int(endianess: layout::Endian, mut source: &[u8]) -> Result<i64, byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => source.read_int::<LittleEndian>(source.len()),\n+        layout::Endian::Big => source.read_int::<BigEndian>(source.len()),\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Undefined byte tracking\n ////////////////////////////////////////////////////////////////////////////////"}]}