{"sha": "a374b905dcf59580999b9f43a3eba2a7fb844caf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNzRiOTA1ZGNmNTk1ODA5OTliOWY0M2EzZWJhMmE3ZmI4NDRjYWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-05T03:53:43Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-05T03:53:43Z"}, "message": "Rollup merge of #25074 - killercup:patch-10, r=alexcrichton\n\n Sweeten the two main HashMap/HashSet examples from [here](http://doc.rust-lang.org/std/collections/struct.HashMap.html) and [here](http://doc.rust-lang.org/std/collections/struct.HashSet.html) with some deref and loop sugar.\n\n(I've only tested this using [this playpen][1].)\n\n[1]: https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20use%20std%3A%3Acollections%3A%3AHashMap%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20type%20inference%20lets%20us%20omit%20an%20explicit%20type%20signature%20(which%0A%20%20%20%20%2F%2F%20would%20be%20%60HashMap%3C%26str%2C%20%26str%3E%60%20in%20this%20example).%0A%20%20%20%20let%20mut%20book_reviews%20%3D%20HashMap%3A%3Anew()%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20review%20some%20books.%0A%20%20%20%20book_reviews.insert(%22Adventures%20of%20Huckleberry%20Finn%22%2C%20%20%20%20%22My%20favorite%20book.%22)%3B%0A%20%20%20%20book_reviews.insert(%22Grimms%27%20Fairy%20Tales%22%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Masterpiece.%22)%3B%0A%20%20%20%20book_reviews.insert(%22Pride%20and%20Prejudice%22%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Very%20enjoyable.%22)%3B%0A%20%20%20%20book_reviews.insert(%22The%20Adventures%20of%20Sherlock%20Holmes%22%2C%20%22Eye%20lyked%20it%20alot.%22)%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20check%20for%20a%20specific%20one.%0A%20%20%20%20if%20!book_reviews.contains_key(%26(%22Les%20Mis%C3%A9rables%22))%20%7B%0A%20%20%20%20%20%20%20%20println!(%22We%27ve%20got%20%7B%7D%20reviews%2C%20but%20Les%20Mis%C3%A9rables%20ain%27t%20one.%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20book_reviews.len())%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20oops%2C%20this%20review%20has%20a%20lot%20of%20spelling%20mistakes%2C%20let%27s%20delete%20it.%0A%20%20%20%20book_reviews.remove(%26(%22The%20Adventures%20of%20Sherlock%20Holmes%22))%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20look%20up%20the%20values%20associated%20with%20some%20keys.%0A%20%20%20%20let%20to_find%20%3D%20%5B%22Pride%20and%20Prejudice%22%2C%20%22Alice%27s%20Adventure%20in%20Wonderland%22%5D%3B%0A%20%20%20%20for%20book%20in%20to_find.iter()%20%7B%0A%20%20%20%20%20%20%20%20match%20book_reviews.get(book)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Some(review)%20%3D%3E%20println!(%22%7B%7D%3A%20%7B%7D%22%2C%20*book%2C%20*review)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20None%20%3D%3E%20println!(%22%7B%7D%20is%20unreviewed.%22%2C%20*book)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20iterate%20over%20everything.%0A%20%20%20%20for%20(book%2C%20review)%20in%20book_reviews.iter()%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%3A%20%5C%22%7B%7D%5C%22%22%2C%20*book%2C%20*review)%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%7D", "tree": {"sha": "2cbec474d8f5731340f7c54f5ddfa0aa5bd7412a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cbec474d8f5731340f7c54f5ddfa0aa5bd7412a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a374b905dcf59580999b9f43a3eba2a7fb844caf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a374b905dcf59580999b9f43a3eba2a7fb844caf", "html_url": "https://github.com/rust-lang/rust/commit/a374b905dcf59580999b9f43a3eba2a7fb844caf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a374b905dcf59580999b9f43a3eba2a7fb844caf/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8fedad89b8ea7af2062a581428e1999bf3dfac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8fedad89b8ea7af2062a581428e1999bf3dfac7", "html_url": "https://github.com/rust-lang/rust/commit/b8fedad89b8ea7af2062a581428e1999bf3dfac7"}, {"sha": "2ac380a29492a0f7c481fc839ad723a1488b3e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac380a29492a0f7c481fc839ad723a1488b3e29", "html_url": "https://github.com/rust-lang/rust/commit/2ac380a29492a0f7c481fc839ad723a1488b3e29"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "eedda3cf4371adf80ce14bbe9aeeeb0e4a6cedc8", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a374b905dcf59580999b9f43a3eba2a7fb844caf/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a374b905dcf59580999b9f43a3eba2a7fb844caf/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a374b905dcf59580999b9f43a3eba2a7fb844caf", "patch": "@@ -212,8 +212,9 @@ fn test_resize_policy() {\n /// overridden with one of the constructors.\n ///\n /// It is required that the keys implement the `Eq` and `Hash` traits, although\n-/// this can frequently be achieved by using `#[derive(Eq, Hash)]`. If you\n-/// implement these yourself, it is important that the following property holds:\n+/// this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\n+/// If you implement these yourself, it is important that the following\n+/// property holds:\n ///\n /// ```text\n /// k1 == k2 -> hash(k1) == hash(k2)\n@@ -250,26 +251,26 @@ fn test_resize_policy() {\n /// book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\");\n ///\n /// // check for a specific one.\n-/// if !book_reviews.contains_key(&(\"Les Mis\u00e9rables\")) {\n+/// if !book_reviews.contains_key(\"Les Mis\u00e9rables\") {\n ///     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n ///              book_reviews.len());\n /// }\n ///\n /// // oops, this review has a lot of spelling mistakes, let's delete it.\n-/// book_reviews.remove(&(\"The Adventures of Sherlock Holmes\"));\n+/// book_reviews.remove(\"The Adventures of Sherlock Holmes\");\n ///\n /// // look up the values associated with some keys.\n /// let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\n-/// for book in to_find.iter() {\n+/// for book in &to_find {\n ///     match book_reviews.get(book) {\n-///         Some(review) => println!(\"{}: {}\", *book, *review),\n-///         None => println!(\"{} is unreviewed.\", *book)\n+///         Some(review) => println!(\"{}: {}\", book, review),\n+///         None => println!(\"{} is unreviewed.\", book)\n ///     }\n /// }\n ///\n /// // iterate over everything.\n-/// for (book, review) in book_reviews.iter() {\n-///     println!(\"{}: \\\"{}\\\"\", *book, *review);\n+/// for (book, review) in &book_reviews {\n+///     println!(\"{}: \\\"{}\\\"\", book, review);\n /// }\n /// ```\n ///\n@@ -300,7 +301,7 @@ fn test_resize_policy() {\n /// vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);\n ///\n /// // Use derived implementation to print the status of the vikings.\n-/// for (viking, health) in vikings.iter() {\n+/// for (viking, health) in &vikings {\n ///     println!(\"{:?} has {} hp\", viking, health);\n /// }\n /// ```"}, {"sha": "d6754f10335cab9f0810ff5b97b223f659885826", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a374b905dcf59580999b9f43a3eba2a7fb844caf/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a374b905dcf59580999b9f43a3eba2a7fb844caf/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=a374b905dcf59580999b9f43a3eba2a7fb844caf", "patch": "@@ -31,10 +31,12 @@ use super::state::HashState;\n // to get rid of it properly.\n \n /// An implementation of a hash set using the underlying representation of a\n-/// HashMap where the value is (). As with the `HashMap` type, a `HashSet`\n-/// requires that the elements implement the `Eq` and `Hash` traits. This can\n-/// frequently be achieved by using `#[derive(Eq, Hash)]`. If you implement\n-/// these yourself, it is important that the following property holds:\n+/// HashMap where the value is ().\n+///\n+/// As with the `HashMap` type, a `HashSet` requires that the elements\n+/// implement the `Eq` and `Hash` traits. This can frequently be achieved by\n+/// using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,\n+/// it is important that the following property holds:\n ///\n /// ```text\n /// k1 == k2 -> hash(k1) == hash(k2)\n@@ -64,17 +66,17 @@ use super::state::HashState;\n /// books.insert(\"The Great Gatsby\");\n ///\n /// // Check for a specific one.\n-/// if !books.contains(&(\"The Winds of Winter\")) {\n+/// if !books.contains(\"The Winds of Winter\") {\n ///     println!(\"We have {} books, but The Winds of Winter ain't one.\",\n ///              books.len());\n /// }\n ///\n /// // Remove a book.\n-/// books.remove(&\"The Odyssey\");\n+/// books.remove(\"The Odyssey\");\n ///\n /// // Iterate over everything.\n-/// for book in books.iter() {\n-///     println!(\"{}\", *book);\n+/// for book in &books {\n+///     println!(\"{}\", book);\n /// }\n /// ```\n ///\n@@ -98,7 +100,7 @@ use super::state::HashState;\n /// vikings.insert(Viking { name: \"Harald\", power: 8 });\n ///\n /// // Use derived implementation to print the vikings.\n-/// for x in vikings.iter() {\n+/// for x in &vikings {\n ///     println!(\"{:?}\", x);\n /// }\n /// ```"}]}