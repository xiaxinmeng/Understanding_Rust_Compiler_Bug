{"sha": "fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNTg3ZjFmOWJmYmQxMDJlN2ZmZmRkMDIzYzQwOTc0YTNkZDcxY2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-09T17:25:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-09T17:25:04Z"}, "message": "rollup merge of #19614: steveklabnik/gh19599\n\nFixes #19599", "tree": {"sha": "2d01d4cff8c12bc31ec7eef70b43a9ce9a99ccc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d01d4cff8c12bc31ec7eef70b43a9ce9a99ccc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "html_url": "https://github.com/rust-lang/rust/commit/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae805da48724e6238c4d2f56541774e5fcd13bf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae805da48724e6238c4d2f56541774e5fcd13bf1", "html_url": "https://github.com/rust-lang/rust/commit/ae805da48724e6238c4d2f56541774e5fcd13bf1"}, {"sha": "8ba56052330c69b6bb5bb9c477ff2d3894e5911d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba56052330c69b6bb5bb9c477ff2d3894e5911d", "html_url": "https://github.com/rust-lang/rust/commit/8ba56052330c69b6bb5bb9c477ff2d3894e5911d"}], "stats": {"total": 150, "additions": 75, "deletions": 75}, "files": [{"sha": "4d3e5e7d8fa66c732e0e35e094e5b2d09160250b", "filename": "src/doc/guide-crates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide-crates.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide-crates.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-crates.md?ref=fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "patch": "@@ -452,7 +452,7 @@ fn main() {\n \n Rust will give us a compile-time error:\n \n-```{notrust,ignore}\n+```{ignore}\n    Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n /home/you/projects/phrases/src/main.rs:4:5: 4:40 error: a value named `hello` has already been imported in this module\n /home/you/projects/phrases/src/main.rs:4 use phrases::japanese::greetings::hello;"}, {"sha": "6bb91845f5dd805a28b64781fef2a915bf069df7", "filename": "src/doc/guide-error-handling.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide-error-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide-error-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-error-handling.md?ref=fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "patch": "@@ -76,7 +76,7 @@ fn main() {\n \n This will give us an error:\n \n-```{notrust,ignore}\n+```{ignore}\n error: non-exhaustive patterns: `_` not covered [E0004]\n ```\n \n@@ -189,7 +189,7 @@ panic!(\"boom\");\n \n gives\n \n-```{notrust,ignore}\n+```{ignore}\n task '<main>' panicked at 'boom', hello.rs:2\n ```\n "}, {"sha": "ff156d9605ed776ce83e141bb953a621e5853feb", "filename": "src/doc/guide-ownership.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide-ownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide-ownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ownership.md?ref=fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "patch": "@@ -130,7 +130,7 @@ fn add_one(mut num: Box<int>) {\n \n This does not compile, and gives us an error:\n \n-```{notrust,ignore}\n+```{ignore}\n error: use of moved value: `x`\n    println!(\"{}\", x);\n                   ^\n@@ -406,7 +406,7 @@ fn main() {\n We try to make four `Wheel`s, each with a `Car` that it's attached to. But the\n compiler knows that on the second iteration of the loop, there's a problem:\n \n-```{notrust,ignore}\n+```{ignore}\n error: use of moved value: `car`\n     Wheel { size: 360, owner: car };\n                               ^~~"}, {"sha": "dbb8d6b007d350c1c4126259ca9705abda64727a", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "patch": "@@ -84,7 +84,7 @@ println!(\"{}\", x + z);\n \n This gives us an error:\n \n-```{notrust,ignore}\n+```{ignore}\n hello.rs:6:24: 6:25 error: mismatched types: expected `int` but found `&int` (expected int but found &-ptr)\n hello.rs:6     println!(\"{}\", x + z);\n                                   ^\n@@ -132,7 +132,7 @@ Pointers are useful in languages that are pass-by-value, rather than\n pass-by-reference. Basically, languages can make two choices (this is made\n up syntax, it's not Rust):\n \n-```{notrust,ignore}\n+```{ignore}\n func foo(x) {\n     x = 5\n }\n@@ -152,7 +152,7 @@ and therefore, can change its value. At the comment, `i` will be `5`.\n So what do pointers have to do with this? Well, since pointers point to a\n location in memory...\n \n-```{notrust,ignore}\n+```{ignore}\n func foo(&int x) {\n     *x = 5\n }\n@@ -179,7 +179,7 @@ but here are problems with pointers in other languages:\n Uninitialized pointers can cause a problem. For example, what does this program\n do?\n \n-```{notrust,ignore}\n+```{ignore}\n &int x;\n *x = 5; // whoops!\n ```\n@@ -191,7 +191,7 @@ knows. This might be harmless, and it might be catastrophic.\n When you combine pointers and functions, it's easy to accidentally invalidate\n the memory the pointer is pointing to. For example:\n \n-```{notrust,ignore}\n+```{ignore}\n func make_pointer(): &int {\n     x = 5;\n \n@@ -213,7 +213,7 @@ As one last example of a big problem with pointers, **aliasing** can be an\n issue. Two pointers are said to alias when they point at the same location\n in memory. Like this:\n \n-```{notrust,ignore}\n+```{ignore}\n func mutate(&int i, int j) {\n     *i = j;\n }\n@@ -398,7 +398,7 @@ fn main() {\n \n It gives this error:\n \n-```{notrust,ignore}\n+```{ignore}\n test.rs:5:8: 5:10 error: cannot assign to `*x` because it is borrowed\n test.rs:5         *x -= 1;\n                   ^~\n@@ -522,7 +522,7 @@ boxes, though. As a rough approximation, you can treat this Rust code:\n \n As being similar to this C code:\n \n-```{notrust,ignore}\n+```{ignore}\n {\n     int *x;\n     x = (int *)malloc(sizeof(int));\n@@ -626,7 +626,7 @@ fn main() {\n \n This prints:\n \n-```{notrust,ignore}\n+```{ignore}\n Cons(1, box Cons(2, box Cons(3, box Nil)))\n ```\n "}, {"sha": "43cc8483bcec54a6784ed71a6c0209b36711f29a", "filename": "src/doc/guide-strings.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-strings.md?ref=fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "patch": "@@ -181,7 +181,7 @@ for l in s.graphemes(true) {\n \n This prints:\n \n-```{notrust,ignore}\n+```{text}\n u\u0354\n n\u030e\u0348\u0330\n i\u0319\u032e\u035a\u0326\n@@ -207,7 +207,7 @@ for l in s.chars() {\n \n This prints:\n \n-```{notrust,ignore}\n+```{text}\n u\n \u0354\n n\n@@ -252,7 +252,7 @@ for l in s.bytes() {\n \n This will print:\n \n-```{notrust,ignore}\n+```{text}\n 117\n 205\n 148"}, {"sha": "8e37a76d78ea1275017278eaaa132545d9b9865d", "filename": "src/doc/guide.md", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "patch": "@@ -355,7 +355,7 @@ just `cargo build` and it'll work the right way.\n \n You'll also notice that Cargo has created a new file: `Cargo.lock`.\n \n-```{ignore,notrust}\n+```{ignore}\n [root]\n name = \"hello_world\"\n version = \"0.0.1\"\n@@ -426,7 +426,7 @@ x = 10i;\n \n It will give you this error:\n \n-```{ignore,notrust}\n+```{ignore}\n error: re-assignment of immutable variable `x`\n      x = 10i;\n      ^~~~~~~\n@@ -486,7 +486,7 @@ fn main() {\n You can use `cargo build` on the command line to build it. You'll get a warning,\n but it will still print \"Hello, world!\":\n \n-```{ignore,notrust}\n+```{ignore}\n    Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)\n src/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variable)] on by default\n src/main.rs:2     let x: int;\n@@ -664,7 +664,7 @@ let y: int = if x == 5i { 10i; } else { 15i; };\n \n Note the semicolons after the 10 and 15. Rust will give us the following error:\n \n-```{ignore,notrust}\n+```{ignore}\n error: mismatched types: expected `int` but found `()` (expected int but found ())\n ```\n \n@@ -747,7 +747,7 @@ fn print_number(x, y) {\n \n You get this error:\n \n-```{ignore,notrust}\n+```{ignore}\n hello.rs:5:18: 5:19 error: expected `:` but found `,`\n hello.rs:5 fn print_number(x, y) {\n ```\n@@ -779,7 +779,7 @@ fn add_one(x: int) -> int {\n \n We would get an error:\n \n-```{ignore,notrust}\n+```{ignore}\n error: not all control paths return a value\n fn add_one(x: int) -> int {\n      x + 1;\n@@ -1197,7 +1197,7 @@ So what's the big advantage here? Well, there are a few. First of all, `match`\n enforces 'exhaustiveness checking.' Do you see that last arm, the one with the\n underscore (`_`)? If we remove that arm, Rust will give us an error:\n \n-```{ignore,notrust}\n+```{ignore}\n error: non-exhaustive patterns: `_` not covered\n ```\n \n@@ -1344,7 +1344,7 @@ for x in range(0i, 10i) {\n \n In slightly more abstract terms,\n \n-```{ignore,notrust}\n+```{ignore}\n for var in expression {\n     code\n }\n@@ -1849,7 +1849,7 @@ Before we move on, let me show you one more Cargo command: `run`. `cargo run`\n is kind of like `cargo build`, but it also then runs the produced executable.\n Try it out:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -1947,7 +1947,7 @@ for this example, it is not important.\n \n Let's try to compile this using `cargo build`:\n \n-```{notrust,no_run}\n+```{no_run}\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:7:26: 7:34 error: the type of this value must be known in this context\n@@ -1995,7 +1995,7 @@ fn main() {\n \n Try running our new program a few times:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2048,7 +2048,7 @@ fn main() {\n \n And trying it out:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2103,7 +2103,7 @@ fn cmp(a: int, b: int) -> Ordering {\n \n If we try to compile, we'll get some errors:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:20:15: 20:20 error: mismatched types: expected `int` but found `collections::string::String` (expected int but found struct collections::string::String)\n@@ -2157,7 +2157,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n And try compiling again:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:20:15: 20:20 error: mismatched types: expected `uint` but found `collections::string::String` (expected uint but found struct collections::string::String)\n@@ -2170,7 +2170,7 @@ This error is similar to the last one: we expected to get a `uint`, but we got\n a `String` instead! That's because our `input` variable is coming from the\n standard input, and you can guess anything. Try it:\n \n-```{notrust,ignore}\n+```{ignore}\n $ ./target/guessing_game\n Guess the number!\n The secret number is: 73\n@@ -2254,7 +2254,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n Let's try it out!\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:22:15: 22:24 error: mismatched types: expected `uint` but found `core::option::Option<uint>` (expected uint but found enum core::option::Option)\n@@ -2313,7 +2313,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n We use a `match` to either give us the `uint` inside of the `Option`, or we\n print an error message and return. Let's give this a shot:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2378,7 +2378,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n Let's try it!\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2455,7 +2455,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n And try it out. But wait, didn't we just add an infinite loop? Yup. Remember\n that `return`? If we give a non-number answer, we'll `return` and quit. Observe:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2587,7 +2587,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n Now we should be good! Let's try:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2703,7 +2703,7 @@ $ cd modules\n \n Let's double check our work by compiling:\n \n-```{bash,notrust}\n+```{bash}\n $ cargo run\n    Compiling modules v0.0.1 (file:///home/you/projects/modules)\n      Running `target/modules`\n@@ -2765,7 +2765,7 @@ mod hello {\n \n It gives an error:\n \n-```{notrust,ignore}\n+```{ignore}\n    Compiling modules v0.0.1 (file:///home/you/projects/modules)\n src/main.rs:2:5: 2:23 error: function `print_hello` is private\n src/main.rs:2     hello::print_hello();\n@@ -2789,7 +2789,7 @@ mod hello {\n Usage of the `pub` keyword is sometimes called 'exporting', because\n we're making the function available for other modules. This will work:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo run\n    Compiling modules v0.0.1 (file:///home/you/projects/modules)\n      Running `target/modules`\n@@ -2923,7 +2923,7 @@ $ cd testing\n \n And try it out:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo run\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running `target/testing`\n@@ -2955,7 +2955,7 @@ you give them descriptive names. You'll see why in a moment. We then use a\n macro, `assert!`, to assert that something is true. In this case, we're giving\n it `false`, so this test should fail. Let's try it!\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n /home/you/projects/testing/src/main.rs:1:1: 3:2 warning: function is never used: `main`, #[warn(dead_code)] on by default\n@@ -2984,15 +2984,15 @@ task '<main>' failed at 'Some tests failed', /home/you/src/rust/src/libtest/lib.\n \n Lots of output! Let's break this down:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n ```\n \n You can run all of your tests with `cargo test`. This runs both your tests in\n `tests`, as well as the tests you put inside of your crate.\n \n-```{notrust,ignore}\n+```{ignore}\n /home/you/projects/testing/src/main.rs:1:1: 3:2 warning: function is never used: `main`, #[warn(dead_code)] on by default\n /home/you/projects/testing/src/main.rs:1 fn main() {\n /home/you/projects/testing/src/main.rs:2     println!(\"Hello, world!\")\n@@ -3006,7 +3006,7 @@ case, Rust is warning us that we've written some code that's never used: our\n We'll turn this lint off for just this function soon. For now, just ignore this\n output.\n \n-```{notrust,ignore}\n+```{ignore}\n      Running target/lib-654ce120f310a3a5\n \n running 1 test\n@@ -3018,7 +3018,7 @@ with good names? This is why. Here, it says 'test foo' because we called our\n test 'foo.' If we had given it a good name, it'd be more clear which test\n failed, especially as we accumulate more tests.\n \n-```{notrust,ignore}\n+```{ignore}\n failures:\n \n ---- foo stdout ----\n@@ -3049,7 +3049,7 @@ fn foo() {\n \n And then try to run our tests again:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running target/lib-654ce120f310a3a5\n@@ -3089,7 +3089,7 @@ include `main` when it's _not_ true. So we use `not` to negate things:\n With this attribute we won't get the warning (even\n though `src/main.rs` gets recompiled this time):\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running target/lib-654ce120f310a3a5\n@@ -3120,7 +3120,7 @@ fn math_checks_out() {\n \n And try to run the test:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n /home/you/projects/testing/tests/lib.rs:3:18: 3:38 error: unresolved name `add_three_times_four`.\n@@ -3180,7 +3180,7 @@ fn math_checks_out() {\n \n Let's give it a run:\n \n-```{ignore,notrust}\n+```{ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running target/lib-654ce120f310a3a5\n@@ -3229,7 +3229,7 @@ fn times_four(x: int) -> int { x * 4 }\n \n If you run `cargo test`, you should get the same output:\n \n-```{ignore,notrust}\n+```{ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running target/lib-654ce120f310a3a5\n@@ -3283,7 +3283,7 @@ fn test_add_three() {\n \n We'd get this error:\n \n-```{notrust,ignore}\n+```{ignore}\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n /home/you/projects/testing/tests/lib.rs:3:5: 3:24 error: function `add_three` is private\n /home/you/projects/testing/tests/lib.rs:3 use testing::add_three;\n@@ -3325,7 +3325,7 @@ mod test {\n \n Let's give it a shot:\n \n-```{ignore,notrust}\n+```{ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running target/lib-654ce120f310a3a5\n@@ -3455,7 +3455,7 @@ let y = &mut x;\n \n Rust will complain:\n \n-```{ignore,notrust}\n+```{ignore}\n error: cannot borrow immutable local variable `x` as mutable\n  let y = &mut x;\n               ^\n@@ -3482,7 +3482,7 @@ let z = &mut x;\n \n It gives us this error:\n \n-```{notrust,ignore}\n+```{ignore}\n error: cannot borrow `x` as mutable more than once at a time\n      let z = &mut x;\n                   ^\n@@ -3628,7 +3628,7 @@ let z = &mut x;\n \n The error:\n \n-```{notrust,ignore}\n+```{ignore}\n error: cannot borrow `x` as mutable more than once at a time\n      let z = &mut x;\n                   ^\n@@ -3646,7 +3646,7 @@ note: previous borrow ends here\n \n This error comes in three parts. Let's go over each in turn.\n \n-```{notrust,ignore}\n+```{ignore}\n error: cannot borrow `x` as mutable more than once at a time\n      let z = &mut x;\n                   ^\n@@ -3655,7 +3655,7 @@ error: cannot borrow `x` as mutable more than once at a time\n This error states the restriction: you cannot lend out something mutable more\n than once at the same time. The borrow checker knows the rules!\n \n-```{notrust,ignore}\n+```{ignore}\n note: previous borrow of `x` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `x` until the borrow ends\n      let y = &mut x;\n                   ^\n@@ -3667,7 +3667,7 @@ the first mutable borrow occurred. The error showed us the second. So now we\n see both parts of the problem. It also alludes to rule #3, by reminding us that\n we can't change `x` until the borrow is over.\n \n-```{notrust,ignore}\n+```{ignore}\n note: previous borrow ends here\n  fn main() {\n      let mut x = 5i;\n@@ -3770,7 +3770,7 @@ let y = &mut x;\n \n This gives us this error:\n \n-```{notrust,ignore}\n+```{ignore}\n error: cannot use `*x` because it was mutably borrowed\n  *x;\n  ^~\n@@ -4595,7 +4595,7 @@ element reference has the closure it's been given as an argument called on it.\n So this would give us the numbers from `2-100`. Well, almost! If you\n compile the example, you'll get a warning:\n \n-```{notrust,ignore}\n+```{ignore}\n warning: unused result which must be used: iterator adaptors are lazy and\n          do nothing unless consumed, #[warn(unused_must_use)] on by default\n  range(1i, 100i).map(|x| x + 1i);\n@@ -4625,7 +4625,7 @@ for i in std::iter::count(1i, 5i).take(5) {\n \n This will print\n \n-```{notrust,ignore}\n+```{ignore}\n 1\n 6\n 11\n@@ -4838,7 +4838,7 @@ We can then use `T` inside the rest of the signature: `x` has type `T`, and half\n of the `Result` has type `T`. However, if we try to compile that example, we'll get\n an error:\n \n-```{notrust,ignore}\n+```{ignore}\n error: binary operation `==` cannot be applied to type `T`\n ```\n \n@@ -4894,7 +4894,7 @@ we use `impl Trait for Item`, rather than just `impl Item`.\n So what's the big deal? Remember the error we were getting with our generic\n `inverse` function?\n \n-```{notrust,ignore}\n+```{ignore}\n error: binary operation `==` cannot be applied to type `T`\n ```\n \n@@ -4909,7 +4909,7 @@ fn print_area<T>(shape: T) {\n \n Rust complains:\n \n-```{notrust,ignore}\n+```{ignore}\n error: type `T` does not implement any method in scope named `area`\n ```\n \n@@ -4985,7 +4985,7 @@ fn main() {\n \n This program outputs:\n \n-```{notrust,ignore}\n+```{ignore}\n This shape has an area of 3.141593\n This shape has an area of 1\n ```\n@@ -4999,7 +4999,7 @@ print_area(5i);\n \n We get a compile-time error:\n \n-```{notrust,ignore}\n+```{ignore}\n error: failed to find an implementation of trait main::HasArea for int\n ```\n \n@@ -5066,7 +5066,7 @@ fn main() {\n Now that we've moved the structs and traits into their own module, we get an\n error:\n \n-```{notrust,ignore}\n+```{ignore}\n error: type `shapes::Circle` does not implement any method in scope named `area`\n ```\n "}, {"sha": "5574b047d964796733d9a51e0a38fae6297b5737", "filename": "src/doc/intro.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "patch": "@@ -313,7 +313,7 @@ print `\"Hello\"`, or does Rust crash?\n \n Neither. It refuses to compile:\n \n-```{notrust,ignore}\n+```{ignore}\n $ cargo run\n    Compiling hello_world v0.0.1 (file:///Users/you/src/hello_world)\n main.rs:8:5: 8:6 error: cannot borrow `v` as mutable because it is also borrowed as immutable\n@@ -428,7 +428,7 @@ fn main() {\n \n It gives us this error:\n \n-```{notrust,ignore}\n+```{ignore}\n 6:71 error: capture of moved value: `numbers`\n     for j in range(0, 3) { numbers[j] += 1 }\n                ^~~~~~~"}, {"sha": "ad5884c16c5c1b00c8c8aea3be03ac1f34be1919", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "patch": "@@ -117,7 +117,7 @@ impl ChaChaRng {\n     /// security proof for a more involved example of this.\n     ///\n     /// The modified word layout is:\n-    /// ```notrust\n+    /// ```ignore\n     /// constant constant constant constant\n     /// key      key      key      key\n     /// key      key      key      key"}, {"sha": "77c0a8abe6466cdfb50485c55ead831e916ba313", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "patch": "@@ -120,7 +120,7 @@\n //!\n //! The compiler accepts a flag of this form a number of times:\n //!\n-//! ```notrust\n+//! ```ignore\n //! --extern crate-name=path/to/the/crate.rlib\n //! ```\n //!\n@@ -152,7 +152,7 @@\n //!\n //! and the compiler would be invoked as:\n //!\n-//! ```notrust\n+//! ```ignore\n //! rustc a.rs --extern b1=path/to/libb1.rlib --extern b2=path/to/libb2.rlib\n //! ```\n //!\n@@ -178,7 +178,7 @@\n //! dependencies, not the upstream transitive dependencies. Consider this\n //! dependency graph:\n //!\n-//! ```notrust\n+//! ```ignore\n //! A.1   A.2\n //! |     |\n //! |     |"}, {"sha": "5b5fa2952e6bd06bcbe12f0a93cfd769c72e14cf", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb587f1f9bfbd102e7fffdd023c40974a3dd71cc/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=fb587f1f9bfbd102e7fffdd023c40974a3dd71cc", "patch": "@@ -80,7 +80,7 @@\n //! circle, both centered at the origin. Since the area of a unit circle is \u03c0,\n //! we have:\n //!\n-//! ```notrust\n+//! ```text\n //!     (area of unit circle) / (area of square) = \u03c0 / 4\n //! ```\n //!"}]}