{"sha": "317adda649763de4c15692da327c216f05106a94", "node_id": "C_kwDOAAsO6NoAKDMxN2FkZGE2NDk3NjNkZTRjMTU2OTJkYTMyN2MyMTZmMDUxMDZhOTQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-11T04:11:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-11T19:31:34Z"}, "message": "Tweak output", "tree": {"sha": "4b8639e9a6c7d46985714be980b01db56f2254cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b8639e9a6c7d46985714be980b01db56f2254cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/317adda649763de4c15692da327c216f05106a94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/317adda649763de4c15692da327c216f05106a94", "html_url": "https://github.com/rust-lang/rust/commit/317adda649763de4c15692da327c216f05106a94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/317adda649763de4c15692da327c216f05106a94/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb5d2153473b8a61e8697d05da10fc37d849fb80", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5d2153473b8a61e8697d05da10fc37d849fb80", "html_url": "https://github.com/rust-lang/rust/commit/fb5d2153473b8a61e8697d05da10fc37d849fb80"}], "stats": {"total": 175, "additions": 68, "deletions": 107}, "files": [{"sha": "8166eb8299041136a089eb92866cf4fea044dd0b", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/317adda649763de4c15692da327c216f05106a94/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317adda649763de4c15692da327c216f05106a94/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=317adda649763de4c15692da327c216f05106a94", "patch": "@@ -587,7 +587,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Find all the requirements that come from a local `impl` block.\n             let mut skip_list: FxHashSet<_> = Default::default();\n-            let mut spanned_predicates: FxHashMap<MultiSpan, _> = Default::default();\n+            let mut spanned_predicates = FxHashMap::default();\n             for (p, parent_p, impl_def_id, cause) in unsatisfied_predicates\n                 .iter()\n                 .filter_map(|(p, parent, c)| c.as_ref().map(|c| (p, parent, c)))\n@@ -615,13 +615,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ) =>\n                     {\n                         let span = self_ty.span.ctxt().outer_expn_data().call_site;\n-                        let mut spans: MultiSpan = span.into();\n-                        spans.push_span_label(\n+                        let entry = spanned_predicates.entry(span);\n+                        let entry = entry.or_insert_with(|| {\n+                            (FxHashSet::default(), FxHashSet::default(), Vec::new())\n+                        });\n+                        entry.0.insert(span);\n+                        entry.1.insert((\n                             span,\n                             \"unsatisfied trait bound introduced in this `derive` macro\",\n-                        );\n-                        let entry = spanned_predicates.entry(spans);\n-                        entry.or_insert_with(|| Vec::new()).push(p);\n+                        ));\n+                        entry.2.push(p);\n+                        skip_list.insert(p);\n                     }\n \n                     // Unmet obligation coming from an `impl`.\n@@ -659,28 +663,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let _ = format_pred(*pred);\n                         }\n                         skip_list.insert(p);\n-                        let mut spans = if cause.span != *item_span {\n-                            let mut spans: MultiSpan = cause.span.into();\n-                            spans.push_span_label(\n-                                cause.span,\n-                                \"unsatisfied trait bound introduced here\",\n-                            );\n-                            spans\n+                        let entry = spanned_predicates.entry(self_ty.span);\n+                        let entry = entry.or_insert_with(|| {\n+                            (FxHashSet::default(), FxHashSet::default(), Vec::new())\n+                        });\n+                        entry.2.push(p);\n+                        if cause.span != *item_span {\n+                            entry.0.insert(cause.span);\n+                            entry.1.insert((cause.span, \"unsatisfied trait bound introduced here\"));\n                         } else {\n-                            let mut spans = Vec::with_capacity(2);\n                             if let Some(trait_ref) = of_trait {\n-                                spans.push(trait_ref.path.span);\n+                                entry.0.insert(trait_ref.path.span);\n                             }\n-                            spans.push(self_ty.span);\n-                            spans.into()\n+                            entry.0.insert(self_ty.span);\n                         };\n                         if let Some(trait_ref) = of_trait {\n-                            spans.push_span_label(trait_ref.path.span, \"\");\n+                            entry.1.insert((trait_ref.path.span, \"\"));\n                         }\n-                        spans.push_span_label(self_ty.span, \"\");\n-\n-                        let entry = spanned_predicates.entry(spans);\n-                        entry.or_insert_with(|| Vec::new()).push(p);\n+                        entry.1.insert((self_ty.span, \"\"));\n                     }\n                     Some(Node::Item(hir::Item {\n                         kind: hir::ItemKind::Trait(rustc_ast::ast::IsAuto::Yes, ..),\n@@ -697,8 +697,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             let mut spanned_predicates: Vec<_> = spanned_predicates.into_iter().collect();\n-            spanned_predicates.sort_by_key(|(span, _)| span.primary_span());\n-            for (span, predicates) in spanned_predicates {\n+            spanned_predicates.sort_by_key(|(span, _)| *span);\n+            for (_, (primary_spans, span_labels, predicates)) in spanned_predicates {\n                 let mut preds: Vec<_> = predicates\n                     .iter()\n                     .filter_map(|pred| format_pred(**pred))\n@@ -711,6 +711,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     format!(\"the following trait bounds were not satisfied:\\n{}\", preds.join(\"\\n\"),)\n                 };\n+                let mut span: MultiSpan = primary_spans.into_iter().collect::<Vec<_>>().into();\n+                for (sp, label) in span_labels {\n+                    span.push_span_label(sp, label);\n+                }\n                 err.span_note(span, &msg);\n                 unsatisfied_bounds = true;\n             }"}, {"sha": "91b334b412bc968800442c48883eb3e7d03aa914", "filename": "tests/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=317adda649763de4c15692da327c216f05106a94", "patch": "@@ -18,9 +18,6 @@ note: trait bound `NotClone: Clone` was not satisfied\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n-   = note: the following trait bounds were not satisfied:\n-           `NotClone: Clone`\n-           which is required by `Bar<NotClone>: Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `Clone`"}, {"sha": "bf0bb3fbdf8f7f26a6a920f8f5be9cfe30b59a06", "filename": "tests/ui/derives/issue-91550.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91550.stderr?ref=317adda649763de4c15692da327c216f05106a94", "patch": "@@ -81,20 +81,16 @@ LL | struct Object<T>(T);\n LL |     foo.use_ord_and_partial_ord();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-note: trait bound `NoDerives: Ord` was not satisfied\n+note: the following trait bounds were not satisfied:\n+      `NoDerives: Ord`\n+      `NoDerives: PartialOrd`\n   --> $DIR/issue-91550.rs:21:9\n    |\n LL | impl<T: Ord + PartialOrd> Object<T> {\n-   |         ^^^               ---------\n-   |         |\n+   |         ^^^   ^^^^^^^^^^  ---------\n+   |         |     |\n+   |         |     unsatisfied trait bound introduced here\n    |         unsatisfied trait bound introduced here\n-note: trait bound `NoDerives: PartialOrd` was not satisfied\n-  --> $DIR/issue-91550.rs:21:15\n-   |\n-LL | impl<T: Ord + PartialOrd> Object<T> {\n-   |               ^^^^^^^^^^  ---------\n-   |               |\n-   |               unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]"}, {"sha": "f3db56d1d53911e101716a8b8a844e02d28a7854", "filename": "tests/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=317adda649763de4c15692da327c216f05106a94", "patch": "@@ -88,20 +88,16 @@ LL | struct Struct<T> {\n LL |     s.method();\n    |       ^^^^^^ method cannot be called on `Struct<f64>` due to unsatisfied trait bounds\n    |\n-note: trait bound `f64: Eq` was not satisfied\n+note: the following trait bounds were not satisfied:\n+      `f64: Eq`\n+      `f64: Ord`\n   --> $DIR/method-not-found-generic-arg-elision.rs:74:36\n    |\n LL | impl<T: Clone + Copy + PartialEq + Eq + PartialOrd + Ord> Struct<T> {\n-   |                                    ^^                     ---------\n-   |                                    |\n+   |                                    ^^                ^^^  ---------\n+   |                                    |                 |\n+   |                                    |                 unsatisfied trait bound introduced here\n    |                                    unsatisfied trait bound introduced here\n-note: trait bound `f64: Ord` was not satisfied\n-  --> $DIR/method-not-found-generic-arg-elision.rs:74:54\n-   |\n-LL | impl<T: Clone + Copy + PartialEq + Eq + PartialOrd + Ord> Struct<T> {\n-   |                                                      ^^^  ---------\n-   |                                                      |\n-   |                                                      unsatisfied trait bound introduced here\n \n error: aborting due to 9 previous errors\n "}, {"sha": "968e285af7ff80349eab4f4f15975f9447285714", "filename": "tests/ui/missing-trait-bounds/missing-trait-bounds-for-method-call.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr?ref=317adda649763de4c15692da327c216f05106a94", "patch": "@@ -7,20 +7,16 @@ LL | struct Foo<T> {\n LL |         self.foo();\n    |              ^^^ method cannot be called on `&Foo<T>` due to unsatisfied trait bounds\n    |\n-note: trait bound `T: Default` was not satisfied\n+note: the following trait bounds were not satisfied:\n+      `T: Bar`\n+      `T: Default`\n   --> $DIR/missing-trait-bounds-for-method-call.rs:10:9\n    |\n LL | impl<T: Default + Bar> Bar for Foo<T> {}\n-   |         ^^^^^^^        ---     ------\n-   |         |\n+   |         ^^^^^^^   ^^^  ---     ------\n+   |         |         |\n+   |         |         unsatisfied trait bound introduced here\n    |         unsatisfied trait bound introduced here\n-note: trait bound `T: Bar` was not satisfied\n-  --> $DIR/missing-trait-bounds-for-method-call.rs:10:19\n-   |\n-LL | impl<T: Default + Bar> Bar for Foo<T> {}\n-   |                   ^^^  ---     ------\n-   |                   |\n-   |                   unsatisfied trait bound introduced here\n help: consider restricting the type parameters to satisfy the trait bounds\n    |\n LL | struct Foo<T> where T: Bar, T: Default {"}, {"sha": "924b26a8c75fd224f7f9f13750aafea8b575ddf7", "filename": "tests/ui/suggestions/derive-trait-for-method-call.stderr", "status": "modified", "additions": 22, "deletions": 44, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr?ref=317adda649763de4c15692da327c216f05106a94", "patch": "@@ -16,27 +16,18 @@ LL | struct Foo<X, Y> (X, Y);\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Enum, CloneEnum>` due to unsatisfied trait bounds\n    |\n-note: trait bound `Enum: Clone` was not satisfied\n+note: the following trait bounds were not satisfied:\n+      `CloneEnum: Default`\n+      `Enum: Clone`\n+      `Enum: Default`\n   --> $DIR/derive-trait-for-method-call.rs:20:9\n    |\n LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n-   |         ^^^^^                                   ---------\n-   |         |\n+   |         ^^^^^   ^^^^^^^                ^^^^^^^  ---------\n+   |         |       |                      |\n+   |         |       |                      unsatisfied trait bound introduced here\n+   |         |       unsatisfied trait bound introduced here\n    |         unsatisfied trait bound introduced here\n-note: trait bound `Enum: Default` was not satisfied\n-  --> $DIR/derive-trait-for-method-call.rs:20:17\n-   |\n-LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n-   |                 ^^^^^^^                         ---------\n-   |                 |\n-   |                 unsatisfied trait bound introduced here\n-note: trait bound `CloneEnum: Default` was not satisfied\n-  --> $DIR/derive-trait-for-method-call.rs:20:40\n-   |\n-LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n-   |                                        ^^^^^^^  ---------\n-   |                                        |\n-   |                                        unsatisfied trait bound introduced here\n note: the trait `Default` must be implemented\n   --> $SRC_DIR/core/src/default.rs:LL:COL\n help: consider annotating `Enum` with `#[derive(Clone)]`\n@@ -62,27 +53,18 @@ LL | struct Foo<X, Y> (X, Y);\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Struct, CloneStruct>` due to unsatisfied trait bounds\n    |\n-note: trait bound `Struct: Clone` was not satisfied\n+note: the following trait bounds were not satisfied:\n+      `CloneStruct: Default`\n+      `Struct: Clone`\n+      `Struct: Default`\n   --> $DIR/derive-trait-for-method-call.rs:20:9\n    |\n LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n-   |         ^^^^^                                   ---------\n-   |         |\n+   |         ^^^^^   ^^^^^^^                ^^^^^^^  ---------\n+   |         |       |                      |\n+   |         |       |                      unsatisfied trait bound introduced here\n+   |         |       unsatisfied trait bound introduced here\n    |         unsatisfied trait bound introduced here\n-note: trait bound `Struct: Default` was not satisfied\n-  --> $DIR/derive-trait-for-method-call.rs:20:17\n-   |\n-LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n-   |                 ^^^^^^^                         ---------\n-   |                 |\n-   |                 unsatisfied trait bound introduced here\n-note: trait bound `CloneStruct: Default` was not satisfied\n-  --> $DIR/derive-trait-for-method-call.rs:20:40\n-   |\n-LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n-   |                                        ^^^^^^^  ---------\n-   |                                        |\n-   |                                        unsatisfied trait bound introduced here\n help: consider annotating `CloneStruct` with `#[derive(Default)]`\n    |\n LL | #[derive(Default)]\n@@ -107,20 +89,16 @@ LL |     let y = x.test();\n    |\n    = note: doesn't satisfy `Vec<Enum>: Clone`\n    |\n-note: trait bound `Vec<Enum>: Clone` was not satisfied\n+note: the following trait bounds were not satisfied:\n+      `Instant: Default`\n+      `Vec<Enum>: Clone`\n   --> $DIR/derive-trait-for-method-call.rs:20:9\n    |\n LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n-   |         ^^^^^                                   ---------\n-   |         |\n+   |         ^^^^^                          ^^^^^^^  ---------\n+   |         |                              |\n+   |         |                              unsatisfied trait bound introduced here\n    |         unsatisfied trait bound introduced here\n-note: trait bound `Instant: Default` was not satisfied\n-  --> $DIR/derive-trait-for-method-call.rs:20:40\n-   |\n-LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n-   |                                        ^^^^^^^  ---------\n-   |                                        |\n-   |                                        unsatisfied trait bound introduced here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b80e8b988adb174004542d3d5880d1ca5a959164", "filename": "tests/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=317adda649763de4c15692da327c216f05106a94", "patch": "@@ -32,9 +32,6 @@ note: trait bound `CloneNoCopy: Copy` was not satisfied\n    |\n LL | #[derive(Clone, Copy)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n-   = note: the following trait bounds were not satisfied:\n-           `CloneNoCopy: Copy`\n-           which is required by `U5<CloneNoCopy>: Clone`\n help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n LL | #[derive(Clone, Copy)]"}, {"sha": "b80e8b988adb174004542d3d5880d1ca5a959164", "filename": "tests/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/317adda649763de4c15692da327c216f05106a94/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=317adda649763de4c15692da327c216f05106a94", "patch": "@@ -32,9 +32,6 @@ note: trait bound `CloneNoCopy: Copy` was not satisfied\n    |\n LL | #[derive(Clone, Copy)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n-   = note: the following trait bounds were not satisfied:\n-           `CloneNoCopy: Copy`\n-           which is required by `U5<CloneNoCopy>: Clone`\n help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n LL | #[derive(Clone, Copy)]"}]}