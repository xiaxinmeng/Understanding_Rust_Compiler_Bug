{"sha": "a478bfebd2aef26287268fd0c0e255184a24a7a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NzhiZmViZDJhZWYyNjI4NzI2OGZkMGMwZTI1NTE4NGEyNGE3YTE=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-02-16T01:43:56Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-02-26T18:37:45Z"}, "message": "Removed copyright notices.", "tree": {"sha": "b79bc70ab6c146640094d1523f930a39d54c2cd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b79bc70ab6c146640094d1523f930a39d54c2cd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a478bfebd2aef26287268fd0c0e255184a24a7a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a478bfebd2aef26287268fd0c0e255184a24a7a1", "html_url": "https://github.com/rust-lang/rust/commit/a478bfebd2aef26287268fd0c0e255184a24a7a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a478bfebd2aef26287268fd0c0e255184a24a7a1/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433e494d796270411a6afe53a5592af6a79f6eb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/433e494d796270411a6afe53a5592af6a79f6eb6", "html_url": "https://github.com/rust-lang/rust/commit/433e494d796270411a6afe53a5592af6a79f6eb6"}], "stats": {"total": 697, "additions": 53, "deletions": 644}, "files": [{"sha": "748bccff5d3aca3e5d852fba8e47b2d1e3a7b687", "filename": "tests/compile-fail/copy_nonoverlapping.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(core_intrinsics)]\n \n //error-pattern: copy_nonoverlapping called on overlapping ranges"}, {"sha": "08391b12ae1bc620ae724a718f76c8855f5571a2", "filename": "tests/compile-fail/copy_null.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fcopy_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fcopy_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_null.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,18 +1,8 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //error-pattern: invalid use of NULL pointer\n \n fn main() {\n     let mut data = [0u16; 4];\n     let ptr = &mut data[0] as *mut u16;\n-    // Even copying 0 elements from NULL should error\n+    // Even copying 0 elements from NULL should error.\n     unsafe { ptr.copy_from(std::ptr::null(), 0); }\n }"}, {"sha": "e1f243210ade068fa1a7cc90a026f397b610dc80", "filename": "tests/compile-fail/copy_unaligned.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fcopy_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fcopy_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_unaligned.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //error-pattern: tried to access memory with alignment 1, but alignment 2 is required\n \n fn main() {"}, {"sha": "987c18e4c492ab017dd385cab4767debd6fe8791", "filename": "tests/compile-fail/div-by-zero-1.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fdiv-by-zero-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fdiv-by-zero-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-1.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(core_intrinsics)]\n \n use std::intrinsics::*;"}, {"sha": "302d26a41f36948dfacde5c9a9e869a3a09015eb", "filename": "tests/compile-fail/div-by-zero-2.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![allow(const_err)]\n \n fn main() {"}, {"sha": "253294d1f53b7c11b612b1c270593af85e7116f6", "filename": "tests/compile-fail/overflowing-lsh-neg.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![allow(exceeding_bitshifts)]\n #![allow(const_err)]\n "}, {"sha": "7a4646a0ebf3a60db235b86f9049c49c8efb6769", "filename": "tests/compile-fail/overflowing-rsh-1.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Foverflowing-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Foverflowing-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-1.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![allow(exceeding_bitshifts)]\n \n fn main() {"}, {"sha": "3f7f31f4c2351362b1c67ef9949a418085c5c6e9", "filename": "tests/compile-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![allow(exceeding_bitshifts, const_err)]\n \n fn main() {"}, {"sha": "0d67aef43088335be31e70d974af9a635e27eb20", "filename": "tests/compile-fail/overflowing-unchecked-rsh.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-unchecked-rsh.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(core_intrinsics)]\n \n use std::intrinsics::*;"}, {"sha": "a089a8b821316f570ddc1937f689fa5d167afff5", "filename": "tests/compile-fail/ptr_offset_ptr_plus_0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fptr_offset_ptr_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fptr_offset_ptr_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_ptr_plus_0.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     let x = Box::into_raw(Box::new(0u32));\n-    let x = x.wrapping_offset(8); // okay, this has no inbounds tag\n+    let x = x.wrapping_offset(8); // ok, this has no inbounds tag\n     let _x = unsafe { x.offset(0) }; // UB despite offset 0, the pointer is not inbounds of the only object it can point to\n }"}, {"sha": "f8e9e5781e39d536e7f9bd3dcb3e6ace1869c431", "filename": "tests/compile-fail/reading_half_a_pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freading_half_a_pointer.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -20,7 +20,7 @@ fn main() {\n \n     // Get a pointer to the beginning of the Data struct (one u8 byte, then the pointer bytes).\n     // Thanks to the wrapper, we know this is aligned-enough to perform a load at ptr size.\n-    // We load at pointer type, so having a relocation is okay -- but here, the relocation\n+    // We load at pointer type, so having a relocation is ok -- but here, the relocation\n     // starts 1 byte to the right, so using it would actually be wrong!\n     let d_alias = &mut w.data as *mut _ as *mut *const u8;\n     unsafe {"}, {"sha": "3fb38abefdae483b2febb7e0f5706cd6397d072a", "filename": "tests/compile-fail/stacked_borrows/illegal_read1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -4,7 +4,7 @@\n fn main() {\n     let mut x = 15;\n     let xraw = &mut x as *mut _;\n-    let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still okay...\n+    let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still ok...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n     //~^ ERROR: does not exist on the borrow stack"}, {"sha": "e43340f0b8eed47866228397680ae778bd017435", "filename": "tests/compile-fail/stacked_borrows/illegal_read2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -4,7 +4,7 @@\n fn main() {\n     let mut x = 15;\n     let xraw = &mut x as *mut _;\n-    let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still okay...\n+    let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still ok...\n     callee(xraw);\n     let _val = *xref; // ...but any use of raw will invalidate our ref.\n     //~^ ERROR: does not exist on the borrow stack"}, {"sha": "b4abbb4a1aedf8005817f285b2441823bad4c02d", "filename": "tests/compile-fail/stacked_borrows/illegal_read3.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,23 +1,25 @@\n-#![feature(untagged_unions)]\n-// A callee may not read the destination of our `&mut` without\n-// us noticing.\n+// A callee may not read the destination of our `&mut` without us noticing.\n // Thise code got carefully checked to not introduce any reborrows\n-// that are not explicit in the source.  Let's hope the compiler does not break this later!\n+// that are not explicit in the source. Let's hope the compiler does not break this later!\n+\n+#![feature(untagged_unions)]\n \n use std::mem;\n \n fn main() {\n     let mut x: i32 = 15;\n     let xref1 = &mut x;\n     let xref1_sneaky: usize = unsafe { mem::transmute_copy(&xref1) };\n-    let xref2 = &mut *xref1; // derived from xref1, so using raw is still okay...\n+    // Derived from `xref1`, so using raw value is still ok, ...\n+    let xref2 = &mut *xref1;\n     callee(xref1_sneaky);\n-    let _val = *xref2; // ...but any use of it will invalidate our ref.\n+    // ... though any use of it will invalidate our ref.\n+    let _val = *xref2;\n     //~^ ERROR: does not exist on the borrow stack\n }\n \n fn callee(xref1: usize) {\n-    // Transmuting through a union to avoid retagging\n+    // Transmuting through a union to avoid retagging.\n     union UsizeToRef {\n         from: usize,\n         to: &'static mut i32,"}, {"sha": "0f4737f16e63d500343b78b28f15582b805ab0da", "filename": "tests/compile-fail/stacked_borrows/illegal_read5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let rc = RefCell::new(0);\n     let mut refmut = rc.borrow_mut();\n     let xref: &mut i32 = &mut *refmut;\n-    let xshr = &rc; // creating this is okay\n+    let xshr = &rc; // creating this is ok\n     let _val = *xref; // we can even still use our mutable reference\n     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n     let _val = *xref; // the mutable one is dead and gone"}, {"sha": "3a0738bfd0b855e90a309fd8b0d4dd9307bcef45", "filename": "tests/compile-fail/stacked_borrows/illegal_write5.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,12 +1,13 @@\n-// A callee may not write to the destination of our `&mut` without\n-// us noticing.\n+// A callee may not write to the destination of our `&mut` without us noticing.\n \n fn main() {\n     let mut x = 15;\n     let xraw = &mut x as *mut _;\n-    let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still okay...\n+    // Derived from raw value, so using raw value is still ok ...\n+    let xref = unsafe { &mut *xraw };\n     callee(xraw);\n-    let _val = *xref; // ...but any use of raw will invalidate our ref.\n+    // ... though any use of raw value will invalidate our ref.\n+    let _val = *xref;\n     //~^ ERROR: does not exist on the borrow stack\n }\n "}, {"sha": "43f1eed42d07a8bae3d3b57a27f6329f93a0ac6e", "filename": "tests/compile-fail/transmute-pair-undef.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -8,13 +8,15 @@ fn main() {\n         std::mem::transmute::<(usize, bool), Option<Box<[u8]>>>(z)\n     };\n     let y = &x;\n-    // Now read this bytewise.  There should be (ptr_size+1) def bytes followed by (ptr_size-1) undef bytes (the padding after the bool) in there.\n+    // Now read this bytewise. There should be (`ptr_size + 1`) def bytes followed by\n+    // (`ptr_size - 1`) undef bytes (the padding after the bool) in there.\n     let z : *const u8 = y as *const _ as *const _;\n     let first_undef = mem::size_of::<usize>() as isize + 1;\n     for i in 0..first_undef {\n         let byte = unsafe { *z.offset(i) };\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n-    if v == 0 {} //~ ERROR attempted to read undefined bytes\n+    if v == 0 {}\n+    //~^ ERROR attempted to read undefined bytes\n }"}, {"sha": "9fb138e353fe7bcffafd3558c888a27e26de6cfb", "filename": "tests/compile-fail/unaligned_ptr_cast2.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,10 +1,11 @@\n-// This should fail even without validation\n+// This should fail even without validation.\n // compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const *const u8;\n-    // This must fail because alignment is violated.  Test specifically for loading pointers, which have special code\n-    // in miri's memory.\n-    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 2, but alignment\n+    // This must fail because alignment is violated. Test specifically for loading pointers,\n+    // which have special code in miri's memory.\n+    let _x = unsafe { *x };\n+    //~^ ERROR tried to access memory with alignment 2, but alignment\n }"}, {"sha": "d52b569175c1dc51a08099582e94388d72775965", "filename": "tests/compile-fail/unaligned_ptr_cast_zst.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,6 +1,7 @@\n fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const [u32; 0];\n-    // This must fail because alignment is violated.  Test specifically for loading ZST.\n-    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 2, but alignment 4 is required\n+    // This must fail because alignment is violated. Test specifically for loading ZST.\n+    let _x = unsafe { *x };\n+    //~^ ERROR tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "d1f6e33e459825100543b292d39c93a25eba6027", "filename": "tests/compile-fail/validity/cast_fn_ptr1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr1.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,10 +1,11 @@\n fn main() {\n     // Cast a function pointer such that on a call, the argument gets transmuted\n-    // from raw ptr to reference.  This is ABI-compatible, so it's not the call that\n+    // from raw ptr to reference. This is ABI-compatible, so it's not the call that\n     // should fail, but validation should.\n     fn f(_x: &i32) { }\n \n     let g: fn(*const i32) = unsafe { std::mem::transmute(f as fn(&i32)) };\n \n-    g(0usize as *const i32) //~ ERROR encountered 0, but expected something greater or equal to 1\n+    g(0usize as *const i32)\n+    //~^ ERROR encountered 0, but expected something greater or equal to 1\n }"}, {"sha": "809f118c1df15ff0d697b5edd645717037783875", "filename": "tests/compile-fail/validity/cast_fn_ptr2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr2.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,10 +1,11 @@\n fn main() {\n     // Cast a function pointer such that when returning, the return value gets transmuted\n-    // from raw ptr to reference.  This is ABI-compatible, so it's not the call that\n+    // from raw ptr to reference. This is ABI-compatible, so it's not the call that\n     // should fail, but validation should.\n     fn f() -> *const i32 { 0usize as *const i32 }\n \n     let g: fn() -> &'static i32 = unsafe { std::mem::transmute(f as fn() -> *const i32) };\n \n-    let _x = g(); //~ ERROR encountered 0, but expected something greater or equal to 1\n+    let _x = g();\n+    //~^ ERROR encountered 0, but expected something greater or equal to 1\n }"}, {"sha": "38a9d31d6e89155023cd9473c0aecbd9e21a7eb5", "filename": "tests/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -87,10 +87,10 @@ fn miri_pass(path: &str, target: &str, opt: bool) {\n     compiletest::run_tests(&config);\n }\n \n-/// Make sure the MIRI_SYSROOT env var is set\n+/// Ensures that the `MIRI_SYSROOT` env var is set.\n fn set_sysroot() {\n     if std::env::var(\"MIRI_SYSROOT\").is_ok() {\n-        // Nothing to do\n+        // Nothing to do.\n         return;\n     }\n     let sysroot = std::process::Command::new(\"rustc\")"}, {"sha": "2ff08ffc4bf6a03b9fbb79c26502811d503390a4", "filename": "tests/run-pass/associated-const.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fassociated-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fassociated-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fassociated-const.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n trait Foo {\n     const ID: i32;\n }"}, {"sha": "68a5d7295f1761e1c114f6f042af1165cb8eb1d4", "filename": "tests/run-pass/atomic-access-bool.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fatomic-access-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fatomic-access-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fatomic-access-bool.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::sync::atomic::{AtomicBool, Ordering::*};\n \n static mut ATOMIC: AtomicBool = AtomicBool::new(false);"}, {"sha": "575b53fb44b0e664477a5210dfac979467a67cd8", "filename": "tests/run-pass/atomic-compare_exchange.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fatomic-compare_exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fatomic-compare_exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fatomic-compare_exchange.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::sync::atomic::{AtomicIsize, Ordering::*};\n \n static ATOMIC: AtomicIsize = AtomicIsize::new(0);"}, {"sha": "1d03c8b3d0aa52e99c788e3456b5e59cb439466a", "filename": "tests/run-pass/binops.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbinops.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Binop corner cases\n \n fn test_nil() {"}, {"sha": "6442eab30a13233153c2e09639c5a2cd749ab774", "filename": "tests/run-pass/cast-rfc0401-vtable-kinds.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Check that you can cast between different pointers to trait objects\n // whose vtable have the same kind (both lengths, or both trait pointers).\n "}, {"sha": "52104d8486b054e51c7d3cf464483ab4ee01dbe1", "filename": "tests/run-pass/deriving-associated-types.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fderiving-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fderiving-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fderiving-associated-types.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n pub trait DeclaredTrait {\n     type Type;\n }"}, {"sha": "b8e9815640c2854e583e2be12b6ecdd99d55780a", "filename": "tests/run-pass/dst-field-align.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-field-align.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![allow(dead_code)]\n \n struct Foo<T: ?Sized> {"}, {"sha": "eeddfce75fd9f7c489dab53abc461f5e8e565967", "filename": "tests/run-pass/dst-irrefutable-bind.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fdst-irrefutable-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fdst-irrefutable-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-irrefutable-bind.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n struct Test<T: ?Sized>(T);\n \n fn main() {"}, {"sha": "a3ee982d19aa6c5ecb54d81b0d67be5a9df913c6", "filename": "tests/run-pass/dst-raw.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-raw.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Test DST raw pointers\n \n "}, {"sha": "770af864a44c004d5aead90f63ffe371d201a8e0", "filename": "tests/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-struct-sole.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // As dst-struct.rs, but the unsized field is the only field in the struct.\n \n "}, {"sha": "bd6517bd1fd77f373d4824fcc879defbb4a401e7", "filename": "tests/run-pass/dst-struct.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-struct.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {"}, {"sha": "87389c9c3a819dc68596e6629837a9486b24ca0b", "filename": "tests/run-pass/enum-nullable-const-null-with-fields.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n \n use std::result::Result;\n use std::result::Result::Ok;"}, {"sha": "ba7e6ac3ec06345f1286c6fe8f920af0b61aec30", "filename": "tests/run-pass/float_fast_math.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Ffloat_fast_math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Ffloat_fast_math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat_fast_math.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(core_intrinsics)]\n \n use std::intrinsics::{fadd_fast, fsub_fast, fmul_fast, fdiv_fast, frem_fast};"}, {"sha": "ebb0e5364b94e2f5347b60f8956668d31ecc5c2f", "filename": "tests/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fforeign-fn-linkname.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //ignore-windows: Uses POSIX APIs\n \n #![feature(rustc_private)]"}, {"sha": "477f548a7b0658ed942ef68809ee1703a9109f92", "filename": "tests/run-pass/generator.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fgenerator.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(generators, generator_trait)]\n \n use std::ops::{GeneratorState, Generator};"}, {"sha": "8ccf87ee7079efaccb241e7f8e04073b21bd673b", "filename": "tests/run-pass/issue-15063.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-15063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-15063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-15063.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![allow(dead_code)]\n \n enum Two { A, B }"}, {"sha": "3ef3718d5227611f1593a8d5618eb861ef8540d5", "filename": "tests/run-pass/issue-15080.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-15080.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(slice_patterns)]\n \n fn main() {"}, {"sha": "75fd8d8dfce8f9b8f686f8dc15a0ea57e3bba485", "filename": "tests/run-pass/issue-15523-big.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-15523-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-15523-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-15523-big.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Issue 15523: derive(PartialOrd) should use the provided\n // discriminant values for the derived ordering.\n //"}, {"sha": "caad8b27766fe5a66534b5e79356501857f8d3cf", "filename": "tests/run-pass/issue-17877.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-17877.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //ignore-windows: Causes a stack overflow?!? Likely a rustc bug: https://github.com/rust-lang/rust/issues/53820\n //FIXME: Once that bug is fixed, increase the size to 16*1024 and enable on all platforms.\n "}, {"sha": "1443ec78fd75ed20f37d03aa8c3b5e886334747b", "filename": "tests/run-pass/issue-20575.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-20575.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Test that overloaded calls work with zero arity closures\n \n fn main() {"}, {"sha": "3e1aa295af1ea52fbfcd2486b80755b8613ce927", "filename": "tests/run-pass/issue-23261.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-23261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-23261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-23261.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Matching on a DST struct should not trigger an LLVM assertion.\n \n struct Foo<T: ?Sized> {"}, {"sha": "a283d8743ccff5f53901b9a85195c1c923313d38", "filename": "tests/run-pass/issue-26709.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-26709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-26709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-26709.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n struct Wrapper<'a, T: ?Sized>(&'a mut i32, T);\n \n impl<'a, T: ?Sized> Drop for Wrapper<'a, T> {"}, {"sha": "b0822accb6b6b48ef3afedf04c63226440e7b050", "filename": "tests/run-pass/issue-27901.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-27901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-27901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-27901.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n trait Stream { type Item; }\n impl<'a> Stream for &'a str { type Item = u8; }\n fn f<'s>(s: &'s str) -> (&'s str, <&'s str as Stream>::Item) {"}, {"sha": "d04703d6877c84f769f772110fff4c244ab0da51", "filename": "tests/run-pass/issue-29746.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-29746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-29746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-29746.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // zip!(a1,a2,a3,a4) is equivalent to:\n //  a1.zip(a2).zip(a3).zip(a4).map(|(((x1,x2),x3),x4)| (x1,x2,x3,x4))\n macro_rules! zip {"}, {"sha": "f6d7209369b7078d0800f61910c35f4fac3dd385", "filename": "tests/run-pass/issue-31267-additional.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-31267-additional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-31267-additional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-31267-additional.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #[derive(Clone, Copy, Debug)]\n struct Bar;\n "}, {"sha": "2335f9c1b9412e089e6210d9e8a359726e0057ab", "filename": "tests/run-pass/issue-33387.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-33387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-33387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-33387.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::sync::Arc;\n \n trait Foo {}"}, {"sha": "28fe076b644d4c4dabd07d5ca7ea37954b90948b", "filename": "tests/run-pass/issue-34571.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-34571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-34571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-34571.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #[repr(u8)]\n enum Foo {\n     Foo(u8),"}, {"sha": "e17c37f92a501cb54d1e6526767c871b388e2722", "filename": "tests/run-pass/issue-35815.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-35815.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-35815.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-35815.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![allow(dead_code)]\n \n use std::mem;"}, {"sha": "cbffbbc0e0f86d68016ea27a8cc187024b897daf", "filename": "tests/run-pass/issue-36278-prefix-nesting.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-36278-prefix-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-36278-prefix-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-36278-prefix-nesting.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Issue 36278: On an unsized struct with >1 level of nontrivial\n // nesting, ensure we are computing dynamic size of prefix correctly.\n "}, {"sha": "9161fefef30cf5ea51f8bca00170246619d5f414", "filename": "tests/run-pass/issue-3794.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-3794.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(box_syntax)]\n \n trait T {"}, {"sha": "eb506dd3a17ebd6c4cfda98e4d1a9569767a5ac1", "filename": "tests/run-pass/issue-5917.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-5917.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fissue-5917.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-5917.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n \n struct T (&'static [isize]);\n static STATIC : T = T (&[5, 4, 3]);"}, {"sha": "f75f00b87fd4835e3a2412a9bc0ea46ee255eaf4", "filename": "tests/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Make sure #1399 stays fixed\n \n #[allow(dead_code)]"}, {"sha": "bd7afa7ec1a800d345cdb7fa061ff87ea59747f6", "filename": "tests/run-pass/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Floop-break-value.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(never_type)]\n #![allow(unreachable_code)]\n "}, {"sha": "f3d8e519d23ed7cd7d6952c28d2de08e1e6fb40b", "filename": "tests/run-pass/mir_coercions.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmir_coercions.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(coerce_unsized, unsize)]\n \n use std::ops::CoerceUnsized;"}, {"sha": "55418c4802a7c2ef961f570402682f9cac25a50f", "filename": "tests/run-pass/mir_fat_ptr.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fmir_fat_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fmir_fat_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmir_fat_ptr.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // test that ordinary fat pointer operations work.\n \n struct Wrapper<T: ?Sized>(u32, T);"}, {"sha": "b31b868bb96d57b5c0d91bc58e465980fcbb53a9", "filename": "tests/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmove-arg-2-unique.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(box_syntax)]\n \n fn test(foo: Box<Vec<isize>> ) { assert_eq!((*foo)[0], 10); }"}, {"sha": "3b5c7cbbd42cabbf8ad85d695cb574a537ce29df", "filename": "tests/run-pass/move-arg-3-unique.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fmove-arg-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fmove-arg-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmove-arg-3-unique.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "12e632c251b426ac8e38cf44aeff2890e26f0988", "filename": "tests/run-pass/overloaded-calls-simple.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Foverloaded-calls-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Foverloaded-calls-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Foverloaded-calls-simple.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n \n #![feature(lang_items, unboxed_closures, fn_traits)]\n "}, {"sha": "e0e7d2afefc52ab255f0e4ce94abb855799cb532", "filename": "tests/run-pass/ref-invalid-ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fref-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fref-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fref-invalid-ptr.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,12 +1,12 @@\n-// FIXME validation disabled because it checks these references too eagerly\n+// FIXME: validation disabled because it checks these references too eagerly.\n // compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     let x = 2usize as *const u32;\n-    // this is not aligned, but we immediately cast it to a raw ptr so that must be okay\n+    // This is not aligned, but we immediately cast it to a raw ptr so that must be ok.\n     let _y = unsafe { &*x as *const u32 };\n \n     let x = 0usize as *const u32;\n-    // this is NULL, but we immediately cast it to a raw ptr so that must be okay\n+    // This is NULL, but we immediately cast it to a raw ptr so that must be ok.\n     let _y = unsafe { &*x as *const u32 };\n }"}, {"sha": "85a189007c3debb108cfa22367eb38b90db86ae1", "filename": "tests/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // This is a regression test for the ICE from issue #10846.\n //\n // The original issue causing the ICE: the LUB-computations during\n@@ -17,10 +7,10 @@\n //\n // However, those encounters were occurring within the lexical scope\n // of the binding for the late-bound lifetime; that is, the late-bound\n-// lifetimes were perfectly valid.  The core problem was that the type\n+// lifetimes were perfectly valid. The core problem was that the type\n // folding code was over-zealously passing back all lifetimes when\n // doing region-folding, when really all clients of the region-folding\n-// case only want to see FREE lifetime variables, not bound ones.\n+// case only want to see *free* lifetime variables, not bound ones.\n \n #![feature(box_syntax)]\n "}, {"sha": "ac8a1c04fbe4fa583172ac238dd3c71f92af071b", "filename": "tests/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-mock-trans.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //ignore-windows: Uses POSIX APIs\n \n #![feature(rustc_private)]"}, {"sha": "2f893d8150c94f44d4bb0cbfe1afbeb7dc31b95b", "filename": "tests/run-pass/rfc1623.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frfc1623.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![allow(dead_code)]\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "396a87fca060d695d5afe586ca501cd3179ce9c0", "filename": "tests/run-pass/send-is-not-static-par-for.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fsend-is-not-static-par-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fsend-is-not-static-par-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsend-is-not-static-par-for.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::sync::Mutex;\n \n fn par_for<I, F>(iter: I, f: F)"}, {"sha": "b2feb5316f87397cf566166e68e224c88ac6ea15", "filename": "tests/run-pass/sendable-class.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsendable-class.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Test that a class with only sendable fields can be sent\n \n use std::sync::mpsc::channel;"}, {"sha": "e8fba6707db1ef487df39026c9382099622fd4d3", "filename": "tests/run-pass/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsimd-intrinsic-generic-elements.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(repr_simd, platform_intrinsics)]\n \n #[repr(simd)]"}, {"sha": "711026c02dfc0d1700342482875aed11cf597f17", "filename": "tests/run-pass/stacked-borrows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -46,8 +46,8 @@ fn read_does_not_invalidate2() {\n }\n \n // Just to make sure that casting a ref to raw, to int and back to raw\n-// and only then using it works.  This rules out ideas like \"do escape-to-raw lazily\":\n-// After casting to int and back, we lost the tag that could have let us do that.\n+// and only then using it works. This rules out ideas like \"do escape-to-raw lazily\";\n+// after casting to int and back, we lost the tag that could have let us do that.\n fn ref_raw_int_raw() {\n     let mut x = 3;\n     let xref = &mut x;\n@@ -103,7 +103,7 @@ fn partially_invalidate_mut() {\n     let data = &mut (0u8, 0u8);\n     let reborrow = &mut *data as *mut (u8, u8);\n     let shard = unsafe { &mut (*reborrow).0 };\n-    data.1 += 1; // the deref overlaps with `shard`, but that is okay; the access does not overlap.\n+    data.1 += 1; // the deref overlaps with `shard`, but that is ok; the access does not overlap.\n     *shard += 1; // so we can still use `shard`.\n     assert_eq!(*data, (1, 1));\n }"}, {"sha": "ccbf63796af5be07002f4d90ecd36be6adabd03a", "filename": "tests/run-pass/try-operator-custom.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Ftry-operator-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Ftry-operator-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftry-operator-custom.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n fn main() {\n     assert!(Ok::<i32, String>(42) == Ok(42));\n }"}, {"sha": "5a5d7c1f944213ffc2207b9a89bc0f47843052f3", "filename": "tests/run-pass/u128.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fu128.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n fn b<T>(t: T) -> T { t }\n \n fn main() {"}, {"sha": "5c618763c0d28413bd955d6840333eb59d5e9989", "filename": "tests/run-pass/union-overwrite.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Funion-overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Funion-overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funion-overwrite.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(untagged_unions)]\n #![allow(unions_with_drop_fields)]\n "}, {"sha": "04dbf495f8bfde9d473fd0529501f2356d1a3778", "filename": "tests/run-pass/unique-send.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funique-send.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(box_syntax)]\n \n use std::sync::mpsc::channel;"}, {"sha": "54bd6f5c34f83ff0adc2d0b68558303c2e17fa6a", "filename": "tests/run-pass/unsized-tuple-impls.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Funsized-tuple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Funsized-tuple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funsized-tuple-impls.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(unsized_tuple_coercion)]\n use std::mem;\n "}, {"sha": "a0eea517095bf6d888fd4439de051a49d939a0c8", "filename": "tests/run-pass/validation_lifetime_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fvalidation_lifetime_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fvalidation_lifetime_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvalidation_lifetime_resolution.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -20,9 +20,9 @@ fn foo<T>(mut x: T) where for<'a> &'a mut T: Id\n {\n     let x = &mut x;\n     let _y = x.id();\n-    // Inspecting the trace should show that _y has a type involving a local lifetime, when it gets validated.\n+    // Inspecting the trace should show that `_y` has a type involving a local lifetime, when it gets validated.\n     // Unfortunately, there doesn't seem to be a way to actually have a test fail if it does not have the right\n-    // type.  Currently, this is NOT working correctly; see <https://github.com/rust-lang/miri/issues/298>.\n+    // type. Currently, this is *not* working correctly; see <https://github.com/rust-lang/miri/issues/298>.\n }\n \n fn main() {"}, {"sha": "f953e04747050466c2c55ebce50b8dd11f3ac875", "filename": "tests/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec-matching-fold.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(slice_patterns)]\n \n use std::fmt::Debug;"}, {"sha": "c9312d79bfda0358e9c3d8b8f0ef095d39a724d6", "filename": "tests/run-pass/zero-sized-binary-heap-push.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fzero-sized-binary-heap-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fzero-sized-binary-heap-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzero-sized-binary-heap-push.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::collections::BinaryHeap;\n use std::iter::Iterator;\n "}, {"sha": "9d97210b73db6cfa118d117f4d0a922a448aa019", "filename": "tests/run-pass/zst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478bfebd2aef26287268fd0c0e255184a24a7a1/tests%2Frun-pass%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst.rs?ref=a478bfebd2aef26287268fd0c0e255184a24a7a1", "patch": "@@ -18,16 +18,16 @@ fn main() {\n     assert_eq!(zst_ret(), A);\n     assert_eq!(use_zst(), A);\n     let x = 42 as *mut [u8; 0];\n-    // reading and writing is okay\n+    // Reading and writing is ok.\n     unsafe { *x = zst_val; }\n     unsafe { let _y = *x; }\n \n     // We should even be able to use \"true\" pointers for ZST when the allocation has been\n-    // removed already.  The box is for a non-ZST to make sure there actually is an allocation.\n+    // removed already. The box is for a non-ZST to make sure there actually is an allocation.\n     let mut x_box = Box::new(((), 1u8));\n     let x = &mut x_box.0 as *mut _ as *mut [u8; 0];\n     drop(x_box);\n-    // reading and writing is okay\n+    // Reading and writing is ok.\n     unsafe { *x = zst_val; }\n     unsafe { let _y = *x; }\n }"}]}