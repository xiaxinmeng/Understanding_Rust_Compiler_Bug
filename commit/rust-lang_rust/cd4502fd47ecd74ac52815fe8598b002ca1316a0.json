{"sha": "cd4502fd47ecd74ac52815fe8598b002ca1316a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDUwMmZkNDdlY2Q3NGFjNTI4MTVmZTg1OThiMDAyY2ExMzE2YTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-10T12:39:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-10T12:39:05Z"}, "message": "Simplify tests", "tree": {"sha": "8d4efae0971003fb4b7dea00254f650cd8734a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d4efae0971003fb4b7dea00254f650cd8734a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd4502fd47ecd74ac52815fe8598b002ca1316a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4502fd47ecd74ac52815fe8598b002ca1316a0", "html_url": "https://github.com/rust-lang/rust/commit/cd4502fd47ecd74ac52815fe8598b002ca1316a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd4502fd47ecd74ac52815fe8598b002ca1316a0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4147f6a341bda8f4a181a096b7dd726fc2d6b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4147f6a341bda8f4a181a096b7dd726fc2d6b31", "html_url": "https://github.com/rust-lang/rust/commit/f4147f6a341bda8f4a181a096b7dd726fc2d6b31"}], "stats": {"total": 113, "additions": 53, "deletions": 60}, "files": [{"sha": "723c3e8aef6aabd79ab09ed80ac618cdc80e3813", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 53, "deletions": 60, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/cd4502fd47ecd74ac52815fe8598b002ca1316a0/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4502fd47ecd74ac52815fe8598b002ca1316a0/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=cd4502fd47ecd74ac52815fe8598b002ca1316a0", "patch": "@@ -54,105 +54,98 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::mock_analysis::analysis_and_position;\n+    use ra_db::FileRange;\n \n-    fn check_goto(ra_fixture: &str, expected: &str) {\n-        let (analysis, pos) = analysis_and_position(ra_fixture);\n+    use crate::mock_analysis::MockAnalysis;\n \n-        let mut navs = analysis.goto_type_definition(pos).unwrap().unwrap().info;\n+    fn check(ra_fixture: &str) {\n+        let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n+        let (expected, data) = mock.annotation();\n+        assert!(data.is_empty());\n+        let analysis = mock.analysis();\n+\n+        let mut navs = analysis.goto_type_definition(position).unwrap().unwrap().info;\n         assert_eq!(navs.len(), 1);\n         let nav = navs.pop().unwrap();\n-        nav.assert_match(expected);\n+        assert_eq!(expected, FileRange { file_id: nav.file_id(), range: nav.range() });\n     }\n \n     #[test]\n     fn goto_type_definition_works_simple() {\n-        check_goto(\n-            r\"\n-            //- /lib.rs\n-            struct Foo;\n-            fn foo() {\n-                let f: Foo;\n-                f<|>\n-            }\n-            \",\n-            \"Foo STRUCT_DEF FileId(1) 0..11 7..10\",\n+        check(\n+            r#\"\n+struct Foo;\n+     //^^^\n+fn foo() {\n+    let f: Foo; f<|>\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_type_definition_works_simple_ref() {\n-        check_goto(\n-            r\"\n-            //- /lib.rs\n-            struct Foo;\n-            fn foo() {\n-                let f: &Foo;\n-                f<|>\n-            }\n-            \",\n-            \"Foo STRUCT_DEF FileId(1) 0..11 7..10\",\n+        check(\n+            r#\"\n+struct Foo;\n+     //^^^\n+fn foo() {\n+    let f: &Foo; f<|>\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_type_definition_works_through_macro() {\n-        check_goto(\n-            r\"\n-            //- /lib.rs\n-            macro_rules! id {\n-                ($($tt:tt)*) => { $($tt)* }\n-            }\n-            struct Foo {}\n-            id! {\n-                fn bar() {\n-                    let f<|> = Foo {};\n-                }\n-            }\n-            \",\n-            \"Foo STRUCT_DEF FileId(1) 52..65 59..62\",\n+        check(\n+            r#\"\n+macro_rules! id { ($($tt:tt)*) => { $($tt)* } }\n+struct Foo {}\n+     //^^^\n+id! {\n+    fn bar() { let f<|> = Foo {}; }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_type_definition_for_param() {\n-        check_goto(\n-            r\"\n-            //- /lib.rs\n-            struct Foo;\n-            fn foo(<|>f: Foo) {}\n-            \",\n-            \"Foo STRUCT_DEF FileId(1) 0..11 7..10\",\n+        check(\n+            r#\"\n+struct Foo;\n+     //^^^\n+fn foo(<|>f: Foo) {}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_type_definition_for_tuple_field() {\n-        check_goto(\n-            r\"\n-            //- /lib.rs\n-            struct Foo;\n-            struct Bar(Foo);\n-            fn foo() {\n-                let bar = Bar(Foo);\n-                bar.<|>0;\n-            }\n-            \",\n-            \"Foo STRUCT_DEF FileId(1) 0..11 7..10\",\n+        check(\n+            r#\"\n+struct Foo;\n+     //^^^\n+struct Bar(Foo);\n+fn foo() {\n+    let bar = Bar(Foo);\n+    bar.<|>0;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_self_param() {\n-        check_goto(\n+        check(\n             r#\"\n struct Foo;\n+     //^^^\n impl Foo {\n-   //^^^\n     fn f(&self<|>) {}\n }\n \"#,\n-            \"Foo STRUCT_DEF FileId(1) 0..11 7..10\",\n         )\n     }\n }"}]}