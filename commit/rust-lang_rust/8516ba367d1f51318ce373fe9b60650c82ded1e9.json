{"sha": "8516ba367d1f51318ce373fe9b60650c82ded1e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MTZiYTM2N2QxZjUxMzE4Y2UzNzNmZTliNjA2NTBjODJkZWQxZTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T14:27:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::CaptureClause variants", "tree": {"sha": "d3feaa20d76319d79526412296665d504c062345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3feaa20d76319d79526412296665d504c062345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8516ba367d1f51318ce373fe9b60650c82ded1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8516ba367d1f51318ce373fe9b60650c82ded1e9", "html_url": "https://github.com/rust-lang/rust/commit/8516ba367d1f51318ce373fe9b60650c82ded1e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8516ba367d1f51318ce373fe9b60650c82ded1e9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "html_url": "https://github.com/rust-lang/rust/commit/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "11bbc14b7b7b9ef1f93d77243c7a658b4d03be5b", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8516ba367d1f51318ce373fe9b60650c82ded1e9/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8516ba367d1f51318ce373fe9b60650c82ded1e9/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=8516ba367d1f51318ce373fe9b60650c82ded1e9", "patch": "@@ -1555,10 +1555,10 @@ pub fn lower_stmt(lctx: &LoweringContext, s: &Stmt) -> hir::Stmt {\n     }\n }\n \n-pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureClause) -> hir::CaptureClause {\n+pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureBy) -> hir::CaptureClause {\n     match c {\n-        CaptureByValue => hir::CaptureByValue,\n-        CaptureByRef => hir::CaptureByRef,\n+        CaptureBy::Value => hir::CaptureByValue,\n+        CaptureBy::Ref => hir::CaptureByRef,\n     }\n }\n "}, {"sha": "209ed014ea27caaa5c7d87a45da76675a41a5a2e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8516ba367d1f51318ce373fe9b60650c82ded1e9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8516ba367d1f51318ce373fe9b60650c82ded1e9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8516ba367d1f51318ce373fe9b60650c82ded1e9", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::CaptureClause::*;\n pub use self::Decl_::*;\n pub use self::ExplicitSelf_::*;\n pub use self::Expr_::*;\n@@ -973,7 +972,7 @@ pub enum Expr_ {\n     /// A `match` block.\n     ExprMatch(P<Expr>, Vec<Arm>),\n     /// A closure (for example, `move |a, b, c| {a + b + c}`)\n-    ExprClosure(CaptureClause, P<FnDecl>, P<Block>),\n+    ExprClosure(CaptureBy, P<FnDecl>, P<Block>),\n     /// A block (`{ ... }`)\n     ExprBlock(P<Block>),\n \n@@ -1052,10 +1051,11 @@ pub struct QSelf {\n     pub position: usize\n }\n \n+/// A capture clause\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum CaptureClause {\n-    CaptureByValue,\n-    CaptureByRef,\n+pub enum CaptureBy {\n+    Value,\n+    Ref,\n }\n \n /// A delimited sequence of token trees"}, {"sha": "5980cf3abcc5a7a50797f33eefadcfb5d42a2917", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8516ba367d1f51318ce373fe9b60650c82ded1e9/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8516ba367d1f51318ce373fe9b60650c82ded1e9/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=8516ba367d1f51318ce373fe9b60650c82ded1e9", "patch": "@@ -883,14 +883,14 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn lambda_fn_decl(&self, span: Span,\n                       fn_decl: P<ast::FnDecl>, blk: P<ast::Block>) -> P<ast::Expr> {\n-        self.expr(span, ast::ExprClosure(ast::CaptureByRef, fn_decl, blk))\n+        self.expr(span, ast::ExprClosure(ast::CaptureBy::Ref, fn_decl, blk))\n     }\n     fn lambda(&self, span: Span, ids: Vec<ast::Ident>, blk: P<ast::Block>) -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n             ids.iter().map(|id| self.arg(span, *id, self.ty_infer(span))).collect(),\n             self.ty_infer(span));\n \n-        self.expr(span, ast::ExprClosure(ast::CaptureByRef, fn_decl, blk))\n+        self.expr(span, ast::ExprClosure(ast::CaptureBy::Ref, fn_decl, blk))\n     }\n     fn lambda0(&self, span: Span, blk: P<ast::Block>) -> P<ast::Expr> {\n         self.lambda(span, Vec::new(), blk)"}, {"sha": "c149f1f62b0ba110937bebc9b46f5f929c88a9a6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8516ba367d1f51318ce373fe9b60650c82ded1e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8516ba367d1f51318ce373fe9b60650c82ded1e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8516ba367d1f51318ce373fe9b60650c82ded1e9", "patch": "@@ -16,7 +16,7 @@ use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::{Public, Unsafety};\n use ast::{Mod, Arg, Arm, Attribute, BindingMode};\n use ast::Block;\n-use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n+use ast::{BlockCheckMode, CaptureBy};\n use ast::{Constness, ConstTraitItem, Crate, CrateConfig};\n use ast::{Decl, DeclItem, DeclLocal};\n use ast::{EMPTY_CTXT, EnumDef, ExplicitSelf};\n@@ -2108,7 +2108,7 @@ impl<'a> Parser<'a> {\n             },\n             token::BinOp(token::Or) |  token::OrOr => {\n                 let lo = self.span.lo;\n-                return self.parse_lambda_expr(lo, CaptureByRef, attrs);\n+                return self.parse_lambda_expr(lo, CaptureBy::Ref, attrs);\n             },\n             token::Ident(id @ ast::Ident {\n                             name: token::SELF_KEYWORD_NAME,\n@@ -2167,7 +2167,7 @@ impl<'a> Parser<'a> {\n                 }\n                 if self.eat_keyword(keywords::Move) {\n                     let lo = self.last_span.lo;\n-                    return self.parse_lambda_expr(lo, CaptureByValue, attrs);\n+                    return self.parse_lambda_expr(lo, CaptureBy::Value, attrs);\n                 }\n                 if self.eat_keyword(keywords::If) {\n                     return self.parse_if_expr(attrs);\n@@ -3047,7 +3047,7 @@ impl<'a> Parser<'a> {\n \n     // `|args| expr`\n     pub fn parse_lambda_expr(&mut self, lo: BytePos,\n-                             capture_clause: CaptureClause,\n+                             capture_clause: CaptureBy,\n                              attrs: ThinAttributes)\n                              -> PResult<'a, P<Expr>>\n     {"}, {"sha": "9b8e16bbd3804a803b462ca6450fddf239f23604", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8516ba367d1f51318ce373fe9b60650c82ded1e9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8516ba367d1f51318ce373fe9b60650c82ded1e9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8516ba367d1f51318ce373fe9b60650c82ded1e9", "patch": "@@ -2741,11 +2741,11 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_capture_clause(&mut self, capture_clause: ast::CaptureClause)\n+    pub fn print_capture_clause(&mut self, capture_clause: ast::CaptureBy)\n                                 -> io::Result<()> {\n         match capture_clause {\n-            ast::CaptureByValue => self.word_space(\"move\"),\n-            ast::CaptureByRef => Ok(()),\n+            ast::CaptureBy::Value => self.word_space(\"move\"),\n+            ast::CaptureBy::Ref => Ok(()),\n         }\n     }\n "}]}