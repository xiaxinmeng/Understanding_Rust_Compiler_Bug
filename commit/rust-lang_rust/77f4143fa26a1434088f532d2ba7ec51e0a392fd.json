{"sha": "77f4143fa26a1434088f532d2ba7ec51e0a392fd", "node_id": "C_kwDOAAsO6NoAKDc3ZjQxNDNmYTI2YTE0MzQwODhmNTMyZDJiYTdlYzUxZTBhMzkyZmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-22T04:02:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-22T04:02:01Z"}, "message": "Auto merge of #88846 - jackh726:issue-88360, r=nikomatsakis\n\nIn suggest_missing_return_type, erase late bound regions after normalizing\n\nFixes #88360\n\nThere might be some hardening that could be done to not error or avoid erroring with LUBing `ReErased` with `ReEmpty`, but this was the most simple fix for this particular case.\n\nr? `@nikomatsakis`", "tree": {"sha": "2ac36b864964dec158496187d069dffd96949f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ac36b864964dec158496187d069dffd96949f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77f4143fa26a1434088f532d2ba7ec51e0a392fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77f4143fa26a1434088f532d2ba7ec51e0a392fd", "html_url": "https://github.com/rust-lang/rust/commit/77f4143fa26a1434088f532d2ba7ec51e0a392fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77f4143fa26a1434088f532d2ba7ec51e0a392fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd6f3b16db75f01ffa4e59860e35f1e636590d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd6f3b16db75f01ffa4e59860e35f1e636590d5", "html_url": "https://github.com/rust-lang/rust/commit/5fd6f3b16db75f01ffa4e59860e35f1e636590d5"}, {"sha": "1ed18f589ec62bf99a4ff541830fbc2bc48ce9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed18f589ec62bf99a4ff541830fbc2bc48ce9f1", "html_url": "https://github.com/rust-lang/rust/commit/1ed18f589ec62bf99a4ff541830fbc2bc48ce9f1"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "da8b863e2dbe6f17e7530151247568061e25aa61", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77f4143fa26a1434088f532d2ba7ec51e0a392fd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4143fa26a1434088f532d2ba7ec51e0a392fd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=77f4143fa26a1434088f532d2ba7ec51e0a392fd", "patch": "@@ -484,8 +484,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n                 debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n                 let bound_vars = self.tcx.late_bound_vars(fn_id);\n-                let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n+                let ty = Binder::bind_with_vars(ty, bound_vars);\n                 let ty = self.normalize_associated_types_in(sp, ty);\n+                let ty = self.tcx.erase_late_bound_regions(ty);\n                 if self.can_coerce(expected, ty) {\n                     err.span_label(sp, format!(\"expected `{}` because of return type\", expected));\n                     return true;"}, {"sha": "06af3f5ec96d65f2d7f5c3c6c9480bc30726c62a", "filename": "src/test/ui/generic-associated-types/issue-88360.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/77f4143fa26a1434088f532d2ba7ec51e0a392fd/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4143fa26a1434088f532d2ba7ec51e0a392fd/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.rs?ref=77f4143fa26a1434088f532d2ba7ec51e0a392fd", "patch": "@@ -0,0 +1,19 @@\n+#![feature(generic_associated_types)]\n+\n+trait GatTrait {\n+    type Gat<'a>;\n+\n+    fn test(&self) -> Self::Gat<'_>;\n+}\n+\n+trait SuperTrait<T>\n+where\n+    for<'a> Self: GatTrait<Gat<'a> = &'a T>,\n+{\n+    fn copy(&self) -> Self::Gat<'_> where T: Copy {\n+        *self.test()\n+        //~^ mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "cfbf3aaa4e65d556a156915c43e7c87aa74c32ea", "filename": "src/test/ui/generic-associated-types/issue-88360.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77f4143fa26a1434088f532d2ba7ec51e0a392fd/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4143fa26a1434088f532d2ba7ec51e0a392fd/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.stderr?ref=77f4143fa26a1434088f532d2ba7ec51e0a392fd", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-88360.rs:14:9\n+   |\n+LL | trait SuperTrait<T>\n+   |                  - this type parameter\n+...\n+LL |     fn copy(&self) -> Self::Gat<'_> where T: Copy {\n+   |                       ------------- expected `&T` because of return type\n+LL |         *self.test()\n+   |         ^^^^^^^^^^^^\n+   |         |\n+   |         expected `&T`, found type parameter `T`\n+   |         help: consider borrowing here: `&*self.test()`\n+   |\n+   = note:   expected reference `&T`\n+           found type parameter `T`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}