{"sha": "3473ff3bff2ed2286080812417068552d6b9df31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NzNmZjNiZmYyZWQyMjg2MDgwODEyNDE3MDY4NTUyZDZiOWRmMzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-08T02:03:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-08T02:03:33Z"}, "message": "rustc: Cast dynamically-sized tags in iter_structural_ty_full() to opaque tag types. Un-XFAIL generic-recursive-tag.rs.", "tree": {"sha": "ab6474b6c89c6ef6de2cecf43c21f9f91e8dffc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab6474b6c89c6ef6de2cecf43c21f9f91e8dffc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3473ff3bff2ed2286080812417068552d6b9df31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3473ff3bff2ed2286080812417068552d6b9df31", "html_url": "https://github.com/rust-lang/rust/commit/3473ff3bff2ed2286080812417068552d6b9df31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3473ff3bff2ed2286080812417068552d6b9df31/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed226c6b3a28f3c10d2176d7dba7e339bf0ab99", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed226c6b3a28f3c10d2176d7dba7e339bf0ab99", "html_url": "https://github.com/rust-lang/rust/commit/6ed226c6b3a28f3c10d2176d7dba7e339bf0ab99"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "a239329f4e541720d23c55ee81b7fac6840b96d3", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3473ff3bff2ed2286080812417068552d6b9df31/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3473ff3bff2ed2286080812417068552d6b9df31/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=3473ff3bff2ed2286080812417068552d6b9df31", "patch": "@@ -453,7 +453,6 @@ TEST_XFAILS_RUSTC := $(addprefix test/run-pass/, \\\n                         foreach-simple-outer-slot.rs \\\n                         generic-fn-twice.rs \\\n                         generic-iter-frame.rs \\\n-                        generic-recursive-tag.rs \\\n                         generic-tag-alt.rs \\\n                         generic-tag-values.rs \\\n                         iter-range.rs \\"}, {"sha": "a282c0a240cec9a1ac4890e468cc7529cea72956", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3473ff3bff2ed2286080812417068552d6b9df31/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3473ff3bff2ed2286080812417068552d6b9df31/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3473ff3bff2ed2286080812417068552d6b9df31", "patch": "@@ -1053,6 +1053,9 @@ fn dynamic_align_of(@block_ctxt cx, @ty.t t) -> result {\n             }\n             ret res(bcx, a);\n         }\n+        case (ty.ty_tag(_, _)) {\n+            ret res(cx, C_int(1)); // FIXME: stub\n+        }\n     }\n }\n \n@@ -1805,12 +1808,21 @@ fn iter_structural_ty_full(@block_ctxt cx,\n             auto variants = tag_variants(cx.fcx.ccx, tid);\n             auto n_variants = _vec.len[ast.variant](variants);\n \n-            auto lldiscrim_a_ptr = cx.build.GEP(av, vec(C_int(0), C_int(0)));\n-            auto llunion_a_ptr = cx.build.GEP(av, vec(C_int(0), C_int(1)));\n+            // Cast the tags to types we can GEP into.\n+            auto lltagty = T_opaque_tag_ptr(cx.fcx.ccx.tn);\n+            auto av_tag = cx.build.PointerCast(av, lltagty);\n+            auto bv_tag = cx.build.PointerCast(bv, lltagty);\n+\n+            auto lldiscrim_a_ptr = cx.build.GEP(av_tag,\n+                                                vec(C_int(0), C_int(0)));\n+            auto llunion_a_ptr = cx.build.GEP(av_tag,\n+                                              vec(C_int(0), C_int(1)));\n             auto lldiscrim_a = cx.build.Load(lldiscrim_a_ptr);\n \n-            auto lldiscrim_b_ptr = cx.build.GEP(bv, vec(C_int(0), C_int(0)));\n-            auto llunion_b_ptr = cx.build.GEP(bv, vec(C_int(0), C_int(1)));\n+            auto lldiscrim_b_ptr = cx.build.GEP(bv_tag,\n+                                                vec(C_int(0), C_int(0)));\n+            auto llunion_b_ptr = cx.build.GEP(bv_tag,\n+                                              vec(C_int(0), C_int(1)));\n             auto lldiscrim_b = cx.build.Load(lldiscrim_b_ptr);\n \n             // NB: we must hit the discriminant first so that structural"}]}