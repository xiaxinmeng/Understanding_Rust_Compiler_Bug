{"sha": "b5105f566782bf5149f9c3e28b55a1b05305d451", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MTA1ZjU2Njc4MmJmNTE0OWY5YzNlMjhiNTVhMWIwNTMwNWQ0NTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-06T17:21:26Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-06T17:21:26Z"}, "message": "Merge pull request #631 from mcarton/regex\n\nFix false negative in TRIVIAL_REGEX", "tree": {"sha": "a9958d6d659c69701f9947a80b018b81ead2c826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9958d6d659c69701f9947a80b018b81ead2c826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5105f566782bf5149f9c3e28b55a1b05305d451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5105f566782bf5149f9c3e28b55a1b05305d451", "html_url": "https://github.com/rust-lang/rust/commit/b5105f566782bf5149f9c3e28b55a1b05305d451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5105f566782bf5149f9c3e28b55a1b05305d451/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f53a830c8c854e283ef265f21b2b2cc1e5603f99", "url": "https://api.github.com/repos/rust-lang/rust/commits/f53a830c8c854e283ef265f21b2b2cc1e5603f99", "html_url": "https://github.com/rust-lang/rust/commit/f53a830c8c854e283ef265f21b2b2cc1e5603f99"}, {"sha": "d9a2a7ac3c992f6093babb7770acfaac3a08833f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a2a7ac3c992f6093babb7770acfaac3a08833f", "html_url": "https://github.com/rust-lang/rust/commit/d9a2a7ac3c992f6093babb7770acfaac3a08833f"}], "stats": {"total": 105, "additions": 64, "deletions": 41}, "files": [{"sha": "cf19c764361ac6d8a810f3e21bbed849cd68d03c", "filename": "src/regex.rs", "status": "modified", "additions": 55, "deletions": 41, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b5105f566782bf5149f9c3e28b55a1b05305d451/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5105f566782bf5149f9c3e28b55a1b05305d451/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=b5105f566782bf5149f9c3e28b55a1b05305d451", "patch": "@@ -55,32 +55,40 @@ impl LateLintPass for RegexPass {\n         ], {\n             if let ExprLit(ref lit) = args[0].node {\n                 if let LitStr(ref r, _) = lit.node {\n-                    if let Err(e) = regex_syntax::Expr::parse(r) {\n+                    match regex_syntax::Expr::parse(r) {\n+                        Ok(r) => {\n+                            if let Some(repl) = is_trivial_regex(&r) {\n+                                span_help_and_lint(cx, TRIVIAL_REGEX, args[0].span,\n+                                                   &\"trivial regex\",\n+                                                   &format!(\"consider using {}\", repl));\n+                            }\n+                        }\n+                        Err(e) => {\n+                            span_lint(cx,\n+                                      INVALID_REGEX,\n+                                      str_span(args[0].span, &r, e.position()),\n+                                      &format!(\"regex syntax error: {}\",\n+                                               e.description()));\n+                        }\n+                    }\n+                }\n+            } else if let Some(r) = const_str(cx, &*args[0]) {\n+                match regex_syntax::Expr::parse(&r) {\n+                    Ok(r) => {\n+                        if let Some(repl) = is_trivial_regex(&r) {\n+                            span_help_and_lint(cx, TRIVIAL_REGEX, args[0].span,\n+                                               &\"trivial regex\",\n+                                               &format!(\"consider using {}\", repl));\n+                        }\n+                    }\n+                    Err(e) => {\n                         span_lint(cx,\n                                   INVALID_REGEX,\n-                                  str_span(args[0].span, &r, e.position()),\n-                                  &format!(\"regex syntax error: {}\",\n+                                  args[0].span,\n+                                  &format!(\"regex syntax error on position {}: {}\",\n+                                           e.position(),\n                                            e.description()));\n                     }\n-                    else if let Some(repl) = is_trivial_regex(r) {\n-                        span_help_and_lint(cx, TRIVIAL_REGEX, args[0].span,\n-                                           &\"trivial regex\",\n-                                           &format!(\"consider using {}\", repl));\n-                    }\n-                }\n-            } else if let Some(r) = const_str(cx, &*args[0]) {\n-                if let Err(e) = regex_syntax::Expr::parse(&r) {\n-                    span_lint(cx,\n-                              INVALID_REGEX,\n-                              args[0].span,\n-                              &format!(\"regex syntax error on position {}: {}\",\n-                                       e.position(),\n-                                       e.description()));\n-                }\n-                else if let Some(repl) = is_trivial_regex(&r) {\n-                    span_help_and_lint(cx, TRIVIAL_REGEX, args[0].span,\n-                                       &\"trivial regex\",\n-                                       &format!(\"{}\", repl));\n                 }\n             }\n         }}\n@@ -103,25 +111,31 @@ fn const_str(cx: &LateContext, e: &Expr) -> Option<InternedString> {\n     }\n }\n \n-fn is_trivial_regex(s: &str) -> Option<&'static str> {\n-    // some unlikely but valid corner cases\n-    match s {\n-        \"\" | \"^\" | \"$\" => return Some(\"the regex is unlikely to be useful as it is\"),\n-        \"^$\" => return Some(\"consider using `str::is_empty`\"),\n-        _ => (),\n-    }\n-\n-    let (start, end, repl) = match (s.starts_with('^'), s.ends_with('$')) {\n-        (true, true) => (1, s.len()-1, \"consider using `==` on `str`s\"),\n-        (false, true) => (0, s.len()-1, \"consider using `str::ends_with`\"),\n-        (true, false) => (1, s.len(), \"consider using `str::starts_with`\"),\n-        (false, false) => (0, s.len(), \"consider using `str::contains`\"),\n-    };\n+fn is_trivial_regex(s: &regex_syntax::Expr) -> Option<&'static str> {\n+    use regex_syntax::Expr;\n \n-    if !s.chars().take(end).skip(start).any(regex_syntax::is_punct) {\n-        Some(repl)\n-    }\n-    else {\n-        None\n+    match *s {\n+        Expr::Empty | Expr::StartText | Expr::EndText => Some(\"the regex is unlikely to be useful as it is\"),\n+        Expr::Literal {..} => Some(\"consider using `str::contains`\"),\n+        Expr::Concat(ref exprs) => {\n+            match exprs.len() {\n+                2 => match (&exprs[0], &exprs[1]) {\n+                    (&Expr::StartText, &Expr::EndText) => Some(\"consider using `str::is_empty`\"),\n+                    (&Expr::StartText, &Expr::Literal {..}) => Some(\"consider using `str::starts_with`\"),\n+                    (&Expr::Literal {..}, &Expr::EndText) => Some(\"consider using `str::ends_with`\"),\n+                    _ => None,\n+                },\n+                3 => {\n+                    if let (&Expr::StartText, &Expr::Literal {..}, &Expr::EndText) = (&exprs[0], &exprs[1], &exprs[2]) {\n+                        Some(\"consider using `==` on `str`s\")\n+                    }\n+                    else {\n+                        None\n+                    }\n+                },\n+                _ => None,\n+            }\n+        }\n+        _ => None,\n     }\n }"}, {"sha": "2e8228a823d774cef80bb057cb120d1399729aa5", "filename": "tests/compile-fail/regex.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5105f566782bf5149f9c3e28b55a1b05305d451/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5105f566782bf5149f9c3e28b55a1b05305d451/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=b5105f566782bf5149f9c3e28b55a1b05305d451", "patch": "@@ -45,16 +45,25 @@ fn trivial_regex() {\n     //~^ERROR: trivial regex\n     //~|HELP consider using `str::contains`\n \n+    let trivial_backslash = Regex::new(\"a\\\\.b\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::contains`\n+\n     // unlikely corner cases\n     let trivial_empty = Regex::new(\"\");\n     //~^ERROR: trivial regex\n     //~|HELP the regex is unlikely to be useful\n \n+    let trivial_empty = Regex::new(\"^\");\n+    //~^ERROR: trivial regex\n+    //~|HELP the regex is unlikely to be useful\n+\n     let trivial_empty = Regex::new(\"^$\");\n     //~^ERROR: trivial regex\n     //~|HELP consider using `str::is_empty`\n \n     // non-trivial regexes\n+    let non_trivial_dot = Regex::new(\"a.b\");\n     let non_trivial_eq = Regex::new(\"^foo|bar$\");\n     let non_trivial_starts_with = Regex::new(\"^foo|bar\");\n     let non_trivial_ends_with = Regex::new(\"^foo|bar\");"}]}