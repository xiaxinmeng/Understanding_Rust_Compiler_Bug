{"sha": "b49003289366411f7d5e0359af2c3de3b5b850e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTAwMzI4OTM2NjQxMWY3ZDVlMDM1OWFmMmMzZGUzYjViODUwZTc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-19T20:41:52Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid cloning Place in assign #1", "tree": {"sha": "5eed95af51a9ef5b418355130ab03a038e00438e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eed95af51a9ef5b418355130ab03a038e00438e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b49003289366411f7d5e0359af2c3de3b5b850e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b49003289366411f7d5e0359af2c3de3b5b850e7", "html_url": "https://github.com/rust-lang/rust/commit/b49003289366411f7d5e0359af2c3de3b5b850e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b49003289366411f7d5e0359af2c3de3b5b850e7/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a7d600ee0a8e5a56fc515beb7a066cc178c926e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7d600ee0a8e5a56fc515beb7a066cc178c926e", "html_url": "https://github.com/rust-lang/rust/commit/2a7d600ee0a8e5a56fc515beb7a066cc178c926e"}], "stats": {"total": 11, "additions": 3, "deletions": 8}, "files": [{"sha": "da8304419bf23352774f54476f5469eb5f7741a3", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b49003289366411f7d5e0359af2c3de3b5b850e7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49003289366411f7d5e0359af2c3de3b5b850e7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=b49003289366411f7d5e0359af2c3de3b5b850e7", "patch": "@@ -865,14 +865,9 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 (base, Some(proj)) => {\n                     // Catch more errors in the destination. `visit_place` also checks various\n                     // projection rules like union field access and raw pointer deref\n-                    self.visit_place(\n-                        &Place {\n-                            base: base.clone(),\n-                            projection: dest_projection.clone(),\n-                        },\n-                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                        location\n-                    );\n+                    let context = PlaceContext::MutatingUse(MutatingUseContext::Store);\n+                    self.visit_place_base(base, context, location);\n+                    self.visit_projection(base, proj, context, location);\n                     dest_projection = &proj.base;\n                 },\n                 (&PlaceBase::Static(box Static {"}]}