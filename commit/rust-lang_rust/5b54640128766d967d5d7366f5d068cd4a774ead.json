{"sha": "5b54640128766d967d5d7366f5d068cd4a774ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNTQ2NDAxMjg3NjZkOTY3ZDVkNzM2NmY1ZDA2OGNkNGE3NzRlYWQ=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-02-05T00:55:16Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-02-09T07:59:29Z"}, "message": "Mark migration code that relies on Deref unreachable", "tree": {"sha": "f08c6c5373d86f9c9dcbdb91c8ff3fa8a749af32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f08c6c5373d86f9c9dcbdb91c8ff3fa8a749af32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b54640128766d967d5d7366f5d068cd4a774ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b54640128766d967d5d7366f5d068cd4a774ead", "html_url": "https://github.com/rust-lang/rust/commit/5b54640128766d967d5d7366f5d068cd4a774ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b54640128766d967d5d7366f5d068cd4a774ead/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "319f1aba6281adb6ca22522003b49578c406745f", "url": "https://api.github.com/repos/rust-lang/rust/commits/319f1aba6281adb6ca22522003b49578c406745f", "html_url": "https://github.com/rust-lang/rust/commit/319f1aba6281adb6ca22522003b49578c406745f"}], "stats": {"total": 47, "additions": 8, "deletions": 39}, "files": [{"sha": "1ffa8c37a8032404d54f245884e1eb97c6063950", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 8, "deletions": 39, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5b54640128766d967d5d7366f5d068cd4a774ead/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b54640128766d967d5d7366f5d068cd4a774ead/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=5b54640128766d967d5d7366f5d068cd4a774ead", "patch": "@@ -698,8 +698,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///                             freeing up memory).\n     ///\n     /// The way this function works is at a given call it looks at type `base_path_ty` of some base\n-    /// path say P and then vector of projection slices which represent the different captures\n-    /// starting off of P.\n+    /// path say P and then list of projection slices which represent the different captures moved\n+    /// into the closure starting off of P.\n     ///\n     /// This will make more sense with an example:\n     ///\n@@ -842,23 +842,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             //   `captured_projs.first().unwrap()` safely.\n             // - All entries in `captured_projs` have atleast one projection.\n             //   Therefore we can call `captured_projs.first().unwrap().first().unwrap()` safely.\n-            ty::Adt(def, _) if def.is_box() => {\n-                // We must deref to access paths on top of a Box.\n-                assert!(\n-                    captured_projs\n-                        .iter()\n-                        .all(|projs| matches!(projs.first().unwrap().kind, ProjectionKind::Deref))\n-                );\n \n-                let next_ty = captured_projs.first().unwrap().first().unwrap().ty;\n-                let captured_projs = captured_projs.iter().map(|projs| &projs[1..]).collect();\n-                self.has_significant_drop_outside_of_captures(\n-                    closure_def_id,\n-                    closure_span,\n-                    next_ty,\n-                    captured_projs,\n-                )\n-            }\n+            // We don't capture derefs in case of move captures, which would have be applied to\n+            // access any further paths.\n+            ty::Adt(def, _) if def.is_box() => unreachable!(),\n+            ty::Ref(..) => unreachable!(),\n+            ty::RawPtr(..) => unreachable!(),\n \n             ty::Adt(def, substs) => {\n                 // Multi-varaint enums are captured in entirety,\n@@ -929,27 +918,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n             }\n \n-            ty::Ref(_, deref_ty, _) => {\n-                // Only Derefs can be applied to a Ref\n-                assert!(\n-                    captured_projs\n-                        .iter()\n-                        .all(|projs| matches!(projs.first().unwrap().kind, ProjectionKind::Deref))\n-                );\n-\n-                let captured_projs = captured_projs.iter().map(|projs| &projs[1..]).collect();\n-                self.has_significant_drop_outside_of_captures(\n-                    closure_def_id,\n-                    closure_span,\n-                    deref_ty,\n-                    captured_projs,\n-                )\n-            }\n-\n-            // Unsafe Ptrs are captured in their entirety, which would've have been handled in\n-            // the case of single empty slice in `captured_projs`.\n-            ty::RawPtr(..) => unreachable!(),\n-\n+            // Anything else would be completely captured and therefore handled already.\n             _ => unreachable!(),\n         }\n     }"}]}