{"sha": "14523499660866bd664f464d2f9a2757b6b35d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NTIzNDk5NjYwODY2YmQ2NjRmNDY0ZDJmOWEyNzU3YjZiMzVkNTA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-18T03:30:32Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-18T03:30:32Z"}, "message": "Exit with 1 for license check in `--check` mode\n\nCloses #2707", "tree": {"sha": "ced6d8286e37b6018968093571d4a9b1c8688252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced6d8286e37b6018968093571d4a9b1c8688252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14523499660866bd664f464d2f9a2757b6b35d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14523499660866bd664f464d2f9a2757b6b35d50", "html_url": "https://github.com/rust-lang/rust/commit/14523499660866bd664f464d2f9a2757b6b35d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14523499660866bd664f464d2f9a2757b6b35d50/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf2581bf7709b91c4431ba7074de910f72283e1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2581bf7709b91c4431ba7074de910f72283e1f", "html_url": "https://github.com/rust-lang/rust/commit/bf2581bf7709b91c4431ba7074de910f72283e1f"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "2d00d22f492194dbef1a108824e1fbad69866d7b", "filename": "src/bin/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14523499660866bd664f464d2f9a2757b6b35d50/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14523499660866bd664f464d2f9a2757b6b35d50/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=14523499660866bd664f464d2f9a2757b6b35d50", "patch": "@@ -35,9 +35,9 @@ fn main() {\n \n     let exit_code = match execute(&opts) {\n         Ok((write_mode, summary)) => {\n-            if summary.has_operational_errors()\n-                || summary.has_parsing_errors()\n-                || (summary.has_diff && write_mode == WriteMode::Check)\n+            if summary.has_operational_errors() || summary.has_parsing_errors()\n+                || ((summary.has_diff || summary.has_check_errors())\n+                    && write_mode == WriteMode::Check)\n             {\n                 1\n             } else {"}, {"sha": "7b6c25d498b6b26fcbb7d2923492c1f8b1523a8e", "filename": "src/config/summary.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14523499660866bd664f464d2f9a2757b6b35d50/src%2Fconfig%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14523499660866bd664f464d2f9a2757b6b35d50/src%2Fconfig%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fsummary.rs?ref=14523499660866bd664f464d2f9a2757b6b35d50", "patch": "@@ -23,6 +23,9 @@ pub struct Summary {\n     // Code is valid, but it is impossible to format it properly.\n     has_formatting_errors: bool,\n \n+    // Failed a check, such as the license check or other opt-in checking.\n+    has_check_errors: bool,\n+\n     // Formatted code differs from existing code (--check only).\n     pub has_diff: bool,\n \n@@ -73,6 +76,10 @@ impl Summary {\n         self.has_formatting_errors\n     }\n \n+    pub fn has_check_errors(&self) -> bool {\n+        self.has_check_errors\n+    }\n+\n     pub fn add_operational_error(&mut self) {\n         self.has_operational_errors = true;\n     }\n@@ -85,6 +92,10 @@ impl Summary {\n         self.has_formatting_errors = true;\n     }\n \n+    pub(crate) fn add_check_error(&mut self) {\n+        self.has_check_errors = true;\n+    }\n+\n     pub(crate) fn add_diff(&mut self) {\n         self.has_diff = true;\n     }\n@@ -100,6 +111,7 @@ impl Summary {\n         self.has_operational_errors |= other.has_operational_errors;\n         self.has_formatting_errors |= other.has_formatting_errors;\n         self.has_parsing_errors |= other.has_parsing_errors;\n+        self.has_check_errors |= other.has_check_errors;\n         self.has_diff |= other.has_diff;\n     }\n }"}, {"sha": "57e007bf6cdf7c4b64efa2f42c27364cf1ab4106", "filename": "src/lib.rs", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/14523499660866bd664f464d2f9a2757b6b35d50/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14523499660866bd664f464d2f9a2757b6b35d50/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=14523499660866bd664f464d2f9a2757b6b35d50", "patch": "@@ -200,27 +200,58 @@ impl FormattingError {\n #[derive(Clone)]\n pub struct FormatReport {\n     // Maps stringified file paths to their associated formatting errors.\n-    file_error_map: Rc<RefCell<HashMap<FileName, Vec<FormattingError>>>>,\n+    internal: Rc<RefCell<(FormatErrorMap, ReportedErrors)>>,\n+}\n+\n+type FormatErrorMap = HashMap<FileName, Vec<FormattingError>>;\n+\n+#[derive(Default, Debug)]\n+struct ReportedErrors {\n+    has_operational_errors: bool,\n+    has_check_errors: bool,\n }\n \n impl FormatReport {\n     fn new() -> FormatReport {\n         FormatReport {\n-            file_error_map: Rc::new(RefCell::new(HashMap::new())),\n+            internal: Rc::new(RefCell::new((HashMap::new(), ReportedErrors::default()))),\n         }\n     }\n \n     fn append(&self, f: FileName, mut v: Vec<FormattingError>) {\n-        self.file_error_map\n+        self.track_errors(&v);\n+        self.internal\n             .borrow_mut()\n+            .0\n             .entry(f)\n             .and_modify(|fe| fe.append(&mut v))\n             .or_insert(v);\n     }\n \n+    fn track_errors(&self, new_errors: &[FormattingError]) {\n+        let errs = &mut self.internal.borrow_mut().1;\n+        if errs.has_operational_errors && errs.has_check_errors {\n+            return;\n+        }\n+        for err in new_errors {\n+            match err.kind {\n+                ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => {\n+                    errs.has_operational_errors = true;\n+                }\n+                ErrorKind::BadIssue(_)\n+                | ErrorKind::LicenseCheck\n+                | ErrorKind::DeprecatedAttr\n+                | ErrorKind::BadAttr => {\n+                    errs.has_check_errors = true;\n+                }\n+            }\n+        }\n+    }\n+\n     fn warning_count(&self) -> usize {\n-        self.file_error_map\n+        self.internal\n             .borrow()\n+            .0\n             .iter()\n             .map(|(_, errors)| errors.len())\n             .sum()\n@@ -234,7 +265,7 @@ impl FormatReport {\n         &self,\n         mut t: Box<term::Terminal<Output = io::Stderr>>,\n     ) -> Result<(), term::Error> {\n-        for (file, errors) in &*self.file_error_map.borrow() {\n+        for (file, errors) in &self.internal.borrow().0 {\n             for error in errors {\n                 let prefix_space_len = error.line.to_string().len();\n                 let prefix_spaces = \" \".repeat(1 + prefix_space_len);\n@@ -280,7 +311,7 @@ impl FormatReport {\n             }\n         }\n \n-        if !self.file_error_map.borrow().is_empty() {\n+        if !self.internal.borrow().0.is_empty() {\n             t.attr(term::Attr::Bold)?;\n             write!(t, \"warning: \")?;\n             t.reset()?;\n@@ -304,7 +335,7 @@ fn target_str(space_len: usize, target_len: usize) -> String {\n impl fmt::Display for FormatReport {\n     // Prints all the formatting errors.\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        for (file, errors) in &*self.file_error_map.borrow() {\n+        for (file, errors) in &self.internal.borrow().0 {\n             for error in errors {\n                 let prefix_space_len = error.line.to_string().len();\n                 let prefix_spaces = \" \".repeat(1 + prefix_space_len);\n@@ -343,7 +374,7 @@ impl fmt::Display for FormatReport {\n                 )?;\n             }\n         }\n-        if !self.file_error_map.borrow().is_empty() {\n+        if !self.internal.borrow().0.is_empty() {\n             writeln!(\n                 fmt,\n                 \"warning: rustfmt may have failed to format. See previous {} errors.\",\n@@ -827,6 +858,16 @@ fn format_input_inner<T: Write>(\n         )\n     });\n \n+    {\n+        let report_errs = &report.internal.borrow().1;\n+        if report_errs.has_check_errors {\n+            summary.add_check_error();\n+        }\n+        if report_errs.has_operational_errors {\n+            summary.add_operational_error();\n+        }\n+    }\n+\n     match format_result {\n         Ok((file_map, has_diff)) => {\n             if report.has_warnings() {"}]}