{"sha": "1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZjk1NmYyYmFlMGYzZDJiMTUyYmIyZTA2ZmFhMTZlNThiMWVhMTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-09T18:02:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-14T17:40:50Z"}, "message": "rustc: Remove `Session::dep_graph`\n\nThis commit removes the `dep_graph` field from the `Session` type according to\nissue #44390. Most of the fallout here was relatively straightforward and the\n`prepare_session_directory` function was rejiggered a bit to reuse the results\nin the later-called `load_dep_graph` function.\n\nCloses #44390", "tree": {"sha": "673cbf85024fc8cbdb1a5fd31140d7b4964bbd78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/673cbf85024fc8cbdb1a5fd31140d7b4964bbd78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "html_url": "https://github.com/rust-lang/rust/commit/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dfc84cfa72b405c194228b53c4de3f6474204ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dfc84cfa72b405c194228b53c4de3f6474204ec", "html_url": "https://github.com/rust-lang/rust/commit/5dfc84cfa72b405c194228b53c4de3f6474204ec"}], "stats": {"total": 255, "additions": 142, "deletions": 113}, "files": [{"sha": "113a5d0e5e96e28d72f7ffefcb3b6224c132126b", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -40,6 +40,7 @@\n //! get confused if the spans from leaf AST nodes occur in multiple places\n //! in the HIR, especially for multiple identifiers.\n \n+use dep_graph::DepGraph;\n use hir;\n use hir::map::{Definitions, DefKey};\n use hir::def_id::{DefIndex, DefId, CRATE_DEF_INDEX};\n@@ -122,13 +123,14 @@ pub trait Resolver {\n \n pub fn lower_crate(sess: &Session,\n                    cstore: &CrateStore,\n+                   dep_graph: &DepGraph,\n                    krate: &Crate,\n                    resolver: &mut Resolver)\n                    -> hir::Crate {\n     // We're constructing the HIR here; we don't care what we will\n     // read, since we haven't even constructed the *input* to\n     // incr. comp. yet.\n-    let _ignore = sess.dep_graph.in_ignore();\n+    let _ignore = dep_graph.in_ignore();\n \n     LoweringContext {\n         crate_root: std_inject::injected_crate_name(krate),"}, {"sha": "df2de17f1e4711409610e76c9a49a87217dfabbb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -1949,7 +1949,6 @@ mod dep_tracking {\n \n #[cfg(test)]\n mod tests {\n-    use dep_graph::DepGraph;\n     use errors;\n     use getopts;\n     use lint;\n@@ -1982,15 +1981,14 @@ mod tests {\n     // When the user supplies --test we should implicitly supply --cfg test\n     #[test]\n     fn test_switch_implies_cfg_test() {\n-        let dep_graph = DepGraph::new(false);\n         let matches =\n             &match optgroups().parse(&[\"--test\".to_string()]) {\n               Ok(m) => m,\n               Err(f) => panic!(\"test_switch_implies_cfg_test: {}\", f)\n             };\n         let registry = errors::registry::Registry::new(&[]);\n         let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-        let sess = build_session(sessopts, &dep_graph, None, registry);\n+        let sess = build_session(sessopts, None, registry);\n         let cfg = build_configuration(&sess, cfg);\n         assert!(cfg.contains(&(Symbol::intern(\"test\"), None)));\n     }\n@@ -1999,7 +1997,6 @@ mod tests {\n     // another --cfg test\n     #[test]\n     fn test_switch_implies_cfg_test_unless_cfg_test() {\n-        let dep_graph = DepGraph::new(false);\n         let matches =\n             &match optgroups().parse(&[\"--test\".to_string(), \"--cfg=test\".to_string()]) {\n               Ok(m) => m,\n@@ -2009,7 +2006,7 @@ mod tests {\n             };\n         let registry = errors::registry::Registry::new(&[]);\n         let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-        let sess = build_session(sessopts, &dep_graph, None, registry);\n+        let sess = build_session(sessopts, None, registry);\n         let cfg = build_configuration(&sess, cfg);\n         let mut test_items = cfg.iter().filter(|&&(name, _)| name == \"test\");\n         assert!(test_items.next().is_some());\n@@ -2018,14 +2015,13 @@ mod tests {\n \n     #[test]\n     fn test_can_print_warnings() {\n-        let dep_graph = DepGraph::new(false);\n         {\n             let matches = optgroups().parse(&[\n                 \"-Awarnings\".to_string()\n             ]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-            let sess = build_session(sessopts, &dep_graph, None, registry);\n+            let sess = build_session(sessopts, None, registry);\n             assert!(!sess.diagnostic().can_emit_warnings);\n         }\n \n@@ -2036,7 +2032,7 @@ mod tests {\n             ]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-            let sess = build_session(sessopts, &dep_graph, None, registry);\n+            let sess = build_session(sessopts, None, registry);\n             assert!(sess.diagnostic().can_emit_warnings);\n         }\n \n@@ -2046,7 +2042,7 @@ mod tests {\n             ]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-            let sess = build_session(sessopts, &dep_graph, None, registry);\n+            let sess = build_session(sessopts, None, registry);\n             assert!(sess.diagnostic().can_emit_warnings);\n         }\n     }"}, {"sha": "df5a2648e270ce92b6e517c109911e830fec4242", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -11,7 +11,6 @@\n pub use self::code_stats::{CodeStats, DataTypeKind, FieldInfo};\n pub use self::code_stats::{SizeKind, TypeSizeInfo, VariantInfo};\n \n-use dep_graph::DepGraph;\n use hir::def_id::{CrateNum, DefIndex};\n \n use lint;\n@@ -58,7 +57,6 @@ pub mod search_paths;\n // Represents the data associated with a compilation\n // session for a single crate.\n pub struct Session {\n-    pub dep_graph: DepGraph,\n     pub target: config::Config,\n     pub host: Target,\n     pub opts: config::Options,\n@@ -91,7 +89,7 @@ pub struct Session {\n     // forms a unique global identifier for the crate. It is used to allow\n     // multiple crates with the same name to coexist. See the\n     // trans::back::symbol_names module for more information.\n-    pub crate_disambiguator: RefCell<Symbol>,\n+    pub crate_disambiguator: RefCell<Option<Symbol>>,\n     pub features: RefCell<feature_gate::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n@@ -169,7 +167,10 @@ enum DiagnosticBuilderMethod {\n \n impl Session {\n     pub fn local_crate_disambiguator(&self) -> Symbol {\n-        *self.crate_disambiguator.borrow()\n+        match *self.crate_disambiguator.borrow() {\n+            Some(sym) => sym,\n+            None => bug!(\"accessing disambiguator before initialization\"),\n+        }\n     }\n     pub fn struct_span_warn<'a, S: Into<MultiSpan>>(&'a self,\n                                                     sp: S,\n@@ -501,9 +502,29 @@ impl Session {\n             kind)\n     }\n \n+    pub fn set_incr_session_load_dep_graph(&self, load: bool) {\n+        let mut incr_comp_session = self.incr_comp_session.borrow_mut();\n+\n+        match *incr_comp_session {\n+            IncrCompSession::Active { ref mut load_dep_graph, .. } => {\n+                *load_dep_graph = load;\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    pub fn incr_session_load_dep_graph(&self) -> bool {\n+        let incr_comp_session = self.incr_comp_session.borrow();\n+        match *incr_comp_session {\n+            IncrCompSession::Active { load_dep_graph, .. } => load_dep_graph,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn init_incr_comp_session(&self,\n                                   session_dir: PathBuf,\n-                                  lock_file: flock::Lock) {\n+                                  lock_file: flock::Lock,\n+                                  load_dep_graph: bool) {\n         let mut incr_comp_session = self.incr_comp_session.borrow_mut();\n \n         if let IncrCompSession::NotInitialized = *incr_comp_session { } else {\n@@ -513,6 +534,7 @@ impl Session {\n         *incr_comp_session = IncrCompSession::Active {\n             session_directory: session_dir,\n             lock_file,\n+            load_dep_graph,\n         };\n     }\n \n@@ -617,22 +639,19 @@ impl Session {\n }\n \n pub fn build_session(sopts: config::Options,\n-                     dep_graph: &DepGraph,\n                      local_crate_source_file: Option<PathBuf>,\n                      registry: errors::registry::Registry)\n                      -> Session {\n     let file_path_mapping = sopts.file_path_mapping();\n \n     build_session_with_codemap(sopts,\n-                               dep_graph,\n                                local_crate_source_file,\n                                registry,\n                                Rc::new(codemap::CodeMap::new(file_path_mapping)),\n                                None)\n }\n \n pub fn build_session_with_codemap(sopts: config::Options,\n-                                  dep_graph: &DepGraph,\n                                   local_crate_source_file: Option<PathBuf>,\n                                   registry: errors::registry::Registry,\n                                   codemap: Rc<codemap::CodeMap>,\n@@ -672,14 +691,12 @@ pub fn build_session_with_codemap(sopts: config::Options,\n                                       emitter);\n \n     build_session_(sopts,\n-                   dep_graph,\n                    local_crate_source_file,\n                    diagnostic_handler,\n                    codemap)\n }\n \n pub fn build_session_(sopts: config::Options,\n-                      dep_graph: &DepGraph,\n                       local_crate_source_file: Option<PathBuf>,\n                       span_diagnostic: errors::Handler,\n                       codemap: Rc<codemap::CodeMap>)\n@@ -715,7 +732,6 @@ pub fn build_session_(sopts: config::Options,\n     let working_dir = file_path_mapping.map_prefix(working_dir);\n \n     let sess = Session {\n-        dep_graph: dep_graph.clone(),\n         target: target_cfg,\n         host,\n         opts: sopts,\n@@ -735,7 +751,7 @@ pub fn build_session_(sopts: config::Options,\n         plugin_attributes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         dependency_formats: RefCell::new(FxHashMap()),\n-        crate_disambiguator: RefCell::new(Symbol::intern(\"\")),\n+        crate_disambiguator: RefCell::new(None),\n         features: RefCell::new(feature_gate::Features::new()),\n         recursion_limit: Cell::new(64),\n         type_length_limit: Cell::new(1048576),\n@@ -793,6 +809,7 @@ pub enum IncrCompSession {\n     Active {\n         session_directory: PathBuf,\n         lock_file: flock::Lock,\n+        load_dep_graph: bool,\n     },\n     // This is the state after the session directory has been finalized. In this\n     // state, the contents of the directory must not be modified any more."}, {"sha": "ed012f87996d7a10ba3824ded6ffa76becff2295", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -10,6 +10,7 @@\n \n #![cfg_attr(not(feature=\"llvm\"), allow(dead_code))]\n \n+use rustc::dep_graph::DepGraph;\n use rustc::hir::{self, map as hir_map};\n use rustc::hir::lowering::lower_crate;\n use rustc::ich::Fingerprint;\n@@ -115,7 +116,7 @@ pub fn compile_input(sess: &Session,\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n-    let (outputs, trans): (OutputFilenames, OngoingCrateTranslation) = {\n+    let (outputs, trans, dep_graph): (OutputFilenames, OngoingCrateTranslation, DepGraph) = {\n         let krate = match phase_1_parse_input(control, sess, input) {\n             Ok(krate) => krate,\n             Err(mut parse_error) => {\n@@ -144,7 +145,13 @@ pub fn compile_input(sess: &Session,\n             ::rustc_trans_utils::link::find_crate_name(Some(sess), &krate.attrs, input);\n         let ExpansionResult { expanded_crate, defs, analysis, resolutions, mut hir_forest } = {\n             phase_2_configure_and_expand(\n-                sess, &cstore, krate, registry, &crate_name, addl_plugins, control.make_glob_map,\n+                sess,\n+                &cstore,\n+                krate,\n+                registry,\n+                &crate_name,\n+                addl_plugins,\n+                control.make_glob_map,\n                 |expanded_crate| {\n                     let mut state = CompileState::state_after_expand(\n                         input, sess, outdir, output, &cstore, expanded_crate, &crate_name,\n@@ -251,7 +258,7 @@ pub fn compile_input(sess: &Session,\n                 }\n             }\n \n-            Ok((outputs, trans))\n+            Ok((outputs, trans, tcx.dep_graph.clone()))\n         })??\n     };\n \n@@ -266,7 +273,7 @@ pub fn compile_input(sess: &Session,\n             sess.code_stats.borrow().print_type_sizes();\n         }\n \n-        let (phase5_result, trans) = phase_5_run_llvm_passes(sess, trans);\n+        let (phase5_result, trans) = phase_5_run_llvm_passes(sess, &dep_graph, trans);\n \n         controller_entry_point!(after_llvm,\n                                 sess,\n@@ -624,7 +631,15 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n     *sess.features.borrow_mut() = features;\n \n     *sess.crate_types.borrow_mut() = collect_crate_types(sess, &krate.attrs);\n-    *sess.crate_disambiguator.borrow_mut() = Symbol::intern(&compute_crate_disambiguator(sess));\n+\n+    let disambiguator = Symbol::intern(&compute_crate_disambiguator(sess));\n+    *sess.crate_disambiguator.borrow_mut() = Some(disambiguator);\n+    rustc_incremental::prepare_session_directory(\n+        sess,\n+        &crate_name,\n+        &disambiguator.as_str(),\n+    );\n+    let dep_graph = DepGraph::new(sess.opts.build_dep_graph());\n \n     time(time_passes, \"recursion limit\", || {\n         middle::recursion_limit::update_limits(sess, &krate);\n@@ -694,7 +709,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n     // item, much like we do for macro expansion. In other words, the hash reflects not just\n     // its contents but the results of name resolution on those contents. Hopefully we'll push\n     // this back at some point.\n-    let _ignore = sess.dep_graph.in_ignore();\n+    let _ignore = dep_graph.in_ignore();\n     let mut crate_loader = CrateLoader::new(sess, &cstore, crate_name);\n     let resolver_arenas = Resolver::arenas();\n     let mut resolver = Resolver::new(sess,\n@@ -847,13 +862,13 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n \n     // Lower ast -> hir.\n     let hir_forest = time(time_passes, \"lowering ast -> hir\", || {\n-        let hir_crate = lower_crate(sess, cstore, &krate, &mut resolver);\n+        let hir_crate = lower_crate(sess, cstore, &dep_graph, &krate, &mut resolver);\n \n         if sess.opts.debugging_opts.hir_stats {\n             hir_stats::print_hir_stats(&hir_crate);\n         }\n \n-        hir_map::Forest::new(hir_crate, &sess.dep_graph)\n+        hir_map::Forest::new(hir_crate, &dep_graph)\n     });\n \n     time(time_passes,\n@@ -1134,17 +1149,18 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n /// as a side effect.\n #[cfg(feature=\"llvm\")]\n pub fn phase_5_run_llvm_passes(sess: &Session,\n+                               dep_graph: &DepGraph,\n                                trans: write::OngoingCrateTranslation)\n                                -> (CompileResult, trans::CrateTranslation) {\n-    let trans = trans.join(sess);\n+    let trans = trans.join(sess, dep_graph);\n \n     if sess.opts.debugging_opts.incremental_info {\n         write::dump_incremental_data(&trans);\n     }\n \n     time(sess.time_passes(),\n          \"serialize work products\",\n-         move || rustc_incremental::save_work_products(sess));\n+         move || rustc_incremental::save_work_products(sess, dep_graph));\n \n     (sess.compile_status(), trans)\n }"}, {"sha": "522b9eb22320e9d00bc7f806a32236d80e24c67b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -64,7 +64,6 @@ use pretty::{PpMode, UserIdentifiedItem};\n use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n-use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::CompileIncomplete;\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n@@ -294,13 +293,12 @@ pub fn run_compiler<'a>(args: &[String],\n         },\n     };\n \n-    let dep_graph = DepGraph::new(sopts.build_dep_graph());\n     let cstore = Rc::new(CStore::new(box ::MetadataLoader));\n \n     let loader = file_loader.unwrap_or(box RealFileLoader);\n     let codemap = Rc::new(CodeMap::with_file_loader(loader, sopts.file_path_mapping()));\n     let mut sess = session::build_session_with_codemap(\n-        sopts, &dep_graph, input_file_path, descriptions, codemap, emitter_dest,\n+        sopts, input_file_path, descriptions, codemap, emitter_dest,\n     );\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n@@ -318,7 +316,13 @@ pub fn run_compiler<'a>(args: &[String],\n \n     let plugins = sess.opts.debugging_opts.extra_plugins.clone();\n     let control = callbacks.build_controller(&sess, &matches);\n-    (driver::compile_input(&sess, &cstore, &input, &odir, &ofile, Some(plugins), &control),\n+    (driver::compile_input(&sess,\n+                           &cstore,\n+                           &input,\n+                           &odir,\n+                           &ofile,\n+                           Some(plugins),\n+                           &control),\n      Some(sess))\n }\n \n@@ -580,9 +584,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     describe_lints(&ls, false);\n                     return None;\n                 }\n-                let dep_graph = DepGraph::new(sopts.build_dep_graph());\n                 let mut sess = build_session(sopts.clone(),\n-                    &dep_graph,\n                     None,\n                     descriptions.clone());\n                 rustc_trans::init(&sess);"}, {"sha": "d0edcbc326098eb738d0ac37347eb37c11d561fb", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -11,7 +11,6 @@\n //! # Standalone Tests for the Inference Module\n \n use driver;\n-use rustc::dep_graph::DepGraph;\n use rustc_lint;\n use rustc_resolve::MakeGlobMap;\n use rustc_trans;\n@@ -102,11 +101,8 @@ fn test_env<F>(source_string: &str,\n     options.unstable_features = UnstableFeatures::Allow;\n     let diagnostic_handler = errors::Handler::with_emitter(true, false, emitter);\n \n-    let dep_graph = DepGraph::new(false);\n-    let _ignore = dep_graph.in_ignore();\n     let cstore = Rc::new(CStore::new(box ::MetadataLoader));\n     let sess = session::build_session_(options,\n-                                       &dep_graph,\n                                        None,\n                                        diagnostic_handler,\n                                        Rc::new(CodeMap::new(FilePathMapping::empty())));\n@@ -130,7 +126,6 @@ fn test_env<F>(source_string: &str,\n                                              |_| Ok(()))\n             .expect(\"phase 2 aborted\")\n     };\n-    let _ignore = dep_graph.in_ignore();\n \n     let arena = DroplessArena::new();\n     let arenas = ty::GlobalArenas::new();"}, {"sha": "3c1e02f8a5adde4c72a4519cc474b84a833de246", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -40,4 +40,5 @@ pub use persist::save_dep_graph;\n pub use persist::save_trans_partition;\n pub use persist::save_work_products;\n pub use persist::in_incr_comp_dir;\n+pub use persist::prepare_session_directory;\n pub use persist::finalize_session_directory;"}, {"sha": "f3f35a50fe0b3638a17c774548256328055c5e1d", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -114,7 +114,7 @@\n //! unsupported file system and emit a warning in that case. This is not yet\n //! implemented.\n \n-use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc::hir::def_id::CrateNum;\n use rustc::hir::svh::Svh;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n@@ -193,13 +193,21 @@ pub fn in_incr_comp_dir(incr_comp_session_dir: &Path, file_name: &str) -> PathBu\n /// a dep-graph and work products from a previous session.\n /// If the call fails, the fn may leave behind an invalid session directory.\n /// The garbage collection will take care of it.\n-pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> {\n+pub fn prepare_session_directory(sess: &Session,\n+                                 crate_name: &str,\n+                                 crate_disambiguator: &str) {\n+    if sess.opts.incremental.is_none() {\n+        return\n+    }\n+\n     debug!(\"prepare_session_directory\");\n \n     // {incr-comp-dir}/{crate-name-and-disambiguator}\n-    let crate_dir = crate_path_tcx(tcx, LOCAL_CRATE);\n+    let crate_dir = crate_path(sess, crate_name, crate_disambiguator);\n     debug!(\"crate-dir: {}\", crate_dir.display());\n-    try!(create_dir(tcx.sess, &crate_dir, \"crate\"));\n+    if create_dir(sess, &crate_dir, \"crate\").is_err() {\n+        return\n+    }\n \n     // Hack: canonicalize the path *after creating the directory*\n     // because, on windows, long paths can cause problems;\n@@ -208,9 +216,9 @@ pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> {\n     let crate_dir = match crate_dir.canonicalize() {\n         Ok(v) => v,\n         Err(err) => {\n-            tcx.sess.err(&format!(\"incremental compilation: error canonicalizing path `{}`: {}\",\n-                                  crate_dir.display(), err));\n-            return Err(());\n+            sess.err(&format!(\"incremental compilation: error canonicalizing path `{}`: {}\",\n+                              crate_dir.display(), err));\n+            return\n         }\n     };\n \n@@ -225,11 +233,16 @@ pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> {\n \n         // Lock the new session directory. If this fails, return an\n         // error without retrying\n-        let (directory_lock, lock_file_path) = try!(lock_directory(tcx.sess, &session_dir));\n+        let (directory_lock, lock_file_path) = match lock_directory(sess, &session_dir) {\n+            Ok(e) => e,\n+            Err(_) => return,\n+        };\n \n         // Now that we have the lock, we can actually create the session\n         // directory\n-        try!(create_dir(tcx.sess, &session_dir, \"session\"));\n+        if create_dir(sess, &session_dir, \"session\").is_err() {\n+            return\n+        }\n \n         // Find a suitable source directory to copy from. Ignore those that we\n         // have already tried before.\n@@ -243,14 +256,14 @@ pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> {\n             debug!(\"no source directory found. Continuing with empty session \\\n                     directory.\");\n \n-            tcx.sess.init_incr_comp_session(session_dir, directory_lock);\n-            return Ok(false)\n+            sess.init_incr_comp_session(session_dir, directory_lock, false);\n+            return\n         };\n \n         debug!(\"attempting to copy data from source: {}\",\n                source_directory.display());\n \n-        let print_file_copy_stats = tcx.sess.opts.debugging_opts.incremental_info;\n+        let print_file_copy_stats = sess.opts.debugging_opts.incremental_info;\n \n         // Try copying over all files from the source directory\n         if let Ok(allows_links) = copy_files(&session_dir, &source_directory,\n@@ -259,7 +272,7 @@ pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> {\n                    source_directory.display());\n \n             if !allows_links {\n-                tcx.sess.warn(&format!(\"Hard linking files in the incremental \\\n+                sess.warn(&format!(\"Hard linking files in the incremental \\\n                                         compilation cache failed. Copying files \\\n                                         instead. Consider moving the cache \\\n                                         directory to a file system which supports \\\n@@ -268,8 +281,8 @@ pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> {\n                     );\n             }\n \n-            tcx.sess.init_incr_comp_session(session_dir, directory_lock);\n-            return Ok(true)\n+            sess.init_incr_comp_session(session_dir, directory_lock, true);\n+            return\n         } else {\n              debug!(\"copying failed - trying next directory\");\n \n@@ -280,13 +293,13 @@ pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> {\n             // Try to remove the session directory we just allocated. We don't\n             // know if there's any garbage in it from the failed copy action.\n             if let Err(err) = safe_remove_dir_all(&session_dir) {\n-                tcx.sess.warn(&format!(\"Failed to delete partly initialized \\\n-                                        session dir `{}`: {}\",\n-                                       session_dir.display(),\n-                                       err));\n+                sess.warn(&format!(\"Failed to delete partly initialized \\\n+                                    session dir `{}`: {}\",\n+                                   session_dir.display(),\n+                                   err));\n             }\n \n-            delete_session_dir_lock_file(tcx.sess, &lock_file_path);\n+            delete_session_dir_lock_file(sess, &lock_file_path);\n             mem::drop(directory_lock);\n         }\n     }"}, {"sha": "ba638289fdf03168b9c5ee60f2a22cdcaa11f60d", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -42,30 +42,10 @@ pub type DirtyNodes = FxHashMap<DepNodeIndex, DepNodeIndex>;\n /// more general overview.\n pub fn load_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 incremental_hashes_map: &IncrementalHashesMap) {\n-    if tcx.sess.opts.incremental.is_none() {\n-        return;\n+    if tcx.sess.incr_session_load_dep_graph() {\n+        let _ignore = tcx.dep_graph.in_ignore();\n+        load_dep_graph_if_exists(tcx, incremental_hashes_map);\n     }\n-\n-    match prepare_session_directory(tcx) {\n-        Ok(true) => {\n-            // We successfully allocated a session directory and there is\n-            // something in it to load, so continue\n-        }\n-        Ok(false) => {\n-            // We successfully allocated a session directory, but there is no\n-            // dep-graph data in it to load (because this is the first\n-            // compilation session with this incr. comp. dir.)\n-            return\n-        }\n-        Err(()) => {\n-            // Something went wrong while trying to allocate the session\n-            // directory. Don't try to use it any further.\n-            return\n-        }\n-    }\n-\n-    let _ignore = tcx.dep_graph.in_ignore();\n-    load_dep_graph_if_exists(tcx, incremental_hashes_map);\n }\n \n fn load_dep_graph_if_exists<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "fb3308132261f37d722dbdb5e771353388502515", "filename": "src/librustc_incremental/persist/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -22,6 +22,7 @@ mod save;\n mod work_product;\n mod file_format;\n \n+pub use self::fs::prepare_session_directory;\n pub use self::fs::finalize_session_directory;\n pub use self::fs::in_incr_comp_dir;\n pub use self::load::load_dep_graph;"}, {"sha": "65fbaf1ad047a484da1c659d956e324283fdcfb1", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::DepNode;\n+use rustc::dep_graph::{DepGraph, DepNode};\n use rustc::hir::def_id::DefId;\n use rustc::hir::svh::Svh;\n use rustc::ich::Fingerprint;\n@@ -79,21 +79,21 @@ pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                             &current_metadata_hashes);\n }\n \n-pub fn save_work_products(sess: &Session) {\n+pub fn save_work_products(sess: &Session, dep_graph: &DepGraph) {\n     if sess.opts.incremental.is_none() {\n         return;\n     }\n \n     debug!(\"save_work_products()\");\n-    let _ignore = sess.dep_graph.in_ignore();\n+    let _ignore = dep_graph.in_ignore();\n     let path = work_products_path(sess);\n-    save_in(sess, path, |e| encode_work_products(sess, e));\n+    save_in(sess, path, |e| encode_work_products(dep_graph, e));\n \n     // We also need to clean out old work-products, as not all of them are\n     // deleted during invalidation. Some object files don't change their\n     // content, they are just not needed anymore.\n-    let new_work_products = sess.dep_graph.work_products();\n-    let previous_work_products = sess.dep_graph.previous_work_products();\n+    let new_work_products = dep_graph.work_products();\n+    let previous_work_products = dep_graph.previous_work_products();\n \n     for (id, wp) in previous_work_products.iter() {\n         if !new_work_products.contains_key(id) {\n@@ -309,8 +309,9 @@ pub fn encode_metadata_hashes(tcx: TyCtxt,\n     Ok(())\n }\n \n-pub fn encode_work_products(sess: &Session, encoder: &mut Encoder) -> io::Result<()> {\n-    let work_products: Vec<_> = sess.dep_graph\n+pub fn encode_work_products(dep_graph: &DepGraph,\n+                            encoder: &mut Encoder) -> io::Result<()> {\n+    let work_products: Vec<_> = dep_graph\n         .work_products()\n         .iter()\n         .map(|(id, work_product)| {"}, {"sha": "70d96e3a83d376bed6bd6dbd219e299b7f2960b9", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -11,14 +11,15 @@\n //! This module contains files for saving intermediate work-products.\n \n use persist::fs::*;\n-use rustc::dep_graph::{WorkProduct, WorkProductId};\n+use rustc::dep_graph::{WorkProduct, WorkProductId, DepGraph};\n use rustc::session::Session;\n use rustc::session::config::OutputType;\n use rustc::util::fs::link_or_copy;\n use std::path::PathBuf;\n use std::fs as std_fs;\n \n pub fn save_trans_partition(sess: &Session,\n+                            dep_graph: &DepGraph,\n                             cgu_name: &str,\n                             partition_hash: u64,\n                             files: &[(OutputType, PathBuf)]) {\n@@ -60,7 +61,7 @@ pub fn save_trans_partition(sess: &Session,\n         saved_files,\n     };\n \n-    sess.dep_graph.insert_work_product(&work_product_id, work_product);\n+    dep_graph.insert_work_product(&work_product_id, work_product);\n }\n \n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {"}, {"sha": "68140011e7ec3843136fa75f8c601f57ccd5e0a3", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -13,6 +13,7 @@ use back::link::{self, get_linker, remove};\n use back::linker::LinkerInfo;\n use back::symbol_export::ExportedSymbols;\n use rustc_incremental::{save_trans_partition, in_incr_comp_dir};\n+use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::{LinkMeta, EncodedMetadata};\n use rustc::session::config::{self, OutputFilenames, OutputType, OutputTypes, Passes, SomePasses,\n                              AllPasses, Sanitizer};\n@@ -807,6 +808,7 @@ pub fn start_async_translation(sess: &Session,\n }\n \n fn copy_module_artifacts_into_incr_comp_cache(sess: &Session,\n+                                              dep_graph: &DepGraph,\n                                               compiled_modules: &CompiledModules,\n                                               crate_output: &OutputFilenames) {\n     if sess.opts.incremental.is_none() {\n@@ -826,7 +828,11 @@ fn copy_module_artifacts_into_incr_comp_cache(sess: &Session,\n             files.push((OutputType::Bitcode, path));\n         }\n \n-        save_trans_partition(sess, &module.name, module.symbol_name_hash, &files);\n+        save_trans_partition(sess,\n+                             dep_graph,\n+                             &module.name,\n+                             module.symbol_name_hash,\n+                             &files);\n     }\n }\n \n@@ -1822,7 +1828,7 @@ pub struct OngoingCrateTranslation {\n }\n \n impl OngoingCrateTranslation {\n-    pub fn join(self, sess: &Session) -> CrateTranslation {\n+    pub fn join(self, sess: &Session, dep_graph: &DepGraph) -> CrateTranslation {\n         self.shared_emitter_main.check(sess, true);\n         let compiled_modules = match self.future.join() {\n             Ok(compiled_modules) => compiled_modules,\n@@ -1838,6 +1844,7 @@ impl OngoingCrateTranslation {\n         }\n \n         copy_module_artifacts_into_incr_comp_cache(sess,\n+                                                   dep_graph,\n                                                    &compiled_modules,\n                                                    &self.output_filenames);\n         produce_final_output_artifacts(sess,"}, {"sha": "fd0167be2b98f4e57680b52f32ad9c48e4a7ae1b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -11,7 +11,6 @@\n use rustc_lint;\n use rustc_driver::{driver, target_features, abort_on_err};\n use rustc_driver::pretty::ReplaceBodyWithLoop;\n-use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n@@ -144,11 +143,9 @@ pub fn run_core(search_paths: SearchPaths,\n                                                                false,\n                                                                Some(codemap.clone()));\n \n-    let dep_graph = DepGraph::new(false);\n-    let _ignore = dep_graph.in_ignore();\n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n     let mut sess = session::build_session_(\n-        sessopts, &dep_graph, cpath, diagnostic_handler, codemap\n+        sessopts, cpath, diagnostic_handler, codemap,\n     );\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));"}, {"sha": "95c0f5f5d63645a0834fee8d0e7bd07290a4ac83", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -22,7 +22,6 @@ use std::sync::{Arc, Mutex};\n \n use testing;\n use rustc_lint;\n-use rustc::dep_graph::DepGraph;\n use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::session::{self, CompileIncomplete, config};\n@@ -83,11 +82,9 @@ pub fn run(input: &str,\n     let handler =\n         errors::Handler::with_tty_emitter(ColorConfig::Auto, true, false, Some(codemap.clone()));\n \n-    let dep_graph = DepGraph::new(false);\n-    let _ignore = dep_graph.in_ignore();\n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n     let mut sess = session::build_session_(\n-        sessopts, &dep_graph, Some(input_path.clone()), handler, codemap.clone()\n+        sessopts, Some(input_path.clone()), handler, codemap.clone(),\n     );\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n@@ -100,7 +97,14 @@ pub fn run(input: &str,\n     let krate = ReplaceBodyWithLoop::new().fold_crate(krate);\n     let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n         phase_2_configure_and_expand(\n-            &sess, &cstore, krate, None, \"rustdoc-test\", None, MakeGlobMap::No, |_| Ok(())\n+            &sess,\n+            &cstore,\n+            krate,\n+            None,\n+            \"rustdoc-test\",\n+            None,\n+            MakeGlobMap::No,\n+            |_| Ok(()),\n         ).expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n     };\n \n@@ -120,8 +124,6 @@ pub fn run(input: &str,\n                                        render_type);\n \n     {\n-        let dep_graph = DepGraph::new(false);\n-        let _ignore = dep_graph.in_ignore();\n         let map = hir::map::map_crate(&mut hir_forest, defs);\n         let krate = map.krate();\n         let mut hir_collector = HirCollector {\n@@ -237,10 +239,9 @@ fn run_test(test: &str, cratename: &str, filename: &str, cfgs: Vec<String>, libs\n     // Compile the code\n     let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n \n-    let dep_graph = DepGraph::new(false);\n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n     let mut sess = session::build_session_(\n-        sessopts, &dep_graph, None, diagnostic_handler, codemap\n+        sessopts, None, diagnostic_handler, codemap,\n     );\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));"}, {"sha": "461df49b468f94dca3cfc47f0ced18404da9b32a", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=1cf956f2bae0f3d2b152bb2e06faa16e58b1ea15", "patch": "@@ -58,9 +58,8 @@ fn basic_sess(sysroot: PathBuf) -> (Session, Rc<CStore>) {\n     opts.maybe_sysroot = Some(sysroot);\n \n     let descriptions = Registry::new(&rustc::DIAGNOSTICS);\n-    let dep_graph = DepGraph::new(opts.build_dep_graph());\n     let cstore = Rc::new(CStore::new(Box::new(rustc_trans::LlvmMetadataLoader)));\n-    let sess = build_session(opts, &dep_graph, None, descriptions);\n+    let sess = build_session(opts, None, descriptions);\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     (sess, cstore)"}]}