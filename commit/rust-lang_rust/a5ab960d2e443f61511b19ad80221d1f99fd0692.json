{"sha": "a5ab960d2e443f61511b19ad80221d1f99fd0692", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YWI5NjBkMmU0NDNmNjE1MTFiMTlhZDgwMjIxZDFmOTlmZDA2OTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-24T14:06:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-24T14:06:33Z"}, "message": "auto merge of #11750 : bnoordhuis/rust/follow-rustc-symlink, r=thestinger\n\nBefore this commit, rustc looked in `dirname $0`/../lib for libraries\r\nbut that doesn't work when rustc is invoked through a symlink.\r\n\r\nThis commit makes rustc look in `dirname $(readlink $0)`/../lib, i.e.\r\nit first canonicalizes the symlink before walking up the directory tree.\r\n\r\nFixes #3632.", "tree": {"sha": "f47ca2e39f6c232875819f9c996a4b084de61bc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f47ca2e39f6c232875819f9c996a4b084de61bc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5ab960d2e443f61511b19ad80221d1f99fd0692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ab960d2e443f61511b19ad80221d1f99fd0692", "html_url": "https://github.com/rust-lang/rust/commit/a5ab960d2e443f61511b19ad80221d1f99fd0692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5ab960d2e443f61511b19ad80221d1f99fd0692/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5675f2813f86ccc6d94251f447661939d9ac3a63", "url": "https://api.github.com/repos/rust-lang/rust/commits/5675f2813f86ccc6d94251f447661939d9ac3a63", "html_url": "https://github.com/rust-lang/rust/commit/5675f2813f86ccc6d94251f447661939d9ac3a63"}, {"sha": "51103c89d06953fc534572723f030b292fabe73d", "url": "https://api.github.com/repos/rust-lang/rust/commits/51103c89d06953fc534572723f030b292fabe73d", "html_url": "https://github.com/rust-lang/rust/commit/51103c89d06953fc534572723f030b292fabe73d"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "dbff82d2b6bbb626b97052bc6e811571ce09ff09", "filename": "src/etc/check-summary.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5ab960d2e443f61511b19ad80221d1f99fd0692/src%2Fetc%2Fcheck-summary.py", "raw_url": "https://github.com/rust-lang/rust/raw/a5ab960d2e443f61511b19ad80221d1f99fd0692/src%2Fetc%2Fcheck-summary.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-summary.py?ref=a5ab960d2e443f61511b19ad80221d1f99fd0692", "patch": "@@ -1,6 +1,7 @@\n #!/usr/bin/env python\n # xfail-license\n \n+import glob\n import sys\n \n if __name__ == '__main__':\n@@ -24,7 +25,8 @@ def summarise(fname):\n     def count(t):\n         return sum(map(lambda (f, s): len(s.get(t, [])), summaries))\n     logfiles = sys.argv[1:]\n-    map(summarise, logfiles)\n+    for files in map(glob.glob, logfiles):\n+        map(summarise, files)\n     ok = count('ok')\n     failed = count('failed')\n     ignored = count('ignored')"}, {"sha": "fd8c620dc4e961518899871864149bdfaced16c0", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a5ab960d2e443f61511b19ad80221d1f99fd0692/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5ab960d2e443f61511b19ad80221d1f99fd0692/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=a5ab960d2e443f61511b19ad80221d1f99fd0692", "patch": "@@ -160,8 +160,24 @@ fn make_rustpkg_target_lib_path(dir: &Path,\n }\n \n pub fn get_or_default_sysroot() -> Path {\n-    match os::self_exe_path() {\n-      option::Some(p) => { let mut p = p; p.pop(); p }\n+    // Follow symlinks.  If the resolved path is relative, make it absolute.\n+    fn canonicalize(path: Option<Path>) -> Option<Path> {\n+        path.and_then(|mut path|\n+            match io::io_error::cond.trap(|_| ()).inside(|| fs::readlink(&path)) {\n+                Some(canon) => {\n+                    if canon.is_absolute() {\n+                        Some(canon)\n+                    } else {\n+                        path.pop();\n+                        Some(path.join(canon))\n+                    }\n+                },\n+                None => Some(path),\n+            })\n+    }\n+\n+    match canonicalize(os::self_exe_name()) {\n+      option::Some(p) => { let mut p = p; p.pop(); p.pop(); p }\n       option::None => fail!(\"can't determine value for sysroot\")\n     }\n }"}, {"sha": "1b55427fc2dbc57fb5d024fb0b7e0662c73d0996", "filename": "src/libstd/os.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a5ab960d2e443f61511b19ad80221d1f99fd0692/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5ab960d2e443f61511b19ad80221d1f99fd0692/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=a5ab960d2e443f61511b19ad80221d1f99fd0692", "patch": "@@ -337,9 +337,9 @@ pub fn dll_filename(base: &str) -> ~str {\n     format!(\"{}{}{}\", consts::DLL_PREFIX, base, consts::DLL_SUFFIX)\n }\n \n-/// Optionally returns the filesystem path to the current executable which is\n+/// Optionally returns the filesystem path of the current executable which is\n /// running. If any failure occurs, None is returned.\n-pub fn self_exe_path() -> Option<Path> {\n+pub fn self_exe_name() -> Option<Path> {\n \n     #[cfg(target_os = \"freebsd\")]\n     fn load_self() -> Option<~[u8]> {\n@@ -402,7 +402,14 @@ pub fn self_exe_path() -> Option<Path> {\n         }\n     }\n \n-    load_self().and_then(|path| Path::new_opt(path).map(|mut p| { p.pop(); p }))\n+    load_self().and_then(Path::new_opt)\n+}\n+\n+/// Optionally returns the filesystem path to the current executable which is\n+/// running. Like self_exe_name() but without the binary's name.\n+/// If any failure occurs, None is returned.\n+pub fn self_exe_path() -> Option<Path> {\n+    self_exe_name().map(|mut p| { p.pop(); p })\n }\n \n /**\n@@ -1310,6 +1317,17 @@ mod tests {\n         assert_eq!(getenv(n), option::Some(s));\n     }\n \n+    #[test]\n+    fn test_self_exe_name() {\n+        let path = os::self_exe_name();\n+        assert!(path.is_some());\n+        let path = path.unwrap();\n+        debug!(\"{:?}\", path.clone());\n+\n+        // Hard to test this function\n+        assert!(path.is_absolute());\n+    }\n+\n     #[test]\n     fn test_self_exe_path() {\n         let path = os::self_exe_path();"}]}