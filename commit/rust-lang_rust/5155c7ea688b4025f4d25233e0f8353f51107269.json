{"sha": "5155c7ea688b4025f4d25233e0f8353f51107269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNTVjN2VhNjg4YjQwMjVmNGQyNTIzM2UwZjgzNTNmNTExMDcyNjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-02T10:14:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-02T10:14:17Z"}, "message": "Rollup merge of #63153 - varkor:remove-resolve_const_var, r=cramertj\n\nRemove redundant method with const variable resolution\n\nI've also removed a `bug!()` in const value relation code and replaced it with a `FIXME`. Now `ConstValue::Slice` and `ConstValue::ByRef` will simply fail to unify rather than ICEing, which seems more user-friendly for testers.", "tree": {"sha": "c3d16929aa4ae2d46bc61fd64f4e4d3e8fe4c547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3d16929aa4ae2d46bc61fd64f4e4d3e8fe4c547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5155c7ea688b4025f4d25233e0f8353f51107269", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdRAz5CRBK7hj4Ov3rIwAAdHIIAAq+zaZIuNCYTVFi0yHrW/JF\nHpvwuz1ESXIMoDDvt2QMD/R0WorNH6I3UXhnp4QJG4/9NzHNSVTZqJ0MsAGw06WZ\ndWmtLk9fSZzHXN1+wRZ+jBRM2A+hhMdcj4ANjYqB2nXf3lZOQ9FOZpaxmtUUugeU\nTn8Rdfq+6EzH780WJgA5omgw9pdZu6T/EV9qx32YghLgHWwBcM5/znX4EVlJvURv\nZJEwkbnRz8ju10cSEjLr81KmpZUAEJ0J+8rjNOEDbtE2lYtkXz/N3rpzLh83RgBs\n2F+GWeGoq9JKUTx1y9otdaCXdYM5Ct4A5jh2Fu7YeBcoijS1Te8ZXBQB0tIMJP8=\n=Q9W3\n-----END PGP SIGNATURE-----\n", "payload": "tree c3d16929aa4ae2d46bc61fd64f4e4d3e8fe4c547\nparent 51dc78e4cce65de98ead91799d05372ce25cba2a\nparent 87e73c1f8288823e689ca254cdee9ab6c1723154\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564740857 +0200\ncommitter GitHub <noreply@github.com> 1564740857 +0200\n\nRollup merge of #63153 - varkor:remove-resolve_const_var, r=cramertj\n\nRemove redundant method with const variable resolution\n\nI've also removed a `bug!()` in const value relation code and replaced it with a `FIXME`. Now `ConstValue::Slice` and `ConstValue::ByRef` will simply fail to unify rather than ICEing, which seems more user-friendly for testers.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5155c7ea688b4025f4d25233e0f8353f51107269", "html_url": "https://github.com/rust-lang/rust/commit/5155c7ea688b4025f4d25233e0f8353f51107269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5155c7ea688b4025f4d25233e0f8353f51107269/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51dc78e4cce65de98ead91799d05372ce25cba2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/51dc78e4cce65de98ead91799d05372ce25cba2a", "html_url": "https://github.com/rust-lang/rust/commit/51dc78e4cce65de98ead91799d05372ce25cba2a"}, {"sha": "87e73c1f8288823e689ca254cdee9ab6c1723154", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e73c1f8288823e689ca254cdee9ab6c1723154", "html_url": "https://github.com/rust-lang/rust/commit/87e73c1f8288823e689ca254cdee9ab6c1723154"}], "stats": {"total": 41, "additions": 10, "deletions": 31}, "files": [{"sha": "db724875b8aa390b16aaf4b3fe7ef722a1818054", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5155c7ea688b4025f4d25233e0f8353f51107269/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5155c7ea688b4025f4d25233e0f8353f51107269/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=5155c7ea688b4025f4d25233e0f8353f51107269", "patch": "@@ -693,7 +693,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         const_var: &'tcx ty::Const<'tcx>\n     ) -> &'tcx ty::Const<'tcx> {\n         let infcx = self.infcx.expect(\"encountered const-var without infcx\");\n-        let bound_to = infcx.resolve_const_var(const_var);\n+        let bound_to = infcx.shallow_resolve(const_var);\n         if bound_to != const_var {\n             self.fold_const(bound_to)\n         } else {"}, {"sha": "e1d77a97c116068fd0c26828d486c03e40b47dc9", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5155c7ea688b4025f4d25233e0f8353f51107269/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5155c7ea688b4025f4d25233e0f8353f51107269/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=5155c7ea688b4025f4d25233e0f8353f51107269", "patch": "@@ -1351,23 +1351,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn resolve_const_var(\n-        &self,\n-        ct: &'tcx ty::Const<'tcx>\n-    ) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const { val: ConstValue::Infer(InferConst::Var(v)), .. } = ct {\n-            self.const_unification_table\n-                .borrow_mut()\n-                .probe_value(*v)\n-                .val\n-                .known()\n-                .map(|c| self.resolve_const_var(c))\n-                .unwrap_or(ct)\n-        } else {\n-            ct\n-        }\n-    }\n-\n     pub fn fully_resolve<T: TypeFoldable<'tcx>>(&self, value: &T) -> FixupResult<'tcx, T> {\n         /*!\n          * Attempts to resolve all type/region/const variables in\n@@ -1586,7 +1569,7 @@ impl<'a, 'tcx> ShallowResolver<'a, 'tcx> {\n                 // it can be resolved to an int/float variable, which\n                 // can then be recursively resolved, hence the\n                 // recursion. Note though that we prevent type\n-                // variables from unifyxing to other type variables\n+                // variables from unifying to other type variables\n                 // directly (though they may be embedded\n                 // structurally), and we prevent cycles in any case,\n                 // so this recursion should always be of very limited\n@@ -1626,17 +1609,15 @@ impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        match ct {\n-            ty::Const { val: ConstValue::Infer(InferConst::Var(vid)), .. } => {\n+        if let ty::Const { val: ConstValue::Infer(InferConst::Var(vid)), .. } = ct {\n                 self.infcx.const_unification_table\n                     .borrow_mut()\n                     .probe_value(*vid)\n                     .val\n                     .known()\n-                    .map(|c| self.fold_const(c))\n                     .unwrap_or(ct)\n-            }\n-            _ => ct,\n+        } else {\n+            ct\n         }\n     }\n }"}, {"sha": "ca54f63b83afe0c2acc30e6f38162a9cbf7dedb8", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5155c7ea688b4025f4d25233e0f8353f51107269/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5155c7ea688b4025f4d25233e0f8353f51107269/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=5155c7ea688b4025f4d25233e0f8353f51107269", "patch": "@@ -594,13 +594,11 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                 ty: a.ty,\n             }))\n         }\n-        (ConstValue::ByRef { .. }, _) => {\n-            bug!(\n-                \"non-Scalar ConstValue encountered in super_relate_consts {:?} {:?}\",\n-                a,\n-                b,\n-            );\n-        }\n+\n+        // FIXME(const_generics): we should either handle `Scalar::Ptr` or add a comment\n+        // saying that we're not handling it intentionally.\n+\n+        // FIXME(const_generics): handle `ConstValue::ByRef` and `ConstValue::Slice`.\n \n         // FIXME(const_generics): this is wrong, as it is a projection\n         (ConstValue::Unevaluated(a_def_id, a_substs),"}]}