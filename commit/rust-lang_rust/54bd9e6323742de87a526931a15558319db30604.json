{"sha": "54bd9e6323742de87a526931a15558319db30604", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YmQ5ZTYzMjM3NDJkZTg3YTUyNjkzMWExNTU1ODMxOWRiMzA2MDQ=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-26T02:57:17Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-08-20T23:11:25Z"}, "message": "docs: don't claim struct layout is specified, but mention repr", "tree": {"sha": "4e78e22dcb94eb77c8460d88a1d344ab8811d551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e78e22dcb94eb77c8460d88a1d344ab8811d551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54bd9e6323742de87a526931a15558319db30604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54bd9e6323742de87a526931a15558319db30604", "html_url": "https://github.com/rust-lang/rust/commit/54bd9e6323742de87a526931a15558319db30604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54bd9e6323742de87a526931a15558319db30604/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43f040dac892b8685ae7a89911910980c3f8531f", "url": "https://api.github.com/repos/rust-lang/rust/commits/43f040dac892b8685ae7a89911910980c3f8531f", "html_url": "https://github.com/rust-lang/rust/commit/43f040dac892b8685ae7a89911910980c3f8531f"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "256bcb2949eb57d084a2c1c7fbb7dc9008cb265f", "filename": "src/doc/guide-ffi.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/54bd9e6323742de87a526931a15558319db30604/src%2Fdoc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/54bd9e6323742de87a526931a15558319db30604/src%2Fdoc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ffi.md?ref=54bd9e6323742de87a526931a15558319db30604", "patch": "@@ -268,7 +268,7 @@ struct RustObject {\n     // other members\n }\n \n-extern fn callback(target: *mut RustObject, a:i32) {\n+extern \"C\" fn callback(target: *mut RustObject, a:i32) {\n     println!(\"I'm called from C with value {0}\", a);\n     unsafe {\n         // Update the value in RustObject with the value received from the callback\n@@ -506,16 +506,16 @@ to define a block for all windows systems, not just x86 ones.\n \n # Interoperability with foreign code\n \n-Rust guarantees that the layout of a `struct` is compatible with the platform's representation in C.\n-A `#[packed]` attribute is available, which will lay out the struct members without padding.\n-However, there are currently no guarantees about the layout of an `enum`.\n+Rust guarantees that the layout of a `struct` is compatible with the platform's representation in C\n+only if the `#[repr(C)]` attribute is applied to it.  `#[repr(C, packed)]` can be used to lay out\n+struct members without padding.  `#[repr(C)]` can also be applied to an enum.\n \n-Rust's owned and managed boxes use non-nullable pointers as handles which point to the contained\n+Rust's owned boxes (`Box<T>`) use non-nullable pointers as handles which point to the contained\n object. However, they should not be manually created because they are managed by internal\n-allocators. References can safely be assumed to be non-nullable pointers directly to the\n-type. However, breaking the borrow checking or mutability rules is not guaranteed to be safe, so\n-prefer using raw pointers (`*`) if that's needed because the compiler can't make as many assumptions\n-about them.\n+allocators. References can safely be assumed to be non-nullable pointers directly to the type.\n+However, breaking the borrow checking or mutability rules is not guaranteed to be safe, so prefer\n+using raw pointers (`*`) if that's needed because the compiler can't make as many assumptions about\n+them.\n \n Vectors and strings share the same basic memory layout, and utilities are available in the `vec` and\n `str` modules for working with C APIs. However, strings are not terminated with `\\0`. If you need a"}, {"sha": "ad459c57c864e62da7ad823e34360b470dd425cb", "filename": "src/doc/rust.md", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/54bd9e6323742de87a526931a15558319db30604/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/54bd9e6323742de87a526931a15558319db30604/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=54bd9e6323742de87a526931a15558319db30604", "patch": "@@ -1308,6 +1308,9 @@ struct Cookie;\n let c = [Cookie, Cookie, Cookie, Cookie];\n ~~~~\n \n+The precise memory layout of a structure is not specified. One can specify a\n+particular layout using the [`repr` attribute](\n+\n By using the `struct_inherit` feature gate, structures may use single inheritance. A Structure may only\n inherit from a single other structure, called the _super-struct_. The inheriting structure (sub-struct)\n acts as if all fields in the super-struct were present in the sub-struct. Fields declared in a sub-struct\n@@ -1941,6 +1944,23 @@ interpreted:\n - `linkage` - on a static, this specifies the [linkage\n   type](http://llvm.org/docs/LangRef.html#linkage-types).\n \n+On `enum`s:\n+\n+- `repr` - on C-like enums, this sets the underlying type used for\n+  representation. Takes one argument, which is the primitive\n+  type this enum should be represented for, or `C`, which specifies that it\n+  should be the default `enum` size of the C ABI for that platform. Note that\n+  enum representation in C is undefined, and this may be incorrect when the C\n+  code is compiled with certain flags.\n+\n+On `struct`s:\n+\n+- `repr` - specifies the representation to use for this struct. Takes a list\n+  of options. The currently accepted ones are `C` and `packed`, which may be\n+  combined. `C` will use a C ABI comptible struct layout, and `packed` will\n+  remove any padding between fields (note that this is very fragile and may\n+  break platforms which require aligned access).\n+\n ### Miscellaneous attributes\n \n - `export_name` - on statics and functions, this determines the name of the\n@@ -1958,12 +1978,6 @@ interpreted:\n   crate at compile-time and use any syntax extensions or lints that the crate\n   defines. They can both be specified, `#[phase(link, plugin)]` to use a crate\n   both at runtime and compiletime.\n-- `repr` - on C-like enums, this sets the underlying type used for\n-  representation. Useful for FFI. Takes one argument, which is the primitive\n-  type this enum should be represented for, or `C`, which specifies that it\n-  should be the default `enum` size of the C ABI for that platform. Note that\n-  enum representation in C is undefined, and this may be incorrect when the C\n-  code is compiled with certain flags.\n - `simd` - on certain tuple structs, derive the arithmetic operators, which\n   lower to the target's SIMD instructions, if any; the `simd` feature gate\n   is necessary to use this attribute."}]}