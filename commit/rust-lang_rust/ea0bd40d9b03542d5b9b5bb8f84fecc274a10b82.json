{"sha": "ea0bd40d9b03542d5b9b5bb8f84fecc274a10b82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMGJkNDBkOWIwMzU0MmQ1YjliNWJiOGY4NGZlY2MyNzRhMTBiODI=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-27T08:25:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T05:04:04Z"}, "message": "path: Implement windows::make_non_verbatim()\n\nmake_non_verbatim() takes a WindowsPath and returns a new one that does\nnot use the \\\\?\\ verbatim prefix, if possible.", "tree": {"sha": "9536eff10ae6ea3606d9e2df76a97c2e5eb2984f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9536eff10ae6ea3606d9e2df76a97c2e5eb2984f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea0bd40d9b03542d5b9b5bb8f84fecc274a10b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0bd40d9b03542d5b9b5bb8f84fecc274a10b82", "html_url": "https://github.com/rust-lang/rust/commit/ea0bd40d9b03542d5b9b5bb8f84fecc274a10b82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea0bd40d9b03542d5b9b5bb8f84fecc274a10b82/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af38726d8e5f9d0cdd6167d0d918bf86138833ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/af38726d8e5f9d0cdd6167d0d918bf86138833ce", "html_url": "https://github.com/rust-lang/rust/commit/af38726d8e5f9d0cdd6167d0d918bf86138833ce"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "864cdebe1a0909f093f8cf19f612291c426d2047", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ea0bd40d9b03542d5b9b5bb8f84fecc274a10b82/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0bd40d9b03542d5b9b5bb8f84fecc274a10b82/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=ea0bd40d9b03542d5b9b5bb8f84fecc274a10b82", "patch": "@@ -871,6 +871,38 @@ pub fn is_verbatim(path: &Path) -> bool {\n     prefix_is_verbatim(path.prefix)\n }\n \n+/// Returns the non-verbatim equivalent of the input path, if possible.\n+/// If the input path is a device namespace path, None is returned.\n+/// If the input path is not verbatim, it is returned as-is.\n+/// If the input path is verbatim, but the same path can be expressed as\n+/// non-verbatim, the non-verbatim version is returned.\n+/// Otherwise, None is returned.\n+pub fn make_non_verbatim(path: &Path) -> Option<Path> {\n+    let new_path = match path.prefix {\n+        Some(VerbatimPrefix(_)) | Some(DeviceNSPrefix(_)) => return None,\n+        Some(UNCPrefix(_,_)) | Some(DiskPrefix) | None => return Some(path.clone()),\n+        Some(VerbatimDiskPrefix) => {\n+            // \\\\?\\D:\\\n+            Path::new(path.repr.slice_from(4))\n+        }\n+        Some(VerbatimUNCPrefix(_,_)) => {\n+            // \\\\?\\UNC\\server\\share\n+            Path::new(format!(r\"\\\\{}\", path.repr.slice_from(7)))\n+        }\n+    };\n+    if new_path.prefix.is_none() {\n+        // \\\\?\\UNC\\server is a VerbatimUNCPrefix\n+        // but \\\\server is nothing\n+        return None;\n+    }\n+    // now ensure normalization didn't change anything\n+    if path.repr.slice_from(path.prefix_len()) == new_path.repr.slice_from(new_path.prefix_len()) {\n+        Some(new_path)\n+    } else {\n+        None\n+    }\n+}\n+\n /// The standard path separator character\n pub static SEP: char = '\\\\';\n /// The standard path separator byte\n@@ -2284,4 +2316,38 @@ mod tests {\n         t!(s: \".\", [b!(\".\")]);\n         // since this is really a wrapper around str_components, those tests suffice\n     }\n+\n+    #[test]\n+    fn test_make_non_verbatim() {\n+        macro_rules! t(\n+            ($path:expr, $exp:expr) => (\n+                {\n+                    let path = Path::new($path);\n+                    let exp: Option<&str> = $exp;\n+                    let exp = exp.map(|s| Path::new(s));\n+                    assert_eq!(make_non_verbatim(&path), exp);\n+                }\n+            )\n+        )\n+\n+        t!(r\"\\a\\b\\c\", Some(r\"\\a\\b\\c\"));\n+        t!(r\"a\\b\\c\", Some(r\"a\\b\\c\"));\n+        t!(r\"C:\\a\\b\\c\", Some(r\"C:\\a\\b\\c\"));\n+        t!(r\"C:a\\b\\c\", Some(r\"C:a\\b\\c\"));\n+        t!(r\"\\\\server\\share\\foo\", Some(r\"\\\\server\\share\\foo\"));\n+        t!(r\"\\\\.\\foo\", None);\n+        t!(r\"\\\\?\\foo\", None);\n+        t!(r\"\\\\?\\C:\", None);\n+        t!(r\"\\\\?\\C:foo\", None);\n+        t!(r\"\\\\?\\C:\\\", Some(r\"C:\\\"));\n+        t!(r\"\\\\?\\C:\\foo\", Some(r\"C:\\foo\"));\n+        t!(r\"\\\\?\\C:\\foo\\bar\\baz\", Some(r\"C:\\foo\\bar\\baz\"));\n+        t!(r\"\\\\?\\C:\\foo\\.\\bar\\baz\", None);\n+        t!(r\"\\\\?\\C:\\foo\\bar\\..\\baz\", None);\n+        t!(r\"\\\\?\\C:\\foo\\bar\\..\", None);\n+        t!(r\"\\\\?\\UNC\\server\\share\\foo\", Some(r\"\\\\server\\share\\foo\"));\n+        t!(r\"\\\\?\\UNC\\server\\share\", Some(r\"\\\\server\\share\"));\n+        t!(r\"\\\\?\\UNC\\server\", None);\n+        t!(r\"\\\\?\\UNC\\server\\\", None);\n+    }\n }"}]}