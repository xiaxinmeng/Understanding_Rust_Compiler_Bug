{"sha": "435219dd82896e9576ef3f7fbc5c2cf17bae0016", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNTIxOWRkODI4OTZlOTU3NmVmM2Y3ZmJjNWMyY2YxN2JhZTAwMTY=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-08-26T21:24:34Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:35Z"}, "message": "remove empty Vec extend optimization\n\nThe optimization meant that every extend code path had to emit llvm\nIR for from_iter and extend spec_extend, which likely impacts\ncompile times while only improving a few edge-cases", "tree": {"sha": "cc016d32f32ea6d40689d7afebf36f8c67e74221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc016d32f32ea6d40689d7afebf36f8c67e74221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435219dd82896e9576ef3f7fbc5c2cf17bae0016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435219dd82896e9576ef3f7fbc5c2cf17bae0016", "html_url": "https://github.com/rust-lang/rust/commit/435219dd82896e9576ef3f7fbc5c2cf17bae0016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435219dd82896e9576ef3f7fbc5c2cf17bae0016/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7492f76f777d2815290d3b8590dc3911df6336de", "url": "https://api.github.com/repos/rust-lang/rust/commits/7492f76f777d2815290d3b8590dc3911df6336de", "html_url": "https://github.com/rust-lang/rust/commit/7492f76f777d2815290d3b8590dc3911df6336de"}], "stats": {"total": 26, "additions": 2, "deletions": 24}, "files": [{"sha": "2a778e1470dedfeff26b741beac2a95533cae30d", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/435219dd82896e9576ef3f7fbc5c2cf17bae0016/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435219dd82896e9576ef3f7fbc5c2cf17bae0016/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=435219dd82896e9576ef3f7fbc5c2cf17bae0016", "patch": "@@ -2082,13 +2082,7 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        if self.capacity() > 0 {\n-            <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())\n-        } else {\n-            // if self has no allocation then use the more powerful from_iter specializations\n-            // and overwrite self\n-            *self = SpecFrom::from_iter(iter.into_iter());\n-        }\n+        <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())\n     }\n \n     #[inline]\n@@ -2544,13 +2538,7 @@ impl<T> Vec<T> {\n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n-        if self.capacity() > 0 {\n-            self.spec_extend(iter.into_iter())\n-        } else {\n-            // if self has no allocation then use the more powerful from_iter specializations\n-            // and overwrite self\n-            *self = SpecFrom::from_iter(iter.into_iter());\n-        }\n+        self.spec_extend(iter.into_iter())\n     }\n \n     #[inline]"}, {"sha": "8e66c8a22cec594f39176dd62fb5c273ce6547c8", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/435219dd82896e9576ef3f7fbc5c2cf17bae0016/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435219dd82896e9576ef3f7fbc5c2cf17bae0016/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=435219dd82896e9576ef3f7fbc5c2cf17bae0016", "patch": "@@ -798,16 +798,6 @@ fn test_from_iter_partially_drained_in_place_specialization() {\n     assert_eq!(srcptr, sinkptr);\n }\n \n-#[test]\n-fn test_extend_in_place_specialization() {\n-    let src: Vec<usize> = vec![0usize; 1];\n-    let srcptr = src.as_ptr();\n-    let mut dst = Vec::new();\n-    dst.extend(src.into_iter());\n-    let dstptr = dst.as_ptr();\n-    assert_eq!(srcptr, dstptr);\n-}\n-\n #[test]\n fn test_from_iter_specialization_with_iterator_adapters() {\n     fn assert_in_place_trait<T: InPlaceIterable>(_: &T) {};"}]}