{"sha": "15d4728cda673e90b4db1ea2c60d18a6fae306d0", "node_id": "C_kwDOAAsO6NoAKDE1ZDQ3MjhjZGE2NzNlOTBiNGRiMWVhMmM2MGQxOGE2ZmFlMzA2ZDA", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-02-05T22:14:40Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-02-08T02:04:07Z"}, "message": "Add de-init to destination place", "tree": {"sha": "6fc14e55485198c4b29ea73f9c7619e1bda9644e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fc14e55485198c4b29ea73f9c7619e1bda9644e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15d4728cda673e90b4db1ea2c60d18a6fae306d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15d4728cda673e90b4db1ea2c60d18a6fae306d0", "html_url": "https://github.com/rust-lang/rust/commit/15d4728cda673e90b4db1ea2c60d18a6fae306d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15d4728cda673e90b4db1ea2c60d18a6fae306d0/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "html_url": "https://github.com/rust-lang/rust/commit/15f4eec7a986e6c9125ff3e0115d70aef6d5c711"}], "stats": {"total": 301, "additions": 181, "deletions": 120}, "files": [{"sha": "89f8de235835a45a84633bd4d4b22f58ef2669ee", "filename": "compiler/rustc_mir_transform/src/large_enums.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, AdtDef, Const, ParamEnv, Ty, TyCtxt};\n+use rustc_session::Session;\n use rustc_target::abi::{HasDataLayout, Size, TagEncoding, Variants};\n \n /// A pass that seeks to optimize unnecessary moves of large enum types, if there is a large\n@@ -28,14 +29,12 @@ pub struct EnumSizeOpt {\n }\n \n impl<'tcx> MirPass<'tcx> for EnumSizeOpt {\n+    fn is_enabled(&self, sess: &Session) -> bool {\n+        sess.opts.unstable_opts.unsound_mir_opts || sess.mir_opt_level() >= 3\n+    }\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let sess = tcx.sess;\n-        // FIXME(julianknodt): one thing noticed while testing this mir-opt is that there is a\n-        // different layout of large enums on wasm. It's not clear what is causing this layout\n-        // difference, as it should be identical to i686 (32 bit).\n-        if (!sess.opts.unstable_opts.unsound_mir_opts) || sess.mir_opt_level() < 3 {\n-            return;\n-        }\n+        // NOTE: This pass may produce different MIR based on the alignment of the target\n+        // platform, but it will still be valid.\n         self.optim(tcx, body);\n     }\n }\n@@ -254,6 +253,9 @@ impl EnumSizeOpt {\n                         )),\n                     };\n \n+                    let deinit_old =\n+                        Statement { source_info, kind: StatementKind::Deinit(box dst) };\n+\n                     let copy_bytes = Statement {\n                         source_info,\n                         kind: StatementKind::Intrinsic(\n@@ -279,6 +281,7 @@ impl EnumSizeOpt {\n                         dst_cast,\n                         src_ptr,\n                         src_cast,\n+                        deinit_old,\n                         copy_bytes,\n                         store_dead,\n                     ]"}, {"sha": "45cd4024c9f57513be06007a5297b1c5d0733c07", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -547,7 +547,6 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         tcx,\n         body,\n         &[\n-            &large_enums::EnumSizeOpt { discrepancy: 128 },\n             &reveal_all::RevealAll, // has to be done before inlining, since inlined code is in RevealAll mode.\n             &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n             &unreachable_prop::UnreachablePropagation,\n@@ -586,6 +585,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &simplify::SimplifyLocals::new(\"final\"),\n             &multiple_return_terminators::MultipleReturnTerminators,\n             &deduplicate_blocks::DeduplicateBlocks,\n+            &large_enums::EnumSizeOpt { discrepancy: 128 },\n             // Some cleanup necessary at least for LLVM and potentially other codegen backends.\n             &add_call_guards::CriticalCallEdges,\n             // Dump the end result for testing and debugging purposes."}, {"sha": "b139deeee1fc99c027648061664198b1b01fb455", "filename": "tests/mir-opt/enum_opt.cand.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.32bit.diff?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -1,11 +1,11 @@\n - // MIR for `cand` before EnumSizeOpt\n + // MIR for `cand` after EnumSizeOpt\n   \n-  fn cand() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:15: +0:15\n+  fn cand() -> Candidate {\n+      let mut _0: Candidate;               // return place in scope 0 at $DIR/enum_opt.rs:+0:18: +0:27\n       let mut _1: Candidate;               // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n       let mut _2: Candidate;               // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:34\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:+2:24: +2:33\n+      let mut _3: [u8; 8196];              // in scope 0 at $DIR/enum_opt.rs:+2:24: +2:33\n +     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n +     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n +     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n@@ -14,38 +14,55 @@\n +     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n +     let mut _10: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n +     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _12: [usize; 2];             // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _13: isize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _14: usize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _15: usize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _16: *mut Candidate;         // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _17: *mut u8;                // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _18: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _19: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n-          ((_1 as Small).0: u8) = const 1_u8; // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n+          _1 = Candidate::Small(const 1_u8); // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n           StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n           StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n-          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          _3 = [const 1_u8; 8196];         // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n+          _2 = Candidate::Large(move _3);  // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n           StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n -         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n-+         _4 = const [2_usize, 8196_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _4 = const [2_usize, 8197_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _6 = _5 as usize (IntToInt);     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _9 = _8 as *mut u8 (PtrToPtr);   // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _11 = _10 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         Deinit(_8);                      // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         copy_nonoverlapping(dst = _9, src = _11, count = _7); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n           StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:15: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n+-         _0 = move _1;                    // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         StorageLive(_12);                // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _12 = const [2_usize, 8197_usize]; // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _13 = discriminant(_1);          // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _14 = _13 as usize (IntToInt);   // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _15 = _12[_14];                  // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _16 = &raw mut _0;               // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _17 = _16 as *mut u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _18 = &raw const _1;             // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _19 = _18 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         Deinit(_16);                     // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         copy_nonoverlapping(dst = _17, src = _19, count = _15); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         StorageDead(_12);                // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "b139deeee1fc99c027648061664198b1b01fb455", "filename": "tests/mir-opt/enum_opt.cand.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.64bit.diff?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -1,11 +1,11 @@\n - // MIR for `cand` before EnumSizeOpt\n + // MIR for `cand` after EnumSizeOpt\n   \n-  fn cand() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:15: +0:15\n+  fn cand() -> Candidate {\n+      let mut _0: Candidate;               // return place in scope 0 at $DIR/enum_opt.rs:+0:18: +0:27\n       let mut _1: Candidate;               // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n       let mut _2: Candidate;               // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:34\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:+2:24: +2:33\n+      let mut _3: [u8; 8196];              // in scope 0 at $DIR/enum_opt.rs:+2:24: +2:33\n +     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n +     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n +     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n@@ -14,38 +14,55 @@\n +     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n +     let mut _10: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n +     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _12: [usize; 2];             // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _13: isize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _14: usize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _15: usize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _16: *mut Candidate;         // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _17: *mut u8;                // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _18: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _19: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n-          ((_1 as Small).0: u8) = const 1_u8; // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n+          _1 = Candidate::Small(const 1_u8); // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n           StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n           StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n-          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          _3 = [const 1_u8; 8196];         // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n+          _2 = Candidate::Large(move _3);  // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n           StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n -         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n-+         _4 = const [2_usize, 8200_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _4 = const [2_usize, 8197_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _6 = _5 as usize (IntToInt);     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _9 = _8 as *mut u8 (PtrToPtr);   // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         _11 = _10 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         Deinit(_8);                      // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         copy_nonoverlapping(dst = _9, src = _11, count = _7); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n +         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n           StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:15: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n+-         _0 = move _1;                    // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         StorageLive(_12);                // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _12 = const [2_usize, 8197_usize]; // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _13 = discriminant(_1);          // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _14 = _13 as usize (IntToInt);   // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _15 = _12[_14];                  // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _16 = &raw mut _0;               // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _17 = _16 as *mut u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _18 = &raw const _1;             // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _19 = _18 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         Deinit(_16);                     // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         copy_nonoverlapping(dst = _17, src = _19, count = _15); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         StorageDead(_12);                // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "a80001149ebb75aa32b61ef794a31dd495da9902", "filename": "tests/mir-opt/enum_opt.invalid.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.32bit.diff?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -1,8 +1,8 @@\n - // MIR for `invalid` before EnumSizeOpt\n + // MIR for `invalid` after EnumSizeOpt\n   \n-  fn invalid() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:18: +0:18\n+  fn invalid() -> InvalidIdxs {\n+      let mut _0: InvalidIdxs;             // return place in scope 0 at $DIR/enum_opt.rs:+0:21: +0:32\n       let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n       let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:36\n       let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:+2:26: +2:35\n@@ -12,20 +12,17 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29\n+          _1 = InvalidIdxs::A;             // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29\n           StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n           StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:26: +2:35\n           _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:+2:26: +2:35\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n+          _2 = InvalidIdxs::Large(move _3); // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n           StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:35: +2:36\n           _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:36\n           StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:35: +2:36\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:18: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n+          _0 = move _1;                    // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "a80001149ebb75aa32b61ef794a31dd495da9902", "filename": "tests/mir-opt/enum_opt.invalid.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.64bit.diff?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -1,8 +1,8 @@\n - // MIR for `invalid` before EnumSizeOpt\n + // MIR for `invalid` after EnumSizeOpt\n   \n-  fn invalid() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:18: +0:18\n+  fn invalid() -> InvalidIdxs {\n+      let mut _0: InvalidIdxs;             // return place in scope 0 at $DIR/enum_opt.rs:+0:21: +0:32\n       let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n       let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:36\n       let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:+2:26: +2:35\n@@ -12,20 +12,17 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29\n+          _1 = InvalidIdxs::A;             // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29\n           StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n           StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:26: +2:35\n           _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:+2:26: +2:35\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n+          _2 = InvalidIdxs::Large(move _3); // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n           StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:35: +2:36\n           _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:36\n           StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:35: +2:36\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:18: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n+          _0 = move _1;                    // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "2768d708049260d6e2ea9d532ce9d6a442744ff9", "filename": "tests/mir-opt/enum_opt.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.rs?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -1,20 +1,19 @@\n+// unit-test: EnumSizeOpt\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n-// compile-flags: -Zunsound-mir-opts -Zmir-opt-level=3\n-// ignore-wasm32\n+// compile-flags: -Zunsound-mir-opts\n \n #![feature(arbitrary_enum_discriminant, repr128)]\n \n // Tests that an enum with a variant with no data gets correctly transformed.\n-#[repr(C)]\n pub enum NoData {\n-  Large([u8; 8192]),\n+  Large([u8; 8196]),\n   None,\n }\n \n // Tests that an enum with a variant with data that is a valid candidate gets transformed.\n pub enum Candidate {\n   Small(u8),\n-  Large([u64; 1024]),\n+  Large([u8; 8196]),\n }\n \n // Tests that an enum which has a discriminant much higher than the variant does not get\n@@ -43,34 +42,39 @@ pub enum RandOrderDiscr {\n }\n \n // EMIT_MIR enum_opt.unin.EnumSizeOpt.diff\n-pub fn unin() {\n+pub fn unin() -> NoData {\n   let mut a = NoData::None;\n-  a = NoData::Large([1; 8192]);\n+  a = NoData::Large([1; 8196]);\n+  a\n }\n \n // EMIT_MIR enum_opt.cand.EnumSizeOpt.diff\n-pub fn cand() {\n+pub fn cand() -> Candidate {\n   let mut a = Candidate::Small(1);\n-  a = Candidate::Large([1; 1024]);\n+  a = Candidate::Large([1; 8196]);\n+  a\n }\n \n // EMIT_MIR enum_opt.invalid.EnumSizeOpt.diff\n-pub fn invalid() {\n+pub fn invalid() -> InvalidIdxs {\n   let mut a = InvalidIdxs::A;\n   a = InvalidIdxs::Large([0; 1024]);\n+  a\n }\n \n // EMIT_MIR enum_opt.trunc.EnumSizeOpt.diff\n-pub fn trunc() {\n+pub fn trunc() -> NotTrunctable {\n   let mut a = NotTrunctable::A;\n   a = NotTrunctable::B([0; 1024]);\n   a = NotTrunctable::C([0; 4096]);\n+  a\n }\n \n-pub fn rand_order() {\n+pub fn rand_order() -> RandOrderDiscr {\n   let mut a = RandOrderDiscr::A;\n   a = RandOrderDiscr::B([0; 1024]);\n   a = RandOrderDiscr::C;\n+  a\n }\n \n pub fn main() {"}, {"sha": "1ef79044d4fc6cf5cfa54a64087b73dbf0e61433", "filename": "tests/mir-opt/enum_opt.trunc.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.32bit.diff?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -1,8 +1,8 @@\n - // MIR for `trunc` before EnumSizeOpt\n + // MIR for `trunc` after EnumSizeOpt\n   \n-  fn trunc() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:16: +0:16\n+  fn trunc() -> NotTrunctable {\n+      let mut _0: NotTrunctable;           // return place in scope 0 at $DIR/enum_opt.rs:+0:19: +0:32\n       let mut _1: NotTrunctable;           // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n       let mut _2: NotTrunctable;           // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:34\n       let mut _3: [u8; 1024];              // in scope 0 at $DIR/enum_opt.rs:+2:24: +2:33\n@@ -14,29 +14,24 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:31\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:31\n+          _1 = NotTrunctable::A;           // scope 0 at $DIR/enum_opt.rs:+1:15: +1:31\n           StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n           StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n           _3 = [const 0_u8; 1024];         // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n-          ((_2 as B).0: [u8; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          _2 = NotTrunctable::B(move _3);  // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n           StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n           _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n           StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n           StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n           StorageLive(_5);                 // scope 1 at $DIR/enum_opt.rs:+3:24: +3:33\n           _5 = [const 0_u8; 4096];         // scope 1 at $DIR/enum_opt.rs:+3:24: +3:33\n-          Deinit(_4);                      // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n-          ((_4 as C).0: [u8; 4096]) = move _5; // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n-          discriminant(_4) = 2;            // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n+          _4 = NotTrunctable::C(move _5);  // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n           StorageDead(_5);                 // scope 1 at $DIR/enum_opt.rs:+3:33: +3:34\n           _1 = move _4;                    // scope 1 at $DIR/enum_opt.rs:+3:3: +3:34\n           StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+3:33: +3:34\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:16: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:+4:2: +4:2\n+          _0 = move _1;                    // scope 1 at $DIR/enum_opt.rs:+4:3: +4:4\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "1ef79044d4fc6cf5cfa54a64087b73dbf0e61433", "filename": "tests/mir-opt/enum_opt.trunc.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.64bit.diff?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -1,8 +1,8 @@\n - // MIR for `trunc` before EnumSizeOpt\n + // MIR for `trunc` after EnumSizeOpt\n   \n-  fn trunc() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:16: +0:16\n+  fn trunc() -> NotTrunctable {\n+      let mut _0: NotTrunctable;           // return place in scope 0 at $DIR/enum_opt.rs:+0:19: +0:32\n       let mut _1: NotTrunctable;           // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n       let mut _2: NotTrunctable;           // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:34\n       let mut _3: [u8; 1024];              // in scope 0 at $DIR/enum_opt.rs:+2:24: +2:33\n@@ -14,29 +14,24 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:31\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:31\n+          _1 = NotTrunctable::A;           // scope 0 at $DIR/enum_opt.rs:+1:15: +1:31\n           StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n           StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n           _3 = [const 0_u8; 1024];         // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n-          ((_2 as B).0: [u8; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          _2 = NotTrunctable::B(move _3);  // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n           StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n           _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n           StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n           StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n           StorageLive(_5);                 // scope 1 at $DIR/enum_opt.rs:+3:24: +3:33\n           _5 = [const 0_u8; 4096];         // scope 1 at $DIR/enum_opt.rs:+3:24: +3:33\n-          Deinit(_4);                      // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n-          ((_4 as C).0: [u8; 4096]) = move _5; // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n-          discriminant(_4) = 2;            // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n+          _4 = NotTrunctable::C(move _5);  // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n           StorageDead(_5);                 // scope 1 at $DIR/enum_opt.rs:+3:33: +3:34\n           _1 = move _4;                    // scope 1 at $DIR/enum_opt.rs:+3:3: +3:34\n           StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+3:33: +3:34\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:16: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:+4:2: +4:2\n+          _0 = move _1;                    // scope 1 at $DIR/enum_opt.rs:+4:3: +4:4\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "ad9f12cf9595373c1ba60d825aa076b01b19dbdc", "filename": "tests/mir-opt/enum_opt.unin.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.32bit.diff?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -1,11 +1,11 @@\n - // MIR for `unin` before EnumSizeOpt\n + // MIR for `unin` after EnumSizeOpt\n   \n-  fn unin() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:15: +0:15\n+  fn unin() -> NoData {\n+      let mut _0: NoData;                  // return place in scope 0 at $DIR/enum_opt.rs:+0:18: +0:24\n       let mut _1: NoData;                  // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n       let mut _2: NoData;                  // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:31\n-      let mut _3: [u8; 8192];              // in scope 0 at $DIR/enum_opt.rs:+2:21: +2:30\n+      let mut _3: [u8; 8196];              // in scope 0 at $DIR/enum_opt.rs:+2:21: +2:30\n +     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n +     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n +     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n@@ -14,37 +14,55 @@\n +     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n +     let mut _10: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n +     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _12: [usize; 2];             // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _13: isize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _14: usize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _15: usize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _16: *mut NoData;            // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _17: *mut u8;                // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _18: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _19: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:27\n-          discriminant(_1) = 1;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:27\n+          _1 = NoData::None;               // scope 0 at $DIR/enum_opt.rs:+1:15: +1:27\n           StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n           StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:21: +2:30\n-          _3 = [const 1_u8; 8192];         // scope 1 at $DIR/enum_opt.rs:+2:21: +2:30\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n-          ((_2 as Large).0: [u8; 8192]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n-          discriminant(_2) = 0;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n+          _3 = [const 1_u8; 8196];         // scope 1 at $DIR/enum_opt.rs:+2:21: +2:30\n+          _2 = NoData::Large(move _3);     // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n           StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:30: +2:31\n -         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n-+         _4 = const [8196_usize, 4_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _4 = const [8197_usize, 1_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _6 = _5 as usize (IntToInt);     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _9 = _8 as *mut u8 (PtrToPtr);   // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _11 = _10 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         Deinit(_8);                      // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         copy_nonoverlapping(dst = _9, src = _11, count = _7); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n           StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:30: +2:31\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:15: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n+-         _0 = move _1;                    // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         StorageLive(_12);                // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _12 = const [8197_usize, 1_usize]; // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _13 = discriminant(_1);          // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _14 = _13 as usize (IntToInt);   // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _15 = _12[_14];                  // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _16 = &raw mut _0;               // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _17 = _16 as *mut u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _18 = &raw const _1;             // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _19 = _18 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         Deinit(_16);                     // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         copy_nonoverlapping(dst = _17, src = _19, count = _15); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         StorageDead(_12);                // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "ad9f12cf9595373c1ba60d825aa076b01b19dbdc", "filename": "tests/mir-opt/enum_opt.unin.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15d4728cda673e90b4db1ea2c60d18a6fae306d0/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.64bit.diff?ref=15d4728cda673e90b4db1ea2c60d18a6fae306d0", "patch": "@@ -1,11 +1,11 @@\n - // MIR for `unin` before EnumSizeOpt\n + // MIR for `unin` after EnumSizeOpt\n   \n-  fn unin() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:15: +0:15\n+  fn unin() -> NoData {\n+      let mut _0: NoData;                  // return place in scope 0 at $DIR/enum_opt.rs:+0:18: +0:24\n       let mut _1: NoData;                  // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n       let mut _2: NoData;                  // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:31\n-      let mut _3: [u8; 8192];              // in scope 0 at $DIR/enum_opt.rs:+2:21: +2:30\n+      let mut _3: [u8; 8196];              // in scope 0 at $DIR/enum_opt.rs:+2:21: +2:30\n +     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n +     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n +     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n@@ -14,37 +14,55 @@\n +     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n +     let mut _10: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n +     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _12: [usize; 2];             // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _13: isize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _14: usize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _15: usize;                  // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _16: *mut NoData;            // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _17: *mut u8;                // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _18: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n++     let mut _19: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+3:3: +3:4\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:27\n-          discriminant(_1) = 1;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:27\n+          _1 = NoData::None;               // scope 0 at $DIR/enum_opt.rs:+1:15: +1:27\n           StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n           StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:21: +2:30\n-          _3 = [const 1_u8; 8192];         // scope 1 at $DIR/enum_opt.rs:+2:21: +2:30\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n-          ((_2 as Large).0: [u8; 8192]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n-          discriminant(_2) = 0;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n+          _3 = [const 1_u8; 8196];         // scope 1 at $DIR/enum_opt.rs:+2:21: +2:30\n+          _2 = NoData::Large(move _3);     // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n           StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:30: +2:31\n -         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n-+         _4 = const [8196_usize, 4_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _4 = const [8197_usize, 1_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _6 = _5 as usize (IntToInt);     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _9 = _8 as *mut u8 (PtrToPtr);   // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         _11 = _10 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         Deinit(_8);                      // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         copy_nonoverlapping(dst = _9, src = _11, count = _7); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n +         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n           StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:30: +2:31\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:15: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n+-         _0 = move _1;                    // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         StorageLive(_12);                // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _12 = const [8197_usize, 1_usize]; // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _13 = discriminant(_1);          // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _14 = _13 as usize (IntToInt);   // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _15 = _12[_14];                  // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _16 = &raw mut _0;               // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _17 = _16 as *mut u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _18 = &raw const _1;             // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         _19 = _18 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         Deinit(_16);                     // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         copy_nonoverlapping(dst = _17, src = _19, count = _15); // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n++         StorageDead(_12);                // scope 1 at $DIR/enum_opt.rs:+3:3: +3:4\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+4:2: +4:2\n       }\n   }\n   "}]}