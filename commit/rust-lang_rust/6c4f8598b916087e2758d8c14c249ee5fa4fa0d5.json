{"sha": "6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNGY4NTk4YjkxNjA4N2UyNzU4ZDhjMTRjMjQ5ZWU1ZmE0ZmEwZDU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-18T11:08:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-18T11:08:59Z"}, "message": "Rollup merge of #67272 - fisherdarling:master, r=varkor,hellow554\n\nrecursion_limit parsing handles overflows\n\nThis PR adds overflow handling to `#![recursion_limit]` attribute parsing. If parsing the given value results in an `IntErrorKind::Overflow`, then the recursion_limit is set to `usize::max_value()`.\n\ncloses #67265", "tree": {"sha": "3a29c4ed19c819f8e9621a7e1261ed922a7f1aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a29c4ed19c819f8e9621a7e1261ed922a7f1aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeS8XMCRBK7hj4Ov3rIwAAdHIIAAhhhnFGMkOKXoBTOIf5Y0N1\nEdLb+Fes0F577uEMySn/18xAC3TpA0lR3g5GaTO5/U6Qx04Ev96Dtuo1xoPx9Qk2\nG8WeQc//GVIGjD+RVrj8GMarTyoR3zAj9bjSXC/uNhnEFEGo3T59xLTTSRF+ySno\nGkoIg4q6mRUkBBwjUsEtcKGb6gfbC/WmQy+9L+LAM/++yLceUnkC5qA/t2evkOBd\nWf/LheKmxdWH9hXa63mC+o7f5FNDGCFPRimrf3CH6p0hGb3wQnK48y7+F/fMpCSG\nit65+k/S4aWwdKrL7Og6AtNnNUJhiU74oubi6Bg9lJZ6llx59T99FkpibVnfacc=\n=wl3r\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a29c4ed19c819f8e9621a7e1261ed922a7f1aac\nparent 0176a9eef845e7421b7e2f7ef015333a41a7c027\nparent c53693d34d83e6221dc8b93a2c4e17e66fa6f0e2\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1582024139 +0900\ncommitter GitHub <noreply@github.com> 1582024139 +0900\n\nRollup merge of #67272 - fisherdarling:master, r=varkor,hellow554\n\nrecursion_limit parsing handles overflows\n\nThis PR adds overflow handling to `#![recursion_limit]` attribute parsing. If parsing the given value results in an `IntErrorKind::Overflow`, then the recursion_limit is set to `usize::max_value()`.\n\ncloses #67265\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "html_url": "https://github.com/rust-lang/rust/commit/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0176a9eef845e7421b7e2f7ef015333a41a7c027", "url": "https://api.github.com/repos/rust-lang/rust/commits/0176a9eef845e7421b7e2f7ef015333a41a7c027", "html_url": "https://github.com/rust-lang/rust/commit/0176a9eef845e7421b7e2f7ef015333a41a7c027"}, {"sha": "c53693d34d83e6221dc8b93a2c4e17e66fa6f0e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c53693d34d83e6221dc8b93a2c4e17e66fa6f0e2", "html_url": "https://github.com/rust-lang/rust/commit/c53693d34d83e6221dc8b93a2c4e17e66fa6f0e2"}], "stats": {"total": 118, "additions": 112, "deletions": 6}, "files": [{"sha": "055d70effc6e6886257703e4e0b2f330ba2bd61b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "patch": "@@ -46,6 +46,7 @@\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n #![feature(hash_raw_entry)]\n+#![feature(int_error_matching)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "be530da5910df588d180edc9e28f2f630e40aa6d", "filename": "src/librustc/middle/recursion_limit.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "patch": "@@ -6,26 +6,60 @@\n // just peeks and looks for that attribute.\n \n use crate::session::Session;\n+use core::num::IntErrorKind;\n+use rustc::bug;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast;\n \n use rustc_data_structures::sync::Once;\n \n pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n-    update_limit(krate, &sess.recursion_limit, sym::recursion_limit, 128);\n-    update_limit(krate, &sess.type_length_limit, sym::type_length_limit, 1048576);\n+    update_limit(sess, krate, &sess.recursion_limit, sym::recursion_limit, 128);\n+    update_limit(sess, krate, &sess.type_length_limit, sym::type_length_limit, 1048576);\n }\n \n-fn update_limit(krate: &ast::Crate, limit: &Once<usize>, name: Symbol, default: usize) {\n+fn update_limit(\n+    sess: &Session,\n+    krate: &ast::Crate,\n+    limit: &Once<usize>,\n+    name: Symbol,\n+    default: usize,\n+) {\n     for attr in &krate.attrs {\n         if !attr.check_name(name) {\n             continue;\n         }\n \n         if let Some(s) = attr.value_str() {\n-            if let Some(n) = s.as_str().parse().ok() {\n-                limit.set(n);\n-                return;\n+            match s.as_str().parse() {\n+                Ok(n) => {\n+                    limit.set(n);\n+                    return;\n+                }\n+                Err(e) => {\n+                    let mut err = sess.struct_span_err(\n+                        attr.span,\n+                        \"`recursion_limit` must be a non-negative integer\",\n+                    );\n+\n+                    let value_span = attr\n+                        .meta()\n+                        .and_then(|meta| meta.name_value_literal().cloned())\n+                        .map(|lit| lit.span)\n+                        .unwrap_or(attr.span);\n+\n+                    let error_str = match e.kind() {\n+                        IntErrorKind::Overflow => \"`recursion_limit` is too large\",\n+                        IntErrorKind::Empty => \"`recursion_limit` must be a non-negative integer\",\n+                        IntErrorKind::InvalidDigit => \"not a valid integer\",\n+                        IntErrorKind::Underflow => bug!(\"`recursion_limit` should never underflow\"),\n+                        IntErrorKind::Zero => bug!(\"zero is a valid `recursion_limit`\"),\n+                        kind => bug!(\"unimplemented IntErrorKind variant: {:?}\", kind),\n+                    };\n+\n+                    err.span_label(value_span, error_str);\n+                    err.emit();\n+                }\n             }\n         }\n     }"}, {"sha": "2a064f3e1159946cb1c15683422f392b518d5a69", "filename": "src/test/ui/recursion_limit/empty.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs?ref=6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "patch": "@@ -0,0 +1,6 @@\n+// Test the parse error for an empty recursion_limit\n+\n+#![recursion_limit = \"\"] //~ ERROR `recursion_limit` must be a non-negative integer\n+                         //~| `recursion_limit` must be a non-negative integer\n+\n+fn main() {}"}, {"sha": "690c33a746307aaf2640b121191d9bb2ff857ce6", "filename": "src/test/ui/recursion_limit/empty.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr?ref=6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "patch": "@@ -0,0 +1,10 @@\n+error: `recursion_limit` must be a non-negative integer\n+  --> $DIR/empty.rs:3:1\n+   |\n+LL | #![recursion_limit = \"\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^--^\n+   |                      |\n+   |                      `recursion_limit` must be a non-negative integer\n+\n+error: aborting due to previous error\n+"}, {"sha": "903d8040476961837d4791f9772910ffd71ebe80", "filename": "src/test/ui/recursion_limit/invalid_digit.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs?ref=6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "patch": "@@ -0,0 +1,6 @@\n+// Test the parse error for an invalid digit in recursion_limit\n+\n+#![recursion_limit = \"-100\"] //~ ERROR `recursion_limit` must be a non-negative integer\n+                             //~| not a valid integer\n+\n+fn main() {}"}, {"sha": "1dcfea547c0bd5a3381ce50bec84934cac36af01", "filename": "src/test/ui/recursion_limit/invalid_digit.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr?ref=6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "patch": "@@ -0,0 +1,10 @@\n+error: `recursion_limit` must be a non-negative integer\n+  --> $DIR/invalid_digit.rs:3:1\n+   |\n+LL | #![recursion_limit = \"-100\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^------^\n+   |                      |\n+   |                      not a valid integer\n+\n+error: aborting due to previous error\n+"}, {"sha": "6487b1350aa98cd93f393fad50eb295e12f4ea39", "filename": "src/test/ui/recursion_limit/overflow.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs?ref=6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "patch": "@@ -0,0 +1,7 @@\n+// Test the parse error for an overflowing recursion_limit\n+\n+#![recursion_limit = \"999999999999999999999999\"]\n+//~^ ERROR `recursion_limit` must be a non-negative integer\n+//~| `recursion_limit` is too large\n+\n+fn main() {}"}, {"sha": "c3fc11989dcec7845cbd5c669fb689ddb144059a", "filename": "src/test/ui/recursion_limit/overflow.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr?ref=6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "patch": "@@ -0,0 +1,10 @@\n+error: `recursion_limit` must be a non-negative integer\n+  --> $DIR/overflow.rs:3:1\n+   |\n+LL | #![recursion_limit = \"999999999999999999999999\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^--------------------------^\n+   |                      |\n+   |                      `recursion_limit` is too large\n+\n+error: aborting due to previous error\n+"}, {"sha": "f7199944e0063de178d0eaae838dc702670050c6", "filename": "src/test/ui/recursion_limit/zero.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs?ref=6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "patch": "@@ -0,0 +1,12 @@\n+// Test that a `recursion_limit` of 0 is valid\n+\n+#![recursion_limit = \"0\"]\n+\n+macro_rules! test {\n+    () => {};\n+    ($tt:tt) => { test!(); };\n+}\n+\n+test!(test); //~ ERROR 10:1: 10:13: recursion limit reached while expanding `test!`\n+\n+fn main() {}"}, {"sha": "6358805d89dee2c095f1cdccd16c83898598f45e", "filename": "src/test/ui/recursion_limit/zero.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f8598b916087e2758d8c14c249ee5fa4fa0d5/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr?ref=6c4f8598b916087e2758d8c14c249ee5fa4fa0d5", "patch": "@@ -0,0 +1,10 @@\n+error: recursion limit reached while expanding `test!`\n+  --> $DIR/zero.rs:10:1\n+   |\n+LL | test!(test);\n+   | ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a `#![recursion_limit=\"0\"]` attribute to your crate (`zero`)\n+\n+error: aborting due to previous error\n+"}]}