{"sha": "850050b7dfad4dbc241d299842c7f8e12b2053e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MDA1MGI3ZGZhZDRkYmMyNDFkMjk5ODQyYzdmOGUxMmIyMDUzZTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-20T08:30:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-21T00:32:41Z"}, "message": "doc: 'trait constraints' -> 'inheritance'. Expand\n\n/cc: #4217", "tree": {"sha": "b843afcee5b7e4bc9c702825044ba4a955904d41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b843afcee5b7e4bc9c702825044ba4a955904d41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/850050b7dfad4dbc241d299842c7f8e12b2053e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/850050b7dfad4dbc241d299842c7f8e12b2053e9", "html_url": "https://github.com/rust-lang/rust/commit/850050b7dfad4dbc241d299842c7f8e12b2053e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/850050b7dfad4dbc241d299842c7f8e12b2053e9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66aadecfee10784bc5702b2fe88d4414058171b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/66aadecfee10784bc5702b2fe88d4414058171b1", "html_url": "https://github.com/rust-lang/rust/commit/66aadecfee10784bc5702b2fe88d4414058171b1"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "3a3c371accdfd6a6fdbe1268a233f0ebc202ac5d", "filename": "doc/rust.md", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/850050b7dfad4dbc241d299842c7f8e12b2053e9/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/850050b7dfad4dbc241d299842c7f8e12b2053e9/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=850050b7dfad4dbc241d299842c7f8e12b2053e9", "patch": "@@ -1222,17 +1222,44 @@ impl float: Num {\n let x: float = Num::from_int(42);     \n ~~~~\n \n-Traits can have _constraints_ for example, in\n+Traits may inherit from other traits. For example, in\n \n ~~~~\n trait Shape { fn area() -> float; }\n trait Circle : Shape { fn radius() -> float; }\n ~~~~\n \n the syntax `Circle : Shape` means that types that implement `Circle` must also have an implementation for `Shape`.\n+Multiple supertraits are separated by spaces, `trait Circle : Shape Eq { }`.\n In an implementation of `Circle` for a given type `T`, methods can refer to `Shape` methods,\n since the typechecker checks that any type with an implementation of `Circle` also has an implementation of `Shape`.\n \n+In type-parameterized functions,\n+methods of the supertrait may be called on values of subtrait-bound type parameters.\n+Refering to the previous example of `trait Circle : Shape`:\n+\n+~~~\n+# trait Shape { fn area() -> float; }\n+# trait Circle : Shape { fn radius() -> float; }\n+fn radius_times_area<T: Circle>(c: T) -> float {\n+    // `c` is both a Circle and a Shape\n+    c.radius() * c.area()\n+}\n+~~~\n+\n+Likewise, supertrait methods may also be called on trait objects.\n+\n+~~~ {.xfail-test}\n+# trait Shape { fn area() -> float; }\n+# trait Circle : Shape { fn radius() -> float; }\n+# impl int: Shape { fn area() -> float { 0.0 } }\n+# impl int: Circle { fn radius() -> float { 0.0 } }\n+# let mycircle = 0;\n+\n+let mycircle: Circle = @mycircle as @Circle;\n+let nonsense = mycircle.radius() * mycircle.area();\n+~~~\n+\n ### Implementations\n \n An _implementation_ is an item that implements a [trait](#traits) for a specific type."}, {"sha": "445b52915980633b632e32b6eef8e02ebcd3bbea", "filename": "doc/tutorial.md", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/850050b7dfad4dbc241d299842c7f8e12b2053e9/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/850050b7dfad4dbc241d299842c7f8e12b2053e9/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=850050b7dfad4dbc241d299842c7f8e12b2053e9", "patch": "@@ -2118,10 +2118,10 @@ impl Circle: Shape {\n let s: Circle = Shape::new_shape(42.5);\n ~~~~\n \n-## Trait constraints\n+## Trait inheritance\n \n-We can write a trait declaration that is _constrained_ to only be implementable on types that\n-also implement some other trait.\n+We can write a trait declaration that _inherits_ from other traits, called _supertraits_.\n+Types that implement a trait must also implement its supertraits.\n \n For example, we can define a `Circle` trait that only types that also have the `Shape` trait can have:\n \n@@ -2151,6 +2151,34 @@ impl CircleStruct: Shape {\n This is a silly way to compute the radius of a circle\n (since we could just return the `circle` field), but you get the idea.\n \n+In type-parameterized functions,\n+methods of the supertrait may be called on values of subtrait-bound type parameters.\n+Refering to the previous example of `trait Circle : Shape`:\n+\n+~~~\n+# trait Shape { fn area() -> float; }\n+# trait Circle : Shape { fn radius() -> float; }\n+fn radius_times_area<T: Circle>(c: T) -> float {\n+    // `c` is both a Circle and a Shape\n+    c.radius() * c.area()\n+}\n+~~~\n+\n+Likewise, supertrait methods may also be called on trait objects.\n+\n+~~~ {.xfail-test}\n+# trait Shape { fn area() -> float; }\n+# trait Circle : Shape { fn radius() -> float; }\n+# impl int: Shape { fn area() -> float { 0.0 } }\n+# impl int: Circle { fn radius() -> float { 0.0 } }\n+# let mycircle = 0;\n+\n+let mycircle: Circle = @mycircle as @Circle;\n+let nonsense = mycircle.radius() * mycircle.area();\n+~~~\n+\n+> ***Note:*** Trait inheritance does not actually work with objects yet\n+\n ## Trait objects and dynamic method dispatch\n \n The above allows us to define functions that polymorphically act on"}]}