{"sha": "bad0f288d31749265b912cad00182929be6f5b25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZDBmMjg4ZDMxNzQ5MjY1YjkxMmNhZDAwMTgyOTI5YmU2ZjViMjU=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2021-02-02T06:14:24Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2021-02-02T06:16:07Z"}, "message": "Improve wording of suggestion about accessing field", "tree": {"sha": "3c123c07941f6f1dc9a61de43af206b89beefa2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c123c07941f6f1dc9a61de43af206b89beefa2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bad0f288d31749265b912cad00182929be6f5b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bad0f288d31749265b912cad00182929be6f5b25", "html_url": "https://github.com/rust-lang/rust/commit/bad0f288d31749265b912cad00182929be6f5b25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bad0f288d31749265b912cad00182929be6f5b25/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "461cbe42d03f55ac331ce9ce23108681411b04f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/461cbe42d03f55ac331ce9ce23108681411b04f5", "html_url": "https://github.com/rust-lang/rust/commit/461cbe42d03f55ac331ce9ce23108681411b04f5"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "84aa19aedebf8ef4cdf48092916df6c93c2071dd", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bad0f288d31749265b912cad00182929be6f5b25/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad0f288d31749265b912cad00182929be6f5b25/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bad0f288d31749265b912cad00182929be6f5b25", "patch": "@@ -1855,7 +1855,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         diag.span_suggestion(\n                             span,\n                             &format!(\n-                                \"you might have meant to use field `{}` of type `{}`\",\n+                                \"you might have meant to use field `{}` whose type is `{}`\",\n                                 name, ty\n                             ),\n                             suggestion,"}, {"sha": "ed9aef6e374449989eaa0980bb2279370c676db0", "filename": "src/test/ui/suggestions/field-access.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bad0f288d31749265b912cad00182929be6f5b25/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bad0f288d31749265b912cad00182929be6f5b25/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed?ref=bad0f288d31749265b912cad00182929be6f5b25", "patch": "@@ -18,17 +18,17 @@ union Foo {\n fn main() {\n     let a = A { b: B::Fst };\n     if let B::Fst = a.b {}; //~ ERROR mismatched types [E0308]\n-    //~^ HELP you might have meant to use field `b` of type `B`\n+    //~^ HELP you might have meant to use field `b` whose type is `B`\n     match a.b {\n-        //~^ HELP you might have meant to use field `b` of type `B`\n-        //~| HELP you might have meant to use field `b` of type `B`\n+        //~^ HELP you might have meant to use field `b` whose type is `B`\n+        //~| HELP you might have meant to use field `b` whose type is `B`\n         B::Fst => (), //~ ERROR mismatched types [E0308]\n         B::Snd => (), //~ ERROR mismatched types [E0308]\n     }\n \n     let foo = Foo { bar: 42 };\n     match unsafe { foo.bar } {\n-        //~^ HELP you might have meant to use field `bar` of type `u32`\n+        //~^ HELP you might have meant to use field `bar` whose type is `u32`\n         1u32 => (), //~ ERROR mismatched types [E0308]\n         _ => (),\n     }"}, {"sha": "d80488e8a45f51725334465c12a5874ef8f952c6", "filename": "src/test/ui/suggestions/field-access.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bad0f288d31749265b912cad00182929be6f5b25/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad0f288d31749265b912cad00182929be6f5b25/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs?ref=bad0f288d31749265b912cad00182929be6f5b25", "patch": "@@ -18,17 +18,17 @@ union Foo {\n fn main() {\n     let a = A { b: B::Fst };\n     if let B::Fst = a {}; //~ ERROR mismatched types [E0308]\n-    //~^ HELP you might have meant to use field `b` of type `B`\n+    //~^ HELP you might have meant to use field `b` whose type is `B`\n     match a {\n-        //~^ HELP you might have meant to use field `b` of type `B`\n-        //~| HELP you might have meant to use field `b` of type `B`\n+        //~^ HELP you might have meant to use field `b` whose type is `B`\n+        //~| HELP you might have meant to use field `b` whose type is `B`\n         B::Fst => (), //~ ERROR mismatched types [E0308]\n         B::Snd => (), //~ ERROR mismatched types [E0308]\n     }\n \n     let foo = Foo { bar: 42 };\n     match foo {\n-        //~^ HELP you might have meant to use field `bar` of type `u32`\n+        //~^ HELP you might have meant to use field `bar` whose type is `u32`\n         1u32 => (), //~ ERROR mismatched types [E0308]\n         _ => (),\n     }"}, {"sha": "b113b3746d87ef3de0fb1a6d010a3214c89d877a", "filename": "src/test/ui/suggestions/field-access.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bad0f288d31749265b912cad00182929be6f5b25/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bad0f288d31749265b912cad00182929be6f5b25/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr?ref=bad0f288d31749265b912cad00182929be6f5b25", "patch": "@@ -9,7 +9,7 @@ LL |     if let B::Fst = a {};\n    |            |\n    |            expected struct `A`, found enum `B`\n    |\n-help: you might have meant to use field `b` of type `B`\n+help: you might have meant to use field `b` whose type is `B`\n    |\n LL |     if let B::Fst = a.b {};\n    |                     ^^^\n@@ -26,7 +26,7 @@ LL |     match a {\n LL |         B::Fst => (),\n    |         ^^^^^^ expected struct `A`, found enum `B`\n    |\n-help: you might have meant to use field `b` of type `B`\n+help: you might have meant to use field `b` whose type is `B`\n    |\n LL |     match a.b {\n    |           ^^^\n@@ -43,7 +43,7 @@ LL |     match a {\n LL |         B::Snd => (),\n    |         ^^^^^^ expected struct `A`, found enum `B`\n    |\n-help: you might have meant to use field `b` of type `B`\n+help: you might have meant to use field `b` whose type is `B`\n    |\n LL |     match a.b {\n    |           ^^^\n@@ -57,7 +57,7 @@ LL |\n LL |         1u32 => (),\n    |         ^^^^ expected union `Foo`, found `u32`\n    |\n-help: you might have meant to use field `bar` of type `u32`\n+help: you might have meant to use field `bar` whose type is `u32`\n    |\n LL |     match unsafe { foo.bar } {\n    |           ^^^^^^^^^^^^^^^^^^"}]}