{"sha": "9a20bfc8560290dde118057a88086c8f9572d8b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMjBiZmM4NTYwMjkwZGRlMTE4MDU3YTg4MDg2YzhmOTU3MmQ4Yjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-10T04:34:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-10T04:34:15Z"}, "message": "Auto merge of #31465 - nagisa:mir-free-fix, r=nikomatsakis\n\nFixes #31463", "tree": {"sha": "ec091f4356ccfb973a1e83f187b6a5d4ec71b405", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec091f4356ccfb973a1e83f187b6a5d4ec71b405"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a20bfc8560290dde118057a88086c8f9572d8b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a20bfc8560290dde118057a88086c8f9572d8b7", "html_url": "https://github.com/rust-lang/rust/commit/9a20bfc8560290dde118057a88086c8f9572d8b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a20bfc8560290dde118057a88086c8f9572d8b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05427457680eb41b86b98101b8f037825b46458c", "url": "https://api.github.com/repos/rust-lang/rust/commits/05427457680eb41b86b98101b8f037825b46458c", "html_url": "https://github.com/rust-lang/rust/commit/05427457680eb41b86b98101b8f037825b46458c"}, {"sha": "7faaf0e2def919158c29cf8c50d14405598203a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7faaf0e2def919158c29cf8c50d14405598203a1", "html_url": "https://github.com/rust-lang/rust/commit/7faaf0e2def919158c29cf8c50d14405598203a1"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "87c6e2a67275035aea7007833ef429a9a494e4fc", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9a20bfc8560290dde118057a88086c8f9572d8b7/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a20bfc8560290dde118057a88086c8f9572d8b7/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=9a20bfc8560290dde118057a88086c8f9572d8b7", "patch": "@@ -236,7 +236,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         self.diverge_cleanup();\n         let scope = self.scopes.pop().unwrap();\n         assert_eq!(scope.extent, extent);\n-        build_scope_drops(block, &scope, &self.scopes[..], &mut self.cfg)\n+        build_scope_drops(&mut self.cfg, &scope, &self.scopes[..], block)\n     }\n \n \n@@ -254,8 +254,18 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             self.hir.span_bug(span, &format!(\"extent {:?} does not enclose\", extent))\n         });\n \n+        let tmp = self.get_unit_temp();\n         for (idx, ref scope) in self.scopes.iter().enumerate().rev().take(scope_count) {\n-            unpack!(block = build_scope_drops(block, scope, &self.scopes[..idx], &mut self.cfg));\n+            unpack!(block = build_scope_drops(&mut self.cfg,\n+                                              scope,\n+                                              &self.scopes[..idx],\n+                                              block));\n+            if let Some(ref free_data) = scope.free {\n+                let next = self.cfg.start_new_block();\n+                let free = build_free(self.hir.tcx(), tmp.clone(), free_data, next);\n+                self.cfg.terminate(block, free);\n+                block = next;\n+            }\n         }\n         self.cfg.terminate(block, Terminator::Goto { target: target });\n     }\n@@ -508,10 +518,10 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n }\n \n /// Builds drops for pop_scope and exit_scope.\n-fn build_scope_drops<'tcx>(mut block: BasicBlock,\n+fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n                            scope: &Scope<'tcx>,\n                            earlier_scopes: &[Scope<'tcx>],\n-                           cfg: &mut CFG<'tcx>)\n+                           mut block: BasicBlock)\n                            -> BlockAnd<()> {\n     let mut iter = scope.drops.iter().rev().peekable();\n     while let Some(drop_data) = iter.next() {\n@@ -586,9 +596,10 @@ fn build_diverge_scope<'tcx>(tcx: &ty::ctxt<'tcx>,\n         target = if let Some(cached_block) = free_data.cached_block {\n             cached_block\n         } else {\n-            let t = build_free(tcx, cfg, unit_temp, free_data, target);\n-            free_data.cached_block = Some(t);\n-            t\n+            let into = cfg.start_new_cleanup_block();\n+            cfg.terminate(into, build_free(tcx, unit_temp, free_data, target));\n+            free_data.cached_block = Some(into);\n+            into\n         }\n     };\n \n@@ -608,19 +619,16 @@ fn build_diverge_scope<'tcx>(tcx: &ty::ctxt<'tcx>,\n }\n \n fn build_free<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                    cfg: &mut CFG<'tcx>,\n                     unit_temp: Lvalue<'tcx>,\n                     data: &FreeData<'tcx>,\n-                    target: BasicBlock)\n-                    -> BasicBlock {\n+                    target: BasicBlock) -> Terminator<'tcx> {\n     let free_func = tcx.lang_items.box_free_fn()\n                        .expect(\"box_free language item is missing\");\n     let substs = tcx.mk_substs(Substs::new(\n         VecPerParamSpace::new(vec![], vec![], vec![data.item_ty]),\n         VecPerParamSpace::new(vec![], vec![], vec![])\n     ));\n-    let block = cfg.start_new_cleanup_block();\n-    cfg.terminate(block, Terminator::Call {\n+    Terminator::Call {\n         func: Operand::Constant(Constant {\n             span: data.span,\n             ty: tcx.lookup_item_type(free_func).ty.subst(tcx, substs),\n@@ -633,6 +641,5 @@ fn build_free<'tcx>(tcx: &ty::ctxt<'tcx>,\n         args: vec![Operand::Consume(data.value.clone())],\n         destination: Some((unit_temp, target)),\n         cleanup: None\n-    });\n-    block\n+    }\n }"}]}