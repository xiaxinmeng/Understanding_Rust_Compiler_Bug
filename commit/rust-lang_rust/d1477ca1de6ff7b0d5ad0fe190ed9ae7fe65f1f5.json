{"sha": "d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNDc3Y2ExZGU2ZmY3YjBkNWFkMGZlMTkwZWQ5YWU3ZmU2NWYxZjU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-06-07T03:32:58Z"}, "committer": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-06-07T03:32:58Z"}, "message": "Add a field in Summary for notiyfing about formatting failure of macro", "tree": {"sha": "357877bfab0c77b6611c45096c291fa90581ac95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/357877bfab0c77b6611c45096c291fa90581ac95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5", "html_url": "https://github.com/rust-lang/rust/commit/d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e68b1eb6c0407f46e6ebffda6cd908b5fa47f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e68b1eb6c0407f46e6ebffda6cd908b5fa47f5", "html_url": "https://github.com/rust-lang/rust/commit/94e68b1eb6c0407f46e6ebffda6cd908b5fa47f5"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "1ef6d18a5402f0b6fb2d4e32795d339b548fc9ab", "filename": "src/config/summary.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5/src%2Fconfig%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5/src%2Fconfig%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fsummary.rs?ref=d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5", "patch": "@@ -23,6 +23,9 @@ pub struct Summary {\n     // Code is valid, but it is impossible to format it properly.\n     has_formatting_errors: bool,\n \n+    // Code contains macro call that was unable to format.\n+    pub(crate) has_macro_format_failure: bool,\n+\n     // Failed a check, such as the license check or other opt-in checking.\n     has_check_errors: bool,\n \n@@ -80,6 +83,10 @@ impl Summary {\n         self.has_check_errors\n     }\n \n+    pub(crate) fn has_macro_formatting_failure(&self) -> bool {\n+        self.has_macro_format_failure\n+    }\n+\n     pub fn add_operational_error(&mut self) {\n         self.has_operational_errors = true;\n     }\n@@ -100,6 +107,10 @@ impl Summary {\n         self.has_diff = true;\n     }\n \n+    pub(crate) fn add_macro_foramt_failure(&mut self) {\n+        self.has_macro_format_failure = true;\n+    }\n+\n     pub fn has_no_errors(&self) -> bool {\n         !(self.has_operational_errors\n             || self.has_parsing_errors"}, {"sha": "a8f09e4843d5ecb7a5d8fc176ccd4f453119a055", "filename": "src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5", "patch": "@@ -422,13 +422,14 @@ fn format_ast<F>(\n     config: &Config,\n     report: FormatReport,\n     mut after_file: F,\n-) -> Result<(FileMap, bool), io::Error>\n+) -> Result<(FileMap, bool, bool), io::Error>\n where\n     F: FnMut(&FileName, &mut String, &[(usize, usize)], &FormatReport) -> Result<bool, io::Error>,\n {\n     let mut result = FileMap::new();\n     // diff mode: check if any files are differing\n     let mut has_diff = false;\n+    let mut has_macro_rewrite_failure = false;\n \n     let skip_children = config.skip_children();\n     for (path, module) in modules::list_files(krate, parse_session.codemap())? {\n@@ -472,10 +473,12 @@ where\n             }\n         };\n \n+        has_macro_rewrite_failure |= visitor.macro_rewrite_failure;\n+\n         result.push((path.clone(), visitor.buffer));\n     }\n \n-    Ok((result, has_diff))\n+    Ok((result, has_diff, has_macro_rewrite_failure))\n }\n \n /// Returns true if the line with the given line number was skipped by `#[rustfmt::skip]`.\n@@ -902,7 +905,7 @@ fn format_input_inner<T: Write>(\n     }\n \n     match format_result {\n-        Ok((file_map, has_diff)) => {\n+        Ok((file_map, has_diff, has_macro_rewrite_failure)) => {\n             if report.has_warnings() {\n                 summary.add_formatting_error();\n             }\n@@ -911,6 +914,10 @@ fn format_input_inner<T: Write>(\n                 summary.add_diff();\n             }\n \n+            if has_macro_rewrite_failure {\n+                summary.add_macro_foramt_failure();\n+            }\n+\n             Ok((summary, file_map, report))\n         }\n         Err(e) => Err((From::from(e), summary)),"}, {"sha": "830f3079aa8d20372b7904e31b3a0d90821c4ec5", "filename": "src/visitor.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=d1477ca1de6ff7b0d5ad0fe190ed9ae7fe65f1f5", "patch": "@@ -70,6 +70,7 @@ pub struct FmtVisitor<'a> {\n     pub snippet_provider: &'a SnippetProvider<'a>,\n     pub line_number: usize,\n     pub skipped_range: Vec<(usize, usize)>,\n+    pub macro_rewrite_failure: bool,\n     pub(crate) report: FormatReport,\n }\n \n@@ -519,7 +520,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n         // 1 = ;\n         let shape = self.shape().sub_width(1).unwrap();\n-        let rewrite = rewrite_macro(mac, ident, &self.get_context(), shape, pos);\n+        let rewrite = self.with_context(|ctx| rewrite_macro(mac, ident, ctx, shape, pos));\n         self.push_rewrite(mac.span, rewrite);\n     }\n \n@@ -578,6 +579,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             snippet_provider,\n             line_number: 0,\n             skipped_range: vec![],\n+            macro_rewrite_failure: false,\n             report,\n         }\n     }\n@@ -736,6 +738,20 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         }\n     }\n \n+    pub fn with_context<F>(&mut self, f: F) -> Option<String>\n+    where\n+        F: Fn(&RewriteContext) -> Option<String>,\n+    {\n+        let mut result;\n+        let macro_rewrite_failure = {\n+            let context = self.get_context();\n+            result = f(&context);\n+            unsafe { *context.macro_rewrite_failure.as_ptr() }\n+        };\n+        self.macro_rewrite_failure |= macro_rewrite_failure;\n+        result\n+    }\n+\n     pub fn get_context(&self) -> RewriteContext {\n         RewriteContext {\n             parse_session: self.parse_session,\n@@ -746,6 +762,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             is_if_else_block: RefCell::new(false),\n             force_one_line_chain: RefCell::new(false),\n             snippet_provider: self.snippet_provider,\n+            macro_rewrite_failure: RefCell::new(false),\n             report: self.report.clone(),\n         }\n     }"}]}