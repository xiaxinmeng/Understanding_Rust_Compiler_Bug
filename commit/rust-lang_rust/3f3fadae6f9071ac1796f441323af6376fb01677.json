{"sha": "3f3fadae6f9071ac1796f441323af6376fb01677", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmM2ZhZGFlNmY5MDcxYWMxNzk2ZjQ0MTMyM2FmNjM3NmZiMDE2Nzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-24T07:14:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-24T07:14:36Z"}, "message": "Merge pull request #301 from RalfJung/mir-validate\n\nMore validation tests", "tree": {"sha": "9c4f29a5b4cd3ca3b4edd7481a009f321b75a5f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4f29a5b4cd3ca3b4edd7481a009f321b75a5f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f3fadae6f9071ac1796f441323af6376fb01677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f3fadae6f9071ac1796f441323af6376fb01677", "html_url": "https://github.com/rust-lang/rust/commit/3f3fadae6f9071ac1796f441323af6376fb01677", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f3fadae6f9071ac1796f441323af6376fb01677/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66108be99d6736d63e47c2f7f5b75ab703822557", "url": "https://api.github.com/repos/rust-lang/rust/commits/66108be99d6736d63e47c2f7f5b75ab703822557", "html_url": "https://github.com/rust-lang/rust/commit/66108be99d6736d63e47c2f7f5b75ab703822557"}, {"sha": "ae10b23a7c59ad28d5eceb8df042f38802064da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae10b23a7c59ad28d5eceb8df042f38802064da0", "html_url": "https://github.com/rust-lang/rust/commit/ae10b23a7c59ad28d5eceb8df042f38802064da0"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "c1d014198693baef2115807c9e444011487093ea", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f3fadae6f9071ac1796f441323af6376fb01677/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/3f3fadae6f9071ac1796f441323af6376fb01677/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=3f3fadae6f9071ac1796f441323af6376fb01677", "patch": "@@ -10,6 +10,7 @@ before_script:\n - cargo install xargo\n - export RUST_SYSROOT=$HOME/rust\n script:\n+- set -e\n - |\n   # get ourselves a MIR-ful libstd\n   xargo/build.sh"}, {"sha": "98eca8d3607f7b025e083808c5f8f07c4e0c5bad", "filename": "tests/compile-fail/validation_buggy_as_mut_slice.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f3fadae6f9071ac1796f441323af6376fb01677/tests%2Fcompile-fail%2Fvalidation_buggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3fadae6f9071ac1796f441323af6376fb01677/tests%2Fcompile-fail%2Fvalidation_buggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_buggy_as_mut_slice.rs?ref=3f3fadae6f9071ac1796f441323af6376fb01677", "patch": "@@ -0,0 +1,20 @@\n+#![allow(unused_variables)]\n+\n+// For some reason, the error location is different when using fullmir\n+// error-pattern: in conflict with lock WriteLock\n+\n+mod safe {\n+    use std::slice::from_raw_parts_mut;\n+\n+    pub fn as_mut_slice<T>(self_: &Vec<T>) -> &mut [T] {\n+        unsafe {\n+            from_raw_parts_mut(self_.as_ptr() as *mut T, self_.len())\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let v = vec![0,1,2];\n+    let v1_ = safe::as_mut_slice(&v);\n+    let v2_ = safe::as_mut_slice(&v);\n+}"}, {"sha": "4d919f735255d921264d17808b96fa3abe3b7552", "filename": "tests/run-pass/validation_lifetime_resolution.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f3fadae6f9071ac1796f441323af6376fb01677/tests%2Frun-pass%2Fvalidation_lifetime_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3fadae6f9071ac1796f441323af6376fb01677/tests%2Frun-pass%2Fvalidation_lifetime_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvalidation_lifetime_resolution.rs?ref=3f3fadae6f9071ac1796f441323af6376fb01677", "patch": "@@ -0,0 +1,30 @@\n+trait Id {\n+    type Out;\n+\n+    fn id(self) -> Self::Out;\n+}\n+\n+impl<'a> Id for &'a mut i32 {\n+    type Out = &'a mut i32;\n+\n+    fn id(self) -> Self { self }\n+}\n+\n+impl<'a> Id for &'a mut u32 {\n+    type Out = &'a mut u32;\n+\n+    fn id(self) -> Self { self }\n+}\n+\n+fn foo<T>(mut x: T) where for<'a> &'a mut T: Id\n+{\n+    let x = &mut x;\n+    let _y = x.id();\n+    // Inspecting the trace should show that _y has a type involving a local lifetime, when it gets validated.\n+    // Unfortunately, there doesn't seem to be a way to actually have a test fail if it does not have the right\n+    // type.  Currently, this is NOT working correctly; see <https://github.com/solson/miri/issues/298>.\n+}\n+\n+fn main() {\n+    foo(3)\n+}"}]}