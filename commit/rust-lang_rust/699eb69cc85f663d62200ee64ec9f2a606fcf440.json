{"sha": "699eb69cc85f663d62200ee64ec9f2a606fcf440", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OWViNjljYzg1ZjY2M2Q2MjIwMGVlNjRlYzlmMmE2MDZmY2Y0NDA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-02-26T02:16:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-02-26T02:16:50Z"}, "message": "rustc: Eliminate the \"variants\" field from the tag info", "tree": {"sha": "c06b61bd62bede8bde5bebf8cb0c4824aa4c773f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c06b61bd62bede8bde5bebf8cb0c4824aa4c773f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/699eb69cc85f663d62200ee64ec9f2a606fcf440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/699eb69cc85f663d62200ee64ec9f2a606fcf440", "html_url": "https://github.com/rust-lang/rust/commit/699eb69cc85f663d62200ee64ec9f2a606fcf440", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/699eb69cc85f663d62200ee64ec9f2a606fcf440/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c928fcf8c584659274bdb9095e47f2fa963d05c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c928fcf8c584659274bdb9095e47f2fa963d05c", "html_url": "https://github.com/rust-lang/rust/commit/9c928fcf8c584659274bdb9095e47f2fa963d05c"}], "stats": {"total": 59, "additions": 22, "deletions": 37}, "files": [{"sha": "3f9c770e8e162e75b3a7c846ba592954226229a2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/699eb69cc85f663d62200ee64ec9f2a606fcf440/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699eb69cc85f663d62200ee64ec9f2a606fcf440/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=699eb69cc85f663d62200ee64ec9f2a606fcf440", "patch": "@@ -61,7 +61,6 @@ type glue_fns = rec(ValueRef activate_glue,\n \n tag arity { nullary; n_ary; }\n type tag_info = rec(type_handle th,\n-                    mutable vec[tup(ast.def_id,arity)] variants,\n                     mutable uint size,\n                     vec[ast.ty_param] ty_params);\n \n@@ -2384,11 +2383,12 @@ fn trans_pat_match(@block_ctxt cx, @ast.pat pat, ValueRef llval,\n \n             auto vdef = option.get[ast.variant_def](vdef_opt);\n             auto variant_id = vdef._1;\n-            auto tinfo = cx.fcx.ccx.tags.get(vdef._0);\n             auto variant_tag = 0;\n+\n+            auto variants = tag_variants(cx.fcx.ccx, vdef._0);\n             auto i = 0;\n-            for (tup(ast.def_id,arity) vinfo in tinfo.variants) {\n-                auto this_variant_id = vinfo._0;\n+            for (ast.variant v in variants) {\n+                auto this_variant_id = v.id;\n                 if (variant_id._0 == this_variant_id._0 &&\n                     variant_id._1 == this_variant_id._1) {\n                     variant_tag = i;\n@@ -4436,9 +4436,7 @@ fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n         case (ast.item_tag(_, ?variants, ?tps, ?tag_id)) {\n             auto vi = new_def_hash[uint]();\n             auto navi = new_def_hash[uint]();\n-            let vec[tup(ast.def_id,arity)] variant_info = vec();\n             cx.tags.insert(tag_id, @rec(th=mk_type_handle(),\n-                                        mutable variants=variant_info,\n                                         mutable size=0u,\n                                         ty_params=tps));\n             cx.items.insert(tag_id, i);\n@@ -4502,10 +4500,8 @@ fn resolve_tag_types_for_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n             auto max_size = 0u;\n \n             auto info = cx.tags.get(tag_id);\n-            let vec[tup(ast.def_id,arity)] variant_info = vec();\n \n             for (ast.variant variant in variants) {\n-                auto arity_info;\n                 if (_vec.len[ast.variant_arg](variant.args) > 0u) {\n                     auto llvariantty = type_of_variant(cx, variant);\n                     auto align =\n@@ -4516,16 +4512,9 @@ fn resolve_tag_types_for_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n                                                  llvariantty) as uint;\n                     if (max_align < align) { max_align = align; }\n                     if (max_size < size) { max_size = size; }\n-\n-                    arity_info = n_ary;\n-                } else {\n-                    arity_info = nullary;\n                 }\n-\n-                variant_info += vec(tup(variant.id, arity_info));\n             }\n \n-            info.variants = variant_info;\n             info.size = max_size;\n \n             // FIXME: alignment is wrong here, manually insert padding I\n@@ -4566,28 +4555,24 @@ fn trans_constant(&@crate_ctxt cx, @ast.item it) -> @crate_ctxt {\n             auto union_ty = elts.(1);\n \n             auto i = 0u;\n-            while (i < _vec.len[tup(ast.def_id,arity)](info.variants)) {\n-                auto variant_info = info.variants.(i);\n-                alt (variant_info._1) {\n-                    case (nullary) {\n-                        // Nullary tags become constants.\n-                        auto union_val = C_zero_byte_arr(info.size as uint);\n-                        auto val = C_struct(vec(C_int(i as int), union_val));\n-\n-                        // FIXME: better name\n-                        auto gvar = llvm.LLVMAddGlobal(cx.llmod, val_ty(val),\n-                                                       _str.buf(\"tag\"));\n-                        llvm.LLVMSetInitializer(gvar, val);\n-                        llvm.LLVMSetGlobalConstant(gvar, True);\n-                        llvm.LLVMSetLinkage(gvar,\n-                                            lib.llvm.LLVMPrivateLinkage\n-                                            as llvm.Linkage);\n-                        cx.item_ids.insert(variant_info._0, gvar);\n-                    }\n-                    case (n_ary) {\n-                        // N-ary tags are treated as functions and generated\n-                        // later.\n-                    }\n+            auto n_variants = _vec.len[ast.variant](variants);\n+            while (i < n_variants) {\n+                auto variant = variants.(i);\n+                if (_vec.len[ast.variant_arg](variant.args) == 0u) {\n+                    // Nullary tags become constants. (N-ary tags are treated\n+                    // as functions and generated later.)\n+\n+                    auto union_val = C_zero_byte_arr(info.size as uint);\n+                    auto val = C_struct(vec(C_int(i as int), union_val));\n+\n+                    // FIXME: better name\n+                    auto gvar = llvm.LLVMAddGlobal(cx.llmod, val_ty(val),\n+                                                   _str.buf(\"tag\"));\n+                    llvm.LLVMSetInitializer(gvar, val);\n+                    llvm.LLVMSetGlobalConstant(gvar, True);\n+                    llvm.LLVMSetLinkage(gvar, lib.llvm.LLVMPrivateLinkage\n+                                        as llvm.Linkage);\n+                    cx.item_ids.insert(variant.id, gvar);\n                 }\n \n                 i += 1u;"}]}