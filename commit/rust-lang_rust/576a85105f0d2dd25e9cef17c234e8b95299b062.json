{"sha": "576a85105f0d2dd25e9cef17c234e8b95299b062", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NmE4NTEwNWYwZDJkZDI1ZTljZWYxN2MyMzRlOGI5NTI5OWIwNjI=", "commit": {"author": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2013-12-31T21:19:57Z"}, "committer": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2013-12-31T21:19:57Z"}, "message": "Mark provided methods in dead-code pass", "tree": {"sha": "fc36f6cda0617bd0c27c08ad4ed05eff5f6a8880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc36f6cda0617bd0c27c08ad4ed05eff5f6a8880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576a85105f0d2dd25e9cef17c234e8b95299b062", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576a85105f0d2dd25e9cef17c234e8b95299b062", "html_url": "https://github.com/rust-lang/rust/commit/576a85105f0d2dd25e9cef17c234e8b95299b062", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576a85105f0d2dd25e9cef17c234e8b95299b062/comments", "author": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d459e805df076ace12ed3f7f57f2b1378f0e2403", "url": "https://api.github.com/repos/rust-lang/rust/commits/d459e805df076ace12ed3f7f57f2b1378f0e2403", "html_url": "https://github.com/rust-lang/rust/commit/d459e805df076ace12ed3f7f57f2b1378f0e2403"}], "stats": {"total": 83, "additions": 60, "deletions": 23}, "files": [{"sha": "727360a361ff9989bdb37a62ffa6a241791439f1", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 44, "deletions": 23, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/576a85105f0d2dd25e9cef17c234e8b95299b062/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576a85105f0d2dd25e9cef17c234e8b95299b062/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=576a85105f0d2dd25e9cef17c234e8b95299b062", "patch": "@@ -62,6 +62,13 @@ impl MarkSymbolVisitor {\n         }\n     }\n \n+    fn check_def_id(&mut self, def_id: ast::DefId) {\n+        if should_explore(self.tcx, def_id) {\n+            self.worklist.push(def_id.node);\n+        }\n+        self.live_symbols.insert(def_id.node);\n+    }\n+\n     fn lookup_and_handle_definition(&mut self, id: &ast::NodeId) {\n         let def_map = self.tcx.def_map.borrow();\n         let def = match def_map.get().find(id) {\n@@ -74,13 +81,44 @@ impl MarkSymbolVisitor {\n             _ => Some(def_id_of_def(def)),\n         };\n         match def_id {\n-            Some(def_id) => {\n-                if should_explore(self.tcx, def_id) {\n-                    self.worklist.push(def_id.node);\n+            Some(def_id) => self.check_def_id(def_id),\n+            None => (),\n+        }\n+    }\n+\n+    fn lookup_and_handle_method(&mut self, id: &ast::NodeId,\n+                                span: codemap::Span) {\n+        let method_map = self.method_map.borrow();\n+        match method_map.get().find(id) {\n+            Some(&typeck::method_map_entry { origin, .. }) => {\n+                match origin {\n+                    typeck::method_static(def_id) => {\n+                        match ty::provided_source(self.tcx, def_id) {\n+                            Some(p_did) => self.check_def_id(p_did),\n+                            None => self.check_def_id(def_id)\n+                        }\n+                    }\n+                    typeck::method_param(typeck::method_param {\n+                        trait_id: trait_id,\n+                        method_num: index,\n+                        ..\n+                    })\n+                    | typeck::method_object(typeck::method_object {\n+                        trait_id: trait_id,\n+                        method_num: index,\n+                        ..\n+                    }) => {\n+                        let def_id = ty::trait_method(self.tcx,\n+                                                      trait_id, index).def_id;\n+                        self.check_def_id(def_id);\n+                    }\n                 }\n-                self.live_symbols.insert(def_id.node);\n             }\n-            None => (),\n+            None => {\n+                self.tcx.sess.span_bug(span,\n+                                       \"method call expression not \\\n+                                        in method map?!\")\n+            }\n         }\n     }\n \n@@ -135,24 +173,7 @@ impl Visitor<()> for MarkSymbolVisitor {\n     fn visit_expr(&mut self, expr: @ast::Expr, _: ()) {\n         match expr.node {\n             ast::ExprMethodCall(..) => {\n-                let method_map = self.method_map.borrow();\n-                match method_map.get().find(&expr.id) {\n-                    Some(&typeck::method_map_entry {\n-                        origin: typeck::method_static(def_id),\n-                        ..\n-                    }) => {\n-                        if should_explore(self.tcx, def_id) {\n-                            self.worklist.push(def_id.node);\n-                        }\n-                        self.live_symbols.insert(def_id.node);\n-                    }\n-                    Some(_) => (),\n-                    None => {\n-                        self.tcx.sess.span_bug(expr.span,\n-                                               \"method call expression not \\\n-                                                in method map?!\")\n-                    }\n-                }\n+                self.lookup_and_handle_method(&expr.id, expr.span);\n             }\n             _ => ()\n         }"}, {"sha": "26e4093caab72f3701499171a1854f3fa8d379bf", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/576a85105f0d2dd25e9cef17c234e8b95299b062/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576a85105f0d2dd25e9cef17c234e8b95299b062/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=576a85105f0d2dd25e9cef17c234e8b95299b062", "patch": "@@ -64,3 +64,19 @@ enum c_void {} //~ ERROR: code is never used\n extern {\n     fn free(p: *c_void); //~ ERROR: code is never used\n }\n+\n+// Check provided method\n+mod inner {\n+    pub trait Trait {\n+        fn f(&self) { f(); }\n+    }\n+\n+    impl Trait for int {}\n+\n+    fn f() {}\n+}\n+\n+pub fn foo() {\n+    let a = &1 as &inner::Trait;\n+    a.f();\n+}"}]}