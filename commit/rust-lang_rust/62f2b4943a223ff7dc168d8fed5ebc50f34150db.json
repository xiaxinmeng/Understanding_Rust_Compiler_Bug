{"sha": "62f2b4943a223ff7dc168d8fed5ebc50f34150db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZjJiNDk0M2EyMjNmZjdkYzE2OGQ4ZmVkNWViYzUwZjM0MTUwZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-21T00:08:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-21T00:08:36Z"}, "message": "auto merge of #5046 : sanxiyn/rust/struct-match, r=catamorphism\n\nPreviously check always succeeded because struct type was derived from the matched expression, not the matched pattern.\r\n\r\nFix #4849.", "tree": {"sha": "b9ba7686bba888a3b7a6b5e9289633eaae6eac68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ba7686bba888a3b7a6b5e9289633eaae6eac68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62f2b4943a223ff7dc168d8fed5ebc50f34150db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62f2b4943a223ff7dc168d8fed5ebc50f34150db", "html_url": "https://github.com/rust-lang/rust/commit/62f2b4943a223ff7dc168d8fed5ebc50f34150db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62f2b4943a223ff7dc168d8fed5ebc50f34150db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831840ab242b6359333c490653ea477ae9f553cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/831840ab242b6359333c490653ea477ae9f553cb", "html_url": "https://github.com/rust-lang/rust/commit/831840ab242b6359333c490653ea477ae9f553cb"}, {"sha": "a29023e9b2b42e94d77404496e72d0132aa44a6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a29023e9b2b42e94d77404496e72d0132aa44a6b", "html_url": "https://github.com/rust-lang/rust/commit/a29023e9b2b42e94d77404496e72d0132aa44a6b"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "c233f2c6143befcc4a0e991f09651bd8670ed945", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62f2b4943a223ff7dc168d8fed5ebc50f34150db/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f2b4943a223ff7dc168d8fed5ebc50f34150db/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=62f2b4943a223ff7dc168d8fed5ebc50f34150db", "patch": "@@ -2823,7 +2823,7 @@ pub pure fn ty_fn_ret(fty: t) -> t {\n     }\n }\n \n-fn is_fn_ty(fty: t) -> bool {\n+pub fn is_fn_ty(fty: t) -> bool {\n     match get(fty).sty {\n         ty_bare_fn(_) => true,\n         ty_closure(_) => true,"}, {"sha": "a199c0dee0bd21629f80feb65738005b9138985f", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/62f2b4943a223ff7dc168d8fed5ebc50f34150db/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f2b4943a223ff7dc168d8fed5ebc50f34150db/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=62f2b4943a223ff7dc168d8fed5ebc50f34150db", "patch": "@@ -92,7 +92,7 @@ pub fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::path,\n     match structure_of(pcx.fcx, pat.span, expected) {\n         ty::ty_enum(_, ref expected_substs) => {\n             // Lookup the enum and variant def ids:\n-            let v_def = lookup_def(pcx.fcx, path.span, pat.id);\n+            let v_def = lookup_def(pcx.fcx, pat.span, pat.id);\n             let v_def_ids = ast_util::variant_def_ids(v_def);\n \n             // Assign the pattern the type of the *enum*, not the variant.\n@@ -125,8 +125,17 @@ pub fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::path,\n             kind_name = \"variant\";\n         }\n         ty::ty_struct(struct_def_id, ref expected_substs) => {\n+            // Lookup the struct ctor def id\n+            let s_def = lookup_def(pcx.fcx, pat.span, pat.id);\n+            let s_def_id = ast_util::def_id_of_def(s_def);\n+\n             // Assign the pattern the type of the struct.\n-            let struct_tpt = ty::lookup_item_type(tcx, struct_def_id);\n+            let ctor_tpt = ty::lookup_item_type(tcx, s_def_id);\n+            let struct_tpt = if ty::is_fn_ty(ctor_tpt.ty) {\n+                {ty: ty::ty_fn_ret(ctor_tpt.ty), ..ctor_tpt}\n+            } else {\n+                ctor_tpt\n+            };\n             instantiate_path(pcx.fcx, path, struct_tpt, pat.span, pat.id,\n                              pcx.block_region);\n "}, {"sha": "fa406aa278e81f96b0285b2df7c871ab5445d458", "filename": "src/test/compile-fail/match-struct.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/62f2b4943a223ff7dc168d8fed5ebc50f34150db/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f2b4943a223ff7dc168d8fed5ebc50f34150db/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs?ref=62f2b4943a223ff7dc168d8fed5ebc50f34150db", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern: mismatched types\n+\n+struct S { a: int }\n+enum E { C(int) }\n+\n+fn main() {\n+    match S { a: 1 } {\n+        C(_) => (),\n+        _ => ()\n+    }\n+}"}]}