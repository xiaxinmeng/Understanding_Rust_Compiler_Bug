{"sha": "dc0653987215293d239bfc9fd6623a4b1d6fbc36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDY1Mzk4NzIxNTI5M2QyMzliZmM5ZmQ2NjIzYTRiMWQ2ZmJjMzY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-03T03:53:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-19T10:03:20Z"}, "message": "Improve codegen option docs.\n\nThis commit:\n- Adds \"following values\" indicators for all the options that are\n  missing them.\n- Tweaks some wording and punctuation for consistency.\n- Rewords some things for clarity.\n- Removes the `no-integrated-as` entry, because that option was removed\n  in #70345.", "tree": {"sha": "dfdc741dbcca9e133e9722ece901ea7b8fc48b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfdc741dbcca9e133e9722ece901ea7b8fc48b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc0653987215293d239bfc9fd6623a4b1d6fbc36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0653987215293d239bfc9fd6623a4b1d6fbc36", "html_url": "https://github.com/rust-lang/rust/commit/dc0653987215293d239bfc9fd6623a4b1d6fbc36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc0653987215293d239bfc9fd6623a4b1d6fbc36/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f", "html_url": "https://github.com/rust-lang/rust/commit/cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f"}], "stats": {"total": 185, "additions": 101, "deletions": 84}, "files": [{"sha": "22cdc9f23396bca43a35a116826f5f2a9f8ea158", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 101, "deletions": 84, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/dc0653987215293d239bfc9fd6623a4b1d6fbc36/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc0653987215293d239bfc9fd6623a4b1d6fbc36/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=dc0653987215293d239bfc9fd6623a4b1d6fbc36", "patch": "@@ -9,10 +9,10 @@ This option is deprecated and does nothing.\n \n ## linker\n \n-This flag lets you control which linker `rustc` invokes to link your code. It\n-takes a path to the linker executable. If this flag is not specified, the\n-linker will be inferred based on the target. See also the\n-[linker-flavor](#linker-flavor) flag for another way to specify the linker.\n+This flag controls which linker `rustc` invokes to link your code. It takes a\n+path to the linker executable. If this flag is not specified, the linker will\n+be inferred based on the target. See also the [linker-flavor](#linker-flavor)\n+flag for another way to specify the linker.\n \n ## link-arg\n \n@@ -27,49 +27,52 @@ options should be separated by spaces.\n \n ## linker-flavor\n \n-This flag lets you control the linker flavor used by `rustc`. If a linker is given with the\n-[`-C linker` flag](#linker), then the linker flavor is inferred from the value provided. If no\n-linker is given then the linker flavor is used to determine the linker to use. Every `rustc` target\n-defaults to some linker flavor. Valid options are:\n-\n-* `em`: Uses [Emscripten `emcc`](https://emscripten.org/docs/tools_reference/emcc.html).\n-* `gcc`: Uses the `cc` executable, which is typically gcc or clang on many systems.\n-* `ld`: Uses the `ld` executable.\n-* `msvc`: Uses the `link.exe` executable from Microsoft Visual Studio MSVC.\n-* `ptx-linker`: Uses\n+This flag controls the linker flavor used by `rustc`. If a linker is given with\n+the [`-C linker` flag](#linker), then the linker flavor is inferred from the\n+value provided. If no linker is given then the linker flavor is used to\n+determine the linker to use. Every `rustc` target defaults to some linker\n+flavor. Valid options are:\n+\n+* `em`: use [Emscripten `emcc`](https://emscripten.org/docs/tools_reference/emcc.html).\n+* `gcc`: use the `cc` executable, which is typically gcc or clang on many systems.\n+* `ld`: use the `ld` executable.\n+* `msvc`: use the `link.exe` executable from Microsoft Visual Studio MSVC.\n+* `ptx-linker`: use\n   [`rust-ptx-linker`](https://github.com/denzp/rust-ptx-linker) for Nvidia\n   NVPTX GPGPU support.\n-* `wasm-ld`: Uses the [`wasm-ld`](https://lld.llvm.org/WebAssembly.html)\n+* `wasm-ld`: use the [`wasm-ld`](https://lld.llvm.org/WebAssembly.html)\n   executable, a port of LLVM `lld` for WebAssembly.\n-* `ld64.lld`: Uses the LLVM `lld` executable with the [`-flavor darwin`\n+* `ld64.lld`: use the LLVM `lld` executable with the [`-flavor darwin`\n   flag][lld-flavor] for Apple's `ld`.\n-* `ld.lld`: Uses the LLVM `lld` executable with the [`-flavor gnu`\n+* `ld.lld`: use the LLVM `lld` executable with the [`-flavor gnu`\n   flag][lld-flavor] for GNU binutils' `ld`.\n-* `lld-link`: Uses the LLVM `lld` executable with the [`-flavor link`\n+* `lld-link`: use the LLVM `lld` executable with the [`-flavor link`\n   flag][lld-flavor] for Microsoft's `link.exe`.\n \n [lld-flavor]: https://lld.llvm.org/Driver.html\n \n ## link-dead-code\n \n-Normally, the linker will remove dead code. This flag disables this behavior.\n+This flag controls whether the linker will keep dead code. It takes one of\n+the following values:\n+\n+* `y`, `yes`, `on`, or no value: keep dead code.\n+* `n`, `no`, or `off`: remove dead code (the default).\n \n An example of when this flag might be useful is when trying to construct code coverage\n metrics.\n \n ## lto\n \n-This flag instructs LLVM to use [link time\n+This flag controls whether LLVM uses [link time\n optimizations](https://llvm.org/docs/LinkTimeOptimization.html) to produce\n better optimized code, using whole-program analysis, at the cost of longer\n-linking time.\n-\n-This flag may take one of the following values:\n+linking time. It takes one of the following values:\n \n-* `y`, `yes`, `on`, `fat`, or no value: Performs \"fat\" LTO which attempts to\n+* `y`, `yes`, `on`, `fat`, or no value: perform \"fat\" LTO which attempts to\n   perform optimizations across all crates within the dependency graph.\n-* `n`, `no`, `off`: Disables LTO.\n-* `thin`: Performs [\"thin\"\n+* `n`, `no`, `off`: disables LTO.\n+* `thin`: perform [\"thin\"\n   LTO](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html).\n   This is similar to \"fat\", but takes substantially less time to run while\n   still achieving performance gains similar to \"fat\".\n@@ -81,22 +84,22 @@ disabled if codegen units is 1 or optimizations are disabled ([`-C\n opt-level=0`](#opt-level)). That is:\n \n * When `-C lto` is not specified:\n-  * `codegen-units=1`: Disables LTO.\n-  * `opt-level=0`: Disables LTO.\n+  * `codegen-units=1`: disable LTO.\n+  * `opt-level=0`: disable LTO.\n * When `-C lto=true`:\n-  * `lto=true`: 16 codegen units, performs fat LTO across crates.\n+  * `lto=true`: 16 codegen units, perform fat LTO across crates.\n   * `codegen-units=1` + `lto=true`: 1 codegen unit, fat LTO across crates.\n \n See also [linker-plugin-lto](#linker-plugin-lto) for cross-language LTO.\n \n ## linker-plugin-lto\n \n-Defers LTO optimizations to the linker. See\n-[linkger-plugin-LTO](../linker-plugin-lto.md) for more details. Takes one of\n+This flag defers LTO optimizations to the linker. See\n+[linker-plugin-LTO](../linker-plugin-lto.md) for more details. It takes one of\n the following values:\n \n-* `y`, `yes`, `on`, or no value: Enabled.\n-* `n`, `no`, or `off`: Disabled (default).\n+* `y`, `yes`, `on`, or no value: enable linker plugin LTO.\n+* `n`, `no`, or `off`: disable linker plugin LTO (the default).\n * A path to the linker plugin.\n \n ## target-cpu\n@@ -148,14 +151,19 @@ Pass `--help` to see a list of options.\n \n ## save-temps\n \n-`rustc` will generate temporary files during compilation; normally it will\n-delete them after it's done with its work. This option will cause them to be\n-preserved instead of removed.\n+This flag controls whether temporary files generated during compilation are\n+deleted once compilation finishes. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: save temporary files.\n+* `n`, `no`, or `off`: delete temporary files (the default).\n \n ## rpath\n \n-This option allows you to enable\n-[`rpath`](https://en.wikipedia.org/wiki/Rpath).\n+This flag controls whether [`rpath`](https://en.wikipedia.org/wiki/Rpath) is\n+enabled. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: enable rpath.\n+* `n`, `no`, or `off`: disable rpath (the default).\n \n ## overflow-checks\n \n@@ -164,35 +172,46 @@ overflow](../../reference/expressions/operator-expr.md#overflow). When\n overflow-checks are enabled, a panic will occur on overflow. This flag takes\n one of the following values:\n \n-* `y`, `yes`, `on`, or no value: Enable overflow checks.\n-* `n`, `no`, or `off`: Disable overflow checks.\n+* `y`, `yes`, `on`, or no value: enable overflow checks.\n+* `n`, `no`, or `off`: disable overflow checks.\n \n If not specified, overflow checks are enabled if\n [debug-assertions](#debug-assertions) are enabled, disabled otherwise.\n \n ## no-prepopulate-passes\n \n-The pass manager comes pre-populated with a list of passes; this flag\n-ensures that list is empty.\n+This flag controls whether the pass manager uses a pre-populated list of\n+passes. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: use an empty list of passes.\n+* `n`, `no`, or `off`: use a pre-populated list of passes (the default).\n \n ## no-vectorize-loops\n \n-By default, `rustc` will attempt to [vectorize\n-loops](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer). This\n-flag will turn that behavior off.\n+This flag controls whether `rustc` will attempt to [vectorize\n+loops](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer). It takes\n+one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: disable loop vectorization.\n+* `n`, `no`, or `off`: enable loop vectorization (the default).\n \n ## no-vectorize-slp\n \n-By default, `rustc` will attempt to vectorize code using [superword-level\n-parallelism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer). This\n-flag will turn that behavior off.\n+This flag controls whether `rustc` will attempt to vectorize code using\n+[superword-level\n+parallelism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer).\n+It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: disable SLP vectorization.\n+* `n`, `no`, or `off`: enable SLP vectorization (the default).\n \n ## soft-float\n \n-This option will make `rustc` generate code using \"soft floats.\" By default,\n-a lot of hardware supports floating point instructions, and so the code generated\n-will take advantage of this. \"soft floats\" emulate floating point instructions\n-in software.\n+This option controls whether `rustc` generates code that emulates floating\n+point instructions in software. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: use soft floats.\n+* `n`, `no`, or `off`: use hardware floats (the default).\n \n ## prefer-dynamic\n \n@@ -201,24 +220,21 @@ indicate that dynamic linking should be used if possible if both a static and\n dynamic versions of a library are available. There is an internal algorithm\n for determining whether or not it is possible to statically or dynamically\n link with a dependency. For example, `cdylib` crate types may only use static\n-linkage.\n-\n-## no-integrated-as\n+linkage. This flag takes one of the following values:\n \n-`rustc` normally uses the LLVM internal assembler to create object code. This\n-flag will disable the internal assembler and emit assembly code to be\n-translated using an external assembler, currently the linker such as `cc`.\n+* `y`, `yes`, `on`, or no value: use dynamic linking.\n+* `n`, `no`, or `off`: use static linking (the default).\n \n ## no-redzone\n \n This flag allows you to disable [the\n-red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). This flag can\n-be passed one of the following options:\n+red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). It takes one\n+of the following values:\n \n-* `y`, `yes`, `on`, or no value: Disables the red zone.\n-* `n`, `no`, or `off`: Enables the red zone.\n+* `y`, `yes`, `on`, or no value: disable the red zone.\n+* `n`, `no`, or `off`: enable the red zone.\n \n-The default if not specified depends on the target.\n+The default behaviour, if the flag is not specified, depends on the target.\n \n ## relocation-model\n \n@@ -257,7 +273,7 @@ them in parallel. Increasing parallelism may speed up compile times, but may\n also produce slower code. Setting this to 1 may improve the performance of\n generated code, but may be slower to compile.\n \n-The default, if not specified, is 16 for non-incremental builds. For\n+The default value, if not specified, is 16 for non-incremental builds. For\n incremental builds the default is 256 which allows caching to be more granular.\n \n ## remark\n@@ -274,24 +290,26 @@ This option is deprecated and does nothing.\n \n ## debuginfo\n \n-This flag lets you control debug information:\n+This flag controls the generation of debug information. It takes one of the\n+following values:\n \n-* `0`: no debug info at all (default)\n-* `1`: line tables only\n-* `2`: full debug info\n+* `0`: no debug info at all (the default).\n+* `1`: line tables only.\n+* `2`: full debug info.\n \n Note: The [`-g` flag][option-g-debug] is an alias for `-C debuginfo=2`.\n \n ## opt-level\n \n-This flag lets you control the optimization level.\n+This flag controls the optimization level.\n \n-* `0`: no optimizations, also turns on [`cfg(debug_assertions)`](#debug-assertions).\n-* `1`: basic optimizations\n-* `2`: some optimizations\n-* `3`: all optimizations\n-* `s`: optimize for binary size\n-* `z`: optimize for binary size, but also turn off loop vectorization.\n+* `0`: no optimizations, also turns on\n+  [`cfg(debug_assertions)`](#debug-assertions) (the default).\n+* `1`: basic optimizations.\n+* `2`: some optimizations.\n+* `3`: all optimizations.\n+* `s`: optimize for binary size.\n+* `z`: optimize for binary size, but also turn off loop vectorization..\n \n Note: The [`-O` flag][option-o-optimize] is an alias for `-C opt-level=2`.\n \n@@ -303,8 +321,8 @@ This flag lets you turn `cfg(debug_assertions)` [conditional\n compilation](../../reference/conditional-compilation.md#debug_assertions) on\n or off. It takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: Enable debug-assertions.\n-* `n`, `no`, or `off`: Disable debug-assertions.\n+* `y`, `yes`, `on`, or no value: enable debug-assertions.\n+* `n`, `no`, or `off`: disable debug-assertions.\n \n If not specified, debug assertions are automatically enabled only if the\n [opt-level](#opt-level) is 0.\n@@ -362,25 +380,24 @@ to a valid `.profdata` file. See the chapter on\n This flag forces the use of frame pointers. It takes one of the following\n values:\n \n-* `y`, `yes`, `on`, or no value: Frame pointers are forced to be enabled.\n-* `n`, `no`, or `off`: Frame pointers are not forced to be enabled. This does\n+* `y`, `yes`, `on`, or no value: force-enable frame pointers.\n+* `n`, `no`, or `off`: do not force-enable frame pointers. This does\n   not necessarily mean frame pointers will be removed.\n \n-The default if not specified depends on the target.\n+The default behaviour, if frame pointers are not force-enabled, depends on the\n+target.\n \n ## default-linker-libraries\n \n This flag controls whether or not the linker includes its default libraries.\n It takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: Default libraries are included.\n-* `n`, `no`, or `off`: Default libraries are **not** included.\n+* `y`, `yes`, `on`, or no value: include default libraries (the default).\n+* `n`, `no`, or `off`: exclude default libraries.\n \n For example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to\n the linker.\n \n-The default is `yes` if not specified.\n-\n [option-emit]: ../command-line-arguments.md#option-emit\n [option-o-optimize]: ../command-line-arguments.md#option-o-optimize\n [profile-guided optimization]: ../profile-guided-optimization.md"}]}