{"sha": "3badf5c51c33f15c3934ea0e91d27f60c8605024", "node_id": "C_kwDOAAsO6NoAKDNiYWRmNWM1MWMzM2YxNWMzOTM0ZWEwZTkxZDI3ZjYwYzg2MDUwMjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T00:01:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T00:01:01Z"}, "message": "Auto merge of #95333 - GuillaumeGomez:auto-trait-perf-issue, r=oli-obk\n\nFix perf issue for auto trait selection\n\nFollow-up of https://github.com/rust-lang/rust/pull/95069 which fixes the perf issue introduced by it.\n\nr? `@oli-obk`", "tree": {"sha": "1d2111cfa50c2d735f722b01169332ed3573f4c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d2111cfa50c2d735f722b01169332ed3573f4c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3badf5c51c33f15c3934ea0e91d27f60c8605024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3badf5c51c33f15c3934ea0e91d27f60c8605024", "html_url": "https://github.com/rust-lang/rust/commit/3badf5c51c33f15c3934ea0e91d27f60c8605024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3badf5c51c33f15c3934ea0e91d27f60c8605024/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62523045ec681ee8c2ecb8d395fbcaccf336284b", "url": "https://api.github.com/repos/rust-lang/rust/commits/62523045ec681ee8c2ecb8d395fbcaccf336284b", "html_url": "https://github.com/rust-lang/rust/commit/62523045ec681ee8c2ecb8d395fbcaccf336284b"}, {"sha": "bd51f174ed6b6e1e668207cb5999e46189dcfaa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd51f174ed6b6e1e668207cb5999e46189dcfaa3", "html_url": "https://github.com/rust-lang/rust/commit/bd51f174ed6b6e1e668207cb5999e46189dcfaa3"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "dc16460ca436ede5ff4f6a76e43024bef8c8d45f", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3badf5c51c33f15c3934ea0e91d27f60c8605024/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3badf5c51c33f15c3934ea0e91d27f60c8605024/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=3badf5c51c33f15c3934ea0e91d27f60c8605024", "patch": "@@ -999,6 +999,15 @@ impl<'tcx> PolyTraitRef<'tcx> {\n             polarity: ty::ImplPolarity::Positive,\n         })\n     }\n+\n+    /// Same as [`PolyTraitRef::to_poly_trait_predicate`] but sets a negative polarity instead.\n+    pub fn to_poly_trait_predicate_negative_polarity(&self) -> ty::PolyTraitPredicate<'tcx> {\n+        self.map_bound(|trait_ref| ty::TraitPredicate {\n+            trait_ref,\n+            constness: ty::BoundConstness::NotConst,\n+            polarity: ty::ImplPolarity::Negative,\n+        })\n+    }\n }\n \n /// An existential reference to a trait, where `Self` is erased."}, {"sha": "ee9983ee8b8d8d3034bbcbd1040dac53e6b07405", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3badf5c51c33f15c3934ea0e91d27f60c8605024/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3badf5c51c33f15c3934ea0e91d27f60c8605024/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=3badf5c51c33f15c3934ea0e91d27f60c8605024", "patch": "@@ -87,13 +87,31 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         let trait_pred = ty::Binder::dummy(trait_ref);\n \n         let bail_out = tcx.infer_ctxt().enter(|infcx| {\n-            let mut selcx = SelectionContext::with_negative(&infcx, true);\n+            let mut selcx = SelectionContext::new(&infcx);\n             let result = selcx.select(&Obligation::new(\n                 ObligationCause::dummy(),\n                 orig_env,\n                 trait_pred.to_poly_trait_predicate(),\n             ));\n \n+            match result {\n+                Ok(Some(ImplSource::UserDefined(_))) => {\n+                    debug!(\n+                        \"find_auto_trait_generics({:?}): \\\n+                         manual impl found, bailing out\",\n+                        trait_ref\n+                    );\n+                    return true;\n+                }\n+                _ => {}\n+            }\n+\n+            let result = selcx.select(&Obligation::new(\n+                ObligationCause::dummy(),\n+                orig_env,\n+                trait_pred.to_poly_trait_predicate_negative_polarity(),\n+            ));\n+\n             match result {\n                 Ok(Some(ImplSource::UserDefined(_))) => {\n                     debug!(\n@@ -277,7 +295,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             fresh_preds.insert(self.clean_pred(infcx, predicate));\n         }\n \n-        let mut select = SelectionContext::with_negative(&infcx, true);\n+        let mut select = SelectionContext::new(&infcx);\n \n         let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();"}, {"sha": "72d156067a1dd444ea03e24fb134168b2d164eb0", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3badf5c51c33f15c3934ea0e91d27f60c8605024/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3badf5c51c33f15c3934ea0e91d27f60c8605024/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=3badf5c51c33f15c3934ea0e91d27f60c8605024", "patch": "@@ -119,11 +119,6 @@ pub struct SelectionContext<'cx, 'tcx> {\n \n     intercrate_ambiguity_causes: Option<Vec<IntercrateAmbiguityCause>>,\n \n-    /// Controls whether or not to filter out negative impls when selecting.\n-    /// This is used in librustdoc to distinguish between the lack of an impl\n-    /// and a negative impl\n-    allow_negative_impls: bool,\n-\n     /// The mode that trait queries run in, which informs our error handling\n     /// policy. In essence, canonicalized queries need their errors propagated\n     /// rather than immediately reported because we do not have accurate spans.\n@@ -215,7 +210,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             freshener: infcx.freshener_keep_static(),\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n-            allow_negative_impls: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -226,22 +220,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             freshener: infcx.freshener_keep_static(),\n             intercrate: true,\n             intercrate_ambiguity_causes: None,\n-            allow_negative_impls: false,\n-            query_mode: TraitQueryMode::Standard,\n-        }\n-    }\n-\n-    pub fn with_negative(\n-        infcx: &'cx InferCtxt<'cx, 'tcx>,\n-        allow_negative_impls: bool,\n-    ) -> SelectionContext<'cx, 'tcx> {\n-        debug!(?allow_negative_impls, \"with_negative\");\n-        SelectionContext {\n-            infcx,\n-            freshener: infcx.freshener_keep_static(),\n-            intercrate: false,\n-            intercrate_ambiguity_causes: None,\n-            allow_negative_impls,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -256,7 +234,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             freshener: infcx.freshener_keep_static(),\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n-            allow_negative_impls: false,\n             query_mode,\n         }\n     }\n@@ -1192,7 +1169,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             if let ImplCandidate(def_id) = candidate {\n                 if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)\n                     || obligation.polarity() == tcx.impl_polarity(def_id)\n-                    || self.allow_negative_impls\n                 {\n                     result.push(candidate);\n                 }\n@@ -1272,7 +1248,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // the master cache. Since coherence executes pretty quickly,\n         // it's not worth going to more trouble to increase the\n         // hit-rate, I don't think.\n-        if self.intercrate || self.allow_negative_impls {\n+        if self.intercrate {\n             return false;\n         }\n \n@@ -1289,7 +1265,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // mode, so don't do any caching. In particular, we might\n         // re-use the same `InferCtxt` with both an intercrate\n         // and non-intercrate `SelectionContext`\n-        if self.intercrate || self.allow_negative_impls {\n+        if self.intercrate {\n             return None;\n         }\n         let tcx = self.tcx();"}]}