{"sha": "eab25383174ec70b76395d079ad6e85dfd15f2ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYjI1MzgzMTc0ZWM3MGI3NjM5NWQwNzlhZDZlODVkZmQxNWYyZmY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-11-30T23:02:58Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-08T11:20:51Z"}, "message": "Rename track-id to track-pointer-tag", "tree": {"sha": "430316b4e25de3295332806d0baaf2330bfa075e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/430316b4e25de3295332806d0baaf2330bfa075e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eab25383174ec70b76395d079ad6e85dfd15f2ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eab25383174ec70b76395d079ad6e85dfd15f2ff", "html_url": "https://github.com/rust-lang/rust/commit/eab25383174ec70b76395d079ad6e85dfd15f2ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eab25383174ec70b76395d079ad6e85dfd15f2ff/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67417945d4925e0c74277df2ba38d968791aba6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/67417945d4925e0c74277df2ba38d968791aba6d", "html_url": "https://github.com/rust-lang/rust/commit/67417945d4925e0c74277df2ba38d968791aba6d"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "e2951110acdf9e536147ec0c155e748ee3cd2e50", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eab25383174ec70b76395d079ad6e85dfd15f2ff/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab25383174ec70b76395d079ad6e85dfd15f2ff/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=eab25383174ec70b76395d079ad6e85dfd15f2ff", "patch": "@@ -32,7 +32,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n                     excluded_env_vars: vec![],\n                     args: vec![],\n                     seed: None,\n-                    tracked_id: None,\n+                    tracked_pointer_tag: None,\n                 };\n                 eval_main(tcx, entry_def_id, config);\n             });"}, {"sha": "370d2a206178eef4e20567b210a53dc7b52d3320", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eab25383174ec70b76395d079ad6e85dfd15f2ff/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab25383174ec70b76395d079ad6e85dfd15f2ff/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=eab25383174ec70b76395d079ad6e85dfd15f2ff", "patch": "@@ -45,7 +45,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                                     excluded_env_vars: vec![],\n                                     args: vec![],\n                                     seed: None,\n-                                    tracked_id: None,\n+                                    tracked_pointer_tag: None,\n                                 };\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));\n@@ -66,7 +66,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                     excluded_env_vars: vec![],\n                     args: vec![],\n                     seed: None,\n-                    tracked_id: None,\n+                    tracked_pointer_tag: None,\n                 };\n                 miri::eval_main(tcx, entry_def_id, config);\n "}, {"sha": "48af812962575b37435ca85422f8a97f32e33ab7", "filename": "src/bin/miri.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eab25383174ec70b76395d079ad6e85dfd15f2ff/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab25383174ec70b76395d079ad6e85dfd15f2ff/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=eab25383174ec70b76395d079ad6e85dfd15f2ff", "patch": "@@ -126,7 +126,7 @@ fn main() {\n     let mut communicate = false;\n     let mut ignore_leaks = false;\n     let mut seed: Option<u64> = None;\n-    let mut tracked_id: Option<miri::PtrId> = None;\n+    let mut tracked_pointer_tag: Option<miri::PtrId> = None;\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n     let mut after_dashdash = false;\n@@ -177,15 +177,15 @@ fn main() {\n                 arg if arg.starts_with(\"-Zmiri-env-exclude=\") => {\n                     excluded_env_vars.push(arg.trim_start_matches(\"-Zmiri-env-exclude=\").to_owned());\n                 },\n-                arg if arg.starts_with(\"-Zmiri-track-id=\") => {\n-                    let id: u64 = match arg.trim_start_matches(\"-Zmiri-track-id=\").parse() {\n+                arg if arg.starts_with(\"-Zmiri-track-pointer-tag=\") => {\n+                    let id: u64 = match arg.trim_start_matches(\"-Zmiri-track-pointer-tag=\").parse() {\n                         Ok(id) => id,\n-                        Err(err) => panic!(\"-Zmiri-track-id requires a valid `u64` as the argument: {}\", err),\n+                        Err(err) => panic!(\"-Zmiri-track-pointer-tag requires a valid `u64` as the argument: {}\", err),\n                     };\n                     if let Some(id) = miri::PtrId::new(id) {\n-                        tracked_id = Some(id);\n+                        tracked_pointer_tag = Some(id);\n                     } else {\n-                        panic!(\"-Zmiri-track-id must be a nonzero id\");\n+                        panic!(\"-Zmiri-track-pointer-tag must be a nonzero id\");\n                     }\n                 },\n                 _ => {\n@@ -220,7 +220,7 @@ fn main() {\n         excluded_env_vars,\n         seed,\n         args: miri_args,\n-        tracked_id,\n+        tracked_pointer_tag,\n     };\n     rustc_driver::install_ice_hook();\n     let result = rustc_driver::catch_fatal_errors(move || {"}, {"sha": "81de2fa882c54883d9a0b56ff2ae4c6a6517cdcf", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eab25383174ec70b76395d079ad6e85dfd15f2ff/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab25383174ec70b76395d079ad6e85dfd15f2ff/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=eab25383174ec70b76395d079ad6e85dfd15f2ff", "patch": "@@ -27,7 +27,7 @@ pub struct MiriConfig {\n     /// The seed to use when non-determinism or randomness are required (e.g. ptr-to-int cast, `getrandom()`).\n     pub seed: Option<u64>,\n     /// The stacked borrow id to report about\n-    pub tracked_id: Option<PtrId>,\n+    pub tracked_pointer_tag: Option<PtrId>,\n }\n \n /// Details of premature program termination.\n@@ -49,7 +49,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n         Evaluator::new(config.communicate),\n-        MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate, config.tracked_id),\n+        MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate, config.tracked_pointer_tag),\n     );\n     // Complete initialization.\n     EnvVars::init(&mut ecx, config.excluded_env_vars);"}, {"sha": "d5cd86d97878bbfc8963dabe641828f2766192ae", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eab25383174ec70b76395d079ad6e85dfd15f2ff/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab25383174ec70b76395d079ad6e85dfd15f2ff/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=eab25383174ec70b76395d079ad6e85dfd15f2ff", "patch": "@@ -77,9 +77,9 @@ pub struct MemoryExtra {\n }\n \n impl MemoryExtra {\n-    pub fn new(rng: StdRng, validate: bool, tracked_id: Option<PtrId>) -> Self {\n+    pub fn new(rng: StdRng, validate: bool, tracked_pointer_tag: Option<PtrId>) -> Self {\n         MemoryExtra {\n-            stacked_borrows: Rc::new(RefCell::new(GlobalState::new(tracked_id))),\n+            stacked_borrows: Rc::new(RefCell::new(GlobalState::new(tracked_pointer_tag))),\n             intptrcast: Default::default(),\n             rng: RefCell::new(rng),\n             validate,"}, {"sha": "ad70b05d8abd614266f0f6a0fba6b5975d031b71", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eab25383174ec70b76395d079ad6e85dfd15f2ff/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab25383174ec70b76395d079ad6e85dfd15f2ff/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=eab25383174ec70b76395d079ad6e85dfd15f2ff", "patch": "@@ -106,7 +106,7 @@ pub struct GlobalState {\n     /// Those call IDs corresponding to functions that are still running.\n     active_calls: HashSet<CallId>,\n     /// The id to trace in this execution run\n-    tracked_id: Option<PtrId>,\n+    tracked_pointer_tag: Option<PtrId>,\n }\n /// Memory extra state gives us interior mutable access to the global state.\n pub type MemoryExtra = Rc<RefCell<GlobalState>>;\n@@ -154,13 +154,13 @@ impl fmt::Display for RefKind {\n \n /// Utilities for initialization and ID generation\n impl GlobalState {\n-    pub fn new(tracked_id: Option<PtrId>) -> Self {\n+    pub fn new(tracked_pointer_tag: Option<PtrId>) -> Self {\n         GlobalState {\n             next_ptr_id: NonZeroU64::new(1).unwrap(),\n             base_ptr_ids: HashMap::default(),\n             next_call_id: NonZeroU64::new(1).unwrap(),\n             active_calls: HashSet::default(),\n-            tracked_id,\n+            tracked_pointer_tag,\n         }\n     }\n \n@@ -272,7 +272,7 @@ impl<'tcx> Stack {\n     /// Check if the given item is protected.\n     fn check_protector(item: &Item, tag: Option<Tag>, global: &GlobalState) -> InterpResult<'tcx> {\n         if let Tag::Tagged(id) = item.tag {\n-            if Some(id) == global.tracked_id {\n+            if Some(id) == global.tracked_pointer_tag {\n                 throw_unsup!(Unsupported(format!(\"disabling item {:?} for tag {:?}\", item, tag)));\n             }\n         }"}, {"sha": "35a0f04ee6f1c708a4a2d356e952b6c76f3ea58c", "filename": "tests/compile-fail/stacked_borrows/track_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eab25383174ec70b76395d079ad6e85dfd15f2ff/tests%2Fcompile-fail%2Fstacked_borrows%2Ftrack_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab25383174ec70b76395d079ad6e85dfd15f2ff/tests%2Fcompile-fail%2Fstacked_borrows%2Ftrack_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Ftrack_id.rs?ref=eab25383174ec70b76395d079ad6e85dfd15f2ff", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-id=1372\n+// compile-flags: -Zmiri-track-pointer-tag=1372\n // do not run on anything but x86_64 linux, because minor libstd changes can change the borrow stack ids\n // only-x86_64\n // only-linux"}]}