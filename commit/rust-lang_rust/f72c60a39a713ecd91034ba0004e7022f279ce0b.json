{"sha": "f72c60a39a713ecd91034ba0004e7022f279ce0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MmM2MGEzOWE3MTNlY2Q5MTAzNGJhMDAwNGU3MDIyZjI3OWNlMGI=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-05-27T16:17:09Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-05-27T16:17:09Z"}, "message": "Revert \"Auto merge of #83770 - the8472:tra-extend, r=Mark-Simulacrum\"\n\nDue to a performance regression that didn't show up in the original perf run\nthis reverts commit 9111b8ae9793f18179a1336417618fc07a9cac85, reversing\nchanges made to 9a700d2947f2d7f97a2c0dfca3117a8dcc255bdd.", "tree": {"sha": "716104783645292ad56cf7560c00b85ff4daf5fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/716104783645292ad56cf7560c00b85ff4daf5fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f72c60a39a713ecd91034ba0004e7022f279ce0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f72c60a39a713ecd91034ba0004e7022f279ce0b", "html_url": "https://github.com/rust-lang/rust/commit/f72c60a39a713ecd91034ba0004e7022f279ce0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f72c60a39a713ecd91034ba0004e7022f279ce0b/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45", "html_url": "https://github.com/rust-lang/rust/commit/ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45"}], "stats": {"total": 88, "additions": 25, "deletions": 63}, "files": [{"sha": "c6f4f22a01f6e2170cb382a9ebfb633951c8ad39", "filename": "library/alloc/src/vec/spec_extend.rs", "status": "modified", "additions": 25, "deletions": 59, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f72c60a39a713ecd91034ba0004e7022f279ce0b/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f72c60a39a713ecd91034ba0004e7022f279ce0b/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs?ref=f72c60a39a713ecd91034ba0004e7022f279ce0b", "patch": "@@ -1,5 +1,5 @@\n use crate::alloc::Allocator;\n-use core::iter::{TrustedLen, TrustedRandomAccess};\n+use core::iter::TrustedLen;\n use core::ptr::{self};\n use core::slice::{self};\n \n@@ -11,49 +11,6 @@ pub(super) trait SpecExtend<T, I> {\n }\n \n impl<T, I, A: Allocator> SpecExtend<T, I> for Vec<T, A>\n-where\n-    I: Iterator<Item = T>,\n-{\n-    default fn spec_extend(&mut self, iter: I) {\n-        SpecExtendInner::spec_extend(self, iter);\n-    }\n-}\n-\n-impl<T, A: Allocator> SpecExtend<T, IntoIter<T>> for Vec<T, A> {\n-    fn spec_extend(&mut self, mut iterator: IntoIter<T>) {\n-        unsafe {\n-            self.append_elements(iterator.as_slice() as _);\n-        }\n-        iterator.ptr = iterator.end;\n-    }\n-}\n-\n-impl<'a, T: 'a, I, A: Allocator + 'a> SpecExtend<&'a T, I> for Vec<T, A>\n-where\n-    I: Iterator<Item = &'a T>,\n-    T: Clone,\n-{\n-    default fn spec_extend(&mut self, iterator: I) {\n-        SpecExtend::spec_extend(self, iterator.cloned())\n-    }\n-}\n-\n-impl<'a, T: 'a, A: Allocator + 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T, A>\n-where\n-    T: Copy,\n-{\n-    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {\n-        let slice = iterator.as_slice();\n-        unsafe { self.append_elements(slice) };\n-    }\n-}\n-\n-// Helper trait to disambiguate overlapping specializations\n-trait SpecExtendInner<T, I> {\n-    fn spec_extend(&mut self, iter: I);\n-}\n-\n-impl<T, I, A: Allocator> SpecExtendInner<T, I> for Vec<T, A>\n where\n     I: Iterator<Item = T>,\n {\n@@ -62,7 +19,7 @@ where\n     }\n }\n \n-impl<T, I, A: Allocator> SpecExtendInner<T, I> for Vec<T, A>\n+impl<T, I, A: Allocator> SpecExtend<T, I> for Vec<T, A>\n where\n     I: TrustedLen<Item = T>,\n {\n@@ -98,22 +55,31 @@ where\n     }\n }\n \n-impl<T, I, A: Allocator> SpecExtendInner<T, I> for Vec<T, A>\n+impl<T, A: Allocator> SpecExtend<T, IntoIter<T>> for Vec<T, A> {\n+    fn spec_extend(&mut self, mut iterator: IntoIter<T>) {\n+        unsafe {\n+            self.append_elements(iterator.as_slice() as _);\n+        }\n+        iterator.ptr = iterator.end;\n+    }\n+}\n+\n+impl<'a, T: 'a, I, A: Allocator + 'a> SpecExtend<&'a T, I> for Vec<T, A>\n where\n-    I: TrustedLen<Item = T> + TrustedRandomAccess,\n+    I: Iterator<Item = &'a T>,\n+    T: Clone,\n {\n-    default fn spec_extend(&mut self, mut iterator: I) {\n-        let size = iterator.size();\n-        self.reserve(size);\n+    default fn spec_extend(&mut self, iterator: I) {\n+        self.spec_extend(iterator.cloned())\n+    }\n+}\n \n-        // SAFETY: reserve ensured that there is sufficient capacity for the additional items.\n-        // The loop upholds the TRA requirements by accessing each element only once.\n-        unsafe {\n-            let sink = self.as_mut_ptr().add(self.len());\n-            for i in 0..size {\n-                ptr::write(sink.add(i), iterator.__iterator_get_unchecked(i));\n-                self.set_len(self.len() + 1);\n-            }\n-        }\n+impl<'a, T: 'a, A: Allocator + 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T, A>\n+where\n+    T: Copy,\n+{\n+    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {\n+        let slice = iterator.as_slice();\n+        unsafe { self.append_elements(slice) };\n     }\n }"}, {"sha": "2f8f504d8fcaa1c3b630efad35eac7e43266ee5b", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f72c60a39a713ecd91034ba0004e7022f279ce0b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f72c60a39a713ecd91034ba0004e7022f279ce0b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=f72c60a39a713ecd91034ba0004e7022f279ce0b", "patch": "@@ -416,10 +416,6 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n \n /// An iterator whose items are random-accessible efficiently\n ///\n-/// Iterators that implement this trait should also implement TrustedLen which\n-/// allows specialization to disambiguate overlaps with a `TrustedLen + TrustedRandomAccess`\n-/// bound.\n-///\n /// # Safety\n ///\n /// The iterator's `size_hint` must be exact and cheap to call."}]}