{"sha": "08275826ca44e736dab4925ea0450aeb731f1d80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Mjc1ODI2Y2E0NGU3MzZkYWI0OTI1ZWEwNDUwYWViNzMxZjFkODA=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-01-11T00:28:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-11T04:48:49Z"}, "message": "corrected imprecision in description of mutable fields", "tree": {"sha": "9b45bc1439f444b35d88297279f1cd80a54ec62d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b45bc1439f444b35d88297279f1cd80a54ec62d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08275826ca44e736dab4925ea0450aeb731f1d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08275826ca44e736dab4925ea0450aeb731f1d80", "html_url": "https://github.com/rust-lang/rust/commit/08275826ca44e736dab4925ea0450aeb731f1d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08275826ca44e736dab4925ea0450aeb731f1d80/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42095221f496a4df47c3aee502a3509d969d268e", "url": "https://api.github.com/repos/rust-lang/rust/commits/42095221f496a4df47c3aee502a3509d969d268e", "html_url": "https://github.com/rust-lang/rust/commit/42095221f496a4df47c3aee502a3509d969d268e"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "40dba7afda4d6c14212a240216af5d8a78042511", "filename": "doc/tutorial.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08275826ca44e736dab4925ea0450aeb731f1d80/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/08275826ca44e736dab4925ea0450aeb731f1d80/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=08275826ca44e736dab4925ea0450aeb731f1d80", "patch": "@@ -562,7 +562,12 @@ Structs are quite similar to C structs and are even laid out the same way in\n memory (so you can read from a Rust struct in C, and vice-versa). Use the dot\n operator to access struct fields, as in `mypoint.x`.\n \n-Fields that you want to mutate must be explicitly marked `mut`.\n+Inherited mutability means that any field of a struct may be mutable, if the\n+struct is in a mutable slot (or a field of a struct in a mutable slot, and\n+so forth).\n+\n+A struct that is not mutable due to inherited mutability may declare some\n+of its fields nevertheless mutable, using the `mut` keyword.\n \n ~~~~\n struct Stack {\n@@ -572,7 +577,8 @@ struct Stack {\n ~~~~\n \n With a value of such a type, you can do `mystack.head += 1`. If `mut` were\n-omitted from the type, such an assignment would result in a type error.\n+omitted from the type, such an assignment to a struct without inherited\n+mutability would result in a type error.\n \n `match` patterns destructure structs. The basic syntax is\n `Name { fieldname: pattern, ... }`:"}]}