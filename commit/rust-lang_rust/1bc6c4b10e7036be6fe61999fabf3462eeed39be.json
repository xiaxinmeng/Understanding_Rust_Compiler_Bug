{"sha": "1bc6c4b10e7036be6fe61999fabf3462eeed39be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYzZjNGIxMGU3MDM2YmU2ZmU2MTk5OWZhYmYzNDYyZWVlZDM5YmU=", "commit": {"author": {"name": "Phlosioneer", "email": "mattmdrr2@gmail.com", "date": "2018-04-06T19:32:54Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-06-02T19:51:39Z"}, "message": "Clarify the difference between get_mut and into_mut for OccupiedEntry\n\nThe examples for both hash_map::OccupiedEntry::get_mut and\nhash_map::OccupiedEntry::into_mut were almost identical. This led\nto some confusion over the difference, namely why you would ever\nuse get_mut when into_mut gives alonger lifetime. Reddit thread:\nhttps://www.reddit.com/r/rust/comments/8a5swr/why_does_hashmaps\n\nThis commit adds two lines and a comment to the example, to show\nthat the entry object can be re-used after calling get_mut.", "tree": {"sha": "1696cd63f6c7acdca92cb7cded87a7b195ef1d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1696cd63f6c7acdca92cb7cded87a7b195ef1d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bc6c4b10e7036be6fe61999fabf3462eeed39be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc6c4b10e7036be6fe61999fabf3462eeed39be", "html_url": "https://github.com/rust-lang/rust/commit/1bc6c4b10e7036be6fe61999fabf3462eeed39be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bc6c4b10e7036be6fe61999fabf3462eeed39be/comments", "author": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "html_url": "https://github.com/rust-lang/rust/commit/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "e733b0b8048104351ff2a3a645ae9c5ad1303492", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bc6c4b10e7036be6fe61999fabf3462eeed39be/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc6c4b10e7036be6fe61999fabf3462eeed39be/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=1bc6c4b10e7036be6fe61999fabf3462eeed39be", "patch": "@@ -2261,10 +2261,14 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     ///\n     /// assert_eq!(map[\"poneyland\"], 12);\n     /// if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n-    ///      *o.get_mut() += 10;\n+    ///     *o.get_mut() += 10;\n+    ///     assert_eq!(o.get(), 22);\n+    ///\n+    ///     // We can use the same Entry multiple times.\n+    ///     *o.get_mut() += 2;\n     /// }\n     ///\n-    /// assert_eq!(map[\"poneyland\"], 22);\n+    /// assert_eq!(map[\"poneyland\"], 24);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut V {"}]}