{"sha": "8173febf930121e954a4be09043482ee771c0794", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNzNmZWJmOTMwMTIxZTk1NGE0YmUwOTA0MzQ4MmVlNzcxYzA3OTQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-24T18:37:57Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-24T19:13:19Z"}, "message": "Avoid catch-all arm, use Base(PlaceBase::Static(_))", "tree": {"sha": "4179c88bfaef10a13a3b1f9ba779749b1b56ff6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4179c88bfaef10a13a3b1f9ba779749b1b56ff6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8173febf930121e954a4be09043482ee771c0794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8173febf930121e954a4be09043482ee771c0794", "html_url": "https://github.com/rust-lang/rust/commit/8173febf930121e954a4be09043482ee771c0794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8173febf930121e954a4be09043482ee771c0794/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc45382c125d940822368e866588568d78551946", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc45382c125d940822368e866588568d78551946", "html_url": "https://github.com/rust-lang/rust/commit/fc45382c125d940822368e866588568d78551946"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "11bf750e8c7c14b8c4b14c5f60a895166c04e062", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8173febf930121e954a4be09043482ee771c0794/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8173febf930121e954a4be09043482ee771c0794/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=8173febf930121e954a4be09043482ee771c0794", "patch": "@@ -472,13 +472,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         let op = match *mir_place {\n             Base(PlaceBase::Local(mir::RETURN_PLACE)) => return err!(ReadFromReturnPointer),\n             Base(PlaceBase::Local(local)) => self.access_local(self.frame(), local, layout)?,\n+            Base(PlaceBase::Static(_)) => self.eval_place_to_mplace(mir_place)?.into(),\n \n             Projection(ref proj) => {\n                 let op = self.eval_place_to_op(&proj.base, None)?;\n                 self.operand_projection(op, &proj.elem)?\n             }\n-\n-            _ => self.eval_place_to_mplace(mir_place)?.into(),\n         };\n \n         trace!(\"eval_place_to_op: got {:?}\", *op);"}]}