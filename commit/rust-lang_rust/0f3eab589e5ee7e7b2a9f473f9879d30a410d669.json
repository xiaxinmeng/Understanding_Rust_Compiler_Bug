{"sha": "0f3eab589e5ee7e7b2a9f473f9879d30a410d669", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmM2VhYjU4OWU1ZWU3ZTdiMmE5ZjQ3M2Y5ODc5ZDMwYTQxMGQ2Njk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-28T17:07:51Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Add OptimizeContext", "tree": {"sha": "c7c0fad1e7d35a4428e90e8796a0dac6381b2135", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7c0fad1e7d35a4428e90e8796a0dac6381b2135"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f3eab589e5ee7e7b2a9f473f9879d30a410d669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3eab589e5ee7e7b2a9f473f9879d30a410d669", "html_url": "https://github.com/rust-lang/rust/commit/0f3eab589e5ee7e7b2a9f473f9879d30a410d669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f3eab589e5ee7e7b2a9f473f9879d30a410d669/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df7f68236c7f64449e4b236cd95fb30c53f4cbec", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7f68236c7f64449e4b236cd95fb30c53f4cbec", "html_url": "https://github.com/rust-lang/rust/commit/df7f68236c7f64449e4b236cd95fb30c53f4cbec"}], "stats": {"total": 136, "additions": 77, "deletions": 59}, "files": [{"sha": "2fc43aec97c07967662770ef996150f5515a6b44", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 77, "deletions": 59, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/0f3eab589e5ee7e7b2a9f473f9879d30a410d669/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3eab589e5ee7e7b2a9f473f9879d30a410d669/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=0f3eab589e5ee7e7b2a9f473f9879d30a410d669", "patch": "@@ -31,74 +31,91 @@ struct StackSlotUsage {\n     stack_store: HashSet<Inst>,\n }\n \n+struct OptimizeContext<'a> {\n+    ctx: &'a mut Context,\n+    stack_slot_usage_map: BTreeMap<OrdStackSlot, StackSlotUsage>,\n+}\n+\n+impl<'a> OptimizeContext<'a> {\n+    fn for_context(ctx: &'a mut Context) -> Self {\n+        ctx.flowgraph(); // Compute cfg and domtree.\n+\n+        // Record all stack_addr, stack_load and stack_store instructions.\n+        let mut stack_slot_usage_map = BTreeMap::<OrdStackSlot, StackSlotUsage>::new();\n+\n+        let mut cursor = FuncCursor::new(&mut ctx.func);\n+        while let Some(_ebb) = cursor.next_ebb() {\n+            while let Some(inst) = cursor.next_inst() {\n+                match cursor.func.dfg[inst] {\n+                    InstructionData::StackLoad {\n+                        opcode: Opcode::StackAddr,\n+                        stack_slot,\n+                        offset: _,\n+                    } => {\n+                        stack_slot_usage_map.entry(OrdStackSlot(stack_slot)).or_insert_with(StackSlotUsage::default).stack_addr.insert(inst);\n+                    }\n+                    InstructionData::StackLoad {\n+                        opcode: Opcode::StackLoad,\n+                        stack_slot,\n+                        offset: _,\n+                    } => {\n+                        stack_slot_usage_map.entry(OrdStackSlot(stack_slot)).or_insert_with(StackSlotUsage::default).stack_load.insert(inst);\n+                    }\n+                    InstructionData::StackStore {\n+                        opcode: Opcode::StackStore,\n+                        arg: _,\n+                        stack_slot,\n+                        offset: _,\n+                    } => {\n+                        stack_slot_usage_map.entry(OrdStackSlot(stack_slot)).or_insert_with(StackSlotUsage::default).stack_store.insert(inst);\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+\n+        OptimizeContext {\n+            ctx,\n+            stack_slot_usage_map,\n+        }\n+    }\n+}\n+\n pub(super) fn optimize_function(\n     ctx: &mut Context,\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n     name: String, // FIXME remove\n ) {\n-    ctx.flowgraph(); // Compute cfg and domtree.\n-\n     combine_stack_addr_with_load_store(&mut ctx.func);\n \n-    // Record all stack_addr, stack_load and stack_store instructions.\n-    let mut stack_slot_usage_map = BTreeMap::<OrdStackSlot, StackSlotUsage>::new();\n-\n-    let mut cursor = FuncCursor::new(&mut ctx.func);\n-    while let Some(_ebb) = cursor.next_ebb() {\n-        while let Some(inst) = cursor.next_inst() {\n-            match cursor.func.dfg[inst] {\n-                InstructionData::StackLoad {\n-                    opcode: Opcode::StackAddr,\n-                    stack_slot,\n-                    offset: _,\n-                } => {\n-                    stack_slot_usage_map.entry(OrdStackSlot(stack_slot)).or_insert_with(StackSlotUsage::default).stack_addr.insert(inst);\n-                }\n-                InstructionData::StackLoad {\n-                    opcode: Opcode::StackLoad,\n-                    stack_slot,\n-                    offset: _,\n-                } => {\n-                    stack_slot_usage_map.entry(OrdStackSlot(stack_slot)).or_insert_with(StackSlotUsage::default).stack_load.insert(inst);\n-                }\n-                InstructionData::StackStore {\n-                    opcode: Opcode::StackStore,\n-                    arg: _,\n-                    stack_slot,\n-                    offset: _,\n-                } => {\n-                    stack_slot_usage_map.entry(OrdStackSlot(stack_slot)).or_insert_with(StackSlotUsage::default).stack_store.insert(inst);\n-                }\n-                _ => {}\n-            }\n-        }\n-    }\n+    let mut opt_ctx = OptimizeContext::for_context(ctx);\n \n     // FIXME Repeat following instructions until fixpoint.\n \n-    remove_unused_stack_addr_and_stack_load(&mut ctx.func, &mut stack_slot_usage_map);\n+    remove_unused_stack_addr_and_stack_load(&mut opt_ctx.ctx.func, &mut opt_ctx.stack_slot_usage_map);\n \n-    println!(\"stack slot usage: {:?}\", stack_slot_usage_map);\n+    println!(\"stack slot usage: {:?}\", opt_ctx.stack_slot_usage_map);\n \n-    for (stack_slot, users) in stack_slot_usage_map.iter_mut() {\n+    for (stack_slot, users) in opt_ctx.stack_slot_usage_map.iter_mut() {\n         if users.stack_addr.is_empty().not() {\n             // Stack addr leaked; there may be unknown loads and stores.\n             // FIXME use stacked borrows to optimize\n             continue;\n         }\n \n         for load in users.stack_load.clone().drain() {\n-            let load_ebb = ctx.func.layout.inst_ebb(load).unwrap();\n-            let loaded_value = ctx.func.dfg.inst_results(load)[0];\n-            let loaded_type = ctx.func.dfg.value_type(loaded_value);\n+            let load_ebb = opt_ctx.ctx.func.layout.inst_ebb(load).unwrap();\n+            let loaded_value = opt_ctx.ctx.func.dfg.inst_results(load)[0];\n+            let loaded_type = opt_ctx.ctx.func.dfg.value_type(loaded_value);\n \n+            let ctx = &*opt_ctx.ctx;\n             let potential_stores = users.stack_store.iter().cloned().filter(|&store| {\n                 match spatial_overlap(&ctx.func, load, store) {\n                     SpatialOverlap::No => false, // Can never be the source of the loaded value.\n                     SpatialOverlap::Partial | SpatialOverlap::Full => true,\n                 }\n             }).filter(|&store| {\n-                match temporal_order(&*ctx, load, store) {\n+                match temporal_order(ctx, load, store) {\n                     TemporalOrder::NeverBefore => false, // Can never be the source of the loaded value.\n                     TemporalOrder::MaybeBefore | TemporalOrder::DefinitivelyBefore => true,\n                 }\n@@ -107,25 +124,25 @@ pub(super) fn optimize_function(\n             for &store in &potential_stores {\n                 println!(\n                     \"Potential store -> load forwarding {} -> {} ({:?}, {:?})\",\n-                    ctx.func.dfg.display_inst(store, None),\n-                    ctx.func.dfg.display_inst(load, None),\n-                    spatial_overlap(&ctx.func, store, load),\n-                    temporal_order(&*ctx, store, load),\n+                    opt_ctx.ctx.func.dfg.display_inst(store, None),\n+                    opt_ctx.ctx.func.dfg.display_inst(load, None),\n+                    spatial_overlap(&opt_ctx.ctx.func, store, load),\n+                    temporal_order(&*opt_ctx.ctx, store, load),\n                 );\n             }\n \n             match *potential_stores {\n                 [] => println!(\"[{}] [BUG?] Reading uninitialized memory\", name),\n-                [store] if spatial_overlap(&ctx.func, store, load) == SpatialOverlap::Full && temporal_order(&ctx, store, load) == TemporalOrder::DefinitivelyBefore => {\n+                [store] if spatial_overlap(&opt_ctx.ctx.func, store, load) == SpatialOverlap::Full && temporal_order(&opt_ctx.ctx, store, load) == TemporalOrder::DefinitivelyBefore => {\n                     // Only one store could have been the origin of the value.\n-                    let store_ebb = ctx.func.layout.inst_ebb(store).unwrap();\n-                    let stored_value = ctx.func.dfg.inst_args(store)[0];\n-                    let stored_type = ctx.func.dfg.value_type(stored_value);\n+                    let store_ebb = opt_ctx.ctx.func.layout.inst_ebb(store).unwrap();\n+                    let stored_value = opt_ctx.ctx.func.dfg.inst_args(store)[0];\n+                    let stored_type = opt_ctx.ctx.func.dfg.value_type(stored_value);\n                     if stored_type == loaded_type && store_ebb == load_ebb {\n                         println!(\"Store to load forward {} -> {}\", store, load);\n-                        ctx.func.dfg.detach_results(load);\n-                        ctx.func.dfg.replace(load).nop();\n-                        ctx.func.dfg.change_to_alias(loaded_value, stored_value);\n+                        opt_ctx.ctx.func.dfg.detach_results(load);\n+                        opt_ctx.ctx.func.dfg.replace(load).nop();\n+                        opt_ctx.ctx.func.dfg.change_to_alias(loaded_value, stored_value);\n                         users.stack_load.remove(&load);\n                     }\n                 }\n@@ -134,13 +151,14 @@ pub(super) fn optimize_function(\n         }\n \n         for store in users.stack_store.clone().drain() {\n+            let ctx = &*opt_ctx.ctx;\n             let potential_loads = users.stack_load.iter().cloned().filter(|&load| {\n                 match spatial_overlap(&ctx.func, store, load) {\n                     SpatialOverlap::No => false, // Can never be the source of the loaded value.\n                     SpatialOverlap::Partial | SpatialOverlap::Full => true,\n                 }\n             }).filter(|&load| {\n-                match temporal_order(&*ctx, store, load) {\n+                match temporal_order(ctx, store, load) {\n                     TemporalOrder::NeverBefore => false, // Can never be the source of the loaded value.\n                     TemporalOrder::MaybeBefore | TemporalOrder::DefinitivelyBefore => true,\n                 }\n@@ -149,18 +167,18 @@ pub(super) fn optimize_function(\n             for &load in &potential_loads {\n                 println!(\n                     \"Potential load from store {} <- {} ({:?}, {:?})\",\n-                    ctx.func.dfg.display_inst(load, None),\n-                    ctx.func.dfg.display_inst(store, None),\n+                    opt_ctx.ctx.func.dfg.display_inst(load, None),\n+                    opt_ctx.ctx.func.dfg.display_inst(store, None),\n                     spatial_overlap(&ctx.func, store, load),\n-                    temporal_order(&*ctx, store, load),\n+                    temporal_order(&*opt_ctx.ctx, store, load),\n                 );\n             }\n \n             if potential_loads.is_empty() {\n                 // Never loaded; can safely remove all stores and the stack slot.\n                 // FIXME also remove stores when there is always a next store before a load.\n-                println!(\"[{}] Remove dead stack store {} of {}\", name, ctx.func.dfg.display_inst(store, None), stack_slot.0);\n-                ctx.func.dfg.replace(store).nop();\n+                println!(\"[{}] Remove dead stack store {} of {}\", name, opt_ctx.ctx.func.dfg.display_inst(store, None), stack_slot.0);\n+                opt_ctx.ctx.func.dfg.replace(store).nop();\n                 users.stack_store.remove(&store);\n             }\n         }"}]}