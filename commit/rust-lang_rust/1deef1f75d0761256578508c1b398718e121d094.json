{"sha": "1deef1f75d0761256578508c1b398718e121d094", "node_id": "C_kwDOAAsO6NoAKDFkZWVmMWY3NWQwNzYxMjU2NTc4NTA4YzFiMzk4NzE4ZTEyMWQwOTQ", "commit": {"author": {"name": "the8472", "email": "the8472@users.noreply.github.com", "date": "2021-09-22T17:03:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-22T17:03:21Z"}, "message": "Rollup merge of #89041 - sticnarf:sticnarf/fat-lto-dwarf, r=nagisa\n\nWork around invalid DWARF bugs for fat LTO\n\nThis PR applies the same workaround in #46772 to fat LTO.\n\nIt seems to fix the bug reported in https://github.com/rust-lang/rust/issues/66118#issuecomment-917434036.", "tree": {"sha": "755c9d93e058ad0d3cbb373dcf63c94f219abc49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/755c9d93e058ad0d3cbb373dcf63c94f219abc49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1deef1f75d0761256578508c1b398718e121d094", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhS2HZCRBK7hj4Ov3rIwAAKCgIACS0OTDJXqj/v59bxxRDaLvC\nO2JIQLPPLqcOMG4lklNMrRuzUPAhYirqg7gXyoS5u3FlQFVLqNU1z0Nwe0lmuqWs\nYQkUMOztnkptyghPzga4lsiUth7F1G3DbVn0CXemm+T28inhY+lmZriZZUa1dSUR\ndyY71grz+Km167r9mkW3VCOQ+BwBLDAjXbVZnx3VYH7LKiGVWs05QpurvyYtNGZ+\nyDP6o3c3RXTpoqJkEgXhkH1SQWH6yLUVHFWpLxnGSMLkJktdzCuVgZq33VbTJZ9q\nuG9QX/e6i6dQhGCja1O642aVkm8QtlkKiroumO2vxtYzL1PEN+TvXl0uGWuoXTQ=\n=QuQQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 755c9d93e058ad0d3cbb373dcf63c94f219abc49\nparent 00635511dbc093ae4e4a494c1d54f17397c107b4\nparent d5de680e20def848751cb3c11e1182408112b1d3\nauthor the8472 <the8472@users.noreply.github.com> 1632330201 +0200\ncommitter GitHub <noreply@github.com> 1632330201 +0200\n\nRollup merge of #89041 - sticnarf:sticnarf/fat-lto-dwarf, r=nagisa\n\nWork around invalid DWARF bugs for fat LTO\n\nThis PR applies the same workaround in #46772 to fat LTO.\n\nIt seems to fix the bug reported in https://github.com/rust-lang/rust/issues/66118#issuecomment-917434036.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1deef1f75d0761256578508c1b398718e121d094", "html_url": "https://github.com/rust-lang/rust/commit/1deef1f75d0761256578508c1b398718e121d094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1deef1f75d0761256578508c1b398718e121d094/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00635511dbc093ae4e4a494c1d54f17397c107b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/00635511dbc093ae4e4a494c1d54f17397c107b4", "html_url": "https://github.com/rust-lang/rust/commit/00635511dbc093ae4e4a494c1d54f17397c107b4"}, {"sha": "d5de680e20def848751cb3c11e1182408112b1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5de680e20def848751cb3c11e1182408112b1d3", "html_url": "https://github.com/rust-lang/rust/commit/d5de680e20def848751cb3c11e1182408112b1d3"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "99b30264d09580bc858644f00670d3250d83b659", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1deef1f75d0761256578508c1b398718e121d094/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deef1f75d0761256578508c1b398718e121d094/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=1deef1f75d0761256578508c1b398718e121d094", "patch": "@@ -325,6 +325,20 @@ fn fat_lto(\n         drop(linker);\n         save_temp_bitcode(&cgcx, &module, \"lto.input\");\n \n+        // Fat LTO also suffers from the invalid DWARF issue similar to Thin LTO.\n+        // Here we rewrite all `DICompileUnit` pointers if there is only one `DICompileUnit`.\n+        // This only works around the problem when codegen-units = 1.\n+        // Refer to the comments in the `optimize_thin_module` function for more details.\n+        let mut cu1 = ptr::null_mut();\n+        let mut cu2 = ptr::null_mut();\n+        unsafe { llvm::LLVMRustLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2) };\n+        if !cu2.is_null() {\n+            let _timer =\n+                cgcx.prof.generic_activity_with_arg(\"LLVM_fat_lto_patch_debuginfo\", &*module.name);\n+            unsafe { llvm::LLVMRustLTOPatchDICompileUnit(llmod, cu1) };\n+            save_temp_bitcode(cgcx, &module, \"fat-lto-after-patch\");\n+        }\n+\n         // Internalize everything below threshold to help strip out more modules and such.\n         unsafe {\n             let ptr = symbols_below_threshold.as_ptr();\n@@ -748,7 +762,7 @@ pub unsafe fn optimize_thin_module(\n         // an error.\n         let mut cu1 = ptr::null_mut();\n         let mut cu2 = ptr::null_mut();\n-        llvm::LLVMRustThinLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2);\n+        llvm::LLVMRustLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2);\n         if !cu2.is_null() {\n             let msg = \"multiple source DICompileUnits found\";\n             return Err(write::llvm_err(&diag_handler, msg));\n@@ -847,7 +861,7 @@ pub unsafe fn optimize_thin_module(\n             let _timer = cgcx\n                 .prof\n                 .generic_activity_with_arg(\"LLVM_thin_lto_patch_debuginfo\", thin_module.name());\n-            llvm::LLVMRustThinLTOPatchDICompileUnit(llmod, cu1);\n+            llvm::LLVMRustLTOPatchDICompileUnit(llmod, cu1);\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-patch\");\n         }\n "}, {"sha": "d8c2a345fb03cc5771214aa5806be877c8aa5ab9", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1deef1f75d0761256578508c1b398718e121d094/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deef1f75d0761256578508c1b398718e121d094/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=1deef1f75d0761256578508c1b398718e121d094", "patch": "@@ -2377,12 +2377,8 @@ extern \"C\" {\n         len: usize,\n         out_len: &mut usize,\n     ) -> *const u8;\n-    pub fn LLVMRustThinLTOGetDICompileUnit(\n-        M: &Module,\n-        CU1: &mut *mut c_void,\n-        CU2: &mut *mut c_void,\n-    );\n-    pub fn LLVMRustThinLTOPatchDICompileUnit(M: &Module, CU: *mut c_void);\n+    pub fn LLVMRustLTOGetDICompileUnit(M: &Module, CU1: &mut *mut c_void, CU2: &mut *mut c_void);\n+    pub fn LLVMRustLTOPatchDICompileUnit(M: &Module, CU: *mut c_void);\n \n     pub fn LLVMRustLinkerNew(M: &'a Module) -> &'a mut Linker<'a>;\n     pub fn LLVMRustLinkerAdd("}, {"sha": "1a0cfd5888593799f9d228380476cdaee2a51e68", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1deef1f75d0761256578508c1b398718e121d094/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1deef1f75d0761256578508c1b398718e121d094/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=1deef1f75d0761256578508c1b398718e121d094", "patch": "@@ -1747,7 +1747,7 @@ LLVMRustGetBitcodeSliceFromObjectData(const char *data,\n // Rewrite all `DICompileUnit` pointers to the `DICompileUnit` specified. See\n // the comment in `back/lto.rs` for why this exists.\n extern \"C\" void\n-LLVMRustThinLTOGetDICompileUnit(LLVMModuleRef Mod,\n+LLVMRustLTOGetDICompileUnit(LLVMModuleRef Mod,\n                                 DICompileUnit **A,\n                                 DICompileUnit **B) {\n   Module *M = unwrap(Mod);\n@@ -1765,7 +1765,7 @@ LLVMRustThinLTOGetDICompileUnit(LLVMModuleRef Mod,\n // Rewrite all `DICompileUnit` pointers to the `DICompileUnit` specified. See\n // the comment in `back/lto.rs` for why this exists.\n extern \"C\" void\n-LLVMRustThinLTOPatchDICompileUnit(LLVMModuleRef Mod, DICompileUnit *Unit) {\n+LLVMRustLTOPatchDICompileUnit(LLVMModuleRef Mod, DICompileUnit *Unit) {\n   Module *M = unwrap(Mod);\n \n   // If the original source module didn't have a `DICompileUnit` then try to"}]}