{"sha": "29ab7d8db02b63464963905612b59a8f745bd2b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YWI3ZDhkYjAyYjYzNDY0OTYzOTA1NjEyYjU5YThmNzQ1YmQyYjY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-04T09:07:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-04T09:07:20Z"}, "message": "Rollup merge of #49577 - tmccombs:string-splice-stabilize, r=TimNN\n\nStabilize String::replace_range\n\nFixes #44643", "tree": {"sha": "c3f9a4d69c6e9952d21b66a756a34342249eb2a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f9a4d69c6e9952d21b66a756a34342249eb2a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29ab7d8db02b63464963905612b59a8f745bd2b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxJXICRBK7hj4Ov3rIwAAdHIIAGnKNeYiqDA1UYezwc/fHB5i\ngNtTtOn/hdQi3bpp6wFbPZ7IKUsuz8jySZIpsp+/flOq4BU6dWu2Wsgs+stFbzlA\nMjBRWNV/STwuTSo//kAfzTZNevVEHEzh010mTp83TMEt2zQdvgKnjl9nvK7nAdP+\nV3pPU1ozPo2roZSzRJ/UwF02nMQJZGXR95C2RsabDgp4pBnrwQz5tlkbCiMQQKR/\nv4ZoP717N9k0QFjk+yOawNgnUYuVdAHIVHESGvSp0r8j0f7oPGrhjzePIjQhs6J2\nAPn1nWjDoGRddJOB72fuVDQM/Ldl2DESVXUyszQOlgoYGgaI622k2fqGP44/xpk=\n=TeqE\n-----END PGP SIGNATURE-----\n", "payload": "tree c3f9a4d69c6e9952d21b66a756a34342249eb2a0\nparent 7dad49f9069b1678aa92959984f9c947308473da\nparent e75c6a741eded857b2ab06b63ebd3848d9203343\nauthor kennytm <kennytm@gmail.com> 1522832840 +0200\ncommitter GitHub <noreply@github.com> 1522832840 +0200\n\nRollup merge of #49577 - tmccombs:string-splice-stabilize, r=TimNN\n\nStabilize String::replace_range\n\nFixes #44643\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29ab7d8db02b63464963905612b59a8f745bd2b6", "html_url": "https://github.com/rust-lang/rust/commit/29ab7d8db02b63464963905612b59a8f745bd2b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29ab7d8db02b63464963905612b59a8f745bd2b6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dad49f9069b1678aa92959984f9c947308473da", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dad49f9069b1678aa92959984f9c947308473da", "html_url": "https://github.com/rust-lang/rust/commit/7dad49f9069b1678aa92959984f9c947308473da"}, {"sha": "e75c6a741eded857b2ab06b63ebd3848d9203343", "url": "https://api.github.com/repos/rust-lang/rust/commits/e75c6a741eded857b2ab06b63ebd3848d9203343", "html_url": "https://github.com/rust-lang/rust/commit/e75c6a741eded857b2ab06b63ebd3848d9203343"}], "stats": {"total": 63, "additions": 20, "deletions": 43}, "files": [{"sha": "2e4bb1a5257c94b76899fc56324825666a4542be", "filename": "src/doc/unstable-book/src/library-features/splice.md", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7dad49f9069b1678aa92959984f9c947308473da/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md", "raw_url": "https://github.com/rust-lang/rust/raw/7dad49f9069b1678aa92959984f9c947308473da/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md?ref=7dad49f9069b1678aa92959984f9c947308473da", "patch": "@@ -1,22 +0,0 @@\n-# `splice`\n-\n-The tracking issue for this feature is: [#44643]\n-\n-[#44643]: https://github.com/rust-lang/rust/issues/44643\n-\n-------------------------\n-\n-The `splice()` method on `String` allows you to replace a range\n-of values in a string with another range of values.\n-\n-A simple example:\n-\n-```rust\n-#![feature(splice)]\n-let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n-let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n-\n-// Replace the range up until the \u03b2 from the string\n-s.splice(..beta_offset, \"\u0391 is capital alpha; \");\n-assert_eq!(s, \"\u0391 is capital alpha; \u03b2 is beta\");\n-```"}, {"sha": "b95aae02894ed758e1ba8acb86b716daceeeb673", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29ab7d8db02b63464963905612b59a8f745bd2b6/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ab7d8db02b63464963905612b59a8f745bd2b6/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=29ab7d8db02b63464963905612b59a8f745bd2b6", "patch": "@@ -1517,7 +1517,7 @@ impl String {\n         }\n     }\n \n-    /// Creates a splicing iterator that removes the specified range in the string,\n+    /// Removes the specified range in the string,\n     /// and replaces it with the given string.\n     /// The given string doesn't need to be the same length as the range.\n     ///\n@@ -1537,21 +1537,20 @@ impl String {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(splice)]\n     /// let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n     /// let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n     ///\n     /// // Replace the range up until the \u03b2 from the string\n-    /// s.splice(..beta_offset, \"\u0391 is capital alpha; \");\n+    /// s.replace_range(..beta_offset, \"\u0391 is capital alpha; \");\n     /// assert_eq!(s, \"\u0391 is capital alpha; \u03b2 is beta\");\n     /// ```\n-    #[unstable(feature = \"splice\", reason = \"recently added\", issue = \"44643\")]\n-    pub fn splice<R>(&mut self, range: R, replace_with: &str)\n+    #[stable(feature = \"splice\", since = \"1.27.0\")]\n+    pub fn replace_range<R>(&mut self, range: R, replace_with: &str)\n         where R: RangeBounds<usize>\n     {\n         // Memory safety\n         //\n-        // The String version of Splice does not have the memory safety issues\n+        // Replace_range does not have the memory safety issues of a vector Splice.\n         // of the vector version. The data is just plain bytes.\n \n         match range.start() {"}, {"sha": "cb4a17a22d8a4aa867a2676ff55c53eb06f51d64", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/29ab7d8db02b63464963905612b59a8f745bd2b6/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ab7d8db02b63464963905612b59a8f745bd2b6/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=29ab7d8db02b63464963905612b59a8f745bd2b6", "patch": "@@ -443,53 +443,53 @@ fn test_drain() {\n }\n \n #[test]\n-fn test_splice() {\n+fn test_replace_range() {\n     let mut s = \"Hello, world!\".to_owned();\n-    s.splice(7..12, \"\u4e16\u754c\");\n+    s.replace_range(7..12, \"\u4e16\u754c\");\n     assert_eq!(s, \"Hello, \u4e16\u754c!\");\n }\n \n #[test]\n #[should_panic]\n-fn test_splice_char_boundary() {\n+fn test_replace_range_char_boundary() {\n     let mut s = \"Hello, \u4e16\u754c!\".to_owned();\n-    s.splice(..8, \"\");\n+    s.replace_range(..8, \"\");\n }\n \n #[test]\n-fn test_splice_inclusive_range() {\n+fn test_replace_range_inclusive_range() {\n     let mut v = String::from(\"12345\");\n-    v.splice(2..=3, \"789\");\n+    v.replace_range(2..=3, \"789\");\n     assert_eq!(v, \"127895\");\n-    v.splice(1..=2, \"A\");\n+    v.replace_range(1..=2, \"A\");\n     assert_eq!(v, \"1A895\");\n }\n \n #[test]\n #[should_panic]\n-fn test_splice_out_of_bounds() {\n+fn test_replace_range_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n-    s.splice(5..6, \"789\");\n+    s.replace_range(5..6, \"789\");\n }\n \n #[test]\n #[should_panic]\n-fn test_splice_inclusive_out_of_bounds() {\n+fn test_replace_range_inclusive_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n-    s.splice(5..=5, \"789\");\n+    s.replace_range(5..=5, \"789\");\n }\n \n #[test]\n-fn test_splice_empty() {\n+fn test_replace_range_empty() {\n     let mut s = String::from(\"12345\");\n-    s.splice(1..2, \"\");\n+    s.replace_range(1..2, \"\");\n     assert_eq!(s, \"1345\");\n }\n \n #[test]\n-fn test_splice_unbounded() {\n+fn test_replace_range_unbounded() {\n     let mut s = String::from(\"12345\");\n-    s.splice(.., \"\");\n+    s.replace_range(.., \"\");\n     assert_eq!(s, \"\");\n }\n "}]}