{"sha": "42f95d055c2f22078f5c94c0d0ca229e1561ccb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZjk1ZDA1NWMyZjIyMDc4ZjVjOTRjMGQwY2EyMjllMTU2MWNjYjg=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-05T02:03:21Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-19T00:31:41Z"}, "message": "Allow constant expressions in [Type * n].", "tree": {"sha": "390c70d8758494f9e974582f90145bf3719e7aec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/390c70d8758494f9e974582f90145bf3719e7aec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42f95d055c2f22078f5c94c0d0ca229e1561ccb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42f95d055c2f22078f5c94c0d0ca229e1561ccb8", "html_url": "https://github.com/rust-lang/rust/commit/42f95d055c2f22078f5c94c0d0ca229e1561ccb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42f95d055c2f22078f5c94c0d0ca229e1561ccb8/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78f2e2ac577f9c47cd58af52d3bcd496254545d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78f2e2ac577f9c47cd58af52d3bcd496254545d", "html_url": "https://github.com/rust-lang/rust/commit/e78f2e2ac577f9c47cd58af52d3bcd496254545d"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "2a70ba7d4c12922a412f69a8901b8a3cdc4727ef", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/42f95d055c2f22078f5c94c0d0ca229e1561ccb8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f95d055c2f22078f5c94c0d0ca229e1561ccb8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=42f95d055c2f22078f5c94c0d0ca229e1561ccb8", "patch": "@@ -54,6 +54,7 @@\n \n use core::prelude::*;\n \n+use middle::const_eval;\n use middle::ty::{arg, field, substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n@@ -412,9 +413,29 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n           }\n         }\n       }\n-      ast::ty_fixed_length_vec(a_mt, u) => {\n-        ty::mk_evec(tcx, ast_mt_to_mt(self, rscope, a_mt),\n-                    ty::vstore_fixed(u))\n+      ast::ty_fixed_length_vec(a_mt, e) => {\n+        match const_eval::eval_const_expr_partial(tcx, e) {\n+          Ok(ref r) => {\n+            match *r {\n+              const_eval::const_int(i) =>\n+                ty::mk_evec(tcx, ast_mt_to_mt(self, rscope, a_mt),\n+                            ty::vstore_fixed(i as uint)),\n+              const_eval::const_uint(i) =>\n+                ty::mk_evec(tcx, ast_mt_to_mt(self, rscope, a_mt),\n+                            ty::vstore_fixed(i as uint)),\n+              _ => {\n+                tcx.sess.span_fatal(\n+                    ast_ty.span, ~\"expected constant expr for vector length\");\n+              }\n+            }\n+          }\n+          Err(ref r) => {\n+            tcx.sess.span_fatal(\n+                ast_ty.span,\n+                fmt!(\"expected constant expr for vector length: %s\",\n+                     *r));\n+          }\n+        }\n       }\n       ast::ty_infer => {\n         // ty_infer should only appear as the type of arguments or return"}, {"sha": "e2e750e8903fbc8263c2cc9cc39dea6dfc3d72d3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42f95d055c2f22078f5c94c0d0ca229e1561ccb8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f95d055c2f22078f5c94c0d0ca229e1561ccb8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=42f95d055c2f22078f5c94c0d0ca229e1561ccb8", "patch": "@@ -916,7 +916,7 @@ pub enum ty_ {\n     ty_box(mt),\n     ty_uniq(mt),\n     ty_vec(mt),\n-    ty_fixed_length_vec(mt, uint),\n+    ty_fixed_length_vec(mt, @expr),\n     ty_ptr(mt),\n     ty_rptr(Option<@Lifetime>, mt),\n     ty_closure(@TyClosure),"}, {"sha": "c7e93635d4c76c866df4357e571971aef5788325", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/42f95d055c2f22078f5c94c0d0ca229e1561ccb8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f95d055c2f22078f5c94c0d0ca229e1561ccb8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=42f95d055c2f22078f5c94c0d0ca229e1561ccb8", "patch": "@@ -642,7 +642,8 @@ pub impl Parser {\n                 self.obsolete(*self.last_span, ObsoleteMutVector);\n             }\n \n-            // Parse the `* 3` in `[ int * 3 ]`\n+            // Parse the `* e` in `[ int * e ]`\n+            // where `e` is a const expression\n             let t = match self.maybe_parse_fixed_vstore_with_star() {\n                 None => ty_vec(mt),\n                 Some(suffix) => ty_fixed_length_vec(mt, suffix)\n@@ -814,23 +815,9 @@ pub impl Parser {\n         })\n     }\n \n-    fn maybe_parse_fixed_vstore_with_star(&self) -> Option<uint> {\n+    fn maybe_parse_fixed_vstore_with_star(&self) -> Option<@ast::expr> {\n         if self.eat(&token::BINOP(token::STAR)) {\n-            match *self.token {\n-                token::LIT_INT_UNSUFFIXED(i) if i >= 0i64 => {\n-                    self.bump();\n-                    Some(i as uint)\n-                }\n-                _ => {\n-                    self.fatal(\n-                        fmt!(\n-                            \"expected integral vector length \\\n-                            but found `%s`\",\n-                            token_to_str(self.reader, &copy *self.token)\n-                        )\n-                    );\n-                }\n-            }\n+            Some(self.parse_expr())\n         } else {\n             None\n         }"}, {"sha": "ab7fe8dc063bd1fc724bd78e3183e6ecf28bf812", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42f95d055c2f22078f5c94c0d0ca229e1561ccb8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f95d055c2f22078f5c94c0d0ca229e1561ccb8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=42f95d055c2f22078f5c94c0d0ca229e1561ccb8", "patch": "@@ -425,7 +425,7 @@ pub fn print_type_ex(s: @ps, &&ty: @ast::Ty, print_colons: bool) {\n         }\n         print_type(s, mt.ty);\n         word(s.s, ~\" * \");\n-        word(s.s, fmt!(\"%u\", v));\n+        word(s.s, fmt!(\"%?\", v));\n         word(s.s, ~\"]\");\n       }\n       ast::ty_mac(_) => {\n@@ -1015,7 +1015,7 @@ pub fn print_mac(s: @ps, m: ast::mac) {\n \n pub fn print_vstore(s: @ps, t: ast::vstore) {\n     match t {\n-        ast::vstore_fixed(Some(i)) => word(s.s, fmt!(\"%u\", i)),\n+        ast::vstore_fixed(Some(i)) => word(s.s, fmt!(\"%?\", i)),\n         ast::vstore_fixed(None) => word(s.s, ~\"_\"),\n         ast::vstore_uniq => word(s.s, ~\"~\"),\n         ast::vstore_box => word(s.s, ~\"@\"),\n@@ -1028,7 +1028,7 @@ pub fn print_vstore(s: @ps, t: ast::vstore) {\n \n pub fn print_expr_vstore(s: @ps, t: ast::expr_vstore) {\n     match t {\n-      ast::expr_vstore_fixed(Some(i)) => word(s.s, fmt!(\"%u\", i)),\n+      ast::expr_vstore_fixed(Some(i)) => word(s.s, fmt!(\"%?\", i)),\n       ast::expr_vstore_fixed(None) => word(s.s, ~\"_\"),\n       ast::expr_vstore_uniq => word(s.s, ~\"~\"),\n       ast::expr_vstore_box => word(s.s, ~\"@\"),"}]}