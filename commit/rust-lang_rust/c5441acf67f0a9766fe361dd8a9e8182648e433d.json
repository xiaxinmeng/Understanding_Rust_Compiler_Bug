{"sha": "c5441acf67f0a9766fe361dd8a9e8182648e433d", "node_id": "C_kwDOAAsO6NoAKGM1NDQxYWNmNjdmMGE5NzY2ZmUzNjFkZDhhOWU4MTgyNjQ4ZTQzM2Q", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-07-27T21:50:11Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-12T23:55:57Z"}, "message": "Call destructors when dyn* object goes out of scope", "tree": {"sha": "edb39df8961a2a467dea0ab8731121ef1b28369c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edb39df8961a2a467dea0ab8731121ef1b28369c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5441acf67f0a9766fe361dd8a9e8182648e433d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5441acf67f0a9766fe361dd8a9e8182648e433d", "html_url": "https://github.com/rust-lang/rust/commit/c5441acf67f0a9766fe361dd8a9e8182648e433d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5441acf67f0a9766fe361dd8a9e8182648e433d/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "549c105bb365e14cb132b29a94126715158c5cfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/549c105bb365e14cb132b29a94126715158c5cfa", "html_url": "https://github.com/rust-lang/rust/commit/549c105bb365e14cb132b29a94126715158c5cfa"}], "stats": {"total": 77, "additions": 59, "deletions": 18}, "files": [{"sha": "cae46ebd2e9a7c366ab173be7226f136bb3cb05b", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=c5441acf67f0a9766fe361dd8a9e8182648e433d", "patch": "@@ -86,15 +86,14 @@ fn expect_dyn_trait_in_self<'tcx>(ty: Ty<'tcx>) -> ty::PolyExistentialTraitRef<'\n /// The `trait_ref` encodes the erased self type. Hence if we are\n /// making an object `Foo<dyn Trait>` from a value of type `Foo<T>`, then\n /// `trait_ref` would map `T: Trait`.\n+#[instrument(level = \"debug\", skip(cx))]\n pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     cx: &Cx,\n     ty: Ty<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Cx::Value {\n     let tcx = cx.tcx();\n \n-    debug!(\"get_vtable(ty={:?}, trait_ref={:?})\", ty, trait_ref);\n-\n     // Check the cache.\n     if let Some(&val) = cx.vtables().borrow().get(&(ty, trait_ref)) {\n         return val;"}, {"sha": "438bb133fd1dc39c06e12c1c8dffce0be8cc0eb8", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=c5441acf67f0a9766fe361dd8a9e8182648e433d", "patch": "@@ -16,7 +16,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, AssertKind, SwitchTargets};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n-use rustc_middle::ty::{self, Instance, Ty, TypeVisitable, TraitObjectRepresentation};\n+use rustc_middle::ty::{self, Instance, TraitObjectRepresentation, Ty, TypeVisitable};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n use rustc_symbol_mangling::typeid::typeid_for_fnabi;\n@@ -451,7 +451,27 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // (data, vtable)          // an equivalent Rust `*mut dyn Trait`\n                 //\n                 // SO THEN WE CAN USE THE ABOVE CODE.\n-                todo!()\n+                let virtual_drop = Instance {\n+                    def: ty::InstanceDef::Virtual(drop_fn.def_id(), 0),\n+                    substs: drop_fn.substs,\n+                };\n+                debug!(\"ty = {:?}\", ty);\n+                debug!(\"drop_fn = {:?}\", drop_fn);\n+                debug!(\"args = {:?}\", args);\n+                let fn_abi = bx.fn_abi_of_instance(virtual_drop, ty::List::empty());\n+                let data = args[0];\n+                let data_ty = bx.cx().backend_type(place.layout);\n+                let vtable_ptr =\n+                    bx.gep(data_ty, data, &[bx.cx().const_i32(0), bx.cx().const_i32(1)]);\n+                let vtable = bx.load(bx.type_i8p(), vtable_ptr, abi::Align::ONE);\n+                // Truncate vtable off of args list\n+                args = &args[..1];\n+                debug!(\"args' = {:?}\", args);\n+                (\n+                    meth::VirtualIndex::from_index(ty::COMMON_VTABLE_ENTRIES_DROPINPLACE)\n+                        .get_fn(&mut bx, vtable, ty, &fn_abi),\n+                    fn_abi,\n+                )\n             }\n             _ => (bx.get_fn_addr(drop_fn), bx.fn_abi_of_instance(drop_fn, ty::List::empty())),\n         };"}, {"sha": "d68a89fe793503af8b2984302c665f172d5b3810", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=c5441acf67f0a9766fe361dd8a9e8182648e433d", "patch": "@@ -4,13 +4,15 @@ use super::{FunctionCx, LocalRef};\n \n use crate::base;\n use crate::common::{self, IntPredicate};\n+use crate::meth::get_vtable;\n use crate::traits::*;\n use crate::MemFlags;\n \n use rustc_middle::mir;\n use rustc_middle::mir::Operand;\n use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::TraitObjectRepresentation;\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n \n@@ -271,14 +273,19 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             bug!(\"unexpected non-pair operand\");\n                         }\n                     }\n-                    #[allow(unreachable_code, unused)] // FIXME: remove this\n                     mir::CastKind::DynStar => {\n                         let data = match operand.val {\n                             OperandValue::Ref(_, _, _) => todo!(),\n-                            OperandValue::Immediate(_) => todo!(),\n+                            OperandValue::Immediate(v) => v,\n                             OperandValue::Pair(_, _) => todo!(),\n                         };\n-                        let vtable = todo!();\n+                        // FIXME: find the real vtable!\n+                        let trait_ref = if let ty::Dynamic(data, _, TraitObjectRepresentation::Sized) = cast.ty.kind() {\n+                            data.principal()\n+                        } else {\n+                            bug!(\"Only valid to do a DynStar cast into a DynStar type\")\n+                        };\n+                        let vtable = get_vtable(bx.cx(), source.ty(self.mir, bx.tcx()), trait_ref);\n                         OperandValue::Pair(data, vtable)\n                     }\n                     mir::CastKind::Pointer("}, {"sha": "240bead5494df20b7a41623471edf764d87434dc", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=c5441acf67f0a9766fe361dd8a9e8182648e433d", "patch": "@@ -2751,6 +2751,7 @@ impl<'tcx> ty::Instance<'tcx> {\n     // for `Instance` (e.g. typeck would use `Ty::fn_sig` instead),\n     // or should go through `FnAbi` instead, to avoid losing any\n     // adjustments `fn_abi_of_instance` might be performing.\n+    #[tracing::instrument(level = \"debug\", skip(tcx, param_env))]\n     fn fn_sig_for_fn_abi(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -2897,6 +2898,7 @@ impl<'tcx> ty::Instance<'tcx> {\n /// with `-Cpanic=abort` will look like they can't unwind when in fact they\n /// might (from a foreign exception or similar).\n #[inline]\n+#[tracing::instrument(level = \"debug\", skip(tcx))]\n pub fn fn_can_unwind<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: Option<DefId>, abi: SpecAbi) -> bool {\n     if let Some(did) = fn_def_id {\n         // Special attribute for functions which can't unwind.\n@@ -3113,6 +3115,7 @@ pub trait FnAbiOf<'tcx>: FnAbiOfHelpers<'tcx> {\n     /// NB: that includes virtual calls, which are represented by \"direct calls\"\n     /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).\n     #[inline]\n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn fn_abi_of_instance(\n         &self,\n         instance: ty::Instance<'tcx>,\n@@ -3259,6 +3262,10 @@ pub fn adjust_for_rust_scalar<'tcx>(\n impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     // FIXME(eddyb) perhaps group the signature/type-containing (or all of them?)\n     // arguments of this method, into a separate `struct`.\n+    #[tracing::instrument(\n+        level = \"debug\",\n+        skip(self, caller_location, fn_def_id, force_thin_self_ptr)\n+    )]\n     fn fn_abi_new_uncached(\n         &self,\n         sig: ty::PolyFnSig<'tcx>,\n@@ -3268,8 +3275,6 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // FIXME(eddyb) replace this with something typed, like an `enum`.\n         force_thin_self_ptr: bool,\n     ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n-        debug!(\"fn_abi_new_uncached({:?}, {:?})\", sig, extra_args);\n-\n         let sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, sig);\n \n         let conv = conv_from_spec_abi(self.tcx(), sig.abi);\n@@ -3312,6 +3317,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         let rust_abi = matches!(sig.abi, RustIntrinsic | PlatformIntrinsic | Rust | RustCall);\n \n         let arg_of = |ty: Ty<'tcx>, arg_idx: Option<usize>| -> Result<_, FnAbiError<'tcx>> {\n+            let span = tracing::debug_span!(\"arg_of\");\n+            let _entered = span.enter();\n             let is_return = arg_idx.is_none();\n \n             let layout = self.layout_of(ty)?;\n@@ -3368,6 +3375,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         Ok(self.tcx.arena.alloc(fn_abi))\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn fn_abi_adjust_for_abi(\n         &self,\n         fn_abi: &mut FnAbi<'tcx, Ty<'tcx>>,\n@@ -3442,6 +3450,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     }\n }\n \n+#[tracing::instrument(level = \"debug\", skip(cx))]\n fn make_thin_self_ptr<'tcx>(\n     cx: &(impl HasTyCtxt<'tcx> + HasParamEnv<'tcx>),\n     layout: TyAndLayout<'tcx>,\n@@ -3453,7 +3462,7 @@ fn make_thin_self_ptr<'tcx>(\n         tcx.mk_mut_ptr(layout.ty)\n     } else {\n         match layout.abi {\n-            Abi::ScalarPair(..) => (),\n+            Abi::ScalarPair(..) | Abi::Scalar(..) => (),\n             _ => bug!(\"receiver type has unsupported layout: {:?}\", layout),\n         }\n "}, {"sha": "9db5a2894843ca3ebf1ed691fb52f3ce16104675", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=c5441acf67f0a9766fe361dd8a9e8182648e433d", "patch": "@@ -36,6 +36,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// This should only be used outside of type inference. For example,\n     /// it assumes that normalization will succeed.\n+    #[tracing::instrument(level = \"debug\", skip(self, param_env))]\n     pub fn normalize_erasing_regions<T>(self, param_env: ty::ParamEnv<'tcx>, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n@@ -100,6 +101,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// N.B., currently, higher-ranked type bounds inhibit\n     /// normalization. Therefore, each time we erase them in\n     /// codegen, we need to normalize the contents.\n+    #[tracing::instrument(level = \"debug\", skip(self, param_env))]\n     pub fn normalize_erasing_late_bound_regions<T>(\n         self,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "98bdaf0bc62e262275065d5090f10caf0a3bd8a7", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=c5441acf67f0a9766fe361dd8a9e8182648e433d", "patch": "@@ -216,10 +216,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n                 let from_ty = CastTy::from_ty(ty);\n                 let cast_ty = CastTy::from_ty(expr.ty);\n-                debug!(\n-                    \"ExprKind::Cast from_ty={from_ty:?}, cast_ty={:?}/{cast_ty:?}\",\n-                     expr.ty,\n-                );\n+                debug!(\"ExprKind::Cast from_ty={from_ty:?}, cast_ty={:?}/{cast_ty:?}\", expr.ty,);\n                 let cast_kind = match (from_ty, cast_ty) {\n                     (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n                         CastKind::PointerExposeAddress"}, {"sha": "8b318d5e249ae29cc0f945ff09cb3e4fc6ffb976", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5441acf67f0a9766fe361dd8a9e8182648e433d/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=c5441acf67f0a9766fe361dd8a9e8182648e433d", "patch": "@@ -189,7 +189,8 @@ use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{\n-    self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitable, VtblEntry,\n+    self, GenericParamDefKind, Instance, TraitObjectRepresentation, Ty, TyCtxt, TypeFoldable,\n+    TypeVisitable, VtblEntry,\n };\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n@@ -689,7 +690,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 mir::CastKind::Pointer(PointerCast::Unsize),\n                 ref operand,\n                 target_ty,\n-            ) => {\n+            )\n+            | mir::Rvalue::Cast(mir::CastKind::DynStar, ref operand, target_ty) => {\n                 let target_ty = self.monomorphize(target_ty);\n                 let source_ty = operand.ty(self.body, self.tcx);\n                 let source_ty = self.monomorphize(source_ty);\n@@ -698,7 +700,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 // This could also be a different Unsize instruction, like\n                 // from a fixed sized array to a slice. But we are only\n                 // interested in things that produce a vtable.\n-                if target_ty.is_trait() && !source_ty.is_trait() {\n+                if (target_ty.is_trait() || target_ty.is_dyn_star()) && !source_ty.is_trait() {\n                     create_mono_items_for_vtable_methods(\n                         self.tcx,\n                         target_ty,\n@@ -1112,6 +1114,11 @@ fn find_vtable_types_for_unsizing<'tcx>(\n             ptr_vtable(source_ty.boxed_ty(), target_ty.boxed_ty())\n         }\n \n+        // T as dyn* Trait\n+        (_, &ty::Dynamic(_, _, TraitObjectRepresentation::Sized)) => {\n+            ptr_vtable(source_ty, target_ty)\n+        }\n+\n         (&ty::Adt(source_adt_def, source_substs), &ty::Adt(target_adt_def, target_substs)) => {\n             assert_eq!(source_adt_def, target_adt_def);\n "}, {"sha": "b0b8f07abe58e18064b6d0e3e513b6fc6770c143", "filename": "src/test/ui/dyn-star/make-dyn-star.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5441acf67f0a9766fe361dd8a9e8182648e433d/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5441acf67f0a9766fe361dd8a9e8182648e433d/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs?ref=c5441acf67f0a9766fe361dd8a9e8182648e433d", "patch": "@@ -4,7 +4,7 @@\n use std::fmt::Debug;\n \n fn make_dyn_star(i: usize) {\n-    let dyn_i: dyn* Debug = i as dyn* Debug;\n+    let _dyn_i: dyn* Debug = i as dyn* Debug;\n }\n \n fn main() {"}]}