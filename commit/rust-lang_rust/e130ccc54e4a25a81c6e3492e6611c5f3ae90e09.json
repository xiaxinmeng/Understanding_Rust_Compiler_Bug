{"sha": "e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMzBjY2M1NGU0YTI1YTgxYzZlMzQ5MmU2NjExYzVmM2FlOTBlMDk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-09-23T12:46:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-09-23T12:46:15Z"}, "message": "Fix for upstream changes", "tree": {"sha": "9f7f63e56551a5f0a03a0ccfaef86061c1d71294", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f7f63e56551a5f0a03a0ccfaef86061c1d71294"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "html_url": "https://github.com/rust-lang/rust/commit/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d703552325edc118cb6bb2fbea1be3dceab7632c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d703552325edc118cb6bb2fbea1be3dceab7632c", "html_url": "https://github.com/rust-lang/rust/commit/d703552325edc118cb6bb2fbea1be3dceab7632c"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "45396a45a4c25f54edf7f350b0a7fbba4368fa8e", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "patch": "@@ -1785,7 +1785,6 @@ dependencies = [\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_incremental 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "ec4cec331d0c4b4152938bccc969e200fa9b7a9e", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "patch": "@@ -94,6 +94,8 @@ use syntax::ast;\n \n use mir::lvalue::Alignment;\n \n+pub use rustc_trans_utils::find_exported_symbols;\n+\n pub struct StatRecorder<'a, 'tcx: 'a> {\n     ccx: &'a CrateContext<'a, 'tcx>,\n     name: Option<String>,\n@@ -887,7 +889,6 @@ fn iter_globals(llmod: llvm::ModuleRef) -> ValueIter {\n pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              rx: mpsc::Receiver<Box<Any + Send>>)\n                              -> OngoingCrateTranslation {\n-    use rustc_trans_utils::find_exported_symbols;\n \n     check_for_rustc_errors_attr(tcx);\n "}, {"sha": "8a2c478cea0615aab936703d3239029eee78bbc1", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "patch": "@@ -138,12 +138,13 @@ mod type_;\n mod type_of;\n mod value;\n \n-use rustc::ty::{self, TyCtxt, CrateAnalysis};\n+use std::sync::mpsc;\n+use std::any::Any;\n+use rustc::ty::{self, TyCtxt};\n use rustc::session::Session;\n use rustc::session::config::OutputFilenames;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n-use rustc_incremental::IncrementalHashesMap;\n \n pub struct LlvmTransCrate(());\n \n@@ -162,17 +163,19 @@ impl rustc_trans_utils::trans_crate::TransCrate for LlvmTransCrate {\n         box metadata::LlvmMetadataLoader\n     }\n \n-    fn provide(providers: &mut ty::maps::Providers) {\n-        back::symbol_names::provide(providers);\n+    fn provide_local(providers: &mut ty::maps::Providers) {\n+        provide_local(providers);\n+    }\n+\n+    fn provide_extern(providers: &mut ty::maps::Providers) {\n+        provide_extern(providers);\n     }\n \n     fn trans_crate<'a, 'tcx>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        analysis: CrateAnalysis,\n-        incr_hashes_map: IncrementalHashesMap,\n-        output_filenames: &OutputFilenames\n+        rx: mpsc::Receiver<Box<Any + Send>>\n     ) -> Self::OngoingCrateTranslation {\n-        base::trans_crate(tcx, analysis, incr_hashes_map, output_filenames)\n+        base::trans_crate(tcx, rx)\n     }\n \n     fn join_trans("}, {"sha": "bedbea0068874dd848b195ae9645e87cd51465ac", "filename": "src/librustc_trans_utils/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2FCargo.toml?ref=e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "patch": "@@ -19,4 +19,3 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n-rustc_incremental = { path = \"../librustc_incremental\" }"}, {"sha": "1de3175e2fcd81c2e54a9e8f5815f1eaae0ff3d8", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "patch": "@@ -38,12 +38,12 @@ extern crate log;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_back;\n-extern crate rustc_incremental;\n extern crate syntax;\n extern crate syntax_pos;\n \n use rustc::ty::TyCtxt;\n use rustc::hir;\n+use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::map as hir_map;\n use rustc::util::nodemap::NodeSet;\n \n@@ -60,8 +60,8 @@ pub mod trans_crate;\n ///\n /// This list is later used by linkers to determine the set of symbols needed to\n /// be exposed from a dynamic library and it's also encoded into the metadata.\n-pub fn find_exported_symbols(tcx: TyCtxt, reachable: &NodeSet) -> NodeSet {\n-    reachable.iter().cloned().filter(|&id| {\n+pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n+    tcx.reachable_set(LOCAL_CRATE).0.iter().cloned().filter(|&id| {\n         // Next, we want to ignore some FFI functions that are not exposed from\n         // this crate. Reachable FFI functions can be lumped into two\n         // categories:"}, {"sha": "47484488fb8e8792e92cb6e5015ed337b68f4d17", "filename": "src/librustc_trans_utils/link.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flink.rs?ref=e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::ich::Fingerprint;\n use rustc::session::config::{self, OutputFilenames, Input, OutputType};\n use rustc::session::Session;\n use rustc::middle::cstore::{self, LinkMeta};\n-use rustc::dep_graph::{DepKind, DepNode};\n use rustc::hir::svh::Svh;\n-use rustc_incremental::IncrementalHashesMap;\n use std::path::{Path, PathBuf};\n use syntax::ast;\n use syntax_pos::Span;\n@@ -51,10 +50,9 @@ fn is_writeable(p: &Path) -> bool {\n     }\n }\n \n-pub fn build_link_meta(incremental_hashes_map: &IncrementalHashesMap) -> LinkMeta {\n-    let krate_dep_node = &DepNode::new_no_params(DepKind::Krate);\n+pub fn build_link_meta(crate_hash: Fingerprint) -> LinkMeta {\n     let r = LinkMeta {\n-        crate_hash: Svh::new(incremental_hashes_map[krate_dep_node].to_smaller_hash()),\n+        crate_hash: Svh::new(crate_hash.to_smaller_hash()),\n     };\n     info!(\"{:?}\", r);\n     return r;"}, {"sha": "d8f87ee834c0eaf340b2afc77346e6634a7c13f5", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e130ccc54e4a25a81c6e3492e6611c5f3ae90e09/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=e130ccc54e4a25a81c6e3492e6611c5f3ae90e09", "patch": "@@ -21,10 +21,12 @@\n \n #![feature(box_syntax)]\n \n+use std::any::Any;\n use std::io::prelude::*;\n use std::io::{self, Cursor};\n use std::fs::File;\n use std::path::Path;\n+use std::sync::mpsc;\n \n use owning_ref::{ErasedBoxRef, OwningRef};\n use ar::{Archive, Builder, Header};\n@@ -35,13 +37,12 @@ use syntax::symbol::Symbol;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::session::Session;\n use rustc::session::config::{CrateType, OutputFilenames};\n-use rustc::ty::{CrateAnalysis, TyCtxt};\n+use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::MetadataLoader as MetadataLoaderTrait;\n-use rustc::dep_graph::DepGraph;\n+use rustc::dep_graph::{DepGraph, DepNode, DepKind};\n use rustc_back::target::Target;\n-use rustc_incremental::IncrementalHashesMap;\n use link::{build_link_meta, out_filename};\n \n pub trait TransCrate {\n@@ -50,12 +51,11 @@ pub trait TransCrate {\n     type TranslatedCrate;\n \n     fn metadata_loader() -> Box<MetadataLoaderTrait>;\n-    fn provide(_providers: &mut Providers);\n+    fn provide_local(_providers: &mut Providers);\n+    fn provide_extern(_providers: &mut Providers);\n     fn trans_crate<'a, 'tcx>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        analysis: CrateAnalysis,\n-        incr_hashes_map: IncrementalHashesMap,\n-        output_filenames: &OutputFilenames\n+        rx: mpsc::Receiver<Box<Any + Send>>\n     ) -> Self::OngoingCrateTranslation;\n     fn join_trans(\n         trans: Self::OngoingCrateTranslation,\n@@ -77,15 +77,17 @@ impl TransCrate for DummyTransCrate {\n         box DummyMetadataLoader(())\n     }\n \n-    fn provide(_providers: &mut Providers) {\n-        bug!(\"DummyTransCrate::provide\");\n+    fn provide_local(_providers: &mut Providers) {\n+        bug!(\"DummyTransCrate::provide_local\");\n+    }\n+\n+    fn provide_extern(_providers: &mut Providers) {\n+        bug!(\"DummyTransCrate::provide_extern\");\n     }\n \n     fn trans_crate<'a, 'tcx>(\n         _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        _analysis: CrateAnalysis,\n-        _incr_hashes_map: IncrementalHashesMap,\n-        _output_filenames: &OutputFilenames\n+        _rx: mpsc::Receiver<Box<Any + Send>>\n     ) -> Self::OngoingCrateTranslation {\n         bug!(\"DummyTransCrate::trans_crate\");\n     }\n@@ -176,16 +178,18 @@ impl TransCrate for MetadataOnlyTransCrate {\n         box NoLlvmMetadataLoader\n     }\n \n-    fn provide(_providers: &mut Providers) {}\n+    fn provide_local(_providers: &mut Providers) {}\n+    fn provide_extern(_providers: &mut Providers) {}\n \n     fn trans_crate<'a, 'tcx>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        analysis: CrateAnalysis,\n-        incr_hashes_map: IncrementalHashesMap,\n-        _output_filenames: &OutputFilenames,\n+        _rx: mpsc::Receiver<Box<Any + Send>>\n     ) -> Self::OngoingCrateTranslation {\n-        let link_meta = build_link_meta(&incr_hashes_map);\n-        let exported_symbols = ::find_exported_symbols(tcx, &analysis.reachable);\n+        let crate_hash = tcx.dep_graph\n+                        .fingerprint_of(&DepNode::new_no_params(DepKind::Krate))\n+                        .unwrap();\n+        let link_meta = build_link_meta(crate_hash);\n+        let exported_symbols = ::find_exported_symbols(tcx);\n         let (metadata, _hashes) = tcx.encode_metadata(&link_meta, &exported_symbols);\n \n         OngoingCrateTranslation {"}]}