{"sha": "34cce58d81f006a5406fcae918db4492e6cf2784", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0Y2NlNThkODFmMDA2YTU0MDZmY2FlOTE4ZGI0NDkyZTZjZjI3ODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-17T12:49:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-17T12:49:01Z"}, "message": "Auto merge of #72204 - RalfJung:abort, r=Mark-Simulacrum\n\nmake abort intrinsic safe, and correct its documentation\n\nTurns out `std::process::abort` is not the same as the intrinsic, the comment was just wrong. Quoting from the unix implementation:\n```\n// On Unix-like platforms, libc::abort will unregister signal handlers\n// including the SIGABRT handler, preventing the abort from being blocked, and\n// fclose streams, with the side effect of flushing them so libc buffered\n// output will be printed.  Additionally the shell will generally print a more\n// understandable error message like \"Abort trap\" rather than \"Illegal\n// instruction\" that intrinsics::abort would cause, as intrinsics::abort is\n// implemented as an illegal instruction.\n```", "tree": {"sha": "963b133e4a094980ea9c302075c7b9a8e13d3ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963b133e4a094980ea9c302075c7b9a8e13d3ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34cce58d81f006a5406fcae918db4492e6cf2784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34cce58d81f006a5406fcae918db4492e6cf2784", "html_url": "https://github.com/rust-lang/rust/commit/34cce58d81f006a5406fcae918db4492e6cf2784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34cce58d81f006a5406fcae918db4492e6cf2784/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7faeae0d385730e712634fb2af331ea0140771b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7faeae0d385730e712634fb2af331ea0140771b4", "html_url": "https://github.com/rust-lang/rust/commit/7faeae0d385730e712634fb2af331ea0140771b4"}, {"sha": "5980d972d1911225e38e98fe81974973349793a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5980d972d1911225e38e98fe81974973349793a0", "html_url": "https://github.com/rust-lang/rust/commit/5980d972d1911225e38e98fe81974973349793a0"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "76213e65bab5aaa08651bf81fd61d50451e4dac7", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=34cce58d81f006a5406fcae918db4492e6cf2784", "patch": "@@ -2027,6 +2027,8 @@ trait RcBoxPtr<T: ?Sized> {\n         // nevertheless, we insert an abort here to hint LLVM at\n         // an otherwise missed optimization.\n         if strong == 0 || strong == usize::max_value() {\n+            // remove `unsafe` on bootstrap bump\n+            #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n             unsafe {\n                 abort();\n             }\n@@ -2053,6 +2055,8 @@ trait RcBoxPtr<T: ?Sized> {\n         // nevertheless, we insert an abort here to hint LLVM at\n         // an otherwise missed optimization.\n         if weak == 0 || weak == usize::max_value() {\n+            // remove `unsafe` on bootstrap bump\n+            #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n             unsafe {\n                 abort();\n             }"}, {"sha": "2c6d130826bf3c6dd661b045a51a779170c72e8e", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=34cce58d81f006a5406fcae918db4492e6cf2784", "patch": "@@ -1096,6 +1096,8 @@ impl<T: ?Sized> Clone for Arc<T> {\n         // We abort because such a program is incredibly degenerate, and we\n         // don't care to support it.\n         if old_size > MAX_REFCOUNT {\n+            // remove `unsafe` on bootstrap bump\n+            #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n             unsafe {\n                 abort();\n             }\n@@ -1614,6 +1616,8 @@ impl<T: ?Sized> Weak<T> {\n \n             // See comments in `Arc::clone` for why we do this (for `mem::forget`).\n             if n > MAX_REFCOUNT {\n+                // remove `unsafe` on bootstrap bump\n+                #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n                 unsafe {\n                     abort();\n                 }\n@@ -1753,6 +1757,7 @@ impl<T: ?Sized> Clone for Weak<T> {\n \n         // See comments in Arc::clone() for why we do this (for mem::forget).\n         if old_size > MAX_REFCOUNT {\n+            #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n             unsafe {\n                 abort();\n             }"}, {"sha": "fad3095f8a3fcd4b4fe1128516aba2afb198781f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=34cce58d81f006a5406fcae918db4492e6cf2784", "patch": "@@ -133,10 +133,9 @@\n //! `Cell<T>`.\n //!\n //! ```\n-//! #![feature(core_intrinsics)]\n //! use std::cell::Cell;\n //! use std::ptr::NonNull;\n-//! use std::intrinsics::abort;\n+//! use std::process::abort;\n //! use std::marker::PhantomData;\n //!\n //! struct Rc<T: ?Sized> {\n@@ -173,7 +172,7 @@\n //!             .strong\n //!             .set(self.strong()\n //!                      .checked_add(1)\n-//!                      .unwrap_or_else(|| unsafe { abort() }));\n+//!                      .unwrap_or_else(|| abort() ));\n //!     }\n //! }\n //!"}, {"sha": "43512f7a2366da9980be7e67612765bbe681e2ab", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=34cce58d81f006a5406fcae918db4492e6cf2784", "patch": "@@ -918,7 +918,7 @@ extern \"rust-intrinsic\" {\n \n     /// Aborts the execution of the process.\n     ///\n-    /// The stabilized version of this intrinsic is\n+    /// A more user-friendly and stable version of this operation is\n     /// [`std::process::abort`](../../std/process/fn.abort.html).\n     pub fn abort() -> !;\n "}, {"sha": "16739b4a1afdf9628f12a713bb0a7b95acfe01a0", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=34cce58d81f006a5406fcae918db4492e6cf2784", "patch": "@@ -39,8 +39,12 @@ use crate::panic::{Location, PanicInfo};\n #[lang = \"panic\"] // needed by codegen for panic on overflow and other `Assert` MIR terminators\n pub fn panic(expr: &str) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n+        // remove `unsafe` (and safety comment) on bootstrap bump\n+        #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n         // SAFETY: the `abort` intrinsic has no requirements to be called.\n-        unsafe { super::intrinsics::abort() }\n+        unsafe {\n+            super::intrinsics::abort()\n+        }\n     }\n \n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n@@ -58,8 +62,12 @@ pub fn panic(expr: &str) -> ! {\n #[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access\n fn panic_bounds_check(index: usize, len: usize) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n+        // remove `unsafe` (and safety comment) on bootstrap bump\n+        #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n         // SAFETY: the `abort` intrinsic has no requirements to be called.\n-        unsafe { super::intrinsics::abort() }\n+        unsafe {\n+            super::intrinsics::abort()\n+        }\n     }\n \n     panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n@@ -72,8 +80,12 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n #[track_caller]\n pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n+        // remove `unsafe` (and safety comment) on bootstrap bump\n+        #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n         // SAFETY: the `abort` intrinsic has no requirements to be called.\n-        unsafe { super::intrinsics::abort() }\n+        unsafe {\n+            super::intrinsics::abort()\n+        }\n     }\n \n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call"}, {"sha": "b1e87a7cac26a5313a7fc371c19032c052daaedb", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=34cce58d81f006a5406fcae918db4492e6cf2784", "patch": "@@ -327,5 +327,8 @@ pub unsafe fn cleanup(payload: *mut u8) -> Box<dyn Any + Send> {\n #[lang = \"eh_personality\"]\n #[cfg(not(test))]\n fn rust_eh_personality() {\n-    unsafe { core::intrinsics::abort() }\n+    #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n+    unsafe {\n+        core::intrinsics::abort()\n+    }\n }"}, {"sha": "db6c30adb04cc9d4f5b13500d8c6957a243d394b", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=34cce58d81f006a5406fcae918db4492e6cf2784", "patch": "@@ -69,7 +69,7 @@ fn equate_intrinsic_type<'tcx>(\n /// Returns `true` if the given intrinsic is unsafe to call or not.\n pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n     match intrinsic {\n-        \"size_of\" | \"min_align_of\" | \"needs_drop\" | \"caller_location\" | \"size_of_val\"\n+        \"abort\" | \"size_of\" | \"min_align_of\" | \"needs_drop\" | \"caller_location\" | \"size_of_val\"\n         | \"min_align_of_val\" | \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\"\n         | \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" | \"saturating_add\"\n         | \"saturating_sub\" | \"rotate_left\" | \"rotate_right\" | \"ctpop\" | \"ctlz\" | \"cttz\"\n@@ -130,7 +130,9 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             }\n         };\n         (n_tps, inputs, output, hir::Unsafety::Unsafe)\n-    } else if &name[..] == \"abort\" || &name[..] == \"unreachable\" {\n+    } else if &name[..] == \"abort\" {\n+        (0, Vec::new(), tcx.types.never, hir::Unsafety::Normal)\n+    } else if &name[..] == \"unreachable\" {\n         (0, Vec::new(), tcx.types.never, hir::Unsafety::Unsafe)\n     } else {\n         let unsafety = intrinsic_operation_unsafety(&name[..]);"}, {"sha": "bf381896a22bbe7bf22519c7136dc42998479fe0", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=34cce58d81f006a5406fcae918db4492e6cf2784", "patch": "@@ -332,7 +332,10 @@ pub fn panicking() -> bool {\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n-        unsafe { intrinsics::abort() }\n+        #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n+        unsafe {\n+            intrinsics::abort()\n+        }\n     }\n \n     let info = PanicInfo::internal_constructor(Some(msg), Location::caller());\n@@ -398,7 +401,10 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n #[track_caller]\n pub fn begin_panic<M: Any + Send>(msg: M) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n-        unsafe { intrinsics::abort() }\n+        #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n+        unsafe {\n+            intrinsics::abort()\n+        }\n     }\n \n     rust_panic_with_hook(&mut PanicPayload::new(msg), None, Location::caller());\n@@ -458,7 +464,10 @@ fn rust_panic_with_hook(\n             \"thread panicked while processing \\\n                                        panic. aborting.\\n\"\n         ));\n-        unsafe { intrinsics::abort() }\n+        #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n+        unsafe {\n+            intrinsics::abort()\n+        }\n     }\n \n     unsafe {\n@@ -493,7 +502,10 @@ fn rust_panic_with_hook(\n             \"thread panicked while panicking. \\\n                                        aborting.\\n\"\n         ));\n-        unsafe { intrinsics::abort() }\n+        #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n+        unsafe {\n+            intrinsics::abort()\n+        }\n     }\n \n     rust_panic(payload)"}, {"sha": "d1a46c517574315f32a2c9dd3d3ad8af9c369a07", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=34cce58d81f006a5406fcae918db4492e6cf2784", "patch": "@@ -354,6 +354,8 @@ impl<T> Packet<T> {\n \n         // See comments on Arc::clone() on why we do this (for `mem::forget`).\n         if old_count > MAX_REFCOUNT {\n+            // remove `unsafe` on bootstrap bump\n+            #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n             unsafe {\n                 abort();\n             }"}, {"sha": "603764922c5aad76f7d479e09fe9715c0a803950", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cce58d81f006a5406fcae918db4492e6cf2784/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=34cce58d81f006a5406fcae918db4492e6cf2784", "patch": "@@ -358,6 +358,8 @@ impl<T> Packet<T> {\n \n         // See comments on Arc::clone() on why we do this (for `mem::forget`).\n         if old_count > MAX_REFCOUNT {\n+            // remove `unsafe` on bootstrap bump\n+            #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n             unsafe {\n                 abort();\n             }"}]}