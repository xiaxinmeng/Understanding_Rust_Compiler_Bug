{"sha": "586b072eef6354d1c7b5e0a8fba43842826074c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NmIwNzJlZWY2MzU0ZDFjN2I1ZTBhOGZiYTQzODQyODI2MDc0YzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-06T15:16:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-06T15:31:12Z"}, "message": "Make tps invariant for now.  Fixes #1973.", "tree": {"sha": "29783ef21b0f730f1a79f852d29ca86c4500bb4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29783ef21b0f730f1a79f852d29ca86c4500bb4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/586b072eef6354d1c7b5e0a8fba43842826074c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/586b072eef6354d1c7b5e0a8fba43842826074c6", "html_url": "https://github.com/rust-lang/rust/commit/586b072eef6354d1c7b5e0a8fba43842826074c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/586b072eef6354d1c7b5e0a8fba43842826074c6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de288c35f3f97025954d1f12bdc6cfcdb78f603", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de288c35f3f97025954d1f12bdc6cfcdb78f603", "html_url": "https://github.com/rust-lang/rust/commit/9de288c35f3f97025954d1f12bdc6cfcdb78f603"}], "stats": {"total": 84, "additions": 76, "deletions": 8}, "files": [{"sha": "6b42fe42c67048de4301343600bad2d5453b559a", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/586b072eef6354d1c7b5e0a8fba43842826074c6/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b072eef6354d1c7b5e0a8fba43842826074c6/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=586b072eef6354d1c7b5e0a8fba43842826074c6", "patch": "@@ -534,8 +534,13 @@ impl unify_methods for infer_ctxt {\n     }\n \n     fn tps(as: [ty::t], bs: [ty::t]) -> ures {\n+        // Note: type parameters are always treated as *invariant*\n+        // (otherwise the type system would be unsound).  In the\n+        // future we could allow type parameters to declare a\n+        // variance.  In that case, you would have to change c_tps()\n+        // for LUB/GLB, which currently always returns `as`.\n         if check vec::same_length(as, bs) {\n-            iter2(as, bs) {|a, b| self.tys(a, b) }\n+            iter2(as, bs) {|a, b| self.eq_tys(a, b) }\n         } else {\n             self.uerr(ty::terr_ty_param_size(bs.len(), as.len()))\n         }\n@@ -1080,12 +1085,8 @@ fn c_tuptys<C:combine>(self: C, as: [ty::t], bs: [ty::t])\n \n fn c_tps<C:combine>(self: C, _did: ast::def_id, as: [ty::t], bs: [ty::t])\n     -> cres<[ty::t]> {\n-    // FIXME #1973 lookup the declared variance of the type parameters\n-    // based on did\n-    if check vec::same_length(as, bs) {\n-        map2(as, bs) {|a,b| self.c_tys(a, b) }\n-    } else {\n-        err(ty::terr_ty_param_size(bs.len(), as.len()))\n+    self.infcx().tps(as, bs).then {||\n+        ok(as)\n     }\n }\n \n@@ -1228,7 +1229,6 @@ fn c_tys<C:combine>(\n \n       (ty::ty_class(a_id, a_tps), ty::ty_class(b_id, b_tps))\n       if a_id == b_id {\n-        // FIXME variance\n         c_tps(self, a_id, a_tps, b_tps).chain {|tps|\n             ok(ty::mk_class(tcx, a_id, tps))\n         }"}, {"sha": "0c4b3b54b8334087e34d8a13dac7a352e39cd654", "filename": "src/test/compile-fail/tps-invariant-class.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/586b072eef6354d1c7b5e0a8fba43842826074c6/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b072eef6354d1c7b5e0a8fba43842826074c6/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs?ref=586b072eef6354d1c7b5e0a8fba43842826074c6", "patch": "@@ -0,0 +1,21 @@\n+class box_impl<T> {\n+    let mut f: T;\n+\n+    new(f: T) {\n+        self.f = f;\n+    }\n+}\n+\n+fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n+    b.f = v;\n+}\n+\n+fn main() {\n+    let b = box_impl::<@int>(@3);\n+    set_box_impl(b, @mut 5);\n+    //!^ ERROR values differ in mutability\n+\n+    // No error when type of parameter actually IS @const int\n+    let b = box_impl::<@const int>(@3);\n+    set_box_impl(b, @mut 5);\n+}\n\\ No newline at end of file"}, {"sha": "16375bd8b47c90c35dee719704c248111ff585c0", "filename": "src/test/compile-fail/tps-invariant-enum.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/586b072eef6354d1c7b5e0a8fba43842826074c6/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b072eef6354d1c7b5e0a8fba43842826074c6/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs?ref=586b072eef6354d1c7b5e0a8fba43842826074c6", "patch": "@@ -0,0 +1,18 @@\n+enum box_impl<T> = {\n+    mut f: T\n+};\n+\n+fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n+    b.f = v;\n+}\n+\n+fn main() {\n+    let b = box_impl::<@int>({mut f: @3});\n+    set_box_impl(b, @mut 5);\n+    //!^ ERROR values differ in mutability\n+\n+    // No error when type of parameter actually IS @const int\n+    let x: @const int = @3; // only way I could find to upcast\n+    let b = box_impl::<@const int>({mut f: x});\n+    set_box_impl(b, @mut 5);\n+}\n\\ No newline at end of file"}, {"sha": "49ab080998e780935d10f156723a44bda99dc58f", "filename": "src/test/compile-fail/tps-invariant-iface.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/586b072eef6354d1c7b5e0a8fba43842826074c6/src%2Ftest%2Fcompile-fail%2Ftps-invariant-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b072eef6354d1c7b5e0a8fba43842826074c6/src%2Ftest%2Fcompile-fail%2Ftps-invariant-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-iface.rs?ref=586b072eef6354d1c7b5e0a8fba43842826074c6", "patch": "@@ -0,0 +1,29 @@\n+iface box_iface<T> {\n+    fn get() -> T;\n+    fn set(t: T);\n+}\n+\n+enum box_impl<T> = {\n+    mut f: T\n+};\n+\n+impl<T:copy> of box_iface<T> for box_impl<T> {\n+    fn get() -> T { ret self.f; }\n+    fn set(t: T) { self.f = t; }\n+}\n+\n+fn set_box_iface<T>(b: box_iface<@const T>, v: @const T) {\n+    b.set(v);\n+}\n+\n+fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n+    b.set(v);\n+}\n+\n+fn main() {\n+    let b = box_impl::<@int>({mut f: @3});\n+    set_box_iface(b as box_iface::<@int>, @mut 5);\n+    //!^ ERROR values differ in mutability\n+    set_box_impl(b, @mut 5);\n+    //!^ ERROR values differ in mutability\n+}\n\\ No newline at end of file"}]}