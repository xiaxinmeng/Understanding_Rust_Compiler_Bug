{"sha": "ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMmYzZDk2NzM0MDdkYjNjYTVhMGViMjRlMDFlZjUyYzdmYzY3NmM=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-03-21T21:59:33Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-03-21T22:06:04Z"}, "message": "Switched over substr and trim functions in str to be non-allocating, temporary renamed them to better track use-sites", "tree": {"sha": "f85fe06cfa6bfab47ddfe9c55e9c91c2a67495d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f85fe06cfa6bfab47ddfe9c55e9c91c2a67495d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "html_url": "https://github.com/rust-lang/rust/commit/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed25a674ac6bc53c9ee9f8c1cce21541f6811d4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed25a674ac6bc53c9ee9f8c1cce21541f6811d4b", "html_url": "https://github.com/rust-lang/rust/commit/ed25a674ac6bc53c9ee9f8c1cce21541f6811d4b"}], "stats": {"total": 254, "additions": 130, "deletions": 124}, "files": [{"sha": "56b7d3695ae41d9a65f40e89344ed78e7e2a7bc6", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -1363,11 +1363,11 @@ let crayon_names = crayons.map(|v| crayon_to_str(*v));\n let favorite_crayon_name = crayon_names[0];\n \n // Remove whitespace from before and after the string\n-let new_favorite_crayon_name = favorite_crayon_name.trim();\n+let new_favorite_crayon_name = favorite_crayon_name.trim_DBGBRWD();\n \n if favorite_crayon_name.len() > 5 {\n    // Create a substring\n-   println(favorite_crayon_name.substr(0, 5));\n+   println(favorite_crayon_name.substr_DBGBRWD(0, 5));\n }\n ~~~\n "}, {"sha": "8a5ce1e6848cd2da52235f8c52bd53fc9c247b88", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -268,7 +268,7 @@ fn run_debuginfo_test(config: config, props: TestProps, testfile: &Path) {\n         // output (in order)\n         let mut i = 0u;\n         for str::lines(ProcRes.stdout).each |line| {\n-            if props.check_lines[i].trim() == line.trim() {\n+            if props.check_lines[i].trim_DBGBRWD() == line.trim_DBGBRWD() {\n                 i += 1u;\n             }\n             if i == num_check_lines {"}, {"sha": "1f7d05060c4201668971e2377b934d75902d105d", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -198,7 +198,7 @@ pub use path::WindowsPath;\n pub use path::PosixPath;\n \n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n-pub use str::{StrSlice, Trimmable};\n+pub use str::{StrSlice};\n pub use container::{Container, Mutable};\n pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};"}, {"sha": "d0307c8bf70de8479a45595010ded2576a4e9b79", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -36,7 +36,7 @@ pub use path::Path;\n pub use path::PosixPath;\n pub use path::WindowsPath;\n pub use ptr::Ptr;\n-pub use str::{StrSlice, Trimmable, OwnedStr};\n+pub use str::{StrSlice, OwnedStr};\n pub use to_bytes::IterBytes;\n pub use to_str::ToStr;\n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};"}, {"sha": "f133a1fbfa6106615387a5bff09ff14d3896be6b", "filename": "src/libcore/str.rs", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -29,6 +29,7 @@ use str;\n use u8;\n use uint;\n use vec;\n+use to_str::ToStr;\n \n #[cfg(notest)] use cmp::{Eq, Ord};\n \n@@ -53,6 +54,19 @@ pub pure fn from_slice(s: &str) -> ~str {\n     unsafe { raw::slice_bytes_unique(s, 0, len(s)) }\n }\n \n+impl ToStr for ~str {\n+    #[inline(always)]\n+    pure fn to_str(&self) -> ~str { copy *self }\n+}\n+impl ToStr for &'self str {\n+    #[inline(always)]\n+    pure fn to_str(&self) -> ~str { ::str::from_slice(*self) }\n+}\n+impl ToStr for @str {\n+    #[inline(always)]\n+    pure fn to_str(&self) -> ~str { ::str::from_slice(*self) }\n+}\n+\n /**\n  * Convert a byte to a UTF-8 string\n  *\n@@ -299,12 +313,12 @@ pub fn unshift_char(s: &mut ~str, ch: char) {\n  * * chars_to_trim - A vector of chars\n  *\n  */\n-pub pure fn trim_left_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n-    if chars_to_trim.is_empty() { return from_slice(s); }\n+pub pure fn trim_left_chars_DBGBRWD(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n+    if chars_to_trim.is_empty() { return s; }\n \n     match find(s, |c| !chars_to_trim.contains(&c)) {\n-      None => ~\"\",\n-      Some(first) => unsafe { raw::slice_bytes_unique(s, first, s.len()) }\n+      None => \"\",\n+      Some(first) => unsafe { raw::slice_bytes(s, first, s.len()) }\n     }\n }\n \n@@ -317,14 +331,14 @@ pub pure fn trim_left_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n  * * chars_to_trim - A vector of chars\n  *\n  */\n-pub pure fn trim_right_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n-    if chars_to_trim.is_empty() { return str::from_slice(s); }\n+pub pure fn trim_right_chars_DBGBRWD(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n+    if chars_to_trim.is_empty() { return s; }\n \n     match rfind(s, |c| !chars_to_trim.contains(&c)) {\n-      None => ~\"\",\n+      None => \"\",\n       Some(last) => {\n         let next = char_range_at(s, last).next;\n-        unsafe { raw::slice_bytes_unique(s, 0u, next) }\n+        unsafe { raw::slice_bytes(s, 0u, next) }\n       }\n     }\n }\n@@ -338,31 +352,31 @@ pub pure fn trim_right_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n  * * chars_to_trim - A vector of chars\n  *\n  */\n-pub pure fn trim_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n-    trim_left_chars(trim_right_chars(s, chars_to_trim), chars_to_trim)\n+pub pure fn trim_chars_DBGBRWD(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n+    trim_left_chars_DBGBRWD(trim_right_chars_DBGBRWD(s, chars_to_trim), chars_to_trim)\n }\n \n /// Returns a string with leading whitespace removed\n-pub pure fn trim_left(s: &str) -> ~str {\n+pub pure fn trim_left_DBGBRWD(s: &'a str) -> &'a str {\n     match find(s, |c| !char::is_whitespace(c)) {\n-      None => ~\"\",\n-      Some(first) => unsafe { raw::slice_bytes_unique(s, first, len(s)) }\n+      None => \"\",\n+      Some(first) => unsafe { raw::slice_bytes(s, first, len(s)) }\n     }\n }\n \n /// Returns a string with trailing whitespace removed\n-pub pure fn trim_right(s: &str) -> ~str {\n+pub pure fn trim_right_DBGBRWD(s: &'a str) -> &'a str {\n     match rfind(s, |c| !char::is_whitespace(c)) {\n-      None => ~\"\",\n+      None => \"\",\n       Some(last) => {\n         let next = char_range_at(s, last).next;\n-        unsafe { raw::slice_bytes_unique(s, 0u, next) }\n+        unsafe { raw::slice_bytes(s, 0u, next) }\n       }\n     }\n }\n \n /// Returns a string with leading and trailing whitespace removed\n-pub pure fn trim(s: &str) -> ~str { trim_left(trim_right(s)) }\n+pub pure fn trim_DBGBRWD(s: &'a str) -> &'a str { trim_left_DBGBRWD(trim_right_DBGBRWD(s)) }\n \n /*\n Section: Transforming strings\n@@ -407,8 +421,8 @@ pub pure fn chars(s: &str) -> ~[char] {\n  * Returns a string containing `n` characters starting at byte offset\n  * `begin`.\n  */\n-pub pure fn substr(s: &str, begin: uint, n: uint) -> ~str {\n-    slice(s, begin, begin + count_bytes(s, begin, n)).to_owned()\n+pub pure fn substr_DBGBRWD(s: &'a str, begin: uint, n: uint) -> &'a str {\n+    slice(s, begin, begin + count_bytes(s, begin, n))\n }\n \n /**\n@@ -2221,25 +2235,6 @@ pub mod raw {\n \n }\n \n-pub trait Trimmable {\n-    pure fn trim(&self) -> Self;\n-    pure fn trim_left(&self) -> Self;\n-    pure fn trim_right(&self) -> Self;\n-}\n-\n-/// Extension methods for strings\n-impl Trimmable for ~str {\n-    /// Returns a string with leading and trailing whitespace removed\n-    #[inline]\n-    pure fn trim(&self) -> ~str { trim(*self) }\n-    /// Returns a string with leading whitespace removed\n-    #[inline]\n-    pure fn trim_left(&self) -> ~str { trim_left(*self) }\n-    /// Returns a string with trailing whitespace removed\n-    #[inline]\n-    pure fn trim_right(&self) -> ~str { trim_right(*self) }\n-}\n-\n #[cfg(notest)]\n pub mod traits {\n     use ops::Add;\n@@ -2280,14 +2275,17 @@ pub trait StrSlice {\n     pure fn split_char(&self, sep: char) -> ~[~str];\n     pure fn split_str(&self, sep: &'a str) -> ~[~str];\n     pure fn starts_with(&self, needle: &'a str) -> bool;\n-    pure fn substr(&self, begin: uint, n: uint) -> ~str;\n+    pure fn substr_DBGBRWD(&self, begin: uint, n: uint) -> &'self str;\n     pure fn to_lower(&self) -> ~str;\n     pure fn to_upper(&self) -> ~str;\n     pure fn escape_default(&self) -> ~str;\n     pure fn escape_unicode(&self) -> ~str;\n-    pure fn trim(&self) -> ~str;\n-    pure fn trim_left(&self) -> ~str;\n-    pure fn trim_right(&self) -> ~str;\n+    pure fn trim_DBGBRWD(&self) -> &'self str;\n+    pure fn trim_left_DBGBRWD(&self) -> &'self str;\n+    pure fn trim_right_DBGBRWD(&self) -> &'self str;\n+    pure fn trim_chars_DBGBRWD(&self, chars_to_trim: &[char]) -> &'self str;\n+    pure fn trim_left_chars_DBGBRWD(&self, chars_to_trim: &[char]) -> &'self str;\n+    pure fn trim_right_chars_DBGBRWD(&self, chars_to_trim: &[char]) -> &'self str;\n     pure fn to_owned(&self) -> ~str;\n     pure fn to_managed(&self) -> @str;\n     pure fn char_at(&self, i: uint) -> char;\n@@ -2421,8 +2419,8 @@ impl StrSlice for &'self str {\n      * `begin`.\n      */\n     #[inline]\n-    pure fn substr(&self, begin: uint, n: uint) -> ~str {\n-        substr(*self, begin, n)\n+    pure fn substr_DBGBRWD(&self, begin: uint, n: uint) -> &'self str {\n+        substr_DBGBRWD(*self, begin, n)\n     }\n     /// Convert a string to lowercase\n     #[inline]\n@@ -2439,13 +2437,27 @@ impl StrSlice for &'self str {\n \n     /// Returns a string with leading and trailing whitespace removed\n     #[inline]\n-    pure fn trim(&self) -> ~str { trim(*self) }\n+    pure fn trim_DBGBRWD(&self) -> &'self str { trim_DBGBRWD(*self) }\n     /// Returns a string with leading whitespace removed\n     #[inline]\n-    pure fn trim_left(&self) -> ~str { trim_left(*self) }\n+    pure fn trim_left_DBGBRWD(&self) -> &'self str { trim_left_DBGBRWD(*self) }\n     /// Returns a string with trailing whitespace removed\n     #[inline]\n-    pure fn trim_right(&self) -> ~str { trim_right(*self) }\n+    pure fn trim_right_DBGBRWD(&self) -> &'self str { trim_right_DBGBRWD(*self) }\n+\n+    #[inline]\n+    pure fn trim_chars_DBGBRWD(&self, chars_to_trim: &[char]) -> &'self str {\n+        trim_chars_DBGBRWD(*self, chars_to_trim)\n+    }\n+    #[inline]\n+    pure fn trim_left_chars_DBGBRWD(&self, chars_to_trim: &[char]) -> &'self str {\n+        trim_left_chars_DBGBRWD(*self, chars_to_trim)\n+    }\n+    #[inline]\n+    pure fn trim_right_chars_DBGBRWD(&self, chars_to_trim: &[char]) -> &'self str {\n+        trim_right_chars_DBGBRWD(*self, chars_to_trim)\n+    }\n+\n \n     #[inline]\n     pure fn to_owned(&self) -> ~str { from_slice(*self) }\n@@ -2805,11 +2817,11 @@ mod tests {\n     #[test]\n     fn test_substr() {\n         fn t(a: &str, b: &str, start: int) {\n-            fail_unless!(substr(a, start as uint, len(b)) == b.to_str());\n+            fail_unless!(substr_DBGBRWD(a, start as uint, len(b)) == b);\n         }\n-        t(~\"hello\", ~\"llo\", 2);\n-        t(~\"hello\", ~\"el\", 1);\n-        fail_unless!(~\"\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\" == substr(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", 6u, 6u));\n+        t(\"hello\", \"llo\", 2);\n+        t(\"hello\", \"el\", 1);\n+        fail_unless!(\"\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\" == substr_DBGBRWD(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", 6u, 6u));\n     }\n \n     #[test]\n@@ -3042,62 +3054,62 @@ mod tests {\n \n     #[test]\n     fn test_trim_left_chars() {\n-        fail_unless!(trim_left_chars(~\" *** foo *** \", ~[]) ==\n-                     ~\" *** foo *** \");\n-        fail_unless!(trim_left_chars(~\" *** foo *** \", ~['*', ' ']) ==\n-                     ~\"foo *** \");\n-        fail_unless!(trim_left_chars(~\" ***  *** \", ~['*', ' ']) == ~\"\");\n-        fail_unless!(trim_left_chars(~\"foo *** \", ~['*', ' ']) ==\n-                     ~\"foo *** \");\n+        fail_unless!(trim_left_chars_DBGBRWD(\" *** foo *** \", ~[]) ==\n+                     \" *** foo *** \");\n+        fail_unless!(trim_left_chars_DBGBRWD(\" *** foo *** \", ~['*', ' ']) ==\n+                     \"foo *** \");\n+        fail_unless!(trim_left_chars_DBGBRWD(\" ***  *** \", ~['*', ' ']) == \"\");\n+        fail_unless!(trim_left_chars_DBGBRWD(\"foo *** \", ~['*', ' ']) ==\n+                     \"foo *** \");\n     }\n \n     #[test]\n     fn test_trim_right_chars() {\n-        fail_unless!(trim_right_chars(~\" *** foo *** \", ~[]) ==\n-                     ~\" *** foo *** \");\n-        fail_unless!(trim_right_chars(~\" *** foo *** \", ~['*', ' ']) ==\n-                     ~\" *** foo\");\n-        fail_unless!(trim_right_chars(~\" ***  *** \", ~['*', ' ']) == ~\"\");\n-        fail_unless!(trim_right_chars(~\" *** foo\", ~['*', ' ']) ==\n-                     ~\" *** foo\");\n+        fail_unless!(trim_right_chars_DBGBRWD(\" *** foo *** \", ~[]) ==\n+                     \" *** foo *** \");\n+        fail_unless!(trim_right_chars_DBGBRWD(\" *** foo *** \", ~['*', ' ']) ==\n+                     \" *** foo\");\n+        fail_unless!(trim_right_chars_DBGBRWD(\" ***  *** \", ~['*', ' ']) == \"\");\n+        fail_unless!(trim_right_chars_DBGBRWD(\" *** foo\", ~['*', ' ']) ==\n+                     \" *** foo\");\n     }\n \n     #[test]\n     fn test_trim_chars() {\n-        fail_unless!(trim_chars(~\" *** foo *** \", ~[]) == ~\" *** foo *** \");\n-        fail_unless!(trim_chars(~\" *** foo *** \", ~['*', ' ']) == ~\"foo\");\n-        fail_unless!(trim_chars(~\" ***  *** \", ~['*', ' ']) == ~\"\");\n-        fail_unless!(trim_chars(~\"foo\", ~['*', ' ']) == ~\"foo\");\n+        fail_unless!(trim_chars_DBGBRWD(\" *** foo *** \", ~[]) == \" *** foo *** \");\n+        fail_unless!(trim_chars_DBGBRWD(\" *** foo *** \", ~['*', ' ']) == \"foo\");\n+        fail_unless!(trim_chars_DBGBRWD(\" ***  *** \", ~['*', ' ']) == \"\");\n+        fail_unless!(trim_chars_DBGBRWD(\"foo\", ~['*', ' ']) == \"foo\");\n     }\n \n     #[test]\n     fn test_trim_left() {\n-        fail_unless!((trim_left(~\"\") == ~\"\"));\n-        fail_unless!((trim_left(~\"a\") == ~\"a\"));\n-        fail_unless!((trim_left(~\"    \") == ~\"\"));\n-        fail_unless!((trim_left(~\"     blah\") == ~\"blah\"));\n-        fail_unless!((trim_left(~\"   \\u3000  wut\") == ~\"wut\"));\n-        fail_unless!((trim_left(~\"hey \") == ~\"hey \"));\n+        fail_unless!((trim_left_DBGBRWD(\"\") == \"\"));\n+        fail_unless!((trim_left_DBGBRWD(\"a\") == \"a\"));\n+        fail_unless!((trim_left_DBGBRWD(\"    \") == \"\"));\n+        fail_unless!((trim_left_DBGBRWD(\"     blah\") == \"blah\"));\n+        fail_unless!((trim_left_DBGBRWD(\"   \\u3000  wut\") == \"wut\"));\n+        fail_unless!((trim_left_DBGBRWD(\"hey \") == \"hey \"));\n     }\n \n     #[test]\n     fn test_trim_right() {\n-        fail_unless!((trim_right(~\"\") == ~\"\"));\n-        fail_unless!((trim_right(~\"a\") == ~\"a\"));\n-        fail_unless!((trim_right(~\"    \") == ~\"\"));\n-        fail_unless!((trim_right(~\"blah     \") == ~\"blah\"));\n-        fail_unless!((trim_right(~\"wut   \\u3000  \") == ~\"wut\"));\n-        fail_unless!((trim_right(~\" hey\") == ~\" hey\"));\n+        fail_unless!((trim_right_DBGBRWD(\"\") == \"\"));\n+        fail_unless!((trim_right_DBGBRWD(\"a\") == \"a\"));\n+        fail_unless!((trim_right_DBGBRWD(\"    \") == \"\"));\n+        fail_unless!((trim_right_DBGBRWD(\"blah     \") == \"blah\"));\n+        fail_unless!((trim_right_DBGBRWD(\"wut   \\u3000  \") == \"wut\"));\n+        fail_unless!((trim_right_DBGBRWD(\" hey\") == \" hey\"));\n     }\n \n     #[test]\n     fn test_trim() {\n-        fail_unless!((trim(~\"\") == ~\"\"));\n-        fail_unless!((trim(~\"a\") == ~\"a\"));\n-        fail_unless!((trim(~\"    \") == ~\"\"));\n-        fail_unless!((trim(~\"    blah     \") == ~\"blah\"));\n-        fail_unless!((trim(~\"\\nwut   \\u3000  \") == ~\"wut\"));\n-        fail_unless!((trim(~\" hey dude \") == ~\"hey dude\"));\n+        fail_unless!((trim_DBGBRWD(\"\") == \"\"));\n+        fail_unless!((trim_DBGBRWD(\"a\") == \"a\"));\n+        fail_unless!((trim_DBGBRWD(\"    \") == \"\"));\n+        fail_unless!((trim_DBGBRWD(\"    blah     \") == \"blah\"));\n+        fail_unless!((trim_DBGBRWD(\"\\nwut   \\u3000  \") == \"wut\"));\n+        fail_unless!((trim_DBGBRWD(\" hey dude \") == \"hey dude\"));\n     }\n \n     #[test]"}, {"sha": "b687fde0c37911ec39c28082d2cad7a48c8e97d6", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -28,18 +28,6 @@ impl ToStr for () {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { ~\"()\" }\n }\n-impl ToStr for ~str {\n-    #[inline(always)]\n-    pure fn to_str(&self) -> ~str { copy *self }\n-}\n-impl ToStr for &'self str {\n-    #[inline(always)]\n-    pure fn to_str(&self) -> ~str { ::str::from_slice(*self) }\n-}\n-impl ToStr for @str {\n-    #[inline(always)]\n-    pure fn to_str(&self) -> ~str { ::str::from_slice(*self) }\n-}\n \n // FIXME #4898: impl for one-tuples\n "}, {"sha": "e3227cd265f154102d1ae64d208956784d242e6f", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -325,7 +325,7 @@ pub mod ct {\n             'o' as u8 => TyOctal,\n             'f' as u8 => TyFloat,\n             '?' as u8 => TyPoly,\n-            _ => err(~\"unknown type in conversion: \" + s.substr(i, 1))\n+            _ => err(~\"unknown type in conversion: \" + s.substr_DBGBRWD(i, 1))\n         };\n \n         Parsed::new(t, i + 1)\n@@ -537,7 +537,7 @@ pub mod rt {\n         let mut unpadded = match cv.precision {\n           CountImplied => s.to_owned(),\n           CountIs(max) => if (max as uint) < str::char_len(s) {\n-            str::substr(s, 0, max as uint)\n+            str::substr_DBGBRWD(s, 0, max as uint).to_owned()\n           } else {\n             s.to_owned()\n           }"}, {"sha": "dbf78b70c3bdb85345d15df9647323a33e188dfb", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -543,7 +543,7 @@ pub fn build_session_options(+binary: ~str,\n     let lint_dict = lint::get_lint_dict();\n     for lint_levels.each |level| {\n         let level_name = lint::level_to_str(*level);\n-        let level_short = level_name.substr(0,1).to_upper();\n+        let level_short = level_name.substr_DBGBRWD(0,1).to_upper();\n         let flags = vec::append(getopts::opt_strs(matches, level_short),\n                                 getopts::opt_strs(matches, level_name));\n         for flags.each |lint_name| {"}, {"sha": "ce3cc30642da248e95cb9405c23efef9a92098d2", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -1849,6 +1849,7 @@ fn trans_assign_op(bcx: block,\n     return result_datum.copy_to_datum(bcx, DROP_EXISTING, dst_datum);\n }\n \n+// NOTE: Mode neccessary here?\n fn shorten(+x: ~str) -> ~str {\n-    if x.len() > 60 { x.substr(0, 60) } else { x }\n+    if x.len() > 60 { x.substr_DBGBRWD(0, 60).to_owned() } else { x }\n }"}, {"sha": "b43c88fe20489c585dccd708926a06378196813d", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -311,7 +311,7 @@ mod test {\n             let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n             let doc = (desc_to_brief_pass::mk_pass().f)(srv.clone(), doc);\n             let doc = (sectionalize_pass::mk_pass().f)(srv.clone(), doc);\n-            (mk_pass(~\"\", |s| str::trim(s) ).f)(srv.clone(), doc)\n+            (mk_pass(~\"\", |s| str::trim_DBGBRWD(s).to_owned() ).f)(srv.clone(), doc)\n         }\n     }\n }"}, {"sha": "3ad4c50ce3002157a36bdce4c8a3783364a1a0e2", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -21,7 +21,7 @@ use text_pass;\n use core::str;\n \n pub fn mk_pass() -> Pass {\n-    text_pass::mk_pass(~\"trim\", |s| str::trim(s) )\n+    text_pass::mk_pass(~\"trim\", |s| s.trim_DBGBRWD().to_owned() )\n }\n \n #[test]"}, {"sha": "17cf9dc2b0c11f7d891aa6aa58b724eebb946ecc", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -78,7 +78,7 @@ fn unindent(s: &str) -> ~str {\n     };\n \n     if !lines.is_empty() {\n-        let unindented = ~[lines.head().trim()]\n+        let unindented = ~[lines.head().trim_DBGBRWD().to_owned()]\n             + do lines.tail().map |line| {\n             if str::is_whitespace(*line) {\n                 copy *line"}, {"sha": "31e32cd062aef32d4a5bc60f8df6c4aed689df7c", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -283,7 +283,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n             for args.each |arg| {\n                 let (crate, filename) =\n                     if arg.ends_with(\".rs\") || arg.ends_with(\".rc\") {\n-                    (arg.substr(0, arg.len() - 3), *arg)\n+                    (arg.substr_DBGBRWD(0, arg.len() - 3).to_owned(), *arg)\n                 } else {\n                     (*arg, arg + ~\".rs\")\n                 };\n@@ -317,7 +317,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n                 match get_line(~\"rusti| \") {\n                     None => fail!(~\"unterminated multiline command :{ .. :}\"),\n                     Some(line) => {\n-                        if str::trim(line) == ~\":}\" {\n+                        if str::trim_DBGBRWD(line) == ~\":}\" {\n                             end_multiline = true;\n                         } else {\n                             multiline_cmd += line + ~\"\\n\";\n@@ -337,7 +337,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str)\n     -> Option<Repl> {\n     if line.starts_with(~\":\") {\n-        let full = line.substr(1, line.len() - 1);\n+        let full = line.substr_DBGBRWD(1, line.len() - 1);\n         let split = str::words(full);\n         let len = split.len();\n "}, {"sha": "d7bd5fe6f20be943e76291ff2907a7ff44b53091", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -458,10 +458,11 @@ pub impl BigUint {\n \n         pure fn fill_concat(v: &[BigDigit], radix: uint, l: uint) -> ~str {\n             if v.is_empty() { return ~\"0\" }\n-            str::trim_left_chars(str::concat(vec::reversed(v).map(|n| {\n+            let s = str::concat(vec::reversed(v).map(|n| {\n                 let s = uint::to_str_radix(*n as uint, radix);\n                 str::from_chars(vec::from_elem(l - s.len(), '0')) + s\n-            })), ['0'])\n+            }));\n+            str::trim_left_chars_DBGBRWD(s, ['0']).to_owned()\n         }\n     }\n "}, {"sha": "a5534e29161053c9394ea77a5954f51732878092", "filename": "src/libstd/semver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibstd%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibstd%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsemver.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -223,12 +223,12 @@ pub fn parse(s: &str) -> Option<Version> {\n     if ! str::is_ascii(s) {\n         return None;\n     }\n-    let s = s.trim();\n+    let s = s.trim_DBGBRWD();\n     let mut bad = false;\n     do bad_parse::cond.trap(|_| { debug!(\"bad\"); bad = true }).in {\n         do io::with_str_reader(s) |rdr| {\n             let v = parse_reader(rdr);\n-            if bad || v.to_str() != s {\n+            if bad || v.to_str() != s.to_owned() {\n                 None\n             } else {\n                 Some(v)"}, {"sha": "01a4265ca4d39ab79b878df82ff19907bcbaf816", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -70,10 +70,10 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n     /// remove whitespace-only lines from the start/end of lines\n     fn vertical_trim(lines: ~[~str]) -> ~[~str] {\n         let mut i = 0u, j = lines.len();\n-        while i < j && lines[i].trim().is_empty() {\n+        while i < j && lines[i].trim_DBGBRWD().is_empty() {\n             i += 1u;\n         }\n-        while j > i && lines[j - 1u].trim().is_empty() {\n+        while j > i && lines[j - 1u].trim_DBGBRWD().is_empty() {\n             j -= 1u;\n         }\n         return lines.slice(i, j).to_owned();\n@@ -84,7 +84,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n \n         let mut i = max.get_or_default(uint::max_value);\n         for lines.each |line| {\n-            if line.trim().is_empty() {\n+            if line.trim_DBGBRWD().is_empty() {\n                 loop;\n             }\n             for line.each_chari |j, c| {\n@@ -109,7 +109,10 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n     }\n \n     if comment.starts_with(~\"//\") {\n-        return comment.slice(3u, comment.len()).trim();\n+        // FIXME #5475:\n+        // return comment.slice(3u, comment.len()).trim_DBGBRWD().to_owned();\n+        let r = comment.slice(3u, comment.len()); return r.trim_DBGBRWD().to_owned();\n+\n     }\n \n     if comment.starts_with(~\"/*\") {"}, {"sha": "80be23d40f76a949e0679573682a64afdf03f850", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -262,7 +262,7 @@ fn consume_whitespace_and_comments(rdr: @mut StringReader)\n }\n \n pub pure fn is_line_non_doc_comment(s: &str) -> bool {\n-    s.trim_right().all(|ch| ch == '/')\n+    s.trim_right_DBGBRWD().all(|ch| ch == '/')\n }\n \n // PRECONDITION: rdr.curr is not whitespace"}, {"sha": "d78aa51550a3bfc3a50eeb7f7bc5ab239389083b", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=ee2f3d9673407db3ca5a0eb24e01ef52c7fc676c", "patch": "@@ -67,7 +67,8 @@ pub impl Sudoku {\n \n         let mut g = vec::from_fn(10u, { |_i| ~[0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8] });\n         while !reader.eof() {\n-            let comps = str::split_char(str::trim(reader.read_line()), ',');\n+            let line = reader.read_line();\n+            let comps = str::split_char(line.trim_DBGBRWD(), ',');\n             if vec::len(comps) == 3u {\n                 let row     = uint::from_str(comps[0]).get() as u8;\n                 let col     = uint::from_str(comps[1]).get() as u8;"}]}