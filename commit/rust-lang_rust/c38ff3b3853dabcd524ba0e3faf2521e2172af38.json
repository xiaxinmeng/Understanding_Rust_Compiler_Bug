{"sha": "c38ff3b3853dabcd524ba0e3faf2521e2172af38", "node_id": "C_kwDOAAsO6NoAKGMzOGZmM2IzODUzZGFiY2Q1MjRiYTBlM2ZhZjI1MjFlMjE3MmFmMzg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-03T12:28:01Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-03T12:28:01Z"}, "message": "Remove all but one call site of `prepare_outputs` and fetch the value from the TyCtxt instead", "tree": {"sha": "c1711a2637808b2f69a0971291114c13d25050d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1711a2637808b2f69a0971291114c13d25050d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c38ff3b3853dabcd524ba0e3faf2521e2172af38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c38ff3b3853dabcd524ba0e3faf2521e2172af38", "html_url": "https://github.com/rust-lang/rust/commit/c38ff3b3853dabcd524ba0e3faf2521e2172af38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c38ff3b3853dabcd524ba0e3faf2521e2172af38/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab75d777de8e01d8e8265626654f24a8c971278d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab75d777de8e01d8e8265626654f24a8c971278d", "html_url": "https://github.com/rust-lang/rust/commit/ab75d777de8e01d8e8265626654f24a8c971278d"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "77c3270fe6a04b992f1d270e7735a609162b4d2b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c38ff3b3853dabcd524ba0e3faf2521e2172af38/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38ff3b3853dabcd524ba0e3faf2521e2172af38/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=c38ff3b3853dabcd524ba0e3faf2521e2172af38", "patch": "@@ -968,12 +968,10 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n pub fn start_codegen<'tcx>(\n     codegen_backend: &dyn CodegenBackend,\n     tcx: TyCtxt<'tcx>,\n-    outputs: &OutputFilenames,\n ) -> Box<dyn Any> {\n     info!(\"Pre-codegen\\n{:?}\", tcx.debug_stats());\n \n-    let (metadata, need_metadata_module) =\n-        rustc_metadata::fs::encode_and_write_metadata(tcx, outputs);\n+    let (metadata, need_metadata_module) = rustc_metadata::fs::encode_and_write_metadata(tcx);\n \n     let codegen = tcx.sess.time(\"codegen_crate\", move || {\n         codegen_backend.codegen_crate(tcx, metadata, need_metadata_module)\n@@ -989,7 +987,7 @@ pub fn start_codegen<'tcx>(\n     info!(\"Post-codegen\\n{:?}\", tcx.debug_stats());\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {\n-        if let Err(error) = rustc_mir_transform::dump_mir::emit_mir(tcx, outputs) {\n+        if let Err(error) = rustc_mir_transform::dump_mir::emit_mir(tcx) {\n             tcx.sess.emit_err(CantEmitMIR { error });\n             tcx.sess.abort_if_errors();\n         }"}, {"sha": "f5ddd647b2435f157d4645fcf4107c11cd639f93", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c38ff3b3853dabcd524ba0e3faf2521e2172af38/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38ff3b3853dabcd524ba0e3faf2521e2172af38/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=c38ff3b3853dabcd524ba0e3faf2521e2172af38", "patch": "@@ -20,6 +20,7 @@ use rustc_span::symbol::sym;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n use std::rc::Rc;\n+use std::sync::Arc;\n \n /// Represent the result of a query.\n ///\n@@ -214,7 +215,7 @@ impl<'tcx> Queries<'tcx> {\n     pub fn global_ctxt(&'tcx self) -> Result<&Query<QueryContext<'tcx>>> {\n         self.global_ctxt.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n-            let outputs = self.prepare_outputs()?.peek().clone();\n+            let outputs = self.prepare_outputs()?.take();\n             let dep_graph = self.dep_graph()?.peek().clone();\n             let (krate, resolver, lint_store) = self.expansion()?.take();\n             Ok(passes::create_global_ctxt(\n@@ -235,7 +236,6 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn ongoing_codegen(&'tcx self) -> Result<&Query<Box<dyn Any>>> {\n         self.ongoing_codegen.compute(|| {\n-            let outputs = self.prepare_outputs()?;\n             self.global_ctxt()?.peek_mut().enter(|tcx| {\n                 tcx.analysis(()).ok();\n \n@@ -249,7 +249,7 @@ impl<'tcx> Queries<'tcx> {\n                 // Hook for UI tests.\n                 Self::check_for_rustc_errors_attr(tcx);\n \n-                Ok(passes::start_codegen(&***self.codegen_backend(), tcx, &*outputs.peek()))\n+                Ok(passes::start_codegen(&***self.codegen_backend(), tcx))\n             })\n         })\n     }\n@@ -293,8 +293,10 @@ impl<'tcx> Queries<'tcx> {\n         let codegen_backend = self.codegen_backend().clone();\n \n         let dep_graph = self.dep_graph()?.peek().clone();\n-        let prepare_outputs = self.prepare_outputs()?.take();\n-        let crate_hash = self.global_ctxt()?.peek_mut().enter(|tcx| tcx.crate_hash(LOCAL_CRATE));\n+        let (crate_hash, prepare_outputs) = self\n+            .global_ctxt()?\n+            .peek_mut()\n+            .enter(|tcx| (tcx.crate_hash(LOCAL_CRATE), tcx.output_filenames(()).clone()));\n         let ongoing_codegen = self.ongoing_codegen()?.take();\n \n         Ok(Linker {\n@@ -316,7 +318,7 @@ pub struct Linker {\n \n     // compilation outputs\n     dep_graph: DepGraph,\n-    prepare_outputs: OutputFilenames,\n+    prepare_outputs: Arc<OutputFilenames>,\n     crate_hash: Svh,\n     ongoing_codegen: Box<dyn Any>,\n }"}, {"sha": "4fa440c7ca691128fa8c03012ff8c03efcdc1bab", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c38ff3b3853dabcd524ba0e3faf2521e2172af38/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38ff3b3853dabcd524ba0e3faf2521e2172af38/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=c38ff3b3853dabcd524ba0e3faf2521e2172af38", "patch": "@@ -6,7 +6,7 @@ use crate::{encode_metadata, EncodedMetadata};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{CrateType, OutputFilenames, OutputType};\n+use rustc_session::config::{CrateType, OutputType};\n use rustc_session::output::filename_for_metadata;\n use rustc_session::Session;\n use tempfile::Builder as TempFileBuilder;\n@@ -38,10 +38,7 @@ pub fn emit_wrapper_file(\n     out_filename\n }\n \n-pub fn encode_and_write_metadata(\n-    tcx: TyCtxt<'_>,\n-    outputs: &OutputFilenames,\n-) -> (EncodedMetadata, bool) {\n+pub fn encode_and_write_metadata(tcx: TyCtxt<'_>) -> (EncodedMetadata, bool) {\n     #[derive(PartialEq, Eq, PartialOrd, Ord)]\n     enum MetadataKind {\n         None,\n@@ -64,7 +61,8 @@ pub fn encode_and_write_metadata(\n         .unwrap_or(MetadataKind::None);\n \n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n-    let out_filename = filename_for_metadata(tcx.sess, crate_name.as_str(), outputs);\n+    let out_filename =\n+        filename_for_metadata(tcx.sess, crate_name.as_str(), tcx.output_filenames(()));\n     // To avoid races with another rustc process scanning the output directory,\n     // we need to write the file somewhere else and atomically move it to its\n     // final destination, with an `fs::rename` call. In order for the rename to"}, {"sha": "7b5cf39a02c482d0b65093d5011de9f57868c857", "filename": "compiler/rustc_mir_transform/src/dump_mir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c38ff3b3853dabcd524ba0e3faf2521e2172af38/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38ff3b3853dabcd524ba0e3faf2521e2172af38/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs?ref=c38ff3b3853dabcd524ba0e3faf2521e2172af38", "patch": "@@ -8,7 +8,7 @@ use crate::MirPass;\n use rustc_middle::mir::write_mir_pretty;\n use rustc_middle::mir::Body;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{OutputFilenames, OutputType};\n+use rustc_session::config::OutputType;\n \n pub struct Marker(pub &'static str);\n \n@@ -20,8 +20,8 @@ impl<'tcx> MirPass<'tcx> for Marker {\n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, _body: &mut Body<'tcx>) {}\n }\n \n-pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n-    let path = outputs.path(OutputType::Mir);\n+pub fn emit_mir(tcx: TyCtxt<'_>) -> io::Result<()> {\n+    let path = tcx.output_filenames(()).path(OutputType::Mir);\n     let mut f = io::BufWriter::new(File::create(&path)?);\n     write_mir_pretty(tcx, None, &mut f)?;\n     Ok(())"}]}