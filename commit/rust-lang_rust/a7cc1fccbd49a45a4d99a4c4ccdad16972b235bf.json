{"sha": "a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Y2MxZmNjYmQ0OWE0NWE0ZDk5YTRjNGNjZGFkMTY5NzJiMjM1YmY=", "commit": {"author": {"name": "Son", "email": "leson.phung@gmail.com", "date": "2018-09-25T18:45:41Z"}, "committer": {"name": "Son", "email": "leson.phung@gmail.com", "date": "2018-09-25T18:45:41Z"}, "message": "Examples for docs", "tree": {"sha": "e31e59d48aaa96f2f401e7fccb7821fa826a8bee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e31e59d48aaa96f2f401e7fccb7821fa826a8bee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf", "html_url": "https://github.com/rust-lang/rust/commit/a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf/comments", "author": {"login": "phungleson", "id": 93457, "node_id": "MDQ6VXNlcjkzNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/93457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phungleson", "html_url": "https://github.com/phungleson", "followers_url": "https://api.github.com/users/phungleson/followers", "following_url": "https://api.github.com/users/phungleson/following{/other_user}", "gists_url": "https://api.github.com/users/phungleson/gists{/gist_id}", "starred_url": "https://api.github.com/users/phungleson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phungleson/subscriptions", "organizations_url": "https://api.github.com/users/phungleson/orgs", "repos_url": "https://api.github.com/users/phungleson/repos", "events_url": "https://api.github.com/users/phungleson/events{/privacy}", "received_events_url": "https://api.github.com/users/phungleson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phungleson", "id": 93457, "node_id": "MDQ6VXNlcjkzNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/93457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phungleson", "html_url": "https://github.com/phungleson", "followers_url": "https://api.github.com/users/phungleson/followers", "following_url": "https://api.github.com/users/phungleson/following{/other_user}", "gists_url": "https://api.github.com/users/phungleson/gists{/gist_id}", "starred_url": "https://api.github.com/users/phungleson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phungleson/subscriptions", "organizations_url": "https://api.github.com/users/phungleson/orgs", "repos_url": "https://api.github.com/users/phungleson/repos", "events_url": "https://api.github.com/users/phungleson/events{/privacy}", "received_events_url": "https://api.github.com/users/phungleson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcda7b2871703f704f95ea4d83552827e69938bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcda7b2871703f704f95ea4d83552827e69938bd", "html_url": "https://github.com/rust-lang/rust/commit/fcda7b2871703f704f95ea4d83552827e69938bd"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "cfc256f3644d79a3192ee25df5e5408c089f743b", "filename": "src/libstd/error.rs", "status": "modified", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=a7cc1fccbd49a45a4d99a4c4ccdad16972b235bf", "patch": "@@ -153,6 +153,36 @@ pub trait Error: Debug + Display {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     /// Converts a type of [`Error`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    /// use std::mem;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct AnError;\n+    ///\n+    /// impl fmt::Display for AnError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f , \"An error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for AnError {\n+    ///     fn description(&self) -> &str {\n+    ///         \"Description of an error\"\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let an_error = AnError;\n+    ///     assert!(0 == mem::size_of_val(&an_error));\n+    ///     let a_boxed_error = Box::<Error>::from(an_error);\n+    ///     assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// }\n+    /// ```\n     fn from(err: E) -> Box<dyn Error + 'a> {\n         Box::new(err)\n     }\n@@ -162,6 +192,41 @@ impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of dyn [`Error`] +\n     /// [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    /// use std::mem;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct AnError;\n+    ///\n+    /// impl fmt::Display for AnError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f , \"An error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for AnError {\n+    ///     fn description(&self) -> &str {\n+    ///         \"Description of an error\"\n+    ///     }\n+    /// }\n+    ///\n+    /// unsafe impl Send for AnError {}\n+    ///\n+    /// unsafe impl Sync for AnError {}\n+    ///\n+    /// fn main() {\n+    ///     let an_error = AnError;\n+    ///     assert!(0 == mem::size_of_val(&an_error));\n+    ///     let a_boxed_error = Box::<Error + Send + Sync>::from(an_error);\n+    ///     assert!(\n+    ///         mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// }\n+    /// ```\n     fn from(err: E) -> Box<dyn Error + Send + Sync + 'a> {\n         Box::new(err)\n     }\n@@ -170,6 +235,20 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for Box<dyn Error + Send + Sync> {\n     /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// fn main() {\n+    ///     let a_string_error = \"a string error\".to_string();\n+    ///     let a_boxed_error = Box::<Error + Send + Sync>::from(a_string_error);\n+    ///     assert!(\n+    ///         mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// }\n+    /// ```\n     fn from(err: String) -> Box<dyn Error + Send + Sync> {\n         #[derive(Debug)]\n         struct StringError(String);\n@@ -191,6 +270,19 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl From<String> for Box<dyn Error> {\n     /// Converts a [`String`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// fn main() {\n+    ///     let a_string_error = \"a string error\".to_string();\n+    ///     let a_boxed_error = Box::<Error>::from(a_string_error);\n+    ///     assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// }\n+    /// ```\n     fn from(str_err: String) -> Box<dyn Error> {\n         let err1: Box<dyn Error + Send + Sync> = From::from(str_err);\n         let err2: Box<dyn Error> = err1;\n@@ -201,6 +293,20 @@ impl From<String> for Box<dyn Error> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// fn main() {\n+    ///     let a_str_error = \"a str error\";\n+    ///     let a_boxed_error = Box::<Error + Send + Sync>::from(a_str_error);\n+    ///     assert!(\n+    ///         mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// }\n+    /// ```\n     fn from(err: &'b str) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n@@ -209,6 +315,19 @@ impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {\n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl<'a> From<&'a str> for Box<dyn Error> {\n     /// Converts a [`str`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// fn main() {\n+    ///     let a_str_error = \"a str error\";\n+    ///     let a_boxed_error = Box::<Error>::from(a_str_error);\n+    ///     assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// }\n+    /// ```\n     fn from(err: &'a str) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }\n@@ -217,6 +336,21 @@ impl<'a> From<&'a str> for Box<dyn Error> {\n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    /// use std::borrow::Cow;\n+    ///\n+    /// fn main() {\n+    ///     let a_cow_str_error = Cow::from(\"a str error\");\n+    ///     let a_boxed_error = Box::<Error + Send + Sync>::from(a_cow_str_error);\n+    ///     assert!(\n+    ///         mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// }\n+    /// ```\n     fn from(err: Cow<'b, str>) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n@@ -225,6 +359,20 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    /// use std::borrow::Cow;\n+    ///\n+    /// fn main() {\n+    ///     let a_cow_str_error = Cow::from(\"a str error\");\n+    ///     let a_boxed_error = Box::<Error>::from(a_cow_str_error);\n+    ///     assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// }\n+    /// ```\n     fn from(err: Cow<'a, str>) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }"}]}