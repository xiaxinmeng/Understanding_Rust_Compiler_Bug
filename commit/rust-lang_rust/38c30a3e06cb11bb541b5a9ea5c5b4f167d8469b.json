{"sha": "38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YzMwYTNlMDZjYjExYmI1NDFiNWE5ZWE1YzViNGYxNjdkODQ2OWI=", "commit": {"author": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-06-17T17:00:58Z"}, "committer": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-06-17T17:00:58Z"}, "message": "Refactor format against types and generics\n\nPrevious implementation relied on the fact that rustfmt used visual indent\nstyle as a default. However, since now rustfmt uses block indent style against\nmost part of the code, we need some refactorings.", "tree": {"sha": "311cce1a25bd77ada306579df26a30bc014a832b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/311cce1a25bd77ada306579df26a30bc014a832b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b", "html_url": "https://github.com/rust-lang/rust/commit/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b/comments", "author": null, "committer": null, "parents": [{"sha": "59c0e4c7466cbff56d0db12455c9838717bef19e", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c0e4c7466cbff56d0db12455c9838717bef19e", "html_url": "https://github.com/rust-lang/rust/commit/59c0e4c7466cbff56d0db12455c9838717bef19e"}], "stats": {"total": 153, "additions": 94, "deletions": 59}, "files": [{"sha": "ede20f331a26408e83a0bb5e945083f5f2fc7652", "filename": "src/items.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b", "patch": "@@ -703,16 +703,17 @@ fn format_impl_ref_and_type(\n             Some(ref tr) => tr.path.span.lo,\n             None => self_ty.span.lo,\n         };\n-        let shape = generics_shape_from_config(\n+        let shape = try_opt!(generics_shape_from_config(\n             context.config,\n             Shape::indented(offset + last_line_width(&result), context.config),\n             0,\n-        );\n+        ));\n+        let one_line_budget = try_opt!(shape.width.checked_sub(last_line_width(&result) + 2));\n         let generics_str = try_opt!(rewrite_generics_inner(\n             context,\n             generics,\n             shape,\n-            shape.width,\n+            one_line_budget,\n             mk_sp(lo, hi),\n         ));\n \n@@ -925,7 +926,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         let trait_bound_str = try_opt!(rewrite_trait_bounds(\n             context,\n             type_param_bounds,\n-            Shape::legacy(context.config.max_width(), offset),\n+            Shape::indented(offset, context.config),\n         ));\n         // If the trait, generics, and trait bound cannot fit on the same line,\n         // put the trait bounds on an indented new line\n@@ -1591,7 +1592,7 @@ pub fn rewrite_associated_type(\n     let prefix = format!(\"type {}\", ident);\n \n     let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n-        let shape = Shape::legacy(context.config.max_width(), indent);\n+        let shape = Shape::indented(indent, context.config);\n         let bounds: &[_] = ty_param_bounds;\n         let bound_str = try_opt!(\n             bounds\n@@ -1900,7 +1901,8 @@ fn rewrite_fn_base(\n \n     if context.config.fn_args_layout() == IndentStyle::Block {\n         arg_indent = indent.block_indent(context.config);\n-        multi_line_budget = context.config.max_width() - arg_indent.width();\n+        // 1 = \",\"\n+        multi_line_budget = context.config.max_width() - (arg_indent.width() + 1);\n     }\n \n     debug!(\n@@ -2388,9 +2390,11 @@ fn rewrite_generics(\n     shape: Shape,\n     span: Span,\n ) -> Option<String> {\n-    let shape = generics_shape_from_config(context.config, shape, 0);\n-    rewrite_generics_inner(context, generics, shape, shape.width, span)\n-        .or_else(|| rewrite_generics_inner(context, generics, shape, 0, span))\n+    let g_shape = try_opt!(generics_shape_from_config(context.config, shape, 0));\n+    let one_line_width = try_opt!(shape.width.checked_sub(2));\n+    rewrite_generics_inner(context, generics, g_shape, one_line_width, span).or_else(|| {\n+        rewrite_generics_inner(context, generics, g_shape, 0, span)\n+    })\n }\n \n fn rewrite_generics_inner(\n@@ -2437,14 +2441,17 @@ fn rewrite_generics_inner(\n     format_generics_item_list(context, items, shape, one_line_width)\n }\n \n-pub fn generics_shape_from_config(config: &Config, shape: Shape, offset: usize) -> Shape {\n-    Shape {\n-        // 2 = `<>`\n-        width: shape.width.checked_sub(offset + 2).unwrap_or(0),\n-        ..match config.generics_indent() {\n-              IndentStyle::Visual => shape.visual_indent(1 + offset),\n-              IndentStyle::Block => shape.block().block_indent(config.tab_spaces()),\n-          }\n+pub fn generics_shape_from_config(config: &Config, shape: Shape, offset: usize) -> Option<Shape> {\n+    match config.generics_indent() {\n+        IndentStyle::Visual => shape.visual_indent(1 + offset).sub_width(offset + 2),\n+        IndentStyle::Block => {\n+            // 1 = \",\"\n+            shape\n+                .block()\n+                .block_indent(config.tab_spaces())\n+                .with_max_width(config)\n+                .sub_width(1)\n+        }\n     }\n }\n \n@@ -2533,7 +2540,7 @@ fn rewrite_where_clause_rfc_style(\n     snuggle: bool,\n     span_end: Option<BytePos>,\n ) -> Option<String> {\n-    let block_shape = shape.block();\n+    let block_shape = shape.block().with_max_width(context.config);\n \n     let starting_newline = if snuggle {\n         \" \".to_owned()\n@@ -2555,7 +2562,7 @@ fn rewrite_where_clause_rfc_style(\n         terminator,\n         |pred| span_for_where_pred(pred).lo,\n         |pred| span_for_where_pred(pred).hi,\n-        |pred| pred.rewrite(context, shape),\n+        |pred| pred.rewrite(context, block_shape),\n         span_start,\n         span_end,\n     );"}, {"sha": "ced56cc6de96d5faa1824c9576f5428279138987", "filename": "src/lists.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b", "patch": "@@ -68,18 +68,6 @@ pub struct ListFormatting<'a> {\n     pub config: &'a Config,\n }\n \n-pub fn format_fn_args<I>(items: I, shape: Shape, config: &Config) -> Option<String>\n-where\n-    I: Iterator<Item = ListItem>,\n-{\n-    list_helper(\n-        items,\n-        shape,\n-        config,\n-        ListTactic::LimitedHorizontalVertical(config.fn_call_width()),\n-    )\n-}\n-\n pub fn format_item_list<I>(items: I, shape: Shape, config: &Config) -> Option<String>\n where\n     I: Iterator<Item = ListItem>,"}, {"sha": "5e815c73b5b8c170f0e5cf4395a9a07888fb8968", "filename": "src/types.rs", "status": "modified", "additions": 68, "deletions": 28, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b", "patch": "@@ -20,11 +20,12 @@ use syntax::symbol::keywords;\n use {Shape, Spanned};\n use codemap::SpanUtils;\n use items::{format_generics_item_list, generics_shape_from_config};\n-use lists::{itemize_list, format_fn_args};\n+use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n+            definitive_tactic};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, format_mutability, colon_spaces, wrap_str, mk_sp, last_line_width};\n-use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n-use config::{Style, TypeDensity};\n+use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple, wrap_args_with_parens};\n+use config::{IndentStyle, Style, TypeDensity};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum PathContext {\n@@ -224,8 +225,12 @@ fn rewrite_segment(\n                     \"\"\n                 };\n \n-                let generics_shape =\n-                    generics_shape_from_config(context.config, shape, separator.len());\n+                let generics_shape = try_opt!(generics_shape_from_config(\n+                    context.config,\n+                    shape,\n+                    separator.len(),\n+                ));\n+                let one_line_width = try_opt!(shape.width.checked_sub(separator.len() + 2));\n                 let items = itemize_list(\n                     context.codemap,\n                     param_list.into_iter(),\n@@ -240,7 +245,7 @@ fn rewrite_segment(\n                     context,\n                     items,\n                     generics_shape,\n-                    generics_shape.width,\n+                    one_line_width,\n                 ));\n \n                 // Update position of last bracket.\n@@ -305,7 +310,16 @@ where\n     // 2 for ()\n     let budget = try_opt!(shape.width.checked_sub(2));\n     // 1 for (\n-    let offset = shape.indent + 1;\n+    let offset = match context.config.fn_args_layout() {\n+        IndentStyle::Block => {\n+            shape\n+                .block()\n+                .block_indent(context.config.tab_spaces())\n+                .indent\n+        }\n+        IndentStyle::Visual => shape.indent + 1,\n+    };\n+    let list_shape = Shape::legacy(budget, offset);\n     let list_lo = context.codemap.span_after(span, \"(\");\n     let items = itemize_list(\n         context.codemap,\n@@ -324,39 +338,64 @@ where\n             ArgumentKind::Variadic(start) => start + BytePos(3),\n         },\n         |arg| match *arg {\n-            ArgumentKind::Regular(ref ty) => ty.rewrite(context, Shape::legacy(budget, offset)),\n+            ArgumentKind::Regular(ref ty) => ty.rewrite(context, list_shape),\n             ArgumentKind::Variadic(_) => Some(\"...\".to_owned()),\n         },\n         list_lo,\n         span.hi,\n     );\n \n-    let list_str = try_opt!(format_fn_args(\n-        items,\n-        Shape::legacy(budget, offset),\n-        context.config,\n-    ));\n+    let item_vec: Vec<_> = items.collect();\n+\n+    let tactic = definitive_tactic(&*item_vec, ListTactic::HorizontalVertical, budget);\n+\n+    let fmt = ListFormatting {\n+        tactic: tactic,\n+        separator: \",\",\n+        trailing_separator: if !context.use_block_indent() || variadic {\n+            SeparatorTactic::Never\n+        } else {\n+            context.config.trailing_comma()\n+        },\n+        shape: list_shape,\n+        ends_with_newline: false,\n+        config: context.config,\n+    };\n \n+    let list_str = try_opt!(write_list(&item_vec, &fmt));\n+\n+    let ty_shape = match context.config.fn_args_layout() {\n+        IndentStyle::Block => shape.block().block_indent(context.config.tab_spaces()),\n+        IndentStyle::Visual => try_opt!(shape.block_left(4)),\n+    };\n     let output = match *output {\n         FunctionRetTy::Ty(ref ty) => {\n-            let budget = try_opt!(shape.width.checked_sub(4));\n-            let type_str = try_opt!(ty.rewrite(context, Shape::legacy(budget, offset + 4)));\n+            let type_str = try_opt!(ty.rewrite(context, ty_shape));\n             format!(\" -> {}\", type_str)\n         }\n         FunctionRetTy::Default(..) => String::new(),\n     };\n \n-    let infix = if !output.is_empty() && output.len() + list_str.len() > shape.width {\n-        format!(\"\\n{}\", (offset - 1).to_string(context.config))\n+    let shape = try_opt!(shape.sub_width(output.len()));\n+    let extendable = !list_str.contains('\\n') || list_str.is_empty();\n+    let args = wrap_args_with_parens(\n+        context,\n+        &list_str,\n+        extendable,\n+        shape,\n+        Shape::indented(offset, context.config),\n+    );\n+    if last_line_width(&args) + output.len() > shape.width {\n+        Some(format!(\n+            \"{}\\n{}{}\",\n+            args,\n+            offset.to_string(context.config),\n+            output.trim_left()\n+        ))\n     } else {\n-        String::new()\n-    };\n+        Some(format!(\"{}{}\", args, output))\n+    }\n \n-    Some(if context.config.spaces_within_parens() {\n-        format!(\"( {} ){}{}\", list_str, infix, output)\n-    } else {\n-        format!(\"({}){}{}\", list_str, infix, output)\n-    })\n }\n \n fn type_bound_colon(context: &RewriteContext) -> &'static str {\n@@ -422,7 +461,9 @@ impl Rewrite for ast::WherePredicate {\n                             .map(|ty_bound| ty_bound.rewrite(context, ty_shape))\n                             .collect()\n                     );\n-                    let bounds_str = join_bounds(context, ty_shape, &bounds);\n+                    let overhead = type_str.len() + colon.len();\n+                    let bounds_str =\n+                        join_bounds(context, try_opt!(ty_shape.sub_width(overhead)), &bounds);\n \n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n                 }\n@@ -760,16 +801,15 @@ fn rewrite_bare_fn(\n \n     result.push_str(\"fn\");\n \n-    let budget = try_opt!(shape.width.checked_sub(result.len()));\n-    let indent = shape.indent + result.len();\n+    let func_ty_shape = try_opt!(shape.offset_left(result.len()));\n \n     let rewrite = try_opt!(format_function_type(\n         bare_fn.decl.inputs.iter(),\n         &bare_fn.decl.output,\n         bare_fn.decl.variadic,\n         span,\n         context,\n-        Shape::legacy(budget, indent),\n+        func_ty_shape,\n     ));\n \n     result.push_str(&rewrite);"}]}