{"sha": "bcf626812b88f63932c541f81c7f68360e31a7c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjYyNjgxMmI4OGY2MzkzMmM1NDFmODFjN2Y2ODM2MGUzMWE3YzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-28T03:53:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-01T22:55:47Z"}, "message": "Rename core::private to core::unstable. #4743", "tree": {"sha": "5049b1f9dd5bb7d6f384202145cea2c939adb773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5049b1f9dd5bb7d6f384202145cea2c939adb773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf626812b88f63932c541f81c7f68360e31a7c1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf626812b88f63932c541f81c7f68360e31a7c1", "html_url": "https://github.com/rust-lang/rust/commit/bcf626812b88f63932c541f81c7f68360e31a7c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf626812b88f63932c541f81c7f68360e31a7c1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab8ec242bc34dceb8aded6ec71ddf17e5966d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab8ec242bc34dceb8aded6ec71ddf17e5966d86", "html_url": "https://github.com/rust-lang/rust/commit/cab8ec242bc34dceb8aded6ec71ddf17e5966d86"}], "stats": {"total": 115, "additions": 59, "deletions": 56}, "files": [{"sha": "d89481766c0af3f742bc7dcb91d7ddae4fa9c928", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -183,7 +183,7 @@ pub mod raw {\n     use at_vec::{capacity, rustrt};\n     use cast::transmute;\n     use libc;\n-    use private::intrinsics::{move_val_init};\n+    use unstable::intrinsics::{move_val_init};\n     use ptr::addr_of;\n     use ptr;\n     use sys;"}, {"sha": "94272f63e6727388405413a19138e8dcc2bda0fc", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -12,7 +12,7 @@ use either::{Either, Left, Right};\n use kinds::Owned;\n use option;\n use option::{Option, Some, None, unwrap};\n-use private;\n+use unstable;\n use vec;\n \n use pipes::{recv, try_recv, wait_many, peek, PacketHeader};\n@@ -242,7 +242,7 @@ impl<T: Owned> Peekable<T> for PortSet<T> {\n }\n \n /// A channel that can be shared between many senders.\n-pub type SharedChan<T> = private::Exclusive<Chan<T>>;\n+pub type SharedChan<T> = unstable::Exclusive<Chan<T>>;\n \n impl<T: Owned> GenericChan<T> for SharedChan<T> {\n     fn send(x: T) {\n@@ -268,7 +268,7 @@ impl<T: Owned> GenericSmartChan<T> for SharedChan<T> {\n \n /// Converts a `chan` into a `shared_chan`.\n pub fn SharedChan<T:Owned>(c: Chan<T>) -> SharedChan<T> {\n-    private::exclusive(c)\n+    unstable::exclusive(c)\n }\n \n /// Receive a message from one of two endpoints."}, {"sha": "525887f8cb33ce278ab4aa8e94e3edcb206ae72e", "filename": "src/libcore/core.rc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -228,8 +228,12 @@ pub const debug : u32 = 4_u32;\n // The runtime interface used by the compiler\n #[cfg(notest)] pub mod rt;\n // Private APIs\n-pub mod private;\n-\n+pub mod unstable;\n+// NOTE: Remove after snapshot\n+#[cfg(stage0)]\n+pub mod private {\n+    pub use super::unstable::extfmt;\n+}\n \n /* For internal use, not exported */\n "}, {"sha": "d4808bd111ffac921365e64c31fe4eb0c30a75d1", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -18,7 +18,7 @@ use num::strconv;\n use num;\n use ops;\n use option::Option;\n-use private::intrinsics::floorf32;\n+use unstable::intrinsics::floorf32;\n use from_str;\n use to_str;\n "}, {"sha": "5362a65f7cef7258b2f8630a1e4132c037285033", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -19,7 +19,7 @@ use num::strconv;\n use num;\n use ops;\n use option::Option;\n-use private::intrinsics::floorf64;\n+use unstable::intrinsics::floorf64;\n use to_str;\n use from_str;\n "}, {"sha": "5ede0c550ffed093c0ee222a388fb8ce1e75f0b1", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -35,7 +35,6 @@ use libc::{mode_t, pid_t, FILE};\n use option;\n use option::{Some, None};\n use prelude::*;\n-use private;\n use ptr;\n use str;\n use task;\n@@ -145,8 +144,8 @@ This uses a per-runtime lock to serialize access.\n FIXME #4726: It would probably be appropriate to make this a real global\n */\n fn with_env_lock<T>(f: &fn() -> T) -> T {\n-    use private::global::global_data_clone_create;\n-    use private::{Exclusive, exclusive};\n+    use unstable::global::global_data_clone_create;\n+    use unstable::{Exclusive, exclusive};\n \n     struct SharedValue(());\n     type ValueMutex = Exclusive<SharedValue>;"}, {"sha": "58ab2ce78f5f98a1cf7007060c90bfc6bf58e099", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -91,9 +91,9 @@ use libc;\n use option;\n use option::{None, Option, Some, unwrap};\n use pipes;\n-use private::intrinsics;\n+use unstable::intrinsics;\n use ptr;\n-use private;\n+use unstable;\n use task;\n use vec;\n "}, {"sha": "422d9a6eea0a2b47eaff5e16ecc4c8fa500ae2c3", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -69,7 +69,7 @@ pub use option;\n pub use os;\n pub use path;\n pub use comm;\n-pub use private;\n+pub use unstable;\n pub use ptr;\n pub use rand;\n pub use result;"}, {"sha": "5a7b319e7ff3471168a16d66d2ef5d6d031f47f1", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -14,7 +14,7 @@ use cast;\n use cmp::{Eq, Ord};\n use libc;\n use libc::{c_void, size_t};\n-use private::intrinsics::{memmove32,memmove64};\n+use unstable::intrinsics::{memmove32,memmove64};\n use ptr;\n use str;\n use sys;"}, {"sha": "a4f90e37683ed8b86147bd4fc4b7d8c0062e26fe", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -15,7 +15,7 @@ use libc::{c_char, c_uchar, c_void, size_t, uintptr_t, c_int};\n use managed::raw::BoxRepr;\n use str;\n use sys;\n-use private::exchange_alloc;\n+use unstable::exchange_alloc;\n use cast::transmute;\n \n use gc::{cleanup_stack_for_failure, gc, Word};"}, {"sha": "6cc3657a32b4e106e3d7993f2f596a0ca99ba302", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -79,7 +79,7 @@ use option;\n use comm::{Chan, GenericChan, GenericPort, Port, stream};\n use pipes;\n use prelude::*;\n-use private;\n+use unstable;\n use ptr;\n use hashmap::linear::LinearSet;\n use task::local_data_priv::{local_get, local_set};\n@@ -123,7 +123,7 @@ struct TaskGroupData {\n     // tasks in this group.\n     mut descendants: TaskSet,\n }\n-type TaskGroupArc = private::Exclusive<Option<TaskGroupData>>;\n+type TaskGroupArc = unstable::Exclusive<Option<TaskGroupData>>;\n \n type TaskGroupInner = &mut Option<TaskGroupData>;\n \n@@ -153,7 +153,7 @@ struct AncestorNode {\n     mut ancestors:    AncestorList,\n }\n \n-enum AncestorList = Option<private::Exclusive<AncestorNode>>;\n+enum AncestorList = Option<unstable::Exclusive<AncestorNode>>;\n \n // Accessors for taskgroup arcs and ancestor arcs that wrap the unsafety.\n #[inline(always)]\n@@ -162,7 +162,7 @@ fn access_group<U>(x: &TaskGroupArc, blk: fn(TaskGroupInner) -> U) -> U {\n }\n \n #[inline(always)]\n-fn access_ancestors<U>(x: &private::Exclusive<AncestorNode>,\n+fn access_ancestors<U>(x: &unstable::Exclusive<AncestorNode>,\n                        blk: fn(x: &mut AncestorNode) -> U) -> U {\n     unsafe { x.with(blk) }\n }\n@@ -458,7 +458,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n                 // Main task, doing first spawn ever. Lazily initialise here.\n                 let mut members = new_taskset();\n                 taskset_insert(&mut members, spawner);\n-                let tasks = private::exclusive(Some(TaskGroupData {\n+                let tasks = unstable::exclusive(Some(TaskGroupData {\n                     members: members,\n                     descendants: new_taskset(),\n                 }));\n@@ -482,7 +482,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n             (g, a, spawner_group.is_main)\n         } else {\n             // Child is in a separate group from spawner.\n-            let g = private::exclusive(Some(TaskGroupData {\n+            let g = unstable::exclusive(Some(TaskGroupData {\n                 members:     new_taskset(),\n                 descendants: new_taskset(),\n             }));\n@@ -502,7 +502,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n                     };\n                 assert new_generation < uint::max_value;\n                 // Build a new node in the ancestor list.\n-                AncestorList(Some(private::exclusive(AncestorNode {\n+                AncestorList(Some(unstable::exclusive(AncestorNode {\n                     generation: new_generation,\n                     parent_group: Some(spawner_group.tasks.clone()),\n                     ancestors: old_ancestors,"}, {"sha": "b7b4b56342528267b9885f87803fba4297e266a6", "filename": "src/libcore/unstable.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -22,19 +22,19 @@ use task;\n use task::{TaskBuilder, atomically};\n use uint;\n \n-#[path = \"private/at_exit.rs\"]\n+#[path = \"unstable/at_exit.rs\"]\n pub mod at_exit;\n-#[path = \"private/global.rs\"]\n+#[path = \"unstable/global.rs\"]\n pub mod global;\n-#[path = \"private/finally.rs\"]\n+#[path = \"unstable/finally.rs\"]\n pub mod finally;\n-#[path = \"private/weak_task.rs\"]\n+#[path = \"unstable/weak_task.rs\"]\n pub mod weak_task;\n-#[path = \"private/exchange_alloc.rs\"]\n+#[path = \"unstable/exchange_alloc.rs\"]\n pub mod exchange_alloc;\n-#[path = \"private/intrinsics.rs\"]\n+#[path = \"unstable/intrinsics.rs\"]\n pub mod intrinsics;\n-#[path = \"private/extfmt.rs\"]\n+#[path = \"unstable/extfmt.rs\"]\n pub mod extfmt;\n \n extern mod rustrt {\n@@ -312,7 +312,7 @@ pub mod tests {\n     use cell::Cell;\n     use comm;\n     use option;\n-    use private::exclusive;\n+    use super::exclusive;\n     use result;\n     use task;\n     use uint;", "previous_filename": "src/libcore/private.rs"}, {"sha": "4785cb622cbc511da3335182658566418f97ffa2", "filename": "src/libcore/unstable/at_exit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fat_exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fat_exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fat_exit.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "previous_filename": "src/libcore/private/at_exit.rs"}, {"sha": "f59037445ebd0cc2087238e74b8f0322e9010351", "filename": "src/libcore/unstable/exchange_alloc.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fexchange_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fexchange_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fexchange_alloc.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -14,7 +14,7 @@ use c_malloc = libc::malloc;\n use c_free = libc::free;\n use managed::raw::{BoxHeaderRepr, BoxRepr};\n use cast::transmute;\n-use private::intrinsics::{atomic_xadd,atomic_xsub};\n+use unstable::intrinsics::{atomic_xadd,atomic_xsub};\n use ptr::null;\n use intrinsic::TyDesc;\n ", "previous_filename": "src/libcore/private/exchange_alloc.rs"}, {"sha": "616d37a133a9f18af4e6b5fba03105a5754c3cc0", "filename": "src/libcore/unstable/extfmt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "previous_filename": "src/libcore/private/extfmt.rs"}, {"sha": "ff75963511c3806cced8bf47f7a970e2c67e6ad5", "filename": "src/libcore/unstable/finally.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Ffinally.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "previous_filename": "src/libcore/private/finally.rs"}, {"sha": "aa28310f7ba29a616ffbb68c2f2d75cbc3552f9a", "filename": "src/libcore/unstable/global.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fglobal.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -32,11 +32,11 @@ use libc::{c_void, uintptr_t};\n use option::{Option, Some, None};\n use ops::Drop;\n use pipes;\n-use private::{Exclusive, exclusive};\n-use private::{SharedMutableState, shared_mutable_state};\n-use private::{get_shared_immutable_state};\n-use private::at_exit::at_exit;\n-use private::intrinsics::atomic_cxchg;\n+use unstable::{Exclusive, exclusive};\n+use unstable::{SharedMutableState, shared_mutable_state};\n+use unstable::{get_shared_immutable_state};\n+use unstable::at_exit::at_exit;\n+use unstable::intrinsics::atomic_cxchg;\n use hashmap::linear::LinearMap;\n use sys::Closure;\n use task::spawn;", "previous_filename": "src/libcore/private/global.rs"}, {"sha": "8f0067b739335d15baf1582b362751cf021dbc89", "filename": "src/libcore/unstable/intrinsics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fintrinsics.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "previous_filename": "src/libcore/private/intrinsics.rs"}, {"sha": "0e1181f43dbc91c55ae7a25ccaa3f07cd2183aca", "filename": "src/libcore/unstable/weak_task.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Funstable%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fweak_task.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -24,9 +24,9 @@ use comm::{Port, Chan, SharedChan, GenericChan, GenericPort};\n use hashmap::linear::LinearMap;\n use ops::Drop;\n use option::{Some, None, swap_unwrap};\n-use private::at_exit::at_exit;\n-use private::finally::Finally;\n-use private::global::global_data_clone_create;\n+use unstable::at_exit::at_exit;\n+use unstable::finally::Finally;\n+use unstable::global::global_data_clone_create;\n use task::rt::{task_id, get_task_id};\n use task::{Task, task, spawn};\n ", "previous_filename": "src/libcore/private/weak_task.rs"}, {"sha": "0d1be03638afeb4afc47cdfbcd8ce960a7fbf7c2", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -22,7 +22,7 @@ use kinds::Copy;\n use libc;\n use libc::size_t;\n use option::{None, Option, Some};\n-use private::intrinsics;\n+use unstable::intrinsics;\n use ptr;\n use ptr::addr_of;\n use sys;\n@@ -2008,7 +2008,7 @@ pub mod raw {\n     use managed;\n     use option::{None, Some};\n     use option;\n-    use private::intrinsics;\n+    use unstable::intrinsics;\n     use ptr::addr_of;\n     use ptr;\n     use sys;\n@@ -2622,8 +2622,8 @@ mod tests {\n     #[test]\n     fn test_swap_remove_noncopyable() {\n         // Tests that we don't accidentally run destructors twice.\n-        let mut v = ~[::private::exclusive(()), ::private::exclusive(()),\n-                      ::private::exclusive(())];\n+        let mut v = ~[::unstable::exclusive(()), ::unstable::exclusive(()),\n+                      ::unstable::exclusive(())];\n         let mut _e = v.swap_remove(0);\n         assert (len(v) == 2);\n         _e = v.swap_remove(1);"}, {"sha": "ea59d6a54c6d626fdd3316b2ce9beed11cb4fb90", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -20,9 +20,9 @@ use core::cast;\n use core::cell::Cell;\n use core::pipes;\n use core::prelude::*;\n-use core::private::{SharedMutableState, shared_mutable_state};\n-use core::private::{clone_shared_mutable_state};\n-use core::private::{get_shared_mutable_state, get_shared_immutable_state};\n+use core::unstable::{SharedMutableState, shared_mutable_state};\n+use core::unstable::{clone_shared_mutable_state};\n+use core::unstable::{get_shared_mutable_state, get_shared_immutable_state};\n use core::ptr;\n use core::task;\n use core::util;"}, {"sha": "1289bc8e889ce9e4a71a7702eb4a113e2d7964de", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -19,7 +19,7 @@ use core::cell::Cell;\n use core::option;\n use core::pipes;\n use core::prelude::*;\n-use core::private::{Exclusive, exclusive};\n+use core::unstable::{Exclusive, exclusive};\n use core::ptr;\n use core::task;\n use core::util;"}, {"sha": "52cfc078bace2c2b33515f22ddb07f1bf55f469a", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -18,9 +18,9 @@ use uv_iotask::{IoTask, spawn_iotask};\n use core::either::{Left, Right};\n use core::libc;\n use core::comm::{Port, Chan, SharedChan, select2i};\n-use core::private::global::{global_data_clone_create,\n+use core::unstable::global::{global_data_clone_create,\n                             global_data_clone};\n-use core::private::weak_task::weaken_task;\n+use core::unstable::weak_task::weaken_task;\n use core::str;\n use core::task::{task, SingleThreaded, spawn};\n use core::task;"}, {"sha": "3861db28e1d93478884d017290286e91c73acf7b", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -24,7 +24,7 @@ use ext::base::*;\n use ext::base;\n use ext::build;\n use ext::build::*;\n-use private::extfmt::ct::*;\n+use unstable::extfmt::ct::*;\n \n pub fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n     -> base::MacResult {\n@@ -57,7 +57,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n    -> @ast::expr {\n     fn make_path_vec(cx: ext_ctxt, ident: @~str) -> ~[ast::ident] {\n         let intr = cx.parse_sess().interner;\n-        return ~[intr.intern(@~\"private\"), intr.intern(@~\"extfmt\"),\n+        return ~[intr.intern(@~\"unstable\"), intr.intern(@~\"extfmt\"),\n                  intr.intern(@~\"rt\"), intr.intern(ident)];\n     }\n     fn make_rt_path_expr(cx: ext_ctxt, sp: span, nm: @~str) -> @ast::expr {"}, {"sha": "d90e2f372a84e812f321c3fa0e76cbf089a68dd3", "filename": "src/test/compile-fail/noncopyable-match-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = Some(private::exclusive(false));\n+    let x = Some(unstable::exclusive(false));\n     match x {\n         Some(copy z) => { //~ ERROR copying a value of non-copyable type\n             do z.with |b| { assert !*b; }"}, {"sha": "d9c348cf99335024987d89ac3fbe43fc61b522ae", "filename": "src/test/run-pass/alt-ref-binding-in-guard-3256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = Some(private::exclusive(true));\n+    let x = Some(unstable::exclusive(true));\n     match x {\n         Some(ref z) if z.with(|b| *b) => {\n             do z.with |b| { assert *b; }"}, {"sha": "86f23dd5210dff6387f53bcc8a9157d7e9b72430", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -1,4 +1,4 @@\n-use core::private::run_in_bare_thread;\n+use core::unstable::run_in_bare_thread;\n \n extern {\n     pub fn rust_dbg_call(cb: *u8,"}, {"sha": "d180f6c726043fdd3a6b2e222cf71d6740ed44fc", "filename": "src/test/run-pass/type-use-i1-versus-i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf626812b88f63932c541f81c7f68360e31a7c1/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs?ref=bcf626812b88f63932c541f81c7f68360e31a7c1", "patch": "@@ -11,5 +11,5 @@\n pub fn main() {\n     let mut x: bool = false;\n     // this line breaks it\n-    private::intrinsics::move_val_init(&mut x, false);\n+    unstable::intrinsics::move_val_init(&mut x, false);\n }"}]}