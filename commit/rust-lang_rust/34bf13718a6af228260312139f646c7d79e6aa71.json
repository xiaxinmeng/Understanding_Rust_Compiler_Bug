{"sha": "34bf13718a6af228260312139f646c7d79e6aa71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YmYxMzcxOGE2YWYyMjgyNjAzMTIxMzlmNjQ2YzdkNzllNmFhNzE=", "commit": {"author": {"name": "rChaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-04-14T10:30:44Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-04-14T10:30:44Z"}, "message": "Allow specifying glob pattern to ignore config option (#3488)", "tree": {"sha": "4a1b67b19d0c1eda82bfe035a7baff0f891183d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a1b67b19d0c1eda82bfe035a7baff0f891183d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34bf13718a6af228260312139f646c7d79e6aa71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34bf13718a6af228260312139f646c7d79e6aa71", "html_url": "https://github.com/rust-lang/rust/commit/34bf13718a6af228260312139f646c7d79e6aa71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34bf13718a6af228260312139f646c7d79e6aa71/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7862051e7daadb4532e55c56bfa3ae8cd34251c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7862051e7daadb4532e55c56bfa3ae8cd34251c6", "html_url": "https://github.com/rust-lang/rust/commit/7862051e7daadb4532e55c56bfa3ae8cd34251c6"}], "stats": {"total": 195, "additions": 167, "deletions": 28}, "files": [{"sha": "be6c0364ac89d6196523434df28477a79f4cc6f8", "filename": "Cargo.lock", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/34bf13718a6af228260312139f646c7d79e6aa71/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/34bf13718a6af228260312139f646c7d79e6aa71/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=34bf13718a6af228260312139f646c7d79e6aa71", "patch": "@@ -124,6 +124,15 @@ name = \"constant_time_eq\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"crossbeam-channel\"\n+version = \"0.3.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"crossbeam-deque\"\n version = \"0.2.0\"\n@@ -155,6 +164,15 @@ dependencies = [\n  \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"crossbeam-utils\"\n+version = \"0.6.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"derive-new\"\n version = \"0.5.6\"\n@@ -233,6 +251,11 @@ dependencies = [\n  \"synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"fnv\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"fuchsia-cprng\"\n version = \"0.1.1\"\n@@ -246,6 +269,18 @@ dependencies = [\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"globset\"\n+version = \"0.4.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"aho-corasick 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"humantime\"\n version = \"1.2.0\"\n@@ -254,6 +289,23 @@ dependencies = [\n  \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ignore\"\n+version = \"0.4.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"globset 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"itertools\"\n version = \"0.8.0\"\n@@ -701,6 +753,7 @@ dependencies = [\n  \"env_logger 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ignore 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -724,6 +777,14 @@ name = \"ryu\"\n version = \"0.2.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"same-file\"\n+version = \"1.0.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"scoped-tls\"\n version = \"1.0.0\"\n@@ -882,6 +943,16 @@ name = \"utf8-ranges\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"walkdir\"\n+version = \"2.2.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"winapi\"\n version = \"0.3.6\"\n@@ -935,9 +1006,11 @@ dependencies = [\n \"checksum cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11d43355396e872eefb45ce6342e4374ed7bc2b3a502d1b28e36d6e23c05d1f4\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n+\"checksum crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f0ed1a4de2235cabda8558ff5840bffb97fcb64c97827f354a451307df5f72b\"\n \"checksum crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f739f8c5363aca78cfb059edf753d8f0d36908c348f3d8d1503f03d8b75d9cf3\"\n \"checksum crossbeam-epoch 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"927121f5407de9956180ff5e936fe3cf4324279280001cd56b669d28ee7e9150\"\n \"checksum crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2760899e32a1d58d5abb31129f8fae5de75220bc2176e77ff7c627ae45c918d9\"\n+\"checksum crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8306fcef4a7b563b76b7dd949ca48f52bc1141aa067d2ea09565f3e2652aa5c\"\n \"checksum derive-new 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ca414e896ae072546f4d789f452daaecf60ddee4c9df5dc6d5936d769e3d87c\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n@@ -947,9 +1020,12 @@ dependencies = [\n \"checksum error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07e791d3be96241c77c43846b665ef1384606da2cd2a48730abe606a12906e02\"\n \"checksum failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"795bd83d3abeb9220f257e597aa0080a508b27533824adf336529648f6abf7e2\"\n \"checksum failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea1063915fd7ef4309e222a5a07cf9c319fb9c7836b1f89b85458672dbb127e1\"\n+\"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \"checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n \"checksum getopts 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a7292d30132fb5424b354f5dc02512a86e4c516fe544bb7a25e7f266951b797\"\n+\"checksum globset 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4743617a7464bbda3c8aec8558ff2f9429047e025771037df561d383337ff865\"\n \"checksum humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ca7e5f2e110db35f93b837c81797f3714500b81d517bf20c431b16d3ca4f114\"\n+\"checksum ignore 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad03ca67dc12474ecd91fdb94d758cbd20cb4e7a78ebe831df26a9b7511e1162\"\n \"checksum itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b8467d9c1cebe26feb08c640139247fac215782d35371ade9a2136ed6085358\"\n \"checksum itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b\"\n \"checksum jobserver 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd80e58f77e0cdea53ba96acc5e04479e5ffc5d869626a6beafe50fed867eace\"\n@@ -1000,6 +1076,7 @@ dependencies = [\n \"checksum rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc71d2faa173b74b232dedc235e3ee1696581bb132fc116fa3626d6151a1a8fb\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum ryu 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb9e9b8cde282a9fe6a42dd4681319bfb63f121b8a8ee9439c6f4107e58a46f7\"\n+\"checksum same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f20c4be53a8a1ff4c1f1b2bd14570d2f634628709752f0702ecdd2b3f9a5267\"\n \"checksum scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2\"\n \"checksum scoped_threadpool 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n@@ -1023,6 +1100,7 @@ dependencies = [\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum unicode_categories 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n \"checksum utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796f7e48bef87609f7ade7e06495a87d5cd06c7866e6a5cbfceffc558a243737\"\n+\"checksum walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d9d7ed3431229a144296213105a390676cc49c9b6a72bd19f3176c98e129fa1\"\n \"checksum winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92c1eb33641e276cfa214a0522acad57be5c56b10cb348b3c5117db75f3ac4b0\"\n \"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n \"checksum winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7168bab6e1daee33b4557efd0e95d5ca70a03706d39fa5f3fe7a236f584b03c9\""}, {"sha": "d84ca1d72920ae4ea16f4bb6260cc6a269ca5533", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34bf13718a6af228260312139f646c7d79e6aa71/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/34bf13718a6af228260312139f646c7d79e6aa71/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=34bf13718a6af228260312139f646c7d79e6aa71", "patch": "@@ -57,6 +57,7 @@ bytecount = \"0.5\"\n unicode-width = \"0.1.5\"\n unicode_categories = \"0.1.1\"\n dirs = \"1.0.4\"\n+ignore = \"0.4.6\"\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`"}, {"sha": "40da2986808a941fa0c9da48e5a1bd2d417b98f3", "filename": "src/config/config_type.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34bf13718a6af228260312139f646c7d79e6aa71/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bf13718a6af228260312139f646c7d79e6aa71/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=34bf13718a6af228260312139f646c7d79e6aa71", "patch": "@@ -141,7 +141,7 @@ macro_rules! create_config {\n                 ConfigWasSet(self)\n             }\n \n-            fn fill_from_parsed_config(mut self, parsed: PartialConfig, dir: &Path) -> Config {\n+            fn fill_from_parsed_config(mut self, parsed: PartialConfig) -> Config {\n             $(\n                 if let Some(val) = parsed.$i {\n                     if self.$i.3 {\n@@ -160,7 +160,6 @@ macro_rules! create_config {\n             )+\n                 self.set_heuristics();\n                 self.set_license_template();\n-                self.set_ignore(dir);\n                 self\n             }\n \n@@ -287,9 +286,6 @@ macro_rules! create_config {\n                 }\n             }\n \n-            fn set_ignore(&mut self, dir: &Path) {\n-                self.ignore.2.add_prefix(dir);\n-            }\n \n             /// Returns `true` if the config key was explicitly set and is the default value.\n             pub fn is_default(&self, key: &str) -> bool {"}, {"sha": "839e9bb6e21856dd6a1d60ea3cdde079447a3588", "filename": "src/config/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34bf13718a6af228260312139f646c7d79e6aa71/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bf13718a6af228260312139f646c7d79e6aa71/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=34bf13718a6af228260312139f646c7d79e6aa71", "patch": "@@ -190,8 +190,7 @@ impl Config {\n         let mut file = File::open(&file_path)?;\n         let mut toml = String::new();\n         file.read_to_string(&mut toml)?;\n-        Config::from_toml(&toml, file_path.parent().unwrap())\n-            .map_err(|err| Error::new(ErrorKind::InvalidData, err))\n+        Config::from_toml(&toml).map_err(|err| Error::new(ErrorKind::InvalidData, err))\n     }\n \n     /// Resolves the config for input in `dir`.\n@@ -253,7 +252,7 @@ impl Config {\n         }\n     }\n \n-    pub(crate) fn from_toml(toml: &str, dir: &Path) -> Result<Config, String> {\n+    pub(crate) fn from_toml(toml: &str) -> Result<Config, String> {\n         let parsed: ::toml::Value = toml\n             .parse()\n             .map_err(|e| format!(\"Could not parse TOML: {}\", e))?;\n@@ -272,7 +271,7 @@ impl Config {\n                 if !err.is_empty() {\n                     eprint!(\"{}\", err);\n                 }\n-                Ok(Config::default().fill_from_parsed_config(parsed_config, dir))\n+                Ok(Config::default().fill_from_parsed_config(parsed_config))\n             }\n             Err(e) => {\n                 err.push_str(\"Error: Decoding config file failed:\\n\");\n@@ -426,8 +425,7 @@ mod test {\n \n     #[test]\n     fn test_was_set() {\n-        use std::path::Path;\n-        let config = Config::from_toml(\"hard_tabs = true\", Path::new(\"\")).unwrap();\n+        let config = Config::from_toml(\"hard_tabs = true\").unwrap();\n \n         assert_eq!(config.was_set().hard_tabs(), true);\n         assert_eq!(config.was_set().verbose(), false);"}, {"sha": "bd8c5056854c64649d18f588ac97d856ffda0739", "filename": "src/config/options.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/34bf13718a6af228260312139f646c7d79e6aa71/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bf13718a6af228260312139f646c7d79e6aa71/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=34bf13718a6af228260312139f646c7d79e6aa71", "patch": "@@ -1,11 +1,11 @@\n-use std::collections::HashSet;\n+use std::collections::{hash_set, HashSet};\n use std::path::{Path, PathBuf};\n \n use atty;\n \n use crate::config::config_type::ConfigType;\n use crate::config::lists::*;\n-use crate::config::{Config, FileName};\n+use crate::config::Config;\n \n /// Macro that will stringify the enum variants or a provided textual repr\n #[macro_export]\n@@ -399,6 +399,15 @@ impl Default for EmitMode {\n #[derive(Default, Deserialize, Serialize, Clone, Debug, PartialEq)]\n pub struct IgnoreList(HashSet<PathBuf>);\n \n+impl<'a> IntoIterator for &'a IgnoreList {\n+    type Item = &'a PathBuf;\n+    type IntoIter = hash_set::Iter<'a, PathBuf>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.0.iter()\n+    }\n+}\n+\n impl IgnoreList {\n     pub fn add_prefix(&mut self, dir: &Path) {\n         self.0 = self\n@@ -415,18 +424,6 @@ impl IgnoreList {\n             })\n             .collect();\n     }\n-\n-    fn skip_file_inner(&self, file: &Path) -> bool {\n-        self.0.iter().any(|path| file.starts_with(path))\n-    }\n-\n-    pub fn skip_file(&self, file: &FileName) -> bool {\n-        if let FileName::Real(ref path) = file {\n-            self.skip_file_inner(path)\n-        } else {\n-            false\n-        }\n-    }\n }\n \n impl ::std::str::FromStr for IgnoreList {"}, {"sha": "391a3c0e3841dcd7dbddbe0c00eb677d308d18c5", "filename": "src/formatting.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34bf13718a6af228260312139f646c7d79e6aa71/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bf13718a6af228260312139f646c7d79e6aa71/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=34bf13718a6af228260312139f646c7d79e6aa71", "patch": "@@ -14,6 +14,7 @@ use syntax::source_map::{FilePathMapping, SourceMap, Span, DUMMY_SP};\n \n use crate::comment::{CharClasses, FullCodeCharKind};\n use crate::config::{Config, FileName, Verbosity};\n+use crate::ignore_path::IgnorePathSet;\n use crate::issues::BadIssueSeeker;\n use crate::utils::{count_newlines, get_skip_macro_names};\n use crate::visitor::{FmtVisitor, SnippetProvider};\n@@ -90,6 +91,10 @@ fn format_project<T: FormatHandler>(\n     parse_session.span_diagnostic = Handler::with_emitter(true, None, silent_emitter);\n \n     let mut context = FormatContext::new(&krate, report, parse_session, config, handler);\n+    let ignore_path_set = match IgnorePathSet::from_ignore_list(&config.ignore()) {\n+        Ok(set) => set,\n+        Err(e) => return Err(ErrorKind::InvalidGlobPattern(e)),\n+    };\n \n     let files = modules::ModResolver::new(\n         context.parse_session.source_map(),\n@@ -99,7 +104,8 @@ fn format_project<T: FormatHandler>(\n     .visit_crate(&krate)\n     .map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;\n     for (path, (module, _)) in files {\n-        if (config.skip_children() && path != main_file) || config.ignore().skip_file(&path) {\n+        let should_ignore = !input_is_stdin && ignore_path_set.is_match(&path);\n+        if (config.skip_children() && path != main_file) || should_ignore {\n             continue;\n         }\n         should_emit_verbose(input_is_stdin, config, || println!(\"Formatting {}\", path));\n@@ -276,7 +282,10 @@ impl FormattingError {\n             | ErrorKind::IoError(_)\n             | ErrorKind::ParseError\n             | ErrorKind::LostComment => \"internal error:\",\n-            ErrorKind::LicenseCheck | ErrorKind::BadAttr | ErrorKind::VersionMismatch => \"error:\",\n+            ErrorKind::LicenseCheck\n+            | ErrorKind::BadAttr\n+            | ErrorKind::InvalidGlobPattern(..)\n+            | ErrorKind::VersionMismatch => \"error:\",\n             ErrorKind::BadIssue(_) | ErrorKind::DeprecatedAttr => \"warning:\",\n         }\n     }"}, {"sha": "1e17337e62545a1d67c2f7c7afbb77d1d27ff6c1", "filename": "src/ignore_path.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/34bf13718a6af228260312139f646c7d79e6aa71/src%2Fignore_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bf13718a6af228260312139f646c7d79e6aa71/src%2Fignore_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fignore_path.rs?ref=34bf13718a6af228260312139f646c7d79e6aa71", "patch": "@@ -0,0 +1,55 @@\n+use ignore::{self, gitignore};\n+use std::path::PathBuf;\n+\n+use crate::config::{FileName, IgnoreList};\n+\n+pub struct IgnorePathSet {\n+    ignore_set: gitignore::Gitignore,\n+}\n+\n+impl IgnorePathSet {\n+    pub fn from_ignore_list(ignore_list: &IgnoreList) -> Result<Self, ignore::Error> {\n+        let mut ignore_builder = gitignore::GitignoreBuilder::new(PathBuf::from(\"\"));\n+\n+        for ignore_path in ignore_list {\n+            ignore_builder.add_line(None, ignore_path.to_str().unwrap())?;\n+        }\n+\n+        Ok(IgnorePathSet {\n+            ignore_set: ignore_builder.build()?,\n+        })\n+    }\n+\n+    pub fn is_match(&self, file_name: &FileName) -> bool {\n+        match file_name {\n+            FileName::Stdin => false,\n+            FileName::Real(p) => self\n+                .ignore_set\n+                .matched_path_or_any_parents(p, false)\n+                .is_ignore(),\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use crate::config::{Config, FileName};\n+    use crate::ignore_path::IgnorePathSet;\n+    use std::path::PathBuf;\n+\n+    #[test]\n+    fn test_ignore_path_set() {\n+        let config = Config::from_toml(\n+            \"ignore = [\n+            \\\"foo.rs\\\",\n+            \\\"bar_dir/*\\\",\n+        ]\",\n+        )\n+        .unwrap();\n+        let ignore_path_set = IgnorePathSet::from_ignore_list(&config.ignore()).unwrap();\n+\n+        assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/foo.rs\"))));\n+        assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"bar_dir/baz.rs\"))));\n+        assert!(!ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/bar.rs\"))));\n+    }\n+}"}, {"sha": "b804f5637d76653a8ec6c3bf3df19c42fb37ce50", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34bf13718a6af228260312139f646c7d79e6aa71/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bf13718a6af228260312139f646c7d79e6aa71/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=34bf13718a6af228260312139f646c7d79e6aa71", "patch": "@@ -20,6 +20,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n \n use failure::Fail;\n+use ignore;\n use syntax::{ast, parse::DirectoryOwnership};\n \n use crate::comment::LineClasses;\n@@ -46,6 +47,7 @@ mod comment;\n pub(crate) mod config;\n mod expr;\n pub(crate) mod formatting;\n+mod ignore_path;\n mod imports;\n mod issues;\n mod items;\n@@ -110,6 +112,9 @@ pub enum ErrorKind {\n     /// If we had formatted the given node, then we would have lost a comment.\n     #[fail(display = \"not formatted because a comment would be lost\")]\n     LostComment,\n+    /// Invalid glob pattern in `ignore` configuration option.\n+    #[fail(display = \"Invalid glob pattern found in ignore list: {}\", _0)]\n+    InvalidGlobPattern(ignore::Error),\n }\n \n impl ErrorKind {"}, {"sha": "199c24004761adadd0c862e6803333e06cb22e55", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34bf13718a6af228260312139f646c7d79e6aa71/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bf13718a6af228260312139f646c7d79e6aa71/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=34bf13718a6af228260312139f646c7d79e6aa71", "patch": "@@ -561,7 +561,7 @@ fn get_config(config_file: Option<&Path>) -> Config {\n         .read_to_string(&mut def_config)\n         .expect(\"Couldn't read config\");\n \n-    Config::from_toml(&def_config, Path::new(\"tests/config/\")).expect(\"invalid TOML\")\n+    Config::from_toml(&def_config).expect(\"invalid TOML\")\n }\n \n // Reads significant comments of the form: `// rustfmt-key: value` into a hash map."}]}