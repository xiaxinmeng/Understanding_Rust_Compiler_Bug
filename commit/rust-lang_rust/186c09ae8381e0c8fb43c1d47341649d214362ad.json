{"sha": "186c09ae8381e0c8fb43c1d47341649d214362ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NmMwOWFlODM4MWUwYzhmYjQzYzFkNDczNDE2NDlkMjE0MzYyYWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-21T15:55:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-21T15:55:07Z"}, "message": "add test for `dyn` collisions", "tree": {"sha": "a2d5c12652669435687fac8b696ab24d5e6b0c55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2d5c12652669435687fac8b696ab24d5e6b0c55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/186c09ae8381e0c8fb43c1d47341649d214362ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/186c09ae8381e0c8fb43c1d47341649d214362ad", "html_url": "https://github.com/rust-lang/rust/commit/186c09ae8381e0c8fb43c1d47341649d214362ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/186c09ae8381e0c8fb43c1d47341649d214362ad/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dc47e2c098e0b80019e2e1ca622d6af504f6494", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc47e2c098e0b80019e2e1ca622d6af504f6494", "html_url": "https://github.com/rust-lang/rust/commit/3dc47e2c098e0b80019e2e1ca622d6af504f6494"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "cbb6e9659dff31a7bf00d059c58b8cc0e40d7e54", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.fixed", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/186c09ae8381e0c8fb43c1d47341649d214362ad/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/186c09ae8381e0c8fb43c1d47341649d214362ad/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed?ref=186c09ae8381e0c8fb43c1d47341649d214362ad", "patch": "@@ -0,0 +1,53 @@\n+// Test case where the method we want is an inherent method on a\n+// dyn Trait. In that case, the fix is to insert `*` on the receiver.\n+//\n+// check-pass\n+// run-rustfix\n+// edition:2018\n+\n+#![warn(future_prelude_collision)]\n+\n+trait TryIntoU32 {\n+    fn try_into(&self) -> Result<u32, ()>;\n+}\n+\n+impl TryIntoU32 for u8 {\n+    // note: &self\n+    fn try_into(&self) -> Result<u32, ()> {\n+        Ok(22)\n+    }\n+}\n+\n+mod inner {\n+    use super::get_dyn_trait;\n+\n+    // note: this does nothing, but is copying from ffishim's problem of\n+    // having a struct of the same name as the trait in-scope, while *also*\n+    // implementing the trait for that struct but **without** importing the\n+    // trait itself into scope\n+    struct TryIntoU32;\n+\n+    impl super::TryIntoU32 for TryIntoU32 {\n+        fn try_into(&self) -> Result<u32, ()> {\n+            Ok(0)\n+        }\n+    }\n+\n+    // this is where the gross part happens. since `get_dyn_trait` returns\n+    // a Box<dyn Trait>, it can still call the method for `dyn Trait` without\n+    // `Trait` being in-scope. it might even be possible to make the trait itself\n+    // entirely unreference-able from the callsite?\n+    pub fn test() -> u32 {\n+        (&*get_dyn_trait()).try_into().unwrap()\n+        //~^ WARNING trait method `try_into` will become ambiguous\n+        //~| WARNING this was previously accepted\n+    }\n+}\n+\n+fn get_dyn_trait() -> Box<dyn TryIntoU32> {\n+    Box::new(3u8) as Box<dyn TryIntoU32>\n+}\n+\n+fn main() {\n+    dbg!(inner::test());\n+}"}, {"sha": "1c9929eff91deffc45c1635497c7908e114f5750", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/186c09ae8381e0c8fb43c1d47341649d214362ad/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186c09ae8381e0c8fb43c1d47341649d214362ad/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs?ref=186c09ae8381e0c8fb43c1d47341649d214362ad", "patch": "@@ -0,0 +1,53 @@\n+// Test case where the method we want is an inherent method on a\n+// dyn Trait. In that case, the fix is to insert `*` on the receiver.\n+//\n+// check-pass\n+// run-rustfix\n+// edition:2018\n+\n+#![warn(future_prelude_collision)]\n+\n+trait TryIntoU32 {\n+    fn try_into(&self) -> Result<u32, ()>;\n+}\n+\n+impl TryIntoU32 for u8 {\n+    // note: &self\n+    fn try_into(&self) -> Result<u32, ()> {\n+        Ok(22)\n+    }\n+}\n+\n+mod inner {\n+    use super::get_dyn_trait;\n+\n+    // note: this does nothing, but is copying from ffishim's problem of\n+    // having a struct of the same name as the trait in-scope, while *also*\n+    // implementing the trait for that struct but **without** importing the\n+    // trait itself into scope\n+    struct TryIntoU32;\n+\n+    impl super::TryIntoU32 for TryIntoU32 {\n+        fn try_into(&self) -> Result<u32, ()> {\n+            Ok(0)\n+        }\n+    }\n+\n+    // this is where the gross part happens. since `get_dyn_trait` returns\n+    // a Box<dyn Trait>, it can still call the method for `dyn Trait` without\n+    // `Trait` being in-scope. it might even be possible to make the trait itself\n+    // entirely unreference-able from the callsite?\n+    pub fn test() -> u32 {\n+        get_dyn_trait().try_into().unwrap()\n+        //~^ WARNING trait method `try_into` will become ambiguous\n+        //~| WARNING this was previously accepted\n+    }\n+}\n+\n+fn get_dyn_trait() -> Box<dyn TryIntoU32> {\n+    Box::new(3u8) as Box<dyn TryIntoU32>\n+}\n+\n+fn main() {\n+    dbg!(inner::test());\n+}"}, {"sha": "3d7637100c2c962853377dbe9ffcca3e5cf855f0", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/186c09ae8381e0c8fb43c1d47341649d214362ad/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/186c09ae8381e0c8fb43c1d47341649d214362ad/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr?ref=186c09ae8381e0c8fb43c1d47341649d214362ad", "patch": "@@ -0,0 +1,16 @@\n+warning: trait method `try_into` will become ambiguous in Rust 2021\n+  --> $DIR/inherent-dyn-collision.rs:41:9\n+   |\n+LL |         get_dyn_trait().try_into().unwrap()\n+   |         ^^^^^^^^^^^^^^^ help: disambiguate the method call: `(&*get_dyn_trait())`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/inherent-dyn-collision.rs:8:9\n+   |\n+LL | #![warn(future_prelude_collision)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+\n+warning: 1 warning emitted\n+"}]}