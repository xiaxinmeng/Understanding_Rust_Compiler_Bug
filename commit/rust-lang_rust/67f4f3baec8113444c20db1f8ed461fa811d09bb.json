{"sha": "67f4f3baec8113444c20db1f8ed461fa811d09bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZjRmM2JhZWM4MTEzNDQ0YzIwZGIxZjhlZDQ2MWZhODExZDA5YmI=", "commit": {"author": {"name": "erer1243", "email": "", "date": "2021-06-06T03:44:21Z"}, "committer": {"name": "erer1243", "email": "", "date": "2021-06-06T03:44:21Z"}, "message": "Updated code examples and wording", "tree": {"sha": "e4395ea187ca749e79613294d0f6145b840e727a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4395ea187ca749e79613294d0f6145b840e727a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67f4f3baec8113444c20db1f8ed461fa811d09bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67f4f3baec8113444c20db1f8ed461fa811d09bb", "html_url": "https://github.com/rust-lang/rust/commit/67f4f3baec8113444c20db1f8ed461fa811d09bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67f4f3baec8113444c20db1f8ed461fa811d09bb/comments", "author": {}, "committer": {}, "parents": [{"sha": "6c2dd251bbff03c7a3092d43fb5b637eca0810e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2dd251bbff03c7a3092d43fb5b637eca0810e3", "html_url": "https://github.com/rust-lang/rust/commit/6c2dd251bbff03c7a3092d43fb5b637eca0810e3"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "5b8e83766f0e846444405df1aacf15c96a5cde6b", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67f4f3baec8113444c20db1f8ed461fa811d09bb/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f4f3baec8113444c20db1f8ed461fa811d09bb/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=67f4f3baec8113444c20db1f8ed461fa811d09bb", "patch": "@@ -987,13 +987,13 @@ mod mod_keyword {}\n /// Capture a [closure]'s environment by value.\n ///\n /// `move` converts any variables captured by reference or mutable reference\n-/// to owned by value variables.\n+/// to variables captured by value.\n ///\n /// ```rust\n-/// let capture = \"hello\";\n-/// let closure = move || {\n-///     println!(\"rust says {}\", capture);\n-/// };\n+/// let data = vec![1, 2, 3];\n+/// let closure = move || println!(\"captured {:?} by value\", data);\n+///\n+/// // data is no longer available, it is owned by the closure\n /// ```\n ///\n /// Note: `move` closures may still implement [`Fn`] or [`FnMut`], even though\n@@ -1004,31 +1004,29 @@ mod mod_keyword {}\n /// ```rust\n /// fn create_fn() -> impl Fn() {\n ///     let text = \"Fn\".to_owned();\n-///\n ///     move || println!(\"This is a: {}\", text)\n /// }\n ///\n /// let fn_plain = create_fn();\n-///\n /// fn_plain();\n /// ```\n ///\n /// `move` is often used when [threads] are involved.\n ///\n /// ```rust\n-/// let x = 5;\n+/// let data = vec![1, 2, 3];\n ///\n /// std::thread::spawn(move || {\n-///     println!(\"captured {} by value\", x)\n+///     println!(\"captured {:?} by value\", data)\n /// }).join().unwrap();\n ///\n-/// // x is no longer available\n+/// // data was moved to the spawned thread, so we cannot use it here\n /// ```\n ///\n /// `move` is also valid before an async block.\n ///\n /// ```rust\n-/// let capture = \"hello\";\n+/// let capture = \"hello\".to_owned();\n /// let block = async move {\n ///     println!(\"rust says {} from async block\", capture);\n /// };"}]}