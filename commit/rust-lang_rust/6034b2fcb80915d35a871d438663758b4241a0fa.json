{"sha": "6034b2fcb80915d35a871d438663758b4241a0fa", "node_id": "C_kwDOAAsO6NoAKDYwMzRiMmZjYjgwOTE1ZDM1YTg3MWQ0Mzg2NjM3NThiNDI0MWEwZmE", "commit": {"author": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-24T12:09:02Z"}, "committer": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-24T12:09:02Z"}, "message": "Use independent suggestions", "tree": {"sha": "87cdfd45e69277a6fc6f473141c143c5ec28477d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87cdfd45e69277a6fc6f473141c143c5ec28477d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6034b2fcb80915d35a871d438663758b4241a0fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6034b2fcb80915d35a871d438663758b4241a0fa", "html_url": "https://github.com/rust-lang/rust/commit/6034b2fcb80915d35a871d438663758b4241a0fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6034b2fcb80915d35a871d438663758b4241a0fa/comments", "author": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5", "html_url": "https://github.com/rust-lang/rust/commit/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "925e9654f931dcd188b6a5393e49a4ffef44f32e", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6034b2fcb80915d35a871d438663758b4241a0fa/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6034b2fcb80915d35a871d438663758b4241a0fa/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=6034b2fcb80915d35a871d438663758b4241a0fa", "patch": "@@ -1210,9 +1210,10 @@ impl<'a> DecorateLint<'a, ()> for DropGlue<'_> {\n #[diag(lint_range_endpoint_out_of_range)]\n pub struct RangeEndpointOutOfRange<'a> {\n     pub ty: &'a str,\n-    #[suggestion(code = \"{start}..={literal}{suffix}\", applicability = \"machine-applicable\")]\n-    pub suggestion: Span,\n-    pub start: String,\n+    #[suggestion(code = \"=\", applicability = \"machine-applicable\")]\n+    pub eq_suggestion: Span,\n+    #[suggestion(code = \"{literal}{suffix}\", applicability = \"machine-applicable\")]\n+    pub lit_suggestion: Span,\n     pub literal: u128,\n     pub suffix: &'a str,\n }"}, {"sha": "1cc873c6de9c42c3692bbfb6ed58248bed10ae73", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6034b2fcb80915d35a871d438663758b4241a0fa/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6034b2fcb80915d35a871d438663758b4241a0fa/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=6034b2fcb80915d35a871d438663758b4241a0fa", "patch": "@@ -136,11 +136,12 @@ fn lint_overflowing_range_endpoint<'tcx>(\n     expr: &'tcx hir::Expr<'tcx>,\n     ty: &str,\n ) -> bool {\n-    let (expr, cast_ty) = if let Node::Expr(par_expr) = cx.tcx.hir().get(cx.tcx.hir().parent_id(expr.hir_id))\n-      && let ExprKind::Cast(_, ty) = par_expr.kind {\n-        (par_expr, Some(ty))\n+    // Look past casts to support cases like `0..256 as u8`\n+    let (expr, lit_span) = if let Node::Expr(par_expr) = cx.tcx.hir().get(cx.tcx.hir().parent_id(expr.hir_id))\n+      && let ExprKind::Cast(_, _) = par_expr.kind {\n+        (par_expr, expr.span)\n     } else {\n-        (expr, None)\n+        (expr, expr.span)\n     };\n \n     // We only want to handle exclusive (`..`) ranges,\n@@ -162,30 +163,24 @@ fn lint_overflowing_range_endpoint<'tcx>(\n     if !(eps[1].expr.hir_id == expr.hir_id && lit_val - 1 == max) {\n         return false;\n     };\n-    let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span) else { return false };\n \n-    let suffix = if let Some(cast_ty) = cast_ty {\n-        let Ok(ty) = cx.sess().source_map().span_to_snippet(cast_ty.span) else { return false };\n-        format!(\" as {}\", ty)\n-    } else {\n-        use rustc_ast::{LitIntType, LitKind};\n-        match lit.node {\n-            LitKind::Int(_, LitIntType::Signed(s)) => s.name_str().to_owned(),\n-            LitKind::Int(_, LitIntType::Unsigned(s)) => s.name_str().to_owned(),\n-            LitKind::Int(_, LitIntType::Unsuffixed) => \"\".to_owned(),\n-            _ => bug!(),\n-        }\n+    use rustc_ast::{LitIntType, LitKind};\n+    let suffix = match lit.node {\n+        LitKind::Int(_, LitIntType::Signed(s)) => s.name_str(),\n+        LitKind::Int(_, LitIntType::Unsigned(s)) => s.name_str(),\n+        LitKind::Int(_, LitIntType::Unsuffixed) => \"\",\n+        _ => bug!(),\n     };\n \n     cx.emit_spanned_lint(\n         OVERFLOWING_LITERALS,\n         struct_expr.span,\n         RangeEndpointOutOfRange {\n             ty,\n-            suggestion: struct_expr.span,\n-            start,\n+            eq_suggestion: expr.span.shrink_to_lo(),\n+            lit_suggestion: lit_span,\n             literal: lit_val - 1,\n-            suffix: &suffix,\n+            suffix,\n         },\n     );\n "}, {"sha": "36c6d4fdfe3b4c9fced5618f8b703d757ab1ace9", "filename": "tests/ui/lint/issue-109529.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6034b2fcb80915d35a871d438663758b4241a0fa/tests%2Fui%2Flint%2Fissue-109529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6034b2fcb80915d35a871d438663758b4241a0fa/tests%2Fui%2Flint%2Fissue-109529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.rs?ref=6034b2fcb80915d35a871d438663758b4241a0fa", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    for i in 0..256 as u8 { //~ ERROR range endpoint is out of range\n+    for i in 0..(256 as u8) { //~ ERROR range endpoint is out of range\n         println!(\"{}\", i);\n     }\n }"}, {"sha": "e9f6d546ac20ba0c2722c6b905c65bf424471644", "filename": "tests/ui/lint/issue-109529.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6034b2fcb80915d35a871d438663758b4241a0fa/tests%2Fui%2Flint%2Fissue-109529.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6034b2fcb80915d35a871d438663758b4241a0fa/tests%2Fui%2Flint%2Fissue-109529.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.stderr?ref=6034b2fcb80915d35a871d438663758b4241a0fa", "patch": "@@ -1,10 +1,18 @@\n error: range endpoint is out of range for `u8`\n   --> $DIR/issue-109529.rs:2:14\n    |\n-LL |     for i in 0..256 as u8 {\n-   |              ^^^^^^^^^^^^ help: use an inclusive range instead: `0..=255 as u8`\n+LL |     for i in 0..(256 as u8) {\n+   |              ^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(overflowing_literals)]` on by default\n+help: use an inclusive range instead\n+   |\n+LL |     for i in 0..=(256 as u8) {\n+   |                 +\n+help: use an inclusive range instead\n+   |\n+LL |     for i in 0..(255 as u8) {\n+   |                  ~~~\n \n error: aborting due to previous error\n "}]}