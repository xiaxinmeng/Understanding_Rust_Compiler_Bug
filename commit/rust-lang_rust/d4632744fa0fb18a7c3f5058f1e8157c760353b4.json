{"sha": "d4632744fa0fb18a7c3f5058f1e8157c760353b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NjMyNzQ0ZmEwZmIxOGE3YzNmNTA1OGYxZTgxNTdjNzYwMzUzYjQ=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-06-08T22:33:21Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-06-08T22:33:21Z"}, "message": "Translate CRLF -> LF in raw (byte) strings", "tree": {"sha": "82e61672f38cc072d6c4454c38e2746b6eae95f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e61672f38cc072d6c4454c38e2746b6eae95f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4632744fa0fb18a7c3f5058f1e8157c760353b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4632744fa0fb18a7c3f5058f1e8157c760353b4", "html_url": "https://github.com/rust-lang/rust/commit/d4632744fa0fb18a7c3f5058f1e8157c760353b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4632744fa0fb18a7c3f5058f1e8157c760353b4/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49d62e8d5a9df16e8ed6c703031fb72d264e3469", "url": "https://api.github.com/repos/rust-lang/rust/commits/49d62e8d5a9df16e8ed6c703031fb72d264e3469", "html_url": "https://github.com/rust-lang/rust/commit/49d62e8d5a9df16e8ed6c703031fb72d264e3469"}], "stats": {"total": 52, "additions": 18, "deletions": 34}, "files": [{"sha": "71fa4bdb2cf0e09ee748752a9f5f40d47d040e97", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4632744fa0fb18a7c3f5058f1e8157c760353b4/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4632744fa0fb18a7c3f5058f1e8157c760353b4/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=d4632744fa0fb18a7c3f5058f1e8157c760353b4", "patch": "@@ -1346,7 +1346,7 @@ impl<'a> StringReader<'a> {\n \n     fn validate_raw_str_escape(&self, content_start: BytePos, content_end: BytePos) {\n         self.with_str_from_to(content_start, content_end, |lit: &str| {\n-            unescape::unescape_raw_str(lit, &mut |range, c| {\n+            unescape::unescape_raw_str(lit, unescape::Mode::Str, &mut |range, c| {\n                 if let Err(err) = c {\n                     emit_unescape_error(\n                         &self.sess.span_diagnostic,\n@@ -1363,7 +1363,7 @@ impl<'a> StringReader<'a> {\n \n     fn validate_raw_byte_str_escape(&self, content_start: BytePos, content_end: BytePos) {\n         self.with_str_from_to(content_start, content_end, |lit: &str| {\n-            unescape::unescape_raw_byte_str(lit, &mut |range, c| {\n+            unescape::unescape_raw_str(lit, unescape::Mode::ByteStr, &mut |range, c| {\n                 if let Err(err) = c {\n                     emit_unescape_error(\n                         &self.sess.span_diagnostic,"}, {"sha": "3711512d64e568ae6df692cadf6505bdcf1d1466", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4632744fa0fb18a7c3f5058f1e8157c760353b4/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4632744fa0fb18a7c3f5058f1e8157c760353b4/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=d4632744fa0fb18a7c3f5058f1e8157c760353b4", "patch": "@@ -4,7 +4,7 @@ use crate::ast::{self, Lit, LitKind};\n use crate::parse::parser::Parser;\n use crate::parse::PResult;\n use crate::parse::token::{self, Token, TokenKind};\n-use crate::parse::unescape::{unescape_str, unescape_byte_str, unescape_raw_str};\n+use crate::parse::unescape::{self, unescape_str, unescape_byte_str, unescape_raw_str};\n use crate::parse::unescape::{unescape_char, unescape_byte};\n use crate::print::pprust;\n use crate::symbol::{kw, sym, Symbol};\n@@ -144,7 +144,7 @@ impl LitKind {\n                 let symbol = if s.contains('\\r') {\n                     let mut buf = String::with_capacity(s.len());\n                     let mut error = Ok(());\n-                    unescape_raw_str(&s, &mut |_, unescaped_char| {\n+                    unescape_raw_str(&s, unescape::Mode::Str, &mut |_, unescaped_char| {\n                         match unescaped_char {\n                             Ok(c) => buf.push(c),\n                             Err(_) => error = Err(LitError::LexerError),"}, {"sha": "f5b6c38083e103fda2ddb0bd5155930fad4f8e0b", "filename": "src/libsyntax/parse/unescape.rs", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d4632744fa0fb18a7c3f5058f1e8157c760353b4/src%2Flibsyntax%2Fparse%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4632744fa0fb18a7c3f5058f1e8157c760353b4/src%2Flibsyntax%2Fparse%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Funescape.rs?ref=d4632744fa0fb18a7c3f5058f1e8157c760353b4", "patch": "@@ -71,44 +71,28 @@ where\n /// sequence of characters or errors.\n /// NOTE: Raw strings do not perform any explicit character escaping, here we\n /// only translate CRLF to LF and produce errors on bare CR.\n-pub(crate) fn unescape_raw_str<F>(literal_text: &str, callback: &mut F)\n+pub(crate) fn unescape_raw_str<F>(literal_text: &str, mode: Mode, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<char, EscapeError>),\n {\n     let mut byte_offset: usize = 0;\n \n     let mut chars = literal_text.chars().peekable();\n     while let Some(curr) = chars.next() {\n-        let result = match (curr, chars.peek()) {\n-            ('\\r', Some('\\n')) => Ok(curr),\n-            ('\\r', _) => Err(EscapeError::BareCarriageReturn),\n-            _ => Ok(curr),\n+        let (result, scanned) = match (curr, chars.peek()) {\n+            ('\\r', Some('\\n')) => {\n+                chars.next();\n+                (Ok('\\n'), [Some('\\r'), Some('\\n')])\n+            },\n+            ('\\r', _) =>\n+                (Err(EscapeError::BareCarriageReturn), [Some('\\r'), None]),\n+            (c, _) if mode.is_bytes() && c > '\\x7F' =>\n+                (Err(EscapeError::NonAsciiCharInByteString), [Some(c), None]),\n+            (c, _) => (Ok(c), [Some(c), None]),\n         };\n-        callback(byte_offset..(byte_offset + curr.len_utf8()), result);\n-        byte_offset += curr.len_utf8();\n-    }\n-}\n-\n-/// Takes a contents of a string literal (without quotes) and produces a\n-/// sequence of characters or errors.\n-/// NOTE: Raw strings do not perform any explicit character escaping, here we\n-/// only translate CRLF to LF and produce errors on bare CR.\n-pub(crate) fn unescape_raw_byte_str<F>(literal_text: &str, callback: &mut F)\n-where\n-    F: FnMut(Range<usize>, Result<char, EscapeError>),\n-{\n-    let mut byte_offset: usize = 0;\n-\n-    let mut chars = literal_text.chars().peekable();\n-    while let Some(curr) = chars.next() {\n-        let result = match (curr, chars.peek()) {\n-            ('\\r', Some('\\n')) => Ok(curr),\n-            ('\\r', _) => Err(EscapeError::BareCarriageReturn),\n-            (c, _) if c > '\\x7F' => Err(EscapeError::NonAsciiCharInByteString),\n-            _ => Ok(curr),\n-        };\n-        callback(byte_offset..(byte_offset + curr.len_utf8()), result);\n-        byte_offset += curr.len_utf8();\n+        let len_utf8: usize = scanned.iter().filter_map(|&x| x).map(char::len_utf8).sum();\n+        callback(byte_offset..(byte_offset + len_utf8), result);\n+        byte_offset += len_utf8;\n     }\n }\n "}]}