{"sha": "0415dcd8324f1acf726315fdaba919c11ab7a462", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MTVkY2Q4MzI0ZjFhY2Y3MjYzMTVmZGFiYTkxOWMxMWFiN2E0NjI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-19T11:27:10Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-19T12:13:27Z"}, "message": "Tidy up", "tree": {"sha": "a1ebe58800e53dc4200c60504059572b380f4803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1ebe58800e53dc4200c60504059572b380f4803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0415dcd8324f1acf726315fdaba919c11ab7a462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0415dcd8324f1acf726315fdaba919c11ab7a462", "html_url": "https://github.com/rust-lang/rust/commit/0415dcd8324f1acf726315fdaba919c11ab7a462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0415dcd8324f1acf726315fdaba919c11ab7a462/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c292e3cc5bd79f4204e25d0ca7e712e9496d6da", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c292e3cc5bd79f4204e25d0ca7e712e9496d6da", "html_url": "https://github.com/rust-lang/rust/commit/8c292e3cc5bd79f4204e25d0ca7e712e9496d6da"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "c4e0d06698f27cc2db416b69a2aa0d1cadc565f8", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0415dcd8324f1acf726315fdaba919c11ab7a462/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0415dcd8324f1acf726315fdaba919c11ab7a462/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=0415dcd8324f1acf726315fdaba919c11ab7a462", "patch": "@@ -265,11 +265,11 @@ impl Test for T {\n     t<|>\n }\n \"#,\n-            expect![[r#\"\n-                ta type TestType = \n-                ct const TEST_CONST: u16 = \n-                fn fn test()\n-            \"#]],\n+            expect![[\"\n+ta type TestType = \\n\\\n+ct const TEST_CONST: u16 = \\n\\\n+fn fn test()\n+\"]],\n         );\n     }\n "}, {"sha": "0fbcf4f8ca9752d7c3a8b18faab3bd626340afa6", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0415dcd8324f1acf726315fdaba919c11ab7a462/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0415dcd8324f1acf726315fdaba919c11ab7a462/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=0415dcd8324f1acf726315fdaba919c11ab7a462", "patch": "@@ -153,15 +153,15 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n     acc.add_all(all_mod_paths.into_iter().filter_map(|(import_path, definition)| {\n         render_resolution_with_import(\n             RenderContext::new(ctx),\n-            ImportEdit { import_path: import_path, import_scope: import_scope.clone() },\n+            ImportEdit { import_path, import_scope: import_scope.clone() },\n             &definition,\n         )\n     }));\n     Some(())\n }\n \n-// todo kb add tet marks for the completion order test + the sotring description\n fn compute_fuzzy_completion_order_key(proposed_mod_path: &ModPath, user_input: &str) -> usize {\n+    mark::hit!(certain_fuzzy_order_test);\n     let proposed_import_name = match proposed_mod_path.segments.last() {\n         Some(name) => name.to_string().to_lowercase(),\n         None => return usize::MAX,\n@@ -193,6 +193,14 @@ mod tests {\n         expect.assert_eq(&actual)\n     }\n \n+    fn fuzzy_completion_config() -> CompletionConfig {\n+        let mut completion_config = CompletionConfig::default();\n+        completion_config\n+            .active_resolve_capabilities\n+            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n+        completion_config\n+    }\n+\n     #[test]\n     fn self_fulfilling_completion() {\n         mark::check!(self_fulfilling_completion);\n@@ -794,13 +802,8 @@ impl My<|>\n \n     #[test]\n     fn function_fuzzy_completion() {\n-        let mut completion_config = CompletionConfig::default();\n-        completion_config\n-            .active_resolve_capabilities\n-            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n-\n         check_edit_with_config(\n-            completion_config,\n+            fuzzy_completion_config(),\n             \"stdin\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -825,13 +828,8 @@ fn main() {\n \n     #[test]\n     fn macro_fuzzy_completion() {\n-        let mut completion_config = CompletionConfig::default();\n-        completion_config\n-            .active_resolve_capabilities\n-            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n-\n         check_edit_with_config(\n-            completion_config,\n+            fuzzy_completion_config(),\n             \"macro_with_curlies!\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -858,13 +856,8 @@ fn main() {\n \n     #[test]\n     fn struct_fuzzy_completion() {\n-        let mut completion_config = CompletionConfig::default();\n-        completion_config\n-            .active_resolve_capabilities\n-            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n-\n         check_edit_with_config(\n-            completion_config,\n+            fuzzy_completion_config(),\n             \"ThirdStruct\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -893,21 +886,22 @@ fn main() {\n \n     #[test]\n     fn fuzzy_completions_come_in_specific_order() {\n-        let mut completion_config = CompletionConfig::default();\n-        completion_config\n-            .active_resolve_capabilities\n-            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n-\n+        mark::check!(certain_fuzzy_order_test);\n         check_with_config(\n-            completion_config,\n+            fuzzy_completion_config(),\n             r#\"\n //- /lib.rs crate:dep\n pub struct FirstStruct;\n pub mod some_module {\n+    // already imported, omitted\n     pub struct SecondStruct;\n-\n+    // does not contain all letters from the query, omitted\n+    pub struct UnrelatedOne;\n+    // contains all letters from the query, but not in sequence, displayed last\n     pub struct ThiiiiiirdStruct;\n+    // contains all letters from the query, but not in the beginning, displayed second\n     pub struct AfterThirdStruct;\n+    // contains all letters from the query in the begginning, displayed first\n     pub struct ThirdStruct;\n }\n "}]}