{"sha": "10fe7bfc7394b32471f1bad199fd9f8300cd80c2", "node_id": "C_kwDOAAsO6NoAKDEwZmU3YmZjNzM5NGIzMjQ3MWYxYmFkMTk5ZmQ5ZjgzMDBjZDgwYzI", "commit": {"author": {"name": "Tim Neumann", "email": "timnn@google.com", "date": "2023-01-06T11:48:03Z"}, "committer": {"name": "Tim Neumann", "email": "timnn@google.com", "date": "2023-01-16T18:09:39Z"}, "message": "compiletest: Support running with a remapped base directory.", "tree": {"sha": "32ea49c50fd1c335b5f0c44afa83bb2739c040f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32ea49c50fd1c335b5f0c44afa83bb2739c040f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10fe7bfc7394b32471f1bad199fd9f8300cd80c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10fe7bfc7394b32471f1bad199fd9f8300cd80c2", "html_url": "https://github.com/rust-lang/rust/commit/10fe7bfc7394b32471f1bad199fd9f8300cd80c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10fe7bfc7394b32471f1bad199fd9f8300cd80c2/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d79207273842c9fd414b9060f74c411d9610b28d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d79207273842c9fd414b9060f74c411d9610b28d", "html_url": "https://github.com/rust-lang/rust/commit/d79207273842c9fd414b9060f74c411d9610b28d"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "fd4b51d637c1aced5f920a99d1953ec2fcbde2cf", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10fe7bfc7394b32471f1bad199fd9f8300cd80c2/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fe7bfc7394b32471f1bad199fd9f8300cd80c2/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=10fe7bfc7394b32471f1bad199fd9f8300cd80c2", "patch": "@@ -162,6 +162,9 @@ pub struct TestProps {\n     pub stderr_per_bitwidth: bool,\n     // The MIR opt to unit test, if any\n     pub mir_unit_test: Option<String>,\n+    // Whether to tell `rustc` to remap the \"src base\" directory to a fake\n+    // directory.\n+    pub remap_src_base: bool,\n }\n \n mod directives {\n@@ -196,6 +199,7 @@ mod directives {\n     pub const INCREMENTAL: &'static str = \"incremental\";\n     pub const KNOWN_BUG: &'static str = \"known-bug\";\n     pub const MIR_UNIT_TEST: &'static str = \"unit-test\";\n+    pub const REMAP_SRC_BASE: &'static str = \"remap-src-base\";\n     // This isn't a real directive, just one that is probably mistyped often\n     pub const INCORRECT_COMPILER_FLAGS: &'static str = \"compiler-flags\";\n }\n@@ -241,6 +245,7 @@ impl TestProps {\n             should_ice: false,\n             stderr_per_bitwidth: false,\n             mir_unit_test: None,\n+            remap_src_base: false,\n         }\n     }\n \n@@ -433,6 +438,7 @@ impl TestProps {\n                 config.set_name_value_directive(ln, MIR_UNIT_TEST, &mut self.mir_unit_test, |s| {\n                     s.trim().to_string()\n                 });\n+                config.set_name_directive(ln, REMAP_SRC_BASE, &mut self.remap_src_base);\n             });\n         }\n "}, {"sha": "859c0f1da06c3db9ccc18df91dfbe913ddd2cb1b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/10fe7bfc7394b32471f1bad199fd9f8300cd80c2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fe7bfc7394b32471f1bad199fd9f8300cd80c2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=10fe7bfc7394b32471f1bad199fd9f8300cd80c2", "patch": "@@ -44,6 +44,8 @@ use debugger::{check_debugger_output, DebuggerCommands};\n #[cfg(test)]\n mod tests;\n \n+const FAKE_SRC_BASE: &str = \"fake-test-src-base\";\n+\n #[cfg(windows)]\n fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     use std::sync::Mutex;\n@@ -1328,12 +1330,19 @@ impl<'test> TestCx<'test> {\n             return;\n         }\n \n+        // On Windows, translate all '\\' path separators to '/'\n+        let file_name = format!(\"{}\", self.testpaths.file.display()).replace(r\"\\\", \"/\");\n+\n         // On Windows, keep all '\\' path separators to match the paths reported in the JSON output\n         // from the compiler\n-        let os_file_name = self.testpaths.file.display().to_string();\n-\n-        // on windows, translate all '\\' path separators to '/'\n-        let file_name = format!(\"{}\", self.testpaths.file.display()).replace(r\"\\\", \"/\");\n+        let diagnostic_file_name = if self.props.remap_src_base {\n+            let mut p = PathBuf::from(FAKE_SRC_BASE);\n+            p.push(&self.testpaths.relative_dir);\n+            p.push(self.testpaths.file.file_name().unwrap());\n+            p.display().to_string()\n+        } else {\n+            self.testpaths.file.display().to_string()\n+        };\n \n         // If the testcase being checked contains at least one expected \"help\"\n         // message, then we'll ensure that all \"help\" messages are expected.\n@@ -1343,7 +1352,7 @@ impl<'test> TestCx<'test> {\n         let expect_note = expected_errors.iter().any(|ee| ee.kind == Some(ErrorKind::Note));\n \n         // Parse the JSON output from the compiler and extract out the messages.\n-        let actual_errors = json::parse_output(&os_file_name, &proc_res.stderr, proc_res);\n+        let actual_errors = json::parse_output(&diagnostic_file_name, &proc_res.stderr, proc_res);\n         let mut unexpected = Vec::new();\n         let mut found = vec![false; expected_errors.len()];\n         for actual_error in &actual_errors {\n@@ -1970,6 +1979,14 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n+        if self.props.remap_src_base {\n+            rustc.arg(format!(\n+                \"--remap-path-prefix={}={}\",\n+                self.config.src_base.display(),\n+                FAKE_SRC_BASE,\n+            ));\n+        }\n+\n         match emit {\n             Emit::None => {}\n             Emit::Metadata if is_rustdoc => {}\n@@ -3545,6 +3562,14 @@ impl<'test> TestCx<'test> {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         normalize_path(parent_dir, \"$DIR\");\n \n+        if self.props.remap_src_base {\n+            let mut remapped_parent_dir = PathBuf::from(FAKE_SRC_BASE);\n+            if self.testpaths.relative_dir != Path::new(\"\") {\n+                remapped_parent_dir.push(&self.testpaths.relative_dir);\n+            }\n+            normalize_path(&remapped_parent_dir, \"$DIR\");\n+        }\n+\n         let source_bases = &[\n             // Source base on the current filesystem (calculated as parent of `tests/$suite`):\n             Some(self.config.src_base.parent().unwrap().parent().unwrap().into()),"}]}