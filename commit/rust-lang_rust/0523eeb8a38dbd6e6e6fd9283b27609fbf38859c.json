{"sha": "0523eeb8a38dbd6e6e6fd9283b27609fbf38859c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MjNlZWI4YTM4ZGJkNmU2ZTZmZDkyODNiMjc2MDlmYmYzODg1OWM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-27T18:15:51Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-27T18:15:51Z"}, "message": "Move {f32,f64}::clamp to core.", "tree": {"sha": "12797d965b51ef4875aaad8571da56e251757e59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12797d965b51ef4875aaad8571da56e251757e59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c", "html_url": "https://github.com/rust-lang/rust/commit/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "url": "https://api.github.com/repos/rust-lang/rust/commits/192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "html_url": "https://github.com/rust-lang/rust/commit/192c7dbb6dbd0b2c176101ed2fe785901b2a457d"}], "stats": {"total": 140, "additions": 70, "deletions": 70}, "files": [{"sha": "4d876fd8c33e28807706e3317ae880e2f3b0ae58", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=0523eeb8a38dbd6e6e6fd9283b27609fbf38859c", "patch": "@@ -961,4 +961,39 @@ impl f32 {\n \n         left.cmp(&right)\n     }\n+\n+    /// Restrict a value to a certain interval unless it is NaN.\n+    ///\n+    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n+    /// less than `min`. Otherwise this returns `self`.\n+    ///\n+    /// Note that this function returns NaN if the initial value was NaN as\n+    /// well.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `min > max`, `min` is NaN, or `max` is NaN.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert!((-3.0f32).clamp(-2.0, 1.0) == -2.0);\n+    /// assert!((0.0f32).clamp(-2.0, 1.0) == 0.0);\n+    /// assert!((2.0f32).clamp(-2.0, 1.0) == 1.0);\n+    /// assert!((f32::NAN).clamp(-2.0, 1.0).is_nan());\n+    /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[stable(feature = \"clamp\", since = \"1.50.0\")]\n+    #[inline]\n+    pub fn clamp(self, min: f32, max: f32) -> f32 {\n+        assert!(min <= max);\n+        let mut x = self;\n+        if x < min {\n+            x = min;\n+        }\n+        if x > max {\n+            x = max;\n+        }\n+        x\n+    }\n }"}, {"sha": "3323b7d6774df6bdab76a66a7241b3e1c8ba9b29", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=0523eeb8a38dbd6e6e6fd9283b27609fbf38859c", "patch": "@@ -975,4 +975,39 @@ impl f64 {\n \n         left.cmp(&right)\n     }\n+\n+    /// Restrict a value to a certain interval unless it is NaN.\n+    ///\n+    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n+    /// less than `min`. Otherwise this returns `self`.\n+    ///\n+    /// Note that this function returns NaN if the initial value was NaN as\n+    /// well.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `min > max`, `min` is NaN, or `max` is NaN.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert!((-3.0f64).clamp(-2.0, 1.0) == -2.0);\n+    /// assert!((0.0f64).clamp(-2.0, 1.0) == 0.0);\n+    /// assert!((2.0f64).clamp(-2.0, 1.0) == 1.0);\n+    /// assert!((f64::NAN).clamp(-2.0, 1.0).is_nan());\n+    /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[stable(feature = \"clamp\", since = \"1.50.0\")]\n+    #[inline]\n+    pub fn clamp(self, min: f64, max: f64) -> f64 {\n+        assert!(min <= max);\n+        let mut x = self;\n+        if x < min {\n+            x = min;\n+        }\n+        if x > max {\n+            x = max;\n+        }\n+        x\n+    }\n }"}, {"sha": "453534b869121fb39cecc8e4d2cceb416c36fda3", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=0523eeb8a38dbd6e6e6fd9283b27609fbf38859c", "patch": "@@ -877,39 +877,4 @@ impl f32 {\n     pub fn atanh(self) -> f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n-\n-    /// Restrict a value to a certain interval unless it is NaN.\n-    ///\n-    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n-    /// less than `min`. Otherwise this returns `self`.\n-    ///\n-    /// Note that this function returns NaN if the initial value was NaN as\n-    /// well.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if `min > max`, `min` is NaN, or `max` is NaN.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// assert!((-3.0f32).clamp(-2.0, 1.0) == -2.0);\n-    /// assert!((0.0f32).clamp(-2.0, 1.0) == 0.0);\n-    /// assert!((2.0f32).clamp(-2.0, 1.0) == 1.0);\n-    /// assert!((f32::NAN).clamp(-2.0, 1.0).is_nan());\n-    /// ```\n-    #[must_use = \"method returns a new number and does not mutate the original value\"]\n-    #[stable(feature = \"clamp\", since = \"1.50.0\")]\n-    #[inline]\n-    pub fn clamp(self, min: f32, max: f32) -> f32 {\n-        assert!(min <= max);\n-        let mut x = self;\n-        if x < min {\n-            x = min;\n-        }\n-        if x > max {\n-            x = max;\n-        }\n-        x\n-    }\n }"}, {"sha": "a1a9e9dac5fa0b3591614e0dd0746c8e6f1015d9", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0523eeb8a38dbd6e6e6fd9283b27609fbf38859c/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=0523eeb8a38dbd6e6e6fd9283b27609fbf38859c", "patch": "@@ -880,41 +880,6 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n-    /// Restrict a value to a certain interval unless it is NaN.\n-    ///\n-    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n-    /// less than `min`. Otherwise this returns `self`.\n-    ///\n-    /// Note that this function returns NaN if the initial value was NaN as\n-    /// well.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if `min > max`, `min` is NaN, or `max` is NaN.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// assert!((-3.0f64).clamp(-2.0, 1.0) == -2.0);\n-    /// assert!((0.0f64).clamp(-2.0, 1.0) == 0.0);\n-    /// assert!((2.0f64).clamp(-2.0, 1.0) == 1.0);\n-    /// assert!((f64::NAN).clamp(-2.0, 1.0).is_nan());\n-    /// ```\n-    #[must_use = \"method returns a new number and does not mutate the original value\"]\n-    #[stable(feature = \"clamp\", since = \"1.50.0\")]\n-    #[inline]\n-    pub fn clamp(self, min: f64, max: f64) -> f64 {\n-        assert!(min <= max);\n-        let mut x = self;\n-        if x < min {\n-            x = min;\n-        }\n-        if x > max {\n-            x = max;\n-        }\n-        x\n-    }\n-\n     // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g., log(-n) returns -Inf instead\n     // of expected NaN)."}]}