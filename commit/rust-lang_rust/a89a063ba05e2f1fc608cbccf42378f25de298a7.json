{"sha": "a89a063ba05e2f1fc608cbccf42378f25de298a7", "node_id": "C_kwDOAAsO6NoAKGE4OWEwNjNiYTA1ZTJmMWZjNjA4Y2JjY2Y0MjM3OGYyNWRlMjk4YTc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-14T21:32:21Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-15T02:30:26Z"}, "message": "Remove `SymbolStr`.\n\nBy changing `as_str()` to take `&self` instead of `self`, we can just\nreturn `&str`. We're still lying about lifetimes, but it's a smaller lie\nthan before, where `SymbolStr` contained a (fake) `&'static str`!", "tree": {"sha": "23180e84281c2c206beaa7ce04a1ede1406f8807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23180e84281c2c206beaa7ce04a1ede1406f8807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a89a063ba05e2f1fc608cbccf42378f25de298a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a89a063ba05e2f1fc608cbccf42378f25de298a7", "html_url": "https://github.com/rust-lang/rust/commit/a89a063ba05e2f1fc608cbccf42378f25de298a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a89a063ba05e2f1fc608cbccf42378f25de298a7/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41c48bd390c6aa43d9567bc11710d67ab41930fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/41c48bd390c6aa43d9567bc11710d67ab41930fc", "html_url": "https://github.com/rust-lang/rust/commit/41c48bd390c6aa43d9567bc11710d67ab41930fc"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "06a99ff5418f761179a07781bd7e73ea7367c807", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=a89a063ba05e2f1fc608cbccf42378f25de298a7", "patch": "@@ -17,7 +17,7 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n-use rustc_span::symbol::{Symbol, SymbolStr};\n+use rustc_span::symbol::Symbol;\n use semver::Version;\n \n static UNIX_SYSTEMS: &[&str] = &[\n@@ -310,8 +310,8 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                             || is_word(lint, sym::deprecated)\n                                             || is_word(lint, sym!(unreachable_pub))\n                                             || is_word(lint, sym!(unused))\n-                                            || extract_clippy_lint(lint).map_or(false, |s| s == \"wildcard_imports\")\n-                                            || extract_clippy_lint(lint).map_or(false, |s| s == \"enum_glob_use\")\n+                                            || extract_clippy_lint(lint).map_or(false, |s| s.as_str() == \"wildcard_imports\")\n+                                            || extract_clippy_lint(lint).map_or(false, |s| s.as_str() == \"enum_glob_use\")\n                                         {\n                                             return;\n                                         }\n@@ -370,15 +370,15 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n }\n \n /// Returns the lint name if it is clippy lint.\n-fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n+fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<Symbol> {\n     if_chain! {\n         if let Some(meta_item) = lint.meta_item();\n         if meta_item.path.segments.len() > 1;\n         if let tool_name = meta_item.path.segments[0].ident;\n         if tool_name.name == sym::clippy;\n         then {\n             let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n-            return Some(lint_name.as_str());\n+            return Some(lint_name);\n         }\n     }\n     None\n@@ -387,7 +387,7 @@ fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n fn check_clippy_lint_names(cx: &LateContext<'_>, name: Symbol, items: &[NestedMetaItem]) {\n     for lint in items {\n         if let Some(lint_name) = extract_clippy_lint(lint) {\n-            if lint_name == \"restriction\" && name != sym::allow {\n+            if lint_name.as_str() == \"restriction\" && name != sym::allow {\n                 span_lint_and_help(\n                     cx,\n                     BLANKET_CLIPPY_RESTRICTION_LINTS,"}, {"sha": "2412838518990fbcbd7642832eeb4b965fd20b62", "filename": "clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=a89a063ba05e2f1fc608cbccf42378f25de298a7", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n@@ -71,8 +71,8 @@ impl LateLintPass<'_> for MatchStrCaseMismatch {\n                 visitor.visit_expr(match_expr);\n \n                 if let Some(case_method) = visitor.case_method {\n-                    if let Some((bad_case_span, bad_case_str)) = verify_case(&case_method, arms) {\n-                        lint(cx, &case_method, bad_case_span, &bad_case_str);\n+                    if let Some((bad_case_span, bad_case_sym)) = verify_case(&case_method, arms) {\n+                        lint(cx, &case_method, bad_case_span, bad_case_sym.as_str());\n                     }\n                 }\n             }\n@@ -126,7 +126,7 @@ fn get_case_method(segment_ident_str: &str) -> Option<CaseMethod> {\n     }\n }\n \n-fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(Span, SymbolStr)> {\n+fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(Span, Symbol)> {\n     let case_check = match case_method {\n         CaseMethod::LowerCase => |input: &str| -> bool { input.chars().all(|c| c.to_lowercase().next() == Some(c)) },\n         CaseMethod::AsciiLowerCase => |input: &str| -> bool { !input.chars().any(|c| c.is_ascii_uppercase()) },\n@@ -144,7 +144,7 @@ fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(\n             let input = symbol.as_str();\n             if !case_check(&input);\n             then {\n-                return Some((lit.span, input));\n+                return Some((lit.span, symbol));\n             }\n         }\n     }"}, {"sha": "e1b1828f7fe86f8ab50532ca19a6b818b361b759", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a89a063ba05e2f1fc608cbccf42378f25de298a7", "patch": "@@ -78,7 +78,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n use rustc_typeck::hir_ty_to_ty;\n \n@@ -1968,21 +1968,21 @@ impl_lint_pass!(Methods => [\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n-fn method_call<'tcx>(recv: &'tcx hir::Expr<'tcx>) -> Option<(SymbolStr, &'tcx [hir::Expr<'tcx>], Span)> {\n+fn method_call<'tcx>(recv: &'tcx hir::Expr<'tcx>) -> Option<(Symbol, &'tcx [hir::Expr<'tcx>], Span)> {\n     if let ExprKind::MethodCall(path, span, args, _) = recv.kind {\n         if !args.iter().any(|e| e.span.from_expansion()) {\n-            return Some((path.ident.name.as_str(), args, span));\n+            return Some((path.ident.name, args, span));\n         }\n     }\n     None\n }\n \n-/// Same as `method_call` but the `SymbolStr` is dereferenced into a temporary `&str`\n+/// Same as `method_call` but the `Symbol` is dereferenced into a temporary `&str`\n macro_rules! method_call {\n     ($expr:expr) => {\n         method_call($expr)\n             .as_ref()\n-            .map(|&(ref name, args, span)| (&**name, args, span))\n+            .map(|&(ref name, args, span)| (name.as_str(), args, span))\n     };\n }\n "}, {"sha": "401dc27811dc3aa05ca5de9c822c9bb41c7a7bd5", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=a89a063ba05e2f1fc608cbccf42378f25de298a7", "patch": "@@ -407,6 +407,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n             // Don't lint things expanded by #[derive(...)], etc or `await` desugaring\n             return;\n         }\n+        let sym;\n         let binding = match expr.kind {\n             ExprKind::Path(ref qpath) if !matches!(qpath, hir::QPath::LangItem(..)) => {\n                 let binding = last_path_segment(qpath).ident.as_str();\n@@ -423,7 +424,8 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                 }\n             },\n             ExprKind::Field(_, ident) => {\n-                let name = ident.as_str();\n+                sym = ident.name;\n+                let name = sym.as_str();\n                 if name.starts_with('_') && !name.starts_with(\"__\") {\n                     Some(name)\n                 } else {"}, {"sha": "1f9db39cf8ca6a7e9742a2761d4bb89b466614f6", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=a89a063ba05e2f1fc608cbccf42378f25de298a7", "patch": "@@ -48,15 +48,15 @@ impl LateLintPass<'_> for MultipleCrateVersions {\n         }\n \n         let metadata = unwrap_cargo_metadata!(cx, MULTIPLE_CRATE_VERSIONS, true);\n-        let local_name = cx.tcx.crate_name(LOCAL_CRATE).as_str();\n+        let local_name = cx.tcx.crate_name(LOCAL_CRATE);\n         let mut packages = metadata.packages;\n         packages.sort_by(|a, b| a.name.cmp(&b.name));\n \n         if_chain! {\n             if let Some(resolve) = &metadata.resolve;\n             if let Some(local_id) = packages\n                 .iter()\n-                .find_map(|p| if p.name == *local_name { Some(&p.id) } else { None });\n+                .find_map(|p| if p.name == local_name.as_str() { Some(&p.id) } else { None });\n             then {\n                 for (name, group) in &packages.iter().group_by(|p| p.name.clone()) {\n                     let group: Vec<&Package> = group.collect();"}, {"sha": "dc5ec5f229518eda886895e80a633a30aefb8052", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89a063ba05e2f1fc608cbccf42378f25de298a7/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=a89a063ba05e2f1fc608cbccf42378f25de298a7", "patch": "@@ -319,8 +319,8 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     if let ExprKind::Path(qpath) = &callee.kind;\n                     let res = self.typeck_results.qpath_res(qpath, callee.hir_id);\n                     if let Some(def_id) = res.opt_def_id();\n-                    let def_path: Vec<_> = self.lcx.get_def_path(def_id).into_iter().map(Symbol::as_str).collect();\n-                    let def_path: Vec<&str> = def_path.iter().take(4).map(|s| &**s).collect();\n+                    let def_path = self.lcx.get_def_path(def_id);\n+                    let def_path: Vec<&str> = def_path.iter().take(4).map(|s| s.as_str()).collect();\n                     if let [\"core\", \"num\", int_impl, \"max_value\"] = *def_path;\n                     then {\n                        let value = match int_impl {"}]}