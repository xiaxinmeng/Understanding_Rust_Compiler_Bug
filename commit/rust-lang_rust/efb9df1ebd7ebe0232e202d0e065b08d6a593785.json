{"sha": "efb9df1ebd7ebe0232e202d0e065b08d6a593785", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYjlkZjFlYmQ3ZWJlMDIzMmUyMDJkMGUwNjViMDhkNmE1OTM3ODU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-12T16:59:49Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-12T17:04:02Z"}, "message": "Make driver::session::session no longer an object\n\nRather, it is now a struct where properties like opts are accessed\ndirectly, and the error-reporting methods are part of a static impl\n(with the same name as the type).", "tree": {"sha": "c0e798a4f2529fb5cdb6512555676ba2bae0c5b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e798a4f2529fb5cdb6512555676ba2bae0c5b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb9df1ebd7ebe0232e202d0e065b08d6a593785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb9df1ebd7ebe0232e202d0e065b08d6a593785", "html_url": "https://github.com/rust-lang/rust/commit/efb9df1ebd7ebe0232e202d0e065b08d6a593785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb9df1ebd7ebe0232e202d0e065b08d6a593785/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56fe4c2681f7ef467d8b3405279acbcfc6b0ebcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/56fe4c2681f7ef467d8b3405279acbcfc6b0ebcf", "html_url": "https://github.com/rust-lang/rust/commit/56fe4c2681f7ef467d8b3405279acbcfc6b0ebcf"}], "stats": {"total": 433, "additions": 227, "deletions": 206}, "files": [{"sha": "46984d1ad6fff989d40d9874874ee2f6cdad7292", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -1,5 +1,6 @@\n \n import driver::session;\n+import session::session;\n import lib::llvm::llvm;\n import front::attr;\n import middle::ty;\n@@ -30,16 +31,16 @@ tag output_type {\n     output_type_exe;\n }\n \n-fn llvm_err(sess: session::session, msg: str) unsafe {\n+fn llvm_err(sess: session, msg: str) unsafe {\n     let buf = llvm::LLVMRustGetLastError();\n     if buf == ptr::null() {\n         sess.fatal(msg);\n     } else { sess.fatal(msg + \": \" + str::from_cstr(buf)); }\n }\n \n-fn load_intrinsics_bc(sess: session::session) -> option::t<ModuleRef> {\n+fn load_intrinsics_bc(sess: session) -> option::t<ModuleRef> {\n     let path = alt filesearch::search(\n-        sess.filesearch(),\n+        sess.filesearch,\n         bind filesearch::pick_file(\"intrinsics.bc\", _)) {\n       option::some(path) { path }\n       option::none. {\n@@ -64,9 +65,9 @@ fn load_intrinsics_bc(sess: session::session) -> option::t<ModuleRef> {\n     ret option::some(llintrinsicsmod);\n }\n \n-fn load_intrinsics_ll(sess: session::session) -> ModuleRef {\n+fn load_intrinsics_ll(sess: session) -> ModuleRef {\n     let path = alt filesearch::search(\n-        sess.filesearch(),\n+        sess.filesearch,\n         bind filesearch::pick_file(\"intrinsics.ll\", _)) {\n       option::some(path) { path }\n       option::none. { sess.fatal(\"couldn't find intrinsics.ll\") }\n@@ -81,7 +82,7 @@ fn load_intrinsics_ll(sess: session::session) -> ModuleRef {\n     ret llintrinsicsmod;\n }\n \n-fn link_intrinsics(sess: session::session, llmod: ModuleRef) {\n+fn link_intrinsics(sess: session, llmod: ModuleRef) {\n     let llintrinsicsmod = {\n         alt load_intrinsics_bc(sess) {\n           option::some(m) { m }\n@@ -122,13 +123,13 @@ mod write {\n         } else { stem = str::substr(output_path, 0u, dot_pos as uint); }\n         ret stem + \".\" + extension;\n     }\n-    fn run_passes(sess: session::session, llmod: ModuleRef, output: str) {\n-        let opts = sess.get_opts();\n+    fn run_passes(sess: session, llmod: ModuleRef, output: str) {\n+        let opts = sess.opts;\n         if opts.time_llvm_passes { llvm::LLVMRustEnableTimePasses(); }\n         link_intrinsics(sess, llmod);\n         let pm = mk_pass_manager();\n         let td = mk_target_data(\n-            sess.get_targ_cfg().target_strs.data_layout);\n+            sess.targ_cfg.target_strs.data_layout);\n         llvm::LLVMAddTargetData(td.lltd, pm.llpm);\n         // TODO: run the linter here also, once there are llvm-c bindings for\n         // it.\n@@ -234,7 +235,7 @@ mod write {\n \n                 if opts.output_type == output_type_assembly {\n                     let _: () = str::as_buf(\n-                        sess.get_targ_cfg().target_strs.target_triple,\n+                        sess.targ_cfg.target_strs.target_triple,\n                         {|buf_t|\n                             str::as_buf(output, {|buf_o|\n                                 llvm::LLVMRustWriteOutputFile(\n@@ -254,7 +255,7 @@ mod write {\n                        opts.output_type == output_type_exe {\n                     let _: () =\n                         str::as_buf(\n-                            sess.get_targ_cfg().target_strs.target_triple,\n+                            sess.targ_cfg.target_strs.target_triple,\n                             {|buf_t|\n                                 str::as_buf(output, {|buf_o|\n                                     llvm::LLVMRustWriteOutputFile(\n@@ -272,7 +273,7 @@ mod write {\n \n                 let _: () =\n                     str::as_buf(\n-                        sess.get_targ_cfg().target_strs.target_triple,\n+                        sess.targ_cfg.target_strs.target_triple,\n                         {|buf_t|\n                             str::as_buf(output, {|buf_o|\n                                 llvm::LLVMRustWriteOutputFile(\n@@ -362,15 +363,15 @@ mod write {\n \n type link_meta = {name: str, vers: str, extras_hash: str};\n \n-fn build_link_meta(sess: session::session, c: ast::crate, output: str,\n+fn build_link_meta(sess: session, c: ast::crate, output: str,\n                    sha: sha1) -> link_meta {\n \n     type provided_metas =\n         {name: option::t<str>,\n          vers: option::t<str>,\n          cmh_items: [@ast::meta_item]};\n \n-    fn provided_link_metas(sess: session::session, c: ast::crate) ->\n+    fn provided_link_metas(sess: session, c: ast::crate) ->\n        provided_metas {\n         let name: option::t<str> = none;\n         let vers: option::t<str> = none;\n@@ -430,13 +431,13 @@ fn build_link_meta(sess: session::session, c: ast::crate, output: str,\n         ret truncated_sha1_result(sha);\n     }\n \n-    fn warn_missing(sess: session::session, name: str, default: str) {\n-        if !sess.building_library() { ret; }\n+    fn warn_missing(sess: session, name: str, default: str) {\n+        if !sess.building_library { ret; }\n         sess.warn(#fmt[\"missing crate link meta '%s', using '%s' as default\",\n                        name, default]);\n     }\n \n-    fn crate_meta_name(sess: session::session, _crate: ast::crate,\n+    fn crate_meta_name(sess: session, _crate: ast::crate,\n                        output: str, metas: provided_metas) -> str {\n         ret alt metas.name {\n               some(v) { v }\n@@ -454,7 +455,7 @@ fn build_link_meta(sess: session::session, c: ast::crate, output: str,\n             };\n     }\n \n-    fn crate_meta_vers(sess: session::session, _crate: ast::crate,\n+    fn crate_meta_vers(sess: session, _crate: ast::crate,\n                        metas: provided_metas) -> str {\n         ret alt metas.vers {\n               some(v) { v }\n@@ -469,7 +470,7 @@ fn build_link_meta(sess: session::session, c: ast::crate, output: str,\n     let provided_metas = provided_link_metas(sess, c);\n     let name = crate_meta_name(sess, c, output, provided_metas);\n     let vers = crate_meta_vers(sess, c, provided_metas);\n-    let dep_hashes = cstore::get_dep_hashes(sess.get_cstore());\n+    let dep_hashes = cstore::get_dep_hashes(sess.cstore);\n     let extras_hash =\n         crate_meta_extras_hash(sha, c, provided_metas, dep_hashes);\n \n@@ -557,7 +558,7 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n \n // If the user wants an exe generated we need to invoke\n // gcc to link the object file with some libs\n-fn link_binary(sess: session::session,\n+fn link_binary(sess: session,\n                obj_filename: str,\n                out_filename: str,\n                lm: link_meta) {\n@@ -586,7 +587,7 @@ fn link_binary(sess: session::session,\n             };\n     }\n \n-    let output = if sess.building_library() {\n+    let output = if sess.building_library {\n         let long_libname =\n             std::os::dylib_filename(#fmt(\"%s-%s-%s\",\n                                          lm.name, lm.extras_hash, lm.vers));\n@@ -602,22 +603,22 @@ fn link_binary(sess: session::session,\n \n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n-    let stage: str = \"-L\" + sess.filesearch().get_target_lib_path();\n+    let stage: str = \"-L\" + sess.filesearch.get_target_lib_path();\n \n     let prog: str = \"gcc\";\n     // The invocations of gcc share some flags across platforms\n \n     let gcc_args =\n-        [stage] + sess.get_targ_cfg().target_strs.gcc_args +\n+        [stage] + sess.targ_cfg.target_strs.gcc_args +\n         [\"-o\", output, obj_filename];\n \n     let lib_cmd;\n-    let os = sess.get_targ_cfg().os;\n+    let os = sess.targ_cfg.os;\n     if os == session::os_macos {\n         lib_cmd = \"-dynamiclib\";\n     } else { lib_cmd = \"-shared\"; }\n \n-    let cstore = sess.get_cstore();\n+    let cstore = sess.cstore;\n     for cratepath: str in cstore::get_used_crate_files(cstore) {\n         if str::ends_with(cratepath, \".rlib\") {\n             gcc_args += [cratepath];\n@@ -626,7 +627,7 @@ fn link_binary(sess: session::session,\n         let cratepath = cratepath;\n         let dir = fs::dirname(cratepath);\n         if dir != \"\" { gcc_args += [\"-L\" + dir]; }\n-        let libarg = unlib(sess.get_targ_cfg(), fs::basename(cratepath));\n+        let libarg = unlib(sess.targ_cfg, fs::basename(cratepath));\n         gcc_args += [\"-l\" + libarg];\n     }\n \n@@ -636,12 +637,12 @@ fn link_binary(sess: session::session,\n     let used_libs = cstore::get_used_libraries(cstore);\n     for l: str in used_libs { gcc_args += [\"-l\" + l]; }\n \n-    if sess.building_library() {\n+    if sess.building_library {\n         gcc_args += [lib_cmd];\n \n         // On mac we need to tell the linker to let this library\n         // be rpathed\n-        if sess.get_targ_cfg().os == session::os_macos {\n+        if sess.targ_cfg.os == session::os_macos {\n             gcc_args += [\"-Wl,-install_name,@rpath/\"\n                         + fs::basename(output)];\n         }\n@@ -655,11 +656,11 @@ fn link_binary(sess: session::session,\n \n     // On linux librt and libdl are an indirect dependencies via rustrt,\n     // and binutils 2.22+ won't add them automatically\n-    if sess.get_targ_cfg().os == session::os_linux {\n+    if sess.targ_cfg.os == session::os_linux {\n         gcc_args += [\"-lrt\", \"-ldl\"];\n     }\n \n-    if sess.get_targ_cfg().os == session::os_freebsd {\n+    if sess.targ_cfg.os == session::os_freebsd {\n         gcc_args += [\"-lrt\", \"-L/usr/local/lib\", \"-lexecinfo\",\n                      \"-L/usr/local/lib/gcc46\",\n                      \"-L/usr/local/lib/gcc44\", \"-lstdc++\",\n@@ -672,7 +673,7 @@ fn link_binary(sess: session::session,\n     // linker from the dwarf unwind info. Unfortunately, it does not seem to\n     // understand how to unwind our __morestack frame, so we have to turn it\n     // off. This has impacted some other projects like GHC.\n-    if sess.get_targ_cfg().os == session::os_macos {\n+    if sess.targ_cfg.os == session::os_macos {\n         gcc_args += [\"-Wl,-no_compact_unwind\"];\n     }\n \n@@ -692,12 +693,12 @@ fn link_binary(sess: session::session,\n     }\n \n     // Clean up on Darwin\n-    if sess.get_targ_cfg().os == session::os_macos {\n+    if sess.targ_cfg.os == session::os_macos {\n         run::run_program(\"dsymutil\", [output]);\n     }\n \n     // Remove the temporary object file if we aren't saving temps\n-    if !sess.get_opts().save_temps {\n+    if !sess.opts.save_temps {\n         run::run_program(\"rm\", [obj_filename]);\n     }\n }"}, {"sha": "16b0c62bf0506101877b373bbbd589fa04307a8b", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -12,7 +12,7 @@ import util::filesearch;\n export get_rpath_flags;\n \n fn get_rpath_flags(sess: session::session, out_filename: str) -> [str] {\n-    let os = sess.get_targ_cfg().os;\n+    let os = sess.targ_cfg.os;\n \n     // No rpath on windows\n     if os == session::os_win32 {\n@@ -22,22 +22,22 @@ fn get_rpath_flags(sess: session::session, out_filename: str) -> [str] {\n     #debug(\"preparing the RPATH!\");\n \n     let cwd = os::getcwd();\n-    let sysroot = sess.filesearch().sysroot();\n+    let sysroot = sess.filesearch.sysroot();\n     let output = out_filename;\n-    let libs = cstore::get_used_crate_files(sess.get_cstore());\n+    let libs = cstore::get_used_crate_files(sess.cstore);\n     // We don't currently rpath native libraries, but we know\n     // where rustrt is and we know every rust program needs it\n     let libs = libs + [get_sysroot_absolute_rt_lib(sess)];\n \n-    let target_triple = sess.get_opts().target_triple;\n+    let target_triple = sess.opts.target_triple;\n     let rpaths = get_rpaths(os, cwd, sysroot, output, libs, target_triple);\n     rpaths_to_flags(rpaths)\n }\n \n fn get_sysroot_absolute_rt_lib(sess: session::session) -> fs::path {\n-    let path = [sess.filesearch().sysroot()]\n+    let path = [sess.filesearch.sysroot()]\n         + filesearch::relative_target_lib_path(\n-            sess.get_opts().target_triple)\n+            sess.opts.target_triple)\n         + [os::dylib_filename(\"rustrt\")];\n     check vec::is_not_empty(path);\n     fs::connect_many(path)"}, {"sha": "8d33e83cb583031e92e5e39a9fb3002cb284021d", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -1,6 +1,7 @@\n \n // -*- rust -*-\n import metadata::{creader, cstore};\n+import session::session;\n import syntax::parse::{parser};\n import syntax::{ast, codemap};\n import front::attr;\n@@ -22,7 +23,7 @@ tag pp_mode { ppm_normal; ppm_expanded; ppm_typed; ppm_identified; }\n fn default_configuration(sess: session::session, argv0: str, input: str) ->\n    ast::crate_cfg {\n     let libc =\n-        alt sess.get_targ_cfg().os {\n+        alt sess.targ_cfg.os {\n           session::os_win32. { \"msvcrt.dll\" }\n           session::os_macos. { \"libc.dylib\" }\n           session::os_linux. { \"libc.so.6\" }\n@@ -32,7 +33,7 @@ fn default_configuration(sess: session::session, argv0: str, input: str) ->\n \n     let mk = attr::mk_name_value_item_str;\n \n-    let arch = alt sess.get_targ_cfg().arch {\n+    let arch = alt sess.targ_cfg.arch {\n       session::arch_x86. { \"x86\" }\n       session::arch_x86_64. { \"x86_64\" }\n       session::arch_arm. { \"arm\" }\n@@ -52,11 +53,11 @@ fn build_configuration(sess: session::session, argv0: str, input: str) ->\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items\n     let default_cfg = default_configuration(sess, argv0, input);\n-    let user_cfg = sess.get_opts().cfg;\n+    let user_cfg = sess.opts.cfg;\n     // If the user wants a test runner, then add the test cfg\n     let gen_cfg =\n         {\n-            if sess.get_opts().test && !attr::contains_name(user_cfg, \"test\")\n+            if sess.opts.test && !attr::contains_name(user_cfg, \"test\")\n                {\n                 [attr::mk_word_item(\"test\")]\n             } else { [] }\n@@ -78,7 +79,7 @@ fn input_is_stdin(filename: str) -> bool { filename == \"-\" }\n fn parse_input(sess: session::session, cfg: ast::crate_cfg, input: str) ->\n    @ast::crate {\n     if !input_is_stdin(input) {\n-        parser::parse_crate_from_file(input, cfg, sess.get_parse_sess())\n+        parser::parse_crate_from_file(input, cfg, sess.parse_sess)\n     } else { parse_input_src(sess, cfg, input).crate }\n }\n \n@@ -98,7 +99,7 @@ fn parse_input_src(sess: session::session, cfg: ast::crate_cfg, infile: str)\n     let src = str::unsafe_from_bytes(srcbytes);\n     let crate =\n         parser::parse_crate_from_source_str(infile, src, cfg,\n-                                            sess.get_parse_sess());\n+                                            sess.parse_sess);\n     ret {crate: crate, src: src};\n }\n \n@@ -137,12 +138,13 @@ fn inject_libcore_reference(sess: session::session,\n fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n                  outdir: option::t<str>, output: option::t<str>) {\n \n-    let time_passes = sess.get_opts().time_passes;\n+    let time_passes = sess.opts.time_passes;\n     let crate =\n         time(time_passes, \"parsing\", bind parse_input(sess, cfg, input));\n-    if sess.get_opts().parse_only { ret; }\n+    if sess.opts.parse_only { ret; }\n \n-    sess.set_building_library(crate);\n+    sess.building_library =\n+        session::building_library(sess.opts.crate_type, crate);\n \n     crate =\n         time(time_passes, \"configuration\",\n@@ -154,7 +156,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n         time(time_passes, \"expansion\",\n              bind syntax::ext::expand::expand_crate(sess, crate));\n \n-    if sess.get_opts().libcore {\n+    if sess.opts.libcore {\n         crate = inject_libcore_reference(sess, crate);\n     }\n \n@@ -193,7 +195,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n         bind last_use::find_last_uses(crate, def_map, ref_map, ty_cx));\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_uses, crate));\n-    if sess.get_opts().no_trans { ret; }\n+    if sess.opts.no_trans { ret; }\n \n     let outputs = build_output_filenames(input, outdir, output, sess);\n \n@@ -207,8 +209,8 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n          bind link::write::run_passes(sess, llmod, outputs.obj_filename));\n \n     let stop_after_codegen =\n-        sess.get_opts().output_type != link::output_type_exe ||\n-            sess.get_opts().static && sess.building_library();\n+        sess.opts.output_type != link::output_type_exe ||\n+            sess.opts.static && sess.building_library;\n \n     if stop_after_codegen { ret; }\n \n@@ -283,7 +285,7 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n       }\n       ppm_normal. { ann = pprust::no_ann(); }\n     }\n-    pprust::print_crate(sess.get_codemap(), crate, input,\n+    pprust::print_crate(sess.codemap, crate, input,\n                         io::string_reader(src), io::stdout(), ann);\n }\n \n@@ -449,9 +451,18 @@ fn build_session(sopts: @session::options, input: str) -> session::session {\n         sopts.maybe_sysroot,\n         sopts.target_triple,\n         sopts.addl_lib_search_paths);\n-    ret session::session(target_cfg, sopts, cstore,\n-                         @{cm: codemap::new_codemap(), mutable next_id: 1},\n-                         none, 0u, filesearch, false, fs::dirname(input));\n+    let codemap = codemap::new_codemap();\n+    @{targ_cfg: target_cfg,\n+      opts: sopts,\n+      cstore: cstore,\n+      parse_sess: @{cm: codemap, mutable next_id: 1},\n+      codemap: codemap,\n+      // For a library crate, this is always none\n+      mutable main_fn: none,\n+      mutable err_count: 0u,\n+      filesearch: filesearch,\n+      mutable building_library: false,\n+      working_dir: fs::dirname(input)}\n }\n \n fn parse_pretty(sess: session::session, &&name: str) -> pp_mode {\n@@ -490,10 +501,10 @@ fn build_output_filenames(ifile: str,\n         -> @{out_filename: str, obj_filename:str} {\n     let obj_path = \"\";\n     let out_path: str = \"\";\n-    let sopts = sess.get_opts();\n+    let sopts = sess.opts;\n     let stop_after_codegen =\n         sopts.output_type != link::output_type_exe ||\n-            sopts.static && sess.building_library();\n+            sopts.static && sess.building_library;\n \n \n     let obj_suffix =\n@@ -531,7 +542,7 @@ fn build_output_filenames(ifile: str,\n         };\n \n \n-        if sess.building_library() {\n+        if sess.building_library {\n             let basename = fs::basename(base_path);\n             let dylibname = std::os::dylib_filename(basename);\n             out_path = fs::connect(dirname, dylibname);\n@@ -552,7 +563,7 @@ fn build_output_filenames(ifile: str,\n             modified\n         };\n \n-        if sess.building_library() {\n+        if sess.building_library {\n             // FIXME: We might want to warn here; we're actually not going to\n             // respect the user's choice of library name when it comes time to\n             // link, we'll be linking to lib<basename>-<hash>-<version>.so no"}, {"sha": "3b9505ffbad176e87163161de5dbf90f1c5be7ed", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 32, "deletions": 48, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -51,51 +51,53 @@ type options =\n \n type crate_metadata = {name: str, data: [u8]};\n \n-obj session(targ_cfg: @config,\n-            opts: @options,\n-            cstore: metadata::cstore::cstore,\n-            parse_sess: parse_sess,\n-\n-            // For a library crate, this is always none\n-            mutable main_fn: option::t<node_id>,\n-            mutable err_count: uint,\n-            filesearch: filesearch::filesearch,\n-            mutable building_library: bool,\n-            working_dir: str) {\n-    fn get_targ_cfg() -> @config { ret targ_cfg; }\n-    fn get_opts() -> @options { ret opts; }\n-    fn get_cstore() -> metadata::cstore::cstore { cstore }\n+type session = @{targ_cfg: @config,\n+                 opts: @options,\n+                 cstore: metadata::cstore::cstore,\n+                 parse_sess: parse_sess,\n+                 codemap: codemap::codemap,\n+                 // For a library crate, this is always none\n+                 mutable main_fn: option::t<node_id>,\n+                 mutable err_count: uint,\n+                 filesearch: filesearch::filesearch,\n+                 mutable building_library: bool,\n+                 working_dir: str};\n+\n+impl session for session {\n     fn span_fatal(sp: span, msg: str) -> ! {\n-        // FIXME: Use constants, but rustboot doesn't know how to export them.\n-        codemap::emit_error(some(sp), msg, parse_sess.cm);\n+        codemap::emit_error(some(sp), msg, self.parse_sess.cm);\n         fail;\n     }\n     fn fatal(msg: str) -> ! {\n-        codemap::emit_error(none, msg, parse_sess.cm);\n+        codemap::emit_error(none, msg, self.parse_sess.cm);\n         fail;\n     }\n     fn span_err(sp: span, msg: str) {\n-        codemap::emit_error(some(sp), msg, parse_sess.cm);\n-        err_count += 1u;\n+        codemap::emit_error(some(sp), msg, self.parse_sess.cm);\n+        self.err_count += 1u;\n     }\n     fn err(msg: str) {\n-        codemap::emit_error(none, msg, parse_sess.cm);\n-        err_count += 1u;\n+        codemap::emit_error(none, msg, self.parse_sess.cm);\n+        self.err_count += 1u;\n     }\n-    fn has_errors() -> bool { err_count > 0u }\n+    fn has_errors() -> bool { self.err_count > 0u }\n     fn abort_if_errors() {\n-        if err_count > 0u { self.fatal(\"aborting due to previous errors\"); }\n+        if self.err_count > 0u {\n+            self.fatal(\"aborting due to previous errors\");\n+        }\n     }\n     fn span_warn(sp: span, msg: str) {\n-        // FIXME: Use constants, but rustboot doesn't know how to export them.\n-        codemap::emit_warning(some(sp), msg, parse_sess.cm);\n+        codemap::emit_warning(some(sp), msg, self.parse_sess.cm);\n+    }\n+    fn warn(msg: str) {\n+        codemap::emit_warning(none, msg, self.parse_sess.cm);\n     }\n-    fn warn(msg: str) { codemap::emit_warning(none, msg, parse_sess.cm); }\n     fn span_note(sp: span, msg: str) {\n-        // FIXME: Use constants, but rustboot doesn't know how to export them.\n-        codemap::emit_note(some(sp), msg, parse_sess.cm);\n+        codemap::emit_note(some(sp), msg, self.parse_sess.cm);\n+    }\n+    fn note(msg: str) {\n+        codemap::emit_note(none, msg, self.parse_sess.cm);\n     }\n-    fn note(msg: str) { codemap::emit_note(none, msg, parse_sess.cm); }\n     fn span_bug(sp: span, msg: str) -> ! {\n         self.span_fatal(sp, #fmt[\"internal compiler error %s\", msg]);\n     }\n@@ -106,26 +108,8 @@ obj session(targ_cfg: @config,\n         self.span_bug(sp, \"unimplemented \" + msg);\n     }\n     fn unimpl(msg: str) -> ! { self.bug(\"unimplemented \" + msg); }\n-    fn get_codemap() -> codemap::codemap { ret parse_sess.cm; }\n-    fn lookup_pos(pos: uint) -> codemap::loc {\n-        ret codemap::lookup_char_pos(parse_sess.cm, pos);\n-    }\n-    fn get_parse_sess() -> parse_sess { ret parse_sess; }\n     fn next_node_id() -> ast::node_id {\n-        ret syntax::parse::parser::next_node_id(parse_sess);\n-    }\n-    fn span_str(sp: span) -> str {\n-        ret codemap::span_to_str(sp, self.get_codemap());\n-    }\n-    fn set_main_id(d: node_id) { main_fn = some(d); }\n-    fn get_main_id() -> option::t<node_id> { main_fn }\n-    fn filesearch() -> filesearch::filesearch { filesearch }\n-    fn building_library() -> bool { building_library }\n-    fn set_building_library(crate: @ast::crate) {\n-        building_library = session::building_library(opts.crate_type, crate);\n-    }\n-    fn get_working_dir() -> str {\n-        ret working_dir;\n+        ret syntax::parse::parser::next_node_id(self.parse_sess);\n     }\n }\n "}, {"sha": "120b0e412cdbc00d9cafd3c8d5662537e22c9fad", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -3,7 +3,7 @@\n import core::{either, vec, option};\n import std::map;\n import syntax::{ast, ast_util};\n-import driver::session;\n+import driver::session::session;\n \n export attr_meta;\n export attr_metas;\n@@ -189,7 +189,7 @@ fn remove_meta_items_by_name(items: [@ast::meta_item], name: str) ->\n     ret vec::filter_map(items, filter);\n }\n \n-fn require_unique_names(sess: session::session, metas: [@ast::meta_item]) {\n+fn require_unique_names(sess: session, metas: [@ast::meta_item]) {\n     let map = map::new_str_hash();\n     for meta: @ast::meta_item in metas {\n         let name = get_meta_item_name(meta);"}, {"sha": "be9554d7c68e4a1ab6cf2f260f278734f755fe21", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -8,6 +8,7 @@ import syntax::fold;\n import syntax::print::pprust;\n import syntax::codemap::span;\n import driver::session;\n+import session::session;\n import front::attr;\n \n export modify_for_testing;\n@@ -27,7 +28,7 @@ type test_ctxt =\n fn modify_for_testing(sess: session::session,\n                       crate: @ast::crate) -> @ast::crate {\n \n-    if sess.get_opts().test {\n+    if sess.opts.test {\n         generate_test_harness(sess, crate)\n     } else {\n         strip_test_functions(crate)"}, {"sha": "10f88cb0ae533cc87ac6f0ec4e3804c427eafc97", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -1,6 +1,7 @@\n // Extracting metadata from crate files\n \n import driver::session;\n+import session::session;\n import syntax::{ast, ast_util};\n import lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n import front::attr;\n@@ -39,7 +40,7 @@ fn visit_view_item(e: env, i: @ast::view_item) {\n     alt i.node {\n       ast::view_item_use(ident, meta_items, id) {\n         let cnum = resolve_crate(e, ident, meta_items, i.span);\n-        cstore::add_use_stmt_cnum(e.sess.get_cstore(), id, cnum);\n+        cstore::add_use_stmt_cnum(e.sess.cstore, id, cnum);\n       }\n       _ { }\n     }\n@@ -56,7 +57,7 @@ fn visit_item(e: env, i: @ast::item) {\n           either::left(msg) { e.sess.span_fatal(i.span, msg); }\n         }\n \n-        let cstore = e.sess.get_cstore();\n+        let cstore = e.sess.cstore;\n         let native_name =\n             alt attr::get_meta_item_value_str_by_name(i.attrs, \"link_name\") {\n               some(nn) {\n@@ -126,7 +127,7 @@ fn metadata_matches(crate_data: @[u8], metas: [@ast::meta_item]) -> bool {\n fn default_native_lib_naming(sess: session::session, static: bool) ->\n    {prefix: str, suffix: str} {\n     if static { ret {prefix: \"lib\", suffix: \".rlib\"}; }\n-    alt sess.get_targ_cfg().os {\n+    alt sess.targ_cfg.os {\n       session::os_win32. { ret {prefix: \"\", suffix: \".dll\"}; }\n       session::os_macos. { ret {prefix: \"lib\", suffix: \".dylib\"}; }\n       session::os_linux. { ret {prefix: \"lib\", suffix: \".so\"}; }\n@@ -157,14 +158,14 @@ fn find_library_crate(sess: session::session, ident: ast::ident,\n             }\n         };\n \n-    let nn = default_native_lib_naming(sess, sess.get_opts().static);\n+    let nn = default_native_lib_naming(sess, sess.opts.static);\n     let x =\n         find_library_crate_aux(sess, nn, crate_name,\n-                               metas, sess.filesearch());\n-    if x != none || sess.get_opts().static { ret x; }\n+                               metas, sess.filesearch);\n+    if x != none || sess.opts.static { ret x; }\n     let nn2 = default_native_lib_naming(sess, true);\n     ret find_library_crate_aux(sess, nn2, crate_name, metas,\n-                               sess.filesearch());\n+                               sess.filesearch);\n }\n \n fn find_library_crate_aux(sess: session::session,\n@@ -218,7 +219,7 @@ fn get_metadata_section(sess: session::session,\n     while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n         let name_buf = llvm::LLVMGetSectionName(si.llsi);\n         let name = unsafe { str::from_cstr(name_buf) };\n-        if str::eq(name, sess.get_targ_cfg().target_strs.meta_sect_name) {\n+        if str::eq(name, sess.targ_cfg.target_strs.meta_sect_name) {\n             let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n             let csz = llvm::LLVMGetSectionSize(si.llsi);\n             unsafe {\n@@ -264,7 +265,7 @@ fn resolve_crate(e: env, ident: ast::ident, metas: [@ast::meta_item],\n         let cmeta = @{name: ident, data: cdata,\n                       cnum_map: cnum_map, cnum: cnum};\n \n-        let cstore = e.sess.get_cstore();\n+        let cstore = e.sess.cstore;\n         cstore::set_crate_data(cstore, cnum, cmeta);\n         cstore::add_used_crate_file(cstore, cfilename);\n         ret cnum;"}, {"sha": "123f375cf2abc77081729bdf2d7e58c592a8d55c", "filename": "src/comp/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcsearch.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -57,7 +57,7 @@ fn resolve_path(cstore: cstore::cstore, cnum: ast::crate_num,\n }\n \n fn get_tag_variants(tcx: ty::ctxt, def: ast::def_id) -> [ty::variant_info] {\n-    let cstore = tcx.sess.get_cstore();\n+    let cstore = tcx.sess.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     ret decoder::get_tag_variants(cdata, def.node, tcx)\n }\n@@ -70,13 +70,13 @@ fn get_impls_for_mod(cstore: cstore::cstore, def: ast::def_id,\n }\n \n fn get_iface_methods(tcx: ty::ctxt, def: ast::def_id) -> @[ty::method] {\n-    let cstore = tcx.sess.get_cstore();\n+    let cstore = tcx.sess.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::get_iface_methods(cdata, def.node, tcx)\n }\n \n fn get_type(tcx: ty::ctxt, def: ast::def_id) -> ty::ty_param_bounds_and_ty {\n-    let cstore = tcx.sess.get_cstore();\n+    let cstore = tcx.sess.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::get_type(cdata, def.node, tcx)\n }\n@@ -88,7 +88,7 @@ fn get_item_name(cstore: cstore::cstore, cnum: int, id: int) -> ast::ident {\n \n fn get_impl_iface(tcx: ty::ctxt, def: ast::def_id)\n     -> option::t<ty::t> {\n-    let cstore = tcx.sess.get_cstore();\n+    let cstore = tcx.sess.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::get_impl_iface(cdata, def.node, tcx)\n }"}, {"sha": "37bc22e4931b3ae4b828c6ec3a68dce07f6a8302", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -704,7 +704,7 @@ fn encode_metadata(cx: @crate_ctxt, crate: @crate) -> str {\n     let crate_attrs = synthesize_crate_attrs(ecx, crate);\n     encode_attributes(ebml_w, crate_attrs);\n \n-    encode_crate_deps(ebml_w, cx.sess.get_cstore());\n+    encode_crate_deps(ebml_w, cx.sess.cstore);\n \n     // Encode and index the paths.\n     ebml::start_tag(ebml_w, tag_paths);"}, {"sha": "82058a6a78142352f8b293b0f2c478962d68b4d4", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -8,6 +8,7 @@ import core::{vec, option};\n import std::list;\n import option::{some, none, is_none};\n import list::list;\n+import driver::session::session;\n \n // This is not an alias-analyser (though it would merit from becoming one, or\n // getting input from one, to be more precise). It is a pass that checks"}, {"sha": "3796ae96b5d6616f45cd523ede0be1f42d469b07", "filename": "src/comp/middle/block_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fblock_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fblock_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fblock_use.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -1,5 +1,6 @@\n import syntax::visit;\n import syntax::ast::*;\n+import driver::session::session;\n \n type ctx = {tcx: ty::ctxt, mutable allow_block: bool};\n "}, {"sha": "aa258673a6e4084ef13e745fcee4747c3117fd4f", "filename": "src/comp/middle/capture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcapture.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -1,4 +1,5 @@\n import syntax::{ast, ast_util};\n+import driver::session::session;\n import std::map;\n \n export capture_mode;"}, {"sha": "d2e3c15009d807e0f04b8c7ff0b2b4190d0b51d7", "filename": "src/comp/middle/check_alt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -3,6 +3,7 @@ import syntax::ast_util::{variant_def_ids, dummy_sp, compare_lit_exprs,\n                           lit_expr_eq};\n import syntax::visit;\n import option::{some, none};\n+import driver::session::session;\n \n fn check_crate(tcx: ty::ctxt, crate: @crate) {\n     let v ="}, {"sha": "c0460e90cb06fc70864b159ad9061f520d61eed3", "filename": "src/comp/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_const.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -59,14 +59,14 @@ fn check_expr(sess: session, e: @expr, &&is_const: bool, v: visit::vt<bool>) {\n       expr_lit(@{node: lit_int(v, t), _}) {\n         if t != ty_char {\n             if (v as u64) > ast_util::int_ty_max(\n-                t == ty_i ? sess.get_targ_cfg().int_type : t) {\n+                t == ty_i ? sess.targ_cfg.int_type : t) {\n                 sess.span_err(e.span, \"literal out of range for its type\");\n             }\n         }\n       }\n       expr_lit(@{node: lit_uint(v, t), _}) {\n         if v > ast_util::uint_ty_max(\n-            t == ty_u ? sess.get_targ_cfg().uint_type : t) {\n+            t == ty_u ? sess.targ_cfg.uint_type : t) {\n             sess.span_err(e.span, \"literal out of range for its type\");\n         }\n       }"}, {"sha": "babe01963efd3cf7933298e1f37548f1a214adcb", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -162,7 +162,7 @@ fn create_compile_unit(cx: @crate_ctxt, full_path: str)\n       option::none. {}\n     }\n \n-    let work_dir = cx.sess.get_working_dir();\n+    let work_dir = cx.sess.working_dir;\n     let file_path = if str::starts_with(full_path, work_dir) {\n         str::slice(full_path, str::byte_len(work_dir),\n                    str::byte_len(full_path))\n@@ -176,7 +176,7 @@ fn create_compile_unit(cx: @crate_ctxt, full_path: str)\n                          llstr(work_dir),\n                          llstr(#env[\"CFG_VERSION\"]),\n                          lli1(false), // main compile unit\n-                         lli1(cx.sess.get_opts().optimize != 0u),\n+                         lli1(cx.sess.opts.optimize != 0u),\n                          llstr(\"\"), // flags (???)\n                          lli32(0) // runtime version (???)\n                          // list of enum types\n@@ -223,10 +223,10 @@ fn line_from_span(cm: codemap::codemap, sp: codemap::span) -> uint {\n \n fn create_block(cx: @block_ctxt) -> @metadata<block_md> {\n     let cache = get_cache(bcx_ccx(cx));\n-    let start = codemap::lookup_char_pos(bcx_ccx(cx).sess.get_codemap(),\n+    let start = codemap::lookup_char_pos(bcx_ccx(cx).sess.codemap,\n                                          cx.sp.lo);\n     let fname = start.filename;\n-    let end = codemap::lookup_char_pos(bcx_ccx(cx).sess.get_codemap(),\n+    let end = codemap::lookup_char_pos(bcx_ccx(cx).sess.codemap,\n                                        cx.sp.hi);\n     let tg = LexicalBlockTag;\n     alt cached_metadata::<@metadata<block_md>>(\n@@ -395,14 +395,14 @@ fn create_record(cx: @crate_ctxt, t: ty::t, fields: [ast::ty_field],\n     let file_node = create_file(cx, fname);\n     let scx = create_structure(file_node,\n                                option::get(cx.dbg_cx).names.next(\"rec\"),\n-                               line_from_span(cx.sess.get_codemap(),\n+                               line_from_span(cx.sess.codemap,\n                                               span) as int);\n     for field in fields {\n         let field_t = ty::get_field(ccx_tcx(cx), t, field.node.ident).mt.ty;\n         let ty_md = create_ty(cx, field_t, field.node.mt.ty);\n         let (size, align) = member_size_and_align(field.node.mt.ty);\n         add_member(scx, field.node.ident,\n-                   line_from_span(cx.sess.get_codemap(), field.span) as int,\n+                   line_from_span(cx.sess.codemap, field.span) as int,\n                    size as int, align as int, ty_md.node);\n     }\n     let mdval = @{node: finish_structure(scx), data:{hash: t}};\n@@ -602,7 +602,7 @@ fn create_ty(cx: @crate_ctxt, t: ty::t, ty: @ast::ty)\n }\n \n fn filename_from_span(cx: @crate_ctxt, sp: codemap::span) -> str {\n-    codemap::lookup_char_pos(cx.sess.get_codemap(), sp.lo).filename\n+    codemap::lookup_char_pos(cx.sess.codemap, sp.lo).filename\n }\n \n fn create_var(type_tag: int, context: ValueRef, name: str, file: ValueRef,\n@@ -632,7 +632,7 @@ fn create_local_var(bcx: @block_ctxt, local: @ast::local)\n     let name = alt local.node.pat.node {\n       ast::pat_bind(ident, _) { ident /*XXX deal w/ optional node binding*/ }\n     };\n-    let loc = codemap::lookup_char_pos(cx.sess.get_codemap(),\n+    let loc = codemap::lookup_char_pos(cx.sess.codemap,\n                                        local.span.lo);\n     let ty = trans::node_id_type(cx, local.node.id);\n     let tymd = create_ty(cx, ty, local.node.ty);\n@@ -675,7 +675,7 @@ fn create_arg(bcx: @block_ctxt, arg: ast::arg)\n     /*let arg_n = alt cx.ast_map.get(arg.id) {\n       ast_map::node_arg(_, n) { n - 2u }\n     };*/\n-    let loc = codemap::lookup_char_pos(cx.sess.get_codemap(),\n+    let loc = codemap::lookup_char_pos(cx.sess.codemap,\n                                        fcx.sp.lo);\n     let ty = trans::node_id_type(cx, arg.id);\n     let tymd = create_ty(cx, ty, arg.ty);\n@@ -696,10 +696,10 @@ fn create_arg(bcx: @block_ctxt, arg: ast::arg)\n }\n \n fn update_source_pos(cx: @block_ctxt, s: codemap::span) {\n-    if !bcx_ccx(cx).sess.get_opts().debuginfo {\n+    if !bcx_ccx(cx).sess.opts.debuginfo {\n         ret;\n     }\n-    let cm = bcx_ccx(cx).sess.get_codemap();\n+    let cm = bcx_ccx(cx).sess.codemap;\n     let blockmd = create_block(cx);\n     let loc = codemap::lookup_char_pos(cm, s.lo);\n     let scopedata = [lli32(loc.line as int),\n@@ -716,7 +716,8 @@ fn create_function(fcx: @fn_ctxt) -> @metadata<subprogram_md> {\n \n     #debug(\"~~\");\n     log(debug, fcx.id);\n-    log(debug, cx.sess.span_str(fcx.sp));\n+\n+    log(debug, codemap::span_to_str(fcx.sp, cx.sess.codemap));\n \n     let (ident, ret_ty, id) = alt cx.ast_map.get(fcx.id) {\n       ast_map::node_item(item) {\n@@ -759,12 +760,12 @@ fn create_function(fcx: @fn_ctxt) -> @metadata<subprogram_md> {\n       option::none. {}\n     }\n \n-    let loc = codemap::lookup_char_pos(cx.sess.get_codemap(),\n+    let loc = codemap::lookup_char_pos(cx.sess.codemap,\n                                        fcx.sp.lo);\n     let file_node = create_file(cx, loc.filename).node;\n     let key = cx.item_symbols.contains_key(fcx.id) ? fcx.id : id;\n     let mangled = cx.item_symbols.get(key);\n-    let ty_node = if cx.sess.get_opts().extra_debuginfo {\n+    let ty_node = if cx.sess.opts.extra_debuginfo {\n         alt ret_ty.node {\n           ast::ty_nil. { llnull() }\n           _ { create_ty(cx, ty::node_id_to_type(ccx_tcx(cx), id),\n@@ -792,7 +793,7 @@ fn create_function(fcx: @fn_ctxt) -> @metadata<subprogram_md> {\n                        lli32(0i), //index into virt func\n                        llnull(), // base type with vtbl\n                        lli1(false), // artificial\n-                       lli1(cx.sess.get_opts().optimize != 0u),\n+                       lli1(cx.sess.opts.optimize != 0u),\n                        fcx.llfn\n                        //list of template params\n                        //func decl descriptor"}, {"sha": "6901ae9d9f961adc3e976d8ddc430398bdf4b9db", "filename": "src/comp/middle/fn_usage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffn_usage.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -2,6 +2,7 @@ import syntax::ast;\n import syntax::visit;\n import option::some;\n import syntax::print::pprust::expr_to_str;\n+import driver::session::session;\n \n export check_crate_fn_usage;\n "}, {"sha": "6860039aa9f74b7550e9f3662d4d5f04b8309f33", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -8,6 +8,7 @@ import middle::trans_common::*;\n import middle::ty;\n import option::none;\n import str;\n+import driver::session::session;\n \n import lll = lib::llvm::llvm;\n import bld = trans_build;"}, {"sha": "c9659e7b60a888e30b4de8d02fda816edd308a9d", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -3,6 +3,7 @@ import syntax::{visit, ast_util};\n import syntax::ast::*;\n import syntax::codemap::span;\n import ty::{kind, kind_copyable, kind_sendable, kind_noncopyable};\n+import driver::session::session;\n \n // Kind analysis pass. There are three kinds:\n //"}, {"sha": "57dea65ce1ab50ccf69014f3d645c0e0db90de13", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -3,6 +3,7 @@ import option::{some, none};\n import syntax::ast::*;\n import syntax::visit;\n import syntax::ast_util;\n+import driver::session::session;\n \n tag deref_t { unbox; field; index; }\n "}, {"sha": "31fbfea9234b75bef8dde78fc4cb91462c872b6d", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -162,7 +162,7 @@ tag ns_value_type { ns_a_tag; ns_any_value; }\n fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n    {def_map: def_map, exp_map: exp_map, impl_map: impl_map} {\n     let e =\n-        @{cstore: sess.get_cstore(),\n+        @{cstore: sess.cstore,\n           def_map: new_int_hash(),\n           ast_map: amap,\n           imports: new_int_hash(),\n@@ -185,7 +185,7 @@ fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n     check_exports(e);\n     resolve_names(e, crate);\n     resolve_impls(e, crate);\n-    if sess.get_opts().warn_unused_imports {\n+    if sess.opts.warn_unused_imports {\n         check_unused_imports(e);\n     }\n     ret {def_map: e.def_map, exp_map: e.exp_map, impl_map: e.impl_map};\n@@ -472,10 +472,10 @@ fn visit_fn_with_scope(e: @env, fk: visit::fn_kind, decl: ast::fn_decl,\n     // is this a main fn declaration?\n     alt fk {\n       visit::fk_item_fn(nm, _) {\n-        if is_main_name([nm]) && !e.sess.building_library() {\n+        if is_main_name([nm]) && !e.sess.building_library {\n             // This is a main function -- set it in the session\n             // as the main ID\n-            e.sess.set_main_id(id);\n+            e.sess.main_fn = some(id);\n         }\n       }\n       _ { /* fallthrough */ }\n@@ -1496,7 +1496,7 @@ fn ns_ok(wanted:namespace, actual:namespace) -> bool {\n \n fn lookup_external(e: env, cnum: int, ids: [ident], ns: namespace) ->\n    option::t<def> {\n-    for d: def in csearch::lookup_defs(e.sess.get_cstore(), cnum, ids) {\n+    for d: def in csearch::lookup_defs(e.sess.cstore, cnum, ids) {\n         let did = def_id_of_def(d);\n         alt d {\n           def_mod(_) | def_native_mod(_) {\n@@ -1919,7 +1919,7 @@ fn find_impls_in_mod(e: env, m: def, &impls: [@_impl],\n                 }\n                 @tmp\n             } else {\n-                csearch::get_impls_for_mod(e.sess.get_cstore(), defid, none)\n+                csearch::get_impls_for_mod(e.sess.cstore, defid, none)\n             };\n             e.impl_cache.insert(defid, cached);\n           }"}, {"sha": "51bba4514b4bfd9c4400edcf43d879cabbe9890a", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -240,23 +240,23 @@ fn tag_kind(ccx: @crate_ctxt, did: ast::def_id) -> tag_kind {\n \n // Returns the code corresponding to the pointer size on this architecture.\n fn s_int(tcx: ty_ctxt) -> u8 {\n-    ret alt tcx.sess.get_targ_cfg().arch {\n+    ret alt tcx.sess.targ_cfg.arch {\n         session::arch_x86. { shape_i32 }\n         session::arch_x86_64. { shape_i64 }\n         session::arch_arm. { shape_i32 }\n     };\n }\n \n fn s_uint(tcx: ty_ctxt) -> u8 {\n-    ret alt tcx.sess.get_targ_cfg().arch {\n+    ret alt tcx.sess.targ_cfg.arch {\n         session::arch_x86. { shape_u32 }\n         session::arch_x86_64. { shape_u64 }\n         session::arch_arm. { shape_u32 }\n     };\n }\n \n fn s_float(tcx: ty_ctxt) -> u8 {\n-    ret alt tcx.sess.get_targ_cfg().arch {\n+    ret alt tcx.sess.targ_cfg.arch {\n         session::arch_x86. { shape_f64 }\n         session::arch_x86_64. { shape_f64 }\n         session::arch_arm. { shape_f64 }"}, {"sha": "12d0e416b0016a570422a1604cbbd4af30363172", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -18,6 +18,7 @@ import std::map::hashmap;\n import std::map::{new_int_hash, new_str_hash};\n import option::{some, none};\n import driver::session;\n+import session::session;\n import front::attr;\n import middle::{ty, gc, resolve, debuginfo};\n import middle::freevars::*;\n@@ -364,7 +365,7 @@ fn trans_native_call(cx: @block_ctxt, externs: hashmap<str, ValueRef>,\n \n fn trans_free_if_not_gc(cx: @block_ctxt, v: ValueRef) -> @block_ctxt {\n     let ccx = bcx_ccx(cx);\n-    if !ccx.sess.get_opts().do_gc {\n+    if !ccx.sess.opts.do_gc {\n         Call(cx, ccx.upcalls.free,\n              [PointerCast(cx, v, T_ptr(T_i8())),\n               C_int(bcx_ccx(cx), 0)]);\n@@ -1153,7 +1154,7 @@ fn declare_tydesc(cx: @local_ctxt, sp: span, t: ty::t, ty_params: [uint],\n         llalign = C_int(ccx, 0);\n     }\n     let name;\n-    if cx.ccx.sess.get_opts().debuginfo {\n+    if cx.ccx.sess.opts.debuginfo {\n         name = mangle_internal_name_by_type_only(cx.ccx, t, \"tydesc\");\n         name = sanitize(name);\n     } else { name = mangle_internal_name_by_seq(cx.ccx, \"tydesc\"); }\n@@ -1183,7 +1184,7 @@ fn declare_generic_glue(cx: @local_ctxt, t: ty::t, llfnty: TypeRef, name: str)\n    -> ValueRef {\n     let name = name;\n     let fn_nm;\n-    if cx.ccx.sess.get_opts().debuginfo {\n+    if cx.ccx.sess.opts.debuginfo {\n         fn_nm = mangle_internal_name_by_type_only(cx.ccx, t, \"glue_\" + name);\n         fn_nm = sanitize(fn_nm);\n     } else { fn_nm = mangle_internal_name_by_seq(cx.ccx, \"glue_\" + name); }\n@@ -1237,7 +1238,7 @@ fn make_generic_glue_inner(cx: @local_ctxt, sp: span, t: ty::t,\n fn make_generic_glue(cx: @local_ctxt, sp: span, t: ty::t, llfn: ValueRef,\n                      helper: glue_helper, ty_params: [uint], name: str) ->\n    ValueRef {\n-    if !cx.ccx.sess.get_opts().stats {\n+    if !cx.ccx.sess.opts.stats {\n         ret make_generic_glue_inner(cx, sp, t, llfn, helper, ty_params);\n     }\n \n@@ -1527,7 +1528,7 @@ fn decr_refcnt_maybe_free(cx: @block_ctxt, box_ptr: ValueRef, t: ty::t)\n \n // Structural comparison: a rather involved form of glue.\n fn maybe_name_value(cx: @crate_ctxt, v: ValueRef, s: str) {\n-    if cx.sess.get_opts().save_temps {\n+    if cx.sess.opts.save_temps {\n         let _: () = str::as_buf(s, {|buf| llvm::LLVMSetValueName(v, buf) });\n     }\n }\n@@ -1971,7 +1972,7 @@ fn call_memmove(cx: @block_ctxt, dst: ValueRef, src: ValueRef,\n     // LLVM complains -- not even a constant element of a tydesc works).\n \n     let ccx = bcx_ccx(cx);\n-    let key = alt ccx.sess.get_targ_cfg().arch {\n+    let key = alt ccx.sess.targ_cfg.arch {\n       session::arch_x86. | session::arch_arm. { \"llvm.memmove.p0i8.p0i8.i32\" }\n       session::arch_x86_64. { \"llvm.memmove.p0i8.p0i8.i64\" }\n     };\n@@ -2623,7 +2624,7 @@ fn lval_no_env(bcx: @block_ctxt, val: ValueRef, kind: lval_kind)\n fn trans_external_path(cx: @block_ctxt, did: ast::def_id,\n                        tpt: ty::ty_param_bounds_and_ty) -> ValueRef {\n     let lcx = cx.fcx.lcx;\n-    let name = csearch::get_symbol(lcx.ccx.sess.get_cstore(), did);\n+    let name = csearch::get_symbol(lcx.ccx.sess.cstore, did);\n     ret get_extern_const(lcx.ccx.externs, lcx.ccx.llmod, name,\n                          type_of_ty_param_bounds_and_ty(lcx, cx.sp, tpt));\n }\n@@ -2667,7 +2668,7 @@ fn lookup_discriminant(lcx: @local_ctxt, vid: ast::def_id) -> ValueRef {\n       none. {\n         // It's an external discriminant that we haven't seen yet.\n         assert (vid.crate != ast::local_crate);\n-        let sym = csearch::get_symbol(lcx.ccx.sess.get_cstore(), vid);\n+        let sym = csearch::get_symbol(lcx.ccx.sess.cstore, vid);\n         let gvar =\n             str::as_buf(sym,\n                         {|buf|\n@@ -3923,7 +3924,8 @@ fn trans_fail_value(bcx: @block_ctxt, sp_opt: option::t<span>,\n     let V_line;\n     alt sp_opt {\n       some(sp) {\n-        let loc = bcx_ccx(bcx).sess.lookup_pos(sp.lo);\n+        let sess = bcx_ccx(bcx).sess;\n+        let loc = codemap::lookup_char_pos(sess.parse_sess.cm, sp.lo);\n         V_filename = C_cstr(bcx_ccx(bcx), loc.filename);\n         V_line = loc.line as int;\n       }\n@@ -4077,7 +4079,7 @@ fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t)\n fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n     // FIXME Fill in cx.sp\n \n-    if (!bcx_ccx(cx).sess.get_opts().no_asm_comments) {\n+    if (!bcx_ccx(cx).sess.opts.no_asm_comments) {\n         add_span_comment(cx, s.span, stmt_to_str(s));\n     }\n \n@@ -4097,7 +4099,7 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n                 } else {\n                     bcx = init_ref_local(bcx, local);\n                 }\n-                if bcx_ccx(cx).sess.get_opts().extra_debuginfo {\n+                if bcx_ccx(cx).sess.opts.extra_debuginfo {\n                     debuginfo::create_local_var(bcx, local);\n                 }\n             }\n@@ -4116,8 +4118,8 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n fn new_block_ctxt(cx: @fn_ctxt, parent: block_parent, kind: block_kind,\n                   name: str) -> @block_ctxt {\n     let s = \"\";\n-    if cx.lcx.ccx.sess.get_opts().save_temps ||\n-           cx.lcx.ccx.sess.get_opts().debuginfo {\n+    if cx.lcx.ccx.sess.opts.save_temps ||\n+           cx.lcx.ccx.sess.opts.debuginfo {\n         s = cx.lcx.ccx.names.next(name);\n     }\n     let llbb: BasicBlockRef =\n@@ -4284,7 +4286,7 @@ fn alloc_ty(cx: @block_ctxt, t: ty::t) -> result {\n     // past caller conventions and may well make sense again,\n     // so we leave it as-is.\n \n-    if bcx_tcx(cx).sess.get_opts().do_gc {\n+    if bcx_tcx(cx).sess.opts.do_gc {\n         bcx = gc::add_gc_root(bcx, val, t);\n     }\n \n@@ -4309,7 +4311,7 @@ fn alloc_local(cx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n     let r = alloc_ty(cx, t);\n     alt local.node.pat.node {\n       ast::pat_bind(ident, none.) {\n-        if bcx_ccx(cx).sess.get_opts().debuginfo {\n+        if bcx_ccx(cx).sess.opts.debuginfo {\n             let _: () = str::as_buf(ident, {|buf|\n                 llvm::LLVMSetValueName(r.val, buf)\n             });\n@@ -4502,7 +4504,7 @@ fn copy_args_to_allocas(fcx: @fn_ctxt, bcx: @block_ctxt, args: [ast::arg],\n           }\n           ast::by_ref. {}\n         }\n-        if fcx_ccx(fcx).sess.get_opts().extra_debuginfo {\n+        if fcx_ccx(fcx).sess.opts.extra_debuginfo {\n             debuginfo::create_arg(bcx, args[arg_n]);\n         }\n         arg_n += 1u;\n@@ -4637,12 +4639,12 @@ fn trans_closure(cx: @local_ctxt, sp: span, decl: ast::fn_decl,\n fn trans_fn(cx: @local_ctxt, sp: span, decl: ast::fn_decl, body: ast::blk,\n             llfndecl: ValueRef, ty_self: self_arg, ty_params: [ast::ty_param],\n             id: ast::node_id) {\n-    let do_time = cx.ccx.sess.get_opts().stats;\n+    let do_time = cx.ccx.sess.opts.stats;\n     let start = do_time ? time::get_time() : {sec: 0u32, usec: 0u32};\n     let fcx = option::none;\n     trans_closure(cx, sp, decl, body, llfndecl, ty_self, ty_params, id,\n                   {|new_fcx| fcx = option::some(new_fcx);});\n-    if cx.ccx.sess.get_opts().extra_debuginfo {\n+    if cx.ccx.sess.opts.extra_debuginfo {\n         debuginfo::create_function(option::get(fcx));\n     }\n     if do_time {\n@@ -5149,7 +5151,7 @@ fn register_fn_full(ccx: @crate_ctxt, sp: span, path: [str], _flav: str,\n     ccx.item_ids.insert(node_id, llfn);\n     ccx.item_symbols.insert(node_id, ps);\n \n-    let is_main: bool = is_main_name(path) && !ccx.sess.building_library();\n+    let is_main: bool = is_main_name(path) && !ccx.sess.building_library;\n     if is_main { create_main_wrapper(ccx, sp, llfn, node_type); }\n }\n \n@@ -5551,12 +5553,12 @@ fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n \n fn decl_crate_map(sess: session::session, mapname: str,\n                   llmod: ModuleRef) -> ValueRef {\n-    let targ_cfg = sess.get_targ_cfg();\n+    let targ_cfg = sess.targ_cfg;\n     let int_type = T_int(targ_cfg);\n     let n_subcrates = 1;\n-    let cstore = sess.get_cstore();\n+    let cstore = sess.cstore;\n     while cstore::have_crate_data(cstore, n_subcrates) { n_subcrates += 1; }\n-    let mapname = sess.building_library() ? mapname : \"toplevel\";\n+    let mapname = sess.building_library ? mapname : \"toplevel\";\n     let sym_name = \"_rust_crate_map_\" + mapname;\n     let arrtype = T_array(int_type, n_subcrates as uint);\n     let maptype = T_struct([int_type, arrtype]);\n@@ -5572,7 +5574,7 @@ fn decl_crate_map(sess: session::session, mapname: str,\n fn fill_crate_map(ccx: @crate_ctxt, map: ValueRef) {\n     let subcrates: [ValueRef] = [];\n     let i = 1;\n-    let cstore = ccx.sess.get_cstore();\n+    let cstore = ccx.sess.cstore;\n     while cstore::have_crate_data(cstore, i) {\n         let nm = \"_rust_crate_map_\" + cstore::get_crate_data(cstore, i).name;\n         let cr = str::as_buf(nm, {|buf|\n@@ -5588,7 +5590,7 @@ fn fill_crate_map(ccx: @crate_ctxt, map: ValueRef) {\n }\n \n fn write_metadata(cx: @crate_ctxt, crate: @ast::crate) {\n-    if !cx.sess.building_library() { ret; }\n+    if !cx.sess.building_library { ret; }\n     let llmeta = C_postr(metadata::encoder::encode_metadata(cx, crate));\n     let llconst = trans_common::C_struct([llmeta]);\n     let llglobal =\n@@ -5598,7 +5600,7 @@ fn write_metadata(cx: @crate_ctxt, crate: @ast::crate) {\n                     });\n     llvm::LLVMSetInitializer(llglobal, llconst);\n     let _: () =\n-        str::as_buf(cx.sess.get_targ_cfg().target_strs.meta_sect_name,\n+        str::as_buf(cx.sess.targ_cfg.target_strs.meta_sect_name,\n                     {|buf| llvm::LLVMSetSection(llglobal, buf) });\n     llvm::LLVMSetLinkage(llglobal,\n                          lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n@@ -5645,19 +5647,19 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n         llvm::LLVMModuleCreateWithNameInContext\n             (buf, llvm::LLVMGetGlobalContext())\n     });\n-    let data_layout = sess.get_targ_cfg().target_strs.data_layout;\n-    let targ_triple = sess.get_targ_cfg().target_strs.target_triple;\n+    let data_layout = sess.targ_cfg.target_strs.data_layout;\n+    let targ_triple = sess.targ_cfg.target_strs.target_triple;\n     let _: () =\n         str::as_buf(data_layout,\n                     {|buf| llvm::LLVMSetDataLayout(llmod, buf) });\n     let _: () =\n         str::as_buf(targ_triple,\n                     {|buf| llvm::LLVMSetTarget(llmod, buf) });\n-    let targ_cfg = sess.get_targ_cfg();\n-    let td = mk_target_data(sess.get_targ_cfg().target_strs.data_layout);\n+    let targ_cfg = sess.targ_cfg;\n+    let td = mk_target_data(sess.targ_cfg.target_strs.data_layout);\n     let tn = mk_type_names();\n     let intrinsics = declare_intrinsics(llmod);\n-    if sess.get_opts().extra_debuginfo {\n+    if sess.opts.extra_debuginfo {\n         declare_dbg_intrinsics(llmod, intrinsics);\n     }\n     let int_type = T_int(targ_cfg);\n@@ -5668,7 +5670,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     let tydesc_type = T_tydesc(targ_cfg);\n     tn.associate(\"tydesc\", tydesc_type);\n     let crate_map = decl_crate_map(sess, link_meta.name, llmod);\n-    let dbg_cx = if sess.get_opts().debuginfo {\n+    let dbg_cx = if sess.opts.debuginfo {\n         option::some(@{llmetadata: map::new_int_hash(),\n                        names: namegen(0)})\n     } else {\n@@ -5737,7 +5739,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n \n     // Translate the metadata.\n     write_metadata(cx.ccx, crate);\n-    if ccx.sess.get_opts().stats {\n+    if ccx.sess.opts.stats {\n         #error(\"--- trans stats ---\");\n         #error(\"n_static_tydescs: %u\", ccx.stats.n_static_tydescs);\n         #error(\"n_derived_tydescs: %u\", ccx.stats.n_derived_tydescs);"}, {"sha": "a9d18fbd55a6393da609bf39b88b937774bde698", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -1,7 +1,8 @@\n import core::{vec, str};\n import str::sbuf;\n import lib::llvm::llvm;\n-import syntax::codemap::span;\n+import syntax::codemap;\n+import codemap::span;\n import llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, Opcode,\n               ModuleRef};\n import trans_common::{block_ctxt, T_ptr, T_nil, T_i8, T_i1, T_void,\n@@ -509,16 +510,17 @@ fn _UndefReturn(cx: @block_ctxt, Fn: ValueRef) -> ValueRef {\n \n fn add_span_comment(bcx: @block_ctxt, sp: span, text: str) {\n     let ccx = bcx_ccx(bcx);\n-    if (!ccx.sess.get_opts().no_asm_comments) {\n-        let s = text + \" (\" + ccx.sess.span_str(sp) + \")\";\n+    if (!ccx.sess.opts.no_asm_comments) {\n+        let s = text + \" (\" + codemap::span_to_str(sp, ccx.sess.codemap)\n+            + \")\";\n         log(debug, s);\n         add_comment(bcx, s);\n     }\n }\n \n fn add_comment(bcx: @block_ctxt, text: str) {\n     let ccx = bcx_ccx(bcx);\n-    if (!ccx.sess.get_opts().no_asm_comments) {\n+    if (!ccx.sess.opts.no_asm_comments) {\n         check str::is_not_empty(\"$\");\n         let sanitized = str::replace(text, \"$\", \"\");\n         let comment_text = \"; \" + sanitized;"}, {"sha": "3319969f8bdb78db57729e199c92984dfa29b248", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -364,7 +364,7 @@ fn store_environment(\n     let {bcx: bcx, val:bindings_slot} =\n         GEP_tup_like_1(bcx, cboxptr_ty, llbox, [0, abi::cbox_elt_bindings]);\n     vec::iteri(bound_values) { |i, bv|\n-        if (!ccx.sess.get_opts().no_asm_comments) {\n+        if (!ccx.sess.opts.no_asm_comments) {\n             add_comment(bcx, #fmt(\"Copy %s into closure\",\n                                   ev_to_str(ccx, bv)));\n         }"}, {"sha": "c0f110e65c395b1bfdeaf4b08b5ff8818c87667b", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -9,6 +9,7 @@ import std::map::hashmap;\n import option::some;\n import syntax::ast;\n import driver::session;\n+import session::session;\n import middle::{resolve, ty};\n import back::{link, abi, upcall};\n import util::common::*;\n@@ -331,7 +332,7 @@ fn get_res_dtor(ccx: @crate_ctxt, sp: span, did: ast::def_id, inner_t: ty::t)\n                          [{mode: ast::by_ref, ty: inner_t}],\n                          nil_res, *param_bounds);\n     ret trans::get_extern_const(ccx.externs, ccx.llmod,\n-                                csearch::get_symbol(ccx.sess.get_cstore(),\n+                                csearch::get_symbol(ccx.sess.cstore,\n                                                     did), f_t);\n }\n \n@@ -662,7 +663,7 @@ fn T_vec2(targ_cfg: @session::config, t: TypeRef) -> TypeRef {\n }\n \n fn T_vec(ccx: @crate_ctxt, t: TypeRef) -> TypeRef {\n-    ret T_vec2(ccx.sess.get_targ_cfg(), t);\n+    ret T_vec2(ccx.sess.targ_cfg, t);\n }\n \n // Note that the size of this one is in bytes."}, {"sha": "0a883c193f80bbde7c5e565c4207c1d3c3bf4944", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -360,7 +360,7 @@ fn get_dict_ptrs(bcx: @block_ctxt, origin: typeck::dict_origin)\n         if did.crate == ast::local_crate {\n             ccx.item_ids.get(did.node)\n         } else {\n-            let name = csearch::get_symbol(ccx.sess.get_cstore(), did);\n+            let name = csearch::get_symbol(ccx.sess.cstore, did);\n             get_extern_const(ccx.externs, ccx.llmod, name, T_ptr(T_i8()))\n         }\n     }"}, {"sha": "b4edb2b1cf298e3dec374a78603ce24c611b3657", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -16,6 +16,8 @@ import trans_common::*;\n import trans::*;\n import trans_build::*;\n \n+import driver::session::session;\n+\n export trans_anon_obj;\n export trans_obj;\n "}, {"sha": "8d1e0bbb3110f413fb5fd1b475ee71825e18ed4b", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -2,8 +2,8 @@ import core::{vec, int, uint, option};\n import option::*;\n import syntax::ast::*;\n import syntax::ast_util::*;\n-import syntax::codemap::span;\n-import syntax::visit;\n+import syntax::{visit, codemap};\n+import codemap::span;\n import std::map::{new_int_hash};\n import syntax::print::pprust::path_to_str;\n import tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n@@ -15,6 +15,7 @@ import tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n                      clear_in_poststate_};\n import tritv::*;\n import bitvectors::promises_;\n+import driver::session::session;\n \n import syntax::print::pprust::{constr_args_to_str, lit_to_str};\n \n@@ -51,13 +52,13 @@ fn constraint_to_str(tcx: ty::ctxt, c: sp_constr) -> str {\n     alt c.node {\n       ninit(id, i) {\n         ret #fmt(\"init(%s id=%d - arising from %s)\",\n-                 i, id, tcx.sess.span_str(c.span));\n+                 i, id, codemap::span_to_str(c.span, tcx.sess.codemap));\n       }\n       npred(p, _, args) {\n           ret #fmt(\"%s(%s) - arising from %s\",\n                    path_to_str(p),\n                    comma_str(args),\n-                   tcx.sess.span_str(c.span));\n+                   codemap::span_to_str(c.span, tcx.sess.codemap));\n       }\n     }\n }"}, {"sha": "e522103d62b42d98a9db8d5a7c7f94345c80fb8b", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -12,6 +12,7 @@ import tstate::ann::{pre_and_post, precond, postcond, prestate, poststate,\n                      clear_in_poststate_};\n import tritv::*;\n import util::common::*;\n+import driver::session::session;\n \n fn bit_num(fcx: fn_ctxt, c: tsconstr) -> uint {\n     let d = tsconstr_to_def_id(c);"}, {"sha": "fbe32a4adfff5e82dd2023d1b8e415d8b63cfc94", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -15,6 +15,7 @@ import annotate::annotate_crate;\n import collect_locals::mk_f_to_fn_info;\n import pre_post_conditions::fn_pre_post;\n import states::find_pre_post_state_fn;\n+import driver::session::session;\n \n fn check_unused_vars(fcx: fn_ctxt) {\n "}, {"sha": "f303e7901894285e4f999c58fedb4aa226a9625b", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -6,6 +6,7 @@ import aux::*;\n import util::common::new_def_hash;\n import syntax::codemap::span;\n import syntax::ast_util::respan;\n+import driver::session::session;\n \n type ctxt = {cs: @mutable [sp_constr], tcx: ty::ctxt};\n "}, {"sha": "98860463d196e21fbd64c948b19f848a704aa2ae", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -14,6 +14,7 @@ import syntax::visit;\n import util::common::{new_def_hash, log_expr, field_exprs,\n                       has_nonlocal_exits, log_stmt};\n import syntax::codemap::span;\n+import driver::session::session;\n \n fn find_pre_post_mod(_m: _mod) -> _mod {\n     #debug(\"implement find_pre_post_mod!\");"}, {"sha": "40f717038437d180fd4966dc32a36fef63f1c74e", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -10,6 +10,7 @@ import syntax::ast_util::*;\n import syntax::codemap::span;\n import middle::ty::{expr_ty, type_is_bot};\n import util::common::{field_exprs, has_nonlocal_exits};\n+import driver::session::session;\n \n fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n     alt t {"}, {"sha": "3607edb43c3b4b709db3ce700d0e613d2d3afc61", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -9,6 +9,7 @@ import option::none;\n import option::some;\n import std::smallintmap;\n import driver::session;\n+import session::session;\n import syntax::ast;\n import syntax::ast::*;\n import syntax::ast_util;\n@@ -1864,7 +1865,7 @@ mod unify {\n     // Simple structural type comparison.\n     fn struct_cmp(cx: @ctxt, expected: t, actual: t) -> result {\n         let tcx = cx.tcx;\n-        let cfg = tcx.sess.get_targ_cfg();\n+        let cfg = tcx.sess.targ_cfg;\n         if mach_struct(tcx, cfg, expected) == mach_struct(tcx, cfg, actual) {\n             ret ures_ok(expected);\n         }"}, {"sha": "0ecff4260fbc2b554f03df2cc7271ae426f12fa2", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -3,7 +3,7 @@ import ast::spanned;\n import syntax::ast_util::{local_def, respan};\n import syntax::visit;\n import metadata::csearch;\n-import driver::session;\n+import driver::session::session;\n import util::common::*;\n import syntax::codemap::span;\n import middle::ty;\n@@ -1468,7 +1468,7 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n     }\n }\n \n-fn require_unsafe(sess: session::session, f_purity: ast::purity, sp: span) {\n+fn require_unsafe(sess: session, f_purity: ast::purity, sp: span) {\n     alt f_purity {\n       ast::unsafe_fn. { ret; }\n       _ {\n@@ -1479,7 +1479,7 @@ fn require_unsafe(sess: session::session, f_purity: ast::purity, sp: span) {\n     }\n }\n \n-fn require_impure(sess: session::session, f_purity: ast::purity, sp: span) {\n+fn require_impure(sess: session, f_purity: ast::purity, sp: span) {\n     alt f_purity {\n       ast::unsafe_fn. { ret; }\n       ast::impure_fn. { ret; }\n@@ -2879,8 +2879,8 @@ fn check_main_fn_ty(tcx: ty::ctxt, main_id: ast::node_id) {\n }\n \n fn check_for_main_fn(tcx: ty::ctxt, crate: @ast::crate) {\n-    if !tcx.sess.building_library() {\n-        alt tcx.sess.get_main_id() {\n+    if !tcx.sess.building_library {\n+        alt tcx.sess.main_fn {\n           some(id) { check_main_fn_ty(tcx, id); }\n           none. { tcx.sess.span_err(crate.span, \"main function not found\"); }\n         }"}, {"sha": "0ace58ff953b66f79dcb267c549bafdc02412576", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -33,10 +33,10 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n     ret syntax_expanders;\n }\n \n-obj ext_ctxt(sess: @session,\n+obj ext_ctxt(sess: session,\n              mutable backtrace: codemap::opt_span) {\n \n-    fn session() -> @session { ret sess; }\n+    fn session() -> session { ret sess; }\n \n     fn print_backtrace() { }\n \n@@ -80,7 +80,7 @@ obj ext_ctxt(sess: @session,\n }\n \n fn mk_ctxt(sess: session) -> ext_ctxt {\n-    ret ext_ctxt(@sess, codemap::os_none);\n+    ret ext_ctxt(sess, codemap::os_none);\n }\n \n fn expr_to_str(cx: ext_ctxt, expr: @ast::expr, error: str) -> str {"}, {"sha": "9a08b36af207d9452998d81381b5d639f00e9e3b", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9df1ebd7ebe0232e202d0e065b08d6a593785/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=efb9df1ebd7ebe0232e202d0e065b08d6a593785", "patch": "@@ -71,8 +71,8 @@ fn expand_crate(sess: session::session, c: @crate) -> @crate {\n             with *afp};\n     let f = make_fold(f_pre);\n     let cm = parse_expr_from_source_str(\"-\", core_macros(),\n-                                        sess.get_opts().cfg,\n-                                        sess.get_parse_sess());\n+                                        sess.opts.cfg,\n+                                        sess.parse_sess);\n \n     // This is run for its side-effects on the expander env,\n     // as it registers all the core macros as expanders."}]}