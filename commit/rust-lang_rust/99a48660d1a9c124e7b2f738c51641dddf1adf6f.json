{"sha": "99a48660d1a9c124e7b2f738c51641dddf1adf6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YTQ4NjYwZDFhOWMxMjRlN2IyZjczOGM1MTY0MWRkZGYxYWRmNmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-22T05:01:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-23T01:26:08Z"}, "message": "rustc: Allow any integral types on rhs of shift ops", "tree": {"sha": "5794599355c6f4eabd475a7adb09f2a01430601f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5794599355c6f4eabd475a7adb09f2a01430601f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99a48660d1a9c124e7b2f738c51641dddf1adf6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99a48660d1a9c124e7b2f738c51641dddf1adf6f", "html_url": "https://github.com/rust-lang/rust/commit/99a48660d1a9c124e7b2f738c51641dddf1adf6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99a48660d1a9c124e7b2f738c51641dddf1adf6f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9c7f0c2ba507fdfbb899f2144c2974049007eba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c7f0c2ba507fdfbb899f2144c2974049007eba", "html_url": "https://github.com/rust-lang/rust/commit/e9c7f0c2ba507fdfbb899f2144c2974049007eba"}], "stats": {"total": 164, "additions": 156, "deletions": 8}, "files": [{"sha": "4ec06b837727e8fb7a0e9181b56a263543c5399e", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/99a48660d1a9c124e7b2f738c51641dddf1adf6f/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a48660d1a9c124e7b2f738c51641dddf1adf6f/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=99a48660d1a9c124e7b2f738c51641dddf1adf6f", "patch": "@@ -1641,6 +1641,44 @@ fn trans_compare(cx: block, op: ast::binop, lhs: ValueRef,\n     }\n }\n \n+fn cast_shift_expr_rhs(cx: block, op: ast::binop,\n+                       lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n+    cast_shift_rhs(op, lhs, rhs,\n+                   bind Trunc(cx, _, _), bind ZExt(cx, _, _))\n+}\n+\n+fn cast_shift_const_rhs(op: ast::binop,\n+                        lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n+    cast_shift_rhs(op, lhs, rhs,\n+                   llvm::LLVMConstTrunc, llvm::LLVMConstZExt)\n+}\n+\n+fn cast_shift_rhs(op: ast::binop,\n+                  lhs: ValueRef, rhs: ValueRef,\n+                  trunc: fn(ValueRef, TypeRef) -> ValueRef,\n+                  zext: fn(ValueRef, TypeRef) -> ValueRef\n+                 ) -> ValueRef {\n+\n+    // Shifts may have any size int on the rhs\n+    if ast_util::is_shift_binop(op) {\n+        let rhs_llty = val_ty(rhs);\n+        let lhs_llty = val_ty(lhs);\n+        let rhs_sz = llvm::LLVMGetIntTypeWidth(rhs_llty);\n+        let lhs_sz = llvm::LLVMGetIntTypeWidth(lhs_llty);\n+        if lhs_sz < rhs_sz {\n+            trunc(rhs, lhs_llty)\n+        } else if lhs_sz > rhs_sz {\n+            // FIXME: If shifting by negative values becomes not undefined\n+            // then this is wrong.\n+            zext(rhs, lhs_llty)\n+        } else {\n+            rhs\n+        }\n+    } else {\n+        rhs\n+    }\n+}\n+\n // Important to get types for both lhs and rhs, because one might be _|_\n // and the other not.\n fn trans_eager_binop(cx: block, op: ast::binop, lhs: ValueRef,\n@@ -1651,6 +1689,8 @@ fn trans_eager_binop(cx: block, op: ast::binop, lhs: ValueRef,\n     if ty::type_is_bot(intype) { intype = rhs_t; }\n     let is_float = ty::type_is_fp(intype);\n \n+    let rhs = cast_shift_expr_rhs(cx, op, lhs, rhs);\n+\n     if op == ast::add && ty::type_is_sequence(intype) {\n         ret tvec::trans_add(cx, intype, lhs, rhs, dest);\n     }\n@@ -4059,6 +4099,9 @@ fn trans_const_expr(cx: crate_ctxt, e: @ast::expr) -> ValueRef {\n       ast::expr_binary(b, e1, e2) {\n         let te1 = trans_const_expr(cx, e1);\n         let te2 = trans_const_expr(cx, e2);\n+\n+        let te2 = cast_shift_const_rhs(b, te1, te2);\n+\n         /* Neither type is bottom, and we expect them to be unified already,\n          * so the following is safe. */\n         let ty = ty::expr_ty(cx.tcx, e1);"}, {"sha": "88753b060913c4c89e02f73f921bdd1ab76bfd01", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/99a48660d1a9c124e7b2f738c51641dddf1adf6f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a48660d1a9c124e7b2f738c51641dddf1adf6f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=99a48660d1a9c124e7b2f738c51641dddf1adf6f", "patch": "@@ -2117,8 +2117,17 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         let lhs_t = next_ty_var(fcx);\n         bot = check_expr_with(fcx, lhs, lhs_t);\n \n-        let rhs_bot = check_expr_with(fcx, rhs, lhs_t);\n+        let rhs_bot = if !ast_util::is_shift_binop(binop) {\n+            check_expr_with(fcx, rhs, lhs_t)\n+        } else {\n+            let rhs_bot = check_expr(fcx, rhs);\n+            let rhs_t = expr_ty(tcx, rhs);\n+            require_integral(fcx, rhs.span, rhs_t);\n+            rhs_bot\n+        };\n+\n         if !ast_util::lazy_binop(binop) { bot |= rhs_bot; }\n+\n         let result = check_binop(fcx, expr, lhs_t, binop, rhs);\n         write_ty(tcx, id, result);\n       }\n@@ -2572,13 +2581,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         let base_t = do_autoderef(fcx, expr.span, raw_base_t);\n         bot |= check_expr(fcx, idx);\n         let idx_t = expr_ty(tcx, idx);\n-        fn require_integral(fcx: @fn_ctxt, sp: span, t: ty::t) {\n-            if !type_is_integral(fcx, sp, t) {\n-                fcx.ccx.tcx.sess.span_err(sp, \"mismatched types: expected \\\n-                                               `integer` but found `\"\n-                                  + ty_to_str(fcx.ccx.tcx, t) + \"`\");\n-            }\n-        }\n         alt structure_of(fcx, expr.span, base_t) {\n           ty::ty_vec(mt) {\n             require_integral(fcx, idx.span, idx_t);\n@@ -2612,6 +2614,14 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n     ret bot;\n }\n \n+fn require_integral(fcx: @fn_ctxt, sp: span, t: ty::t) {\n+    if !type_is_integral(fcx, sp, t) {\n+        fcx.ccx.tcx.sess.span_err(sp, \"mismatched types: expected \\\n+                                       `integer` but found `\"\n+                                  + ty_to_str(fcx.ccx.tcx, t) + \"`\");\n+    }\n+}\n+\n fn next_ty_var_id(fcx: @fn_ctxt) -> int {\n     let id = *fcx.next_var_id;\n     *fcx.next_var_id += 1;"}, {"sha": "446f74c8680af9b8e18455fc57a1f55b4aabbfc5", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99a48660d1a9c124e7b2f738c51641dddf1adf6f/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a48660d1a9c124e7b2f738c51641dddf1adf6f/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=99a48660d1a9c124e7b2f738c51641dddf1adf6f", "patch": "@@ -64,6 +64,15 @@ pure fn lazy_binop(b: binop) -> bool {\n     alt b { and { true } or { true } _ { false } }\n }\n \n+pure fn is_shift_binop(b: binop) -> bool {\n+    alt b {\n+      lsl { true }\n+      lsr { true }\n+      asr { true }\n+      _ { false }\n+    }\n+}\n+\n fn unop_to_str(op: unop) -> str {\n     alt op {\n       box(mt) { if mt == m_mutbl { ret \"@mut \"; } ret \"@\"; }"}, {"sha": "93b2c29f35a20af0af8ac322fab29ca74c36f01b", "filename": "src/test/run-pass/shift.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/99a48660d1a9c124e7b2f738c51641dddf1adf6f/src%2Ftest%2Frun-pass%2Fshift.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a48660d1a9c124e7b2f738c51641dddf1adf6f/src%2Ftest%2Frun-pass%2Fshift.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshift.rs?ref=99a48660d1a9c124e7b2f738c51641dddf1adf6f", "patch": "@@ -0,0 +1,86 @@\n+// Testing shifts for various combinations of integers\n+// Issue #1570\n+\n+fn main() {\n+    test_misc();\n+    test_expr();\n+    test_const();\n+}\n+\n+fn test_misc() {\n+    assert 1 << 1i8 << 1u8 << 1i16 << 1 as char << 1u64 == 32;\n+}\n+\n+fn test_expr() {\n+    let v10 = 10 as uint;\n+    let v4 = 4 as u8;\n+    let v2 = 2 as u8;\n+    assert (v10 >> v2 == v2 as uint);\n+    assert (v10 >>> v2 == v2 as uint);\n+    assert (v10 << v4 == 160 as uint);\n+\n+    let v10 = 10 as u8;\n+    let v4 = 4 as uint;\n+    let v2 = 2 as uint;\n+    assert (v10 >> v2 == v2 as u8);\n+    assert (v10 >>> v2 == v2 as u8);\n+    assert (v10 << v4 == 160 as u8);\n+\n+    let v10 = 10 as int;\n+    let v4 = 4 as i8;\n+    let v2 = 2 as i8;\n+    assert (v10 >> v2 == v2 as int);\n+    assert (v10 >>> v2 == v2 as int);\n+    assert (v10 << v4 == 160 as int);\n+\n+    let v10 = 10 as i8;\n+    let v4 = 4 as int;\n+    let v2 = 2 as int;\n+    assert (v10 >> v2 == v2 as i8);\n+    assert (v10 >>> v2 == v2 as i8);\n+    assert (v10 << v4 == 160 as i8);\n+\n+    let v10 = 10 as uint;\n+    let v4 = 4 as int;\n+    let v2 = 2 as int;\n+    assert (v10 >> v2 == v2 as uint);\n+    assert (v10 >>> v2 == v2 as uint);\n+    assert (v10 << v4 == 160 as uint);\n+}\n+\n+fn test_const() {\n+    const r1_1: uint = 10u >> 2u8;\n+    const r2_1: uint = 10u >>> 2u8;\n+    const r3_1: uint = 10u << 4u8;\n+    assert r1_1 == 2 as uint;\n+    assert r2_1 == 2 as uint;\n+    assert r3_1 == 160 as uint;\n+\n+    const r1_2: u8 = 10u8 >> 2u;\n+    const r2_2: u8 = 10u8 >>> 2u;\n+    const r3_2: u8 = 10u8 << 4u;\n+    assert r1_2 == 2 as u8;\n+    assert r2_2 == 2 as u8;\n+    assert r3_2 == 160 as u8;\n+\n+    const r1_3: int = 10 >> 2i8;\n+    const r2_3: int = 10 >>> 2i8;\n+    const r3_3: int = 10 << 4i8;\n+    assert r1_3 == 2 as int;\n+    assert r2_3 == 2 as int;\n+    assert r3_3 == 160 as int;\n+\n+    const r1_4: i8 = 10i8 >> 2;\n+    const r2_4: i8 = 10i8 >>> 2;\n+    const r3_4: i8 = 10i8 << 4;\n+    assert r1_4 == 2 as i8;\n+    assert r2_4 == 2 as i8;\n+    assert r3_4 == 160 as i8;\n+\n+    const r1_5: uint = 10u >> 2i8;\n+    const r2_5: uint = 10u >>> 2i8;\n+    const r3_5: uint = 10u << 4i8;\n+    assert r1_5 == 2 as uint;\n+    assert r2_5 == 2 as uint;\n+    assert r3_5 == 160 as uint;\n+}"}]}