{"sha": "e42cbe8edc3b9b05510ca6bb77b719617db24f86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MmNiZThlZGMzYjliMDU1MTBjYTZiYjc3YjcxOTYxN2RiMjRmODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-19T00:11:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-19T00:11:08Z"}, "message": "Auto merge of #77874 - camelid:range-docs-readability, r=scottmcm\n\nImprove range docs\n\n* Improve code formatting and legibility\n* Various other readability improvements", "tree": {"sha": "072a8c95e28ade2f10138738b31d44f7b62c27cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072a8c95e28ade2f10138738b31d44f7b62c27cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e42cbe8edc3b9b05510ca6bb77b719617db24f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e42cbe8edc3b9b05510ca6bb77b719617db24f86", "html_url": "https://github.com/rust-lang/rust/commit/e42cbe8edc3b9b05510ca6bb77b719617db24f86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e42cbe8edc3b9b05510ca6bb77b719617db24f86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1496c6e606dd908dd651ac2cce89815e10d7fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1496c6e606dd908dd651ac2cce89815e10d7fc5", "html_url": "https://github.com/rust-lang/rust/commit/b1496c6e606dd908dd651ac2cce89815e10d7fc5"}, {"sha": "a885c5008cfce9ad2ae0892d68be40dc673446d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a885c5008cfce9ad2ae0892d68be40dc673446d0", "html_url": "https://github.com/rust-lang/rust/commit/a885c5008cfce9ad2ae0892d68be40dc673446d0"}], "stats": {"total": 92, "additions": 52, "deletions": 40}, "files": [{"sha": "4423cfc27dd1778cc96e57b1b494cb33597b37f6", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 52, "deletions": 40, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/e42cbe8edc3b9b05510ca6bb77b719617db24f86/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42cbe8edc3b9b05510ca6bb77b719617db24f86/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=e42cbe8edc3b9b05510ca6bb77b719617db24f86", "patch": "@@ -23,20 +23,20 @@ use crate::slice::index::{\n ///\n /// ```compile_fail,E0277\n /// for i in .. {\n-///    // ...\n+///     // ...\n /// }\n /// ```\n ///\n /// Used as a [slicing index], `RangeFull` produces the full array as a slice.\n ///\n /// ```\n /// let arr = [0, 1, 2, 3, 4];\n-/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);  // RangeFull\n-/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n-/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n-/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n-/// assert_eq!(arr[1.. 3], [  1,2    ]);\n-/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n+/// assert_eq!(arr[ ..  ], [0, 1, 2, 3, 4]); // This is the `RangeFull`\n+/// assert_eq!(arr[ .. 3], [0, 1, 2      ]);\n+/// assert_eq!(arr[ ..=3], [0, 1, 2, 3   ]);\n+/// assert_eq!(arr[1..  ], [   1, 2, 3, 4]);\n+/// assert_eq!(arr[1.. 3], [   1, 2      ]);\n+/// assert_eq!(arr[1..=3], [   1, 2, 3   ]);\n /// ```\n ///\n /// [slicing index]: crate::slice::SliceIndex\n@@ -56,22 +56,26 @@ impl fmt::Debug for RangeFull {\n /// A (half-open) range bounded inclusively below and exclusively above\n /// (`start..end`).\n ///\n-/// The `Range` `start..end` contains all values with `x >= start` and\n-/// `x < end`. It is empty unless `start < end`.\n+/// The range `start..end` contains all values with `start <= x < end`.\n+/// It is empty if `start >= end`.\n ///\n /// # Examples\n ///\n+/// The `start..end` syntax is a `Range`:\n+///\n /// ```\n /// assert_eq!((3..5), std::ops::Range { start: 3, end: 5 });\n /// assert_eq!(3 + 4 + 5, (3..6).sum());\n+/// ```\n ///\n+/// ```\n /// let arr = [0, 1, 2, 3, 4];\n-/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n-/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n-/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n-/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n-/// assert_eq!(arr[1.. 3], [  1,2    ]);  // Range\n-/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n+/// assert_eq!(arr[ ..  ], [0, 1, 2, 3, 4]);\n+/// assert_eq!(arr[ .. 3], [0, 1, 2      ]);\n+/// assert_eq!(arr[ ..=3], [0, 1, 2, 3   ]);\n+/// assert_eq!(arr[1..  ], [   1, 2, 3, 4]);\n+/// assert_eq!(arr[1.. 3], [   1, 2      ]); // This is a `Range`\n+/// assert_eq!(arr[1..=3], [   1, 2, 3   ]);\n /// ```\n #[lang = \"Range\"]\n #[doc(alias = \"..\")]\n@@ -164,17 +168,21 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n ///\n /// # Examples\n ///\n+/// The `start..` syntax is a `RangeFrom`:\n+///\n /// ```\n /// assert_eq!((2..), std::ops::RangeFrom { start: 2 });\n /// assert_eq!(2 + 3 + 4, (2..).take(3).sum());\n+/// ```\n ///\n+/// ```\n /// let arr = [0, 1, 2, 3, 4];\n-/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n-/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n-/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n-/// assert_eq!(arr[1..  ], [  1,2,3,4]);  // RangeFrom\n-/// assert_eq!(arr[1.. 3], [  1,2    ]);\n-/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n+/// assert_eq!(arr[ ..  ], [0, 1, 2, 3, 4]);\n+/// assert_eq!(arr[ .. 3], [0, 1, 2      ]);\n+/// assert_eq!(arr[ ..=3], [0, 1, 2, 3   ]);\n+/// assert_eq!(arr[1..  ], [   1, 2, 3, 4]); // This is a `RangeFrom`\n+/// assert_eq!(arr[1.. 3], [   1, 2      ]);\n+/// assert_eq!(arr[1..=3], [   1, 2, 3   ]);\n /// ```\n #[lang = \"RangeFrom\"]\n #[doc(alias = \"..\")]\n@@ -248,12 +256,12 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n ///\n /// ```\n /// let arr = [0, 1, 2, 3, 4];\n-/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n-/// assert_eq!(arr[ .. 3], [0,1,2    ]);  // RangeTo\n-/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n-/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n-/// assert_eq!(arr[1.. 3], [  1,2    ]);\n-/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n+/// assert_eq!(arr[ ..  ], [0, 1, 2, 3, 4]);\n+/// assert_eq!(arr[ .. 3], [0, 1, 2      ]); // This is a `RangeTo`\n+/// assert_eq!(arr[ ..=3], [0, 1, 2, 3   ]);\n+/// assert_eq!(arr[1..  ], [   1, 2, 3, 4]);\n+/// assert_eq!(arr[1.. 3], [   1, 2      ]);\n+/// assert_eq!(arr[1..=3], [   1, 2, 3   ]);\n /// ```\n ///\n /// [slicing index]: crate::slice::SliceIndex\n@@ -314,17 +322,21 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n ///\n /// # Examples\n ///\n+/// The `start..=end` syntax is a `RangeInclusive`:\n+///\n /// ```\n /// assert_eq!((3..=5), std::ops::RangeInclusive::new(3, 5));\n /// assert_eq!(3 + 4 + 5, (3..=5).sum());\n+/// ```\n ///\n+/// ```\n /// let arr = [0, 1, 2, 3, 4];\n-/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n-/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n-/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n-/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n-/// assert_eq!(arr[1.. 3], [  1,2    ]);\n-/// assert_eq!(arr[1..=3], [  1,2,3  ]);  // RangeInclusive\n+/// assert_eq!(arr[ ..  ], [0, 1, 2, 3, 4]);\n+/// assert_eq!(arr[ .. 3], [0, 1, 2      ]);\n+/// assert_eq!(arr[ ..=3], [0, 1, 2, 3   ]);\n+/// assert_eq!(arr[1..  ], [   1, 2, 3, 4]);\n+/// assert_eq!(arr[1.. 3], [   1, 2      ]);\n+/// assert_eq!(arr[1..=3], [   1, 2, 3   ]); // This is a `RangeInclusive`\n /// ```\n #[lang = \"RangeInclusive\"]\n #[doc(alias = \"..=\")]\n@@ -538,12 +550,12 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n ///\n /// ```\n /// let arr = [0, 1, 2, 3, 4];\n-/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n-/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n-/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);  // RangeToInclusive\n-/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n-/// assert_eq!(arr[1.. 3], [  1,2    ]);\n-/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n+/// assert_eq!(arr[ ..  ], [0, 1, 2, 3, 4]);\n+/// assert_eq!(arr[ .. 3], [0, 1, 2      ]);\n+/// assert_eq!(arr[ ..=3], [0, 1, 2, 3   ]); // This is a `RangeToInclusive`\n+/// assert_eq!(arr[1..  ], [   1, 2, 3, 4]);\n+/// assert_eq!(arr[1.. 3], [   1, 2      ]);\n+/// assert_eq!(arr[1..=3], [   1, 2, 3   ]);\n /// ```\n ///\n /// [slicing index]: crate::slice::SliceIndex\n@@ -665,9 +677,9 @@ impl<T: Clone> Bound<&T> {\n     }\n }\n \n-#[stable(feature = \"collections_range\", since = \"1.28.0\")]\n /// `RangeBounds` is implemented by Rust's built-in range types, produced\n /// by range syntax like `..`, `a..`, `..b`, `..=c`, `d..e`, or `f..=g`.\n+#[stable(feature = \"collections_range\", since = \"1.28.0\")]\n pub trait RangeBounds<T: ?Sized> {\n     /// Start index bound.\n     ///"}]}