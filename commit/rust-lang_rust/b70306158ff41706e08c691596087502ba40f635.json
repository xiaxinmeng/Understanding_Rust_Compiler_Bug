{"sha": "b70306158ff41706e08c691596087502ba40f635", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MDMwNjE1OGZmNDE3MDZlMDhjNjkxNTk2MDg3NTAyYmE0MGY2MzU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-10T19:57:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-11T01:04:58Z"}, "message": "Remove named extern blocks from the AST\n\nThere's currently a fair amount of code which is being ignored on unnamed blocks\n(which are the default now), and I opted to leave it commented out for now. I\nintend on very soon revisiting on how we perform linking with extern crates in\nan effort to support static linking.", "tree": {"sha": "ddd4423a7b803d445042b9ad99a7e97ce9d282c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd4423a7b803d445042b9ad99a7e97ce9d282c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b70306158ff41706e08c691596087502ba40f635", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b70306158ff41706e08c691596087502ba40f635", "html_url": "https://github.com/rust-lang/rust/commit/b70306158ff41706e08c691596087502ba40f635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b70306158ff41706e08c691596087502ba40f635/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d123db4eb03c1b2378b6248ebea5f0f40f2a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d123db4eb03c1b2378b6248ebea5f0f40f2a4f", "html_url": "https://github.com/rust-lang/rust/commit/34d123db4eb03c1b2378b6248ebea5f0f40f2a4f"}], "stats": {"total": 127, "additions": 40, "deletions": 87}, "files": [{"sha": "c11208b0d3eb36954b1da85e7b3184e5e7a05941", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70306158ff41706e08c691596087502ba40f635/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70306158ff41706e08c691596087502ba40f635/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=b70306158ff41706e08c691596087502ba40f635", "patch": "@@ -102,7 +102,6 @@ fn fold_foreign_mod(cx: &Context, nm: &ast::foreign_mod) -> ast::foreign_mod {\n         }\n     }.collect();\n     ast::foreign_mod {\n-        sort: nm.sort,\n         abis: nm.abis,\n         view_items: filtered_view_items,\n         items: filtered_items"}, {"sha": "6df083aca4ff3b2604460ed1f886f406cccc412e", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b70306158ff41706e08c691596087502ba40f635/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70306158ff41706e08c691596087502ba40f635/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=b70306158ff41706e08c691596087502ba40f635", "patch": "@@ -175,40 +175,43 @@ fn visit_item(e: &Env, i: @ast::item) {\n         }\n \n         let cstore = e.cstore;\n-        let mut already_added = false;\n         let link_args = i.attrs.iter()\n             .filter_map(|at| if \"link_args\" == at.name() {Some(at)} else {None})\n             .collect::<~[&ast::Attribute]>();\n \n-        match fm.sort {\n-            ast::named => {\n-                let link_name = i.attrs.iter()\n-                    .find(|at| \"link_name\" == at.name())\n-                    .and_then(|at| at.value_str());\n-\n-                let foreign_name = match link_name {\n-                        Some(nn) => {\n-                            if nn.is_empty() {\n-                                e.diag.span_fatal(\n-                                    i.span,\n-                                    \"empty #[link_name] not allowed; use \\\n-                                     #[nolink].\");\n-                            }\n-                            nn\n-                        }\n-                        None => token::ident_to_str(&i.ident)\n-                    };\n-                if !attr::contains_name(i.attrs, \"nolink\") {\n-                    already_added =\n-                        !cstore::add_used_library(cstore, foreign_name);\n-                }\n-                if !link_args.is_empty() && already_added {\n-                    e.diag.span_fatal(i.span, ~\"library '\" + foreign_name +\n-                               \"' already added: can't specify link_args.\");\n-                }\n-            }\n-            ast::anonymous => { /* do nothing */ }\n-        }\n+        // XXX: two whom it may concern, this was the old logic applied to the\n+        //      ast's extern mod blocks which had names (we used to allow\n+        //      \"extern mod foo\"). This code was never run for anonymous blocks,\n+        //      and we now only have anonymous blocks. We're still in the midst\n+        //      of figuring out what the exact operations we'd like to support\n+        //      when linking external modules, but I wanted to leave this logic\n+        //      here for the time beging to refer back to it\n+\n+        //let mut already_added = false;\n+        //let link_name = i.attrs.iter()\n+        //    .find(|at| \"link_name\" == at.name())\n+        //    .and_then(|at| at.value_str());\n+\n+        //let foreign_name = match link_name {\n+        //        Some(nn) => {\n+        //            if nn.is_empty() {\n+        //                e.diag.span_fatal(\n+        //                    i.span,\n+        //                    \"empty #[link_name] not allowed; use \\\n+        //                     #[nolink].\");\n+        //            }\n+        //            nn\n+        //        }\n+        //        None => token::ident_to_str(&i.ident)\n+        //    };\n+        //if !attr::contains_name(i.attrs, \"nolink\") {\n+        //    already_added =\n+        //        !cstore::add_used_library(cstore, foreign_name);\n+        //}\n+        //if !link_args.is_empty() && already_added {\n+        //    e.diag.span_fatal(i.span, ~\"library '\" + foreign_name +\n+        //               \"' already added: can't specify link_args.\");\n+        //}\n \n         for m in link_args.iter() {\n             match m.value_str() {"}, {"sha": "a6c22bd574264c2d3dda87ccaf449095446c9aac", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b70306158ff41706e08c691596087502ba40f635/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70306158ff41706e08c691596087502ba40f635/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b70306158ff41706e08c691596087502ba40f635", "patch": "@@ -1183,31 +1183,7 @@ impl Resolver {\n                 ModuleReducedGraphParent(name_bindings.get_module())\n             }\n \n-            item_foreign_mod(ref fm) => {\n-                match fm.sort {\n-                    named => {\n-                        let (name_bindings, new_parent) =\n-                            self.add_child(ident, parent,\n-                                           ForbidDuplicateModules, sp);\n-\n-                        let parent_link = self.get_parent_link(new_parent,\n-                                                               ident);\n-                        let def_id = DefId { crate: 0, node: item.id };\n-                        name_bindings.define_module(parent_link,\n-                                                    Some(def_id),\n-                                                    ExternModuleKind,\n-                                                    false,\n-                                                    true,\n-                                                    sp);\n-\n-                        ModuleReducedGraphParent(name_bindings.get_module())\n-                    }\n-\n-                    // For anon foreign mods, the contents just go in the\n-                    // current scope\n-                    anonymous => parent\n-                }\n-            }\n+            item_foreign_mod(*) => parent,\n \n             // These items live in the value namespace.\n             item_static(_, m, _) => {"}, {"sha": "08e1390a9817c0dfada237efa3bf5f90be26139c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b70306158ff41706e08c691596087502ba40f635/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70306158ff41706e08c691596087502ba40f635/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b70306158ff41706e08c691596087502ba40f635", "patch": "@@ -949,16 +949,8 @@ pub struct _mod {\n     items: ~[@item],\n }\n \n-// Foreign mods can be named or anonymous\n-#[deriving(Clone, Eq, Encodable, Decodable,IterBytes)]\n-pub enum foreign_mod_sort {\n-    named,\n-    anonymous,\n-}\n-\n #[deriving(Clone, Eq, Encodable, Decodable,IterBytes)]\n pub struct foreign_mod {\n-    sort: foreign_mod_sort,\n     abis: AbiSet,\n     view_items: ~[view_item],\n     items: ~[@foreign_item],"}, {"sha": "83205ccc9818aace51d1c4ffcada611430fccf8c", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b70306158ff41706e08c691596087502ba40f635/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70306158ff41706e08c691596087502ba40f635/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=b70306158ff41706e08c691596087502ba40f635", "patch": "@@ -294,17 +294,11 @@ impl Visitor<()> for Ctx {\n                                                       nm.abis,\n                                                       visibility,\n                                                       // FIXME (#2543)\n-                                                      if nm.sort ==\n-                                                            ast::named {\n-                                                          let e = path_name(\n-                                                              i.ident);\n-                                                          self.extend(e)\n-                                                      } else {\n                                                         // Anonymous extern\n                                                         // mods go in the\n                                                         // parent scope.\n                                                         @self.path.clone()\n-                                                      }));\n+                                                      ));\n                 }\n             }\n             item_struct(struct_def, _) => {"}, {"sha": "84ff98b0188cf9d8e650b71f581adc11621fb9d3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70306158ff41706e08c691596087502ba40f635/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70306158ff41706e08c691596087502ba40f635/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b70306158ff41706e08c691596087502ba40f635", "patch": "@@ -289,7 +289,6 @@ pub trait ast_fold {\n \n     fn fold_foreign_mod(&self, nm: &foreign_mod) -> foreign_mod {\n         ast::foreign_mod {\n-            sort: nm.sort,\n             abis: nm.abis,\n             view_items: nm.view_items\n                           .iter()"}, {"sha": "e7c579d2f19d8b0a9cf7d38395825dd99896ff0c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b70306158ff41706e08c691596087502ba40f635/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70306158ff41706e08c691596087502ba40f635/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b70306158ff41706e08c691596087502ba40f635", "patch": "@@ -4128,7 +4128,6 @@ impl Parser {\n     // at this point, this is essentially a wrapper for\n     // parse_foreign_items.\n     fn parse_foreign_mod_items(&self,\n-                               sort: ast::foreign_mod_sort,\n                                abis: AbiSet,\n                                first_item_attrs: ~[Attribute])\n                                -> foreign_mod {\n@@ -4144,7 +4143,6 @@ impl Parser {\n         }\n         assert!(*self.token == token::RBRACE);\n         ast::foreign_mod {\n-            sort: sort,\n             abis: abis,\n             view_items: view_items,\n             items: foreign_items\n@@ -4169,15 +4167,15 @@ impl Parser {\n                                  self.this_token_to_str()));\n         }\n \n-        let (sort, maybe_path, ident) = match *self.token {\n+        let (named, maybe_path, ident) = match *self.token {\n             token::IDENT(*) => {\n                 let the_ident = self.parse_ident();\n                 let path = if *self.token == token::EQ {\n                     self.bump();\n                     Some(self.parse_str())\n                 }\n                 else { None };\n-                (ast::named, path, the_ident)\n+                (true, path, the_ident)\n             }\n             _ => {\n                 if must_be_named_mod {\n@@ -4187,22 +4185,22 @@ impl Parser {\n                                          self.this_token_to_str()));\n                 }\n \n-                (ast::anonymous, None,\n+                (false, None,\n                  special_idents::clownshoes_foreign_mod)\n             }\n         };\n \n         // extern mod foo { ... } or extern { ... }\n         if items_allowed && self.eat(&token::LBRACE) {\n             // `extern mod foo { ... }` is obsolete.\n-            if sort == ast::named {\n+            if named {\n                 self.obsolete(*self.last_span, ObsoleteNamedExternModule);\n             }\n \n             let abis = opt_abis.unwrap_or(AbiSet::C());\n \n             let (inner, next) = self.parse_inner_attrs_and_next();\n-            let m = self.parse_foreign_mod_items(sort, abis, next);\n+            let m = self.parse_foreign_mod_items(abis, next);\n             self.expect(&token::RBRACE);\n \n             return iovi_item(self.mk_item(lo,"}, {"sha": "607eb81102fc1d57f10bb4f0522befc6acd2b8da", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b70306158ff41706e08c691596087502ba40f635/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70306158ff41706e08c691596087502ba40f635/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b70306158ff41706e08c691596087502ba40f635", "patch": "@@ -539,14 +539,6 @@ pub fn print_item(s: @ps, item: &ast::item) {\n       ast::item_foreign_mod(ref nmod) => {\n         head(s, \"extern\");\n         word_nbsp(s, nmod.abis.to_str());\n-        match nmod.sort {\n-            ast::named => {\n-                word_nbsp(s, \"mod\");\n-                print_ident(s, item.ident);\n-                nbsp(s);\n-            }\n-            ast::anonymous => {}\n-        }\n         bopen(s);\n         print_foreign_mod(s, nmod, item.attrs);\n         bclose(s, item.span);"}]}