{"sha": "67360ae61808453d308496f90e0b3faa3e8efee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MzYwYWU2MTgwODQ1M2QzMDg0OTZmOTBlMGIzZmFhM2U4ZWZlZTM=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-16T01:16:17Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-16T01:16:59Z"}, "message": "Fixed a problem where spawn arguments were getting lost again. Also, fixed up stack alignment, which closes #496", "tree": {"sha": "7df5f198272c57aeebf35e9a22aa03cd12f33e0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7df5f198272c57aeebf35e9a22aa03cd12f33e0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67360ae61808453d308496f90e0b3faa3e8efee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67360ae61808453d308496f90e0b3faa3e8efee3", "html_url": "https://github.com/rust-lang/rust/commit/67360ae61808453d308496f90e0b3faa3e8efee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67360ae61808453d308496f90e0b3faa3e8efee3/comments", "author": null, "committer": null, "parents": [{"sha": "c4f9bd94700188678893659580f3b7aa80da3b7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f9bd94700188678893659580f3b7aa80da3b7d", "html_url": "https://github.com/rust-lang/rust/commit/c4f9bd94700188678893659580f3b7aa80da3b7d"}], "stats": {"total": 92, "additions": 54, "deletions": 38}, "files": [{"sha": "c1c8ba2167bd53382d6845035f2b3357e2fe027b", "filename": "src/rt/arch/i386/context.cpp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Farch%2Fi386%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Farch%2Fi386%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fcontext.cpp?ref=67360ae61808453d308496f90e0b3faa3e8efee3", "patch": "@@ -36,10 +36,14 @@ void context::swap(context &out)\n void context::call(void *f, void *arg, void *stack) {\n   // set up the trampoline frame\n   uint32_t *sp = (uint32_t *)stack;\n+\n+  // Shift the stack pointer so the alignment works out right.\n+  sp = align_down(sp) - 2;\n+\n   *--sp = (uint32_t)this;\n   *--sp = (uint32_t)arg;\n-  *--sp = 0xdeadbeef; //(uint32_t)ctx_trampoline1;\n   *--sp = 0xdeadbeef;\n+  *--sp = 0xca11ab1e;\n \n   regs.esp = (uint32_t)sp;\n   regs.eip = (uint32_t)f;"}, {"sha": "5329016450a75ccf34b961683e4ca5fa8f899460", "filename": "src/rt/arch/i386/context.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Farch%2Fi386%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Farch%2Fi386%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fcontext.h?ref=67360ae61808453d308496f90e0b3faa3e8efee3", "patch": "@@ -32,4 +32,12 @@ class context {\n   void call(void *f, void *arg, void *sp);\n };\n \n+template<typename T>\n+T align_down(T sp)\n+{\n+    // There is no platform we care about that needs more than a\n+    // 16-byte alignment.\n+    return (T)((int)sp & ~(16 - 1));\n+}\n+\n #endif"}, {"sha": "c7cece2ef8152cc15c3f66a074d0cd9ccc91f3f9", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=67360ae61808453d308496f90e0b3faa3e8efee3", "patch": "@@ -93,8 +93,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n         DLOG(dom, dom, \"startup: arg[%d] = '%s'\", i, args->argv[i]);\n     }\n \n-    dom->root_task->start(main_fn, \n-                          (uintptr_t)args->args, sizeof(args->args));\n+    dom->root_task->start(main_fn, (uintptr_t)args->args);\n \n     int ret = dom->start_main_loop();\n     delete args;"}, {"sha": "bb8261bb78a0d6024dc34ebc2782a0e48732b033", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=67360ae61808453d308496f90e0b3faa3e8efee3", "patch": "@@ -17,6 +17,7 @@\n static size_t const min_stk_bytes = 0x300000;\n // static size_t const min_stk_bytes = 0x10000;\n \n+\n // Task stack segments. Heap allocated and chained together.\n \n static stk_seg*\n@@ -152,25 +153,24 @@ void task_start_wrapper(spawn_args *a)\n \n void\n rust_task::start(uintptr_t spawnee_fn,\n-                 uintptr_t args,\n-                 size_t callsz)\n+                 uintptr_t args)\n {\n     LOGPTR(dom, \"from spawnee\", spawnee_fn);\n \n     I(dom, stk->data != NULL);\n \n-    char *sp = (char *)stk->limit;\n+    char *sp = (char *)rust_sp;\n \n     sp -= sizeof(spawn_args);\n \n     spawn_args *a = (spawn_args *)sp;\n \n     a->task = this;\n-    a->a3 = 0xca11ab1e;\n+    a->a3 = 0;\n     a->a4 = args;\n     void **f = (void **)&a->f;\n     *f = (void *)spawnee_fn;\n-\n+    \n     ctx.call((void *)task_start_wrapper, a, sp);\n \n     yield_timer.reset(0);"}, {"sha": "a022a348667ab2cc8f23a89024ec25f3ce17977d", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=67360ae61808453d308496f90e0b3faa3e8efee3", "patch": "@@ -60,8 +60,7 @@ rust_task : public maybe_proxy<rust_task>,\n     ~rust_task();\n \n     void start(uintptr_t spawnee_fn,\n-               uintptr_t args,\n-               size_t callsz);\n+               uintptr_t args);\n     void grow(size_t n_frame_bytes);\n     bool running();\n     bool blocked();"}, {"sha": "e8c8e45e1c600a650ec85f9cea01e002499eedd6", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=67360ae61808453d308496f90e0b3faa3e8efee3", "patch": "@@ -509,14 +509,6 @@ upcall_new_task(rust_task *spawner, rust_vec *name) {\n     return task;\n }\n \n-static uintptr_t\n-align_down(uintptr_t sp)\n-{\n-    // There is no platform we care about that needs more than a\n-    // 16-byte alignment.\n-    return sp & ~(16 - 1);\n-}\n-\n extern \"C\" CDECL rust_task *\n upcall_start_task(rust_task *spawner,\n                   rust_task *task,\n@@ -538,12 +530,11 @@ upcall_start_task(rust_task *spawner,\n     // The args tuple is stack-allocated. We need to move it over to the new\n     // stack.\n     task->rust_sp -= args_sz;\n+    uintptr_t child_arg = (uintptr_t)task->rust_sp;\n+\n     memcpy((void*)task->rust_sp, (void*)args, args_sz);\n-    uintptr_t start_args[] = {0, 0, 0, task->rust_sp};\n-    \n-    task->rust_sp = align_down(task->rust_sp);\n-    \n-    task->start(spawnee_fn, (uintptr_t)start_args, sizeof(start_args));\n+\n+    task->start(spawnee_fn, child_arg);\n     return task;\n }\n \n@@ -567,6 +558,8 @@ upcall_new_thread(rust_task *task, const char *name) {\n     return child_task_proxy;\n }\n \n+#if 0 /* TODO: this code will be re-enabled once we have multithreading. */\n+\n #if defined(__WIN32__)\n static DWORD WINAPI rust_thread_start(void *ptr)\n #elif defined(__GNUC__)\n@@ -587,6 +580,8 @@ static void *rust_thread_start(void *ptr)\n     return 0;\n }\n \n+#endif\n+\n /**\n  * Called after a new domain is created. Here we create a new thread and\n  * and start the domain main loop.\n@@ -597,6 +592,7 @@ upcall_start_thread(rust_task *task,\n                     uintptr_t spawnee_fn,\n                     size_t callsz) {\n     LOG_UPCALL_ENTRY(task);\n+#if 0\n     rust_dom *parenet_dom = task->dom;\n     rust_handle<rust_task> *child_task_handle = child_task_proxy->handle();\n     LOG(task, task,\n@@ -616,6 +612,7 @@ upcall_start_thread(rust_task *task,\n     pthread_create(&thread, &parenet_dom->attr, rust_thread_start,\n                    (void *) child_task->dom);\n #endif\n+#endif // 0\n     return child_task_proxy;\n }\n "}, {"sha": "0fed35dad8249ddfb294cacd424f60701fcd9148", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=67360ae61808453d308496f90e0b3faa3e8efee3", "patch": "@@ -52,7 +52,7 @@ rust_task_test::worker::run() {\n     rust_handle<rust_dom> *handle =\n         kernel->create_domain(\"test\");\n     rust_dom *domain = handle->referent();\n-    domain->root_task->start((uintptr_t)&task_entry, (uintptr_t)NULL, 0);\n+    domain->root_task->start((uintptr_t)&task_entry, (uintptr_t)NULL);\n     domain->start_main_loop();\n     kernel->destroy_domain(domain);\n }"}, {"sha": "5b249e03041ad0a8354e8468f60320183fa66e66", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=67360ae61808453d308496f90e0b3faa3e8efee3", "patch": "@@ -5,17 +5,16 @@\n \n fn main() {\n   let port[int] p = port();\n-  spawn child(chan(p));\n+  let task t = spawn child(chan(p));\n   let int y;\n   p |> y;\n   log_err \"received\";\n   log_err y;\n-  //assert (y == 10);\n+  assert (y == 10);\n }\n \n fn child(chan[int] c) {\n   log_err \"sending\";\n   c <| 10;\n   log_err \"value sent\"\n }\n-"}, {"sha": "db695a1dd8b7aaf70d1bada3c993cbdfe849cb1a", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=67360ae61808453d308496f90e0b3faa3e8efee3", "patch": "@@ -1,14 +1,18 @@\n+// xfail-stage0\n+// -*- rust -*-\n \n+use std;\n \n+fn main() {\n+    auto t = spawn child(10);\n+    std::task::join(t)\n+}\n \n-// xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n-// xfail-stage3\n-// -*- rust -*-\n-fn main() { auto t = spawn child(10); }\n+fn child(int i) {\n+    log_err i;\n+    assert(i == 10);\n+}\n \n-fn child(int i) { log_err i; }\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "3d2690e34e5cbf9390df32217caf600f16c2338f", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67360ae61808453d308496f90e0b3faa3e8efee3/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=67360ae61808453d308496f90e0b3faa3e8efee3", "patch": "@@ -1,11 +1,8 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n-// xfail-stage3\n // -*- rust -*-\n \n fn main() {\n-  spawn child(10, 20, 30, 40, 50, 60, 70, 80, 90);\n+    spawn child(10, 20, 30, 40, 50, 60, 70, 80, 90);\n }\n \n fn child(int i1,\n@@ -27,6 +24,15 @@ fn child(int i1,\n   log_err i7;\n   log_err i8;\n   log_err i9;\n+  assert(i1 == 10);\n+  assert(i2 == 20);\n+  assert(i3 == 30);\n+  assert(i4 == 40);\n+  assert(i5 == 50);\n+  assert(i6 == 60);\n+  assert(i7 == 70);\n+  assert(i8 == 80);\n+  assert(i9 == 90);\n }\n \n // Local Variables:"}]}