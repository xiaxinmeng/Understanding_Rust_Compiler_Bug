{"sha": "444fdf150f6a00a35bc3ebc27fc9e98841e0174d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NGZkZjE1MGY2YTAwYTM1YmMzZWJjMjdmYzllOTg4NDFlMDE3NGQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-13T13:55:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-13T13:55:09Z"}, "message": "Rustup to rustc 1.34.0-nightly (b244f61b7 2019-02-12)", "tree": {"sha": "33e519849d2e5b149dc6a13ecbdb2c8cda2c622f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33e519849d2e5b149dc6a13ecbdb2c8cda2c622f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/444fdf150f6a00a35bc3ebc27fc9e98841e0174d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/444fdf150f6a00a35bc3ebc27fc9e98841e0174d", "html_url": "https://github.com/rust-lang/rust/commit/444fdf150f6a00a35bc3ebc27fc9e98841e0174d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/444fdf150f6a00a35bc3ebc27fc9e98841e0174d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05c4572572fb9eee1d0c54a7a0ed604ac39ed7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05c4572572fb9eee1d0c54a7a0ed604ac39ed7b", "html_url": "https://github.com/rust-lang/rust/commit/b05c4572572fb9eee1d0c54a7a0ed604ac39ed7b"}], "stats": {"total": 314, "additions": 199, "deletions": 115}, "files": [{"sha": "ab41edd6ed52b80fa618ded1c77917792c575020", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/444fdf150f6a00a35bc3ebc27fc9e98841e0174d/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/444fdf150f6a00a35bc3ebc27fc9e98841e0174d/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=444fdf150f6a00a35bc3ebc27fc9e98841e0174d", "patch": "@@ -1,6 +1,6 @@\n-From d723688cb9f94c7c90617eb96b1d64fd968a02c3 Mon Sep 17 00:00:00 2001\n+From 1119ae3f160d7e89064583f1d9d6685bc2e6928b Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 2 Feb 2019 11:30:28 +0100\n+Date: Wed, 13 Feb 2019 14:37:22 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n@@ -44,7 +44,7 @@ index ed90b7d..1739f91 100644\n          bool char\n      }\n diff --git a/src/libcore/cmp.rs b/src/libcore/cmp.rs\n-index d43a5c1..268e5f1 100644\n+index 81fcdee..749134c 100644\n --- a/src/libcore/cmp.rs\n +++ b/src/libcore/cmp.rs\n @@ -876,7 +876,7 @@ mod impls {\n@@ -75,7 +75,7 @@ index d43a5c1..268e5f1 100644\n      #[unstable(feature = \"never_type\", issue = \"35121\")]\n      impl PartialEq for ! {\n diff --git a/src/libcore/default.rs b/src/libcore/default.rs\n-index 0e47c2f..570b949 100644\n+index 5ad05b3..1b5a1d1 100644\n --- a/src/libcore/default.rs\n +++ b/src/libcore/default.rs\n @@ -135,14 +135,12 @@ default_impl! { u8, 0, \"Returns the default value of `0`\" }\n@@ -193,7 +193,7 @@ index d5d29c9..f98f382 100644\n  \n      #[stable(feature = \"rust1\", since = \"1.0.0\")]\n diff --git a/src/libcore/iter/range.rs b/src/libcore/iter/range.rs\n-index 66c09a0..1b8c5c9 100644\n+index a3e9cfa..31b6ca4 100644\n --- a/src/libcore/iter/range.rs\n +++ b/src/libcore/iter/range.rs\n @@ -173,7 +173,6 @@ step_impl_signed!([i64: u64]);\n@@ -218,10 +218,10 @@ index dfe1d2a..06cc578 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 97b07aa..9e1e9a6 100644\n+index 9b37104..787b10b 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -149,14 +149,12 @@ mod uint_macros;\n+@@ -147,14 +147,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -252,10 +252,10 @@ index 457d556..91425fb 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 8b6d9d8..8023dc1 100644\n+index 2a493e8..a7dba54 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n-@@ -163,12 +163,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n+@@ -164,12 +164,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n  /// u16 | 2\n  /// u32 | 4\n  /// u64 | 8\n@@ -269,7 +269,7 @@ index 8b6d9d8..8023dc1 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index f80f839..eed1241 100644\n+index 6fb67ea..6440490 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n @@ -102,13 +102,11 @@ nonzero_integers! {\n@@ -286,7 +286,7 @@ index f80f839..eed1241 100644\n      #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n  }\n  \n-@@ -2084,18 +2082,6 @@ impl i64 {\n+@@ -2124,18 +2122,6 @@ impl i64 {\n           \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -305,7 +305,7 @@ index f80f839..eed1241 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4336,17 +4322,6 @@ impl u64 {\n+@@ -4411,17 +4397,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -323,7 +323,7 @@ index f80f839..eed1241 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4430,7 +4405,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4505,7 +4480,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -332,7 +332,7 @@ index f80f839..eed1241 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4546,30 +4521,25 @@ macro_rules! rev {\n+@@ -4621,30 +4596,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -367,7 +367,7 @@ index f80f839..eed1241 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4581,21 +4551,21 @@ mod ptr_try_from_impls {\n+@@ -4656,21 +4626,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -397,7 +397,7 @@ index f80f839..eed1241 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4604,24 +4574,24 @@ mod ptr_try_from_impls {\n+@@ -4679,24 +4649,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -430,7 +430,7 @@ index f80f839..eed1241 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4630,24 +4600,20 @@ mod ptr_try_from_impls {\n+@@ -4705,24 +4675,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -459,7 +459,7 @@ index f80f839..eed1241 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -4682,7 +4648,7 @@ macro_rules! doit {\n+@@ -4757,7 +4723,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -468,7 +468,7 @@ index f80f839..eed1241 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4873,52 +4839,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4948,52 +4914,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -597,7 +597,7 @@ index 50e189c..2da3b35 100644\n      pub use self::platform::usize;\n  }\n diff --git a/src/libcore/ops/arith.rs b/src/libcore/ops/arith.rs\n-index 7d8bf18..91fd879 100644\n+index 0252ede..cb8ab3d 100644\n --- a/src/libcore/ops/arith.rs\n +++ b/src/libcore/ops/arith.rs\n @@ -104,7 +104,7 @@ macro_rules! add_impl {\n@@ -886,10 +886,10 @@ index 8c5dde7..8122120 100644\n  macro_rules! ptr_width {\n      () => { 2 }\n diff --git a/src/libcore/tests/iter.rs b/src/libcore/tests/iter.rs\n-index 0fa9974..75b44b1 100644\n+index 51a6017..e6631db 100644\n --- a/src/libcore/tests/iter.rs\n +++ b/src/libcore/tests/iter.rs\n-@@ -215,8 +215,6 @@ fn test_iterator_step_by_nth_overflow() {\n+@@ -217,8 +217,6 @@ fn test_iterator_step_by_nth_overflow() {\n      type Bigger = u32;\n      #[cfg(target_pointer_width = \"32\")]\n      type Bigger = u64;\n@@ -898,7 +898,7 @@ index 0fa9974..75b44b1 100644\n  \n      #[derive(Clone)]\n      struct Test(Bigger);\n-@@ -1969,19 +1967,6 @@ fn test_step_replace_signed() {\n+@@ -1977,19 +1975,6 @@ fn test_step_replace_signed() {\n  }\n  \n  #[test]\n@@ -919,10 +919,10 @@ index 0fa9974..75b44b1 100644\n      let f = &|acc, x| i32::checked_add(2*acc, x);\n      assert_eq!((1..10).rev().try_fold(7, f), (1..10).try_rfold(7, f));\n diff --git a/src/libcore/tests/num/mod.rs b/src/libcore/tests/num/mod.rs\n-index a17c094..3c36d10 100644\n+index ab638e0..4a2aa4c 100644\n --- a/src/libcore/tests/num/mod.rs\n +++ b/src/libcore/tests/num/mod.rs\n-@@ -178,12 +178,10 @@ test_impl_from! { test_boolu8, bool, u8 }\n+@@ -180,12 +180,10 @@ test_impl_from! { test_boolu8, bool, u8 }\n  test_impl_from! { test_boolu16, bool, u16 }\n  test_impl_from! { test_boolu32, bool, u32 }\n  test_impl_from! { test_boolu64, bool, u64 }\n@@ -935,7 +935,7 @@ index a17c094..3c36d10 100644\n  \n  // Signed -> Float\n  test_impl_from! { test_i8f32, i8, f32 }\n-@@ -265,51 +263,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n+@@ -267,51 +265,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n  test_impl_try_from_always_ok! { test_try_u8u16, u8, u16 }\n  test_impl_try_from_always_ok! { test_try_u8u32, u8, u32 }\n  test_impl_try_from_always_ok! { test_try_u8u64, u8, u64 }\n@@ -988,7 +988,7 @@ index a17c094..3c36d10 100644\n  test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n  test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index a751965..5d162cb 100644\n+index ac7e117..0dfd856 100644\n --- a/src/libcore/time.rs\n +++ b/src/libcore/time.rs\n @@ -21,7 +21,6 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n@@ -1091,7 +1091,7 @@ index a751965..5d162cb 100644\n -        }\n -    }\n -\n--    /// Multiply `Duration` by `f64`.\n+-    /// Multiplies `Duration` by `f64`.\n -    ///\n -    /// # Panics\n -    /// This method will panic if result is not finite, negative or overflows `Duration`.\n@@ -1136,10 +1136,10 @@ index a751965..5d162cb 100644\n      ///\n      /// # Examples\n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index f269fda..07c3680 100644\n+index 3c358dc..2dd5699 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -397,8 +397,6 @@ pub use core::i16;\n+@@ -395,8 +395,6 @@ pub use core::i16;\n  pub use core::i32;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::i64;\n@@ -1148,7 +1148,7 @@ index f269fda..07c3680 100644\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::usize;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -431,8 +429,6 @@ pub use alloc_crate::string;\n+@@ -429,8 +427,6 @@ pub use alloc_crate::string;\n  pub use alloc_crate::vec;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::char;\n@@ -1158,10 +1158,10 @@ index f269fda..07c3680 100644\n  pub use core::hint;\n  \n diff --git a/src/libstd/net/ip.rs b/src/libstd/net/ip.rs\n-index f45cd8b..cf5ba85 100644\n+index d19cc48..aeae69a 100644\n --- a/src/libstd/net/ip.rs\n +++ b/src/libstd/net/ip.rs\n-@@ -1381,26 +1381,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n+@@ -1380,26 +1380,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n      }\n  }\n  "}, {"sha": "9d6221b426ba26c17fe198391064fab57bd7ac09", "filename": "patches/0009-Workaround-missing-saturating_-add-sub-intrinsic-imp.patch", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/444fdf150f6a00a35bc3ebc27fc9e98841e0174d/patches%2F0009-Workaround-missing-saturating_-add-sub-intrinsic-imp.patch", "raw_url": "https://github.com/rust-lang/rust/raw/444fdf150f6a00a35bc3ebc27fc9e98841e0174d/patches%2F0009-Workaround-missing-saturating_-add-sub-intrinsic-imp.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0009-Workaround-missing-saturating_-add-sub-intrinsic-imp.patch?ref=444fdf150f6a00a35bc3ebc27fc9e98841e0174d", "patch": "@@ -0,0 +1,166 @@\n+From a84d00b816c1b771f3990ad5f7ba78981ab9c151 Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Wed, 13 Feb 2019 14:54:20 +0100\n+Subject: [PATCH] Workaround missing saturating_{add,sub} intrinsic impl\n+\n+---\n+ src/libcore/num/mod.rs | 94 --------------------------------------------------\n+ 1 file changed, 94 deletions(-)\n+\n+diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n+index 4871b2e..5d5cd61 100644\n+--- a/src/libcore/num/mod.rs\n++++ b/src/libcore/num/mod.rs\n+@@ -880,7 +880,6 @@ $EndFeature, \"\n+ ```\"),\n+             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+             #[inline]\n+-            #[cfg(stage0)]\n+             pub fn saturating_add(self, rhs: Self) -> Self {\n+                 match self.checked_add(rhs) {\n+                     Some(x) => x,\n+@@ -892,30 +891,6 @@ $EndFeature, \"\n+         }\n+ \n+         doc_comment! {\n+-            concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at the numeric\n+-bounds instead of overflowing.\n+-\n+-# Examples\n+-\n+-Basic usage:\n+-\n+-```\n+-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n+-assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_add(100), \", stringify!($SelfT),\n+-\"::max_value());\",\n+-$EndFeature, \"\n+-```\"),\n+-\n+-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+-            #[inline]\n+-            #[cfg(not(stage0))]\n+-            pub const fn saturating_add(self, rhs: Self) -> Self {\n+-                intrinsics::saturating_add(self, rhs)\n+-            }\n+-        }\n+-\n+-        doc_comment! {\n+             concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating at the\n+ numeric bounds instead of overflowing.\n+ \n+@@ -931,7 +906,6 @@ $EndFeature, \"\n+ ```\"),\n+             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+             #[inline]\n+-            #[cfg(stage0)]\n+             pub fn saturating_sub(self, rhs: Self) -> Self {\n+                 match self.checked_sub(rhs) {\n+                     Some(x) => x,\n+@@ -942,29 +916,6 @@ $EndFeature, \"\n+         }\n+ \n+         doc_comment! {\n+-            concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating at the\n+-numeric bounds instead of overflowing.\n+-\n+-# Examples\n+-\n+-Basic usage:\n+-\n+-```\n+-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(127), -27);\n+-assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_sub(100), \", stringify!($SelfT),\n+-\"::min_value());\",\n+-$EndFeature, \"\n+-```\"),\n+-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+-            #[inline]\n+-            #[cfg(not(stage0))]\n+-            pub const fn saturating_sub(self, rhs: Self) -> Self {\n+-                intrinsics::saturating_sub(self, rhs)\n+-            }\n+-        }\n+-\n+-        doc_comment! {\n+             concat!(\"Saturating integer multiplication. Computes `self * rhs`, saturating at the\n+ numeric bounds instead of overflowing.\n+ \n+@@ -2779,7 +2730,6 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n+ ```\"),\n+             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+             #[inline]\n+-            #[cfg(stage0)]\n+             pub fn saturating_add(self, rhs: Self) -> Self {\n+                 match self.checked_add(rhs) {\n+                     Some(x) => x,\n+@@ -2789,28 +2739,6 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n+         }\n+ \n+         doc_comment! {\n+-            concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at\n+-the numeric bounds instead of overflowing.\n+-\n+-# Examples\n+-\n+-Basic usage:\n+-\n+-```\n+-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n+-assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n+-```\"),\n+-\n+-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+-            #[inline]\n+-            #[cfg(not(stage0))]\n+-            pub const fn saturating_add(self, rhs: Self) -> Self {\n+-                intrinsics::saturating_add(self, rhs)\n+-            }\n+-        }\n+-\n+-        doc_comment! {\n+             concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating\n+ at the numeric bounds instead of overflowing.\n+ \n+@@ -2824,7 +2752,6 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n+ ```\"),\n+             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+             #[inline]\n+-            #[cfg(stage0)]\n+             pub fn saturating_sub(self, rhs: Self) -> Self {\n+                 match self.checked_sub(rhs) {\n+                     Some(x) => x,\n+@@ -2834,27 +2761,6 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n+         }\n+ \n+         doc_comment! {\n+-            concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating\n+-at the numeric bounds instead of overflowing.\n+-\n+-# Examples\n+-\n+-Basic usage:\n+-\n+-```\n+-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(27), 73);\n+-assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n+-```\"),\n+-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+-            #[inline]\n+-            #[cfg(not(stage0))]\n+-            pub const fn saturating_sub(self, rhs: Self) -> Self {\n+-                intrinsics::saturating_sub(self, rhs)\n+-            }\n+-        }\n+-\n+-        doc_comment! {\n+             concat!(\"Saturating integer multiplication. Computes `self * rhs`,\n+ saturating at the numeric bounds instead of overflowing.\n+ \n+-- \n+2.11.0\n+"}, {"sha": "36b8f071aea6967b60cf6ea9b18ab54260ab572a", "filename": "patches/0009-Workaround-missing-saturating_sub-intrinsic-impl.patch", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b05c4572572fb9eee1d0c54a7a0ed604ac39ed7b/patches%2F0009-Workaround-missing-saturating_sub-intrinsic-impl.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b05c4572572fb9eee1d0c54a7a0ed604ac39ed7b/patches%2F0009-Workaround-missing-saturating_sub-intrinsic-impl.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0009-Workaround-missing-saturating_sub-intrinsic-impl.patch?ref=b05c4572572fb9eee1d0c54a7a0ed604ac39ed7b", "patch": "@@ -1,82 +0,0 @@\n-From 725a1e7b487e32b5f2e90049c8b37fed1a957003 Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 2 Feb 2019 11:39:22 +0100\n-Subject: [PATCH] Workaround missing saturating_sub intrinsic impl\n-\n----\n- src/libcore/num/mod.rs | 20 --------------------\n- 1 file changed, 20 deletions(-)\n-\n-diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index eed1241..f928d40 100644\n---- a/src/libcore/num/mod.rs\n-+++ b/src/libcore/num/mod.rs\n-@@ -881,16 +881,11 @@ $EndFeature, \"\n-             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-             #[inline]\n-             pub fn saturating_add(self, rhs: Self) -> Self {\n--                #[cfg(stage0)]\n-                 match self.checked_add(rhs) {\n-                     Some(x) => x,\n-                     None if rhs >= 0 => Self::max_value(),\n-                     None => Self::min_value(),\n-                 }\n--                #[cfg(not(stage0))]\n--                {\n--                    intrinsics::saturating_add(self, rhs)\n--                }\n-             }\n-         }\n- \n-@@ -911,16 +906,11 @@ $EndFeature, \"\n-             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-             #[inline]\n-             pub fn saturating_sub(self, rhs: Self) -> Self {\n--                #[cfg(stage0)]\n-                 match self.checked_sub(rhs) {\n-                     Some(x) => x,\n-                     None if rhs >= 0 => Self::min_value(),\n-                     None => Self::max_value(),\n-                 }\n--                #[cfg(not(stage0))]\n--                {\n--                    intrinsics::saturating_sub(self, rhs)\n--                }\n-             }\n-         }\n- \n-@@ -2740,15 +2730,10 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n-             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-             #[inline]\n-             pub fn saturating_add(self, rhs: Self) -> Self {\n--                #[cfg(stage0)]\n-                 match self.checked_add(rhs) {\n-                     Some(x) => x,\n-                     None => Self::max_value(),\n-                 }\n--                #[cfg(not(stage0))]\n--                {\n--                    intrinsics::saturating_add(self, rhs)\n--                }\n-             }\n-         }\n- \n-@@ -2767,15 +2752,10 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n-             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-             #[inline]\n-             pub fn saturating_sub(self, rhs: Self) -> Self {\n--                #[cfg(stage0)]\n-                 match self.checked_sub(rhs) {\n-                     Some(x) => x,\n-                     None => Self::min_value(),\n-                 }\n--                #[cfg(not(stage0))]\n--                {\n--                    intrinsics::saturating_sub(self, rhs)\n--                }\n-             }\n-         }\n- \n--- \n-2.11.0\n-"}]}