{"sha": "d5bfb762163017a909bb48efe3482a9361fbc7d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YmZiNzYyMTYzMDE3YTkwOWJiNDhlZmUzNDgyYTkzNjFmYmM3ZDk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T14:00:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T14:01:26Z"}, "message": "Implement some atomic intrinsics in a non atomic version", "tree": {"sha": "5a7b4d02606e6ddfbc060e40168707cb3ac8a0e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a7b4d02606e6ddfbc060e40168707cb3ac8a0e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5bfb762163017a909bb48efe3482a9361fbc7d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5bfb762163017a909bb48efe3482a9361fbc7d9", "html_url": "https://github.com/rust-lang/rust/commit/d5bfb762163017a909bb48efe3482a9361fbc7d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5bfb762163017a909bb48efe3482a9361fbc7d9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "470a310f2e2a9c080a4813554c201a509425c4fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/470a310f2e2a9c080a4813554c201a509425c4fe", "html_url": "https://github.com/rust-lang/rust/commit/470a310f2e2a9c080a4813554c201a509425c4fe"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "1960e390d1a7a038d0b4088f8ab0d77accd106ee", "filename": "src/abi.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d5bfb762163017a909bb48efe3482a9361fbc7d9/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bfb762163017a909bb48efe3482a9361fbc7d9/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=d5bfb762163017a909bb48efe3482a9361fbc7d9", "patch": "@@ -857,6 +857,38 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     let needs_drop = CValue::const_val(fx, fx.tcx.types.bool, needs_drop);\n                     ret.write_cvalue(fx, needs_drop);\n                 }\n+                _ if intrinsic.starts_with(\"atomic_fence\") => {}\n+                _ if intrinsic.starts_with(\"atomic_load\") => {\n+                    assert_eq!(args.len(), 1);\n+                    let inner_layout = fx.layout_of(args[0].layout().ty.builtin_deref(true).unwrap().ty);\n+                    let val = CValue::ByRef(args[0].load_value(fx), inner_layout);\n+                    ret.write_cvalue(fx, val);\n+                }\n+                _ if intrinsic.starts_with(\"atomic_store\") => {\n+                    assert_eq!(args.len(), 2);\n+                    let dest = CPlace::Addr(args[0].load_value(fx), None, args[1].layout());\n+                    dest.write_cvalue(fx, args[1]);\n+                }\n+                _ if intrinsic.starts_with(\"atomic_xadd\") => {\n+                    assert_eq!(args.len(), 2);\n+                    let clif_ty = fx.cton_type(substs.type_at(0)).unwrap();\n+                    let ptr = args[0].load_value(fx);\n+                    let amount = args[1].load_value(fx);\n+                    let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n+                    let new = fx.bcx.ins().iadd(old, amount);\n+                    fx.bcx.ins().store(MemFlags::new(), ptr, new, 0);\n+                    ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n+                }\n+                _ if intrinsic.starts_with(\"atomic_xsub\") => {\n+                    assert_eq!(args.len(), 2);\n+                    let clif_ty = fx.cton_type(substs.type_at(0)).unwrap();\n+                    let ptr = args[0].load_value(fx);\n+                    let amount = args[1].load_value(fx);\n+                    let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n+                    let new = fx.bcx.ins().isub(old, amount);\n+                    fx.bcx.ins().store(MemFlags::new(), ptr, new, 0);\n+                    ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n+                }\n                 _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),\n             }\n "}]}