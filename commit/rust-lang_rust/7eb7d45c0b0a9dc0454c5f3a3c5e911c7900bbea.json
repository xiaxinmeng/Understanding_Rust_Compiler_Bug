{"sha": "7eb7d45c0b0a9dc0454c5f3a3c5e911c7900bbea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYjdkNDVjMGIwYTlkYzA0NTRjNWYzYTNjNWU5MTFjNzkwMGJiZWE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-01-23T21:53:01Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-01-23T21:53:01Z"}, "message": "Let LLVM 5 add DW_OP_deref to indirect args itself\n\nWe needed to manually added the `DW_OP_deref` ourselves in earlier LLVM,\nbut starting with [D31439] in LLVM 5, it appears that LLVM will always\nhandle this itself.  When we were still adding this manually, the\nresulting `.debug_loc` had too many derefs, and this failed test\n`debuginfo/by-value-self-argument-in-trait-impl.rs`.\n\n[D31439]: https://reviews.llvm.org/D31439\n\nFixes #47611.\ncc @alexcrichton\nr? @michaelwoerister", "tree": {"sha": "cc9a7939a8ce7f439c9b37087961158891378185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc9a7939a8ce7f439c9b37087961158891378185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb7d45c0b0a9dc0454c5f3a3c5e911c7900bbea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb7d45c0b0a9dc0454c5f3a3c5e911c7900bbea", "html_url": "https://github.com/rust-lang/rust/commit/7eb7d45c0b0a9dc0454c5f3a3c5e911c7900bbea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb7d45c0b0a9dc0454c5f3a3c5e911c7900bbea/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3901d35f6a8652f67111e7272263c9e62ab3e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3901d35f6a8652f67111e7272263c9e62ab3e1", "html_url": "https://github.com/rust-lang/rust/commit/4e3901d35f6a8652f67111e7272263c9e62ab3e1"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "da01592d9118a9e1e9cd3f804adad15e5732adc2", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7eb7d45c0b0a9dc0454c5f3a3c5e911c7900bbea/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb7d45c0b0a9dc0454c5f3a3c5e911c7900bbea/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=7eb7d45c0b0a9dc0454c5f3a3c5e911c7900bbea", "patch": "@@ -487,16 +487,18 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                 // The Rust ABI passes indirect variables using a pointer and a manual copy, so we\n                 // need to insert a deref here, but the C ABI uses a pointer and a copy using the\n                 // byval attribute, for which LLVM does the deref itself, so we must not add it.\n+                // Starting with D31439 in LLVM 5, it *always* does the deref itself.\n                 let mut variable_access = VariableAccess::DirectVariable {\n                     alloca: place.llval\n                 };\n-\n-                if let PassMode::Indirect(ref attrs) = arg.mode {\n-                    if !attrs.contains(ArgAttribute::ByVal) {\n-                        variable_access = VariableAccess::IndirectVariable {\n-                            alloca: place.llval,\n-                            address_operations: &deref_op,\n-                        };\n+                if unsafe { llvm::LLVMRustVersionMajor() < 5 } {\n+                    if let PassMode::Indirect(ref attrs) = arg.mode {\n+                        if !attrs.contains(ArgAttribute::ByVal) {\n+                            variable_access = VariableAccess::IndirectVariable {\n+                                alloca: place.llval,\n+                                address_operations: &deref_op,\n+                            };\n+                        }\n                     }\n                 }\n "}]}