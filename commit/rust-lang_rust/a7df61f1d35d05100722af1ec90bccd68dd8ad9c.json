{"sha": "a7df61f1d35d05100722af1ec90bccd68dd8ad9c", "node_id": "C_kwDOAAsO6NoAKGE3ZGY2MWYxZDM1ZDA1MTAwNzIyYWYxZWM5MGJjY2Q2OGRkOGFkOWM", "commit": {"author": {"name": "Duong Quoc Khanh", "email": "dqkqdlot@gmail.com", "date": "2023-02-07T14:55:44Z"}, "committer": {"name": "Duong Quoc Khanh", "email": "dqkqdlot@gmail.com", "date": "2023-02-07T14:55:44Z"}, "message": "Add postfix completion for `unsafe`.\n\nWrap receiver_text with { } if it's not a BlockExpr.", "tree": {"sha": "35302d8bb9aa88ccf22d89ef8510310d2e304757", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35302d8bb9aa88ccf22d89ef8510310d2e304757"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7df61f1d35d05100722af1ec90bccd68dd8ad9c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEwZYQ1XvHmidXWoT/2lKnToBKAOcFAmPiZpcACgkQ2lKnToBK\nAOcPLg//byh77b3MSMiYyZvxyTkDnJBl39ZAU5sFkGWzr0fwY0Z9SX6qvFTLMxyJ\nYoPw/rJOIBpv5H1Ck3M2AuKJaYDqEZlsTxlDVbINXtkgQQjQneKFS9+Y/vE1+q4u\nJ4FhuzYHrI6iY2VSqnmJg9VOvmtPf3NRPaCBui4Ix/EAbdJHNSBrMblrjfdK++dW\n6mm9uPsagc5pBRld2el90KYR4LjHUHZ3kUQaflRhGV+pMj1sAvqUo+HZN/tEWlpR\ngxQU91eJvQvqzzGgYdbrQP05HGZyST45NfnyoZzr9o/DAxVpX9fWjJ6ETJuM7GxI\nGOxvI/4Z5ccLITdNnUtf4BNwH9Iogn7omNsYk2b/RgwitdLP/vJm1SAD/nt/lln+\nGyF/cLqBBsHF+41G4KgvP31+iXYSdakyw1mkM881/M1g8NF9RgSnPveHiMG9QYSV\nSc1F1H58zqhhVzCI6skcLZb2WnRr0zjc+V75DKdo50AngTl/aAO4mJEb+ltIJIQa\nAzTns+B9typQsbUPZKCQIvqdL5uWc8qLeN5VSFm9ntYFzoxfoxWOPVLJYRhDo7N3\nR7oEF2auJvSUS3Vvu/SDgt6M26H1xfSfPYh7J8kUcpkNeHr83vT1KQeNUFVgvOnG\ntowblpD3vDe+iXMa+p0HWU+sJyQ+YnHK+sv02pXg/pUObTkh5V4=\n=BsW3\n-----END PGP SIGNATURE-----", "payload": "tree 35302d8bb9aa88ccf22d89ef8510310d2e304757\nparent 1d32a7b7c66450c792dafe162b229d40ab6a1cc8\nauthor Duong Quoc Khanh <dqkqdlot@gmail.com> 1675781744 +0900\ncommitter Duong Quoc Khanh <dqkqdlot@gmail.com> 1675781744 +0900\n\nAdd postfix completion for `unsafe`.\n\nWrap receiver_text with { } if it's not a BlockExpr.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7df61f1d35d05100722af1ec90bccd68dd8ad9c", "html_url": "https://github.com/rust-lang/rust/commit/a7df61f1d35d05100722af1ec90bccd68dd8ad9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7df61f1d35d05100722af1ec90bccd68dd8ad9c/comments", "author": {"login": "dqkqd", "id": 24296517, "node_id": "MDQ6VXNlcjI0Mjk2NTE3", "avatar_url": "https://avatars.githubusercontent.com/u/24296517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dqkqd", "html_url": "https://github.com/dqkqd", "followers_url": "https://api.github.com/users/dqkqd/followers", "following_url": "https://api.github.com/users/dqkqd/following{/other_user}", "gists_url": "https://api.github.com/users/dqkqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dqkqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dqkqd/subscriptions", "organizations_url": "https://api.github.com/users/dqkqd/orgs", "repos_url": "https://api.github.com/users/dqkqd/repos", "events_url": "https://api.github.com/users/dqkqd/events{/privacy}", "received_events_url": "https://api.github.com/users/dqkqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dqkqd", "id": 24296517, "node_id": "MDQ6VXNlcjI0Mjk2NTE3", "avatar_url": "https://avatars.githubusercontent.com/u/24296517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dqkqd", "html_url": "https://github.com/dqkqd", "followers_url": "https://api.github.com/users/dqkqd/followers", "following_url": "https://api.github.com/users/dqkqd/following{/other_user}", "gists_url": "https://api.github.com/users/dqkqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dqkqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dqkqd/subscriptions", "organizations_url": "https://api.github.com/users/dqkqd/orgs", "repos_url": "https://api.github.com/users/dqkqd/repos", "events_url": "https://api.github.com/users/dqkqd/events{/privacy}", "received_events_url": "https://api.github.com/users/dqkqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d32a7b7c66450c792dafe162b229d40ab6a1cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d32a7b7c66450c792dafe162b229d40ab6a1cc8", "html_url": "https://github.com/rust-lang/rust/commit/1d32a7b7c66450c792dafe162b229d40ab6a1cc8"}], "stats": {"total": 201, "additions": 118, "deletions": 83}, "files": [{"sha": "b9ab2afca2b59da81b8b0589eb5b2599f2029e1b", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7df61f1d35d05100722af1ec90bccd68dd8ad9c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7df61f1d35d05100722af1ec90bccd68dd8ad9c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=a7df61f1d35d05100722af1ec90bccd68dd8ad9c", "patch": "@@ -86,6 +86,7 @@ fn foo(a: A) { a.$0 }\n                 sn match                  match expr {}\n                 sn ref                    &expr\n                 sn refm                   &mut expr\n+                sn unsafe                 unsafe {}\n             \"#]],\n         );\n \n@@ -110,6 +111,7 @@ fn foo() {\n                 sn match                  match expr {}\n                 sn ref                    &expr\n                 sn refm                   &mut expr\n+                sn unsafe                 unsafe {}\n             \"#]],\n         );\n     }\n@@ -136,6 +138,7 @@ fn foo(a: A) { a.$0 }\n                 sn match                  match expr {}\n                 sn ref                    &expr\n                 sn refm                   &mut expr\n+                sn unsafe                 unsafe {}\n             \"#]],\n         );\n     }"}, {"sha": "19df8e2b20679835e1df4f065b6ed8d786ccff44", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 69, "deletions": 43, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/a7df61f1d35d05100722af1ec90bccd68dd8ad9c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7df61f1d35d05100722af1ec90bccd68dd8ad9c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=a7df61f1d35d05100722af1ec90bccd68dd8ad9c", "patch": "@@ -123,6 +123,12 @@ pub(crate) fn complete_postfix(\n     postfix_snippet(\"ref\", \"&expr\", &format!(\"&{receiver_text}\")).add_to(acc);\n     postfix_snippet(\"refm\", \"&mut expr\", &format!(\"&mut {receiver_text}\")).add_to(acc);\n \n+    let unsafe_completion_string = match dot_receiver {\n+        ast::Expr::BlockExpr(_) => format!(\"unsafe {receiver_text}\"),\n+        _ => format!(\"unsafe {{ {receiver_text} }}\"),\n+    };\n+    postfix_snippet(\"unsafe\", \"unsafe {}\", &unsafe_completion_string).add_to(acc);\n+\n     // The rest of the postfix completions create an expression that moves an argument,\n     // so it's better to consider references now to avoid breaking the compilation\n \n@@ -329,18 +335,19 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn if    if expr {}\n-                sn let   let\n-                sn letm  let mut\n-                sn match match expr {}\n-                sn not   !expr\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn while while expr {}\n+                sn box    Box::new(expr)\n+                sn call   function(expr)\n+                sn dbg    dbg!(expr)\n+                sn dbgr   dbg!(&expr)\n+                sn if     if expr {}\n+                sn let    let\n+                sn letm   let mut\n+                sn match  match expr {}\n+                sn not    !expr\n+                sn ref    &expr\n+                sn refm   &mut expr\n+                sn unsafe unsafe {}\n+                sn while  while expr {}\n             \"#]],\n         );\n     }\n@@ -359,16 +366,17 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn if    if expr {}\n-                sn match match expr {}\n-                sn not   !expr\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn while while expr {}\n+                sn box    Box::new(expr)\n+                sn call   function(expr)\n+                sn dbg    dbg!(expr)\n+                sn dbgr   dbg!(&expr)\n+                sn if     if expr {}\n+                sn match  match expr {}\n+                sn not    !expr\n+                sn ref    &expr\n+                sn refm   &mut expr\n+                sn unsafe unsafe {}\n+                sn while  while expr {}\n             \"#]],\n         );\n     }\n@@ -383,15 +391,16 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn let   let\n-                sn letm  let mut\n-                sn match match expr {}\n-                sn ref   &expr\n-                sn refm  &mut expr\n+                sn box    Box::new(expr)\n+                sn call   function(expr)\n+                sn dbg    dbg!(expr)\n+                sn dbgr   dbg!(&expr)\n+                sn let    let\n+                sn letm   let mut\n+                sn match  match expr {}\n+                sn ref    &expr\n+                sn refm   &mut expr\n+                sn unsafe unsafe {}\n             \"#]],\n         )\n     }\n@@ -406,18 +415,19 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn if    if expr {}\n-                sn let   let\n-                sn letm  let mut\n-                sn match match expr {}\n-                sn not   !expr\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn while while expr {}\n+                sn box    Box::new(expr)\n+                sn call   function(expr)\n+                sn dbg    dbg!(expr)\n+                sn dbgr   dbg!(&expr)\n+                sn if     if expr {}\n+                sn let    let\n+                sn letm   let mut\n+                sn match  match expr {}\n+                sn not    !expr\n+                sn ref    &expr\n+                sn refm   &mut expr\n+                sn unsafe unsafe {}\n+                sn while  while expr {}\n             \"#]],\n         );\n     }\n@@ -517,6 +527,22 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn postfix_completion_for_unsafe() {\n+        check_edit(\"unsafe\", r#\"fn main() { foo.$0 }\"#, r#\"fn main() { unsafe { foo } }\"#);\n+        check_edit(\"unsafe\", r#\"fn main() { { foo }.$0 }\"#, r#\"fn main() { unsafe { foo } }\"#);\n+        check_edit(\n+            \"unsafe\",\n+            r#\"fn main() { if x { foo }.$0 }\"#,\n+            r#\"fn main() { unsafe { if x { foo } } }\"#,\n+        );\n+        check_edit(\n+            \"unsafe\",\n+            r#\"fn main() { loop { foo }.$0 }\"#,\n+            r#\"fn main() { unsafe { loop { foo } } }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn custom_postfix_completion() {\n         let config = CompletionConfig {"}, {"sha": "d6476c10258ecde9a428c954307541d7416f4545", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7df61f1d35d05100722af1ec90bccd68dd8ad9c/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7df61f1d35d05100722af1ec90bccd68dd8ad9c/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=a7df61f1d35d05100722af1ec90bccd68dd8ad9c", "patch": "@@ -1691,6 +1691,7 @@ fn main() {\n                 sn while []\n                 sn ref []\n                 sn refm []\n+                sn unsafe []\n                 sn match []\n                 sn box []\n                 sn dbg []\n@@ -1718,6 +1719,7 @@ fn main() {\n                 me f() []\n                 sn ref []\n                 sn refm []\n+                sn unsafe []\n                 sn match []\n                 sn box []\n                 sn dbg []"}, {"sha": "92ea4d15b85128ff8300aa9f80c012071bfbaf43", "filename": "crates/ide-completion/src/tests/proc_macros.rs", "status": "modified", "additions": 44, "deletions": 40, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a7df61f1d35d05100722af1ec90bccd68dd8ad9c/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7df61f1d35d05100722af1ec90bccd68dd8ad9c/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs?ref=a7df61f1d35d05100722af1ec90bccd68dd8ad9c", "patch": "@@ -24,16 +24,17 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-            me foo() fn(&self)\n-            sn box   Box::new(expr)\n-            sn call  function(expr)\n-            sn dbg   dbg!(expr)\n-            sn dbgr  dbg!(&expr)\n-            sn let   let\n-            sn letm  let mut\n-            sn match match expr {}\n-            sn ref   &expr\n-            sn refm  &mut expr\n+            me foo()  fn(&self)\n+            sn box    Box::new(expr)\n+            sn call   function(expr)\n+            sn dbg    dbg!(expr)\n+            sn dbgr   dbg!(&expr)\n+            sn let    let\n+            sn letm   let mut\n+            sn match  match expr {}\n+            sn ref    &expr\n+            sn refm   &mut expr\n+            sn unsafe unsafe {}\n         \"#]],\n     )\n }\n@@ -54,16 +55,17 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-            me foo() fn(&self)\n-            sn box   Box::new(expr)\n-            sn call  function(expr)\n-            sn dbg   dbg!(expr)\n-            sn dbgr  dbg!(&expr)\n-            sn let   let\n-            sn letm  let mut\n-            sn match match expr {}\n-            sn ref   &expr\n-            sn refm  &mut expr\n+            me foo()  fn(&self)\n+            sn box    Box::new(expr)\n+            sn call   function(expr)\n+            sn dbg    dbg!(expr)\n+            sn dbgr   dbg!(&expr)\n+            sn let    let\n+            sn letm   let mut\n+            sn match  match expr {}\n+            sn ref    &expr\n+            sn refm   &mut expr\n+            sn unsafe unsafe {}\n         \"#]],\n     )\n }\n@@ -86,16 +88,17 @@ impl Foo {\n fn main() {}\n \"#,\n         expect![[r#\"\n-            me foo() fn(&self)\n-            sn box   Box::new(expr)\n-            sn call  function(expr)\n-            sn dbg   dbg!(expr)\n-            sn dbgr  dbg!(&expr)\n-            sn let   let\n-            sn letm  let mut\n-            sn match match expr {}\n-            sn ref   &expr\n-            sn refm  &mut expr\n+            me foo()  fn(&self)\n+            sn box    Box::new(expr)\n+            sn call   function(expr)\n+            sn dbg    dbg!(expr)\n+            sn dbgr   dbg!(&expr)\n+            sn let    let\n+            sn letm   let mut\n+            sn match  match expr {}\n+            sn ref    &expr\n+            sn refm   &mut expr\n+            sn unsafe unsafe {}\n         \"#]],\n     )\n }\n@@ -118,16 +121,17 @@ impl Foo {\n fn main() {}\n \"#,\n         expect![[r#\"\n-            me foo() fn(&self)\n-            sn box   Box::new(expr)\n-            sn call  function(expr)\n-            sn dbg   dbg!(expr)\n-            sn dbgr  dbg!(&expr)\n-            sn let   let\n-            sn letm  let mut\n-            sn match match expr {}\n-            sn ref   &expr\n-            sn refm  &mut expr\n+            me foo()  fn(&self)\n+            sn box    Box::new(expr)\n+            sn call   function(expr)\n+            sn dbg    dbg!(expr)\n+            sn dbgr   dbg!(&expr)\n+            sn let    let\n+            sn letm   let mut\n+            sn match  match expr {}\n+            sn ref    &expr\n+            sn refm   &mut expr\n+            sn unsafe unsafe {}\n         \"#]],\n     )\n }"}]}