{"sha": "329d5014b6a773d819e6cd56d5930a204bed7983", "node_id": "C_kwDOAAsO6NoAKDMyOWQ1MDE0YjZhNzczZDgxOWU2Y2Q1NmQ1OTMwYTIwNGJlZDc5ODM", "commit": {"author": {"name": "Luis Cardoso", "email": "61982523+LuisCardosoOliveira@users.noreply.github.com", "date": "2022-09-01T06:03:47Z"}, "committer": {"name": "Luis Cardoso", "email": "61982523+LuisCardosoOliveira@users.noreply.github.com", "date": "2022-09-10T06:19:17Z"}, "message": "translations(rustc_session): migrate output.rs", "tree": {"sha": "1276ba3a311bd74d995b6ab5f702713328c2580f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1276ba3a311bd74d995b6ab5f702713328c2580f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/329d5014b6a773d819e6cd56d5930a204bed7983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/329d5014b6a773d819e6cd56d5930a204bed7983", "html_url": "https://github.com/rust-lang/rust/commit/329d5014b6a773d819e6cd56d5930a204bed7983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/329d5014b6a773d819e6cd56d5930a204bed7983/comments", "author": {"login": "LuisCardosoOliveira", "id": 61982523, "node_id": "MDQ6VXNlcjYxOTgyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/61982523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisCardosoOliveira", "html_url": "https://github.com/LuisCardosoOliveira", "followers_url": "https://api.github.com/users/LuisCardosoOliveira/followers", "following_url": "https://api.github.com/users/LuisCardosoOliveira/following{/other_user}", "gists_url": "https://api.github.com/users/LuisCardosoOliveira/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisCardosoOliveira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisCardosoOliveira/subscriptions", "organizations_url": "https://api.github.com/users/LuisCardosoOliveira/orgs", "repos_url": "https://api.github.com/users/LuisCardosoOliveira/repos", "events_url": "https://api.github.com/users/LuisCardosoOliveira/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisCardosoOliveira/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LuisCardosoOliveira", "id": 61982523, "node_id": "MDQ6VXNlcjYxOTgyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/61982523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisCardosoOliveira", "html_url": "https://github.com/LuisCardosoOliveira", "followers_url": "https://api.github.com/users/LuisCardosoOliveira/followers", "following_url": "https://api.github.com/users/LuisCardosoOliveira/following{/other_user}", "gists_url": "https://api.github.com/users/LuisCardosoOliveira/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisCardosoOliveira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisCardosoOliveira/subscriptions", "organizations_url": "https://api.github.com/users/LuisCardosoOliveira/orgs", "repos_url": "https://api.github.com/users/LuisCardosoOliveira/repos", "events_url": "https://api.github.com/users/LuisCardosoOliveira/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisCardosoOliveira/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0cfeec2931cfb3bc9f8b11510684fb2fedee731", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0cfeec2931cfb3bc9f8b11510684fb2fedee731", "html_url": "https://github.com/rust-lang/rust/commit/b0cfeec2931cfb3bc9f8b11510684fb2fedee731"}], "stats": {"total": 147, "additions": 119, "deletions": 28}, "files": [{"sha": "76cae3c81e45182d192b23a5cc636402e93f060f", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=329d5014b6a773d819e6cd56d5930a204bed7983", "patch": "@@ -56,3 +56,13 @@ session_target_invalid_bits_size = {$err}\n session_target_stack_protector_not_supported = `-Z stack-protector={$stack_protector}` is not supported for target {$target_triple} and will be ignored\n \n session_split_debuginfo_unstable_platform = `-Csplit-debuginfo={$debuginfo}` is unstable on this platform\n+\n+session_file_is_not_writeable = output file {$file} is not writeable -- check its permissions\n+\n+session_crate_name_does_not_match = `--crate-name` and `#[crate_name]` are required to match, but `{$s}` != `{$name}`\n+\n+session_crate_name_invalid = crate names cannot start with a `-`, but `{$s}` has a leading hyphen\n+\n+session_crate_name_empty = crate name must not be empty\n+\n+session_invalid_character_in_create_name = invalid character `{$character}` in crate name: `{$crate_name}`"}, {"sha": "c36ca11fad6f214ea43a0216f6db5c4fb2d3d847", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=329d5014b6a773d819e6cd56d5930a204bed7983", "patch": "@@ -13,9 +13,9 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_target = { path = \"../rustc_target\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n-rustc_target = { path = \"../rustc_target\" }\n unicode-width = \"0.1.4\"\n atty = \"0.2\"\n termcolor = \"1.0\""}, {"sha": "8bb3878fbbb4752c8d7f4371cab537ba6b39a658", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=329d5014b6a773d819e6cd56d5930a204bed7983", "patch": "@@ -1,7 +1,6 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command-line options.\n \n-use crate::errors::TargetDataLayoutParseError;\n pub use crate::options::*;\n \n use crate::search_paths::SearchPath;\n@@ -899,7 +898,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let max_atomic_width = sess.target.max_atomic_width();\n     let atomic_cas = sess.target.atomic_cas;\n     let layout = TargetDataLayout::parse(&sess.target).unwrap_or_else(|err| {\n-        sess.emit_fatal(TargetDataLayoutParseError { err });\n+        sess.emit_fatal(err);\n     });\n \n     let mut ret = CrateConfig::default();"}, {"sha": "c6596ff24989985294b8a8fd665db56fae011c18", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=329d5014b6a773d819e6cd56d5930a204bed7983", "patch": "@@ -2,7 +2,7 @@ use std::num::NonZeroU32;\n \n use crate::cgu_reuse_tracker::CguReuse;\n use crate::{self as rustc_session, SessionDiagnostic};\n-use rustc_errors::{fluent, DiagnosticBuilder, Handler, MultiSpan};\n+use rustc_errors::{fluent, DiagnosticBuilder, ErrorGuaranteed, Handler, MultiSpan};\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n use rustc_target::abi::TargetDataLayoutErrors;\n@@ -170,3 +170,52 @@ pub struct StackProtectorNotSupportedForTarget<'a> {\n pub struct SplitDebugInfoUnstablePlatform {\n     pub debuginfo: SplitDebuginfo,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::file_is_not_writeable)]\n+pub struct FileIsNotWriteable<'a> {\n+    pub file: &'a std::path::Path,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::crate_name_does_not_match)]\n+pub struct CrateNameDoesNotMatch<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub s: &'a str,\n+    pub name: Symbol,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::crate_name_invalid)]\n+pub struct CrateNameInvalid<'a> {\n+    pub s: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::crate_name_empty)]\n+pub struct CrateNameEmpty {\n+    #[primary_span]\n+    pub span: Option<Span>,\n+}\n+\n+pub struct InvalidCharacterInCrateName<'a> {\n+    pub span: Option<Span>,\n+    pub character: char,\n+    pub crate_name: &'a str,\n+}\n+\n+impl crate::SessionDiagnostic<'_> for InvalidCharacterInCrateName<'_> {\n+    fn into_diagnostic(\n+        self,\n+        sess: &Handler,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(fluent::session::invalid_character_in_create_name);\n+        if let Some(sp) = self.span {\n+            diag.set_span(sp);\n+        }\n+        diag.set_arg(\"character\", self.character);\n+        diag.set_arg(\"crate_name\", self.crate_name);\n+        diag\n+    }\n+}"}, {"sha": "b9b243f6f0840f63e2da85cea10a8327e1ed0f42", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=329d5014b6a773d819e6cd56d5930a204bed7983", "patch": "@@ -9,6 +9,8 @@\n #![feature(map_many_mut)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "2511bee46afebef62d59842f74d192194346a3af", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=329d5014b6a773d819e6cd56d5930a204bed7983", "patch": "@@ -1,5 +1,9 @@\n //! Related to out filenames of compilation (e.g. save analysis, binaries).\n use crate::config::{CrateType, Input, OutputFilenames, OutputType};\n+use crate::errors::{\n+    CrateNameDoesNotMatch, CrateNameEmpty, CrateNameInvalid, FileIsNotWriteable,\n+    InvalidCharacterInCrateName,\n+};\n use crate::Session;\n use rustc_ast as ast;\n use rustc_span::symbol::sym;\n@@ -30,11 +34,7 @@ pub fn out_filename(\n /// read-only file.  We should be consistent.\n pub fn check_file_is_writeable(file: &Path, sess: &Session) {\n     if !is_writeable(file) {\n-        sess.fatal(&format!(\n-            \"output file {} is not writeable -- check its \\\n-                            permissions\",\n-            file.display()\n-        ));\n+        sess.emit_fatal(FileIsNotWriteable { file });\n     }\n }\n \n@@ -61,11 +61,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n     if let Some(ref s) = sess.opts.crate_name {\n         if let Some((attr, name)) = attr_crate_name {\n             if name.as_str() != s {\n-                let msg = format!(\n-                    \"`--crate-name` and `#[crate_name]` are \\\n-                                   required to match, but `{s}` != `{name}`\"\n-                );\n-                sess.span_err(attr.span, &msg);\n+                sess.emit_err(CrateNameDoesNotMatch { span: attr.span, s, name });\n             }\n         }\n         return validate(s.clone(), None);\n@@ -77,11 +73,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n     if let Input::File(ref path) = *input {\n         if let Some(s) = path.file_stem().and_then(|s| s.to_str()) {\n             if s.starts_with('-') {\n-                let msg = format!(\n-                    \"crate names cannot start with a `-`, but \\\n-                                   `{s}` has a leading hyphen\"\n-                );\n-                sess.err(&msg);\n+                sess.emit_err(CrateNameInvalid { s });\n             } else {\n                 return validate(s.replace('-', \"_\"), None);\n             }\n@@ -94,15 +86,9 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n     let mut err_count = 0;\n     {\n-        let mut say = |s: &str| {\n-            match sp {\n-                Some(sp) => sess.span_err(sp, s),\n-                None => sess.err(s),\n-            };\n-            err_count += 1;\n-        };\n         if s.is_empty() {\n-            say(\"crate name must not be empty\");\n+            err_count += 1;\n+            sess.emit_err(CrateNameEmpty { span: sp });\n         }\n         for c in s.chars() {\n             if c.is_alphanumeric() {\n@@ -111,7 +97,8 @@ pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n             if c == '_' {\n                 continue;\n             }\n-            say(&format!(\"invalid character `{c}` in crate name: `{s}`\"));\n+            err_count += 1;\n+            sess.emit_err(InvalidCharacterInCrateName { span: sp, character: c, crate_name: s });\n         }\n     }\n "}, {"sha": "b1b4101af9e64f75f83938f30bb803e17822d975", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329d5014b6a773d819e6cd56d5930a204bed7983/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=329d5014b6a773d819e6cd56d5930a204bed7983", "patch": "@@ -297,6 +297,8 @@ impl Session {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -305,6 +307,8 @@ impl Session {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -314,6 +318,8 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -323,10 +329,14 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -335,6 +345,8 @@ impl Session {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -343,10 +355,14 @@ impl Session {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -355,6 +371,8 @@ impl Session {\n         self.diagnostic().struct_expect(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -363,6 +381,8 @@ impl Session {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -373,13 +393,17 @@ impl Session {\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -388,6 +412,8 @@ impl Session {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -396,6 +422,8 @@ impl Session {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -404,6 +432,8 @@ impl Session {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -413,15 +443,21 @@ impl Session {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -431,10 +467,14 @@ impl Session {\n         self.diagnostic().span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn fatal(&self, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().fatal(msg).raise()\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -448,6 +488,8 @@ impl Session {\n         }\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -456,6 +498,8 @@ impl Session {\n         self.diagnostic().span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}]}