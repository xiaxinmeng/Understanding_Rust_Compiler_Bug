{"sha": "eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNGU5NGIyZTVmNDc5YWM0NGJmOGQ0MDk0Y2RjYjczZDU5NDFiMjI=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-10-28T13:49:10Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-04T21:40:38Z"}, "message": "Simplify the `optimize_mir` query", "tree": {"sha": "657fd12f2a95d38d9a7c27ebe197945db541133c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/657fd12f2a95d38d9a7c27ebe197945db541133c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22", "html_url": "https://github.com/rust-lang/rust/commit/eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "html_url": "https://github.com/rust-lang/rust/commit/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "a7b847fc5e0eebecfa5ec9c3d1ac498b3e3c43d7", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22", "patch": "@@ -439,7 +439,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn optimized_mir_opt_const_arg(\n+    pub fn optimized_mir_or_const_arg_mir(\n         self,\n         def: ty::WithOptConstParam<DefId>,\n     ) -> &'tcx Body<'tcx> {"}, {"sha": "ccdec2bf89f1212585665c81222569528759b554", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22", "patch": "@@ -3018,7 +3018,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 | DefKind::AnonConst => self.mir_for_ctfe_opt_const_arg(def),\n                 // If the caller wants `mir_for_ctfe` they should not be using `instance_mir`, so\n                 // we'll assume const fn also wants the optimized version.\n-                _ => self.optimized_mir_opt_const_arg(def),\n+                _ => self.optimized_mir_or_const_arg_mir(def),\n             },\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)"}, {"sha": "edf6fe2e0efadf9fe49de19cb8616e215d81be00", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=eb4e94b2e5f479ac44bf8d4094cdcb73d5941b22", "patch": "@@ -517,34 +517,26 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n     let did = did.expect_local();\n-    if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n-        tcx.mir_for_ctfe_of_const_arg(def)\n-    } else {\n-        tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptConstParam::unknown(did)))\n-    }\n+    assert_eq!(ty::WithOptConstParam::try_lookup(did, tcx), None);\n+    tcx.arena.alloc(inner_optimized_mir(tcx, did))\n }\n \n-fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n-    if tcx.is_constructor(def.did.to_def_id()) {\n+fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n+    if tcx.is_constructor(did.to_def_id()) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const\n         // qualification and borrow checking the trouble of special casing\n         // constructors.\n-        return shim::build_adt_ctor(tcx, def.did.to_def_id());\n+        return shim::build_adt_ctor(tcx, did.to_def_id());\n     }\n \n-    match tcx.hir().body_const_context(def.did) {\n-        Some(hir::ConstContext::ConstFn) => {\n-            if let Some((did, param_did)) = def.to_global().as_const_arg() {\n-                tcx.ensure().mir_for_ctfe_of_const_arg((did, param_did))\n-            } else {\n-                tcx.ensure().mir_for_ctfe(def.did)\n-            }\n-        }\n+    match tcx.hir().body_const_context(did) {\n+        Some(hir::ConstContext::ConstFn) => tcx.ensure().mir_for_ctfe(did),\n         None => {}\n         Some(other) => panic!(\"do not use `optimized_mir` for constants: {:?}\", other),\n     }\n-    let mut body = tcx.mir_drops_elaborated_and_const_checked(def).steal();\n+    let mut body =\n+        tcx.mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::unknown(did)).steal();\n     run_optimization_passes(tcx, &mut body);\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");"}]}