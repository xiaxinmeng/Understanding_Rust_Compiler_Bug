{"sha": "faa420fc32566bd9de81d5d14445dd25bb3694a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYTQyMGZjMzI1NjZiZDlkZTgxZDVkMTQ0NDVkZDI1YmIzNjk0YTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-14T13:58:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-14T13:58:46Z"}, "message": "internal: prepare a dedicated module for all operators", "tree": {"sha": "e824100c788bb45947f38619d70e7bb170878508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e824100c788bb45947f38619d70e7bb170878508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faa420fc32566bd9de81d5d14445dd25bb3694a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faa420fc32566bd9de81d5d14445dd25bb3694a3", "html_url": "https://github.com/rust-lang/rust/commit/faa420fc32566bd9de81d5d14445dd25bb3694a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faa420fc32566bd9de81d5d14445dd25bb3694a3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beca92b245953873d273f19a08c7a927e5a3ed78", "url": "https://api.github.com/repos/rust-lang/rust/commits/beca92b245953873d273f19a08c7a927e5a3ed78", "html_url": "https://github.com/rust-lang/rust/commit/beca92b245953873d273f19a08c7a927e5a3ed78"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "fce09851d94b72c59129668c667c9491c2361df9", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/faa420fc32566bd9de81d5d14445dd25bb3694a3/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa420fc32566bd9de81d5d14445dd25bb3694a3/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=faa420fc32566bd9de81d5d14445dd25bb3694a3", "patch": "@@ -5,6 +5,7 @@ mod traits;\n mod token_ext;\n mod node_ext;\n mod expr_ext;\n+mod operators;\n pub mod edit;\n pub mod edit_in_place;\n pub mod make;\n@@ -17,14 +18,21 @@ use crate::{\n };\n \n pub use self::{\n-    expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n+    expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind},\n     generated::{nodes::*, tokens::*},\n     node_ext::{\n         AttrKind, AttrsOwnerNode, FieldKind, Macro, NameLike, NameOrNameRef, PathSegmentKind,\n         SelfParamKind, SlicePatComponents, StructKind, TypeBoundKind, VisibilityKind,\n     },\n-    token_ext::*,\n-    traits::*,\n+    operators::{PrefixOp, RangeOp},\n+    token_ext::{\n+        CommentKind, CommentPlacement, CommentShape, HasFormatSpecifier, IsString, QuoteOffsets,\n+        Radix,\n+    },\n+    traits::{\n+        ArgListOwner, AttrsOwner, CommentIter, DocCommentsOwner, GenericParamsOwner, LoopBodyOwner,\n+        ModuleItemOwner, NameOwner, TypeBoundsOwner, VisibilityOwner,\n+    },\n };\n \n /// The main trait to go from untyped `SyntaxNode`  to a typed ast. The"}, {"sha": "f482a45dbede19b841251a3a0295339dde6da478", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/faa420fc32566bd9de81d5d14445dd25bb3694a3/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa420fc32566bd9de81d5d14445dd25bb3694a3/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=faa420fc32566bd9de81d5d14445dd25bb3694a3", "patch": "@@ -3,7 +3,11 @@\n use rowan::WalkEvent;\n \n use crate::{\n-    ast::{self, support, AstChildren, AstNode},\n+    ast::{\n+        self,\n+        operators::{PrefixOp, RangeOp},\n+        support, AstChildren, AstNode,\n+    },\n     AstToken,\n     SyntaxKind::*,\n     SyntaxToken, T,\n@@ -193,24 +197,15 @@ impl ast::IfExpr {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum PrefixOp {\n-    /// The `*` operator for dereferencing\n-    Deref,\n-    /// The `!` operator for logical inversion\n-    Not,\n-    /// The `-` operator for negation\n-    Neg,\n-}\n-\n impl ast::PrefixExpr {\n     pub fn op_kind(&self) -> Option<PrefixOp> {\n-        match self.op_token()?.kind() {\n-            T![*] => Some(PrefixOp::Deref),\n-            T![!] => Some(PrefixOp::Not),\n-            T![-] => Some(PrefixOp::Neg),\n-            _ => None,\n-        }\n+        let res = match self.op_token()?.kind() {\n+            T![*] => PrefixOp::Deref,\n+            T![!] => PrefixOp::Not,\n+            T![-] => PrefixOp::Neg,\n+            _ => return None,\n+        };\n+        Some(res)\n     }\n \n     pub fn op_token(&self) -> Option<SyntaxToken> {\n@@ -398,14 +393,6 @@ impl std::fmt::Display for BinOp {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum RangeOp {\n-    /// `..`\n-    Exclusive,\n-    /// `..=`\n-    Inclusive,\n-}\n-\n impl ast::RangeExpr {\n     fn op_details(&self) -> Option<(usize, SyntaxToken, RangeOp)> {\n         self.syntax().children_with_tokens().enumerate().find_map(|(ix, child)| {"}, {"sha": "03fd7da8406cb9c8535077af8b2bbc8b4189b80b", "filename": "crates/syntax/src/ast/operators.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/faa420fc32566bd9de81d5d14445dd25bb3694a3/crates%2Fsyntax%2Fsrc%2Fast%2Foperators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa420fc32566bd9de81d5d14445dd25bb3694a3/crates%2Fsyntax%2Fsrc%2Fast%2Foperators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Foperators.rs?ref=faa420fc32566bd9de81d5d14445dd25bb3694a3", "patch": "@@ -0,0 +1,17 @@\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum PrefixOp {\n+    /// The `*` operator for dereferencing\n+    Deref,\n+    /// The `!` operator for logical inversion\n+    Not,\n+    /// The `-` operator for negation\n+    Neg,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum RangeOp {\n+    /// `..`\n+    Exclusive,\n+    /// `..=`\n+    Inclusive,\n+}"}]}