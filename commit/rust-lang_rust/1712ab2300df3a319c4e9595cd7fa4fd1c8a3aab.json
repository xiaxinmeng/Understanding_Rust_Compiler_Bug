{"sha": "1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MTJhYjIzMDBkZjNhMzE5YzRlOTU5NWNkN2ZhNGZkMWM4YTNhYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-09T11:36:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-09T11:36:22Z"}, "message": "auto merge of #16253 : luqmana/rust/muv, r=nikomatsakis\n\nFixes #11958.", "tree": {"sha": "ec90d65cf5e61b21b53b5efc58c3090720be7610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec90d65cf5e61b21b53b5efc58c3090720be7610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab", "html_url": "https://github.com/rust-lang/rust/commit/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87134c7d72d0a39f696051a22c05aa2b328a6d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/87134c7d72d0a39f696051a22c05aa2b328a6d00", "html_url": "https://github.com/rust-lang/rust/commit/87134c7d72d0a39f696051a22c05aa2b328a6d00"}, {"sha": "f765759af24ffa8ccc6f9b3913d2e135146e230e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f765759af24ffa8ccc6f9b3913d2e135146e230e", "html_url": "https://github.com/rust-lang/rust/commit/f765759af24ffa8ccc6f9b3913d2e135146e230e"}], "stats": {"total": 119, "additions": 91, "deletions": 28}, "files": [{"sha": "65c7e1a6031eebba1317cd17062f9dd1a5d8464f", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab", "patch": "@@ -764,18 +764,17 @@ impl<'a> CheckLoanCtxt<'a> {\n         return;\n \n         fn mark_variable_as_used_mut(this: &CheckLoanCtxt,\n-                                     cmt: mc::cmt) {\n+                                     mut cmt: mc::cmt) {\n             //! If the mutability of the `cmt` being written is inherited\n             //! from a local variable, liveness will\n             //! not have been able to detect that this variable's mutability\n             //! is important, so we must add the variable to the\n             //! `used_mut_nodes` table here.\n \n-            let mut cmt = cmt;\n             loop {\n-                debug!(\"mark_writes_through_upvars_as_used_mut(cmt={})\",\n-                       cmt.repr(this.tcx()));\n+                debug!(\"mark_variable_as_used_mut(cmt={})\", cmt.repr(this.tcx()));\n                 match cmt.cat.clone() {\n+                    mc::cat_copied_upvar(mc::CopiedUpvar { upvar_id: id, .. }) |\n                     mc::cat_local(id) | mc::cat_arg(id) => {\n                         this.tcx().used_mut_nodes.borrow_mut().insert(id);\n                         return;\n@@ -792,7 +791,6 @@ impl<'a> CheckLoanCtxt<'a> {\n \n                     mc::cat_rvalue(..) |\n                     mc::cat_static_item |\n-                    mc::cat_copied_upvar(..) |\n                     mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n                     mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n                     mc::cat_deref(_, _, mc::Implicit(..)) => {"}, {"sha": "39a7b4aa3d68ec7a512df051f7ada80aa5071032", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab", "patch": "@@ -306,6 +306,29 @@ impl MutabilityCategory {\n         }\n     }\n \n+    fn from_def(def: &def::Def) -> MutabilityCategory {\n+        match *def {\n+            def::DefFn(..) | def::DefStaticMethod(..) | def::DefSelfTy(..) |\n+            def::DefMod(..) | def::DefForeignMod(..) | def::DefVariant(..) |\n+            def::DefTy(..) | def::DefTrait(..) | def::DefPrimTy(..) |\n+            def::DefTyParam(..) | def::DefUse(..) | def::DefStruct(..) |\n+            def::DefTyParamBinder(..) | def::DefRegion(..) | def::DefLabel(..) |\n+            def::DefMethod(..) => fail!(\"no MutabilityCategory for def: {}\", *def),\n+\n+            def::DefStatic(_, false) => McImmutable,\n+            def::DefStatic(_, true) => McDeclared,\n+\n+            def::DefArg(_, binding_mode) |\n+            def::DefBinding(_, binding_mode) |\n+            def::DefLocal(_, binding_mode)  => match binding_mode {\n+                ast::BindByValue(ast::MutMutable) => McDeclared,\n+                _ => McImmutable\n+            },\n+\n+            def::DefUpvar(_, def, _, _) => MutabilityCategory::from_def(&*def)\n+        }\n+    }\n+\n     pub fn inherit(&self) -> MutabilityCategory {\n         match *self {\n             McImmutable => McImmutable,\n@@ -503,8 +526,8 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n           def::DefStaticMethod(..) => {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n-          def::DefMod(_) | def::DefForeignMod(_) | def::DefStatic(_, false) |\n-          def::DefUse(_) | def::DefTrait(_) | def::DefTy(_) | def::DefPrimTy(_) |\n+          def::DefMod(_) | def::DefForeignMod(_) | def::DefUse(_) |\n+          def::DefTrait(_) | def::DefTy(_) | def::DefPrimTy(_) |\n           def::DefTyParam(..) | def::DefTyParamBinder(..) | def::DefRegion(_) |\n           def::DefLabel(_) | def::DefSelfTy(..) | def::DefMethod(..) => {\n               Ok(Rc::new(cmt_ {\n@@ -516,30 +539,25 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n               }))\n           }\n \n-          def::DefStatic(_, true) => {\n+          def::DefStatic(_, _) => {\n               Ok(Rc::new(cmt_ {\n                   id:id,\n                   span:span,\n                   cat:cat_static_item,\n-                  mutbl: McDeclared,\n+                  mutbl: MutabilityCategory::from_def(&def),\n                   ty:expr_ty\n               }))\n           }\n \n-          def::DefArg(vid, binding_mode) => {\n+          def::DefArg(vid, _) => {\n             // Idea: make this could be rewritten to model by-ref\n             // stuff as `&const` and `&mut`?\n \n-            // m: mutability of the argument\n-            let m = match binding_mode {\n-                ast::BindByValue(ast::MutMutable) => McDeclared,\n-                _ => McImmutable\n-            };\n             Ok(Rc::new(cmt_ {\n                 id: id,\n                 span: span,\n                 cat: cat_arg(vid),\n-                mutbl: m,\n+                mutbl: MutabilityCategory::from_def(&def),\n                 ty:expr_ty\n             }))\n           }\n@@ -564,7 +582,6 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                       if var_is_refd {\n                           self.cat_upvar(id, span, var_id, fn_node_id)\n                       } else {\n-                          // FIXME #2152 allow mutation of moved upvars\n                           Ok(Rc::new(cmt_ {\n                               id:id,\n                               span:span,\n@@ -573,13 +590,12 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                                   onceness: closure_ty.onceness,\n                                   capturing_proc: fn_node_id,\n                               }),\n-                              mutbl:McImmutable,\n+                              mutbl: MutabilityCategory::from_def(&def),\n                               ty:expr_ty\n                           }))\n                       }\n                   }\n                   ty::ty_unboxed_closure(_) => {\n-                      // FIXME #2152 allow mutation of moved upvars\n                       Ok(Rc::new(cmt_ {\n                           id: id,\n                           span: span,\n@@ -588,7 +604,7 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                               onceness: ast::Many,\n                               capturing_proc: fn_node_id,\n                           }),\n-                          mutbl: McImmutable,\n+                          mutbl: MutabilityCategory::from_def(&def),\n                           ty: expr_ty\n                       }))\n                   }\n@@ -602,19 +618,14 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n               }\n           }\n \n-          def::DefLocal(vid, binding_mode) |\n-          def::DefBinding(vid, binding_mode) => {\n+          def::DefLocal(vid, _) |\n+          def::DefBinding(vid, _) => {\n             // by-value/by-ref bindings are local variables\n-            let m = match binding_mode {\n-                ast::BindByValue(ast::MutMutable) => McDeclared,\n-                _ => McImmutable\n-            };\n-\n             Ok(Rc::new(cmt_ {\n                 id: id,\n                 span: span,\n                 cat: cat_local(vid),\n-                mutbl: m,\n+                mutbl: MutabilityCategory::from_def(&def),\n                 ty: expr_ty\n             }))\n           }"}, {"sha": "6bc436d3c18cee9aca1b998c5941d99f15ca4c48", "filename": "src/test/compile-fail/cannot-mutate-captured-non-mut-var.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs?ref=1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 1i;\n+    proc() { x = 2; };\n+    //~^ ERROR: cannot assign to immutable captured outer variable in a proc `x`\n+}"}, {"sha": "a3db84b0ac65f671f64e4adb35c8f18f8a146071", "filename": "src/test/compile-fail/unused-mut-warning-captured-var.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs?ref=1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![forbid(unused_mut)]\n+\n+fn main() {\n+    let mut x = 1i;\n+    //~^ ERROR: variable does not need to be mutable\n+    proc() { println!(\"{}\", x); };\n+}"}, {"sha": "f4ed7c5d9c87174a20685561cb0ad4f8ab0950d7", "filename": "src/test/run-pass/issue-11958.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11958.rs?ref=1712ab2300df3a319c4e9595cd7fa4fd1c8a3aab", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![forbid(warnings)]\n+\n+// Pretty printing tests complain about `use std::predule::*`\n+#![allow(unused_imports)]\n+\n+// We shouldn't need to rebind a moved upvar as mut if it's already\n+// marked as mut\n+\n+pub fn main() {\n+    let mut x = 1i;\n+    proc() { x = 2; };\n+}"}]}