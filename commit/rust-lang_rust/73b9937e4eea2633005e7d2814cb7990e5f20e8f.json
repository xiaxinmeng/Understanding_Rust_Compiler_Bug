{"sha": "73b9937e4eea2633005e7d2814cb7990e5f20e8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYjk5MzdlNGVlYTI2MzMwMDVlN2QyODE0Y2I3OTkwZTVmMjBlOGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-09T16:04:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-09T16:04:27Z"}, "message": "Selecting `&mut foo` completion now actually inserts `&mut`", "tree": {"sha": "408925e5d9e67745b60fc6e6cf95a31411c3e4ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/408925e5d9e67745b60fc6e6cf95a31411c3e4ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73b9937e4eea2633005e7d2814cb7990e5f20e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73b9937e4eea2633005e7d2814cb7990e5f20e8f", "html_url": "https://github.com/rust-lang/rust/commit/73b9937e4eea2633005e7d2814cb7990e5f20e8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73b9937e4eea2633005e7d2814cb7990e5f20e8f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12fe301a0cbe4ffecdabae1c9b827e740e3ce027", "url": "https://api.github.com/repos/rust-lang/rust/commits/12fe301a0cbe4ffecdabae1c9b827e740e3ce027", "html_url": "https://github.com/rust-lang/rust/commit/12fe301a0cbe4ffecdabae1c9b827e740e3ce027"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "2380e021a04d70d11c70392db54355eb9d989695", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/73b9937e4eea2633005e7d2814cb7990e5f20e8f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b9937e4eea2633005e7d2814cb7990e5f20e8f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=73b9937e4eea2633005e7d2814cb7990e5f20e8f", "patch": "@@ -175,12 +175,6 @@ pub(crate) fn completion_item(\n     line_index: &LineIndex,\n     item: CompletionItem,\n ) -> Vec<lsp_types::CompletionItem> {\n-    fn set_score(lsp_item: &mut lsp_types::CompletionItem, label: &str) {\n-        lsp_item.preselect = Some(true);\n-        // HACK: sort preselect items first\n-        lsp_item.sort_text = Some(format!(\" {}\", label));\n-    }\n-\n     let mut additional_text_edits = Vec::new();\n     let mut text_edit = None;\n     // LSP does not allow arbitrary edits in completion, so we have to do a\n@@ -220,7 +214,9 @@ pub(crate) fn completion_item(\n     };\n \n     if item.score().is_some() {\n-        set_score(&mut lsp_item, item.label());\n+        lsp_item.preselect = Some(true);\n+        // HACK: sort preselect items first\n+        lsp_item.sort_text = Some(format!(\" {}\", item.label()));\n     }\n \n     if item.deprecated() {\n@@ -233,11 +229,16 @@ pub(crate) fn completion_item(\n \n     let mut res = match item.ref_match() {\n         Some(mutability) => {\n-            let mut refed = lsp_item.clone();\n-            let label = format!(\"&{}{}\", mutability.as_keyword_for_ref(), refed.label);\n-            set_score(&mut refed, &label);\n-            refed.label = label;\n-            vec![lsp_item, refed]\n+            let mut lsp_item_with_ref = lsp_item.clone();\n+            lsp_item.preselect = Some(true);\n+            lsp_item.sort_text = Some(format!(\" {}\", item.label()));\n+            lsp_item_with_ref.label =\n+                format!(\"&{}{}\", mutability.as_keyword_for_ref(), lsp_item_with_ref.label);\n+            if let Some(lsp_types::CompletionTextEdit::Edit(it)) = &mut lsp_item_with_ref.text_edit\n+            {\n+                it.new_text = format!(\"&{}{}\", mutability.as_keyword_for_ref(), it.new_text);\n+            }\n+            vec![lsp_item_with_ref, lsp_item]\n         }\n         None => vec![lsp_item],\n     };\n@@ -1104,13 +1105,13 @@ mod tests {\n         expect_test::expect![[r#\"\n             [\n                 (\n-                    \"arg\",\n+                    \"&arg\",\n                     None,\n                 ),\n                 (\n-                    \"&arg\",\n+                    \"arg\",\n                     Some(\n-                        \" &arg\",\n+                        \" arg\",\n                     ),\n                 ),\n             ]"}]}