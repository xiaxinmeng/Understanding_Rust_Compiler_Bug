{"sha": "410461191393e2339e79b33fa8baf4650b905db0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMDQ2MTE5MTM5M2UyMzM5ZTc5YjMzZmE4YmFmNDY1MGI5MDVkYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-20T22:09:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-20T22:09:27Z"}, "message": "Auto merge of #5928 - mikerite:fix-5924, r=ebroto\n\nFix false positive in `PRECEDENCE` lint\n\nExtend the lint to handle chains of methods combined with unary negation.\n\nCloses #5924\n\nchangelog: Fix false negative in `PRECEDENCE` lint", "tree": {"sha": "8c7d770db85d7b440f1b3896d04715e3fd0c7510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c7d770db85d7b440f1b3896d04715e3fd0c7510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/410461191393e2339e79b33fa8baf4650b905db0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/410461191393e2339e79b33fa8baf4650b905db0", "html_url": "https://github.com/rust-lang/rust/commit/410461191393e2339e79b33fa8baf4650b905db0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/410461191393e2339e79b33fa8baf4650b905db0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d891954293efd425efb078cc98a30024e616f129", "url": "https://api.github.com/repos/rust-lang/rust/commits/d891954293efd425efb078cc98a30024e616f129", "html_url": "https://github.com/rust-lang/rust/commit/d891954293efd425efb078cc98a30024e616f129"}, {"sha": "c236c0fb5694948353b5fcbe46010cf04d5a7107", "url": "https://api.github.com/repos/rust-lang/rust/commits/c236c0fb5694948353b5fcbe46010cf04d5a7107", "html_url": "https://github.com/rust-lang/rust/commit/c236c0fb5694948353b5fcbe46010cf04d5a7107"}], "stats": {"total": 95, "additions": 65, "deletions": 30}, "files": [{"sha": "c9d18c3cb7287551e439bb15d3b57d05d29806e4", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/410461191393e2339e79b33fa8baf4650b905db0/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410461191393e2339e79b33fa8baf4650b905db0/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=410461191393e2339e79b33fa8baf4650b905db0", "patch": "@@ -1,4 +1,5 @@\n use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Expr, ExprKind, LitKind, UnOp};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -102,36 +103,36 @@ impl EarlyLintPass for Precedence {\n             }\n         }\n \n-        if let ExprKind::Unary(UnOp::Neg, ref rhs) = expr.kind {\n-            if let ExprKind::MethodCall(ref path_segment, ref args, _) = rhs.kind {\n+        if let ExprKind::Unary(UnOp::Neg, operand) = &expr.kind {\n+            let mut arg = operand;\n+\n+            let mut all_odd = true;\n+            while let ExprKind::MethodCall(path_segment, args, _) = &arg.kind {\n                 let path_segment_str = path_segment.ident.name.as_str();\n-                if let Some(slf) = args.first() {\n-                    if let ExprKind::Lit(ref lit) = slf.kind {\n-                        match lit.kind {\n-                            LitKind::Int(..) | LitKind::Float(..) => {\n-                                if ALLOWED_ODD_FUNCTIONS\n-                                    .iter()\n-                                    .any(|odd_function| **odd_function == *path_segment_str)\n-                                {\n-                                    return;\n-                                }\n-                                let mut applicability = Applicability::MachineApplicable;\n-                                span_lint_and_sugg(\n-                                    cx,\n-                                    PRECEDENCE,\n-                                    expr.span,\n-                                    \"unary minus has lower precedence than method call\",\n-                                    \"consider adding parentheses to clarify your intent\",\n-                                    format!(\n-                                        \"-({})\",\n-                                        snippet_with_applicability(cx, rhs.span, \"..\", &mut applicability)\n-                                    ),\n-                                    applicability,\n-                                );\n-                            },\n-                            _ => (),\n-                        }\n-                    }\n+                all_odd &= ALLOWED_ODD_FUNCTIONS\n+                    .iter()\n+                    .any(|odd_function| **odd_function == *path_segment_str);\n+                arg = args.first().expect(\"A method always has a receiver.\");\n+            }\n+\n+            if_chain! {\n+                if !all_odd;\n+                if let ExprKind::Lit(lit) = &arg.kind;\n+                if let LitKind::Int(..) | LitKind::Float(..) = &lit.kind;\n+                then {\n+                    let mut applicability = Applicability::MachineApplicable;\n+                    span_lint_and_sugg(\n+                        cx,\n+                        PRECEDENCE,\n+                        expr.span,\n+                        \"unary minus has lower precedence than method call\",\n+                        \"consider adding parentheses to clarify your intent\",\n+                        format!(\n+                            \"-({})\",\n+                            snippet_with_applicability(cx, operand.span, \"..\", &mut applicability)\n+                        ),\n+                        applicability,\n+                    );\n                 }\n             }\n         }"}, {"sha": "163bd044c178ee37fdcbc91763aec383e78b69bd", "filename": "tests/ui/precedence.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/410461191393e2339e79b33fa8baf4650b905db0/tests%2Fui%2Fprecedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/410461191393e2339e79b33fa8baf4650b905db0/tests%2Fui%2Fprecedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.fixed?ref=410461191393e2339e79b33fa8baf4650b905db0", "patch": "@@ -48,6 +48,14 @@ fn main() {\n     let _ = -1f64.to_degrees();\n     let _ = -1f64.to_radians();\n \n+    // Chains containing any non-odd function should trigger (issue #5924)\n+    let _ = -(1.0_f64.cos().cos());\n+    let _ = -(1.0_f64.cos().sin());\n+    let _ = -(1.0_f64.sin().cos());\n+\n+    // Chains of odd functions shouldn't trigger\n+    let _ = -1f64.sin().sin();\n+\n     let b = 3;\n     trip!(b * 8);\n }"}, {"sha": "8c849e3209b088909668d26df45246472be9defc", "filename": "tests/ui/precedence.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/410461191393e2339e79b33fa8baf4650b905db0/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410461191393e2339e79b33fa8baf4650b905db0/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=410461191393e2339e79b33fa8baf4650b905db0", "patch": "@@ -48,6 +48,14 @@ fn main() {\n     let _ = -1f64.to_degrees();\n     let _ = -1f64.to_radians();\n \n+    // Chains containing any non-odd function should trigger (issue #5924)\n+    let _ = -1.0_f64.cos().cos();\n+    let _ = -1.0_f64.cos().sin();\n+    let _ = -1.0_f64.sin().cos();\n+\n+    // Chains of odd functions shouldn't trigger\n+    let _ = -1f64.sin().sin();\n+\n     let b = 3;\n     trip!(b * 8);\n }"}, {"sha": "03d585b39750a6cc3932fdf8c539063c76e28b1d", "filename": "tests/ui/precedence.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/410461191393e2339e79b33fa8baf4650b905db0/tests%2Fui%2Fprecedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/410461191393e2339e79b33fa8baf4650b905db0/tests%2Fui%2Fprecedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.stderr?ref=410461191393e2339e79b33fa8baf4650b905db0", "patch": "@@ -54,5 +54,23 @@ error: unary minus has lower precedence than method call\n LL |     -1f32.abs();\n    |     ^^^^^^^^^^^ help: consider adding parentheses to clarify your intent: `-(1f32.abs())`\n \n-error: aborting due to 9 previous errors\n+error: unary minus has lower precedence than method call\n+  --> $DIR/precedence.rs:52:13\n+   |\n+LL |     let _ = -1.0_f64.cos().cos();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider adding parentheses to clarify your intent: `-(1.0_f64.cos().cos())`\n+\n+error: unary minus has lower precedence than method call\n+  --> $DIR/precedence.rs:53:13\n+   |\n+LL |     let _ = -1.0_f64.cos().sin();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider adding parentheses to clarify your intent: `-(1.0_f64.cos().sin())`\n+\n+error: unary minus has lower precedence than method call\n+  --> $DIR/precedence.rs:54:13\n+   |\n+LL |     let _ = -1.0_f64.sin().cos();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider adding parentheses to clarify your intent: `-(1.0_f64.sin().cos())`\n+\n+error: aborting due to 12 previous errors\n "}]}