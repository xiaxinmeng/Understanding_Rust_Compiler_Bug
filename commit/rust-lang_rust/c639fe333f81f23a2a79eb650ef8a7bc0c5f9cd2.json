{"sha": "c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MzlmZTMzM2Y4MWYyM2EyYTc5ZWI2NTBlZjhhN2JjMGM1ZjljZDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-28T19:03:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-28T19:43:37Z"}, "message": "internal: improve compilation critical path a bit", "tree": {"sha": "280bc256cf8fb745b9c8f3c9210bb350df5f4c3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/280bc256cf8fb745b9c8f3c9210bb350df5f4c3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "html_url": "https://github.com/rust-lang/rust/commit/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dabcf0044e9df1b426153cb50aeff72146c3b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dabcf0044e9df1b426153cb50aeff72146c3b42", "html_url": "https://github.com/rust-lang/rust/commit/0dabcf0044e9df1b426153cb50aeff72146c3b42"}], "stats": {"total": 46, "additions": 12, "deletions": 34}, "files": [{"sha": "61e62ee82fec66e15e96854d7fb6d355ebd6b0ca", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "patch": "@@ -1062,9 +1062,6 @@ checksum = \"acbf547ad0c65e31259204bd90935776d1c693cec2f4ff7abb7a1bbbd40dfe58\"\n [[package]]\n name = \"paths\"\n version = \"0.0.0\"\n-dependencies = [\n- \"serde\",\n-]\n \n [[package]]\n name = \"percent-encoding\""}, {"sha": "cc062ebb7cbe525454a20b1c27fc4ee5ba486bc8", "filename": "crates/paths/Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fpaths%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fpaths%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2FCargo.toml?ref=c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "patch": "@@ -9,4 +9,7 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n-serde = \"1\"\n+# Adding this dep sadly puts a lot of rust-analyzer crates after the\n+# serde-derive crate. Even though we don't activate the derive feature here,\n+# someone else in the crate graph certainly does!\n+# serde = \"1\""}, {"sha": "90909f4e8eaa3f7e1e7b35829f021acbb2781715", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "patch": "@@ -66,27 +66,6 @@ impl PartialEq<AbsPath> for AbsPathBuf {\n     }\n }\n \n-impl serde::Serialize for AbsPathBuf {\n-    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n-    where\n-        S: serde::Serializer,\n-    {\n-        self.0.serialize(serializer)\n-    }\n-}\n-\n-impl<'de> serde::Deserialize<'de> for AbsPathBuf {\n-    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n-    where\n-        D: serde::Deserializer<'de>,\n-    {\n-        let path = PathBuf::deserialize(deserializer)?;\n-        AbsPathBuf::try_from(path).map_err(|path| {\n-            serde::de::Error::custom(format!(\"expected absolute path, got {}\", path.display()))\n-        })\n-    }\n-}\n-\n impl AbsPathBuf {\n     /// Wrap the given absolute path in `AbsPathBuf`\n     ///"}, {"sha": "159af94cca358e6d28b540e7d5e7d7ac778b943e", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "patch": "@@ -63,7 +63,7 @@ impl ProcMacroProcessExpander {\n             macro_body: FlatTree::new(subtree),\n             macro_name: self.name.to_string(),\n             attributes: attr.map(FlatTree::new),\n-            lib: self.dylib_path.to_path_buf(),\n+            lib: self.dylib_path.to_path_buf().into(),\n             env,\n         };\n "}, {"sha": "79c749d55ad89c9d1cdb14e70aa7516141b49aed", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "patch": "@@ -39,7 +39,7 @@ impl ProcMacroProcessSrv {\n         &mut self,\n         dylib_path: &AbsPath,\n     ) -> Result<Vec<(String, ProcMacroKind)>, tt::ExpansionError> {\n-        let task = ListMacrosTask { lib: dylib_path.to_path_buf() };\n+        let task = ListMacrosTask { lib: dylib_path.to_path_buf().into() };\n \n         let result: ListMacrosResult = self.send_task(Request::ListMacro(task))?;\n         Ok(result.macros)"}, {"sha": "9fdbf04576508ea99486d8422f02880a3fdb4866", "filename": "crates/proc_macro_api/src/rpc.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs?ref=c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "patch": "@@ -7,14 +7,15 @@\n //! for separation of code responsibility.\n pub(crate) mod flat;\n \n-use paths::AbsPathBuf;\n+use std::path::PathBuf;\n+\n use serde::{Deserialize, Serialize};\n \n use crate::rpc::flat::FlatTree;\n \n #[derive(Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]\n pub struct ListMacrosTask {\n-    pub lib: AbsPathBuf,\n+    pub lib: PathBuf,\n }\n \n #[derive(Copy, Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]\n@@ -46,7 +47,7 @@ pub struct ExpansionTask {\n     /// Possible attributes for the attribute-like macros.\n     pub attributes: Option<FlatTree>,\n \n-    pub lib: AbsPathBuf,\n+    pub lib: PathBuf,\n \n     /// Environment variables to set during macro expansion.\n     pub env: Vec<(String, String)>,\n@@ -93,7 +94,7 @@ mod tests {\n             macro_body: FlatTree::new(&tt),\n             macro_name: Default::default(),\n             attributes: None,\n-            lib: AbsPathBuf::assert(std::env::current_dir().unwrap()),\n+            lib: std::env::current_dir().unwrap(),\n             env: Default::default(),\n         };\n "}, {"sha": "e5520174488f27962ad4d1689ac28986e3b441ea", "filename": "crates/proc_macro_srv/src/tests/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=c639fe333f81f23a2a79eb650ef8a7bc0c5f9cd2", "patch": "@@ -3,7 +3,6 @@\n use crate::dylib;\n use crate::ProcMacroSrv;\n use expect_test::Expect;\n-use paths::AbsPathBuf;\n use proc_macro_api::ListMacrosTask;\n use std::str::FromStr;\n \n@@ -42,8 +41,7 @@ fn assert_expand_impl(macro_name: &str, input: &str, attr: Option<&str>, expect:\n }\n \n pub fn list() -> Vec<String> {\n-    let path = AbsPathBuf::assert(fixtures::proc_macro_test_dylib_path());\n-    let task = ListMacrosTask { lib: path };\n+    let task = ListMacrosTask { lib: fixtures::proc_macro_test_dylib_path() };\n     let mut srv = ProcMacroSrv::default();\n     let res = srv.list_macros(&task).unwrap();\n     res.macros.into_iter().map(|(name, kind)| format!(\"{} [{:?}]\", name, kind)).collect()"}]}