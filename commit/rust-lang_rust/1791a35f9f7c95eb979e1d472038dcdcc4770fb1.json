{"sha": "1791a35f9f7c95eb979e1d472038dcdcc4770fb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OTFhMzVmOWY3Yzk1ZWI5NzllMWQ0NzIwMzhkY2RjYzQ3NzBmYjE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-07-15T18:02:58Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-08-21T12:33:31Z"}, "message": "Determine expected parameters from expected return in calls\n\nFixes #9560", "tree": {"sha": "5483ca32b877e977e8dd94536a195525169fbebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5483ca32b877e977e8dd94536a195525169fbebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1791a35f9f7c95eb979e1d472038dcdcc4770fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1791a35f9f7c95eb979e1d472038dcdcc4770fb1", "html_url": "https://github.com/rust-lang/rust/commit/1791a35f9f7c95eb979e1d472038dcdcc4770fb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1791a35f9f7c95eb979e1d472038dcdcc4770fb1/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd64353288068119c3a2fb0a179502ec65ea82b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd64353288068119c3a2fb0a179502ec65ea82b7", "html_url": "https://github.com/rust-lang/rust/commit/cd64353288068119c3a2fb0a179502ec65ea82b7"}], "stats": {"total": 113, "additions": 102, "deletions": 11}, "files": [{"sha": "71546663415d7a5e2cb8d63d18aa2614bdc67c98", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1791a35f9f7c95eb979e1d472038dcdcc4770fb1/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1791a35f9f7c95eb979e1d472038dcdcc4770fb1/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=1791a35f9f7c95eb979e1d472038dcdcc4770fb1", "patch": "@@ -866,8 +866,9 @@ impl Expectation {\n     /// which still is useful, because it informs integer literals and the like.\n     /// See the test case `test/ui/coerce-expect-unsized.rs` and #20169\n     /// for examples of where this comes up,.\n-    fn rvalue_hint(ty: Ty) -> Self {\n-        match ty.strip_references().kind(&Interner) {\n+    fn rvalue_hint(table: &mut unify::InferenceTable, ty: Ty) -> Self {\n+        // FIXME: do struct_tail_without_normalization\n+        match table.resolve_ty_shallow(&ty).kind(&Interner) {\n             TyKind::Slice(_) | TyKind::Str | TyKind::Dyn(_) => Expectation::RValueLikeUnsized(ty),\n             _ => Expectation::has_type(ty),\n         }"}, {"sha": "d535e7f432e3880b7b0d6c63a4ae8bc909ca1713", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 85, "deletions": 9, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1791a35f9f7c95eb979e1d472038dcdcc4770fb1/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1791a35f9f7c95eb979e1d472038dcdcc4770fb1/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=1791a35f9f7c95eb979e1d472038dcdcc4770fb1", "patch": "@@ -340,11 +340,25 @@ impl<'a> InferenceContext<'a> {\n                     None => (Vec::new(), self.err_ty()),\n                 };\n                 self.register_obligations_for_call(&callee_ty);\n-                self.check_call_arguments(args, &param_tys);\n+\n+                let expected_inputs = self.expected_inputs_for_expected_output(\n+                    expected,\n+                    ret_ty.clone(),\n+                    param_tys.clone(),\n+                );\n+\n+                self.check_call_arguments(args, &expected_inputs, &param_tys);\n                 self.normalize_associated_types_in(ret_ty)\n             }\n             Expr::MethodCall { receiver, args, method_name, generic_args } => self\n-                .infer_method_call(tgt_expr, *receiver, args, method_name, generic_args.as_deref()),\n+                .infer_method_call(\n+                    tgt_expr,\n+                    *receiver,\n+                    args,\n+                    method_name,\n+                    generic_args.as_deref(),\n+                    expected,\n+                ),\n             Expr::Match { expr, arms } => {\n                 let input_ty = self.infer_expr(*expr, &Expectation::none());\n \n@@ -584,7 +598,7 @@ impl<'a> InferenceContext<'a> {\n                         // FIXME: record type error - expected reference but found ptr,\n                         // which cannot be coerced\n                     }\n-                    Expectation::rvalue_hint(Ty::clone(exp_inner))\n+                    Expectation::rvalue_hint(&mut self.table, Ty::clone(exp_inner))\n                 } else {\n                     Expectation::none()\n                 };\n@@ -911,6 +925,7 @@ impl<'a> InferenceContext<'a> {\n         args: &[ExprId],\n         method_name: &Name,\n         generic_args: Option<&GenericArgs>,\n+        expected: &Expectation,\n     ) -> Ty {\n         let receiver_ty = self.infer_expr(receiver, &Expectation::none());\n         let canonicalized_receiver = self.canonicalize(receiver_ty.clone());\n@@ -944,7 +959,7 @@ impl<'a> InferenceContext<'a> {\n         };\n         let method_ty = method_ty.substitute(&Interner, &substs);\n         self.register_obligations_for_call(&method_ty);\n-        let (expected_receiver_ty, param_tys, ret_ty) = match method_ty.callable_sig(self.db) {\n+        let (formal_receiver_ty, param_tys, ret_ty) = match method_ty.callable_sig(self.db) {\n             Some(sig) => {\n                 if !sig.params().is_empty() {\n                     (sig.params()[0].clone(), sig.params()[1..].to_vec(), sig.ret().clone())\n@@ -954,28 +969,89 @@ impl<'a> InferenceContext<'a> {\n             }\n             None => (self.err_ty(), Vec::new(), self.err_ty()),\n         };\n-        self.unify(&expected_receiver_ty, &receiver_ty);\n+        self.unify(&formal_receiver_ty, &receiver_ty);\n+\n+        let expected_inputs =\n+            self.expected_inputs_for_expected_output(expected, ret_ty.clone(), param_tys.clone());\n \n-        self.check_call_arguments(args, &param_tys);\n+        self.check_call_arguments(args, &expected_inputs, &param_tys);\n         self.normalize_associated_types_in(ret_ty)\n     }\n \n-    fn check_call_arguments(&mut self, args: &[ExprId], param_tys: &[Ty]) {\n+    fn expected_inputs_for_expected_output(\n+        &mut self,\n+        expected_output: &Expectation,\n+        output: Ty,\n+        inputs: Vec<Ty>,\n+    ) -> Vec<Ty> {\n+        if let Some(expected_ty) = expected_output.to_option(&mut self.table) {\n+            let snapshot = self.table.snapshot();\n+            let result = if self.table.try_unify(&expected_ty, &output).is_ok() {\n+                // FIXME: the unification could introduce lifetime variables, which we'd need to handle here\n+                self.table.resolve_with_fallback(inputs, |var, kind, _, _| match kind {\n+                    chalk_ir::VariableKind::Ty(tk) => var.to_ty(&Interner, tk).cast(&Interner),\n+                    chalk_ir::VariableKind::Lifetime => var.to_lifetime(&Interner).cast(&Interner),\n+                    chalk_ir::VariableKind::Const(ty) => {\n+                        var.to_const(&Interner, ty).cast(&Interner)\n+                    }\n+                })\n+            } else {\n+                Vec::new()\n+            };\n+            self.table.rollback_to(snapshot);\n+            result\n+        } else {\n+            Vec::new()\n+        }\n+    }\n+\n+    fn check_call_arguments(&mut self, args: &[ExprId], expected_inputs: &[Ty], param_tys: &[Ty]) {\n         // Quoting https://github.com/rust-lang/rust/blob/6ef275e6c3cb1384ec78128eceeb4963ff788dca/src/librustc_typeck/check/mod.rs#L3325 --\n         // We do this in a pretty awful way: first we type-check any arguments\n         // that are not closures, then we type-check the closures. This is so\n         // that we have more information about the types of arguments when we\n         // type-check the functions. This isn't really the right way to do this.\n         for &check_closures in &[false, true] {\n             let param_iter = param_tys.iter().cloned().chain(repeat(self.err_ty()));\n-            for (&arg, param_ty) in args.iter().zip(param_iter) {\n+            let expected_iter = expected_inputs\n+                .iter()\n+                .cloned()\n+                .chain(param_iter.clone().skip(expected_inputs.len()));\n+            for ((&arg, param_ty), expected_ty) in args.iter().zip(param_iter).zip(expected_iter) {\n                 let is_closure = matches!(&self.body[arg], Expr::Lambda { .. });\n                 if is_closure != check_closures {\n                     continue;\n                 }\n \n+                // the difference between param_ty and expected here is that\n+                // expected is the parameter when the expected *return* type is\n+                // taken into account. So in `let _: &[i32] = identity(&[1, 2])`\n+                // the expected type is already `&[i32]`, whereas param_ty is\n+                // still an unbound type variable. We don't always want to force\n+                // the parameter to coerce to the expected type (for example in\n+                // `coerce_unsize_expected_type_4`).\n                 let param_ty = self.normalize_associated_types_in(param_ty);\n-                self.infer_expr_coerce(arg, &Expectation::has_type(param_ty.clone()));\n+                let expected = Expectation::rvalue_hint(&mut self.table, expected_ty);\n+                // infer with the expected type we have...\n+                let ty = self.infer_expr_inner(arg, &expected);\n+\n+                // then coerce to either the expected type or just the formal parameter type\n+                let coercion_target = if let Some(ty) = expected.only_has_type(&mut self.table) {\n+                    // if we are coercing to the expectation, unify with the\n+                    // formal parameter type to connect everything\n+                    self.unify(&ty, &param_ty);\n+                    ty\n+                } else {\n+                    param_ty\n+                };\n+                if !coercion_target.is_unknown() {\n+                    if self.coerce(Some(arg), &ty, &coercion_target).is_err() {\n+                        self.result.type_mismatches.insert(\n+                            arg.into(),\n+                            TypeMismatch { expected: coercion_target, actual: ty.clone() },\n+                        );\n+                    }\n+                }\n             }\n         }\n     }"}, {"sha": "4c470e5563ded40fcf25e2362c696334c432d314", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1791a35f9f7c95eb979e1d472038dcdcc4770fb1/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1791a35f9f7c95eb979e1d472038dcdcc4770fb1/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=1791a35f9f7c95eb979e1d472038dcdcc4770fb1", "patch": "@@ -143,6 +143,11 @@ pub(crate) struct InferenceTable<'a> {\n     pending_obligations: Vec<Canonicalized<InEnvironment<Goal>>>,\n }\n \n+pub(crate) struct InferenceTableSnapshot {\n+    var_table_snapshot: chalk_solve::infer::InferenceSnapshot<Interner>,\n+    // FIXME: snapshot type_variable_table, pending_obligations?\n+}\n+\n impl<'a> InferenceTable<'a> {\n     pub(crate) fn new(db: &'a dyn HirDatabase, trait_env: Arc<TraitEnvironment>) -> Self {\n         InferenceTable {\n@@ -335,6 +340,15 @@ impl<'a> InferenceTable<'a> {\n         self.var_unification_table.normalize_ty_shallow(&Interner, ty).unwrap_or_else(|| ty.clone())\n     }\n \n+    pub(crate) fn snapshot(&mut self) -> InferenceTableSnapshot {\n+        let snapshot = self.var_unification_table.snapshot();\n+        InferenceTableSnapshot { var_table_snapshot: snapshot }\n+    }\n+\n+    pub(crate) fn rollback_to(&mut self, snapshot: InferenceTableSnapshot) {\n+        self.var_unification_table.rollback_to(snapshot.var_table_snapshot);\n+    }\n+\n     pub(crate) fn register_obligation(&mut self, goal: Goal) {\n         let in_env = InEnvironment::new(&self.trait_env.env, goal);\n         self.register_obligation_in_env(in_env)"}]}