{"sha": "93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZmEyZDc2YmQ5YThmZmJiYjQ2ZGYyZGE2ZDI3YzEzZWU3ZmE3M2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-22T10:04:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-22T10:04:41Z"}, "message": "Auto merge of #56155 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #55367 (lint if a private item has doctests)\n - #55485 (Return &T / &mut T in ManuallyDrop Deref(Mut) impl)\n - #55784 (Clarifying documentation for collections::hash_map::Entry::or_insert)\n - #55961 (Fix VecDeque pretty-printer)\n - #55980 (Suggest on closure args count mismatching with pipe span)\n - #56002 (fix #55972: Erroneous self arguments on bare functions emit subpar compilation error)\n - #56063 (Update any.rs documentation using keyword dyn)\n - #56067 (Add SGX target to rustc)\n - #56078 (Fix error message for `-C panic=xxx`.)\n - #56106 (Remove some incorrect doc comments)\n - #56126 (core/benches/num: Add `from_str/from_str_radix()` benchmarks)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "35b359452ea12e799c831d01c01262ec7fc1d4ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b359452ea12e799c831d01c01262ec7fc1d4ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "html_url": "https://github.com/rust-lang/rust/commit/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3adec65dd0b05a0a30cd2c134f252e8bece0b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3adec65dd0b05a0a30cd2c134f252e8bece0b76", "html_url": "https://github.com/rust-lang/rust/commit/f3adec65dd0b05a0a30cd2c134f252e8bece0b76"}, {"sha": "61d7b3e9b028ba1a682448e8bdc6212552ce1ff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d7b3e9b028ba1a682448e8bdc6212552ce1ff3", "html_url": "https://github.com/rust-lang/rust/commit/61d7b3e9b028ba1a682448e8bdc6212552ce1ff3"}], "stats": {"total": 604, "additions": 507, "deletions": 97}, "files": [{"sha": "27275ba37957e1e93fe6cdd2c0b60be277e43963", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -293,15 +293,23 @@ def display_hint():\n     def to_string(self):\n         (tail, head, data_ptr, cap) = \\\n             rustpp.extract_tail_head_ptr_and_cap_from_std_vecdeque(self.__val)\n+        if head >= tail:\n+            size = head - tail\n+        else:\n+            size = cap + head - tail\n         return (self.__val.type.get_unqualified_type_name() +\n-                (\"(len: %i, cap: %i)\" % (head - tail, cap)))\n+                (\"(len: %i, cap: %i)\" % (size, cap)))\n \n     def children(self):\n         (tail, head, data_ptr, cap) = \\\n             rustpp.extract_tail_head_ptr_and_cap_from_std_vecdeque(self.__val)\n         gdb_ptr = data_ptr.get_wrapped_value()\n-        for index in xrange(tail, head):\n-            yield (str(index), (gdb_ptr + index).dereference())\n+        if head >= tail:\n+            size = head - tail\n+        else:\n+            size = cap + head - tail\n+        for index in xrange(0, size):\n+            yield (str(index), (gdb_ptr + ((tail + index) % cap)).dereference())\n \n \n class RustStdBTreeSetPrinter(object):"}, {"sha": "c2113dfd2a06714e5224dc58a59585b4a9d5b74c", "filename": "src/libcore/any.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -39,7 +39,7 @@\n //!\n //! // Logger function for any type that implements Debug.\n //! fn log<T: Any + Debug>(value: &T) {\n-//!     let value_any = value as &Any;\n+//!     let value_any = value as &dyn Any;\n //!\n //!     // try to convert our value to a String.  If successful, we want to\n //!     // output the String's length as well as its value.  If not, it's a\n@@ -95,7 +95,7 @@ pub trait Any: 'static {\n     ///\n     /// use std::any::{Any, TypeId};\n     ///\n-    /// fn is_string(s: &Any) -> bool {\n+    /// fn is_string(s: &dyn Any) -> bool {\n     ///     TypeId::of::<String>() == s.get_type_id()\n     /// }\n     ///\n@@ -151,7 +151,7 @@ impl dyn Any {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn is_string(s: &Any) {\n+    /// fn is_string(s: &dyn Any) {\n     ///     if s.is::<String>() {\n     ///         println!(\"It's a string!\");\n     ///     } else {\n@@ -185,7 +185,7 @@ impl dyn Any {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn print_if_string(s: &Any) {\n+    /// fn print_if_string(s: &dyn Any) {\n     ///     if let Some(string) = s.downcast_ref::<String>() {\n     ///         println!(\"It's a string({}): '{}'\", string.len(), string);\n     ///     } else {\n@@ -218,7 +218,7 @@ impl dyn Any {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn modify_if_u32(s: &mut Any) {\n+    /// fn modify_if_u32(s: &mut dyn Any) {\n     ///     if let Some(num) = s.downcast_mut::<u32>() {\n     ///         *num = 42;\n     ///     }\n@@ -256,7 +256,7 @@ impl dyn Any+Send {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn is_string(s: &(Any + Send)) {\n+    /// fn is_string(s: &(dyn Any + Send)) {\n     ///     if s.is::<String>() {\n     ///         println!(\"It's a string!\");\n     ///     } else {\n@@ -282,7 +282,7 @@ impl dyn Any+Send {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn print_if_string(s: &(Any + Send)) {\n+    /// fn print_if_string(s: &(dyn Any + Send)) {\n     ///     if let Some(string) = s.downcast_ref::<String>() {\n     ///         println!(\"It's a string({}): '{}'\", string.len(), string);\n     ///     } else {\n@@ -308,7 +308,7 @@ impl dyn Any+Send {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn modify_if_u32(s: &mut (Any + Send)) {\n+    /// fn modify_if_u32(s: &mut (dyn Any + Send)) {\n     ///     if let Some(num) = s.downcast_mut::<u32>() {\n     ///         *num = 42;\n     ///     }\n@@ -340,7 +340,7 @@ impl dyn Any+Send+Sync {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn is_string(s: &(Any + Send + Sync)) {\n+    /// fn is_string(s: &(dyn Any + Send + Sync)) {\n     ///     if s.is::<String>() {\n     ///         println!(\"It's a string!\");\n     ///     } else {\n@@ -366,7 +366,7 @@ impl dyn Any+Send+Sync {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn print_if_string(s: &(Any + Send + Sync)) {\n+    /// fn print_if_string(s: &(dyn Any + Send + Sync)) {\n     ///     if let Some(string) = s.downcast_ref::<String>() {\n     ///         println!(\"It's a string({}): '{}'\", string.len(), string);\n     ///     } else {\n@@ -392,7 +392,7 @@ impl dyn Any+Send+Sync {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn modify_if_u32(s: &mut (Any + Send + Sync)) {\n+    /// fn modify_if_u32(s: &mut (dyn Any + Send + Sync)) {\n     ///     if let Some(num) = s.downcast_mut::<u32>() {\n     ///         *num = 42;\n     ///     }"}, {"sha": "b57e167b05d9eb1af9e2b58e516e23620ac738f3", "filename": "src/libcore/benches/num/mod.rs", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibcore%2Fbenches%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibcore%2Fbenches%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fmod.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -10,3 +10,108 @@\n \n mod flt2dec;\n mod dec2flt;\n+\n+use test::Bencher;\n+use std::str::FromStr;\n+\n+const ASCII_NUMBERS: [&str; 19] = [\n+    \"0\",\n+    \"1\",\n+    \"2\",\n+    \"43\",\n+    \"765\",\n+    \"76567\",\n+    \"987245987\",\n+    \"-4aa32\",\n+    \"1786235\",\n+    \"8723095\",\n+    \"f##5s\",\n+    \"83638730\",\n+    \"-2345\",\n+    \"562aa43\",\n+    \"-1\",\n+    \"-0\",\n+    \"abc\",\n+    \"xyz\",\n+    \"c0ffee\",\n+];\n+\n+macro_rules! from_str_bench {\n+    ($mac:ident, $t:ty) => (\n+        #[bench]\n+        fn $mac(b: &mut Bencher) {\n+            b.iter(|| {\n+                ASCII_NUMBERS\n+                    .iter()\n+                    .cycle()\n+                    .take(5_000)\n+                    .filter_map(|s| <($t)>::from_str(s).ok())\n+                    .max()\n+            })\n+        }\n+    )\n+}\n+\n+macro_rules! from_str_radix_bench {\n+    ($mac:ident, $t:ty, $radix:expr) => (\n+        #[bench]\n+        fn $mac(b: &mut Bencher) {\n+            b.iter(|| {\n+                ASCII_NUMBERS\n+                    .iter()\n+                    .cycle()\n+                    .take(5_000)\n+                    .filter_map(|s| <($t)>::from_str_radix(s, $radix).ok())\n+                    .max()\n+            })\n+        }\n+    )\n+}\n+\n+from_str_bench!(bench_u8_from_str, u8);\n+from_str_radix_bench!(bench_u8_from_str_radix_2, u8, 2);\n+from_str_radix_bench!(bench_u8_from_str_radix_10, u8, 10);\n+from_str_radix_bench!(bench_u8_from_str_radix_16, u8, 16);\n+from_str_radix_bench!(bench_u8_from_str_radix_36, u8, 36);\n+\n+from_str_bench!(bench_u16_from_str, u16);\n+from_str_radix_bench!(bench_u16_from_str_radix_2, u16, 2);\n+from_str_radix_bench!(bench_u16_from_str_radix_10, u16, 10);\n+from_str_radix_bench!(bench_u16_from_str_radix_16, u16, 16);\n+from_str_radix_bench!(bench_u16_from_str_radix_36, u16, 36);\n+\n+from_str_bench!(bench_u32_from_str, u32);\n+from_str_radix_bench!(bench_u32_from_str_radix_2, u32, 2);\n+from_str_radix_bench!(bench_u32_from_str_radix_10, u32, 10);\n+from_str_radix_bench!(bench_u32_from_str_radix_16, u32, 16);\n+from_str_radix_bench!(bench_u32_from_str_radix_36, u32, 36);\n+\n+from_str_bench!(bench_u64_from_str, u64);\n+from_str_radix_bench!(bench_u64_from_str_radix_2, u64, 2);\n+from_str_radix_bench!(bench_u64_from_str_radix_10, u64, 10);\n+from_str_radix_bench!(bench_u64_from_str_radix_16, u64, 16);\n+from_str_radix_bench!(bench_u64_from_str_radix_36, u64, 36);\n+\n+from_str_bench!(bench_i8_from_str, i8);\n+from_str_radix_bench!(bench_i8_from_str_radix_2, i8, 2);\n+from_str_radix_bench!(bench_i8_from_str_radix_10, i8, 10);\n+from_str_radix_bench!(bench_i8_from_str_radix_16, i8, 16);\n+from_str_radix_bench!(bench_i8_from_str_radix_36, i8, 36);\n+\n+from_str_bench!(bench_i16_from_str, i16);\n+from_str_radix_bench!(bench_i16_from_str_radix_2, i16, 2);\n+from_str_radix_bench!(bench_i16_from_str_radix_10, i16, 10);\n+from_str_radix_bench!(bench_i16_from_str_radix_16, i16, 16);\n+from_str_radix_bench!(bench_i16_from_str_radix_36, i16, 36);\n+\n+from_str_bench!(bench_i32_from_str, i32);\n+from_str_radix_bench!(bench_i32_from_str_radix_2, i32, 2);\n+from_str_radix_bench!(bench_i32_from_str_radix_10, i32, 10);\n+from_str_radix_bench!(bench_i32_from_str_radix_16, i32, 16);\n+from_str_radix_bench!(bench_i32_from_str_radix_36, i32, 36);\n+\n+from_str_bench!(bench_i64_from_str, i64);\n+from_str_radix_bench!(bench_i64_from_str_radix_2, i64, 2);\n+from_str_radix_bench!(bench_i64_from_str_radix_10, i64, 10);\n+from_str_radix_bench!(bench_i64_from_str_radix_16, i64, 16);\n+from_str_radix_bench!(bench_i64_from_str_radix_36, i64, 36);"}, {"sha": "56ba10c49f41f7d01c84ef509f904d481bd71eab", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -1016,15 +1016,15 @@ impl<T: ?Sized> ManuallyDrop<T> {\n impl<T: ?Sized> Deref for ManuallyDrop<T> {\n     type Target = T;\n     #[inline]\n-    fn deref(&self) -> &Self::Target {\n+    fn deref(&self) -> &T {\n         &self.value\n     }\n }\n \n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n     #[inline]\n-    fn deref_mut(&mut self) -> &mut Self::Target {\n+    fn deref_mut(&mut self) -> &mut T {\n         &mut self.value\n     }\n }"}, {"sha": "22f2023eefbd874693121105c5deefbe6a9c39e8", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -318,6 +318,12 @@ declare_lint! {\n     \"warn about missing code example in an item's documentation\"\n }\n \n+declare_lint! {\n+    pub PRIVATE_DOC_TESTS,\n+    Allow,\n+    \"warn about doc test in private item\"\n+}\n+\n declare_lint! {\n     pub WHERE_CLAUSES_OBJECT_SAFETY,\n     Warn,\n@@ -415,6 +421,7 @@ impl LintPass for HardwiredLints {\n             DUPLICATE_MACRO_EXPORTS,\n             INTRA_DOC_LINK_RESOLUTION_FAILURE,\n             MISSING_DOC_CODE_EXAMPLES,\n+            PRIVATE_DOC_TESTS,\n             WHERE_CLAUSES_OBJECT_SAFETY,\n             PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n             MACRO_USE_EXTERN_CRATE,"}, {"sha": "c620e092f36ca20e11976f793dae0c75b2abb122", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -802,7 +802,7 @@ macro_rules! options {\n         pub const parse_opt_uint: Option<&'static str> =\n             Some(\"a number\");\n         pub const parse_panic_strategy: Option<&'static str> =\n-            Some(\"either `panic` or `abort`\");\n+            Some(\"either `unwind` or `abort`\");\n         pub const parse_relro_level: Option<&'static str> =\n             Some(\"one of: `full`, `partial`, or `off`\");\n         pub const parse_sanitizer: Option<&'static str> ="}, {"sha": "48b2b25d6adf917d54a244cf70c24dfbb1dcd254", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -1092,13 +1092,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if let Some(found_span) = found_span {\n             err.span_label(found_span, format!(\"takes {}\", found_str));\n \n+            // move |_| { ... }\n+            // ^^^^^^^^-- def_span\n+            //\n+            // move |_| { ... }\n+            // ^^^^^-- prefix\n+            let prefix_span = self.tcx.sess.source_map().span_until_non_whitespace(found_span);\n+            // move |_| { ... }\n+            //      ^^^-- pipe_span\n+            let pipe_span = if let Some(span) = found_span.trim_start(prefix_span) {\n+                span\n+            } else {\n+                found_span\n+            };\n+\n             // Suggest to take and ignore the arguments with expected_args_length `_`s if\n             // found arguments is empty (assume the user just wants to ignore args in this case).\n             // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n             if found_args.is_empty() && is_closure {\n                 let underscores = vec![\"_\"; expected_args.len()].join(\", \");\n                 err.span_suggestion_with_applicability(\n-                    found_span,\n+                    pipe_span,\n                     &format!(\n                         \"consider changing the closure to take and ignore the expected argument{}\",\n                         if expected_args.len() < 2 {"}, {"sha": "ec5ca5801049eebe45b8d74bfcf98bb0c6b06f3b", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -1050,6 +1050,10 @@ impl<'a> Linker for WasmLd<'a> {\n }\n \n fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n+    if let Some(ref exports) = tcx.sess.target.target.options.override_export_symbols {\n+        return exports.clone()\n+    }\n+\n     let mut symbols = Vec::new();\n \n     let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);"}, {"sha": "8fe89791969048a24969c70f0a8ec0942902e149", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -8,12 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Walks the crate looking for items/impl-items/trait-items that have\n-//! either a `rustc_symbol_name` or `rustc_item_path` attribute and\n-//! generates an error giving, respectively, the symbol name or\n-//! item-path. This is used for unit testing the code that generates\n-//! paths etc in all kinds of annoying scenarios.\n-\n use base;\n use rustc::hir;\n use rustc::hir::def::Def;"}, {"sha": "9c90e5ffd3c78fc193fcb266e61449dd4a5f9f0c", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -8,12 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Walks the crate looking for items/impl-items/trait-items that have\n-//! either a `rustc_symbol_name` or `rustc_item_path` attribute and\n-//! generates an error giving, respectively, the symbol name or\n-//! item-path. This is used for unit testing the code that generates\n-//! paths etc in all kinds of annoying scenarios.\n-\n use monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::DefId;"}, {"sha": "75ba4d9bd1105dbe6a2f1dd0a10cc9d6a80cdf7c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -414,6 +414,8 @@ supported_targets! {\n     (\"riscv32imac-unknown-none-elf\", riscv32imac_unknown_none_elf),\n \n     (\"aarch64-unknown-none\", aarch64_unknown_none),\n+\n+    (\"x86_64-fortanix-unknown-sgx\", x86_64_fortanix_unknown_sgx),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target.\n@@ -685,6 +687,10 @@ pub struct TargetOptions {\n     /// target features. This is `true` by default, and `false` for targets like\n     /// wasm32 where the whole program either has simd or not.\n     pub simd_types_indirect: bool,\n+\n+    /// If set, have the linker export exactly these symbols, instead of using\n+    /// the usual logic to figure this out from the crate itself.\n+    pub override_export_symbols: Option<Vec<String>>\n }\n \n impl Default for TargetOptions {\n@@ -765,6 +771,7 @@ impl Default for TargetOptions {\n             emit_debug_gdb_scripts: true,\n             requires_uwtable: false,\n             simd_types_indirect: true,\n+            override_export_symbols: None,\n         }\n     }\n }\n@@ -900,6 +907,14 @@ impl Target {\n                         )\n                     );\n             } );\n+            ($key_name:ident, opt_list) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).map(|o| o.as_array()\n+                    .map(|v| base.options.$key_name = Some(v.iter()\n+                        .map(|a| a.as_string().unwrap().to_string()).collect())\n+                        )\n+                    );\n+            } );\n             ($key_name:ident, optional) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(o) = obj.find(&name[..]) {\n@@ -1046,6 +1061,7 @@ impl Target {\n         key!(emit_debug_gdb_scripts, bool);\n         key!(requires_uwtable, bool);\n         key!(simd_types_indirect, bool);\n+        key!(override_export_symbols, opt_list);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1255,6 +1271,7 @@ impl ToJson for Target {\n         target_option_val!(emit_debug_gdb_scripts);\n         target_option_val!(requires_uwtable);\n         target_option_val!(simd_types_indirect);\n+        target_option_val!(override_export_symbols);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "07383b3d64862430b332413b5490cad227025756", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::iter;\n+\n+use super::{LinkerFlavor, Target, TargetOptions, PanicStrategy};\n+\n+pub fn target() -> Result<Target, String> {\n+    const PRE_LINK_ARGS: &[&str] = &[\n+        \"-Wl,--as-needed\",\n+        \"-Wl,-z,noexecstack\",\n+        \"-m64\",\n+         \"-fuse-ld=gold\",\n+         \"-nostdlib\",\n+         \"-shared\",\n+         \"-Wl,-e,sgx_entry\",\n+         \"-Wl,-Bstatic\",\n+         \"-Wl,--gc-sections\",\n+         \"-Wl,-z,text\",\n+         \"-Wl,-z,norelro\",\n+         \"-Wl,--rosegment\",\n+         \"-Wl,--no-undefined\",\n+         \"-Wl,--error-unresolved-symbols\",\n+         \"-Wl,--no-undefined-version\",\n+         \"-Wl,-Bsymbolic\",\n+         \"-Wl,--export-dynamic\",\n+    ];\n+    const EXPORT_SYMBOLS: &[&str] = &[\n+        \"sgx_entry\",\n+        \"HEAP_BASE\",\n+        \"HEAP_SIZE\",\n+        \"RELA\",\n+        \"RELACOUNT\",\n+        \"ENCLAVE_SIZE\",\n+        \"CFGDATA_BASE\",\n+        \"DEBUG\",\n+    ];\n+    let opts = TargetOptions {\n+        dynamic_linking: false,\n+        executables: true,\n+        linker_is_gnu: true,\n+        max_atomic_width: Some(64),\n+        panic_strategy: PanicStrategy::Abort,\n+        cpu: \"x86-64\".into(),\n+        position_independent_executables: true,\n+        pre_link_args: iter::once(\n+                (LinkerFlavor::Gcc, PRE_LINK_ARGS.iter().cloned().map(String::from).collect())\n+        ).collect(),\n+        override_export_symbols: Some(EXPORT_SYMBOLS.iter().cloned().map(String::from).collect()),\n+        ..Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"x86_64-unknown-linux-gnu\".into(),\n+        target_endian: \"little\".into(),\n+        target_pointer_width: \"64\".into(),\n+        target_c_int_width: \"32\".into(),\n+        target_os: \"unknown\".into(),\n+        target_env: \"sgx\".into(),\n+        target_vendor: \"fortanix\".into(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".into(),\n+        arch: \"x86_64\".into(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: opts,\n+    })\n+}"}, {"sha": "aac0f9f94e32933ee7dafb0e97c05f594d2e0b2d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -351,13 +351,15 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n     let missing_docs = rustc_lint::builtin::MISSING_DOCS.name;\n     let missing_doc_example = rustc_lint::builtin::MISSING_DOC_CODE_EXAMPLES.name;\n+    let private_doc_tests = rustc_lint::builtin::PRIVATE_DOC_TESTS.name;\n \n     // In addition to those specific lints, we also need to whitelist those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n     let mut whitelisted_lints = vec![warnings_lint_name.to_owned(),\n                                      intra_link_resolution_failure_name.to_owned(),\n                                      missing_docs.to_owned(),\n-                                     missing_doc_example.to_owned()];\n+                                     missing_doc_example.to_owned(),\n+                                     private_doc_tests.to_owned()];\n \n     whitelisted_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n "}, {"sha": "7183cfe5711929e19c594124f08b4624f07d5f70", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -24,9 +24,9 @@ use std::ops::Range;\n \n use core::DocContext;\n use fold::DocFolder;\n-use html::markdown::{find_testable_code, markdown_links, ErrorCodes, LangString};\n+use html::markdown::markdown_links;\n \n-use passes::Pass;\n+use passes::{look_for_tests, Pass};\n \n pub const COLLECT_INTRA_DOC_LINKS: Pass =\n     Pass::early(\"collect-intra-doc-links\", collect_intra_doc_links,\n@@ -214,43 +214,6 @@ impl<'a, 'tcx, 'rcx, 'cstore> LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     }\n }\n \n-fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx>(\n-    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n-    dox: &str,\n-    item: &Item,\n-) {\n-    if (item.is_mod() && cx.tcx.hir.as_local_node_id(item.def_id).is_none()) ||\n-       cx.as_local_node_id(item.def_id).is_none() {\n-        // If non-local, no need to check anything.\n-        return;\n-    }\n-\n-    struct Tests {\n-        found_tests: usize,\n-    }\n-\n-    impl ::test::Tester for Tests {\n-        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n-            self.found_tests += 1;\n-        }\n-    }\n-\n-    let mut tests = Tests {\n-        found_tests: 0,\n-    };\n-\n-    if find_testable_code(&dox, &mut tests, ErrorCodes::No).is_ok() {\n-        if tests.found_tests == 0 {\n-            let mut diag = cx.tcx.struct_span_lint_node(\n-                lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n-                NodeId::from_u32(0),\n-                span_of_attrs(&item.attrs),\n-                \"Missing code example in this documentation\");\n-            diag.emit();\n-        }\n-    }\n-}\n-\n impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         let item_node_id = if item.is_mod() {\n@@ -313,7 +276,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstor\n         let cx = self.cx;\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n \n-        look_for_tests(&cx, &dox, &item);\n+        look_for_tests(&cx, &dox, &item, true);\n \n         if !self.is_nightly_build {\n             return None;\n@@ -488,7 +451,7 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n     None\n }\n \n-fn span_of_attrs(attrs: &Attributes) -> syntax_pos::Span {\n+pub fn span_of_attrs(attrs: &Attributes) -> syntax_pos::Span {\n     if attrs.doc_strings.is_empty() {\n         return DUMMY_SP;\n     }"}, {"sha": "eee7278e4f0a910e2819a16a3a920d54dfa9cd4f", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -12,16 +12,22 @@\n //! process.\n \n use rustc::hir::def_id::DefId;\n+use rustc::lint as lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::util::nodemap::DefIdSet;\n use std::mem;\n use std::fmt;\n+use syntax::ast::NodeId;\n \n use clean::{self, GetDefId, Item};\n-use core::DocContext;\n+use core::{DocContext, DocAccessLevels};\n use fold;\n use fold::StripItem;\n \n+use html::markdown::{find_testable_code, ErrorCodes, LangString};\n+\n+use self::collect_intra_doc_links::span_of_attrs;\n+\n mod collapse_docs;\n pub use self::collapse_docs::COLLAPSE_DOCS;\n \n@@ -43,6 +49,9 @@ pub use self::propagate_doc_cfg::PROPAGATE_DOC_CFG;\n mod collect_intra_doc_links;\n pub use self::collect_intra_doc_links::COLLECT_INTRA_DOC_LINKS;\n \n+mod private_items_doc_tests;\n+pub use self::private_items_doc_tests::CHECK_PRIVATE_ITEMS_DOC_TESTS;\n+\n mod collect_trait_impls;\n pub use self::collect_trait_impls::COLLECT_TRAIT_IMPLS;\n \n@@ -128,6 +137,7 @@ impl Pass {\n \n /// The full list of passes.\n pub const PASSES: &'static [Pass] = &[\n+    CHECK_PRIVATE_ITEMS_DOC_TESTS,\n     STRIP_HIDDEN,\n     UNINDENT_COMMENTS,\n     COLLAPSE_DOCS,\n@@ -141,6 +151,7 @@ pub const PASSES: &'static [Pass] = &[\n /// The list of passes run by default.\n pub const DEFAULT_PASSES: &'static [&'static str] = &[\n     \"collect-trait-impls\",\n+    \"check-private-items-doc-tests\",\n     \"strip-hidden\",\n     \"strip-private\",\n     \"collect-intra-doc-links\",\n@@ -152,6 +163,7 @@ pub const DEFAULT_PASSES: &'static [&'static str] = &[\n /// The list of default passes run with `--document-private-items` is passed to rustdoc.\n pub const DEFAULT_PRIVATE_PASSES: &'static [&'static str] = &[\n     \"collect-trait-impls\",\n+    \"check-private-items-doc-tests\",\n     \"strip-priv-imports\",\n     \"collect-intra-doc-links\",\n     \"collapse-docs\",\n@@ -348,3 +360,49 @@ impl fold::DocFolder for ImportStripper {\n         }\n     }\n }\n+\n+pub fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx>(\n+    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+    dox: &str,\n+    item: &Item,\n+    check_missing_code: bool,\n+) {\n+    if cx.as_local_node_id(item.def_id).is_none() {\n+        // If non-local, no need to check anything.\n+        return;\n+    }\n+\n+    struct Tests {\n+        found_tests: usize,\n+    }\n+\n+    impl ::test::Tester for Tests {\n+        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n+            self.found_tests += 1;\n+        }\n+    }\n+\n+    let mut tests = Tests {\n+        found_tests: 0,\n+    };\n+\n+    if find_testable_code(&dox, &mut tests, ErrorCodes::No).is_ok() {\n+        if check_missing_code == true && tests.found_tests == 0 {\n+            let mut diag = cx.tcx.struct_span_lint_node(\n+                lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n+                NodeId::from_u32(0),\n+                span_of_attrs(&item.attrs),\n+                \"Missing code example in this documentation\");\n+            diag.emit();\n+        } else if check_missing_code == false &&\n+                  tests.found_tests > 0 &&\n+                  !cx.renderinfo.borrow().access_levels.is_doc_reachable(item.def_id) {\n+            let mut diag = cx.tcx.struct_span_lint_node(\n+                lint::builtin::PRIVATE_DOC_TESTS,\n+                NodeId::from_u32(0),\n+                span_of_attrs(&item.attrs),\n+                \"Documentation test in private item\");\n+            diag.emit();\n+        }\n+    }\n+}"}, {"sha": "7c5ce8894b1065c6305c1144092be145555626ee", "filename": "src/librustdoc/passes/private_items_doc_tests.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use clean::*;\n+\n+use core::DocContext;\n+use fold::DocFolder;\n+\n+use passes::{look_for_tests, Pass};\n+\n+pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass =\n+    Pass::early(\"check-private-items-doc-tests\", check_private_items_doc_tests,\n+                \"check private items doc tests\");\n+\n+struct PrivateItemDocTestLinter<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n+    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+}\n+\n+impl<'a, 'tcx, 'rcx, 'cstore> PrivateItemDocTestLinter<'a, 'tcx, 'rcx, 'cstore> {\n+    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+        PrivateItemDocTestLinter {\n+            cx,\n+        }\n+    }\n+}\n+\n+pub fn check_private_items_doc_tests(krate: Crate, cx: &DocContext) -> Crate {\n+    let mut coll = PrivateItemDocTestLinter::new(cx);\n+\n+    coll.fold_crate(krate)\n+}\n+\n+impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for PrivateItemDocTestLinter<'a, 'tcx, 'rcx, 'cstore> {\n+    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+        let cx = self.cx;\n+        let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n+\n+        look_for_tests(&cx, &dox, &item, false);\n+\n+        self.fold_item_recur(item)\n+    }\n+}"}, {"sha": "d4650bd68d637de38bd3994601ec5a7b3db0d585", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -2026,12 +2026,12 @@ impl<'a, K, V, S> RawEntryMut<'a, K, V, S> {\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map: HashMap<&str, u32> = HashMap::new();\n-    /// map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 12);\n     ///\n-    /// assert_eq!(map[\"poneyland\"], 12);\n+    /// map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);\n+    /// assert_eq!(map[\"poneyland\"], 3);\n     ///\n-    /// *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 12).1 += 10;\n-    /// assert_eq!(map[\"poneyland\"], 22);\n+    /// *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;\n+    /// assert_eq!(map[\"poneyland\"], 6);\n     /// ```\n     #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n     pub fn or_insert(self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V)\n@@ -2648,12 +2648,12 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map: HashMap<&str, u32> = HashMap::new();\n-    /// map.entry(\"poneyland\").or_insert(12);\n     ///\n-    /// assert_eq!(map[\"poneyland\"], 12);\n+    /// map.entry(\"poneyland\").or_insert(3);\n+    /// assert_eq!(map[\"poneyland\"], 3);\n     ///\n-    /// *map.entry(\"poneyland\").or_insert(12) += 10;\n-    /// assert_eq!(map[\"poneyland\"], 22);\n+    /// *map.entry(\"poneyland\").or_insert(10) *= 2;\n+    /// assert_eq!(map[\"poneyland\"], 6);\n     /// ```\n     pub fn or_insert(self, default: V) -> &'a mut V {\n         match self {"}, {"sha": "e2f09affd4fea5cd823b6a9d3552aee36b1a06f9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -1824,6 +1824,14 @@ impl<'a> Parser<'a> {\n     fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> {\n         maybe_whole!(self, NtArg, |x| x);\n \n+        if let Ok(Some(_)) = self.parse_self_arg() {\n+            let mut err = self.struct_span_err(self.prev_span,\n+                \"unexpected `self` argument in function\");\n+            err.span_label(self.prev_span,\n+                \"`self` is only valid as the first argument of an associated function\");\n+            return Err(err);\n+        }\n+\n         let (pat, ty) = if require_name || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);\n@@ -5385,11 +5393,12 @@ impl<'a> Parser<'a> {\n \n     fn parse_fn_args(&mut self, named_args: bool, allow_variadic: bool)\n                      -> PResult<'a, (Vec<Arg> , bool)> {\n+        self.expect(&token::OpenDelim(token::Paren))?;\n+\n         let sp = self.span;\n         let mut variadic = false;\n         let args: Vec<Option<Arg>> =\n-            self.parse_unspanned_seq(\n-                &token::OpenDelim(token::Paren),\n+            self.parse_seq_to_before_end(\n                 &token::CloseDelim(token::Paren),\n                 SeqSep::trailing_allowed(token::Comma),\n                 |p| {\n@@ -5436,6 +5445,8 @@ impl<'a> Parser<'a> {\n                 }\n             )?;\n \n+        self.eat(&token::CloseDelim(token::Paren));\n+\n         let args: Vec<_> = args.into_iter().filter_map(|x| x).collect();\n \n         if variadic && args.is_empty() {"}, {"sha": "0d3f4b90f23ed82e34dc2b6dc6bda4f6d8fd94ff", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -28,6 +28,9 @@\n // gdb-command: print vec_deque\n // gdb-check:$3 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n \n+// gdb-command: print vec_deque2\n+// gdb-check:$4 = VecDeque<i32>(len: 7, cap: 8) = {2, 3, 4, 5, 6, 7, 8}\n+\n #![allow(unused_variables)]\n use std::collections::BTreeSet;\n use std::collections::BTreeMap;\n@@ -54,6 +57,14 @@ fn main() {\n     vec_deque.push_back(3);\n     vec_deque.push_back(7);\n \n+    // VecDeque where an element was popped.\n+    let mut vec_deque2 = VecDeque::new();\n+    for i in 1..8 {\n+        vec_deque2.push_back(i)\n+    }\n+    vec_deque2.pop_front();\n+    vec_deque2.push_back(8);\n+\n     zzz(); // #break\n }\n "}, {"sha": "5a13fe359f5270869907d13e3755c11bc24295ec", "filename": "src/test/rustdoc-ui/private-item-doc-test.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(private_doc_tests)]\n+\n+mod foo {\n+    /// private doc test\n+    ///\n+    /// ```\n+    /// assert!(false);\n+    /// ```\n+    fn bar() {}\n+}"}, {"sha": "b43add7ea505f24569bfe210a6e97764291963eb", "filename": "src/test/rustdoc-ui/private-item-doc-test.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -0,0 +1,16 @@\n+error: Documentation test in private item\n+  --> $DIR/private-item-doc-test.rs:14:5\n+   |\n+LL | /     /// private doc test\n+LL | |     ///\n+LL | |     /// ```\n+LL | |     /// assert!(false);\n+LL | |     /// ```\n+   | |___________^\n+   |\n+note: lint level defined here\n+  --> $DIR/private-item-doc-test.rs:11:9\n+   |\n+LL | #![deny(private_doc_tests)]\n+   |         ^^^^^^^^^^^^^^^^^\n+"}, {"sha": "741ba5f41ce16b9caf72e7b40a58bf226f86f64d", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -0,0 +1,5 @@\n+fn a(&self) { }\n+//~^ ERROR unexpected `self` argument in function\n+//~| NOTE `self` is only valid as the first argument of an associated function\n+\n+fn main() { }"}, {"sha": "6a878b619d813651d91fa60bb63c34c1481ce960", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected `self` argument in function\n+  --> $DIR/bare-fn-start.rs:1:7\n+   |\n+LL | fn a(&self) { }\n+   |       ^^^^ `self` is only valid as the first argument of an associated function\n+\n+error: aborting due to previous error\n+"}, {"sha": "704fa996ca631a73fe1b3333ce1eae9406cbac02", "filename": "src/test/ui/invalid-self-argument/bare-fn.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -0,0 +1,5 @@\n+fn b(foo: u32, &mut self) { }\n+//~^ ERROR unexpected `self` argument in function\n+//~| NOTE `self` is only valid as the first argument of an associated function\n+\n+fn main() { }"}, {"sha": "b13f746a4ec584a5bc3e2b62bc0de418247a8bbb", "filename": "src/test/ui/invalid-self-argument/bare-fn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected `self` argument in function\n+  --> $DIR/bare-fn.rs:1:21\n+   |\n+LL | fn b(foo: u32, &mut self) { }\n+   |                     ^^^^ `self` is only valid as the first argument of an associated function\n+\n+error: aborting due to previous error\n+"}, {"sha": "31e867bc7641f4f263374b28e4814a5a39c6b4ef", "filename": "src/test/ui/invalid-self-argument/trait-fn.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -0,0 +1,11 @@\n+struct Foo {}\n+\n+impl Foo {\n+    fn c(foo: u32, self) {}\n+    //~^ ERROR unexpected `self` argument in function\n+    //~| NOTE `self` is only valid as the first argument of an associated function\n+\n+    fn good(&mut self, foo: u32) {}\n+}\n+\n+fn main() { }"}, {"sha": "b3c2cc5b5ebe0874e1f222f695c4b3f0733f5c89", "filename": "src/test/ui/invalid-self-argument/trait-fn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected `self` argument in function\n+  --> $DIR/trait-fn.rs:4:20\n+   |\n+LL |     fn c(foo: u32, self) {}\n+   |                    ^^^^ `self` is only valid as the first argument of an associated function\n+\n+error: aborting due to previous error\n+"}, {"sha": "2dcc7a25c84014f35b0e4757b5adac09b60712d2", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -22,6 +22,8 @@ fn main() {\n     //~^ ERROR closure is expected to take\n     f(|| panic!());\n     //~^ ERROR closure is expected to take\n+    f(  move    || panic!());\n+    //~^ ERROR closure is expected to take\n \n     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n     //~^ ERROR closure is expected to take"}, {"sha": "eeadf07262c3ee6f6f816d0e9e2ed561220d068d", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -60,8 +60,26 @@ help: consider changing the closure to take and ignore the expected argument\n LL |     f(|_| panic!());\n    |       ^^^\n \n+error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n+  --> $DIR/closure-arg-count.rs:25:5\n+   |\n+LL |     f(  move    || panic!());\n+   |     ^   ---------- takes 0 arguments\n+   |     |\n+   |     expected closure that takes 1 argument\n+   |\n+note: required by `f`\n+  --> $DIR/closure-arg-count.rs:13:1\n+   |\n+LL | fn f<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider changing the closure to take and ignore the expected argument\n+   |\n+LL |     f(  move    |_| panic!());\n+   |                 ^^^\n+\n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/closure-arg-count.rs:26:53\n+  --> $DIR/closure-arg-count.rs:28:53\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n    |                                                     ^^^ ------ takes 2 distinct arguments\n@@ -73,7 +91,7 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n    |                                                         ^^^^^^^^\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/closure-arg-count.rs:28:53\n+  --> $DIR/closure-arg-count.rs:30:53\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i: usize, x| i);\n    |                                                     ^^^ ------------- takes 2 distinct arguments\n@@ -85,15 +103,15 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n    |                                                         ^^^^^^^^\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n-  --> $DIR/closure-arg-count.rs:30:53\n+  --> $DIR/closure-arg-count.rs:32:53\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x, y| i);\n    |                                                     ^^^ --------- takes 3 distinct arguments\n    |                                                     |\n    |                                                     expected closure that takes a single 2-tuple as argument\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 0 arguments\n-  --> $DIR/closure-arg-count.rs:32:53\n+  --> $DIR/closure-arg-count.rs:34:53\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(foo);\n    |                                                     ^^^ expected function that takes a single 2-tuple as argument\n@@ -102,15 +120,15 @@ LL | fn foo() {}\n    | -------- takes 0 arguments\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n-  --> $DIR/closure-arg-count.rs:35:53\n+  --> $DIR/closure-arg-count.rs:37:53\n    |\n LL |     let bar = |i, x, y| i;\n    |               --------- takes 3 distinct arguments\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n    |                                                     ^^^ expected closure that takes a single 2-tuple as argument\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/closure-arg-count.rs:37:53\n+  --> $DIR/closure-arg-count.rs:39:53\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(qux);\n    |                                                     ^^^ expected function that takes a single 2-tuple as argument\n@@ -119,13 +137,13 @@ LL | fn qux(x: usize, y: usize) {}\n    | -------------------------- takes 2 distinct arguments\n \n error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n-  --> $DIR/closure-arg-count.rs:40:41\n+  --> $DIR/closure-arg-count.rs:42:41\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().map(usize::checked_add);\n    |                                         ^^^ expected function that takes 1 argument\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n-  --> $DIR/closure-arg-count.rs:43:5\n+  --> $DIR/closure-arg-count.rs:45:5\n    |\n LL |     call(Foo);\n    |     ^^^^ expected function that takes 0 arguments\n@@ -134,11 +152,11 @@ LL | struct Foo(u8);\n    | --------------- takes 1 argument\n    |\n note: required by `call`\n-  --> $DIR/closure-arg-count.rs:50:1\n+  --> $DIR/closure-arg-count.rs:52:1\n    |\n LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0593`."}, {"sha": "4e553c4df2fd49a9b7b3b86b95881eee1997bdf1", "filename": "src/test/ui/panic-runtime/bad-panic-flag1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag1.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // compile-flags:-C panic=foo\n-// error-pattern:either `panic` or `abort` was expected\n+// error-pattern:either `unwind` or `abort` was expected\n \n fn main() {}"}, {"sha": "013373c6f93132eb30a8b00bd37f54811a6a0ed8", "filename": "src/test/ui/panic-runtime/bad-panic-flag1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag1.stderr?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -1,2 +1,2 @@\n-error: incorrect value `foo` for codegen option `panic` - either `panic` or `abort` was expected\n+error: incorrect value `foo` for codegen option `panic` - either `unwind` or `abort` was expected\n "}, {"sha": "f560e7f4eb2de8046d27a9a5fe50288d63c3f2f8", "filename": "src/test/ui/panic-runtime/bad-panic-flag2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag2.rs?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // compile-flags:-C panic\n-// error-pattern:requires either `panic` or `abort`\n+// error-pattern:requires either `unwind` or `abort`\n \n fn main() {}"}, {"sha": "6ab94ea704d30c19f30b4322ffec3979cb01e939", "filename": "src/test/ui/panic-runtime/bad-panic-flag2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fbad-panic-flag2.stderr?ref=93fa2d76bd9a8ffbbb46df2da6d27c13ee7fa73e", "patch": "@@ -1,2 +1,2 @@\n-error: codegen option `panic` requires either `panic` or `abort` (C panic=<value>)\n+error: codegen option `panic` requires either `unwind` or `abort` (C panic=<value>)\n "}]}