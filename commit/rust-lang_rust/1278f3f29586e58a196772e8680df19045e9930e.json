{"sha": "1278f3f29586e58a196772e8680df19045e9930e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNzhmM2YyOTU4NmU1OGExOTY3NzJlODY4MGRmMTkwNDVlOTkzMGU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-08T12:41:26Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-08T12:41:26Z"}, "message": "Simplify code by using VecMap::get_by", "tree": {"sha": "38318e79b3f3ac1432a0c765707181aaad0acdbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38318e79b3f3ac1432a0c765707181aaad0acdbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1278f3f29586e58a196772e8680df19045e9930e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC/ZXYACgkQgTGiTgx5\n76+Now//dmKziLsGLM/6Szw2DjTiDD1I9bnYWsk2wqZW3W9ijyuHl+yNB79QF6BD\nk79PalMHfUiAax4HBcnMMe/m/a8cNrsVfhhxh0EvOsaIF13edkex+kiFuhBzs1nX\nUEatMasS/SpPdewvj5YhcNGI4yQgG23zulz054a3xAfsGHctrSsaUvHJ4vjSLh5V\nWIH/hpIjjN09VdgbWqb+/oVLYFWOwgRkHGi2x+LMOdetyYkoOeLoRzVnHZkzdaUP\nGi8jxdxS9yFHH54UQwvEaqiwyF9O8miFo/pVsnLZZ74oc2zf4d4w5sND4i6YntyS\nw7H1XAGqdUOQG47yET20L7v2wxsO6oRDSNayeKf8ISxHCMgLDuUeEVz3KfCTWrDM\n5g05V5/TglXSp0l6E5MzkDUuDsMdFqSERofxEGq+wzmg8N7vjLJLHBiNb1nasTRM\nssHD6kf/pAdhxW2ibrPIs4z8/yK+Ud2Sc0Cwq0CBg9neiaK7tnmoPSHE7RlmPLch\nmhvcTjIboOD1d3Fi1zg695HFZOH/OWU9lM48DLEOQLbh4xLe5jE2vVZLxM09jsqK\nxzI60vgNIGbiU29wWG21W2AmoV0UhPqMhFQyGRQQ4aOzVagws6/zCgkz+vGeYdG0\npGAiQdaQebHGJAf4hc8epHkBvu3MCzhJyFNE9iTmNVvUSa3Srhs=\n=rTcH\n-----END PGP SIGNATURE-----", "payload": "tree 38318e79b3f3ac1432a0c765707181aaad0acdbb\nparent dd56ec653cec248fb532fc295e1c40271238cffc\nauthor Santiago Pastorino <spastorino@gmail.com> 1623156086 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623156086 -0300\n\nSimplify code by using VecMap::get_by\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1278f3f29586e58a196772e8680df19045e9930e", "html_url": "https://github.com/rust-lang/rust/commit/1278f3f29586e58a196772e8680df19045e9930e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1278f3f29586e58a196772e8680df19045e9930e/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd56ec653cec248fb532fc295e1c40271238cffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd56ec653cec248fb532fc295e1c40271238cffc", "html_url": "https://github.com/rust-lang/rust/commit/dd56ec653cec248fb532fc295e1c40271238cffc"}], "stats": {"total": 138, "additions": 65, "deletions": 73}, "files": [{"sha": "09cafddeeffde9213c4f1997e3f4fe69b6d5fdc7", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1278f3f29586e58a196772e8680df19045e9930e/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1278f3f29586e58a196772e8680df19045e9930e/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=1278f3f29586e58a196772e8680df19045e9930e", "patch": "@@ -1291,9 +1291,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         };\n \n                         let concrete_ty = match concrete_opaque_types\n-                            .iter()\n-                            .find(|(key, _)| key.def_id == opaque_type_key.def_id)\n-                            .map(|(_, ty)| ty)\n+                            .get_by(|(key, _)| key.def_id == opaque_type_key.def_id)\n                         {\n                             None => {\n                                 if !concrete_is_opaque {"}, {"sha": "29a87b18a9eb7efe5b1349649cec856e70cca496", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 64, "deletions": 70, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/1278f3f29586e58a196772e8680df19045e9930e/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1278f3f29586e58a196772e8680df19045e9930e/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=1278f3f29586e58a196772e8680df19045e9930e", "patch": "@@ -1,5 +1,4 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::{Applicability, ErrorReported, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -10,7 +9,7 @@ use rustc_hir::{HirId, Node};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, DefIdTree, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -347,36 +346,36 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 }\n                 // Opaque types desugared from `impl Trait`.\n                 ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: Some(owner), .. }) => {\n-                    let concrete_ty = find_concrete_ty_from_def_id(\n-                        &tcx.mir_borrowck(owner.expect_local()).concrete_opaque_types,\n-                        def_id.to_def_id(),\n-                    )\n-                    .map(|&(_, concrete_ty)| concrete_ty)\n-                    .unwrap_or_else(|| {\n-                        tcx.sess.delay_span_bug(\n-                            DUMMY_SP,\n-                            &format!(\n-                                \"owner {:?} has no opaque type for {:?} in its typeck results\",\n-                                owner, def_id,\n-                            ),\n-                        );\n-                        if let Some(ErrorReported) =\n-                            tcx.typeck(owner.expect_local()).tainted_by_errors\n-                        {\n-                            // Some error in the\n-                            // owner fn prevented us from populating\n-                            // the `concrete_opaque_types` table.\n-                            tcx.ty_error()\n-                        } else {\n-                            // We failed to resolve the opaque type or it\n-                            // resolves to itself. Return the non-revealed\n-                            // type, which should result in E0720.\n-                            tcx.mk_opaque(\n-                                def_id.to_def_id(),\n-                                InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n-                            )\n-                        }\n-                    });\n+                    let concrete_ty = tcx\n+                        .mir_borrowck(owner.expect_local())\n+                        .concrete_opaque_types\n+                        .get_by(|(key, _)| key.def_id == def_id.to_def_id())\n+                        .map(|concrete_ty| *concrete_ty)\n+                        .unwrap_or_else(|| {\n+                            tcx.sess.delay_span_bug(\n+                                DUMMY_SP,\n+                                &format!(\n+                                    \"owner {:?} has no opaque type for {:?} in its typeck results\",\n+                                    owner, def_id,\n+                                ),\n+                            );\n+                            if let Some(ErrorReported) =\n+                                tcx.typeck(owner.expect_local()).tainted_by_errors\n+                            {\n+                                // Some error in the\n+                                // owner fn prevented us from populating\n+                                // the `concrete_opaque_types` table.\n+                                tcx.ty_error()\n+                            } else {\n+                                // We failed to resolve the opaque type or it\n+                                // resolves to itself. Return the non-revealed\n+                                // type, which should result in E0720.\n+                                tcx.mk_opaque(\n+                                    def_id.to_def_id(),\n+                                    InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n+                                )\n+                            }\n+                        });\n                     debug!(\"concrete_ty = {:?}\", concrete_ty);\n                     concrete_ty\n                 }\n@@ -516,11 +515,12 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             }\n             // Calling `mir_borrowck` can lead to cycle errors through\n             // const-checking, avoid calling it if we don't have to.\n-            if find_concrete_ty_from_def_id(\n-                &self.tcx.typeck(def_id).concrete_opaque_types,\n-                self.def_id,\n-            )\n-            .is_none()\n+            if self\n+                .tcx\n+                .typeck(def_id)\n+                .concrete_opaque_types\n+                .get_by(|(key, _)| key.def_id == self.def_id)\n+                .is_none()\n             {\n                 debug!(\n                     \"find_opaque_ty_constraints: no constraint for `{:?}` at `{:?}`\",\n@@ -531,7 +531,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             // Use borrowck to get the type with unerased regions.\n             let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n             if let Some((opaque_type_key, concrete_type)) =\n-                find_concrete_ty_from_def_id(concrete_opaque_types, self.def_id)\n+                concrete_opaque_types.iter().find(|(key, _)| key.def_id == self.def_id)\n             {\n                 debug!(\n                     \"find_opaque_ty_constraints: found constraint for `{:?}` at `{:?}`: {:?}\",\n@@ -705,31 +705,32 @@ fn let_position_impl_trait_type(tcx: TyCtxt<'_>, opaque_ty_id: LocalDefId) -> Ty\n     let opaque_ty_def_id = opaque_ty_id.to_def_id();\n \n     let owner_typeck_results = tcx.typeck(scope_def_id);\n-    let concrete_ty =\n-        find_concrete_ty_from_def_id(&owner_typeck_results.concrete_opaque_types, opaque_ty_def_id)\n-            .map(|&(_, concrete_ty)| concrete_ty)\n-            .unwrap_or_else(|| {\n-                tcx.sess.delay_span_bug(\n-                    DUMMY_SP,\n-                    &format!(\n-                        \"owner {:?} has no opaque type for {:?} in its typeck results\",\n-                        scope_def_id, opaque_ty_id\n-                    ),\n-                );\n-                if let Some(ErrorReported) = owner_typeck_results.tainted_by_errors {\n-                    // Some error in the owner fn prevented us from populating the\n-                    // `concrete_opaque_types` table.\n-                    tcx.ty_error()\n-                } else {\n-                    // We failed to resolve the opaque type or it resolves to\n-                    // itself. Return the non-revealed type, which should result in\n-                    // E0720.\n-                    tcx.mk_opaque(\n-                        opaque_ty_def_id,\n-                        InternalSubsts::identity_for_item(tcx, opaque_ty_def_id),\n-                    )\n-                }\n-            });\n+    let concrete_ty = owner_typeck_results\n+        .concrete_opaque_types\n+        .get_by(|(key, _)| key.def_id == opaque_ty_def_id)\n+        .map(|concrete_ty| *concrete_ty)\n+        .unwrap_or_else(|| {\n+            tcx.sess.delay_span_bug(\n+                DUMMY_SP,\n+                &format!(\n+                    \"owner {:?} has no opaque type for {:?} in its typeck results\",\n+                    scope_def_id, opaque_ty_id\n+                ),\n+            );\n+            if let Some(ErrorReported) = owner_typeck_results.tainted_by_errors {\n+                // Some error in the owner fn prevented us from populating the\n+                // `concrete_opaque_types` table.\n+                tcx.ty_error()\n+            } else {\n+                // We failed to resolve the opaque type or it resolves to\n+                // itself. Return the non-revealed type, which should result in\n+                // E0720.\n+                tcx.mk_opaque(\n+                    opaque_ty_def_id,\n+                    InternalSubsts::identity_for_item(tcx, opaque_ty_def_id),\n+                )\n+            }\n+        });\n     debug!(\"concrete_ty = {:?}\", concrete_ty);\n     if concrete_ty.has_erased_regions() {\n         // FIXME(impl_trait_in_bindings) Handle this case.\n@@ -803,10 +804,3 @@ fn check_feature_inherent_assoc_ty(tcx: TyCtxt<'_>, span: Span) {\n         .emit();\n     }\n }\n-\n-fn find_concrete_ty_from_def_id<'tcx>(\n-    concrete_opaque_types: &'tcx VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n-    def_id: DefId,\n-) -> Option<&'tcx (OpaqueTypeKey<'tcx>, Ty<'tcx>)> {\n-    concrete_opaque_types.iter().find(|(opaque_type_key, _)| opaque_type_key.def_id == def_id)\n-}"}]}