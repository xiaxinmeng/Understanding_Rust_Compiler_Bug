{"sha": "f7e462a6c7faaea4bfce236fb94b4622ea8260ef", "node_id": "C_kwDOAAsO6NoAKGY3ZTQ2MmE2YzdmYWFlYTRiZmNlMjM2ZmI5NGI0NjIyZWE4MjYwZWY", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-23T22:40:43Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-31T16:56:42Z"}, "message": "port encoder.rs to SessionDiagnostics", "tree": {"sha": "a6a93be70e1bfe5c4b0e6e964ce9ad0f6eba1e59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6a93be70e1bfe5c4b0e6e964ce9ad0f6eba1e59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7e462a6c7faaea4bfce236fb94b4622ea8260ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e462a6c7faaea4bfce236fb94b4622ea8260ef", "html_url": "https://github.com/rust-lang/rust/commit/f7e462a6c7faaea4bfce236fb94b4622ea8260ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7e462a6c7faaea4bfce236fb94b4622ea8260ef/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "3ed93107ff0f92a64391e3c0936fb17195d525aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed93107ff0f92a64391e3c0936fb17195d525aa", "html_url": "https://github.com/rust-lang/rust/commit/3ed93107ff0f92a64391e3c0936fb17195d525aa"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "8cce1f007e227dad12fdf5605b2601b4984ff61d", "filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7e462a6c7faaea4bfce236fb94b4622ea8260ef/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f7e462a6c7faaea4bfce236fb94b4622ea8260ef/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl?ref=f7e462a6c7faaea4bfce236fb94b4622ea8260ef", "patch": "@@ -121,3 +121,12 @@ metadata_unsupported_abi_i686 =\n \n metadata_unsupported_abi =\n     ABI not supported by `#[link(kind = \"raw-dylib\")]` on this architecture\n+\n+metadata_fail_create_file_encoder =\n+    failed to create file encoder: {$err}\n+\n+metadata_fail_seek_file =\n+    failed to seek the file: {$err}\n+\n+metadata_fail_write_file =\n+    failed to write to the file: {$err}"}, {"sha": "5edc59bf9e923d7be07e7b97932dfd2e8799ed04", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7e462a6c7faaea4bfce236fb94b4622ea8260ef/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7e462a6c7faaea4bfce236fb94b4622ea8260ef/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=f7e462a6c7faaea4bfce236fb94b4622ea8260ef", "patch": "@@ -282,3 +282,21 @@ pub struct UnsupportedAbi {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::fail_create_file_encoder)]\n+pub struct FailCreateFileEncoder {\n+    pub err: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::fail_seek_file)]\n+pub struct FailSeekFile {\n+    pub err: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::fail_write_file)]\n+pub struct FailWriteFile {\n+    pub err: String,\n+}"}, {"sha": "2b1f9f17a3c85aafb864844aed6c11982f52e191", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7e462a6c7faaea4bfce236fb94b4622ea8260ef/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7e462a6c7faaea4bfce236fb94b4622ea8260ef/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f7e462a6c7faaea4bfce236fb94b4622ea8260ef", "patch": "@@ -1,3 +1,4 @@\n+use crate::errors::{FailCreateFileEncoder, FailSeekFile, FailWriteFile};\n use crate::rmeta::def_path_hash_map::DefPathHashMapRef;\n use crate::rmeta::table::TableBuilder;\n use crate::rmeta::*;\n@@ -2269,7 +2270,7 @@ pub fn encode_metadata(tcx: TyCtxt<'_>, path: &Path) {\n \n fn encode_metadata_impl(tcx: TyCtxt<'_>, path: &Path) {\n     let mut encoder = opaque::FileEncoder::new(path)\n-        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to create file encoder: {}\", err)));\n+        .unwrap_or_else(|err| tcx.sess.emit_fatal(FailCreateFileEncoder { err: err.to_string() }));\n     encoder.emit_raw_bytes(METADATA_HEADER);\n \n     // Will be filled with the root position after encoding everything.\n@@ -2314,10 +2315,10 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>, path: &Path) {\n     // Encode the root position.\n     let header = METADATA_HEADER.len();\n     file.seek(std::io::SeekFrom::Start(header as u64))\n-        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to seek the file: {}\", err)));\n+        .unwrap_or_else(|err| tcx.sess.emit_fatal(FailSeekFile { err: err.to_string() }));\n     let pos = root.position.get();\n     file.write_all(&[(pos >> 24) as u8, (pos >> 16) as u8, (pos >> 8) as u8, (pos >> 0) as u8])\n-        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to write to the file: {}\", err)));\n+        .unwrap_or_else(|err| tcx.sess.emit_fatal(FailWriteFile { err: err.to_string() }));\n \n     // Return to the position where we are before writing the root position.\n     file.seek(std::io::SeekFrom::Start(pos_before_seek)).unwrap();"}]}