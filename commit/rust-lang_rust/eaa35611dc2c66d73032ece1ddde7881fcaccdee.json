{"sha": "eaa35611dc2c66d73032ece1ddde7881fcaccdee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYTM1NjExZGMyYzY2ZDczMDMyZWNlMWRkZGU3ODgxZmNhY2NkZWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-22T19:24:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-22T19:24:55Z"}, "message": "Add XFAIL'ed test for return-in-iter, call unimpl when we find it. Closes #100.", "tree": {"sha": "cbc01266700dafadc468bc4947b7053d3014f881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbc01266700dafadc468bc4947b7053d3014f881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaa35611dc2c66d73032ece1ddde7881fcaccdee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa35611dc2c66d73032ece1ddde7881fcaccdee", "html_url": "https://github.com/rust-lang/rust/commit/eaa35611dc2c66d73032ece1ddde7881fcaccdee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaa35611dc2c66d73032ece1ddde7881fcaccdee/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c96634af4b17eb4c92df8c3b38e6ed74cfcf9628", "url": "https://api.github.com/repos/rust-lang/rust/commits/c96634af4b17eb4c92df8c3b38e6ed74cfcf9628", "html_url": "https://github.com/rust-lang/rust/commit/c96634af4b17eb4c92df8c3b38e6ed74cfcf9628"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "de88a9317fdfa031a9042df6304154455e75fe14", "filename": "src/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaa35611dc2c66d73032ece1ddde7881fcaccdee/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eaa35611dc2c66d73032ece1ddde7881fcaccdee/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=eaa35611dc2c66d73032ece1ddde7881fcaccdee", "patch": "@@ -370,6 +370,7 @@ TEST_XFAILS_X86 :=  $(MUT_BOX_XFAILS) \\\n                     test/run-pass/fn-lval.rs \\\n                     test/run-pass/generic-fn-infer.rs \\\n                     test/run-pass/generic-recursive-tag.rs \\\n+                    test/run-pass/iter-ret.rs \\\n                     test/run-pass/mlist-cycle.rs \\\n                     test/run-pass/mutable-vec-drop.rs \\\n                     test/run-pass/obj-as.rs \\\n@@ -430,6 +431,7 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       import.rs \\\n                       inner-module.rs \\\n                       iter-range.rs \\\n+                      iter-ret.rs \\\n                       large-records.rs \\\n                       lazy-and-or.rs \\\n                       lazy-init.rs \\"}, {"sha": "07b22dca951a20c52ce651085a1a4081c6e22488", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaa35611dc2c66d73032ece1ddde7881fcaccdee/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/eaa35611dc2c66d73032ece1ddde7881fcaccdee/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=eaa35611dc2c66d73032ece1ddde7881fcaccdee", "patch": "@@ -4532,6 +4532,8 @@ let trans_visitor\n             calls\n \n       | Ast.STMT_ret atom_opt ->\n+          if get_stmt_depth cx stmt.id > 0\n+          then unimpl (Some stmt.id) \"ret within iterator-block\";\n           begin\n             match atom_opt with\n                 None -> ()"}, {"sha": "12eb9b4e645aea9f93670e0096ac152085c21140", "filename": "src/test/run-pass/iter-ret.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eaa35611dc2c66d73032ece1ddde7881fcaccdee/src%2Ftest%2Frun-pass%2Fiter-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa35611dc2c66d73032ece1ddde7881fcaccdee/src%2Ftest%2Frun-pass%2Fiter-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-ret.rs?ref=eaa35611dc2c66d73032ece1ddde7881fcaccdee", "patch": "@@ -0,0 +1,13 @@\n+iter x() -> int {\n+}\n+\n+fn f() -> bool {\n+    for each (int i in x()) {\n+        ret true;\n+    }\n+    ret false;\n+}\n+\n+fn main(vec[str] args) -> () {\n+  f();\n+}"}]}