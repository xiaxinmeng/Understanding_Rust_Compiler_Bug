{"sha": "50dff955a9367a4efc72b831549e368992807beb", "node_id": "C_kwDOAAsO6NoAKDUwZGZmOTU1YTkzNjdhNGVmYzcyYjgzMTU0OWUzNjg5OTI4MDdiZWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-09T21:54:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-09T21:54:34Z"}, "message": "Auto merge of #106285 - cjgillot:refprop-ssa, r=JakobDegen\n\nImplement SSA-based reference propagation\n\nRust has a tendency to create a lot of short-lived borrows, in particular for method calls. This PR aims to remove those short-lived borrows with a const-propagation dedicated to pointers to local places.\n\nThis pass aims to transform the following pattern:\n```\n  _1 = &raw? mut? PLACE;\n  _3 = *_1;\n  _4 = &raw? mut? *_1;\n```\n\nInto\n```\n  _1 = &raw? mut? PLACE;\n  _3 = PLACE;\n  _4 = &raw? mut? PLACE;\n```\n\nwhere `PLACE` is a direct or an indirect place expression.\n\nBy removing indirection, this pass should help both dest-prop and const-prop to handle more cases.\nThis optimization is distinct from const-prop and dataflow const-prop since the borrow-reborrow patterns needs to preserve borrowck invariants, especially the uniqueness property of mutable references.\n\nThe pointed-to places are computed using a SSA analysis. We suppose that removable borrows are typically temporaries from autoref, so they are by construction assigned only once, and a SSA analysis is enough to catch them. For each local, we store both where and how it is used, in order to efficiently compute the all-or-nothing property. Thanks to `Derefer`, we only have to track locals, not places in general.\n\n---\n\nThere are 3 properties that need to be upheld for this transformation to be legal:\n- place constness: `PLACE` must refer to the same memory wherever it appears;\n- pointer liveness: we must not introduce dereferences of dangling pointers;\n- `&mut` borrow uniqueness.\n\n## Constness\n\nIf `PLACE` is an indirect projection, if its of the form `(*LOCAL).PROJECTIONS` where:\n- `LOCAL` is SSA;\n- all projections in `PROJECTIONS` are constant (no dereference and no indexing).\n\nIf `PLACE` is a direct projection of a local, we consider it as constant if:\n- the local is always live, or it has a single `StorageLive` that dominates all uses;\n- all projections are constant.\n\n# Liveness\n\nWhen performing a substitution, we must take care not to introduce uses of dangling locals.\n\nUsing a dangling borrow is UB. Therefore, we assume that for any use of `*x`, where `x` is a borrow, the pointed-to memory is live.\n\nLimitations:\n- occurrences of `*x` in an `&raw mut? *x` are accepted;\n- raw pointers are allowed to be dangling.\n\nIn those 2 case, we do not substitute anything, to be on the safe side.\n\n**Open question:** we do not differentiate borrows of ZST and non-ZST. The UB rules may be\ndifferent depending on the layout. Having a different treatment would effectively prevent this\npass from running on polymorphic MIR, which defeats the purpose of MIR opts.\n\n## Uniqueness\n\nFor `&mut` borrows, we also need to preserve the uniqueness property:\nwe must avoid creating a state where we interleave uses of `*_1` and `_2`.\nTo do it, we only perform full substitution of mutable borrows:\nwe replace either all or none of the occurrences of `*_1`.\n\nSome care has to be taken when `_1` is copied in other locals.\n```\n   _1 = &raw? mut? _2;\n   _3 = *_1;\n   _4 = _1\n   _5 = *_4\n```\nIn such cases, fully substituting `_1` means fully substituting all of the copies.\n\nFor immutable borrows, we do not need to preserve such uniqueness property,\nso we perform all the possible substitutions without removing the `_1 = &_2` statement.", "tree": {"sha": "0d973073cd55b4edb93eba8fe93059950a456c0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d973073cd55b4edb93eba8fe93059950a456c0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50dff955a9367a4efc72b831549e368992807beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50dff955a9367a4efc72b831549e368992807beb", "html_url": "https://github.com/rust-lang/rust/commit/50dff955a9367a4efc72b831549e368992807beb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50dff955a9367a4efc72b831549e368992807beb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6bc5d259e7ab25ddfdd33de53b892770218918", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6bc5d259e7ab25ddfdd33de53b892770218918", "html_url": "https://github.com/rust-lang/rust/commit/2f6bc5d259e7ab25ddfdd33de53b892770218918"}, {"sha": "bde213cfe5490d67717fc022b04f03a57e5daa7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bde213cfe5490d67717fc022b04f03a57e5daa7f", "html_url": "https://github.com/rust-lang/rust/commit/bde213cfe5490d67717fc022b04f03a57e5daa7f"}], "stats": {"total": 3256, "additions": 3141, "deletions": 115}, "files": [{"sha": "55991facd89a35b5ded43137da3ae9d1b4887629", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -1524,6 +1524,19 @@ impl<V, T> ProjectionElem<V, T> {\n         }\n     }\n \n+    /// Returns `true` if the target of this projection always refers to the same memory region\n+    /// whatever the state of the program.\n+    pub fn is_stable_offset(&self) -> bool {\n+        match self {\n+            Self::Deref | Self::Index(_) => false,\n+            Self::Field(_, _)\n+            | Self::OpaqueCast(_)\n+            | Self::ConstantIndex { .. }\n+            | Self::Subslice { .. }\n+            | Self::Downcast(_, _) => true,\n+        }\n+    }\n+\n     /// Returns `true` if this is a `Downcast` projection with the given `VariantIdx`.\n     pub fn is_downcast_to(&self, v: VariantIdx) -> bool {\n         matches!(*self, Self::Downcast(_, x) if x == v)"}, {"sha": "171db6965ac18f9a9cd1ee90111655245a154b62", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -26,7 +26,7 @@ pub use self::borrowed_locals::borrowed_locals;\n pub use self::borrowed_locals::MaybeBorrowedLocals;\n pub use self::liveness::MaybeLiveLocals;\n pub use self::liveness::MaybeTransitiveLiveLocals;\n-pub use self::storage_liveness::{MaybeRequiresStorage, MaybeStorageLive};\n+pub use self::storage_liveness::{MaybeRequiresStorage, MaybeStorageDead, MaybeStorageLive};\n \n /// `MaybeInitializedPlaces` tracks all places that might be\n /// initialized upon reaching a particular point in the control flow"}, {"sha": "463ce083a64fd643cf2797d44383daeb846caabc", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -74,6 +74,73 @@ impl<'tcx, 'a> crate::GenKillAnalysis<'tcx> for MaybeStorageLive<'a> {\n     }\n }\n \n+#[derive(Clone)]\n+pub struct MaybeStorageDead {\n+    always_live_locals: BitSet<Local>,\n+}\n+\n+impl MaybeStorageDead {\n+    pub fn new(always_live_locals: BitSet<Local>) -> Self {\n+        MaybeStorageDead { always_live_locals }\n+    }\n+}\n+\n+impl<'tcx> crate::AnalysisDomain<'tcx> for MaybeStorageDead {\n+    type Domain = BitSet<Local>;\n+\n+    const NAME: &'static str = \"maybe_storage_dead\";\n+\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = live\n+        BitSet::new_empty(body.local_decls.len())\n+    }\n+\n+    fn initialize_start_block(&self, body: &mir::Body<'tcx>, on_entry: &mut Self::Domain) {\n+        assert_eq!(body.local_decls.len(), self.always_live_locals.domain_size());\n+        // Do not iterate on return place and args, as they are trivially always live.\n+        for local in body.vars_and_temps_iter() {\n+            if !self.always_live_locals.contains(local) {\n+                on_entry.insert(local);\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx> crate::GenKillAnalysis<'tcx> for MaybeStorageDead {\n+    type Idx = Local;\n+\n+    fn statement_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        stmt: &mir::Statement<'tcx>,\n+        _: Location,\n+    ) {\n+        match stmt.kind {\n+            StatementKind::StorageLive(l) => trans.kill(l),\n+            StatementKind::StorageDead(l) => trans.gen(l),\n+            _ => (),\n+        }\n+    }\n+\n+    fn terminator_effect(\n+        &self,\n+        _trans: &mut impl GenKill<Self::Idx>,\n+        _: &mir::Terminator<'tcx>,\n+        _: Location,\n+    ) {\n+        // Terminators have no effect\n+    }\n+\n+    fn call_return_effect(\n+        &self,\n+        _trans: &mut impl GenKill<Self::Idx>,\n+        _block: BasicBlock,\n+        _return_places: CallReturnPlaces<'_, 'tcx>,\n+    ) {\n+        // Nothing to do when a call returns successfully\n+    }\n+}\n+\n type BorrowedLocalsResults<'a, 'tcx> = ResultsRefCursor<'a, 'a, 'tcx, MaybeBorrowedLocals>;\n \n /// Dataflow analysis that determines whether each local requires storage at a"}, {"sha": "c565d6f13b17f7b2799d6423cbdf2d124539fdeb", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -33,9 +33,8 @@ impl<'tcx> MirPass<'tcx> for CopyProp {\n }\n \n fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n     let borrowed_locals = borrowed_locals(body);\n-    let ssa = SsaLocals::new(tcx, param_env, body, &borrowed_locals);\n+    let ssa = SsaLocals::new(body);\n \n     let fully_moved = fully_moved_locals(&ssa, body);\n     debug!(?fully_moved);\n@@ -76,7 +75,7 @@ fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n fn fully_moved_locals(ssa: &SsaLocals, body: &Body<'_>) -> BitSet<Local> {\n     let mut fully_moved = BitSet::new_filled(body.local_decls.len());\n \n-    for (_, rvalue) in ssa.assignments(body) {\n+    for (_, rvalue, _) in ssa.assignments(body) {\n         let (Rvalue::Use(Operand::Copy(place) | Operand::Move(place)) | Rvalue::CopyForDeref(place))\n             = rvalue\n         else { continue };"}, {"sha": "277237a5515a43c118b11dba91f1cddb4827d60e", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -84,6 +84,7 @@ mod match_branches;\n mod multiple_return_terminators;\n mod normalize_array_len;\n mod nrvo;\n+mod ref_prop;\n mod remove_noop_landing_pads;\n mod remove_storage_markers;\n mod remove_uninit_drops;\n@@ -559,6 +560,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &separate_const_switch::SeparateConstSwitch,\n             &simplify::SimplifyLocals::BeforeConstProp,\n             &copy_prop::CopyProp,\n+            &ref_prop::ReferencePropagation,\n             &const_prop::ConstProp,\n             &dataflow_const_prop::DataflowConstProp,\n             //"}, {"sha": "3d61d33ce3536acf49e7827533c36d5e43d43b07", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -7,7 +7,6 @@ use rustc_index::IndexVec;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_mir_dataflow::impls::borrowed_locals;\n \n pub struct NormalizeArrayLen;\n \n@@ -24,9 +23,7 @@ impl<'tcx> MirPass<'tcx> for NormalizeArrayLen {\n }\n \n fn normalize_array_len_calls<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n-    let borrowed_locals = borrowed_locals(body);\n-    let ssa = SsaLocals::new(tcx, param_env, body, &borrowed_locals);\n+    let ssa = SsaLocals::new(body);\n \n     let slice_lengths = compute_slice_length(tcx, &ssa, body);\n     debug!(?slice_lengths);\n@@ -41,7 +38,7 @@ fn compute_slice_length<'tcx>(\n ) -> IndexVec<Local, Option<ty::Const<'tcx>>> {\n     let mut slice_lengths = IndexVec::from_elem(None, &body.local_decls);\n \n-    for (local, rvalue) in ssa.assignments(body) {\n+    for (local, rvalue, _) in ssa.assignments(body) {\n         match rvalue {\n             Rvalue::Cast(\n                 CastKind::Pointer(ty::adjustment::PointerCast::Unsize),"}, {"sha": "dafd2ae23a635cef72a3a93cad057b5a4660c8c8", "filename": "compiler/rustc_mir_transform/src/ref_prop.rs", "status": "added", "additions": 355, "deletions": 0, "changes": 355, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,355 @@\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_index::bit_set::BitSet;\n+use rustc_index::IndexVec;\n+use rustc_middle::mir::visit::*;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_mir_dataflow::impls::MaybeStorageDead;\n+use rustc_mir_dataflow::storage::always_storage_live_locals;\n+use rustc_mir_dataflow::Analysis;\n+\n+use crate::ssa::{SsaLocals, StorageLiveLocals};\n+use crate::MirPass;\n+\n+/// Propagate references using SSA analysis.\n+///\n+/// MIR building may produce a lot of borrow-dereference patterns.\n+///\n+/// This pass aims to transform the following pattern:\n+///   _1 = &raw? mut? PLACE;\n+///   _3 = *_1;\n+///   _4 = &raw? mut? *_1;\n+///\n+/// Into\n+///   _1 = &raw? mut? PLACE;\n+///   _3 = PLACE;\n+///   _4 = &raw? mut? PLACE;\n+///\n+/// where `PLACE` is a direct or an indirect place expression.\n+///\n+/// There are 3 properties that need to be upheld for this transformation to be legal:\n+/// - place stability: `PLACE` must refer to the same memory wherever it appears;\n+/// - pointer liveness: we must not introduce dereferences of dangling pointers;\n+/// - `&mut` borrow uniqueness.\n+///\n+/// # Stability\n+///\n+/// If `PLACE` is an indirect projection, if its of the form `(*LOCAL).PROJECTIONS` where:\n+/// - `LOCAL` is SSA;\n+/// - all projections in `PROJECTIONS` have a stable offset (no dereference and no indexing).\n+///\n+/// If `PLACE` is a direct projection of a local, we consider it as constant if:\n+/// - the local is always live, or it has a single `StorageLive`;\n+/// - all projections have a stable offset.\n+///\n+/// # Liveness\n+///\n+/// When performing a substitution, we must take care not to introduce uses of dangling locals.\n+/// To ensure this, we walk the body with the `MaybeStorageDead` dataflow analysis:\n+/// - if we want to replace `*x` by reborrow `*y` and `y` may be dead, we allow replacement and\n+///   mark storage statements on `y` for removal;\n+/// - if we want to replace `*x` by non-reborrow `y` and `y` must be live, we allow replacement;\n+/// - if we want to replace `*x` by non-reborrow `y` and `y` may be dead, we do not replace.\n+///\n+/// # Uniqueness\n+///\n+/// For `&mut` borrows, we also need to preserve the uniqueness property:\n+/// we must avoid creating a state where we interleave uses of `*_1` and `_2`.\n+/// To do it, we only perform full substitution of mutable borrows:\n+/// we replace either all or none of the occurrences of `*_1`.\n+///\n+/// Some care has to be taken when `_1` is copied in other locals.\n+///   _1 = &raw? mut? _2;\n+///   _3 = *_1;\n+///   _4 = _1\n+///   _5 = *_4\n+/// In such cases, fully substituting `_1` means fully substituting all of the copies.\n+///\n+/// For immutable borrows, we do not need to preserve such uniqueness property,\n+/// so we perform all the possible substitutions without removing the `_1 = &_2` statement.\n+pub struct ReferencePropagation;\n+\n+impl<'tcx> MirPass<'tcx> for ReferencePropagation {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n+\n+    #[instrument(level = \"trace\", skip(self, tcx, body))]\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        debug!(def_id = ?body.source.def_id());\n+        propagate_ssa(tcx, body);\n+    }\n+}\n+\n+fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    let ssa = SsaLocals::new(body);\n+\n+    let mut replacer = compute_replacement(tcx, body, &ssa);\n+    debug!(?replacer.targets, ?replacer.allowed_replacements, ?replacer.storage_to_remove);\n+\n+    replacer.visit_body_preserves_cfg(body);\n+\n+    if replacer.any_replacement {\n+        crate::simplify::remove_unused_definitions(body);\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum Value<'tcx> {\n+    /// Not a pointer, or we can't know.\n+    Unknown,\n+    /// We know the value to be a pointer to this place.\n+    /// The boolean indicates whether the reference is mutable, subject the uniqueness rule.\n+    Pointer(Place<'tcx>, bool),\n+}\n+\n+/// For each local, save the place corresponding to `*local`.\n+#[instrument(level = \"trace\", skip(tcx, body))]\n+fn compute_replacement<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &Body<'tcx>,\n+    ssa: &SsaLocals,\n+) -> Replacer<'tcx> {\n+    let always_live_locals = always_storage_live_locals(body);\n+\n+    // Compute which locals have a single `StorageLive` statement ever.\n+    let storage_live = StorageLiveLocals::new(body, &always_live_locals);\n+\n+    // Compute `MaybeStorageDead` dataflow to check that we only replace when the pointee is\n+    // definitely live.\n+    let mut maybe_dead = MaybeStorageDead::new(always_live_locals)\n+        .into_engine(tcx, body)\n+        .iterate_to_fixpoint()\n+        .into_results_cursor(body);\n+\n+    // Map for each local to the pointee.\n+    let mut targets = IndexVec::from_elem(Value::Unknown, &body.local_decls);\n+    // Set of locals for which we will remove their storage statement. This is useful for\n+    // reborrowed references.\n+    let mut storage_to_remove = BitSet::new_empty(body.local_decls.len());\n+\n+    let fully_replacable_locals = fully_replacable_locals(ssa);\n+\n+    // Returns true iff we can use `place` as a pointee.\n+    //\n+    // Note that we only need to verify that there is a single `StorageLive` statement, and we do\n+    // not need to verify that it dominates all uses of that local.\n+    //\n+    // Consider the three statements:\n+    //   SL : StorageLive(a)\n+    //   DEF: b = &raw? mut? a\n+    //   USE: stuff that uses *b\n+    //\n+    // First, we recall that DEF is checked to dominate USE. Now imagine for the sake of\n+    // contradiction there is a DEF -> SL -> USE path. Consider two cases:\n+    //\n+    // - DEF dominates SL. We always have UB the first time control flow reaches DEF,\n+    //   because the storage of `a` is dead. Since DEF dominates USE, that means we cannot\n+    //   reach USE and so our optimization is ok.\n+    //\n+    // - DEF does not dominate SL. Then there is a `START_BLOCK -> SL` path not including DEF.\n+    //   But we can extend this path to USE, meaning there is also a `START_BLOCK -> USE` path not\n+    //   including DEF. This violates the DEF dominates USE condition, and so is impossible.\n+    let is_constant_place = |place: Place<'_>| {\n+        // We only allow `Deref` as the first projection, to avoid surprises.\n+        if place.projection.first() == Some(&PlaceElem::Deref) {\n+            // `place == (*some_local).xxx`, it is constant only if `some_local` is constant.\n+            // We approximate constness using SSAness.\n+            ssa.is_ssa(place.local) && place.projection[1..].iter().all(PlaceElem::is_stable_offset)\n+        } else {\n+            storage_live.has_single_storage(place.local)\n+                && place.projection[..].iter().all(PlaceElem::is_stable_offset)\n+        }\n+    };\n+\n+    let mut can_perform_opt = |target: Place<'tcx>, loc: Location| {\n+        if target.projection.first() == Some(&PlaceElem::Deref) {\n+            // We are creating a reborrow. As `place.local` is a reference, removing the storage\n+            // statements should not make it much harder for LLVM to optimize.\n+            storage_to_remove.insert(target.local);\n+            true\n+        } else {\n+            // This is a proper dereference. We can only allow it if `target` is live.\n+            maybe_dead.seek_after_primary_effect(loc);\n+            let maybe_dead = maybe_dead.contains(target.local);\n+            !maybe_dead\n+        }\n+    };\n+\n+    for (local, rvalue, location) in ssa.assignments(body) {\n+        debug!(?local);\n+\n+        // Only visit if we have something to do.\n+        let Value::Unknown = targets[local] else { bug!() };\n+\n+        let ty = body.local_decls[local].ty;\n+\n+        // If this is not a reference or pointer, do nothing.\n+        if !ty.is_any_ptr() {\n+            debug!(\"not a reference or pointer\");\n+            continue;\n+        }\n+\n+        // If this a mutable reference that we cannot fully replace, mark it as unknown.\n+        if ty.is_mutable_ptr() && !fully_replacable_locals.contains(local) {\n+            debug!(\"not fully replaceable\");\n+            continue;\n+        }\n+\n+        debug!(?rvalue);\n+        match rvalue {\n+            // This is a copy, just use the value we have in store for the previous one.\n+            // As we are visiting in `assignment_order`, ie. reverse postorder, `rhs` should\n+            // have been visited before.\n+            Rvalue::Use(Operand::Copy(place) | Operand::Move(place))\n+            | Rvalue::CopyForDeref(place) => {\n+                if let Some(rhs) = place.as_local() {\n+                    let target = targets[rhs];\n+                    if matches!(target, Value::Pointer(..)) {\n+                        targets[local] = target;\n+                    } else if ssa.is_ssa(rhs) {\n+                        let refmut = body.local_decls[rhs].ty.is_mutable_ptr();\n+                        targets[local] = Value::Pointer(tcx.mk_place_deref(rhs.into()), refmut);\n+                    }\n+                }\n+            }\n+            Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n+                let mut place = *place;\n+                // Try to see through `place` in order to collapse reborrow chains.\n+                if place.projection.first() == Some(&PlaceElem::Deref)\n+                    && let Value::Pointer(target, refmut) = targets[place.local]\n+                    // Only see through immutable reference and pointers, as we do not know yet if\n+                    // mutable references are fully replaced.\n+                    && !refmut\n+                    // Only collapse chain if the pointee is definitely live.\n+                    && can_perform_opt(target, location)\n+                {\n+                    place = target.project_deeper(&place.projection[1..], tcx);\n+                }\n+                assert_ne!(place.local, local);\n+                if is_constant_place(place) {\n+                    targets[local] = Value::Pointer(place, ty.is_mutable_ptr());\n+                }\n+            }\n+            // We do not know what to do, so keep as not-a-pointer.\n+            _ => {}\n+        }\n+    }\n+\n+    debug!(?targets);\n+\n+    let mut finder = ReplacementFinder {\n+        targets: &mut targets,\n+        can_perform_opt,\n+        allowed_replacements: FxHashSet::default(),\n+    };\n+    let reachable_blocks = traversal::reachable_as_bitset(body);\n+    for (bb, bbdata) in body.basic_blocks.iter_enumerated() {\n+        // Only visit reachable blocks as we rely on dataflow.\n+        if reachable_blocks.contains(bb) {\n+            finder.visit_basic_block_data(bb, bbdata);\n+        }\n+    }\n+\n+    let allowed_replacements = finder.allowed_replacements;\n+    return Replacer {\n+        tcx,\n+        targets,\n+        storage_to_remove,\n+        allowed_replacements,\n+        any_replacement: false,\n+    };\n+\n+    struct ReplacementFinder<'a, 'tcx, F> {\n+        targets: &'a mut IndexVec<Local, Value<'tcx>>,\n+        can_perform_opt: F,\n+        allowed_replacements: FxHashSet<(Local, Location)>,\n+    }\n+\n+    impl<'tcx, F> Visitor<'tcx> for ReplacementFinder<'_, 'tcx, F>\n+    where\n+        F: FnMut(Place<'tcx>, Location) -> bool,\n+    {\n+        fn visit_place(&mut self, place: &Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n+            if matches!(ctxt, PlaceContext::NonUse(_)) {\n+                // There is no need to check liveness for non-uses.\n+                return;\n+            }\n+\n+            if let Value::Pointer(target, refmut) = self.targets[place.local]\n+                && place.projection.first() == Some(&PlaceElem::Deref)\n+            {\n+                let perform_opt = (self.can_perform_opt)(target, loc);\n+                if perform_opt {\n+                    self.allowed_replacements.insert((target.local, loc));\n+                } else if refmut {\n+                    // This mutable reference is not fully replacable, so drop it.\n+                    self.targets[place.local] = Value::Unknown;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Compute the set of locals that can be fully replaced.\n+///\n+/// We consider a local to be replacable iff it's only used in a `Deref` projection `*_local` or\n+/// non-use position (like storage statements and debuginfo).\n+fn fully_replacable_locals(ssa: &SsaLocals) -> BitSet<Local> {\n+    let mut replacable = BitSet::new_empty(ssa.num_locals());\n+\n+    // First pass: for each local, whether its uses can be fully replaced.\n+    for local in ssa.locals() {\n+        if ssa.num_direct_uses(local) == 0 {\n+            replacable.insert(local);\n+        }\n+    }\n+\n+    // Second pass: a local can only be fully replaced if all its copies can.\n+    ssa.meet_copy_equivalence(&mut replacable);\n+\n+    replacable\n+}\n+\n+/// Utility to help performing subtitution of `*pattern` by `target`.\n+struct Replacer<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    targets: IndexVec<Local, Value<'tcx>>,\n+    storage_to_remove: BitSet<Local>,\n+    allowed_replacements: FxHashSet<(Local, Location)>,\n+    any_replacement: bool,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_place(&mut self, place: &mut Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n+        if let Value::Pointer(target, _) = self.targets[place.local]\n+            && place.projection.first() == Some(&PlaceElem::Deref)\n+        {\n+            let perform_opt = matches!(ctxt, PlaceContext::NonUse(_))\n+                || self.allowed_replacements.contains(&(target.local, loc));\n+\n+            if perform_opt {\n+                *place = target.project_deeper(&place.projection[1..], self.tcx);\n+                self.any_replacement = true;\n+            }\n+        } else {\n+            self.super_place(place, ctxt, loc);\n+        }\n+    }\n+\n+    fn visit_statement(&mut self, stmt: &mut Statement<'tcx>, loc: Location) {\n+        match stmt.kind {\n+            StatementKind::StorageLive(l) | StatementKind::StorageDead(l)\n+                if self.storage_to_remove.contains(l) =>\n+            {\n+                stmt.make_nop();\n+            }\n+            // Do not remove assignments as they may still be useful for debuginfo.\n+            _ => self.super_statement(stmt, loc),\n+        }\n+    }\n+}"}, {"sha": "05a7b226f0c213ce2561fbb67294b1cc91ee0eac", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 113, "deletions": 60, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -1,11 +1,17 @@\n+//! We denote as \"SSA\" the set of locals that verify the following properties:\n+//! 1/ They are only assigned-to once, either as a function parameter, or in an assign statement;\n+//! 2/ This single assignment dominates all uses;\n+//!\n+//! As a consequence of rule 2, we consider that borrowed locals are not SSA, even if they are\n+//! `Freeze`, as we do not track that the assignment dominates all uses of the borrow.\n+\n use either::Either;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::middle::resolve_bound_vars::Set1;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{ParamEnv, TyCtxt};\n \n #[derive(Debug)]\n pub struct SsaLocals {\n@@ -17,6 +23,9 @@ pub struct SsaLocals {\n     assignment_order: Vec<Local>,\n     /// Copy equivalence classes between locals. See `copy_classes` for documentation.\n     copy_classes: IndexVec<Local, Local>,\n+    /// Number of \"direct\" uses of each local, ie. uses that are not dereferences.\n+    /// We ignore non-uses (Storage statements, debuginfo).\n+    direct_uses: IndexVec<Local, u32>,\n }\n \n /// We often encounter MIR bodies with 1 or 2 basic blocks. In those cases, it's unnecessary to\n@@ -26,48 +35,48 @@ struct SmallDominators {\n     inner: Option<Dominators<BasicBlock>>,\n }\n \n-trait DomExt {\n-    fn dominates(self, _other: Self, dominators: &SmallDominators) -> bool;\n-}\n-\n-impl DomExt for Location {\n-    fn dominates(self, other: Location, dominators: &SmallDominators) -> bool {\n-        if self.block == other.block {\n-            self.statement_index <= other.statement_index\n+impl SmallDominators {\n+    fn dominates(&self, first: Location, second: Location) -> bool {\n+        if first.block == second.block {\n+            first.statement_index <= second.statement_index\n+        } else if let Some(inner) = &self.inner {\n+            inner.dominates(first.block, second.block)\n         } else {\n-            dominators.dominates(self.block, other.block)\n+            first.block < second.block\n         }\n     }\n-}\n \n-impl SmallDominators {\n-    fn dominates(&self, dom: BasicBlock, node: BasicBlock) -> bool {\n-        if let Some(inner) = &self.inner { inner.dominates(dom, node) } else { dom < node }\n+    fn check_dominates(&mut self, set: &mut Set1<LocationExtended>, loc: Location) {\n+        let assign_dominates = match *set {\n+            Set1::Empty | Set1::Many => false,\n+            Set1::One(LocationExtended::Arg) => true,\n+            Set1::One(LocationExtended::Plain(assign)) => {\n+                self.dominates(assign.successor_within_block(), loc)\n+            }\n+        };\n+        // We are visiting a use that is not dominated by an assignment.\n+        // Either there is a cycle involved, or we are reading for uninitialized local.\n+        // Bail out.\n+        if !assign_dominates {\n+            *set = Set1::Many;\n+        }\n     }\n }\n \n impl SsaLocals {\n-    pub fn new<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n-        param_env: ParamEnv<'tcx>,\n-        body: &Body<'tcx>,\n-        borrowed_locals: &BitSet<Local>,\n-    ) -> SsaLocals {\n+    pub fn new<'tcx>(body: &Body<'tcx>) -> SsaLocals {\n         let assignment_order = Vec::with_capacity(body.local_decls.len());\n \n         let assignments = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n         let dominators =\n             if body.basic_blocks.len() > 2 { Some(body.basic_blocks.dominators()) } else { None };\n         let dominators = SmallDominators { inner: dominators };\n-        let mut visitor = SsaVisitor { assignments, assignment_order, dominators };\n \n-        for (local, decl) in body.local_decls.iter_enumerated() {\n-            if matches!(body.local_kind(local), LocalKind::Arg) {\n-                visitor.assignments[local] = Set1::One(LocationExtended::Arg);\n-            }\n-            if borrowed_locals.contains(local) && !decl.ty.is_freeze(tcx, param_env) {\n-                visitor.assignments[local] = Set1::Many;\n-            }\n+        let direct_uses = IndexVec::from_elem(0, &body.local_decls);\n+        let mut visitor = SsaVisitor { assignments, assignment_order, dominators, direct_uses };\n+\n+        for local in body.args_iter() {\n+            visitor.assignments[local] = Set1::One(LocationExtended::Arg);\n         }\n \n         if body.basic_blocks.len() > 2 {\n@@ -85,36 +94,51 @@ impl SsaLocals {\n         }\n \n         debug!(?visitor.assignments);\n+        debug!(?visitor.direct_uses);\n \n         visitor\n             .assignment_order\n             .retain(|&local| matches!(visitor.assignments[local], Set1::One(_)));\n         debug!(?visitor.assignment_order);\n \n-        let copy_classes = compute_copy_classes(&visitor, body);\n+        let copy_classes = compute_copy_classes(&mut visitor, body);\n \n         SsaLocals {\n             assignments: visitor.assignments,\n             assignment_order: visitor.assignment_order,\n+            direct_uses: visitor.direct_uses,\n             copy_classes,\n         }\n     }\n \n+    pub fn num_locals(&self) -> usize {\n+        self.assignments.len()\n+    }\n+\n+    pub fn locals(&self) -> impl Iterator<Item = Local> {\n+        self.assignments.indices()\n+    }\n+\n     pub fn is_ssa(&self, local: Local) -> bool {\n         matches!(self.assignments[local], Set1::One(_))\n     }\n \n+    /// Return the number of uses if a local that are not \"Deref\".\n+    pub fn num_direct_uses(&self, local: Local) -> u32 {\n+        self.direct_uses[local]\n+    }\n+\n     pub fn assignments<'a, 'tcx>(\n         &'a self,\n         body: &'a Body<'tcx>,\n-    ) -> impl Iterator<Item = (Local, &'a Rvalue<'tcx>)> + 'a {\n+    ) -> impl Iterator<Item = (Local, &'a Rvalue<'tcx>, Location)> + 'a {\n         self.assignment_order.iter().filter_map(|&local| {\n             if let Set1::One(LocationExtended::Plain(loc)) = self.assignments[local] {\n                 // `loc` must point to a direct assignment to `local`.\n                 let Either::Left(stmt) = body.stmt_at(loc) else { bug!() };\n                 let Some((target, rvalue)) = stmt.kind.as_assign() else { bug!() };\n                 assert_eq!(target.as_local(), Some(local));\n-                Some((local, rvalue))\n+                Some((local, rvalue, loc))\n             } else {\n                 None\n             }\n@@ -177,30 +201,14 @@ struct SsaVisitor {\n     dominators: SmallDominators,\n     assignments: IndexVec<Local, Set1<LocationExtended>>,\n     assignment_order: Vec<Local>,\n-}\n-\n-impl SsaVisitor {\n-    fn check_assignment_dominates(&mut self, local: Local, loc: Location) {\n-        let set = &mut self.assignments[local];\n-        let assign_dominates = match *set {\n-            Set1::Empty | Set1::Many => false,\n-            Set1::One(LocationExtended::Arg) => true,\n-            Set1::One(LocationExtended::Plain(assign)) => {\n-                assign.successor_within_block().dominates(loc, &self.dominators)\n-            }\n-        };\n-        // We are visiting a use that is not dominated by an assignment.\n-        // Either there is a cycle involved, or we are reading for uninitialized local.\n-        // Bail out.\n-        if !assign_dominates {\n-            *set = Set1::Many;\n-        }\n-    }\n+    direct_uses: IndexVec<Local, u32>,\n }\n \n impl<'tcx> Visitor<'tcx> for SsaVisitor {\n     fn visit_local(&mut self, local: Local, ctxt: PlaceContext, loc: Location) {\n         match ctxt {\n+            PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+            | PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection) => bug!(),\n             PlaceContext::MutatingUse(MutatingUseContext::Store) => {\n                 self.assignments[local].insert(LocationExtended::Plain(loc));\n                 if let Set1::One(_) = self.assignments[local] {\n@@ -209,12 +217,20 @@ impl<'tcx> Visitor<'tcx> for SsaVisitor {\n                 }\n             }\n             // Anything can happen with raw pointers, so remove them.\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf)\n-            | PlaceContext::MutatingUse(_) => self.assignments[local] = Set1::Many,\n-            // Immutable borrows are taken into account in `SsaLocals::new` by\n-            // removing non-freeze locals.\n+            // We do not verify that all uses of the borrow dominate the assignment to `local`,\n+            // so we have to remove them too.\n+            PlaceContext::NonMutatingUse(\n+                NonMutatingUseContext::SharedBorrow\n+                | NonMutatingUseContext::ShallowBorrow\n+                | NonMutatingUseContext::UniqueBorrow\n+                | NonMutatingUseContext::AddressOf,\n+            )\n+            | PlaceContext::MutatingUse(_) => {\n+                self.assignments[local] = Set1::Many;\n+            }\n             PlaceContext::NonMutatingUse(_) => {\n-                self.check_assignment_dominates(local, loc);\n+                self.dominators.check_dominates(&mut self.assignments[local], loc);\n+                self.direct_uses[local] += 1;\n             }\n             PlaceContext::NonUse(_) => {}\n         }\n@@ -224,20 +240,22 @@ impl<'tcx> Visitor<'tcx> for SsaVisitor {\n         if place.projection.first() == Some(&PlaceElem::Deref) {\n             // Do not do anything for storage statements and debuginfo.\n             if ctxt.is_use() {\n-                // A use through a `deref` only reads from the local, and cannot write to it.\n-                let new_ctxt = PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection);\n+                // Only change the context if it is a real use, not a \"use\" in debuginfo.\n+                let new_ctxt = PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy);\n \n                 self.visit_projection(place.as_ref(), new_ctxt, loc);\n-                self.check_assignment_dominates(place.local, loc);\n+                self.dominators.check_dominates(&mut self.assignments[place.local], loc);\n             }\n             return;\n+        } else {\n+            self.visit_projection(place.as_ref(), ctxt, loc);\n+            self.visit_local(place.local, ctxt, loc);\n         }\n-        self.super_place(place, ctxt, loc);\n     }\n }\n \n #[instrument(level = \"trace\", skip(ssa, body))]\n-fn compute_copy_classes(ssa: &SsaVisitor, body: &Body<'_>) -> IndexVec<Local, Local> {\n+fn compute_copy_classes(ssa: &mut SsaVisitor, body: &Body<'_>) -> IndexVec<Local, Local> {\n     let mut copies = IndexVec::from_fn_n(|l| l, body.local_decls.len());\n \n     for &local in &ssa.assignment_order {\n@@ -267,9 +285,11 @@ fn compute_copy_classes(ssa: &SsaVisitor, body: &Body<'_>) -> IndexVec<Local, Lo\n         // We visit in `assignment_order`, ie. reverse post-order, so `rhs` has been\n         // visited before `local`, and we just have to copy the representing local.\n         copies[local] = copies[rhs];\n+        ssa.direct_uses[rhs] -= 1;\n     }\n \n     debug!(?copies);\n+    debug!(?ssa.direct_uses);\n \n     // Invariant: `copies` must point to the head of an equivalence class.\n     #[cfg(debug_assertions)]\n@@ -279,3 +299,36 @@ fn compute_copy_classes(ssa: &SsaVisitor, body: &Body<'_>) -> IndexVec<Local, Lo\n \n     copies\n }\n+\n+#[derive(Debug)]\n+pub(crate) struct StorageLiveLocals {\n+    /// Set of \"StorageLive\" statements for each local.\n+    storage_live: IndexVec<Local, Set1<LocationExtended>>,\n+}\n+\n+impl StorageLiveLocals {\n+    pub(crate) fn new(\n+        body: &Body<'_>,\n+        always_storage_live_locals: &BitSet<Local>,\n+    ) -> StorageLiveLocals {\n+        let mut storage_live = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n+        for local in always_storage_live_locals.iter() {\n+            storage_live[local] = Set1::One(LocationExtended::Arg);\n+        }\n+        for (block, bbdata) in body.basic_blocks.iter_enumerated() {\n+            for (statement_index, statement) in bbdata.statements.iter().enumerate() {\n+                if let StatementKind::StorageLive(local) = statement.kind {\n+                    storage_live[local]\n+                        .insert(LocationExtended::Plain(Location { block, statement_index }));\n+                }\n+            }\n+        }\n+        debug!(?storage_live);\n+        StorageLiveLocals { storage_live }\n+    }\n+\n+    #[inline]\n+    pub(crate) fn has_single_storage(&self, local: Local) -> bool {\n+        matches!(self.storage_live[local], Set1::One(_))\n+    }\n+}"}, {"sha": "51707e71661c5e7b872d78b2e4b2a450583ae3da", "filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -20,8 +20,7 @@\n       }\n   \n       bb1: {\n--         _0 = opaque::<u8>(_3) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n-+         _0 = opaque::<u8>(_1) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n+          _0 = opaque::<u8>(_3) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n                                            // mir::Constant\n                                            // + span: $DIR/borrowed_local.rs:28:28: 28:34\n                                            // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }"}, {"sha": "8edc83cbf67f8bf584d6df01e37b6209e1d14c27", "filename": "tests/mir-opt/reference_prop.dominate_storage.ReferencePropagation.diff", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,38 @@\n+- // MIR for `dominate_storage` before ReferencePropagation\n++ // MIR for `dominate_storage` after ReferencePropagation\n+  \n+  fn dominate_storage() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:23: +0:23\n+      let mut _1: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _2: &i32;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _4: bool;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _5: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _6: bool;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+          goto -> bb1;                     // scope 0 at $DIR/reference_prop.rs:+8:11: +8:20\n+      }\n+  \n+      bb1: {\n+          _1 = const 5_i32;                // scope 0 at $DIR/reference_prop.rs:+10:13: +10:18\n+          _2 = &_1;                        // scope 0 at $DIR/reference_prop.rs:+11:13: +11:19\n+          goto -> bb2;                     // scope 0 at $DIR/reference_prop.rs:+12:13: +12:22\n+      }\n+  \n+      bb2: {\n+          _5 = (*_2);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _0 = opaque::<i32>(_5) -> bb3;   // scope 0 at $DIR/reference_prop.rs:+16:13: +16:38\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:383:28: 383:34\n+                                           // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+19:13: +19:27\n+          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+20:13: +20:27\n+          _6 = const true;                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          switchInt(_6) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/reference_prop.rs:+22:13: +22:47\n+      }\n+  }\n+  "}, {"sha": "920755bdd1df94592ec0ca3a98ad6c74f19c22b7", "filename": "tests/mir-opt/reference_prop.maybe_dead.ReferencePropagation.diff", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,56 @@\n+- // MIR for `maybe_dead` before ReferencePropagation\n++ // MIR for `maybe_dead` after ReferencePropagation\n+  \n+  fn maybe_dead(_1: bool) -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:24: +0:24\n+      let mut _2: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _4: &i32;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _5: &mut i32;                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _6: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _7: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _8: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/reference_prop.rs:+7:13: +7:27\n+          StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+8:13: +8:27\n+          _2 = const 5_i32;                // scope 0 at $DIR/reference_prop.rs:+9:13: +9:18\n+          _3 = const 5_i32;                // scope 0 at $DIR/reference_prop.rs:+10:13: +10:18\n+          _4 = &_2;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _5 = &mut _3;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          (*_5) = const 7_i32;             // scope 0 at $DIR/reference_prop.rs:+14:13: +14:19\n+-         _6 = (*_4);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n++         _6 = _2;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          switchInt(_1) -> [1: bb1, otherwise: bb2]; // scope 0 at $DIR/reference_prop.rs:+17:13: +17:46\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+20:13: +20:27\n+          StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+21:13: +21:27\n+          _0 = opaque::<i32>(_6) -> bb2;   // scope 0 at $DIR/reference_prop.rs:+22:13: +22:38\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:417:28: 417:34\n+                                           // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          _7 = (*_4);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _0 = opaque::<i32>(_7) -> bb3;   // scope 0 at $DIR/reference_prop.rs:+27:13: +27:38\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:422:28: 422:34\n+                                           // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          _8 = (*_5);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _0 = opaque::<i32>(_8) -> bb4;   // scope 0 at $DIR/reference_prop.rs:+33:13: +33:43\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:428:33: 428:39\n+                                           // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4: {\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+36:13: +36:21\n+      }\n+  }\n+  "}, {"sha": "07bfdf0b2f12dd32c24cca1a963df24cfbd88c5d", "filename": "tests/mir-opt/reference_prop.multiple_storage.ReferencePropagation.diff", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,27 @@\n+- // MIR for `multiple_storage` before ReferencePropagation\n++ // MIR for `multiple_storage` after ReferencePropagation\n+  \n+  fn multiple_storage() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:23: +0:23\n+      let mut _1: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _2: &i32;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+6:13: +6:27\n+          _1 = const 5_i32;                // scope 0 at $DIR/reference_prop.rs:+7:13: +7:18\n+          _2 = &_1;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+9:13: +9:27\n+          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+10:13: +10:27\n+          _3 = (*_2);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _0 = opaque::<i32>(_3) -> bb1;   // scope 0 at $DIR/reference_prop.rs:+14:13: +14:43\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:357:33: 357:39\n+                                           // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+18:13: +18:21\n+      }\n+  }\n+  "}, {"sha": "a7d505c69066b4b3b187b4a1e2d4db07ba84285e", "filename": "tests/mir-opt/reference_prop.read_through_raw.ReferencePropagation.diff", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.read_through_raw.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.read_through_raw.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.read_through_raw.ReferencePropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,24 @@\n+- // MIR for `read_through_raw` before ReferencePropagation\n++ // MIR for `read_through_raw` after ReferencePropagation\n+  \n+  fn read_through_raw(_1: &mut usize) -> usize {\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/reference_prop.rs:+0:39: +0:44\n+      let mut _2: &mut usize;              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: &mut usize;              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _4: *mut usize;              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _5: *mut usize;              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+          _2 = &mut (*_1);                 // scope 0 at $DIR/reference_prop.rs:+10:13: +10:25\n+-         _3 = &mut (*_2);                 // scope 0 at $DIR/reference_prop.rs:+11:13: +11:26\n+-         _4 = &raw mut (*_2);             // scope 0 at $DIR/reference_prop.rs:+12:13: +12:30\n+-         _5 = &raw mut (*_3);             // scope 0 at $DIR/reference_prop.rs:+13:13: +13:30\n+-         _0 = (*_4);                      // scope 0 at $DIR/reference_prop.rs:+15:13: +15:22\n+-         _0 = (*_5);                      // scope 0 at $DIR/reference_prop.rs:+16:13: +16:22\n++         _3 = &mut (*_1);                 // scope 0 at $DIR/reference_prop.rs:+11:13: +11:26\n++         _0 = (*_2);                      // scope 0 at $DIR/reference_prop.rs:+15:13: +15:22\n++         _0 = (*_3);                      // scope 0 at $DIR/reference_prop.rs:+16:13: +16:22\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+17:13: +17:21\n+      }\n+  }\n+  "}, {"sha": "e41fc28461afa7ad3ede6c1e0ef7f6bceaa893b7", "filename": "tests/mir-opt/reference_prop.reference_propagation.ReferencePropagation.diff", "status": "added", "additions": 375, "deletions": 0, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,375 @@\n+- // MIR for `reference_propagation` before ReferencePropagation\n++ // MIR for `reference_propagation` after ReferencePropagation\n+  \n+  fn reference_propagation(_1: &T, _2: &T) -> () {\n+      debug single => _1;                  // in scope 0 at $DIR/reference_prop.rs:+0:39: +0:45\n+      debug multiple => _2;                // in scope 0 at $DIR/reference_prop.rs:+0:54: +0:66\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:75: +0:75\n+      let _3: ();                          // in scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n+      let _4: usize;                       // in scope 0 at $DIR/reference_prop.rs:+3:13: +3:14\n+      let _7: ();                          // in scope 0 at $DIR/reference_prop.rs:+6:9: +6:19\n+      let mut _8: ();                      // in scope 0 at $DIR/reference_prop.rs:+6:16: +6:18\n+      let _9: ();                          // in scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n+      let _10: usize;                      // in scope 0 at $DIR/reference_prop.rs:+11:13: +11:14\n+      let mut _13: &usize;                 // in scope 0 at $DIR/reference_prop.rs:+14:13: +14:16\n+      let _14: &usize;                     // in scope 0 at $DIR/reference_prop.rs:+14:13: +14:16\n+      let _16: ();                         // in scope 0 at $DIR/reference_prop.rs:+17:9: +17:19\n+      let mut _17: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n+      let _18: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n+      let _19: usize;                      // in scope 0 at $DIR/reference_prop.rs:+22:13: +22:14\n+      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n+      let mut _24: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _25: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n+      let _26: usize;                      // in scope 0 at $DIR/reference_prop.rs:+31:13: +31:14\n+      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n+      let mut _31: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _32: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n+      let _33: usize;                      // in scope 0 at $DIR/reference_prop.rs:+40:13: +40:14\n+      let _36: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n+      let mut _37: &usize;                 // in scope 0 at $DIR/reference_prop.rs:+43:16: +43:17\n+      let _38: ();                         // in scope 0 at $DIR/reference_prop.rs:+47:5: +57:6\n+      let _39: usize;                      // in scope 0 at $DIR/reference_prop.rs:+48:13: +48:14\n+      let _45: ();                         // in scope 0 at $DIR/reference_prop.rs:+56:9: +56:19\n+      let mut _46: &usize;                 // in scope 0 at $DIR/reference_prop.rs:+56:16: +56:18\n+      let _47: ();                         // in scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n+      let _48: &T;                         // in scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n+      let _50: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n+      let mut _51: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n+      let _52: &T;                         // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+      let mut _53: &T;                     // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n+      let _54: &T;                         // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n+      let _56: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _57: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      scope 1 {\n+          debug a => _4;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n+          let _5: &usize;                  // in scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n+          scope 2 {\n+              debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+              let _6: usize;               // in scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n+              scope 3 {\n+                  debug c => _6;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n+              }\n+          }\n+      }\n+      scope 4 {\n+          debug a => _10;                  // in scope 4 at $DIR/reference_prop.rs:+11:13: +11:14\n+          let _11: usize;                  // in scope 4 at $DIR/reference_prop.rs:+12:13: +12:15\n+          scope 5 {\n+              debug a2 => _11;             // in scope 5 at $DIR/reference_prop.rs:+12:13: +12:15\n+              let mut _12: &usize;         // in scope 5 at $DIR/reference_prop.rs:+13:13: +13:18\n+              scope 6 {\n+                  debug b => _12;          // in scope 6 at $DIR/reference_prop.rs:+13:13: +13:18\n+                  let _15: usize;          // in scope 6 at $DIR/reference_prop.rs:+16:13: +16:14\n+                  scope 7 {\n+                      debug c => _15;      // in scope 7 at $DIR/reference_prop.rs:+16:13: +16:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 8 {\n+          debug a => _19;                  // in scope 8 at $DIR/reference_prop.rs:+22:13: +22:14\n+          let _20: &usize;                 // in scope 8 at $DIR/reference_prop.rs:+23:13: +23:14\n+          scope 9 {\n+              debug b => _20;              // in scope 9 at $DIR/reference_prop.rs:+23:13: +23:14\n+              let _21: &&usize;            // in scope 9 at $DIR/reference_prop.rs:+24:13: +24:14\n+              scope 10 {\n+                  debug d => _21;          // in scope 10 at $DIR/reference_prop.rs:+24:13: +24:14\n+                  let _22: usize;          // in scope 10 at $DIR/reference_prop.rs:+25:13: +25:14\n+                  scope 11 {\n+                      debug c => _22;      // in scope 11 at $DIR/reference_prop.rs:+25:13: +25:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 12 {\n+          debug a => _26;                  // in scope 12 at $DIR/reference_prop.rs:+31:13: +31:14\n+          let mut _27: &usize;             // in scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n+          scope 13 {\n+              debug b => _27;              // in scope 13 at $DIR/reference_prop.rs:+32:13: +32:18\n+              let _28: &mut &usize;        // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n+              scope 14 {\n+                  debug d => _28;          // in scope 14 at $DIR/reference_prop.rs:+33:13: +33:14\n+                  let _29: usize;          // in scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n+                  scope 15 {\n+                      debug c => _29;      // in scope 15 at $DIR/reference_prop.rs:+34:13: +34:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 16 {\n+          debug a => _33;                  // in scope 16 at $DIR/reference_prop.rs:+40:13: +40:14\n+          let _34: &usize;                 // in scope 16 at $DIR/reference_prop.rs:+41:13: +41:14\n+          scope 17 {\n+              debug b => _34;              // in scope 17 at $DIR/reference_prop.rs:+41:13: +41:14\n+              let _35: usize;              // in scope 17 at $DIR/reference_prop.rs:+42:13: +42:14\n+              scope 18 {\n+                  debug c => _35;          // in scope 18 at $DIR/reference_prop.rs:+42:13: +42:14\n+              }\n+          }\n+      }\n+      scope 19 {\n+          debug a => _39;                  // in scope 19 at $DIR/reference_prop.rs:+48:13: +48:14\n+          let _40: &usize;                 // in scope 19 at $DIR/reference_prop.rs:+49:13: +49:15\n+          scope 20 {\n+              debug b1 => _40;             // in scope 20 at $DIR/reference_prop.rs:+49:13: +49:15\n+              let _41: usize;              // in scope 20 at $DIR/reference_prop.rs:+50:13: +50:14\n+              scope 21 {\n+                  debug c => _41;          // in scope 21 at $DIR/reference_prop.rs:+50:13: +50:14\n+                  let _42: &usize;         // in scope 21 at $DIR/reference_prop.rs:+51:13: +51:15\n+                  scope 22 {\n+                      debug b2 => _42;     // in scope 22 at $DIR/reference_prop.rs:+51:13: +51:15\n+                      let _43: usize;      // in scope 22 at $DIR/reference_prop.rs:+52:13: +52:15\n+                      scope 23 {\n+                          debug c2 => _43; // in scope 23 at $DIR/reference_prop.rs:+52:13: +52:15\n+                          let _44: &usize; // in scope 23 at $DIR/reference_prop.rs:+53:13: +53:15\n+                          scope 24 {\n+                              debug b3 => _44; // in scope 24 at $DIR/reference_prop.rs:+53:13: +53:15\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 25 {\n+          debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n+          let _49: T;                      // in scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n+          scope 26 {\n+              debug b => _49;              // in scope 26 at $DIR/reference_prop.rs:+62:13: +62:14\n+          }\n+      }\n+      scope 27 {\n+          debug a => _52;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _55: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          scope 28 {\n+              debug b => _55;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n+          StorageLive(_4);                 // scope 0 at $DIR/reference_prop.rs:+3:13: +3:14\n+          _4 = const 5_usize;              // scope 0 at $DIR/reference_prop.rs:+3:17: +3:24\n+          StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n+          _5 = &_4;                        // scope 1 at $DIR/reference_prop.rs:+4:17: +4:19\n+          StorageLive(_6);                 // scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n+-         _6 = (*_5);                      // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n++         _6 = _4;                         // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n+          StorageLive(_7);                 // scope 3 at $DIR/reference_prop.rs:+6:9: +6:19\n+          StorageLive(_8);                 // scope 3 at $DIR/reference_prop.rs:+6:16: +6:18\n+          _8 = ();                         // scope 3 at $DIR/reference_prop.rs:+6:16: +6:18\n+          _7 = opaque::<()>(move _8) -> bb1; // scope 3 at $DIR/reference_prop.rs:+6:9: +6:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:16:9: 16:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_8);                 // scope 3 at $DIR/reference_prop.rs:+6:18: +6:19\n+          StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+6:19: +6:20\n+-         _3 = const ();                   // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n+          StorageDead(_6);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageDead(_4);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n+          StorageLive(_10);                // scope 0 at $DIR/reference_prop.rs:+11:13: +11:14\n+          _10 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+11:17: +11:24\n+          StorageLive(_11);                // scope 4 at $DIR/reference_prop.rs:+12:13: +12:15\n+          _11 = const 7_usize;             // scope 4 at $DIR/reference_prop.rs:+12:18: +12:25\n+          StorageLive(_12);                // scope 5 at $DIR/reference_prop.rs:+13:13: +13:18\n+          _12 = &_10;                      // scope 5 at $DIR/reference_prop.rs:+13:21: +13:23\n+          StorageLive(_13);                // scope 6 at $DIR/reference_prop.rs:+14:13: +14:16\n+-         StorageLive(_14);                // scope 6 at $DIR/reference_prop.rs:+14:13: +14:16\n+-         _14 = &_11;                      // scope 6 at $DIR/reference_prop.rs:+14:13: +14:16\n+-         _13 = &(*_14);                   // scope 6 at $DIR/reference_prop.rs:+14:13: +14:16\n++         _13 = &_11;                      // scope 6 at $DIR/reference_prop.rs:+14:13: +14:16\n+          _12 = move _13;                  // scope 6 at $DIR/reference_prop.rs:+14:9: +14:16\n+          StorageDead(_13);                // scope 6 at $DIR/reference_prop.rs:+14:15: +14:16\n+-         StorageDead(_14);                // scope 6 at $DIR/reference_prop.rs:+14:16: +14:17\n+          StorageLive(_15);                // scope 6 at $DIR/reference_prop.rs:+16:13: +16:14\n+          _15 = (*_12);                    // scope 6 at $DIR/reference_prop.rs:+16:17: +16:19\n+          StorageLive(_16);                // scope 7 at $DIR/reference_prop.rs:+17:9: +17:19\n+          StorageLive(_17);                // scope 7 at $DIR/reference_prop.rs:+17:16: +17:18\n+          _17 = ();                        // scope 7 at $DIR/reference_prop.rs:+17:16: +17:18\n+          _16 = opaque::<()>(move _17) -> bb2; // scope 7 at $DIR/reference_prop.rs:+17:9: +17:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:27:9: 27:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_17);                // scope 7 at $DIR/reference_prop.rs:+17:18: +17:19\n+          StorageDead(_16);                // scope 7 at $DIR/reference_prop.rs:+17:19: +17:20\n+-         _9 = const ();                   // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n+          StorageDead(_15);                // scope 6 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_12);                // scope 5 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_11);                // scope 4 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_10);                // scope 0 at $DIR/reference_prop.rs:+18:5: +18:6\n+-         StorageDead(_9);                 // scope 0 at $DIR/reference_prop.rs:+18:5: +18:6\n+-         StorageLive(_18);                // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n+          StorageLive(_19);                // scope 0 at $DIR/reference_prop.rs:+22:13: +22:14\n+          _19 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+22:17: +22:24\n+          StorageLive(_20);                // scope 8 at $DIR/reference_prop.rs:+23:13: +23:14\n+          _20 = &_19;                      // scope 8 at $DIR/reference_prop.rs:+23:17: +23:19\n+          StorageLive(_21);                // scope 9 at $DIR/reference_prop.rs:+24:13: +24:14\n+          _21 = &_20;                      // scope 9 at $DIR/reference_prop.rs:+24:17: +24:19\n+          StorageLive(_22);                // scope 10 at $DIR/reference_prop.rs:+25:13: +25:14\n+          _22 = (*_20);                    // scope 10 at $DIR/reference_prop.rs:+25:17: +25:19\n+          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n+          _24 = ();                        // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n+          _23 = opaque::<()>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:36:9: 36:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n+          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:19: +26:20\n+-         _18 = const ();                  // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n+          StorageDead(_22);                // scope 10 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_21);                // scope 9 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_20);                // scope 8 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_19);                // scope 0 at $DIR/reference_prop.rs:+27:5: +27:6\n+-         StorageDead(_18);                // scope 0 at $DIR/reference_prop.rs:+27:5: +27:6\n+-         StorageLive(_25);                // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n+          StorageLive(_26);                // scope 0 at $DIR/reference_prop.rs:+31:13: +31:14\n+          _26 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+31:17: +31:24\n+          StorageLive(_27);                // scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n+          _27 = &_26;                      // scope 12 at $DIR/reference_prop.rs:+32:21: +32:23\n+          StorageLive(_28);                // scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n+          _28 = &mut _27;                  // scope 13 at $DIR/reference_prop.rs:+33:17: +33:23\n+          StorageLive(_29);                // scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n+          _29 = (*_27);                    // scope 14 at $DIR/reference_prop.rs:+34:17: +34:19\n+          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n+          _31 = ();                        // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n+          _30 = opaque::<()>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:45:9: 45:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4: {\n+          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n+          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:19: +35:20\n+-         _25 = const ();                  // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n+          StorageDead(_29);                // scope 14 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_28);                // scope 13 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_27);                // scope 12 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_26);                // scope 0 at $DIR/reference_prop.rs:+36:5: +36:6\n+-         StorageDead(_25);                // scope 0 at $DIR/reference_prop.rs:+36:5: +36:6\n+-         StorageLive(_32);                // scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n+          StorageLive(_33);                // scope 0 at $DIR/reference_prop.rs:+40:13: +40:14\n+          _33 = const 7_usize;             // scope 0 at $DIR/reference_prop.rs:+40:17: +40:24\n+          StorageLive(_34);                // scope 16 at $DIR/reference_prop.rs:+41:13: +41:14\n+          _34 = &_33;                      // scope 16 at $DIR/reference_prop.rs:+41:17: +41:19\n+          StorageLive(_35);                // scope 17 at $DIR/reference_prop.rs:+42:13: +42:14\n+-         _35 = (*_34);                    // scope 17 at $DIR/reference_prop.rs:+42:17: +42:19\n++         _35 = _33;                       // scope 17 at $DIR/reference_prop.rs:+42:17: +42:19\n+          StorageLive(_36);                // scope 18 at $DIR/reference_prop.rs:+43:9: +43:18\n+          StorageLive(_37);                // scope 18 at $DIR/reference_prop.rs:+43:16: +43:17\n+          _37 = _34;                       // scope 18 at $DIR/reference_prop.rs:+43:16: +43:17\n+          _36 = opaque::<&usize>(move _37) -> bb5; // scope 18 at $DIR/reference_prop.rs:+43:9: +43:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:53:9: 53:15\n+                                           // + literal: Const { ty: fn(&usize) {opaque::<&usize>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_37);                // scope 18 at $DIR/reference_prop.rs:+43:17: +43:18\n+          StorageDead(_36);                // scope 18 at $DIR/reference_prop.rs:+43:18: +43:19\n+-         _32 = const ();                  // scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n+          StorageDead(_35);                // scope 17 at $DIR/reference_prop.rs:+44:5: +44:6\n+          StorageDead(_34);                // scope 16 at $DIR/reference_prop.rs:+44:5: +44:6\n+          StorageDead(_33);                // scope 0 at $DIR/reference_prop.rs:+44:5: +44:6\n+-         StorageDead(_32);                // scope 0 at $DIR/reference_prop.rs:+44:5: +44:6\n+-         StorageLive(_38);                // scope 0 at $DIR/reference_prop.rs:+47:5: +57:6\n+          StorageLive(_39);                // scope 0 at $DIR/reference_prop.rs:+48:13: +48:14\n+          _39 = const 7_usize;             // scope 0 at $DIR/reference_prop.rs:+48:17: +48:24\n+          StorageLive(_40);                // scope 19 at $DIR/reference_prop.rs:+49:13: +49:15\n+          _40 = &_39;                      // scope 19 at $DIR/reference_prop.rs:+49:18: +49:20\n+          StorageLive(_41);                // scope 20 at $DIR/reference_prop.rs:+50:13: +50:14\n+-         _41 = (*_40);                    // scope 20 at $DIR/reference_prop.rs:+50:17: +50:20\n++         _41 = _39;                       // scope 20 at $DIR/reference_prop.rs:+50:17: +50:20\n+          StorageLive(_42);                // scope 21 at $DIR/reference_prop.rs:+51:13: +51:15\n+          _42 = _40;                       // scope 21 at $DIR/reference_prop.rs:+51:18: +51:20\n+          StorageLive(_43);                // scope 22 at $DIR/reference_prop.rs:+52:13: +52:15\n+-         _43 = (*_42);                    // scope 22 at $DIR/reference_prop.rs:+52:18: +52:21\n++         _43 = _39;                       // scope 22 at $DIR/reference_prop.rs:+52:18: +52:21\n+          StorageLive(_44);                // scope 23 at $DIR/reference_prop.rs:+53:13: +53:15\n+          _44 = _42;                       // scope 23 at $DIR/reference_prop.rs:+53:18: +53:20\n+          StorageLive(_45);                // scope 24 at $DIR/reference_prop.rs:+56:9: +56:19\n+          StorageLive(_46);                // scope 24 at $DIR/reference_prop.rs:+56:16: +56:18\n+          _46 = _44;                       // scope 24 at $DIR/reference_prop.rs:+56:16: +56:18\n+          _45 = opaque::<&usize>(move _46) -> bb6; // scope 24 at $DIR/reference_prop.rs:+56:9: +56:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:66:9: 66:15\n+                                           // + literal: Const { ty: fn(&usize) {opaque::<&usize>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_46);                // scope 24 at $DIR/reference_prop.rs:+56:18: +56:19\n+          StorageDead(_45);                // scope 24 at $DIR/reference_prop.rs:+56:19: +56:20\n+-         _38 = const ();                  // scope 0 at $DIR/reference_prop.rs:+47:5: +57:6\n+          StorageDead(_44);                // scope 23 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_43);                // scope 22 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_42);                // scope 21 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_41);                // scope 20 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_40);                // scope 19 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_39);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n+-         StorageDead(_38);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n+-         StorageLive(_47);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n+          StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n+          _48 = &(*_1);                    // scope 0 at $DIR/reference_prop.rs:+61:17: +61:25\n+          StorageLive(_49);                // scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n+-         _49 = (*_48);                    // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n++         _49 = (*_1);                     // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n+          StorageLive(_50);                // scope 26 at $DIR/reference_prop.rs:+63:9: +63:19\n+          StorageLive(_51);                // scope 26 at $DIR/reference_prop.rs:+63:16: +63:18\n+          _51 = ();                        // scope 26 at $DIR/reference_prop.rs:+63:16: +63:18\n+          _50 = opaque::<()>(move _51) -> bb7; // scope 26 at $DIR/reference_prop.rs:+63:9: +63:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:73:9: 73:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb7: {\n+          StorageDead(_51);                // scope 26 at $DIR/reference_prop.rs:+63:18: +63:19\n+          StorageDead(_50);                // scope 26 at $DIR/reference_prop.rs:+63:19: +63:20\n+-         _47 = const ();                  // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n+          StorageDead(_49);                // scope 25 at $DIR/reference_prop.rs:+64:5: +64:6\n+          StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_47);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+          StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _52 = &(*_2);                    // scope 0 at $DIR/reference_prop.rs:+68:17: +68:27\n+          StorageLive(_53);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         _54 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         _53 = &(*_54);                   // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n++         _53 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+          _2 = move _53;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:28\n+          StorageDead(_53);                // scope 27 at $DIR/reference_prop.rs:+69:27: +69:28\n+-         StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:28: +69:29\n+          StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _55 = (*_52);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_56);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _57 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _56 = opaque::<()>(move _57) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:81:9: 81:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb8: {\n+          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_56);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+      }\n+  }\n+  "}, {"sha": "712727915d0083d6ad3e5ea14754f3cd0b01395b", "filename": "tests/mir-opt/reference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "status": "added", "additions": 431, "deletions": 0, "changes": 431, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,431 @@\n+- // MIR for `reference_propagation_const_ptr` before ReferencePropagation\n++ // MIR for `reference_propagation_const_ptr` after ReferencePropagation\n+  \n+  fn reference_propagation_const_ptr(_1: *const T, _2: *const T) -> () {\n+      debug single => _1;                  // in scope 0 at $DIR/reference_prop.rs:+0:45: +0:51\n+      debug multiple => _2;                // in scope 0 at $DIR/reference_prop.rs:+0:63: +0:75\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:87: +0:87\n+      let _3: ();                          // in scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n+      let _7: ();                          // in scope 0 at $DIR/reference_prop.rs:+6:9: +6:19\n+      let mut _8: ();                      // in scope 0 at $DIR/reference_prop.rs:+6:16: +6:18\n+      let _9: ();                          // in scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n+      let mut _13: *const usize;           // in scope 0 at $DIR/reference_prop.rs:+14:13: +14:26\n+      let _15: ();                         // in scope 0 at $DIR/reference_prop.rs:+17:9: +17:19\n+      let mut _16: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n+      let _17: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n+      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n+      let mut _23: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _24: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n+      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n+      let mut _30: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _31: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n+      let _35: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n+      let mut _36: *const usize;           // in scope 0 at $DIR/reference_prop.rs:+43:16: +43:17\n+      let _37: ();                         // in scope 0 at $DIR/reference_prop.rs:+47:5: +57:6\n+      let _44: ();                         // in scope 0 at $DIR/reference_prop.rs:+56:9: +56:19\n+      let mut _45: *const usize;           // in scope 0 at $DIR/reference_prop.rs:+56:16: +56:18\n+      let _46: ();                         // in scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n+      let _49: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n+      let mut _50: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n+      let _51: ();                         // in scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+      let mut _53: *const T;               // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:38\n+      let _55: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _56: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _61: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _62: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      scope 1 {\n+          let _4: usize;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n+          scope 2 {\n+              debug a => _4;               // in scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n+              let _5: *const usize;        // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+              scope 3 {\n+                  debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n+                  let _6: usize;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n+                  scope 4 {\n+                      debug c => _6;       // in scope 4 at $DIR/reference_prop.rs:+5:13: +5:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 5 {\n+          let _10: usize;                  // in scope 5 at $DIR/reference_prop.rs:+11:13: +11:14\n+          scope 6 {\n+              debug a => _10;              // in scope 6 at $DIR/reference_prop.rs:+11:13: +11:14\n+              let _11: usize;              // in scope 6 at $DIR/reference_prop.rs:+12:13: +12:15\n+              scope 7 {\n+                  debug a2 => _11;         // in scope 7 at $DIR/reference_prop.rs:+12:13: +12:15\n+                  let mut _12: *const usize; // in scope 7 at $DIR/reference_prop.rs:+13:13: +13:18\n+                  scope 8 {\n+                      debug b => _12;      // in scope 8 at $DIR/reference_prop.rs:+13:13: +13:18\n+                      let _14: usize;      // in scope 8 at $DIR/reference_prop.rs:+16:13: +16:14\n+                      scope 9 {\n+                          debug c => _14;  // in scope 9 at $DIR/reference_prop.rs:+16:13: +16:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 10 {\n+          let _18: usize;                  // in scope 10 at $DIR/reference_prop.rs:+22:13: +22:14\n+          scope 11 {\n+              debug a => _18;              // in scope 11 at $DIR/reference_prop.rs:+22:13: +22:14\n+              let _19: *const usize;       // in scope 11 at $DIR/reference_prop.rs:+23:13: +23:14\n+              scope 12 {\n+                  debug b => _19;          // in scope 12 at $DIR/reference_prop.rs:+23:13: +23:14\n+                  let _20: &*const usize;  // in scope 12 at $DIR/reference_prop.rs:+24:13: +24:14\n+                  scope 13 {\n+                      debug d => _20;      // in scope 13 at $DIR/reference_prop.rs:+24:13: +24:14\n+                      let _21: usize;      // in scope 13 at $DIR/reference_prop.rs:+25:13: +25:14\n+                      scope 14 {\n+                          debug c => _21;  // in scope 14 at $DIR/reference_prop.rs:+25:13: +25:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 15 {\n+          let _25: usize;                  // in scope 15 at $DIR/reference_prop.rs:+31:13: +31:14\n+          scope 16 {\n+              debug a => _25;              // in scope 16 at $DIR/reference_prop.rs:+31:13: +31:14\n+              let mut _26: *const usize;   // in scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n+              scope 17 {\n+                  debug b => _26;          // in scope 17 at $DIR/reference_prop.rs:+32:13: +32:18\n+                  let _27: &mut *const usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n+                  scope 18 {\n+                      debug d => _27;      // in scope 18 at $DIR/reference_prop.rs:+33:13: +33:14\n+                      let _28: usize;      // in scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n+                      scope 19 {\n+                          debug c => _28;  // in scope 19 at $DIR/reference_prop.rs:+34:13: +34:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 20 {\n+          let _32: usize;                  // in scope 20 at $DIR/reference_prop.rs:+40:13: +40:14\n+          scope 21 {\n+              debug a => _32;              // in scope 21 at $DIR/reference_prop.rs:+40:13: +40:14\n+              let _33: *const usize;       // in scope 21 at $DIR/reference_prop.rs:+41:13: +41:14\n+              scope 22 {\n+                  debug b => _33;          // in scope 22 at $DIR/reference_prop.rs:+41:13: +41:14\n+                  let _34: usize;          // in scope 22 at $DIR/reference_prop.rs:+42:13: +42:14\n+                  scope 23 {\n+                      debug c => _34;      // in scope 23 at $DIR/reference_prop.rs:+42:13: +42:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 24 {\n+          let _38: usize;                  // in scope 24 at $DIR/reference_prop.rs:+48:13: +48:14\n+          scope 25 {\n+              debug a => _38;              // in scope 25 at $DIR/reference_prop.rs:+48:13: +48:14\n+              let _39: *const usize;       // in scope 25 at $DIR/reference_prop.rs:+49:13: +49:15\n+              scope 26 {\n+                  debug b1 => _39;         // in scope 26 at $DIR/reference_prop.rs:+49:13: +49:15\n+                  let _40: usize;          // in scope 26 at $DIR/reference_prop.rs:+50:13: +50:14\n+                  scope 27 {\n+                      debug c => _40;      // in scope 27 at $DIR/reference_prop.rs:+50:13: +50:14\n+                      let _41: *const usize; // in scope 27 at $DIR/reference_prop.rs:+51:13: +51:15\n+                      scope 28 {\n+                          debug b2 => _41; // in scope 28 at $DIR/reference_prop.rs:+51:13: +51:15\n+                          let _42: usize;  // in scope 28 at $DIR/reference_prop.rs:+52:13: +52:15\n+                          scope 29 {\n+                              debug c2 => _42; // in scope 29 at $DIR/reference_prop.rs:+52:13: +52:15\n+                              let _43: *const usize; // in scope 29 at $DIR/reference_prop.rs:+53:13: +53:15\n+                              scope 30 {\n+                                  debug b3 => _43; // in scope 30 at $DIR/reference_prop.rs:+53:13: +53:15\n+                              }\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 31 {\n+          let _47: *const T;               // in scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n+          scope 32 {\n+              debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n+              let _48: T;                  // in scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n+              scope 33 {\n+                  debug b => _48;          // in scope 33 at $DIR/reference_prop.rs:+62:13: +62:14\n+              }\n+          }\n+      }\n+      scope 34 {\n+          let _52: *const T;               // in scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n+          scope 35 {\n+              debug a => _52;              // in scope 35 at $DIR/reference_prop.rs:+68:13: +68:14\n+              let _54: T;                  // in scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n+              scope 36 {\n+                  debug b => _54;          // in scope 36 at $DIR/reference_prop.rs:+70:13: +70:14\n+              }\n+          }\n+      }\n+      scope 37 {\n+          let _57: usize;                  // in scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n+          scope 38 {\n+              debug a => _57;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:14\n+              let _58: *const usize;       // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+              scope 39 {\n+                  debug b => _58;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n+                  let _59: *const usize;   // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+                  scope 40 {\n+                      debug c => _59;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n+                      let _60: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      scope 41 {\n+                          debug e => _60;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n+          StorageLive(_4);                 // scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n+          _4 = const 5_usize;              // scope 1 at $DIR/reference_prop.rs:+3:17: +3:24\n+          StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+          _5 = &raw const _4;              // scope 2 at $DIR/reference_prop.rs:+4:17: +4:29\n+          StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n+-         _6 = (*_5);                      // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n++         _6 = _4;                         // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n+          StorageLive(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:9: +6:19\n+          StorageLive(_8);                 // scope 4 at $DIR/reference_prop.rs:+6:16: +6:18\n+          _8 = ();                         // scope 4 at $DIR/reference_prop.rs:+6:16: +6:18\n+          _7 = opaque::<()>(move _8) -> bb1; // scope 4 at $DIR/reference_prop.rs:+6:9: +6:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:166:9: 166:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_8);                 // scope 4 at $DIR/reference_prop.rs:+6:18: +6:19\n+          StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:19: +6:20\n+-         _3 = const ();                   // scope 1 at $DIR/reference_prop.rs:+2:5: +7:6\n+          StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageDead(_4);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n+          StorageLive(_10);                // scope 5 at $DIR/reference_prop.rs:+11:13: +11:14\n+          _10 = const 5_usize;             // scope 5 at $DIR/reference_prop.rs:+11:17: +11:24\n+          StorageLive(_11);                // scope 6 at $DIR/reference_prop.rs:+12:13: +12:15\n+          _11 = const 7_usize;             // scope 6 at $DIR/reference_prop.rs:+12:18: +12:25\n+          StorageLive(_12);                // scope 7 at $DIR/reference_prop.rs:+13:13: +13:18\n+          _12 = &raw const _10;            // scope 7 at $DIR/reference_prop.rs:+13:21: +13:33\n+          StorageLive(_13);                // scope 8 at $DIR/reference_prop.rs:+14:13: +14:26\n+          _13 = &raw const _11;            // scope 8 at $DIR/reference_prop.rs:+14:13: +14:26\n+          _12 = move _13;                  // scope 8 at $DIR/reference_prop.rs:+14:9: +14:26\n+          StorageDead(_13);                // scope 8 at $DIR/reference_prop.rs:+14:25: +14:26\n+          StorageLive(_14);                // scope 8 at $DIR/reference_prop.rs:+16:13: +16:14\n+          _14 = (*_12);                    // scope 8 at $DIR/reference_prop.rs:+16:17: +16:19\n+          StorageLive(_15);                // scope 9 at $DIR/reference_prop.rs:+17:9: +17:19\n+          StorageLive(_16);                // scope 9 at $DIR/reference_prop.rs:+17:16: +17:18\n+          _16 = ();                        // scope 9 at $DIR/reference_prop.rs:+17:16: +17:18\n+          _15 = opaque::<()>(move _16) -> bb2; // scope 9 at $DIR/reference_prop.rs:+17:9: +17:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:177:9: 177:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_16);                // scope 9 at $DIR/reference_prop.rs:+17:18: +17:19\n+          StorageDead(_15);                // scope 9 at $DIR/reference_prop.rs:+17:19: +17:20\n+-         _9 = const ();                   // scope 5 at $DIR/reference_prop.rs:+10:5: +18:6\n+          StorageDead(_14);                // scope 8 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_12);                // scope 7 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_11);                // scope 6 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_10);                // scope 5 at $DIR/reference_prop.rs:+18:5: +18:6\n+-         StorageDead(_9);                 // scope 0 at $DIR/reference_prop.rs:+18:5: +18:6\n+-         StorageLive(_17);                // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n+          StorageLive(_18);                // scope 10 at $DIR/reference_prop.rs:+22:13: +22:14\n+          _18 = const 5_usize;             // scope 10 at $DIR/reference_prop.rs:+22:17: +22:24\n+          StorageLive(_19);                // scope 11 at $DIR/reference_prop.rs:+23:13: +23:14\n+          _19 = &raw const _18;            // scope 11 at $DIR/reference_prop.rs:+23:17: +23:29\n+          StorageLive(_20);                // scope 12 at $DIR/reference_prop.rs:+24:13: +24:14\n+          _20 = &_19;                      // scope 12 at $DIR/reference_prop.rs:+24:17: +24:19\n+          StorageLive(_21);                // scope 13 at $DIR/reference_prop.rs:+25:13: +25:14\n+          _21 = (*_19);                    // scope 13 at $DIR/reference_prop.rs:+25:17: +25:19\n+          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n+          _23 = ();                        // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n+          _22 = opaque::<()>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:186:9: 186:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n+          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:19: +26:20\n+-         _17 = const ();                  // scope 10 at $DIR/reference_prop.rs:+21:5: +27:6\n+          StorageDead(_21);                // scope 13 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_20);                // scope 12 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_19);                // scope 11 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_18);                // scope 10 at $DIR/reference_prop.rs:+27:5: +27:6\n+-         StorageDead(_17);                // scope 0 at $DIR/reference_prop.rs:+27:5: +27:6\n+-         StorageLive(_24);                // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n+          StorageLive(_25);                // scope 15 at $DIR/reference_prop.rs:+31:13: +31:14\n+          _25 = const 5_usize;             // scope 15 at $DIR/reference_prop.rs:+31:17: +31:24\n+          StorageLive(_26);                // scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n+          _26 = &raw const _25;            // scope 16 at $DIR/reference_prop.rs:+32:21: +32:33\n+          StorageLive(_27);                // scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n+          _27 = &mut _26;                  // scope 17 at $DIR/reference_prop.rs:+33:17: +33:23\n+          StorageLive(_28);                // scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n+          _28 = (*_26);                    // scope 18 at $DIR/reference_prop.rs:+34:17: +34:19\n+          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n+          _30 = ();                        // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n+          _29 = opaque::<()>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:195:9: 195:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4: {\n+          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n+          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:19: +35:20\n+-         _24 = const ();                  // scope 15 at $DIR/reference_prop.rs:+30:5: +36:6\n+          StorageDead(_28);                // scope 18 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_27);                // scope 17 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_26);                // scope 16 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_25);                // scope 15 at $DIR/reference_prop.rs:+36:5: +36:6\n+-         StorageDead(_24);                // scope 0 at $DIR/reference_prop.rs:+36:5: +36:6\n+-         StorageLive(_31);                // scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n+          StorageLive(_32);                // scope 20 at $DIR/reference_prop.rs:+40:13: +40:14\n+          _32 = const 7_usize;             // scope 20 at $DIR/reference_prop.rs:+40:17: +40:24\n+          StorageLive(_33);                // scope 21 at $DIR/reference_prop.rs:+41:13: +41:14\n+          _33 = &raw const _32;            // scope 21 at $DIR/reference_prop.rs:+41:17: +41:29\n+          StorageLive(_34);                // scope 22 at $DIR/reference_prop.rs:+42:13: +42:14\n+-         _34 = (*_33);                    // scope 22 at $DIR/reference_prop.rs:+42:17: +42:19\n++         _34 = _32;                       // scope 22 at $DIR/reference_prop.rs:+42:17: +42:19\n+          StorageLive(_35);                // scope 23 at $DIR/reference_prop.rs:+43:9: +43:18\n+          StorageLive(_36);                // scope 23 at $DIR/reference_prop.rs:+43:16: +43:17\n+          _36 = _33;                       // scope 23 at $DIR/reference_prop.rs:+43:16: +43:17\n+          _35 = opaque::<*const usize>(move _36) -> bb5; // scope 23 at $DIR/reference_prop.rs:+43:9: +43:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:203:9: 203:15\n+                                           // + literal: Const { ty: fn(*const usize) {opaque::<*const usize>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_36);                // scope 23 at $DIR/reference_prop.rs:+43:17: +43:18\n+          StorageDead(_35);                // scope 23 at $DIR/reference_prop.rs:+43:18: +43:19\n+-         _31 = const ();                  // scope 20 at $DIR/reference_prop.rs:+39:5: +44:6\n+          StorageDead(_34);                // scope 22 at $DIR/reference_prop.rs:+44:5: +44:6\n+          StorageDead(_33);                // scope 21 at $DIR/reference_prop.rs:+44:5: +44:6\n+          StorageDead(_32);                // scope 20 at $DIR/reference_prop.rs:+44:5: +44:6\n+-         StorageDead(_31);                // scope 0 at $DIR/reference_prop.rs:+44:5: +44:6\n+-         StorageLive(_37);                // scope 0 at $DIR/reference_prop.rs:+47:5: +57:6\n+          StorageLive(_38);                // scope 24 at $DIR/reference_prop.rs:+48:13: +48:14\n+          _38 = const 7_usize;             // scope 24 at $DIR/reference_prop.rs:+48:17: +48:24\n+          StorageLive(_39);                // scope 25 at $DIR/reference_prop.rs:+49:13: +49:15\n+          _39 = &raw const _38;            // scope 25 at $DIR/reference_prop.rs:+49:18: +49:30\n+          StorageLive(_40);                // scope 26 at $DIR/reference_prop.rs:+50:13: +50:14\n+-         _40 = (*_39);                    // scope 26 at $DIR/reference_prop.rs:+50:17: +50:20\n++         _40 = _38;                       // scope 26 at $DIR/reference_prop.rs:+50:17: +50:20\n+          StorageLive(_41);                // scope 27 at $DIR/reference_prop.rs:+51:13: +51:15\n+          _41 = _39;                       // scope 27 at $DIR/reference_prop.rs:+51:18: +51:20\n+          StorageLive(_42);                // scope 28 at $DIR/reference_prop.rs:+52:13: +52:15\n+-         _42 = (*_41);                    // scope 28 at $DIR/reference_prop.rs:+52:18: +52:21\n++         _42 = _38;                       // scope 28 at $DIR/reference_prop.rs:+52:18: +52:21\n+          StorageLive(_43);                // scope 29 at $DIR/reference_prop.rs:+53:13: +53:15\n+          _43 = _41;                       // scope 29 at $DIR/reference_prop.rs:+53:18: +53:20\n+          StorageLive(_44);                // scope 30 at $DIR/reference_prop.rs:+56:9: +56:19\n+          StorageLive(_45);                // scope 30 at $DIR/reference_prop.rs:+56:16: +56:18\n+          _45 = _43;                       // scope 30 at $DIR/reference_prop.rs:+56:16: +56:18\n+          _44 = opaque::<*const usize>(move _45) -> bb6; // scope 30 at $DIR/reference_prop.rs:+56:9: +56:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:216:9: 216:15\n+                                           // + literal: Const { ty: fn(*const usize) {opaque::<*const usize>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_45);                // scope 30 at $DIR/reference_prop.rs:+56:18: +56:19\n+          StorageDead(_44);                // scope 30 at $DIR/reference_prop.rs:+56:19: +56:20\n+-         _37 = const ();                  // scope 24 at $DIR/reference_prop.rs:+47:5: +57:6\n+          StorageDead(_43);                // scope 29 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_42);                // scope 28 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_41);                // scope 27 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_40);                // scope 26 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_39);                // scope 25 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_38);                // scope 24 at $DIR/reference_prop.rs:+57:5: +57:6\n+-         StorageDead(_37);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n+-         StorageLive(_46);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n+          StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n+          _47 = &raw const (*_1);          // scope 31 at $DIR/reference_prop.rs:+61:17: +61:35\n+          StorageLive(_48);                // scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n+-         _48 = (*_47);                    // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n++         _48 = (*_1);                     // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n+          StorageLive(_49);                // scope 33 at $DIR/reference_prop.rs:+63:9: +63:19\n+          StorageLive(_50);                // scope 33 at $DIR/reference_prop.rs:+63:16: +63:18\n+          _50 = ();                        // scope 33 at $DIR/reference_prop.rs:+63:16: +63:18\n+          _49 = opaque::<()>(move _50) -> bb7; // scope 33 at $DIR/reference_prop.rs:+63:9: +63:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:223:9: 223:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb7: {\n+          StorageDead(_50);                // scope 33 at $DIR/reference_prop.rs:+63:18: +63:19\n+          StorageDead(_49);                // scope 33 at $DIR/reference_prop.rs:+63:19: +63:20\n+-         _46 = const ();                  // scope 31 at $DIR/reference_prop.rs:+60:5: +64:6\n+          StorageDead(_48);                // scope 32 at $DIR/reference_prop.rs:+64:5: +64:6\n+          StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_46);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageLive(_51);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageLive(_52);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _52 = &raw const (*_2);          // scope 34 at $DIR/reference_prop.rs:+68:17: +68:37\n+          StorageLive(_53);                // scope 35 at $DIR/reference_prop.rs:+69:20: +69:38\n+          _53 = &raw const (*_1);          // scope 35 at $DIR/reference_prop.rs:+69:20: +69:38\n+          _2 = move _53;                   // scope 35 at $DIR/reference_prop.rs:+69:9: +69:38\n+          StorageDead(_53);                // scope 35 at $DIR/reference_prop.rs:+69:37: +69:38\n+          StorageLive(_54);                // scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _54 = (*_52);                    // scope 35 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_55);                // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_56);                // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _56 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _55 = opaque::<()>(move _56) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:231:9: 231:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb8: {\n+          StorageDead(_56);                // scope 36 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_55);                // scope 36 at $DIR/reference_prop.rs:+71:19: +71:20\n+-         _51 = const ();                  // scope 34 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_54);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_52);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageDead(_51);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageLive(_57);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n+          _57 = const 13_usize;            // scope 37 at $DIR/reference_prop.rs:+76:17: +76:25\n+          StorageLive(_58);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+          _58 = &raw const _57;            // scope 38 at $DIR/reference_prop.rs:+77:17: +77:29\n+          StorageLive(_59);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _59 = &raw const (*_58);         // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n++         _59 = &raw const _57;            // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n+          StorageLive(_60);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _60 = (*_59);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _60 = _57;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_61);                // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_62);                // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _62 = ();                        // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _61 = opaque::<()>(move _62) -> bb9; // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:240:9: 240:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_62);                // scope 41 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_61);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n+          _0 = const ();                   // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_60);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_59);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_58);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_57);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+82:2: +82:2\n+      }\n+  }\n+  "}, {"sha": "44ddbbc306621c0c616c2a596ccbbe6b73bf01e5", "filename": "tests/mir-opt/reference_prop.reference_propagation_mut.ReferencePropagation.diff", "status": "added", "additions": 372, "deletions": 0, "changes": 372, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,372 @@\n+- // MIR for `reference_propagation_mut` before ReferencePropagation\n++ // MIR for `reference_propagation_mut` after ReferencePropagation\n+  \n+  fn reference_propagation_mut(_1: &mut T, _2: &mut T) -> () {\n+      debug single => _1;                  // in scope 0 at $DIR/reference_prop.rs:+0:43: +0:49\n+      debug multiple => _2;                // in scope 0 at $DIR/reference_prop.rs:+0:62: +0:74\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:87: +0:87\n+      let _3: ();                          // in scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n+      let mut _4: usize;                   // in scope 0 at $DIR/reference_prop.rs:+3:13: +3:18\n+      let _7: ();                          // in scope 0 at $DIR/reference_prop.rs:+6:9: +6:19\n+      let mut _8: ();                      // in scope 0 at $DIR/reference_prop.rs:+6:16: +6:18\n+      let _9: ();                          // in scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n+      let mut _10: usize;                  // in scope 0 at $DIR/reference_prop.rs:+11:13: +11:18\n+      let mut _13: &mut usize;             // in scope 0 at $DIR/reference_prop.rs:+14:13: +14:20\n+      let mut _14: &mut usize;             // in scope 0 at $DIR/reference_prop.rs:+14:13: +14:20\n+      let _16: ();                         // in scope 0 at $DIR/reference_prop.rs:+17:9: +17:19\n+      let mut _17: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n+      let _18: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n+      let mut _19: usize;                  // in scope 0 at $DIR/reference_prop.rs:+22:13: +22:18\n+      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n+      let mut _24: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _25: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n+      let mut _26: usize;                  // in scope 0 at $DIR/reference_prop.rs:+31:13: +31:18\n+      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n+      let mut _31: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _32: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n+      let mut _33: usize;                  // in scope 0 at $DIR/reference_prop.rs:+40:13: +40:18\n+      let _36: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n+      let mut _37: &mut usize;             // in scope 0 at $DIR/reference_prop.rs:+43:16: +43:17\n+      let _38: ();                         // in scope 0 at $DIR/reference_prop.rs:+47:5: +57:6\n+      let mut _39: usize;                  // in scope 0 at $DIR/reference_prop.rs:+48:13: +48:18\n+      let _45: ();                         // in scope 0 at $DIR/reference_prop.rs:+56:9: +56:19\n+      let mut _46: &mut usize;             // in scope 0 at $DIR/reference_prop.rs:+56:16: +56:18\n+      let _47: ();                         // in scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n+      let _48: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n+      let _50: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n+      let mut _51: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n+      let _52: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+      let mut _53: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n+      let mut _54: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n+      let _56: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _57: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      scope 1 {\n+          debug a => _4;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n+          let _5: &mut usize;              // in scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n+          scope 2 {\n+              debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+              let _6: usize;               // in scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n+              scope 3 {\n+                  debug c => _6;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n+              }\n+          }\n+      }\n+      scope 4 {\n+          debug a => _10;                  // in scope 4 at $DIR/reference_prop.rs:+11:13: +11:18\n+          let mut _11: usize;              // in scope 4 at $DIR/reference_prop.rs:+12:13: +12:19\n+          scope 5 {\n+              debug a2 => _11;             // in scope 5 at $DIR/reference_prop.rs:+12:13: +12:19\n+              let mut _12: &mut usize;     // in scope 5 at $DIR/reference_prop.rs:+13:13: +13:18\n+              scope 6 {\n+                  debug b => _12;          // in scope 6 at $DIR/reference_prop.rs:+13:13: +13:18\n+                  let _15: usize;          // in scope 6 at $DIR/reference_prop.rs:+16:13: +16:14\n+                  scope 7 {\n+                      debug c => _15;      // in scope 7 at $DIR/reference_prop.rs:+16:13: +16:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 8 {\n+          debug a => _19;                  // in scope 8 at $DIR/reference_prop.rs:+22:13: +22:18\n+          let _20: &mut usize;             // in scope 8 at $DIR/reference_prop.rs:+23:13: +23:14\n+          scope 9 {\n+              debug b => _20;              // in scope 9 at $DIR/reference_prop.rs:+23:13: +23:14\n+              let _21: &&mut usize;        // in scope 9 at $DIR/reference_prop.rs:+24:13: +24:14\n+              scope 10 {\n+                  debug d => _21;          // in scope 10 at $DIR/reference_prop.rs:+24:13: +24:14\n+                  let _22: usize;          // in scope 10 at $DIR/reference_prop.rs:+25:13: +25:14\n+                  scope 11 {\n+                      debug c => _22;      // in scope 11 at $DIR/reference_prop.rs:+25:13: +25:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 12 {\n+          debug a => _26;                  // in scope 12 at $DIR/reference_prop.rs:+31:13: +31:18\n+          let mut _27: &mut usize;         // in scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n+          scope 13 {\n+              debug b => _27;              // in scope 13 at $DIR/reference_prop.rs:+32:13: +32:18\n+              let _28: &mut &mut usize;    // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n+              scope 14 {\n+                  debug d => _28;          // in scope 14 at $DIR/reference_prop.rs:+33:13: +33:14\n+                  let _29: usize;          // in scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n+                  scope 15 {\n+                      debug c => _29;      // in scope 15 at $DIR/reference_prop.rs:+34:13: +34:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 16 {\n+          debug a => _33;                  // in scope 16 at $DIR/reference_prop.rs:+40:13: +40:18\n+          let _34: &mut usize;             // in scope 16 at $DIR/reference_prop.rs:+41:13: +41:14\n+          scope 17 {\n+              debug b => _34;              // in scope 17 at $DIR/reference_prop.rs:+41:13: +41:14\n+              let _35: usize;              // in scope 17 at $DIR/reference_prop.rs:+42:13: +42:14\n+              scope 18 {\n+                  debug c => _35;          // in scope 18 at $DIR/reference_prop.rs:+42:13: +42:14\n+              }\n+          }\n+      }\n+      scope 19 {\n+          debug a => _39;                  // in scope 19 at $DIR/reference_prop.rs:+48:13: +48:18\n+          let _40: &mut usize;             // in scope 19 at $DIR/reference_prop.rs:+49:13: +49:15\n+          scope 20 {\n+              debug b1 => _40;             // in scope 20 at $DIR/reference_prop.rs:+49:13: +49:15\n+              let _41: usize;              // in scope 20 at $DIR/reference_prop.rs:+50:13: +50:14\n+              scope 21 {\n+                  debug c => _41;          // in scope 21 at $DIR/reference_prop.rs:+50:13: +50:14\n+                  let _42: &mut usize;     // in scope 21 at $DIR/reference_prop.rs:+51:13: +51:15\n+                  scope 22 {\n+                      debug b2 => _42;     // in scope 22 at $DIR/reference_prop.rs:+51:13: +51:15\n+                      let _43: usize;      // in scope 22 at $DIR/reference_prop.rs:+52:13: +52:15\n+                      scope 23 {\n+                          debug c2 => _43; // in scope 23 at $DIR/reference_prop.rs:+52:13: +52:15\n+                          let _44: &mut usize; // in scope 23 at $DIR/reference_prop.rs:+53:13: +53:15\n+                          scope 24 {\n+                              debug b3 => _44; // in scope 24 at $DIR/reference_prop.rs:+53:13: +53:15\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 25 {\n+          debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n+          let _49: T;                      // in scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n+          scope 26 {\n+              debug b => _49;              // in scope 26 at $DIR/reference_prop.rs:+62:13: +62:14\n+          }\n+      }\n+      scope 27 {\n+          debug a => _52;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _55: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          scope 28 {\n+              debug b => _55;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n+          StorageLive(_4);                 // scope 0 at $DIR/reference_prop.rs:+3:13: +3:18\n+          _4 = const 5_usize;              // scope 0 at $DIR/reference_prop.rs:+3:21: +3:28\n+          StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n+          _5 = &mut _4;                    // scope 1 at $DIR/reference_prop.rs:+4:17: +4:23\n+          StorageLive(_6);                 // scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n+-         _6 = (*_5);                      // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n++         _6 = _4;                         // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n+          StorageLive(_7);                 // scope 3 at $DIR/reference_prop.rs:+6:9: +6:19\n+          StorageLive(_8);                 // scope 3 at $DIR/reference_prop.rs:+6:16: +6:18\n+          _8 = ();                         // scope 3 at $DIR/reference_prop.rs:+6:16: +6:18\n+          _7 = opaque::<()>(move _8) -> bb1; // scope 3 at $DIR/reference_prop.rs:+6:9: +6:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:91:9: 91:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_8);                 // scope 3 at $DIR/reference_prop.rs:+6:18: +6:19\n+          StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+6:19: +6:20\n+-         _3 = const ();                   // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n+          StorageDead(_6);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageDead(_4);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n+          StorageLive(_10);                // scope 0 at $DIR/reference_prop.rs:+11:13: +11:18\n+          _10 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+11:21: +11:28\n+          StorageLive(_11);                // scope 4 at $DIR/reference_prop.rs:+12:13: +12:19\n+          _11 = const 7_usize;             // scope 4 at $DIR/reference_prop.rs:+12:22: +12:29\n+          StorageLive(_12);                // scope 5 at $DIR/reference_prop.rs:+13:13: +13:18\n+          _12 = &mut _10;                  // scope 5 at $DIR/reference_prop.rs:+13:21: +13:27\n+          StorageLive(_13);                // scope 6 at $DIR/reference_prop.rs:+14:13: +14:20\n+-         StorageLive(_14);                // scope 6 at $DIR/reference_prop.rs:+14:13: +14:20\n+-         _14 = &mut _11;                  // scope 6 at $DIR/reference_prop.rs:+14:13: +14:20\n+-         _13 = &mut (*_14);               // scope 6 at $DIR/reference_prop.rs:+14:13: +14:20\n++         _13 = &mut _11;                  // scope 6 at $DIR/reference_prop.rs:+14:13: +14:20\n+          _12 = move _13;                  // scope 6 at $DIR/reference_prop.rs:+14:9: +14:20\n+          StorageDead(_13);                // scope 6 at $DIR/reference_prop.rs:+14:19: +14:20\n+-         StorageDead(_14);                // scope 6 at $DIR/reference_prop.rs:+14:20: +14:21\n+          StorageLive(_15);                // scope 6 at $DIR/reference_prop.rs:+16:13: +16:14\n+          _15 = (*_12);                    // scope 6 at $DIR/reference_prop.rs:+16:17: +16:19\n+          StorageLive(_16);                // scope 7 at $DIR/reference_prop.rs:+17:9: +17:19\n+          StorageLive(_17);                // scope 7 at $DIR/reference_prop.rs:+17:16: +17:18\n+          _17 = ();                        // scope 7 at $DIR/reference_prop.rs:+17:16: +17:18\n+          _16 = opaque::<()>(move _17) -> bb2; // scope 7 at $DIR/reference_prop.rs:+17:9: +17:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:102:9: 102:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_17);                // scope 7 at $DIR/reference_prop.rs:+17:18: +17:19\n+          StorageDead(_16);                // scope 7 at $DIR/reference_prop.rs:+17:19: +17:20\n+-         _9 = const ();                   // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n+          StorageDead(_15);                // scope 6 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_12);                // scope 5 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_11);                // scope 4 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_10);                // scope 0 at $DIR/reference_prop.rs:+18:5: +18:6\n+-         StorageDead(_9);                 // scope 0 at $DIR/reference_prop.rs:+18:5: +18:6\n+-         StorageLive(_18);                // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n+          StorageLive(_19);                // scope 0 at $DIR/reference_prop.rs:+22:13: +22:18\n+          _19 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+22:21: +22:28\n+          StorageLive(_20);                // scope 8 at $DIR/reference_prop.rs:+23:13: +23:14\n+          _20 = &mut _19;                  // scope 8 at $DIR/reference_prop.rs:+23:17: +23:23\n+          StorageLive(_21);                // scope 9 at $DIR/reference_prop.rs:+24:13: +24:14\n+          _21 = &_20;                      // scope 9 at $DIR/reference_prop.rs:+24:17: +24:19\n+          StorageLive(_22);                // scope 10 at $DIR/reference_prop.rs:+25:13: +25:14\n+          _22 = (*_20);                    // scope 10 at $DIR/reference_prop.rs:+25:17: +25:19\n+          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n+          _24 = ();                        // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n+          _23 = opaque::<()>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:111:9: 111:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n+          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:19: +26:20\n+-         _18 = const ();                  // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n+          StorageDead(_22);                // scope 10 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_21);                // scope 9 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_20);                // scope 8 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_19);                // scope 0 at $DIR/reference_prop.rs:+27:5: +27:6\n+-         StorageDead(_18);                // scope 0 at $DIR/reference_prop.rs:+27:5: +27:6\n+-         StorageLive(_25);                // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n+          StorageLive(_26);                // scope 0 at $DIR/reference_prop.rs:+31:13: +31:18\n+          _26 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+31:21: +31:28\n+          StorageLive(_27);                // scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n+          _27 = &mut _26;                  // scope 12 at $DIR/reference_prop.rs:+32:21: +32:27\n+          StorageLive(_28);                // scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n+          _28 = &mut _27;                  // scope 13 at $DIR/reference_prop.rs:+33:17: +33:23\n+          StorageLive(_29);                // scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n+          _29 = (*_27);                    // scope 14 at $DIR/reference_prop.rs:+34:17: +34:19\n+          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n+          _31 = ();                        // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n+          _30 = opaque::<()>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:120:9: 120:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4: {\n+          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n+          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:19: +35:20\n+-         _25 = const ();                  // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n+          StorageDead(_29);                // scope 14 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_28);                // scope 13 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_27);                // scope 12 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_26);                // scope 0 at $DIR/reference_prop.rs:+36:5: +36:6\n+-         StorageDead(_25);                // scope 0 at $DIR/reference_prop.rs:+36:5: +36:6\n+-         StorageLive(_32);                // scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n+          StorageLive(_33);                // scope 0 at $DIR/reference_prop.rs:+40:13: +40:18\n+          _33 = const 7_usize;             // scope 0 at $DIR/reference_prop.rs:+40:21: +40:28\n+          StorageLive(_34);                // scope 16 at $DIR/reference_prop.rs:+41:13: +41:14\n+          _34 = &mut _33;                  // scope 16 at $DIR/reference_prop.rs:+41:17: +41:23\n+          StorageLive(_35);                // scope 17 at $DIR/reference_prop.rs:+42:13: +42:14\n+          _35 = (*_34);                    // scope 17 at $DIR/reference_prop.rs:+42:17: +42:19\n+          StorageLive(_36);                // scope 18 at $DIR/reference_prop.rs:+43:9: +43:18\n+          StorageLive(_37);                // scope 18 at $DIR/reference_prop.rs:+43:16: +43:17\n+          _37 = move _34;                  // scope 18 at $DIR/reference_prop.rs:+43:16: +43:17\n+          _36 = opaque::<&mut usize>(move _37) -> bb5; // scope 18 at $DIR/reference_prop.rs:+43:9: +43:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:128:9: 128:15\n+                                           // + literal: Const { ty: fn(&mut usize) {opaque::<&mut usize>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_37);                // scope 18 at $DIR/reference_prop.rs:+43:17: +43:18\n+          StorageDead(_36);                // scope 18 at $DIR/reference_prop.rs:+43:18: +43:19\n+-         _32 = const ();                  // scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n+          StorageDead(_35);                // scope 17 at $DIR/reference_prop.rs:+44:5: +44:6\n+          StorageDead(_34);                // scope 16 at $DIR/reference_prop.rs:+44:5: +44:6\n+          StorageDead(_33);                // scope 0 at $DIR/reference_prop.rs:+44:5: +44:6\n+-         StorageDead(_32);                // scope 0 at $DIR/reference_prop.rs:+44:5: +44:6\n+-         StorageLive(_38);                // scope 0 at $DIR/reference_prop.rs:+47:5: +57:6\n+          StorageLive(_39);                // scope 0 at $DIR/reference_prop.rs:+48:13: +48:18\n+          _39 = const 7_usize;             // scope 0 at $DIR/reference_prop.rs:+48:21: +48:28\n+          StorageLive(_40);                // scope 19 at $DIR/reference_prop.rs:+49:13: +49:15\n+          _40 = &mut _39;                  // scope 19 at $DIR/reference_prop.rs:+49:18: +49:24\n+          StorageLive(_41);                // scope 20 at $DIR/reference_prop.rs:+50:13: +50:14\n+          _41 = (*_40);                    // scope 20 at $DIR/reference_prop.rs:+50:17: +50:20\n+          StorageLive(_42);                // scope 21 at $DIR/reference_prop.rs:+51:13: +51:15\n+          _42 = move _40;                  // scope 21 at $DIR/reference_prop.rs:+51:18: +51:20\n+          StorageLive(_43);                // scope 22 at $DIR/reference_prop.rs:+52:13: +52:15\n+          _43 = (*_42);                    // scope 22 at $DIR/reference_prop.rs:+52:18: +52:21\n+          StorageLive(_44);                // scope 23 at $DIR/reference_prop.rs:+53:13: +53:15\n+          _44 = move _42;                  // scope 23 at $DIR/reference_prop.rs:+53:18: +53:20\n+          StorageLive(_45);                // scope 24 at $DIR/reference_prop.rs:+56:9: +56:19\n+          StorageLive(_46);                // scope 24 at $DIR/reference_prop.rs:+56:16: +56:18\n+          _46 = move _44;                  // scope 24 at $DIR/reference_prop.rs:+56:16: +56:18\n+          _45 = opaque::<&mut usize>(move _46) -> bb6; // scope 24 at $DIR/reference_prop.rs:+56:9: +56:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:141:9: 141:15\n+                                           // + literal: Const { ty: fn(&mut usize) {opaque::<&mut usize>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_46);                // scope 24 at $DIR/reference_prop.rs:+56:18: +56:19\n+          StorageDead(_45);                // scope 24 at $DIR/reference_prop.rs:+56:19: +56:20\n+-         _38 = const ();                  // scope 0 at $DIR/reference_prop.rs:+47:5: +57:6\n+          StorageDead(_44);                // scope 23 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_43);                // scope 22 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_42);                // scope 21 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_41);                // scope 20 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_40);                // scope 19 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_39);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n+-         StorageDead(_38);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n+-         StorageLive(_47);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n+          StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n+          _48 = &mut (*_1);                // scope 0 at $DIR/reference_prop.rs:+61:17: +61:29\n+          StorageLive(_49);                // scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n+-         _49 = (*_48);                    // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n++         _49 = (*_1);                     // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n+          StorageLive(_50);                // scope 26 at $DIR/reference_prop.rs:+63:9: +63:19\n+          StorageLive(_51);                // scope 26 at $DIR/reference_prop.rs:+63:16: +63:18\n+          _51 = ();                        // scope 26 at $DIR/reference_prop.rs:+63:16: +63:18\n+          _50 = opaque::<()>(move _51) -> bb7; // scope 26 at $DIR/reference_prop.rs:+63:9: +63:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:148:9: 148:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb7: {\n+          StorageDead(_51);                // scope 26 at $DIR/reference_prop.rs:+63:18: +63:19\n+          StorageDead(_50);                // scope 26 at $DIR/reference_prop.rs:+63:19: +63:20\n+-         _47 = const ();                  // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n+          StorageDead(_49);                // scope 25 at $DIR/reference_prop.rs:+64:5: +64:6\n+          StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_47);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+          StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _52 = &mut (*_2);                // scope 0 at $DIR/reference_prop.rs:+68:17: +68:31\n+          StorageLive(_53);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         _54 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         _53 = &mut (*_54);               // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n++         _53 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+          _2 = move _53;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:32\n+          StorageDead(_53);                // scope 27 at $DIR/reference_prop.rs:+69:31: +69:32\n+-         StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:32: +69:33\n+          StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _55 = (*_52);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_56);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _57 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _56 = opaque::<()>(move _57) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:156:9: 156:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb8: {\n+          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_56);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+      }\n+  }\n+  "}, {"sha": "c55b5eb4bed5d7d728e54cf2296f84ccbd981d23", "filename": "tests/mir-opt/reference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "status": "added", "additions": 378, "deletions": 0, "changes": 378, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,378 @@\n+- // MIR for `reference_propagation_mut_ptr` before ReferencePropagation\n++ // MIR for `reference_propagation_mut_ptr` after ReferencePropagation\n+  \n+  fn reference_propagation_mut_ptr(_1: *mut T, _2: *mut T) -> () {\n+      debug single => _1;                  // in scope 0 at $DIR/reference_prop.rs:+0:43: +0:49\n+      debug multiple => _2;                // in scope 0 at $DIR/reference_prop.rs:+0:59: +0:71\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:81: +0:81\n+      let _3: ();                          // in scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n+      let _7: ();                          // in scope 0 at $DIR/reference_prop.rs:+6:9: +6:19\n+      let mut _8: ();                      // in scope 0 at $DIR/reference_prop.rs:+6:16: +6:18\n+      let _9: ();                          // in scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n+      let mut _13: *mut usize;             // in scope 0 at $DIR/reference_prop.rs:+14:13: +14:24\n+      let _15: ();                         // in scope 0 at $DIR/reference_prop.rs:+17:9: +17:19\n+      let mut _16: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n+      let _17: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n+      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n+      let mut _23: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _24: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n+      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n+      let mut _30: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _31: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n+      let _35: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n+      let mut _36: *mut usize;             // in scope 0 at $DIR/reference_prop.rs:+43:16: +43:17\n+      let _37: ();                         // in scope 0 at $DIR/reference_prop.rs:+47:5: +57:6\n+      let _44: ();                         // in scope 0 at $DIR/reference_prop.rs:+56:9: +56:19\n+      let mut _45: *mut usize;             // in scope 0 at $DIR/reference_prop.rs:+56:16: +56:18\n+      let _46: ();                         // in scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n+      let _49: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n+      let mut _50: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n+      let mut _52: *mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:36\n+      let _54: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _55: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      scope 1 {\n+          let mut _4: usize;               // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n+          scope 2 {\n+              debug a => _4;               // in scope 2 at $DIR/reference_prop.rs:+3:13: +3:18\n+              let _5: *mut usize;          // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+              scope 3 {\n+                  debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n+                  let _6: usize;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n+                  scope 4 {\n+                      debug c => _6;       // in scope 4 at $DIR/reference_prop.rs:+5:13: +5:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 5 {\n+          let mut _10: usize;              // in scope 5 at $DIR/reference_prop.rs:+11:13: +11:18\n+          scope 6 {\n+              debug a => _10;              // in scope 6 at $DIR/reference_prop.rs:+11:13: +11:18\n+              let mut _11: usize;          // in scope 6 at $DIR/reference_prop.rs:+12:13: +12:19\n+              scope 7 {\n+                  debug a2 => _11;         // in scope 7 at $DIR/reference_prop.rs:+12:13: +12:19\n+                  let mut _12: *mut usize; // in scope 7 at $DIR/reference_prop.rs:+13:13: +13:18\n+                  scope 8 {\n+                      debug b => _12;      // in scope 8 at $DIR/reference_prop.rs:+13:13: +13:18\n+                      let _14: usize;      // in scope 8 at $DIR/reference_prop.rs:+16:13: +16:14\n+                      scope 9 {\n+                          debug c => _14;  // in scope 9 at $DIR/reference_prop.rs:+16:13: +16:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 10 {\n+          let mut _18: usize;              // in scope 10 at $DIR/reference_prop.rs:+22:13: +22:18\n+          scope 11 {\n+              debug a => _18;              // in scope 11 at $DIR/reference_prop.rs:+22:13: +22:18\n+              let _19: *mut usize;         // in scope 11 at $DIR/reference_prop.rs:+23:13: +23:14\n+              scope 12 {\n+                  debug b => _19;          // in scope 12 at $DIR/reference_prop.rs:+23:13: +23:14\n+                  let _20: &*mut usize;    // in scope 12 at $DIR/reference_prop.rs:+24:13: +24:14\n+                  scope 13 {\n+                      debug d => _20;      // in scope 13 at $DIR/reference_prop.rs:+24:13: +24:14\n+                      let _21: usize;      // in scope 13 at $DIR/reference_prop.rs:+25:13: +25:14\n+                      scope 14 {\n+                          debug c => _21;  // in scope 14 at $DIR/reference_prop.rs:+25:13: +25:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 15 {\n+          let mut _25: usize;              // in scope 15 at $DIR/reference_prop.rs:+31:13: +31:18\n+          scope 16 {\n+              debug a => _25;              // in scope 16 at $DIR/reference_prop.rs:+31:13: +31:18\n+              let mut _26: *mut usize;     // in scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n+              scope 17 {\n+                  debug b => _26;          // in scope 17 at $DIR/reference_prop.rs:+32:13: +32:18\n+                  let _27: &mut *mut usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n+                  scope 18 {\n+                      debug d => _27;      // in scope 18 at $DIR/reference_prop.rs:+33:13: +33:14\n+                      let _28: usize;      // in scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n+                      scope 19 {\n+                          debug c => _28;  // in scope 19 at $DIR/reference_prop.rs:+34:13: +34:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 20 {\n+          let mut _32: usize;              // in scope 20 at $DIR/reference_prop.rs:+40:13: +40:18\n+          scope 21 {\n+              debug a => _32;              // in scope 21 at $DIR/reference_prop.rs:+40:13: +40:18\n+              let _33: *mut usize;         // in scope 21 at $DIR/reference_prop.rs:+41:13: +41:14\n+              scope 22 {\n+                  debug b => _33;          // in scope 22 at $DIR/reference_prop.rs:+41:13: +41:14\n+                  let _34: usize;          // in scope 22 at $DIR/reference_prop.rs:+42:13: +42:14\n+                  scope 23 {\n+                      debug c => _34;      // in scope 23 at $DIR/reference_prop.rs:+42:13: +42:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 24 {\n+          let mut _38: usize;              // in scope 24 at $DIR/reference_prop.rs:+48:13: +48:18\n+          scope 25 {\n+              debug a => _38;              // in scope 25 at $DIR/reference_prop.rs:+48:13: +48:18\n+              let _39: *mut usize;         // in scope 25 at $DIR/reference_prop.rs:+49:13: +49:15\n+              scope 26 {\n+                  debug b1 => _39;         // in scope 26 at $DIR/reference_prop.rs:+49:13: +49:15\n+                  let _40: usize;          // in scope 26 at $DIR/reference_prop.rs:+50:13: +50:14\n+                  scope 27 {\n+                      debug c => _40;      // in scope 27 at $DIR/reference_prop.rs:+50:13: +50:14\n+                      let _41: *mut usize; // in scope 27 at $DIR/reference_prop.rs:+51:13: +51:15\n+                      scope 28 {\n+                          debug b2 => _41; // in scope 28 at $DIR/reference_prop.rs:+51:13: +51:15\n+                          let _42: usize;  // in scope 28 at $DIR/reference_prop.rs:+52:13: +52:15\n+                          scope 29 {\n+                              debug c2 => _42; // in scope 29 at $DIR/reference_prop.rs:+52:13: +52:15\n+                              let _43: *mut usize; // in scope 29 at $DIR/reference_prop.rs:+53:13: +53:15\n+                              scope 30 {\n+                                  debug b3 => _43; // in scope 30 at $DIR/reference_prop.rs:+53:13: +53:15\n+                              }\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 31 {\n+          let _47: *mut T;                 // in scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n+          scope 32 {\n+              debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n+              let _48: T;                  // in scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n+              scope 33 {\n+                  debug b => _48;          // in scope 33 at $DIR/reference_prop.rs:+62:13: +62:14\n+              }\n+          }\n+      }\n+      scope 34 {\n+          let _51: *mut T;                 // in scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n+          scope 35 {\n+              debug a => _51;              // in scope 35 at $DIR/reference_prop.rs:+68:13: +68:14\n+              let _53: T;                  // in scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n+              scope 36 {\n+                  debug b => _53;          // in scope 36 at $DIR/reference_prop.rs:+70:13: +70:14\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n+          StorageLive(_4);                 // scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n+          _4 = const 5_usize;              // scope 1 at $DIR/reference_prop.rs:+3:21: +3:28\n+          StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+          _5 = &raw mut _4;                // scope 2 at $DIR/reference_prop.rs:+4:17: +4:27\n+          StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n+-         _6 = (*_5);                      // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n++         _6 = _4;                         // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n+          StorageLive(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:9: +6:19\n+          StorageLive(_8);                 // scope 4 at $DIR/reference_prop.rs:+6:16: +6:18\n+          _8 = ();                         // scope 4 at $DIR/reference_prop.rs:+6:16: +6:18\n+          _7 = opaque::<()>(move _8) -> bb1; // scope 4 at $DIR/reference_prop.rs:+6:9: +6:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:250:9: 250:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_8);                 // scope 4 at $DIR/reference_prop.rs:+6:18: +6:19\n+          StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:19: +6:20\n+-         _3 = const ();                   // scope 1 at $DIR/reference_prop.rs:+2:5: +7:6\n+          StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageDead(_4);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n+          StorageLive(_10);                // scope 5 at $DIR/reference_prop.rs:+11:13: +11:18\n+          _10 = const 5_usize;             // scope 5 at $DIR/reference_prop.rs:+11:21: +11:28\n+          StorageLive(_11);                // scope 6 at $DIR/reference_prop.rs:+12:13: +12:19\n+          _11 = const 7_usize;             // scope 6 at $DIR/reference_prop.rs:+12:22: +12:29\n+          StorageLive(_12);                // scope 7 at $DIR/reference_prop.rs:+13:13: +13:18\n+          _12 = &raw mut _10;              // scope 7 at $DIR/reference_prop.rs:+13:21: +13:31\n+          StorageLive(_13);                // scope 8 at $DIR/reference_prop.rs:+14:13: +14:24\n+          _13 = &raw mut _11;              // scope 8 at $DIR/reference_prop.rs:+14:13: +14:24\n+          _12 = move _13;                  // scope 8 at $DIR/reference_prop.rs:+14:9: +14:24\n+          StorageDead(_13);                // scope 8 at $DIR/reference_prop.rs:+14:23: +14:24\n+          StorageLive(_14);                // scope 8 at $DIR/reference_prop.rs:+16:13: +16:14\n+          _14 = (*_12);                    // scope 8 at $DIR/reference_prop.rs:+16:17: +16:19\n+          StorageLive(_15);                // scope 9 at $DIR/reference_prop.rs:+17:9: +17:19\n+          StorageLive(_16);                // scope 9 at $DIR/reference_prop.rs:+17:16: +17:18\n+          _16 = ();                        // scope 9 at $DIR/reference_prop.rs:+17:16: +17:18\n+          _15 = opaque::<()>(move _16) -> bb2; // scope 9 at $DIR/reference_prop.rs:+17:9: +17:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:261:9: 261:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_16);                // scope 9 at $DIR/reference_prop.rs:+17:18: +17:19\n+          StorageDead(_15);                // scope 9 at $DIR/reference_prop.rs:+17:19: +17:20\n+-         _9 = const ();                   // scope 5 at $DIR/reference_prop.rs:+10:5: +18:6\n+          StorageDead(_14);                // scope 8 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_12);                // scope 7 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_11);                // scope 6 at $DIR/reference_prop.rs:+18:5: +18:6\n+          StorageDead(_10);                // scope 5 at $DIR/reference_prop.rs:+18:5: +18:6\n+-         StorageDead(_9);                 // scope 0 at $DIR/reference_prop.rs:+18:5: +18:6\n+-         StorageLive(_17);                // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n+          StorageLive(_18);                // scope 10 at $DIR/reference_prop.rs:+22:13: +22:18\n+          _18 = const 5_usize;             // scope 10 at $DIR/reference_prop.rs:+22:21: +22:28\n+          StorageLive(_19);                // scope 11 at $DIR/reference_prop.rs:+23:13: +23:14\n+          _19 = &raw mut _18;              // scope 11 at $DIR/reference_prop.rs:+23:17: +23:27\n+          StorageLive(_20);                // scope 12 at $DIR/reference_prop.rs:+24:13: +24:14\n+          _20 = &_19;                      // scope 12 at $DIR/reference_prop.rs:+24:17: +24:19\n+          StorageLive(_21);                // scope 13 at $DIR/reference_prop.rs:+25:13: +25:14\n+          _21 = (*_19);                    // scope 13 at $DIR/reference_prop.rs:+25:17: +25:19\n+          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n+          _23 = ();                        // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n+          _22 = opaque::<()>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:270:9: 270:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n+          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:19: +26:20\n+-         _17 = const ();                  // scope 10 at $DIR/reference_prop.rs:+21:5: +27:6\n+          StorageDead(_21);                // scope 13 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_20);                // scope 12 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_19);                // scope 11 at $DIR/reference_prop.rs:+27:5: +27:6\n+          StorageDead(_18);                // scope 10 at $DIR/reference_prop.rs:+27:5: +27:6\n+-         StorageDead(_17);                // scope 0 at $DIR/reference_prop.rs:+27:5: +27:6\n+-         StorageLive(_24);                // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n+          StorageLive(_25);                // scope 15 at $DIR/reference_prop.rs:+31:13: +31:18\n+          _25 = const 5_usize;             // scope 15 at $DIR/reference_prop.rs:+31:21: +31:28\n+          StorageLive(_26);                // scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n+          _26 = &raw mut _25;              // scope 16 at $DIR/reference_prop.rs:+32:21: +32:31\n+          StorageLive(_27);                // scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n+          _27 = &mut _26;                  // scope 17 at $DIR/reference_prop.rs:+33:17: +33:23\n+          StorageLive(_28);                // scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n+          _28 = (*_26);                    // scope 18 at $DIR/reference_prop.rs:+34:17: +34:19\n+          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n+          _30 = ();                        // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n+          _29 = opaque::<()>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:279:9: 279:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4: {\n+          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n+          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:19: +35:20\n+-         _24 = const ();                  // scope 15 at $DIR/reference_prop.rs:+30:5: +36:6\n+          StorageDead(_28);                // scope 18 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_27);                // scope 17 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_26);                // scope 16 at $DIR/reference_prop.rs:+36:5: +36:6\n+          StorageDead(_25);                // scope 15 at $DIR/reference_prop.rs:+36:5: +36:6\n+-         StorageDead(_24);                // scope 0 at $DIR/reference_prop.rs:+36:5: +36:6\n+-         StorageLive(_31);                // scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n+          StorageLive(_32);                // scope 20 at $DIR/reference_prop.rs:+40:13: +40:18\n+          _32 = const 7_usize;             // scope 20 at $DIR/reference_prop.rs:+40:21: +40:28\n+          StorageLive(_33);                // scope 21 at $DIR/reference_prop.rs:+41:13: +41:14\n+          _33 = &raw mut _32;              // scope 21 at $DIR/reference_prop.rs:+41:17: +41:27\n+          StorageLive(_34);                // scope 22 at $DIR/reference_prop.rs:+42:13: +42:14\n+          _34 = (*_33);                    // scope 22 at $DIR/reference_prop.rs:+42:17: +42:19\n+          StorageLive(_35);                // scope 23 at $DIR/reference_prop.rs:+43:9: +43:18\n+          StorageLive(_36);                // scope 23 at $DIR/reference_prop.rs:+43:16: +43:17\n+          _36 = _33;                       // scope 23 at $DIR/reference_prop.rs:+43:16: +43:17\n+          _35 = opaque::<*mut usize>(move _36) -> bb5; // scope 23 at $DIR/reference_prop.rs:+43:9: +43:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:287:9: 287:15\n+                                           // + literal: Const { ty: fn(*mut usize) {opaque::<*mut usize>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_36);                // scope 23 at $DIR/reference_prop.rs:+43:17: +43:18\n+          StorageDead(_35);                // scope 23 at $DIR/reference_prop.rs:+43:18: +43:19\n+-         _31 = const ();                  // scope 20 at $DIR/reference_prop.rs:+39:5: +44:6\n+          StorageDead(_34);                // scope 22 at $DIR/reference_prop.rs:+44:5: +44:6\n+          StorageDead(_33);                // scope 21 at $DIR/reference_prop.rs:+44:5: +44:6\n+          StorageDead(_32);                // scope 20 at $DIR/reference_prop.rs:+44:5: +44:6\n+-         StorageDead(_31);                // scope 0 at $DIR/reference_prop.rs:+44:5: +44:6\n+-         StorageLive(_37);                // scope 0 at $DIR/reference_prop.rs:+47:5: +57:6\n+          StorageLive(_38);                // scope 24 at $DIR/reference_prop.rs:+48:13: +48:18\n+          _38 = const 7_usize;             // scope 24 at $DIR/reference_prop.rs:+48:21: +48:28\n+          StorageLive(_39);                // scope 25 at $DIR/reference_prop.rs:+49:13: +49:15\n+          _39 = &raw mut _38;              // scope 25 at $DIR/reference_prop.rs:+49:18: +49:28\n+          StorageLive(_40);                // scope 26 at $DIR/reference_prop.rs:+50:13: +50:14\n+          _40 = (*_39);                    // scope 26 at $DIR/reference_prop.rs:+50:17: +50:20\n+          StorageLive(_41);                // scope 27 at $DIR/reference_prop.rs:+51:13: +51:15\n+          _41 = _39;                       // scope 27 at $DIR/reference_prop.rs:+51:18: +51:20\n+          StorageLive(_42);                // scope 28 at $DIR/reference_prop.rs:+52:13: +52:15\n+          _42 = (*_41);                    // scope 28 at $DIR/reference_prop.rs:+52:18: +52:21\n+          StorageLive(_43);                // scope 29 at $DIR/reference_prop.rs:+53:13: +53:15\n+          _43 = _41;                       // scope 29 at $DIR/reference_prop.rs:+53:18: +53:20\n+          StorageLive(_44);                // scope 30 at $DIR/reference_prop.rs:+56:9: +56:19\n+          StorageLive(_45);                // scope 30 at $DIR/reference_prop.rs:+56:16: +56:18\n+          _45 = _43;                       // scope 30 at $DIR/reference_prop.rs:+56:16: +56:18\n+          _44 = opaque::<*mut usize>(move _45) -> bb6; // scope 30 at $DIR/reference_prop.rs:+56:9: +56:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:300:9: 300:15\n+                                           // + literal: Const { ty: fn(*mut usize) {opaque::<*mut usize>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_45);                // scope 30 at $DIR/reference_prop.rs:+56:18: +56:19\n+          StorageDead(_44);                // scope 30 at $DIR/reference_prop.rs:+56:19: +56:20\n+-         _37 = const ();                  // scope 24 at $DIR/reference_prop.rs:+47:5: +57:6\n+          StorageDead(_43);                // scope 29 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_42);                // scope 28 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_41);                // scope 27 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_40);                // scope 26 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_39);                // scope 25 at $DIR/reference_prop.rs:+57:5: +57:6\n+          StorageDead(_38);                // scope 24 at $DIR/reference_prop.rs:+57:5: +57:6\n+-         StorageDead(_37);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n+-         StorageLive(_46);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n+          StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n+          _47 = &raw mut (*_1);            // scope 31 at $DIR/reference_prop.rs:+61:17: +61:33\n+          StorageLive(_48);                // scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n+-         _48 = (*_47);                    // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n++         _48 = (*_1);                     // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n+          StorageLive(_49);                // scope 33 at $DIR/reference_prop.rs:+63:9: +63:19\n+          StorageLive(_50);                // scope 33 at $DIR/reference_prop.rs:+63:16: +63:18\n+          _50 = ();                        // scope 33 at $DIR/reference_prop.rs:+63:16: +63:18\n+          _49 = opaque::<()>(move _50) -> bb7; // scope 33 at $DIR/reference_prop.rs:+63:9: +63:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:307:9: 307:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb7: {\n+          StorageDead(_50);                // scope 33 at $DIR/reference_prop.rs:+63:18: +63:19\n+          StorageDead(_49);                // scope 33 at $DIR/reference_prop.rs:+63:19: +63:20\n+-         _46 = const ();                  // scope 31 at $DIR/reference_prop.rs:+60:5: +64:6\n+          StorageDead(_48);                // scope 32 at $DIR/reference_prop.rs:+64:5: +64:6\n+          StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_46);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+          StorageLive(_51);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _51 = &raw mut (*_2);            // scope 34 at $DIR/reference_prop.rs:+68:17: +68:35\n+          StorageLive(_52);                // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n+          _52 = &raw mut (*_1);            // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n+          _2 = move _52;                   // scope 35 at $DIR/reference_prop.rs:+69:9: +69:36\n+          StorageDead(_52);                // scope 35 at $DIR/reference_prop.rs:+69:35: +69:36\n+          StorageLive(_53);                // scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _53 = (*_51);                    // scope 35 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_54);                // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_55);                // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _55 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _54 = opaque::<()>(move _55) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:315:9: 315:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb8: {\n+          StorageDead(_55);                // scope 36 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_54);                // scope 36 at $DIR/reference_prop.rs:+71:19: +71:20\n+          _0 = const ();                   // scope 34 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_53);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_51);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+      }\n+  }\n+  "}, {"sha": "e3e5d791464ebfa2b1bf3341da204a763be59314", "filename": "tests/mir-opt/reference_prop.rs", "status": "added", "additions": 456, "deletions": 0, "changes": 456, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Freference_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.rs?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,456 @@\n+// unit-test: ReferencePropagation\n+// needs-unwind\n+\n+#![feature(raw_ref_op)]\n+#![feature(core_intrinsics, custom_mir)]\n+\n+#[inline(never)]\n+fn opaque(_: impl Sized) {}\n+\n+fn reference_propagation<'a, T: Copy>(single: &'a T, mut multiple: &'a T) {\n+    // Propagation through a reference.\n+    {\n+        let a = 5_usize;\n+        let b = &a; // This borrow is only used once.\n+        let c = *b; // This should be optimized.\n+        opaque(()); // We use opaque to separate cases into basic blocks in the MIR.\n+    }\n+\n+    // Propagation through a two references.\n+    {\n+        let a = 5_usize;\n+        let a2 = 7_usize;\n+        let mut b = &a;\n+        b = &a2;\n+        // `b` is assigned twice, so we cannot propagate it.\n+        let c = *b;\n+        opaque(());\n+    }\n+\n+    // Propagation through a borrowed reference.\n+    {\n+        let a = 5_usize;\n+        let b = &a;\n+        let d = &b;\n+        let c = *b; // `b` is immutably borrowed, we know its value, but do not propagate it\n+        opaque(());\n+    }\n+\n+    // Propagation through a borrowed reference.\n+    {\n+        let a = 5_usize;\n+        let mut b = &a;\n+        let d = &mut b;\n+        let c = *b; // `b` is mutably borrowed, we cannot know its value.\n+        opaque(());\n+    }\n+\n+    // Propagation through an escaping borrow.\n+    {\n+        let a = 7_usize;\n+        let b = &a;\n+        let c = *b;\n+        opaque(b); // `b` escapes here, but we can still replace immutable borrow\n+    }\n+\n+    // Propagation through a transitively escaping borrow.\n+    {\n+        let a = 7_usize;\n+        let b1 = &a;\n+        let c = *b1;\n+        let b2 = b1;\n+        let c2 = *b2;\n+        let b3 = b2;\n+        // `b3` escapes here, so we can only replace immutable borrow,\n+        // for either `b`, `b2` or `b3`.\n+        opaque(b3);\n+    }\n+\n+    // Propagation a reborrow of an argument.\n+    {\n+        let a = &*single;\n+        let b = *a; // This should be optimized as `*single`.\n+        opaque(());\n+    }\n+\n+    // Propagation a reborrow of a mutated argument.\n+    {\n+        let a = &*multiple;\n+        multiple = &*single;\n+        let b = *a; // This should not be optimized.\n+        opaque(());\n+    }\n+}\n+\n+fn reference_propagation_mut<'a, T: Copy>(single: &'a mut T, mut multiple: &'a mut T) {\n+    // Propagation through a reference.\n+    {\n+        let mut a = 5_usize;\n+        let b = &mut a; // This borrow is only used once.\n+        let c = *b; // This should be optimized.\n+        opaque(());\n+    }\n+\n+    // Propagation through a two references.\n+    {\n+        let mut a = 5_usize;\n+        let mut a2 = 7_usize;\n+        let mut b = &mut a;\n+        b = &mut a2;\n+        // `b` is assigned twice, so we cannot propagate it.\n+        let c = *b;\n+        opaque(());\n+    }\n+\n+    // Propagation through a borrowed reference.\n+    {\n+        let mut a = 5_usize;\n+        let b = &mut a;\n+        let d = &b;\n+        let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n+        opaque(());\n+    }\n+\n+    // Propagation through a borrowed reference.\n+    {\n+        let mut a = 5_usize;\n+        let mut b = &mut a;\n+        let d = &mut b;\n+        let c = *b; // `b` is mutably borrowed, we cannot know its value.\n+        opaque(());\n+    }\n+\n+    // Propagation through an escaping borrow.\n+    {\n+        let mut a = 7_usize;\n+        let b = &mut a;\n+        let c = *b;\n+        opaque(b); // `b` escapes here, so we can only replace immutable borrow\n+    }\n+\n+    // Propagation through a transitively escaping borrow.\n+    {\n+        let mut a = 7_usize;\n+        let b1 = &mut a;\n+        let c = *b1;\n+        let b2 = b1;\n+        let c2 = *b2;\n+        let b3 = b2;\n+        // `b3` escapes here, so we can only replace immutable borrow,\n+        // for either `b`, `b2` or `b3`.\n+        opaque(b3);\n+    }\n+\n+    // Propagation a reborrow of an argument.\n+    {\n+        let a = &mut *single;\n+        let b = *a; // This should be optimized as `*single`.\n+        opaque(());\n+    }\n+\n+    // Propagation a reborrow of a mutated argument.\n+    {\n+        let a = &mut *multiple;\n+        multiple = &mut *single;\n+        let b = *a; // This should not be optimized.\n+        opaque(());\n+    }\n+}\n+\n+fn reference_propagation_const_ptr<T: Copy>(single: *const T, mut multiple: *const T) {\n+    // Propagation through a reference.\n+    unsafe {\n+        let a = 5_usize;\n+        let b = &raw const a; // This borrow is only used once.\n+        let c = *b; // This should be optimized.\n+        opaque(());\n+    }\n+\n+    // Propagation through a two references.\n+    unsafe {\n+        let a = 5_usize;\n+        let a2 = 7_usize;\n+        let mut b = &raw const a;\n+        b = &raw const a2;\n+        // `b` is assigned twice, so we cannot propagate it.\n+        let c = *b;\n+        opaque(());\n+    }\n+\n+    // Propagation through a borrowed reference.\n+    unsafe {\n+        let a = 5_usize;\n+        let b = &raw const a;\n+        let d = &b;\n+        let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n+        opaque(());\n+    }\n+\n+    // Propagation through a borrowed reference.\n+    unsafe {\n+        let a = 5_usize;\n+        let mut b = &raw const a;\n+        let d = &mut b;\n+        let c = *b; // `b` is mutably borrowed, we cannot know its value.\n+        opaque(());\n+    }\n+\n+    // Propagation through an escaping borrow.\n+    unsafe {\n+        let a = 7_usize;\n+        let b = &raw const a;\n+        let c = *b;\n+        opaque(b); // `b` escapes here, so we can only replace immutable borrow\n+    }\n+\n+    // Propagation through a transitively escaping borrow.\n+    unsafe {\n+        let a = 7_usize;\n+        let b1 = &raw const a;\n+        let c = *b1;\n+        let b2 = b1;\n+        let c2 = *b2;\n+        let b3 = b2;\n+        // `b3` escapes here, so we can only replace immutable borrow,\n+        // for either `b`, `b2` or `b3`.\n+        opaque(b3);\n+    }\n+\n+    // Propagation a reborrow of an argument.\n+    unsafe {\n+        let a = &raw const *single;\n+        let b = *a; // This should be optimized as `*single`.\n+        opaque(());\n+    }\n+\n+    // Propagation a reborrow of a mutated argument.\n+    unsafe {\n+        let a = &raw const *multiple;\n+        multiple = &raw const *single;\n+        let b = *a; // This should not be optimized.\n+        opaque(());\n+    }\n+\n+    // Propagation through a reborrow.\n+    unsafe {\n+        let a = 13_usize;\n+        let b = &raw const a;\n+        let c = &raw const *b;\n+        let e = *c;\n+        opaque(());\n+    }\n+}\n+\n+fn reference_propagation_mut_ptr<T: Copy>(single: *mut T, mut multiple: *mut T) {\n+    // Propagation through a reference.\n+    unsafe {\n+        let mut a = 5_usize;\n+        let b = &raw mut a; // This borrow is only used once.\n+        let c = *b; // This should be optimized.\n+        opaque(());\n+    }\n+\n+    // Propagation through a two references.\n+    unsafe {\n+        let mut a = 5_usize;\n+        let mut a2 = 7_usize;\n+        let mut b = &raw mut a;\n+        b = &raw mut a2;\n+        // `b` is assigned twice, so we cannot propagate it.\n+        let c = *b;\n+        opaque(());\n+    }\n+\n+    // Propagation through a borrowed reference.\n+    unsafe {\n+        let mut a = 5_usize;\n+        let b = &raw mut a;\n+        let d = &b;\n+        let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n+        opaque(());\n+    }\n+\n+    // Propagation through a borrowed reference.\n+    unsafe {\n+        let mut a = 5_usize;\n+        let mut b = &raw mut a;\n+        let d = &mut b;\n+        let c = *b; // `b` is mutably borrowed, we cannot know its value.\n+        opaque(());\n+    }\n+\n+    // Propagation through an escaping borrow.\n+    unsafe {\n+        let mut a = 7_usize;\n+        let b = &raw mut a;\n+        let c = *b;\n+        opaque(b); // `b` escapes here, so we can only replace immutable borrow\n+    }\n+\n+    // Propagation through a transitively escaping borrow.\n+    unsafe {\n+        let mut a = 7_usize;\n+        let b1 = &raw mut a;\n+        let c = *b1;\n+        let b2 = b1;\n+        let c2 = *b2;\n+        let b3 = b2;\n+        // `b3` escapes here, so we can only replace immutable borrow,\n+        // for either `b`, `b2` or `b3`.\n+        opaque(b3);\n+    }\n+\n+    // Propagation a reborrow of an argument.\n+    unsafe {\n+        let a = &raw mut *single;\n+        let b = *a; // This should be optimized as `*single`.\n+        opaque(());\n+    }\n+\n+    // Propagation a reborrow of a mutated argument.\n+    unsafe {\n+        let a = &raw mut *multiple;\n+        multiple = &raw mut *single;\n+        let b = *a; // This should not be optimized.\n+        opaque(());\n+    }\n+}\n+\n+#[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n+fn read_through_raw(x: &mut usize) -> usize {\n+    use std::intrinsics::mir::*;\n+\n+    mir!(\n+        let r1: &mut usize;\n+        let r2: &mut usize;\n+        let p1: *mut usize;\n+        let p2: *mut usize;\n+\n+        {\n+            r1 = &mut *x;\n+            r2 = &mut *r1;\n+            p1 = &raw mut *r1;\n+            p2 = &raw mut *r2;\n+\n+            RET = *p1;\n+            RET = *p2;\n+            Return()\n+        }\n+    )\n+}\n+\n+#[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n+fn multiple_storage() {\n+    use std::intrinsics::mir::*;\n+\n+    mir!(\n+        let x: i32;\n+        {\n+            StorageLive(x);\n+            x = 5;\n+            let z = &x;\n+            StorageDead(x);\n+            StorageLive(x);\n+            // As there are multiple `StorageLive` statements for `x`, we cannot know if this `z`'s\n+            // pointer address is the address of `x`, so do nothing.\n+            let y = *z;\n+            Call(RET, retblock, opaque(y))\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+#[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n+fn dominate_storage() {\n+    use std::intrinsics::mir::*;\n+\n+    mir!(\n+        let x: i32;\n+        let r: &i32;\n+        let c: i32;\n+        let d: bool;\n+        { Goto(bb0) }\n+        bb0 = {\n+            x = 5;\n+            r = &x;\n+            Goto(bb1)\n+        }\n+        bb1 = {\n+            let c = *r;\n+            Call(RET, bb2, opaque(c))\n+        }\n+        bb2 = {\n+            StorageDead(x);\n+            StorageLive(x);\n+            let d = true;\n+            match d { false => bb2, _ => bb0 }\n+        }\n+    )\n+}\n+\n+#[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n+fn maybe_dead(m: bool) {\n+    use std::intrinsics::mir::*;\n+\n+    mir!(\n+        let x: i32;\n+        let y: i32;\n+        {\n+            StorageLive(x);\n+            StorageLive(y);\n+            x = 5;\n+            y = 5;\n+            let a = &x;\n+            let b = &mut y;\n+            // As we don't replace `b` in `bb2`, we cannot replace it here either.\n+            *b = 7;\n+            // But this can still be replaced.\n+            let u = *a;\n+            match m { true => bb1, _ => bb2 }\n+        }\n+        bb1 = {\n+            StorageDead(x);\n+            StorageDead(y);\n+            Call(RET, bb2, opaque(u))\n+        }\n+        bb2 = {\n+            // As `x` may be `StorageDead`, `a` may be dangling, so we do nothing.\n+            let z = *a;\n+            Call(RET, bb3, opaque(z))\n+        }\n+        bb3 = {\n+            // As `y` may be `StorageDead`, `b` may be dangling, so we do nothing.\n+            // This implies that we also do not substitute `b` in `bb0`.\n+            let t = *b;\n+            Call(RET, retblock, opaque(t))\n+        }\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    let mut x = 5_usize;\n+    let mut y = 7_usize;\n+    reference_propagation(&x, &y);\n+    reference_propagation_mut(&mut x, &mut y);\n+    reference_propagation_const_ptr(&raw const x, &raw const y);\n+    reference_propagation_mut_ptr(&raw mut x, &raw mut y);\n+    read_through_raw(&mut x);\n+    multiple_storage();\n+    dominate_storage();\n+    maybe_dead(true);\n+}\n+\n+// EMIT_MIR reference_prop.reference_propagation.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.reference_propagation_mut.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.reference_propagation_const_ptr.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.read_through_raw.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.multiple_storage.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.dominate_storage.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.maybe_dead.ReferencePropagation.diff"}, {"sha": "be32f40f132277752b6ef37db089881dd66fa2c1", "filename": "tests/mir-opt/slice_filter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fslice_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fslice_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.rs?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -12,7 +12,9 @@ pub fn variant_b(input: &[(usize, usize, usize, usize)]) -> usize {\n     input.iter().filter(|&&(a, b, c, d)| a <= c && d <= b || c <= a && b <= d).count()\n }\n \n+// EMIT_MIR slice_filter.variant_a-{closure#0}.ReferencePropagation.diff\n // EMIT_MIR slice_filter.variant_a-{closure#0}.CopyProp.diff\n // EMIT_MIR slice_filter.variant_a-{closure#0}.DestinationPropagation.diff\n // EMIT_MIR slice_filter.variant_b-{closure#0}.CopyProp.diff\n+// EMIT_MIR slice_filter.variant_b-{closure#0}.ReferencePropagation.diff\n // EMIT_MIR slice_filter.variant_b-{closure#0}.DestinationPropagation.diff"}, {"sha": "60e5056c7a92609f677aeda7b7a6fac661d753c1", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.CopyProp.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -101,16 +101,16 @@\n       }\n   \n       bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -184,10 +184,10 @@\n       bb3: {\n           StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   "}, {"sha": "7ad1ccf28a607bbfe42375b4119e90ac7d912e66", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 68, "deletions": 36, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -30,10 +30,14 @@\n       let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n       let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n       scope 1 {\n-          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n++         debug a => _20;                  // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n++         debug b => _15;                  // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n++         debug c => _11;                  // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n++         debug d => _24;                  // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n           scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n               debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -85,33 +89,47 @@\n       }\n   \n       bb0: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n++         _20 = &((*_25).0: usize);        // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n++         _15 = &((*_26).1: usize);        // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n++         _11 = &((*_27).2: usize);        // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n -         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n++         _24 = &((*_28).3: usize);        // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n           StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n           StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _29 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n++         _29 = deref_copy _20;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _30 = deref_copy _11;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _31 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _32 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _8 = Le(move _31, move _32);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -127,21 +145,23 @@\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n           StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n           StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _33 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _34 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _33 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n++         _33 = deref_copy _11;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _34 = deref_copy _20;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _35 = (*_33);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _36 = (*_34);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _17 = Le(move _35, move _36);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n@@ -150,8 +170,16 @@\n       bb3: {\n -         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   \n@@ -166,21 +194,23 @@\n -         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n           StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n           StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _37 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _38 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _37 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n++         _37 = deref_copy _24;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _38 = deref_copy _15;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _39 = (*_37);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _40 = (*_38);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _12 = Le(move _39, move _40);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -202,13 +232,14 @@\n -         StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n           StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n           StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _41 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _42 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _41 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n++         _41 = deref_copy _15;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _42 = deref_copy _24;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _43 = (*_41);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -217,7 +248,8 @@\n +         _0 = Le(move _43, move _44);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76"}, {"sha": "f6350b3812a2ae1225ba2eb500e8278302537f02", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.ReferencePropagation.diff", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,247 @@\n+- // MIR for `variant_a::{closure#0}` before ReferencePropagation\n++ // MIR for `variant_a::{closure#0}` after ReferencePropagation\n+  \n+  fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n+      let _3: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+      let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+      let _5: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+      let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n+      let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n+      let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n+      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n+      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n+      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _31: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _32: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _37: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _38: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _43: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _44: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _49: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _50: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      scope 1 {\n+          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+          scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n+              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _33: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _34: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n+              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _39: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _40: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n+              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _45: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _46: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n+              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _51: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _52: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n+          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+          _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _29 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _30 = deref_copy _11;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _8 = Le(move _33, move _34);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+      }\n+  \n+      bb1: {\n+          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  \n+      bb2: {\n+          StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _35 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _36 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _35 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _36 = deref_copy _20;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _17 = Le(move _39, move _40);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb3: {\n+          StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n+      }\n+  \n+      bb4: {\n+          _7 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+      }\n+  \n+      bb5: {\n+          StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _41 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _42 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _41 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _42 = deref_copy _15;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _12 = Le(move _45, move _46);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  \n+      bb6: {\n+          _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb7: {\n+          StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _47 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _48 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _47 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _48 = deref_copy _24;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _21 = Le(move _51, move _52);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb8: {\n+          StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  }\n+  "}, {"sha": "d1241c6b0245c6869de2a60361509569cc0406d3", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.ReferencePropagation.diff", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/50dff955a9367a4efc72b831549e368992807beb/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.ReferencePropagation.diff?ref=50dff955a9367a4efc72b831549e368992807beb", "patch": "@@ -0,0 +1,103 @@\n+- // MIR for `variant_b::{closure#0}` before ReferencePropagation\n++ // MIR for `variant_b::{closure#0}` after ReferencePropagation\n+  \n+  fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:12:25: 12:41], _2: &&(usize, usize, usize, usize)) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:42: +0:42\n+      let _3: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+      let _4: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+      let _5: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+      let _6: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48\n+      let mut _9: usize;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:43\n+      let mut _10: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:47: +0:48\n+      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n+      let mut _12: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:53\n+      let mut _13: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:57: +0:58\n+      let mut _14: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n+      let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n+      let mut _16: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:63\n+      let mut _17: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:67: +0:68\n+      let mut _18: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n+      let mut _19: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:73\n+      let mut _20: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+      let mut _21: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _22: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _23: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _24: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      scope 1 {\n+          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n+          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n+          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n+          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n+      }\n+  \n+      bb0: {\n+          _21 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          _3 = ((*_21).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          _22 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          _4 = ((*_22).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          _23 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          _5 = ((*_23).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          _24 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          _6 = ((*_24).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+          _8 = Le(_3, _5);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+      }\n+  \n+      bb1: {\n+          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  \n+      bb2: {\n+          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+          _15 = Le(_5, _3);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+          switchInt(move _15) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb3: {\n+          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          return;                          // scope 0 at $DIR/slice_filter.rs:+0:78: +0:78\n+      }\n+  \n+      bb4: {\n+          _7 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+      }\n+  \n+      bb5: {\n+          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+          _11 = Le(_6, _4);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+          _7 = move _11;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  \n+      bb6: {\n+          _14 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb7: {\n+          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+          _18 = Le(_4, _6);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+          _14 = move _18;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb8: {\n+          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          _0 = move _14;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  }\n+  "}]}