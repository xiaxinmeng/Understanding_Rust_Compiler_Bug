{"sha": "27df89f47d5f0a6e8e62d517d98dda854efabc34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZGY4OWY0N2Q1ZjBhNmU4ZTYyZDUxN2Q5OGRkYTg1NGVmYWJjMzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-29T11:12:51Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-29T11:12:51Z"}, "message": "Merge #1456\n\n1456: Deduplicate method candidates r=matklad a=flodiebold\n\nWith trait method completion + autoderef, we were getting a lot of duplicates, which was really annoying...\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "71a90d3a24ba2e02ac477d99a62cad07de024067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71a90d3a24ba2e02ac477d99a62cad07de024067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27df89f47d5f0a6e8e62d517d98dda854efabc34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27df89f47d5f0a6e8e62d517d98dda854efabc34", "html_url": "https://github.com/rust-lang/rust/commit/27df89f47d5f0a6e8e62d517d98dda854efabc34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27df89f47d5f0a6e8e62d517d98dda854efabc34/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "2bfcfb0b0e5e518e8fc2779c6564ed1009d3f920", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bfcfb0b0e5e518e8fc2779c6564ed1009d3f920", "html_url": "https://github.com/rust-lang/rust/commit/2bfcfb0b0e5e518e8fc2779c6564ed1009d3f920"}, {"sha": "5fd3df086864bdaf2e3040bed608fea063f81967", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd3df086864bdaf2e3040bed608fea063f81967", "html_url": "https://github.com/rust-lang/rust/commit/5fd3df086864bdaf2e3040bed608fea063f81967"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "a97e876e95708a2684e0ee3c672d0c4a18c65e42", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/27df89f47d5f0a6e8e62d517d98dda854efabc34/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27df89f47d5f0a6e8e62d517d98dda854efabc34/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=27df89f47d5f0a6e8e62d517d98dda854efabc34", "patch": "@@ -1,6 +1,7 @@\n use hir::{Ty, AdtDef, TypeCtor};\n \n use crate::completion::{CompletionContext, Completions};\n+use rustc_hash::FxHashSet;\n \n /// Complete dot accesses, i.e. fields or methods (currently only fields).\n pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -36,9 +37,10 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n }\n \n fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty) {\n+    let mut seen_methods = FxHashSet::default();\n     ctx.analyzer.iterate_method_candidates(ctx.db, receiver, None, |_ty, func| {\n         let data = func.data(ctx.db);\n-        if data.has_self_param() {\n+        if data.has_self_param() && seen_methods.insert(data.name().clone()) {\n             acc.add_function(ctx, func);\n         }\n         None::<()>\n@@ -230,6 +232,34 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_trait_method_completion_deduplicated() {\n+        assert_debug_snapshot_matches!(\n+            do_ref_completion(\n+                r\"\n+            struct A {}\n+            trait Trait { fn the_method(&self); }\n+            impl<T> Trait for T {}\n+            fn foo(a: &A) {\n+               a.<|>\n+            }\n+            \",\n+            ),\n+            @r###\"\n+       \u22ee[\n+       \u22ee    CompletionItem {\n+       \u22ee        label: \"the_method\",\n+       \u22ee        source_range: [155; 155),\n+       \u22ee        delete: [155; 155),\n+       \u22ee        insert: \"the_method()$0\",\n+       \u22ee        kind: Method,\n+       \u22ee        detail: \"fn the_method(&self)\",\n+       \u22ee    },\n+       \u22ee]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn test_no_non_self_method() {\n         assert_debug_snapshot_matches!("}]}