{"sha": "b3f95f460f6c35985bf7b3e6220b1370e0323312", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZjk1ZjQ2MGY2YzM1OTg1YmY3YjNlNjIyMGIxMzcwZTAzMjMzMTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-09T17:27:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-23T16:34:44Z"}, "message": "Move `--cfg bootstrap` out of `rustc.rs`\n\nInstead let's do this via `RUSTFLAGS` in `builder.rs`. Currently\nrequires a submodule update of `stdarch` to fix a problem with previous\ncompilers.", "tree": {"sha": "53230792239f993da4a9bd6673a703945240e247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53230792239f993da4a9bd6673a703945240e247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f95f460f6c35985bf7b3e6220b1370e0323312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f95f460f6c35985bf7b3e6220b1370e0323312", "html_url": "https://github.com/rust-lang/rust/commit/b3f95f460f6c35985bf7b3e6220b1370e0323312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f95f460f6c35985bf7b3e6220b1370e0323312/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a816fa185b42bc1bd73cd241be27121dcc5b784b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a816fa185b42bc1bd73cd241be27121dcc5b784b", "html_url": "https://github.com/rust-lang/rust/commit/a816fa185b42bc1bd73cd241be27121dcc5b784b"}], "stats": {"total": 84, "additions": 35, "deletions": 49}, "files": [{"sha": "528e7787610be324f7d3d51cf743196e0b5da03f", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -76,21 +76,6 @@ fn main() {\n         }\n     }\n \n-    // Non-zero stages must all be treated uniformly to avoid problems when attempting to uplift\n-    // compiler libraries and such from stage 1 to 2.\n-    //\n-    // FIXME: the fact that core here is excluded is due to core_arch from our stdarch submodule\n-    // being broken on the beta compiler with bootstrap passed, so this is a temporary workaround\n-    // (we've just snapped, so there are no cfg(bootstrap) related annotations in core).\n-    if stage == \"0\" {\n-        if crate_name != Some(\"core\") {\n-            cmd.arg(\"--cfg\").arg(\"bootstrap\");\n-        } else {\n-            // NOTE(eddyb) see FIXME above, except now we need annotations again in core.\n-            cmd.arg(\"--cfg\").arg(\"boostrap_stdarch_ignore_this\");\n-        }\n-    }\n-\n     // Print backtrace in case of ICE\n     if env::var(\"RUSTC_BACKTRACE_ON_ICE\").is_ok() && env::var(\"RUST_BACKTRACE\").is_err() {\n         cmd.env(\"RUST_BACKTRACE\", \"1\");"}, {"sha": "076947f878161df63c3c500d1fbc8e6f592c3c99", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -820,6 +820,7 @@ impl<'a> Builder<'a> {\n             rustflags.env(\"RUSTFLAGS_NOT_BOOTSTRAP\");\n         } else {\n             rustflags.env(\"RUSTFLAGS_BOOTSTRAP\");\n+            rustflags.arg(\"--cfg=bootstrap\");\n         }\n \n         match mode {"}, {"sha": "f751ccb428030a0446d79c94f6a6592d9c8ee9fd", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -1,6 +1,6 @@\n //! impl bool {}\n \n-#[cfg(not(boostrap_stdarch_ignore_this))]\n+#[cfg(not(bootstrap))]\n #[lang = \"bool\"]\n impl bool {\n     /// Returns `Some(t)` if the `bool` is `true`, or `None` otherwise."}, {"sha": "6bdae1b557d6129ac238d9f809460c4666636b5d", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -135,7 +135,7 @@ pub trait Clone : Sized {\n \n /// Derive macro generating an impl of the trait `Clone`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n pub macro Clone($item:item) { /* compiler built-in */ }"}, {"sha": "fc7329f57d45e2aa921b1e5fc41ae880d22116e3", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -210,7 +210,7 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n \n /// Derive macro generating an impl of the trait `PartialEq`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro PartialEq($item:item) { /* compiler built-in */ }\n@@ -273,7 +273,7 @@ pub trait Eq: PartialEq<Self> {\n \n /// Derive macro generating an impl of the trait `Eq`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_eq)]\n pub macro Eq($item:item) { /* compiler built-in */ }\n@@ -624,7 +624,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n \n /// Derive macro generating an impl of the trait `Ord`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro Ord($item:item) { /* compiler built-in */ }\n@@ -873,7 +873,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n \n /// Derive macro generating an impl of the trait `PartialOrd`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro PartialOrd($item:item) { /* compiler built-in */ }"}, {"sha": "806d4783107600615c927f8343c5fc0a8810c718", "filename": "src/libcore/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -117,7 +117,7 @@ pub trait Default: Sized {\n \n /// Derive macro generating an impl of the trait `Default`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro Default($item:item) { /* compiler built-in */ }"}, {"sha": "65e2f8b9be63ffd0258dee63b0ef24af833480ee", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -518,8 +518,8 @@ impl Display for Arguments<'_> {\n     label=\"`{Self}` cannot be formatted using `{{:?}}` because it doesn't implement `{Debug}`\",\n )]\n #[doc(alias = \"{:?}\")]\n-#[cfg_attr(boostrap_stdarch_ignore_this, lang = \"debug_trait\")]\n-#[cfg_attr(not(boostrap_stdarch_ignore_this), rustc_diagnostic_item = \"debug_trait\")]\n+#[cfg_attr(bootstrap, lang = \"debug_trait\")]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"debug_trait\")]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     ///\n@@ -550,7 +550,7 @@ pub trait Debug {\n pub(crate) mod macros {\n     /// Derive macro generating an impl of the trait `Debug`.\n     #[rustc_builtin_macro]\n-    #[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+    #[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro Debug($item:item) { /* compiler built-in */ }"}, {"sha": "aaaa6f9c575fd89b873f89c097a478fcd84c6ef2", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -202,7 +202,7 @@ pub trait Hash {\n pub(crate) mod macros {\n     /// Derive macro generating an impl of the trait `Hash`.\n     #[rustc_builtin_macro]\n-    #[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+    #[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro Hash($item:item) { /* compiler built-in */ }"}, {"sha": "905375eb60fe48527c29ffd52274363a6c6148c6", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -1299,38 +1299,38 @@ extern \"rust-intrinsic\" {\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n-    #[cfg(boostrap_stdarch_ignore_this)]\n+    #[cfg(bootstrap)]\n     pub fn overflowing_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n-    #[cfg(boostrap_stdarch_ignore_this)]\n+    #[cfg(bootstrap)]\n     pub fn overflowing_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n-    #[cfg(boostrap_stdarch_ignore_this)]\n+    #[cfg(bootstrap)]\n     pub fn overflowing_mul<T>(a: T, b: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n-    #[cfg(not(boostrap_stdarch_ignore_this))]\n+    #[cfg(not(bootstrap))]\n     pub fn wrapping_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n-    #[cfg(not(boostrap_stdarch_ignore_this))]\n+    #[cfg(not(bootstrap))]\n     pub fn wrapping_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n-    #[cfg(not(boostrap_stdarch_ignore_this))]\n+    #[cfg(not(bootstrap))]\n     pub fn wrapping_mul<T>(a: T, b: T) -> T;\n \n     /// Computes `a + b`, while saturating at numeric bounds."}, {"sha": "5c681b3a5d8073330ccd705962d9687e8762ef57", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -87,7 +87,7 @@\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![cfg_attr(boostrap_stdarch_ignore_this, feature(bind_by_move_pattern_guards))]\n+#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(on_unimplemented)]"}, {"sha": "c6f5fb0b1635006960a80c4f6143d9a8e9f28a76", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -1236,9 +1236,9 @@ pub(crate) mod builtin {\n     pub macro test($item:item) { /* compiler built-in */ }\n \n     /// Attribute macro applied to a function to turn it into a benchmark test.\n-    #[cfg_attr(not(boostrap_stdarch_ignore_this), unstable(soft, feature = \"test\", issue = \"50297\",\n+    #[cfg_attr(not(bootstrap), unstable(soft, feature = \"test\", issue = \"50297\",\n                reason = \"`bench` is a part of custom test frameworks which are unstable\"))]\n-    #[cfg_attr(boostrap_stdarch_ignore_this, unstable(feature = \"test\", issue = \"50297\",\n+    #[cfg_attr(bootstrap, unstable(feature = \"test\", issue = \"50297\",\n                reason = \"`bench` is a part of custom test frameworks which are unstable\"))]\n     #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]"}, {"sha": "a2cfb320e7698e865657507e8d679fba25ef2a87", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -290,7 +290,7 @@ pub trait Copy : Clone {\n \n /// Derive macro generating an impl of the trait `Copy`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n pub macro Copy($item:item) { /* compiler built-in */ }"}, {"sha": "5d99c10e738157ac7d6380020a7fcd7ebab03c2a", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f95f460f6c35985bf7b3e6220b1370e0323312/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -1112,11 +1112,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                #[cfg(boostrap_stdarch_ignore_this)] {\n+                #[cfg(bootstrap)] {\n                     intrinsics::overflowing_add(self, rhs)\n                 }\n \n-                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                #[cfg(not(bootstrap))] {\n                     intrinsics::wrapping_add(self, rhs)\n                 }\n             }\n@@ -1141,11 +1141,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                #[cfg(boostrap_stdarch_ignore_this)] {\n+                #[cfg(bootstrap)] {\n                     intrinsics::overflowing_sub(self, rhs)\n                 }\n \n-                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                #[cfg(not(bootstrap))] {\n                     intrinsics::wrapping_sub(self, rhs)\n                 }\n             }\n@@ -1169,11 +1169,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-                #[cfg(boostrap_stdarch_ignore_this)] {\n+                #[cfg(bootstrap)] {\n                     intrinsics::overflowing_mul(self, rhs)\n                 }\n \n-                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                #[cfg(not(bootstrap))] {\n                     intrinsics::wrapping_mul(self, rhs)\n                 }\n             }\n@@ -3040,11 +3040,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                #[cfg(boostrap_stdarch_ignore_this)] {\n+                #[cfg(bootstrap)] {\n                     intrinsics::overflowing_add(self, rhs)\n                 }\n \n-                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                #[cfg(not(bootstrap))] {\n                     intrinsics::wrapping_add(self, rhs)\n                 }\n             }\n@@ -3068,11 +3068,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                #[cfg(boostrap_stdarch_ignore_this)] {\n+                #[cfg(bootstrap)] {\n                     intrinsics::overflowing_sub(self, rhs)\n                 }\n \n-                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                #[cfg(not(bootstrap))] {\n                     intrinsics::wrapping_sub(self, rhs)\n                 }\n             }\n@@ -3097,11 +3097,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n         #[inline]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-            #[cfg(boostrap_stdarch_ignore_this)] {\n+            #[cfg(bootstrap)] {\n                 intrinsics::overflowing_mul(self, rhs)\n             }\n \n-            #[cfg(not(boostrap_stdarch_ignore_this))] {\n+            #[cfg(not(bootstrap))] {\n                 intrinsics::wrapping_mul(self, rhs)\n             }\n         }"}, {"sha": "e0ab2c165ace03a61139b61f1d9b86b07028850f", "filename": "src/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdarch?ref=b3f95f460f6c35985bf7b3e6220b1370e0323312", "patch": "@@ -1 +1 @@\n-Subproject commit 4791ba85e7645c02146dd416288480943670d1ca\n+Subproject commit e0ab2c165ace03a61139b61f1d9b86b07028850f"}]}