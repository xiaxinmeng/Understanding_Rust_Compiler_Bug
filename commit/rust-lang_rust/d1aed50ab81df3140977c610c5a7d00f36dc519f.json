{"sha": "d1aed50ab81df3140977c610c5a7d00f36dc519f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYWVkNTBhYjgxZGYzMTQwOTc3YzYxMGM1YTdkMDBmMzZkYzUxOWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-26T19:44:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-26T19:44:26Z"}, "message": "Auto merge of #81417 - JohnTitor:rollup-yi3q05s, r=JohnTitor\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #80812 (Update RELEASES.md for 1.50.0)\n - #80876 (Add `unwrap_unchecked()` methods for `Option` and `Result`)\n - #80900 (Fix ICE with `ReadPointerAsBytes` validation error)\n - #81191 (BTreeMap: test all borrowing interfaces and test more chaotic order behavior)\n - #81195 (Account for generics when suggesting bound)\n - #81299 (Fix some bugs reported by eslint)\n - #81325 (typeck: Don't suggest converting LHS exprs)\n - #81353 (Fix spelling in documentation for error E0207)\n - #81369 (rustc_codegen_ssa: use wall time for codegen_to_LLVM_IR time-passes entry)\n - #81389 (rustdoc: Document CommonMark extensions.)\n - #81399 (Update books)\n - #81401 (tidy: Some code cleanup.)\n - #81407 (Refine \"remove semicolon\" suggestion in trait selection)\n - #81412 (Fix assertion in `MaybeUninit::array_assume_init()` for zero-length arrays)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "af5df905c660b9ceda7a7b7b5c5b1d7eded76b48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5df905c660b9ceda7a7b7b5c5b1d7eded76b48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1aed50ab81df3140977c610c5a7d00f36dc519f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1aed50ab81df3140977c610c5a7d00f36dc519f", "html_url": "https://github.com/rust-lang/rust/commit/d1aed50ab81df3140977c610c5a7d00f36dc519f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1aed50ab81df3140977c610c5a7d00f36dc519f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7907345e58b4f4d2c95e5ea9b8e0b3bff8946523", "url": "https://api.github.com/repos/rust-lang/rust/commits/7907345e58b4f4d2c95e5ea9b8e0b3bff8946523", "html_url": "https://github.com/rust-lang/rust/commit/7907345e58b4f4d2c95e5ea9b8e0b3bff8946523"}, {"sha": "b2f6c2aa9b0f87770b3160500cca2ae370aa618d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f6c2aa9b0f87770b3160500cca2ae370aa618d", "html_url": "https://github.com/rust-lang/rust/commit/b2f6c2aa9b0f87770b3160500cca2ae370aa618d"}], "stats": {"total": 933, "additions": 747, "deletions": 186}, "files": [{"sha": "18492213a5dd3e99c97371e6df1841d108aa863c", "filename": "RELEASES.md", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -1,3 +1,123 @@\n+Version 1.50.0 (2021-02-11)\n+============================\n+\n+Language\n+-----------------------\n+- [You can now use `const` values for `x` in `[x; N]` array expressions.][79270]\n+  This has been technically possible since 1.38.0, as it was unintentionally stabilized.\n+- [Assignments to `ManuallyDrop<T>` union fields are now considered safe.][78068]\n+\n+Compiler\n+-----------------------\n+- [Added tier 3\\* support for the `armv5te-unknown-linux-uclibceabi` target.][78142]\n+- [Added tier 3 support for the `aarch64-apple-ios-macabi` target.][77484]\n+- [The `x86_64-unknown-freebsd` is now built with the full toolset.][79484]\n+\n+\\* Refer to Rust's [platform support page][forge-platform-support] for more\n+information on Rust's tiered platform support.\n+\n+Libraries\n+-----------------------\n+\n+- [`proc_macro::Punct` now implements `PartialEq<char>`.][78636]\n+- [`ops::{Index, IndexMut}` are now implemented for fixed sized arrays of any length.][74989]\n+- [On Unix platforms, the `std::fs::File` type now has a \"niche\" of `-1`.][74699]\n+  This value cannot be a valid file descriptor, and now means `Option<File>` takes\n+  up the same amount of space as `File`.\n+\n+Stabilized APIs\n+---------------\n+\n+- [`bool::then`]\n+- [`btree_map::Entry::or_insert_with_key`]\n+- [`f32::clamp`]\n+- [`f64::clamp`]\n+- [`hash_map::Entry::or_insert_with_key`]\n+- [`Ord::clamp`]\n+- [`RefCell::take`]\n+- [`slice::fill`]\n+- [`UnsafeCell::get_mut`]\n+\n+The following previously stable methods are now `const`.\n+\n+- [`IpAddr::is_ipv4`]\n+- [`IpAddr::is_ipv6`]\n+- [`Layout::size`]\n+- [`Layout::align`]\n+- [`Layout::from_size_align`]\n+- `pow` for all integer types.\n+- `checked_pow` for all integer types.\n+- `saturating_pow` for all integer types.\n+- `wrapping_pow` for all integer types.\n+- `next_power_of_two` for all unsigned integer types.\n+- `checked_power_of_two` for all unsigned integer types.\n+\n+Cargo\n+-----------------------\n+\n+- [Added the `[build.rustc-workspace-wrapper]` option.][cargo/8976]\n+  This option sets a wrapper to execute instead of `rustc`, for workspace members only.\n+- [`cargo:rerun-if-changed` will now, if provided a directory, scan the entire\n+  contents of that directory for changes.][cargo/8973]\n+- [Added the `--workspace` flag to the `cargo update` command.][cargo/8725]\n+\n+Misc\n+----\n+\n+- [The search results tab and the help button are focusable with keyboard in rustdoc.][79896]\n+- [Running tests will now print the total time taken to execute.][75752]\n+\n+Compatibility Notes\n+-------------------\n+\n+- [The `compare_and_swap` method on atomics has been deprecated.][79261] It's\n+  recommended to use the `compare_exchange` and `compare_exchange_weak` methods instead.\n+- [Changes in how `TokenStream`s are checked have fixed some cases where you could write\n+  unhygenic `macro_rules!` macros.][79472]\n+- [`#![test]` as an inner attribute is now considered unstable like other inner macro\n+  attributes, and reports an error by default through the `soft_unstable` lint.][79003]\n+- [Overriding a `forbid` lint at the same level that it was set is now a hard error.][78864]\n+- [Dropped support for all cloudabi targets.][78439]\n+- [You can no longer intercept `panic!` calls by supplying your own macro.][78343] It's\n+  recommended to use the `#[panic_handler]` attribute to provide your own implementation.\n+- [Semi-colons after item statements (e.g. `struct Foo {};`) now produce a warning.][78296]\n+\n+[74989]: https://github.com/rust-lang/rust/pull/74989\n+[79261]: https://github.com/rust-lang/rust/pull/79261\n+[79896]: https://github.com/rust-lang/rust/pull/79896\n+[79484]: https://github.com/rust-lang/rust/pull/79484\n+[79472]: https://github.com/rust-lang/rust/pull/79472\n+[79270]: https://github.com/rust-lang/rust/pull/79270\n+[79003]: https://github.com/rust-lang/rust/pull/79003\n+[78864]: https://github.com/rust-lang/rust/pull/78864\n+[78636]: https://github.com/rust-lang/rust/pull/78636\n+[78439]: https://github.com/rust-lang/rust/pull/78439\n+[78343]: https://github.com/rust-lang/rust/pull/78343\n+[78296]: https://github.com/rust-lang/rust/pull/78296\n+[78068]: https://github.com/rust-lang/rust/pull/78068\n+[75752]: https://github.com/rust-lang/rust/pull/75752\n+[74699]: https://github.com/rust-lang/rust/pull/74699\n+[78142]: https://github.com/rust-lang/rust/pull/78142\n+[77484]: https://github.com/rust-lang/rust/pull/77484\n+[cargo/8976]: https://github.com/rust-lang/cargo/pull/8976\n+[cargo/8973]: https://github.com/rust-lang/cargo/pull/8973\n+[cargo/8725]: https://github.com/rust-lang/cargo/pull/8725\n+[`IpAddr::is_ipv4`]: https://doc.rust-lang.org/stable/std/net/enum.IpAddr.html#method.is_ipv4\n+[`IpAddr::is_ipv6`]: https://doc.rust-lang.org/stable/std/net/enum.IpAddr.html#method.is_ipv6\n+[`Layout::align`]: https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html#method.align\n+[`Layout::from_size_align`]: https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html#method.from_size_align\n+[`Layout::size`]: https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html#method.size\n+[`Ord::clamp`]: https://doc.rust-lang.org/stable/std/cmp/trait.Ord.html#method.clamp\n+[`RefCell::take`]: https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html#method.take\n+[`UnsafeCell::get_mut`]: https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html#method.get_mut\n+[`bool::then`]: https://doc.rust-lang.org/stable/std/primitive.bool.html#method.then\n+[`btree_map::Entry::or_insert_with_key`]: https://doc.rust-lang.org/stable/std/collections/btree_map/enum.Entry.html#method.or_insert_with_key\n+[`f32::clamp`]: https://doc.rust-lang.org/stable/std/primitive.f32.html#method.clamp\n+[`f64::clamp`]: https://doc.rust-lang.org/stable/std/primitive.f64.html#method.clamp\n+[`hash_map::Entry::or_insert_with_key`]: https://doc.rust-lang.org/stable/std/collections/hash_map/enum.Entry.html#method.or_insert_with_key\n+[`slice::fill`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.fill\n+\n+\n Version 1.49.0 (2020-12-31)\n ============================\n "}, {"sha": "ca7d3d1d81bf04a5d6499f82653eecccdf5aa4b6", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -13,7 +13,7 @@ use crate::{CachedModuleCodegen, CrateInfo, MemFlags, ModuleCodegen, ModuleKind}\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::print_time_passes_entry;\n-use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n+use rustc_data_structures::sync::{par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n@@ -554,8 +554,6 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         codegen_units\n     };\n \n-    let total_codegen_time = Lock::new(Duration::new(0, 0));\n-\n     // The non-parallel compiler can only translate codegen units to LLVM IR\n     // on a single thread, leading to a staircase effect where the N LLVM\n     // threads have to wait on the single codegen threads to generate work\n@@ -578,23 +576,25 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                     .collect();\n \n                 // Compile the found CGUs in parallel.\n-                par_iter(cgus)\n+                let start_time = Instant::now();\n+\n+                let pre_compiled_cgus = par_iter(cgus)\n                     .map(|(i, _)| {\n-                        let start_time = Instant::now();\n                         let module = backend.compile_codegen_unit(tcx, codegen_units[i].name());\n-                        let mut time = total_codegen_time.lock();\n-                        *time += start_time.elapsed();\n                         (i, module)\n                     })\n-                    .collect()\n+                    .collect();\n+\n+                (pre_compiled_cgus, start_time.elapsed())\n             })\n         } else {\n-            FxHashMap::default()\n+            (FxHashMap::default(), Duration::new(0, 0))\n         }\n     };\n \n     let mut cgu_reuse = Vec::new();\n     let mut pre_compiled_cgus: Option<FxHashMap<usize, _>> = None;\n+    let mut total_codegen_time = Duration::new(0, 0);\n \n     for (i, cgu) in codegen_units.iter().enumerate() {\n         ongoing_codegen.wait_for_signal_to_codegen_item();\n@@ -607,7 +607,9 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                 codegen_units.iter().map(|cgu| determine_cgu_reuse(tcx, &cgu)).collect()\n             });\n             // Pre compile some CGUs\n-            pre_compiled_cgus = Some(pre_compile_cgus(&cgu_reuse));\n+            let (compiled_cgus, codegen_time) = pre_compile_cgus(&cgu_reuse);\n+            pre_compiled_cgus = Some(compiled_cgus);\n+            total_codegen_time += codegen_time;\n         }\n \n         let cgu_reuse = cgu_reuse[i];\n@@ -621,8 +623,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                     } else {\n                         let start_time = Instant::now();\n                         let module = backend.compile_codegen_unit(tcx, cgu.name());\n-                        let mut time = total_codegen_time.lock();\n-                        *time += start_time.elapsed();\n+                        total_codegen_time += start_time.elapsed();\n                         module\n                     };\n                 submit_codegened_module_to_llvm(\n@@ -663,11 +664,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n     // Since the main thread is sometimes blocked during codegen, we keep track\n     // -Ztime-passes output manually.\n-    print_time_passes_entry(\n-        tcx.sess.time_passes(),\n-        \"codegen_to_LLVM_IR\",\n-        total_codegen_time.into_inner(),\n-    );\n+    print_time_passes_entry(tcx.sess.time_passes(), \"codegen_to_LLVM_IR\", total_codegen_time);\n \n     ongoing_codegen.check_for_errors(tcx.sess);\n "}, {"sha": "8a7923ac93f981b4963fcb0b79eb58e25b140dfc", "filename": "compiler/rustc_error_codes/src/error_codes/E0207.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0207.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0207.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0207.md?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -14,7 +14,7 @@ impl<T: Default> Foo {\n }\n ```\n \n-Any type parameter parameter of an `impl` must meet at least one of\n+Any type parameter of an `impl` must meet at least one of\n the following criteria:\n \n  - it appears in the _implementing type_ of the impl, e.g. `impl<T> Foo<T>`"}, {"sha": "26b35e87ac491575e0e80b27f710aa7d354aabeb", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -566,6 +566,17 @@ impl<'hir> Map<'hir> {\n         )\n     }\n \n+    /// Checks if the node is left-hand side of an assignment.\n+    pub fn is_lhs(&self, id: HirId) -> bool {\n+        match self.find(self.get_parent_node(id)) {\n+            Some(Node::Expr(expr)) => match expr.kind {\n+                ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,\n+                _ => false,\n+            },\n+            _ => false,\n+        }\n+    }\n+\n     /// Whether the expression pointed at by `hir_id` belongs to a `const` evaluation context.\n     /// Used exclusively for diagnostics, to avoid suggestion function calls.\n     pub fn is_inside_const_context(&self, hir_id: HirId) -> bool {"}, {"sha": "0b7492631c41d7c8437c07db6e5a01d265b71ae1", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -515,7 +515,11 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 Ok(true)\n             }\n             ty::Float(_) | ty::Int(_) | ty::Uint(_) => {\n-                let value = self.ecx.read_scalar(value)?;\n+                let value = try_validation!(\n+                    self.ecx.read_scalar(value),\n+                    self.path,\n+                    err_unsup!(ReadPointerAsBytes) => { \"read of part of a pointer\" },\n+                );\n                 // NOTE: Keep this in sync with the array optimization for int/float\n                 // types below!\n                 if self.ctfe_mode.is_some() {"}, {"sha": "0724a9290e91c64a4db86c501480ec111544a0d4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -286,21 +286,32 @@ fn suggest_restriction(\n         );\n     } else {\n         // Trivial case: `T` needs an extra bound: `T: Bound`.\n-        let (sp, suggestion) = match super_traits {\n-            None => predicate_constraint(\n+        let (sp, suggestion) = match (\n+            generics\n+                .params\n+                .iter()\n+                .filter(\n+                    |p| !matches!(p.kind, hir::GenericParamKind::Type { synthetic: Some(_), ..}),\n+                )\n+                .next(),\n+            super_traits,\n+        ) {\n+            (_, None) => predicate_constraint(\n                 generics,\n                 trait_ref.without_const().to_predicate(tcx).to_string(),\n             ),\n-            Some((ident, bounds)) => match bounds {\n-                [.., bound] => (\n-                    bound.span().shrink_to_hi(),\n-                    format!(\" + {}\", trait_ref.print_only_trait_path().to_string()),\n-                ),\n-                [] => (\n-                    ident.span.shrink_to_hi(),\n-                    format!(\": {}\", trait_ref.print_only_trait_path().to_string()),\n-                ),\n-            },\n+            (None, Some((ident, []))) => (\n+                ident.span.shrink_to_hi(),\n+                format!(\": {}\", trait_ref.print_only_trait_path().to_string()),\n+            ),\n+            (_, Some((_, [.., bounds]))) => (\n+                bounds.span().shrink_to_hi(),\n+                format!(\" + {}\", trait_ref.print_only_trait_path().to_string()),\n+            ),\n+            (Some(_), Some((_, []))) => (\n+                generics.span.shrink_to_hi(),\n+                format!(\": {}\", trait_ref.print_only_trait_path().to_string()),\n+            ),\n         };\n \n         err.span_suggestion_verbose(\n@@ -888,8 +899,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // no return, suggest removal of semicolon on last statement.\n                     // Once that is added, close #54771.\n                     if let Some(ref stmt) = blk.stmts.last() {\n-                        let sp = self.tcx.sess.source_map().end_point(stmt.span);\n-                        err.span_label(sp, \"consider removing this semicolon\");\n+                        if let hir::StmtKind::Semi(_) = stmt.kind {\n+                            let sp = self.tcx.sess.source_map().end_point(stmt.span);\n+                            err.span_label(sp, \"consider removing this semicolon\");\n+                        }\n                     }\n                 }\n             }"}, {"sha": "3c9c683f4b0cb4c89bcc75da7aa18c3673734af4", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -816,6 +816,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             |err: &mut DiagnosticBuilder<'_>,\n              found_to_exp_is_fallible: bool,\n              exp_to_found_is_fallible: bool| {\n+                let exp_is_lhs =\n+                    expected_ty_expr.map(|e| self.tcx.hir().is_lhs(e.hir_id)).unwrap_or(false);\n+\n+                if exp_is_lhs {\n+                    return;\n+                }\n+\n                 let always_fallible = found_to_exp_is_fallible\n                     && (exp_to_found_is_fallible || expected_ty_expr.is_none());\n                 let msg = if literal_is_ty_suffixed(expr) {"}, {"sha": "ba5a4442f56e6e0ab2c27a236dc8a8501ac907a2", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 87, "deletions": 1, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -777,7 +777,7 @@ fn test_range_backwards_4() {\n \n #[test]\n #[should_panic]\n-fn test_range_backwards_5() {\n+fn test_range_finding_ill_order_in_map() {\n     let mut map = BTreeMap::new();\n     map.insert(Cyclic3::B, ());\n     // Lacking static_assert, call `range` conditionally, to emphasise that\n@@ -788,6 +788,47 @@ fn test_range_backwards_5() {\n     }\n }\n \n+#[test]\n+#[should_panic]\n+fn test_range_finding_ill_order_in_range_ord() {\n+    // Has proper order the first time asked, then flips around.\n+    struct EvilTwin(i32);\n+\n+    impl PartialOrd for EvilTwin {\n+        fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+            Some(self.cmp(other))\n+        }\n+    }\n+\n+    static COMPARES: AtomicUsize = AtomicUsize::new(0);\n+    impl Ord for EvilTwin {\n+        fn cmp(&self, other: &Self) -> Ordering {\n+            let ord = self.0.cmp(&other.0);\n+            if COMPARES.fetch_add(1, SeqCst) > 0 { ord.reverse() } else { ord }\n+        }\n+    }\n+\n+    impl PartialEq for EvilTwin {\n+        fn eq(&self, other: &Self) -> bool {\n+            self.0.eq(&other.0)\n+        }\n+    }\n+\n+    impl Eq for EvilTwin {}\n+\n+    #[derive(PartialEq, Eq, PartialOrd, Ord)]\n+    struct CompositeKey(i32, EvilTwin);\n+\n+    impl Borrow<EvilTwin> for CompositeKey {\n+        fn borrow(&self) -> &EvilTwin {\n+            &self.1\n+        }\n+    }\n+\n+    let map = (0..12).map(|i| (CompositeKey(i, EvilTwin(i)), ())).collect::<BTreeMap<_, _>>();\n+    map.range(EvilTwin(5)..=EvilTwin(7));\n+}\n+\n #[test]\n fn test_range_1000() {\n     // Miri is too slow\n@@ -1222,6 +1263,51 @@ fn test_borrow() {\n         map.insert(Rc::new(0), 1);\n         assert_eq!(map[&0], 1);\n     }\n+\n+    #[allow(dead_code)]\n+    fn get<T: Ord>(v: &BTreeMap<Box<T>, ()>, t: &T) {\n+        v.get(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn get_mut<T: Ord>(v: &mut BTreeMap<Box<T>, ()>, t: &T) {\n+        v.get_mut(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn get_key_value<T: Ord>(v: &BTreeMap<Box<T>, ()>, t: &T) {\n+        v.get_key_value(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn contains_key<T: Ord>(v: &BTreeMap<Box<T>, ()>, t: &T) {\n+        v.contains_key(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn range<T: Ord>(v: &BTreeMap<Box<T>, ()>, t: T) {\n+        v.range(t..);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn range_mut<T: Ord>(v: &mut BTreeMap<Box<T>, ()>, t: T) {\n+        v.range_mut(t..);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn remove<T: Ord>(v: &mut BTreeMap<Box<T>, ()>, t: &T) {\n+        v.remove(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn remove_entry<T: Ord>(v: &mut BTreeMap<Box<T>, ()>, t: &T) {\n+        v.remove_entry(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn split_off<T: Ord>(v: &mut BTreeMap<Box<T>, ()>, t: &T) {\n+        v.split_off(t);\n+    }\n }\n \n #[test]"}, {"sha": "05bcd90d3ca76d67ba6119bf89377f53facf4abe", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -839,7 +839,7 @@ impl<T> MaybeUninit<T> {\n         // * MaybeUnint does not drop, so there are no double-frees\n         // And thus the conversion is safe\n         unsafe {\n-            intrinsics::assert_inhabited::<T>();\n+            intrinsics::assert_inhabited::<[T; N]>();\n             (&array as *const _ as *const [T; N]).read()\n         }\n     }"}, {"sha": "14e4e4da3b96dba97faa730aef9cb04391435b5c", "filename": "library/core/src/option.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -428,6 +428,40 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Returns the contained [`Some`] value, consuming the `self` value,\n+    /// without checking that the value is not [`None`].\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method on [`None`] is *[undefined behavior]*.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x = Some(\"air\");\n+    /// assert_eq!(unsafe { x.unwrap_unchecked() }, \"air\");\n+    /// ```\n+    ///\n+    /// ```no_run\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Option<&str> = None;\n+    /// assert_eq!(unsafe { x.unwrap_unchecked() }, \"air\"); // Undefined behavior!\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"81383\")]\n+    pub unsafe fn unwrap_unchecked(self) -> T {\n+        debug_assert!(self.is_some());\n+        match self {\n+            Some(val) => val,\n+            // SAFETY: the safety contract must be upheld by the caller.\n+            None => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Transforming contained values\n     /////////////////////////////////////////////////////////////////////////"}, {"sha": "a43ba5882edcd704bbeabf6ca730eb3e2221631e", "filename": "library/core/src/result.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -229,7 +229,7 @@\n \n use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};\n use crate::ops::{self, Deref, DerefMut};\n-use crate::{convert, fmt};\n+use crate::{convert, fmt, hint};\n \n /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n@@ -821,6 +821,74 @@ impl<T, E> Result<T, E> {\n             Err(e) => op(e),\n         }\n     }\n+\n+    /// Returns the contained [`Ok`] value, consuming the `self` value,\n+    /// without checking that the value is not an [`Err`].\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method on an [`Err`] is *[undefined behavior]*.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(unsafe { x.unwrap_unchecked() }, 2);\n+    /// ```\n+    ///\n+    /// ```no_run\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// unsafe { x.unwrap_unchecked(); } // Undefined behavior!\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"81383\")]\n+    pub unsafe fn unwrap_unchecked(self) -> T {\n+        debug_assert!(self.is_ok());\n+        match self {\n+            Ok(t) => t,\n+            // SAFETY: the safety contract must be upheld by the caller.\n+            Err(_) => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n+    /// Returns the contained [`Err`] value, consuming the `self` value,\n+    /// without checking that the value is not an [`Ok`].\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method on an [`Ok`] is *[undefined behavior]*.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// unsafe { x.unwrap_err_unchecked() }; // Undefined behavior!\n+    /// ```\n+    ///\n+    /// ```\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// assert_eq!(unsafe { x.unwrap_err_unchecked() }, \"emergency failure\");\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"81383\")]\n+    pub unsafe fn unwrap_err_unchecked(self) -> E {\n+        debug_assert!(self.is_err());\n+        match self {\n+            // SAFETY: the safety contract must be upheld by the caller.\n+            Ok(_) => unsafe { hint::unreachable_unchecked() },\n+            Err(e) => e,\n+        }\n+    }\n }\n \n impl<T: Copy, E> Result<&T, E> {"}, {"sha": "b7a406c30e91bcf169bbed5ed0e33bc267b49d58", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -64,6 +64,7 @@\n #![feature(const_raw_ptr_deref)]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n+#![feature(option_result_unwrap_unchecked)]\n #![feature(option_unwrap_none)]\n #![feature(peekable_next_if)]\n #![feature(peekable_peek_mut)]"}, {"sha": "38084f401bce68d6e406b16905dc3cbbea6db2d4", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -152,6 +152,8 @@ fn uninit_array_assume_init() {\n     let array = unsafe { MaybeUninit::array_assume_init(array) };\n \n     assert_eq!(array, [3, 1, 4, 1, 5]);\n+\n+    let [] = unsafe { MaybeUninit::<!>::array_assume_init([]) };\n }\n \n #[test]"}, {"sha": "9470451278cc4236ec34d47037458dba285d1bd6", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -160,6 +160,13 @@ fn test_unwrap_or_else() {\n     assert_eq!(x.unwrap_or_else(|| 2), 2);\n }\n \n+#[test]\n+fn test_unwrap_unchecked() {\n+    assert_eq!(unsafe { Some(1).unwrap_unchecked() }, 1);\n+    let s = unsafe { Some(\"hello\".to_string()).unwrap_unchecked() };\n+    assert_eq!(s, \"hello\");\n+}\n+\n #[test]\n fn test_iter() {\n     let val = 5;"}, {"sha": "7aa44c6e593b3f6fa8a9807df30d420cdde98412", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -119,6 +119,18 @@ pub fn test_unwrap_or_else_panic() {\n     let _: isize = bad_err.unwrap_or_else(handler);\n }\n \n+#[test]\n+fn test_unwrap_unchecked() {\n+    let ok: Result<isize, &'static str> = Ok(100);\n+    assert_eq!(unsafe { ok.unwrap_unchecked() }, 100);\n+}\n+\n+#[test]\n+fn test_unwrap_err_unchecked() {\n+    let ok_err: Result<isize, &'static str> = Err(\"Err\");\n+    assert_eq!(unsafe { ok_err.unwrap_err_unchecked() }, \"Err\");\n+}\n+\n #[test]\n pub fn test_expect_ok() {\n     let ok: Result<isize, &'static str> = Ok(100);"}, {"sha": "e724bd826580ff95df48a8533af7dec1080693d4", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -1 +1 @@\n-Subproject commit ac57a0ddd23d173b26731ccf939f3ba729753275\n+Subproject commit e724bd826580ff95df48a8533af7dec1080693d4"}, {"sha": "bbf06ad39d1f45654047e9596b750cc6e6d1b693", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -1 +1 @@\n-Subproject commit a8584998eacdea7106a1dfafcbf6c1c06fcdf925\n+Subproject commit bbf06ad39d1f45654047e9596b750cc6e6d1b693"}, {"sha": "f02b09eb6e8af340ad1256a54adb7aae2ff3163e", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -1 +1 @@\n-Subproject commit 50af691f838937c300b47812d0507c6d88c14f97\n+Subproject commit f02b09eb6e8af340ad1256a54adb7aae2ff3163e"}, {"sha": "f633769acef68574427a6fae6c06f13bc2199573", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -1 +1 @@\n-Subproject commit 03e23af01f0b4f83a3a513da280e1ca92587f2ec\n+Subproject commit f633769acef68574427a6fae6c06f13bc2199573"}, {"sha": "41736e5ee3a7ea9944901fe44935ee670fa27ca0", "filename": "src/doc/rustdoc/src/how-to-write-documentation.md", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -153,11 +153,73 @@ and finally provides a code example.\n \n ## Markdown\n \n-`rustdoc` uses the [commonmark markdown specification]. You might be\n+`rustdoc` uses the [CommonMark markdown specification]. You might be\n interested into taking a look at their website to see what's possible to do.\n  - [commonmark quick reference]\n  - [current spec]\n \n+In addition to the standard CommonMark syntax, `rustdoc` supports several\n+extensions:\n+\n+### Strikethrough\n+\n+Text may be rendered with a horizontal line through the center by wrapping the\n+text with two tilde characters on each side:\n+\n+```text\n+An example of ~~strikethrough text~~.\n+```\n+\n+This example will render as:\n+\n+> An example of ~~strikethrough text~~.\n+\n+This follows the [GitHub Strikethrough extension][strikethrough].\n+\n+### Footnotes\n+\n+A footnote generates a small numbered link in the text which when clicked\n+takes the reader to the footnote text at the bottom of the item. The footnote\n+label is written similarly to a link reference with a caret at the front. The\n+footnote text is written like a link reference definition, with the text\n+following the label. Example:\n+\n+```text\n+This is an example of a footnote[^note].\n+\n+[^note]: This text is the contents of the footnote, which will be rendered\n+    towards the bottom.\n+```\n+\n+This example will render as:\n+\n+> This is an example of a footnote[^note].\n+>\n+> [^note]: This text is the contents of the footnote, which will be rendered\n+>     towards the bottom.\n+\n+The footnotes are automatically numbered based on the order the footnotes are\n+written.\n+\n+### Tables\n+\n+Tables can be written using pipes and dashes to draw the rows and columns of\n+the table. These will be translated to HTML table matching the shape. Example:\n+\n+```text\n+| Header1 | Header2 |\n+|---------|---------|\n+| abc     | def     |\n+```\n+\n+This example will render similarly to this:\n+\n+> | Header1 | Header2 |\n+> |---------|---------|\n+> | abc     | def     |\n+\n+See the specification for the [GitHub Tables extension][tables] for more\n+details on the exact syntax supported.\n \n [`backtrace`]: https://docs.rs/backtrace/0.3.50/backtrace/\n [commonmark markdown specification]: https://commonmark.org/\n@@ -170,3 +232,5 @@ interested into taking a look at their website to see what's possible to do.\n [standard library]: https://doc.rust-lang.org/stable/std/index.html\n [current spec]: https://spec.commonmark.org/current/\n [`std::env`]: https://doc.rust-lang.org/stable/std/env/index.html#functions\n+[strikethrough]: https://github.github.com/gfm/#strikethrough-extension-\n+[tables]: https://github.github.com/gfm/#tables-extension-"}, {"sha": "53f0831852456bfc753056ec27c14598c6812974", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -1,9 +1,6 @@\n-// From rust:\n-/* global ALIASES */\n-\n // Local js definitions:\n-/* global addClass, getCurrentValue, hasClass */\n-/* global onEachLazy, hasOwnProperty, removeClass, updateLocalStorage */\n+/* global addClass, getSettingValue, hasClass */\n+/* global onEach, onEachLazy, hasOwnProperty, removeClass, updateLocalStorage */\n /* global hideThemeButtonState, showThemeButtonState */\n \n if (!String.prototype.startsWith) {\n@@ -2214,7 +2211,7 @@ function defocusSearchBar() {\n         }\n     }\n \n-    function toggleAllDocs(pageId, fromAutoCollapse) {\n+    function toggleAllDocs(fromAutoCollapse) {\n         var innerToggle = document.getElementById(toggleAllDocsId);\n         if (!innerToggle) {\n             return;\n@@ -2257,14 +2254,14 @@ function defocusSearchBar() {\n                     }\n                     if (!parent || !superParent || superParent.id !== \"main\" ||\n                         hasClass(parent, \"impl\") === false) {\n-                        collapseDocs(e, \"hide\", pageId);\n+                        collapseDocs(e, \"hide\");\n                     }\n                 });\n             }\n         }\n     }\n \n-    function collapseDocs(toggle, mode, pageId) {\n+    function collapseDocs(toggle, mode) {\n         if (!toggle || !toggle.parentNode) {\n             return;\n         }\n@@ -2384,35 +2381,35 @@ function defocusSearchBar() {\n         }\n     }\n \n-    function collapser(pageId, e, collapse) {\n+    function collapser(e, collapse) {\n         // inherent impl ids are like \"impl\" or impl-<number>'.\n         // they will never be hidden by default.\n         var n = e.parentElement;\n         if (n.id.match(/^impl(?:-\\d+)?$/) === null) {\n             // Automatically minimize all non-inherent impls\n             if (collapse || hasClass(n, \"impl\")) {\n-                collapseDocs(e, \"hide\", pageId);\n+                collapseDocs(e, \"hide\");\n             }\n         }\n     }\n \n-    function autoCollapse(pageId, collapse) {\n+    function autoCollapse(collapse) {\n         if (collapse) {\n-            toggleAllDocs(pageId, true);\n+            toggleAllDocs(true);\n         } else if (getSettingValue(\"auto-hide-trait-implementations\") !== \"false\") {\n             var impl_list = document.getElementById(\"trait-implementations-list\");\n \n             if (impl_list !== null) {\n                 onEachLazy(impl_list.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                    collapser(pageId, e, collapse);\n+                    collapser(e, collapse);\n                 });\n             }\n \n             var blanket_list = document.getElementById(\"blanket-implementations-list\");\n \n             if (blanket_list !== null) {\n                 onEachLazy(blanket_list.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                    collapser(pageId, e, collapse);\n+                    collapser(e, collapse);\n                 });\n             }\n         }\n@@ -2475,7 +2472,6 @@ function defocusSearchBar() {\n         var toggle = createSimpleToggle(false);\n         var hideMethodDocs = getSettingValue(\"auto-hide-method-docs\") === \"true\";\n         var hideImplementors = getSettingValue(\"auto-collapse-implementors\") !== \"false\";\n-        var pageId = getPageId();\n \n         var func = function(e) {\n             var next = e.nextElementSibling;\n@@ -2489,7 +2485,7 @@ function defocusSearchBar() {\n                 var newToggle = toggle.cloneNode(true);\n                 insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n                 if (hideMethodDocs === true && hasClass(e, \"method\") === true) {\n-                    collapseDocs(newToggle, \"hide\", pageId);\n+                    collapseDocs(newToggle, \"hide\");\n                 }\n             }\n         };\n@@ -2513,7 +2509,7 @@ function defocusSearchBar() {\n                 // In case the option \"auto-collapse implementors\" is not set to false, we collapse\n                 // all implementors.\n                 if (hideImplementors === true && e.parentNode.id === \"implementors-list\") {\n-                    collapseDocs(newToggle, \"hide\", pageId);\n+                    collapseDocs(newToggle, \"hide\");\n                 }\n             }\n         };\n@@ -2527,7 +2523,7 @@ function defocusSearchBar() {\n                 if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n                     // Automatically minimize all non-inherent impls\n                     if (hasClass(e, \"impl\") === true) {\n-                        collapseDocs(newToggle, \"hide\", pageId);\n+                        collapseDocs(newToggle, \"hide\");\n                     }\n                 }\n             };\n@@ -2562,14 +2558,12 @@ function defocusSearchBar() {\n         }\n         onEachLazy(document.getElementsByClassName(\"impl-items\"), function(e) {\n             onEachLazy(e.getElementsByClassName(\"associatedconstant\"), func);\n-            var hiddenElems = e.getElementsByClassName(\"hidden\");\n-            var needToggle = false;\n-\n-            var needToggle = onEachLazy(e.getElementsByClassName(\"hidden\"), function(hiddenElem) {\n-                if (hasClass(hiddenElem, \"content\") === false &&\n-                    hasClass(hiddenElem, \"docblock\") === false) {\n-                    return true;\n-                }\n+            // We transform the DOM iterator into a vec of DOM elements to prevent performance\n+            // issues on webkit browsers.\n+            var hiddenElems = Array.prototype.slice.call(e.getElementsByClassName(\"hidden\"));\n+            var needToggle = hiddenElems.some(function(hiddenElem) {\n+                return hasClass(hiddenElem, \"content\") === false &&\n+                    hasClass(hiddenElem, \"docblock\") === false;\n             });\n             if (needToggle === true) {\n                 var inner_toggle = newToggle.cloneNode(true);\n@@ -2672,10 +2666,10 @@ function defocusSearchBar() {\n \n         onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n         onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n-        var pageId = getPageId();\n \n-        autoCollapse(pageId, getSettingValue(\"collapse\") === \"true\");\n+        autoCollapse(getSettingValue(\"collapse\") === \"true\");\n \n+        var pageId = getPageId();\n         if (pageId !== null) {\n             expandSection(pageId);\n         }"}, {"sha": "4f10e14e8558c71cde4c5ef964d91ae90e03a796", "filename": "src/librustdoc/html/static/settings.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -1,5 +1,5 @@\n // Local js definitions:\n-/* global getCurrentValue, getVirtualKey, updateLocalStorage, updateSystemTheme */\n+/* global getSettingValue, getVirtualKey, onEachLazy, updateLocalStorage, updateSystemTheme */\n \n (function () {\n     function changeSetting(settingName, value) {"}, {"sha": "42b54e4cc1e46a639b31fc1fffcc0638b0bdb9ea", "filename": "src/librustdoc/html/static/source-script.js", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -113,6 +113,8 @@ function createSidebarToggle() {\n     return sidebarToggle;\n }\n \n+// This function is called from \"source-files.js\", generated in `html/render/mod.rs`.\n+// eslint-disable-next-line no-unused-vars\n function createSourceSidebar() {\n     if (window.rootPath.endsWith(\"/\") === false) {\n         window.rootPath += \"/\";"}, {"sha": "9c5ac1625afeae0c6714ce7a84a920b4b858091d", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -1,5 +1,5 @@\n // From rust:\n-/* global resourcesSuffix, getSettingValue */\n+/* global resourcesSuffix */\n \n var darkThemes = [\"dark\", \"ayu\"];\n var currentTheme = document.getElementById(\"themeStyle\");\n@@ -35,17 +35,20 @@ var localStoredTheme = getSettingValue(\"theme\");\n \n var savedHref = [];\n \n+// eslint-disable-next-line no-unused-vars\n function hasClass(elem, className) {\n     return elem && elem.classList && elem.classList.contains(className);\n }\n \n+// eslint-disable-next-line no-unused-vars\n function addClass(elem, className) {\n     if (!elem || !elem.classList) {\n         return;\n     }\n     elem.classList.add(className);\n }\n \n+// eslint-disable-next-line no-unused-vars\n function removeClass(elem, className) {\n     if (!elem || !elem.classList) {\n         return;\n@@ -81,6 +84,7 @@ function onEachLazy(lazyArray, func, reversed) {\n         reversed);\n }\n \n+// eslint-disable-next-line no-unused-vars\n function hasOwnProperty(obj, property) {\n     return Object.prototype.hasOwnProperty.call(obj, property);\n }\n@@ -148,6 +152,8 @@ function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n     }\n }\n \n+// This function is called from \"theme.js\", generated in `html/render/mod.rs`.\n+// eslint-disable-next-line no-unused-vars\n function useSystemTheme(value) {\n     if (value === undefined) {\n         value = true;\n@@ -172,7 +178,7 @@ var updateSystemTheme = (function() {\n             switchTheme(\n                 currentTheme,\n                 mainTheme,\n-                JSON.parse(cssTheme) || light,\n+                JSON.parse(cssTheme) || \"light\",\n                 true\n             );\n         };"}, {"sha": "be61b7dda256aa3f045333896f379528ec200bcd", "filename": "src/test/ui/bound-suggestions.fixed", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.fixed?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -40,4 +40,29 @@ fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: Debug {\n     //~^ ERROR doesn't implement\n }\n \n-pub fn main() { }\n+trait Foo<T>: Sized {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Bar: std::fmt::Display + Sized {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Baz: Sized where Self: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Qux<T>: Sized where Self: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Bat<T>: std::fmt::Display + Sized {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+fn main() { }"}, {"sha": "86f708d42f5e7c37b464a1179c7b68838fcb9376", "filename": "src/test/ui/bound-suggestions.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fbound-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fbound-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -40,4 +40,29 @@ fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized {\n     //~^ ERROR doesn't implement\n }\n \n-pub fn main() { }\n+trait Foo<T> {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Bar: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Baz where Self: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Qux<T> where Self: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Bat<T>: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+fn main() { }"}, {"sha": "12e67e90265abab07190ac790aeba243e94ec44d", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -76,6 +76,86 @@ help: consider further restricting type parameter `X`\n LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: Debug {\n    |                                                            ^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/bound-suggestions.rs:44:46\n+   |\n+LL |     const SIZE: usize = core::mem::size_of::<Self>();\n+   |                                              ^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Foo<T>: Sized {\n+   |             ^^^^^^^\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/bound-suggestions.rs:49:46\n+   |\n+LL |     const SIZE: usize = core::mem::size_of::<Self>();\n+   |                                              ^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Bar: std::fmt::Display + Sized {\n+   |                              ^^^^^^^\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/bound-suggestions.rs:54:46\n+   |\n+LL |     const SIZE: usize = core::mem::size_of::<Self>();\n+   |                                              ^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Baz: Sized where Self: std::fmt::Display {\n+   |          ^^^^^^^\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/bound-suggestions.rs:59:46\n+   |\n+LL |     const SIZE: usize = core::mem::size_of::<Self>();\n+   |                                              ^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Qux<T>: Sized where Self: std::fmt::Display {\n+   |             ^^^^^^^\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/bound-suggestions.rs:64:46\n+   |\n+LL |     const SIZE: usize = core::mem::size_of::<Self>();\n+   |                                              ^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Bat<T>: std::fmt::Display + Sized {\n+   |                                 ^^^^^^^\n+\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "a2e7b97b3187d8f6fe58900ff8f761f2edf3e351", "filename": "src/test/ui/consts/issue-79690.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -0,0 +1,32 @@\n+// ignore-32bit\n+// This test gives a different error on 32-bit architectures.\n+\n+union Transmute<T: Copy, U: Copy> {\n+    t: T,\n+    u: U,\n+}\n+trait Bar {\n+    fn bar(&self) -> u32;\n+}\n+struct Foo {\n+    foo: u32,\n+    bar: bool,\n+}\n+impl Bar for Foo {\n+    fn bar(&self) -> u32 {\n+        self.foo\n+    }\n+}\n+#[derive(Copy, Clone)]\n+struct Fat<'a>(&'a Foo, &'static VTable);\n+struct VTable {\n+    size: Foo,\n+}\n+const FOO: &dyn Bar = &Foo {\n+    foo: 128,\n+    bar: false,\n+};\n+const G: Fat = unsafe { Transmute { t: FOO }.u };\n+//~^ ERROR it is undefined behavior to use this value\n+\n+fn main() {}"}, {"sha": "918dd4c20f96cbdab5c1106eebb21cbc1a12a119", "filename": "src/test/ui/consts/issue-79690.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.stderr?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -0,0 +1,11 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/issue-79690.rs:29:1\n+   |\n+LL | const G: Fat = unsafe { Transmute { t: FOO }.u };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered read of part of a pointer at .1.<deref>.size.foo\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "a601b5866f43e1689ae49fc9589c2cee9329b88f", "filename": "src/test/ui/suggestions/issue-81098.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -0,0 +1,13 @@\n+// Don't suggest removing a semicolon if the last statement isn't an expression with semicolon\n+// (#81098)\n+fn wat() -> impl core::fmt::Display { //~ ERROR: `()` doesn't implement `std::fmt::Display`\n+    fn why() {}\n+}\n+\n+// Do it if the last statement is an expression with semicolon\n+// (#54771)\n+fn ok() -> impl core::fmt::Display { //~ ERROR: `()` doesn't implement `std::fmt::Display`\n+    1;\n+}\n+\n+fn main() {}"}, {"sha": "2a72159e5774bbc3e1fbb2fd6e000b036682567f", "filename": "src/test/ui/suggestions/issue-81098.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/issue-81098.rs:3:13\n+   |\n+LL | fn wat() -> impl core::fmt::Display {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ `()` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/issue-81098.rs:9:12\n+   |\n+LL | fn ok() -> impl core::fmt::Display {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^ `()` cannot be formatted with the default formatter\n+LL |     1;\n+   |      - consider removing this semicolon\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "076b8c944b8a4d79869e1058f148dd72ca5428e8", "filename": "src/test/ui/typeck/issue-81293.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let a: u16;\n+    let b: u16 = 42;\n+    let c: usize = 5;\n+\n+    a = c + b * 5; //~ ERROR: mismatched types [E0308]\n+                   //~| ERROR: mismatched types [E0308]\n+                   //~| ERROR: cannot add `u16` to `usize` [E0277]\n+}"}, {"sha": "1e6ff3b5f9ee752ed72fc8dc2a7bdb11d1dc056c", "filename": "src/test/ui/typeck/issue-81293.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-81293.rs:6:13\n+   |\n+LL |     a = c + b * 5;\n+   |             ^^^^^ expected `usize`, found `u16`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-81293.rs:6:9\n+   |\n+LL |     a = c + b * 5;\n+   |         ^^^^^^^^^ expected `u16`, found `usize`\n+\n+error[E0277]: cannot add `u16` to `usize`\n+  --> $DIR/issue-81293.rs:6:11\n+   |\n+LL |     a = c + b * 5;\n+   |           ^ no implementation for `usize + u16`\n+   |\n+   = help: the trait `Add<u16>` is not implemented for `usize`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "e06616a59f38c16becbd95cfbfe5759ef9898034", "filename": "src/tools/tidy/src/cargo.rs", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7907345e58b4f4d2c95e5ea9b8e0b3bff8946523/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7907345e58b4f4d2c95e5ea9b8e0b3bff8946523/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=7907345e58b4f4d2c95e5ea9b8e0b3bff8946523", "patch": "@@ -1,90 +0,0 @@\n-//! Tidy check to ensure that `[dependencies]` and `extern crate` are in sync.\n-//!\n-//! This tidy check ensures that all crates listed in the `[dependencies]`\n-//! section of a `Cargo.toml` are present in the corresponding `lib.rs` as\n-//! `extern crate` declarations. This should help us keep the DAG correctly\n-//! structured through various refactorings to prune out unnecessary edges.\n-\n-use std::fs;\n-use std::path::Path;\n-\n-pub fn check(path: &Path, bad: &mut bool) {\n-    if !super::filter_dirs(path) {\n-        return;\n-    }\n-    for entry in t!(path.read_dir(), path).map(|e| t!(e)) {\n-        // Look for `Cargo.toml` with a sibling `src/lib.rs` or `lib.rs`.\n-        if entry.file_name().to_str() == Some(\"Cargo.toml\") {\n-            if path.join(\"src/lib.rs\").is_file() {\n-                verify(&entry.path(), &path.join(\"src/lib.rs\"), bad)\n-            }\n-            if path.join(\"lib.rs\").is_file() {\n-                verify(&entry.path(), &path.join(\"lib.rs\"), bad)\n-            }\n-        } else if t!(entry.file_type()).is_dir() {\n-            check(&entry.path(), bad);\n-        }\n-    }\n-}\n-\n-/// Verifies that the dependencies in Cargo.toml at `tomlfile` are synced with\n-/// the `extern crate` annotations in the lib.rs at `libfile`.\n-fn verify(tomlfile: &Path, libfile: &Path, bad: &mut bool) {\n-    let toml = t!(fs::read_to_string(&tomlfile));\n-    let librs = t!(fs::read_to_string(&libfile));\n-\n-    if toml.contains(\"name = \\\"bootstrap\\\"\") {\n-        return;\n-    }\n-\n-    // \"Poor man's TOML parser\" -- just assume we use one syntax for now.\n-    //\n-    // We just look for:\n-    //\n-    // ````\n-    // [dependencies]\n-    // name = ...\n-    // name2 = ...\n-    // name3 = ...\n-    // ```\n-    //\n-    // If we encounter a line starting with `[` then we assume it's the end of\n-    // the dependency section and bail out.\n-    let deps = match toml.find(\"[dependencies]\") {\n-        Some(i) => &toml[i + 1..],\n-        None => return,\n-    };\n-    for line in deps.lines() {\n-        if line.starts_with('[') {\n-            break;\n-        }\n-\n-        let krate = match line.split_once('=') {\n-            None => continue,\n-            Some((krate, _)) => krate.trim(),\n-        };\n-\n-        // Don't worry about depending on core/std while not writing `extern crate\n-        // core/std` -- that's intentional.\n-        if krate == \"core\" || krate == \"std\" {\n-            continue;\n-        }\n-\n-        // This is intentional -- this dependency just makes the crate available\n-        // for others later on.\n-        let allowed = krate.starts_with(\"panic\");\n-        if toml.contains(\"name = \\\"std\\\"\") && allowed {\n-            continue;\n-        }\n-\n-        if !librs.contains(&format!(\"extern crate {}\", krate)) {\n-            tidy_error!(\n-                bad,\n-                \"{} doesn't have `extern crate {}`, but Cargo.toml \\\n-                              depends on it\",\n-                libfile.display(),\n-                krate\n-            );\n-        }\n-    }\n-}"}, {"sha": "283c43e325c05422c7003f069005b025d97ad2ab", "filename": "src/tools/tidy/src/edition.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -2,20 +2,6 @@\n \n use std::path::Path;\n \n-fn filter_dirs(path: &Path) -> bool {\n-    // FIXME: just use super::filter_dirs after the submodules are updated.\n-    if super::filter_dirs(path) {\n-        return true;\n-    }\n-    let skip = [\n-        \"src/doc/book/second-edition\",\n-        \"src/doc/book/2018-edition\",\n-        \"src/doc/book/ci/stable-check\",\n-        \"src/doc/reference/stable-check\",\n-    ];\n-    skip.iter().any(|p| path.ends_with(p))\n-}\n-\n fn is_edition_2018(mut line: &str) -> bool {\n     line = line.trim();\n     line == \"edition = \\\"2018\\\"\" || line == \"edition = \\'2018\\'\"\n@@ -24,7 +10,7 @@ fn is_edition_2018(mut line: &str) -> bool {\n pub fn check(path: &Path, bad: &mut bool) {\n     super::walk(\n         path,\n-        &mut |path| filter_dirs(path) || path.ends_with(\"src/test\"),\n+        &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap();"}, {"sha": "cb84fd8be6fec2ad4c7164750495bf743cdf4632", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -422,7 +422,7 @@ fn map_lib_features(\n                         mf(Err($msg), file, i + 1);\n                         continue;\n                     }};\n-                };\n+                }\n                 if let Some((ref name, ref mut f)) = becoming_feature {\n                     if f.tracking_issue.is_none() {\n                         f.tracking_issue = find_attr_val(line, \"issue\").and_then(handle_issue_none);"}, {"sha": "27972c4992442b7b268c4ab4bfc8967e29b462c6", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -40,7 +40,6 @@ macro_rules! tidy_error {\n }\n \n pub mod bins;\n-pub mod cargo;\n pub mod debug_artifacts;\n pub mod deps;\n pub mod edition;"}, {"sha": "2ac96e404acb9e61940c5e7061a3724101ea41ec", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aed50ab81df3140977c610c5a7d00f36dc519f/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=d1aed50ab81df3140977c610c5a7d00f36dc519f", "patch": "@@ -49,10 +49,6 @@ fn main() {\n     style::check(&compiler_path, &mut bad);\n     style::check(&library_path, &mut bad);\n \n-    cargo::check(&src_path, &mut bad);\n-    cargo::check(&compiler_path, &mut bad);\n-    cargo::check(&library_path, &mut bad);\n-\n     edition::check(&src_path, &mut bad);\n     edition::check(&compiler_path, &mut bad);\n     edition::check(&library_path, &mut bad);"}]}