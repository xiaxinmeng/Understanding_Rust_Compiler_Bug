{"sha": "3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZmI1NWFiMDlhODUzM2RhN2M1YmY1NTljOTIzNjg1ZDVkNjRkYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-06T15:44:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-06T15:44:05Z"}, "message": "auto merge of #8313 : msullivan/rust/cleanup, r=catamorphism", "tree": {"sha": "bdd4358cae6921f85a47492dcdf8d332da1bfdcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd4358cae6921f85a47492dcdf8d332da1bfdcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "html_url": "https://github.com/rust-lang/rust/commit/3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba3d03d3a4836aa5776ca8c4cb0e9982b00f516b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3d03d3a4836aa5776ca8c4cb0e9982b00f516b", "html_url": "https://github.com/rust-lang/rust/commit/ba3d03d3a4836aa5776ca8c4cb0e9982b00f516b"}, {"sha": "53c6de56840b72a75909d5d51babb4511dee5a83", "url": "https://api.github.com/repos/rust-lang/rust/commits/53c6de56840b72a75909d5d51babb4511dee5a83", "html_url": "https://github.com/rust-lang/rust/commit/53c6de56840b72a75909d5d51babb4511dee5a83"}], "stats": {"total": 167, "additions": 80, "deletions": 87}, "files": [{"sha": "fce6e8a9e2fccf190bf34d8c1a51ec93e3202f7e", "filename": "mk/target.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -48,7 +48,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)): \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_GLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_GLOB_$(2)),$$(notdir $$@))\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2)): \\\n@@ -58,7 +58,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2)): \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_GLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_GLOB_$(2)),$$(notdir $$@))\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n@@ -69,7 +69,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_GLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $(BORROWCK) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) $(BORROWCK) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_GLOB_$(2)),$$(notdir $$@))\n \n # Only build the compiler for host triples\n@@ -90,7 +90,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)):\t\t\\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(2)),$$(notdir $$@))\n \n $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X_$(3)):\t\t\t\\"}, {"sha": "32c034d878cb9671a5ef7ada47c308dd9be0e550", "filename": "mk/tools.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -49,7 +49,7 @@ $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4)):\t\t\\\n \t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTPKG_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTPKG_GLOB_$(4)),$$(notdir $$@))\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X_$(4)):\t\t\t\t\\\n@@ -67,7 +67,7 @@ $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4)):\t\t\\\n \t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTDOC_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTDOC_GLOB_$(4)),$$(notdir $$@))\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X_$(4)):\t\t\t\\\n@@ -85,7 +85,7 @@ $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTI_$(4)):\t\t\\\n \t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTI_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTI_GLOB_$(4)),$$(notdir $$@))\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X_$(4)):\t\t\t\\\n@@ -106,7 +106,7 @@ $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(4)):\t\t\\\n \t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUST_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUST_GLOB_$(4)),$$(notdir $$@))\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X_$(4)):\t\t\t\\"}, {"sha": "4e4261e8b2bbda8b8dd19dfc6a3d3704a941dd6d", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -11,7 +11,6 @@\n #[crate_type = \"bin\"];\n \n #[allow(non_camel_case_types)];\n-#[allow(unrecognized_lint)]; // NOTE: remove after snapshot\n #[deny(warnings)];\n \n extern mod extra;"}, {"sha": "2c642d54253b6b79c4cf28d142ab5de3653d8042", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -408,19 +408,21 @@ pub fn stop_after_phase_5(sess: Session) -> bool {\n #[fixed_stack_segment]\n pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n                      outdir: &Option<Path>, output: &Option<Path>) {\n-    let outputs = build_output_filenames(input, outdir, output, [], sess);\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n-    let trans = {\n+    let (outputs, trans) = {\n         let expanded_crate = {\n             let crate = phase_1_parse_input(sess, cfg.clone(), input);\n             if stop_after_phase_1(sess) { return; }\n             phase_2_configure_and_expand(sess, cfg, crate)\n         };\n         let analysis = phase_3_run_analysis_passes(sess, expanded_crate);\n         if stop_after_phase_3(sess) { return; }\n-        phase_4_translate_to_llvm(sess, expanded_crate, &analysis, outputs)\n+        let outputs = build_output_filenames(input, outdir, output, [], sess);\n+        let trans = phase_4_translate_to_llvm(sess, expanded_crate,\n+                                              &analysis, outputs);\n+        (outputs, trans)\n     };\n     phase_5_run_llvm_passes(sess, &trans, outputs);\n     if stop_after_phase_5(sess) { return; }\n@@ -957,10 +959,7 @@ pub fn build_output_filenames(input: &input,\n         };\n \n         if *sess.building_library {\n-            // FIXME (#2401): We might want to warn here; we're actually not\n-            // going to respect the user's choice of library name when it\n-            // comes time to link, we'll be linking to\n-            // lib<basename>-<hash>-<version>.so no matter what.\n+            sess.warn(\"ignoring specified output filename for library.\");\n         }\n \n         if *odir != None {"}, {"sha": "767c2b4ee2ed75ca0de10e269d49b1bdcd54e79b", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -225,7 +225,7 @@ impl CFGBuilder {\n                 // Note that `break` and `loop` statements\n                 // may cause additional edges.\n \n-                // NOTE: Is the condition considered part of the loop?\n+                // Is the condition considered part of the loop?\n                 let loopback = self.add_dummy_node([pred]);           // 1\n                 let cond_exit = self.expr(cond, loopback);            // 2\n                 let expr_exit = self.add_node(expr.id, [cond_exit]);  // 3"}, {"sha": "9a0dc5f036c76b701fe192d9724b68559b6539e6", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -171,6 +171,7 @@ use middle::trans::tvec;\n use middle::trans::type_of;\n use middle::ty;\n use util::common::indenter;\n+use util::ppaux::{Repr, vec_map_to_str};\n \n use std::hashmap::HashMap;\n use std::vec;\n@@ -179,7 +180,6 @@ use syntax::ast::ident;\n use syntax::ast_util::path_to_ident;\n use syntax::ast_util;\n use syntax::codemap::{span, dummy_sp};\n-use syntax::print::pprust::pat_to_str;\n \n // An option identifying a literal: either a unit-like struct or an\n // expression.\n@@ -353,19 +353,17 @@ pub struct Match<'self> {\n     data: ArmData<'self>\n }\n \n-pub fn match_to_str(bcx: @mut Block, m: &Match) -> ~str {\n-    if bcx.sess().verbose() {\n-        // for many programs, this just take too long to serialize\n-        fmt!(\"%?\", m.pats.map(|p| pat_to_str(*p, bcx.sess().intr())))\n-    } else {\n-        fmt!(\"%u pats\", m.pats.len())\n+impl<'self> Repr for Match<'self> {\n+    fn repr(&self, tcx: ty::ctxt) -> ~str {\n+        if tcx.sess.verbose() {\n+            // for many programs, this just take too long to serialize\n+            self.pats.repr(tcx)\n+        } else {\n+            fmt!(\"%u pats\", self.pats.len())\n+        }\n     }\n }\n \n-pub fn matches_to_str(bcx: @mut Block, m: &[Match]) -> ~str {\n-    fmt!(\"%?\", m.map(|n| match_to_str(bcx, n)))\n-}\n-\n pub fn has_nested_bindings(m: &[Match], col: uint) -> bool {\n     for br in m.iter() {\n         match br.pats[col].node {\n@@ -381,9 +379,9 @@ pub fn expand_nested_bindings<'r>(bcx: @mut Block,\n                                   col: uint,\n                                   val: ValueRef)\n                               -> ~[Match<'r>] {\n-    debug!(\"expand_nested_bindings(bcx=%s, m=%s, col=%u, val=%?)\",\n+    debug!(\"expand_nested_bindings(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n+           m.repr(bcx.tcx()),\n            col,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n@@ -416,7 +414,7 @@ pub fn assert_is_binding_or_wild(bcx: @mut Block, p: @ast::pat) {\n         bcx.sess().span_bug(\n             p.span,\n             fmt!(\"Expected an identifier pattern but found p: %s\",\n-                 pat_to_str(p, bcx.sess().intr())));\n+                 p.repr(bcx.tcx())));\n     }\n }\n \n@@ -429,9 +427,9 @@ pub fn enter_match<'r>(bcx: @mut Block,\n                        val: ValueRef,\n                        e: enter_pat)\n                     -> ~[Match<'r>] {\n-    debug!(\"enter_match(bcx=%s, m=%s, col=%u, val=%?)\",\n+    debug!(\"enter_match(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n+           m.repr(bcx.tcx()),\n            col,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n@@ -467,7 +465,7 @@ pub fn enter_match<'r>(bcx: @mut Block,\n         }\n     }\n \n-    debug!(\"result=%s\", matches_to_str(bcx, result));\n+    debug!(\"result=%s\", result.repr(bcx.tcx()));\n \n     return result;\n }\n@@ -478,9 +476,9 @@ pub fn enter_default<'r>(bcx: @mut Block,\n                          col: uint,\n                          val: ValueRef)\n                       -> ~[Match<'r>] {\n-    debug!(\"enter_default(bcx=%s, m=%s, col=%u, val=%?)\",\n+    debug!(\"enter_default(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n+           m.repr(bcx.tcx()),\n            col,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n@@ -525,9 +523,9 @@ pub fn enter_opt<'r>(bcx: @mut Block,\n                      variant_size: uint,\n                      val: ValueRef)\n                   -> ~[Match<'r>] {\n-    debug!(\"enter_opt(bcx=%s, m=%s, col=%u, val=%?)\",\n+    debug!(\"enter_opt(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n+           m.repr(bcx.tcx()),\n            col,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n@@ -637,9 +635,9 @@ pub fn enter_rec_or_struct<'r>(bcx: @mut Block,\n                                fields: &[ast::ident],\n                                val: ValueRef)\n                             -> ~[Match<'r>] {\n-    debug!(\"enter_rec_or_struct(bcx=%s, m=%s, col=%u, val=%?)\",\n+    debug!(\"enter_rec_or_struct(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n+           m.repr(bcx.tcx()),\n            col,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n@@ -672,9 +670,9 @@ pub fn enter_tup<'r>(bcx: @mut Block,\n                      val: ValueRef,\n                      n_elts: uint)\n                   -> ~[Match<'r>] {\n-    debug!(\"enter_tup(bcx=%s, m=%s, col=%u, val=%?)\",\n+    debug!(\"enter_tup(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n+           m.repr(bcx.tcx()),\n            col,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n@@ -698,9 +696,9 @@ pub fn enter_tuple_struct<'r>(bcx: @mut Block,\n                               val: ValueRef,\n                               n_elts: uint)\n                           -> ~[Match<'r>] {\n-    debug!(\"enter_tuple_struct(bcx=%s, m=%s, col=%u, val=%?)\",\n+    debug!(\"enter_tuple_struct(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n+           m.repr(bcx.tcx()),\n            col,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n@@ -723,9 +721,9 @@ pub fn enter_box<'r>(bcx: @mut Block,\n                      col: uint,\n                      val: ValueRef)\n                  -> ~[Match<'r>] {\n-    debug!(\"enter_box(bcx=%s, m=%s, col=%u, val=%?)\",\n+    debug!(\"enter_box(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n+           m.repr(bcx.tcx()),\n            col,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n@@ -750,9 +748,9 @@ pub fn enter_uniq<'r>(bcx: @mut Block,\n                       col: uint,\n                       val: ValueRef)\n                   -> ~[Match<'r>] {\n-    debug!(\"enter_uniq(bcx=%s, m=%s, col=%u, val=%?)\",\n+    debug!(\"enter_uniq(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n+           m.repr(bcx.tcx()),\n            col,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n@@ -777,9 +775,9 @@ pub fn enter_region<'r>(bcx: @mut Block,\n                         col: uint,\n                         val: ValueRef)\n                     -> ~[Match<'r>] {\n-    debug!(\"enter_region(bcx=%s, m=%s, col=%u, val=%?)\",\n+    debug!(\"enter_region(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n+           m.repr(bcx.tcx()),\n            col,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n@@ -1213,11 +1211,11 @@ pub fn compile_guard(bcx: @mut Block,\n                      vals: &[ValueRef],\n                      chk: Option<mk_fail>)\n                   -> @mut Block {\n-    debug!(\"compile_guard(bcx=%s, guard_expr=%s, m=%s, vals=%?)\",\n+    debug!(\"compile_guard(bcx=%s, guard_expr=%s, m=%s, vals=%s)\",\n            bcx.to_str(),\n            bcx.expr_to_str(guard_expr),\n-           matches_to_str(bcx, m),\n-           vals.map(|v| bcx.val_to_str(*v)));\n+           m.repr(bcx.tcx()),\n+           vec_map_to_str(vals, |v| bcx.val_to_str(*v)));\n     let _indenter = indenter();\n \n     let mut bcx = bcx;\n@@ -1267,10 +1265,10 @@ pub fn compile_submatch(bcx: @mut Block,\n                         m: &[Match],\n                         vals: &[ValueRef],\n                         chk: Option<mk_fail>) {\n-    debug!(\"compile_submatch(bcx=%s, m=%s, vals=%?)\",\n+    debug!(\"compile_submatch(bcx=%s, m=%s, vals=%s)\",\n            bcx.to_str(),\n-           matches_to_str(bcx, m),\n-           vals.map(|v| bcx.val_to_str(*v)));\n+           m.repr(bcx.tcx()),\n+           vec_map_to_str(vals, |v| bcx.val_to_str(*v)));\n     let _indenter = indenter();\n \n     /*\n@@ -1427,6 +1425,7 @@ fn compile_submatch_continue(mut bcx: @mut Block,\n \n     // Decide what kind of branch we need\n     let opts = get_options(bcx, m, col);\n+    debug!(\"options=%?\", opts);\n     let mut kind = no_branch;\n     let mut test_val = val;\n     if opts.len() > 0u {\n@@ -1914,12 +1913,12 @@ fn bind_irrefutable_pat(bcx: @mut Block,\n \n     debug!(\"bind_irrefutable_pat(bcx=%s, pat=%s, binding_mode=%?)\",\n            bcx.to_str(),\n-           pat_to_str(pat, bcx.sess().intr()),\n+           pat.repr(bcx.tcx()),\n            binding_mode);\n \n     if bcx.sess().asm_comments() {\n         add_comment(bcx, fmt!(\"bind_irrefutable_pat(pat=%s)\",\n-                              pat_to_str(pat, bcx.sess().intr())));\n+                              pat.repr(bcx.tcx())));\n     }\n \n     let _indenter = indenter();"}, {"sha": "2efed8f36d7fff216b0f26bbefc0e1f3ed5acff2", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -2218,23 +2218,14 @@ pub fn trans_mod(ccx: @mut CrateContext, m: &ast::_mod) {\n pub fn register_fn(ccx: @mut CrateContext,\n                    sp: span,\n                    sym: ~str,\n-                   node_id: ast::NodeId)\n-                -> ValueRef {\n-    let t = ty::node_id_to_type(ccx.tcx, node_id);\n-    register_fn_full(ccx, sp, sym, node_id, t)\n-}\n-\n-pub fn register_fn_full(ccx: @mut CrateContext,\n-                        sp: span,\n-                        sym: ~str,\n-                        node_id: ast::NodeId,\n-                        node_type: ty::t)\n-                     -> ValueRef {\n+                   node_id: ast::NodeId,\n+                   node_type: ty::t)\n+                   -> ValueRef {\n     let llfty = type_of_fn_from_ty(ccx, node_type);\n-    register_fn_fuller(ccx, sp, sym, node_id, lib::llvm::CCallConv, llfty)\n+    register_fn_llvmty(ccx, sp, sym, node_id, lib::llvm::CCallConv, llfty)\n }\n \n-pub fn register_fn_fuller(ccx: @mut CrateContext,\n+pub fn register_fn_llvmty(ccx: @mut CrateContext,\n                           sp: span,\n                           sym: ~str,\n                           node_id: ast::NodeId,\n@@ -2449,7 +2440,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n \n                         ast::item_fn(_, purity, _, _, _) => {\n                             let llfn = if purity != ast::extern_fn {\n-                                register_fn_full(ccx, i.span, sym, i.id, ty)\n+                                register_fn(ccx, i.span, sym, i.id, ty)\n                             } else {\n                                 foreign::register_foreign_fn(ccx, i.span, sym, i.id)\n                             };\n@@ -2499,7 +2490,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                             let path = vec::append((*pth).clone(), [path_name(ni.ident)]);\n                             let sym = exported_name(ccx, path, ty, ni.attrs);\n \n-                            register_fn_full(ccx, ni.span, sym, ni.id, ty)\n+                            register_fn(ccx, ni.span, sym, ni.id, ty)\n                         }\n                         ast::foreign_item_static(*) => {\n                             let ident = token::ident_to_str(&ni.ident);\n@@ -2527,7 +2518,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n \n                             llfn = match enm.node {\n                                 ast::item_enum(_, _) => {\n-                                    register_fn_full(ccx, (*v).span, sym, id, ty)\n+                                    register_fn(ccx, (*v).span, sym, id, ty)\n                                 }\n                                 _ => fail!(\"node_variant, shouldn't happen\")\n                             };\n@@ -2551,7 +2542,8 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                             let ty = ty::node_id_to_type(ccx.tcx, ctor_id);\n                             let sym = exported_name(ccx, (*struct_path).clone(), ty,\n                                                     struct_item.attrs);\n-                            let llfn = register_fn_full(ccx, struct_item.span, sym, ctor_id, ty);\n+                            let llfn = register_fn(ccx, struct_item.span,\n+                                                   sym, ctor_id, ty);\n                             set_inline_hint(llfn);\n                             llfn\n                         }\n@@ -2586,7 +2578,7 @@ pub fn register_method(ccx: @mut CrateContext,\n \n     let sym = exported_name(ccx, path, mty, m.attrs);\n \n-    let llfn = register_fn_full(ccx, m.span, sym, id, mty);\n+    let llfn = register_fn(ccx, m.span, sym, id, mty);\n     set_inline_hint_if_appr(m.attrs, llfn);\n     llfn\n }"}, {"sha": "5153296337daed25055c7751d7d680c61abc37f5", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -1157,6 +1157,6 @@ pub fn register_foreign_fn(ccx: @mut CrateContext,\n \n     let tys = shim_types(ccx, node_id);\n     do tys.fn_ty.decl_fn |fnty| {\n-        register_fn_fuller(ccx, sp, sym.take(), node_id, lib::llvm::CCallConv, fnty)\n+        register_fn_llvmty(ccx, sp, sym.take(), node_id, lib::llvm::CCallConv, fnty)\n     }\n }"}, {"sha": "1bea3003c63d292402bec46afef8cd578739a293", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -280,9 +280,13 @@ pub fn vstore_ty_to_str(cx: ctxt, mt: &mt, vs: ty::vstore) -> ~str {\n     }\n }\n \n+pub fn vec_map_to_str<T>(ts: &[T], f: &fn(t: &T) -> ~str) -> ~str {\n+    let tstrs = ts.map(f);\n+    fmt!(\"[%s]\", tstrs.connect(\", \"))\n+}\n+\n pub fn tys_to_str(cx: ctxt, ts: &[t]) -> ~str {\n-    let tstrs = ts.map(|t| ty_to_str(cx, *t));\n-    fmt!(\"(%s)\", tstrs.connect(\", \"))\n+    vec_map_to_str(ts, |t| ty_to_str(cx, *t))\n }\n \n pub fn fn_sig_to_str(cx: ctxt, typ: &ty::FnSig) -> ~str {\n@@ -529,7 +533,7 @@ impl<T:Repr> Repr for ~T {\n }\n \n fn repr_vec<T:Repr>(tcx: ctxt, v: &[T]) -> ~str {\n-    fmt!(\"[%s]\", v.map(|t| t.repr(tcx)).connect(\",\"))\n+    vec_map_to_str(v, |t| t.repr(tcx))\n }\n \n impl<'self, T:Repr> Repr for &'self [T] {"}, {"sha": "16bca850fd2894d0b32dacb92b1e33a73a84170d", "filename": "src/libstd/rt/io/flate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fflate.rs?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -10,7 +10,7 @@\n \n //! Some various other I/O types\n \n-// NOTE: These ultimately belong somewhere else\n+// FIXME(#3660): should move to libextra\n \n use prelude::*;\n use super::*;"}, {"sha": "6b4da9671a9636a02641804fc2a0cb3e23672125", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -466,11 +466,11 @@ pub fn node_id_to_str(map: map, id: NodeId, itr: @ident_interner) -> ~str {\n       Some(&node_local(ident)) => {\n         fmt!(\"local (id=%?, name=%s)\", id, itr.get(ident.name))\n       }\n-      Some(&node_block(_)) => {\n-        fmt!(\"block\")\n+      Some(&node_block(ref block)) => {\n+        fmt!(\"block %s (id=%?)\", pprust::block_to_str(block, itr), id)\n       }\n-      Some(&node_struct_ctor(*)) => {\n-        fmt!(\"struct_ctor\")\n+      Some(&node_struct_ctor(_, _, path)) => {\n+        fmt!(\"struct_ctor %s (id=%?)\", path_to_str(*path, itr), id)\n       }\n     }\n }"}, {"sha": "84e6544f78092b56ca51416548ae9b03c1c47947", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfb55ab09a8533da7c5bf559c923685d5d64dc1/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=3dfb55ab09a8533da7c5bf559c923685d5d64dc1", "patch": "@@ -410,7 +410,7 @@ impl IdVisitor {\n impl Visitor<()> for IdVisitor {\n     fn visit_mod(@mut self,\n                  module: &_mod,\n-                 span: span,\n+                 _span: span,\n                  node_id: NodeId,\n                  env: ()) {\n         (self.visit_callback)(node_id);"}]}