{"sha": "0da063c9916fc3ce1330ac14e28ea7bca002ac89", "node_id": "C_kwDOAAsO6NoAKDBkYTA2M2M5OTE2ZmMzY2UxMzMwYWMxNGUyOGVhN2JjYTAwMmFjODk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-04T07:10:36Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-04T23:34:56Z"}, "message": "Inline and remove the `cs_fold_*` functions.\n\nBecause they now have a single call site each.\n\nAlso rename `cs_fold1` as `cs_fold`, now that it's the only folding\nfunction left.", "tree": {"sha": "2b59c2ac360d7137b7cde5225d1c4833a37675a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b59c2ac360d7137b7cde5225d1c4833a37675a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da063c9916fc3ce1330ac14e28ea7bca002ac89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da063c9916fc3ce1330ac14e28ea7bca002ac89", "html_url": "https://github.com/rust-lang/rust/commit/0da063c9916fc3ce1330ac14e28ea7bca002ac89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da063c9916fc3ce1330ac14e28ea7bca002ac89/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee79f2c5a13cae0ffaa43a21b7f11d1d7ad5316", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee79f2c5a13cae0ffaa43a21b7f11d1d7ad5316", "html_url": "https://github.com/rust-lang/rust/commit/0ee79f2c5a13cae0ffaa43a21b7f11d1d7ad5316"}], "stats": {"total": 68, "additions": 17, "deletions": 51}, "files": [{"sha": "bec59aac5eee1d13ba4f90eb3eea69423795bf5a", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0da063c9916fc3ce1330ac14e28ea7bca002ac89/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da063c9916fc3ce1330ac14e28ea7bca002ac89/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=0da063c9916fc3ce1330ac14e28ea7bca002ac89", "patch": "@@ -70,7 +70,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> Bl\n     // cmp => cmp\n     // }\n     //\n-    let expr = cs_fold1(\n+    let expr = cs_fold(\n         // foldr nests the if-elses correctly, leaving the first field\n         // as the outermost one, and the last as the innermost.\n         false,"}, {"sha": "b44c290d12f567990efef4176040cfa6e5e858d0", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0da063c9916fc3ce1330ac14e28ea7bca002ac89/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da063c9916fc3ce1330ac14e28ea7bca002ac89/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=0da063c9916fc3ce1330ac14e28ea7bca002ac89", "patch": "@@ -31,7 +31,7 @@ pub fn expand_deriving_partial_eq(\n             cx.expr_binary(span, op, self_f, other_f.clone())\n         };\n \n-        let expr = cs_fold1(\n+        let expr = cs_fold(\n             true, // use foldl\n             |cx, span, subexpr, self_f, other_fs| {\n                 let eq = op(cx, span, self_f, other_fs);"}, {"sha": "5769f08f494824d7e8d8fa9be4361793a5c9ee82", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0da063c9916fc3ce1330ac14e28ea7bca002ac89/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da063c9916fc3ce1330ac14e28ea7bca002ac89/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=0da063c9916fc3ce1330ac14e28ea7bca002ac89", "patch": "@@ -68,7 +68,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_\n     // cmp => cmp\n     // }\n     //\n-    let expr = cs_fold1(\n+    let expr = cs_fold(\n         // foldr nests the if-elses correctly, leaving the first field\n         // as the outermost one, and the last as the innermost.\n         false,"}, {"sha": "e618255b0c6fd4b0866d4b58a67bb14f1334f4d3", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 14, "deletions": 48, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0da063c9916fc3ce1330ac14e28ea7bca002ac89/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da063c9916fc3ce1330ac14e28ea7bca002ac89/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=0da063c9916fc3ce1330ac14e28ea7bca002ac89", "patch": "@@ -1654,46 +1654,6 @@ impl<'a> TraitDef<'a> {\n     }\n }\n \n-// helpful premade recipes\n-\n-fn cs_fold_fields<'a, F>(\n-    use_foldl: bool,\n-    mut f: F,\n-    base: P<Expr>,\n-    cx: &mut ExtCtxt<'_>,\n-    all_fields: &[FieldInfo<'a>],\n-) -> P<Expr>\n-where\n-    F: FnMut(&mut ExtCtxt<'_>, Span, P<Expr>, P<Expr>, &[P<Expr>]) -> P<Expr>,\n-{\n-    if use_foldl {\n-        all_fields\n-            .iter()\n-            .fold(base, |old, field| f(cx, field.span, old, field.self_.clone(), &field.other))\n-    } else {\n-        all_fields\n-            .iter()\n-            .rev()\n-            .fold(base, |old, field| f(cx, field.span, old, field.self_.clone(), &field.other))\n-    }\n-}\n-\n-fn cs_fold_enumnonmatch(\n-    mut enum_nonmatch_f: EnumNonMatchCollapsedFunc<'_>,\n-    cx: &mut ExtCtxt<'_>,\n-    trait_span: Span,\n-    substructure: &Substructure<'_>,\n-) -> P<Expr> {\n-    match *substructure.fields {\n-        EnumNonMatchingCollapsed(tuple) => enum_nonmatch_f(cx, trait_span, tuple),\n-        _ => cx.span_bug(trait_span, \"cs_fold_enumnonmatch expected an EnumNonMatchingCollapsed\"),\n-    }\n-}\n-\n-fn cs_fold_static(cx: &mut ExtCtxt<'_>, trait_span: Span) -> P<Expr> {\n-    cx.span_bug(trait_span, \"static function in `derive`\")\n-}\n-\n /// Function to fold over fields, with three cases, to generate more efficient and concise code.\n /// When the `substructure` has grouped fields, there are two cases:\n /// Zero fields: call the base case function with `None` (like the usual base case of `cs_fold`).\n@@ -1702,11 +1662,11 @@ fn cs_fold_static(cx: &mut ExtCtxt<'_>, trait_span: Span) -> P<Expr> {\n /// fields.\n /// When the `substructure` is an `EnumNonMatchingCollapsed`, the result of `enum_nonmatch_f`\n /// is returned. Statics may not be folded over.\n-pub fn cs_fold1<F, B>(\n+pub fn cs_fold<F, B>(\n     use_foldl: bool,\n-    f: F,\n+    mut f: F,\n     mut b: B,\n-    enum_nonmatch_f: EnumNonMatchCollapsedFunc<'_>,\n+    mut enum_nonmatch_f: EnumNonMatchCollapsedFunc<'_>,\n     cx: &mut ExtCtxt<'_>,\n     trait_span: Span,\n     substructure: &Substructure<'_>,\n@@ -1731,12 +1691,18 @@ where\n                 (true, _) => (b(cx, None), &all_fields[..]),\n             };\n \n-            cs_fold_fields(use_foldl, f, base, cx, rest)\n-        }\n-        EnumNonMatchingCollapsed(..) => {\n-            cs_fold_enumnonmatch(enum_nonmatch_f, cx, trait_span, substructure)\n+            if use_foldl {\n+                rest.iter().fold(base, |old, field| {\n+                    f(cx, field.span, old, field.self_.clone(), &field.other)\n+                })\n+            } else {\n+                rest.iter().rev().fold(base, |old, field| {\n+                    f(cx, field.span, old, field.self_.clone(), &field.other)\n+                })\n+            }\n         }\n-        StaticEnum(..) | StaticStruct(..) => cs_fold_static(cx, trait_span),\n+        EnumNonMatchingCollapsed(tuple) => enum_nonmatch_f(cx, trait_span, tuple),\n+        StaticEnum(..) | StaticStruct(..) => cx.span_bug(trait_span, \"static function in `derive`\"),\n     }\n }\n "}]}