{"sha": "74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZmVkZjMyNWEyZmM0Y2ZlMmYyZjQ2YzkzMGRlMGNiYTU2YWY1ZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-27T00:46:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-27T00:46:34Z"}, "message": "auto merge of #11787 : alexcrichton/rust/refactor, r=brson\n\nIt was decided a long, long time ago that libextra should not exist, but rather its modules should be split out into smaller independent libraries maintained outside of the compiler itself. The theory was to use `rustpkg` to manage dependencies in order to move everything out of the compiler, but maintain an ease of usability.\r\n\r\nSadly, the work on `rustpkg` isn't making progress as quickly as expected, but the need for dissolving libextra is becoming more and more pressing. Because of this, we've thought that a good interim solution would be to simply package more libraries with the rust distribution itself. Instead of dissolving libextra into libraries outside of the mozilla/rust repo, we can dissolve libraries into the mozilla/rust repo for now.\r\n\r\nWork on this has been excruciatingly painful in the past because the makefiles are completely opaque to all but a few. Adding a new library involved adding about 100 lines spread out across 8 files (incredibly error prone). The first commit of this pull request targets this pain point. It does not rewrite the build system, but rather refactors large portions of it. Afterwards, adding a new library is as simple as modifying 2 lines (easy, right?). The build system automatically keeps track of dependencies between crates (rust *and* native), promotes binaries between stages, tracks dependencies of installed tools, etc, etc.\r\n\r\nWith this newfound buildsystem power, I chose the `extra::flate` module as the first candidate for removal from libextra. While a small module, this module is relative complex in that is has a C dependency and the compiler requires it (messing with the dependency graph a bit). Albeit I modified more than 2 lines of makefiles to accomodate libflate (the native dependency required 2 extra lines of modifications), but the removal process was easy to do and straightforward.\r\n\r\n---\r\n\r\nTesting-wise, I've cross-compiled, run tests, built some docs, installed, uninstalled, etc. I'm still working out a few kinks, and I'm sure that there's gonna be built system issues after this, but it should be working well for basic use!\r\n\r\ncc #8784", "tree": {"sha": "a4436532de40c11d9a9015c528201d8e44df4403", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4436532de40c11d9a9015c528201d8e44df4403"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "html_url": "https://github.com/rust-lang/rust/commit/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "html_url": "https://github.com/rust-lang/rust/commit/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af"}, {"sha": "cdfdc1eb6b9ff58b4a264d1c112dfcbf6e9187ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfdc1eb6b9ff58b4a264d1c112dfcbf6e9187ae", "html_url": "https://github.com/rust-lang/rust/commit/cdfdc1eb6b9ff58b4a264d1c112dfcbf6e9187ae"}], "stats": {"total": 1618, "additions": 569, "deletions": 1049}, "files": [{"sha": "aef766a2968a8395d9bf3d40763184f6f4a6b64b", "filename": "Makefile.in", "status": "modified", "additions": 29, "deletions": 182, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -222,72 +222,27 @@ GENERATED :=\n \n \n ######################################################################\n-# Crates\n+# Cleaning out old crates\n ######################################################################\n \n-define DEF_LIBS\n-\n-CFG_RUNTIME_$(1) :=$(call CFG_STATIC_LIB_NAME_$(1),rustrt)\n-CFG_RUSTLLVM_$(1) :=$(call CFG_STATIC_LIB_NAME_$(1),rustllvm)\n-CFG_STDLIB_$(1) :=$(call CFG_LIB_NAME_$(1),std)\n-CFG_EXTRALIB_$(1) :=$(call CFG_LIB_NAME_$(1),extra)\n-CFG_LIBRUSTC_$(1) :=$(call CFG_LIB_NAME_$(1),rustc)\n-CFG_LIBSYNTAX_$(1) :=$(call CFG_LIB_NAME_$(1),syntax)\n-CFG_LIBRUSTPKG_$(1) :=$(call CFG_LIB_NAME_$(1),rustpkg)\n-CFG_LIBRUSTDOC_$(1) :=$(call CFG_LIB_NAME_$(1),rustdoc)\n-CFG_LIBRUSTUV_$(1) :=$(call CFG_LIB_NAME_$(1),rustuv)\n-CFG_LIBGREEN_$(1) :=$(call CFG_LIB_NAME_$(1),green)\n-CFG_LIBNATIVE_$(1) :=$(call CFG_LIB_NAME_$(1),native)\n-\n-EXTRALIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),extra)\n-STDLIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),std)\n-LIBRUSTC_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustc)\n-LIBSYNTAX_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),syntax)\n-LIBRUSTPKG_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustpkg)\n-LIBRUSTDOC_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustdoc)\n-LIBRUSTUV_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustuv)\n-LIBGREEN_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),green)\n-LIBNATIVE_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),native)\n-EXTRALIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),extra)\n-STDLIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),std)\n-LIBRUSTC_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustc)\n-LIBSYNTAX_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),syntax)\n-LIBRUSTPKG_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustpkg)\n-LIBRUSTDOC_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustdoc)\n-LIBRUSTUV_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustuv)\n-LIBGREEN_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),green)\n-LIBNATIVE_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),native)\n-\n-EXTRALIB_RGLOB_$(1) :=$(call CFG_RLIB_GLOB,extra)\n-STDLIB_RGLOB_$(1) :=$(call CFG_RLIB_GLOB,std)\n-LIBRUSTUV_RGLOB_$(1) :=$(call CFG_RLIB_GLOB,rustuv)\n-LIBSYNTAX_RGLOB_$(1) :=$(call CFG_RLIB_GLOB,syntax)\n-LIBRUSTC_RGLOB_$(1) :=$(call CFG_RLIB_GLOB,rustc)\n-LIBNATIVE_RGLOB_$(1) :=$(call CFG_RLIB_GLOB,native)\n-LIBGREEN_RGLOB_$(1) :=$(call CFG_RLIB_GLOB,green)\n-\n-endef\n-\n # $(1) is the path for directory to match against\n # $(2) is the glob to use in the match\n-# $(3) is filename (usually the target being created) to filter out from match\n-#      (i.e. filename is not out-of-date artifact from prior Rust version/build)\n #\n # Note that a common bug is to accidentally construct the glob denoted\n # by $(2) with a space character prefix, which invalidates the\n # construction $(1)$(2).\n-define CHECK_FOR_OLD_GLOB_MATCHES_EXCEPT\n-  $(Q)MATCHES=\"$(filter-out %$(3),$(wildcard $(1)/$(2)))\"; if [ -n \"$$MATCHES\" ] ; then echo \"warning: there are previous\" \\'$(2)\\' \"libraries:\" $$MATCHES; fi\n+define CHECK_FOR_OLD_GLOB_MATCHES\n+  $(Q)MATCHES=\"$(wildcard $(1))\"; if [ -n \"$$MATCHES\" ] ; then echo \"warning: there are previous\" \\'$(notdir $(2))\\' \"libraries:\" $$MATCHES; fi\n endef\n \n # Same interface as above, but deletes rather than just listing the files.\n ifdef VERBOSE\n-define REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT\n-  $(Q)MATCHES=\"$(filter-out %$(3),$(wildcard $(1)/$(2)))\"; if [ -n \"$$MATCHES\" ] ; then echo \"warning: removing previous\" \\'$(2)\\' \"libraries:\" $$MATCHES; rm $$MATCHES ; fi\n+define REMOVE_ALL_OLD_GLOB_MATCHES\n+  $(Q)MATCHES=\"$(wildcard $(1))\"; if [ -n \"$$MATCHES\" ] ; then echo \"warning: removing previous\" \\'$(notdir $(1))\\' \"libraries:\" $$MATCHES; rm $$MATCHES ; fi\n endef\n else\n-define REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT\n-  $(Q)MATCHES=\"$(filter-out %$(3),$(wildcard $(1)/$(2)))\"; if [ -n \"$$MATCHES\" ] ; then rm $$MATCHES ; fi\n+define REMOVE_ALL_OLD_GLOB_MATCHES\n+  $(Q)MATCHES=\"$(wildcard $(1))\"; if [ -n \"$$MATCHES\" ] ; then rm $$MATCHES ; fi\n endef\n endif\n \n@@ -298,72 +253,15 @@ endif\n # soon. (This is in contrast to the macros above, which are meant to\n # be run at the outset of a command list in a rule.)\n ifdef VERBOSE\n-define LIST_ALL_OLD_GLOB_MATCHES_EXCEPT\n-  @echo \"info: now are following matches for\" '$(2)' \"libraries:\"\n-  @( cd $(1) && ( ls $(2) 2>/dev/null || true ) | grep -v $(3) || true )\n+define LIST_ALL_OLD_GLOB_MATCHES\n+  @echo \"info: now are following matches for\" '$(notdir $(1))' \"libraries:\"\n+  @( ls $(1) 2>/dev/null || true )\n endef\n else\n-define LIST_ALL_OLD_GLOB_MATCHES_EXCEPT\n+define LIST_ALL_OLD_GLOB_MATCHES\n endef\n endif\n \n-$(foreach target,$(CFG_TARGET),\\\n-  $(eval $(call DEF_LIBS,$(target))))\n-\n-######################################################################\n-# Standard library variables\n-######################################################################\n-\n-STDLIB_CRATE := $(S)src/libstd/lib.rs\n-STDLIB_INPUTS := $(wildcard $(addprefix $(S)src/libstd/,        \\\n-                                           *.rs */*.rs */*/*rs */*/*/*rs))\n-\n-######################################################################\n-# Extra library variables\n-######################################################################\n-\n-EXTRALIB_CRATE := $(S)src/libextra/lib.rs\n-EXTRALIB_INPUTS := $(wildcard $(addprefix $(S)src/libextra/,          \\\n-                                          *.rs */*.rs))\n-\n-######################################################################\n-# Rust UV library variables\n-######################################################################\n-\n-LIBRUSTUV_CRATE := $(S)src/librustuv/lib.rs\n-LIBRUSTUV_INPUTS := $(wildcard $(addprefix $(S)src/librustuv/,          \\\n-                                          *.rs */*.rs))\n-\n-######################################################################\n-# Green threading library variables\n-######################################################################\n-\n-LIBGREEN_CRATE := $(S)src/libgreen/lib.rs\n-LIBGREEN_INPUTS := $(wildcard $(addprefix $(S)src/libgreen/,          \\\n-                                          *.rs */*.rs))\n-\n-######################################################################\n-# Native threading library variables\n-######################################################################\n-\n-LIBNATIVE_CRATE := $(S)src/libnative/lib.rs\n-LIBNATIVE_INPUTS := $(wildcard $(addprefix $(S)src/libnative/,          \\\n-                                          *.rs */*.rs))\n-\n-######################################################################\n-# rustc crate variables\n-######################################################################\n-\n-COMPILER_CRATE := $(S)src/librustc/lib.rs\n-COMPILER_INPUTS := $(wildcard $(addprefix $(S)src/librustc/,      \\\n-                           *.rs */*.rs */*/*.rs */*/*/*.rs))\n-\n-LIBSYNTAX_CRATE := $(S)src/libsyntax/lib.rs\n-LIBSYNTAX_INPUTS := $(wildcard $(addprefix $(S)src/libsyntax/, \\\n-                           *.rs */*.rs */*/*.rs */*/*/*.rs))\n-\n-DRIVER_CRATE := $(S)src/driver/driver.rs\n-\n ######################################################################\n # LLVM macros\n ######################################################################\n@@ -424,14 +322,12 @@ export CFG_RUSTLIBDIR\n export CFG_LIBDIR_RELATIVE\n export CFG_DISABLE_INJECT_STD_VERSION\n \n-######################################################################\n-# Subprograms\n-######################################################################\n-\n ######################################################################\n # Per-stage targets and runner\n ######################################################################\n \n+include $(CFG_SRC_DIR)mk/crates.mk\n+\n define SREQ\n # $(1) is the stage number\n # $(2) is the target triple\n@@ -447,84 +343,37 @@ TROOT$(1)_T_$(2)_H_$(3) = $$(HLIB$(1)_H_$(3))/$$(CFG_RUSTLIBDIR)/$(2)\n TBIN$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/bin\n TLIB$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/lib\n \n-# The name of the standard and extra libraries used by rustc\n-HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n-  $$(HLIB$(1)_H_$(3))/$(CFG_STDLIB_$(3))\n-TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-  $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n-\n-HEXTRALIB_DEFAULT$(1)_H_$(3) = \\\n-  $$(HLIB$(1)_H_$(3))/$(CFG_EXTRALIB_$(3))\n-TEXTRALIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-  $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2))\n-\n-HLIBRUSTC_DEFAULT$(1)_H_$(3) = \\\n-  $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n-TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-  $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2))\n-\n-HLIBRUSTUV_DEFAULT$(1)_H_$(3) = \\\n-  $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTUV_$(3))\n-TLIBRUSTUV_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-  $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTUV_$(2))\n-\n-HLIBGREEN_DEFAULT$(1)_H_$(3) = \\\n-  $$(HLIB$(1)_H_$(3))/$(CFG_LIBGREEN_$(3))\n-TLIBGREEN_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-  $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBGREEN_$(2))\n-\n-HLIBNATIVE_DEFAULT$(1)_H_$(3) = \\\n-  $$(HLIB$(1)_H_$(3))/$(CFG_LIBNATIVE_$(3))\n-TLIBNATIVE_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-  $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBNATIVE_$(2))\n-\n # Preqrequisites for using the stageN compiler\n ifeq ($(1),0)\n HSREQ$(1)_H_$(3) = $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\n else\n HSREQ$(1)_H_$(3) = \\\n \t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n-\t$$(HSTDLIB_DEFAULT$(1)_H_$(3)) \\\n-\t$$(HEXTRALIB_DEFAULT$(1)_H_$(3)) \\\n-\t$$(HLIBSYNTAX_DEFAULT$(1)_H_$(3)) \\\n-\t$$(HLIBRUSTC_DEFAULT$(1)_H_$(3)) \\\n-\t$$(HLIBRUSTUV_DEFAULT$(1)_H_$(3)) \\\n-\t$$(HLIBGREEN_DEFAULT$(1)_H_$(3)) \\\n-\t$$(HLIBNATIVE_DEFAULT$(1)_H_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/stamp.rustc \\\n+\t$$(foreach dep,$$(RUST_DEPS_rustc),$$(HLIB$(1)_H_$(3))/stamp.$$(dep)) \\\n \t$$(MKFILE_DEPS)\n endif\n \n # Prerequisites for using the stageN compiler to build target artifacts\n TSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HSREQ$(1)_H_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2)) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \n-# Prerequisites for a working stageN compiler and libraries, for a specific target\n+# Prerequisites for a working stageN compiler and libraries, for a specific\n+# target\n SREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTUV_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBGREEN_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBNATIVE_$(2))\n+\t$$(foreach dep,$$(TARGET_CRATES),\\\n+\t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\n \n-# Prerequisites for a working stageN compiler and libraries, for a specific target\n+# Prerequisites for a working stageN compiler and complete set of target\n+# libraries\n CSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t$$(HBIN$(1)_H_$(3))/rustpkg$$(X_$(3)) \\\n \t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTPKG_$(3)) \\\n-\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTDOC_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2))  \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(2))  \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTPKG_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTDOC_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTUV_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBGREEN_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBNATIVE_$(2))\n+\t$$(foreach dep,$$(CRATES),$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n+\t$$(foreach dep,$$(HOST_CRATES),$$(HLIB$(1)_H_$(3))/stamp.$$(dep))\n \n ifeq ($(1),0)\n # Don't run the the stage0 compiler under valgrind - that ship has sailed\n@@ -562,15 +411,15 @@ endif\n STAGE$(1)_T_$(2)_H_$(3) := \t\t\t\t\t\t\\\n \t$$(Q)$$(RPATH_VAR$(1)_T_$(2)_H_$(3))                            \\\n \t\t$$(call CFG_RUN_TARG_$(3),$(1),\t\t\t\t\\\n-\t\t$$(CFG_VALGRIND_COMPILE$(1)) \t\t\t\\\n+\t\t$$(CFG_VALGRIND_COMPILE$(1))\t\t\t\t\\\n \t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n \t\t--cfg $$(CFGFLAG$(1)_T_$(2)_H_$(3))\t\t\t\\\n \t\t$$(CFG_RUSTC_FLAGS) $$(EXTRAFLAGS_STAGE$(1)) --target=$(2)) \\\n                 $$(RUSTC_FLAGS_$(2))\n \n-PERF_STAGE$(1)_T_$(2)_H_$(3) := \t\t\t\t\\\n+PERF_STAGE$(1)_T_$(2)_H_$(3) :=\t\t\t\t\t\t\\\n \t$$(Q)$$(call CFG_RUN_TARG_$(3),$(1),\t\t\t\t\\\n-\t\t$$(CFG_PERF_TOOL) \t\t\t\t\t\t\\\n+\t\t$$(CFG_PERF_TOOL) \t\t\t\t\t\\\n \t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n \t\t--cfg $$(CFGFLAG$(1)_T_$(2)_H_$(3))\t\t\t\\\n \t\t$$(CFG_RUSTC_FLAGS) $$(EXTRAFLAGS_STAGE$(1)) --target=$(2)) \\\n@@ -594,13 +443,12 @@ define DEF_RUSTC_STAGE_TARGET\n # $(2) == stage\n \n rustc-stage$(2)-H-$(1):\t\t\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET),\t\\\n-\t\t$$(SREQ$(2)_T_$$(target)_H_$(1)))\n+\t$$(foreach target,$$(CFG_TARGET),$$(SREQ$(2)_T_$$(target)_H_$(1)))\n \n endef\n \n-$(foreach host,$(CFG_HOST),\t\t\t\t\t\t\t\\\n- $(eval $(foreach stage,1 2 3,\t\t\t\t\t\t\t\t\t\\\n+$(foreach host,$(CFG_HOST),\t\t\t\t\t\t\\\n+ $(eval $(foreach stage,1 2 3,\t\t\t\t\t\t\\\n   $(eval $(call DEF_RUSTC_STAGE_TARGET,$(host),$(stage))))))\n \n rustc-stage1: rustc-stage1-H-$(CFG_BUILD)\n@@ -701,7 +549,6 @@ include $(CFG_SRC_DIR)mk/target.mk\n include $(CFG_SRC_DIR)mk/host.mk\n include $(CFG_SRC_DIR)mk/stage0.mk\n include $(CFG_SRC_DIR)mk/rustllvm.mk\n-include $(CFG_SRC_DIR)mk/tools.mk\n include $(CFG_SRC_DIR)mk/docs.mk\n include $(CFG_SRC_DIR)mk/llvm.mk\n "}, {"sha": "16c6db3859ce014db77a4424ecfd2f66a23f6bd4", "filename": "doc/index.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/doc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/doc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Findex.md?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -37,6 +37,8 @@ li {list-style-type: none; }\n * [The Rust parser, `libsyntax`](syntax/index.html)\n * [The Rust compiler, `librustc`](rustc/index.html)\n \n+* [The `flate` compression library](flate/index.html)\n+\n # Tooling\n \n * [The `rustdoc` manual](rustdoc.html)\n@@ -47,11 +49,11 @@ li {list-style-type: none; }\n * [Language FAQ](complement-lang-faq.html)\n * [Project FAQ](complement-project-faq.html)\n * [Usage FAQ](complement-usage-faq.html)\n-* [Code cheatsheet](complement-cheatsheet.html) - \"How do I do X?\"  \n+* [Code cheatsheet](complement-cheatsheet.html) - \"How do I do X?\"\n * [How to submit a bug report](complement-bugreport.html)\n \n # External resources\n \n-* The Rust [IRC channel](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust) - `#rust` on irc.mozilla.org  \n+* The Rust [IRC channel](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust) - `#rust` on irc.mozilla.org\n * The Rust community on [Reddit](http://reddit.com/r/rust)\n * The Rust [wiki](http://github.com/mozilla/rust/wiki)"}, {"sha": "27c779f107d4b932d9f83408f0ba4a59629ef944", "filename": "mk/clean.mk", "status": "modified", "additions": 22, "deletions": 65, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -63,6 +63,7 @@ clean-generic-$(2)-$(1):\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n+         -name 'stamp.*' -o   \\\n          -name '*.lib' -o     \\\n          -name '*.dll' -o     \\\n          -name '*.def' -o     \\\n@@ -78,37 +79,16 @@ $(foreach targ, $(CFG_TARGET), $(eval $(call CLEAN_GENERIC,$(targ),T)))\n \n define CLEAN_HOST_STAGE_N\n \n-clean$(1)_H_$(2):\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustc$(X_$(2))\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustpkg$(X_$(2))\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/serializer$(X_$(2))\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustdoc$(X_$(2))\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rust$(X_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTPKG_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTDOC_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUNTIME_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_STDLIB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_EXTRALIB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTUV_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBNATIVE_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBGREEN_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTC_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBSYNTAX_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_GLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_RGLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(EXTRALIB_GLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(EXTRALIB_RGLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTUV_GLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTUV_RGLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBNATIVE_GLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBNATIVE_RGLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBGREEN_GLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBGREEN_RGLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTC_GLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBSYNTAX_GLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTPKG_GLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTDOC_GLOB_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUSTLLVM_$(2))\n+clean$(1)_H_$(2):\t\t\t\t\t\t\t    \\\n+\t    $$(foreach crate,$$(CRATES),clean$(1)_H_$(2)-lib-$$(crate))\t    \\\n+\t    $$(foreach tool,$$(TOOLS),clean$(1)_H_$(2)-tool-$$(tool))\n+\n+clean$(1)_H_$(2)-tool-%:\n+\t$$(Q)rm -f $$(HBIN$(1)_H_$(2))/$$*$$(X_$(2))\n+\n+clean$(1)_H_$(2)-lib-%:\n+\t$$(Q)rm -f $$(HLIB$(1)_H_$(2))/$$(call CFG_LIB_GLOB_$(2),$$*)\n+\t$$(Q)rm -f $$(HLIB$(1)_H_$(2))/$$(call CFG_RLIB_GLOB,$$*)\n \n endef\n \n@@ -118,42 +98,19 @@ $(foreach host, $(CFG_HOST), \\\n \n define CLEAN_TARGET_STAGE_N\n \n-clean$(1)_T_$(2)_H_$(3):\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$(X_$(2))\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustpkg$(X_$(2))\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/serializer$(X_$(2))\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustdoc$(X_$(2))\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rust$(X_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTPKG_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTDOC_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTUV_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBGREEN_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBNATIVE_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_GLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_RGLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(EXTRALIB_GLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(EXTRALIB_RGLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTUV_GLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTUV_RGLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBNATIVE_GLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBNATIVE_RGLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBGREEN_GLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBGREEN_RGLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTC_GLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTC_RGLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBSYNTAX_GLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBSYNTAX_RGLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTPKG_GLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTDOC_GLOB_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n+clean$(1)_T_$(2)_H_$(3):\t\t\t\t\t\t       \\\n+\t    $$(foreach crate,$$(CRATES),clean$(1)_T_$(2)_H_$(3)-lib-$$(crate))  \\\n+\t    $$(foreach tool,$$(TOOLS),clean$(1)_T_$(2)_H_$(3)-tool-$$(tool))\n+\t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/librun_pass_stage* # For unix\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/run_pass_stage* # For windows\n+\n+clean$(1)_T_$(2)_H_$(3)-tool-%:\n+\t$$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/$$*$$(X_$(2))\n+\n+clean$(1)_T_$(2)_H_$(3)-lib-%:\n+\t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$$(call CFG_LIB_GLOB_$(2),$$*)\n+\t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$$(call CFG_RLIB_GLOB,$$*)\n endef\n \n $(foreach host, $(CFG_HOST), \\"}, {"sha": "dc374549dad94691c31f9a0cdda2ce7dd381a49f", "filename": "mk/crates.mk", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -0,0 +1,105 @@\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+################################################################################\n+# Rust's standard distribution of crates and tools\n+#\n+# The crates outlined below are the standard distribution of libraries provided\n+# in a rust installation. These rules are meant to abstract over the\n+# dependencies (both native and rust) of crates and basically generate all the\n+# necessary makefile rules necessary to build everything.\n+#\n+# Here's an explanation of the variables below\n+#\n+#   TARGET_CRATES\n+#\tThis list of crates will be built for all targets, including\n+#\tcross-compiled targets\n+#\n+#   HOST_CRATES\n+#\tThis list of crates will be compiled for only host targets. Note that\n+#\tthis set is explicitly *not* a subset of TARGET_CRATES, but rather it is\n+#\ta disjoint set. Nothing in the TARGET_CRATES set can depend on crates in\n+#\tthe HOST_CRATES set, but the HOST_CRATES set can depend on target\n+#\tcrates.\n+#\n+#   TOOLS\n+#\tA list of all tools which will be built as part of the compilation\n+#\tprocess. It is currently assumed that most tools are built through\n+#\tsrc/driver/driver.rs with a particular configuration (there's a\n+#\tcorresponding library providing the implementation)\n+#\n+#   DEPS_<crate>\n+#\tThese lists are the dependencies of the <crate> that is to be built.\n+#\tRust dependencies are listed bare (i.e. std, extra, green) and native\n+#\tdependencies have a \"native:\" prefix (i.e. native:sundown). All deps\n+#\twill be built before the crate itself is built.\n+#\n+#   TOOL_DEPS_<tool>/TOOL_SOURCE_<tool>\n+#\tSimilar to the DEPS variable, this is the library crate dependencies\n+#\tlist for tool as well as the source file for the specified tool\n+#\n+# You shouldn't need to modify much other than these variables. Crates are\n+# automatically generated for all stage/host/target combinations.\n+################################################################################\n+\n+TARGET_CRATES := std extra green rustuv native flate\n+HOST_CRATES := syntax rustc rustdoc rustpkg\n+CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n+TOOLS := compiletest rustpkg rustdoc rustc\n+\n+DEPS_std := native:rustrt\n+DEPS_extra := std\n+DEPS_green := std\n+DEPS_rustuv := std native:uv native:uv_support\n+DEPS_native := std\n+DEPS_syntax := std extra\n+DEPS_rustc := syntax native:rustllvm flate\n+DEPS_rustdoc := rustc native:sundown\n+DEPS_rustpkg := rustc\n+DEPS_flate := std native:miniz\n+\n+TOOL_DEPS_compiletest := extra green rustuv\n+TOOL_DEPS_rustpkg := rustpkg green rustuv\n+TOOL_DEPS_rustdoc := rustdoc green rustuv\n+TOOL_DEPS_rustc := rustc green rustuv\n+TOOL_SOURCE_compiletest := $(S)src/compiletest/compiletest.rs\n+TOOL_SOURCE_rustpkg := $(S)src/driver/driver.rs\n+TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n+TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n+\n+################################################################################\n+# You should not need to edit below this line\n+################################################################################\n+\n+DOC_CRATES := $(filter-out rustc, $(filter-out syntax, $(CRATES)))\n+\n+# This macro creates some simple definitions for each crate being built, just\n+# some munging of all of the parameters above.\n+#\n+# $(1) is the crate to generate variables for\n+define RUST_CRATE\n+CRATEFILE_$(1) := $$(S)src/lib$(1)/lib.rs\n+RSINPUTS_$(1) := $$(wildcard $$(addprefix $(S)src/lib$(1), \\\n+\t\t\t\t*.rs */*.rs */*/*.rs */*/*/*.rs))\n+RUST_DEPS_$(1) := $$(filter-out native:%,$$(DEPS_$(1)))\n+NATIVE_DEPS_$(1) := $$(patsubst native:%,%,$$(filter native:%,$$(DEPS_$(1))))\n+endef\n+\n+$(foreach crate,$(CRATES),$(eval $(call RUST_CRATE,$(crate))))\n+\n+# Similar to the macro above for crates, this macro is for tools\n+#\n+# $(1) is the crate to generate variables for\n+define RUST_TOOL\n+TOOL_INPUTS_$(1) := $$(wildcard $$(addprefix $(S)$$(dir $$(TOOL_SOURCE_$(1))), \\\n+\t\t\t\t*.rs */*.rs */*/*.rs */*/*/*.rs))\n+endef\n+\n+$(foreach crate,$(TOOLS),$(eval $(call RUST_TOOL,$(crate))))"}, {"sha": "2eb12ae47cc0ebb16833bfefffe2e8d516b0745e", "filename": "mk/docs.mk", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -290,38 +290,27 @@ endif\n RUSTDOC = $(HBIN2_H_$(CFG_BUILD))/rustdoc$(X_$(CFG_BUILD))\n \n # The library documenting macro\n+#\n # $(1) - The crate name (std/extra)\n-# $(2) - The crate file\n-# $(3) - The relevant host build triple (to depend on libstd)\n #\n # Passes --cfg stage2 to rustdoc because it uses the stage2 librustc.\n define libdoc\n-doc/$(1)/index.html: $$(RUSTDOC) $$(TLIB2_T_$(3)_H_$(3))/$(CFG_STDLIB_$(3)) \\\n-\t\t$(foreach name,$(4),$$(TLIB2_T_$(3)_H_$(3))/$$(CFG_$(name)_$(3)))\n-\t@$$(call E, rustdoc: $$@)\n-\t$(Q)$(RUSTDOC) --cfg stage2 $(2)\n-\n-DOCS += doc/$(1)/index.html\n-endef\n-\n-define compiledoc\n-doc/$(1)/index.html: $$(RUSTDOC) $$(TLIB2_T_$(3)_H_$(3))/$(CFG_STDLIB_$(3))\n+doc/$(1)/index.html:\t\t\t\t\t\t\t    \\\n+\t    $$(CRATEFILE_$(1))\t\t\t\t\t\t    \\\n+\t    $$(RSINPUTS_$(1))\t\t\t\t\t\t    \\\n+\t    $$(RUSTDOC)\t\t\t\t\t\t\t    \\\n+\t    $$(foreach dep,$$(RUST_DEPS_$(1)),\t\t\t\t    \\\n+\t\t$$(TLIB2_T_$(CFG_BUILD)_H_$(CFG_BUILD))/stamp.$$(dep))\n \t@$$(call E, rustdoc: $$@)\n-\t$(Q)$(RUSTDOC) --cfg stage2 $(2)\n-\n-CDOCS += doc/$(1)/index.html\n+\t$$(Q)$$(RUSTDOC) --cfg stage2 $$<\n endef\n \n-$(eval $(call libdoc,std,$(STDLIB_CRATE),$(CFG_BUILD)))\n-$(eval $(call libdoc,extra,$(EXTRALIB_CRATE),$(CFG_BUILD)))\n-$(eval $(call libdoc,native,$(LIBNATIVE_CRATE),$(CFG_BUILD)))\n-$(eval $(call libdoc,green,$(LIBGREEN_CRATE),$(CFG_BUILD)))\n-$(eval $(call libdoc,rustuv,$(LIBRUSTUV_CRATE),$(CFG_BUILD)))\n-$(eval $(call libdoc,rustpkg,$(RUSTPKG_LIB),$(CFG_BUILD),EXTRALIB LIBRUSTC))\n+$(foreach crate,$(CRATES),$(eval $(call libdoc,$(crate))))\n \n-$(eval $(call compiledoc,rustc,$(COMPILER_CRATE),$(CFG_BUILD)))\n-$(eval $(call compiledoc,syntax,$(LIBSYNTAX_CRATE),$(CFG_BUILD)))\n+DOCS += $(DOC_CRATES:%=doc/%/index.html)\n \n+CDOCS += doc/rustc/index.html\n+CDOCS += doc/syntax/index.html\n \n ifdef CFG_DISABLE_DOCS\n   $(info cfg: disabling doc build (CFG_DISABLE_DOCS))"}, {"sha": "7a3664d897d0ffe80523487cd76ed3aedb5ed7fa", "filename": "mk/host.mk", "status": "modified", "additions": 50, "deletions": 130, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -8,155 +8,75 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-# CP_HOST_STAGE_N template: arg 1 is the N we're promoting *from*, arg\n-# 2 is N+1. Must be invoked to promote target artifacts to host\n-# artifacts for stage 1-3 (stage0 host artifacts come from the\n-# snapshot).  Arg 3 is the triple we're copying FROM and arg 4 is the\n-# triple we're copying TO.\n+# Generic rule for copying any target crate to a host crate. This rule will also\n+# promote any dependent rust crates up to their host locations as well\n #\n-# The easiest way to read this template is to assume we're promoting\n-# stage1 to stage2 and mentally gloss $(1) as 1, $(2) as 2.\n-\n-define CP_HOST_STAGE_N\n-\n-# Host libraries and executables (stage$(2)/bin/rustc and its runtime needs)\n-\n-# Note: $(3) and $(4) are both the same!\n-\n-$$(HBIN$(2)_H_$(4))/rustc$$(X_$(4)): \\\n-\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustc$$(X_$(4)) \\\n-\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4)) \\\n-\t| $$(HBIN$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4)): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4)) \\\n-\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBSYNTAX_$(4)) \\\n+# $(1) - the stage to copy from\n+# $(2) - the stage to copy to\n+# $(3) - the host triple\n+# $(4) - the target triple (same as $(3))\n+# $(5) - the name of the crate being processed\n+define CP_HOST_STAGE_N_CRATE\n+\n+$$(HLIB$(2)_H_$(4))/stamp.$(5):\t\t\t\t\t\\\n+\t$$(TLIB$(1)_T_$(3)_H_$(4))/stamp.$(5)\t\t\t\\\n+\t$$(RUST_DEPS_$(5):%=$$(HLIB$(2)_H_$(4))/stamp.%)\t\\\n \t| $$(HLIB$(2)_H_$(4))/\n-\n-\t@$$(call E, cp: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(4)),$$(notdir $$@))\n+\t@$$(call E, cp: $$(@D)/lib$(5))\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES,\\\n+\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(3),$(5)))\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_DSYM_GLOB_$(4))) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(3)_H_$(4))/$$(call CFG_LIB_GLOB_$(3),$(5)) \\\n \t        $$(HLIB$(2)_H_$(4))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(4)),$$(notdir $$@))\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES,\\\n+\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(3),$(5)))\n \n-$$(HLIB$(2)_H_$(4))/$(CFG_LIBSYNTAX_$(4)): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBSYNTAX_$(4)) \\\n-\t$$(HSTDLIB_DEFAULT$(2)_H_$(4)) \\\n-\t$$(HEXTRALIB_DEFAULT$(2)_H_$(4)) \\\n-\t$$(HLIBRUSTUV_DEFAULT$(2)_H_$(4)) \\\n-\t$$(HLIBGREEN_DEFAULT$(2)_H_$(4)) \\\n-\t$$(HLIBNATIVE_DEFAULT$(2)_H_$(4)) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_GLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBSYNTAX_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBSYNTAX_DSYM_GLOB_$(4))) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_GLOB_$(4)),$$(notdir $$@))\n+endef\n \n-$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_RUNTIME_$(4)) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n+# Same as the above macro, but for tools instead of crates\n+define CP_HOST_STAGE_N_TOOL\n \n-$$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(4)): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4)) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_GLOB_$(4)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_RGLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp $$< $$@\n-# Subtle: We do not let the shell expand $$(STDLIB_DSYM_GLOB) directly rather\n-# we use Make's $$(wildcard) facility. The reason is that, on mac, when using\n-# USE_SNAPSHOT_STDLIB, we copy the std.dylib file out of the snapshot.\n-# In that case, there is no .dSYM file.  Annoyingly, bash then refuses to expand\n-# glob, and cp reports an error because libstd-*.dylib.dsym does not exist.\n-# Make instead expands the glob to nothing, which gives us the correct behavior.\n-# (Copy .dsym file if it exists, but do nothing otherwise)\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_RGLOB_$(4))) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_DSYM_GLOB_$(4))) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_GLOB_$(4)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_RGLOB_$(4)),$$(notdir $$@))\n-\n-$$(HLIB$(2)_H_$(4))/$(CFG_EXTRALIB_$(4)): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_EXTRALIB_$(4)) \\\n-\t$$(HSTDLIB_DEFAULT$(2)_H_$(4)) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n+$$(HBIN$(2)_H_$(4))/$(5)$$(X_$(3)): \\\n+\t$$(TBIN$(1)_T_$(3)_H_$(4))/$(5)$$(X_$(3)) \\\n+\t$$(TOOL_DEPS_$(5):%=$$(HLIB$(2)_H_$(4))/stamp.%) \\\n+\t| $$(HBIN$(2)_H_$(4))/\n \t@$$(call E, cp: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_GLOB_$(4)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_RGLOB_$(4)),$$(notdir $$@))\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(EXTRALIB_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(EXTRALIB_RGLOB_$(4))) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(EXTRALIB_DSYM_GLOB_$(4))) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_GLOB_$(4)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_RGLOB_$(4)),$$(notdir $$@))\n \n-$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTUV_$(4)): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTUV_$(4)) \\\n-\t$$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(4)) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_GLOB_$(4)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_RGLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTUV_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTUV_RGLOB_$(4))) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTUV_DSYM_GLOB_$(4))) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_GLOB_$(4)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_RGLOB_$(4)),$$(notdir $$@))\n+endef\n \n-$$(HLIB$(2)_H_$(4))/$(CFG_LIBGREEN_$(4)): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBGREEN_$(4)) \\\n-\t$$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(4)) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBGREEN_GLOB_$(4)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBGREEN_RGLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBGREEN_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBGREEN_RGLOB_$(4))) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBGREEN_DSYM_GLOB_$(4))) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBGREEN_GLOB_$(4)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBGREEN_RGLOB_$(4)),$$(notdir $$@))\n \n-$$(HLIB$(2)_H_$(4))/$(CFG_LIBNATIVE_$(4)): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBNATIVE_$(4)) \\\n-\t$$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(4)) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBNATIVE_GLOB_$(4)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBNATIVE_RGLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBNATIVE_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBNATIVE_RGLOB_$(4))) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBNATIVE_DSYM_GLOB_$(4))) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBNATIVE_GLOB_$(4)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBNATIVE_RGLOB_$(4)),$$(notdir $$@))\n+# Miscellaneous rules for just making a few directories.\n+#\n+# $(1) - the stage to copy from\n+# $(2) - the stage to copy to\n+# $(3) - the target triple\n+# $(4) - the host triple (same as $(3))\n+define CP_HOST_STAGE_N\n \n $$(HBIN$(2)_H_$(4))/:\n-\tmkdir -p $$@\n+\t@mkdir -p $$@\n \n ifneq ($(CFG_LIBDIR_RELATIVE),bin)\n $$(HLIB$(2)_H_$(4))/:\n-\tmkdir -p $$@\n+\t@mkdir -p $$@\n endif\n \n endef\n \n-$(foreach t,$(CFG_HOST),\t\t\t\t\t\\\n-\t$(eval $(call CP_HOST_STAGE_N,0,1,$(t),$(t)))\t\\\n-\t$(eval $(call CP_HOST_STAGE_N,1,2,$(t),$(t)))\t\\\n+$(foreach t,$(CFG_HOST),\t\t\t\t\t\t    \\\n+\t$(eval $(call CP_HOST_STAGE_N,0,1,$(t),$(t)))\t\t\t    \\\n+\t$(eval $(call CP_HOST_STAGE_N,1,2,$(t),$(t)))\t\t\t    \\\n \t$(eval $(call CP_HOST_STAGE_N,2,3,$(t),$(t))))\n+\n+$(foreach crate,$(CRATES),\t\t\t\t\t\t    \\\n+ $(foreach t,$(CFG_HOST),\t\t\t\t\t\t    \\\n+  $(eval $(call CP_HOST_STAGE_N_CRATE,0,1,$(t),$(t),$(crate)))\t\t    \\\n+  $(eval $(call CP_HOST_STAGE_N_CRATE,1,2,$(t),$(t),$(crate)))\t\t    \\\n+  $(eval $(call CP_HOST_STAGE_N_CRATE,2,3,$(t),$(t),$(crate)))))\n+\n+$(foreach tool,$(TOOLS),\t\t\t\t\t\t    \\\n+ $(foreach t,$(CFG_HOST),\t\t\t\t\t\t    \\\n+  $(eval $(call CP_HOST_STAGE_N_TOOL,0,1,$(t),$(t),$(tool)))\t\t    \\\n+  $(eval $(call CP_HOST_STAGE_N_TOOL,1,2,$(t),$(t),$(tool)))\t\t    \\\n+  $(eval $(call CP_HOST_STAGE_N_TOOL,2,3,$(t),$(t),$(tool)))))"}, {"sha": "33f170f4f979d15e3cae2deb179421f649a92402", "filename": "mk/install.mk", "status": "modified", "additions": 62, "deletions": 69, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -65,6 +65,8 @@ PREFIX_ROOT = $(CFG_PREFIX)\n PREFIX_BIN = $(PREFIX_ROOT)/bin\n PREFIX_LIB = $(CFG_LIBDIR)\n \n+INSTALL_TOOLS := $(filter-out compiletest, $(TOOLS))\n+\n define INSTALL_PREPARE_N\n   # $(1) is the target triple\n   # $(2) is the host triple\n@@ -86,43 +88,35 @@ $(foreach target,$(CFG_TARGET), \\\n define INSTALL_TARGET_N\n install-target-$(1)-host-$(2): LIB_SOURCE_DIR=$$(TL$(1)$(2))\n install-target-$(1)-host-$(2): LIB_DESTIN_DIR=$$(PTL$(1)$(2))\n-install-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n+install-target-$(1)-host-$(2):\t\t\t\t\t\t\\\n+\t    $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2))\t\t\t\t\\\n+\t    $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)$$(call MK_INSTALL_DIR,$$(PTL$(1)$(2)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(STDLIB_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(STDLIB_RGLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(EXTRALIB_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(EXTRALIB_RGLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTUV_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTUV_RGLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBGREEN_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBGREEN_RGLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBNATIVE_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBNATIVE_RGLOB_$(1)))\n+\t$$(Q)$$(foreach crate,$$(TARGET_CRATES),\\\n+\t\t$$(call INSTALL_LIB,$$(call CFG_LIB_GLOB_$(1),$$(crate)));\n+\t\t$$(call INSTALL_LIB,$$(call CFG_RLIB_GLOB,$$(crate)));)\n \t$$(Q)$$(call INSTALL_LIB,libmorestack.a)\n \n+install-target-$(1)-host-$(2)-prep:\n+\n+install-target-$(1)-host-$(2)-morestack:\n+\n+install-target-$(1)-host-$(2)-lib-%:\n+install-target-$(1)-host-$(2)-rlib-%:\n+\n endef\n \n define INSTALL_HOST_N\n+\n install-target-$(1)-host-$(2): LIB_SOURCE_DIR=$$(TL$(1)$(2))\n install-target-$(1)-host-$(2): LIB_DESTIN_DIR=$$(PTL$(1)$(2))\n install-target-$(1)-host-$(2): $$(CSREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)$$(call MK_INSTALL_DIR,$$(PTL$(1)$(2)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(STDLIB_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(STDLIB_RGLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(EXTRALIB_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(EXTRALIB_RGLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTUV_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTUV_RGLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBGREEN_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBGREEN_RGLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBNATIVE_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBNATIVE_RGLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTC_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBSYNTAX_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTPKG_GLOB_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB,$$(LIBRUSTDOC_GLOB_$(1)))\n+\t$$(Q)$$(foreach crate,$$(CRATES),\\\n+\t    $$(call INSTALL_LIB,$$(call CFG_LIB_GLOB_$(1),$$(crate)));)\n+\t$$(Q)$$(foreach crate,$$(TARGET_CRATES),\\\n+\t    $$(call INSTALL_LIB,$$(call CFG_RLIB_GLOB,$$(crate)));)\n \t$$(Q)$$(call INSTALL_LIB,libmorestack.a)\n-\n endef\n \n $(foreach target,$(CFG_TARGET), \\\n@@ -145,60 +139,59 @@ PHB = $(PREFIX_BIN)\n # Shorthand for the prefix bin directory\n PHL = $(PREFIX_LIB)\n \n-install-host: LIB_SOURCE_DIR=$(HL)\n-install-host: LIB_DESTIN_DIR=$(PHL)\n-install-host: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD_)_H_$(CFG_BUILD_))\n+install-host%: LIB_SOURCE_DIR=$(HL)\n+install-host%: LIB_DESTIN_DIR=$(PHL)\n+install-host:\t\t\t\t\t\t\t\t    \\\n+\t    install-host-prep\t\t\t\t\t\t    \\\n+\t    $(foreach tool,$(INSTALL_TOOLS),install-host-tool-$(tool))\n+\n+install-host-prep: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD)_H_$(CFG_BUILD))\n \t$(Q)$(call MK_INSTALL_DIR,$(PREFIX_BIN))\n \t$(Q)$(call MK_INSTALL_DIR,$(PREFIX_LIB))\n \t$(Q)$(call MK_INSTALL_DIR,$(CFG_MANDIR)/man1)\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustc$(X_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustpkg$(X_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustdoc$(X_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL_LIB,$(STDLIB_GLOB_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL_LIB,$(EXTRALIB_GLOB_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBRUSTUV_GLOB_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBGREEN_GLOB_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBRUSTC_GLOB_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBSYNTAX_GLOB_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD)))\n-\t$(Q)$(call INSTALL,$(S)/man,$(CFG_MANDIR)/man1,rustc.1)\n-\t$(Q)$(call INSTALL,$(S)/man,$(CFG_MANDIR)/man1,rustdoc.1)\n-\t$(Q)$(call INSTALL,$(S)/man,$(CFG_MANDIR)/man1,rustpkg.1)\n+\n+define INSTALL_HOST_TOOL\n+install-host-tool-$(1):\t\t\t\t\t\t\t    \\\n+\t    $$(foreach dep,$$(TOOL_DEPS_$(1)),install-host-lib-$$(dep))\t    \\\n+\t    $$(CSREQ$$(ISTAGE)_T_$$(CFG_BUILD)_H_$$(CFG_BUILD))\n+\t$$(Q)$$(call INSTALL,$$(HB2),$$(PHB),$(1)$$(X_$$(CFG_BUILD)))\n+\t$$(Q)$$(call INSTALL,$$(S)/man,$$(CFG_MANDIR)/man1,$(1).1)\n+endef\n+\n+$(foreach tool,$(INSTALL_TOOLS),$(eval $(call INSTALL_HOST_TOOL,$(tool))))\n+\n+define INSTALL_HOST_LIB\n+install-host-lib-$(1):\t\t\t\t\t\t\t    \\\n+\t    $$(foreach dep,$$(RUST_DEPS_$(1)),install-host-lib-$$(dep))\t    \\\n+\t    $$(CSREQ$$(ISTAGE)_T_$$(CFG_BUILD)_H_$$(CFG_BUILD))\n+\t$$(Q)$$(call INSTALL_LIB,$$(call CFG_LIB_GLOB_$$(CFG_BUILD),$(1)))\n+endef\n+\n+$(foreach lib,$(CRATES),$(eval $(call INSTALL_HOST_LIB,$(lib))))\n \n install-targets: $(INSTALL_TARGET_RULES)\n \n \n HOST_LIB_FROM_HL_GLOB = \\\n   $(patsubst $(HL)/%,$(PHL)/%,$(wildcard $(HL)/$(1)))\n \n-uninstall:\n-\t$(Q)rm -f $(PHB)/rustc$(X_$(CFG_BUILD))\n-\t$(Q)rm -f $(PHB)/rustpkg$(X_$(CFG_BUILD))\n-\t$(Q)rm -f $(PHB)/rustdoc$(X_$(CFG_BUILD))\n-\t$(Q)for i in \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(STDLIB_GLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(STDLIB_RGLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(EXTRALIB_GLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(EXTRALIB_RGLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTUV_GLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTUV_RGLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBGREEN_GLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBGREEN_RGLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBNATIVE_GLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBNATIVE_RGLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTC_GLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBSYNTAX_GLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD))) \\\n-        ; \\\n-        do rm -f $$i ; \\\n-        done\n+uninstall: $(foreach tool,$(INSTALL_TOOLS),uninstall-tool-$(tool))\n \t$(Q)rm -Rf $(PHL)/$(CFG_RUSTLIBDIR)\n-\t$(Q)rm -f $(CFG_MANDIR)/man1/rustc.1\n-\t$(Q)rm -f $(CFG_MANDIR)/man1/rustdoc.1\n-\t$(Q)rm -f $(CFG_MANDIR)/man1/rusti.1\n-\t$(Q)rm -f $(CFG_MANDIR)/man1/rustpkg.1\n+\n+define UNINSTALL_TOOL\n+uninstall-tool-$(1): $$(foreach dep,$$(TOOL_DEPS_$(1)),uninstall-lib-$$(dep))\n+\t$$(Q)rm -f $$(PHB)/$(1)$$(X_$$(CFG_BUILD))\n+\t$$(Q)rm -f $$(CFG_MANDIR)/man1/$(1).1\n+endef\n+\n+$(foreach tool,$(INSTALL_TOOLS),$(eval $(call UNINSTALL_TOOL,$(tool))))\n+\n+define UNINSTALL_LIB\n+uninstall-lib-$(1): $$(foreach dep,$$(RUST_DEPS_$(1)),uninstall-lib-$$(dep))\n+\t$$(Q)rm -f $$(call HOST_LIB_FROM_HL_GLOB,$$(call CFG_LIB_GLOB_$$(CFG_BUILD),$(1)))\n+endef\n+\n+$(foreach lib,$(CRATES),$(eval $(call UNINSTALL_LIB,$(lib))))\n \n # target platform specific variables\n # for arm-linux-androidabi"}, {"sha": "269491649bb281470e88b20c2401917925cbbf66", "filename": "mk/rt.mk", "status": "modified", "additions": 122, "deletions": 196, "changes": 318, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -1,35 +1,128 @@\n-# This is a procedure to define the targets for building\n-# the runtime.\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n #\n-# Argument 1 is the target triple.\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+################################################################################\n+# Native libraries built as part of the rust build process\n #\n-# This is not really the right place to explain this, but\n-# for those of you who are not Makefile gurus, let me briefly\n-# cover the $ expansion system in use here, because it\n-# confused me for a while!  The variable DEF_RUNTIME_TARGETS\n-# will be defined once and then expanded with different\n-# values substituted for $(1) each time it is called.\n-# That resulting text is then eval'd.\n+# This portion of the rust build system is meant to keep track of native\n+# dependencies and how to build them. It is currently required that all native\n+# dependencies are built as static libraries, as slinging around dynamic\n+# libraries isn't exactly the most fun thing to do.\n #\n-# For most variables, you could use a single $ sign.  The result\n-# is that the substitution would occur when the CALL occurs,\n-# I believe.  The problem is that the automatic variables $< and $@\n-# need to be expanded-per-rule.  Therefore, for those variables at\n-# least, you need $$< and $$@ in the variable text.  This way, after\n-# the CALL substitution occurs, you will have $< and $@.  This text\n-# will then be evaluated, and all will work as you like.\n+# This section should need minimal modification to add new libraries. The\n+# relevant variables are:\n #\n-# Reader beware, this explanantion could be wrong, but it seems to\n-# fit the experimental data (i.e., I was able to get the system\n-# working under these assumptions).\n+#   NATIVE_LIBS\n+#\tThis is a list of all native libraries which are built as part of the\n+#\tbuild process. It will build all libraries into RT_OUTPUT_DIR with the\n+#\tappropriate name of static library as dictated by the target platform\n+#\n+#   NATIVE_DEPS_<lib>\n+#\tThis is a list of files relative to the src/rt directory which are\n+#\tneeded to build the native library. Each file will be compiled to an\n+#\tobject file, and then all the object files will be assembled into an\n+#\tarchive (static library). The list contains files of any extension\n+#\n+# If adding a new library, you should update the NATIVE_LIBS list, and then list\n+# the required files below it. The list of required files is a list of files\n+# that's per-target so you're allowed to conditionally add files based on the\n+# target.\n+################################################################################\n+NATIVE_LIBS := rustrt sundown uv_support morestack miniz\n+\n+# $(1) is the target triple\n+define NATIVE_LIBRARIES\n+\n+NATIVE_DEPS_sundown_$(1) := sundown/src/autolink.c \\\n+\t\t\tsundown/src/buffer.c \\\n+\t\t\tsundown/src/stack.c \\\n+\t\t\tsundown/src/markdown.c \\\n+\t\t\tsundown/html/houdini_href_e.c \\\n+\t\t\tsundown/html/houdini_html_e.c \\\n+\t\t\tsundown/html/html_smartypants.c \\\n+\t\t\tsundown/html/html.c\n+NATIVE_DEPS_uv_support_$(1) := rust_uv.c\n+NATIVE_DEPS_miniz_$(1) = miniz.c\n+NATIVE_DEPS_rustrt_$(1) := rust_builtin.c \\\n+\t\t\trust_android_dummy.c \\\n+\t\t\trust_test_helpers.c \\\n+\t\t\trust_try.ll \\\n+\t\t\tarch/$$(HOST_$(1))/_context.S \\\n+\t\t\tarch/$$(HOST_$(1))/record_sp.S\n+NATIVE_DEPS_morestack_$(1) := arch/$$(HOST_$(1))/morestack.S\n+\n+################################################################################\n+# You shouldn't find it that necessary to edit anything below this line.\n+################################################################################\n+\n+# While we're defining the native libraries for each target, we define some\n+# common rules used to build files for various targets.\n \n-# when we're doing a snapshot build, we intentionally degrade as many\n-# features in libuv and the runtime as possible, to ease portability.\n+RT_OUTPUT_DIR_$(1) := $(1)/rt\n+\n+$$(RT_OUTPUT_DIR_$(1))/%.o: rt/%.ll $$(MKFILE_DEPS) $$(LLVM_CONFIG_$$(CFG_BUILD))\n+\t@mkdir -p $$(@D)\n+\t@$$(call E, compile: $$@)\n+\t$$(Q)$$(LLC_$$(CFG_BUILD)) $$(CFG_LLC_FLAGS_$(1)) \\\n+\t    -filetype=obj -mtriple=$(1) -relocation-model=pic -o $$@ $$<\n+\n+$$(RT_OUTPUT_DIR_$(1))/%.o: rt/%.c $$(MKFILE_DEPS)\n+\t@mkdir -p $$(@D)\n+\t@$$(call E, compile: $$@)\n+\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, \\\n+\t\t-I $$(S)src/rt/sundown/src -I $$(S)src/rt/sundown/html \\\n+\t\t-I $$(S)src/libuv/include -I $$(S)src/rt \\\n+                 $$(RUNTIME_CFLAGS_$(1))) $$<\n+\n+$$(RT_OUTPUT_DIR_$(1))/%.o: rt/%.S $$(MKFILE_DEPS) $$(LLVM_CONFIG_$$(CFG_BUILD))\n+\t@mkdir -p $$(@D)\n+\t@$$(call E, compile: $$@)\n+\t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n+endef\n+\n+$(foreach target,$(CFG_TARGET),$(eval $(call NATIVE_LIBRARIES,$(target))))\n+\n+# A macro for devining how to build third party libraries listed above (based\n+# on their dependencies).\n+#\n+# $(1) is the target\n+# $(2) is the lib name\n+define THIRD_PARTY_LIB\n+\n+OBJS_$(2)_$(1) := $$(NATIVE_DEPS_$(2)_$(1):%=$$(RT_OUTPUT_DIR_$(1))/%)\n+OBJS_$(2)_$(1) := $$(OBJS_$(2)_$(1):.c=.o)\n+OBJS_$(2)_$(1) := $$(OBJS_$(2)_$(1):.cpp=.o)\n+OBJS_$(2)_$(1) := $$(OBJS_$(2)_$(1):.ll=.o)\n+OBJS_$(2)_$(1) := $$(OBJS_$(2)_$(1):.S=.o)\n+NATIVE_$(2)_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),$(2))\n+$$(RT_OUTPUT_DIR_$(1))/$$(NATIVE_$(2)_$(1)): $$(OBJS_$(2)_$(1))\n+\t@$$(call E, link: $$@)\n+\t$$(Q)$$(AR_$(1)) rcs $$@ $$^\n+\n+endef\n+\n+$(foreach target,$(CFG_TARGET),\t\t\t\t\t    \\\n+ $(eval $(call RUNTIME_RULES,$(target))))\n+$(foreach lib,$(NATIVE_LIBS),\t\t\t\t\t    \\\n+ $(foreach target,$(CFG_TARGET),\t\t\t\t    \\\n+  $(eval $(call THIRD_PARTY_LIB,$(target),$(lib)))))\n \n-SNAP_DEFINES:=\n-ifneq ($(strip $(findstring snap,$(MAKECMDGOALS))),)\n-\tSNAP_DEFINES=-DRUST_SNAPSHOT\n-endif\n+\n+################################################################################\n+# Building third-party targets with external build systems\n+#\n+# The only current member of this section is libuv, but long ago this used to\n+# also be occupied by jemalloc. This location is meant for dependencies which\n+# have external build systems. It is still assumed that the output of each of\n+# these steps is a static library in the correct location.\n+################################################################################\n \n define DEF_LIBUV_ARCH_VAR\n   LIBUV_ARCH_$(1) = $$(subst i386,ia32,$$(subst x86_64,x64,$$(HOST_$(1))))\n@@ -51,128 +144,10 @@ LIBUV_NO_LOAD = run-benchmarks.target.mk run-tests.target.mk \\\n \n export PYTHONPATH := $(PYTHONPATH):$(S)src/gyp/pylib\n \n-define DEF_RUNTIME_TARGETS\n-\n-######################################################################\n-# Runtime (C++) library variables\n-######################################################################\n-\n-# $(1) is the target triple\n-# $(2) is the stage number\n-\n-RUNTIME_CFLAGS_$(1)_$(2) = -D_RUST_STAGE$(2)\n-RUNTIME_CXXFLAGS_$(1)_$(2) = -D_RUST_STAGE$(2)\n-\n-# XXX: Like with --cfg stage0, pass the defines for stage1 to the stage0\n-# build of non-build-triple host compilers\n-ifeq ($(2),0)\n-ifneq ($(strip $(CFG_BUILD)),$(strip $(1)))\n-RUNTIME_CFLAGS_$(1)_$(2) = -D_RUST_STAGE1\n-RUNTIME_CXXFLAGS_$(1)_$(2) = -D_RUST_STAGE1\n-endif\n-endif\n-\n-RUNTIME_CS_$(1)_$(2) := \\\n-              rt/rust_builtin.c \\\n-              rt/miniz.c \\\n-              rt/rust_android_dummy.c \\\n-              rt/rust_test_helpers.c\n-\n-RUNTIME_LL_$(1)_$(2) := \\\n-\t\t\trt/rust_try.ll\n-\n-# stage0 remove this after the next snapshot\n-%.cpp:\n-\t@touch tmp/foo.o\n-\n-RUNTIME_S_$(1)_$(2) := rt/arch/$$(HOST_$(1))/_context.S \\\n-\t\t\trt/arch/$$(HOST_$(1))/record_sp.S\n-\n-RT_BUILD_DIR_$(1)_$(2) := $$(RT_OUTPUT_DIR_$(1))/stage$(2)\n-\n-RUNTIME_DEF_$(1)_$(2) := $$(RT_OUTPUT_DIR_$(1))/rustrt$$(CFG_DEF_SUFFIX_$(1))\n-RUNTIME_INCS_$(1)_$(2) := -I $$(S)src/rt -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n-                     -I $$(S)src/rt/arch/$$(HOST_$(1))\n-RUNTIME_OBJS_$(1)_$(2) := \\\n-                     $$(RUNTIME_CS_$(1)_$(2):rt/%.c=$$(RT_BUILD_DIR_$(1)_$(2))/%.o) \\\n-                     $$(RUNTIME_S_$(1)_$(2):rt/%.S=$$(RT_BUILD_DIR_$(1)_$(2))/%.o) \\\n-                     $$(RUNTIME_LL_$(1)_$(2):rt/%.ll=$$(RT_BUILD_DIR_$(1)_$(2))/%.o)\n-\n-ALL_OBJ_FILES += $$(RUNTIME_OBJS_$(1)_$(2))\n-\n-MORESTACK_OBJS_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/arch/$$(HOST_$(1))/morestack.o\n-ALL_OBJ_FILES += $$(MORESTACK_OBJS_$(1)_$(2))\n-\n-$$(RT_BUILD_DIR_$(1)_$(2))/%.o: rt/%.c $$(MKFILE_DEPS)\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, $$(RUNTIME_INCS_$(1)_$(2)) \\\n-                 $$(SNAP_DEFINES) $$(RUNTIME_CFLAGS_$(1)_$(2))) $$<\n-\n-$$(RT_BUILD_DIR_$(1)_$(2))/%.o: rt/%.S  $$(MKFILE_DEPS) \\\n-                     $$(LLVM_CONFIG_$$(CFG_BUILD))\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n-\n-$$(RT_BUILD_DIR_$(1)_$(2))/%.o: rt/%.ll  $$(MKFILE_DEPS) \\\n-                     $$(LLVM_CONFIG_$$(CFG_BUILD))\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$(LLC_$(CFG_BUILD)) $$(CFG_LLC_FLAGS_$(1)) -filetype=obj -mtriple=$(1) -relocation-model=pic -o $$@ $$<\n-\n-$$(RT_BUILD_DIR_$(1)_$(2))/arch/$$(HOST_$(1))/libmorestack.a: $$(MORESTACK_OBJS_$(1)_$(2))\n-\t@$$(call E, link: $$@)\n-\t$$(Q)$(AR_$(1)) rcs $$@ $$^\n-\n-$$(RT_BUILD_DIR_$(1)_$(2))/$(CFG_RUNTIME_$(1)): $$(RUNTIME_OBJS_$(1)_$(2)) $$(MKFILE_DEPS)\n-\t@$$(call E, link: $$@)\n-\t$$(Q)$(AR_$(1)) rcs $$@ $$(RUNTIME_OBJS_$(1)_$(2))\n-\n-# These could go in rt.mk or rustllvm.mk, they're needed for both.\n-\n-# This regexp has a single $$ escaped twice\n-$(1)/%.bsd.def:    %.def.in $$(MKFILE_DEPS)\n-\t@$$(call E, def: $$@)\n-\t$$(Q)echo \"{\" > $$@\n-\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n-\t$$(Q)echo \"};\" >> $$@\n-\n-$(1)/%.linux.def:    %.def.in $$(MKFILE_DEPS)\n-\t@$$(call E, def: $$@)\n-\t$$(Q)echo \"{\" > $$@\n-\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n-\t$$(Q)echo \"};\" >> $$@\n-\n-$(1)/%.darwin.def:\t%.def.in $$(MKFILE_DEPS)\n-\t@$$(call E, def: $$@)\n-\t$$(Q)sed 's/^./_&/' $$< > $$@\n-\n-$(1)/%.android.def:  %.def.in $$(MKFILE_DEPS)\n-\t@$$(call E, def: $$@)\n-\t$$(Q)echo \"{\" > $$@\n-\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n-\t$$(Q)echo \"};\" >> $$@\n-\n-$(1)/%.mingw32.def:\t%.def.in $$(MKFILE_DEPS)\n-\t@$$(call E, def: $$@)\n-\t$$(Q)echo LIBRARY $$* > $$@\n-\t$$(Q)echo EXPORTS >> $$@\n-\t$$(Q)sed 's/^./    &/' $$< >> $$@\n-\n-endef\n-\n-\n-######################################################################\n-# Runtime third party targets (libuv, jemalloc, etc.)\n-#\n-# These targets do not need to be built once per stage, so these\n-# rules just build them once and then we're done with them.\n-######################################################################\n-\n define DEF_THIRD_PARTY_TARGETS\n \n # $(1) is the target triple\n \n-RT_OUTPUT_DIR_$(1) := $(1)/rt\n-\n ifeq ($$(CFG_WINDOWSY_$(1)), 1)\n   LIBUV_OSTYPE_$(1) := win\n else ifeq ($(OSTYPE_$(1)), apple-darwin)\n@@ -188,7 +163,7 @@ endif\n \n LIBUV_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),uv)\n LIBUV_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/libuv\n-LIBUV_LIB_$(1) := $$(LIBUV_DIR_$(1))/$$(LIBUV_NAME_$(1))\n+LIBUV_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(LIBUV_NAME_$(1))\n \n LIBUV_MAKEFILE_$(1) := $$(CFG_BUILD_DIR)$$(RT_OUTPUT_DIR_$(1))/libuv/Makefile\n \n@@ -224,7 +199,7 @@ $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS) $$(MKFILE_DEPS)\n \t$$(Q)cp $$(S)src/libuv/libuv.a $$@\n else\n $$(LIBUV_LIB_$(1)): $$(LIBUV_DIR_$(1))/Release/libuv.a $$(MKFILE_DEPS)\n-\t$$(Q)ln -f $$< $$@\n+\t$$(Q)cp $$< $$@\n $$(LIBUV_DIR_$(1))/Release/libuv.a: $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1)) \\\n \t\t\t\t    $$(MKFILE_DEPS)\n \t$$(Q)$$(MAKE) -C $$(LIBUV_DIR_$(1)) \\\n@@ -237,60 +212,11 @@ $$(LIBUV_DIR_$(1))/Release/libuv.a: $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1)) \\\n \t\tBUILDTYPE=Release \\\n \t\tNO_LOAD=\"$$(LIBUV_NO_LOAD)\" \\\n \t\tV=$$(VERBOSE)\n-endif\n-\n-# libuv support functionality (extra C/C++ that we need to use libuv)\n \n-UV_SUPPORT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),uv_support)\n-UV_SUPPORT_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/uv_support\n-UV_SUPPORT_LIB_$(1) := $$(UV_SUPPORT_DIR_$(1))/$$(UV_SUPPORT_NAME_$(1))\n-UV_SUPPORT_CS_$(1) := rt/rust_uv.c\n-UV_SUPPORT_OBJS_$(1) := $$(UV_SUPPORT_CS_$(1):rt/%.c=$$(UV_SUPPORT_DIR_$(1))/%.o)\n-\n-$$(UV_SUPPORT_DIR_$(1))/%.o: rt/%.c\n-\t@$$(call E, compile: $$@)\n-\t@mkdir -p $$(@D)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, \\\n-\t\t-I $$(S)src/libuv/include \\\n-                 $$(RUNTIME_CFLAGS_$(1))) $$<\n-\n-$$(UV_SUPPORT_LIB_$(1)): $$(UV_SUPPORT_OBJS_$(1))\n-\t@$$(call E, link: $$@)\n-\t$$(Q)$$(AR_$(1)) rcs $$@ $$^\n-\n-# sundown markdown library (used by librustdoc)\n-\n-SUNDOWN_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),sundown)\n-SUNDOWN_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/sundown\n-SUNDOWN_LIB_$(1) := $$(SUNDOWN_DIR_$(1))/$$(SUNDOWN_NAME_$(1))\n-\n-SUNDOWN_CS_$(1) := rt/sundown/src/autolink.c \\\n-\t\t\trt/sundown/src/buffer.c \\\n-\t\t\trt/sundown/src/stack.c \\\n-\t\t\trt/sundown/src/markdown.c \\\n-\t\t\trt/sundown/html/houdini_href_e.c \\\n-\t\t\trt/sundown/html/houdini_html_e.c \\\n-\t\t\trt/sundown/html/html_smartypants.c \\\n-\t\t\trt/sundown/html/html.c\n-\n-SUNDOWN_OBJS_$(1) := $$(SUNDOWN_CS_$(1):rt/%.c=$$(SUNDOWN_DIR_$(1))/%.o)\n-\n-$$(SUNDOWN_DIR_$(1))/%.o: rt/%.c\n-\t@$$(call E, compile: $$@)\n-\t@mkdir -p $$(@D)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, \\\n-\t\t-I $$(S)src/rt/sundown/src -I $$(S)src/rt/sundown/html \\\n-                 $$(RUNTIME_CFLAGS_$(1))) $$<\n-\n-$$(SUNDOWN_LIB_$(1)): $$(SUNDOWN_OBJS_$(1))\n-\t@$$(call E, link: $$@)\n-\t$$(Q)$$(AR_$(1)) rcs $$@ $$^\n+endif\n \n endef\n \n # Instantiate template for all stages/targets\n $(foreach target,$(CFG_TARGET), \\\n      $(eval $(call DEF_THIRD_PARTY_TARGETS,$(target))))\n-$(foreach stage,$(STAGES), \\\n-    $(foreach target,$(CFG_TARGET), \\\n-\t $(eval $(call DEF_RUNTIME_TARGETS,$(target),$(stage)))))"}, {"sha": "8d7abc020cc27a3ca4f9a62598a6ae8700e5811b", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -32,7 +32,8 @@ RUSTLLVM_INCS_$(1) = $$(LLVM_EXTRA_INCDIRS_$(1)) \\\n RUSTLLVM_OBJS_OBJS_$(1) := $$(RUSTLLVM_OBJS_CS_$(1):rustllvm/%.cpp=$(1)/rustllvm/%.o)\n ALL_OBJ_FILES += $$(RUSTLLVM_OBJS_OBJS_$(1))\n \n-$(1)/rustllvm/$(CFG_RUSTLLVM_$(1)): $$(RUSTLLVM_OBJS_OBJS_$(1))\n+$$(RT_OUTPUT_DIR_$(1))/$$(call CFG_STATIC_LIB_NAME_$(1),rustllvm): \\\n+\t    $$(RUSTLLVM_OBJS_OBJS_$(1))\n \t@$$(call E, link: $$@)\n \t$$(Q)$$(AR_$(1)) rcs $$@ $$(RUSTLLVM_OBJS_OBJS_$(1))\n "}, {"sha": "c4bd082b3a28d123b35a719fd901919acb47f6d0", "filename": "mk/target.mk", "status": "modified", "additions": 122, "deletions": 148, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -21,174 +21,148 @@ WFLAGS_ST0 = -W warnings\n WFLAGS_ST1 = -D warnings\n WFLAGS_ST2 = -D warnings\n \n-# TARGET_STAGE_N template: This defines how target artifacts are built\n-# for all stage/target architecture combinations. The arguments:\n+# Macro that generates the full list of dependencies for a crate at a particular\n+# stage/target/host tuple.\n+#\n+# $(1) - stage\n+# $(2) - target\n+# $(3) - host\n+# $(4) crate\n+define RUST_CRATE_FULLDEPS\n+CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4) :=\t\t\t    \\\n+\t\t$$(CRATEFILE_$(4))\t\t\t\t    \\\n+\t\t$$(RSINPUTS_$(4))\t\t\t\t    \\\n+\t\t$$(foreach dep,$$(RUST_DEPS_$(4)),\t\t    \\\n+\t\t  $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\t    \\\n+\t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)),\t\t    \\\n+\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),$$(dep)))\n+endef\n+\n+$(foreach host,$(CFG_HOST),\t\t\t\t\t\t    \\\n+ $(foreach target,$(CFG_TARGET),\t\t\t\t\t    \\\n+  $(foreach stage,$(STAGES),\t\t\t\t\t\t    \\\n+   $(foreach crate,$(CRATES),\t\t\t\t\t\t    \\\n+    $(eval $(call RUST_CRATE_FULLDEPS,$(stage),$(target),$(host),$(crate)))))))\n+\n+# RUST_TARGET_STAGE_N template: This defines how target artifacts are built\n+# for all stage/target architecture combinations. This is one giant rule which\n+# works as follows:\n+#\n+#   1. The immediate dependencies are the rust source files\n+#   2. Each rust crate dependency is listed (based on their stamp files),\n+#      as well as all native dependencies (listed in RT_OUTPUT_DIR)\n+#   3. The stage (n-1) compiler is required through the TSREQ dependency, along\n+#      with the morestack library\n+#   4. When actually executing the rule, the first thing we do is to clean out\n+#      old libs and rlibs via the REMOVE_ALL_OLD_GLOB_MATCHES macro\n+#   5. Finally, we get around to building the actual crate. It's just one\n+#      \"small\" invocation of the previous stage rustc. We use -L to\n+#      RT_OUTPUT_DIR so all the native dependencies are picked up.\n+#      Additionally, we pass in the llvm dir so rustc can link against it.\n+#   6. Some cleanup is done (listing what was just built) if verbose is turned\n+#      on.\n+#\n # $(1) is the stage\n # $(2) is the target triple\n # $(3) is the host triple\n+# $(4) is the crate name\n+define RUST_TARGET_STAGE_N\n+\n+$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): CFG_COMPILER = $(2)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4):\t\t\t\t    \\\n+\t\t$$(CRATEFILE_$(4))\t\t\t\t    \\\n+\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\t    \\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t    \\\n+\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n+\t@$$(call E, compile_and_link: $$(@D)/lib$(4))\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES,\\\n+\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(2),$(4)))\n+\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES,\\\n+\t    $$(dir $$@)$$(call CFG_RLIB_GLOB,$(4)))\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) \\\n+\t\t$$(WFLAGS_ST$(1)) \\\n+\t\t-L \"$$(RT_OUTPUT_DIR_$(2))\" \\\n+\t\t-L \"$$(LLVM_LIBDIR_$(2))\" \\\n+\t\t--out-dir $$(@D) $$<\n+\t@touch $$@\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES,\\\n+\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(2),$(4)))\n+\t$$(call LIST_ALL_OLD_GLOB_MATCHES,\\\n+\t    $$(dir $$@)$$(call CFG_RLIB_GLOB,$(4)))\n+\n+endef\n+\n+# Macro for building any tool as part of the rust compilation process. Each\n+# tool is defined in crates.mk with a list of library dependencies as well as\n+# the source file for the tool. Building each tool will also be passed '--cfg\n+# <tool>' for usage in driver.rs\n+#\n+# This build rule is similar to the one found above, just tweaked for\n+# locations and things.\n+#\n+# $(1) - stage\n+# $(2) - target triple\n+# $(3) - host triple\n+# $(4) - name of the tool being built\n+define TARGET_TOOL\n+\n+$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)):\t\t\t\\\n+\t\t$$(TOOL_SOURCE_$(4))\t\t\t\t\\\n+\t\t$$(TOOL_INPUTS_$(4))\t\t\t\t\\\n+\t\t$$(foreach dep,$$(TOOL_DEPS_$(4)),\t\t\\\n+\t\t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\t\\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\\\n+\t\t| $$(TBIN$(1)_T_$(4)_H_$(3))/\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --cfg $(4)\n+\n+endef\n \n-# Every recipe in TARGET_STAGE_N outputs to $$(TLIB$(1)_T_$(2)_H_$(3),\n+# Every recipe in RUST_TARGET_STAGE_N outputs to $$(TLIB$(1)_T_$(2)_H_$(3),\n # a directory that can be cleaned out during the middle of a run of\n # the get-snapshot.py script.  Therefore, every recipe needs to have\n # an order-only dependency either on $(SNAPSHOT_RUSTC_POST_CLEANUP) or\n # on $$(TSREQ$(1)_T_$(2)_H_$(3)), to ensure that no products will be\n # put into the target area until after the get-snapshot.py script has\n # had its chance to clean it out; otherwise the other products will be\n # inadvertantly included in the clean out.\n-\n SNAPSHOT_RUSTC_POST_CLEANUP=$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD))\n \n-define TARGET_STAGE_N\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n-\t\t$(2)/rt/stage$(1)/arch/$$(HOST_$(2))/libmorestack.a \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/ \\\n-\t\t  $(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n+define TARGET_HOST_RULES\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2)): \\\n-\t\t$(2)/rt/stage$(1)/$(CFG_RUNTIME_$(2)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/ \\\n-\t\t  $(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)): \\\n-\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_RGLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) \\\n-\t\t--out-dir $$(@D) $$< && touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(STDLIB_RGLOB_$(2)),$$(notdir $$@))\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2)): \\\n-\t\t$$(EXTRALIB_CRATE) $$(EXTRALIB_INPUTS) \\\n-\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_RGLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) \\\n-\t\t--out-dir $$(@D) $$< && touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(EXTRALIB_RGLOB_$(2)),$$(notdir $$@))\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTUV_$(2)): \\\n-\t\t$$(LIBRUSTUV_CRATE) $$(LIBRUSTUV_INPUTS) \\\n-\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(LIBUV_LIB_$(2)) \\\n-\t\t$$(UV_SUPPORT_LIB_$(2)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_RGLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) \\\n-\t\t-L $$(UV_SUPPORT_DIR_$(2)) \\\n-\t\t-L $$(dir $$(LIBUV_LIB_$(2))) \\\n-\t\t--out-dir $$(@D) $$< && touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_RGLOB_$(2)),$$(notdir $$@))\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBGREEN_$(2)): \\\n-\t\t$$(LIBGREEN_CRATE) $$(LIBGREEN_INPUTS) \\\n-\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBGREEN_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBGREEN_RGLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) \\\n-\t\t--out-dir $$(@D) $$< && touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBGREEN_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBGREEN_RGLOB_$(2)),$$(notdir $$@))\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBNATIVE_$(2)): \\\n-\t\t$$(LIBNATIVE_CRATE) $$(LIBNATIVE_INPUTS) \\\n-\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBNATIVE_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBNATIVE_RGLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) \\\n-\t\t--out-dir $$(@D) $$< && touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBNATIVE_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBNATIVE_RGLOB_$(2)),$$(notdir $$@))\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n-                $$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\\\n-\t\t$$(TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3))      \\\n-\t\t$$(TEXTRALIB_DEFAULT$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_RGLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) $(BORROWCK) \\\n-\t    --out-dir $$(@D) $$< && touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_RGLOB_$(2)),$$(notdir $$@))\n-\n-# Only build the compiler for host triples\n-ifneq ($$(findstring $(2),$$(CFG_HOST)),)\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(3)): \\\n-\t\t$(2)/rustllvm/$(CFG_RUSTLLVM_$(3)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/ \\\n-\t\t  $(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)): CFG_COMPILER = $(2)\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)):\t\t\\\n-\t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n-\t\t$(S)src/librustc/lib/llvmdeps.rs\t\t\\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-                $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)) \\\n-                $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(3)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_RGLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) \\\n-\t    -L \"$$(LLVM_LIBDIR_$(2))\" \\\n-\t    --out-dir $$(@D) $$< && touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(2)),$$(notdir $$@))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_RGLOB_$(2)),$$(notdir $$@))\n-\n-$$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X_$(3)):\t\t\t\\\n-\t\t$$(DRIVER_CRATE)\t\t\t\t\\\n-\t\t$$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)) \\\n-\t\t| $$(TBIN$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --cfg rustc -o $$@ $$<\n-ifdef CFG_ENABLE_PAX_FLAGS\n-\t@$$(call E, apply PaX flags: $$@)\n-\t@\"$(CFG_PAXCTL)\" -cm \"$$@\"\n-endif\n-\n-endif\n+$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.rustc: $(S)src/librustc/lib/llvmdeps.rs\n \n $$(TBIN$(1)_T_$(2)_H_$(3))/:\n \tmkdir -p $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/:\n \tmkdir -p $$@\n \n+$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n+\t    $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),morestack) \\\n+\t    | $$(TLIB$(1)_T_$(2)_H_$(3))/ $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n endef\n \n-# In principle, each host can build each target:\n-$(foreach source,$(CFG_HOST),\t\t\t\t\\\n- $(foreach target,$(CFG_TARGET),\t\t\t\\\n-  $(eval $(call TARGET_STAGE_N,0,$(target),$(source)))\t\t\\\n-  $(eval $(call TARGET_STAGE_N,1,$(target),$(source)))\t\t\\\n-  $(eval $(call TARGET_STAGE_N,2,$(target),$(source)))\t\t\\\n-  $(eval $(call TARGET_STAGE_N,3,$(target),$(source)))))\n+$(foreach source,$(CFG_HOST),\t\t\t\t\t\t    \\\n+ $(foreach target,$(CFG_TARGET),\t\t\t\t\t    \\\n+  $(eval $(call TARGET_HOST_RULES,0,$(target),$(source)))\t\t    \\\n+  $(eval $(call TARGET_HOST_RULES,1,$(target),$(source)))\t\t    \\\n+  $(eval $(call TARGET_HOST_RULES,2,$(target),$(source)))\t\t    \\\n+  $(eval $(call TARGET_HOST_RULES,3,$(target),$(source)))))\n+\n+# In principle, each host can build each target for both libs and tools\n+$(foreach crate,$(CRATES),\t\t\t\t\t\t    \\\n+ $(foreach source,$(CFG_HOST),\t\t\t\t\t\t    \\\n+  $(foreach target,$(CFG_TARGET),\t\t\t\t\t    \\\n+   $(eval $(call RUST_TARGET_STAGE_N,0,$(target),$(source),$(crate)))\t    \\\n+   $(eval $(call RUST_TARGET_STAGE_N,1,$(target),$(source),$(crate)))\t    \\\n+   $(eval $(call RUST_TARGET_STAGE_N,2,$(target),$(source),$(crate)))\t    \\\n+   $(eval $(call RUST_TARGET_STAGE_N,3,$(target),$(source),$(crate))))))\n+\n+$(foreach host,$(CFG_HOST),\t\t\t\t\t\t    \\\n+ $(foreach target,$(CFG_TARGET),\t\t\t\t\t    \\\n+  $(foreach stage,$(STAGES),\t\t\t\t\t\t    \\\n+   $(foreach tool,$(TOOLS),\t\t\t\t\t\t    \\\n+    $(eval $(call TARGET_TOOL,$(stage),$(target),$(host),$(tool)))))))"}, {"sha": "b8d3c126d5acf9257bac7241317351fdf9cf75e2", "filename": "mk/tests.mk", "status": "modified", "additions": 27, "deletions": 85, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -14,9 +14,9 @@\n ######################################################################\n \n # The names of crates that must be tested\n-TEST_TARGET_CRATES = std extra rustuv green native\n-TEST_DOC_CRATES = std extra\n-TEST_HOST_CRATES = rustpkg rustc rustdoc syntax\n+TEST_TARGET_CRATES = $(TARGET_CRATES)\n+TEST_DOC_CRATES = $(DOC_CRATES)\n+TEST_HOST_CRATES = $(HOST_CRATES)\n TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n \n # Markdown files under doc/ that should have their code extracted and run\n@@ -341,89 +341,31 @@ define TEST_RUNNER\n # If NO_REBUILD is set then break the dependencies on extra so we can\n # test crates without rebuilding std and extra first\n ifeq ($(NO_REBUILD),)\n-STDTESTDEP_$(1)_$(2)_$(3) = $$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-                            $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_EXTRALIB_$(2)) \\\n-                            $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTUV_$(2)) \\\n-                            $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBGREEN_$(2))\n+STDTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(SREQ$(1)_T_$(2)_H_$(3)) \\\n+                            $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.extra \\\n+                            $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.rustuv \\\n+                            $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.green\n else\n-STDTESTDEP_$(1)_$(2)_$(3) =\n+STDTESTDEP_$(1)_$(2)_$(3)_$(4) =\n endif\n \n-$(3)/stage$(1)/test/stdtest-$(2)$$(X_$(2)):\t\t\t\\\n-\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS)\t\t\\\n-\t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n+$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)): CFG_COMPILER = $(2)\n+$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)):\t\t\t\t\\\n+\t\t$$(CRATEFILE_$(4))\t\t\t\t\t\\\n+\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\t\t\\\n+\t\t$$(STDTESTDEP_$(1)_$(2)_$(3)_$(4))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n-\n-$(3)/stage$(1)/test/extratest-$(2)$$(X_$(2)):\t\t\t\\\n-\t\t$$(EXTRALIB_CRATE) $$(EXTRALIB_INPUTS)\t\t\\\n-\t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n-\n-$(3)/stage$(1)/test/rustuvtest-$(2)$$(X_$(2)):\t\t\t\\\n-\t\t$$(LIBRUSTUV_CRATE) $$(LIBRUSTUV_INPUTS)\t\\\n-\t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test \\\n-\t\t-L $$(UV_SUPPORT_DIR_$(2)) \\\n-\t\t-L $$(dir $$(LIBUV_LIB_$(2)))\n-\n-$(3)/stage$(1)/test/nativetest-$(2)$$(X_$(2)):\t\t\t\\\n-\t\t$$(LIBNATIVE_CRATE) $$(LIBNATIVE_INPUTS)\t\\\n-\t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n-\n-$(3)/stage$(1)/test/greentest-$(2)$$(X_$(2)):\t\t\t\\\n-\t\t$$(LIBGREEN_CRATE) $$(LIBGREEN_INPUTS)\t\\\n-\t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n-\n-$(3)/stage$(1)/test/syntaxtest-$(2)$$(X_$(2)):\t\t\t\\\n-\t\t$$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS)\t\\\n-\t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n-\n-$(3)/stage$(1)/test/rustctest-$(2)$$(X_$(2)): CFG_COMPILER = $(2)\n-$(3)/stage$(1)/test/rustctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n-\t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n-\t\t$$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM_$(2)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX_$(2))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test \\\n-\t    -L \"$$(LLVM_LIBDIR_$(2))\"\n-\n-$(3)/stage$(1)/test/rustpkgtest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n-\t\t$$(RUSTPKG_LIB) $$(RUSTPKG_INPUTS)\t\t\\\n-\t\t$$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX_$(2)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2)) \\\n-\t\t$$(HBIN$(1)_H_$(3))/rustpkg$$(X_$(2)) \\\n-\t\t$$(TBIN$(1)_T_$(2)_H_$(3))/rustpkg$$(X_$(2)) \\\n-\t\t$$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X_$(2))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n-\n-$(3)/stage$(1)/test/rustdoctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n-\t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\\\n-\t\t$$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX_$(2)) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2)) \\\n-\t\t$$(SUNDOWN_LIB_$(2))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test \\\n-\t\t-L $$(SUNDOWN_DIR_$(2))\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\t\\\n+\t\t-L \"$$(RT_OUTPUT_DIR_$(2))\"\t\t\\\n+\t\t-L \"$$(LLVM_LIBDIR_$(2))\"\n \n endef\n \n $(foreach host,$(CFG_HOST), \\\n  $(eval $(foreach target,$(CFG_TARGET), \\\n   $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(call TEST_RUNNER,$(stage),$(target),$(host))))))))\n+   $(eval $(foreach crate,$(TEST_CRATES), \\\n+    $(eval $(call TEST_RUNNER,$(stage),$(target),$(host),$(crate))))))))))\n \n define DEF_TEST_CRATE_RULES\n check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n@@ -629,7 +571,7 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n         --host $(3)                                       \\\n         --adb-path=$(CFG_ADB)                          \\\n         --adb-test-dir=$(CFG_ADB_TEST_DIR)                  \\\n-        --rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS)\" \\\n+        --rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(2))\" \\\n         $$(CTEST_TESTARGS)\n \n CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)\n@@ -758,20 +700,18 @@ $(foreach host,$(CFG_HOST), \\\n    $(foreach docname,$(DOC_TEST_NAMES), \\\n     $(eval $(call DEF_RUN_DOC_TEST,$(stage),$(target),$(host),$(docname)))))))\n \n-CRATE_DOC_LIB-std = $(STDLIB_CRATE)\n-CRATE_DOC_LIB-extra = $(EXTRALIB_CRATE)\n-\n define DEF_CRATE_DOC_TEST\n \n check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4))\n \n ifeq ($(2),$$(CFG_BUILD))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)):\t\t\\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)):\t\t\t\t\\\n+\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\t\t\\\n \t\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3))\n \t@$$(call E, run doc-$(4) [$(2)])\n \t$$(Q)$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) --test \\\n-\t    $$(CRATE_DOC_LIB-$(4)) --test-args \"$$(TESTARGS)\" && touch $$@\n+\t    $$(CRATEFILE_$(4)) --test-args \"$$(TESTARGS)\" && touch $$@\n else\n $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)):\n \ttouch $$@\n@@ -915,14 +855,16 @@ $$(TLIB2_T_$(2)_H_$(3))/$$(FT_LIB): \\\n \t\ttmp/$$(FT).rc \\\n \t\t$$(SREQ2_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE2_T_$(2)_H_$(3)) --lib -o $$@ $$<\n+\t$$(STAGE2_T_$(2)_H_$(3)) --lib -o $$@ $$< \\\n+\t  -L \"$$(RT_OUTPUT_DIR_$(2))\"\n \n $(3)/test/$$(FT_DRIVER)-$(2)$$(X_$(2)): \\\n \t\ttmp/$$(FT_DRIVER).rs \\\n \t\t$$(TLIB2_T_$(2)_H_$(3))/$$(FT_LIB) \\\n \t\t$$(SREQ2_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@ $$<)\n-\t$$(STAGE2_T_$(2)_H_$(3)) -o $$@ $$<\n+\t$$(STAGE2_T_$(2)_H_$(3)) -o $$@ $$< \\\n+\t  -L \"$$(RT_OUTPUT_DIR_$(2))\"\n \n $(3)/test/$$(FT_DRIVER)-$(2).out: \\\n \t\t$(3)/test/$$(FT_DRIVER)-$(2)$$(X_$(2)) \\"}, {"sha": "5ae33cb7fabe9fc0c02eb49f03c4f6a98959cb7a", "filename": "mk/tools.mk", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d3f70f5a7d619343c2d1f63ae8e5ade48051a0af/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=d3f70f5a7d619343c2d1f63ae8e5ade48051a0af", "patch": "@@ -1,142 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# Rules for non-core tools built with the compiler, both for target\n-# and host architectures\n-\n-# The test runner that runs the cfail/rfail/rpass and bxench tests\n-COMPILETEST_CRATE := $(S)src/compiletest/compiletest.rs\n-COMPILETEST_INPUTS := $(wildcard $(S)src/compiletest/*.rs)\n-\n-# Rustpkg, the package manager and build system\n-RUSTPKG_LIB := $(S)src/librustpkg/lib.rs\n-RUSTPKG_INPUTS := $(wildcard $(S)src/librustpkg/*.rs)\n-\n-# Rustdoc, the documentation tool\n-RUSTDOC_LIB := $(S)src/librustdoc/lib.rs\n-RUSTDOC_INPUTS := $(wildcard $(addprefix $(S)src/librustdoc/,        \\\n-                                           *.rs */*.rs */*/*.rs))\n-\n-# FIXME: These are only built for the host arch. Eventually we'll\n-# have tools that need to built for other targets.\n-define TOOLS_STAGE_N_TARGET\n-\n-$$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X_$(4)):\t\t\t\\\n-\t\t$$(COMPILETEST_CRATE) $$(COMPILETEST_INPUTS)\t\\\n-\t\t$$(SREQ$(1)_T_$(4)_H_$(3))\t\t\t\\\n-\t\t| $$(TBIN$(1)_T_$(4)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n-\n-$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4)):\t\t\\\n-\t\t$$(RUSTPKG_LIB) $$(RUSTPKG_INPUTS)\t\t    \\\n-\t\t$$(SREQ$(1)_T_$(4)_H_$(3))\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4)) \\\n-\t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTPKG_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTPKG_GLOB_$(4)),$$(notdir $$@))\n-\n-$$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X_$(4)):\t\t\t\t\\\n-\t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4))\t\\\n-\t\t| $$(TBIN$(1)_T_$(4)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rustpkg -o $$@ $$<\n-\n-$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4)):\t\t\\\n-\t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\t\\\n-\t\t$$(SREQ$(1)_T_$(4)_H_$(3))\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4)) \\\n-\t\t$$(SUNDOWN_LIB_$(4)) \\\n-\t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTDOC_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) \\\n-\t\t-L $$(SUNDOWN_DIR_$(4)) --out-dir $$(@D) $$< && touch $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTDOC_GLOB_$(4)),$$(notdir $$@))\n-\n-$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X_$(4)):\t\t\t\\\n-\t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4))\t\t\t\\\n-\t\t| $$(TBIN$(1)_T_$(4)_H_$(3))/\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rustdoc -o $$@ $$<\n-\n-endef\n-\n-define TOOLS_STAGE_N_HOST\n-\n-$$(HBIN$(2)_H_$(4))/compiletest$$(X_$(4)):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X_$(4))\t\\\n-\t\t$$(HSREQ$(2)_H_$(4))\t\t\t\t\t\\\n-\t\t| $$(HBIN$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-\n-$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTPKG_$(4)):\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4))\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4))\t\t\\\n-\t\t$$(HSREQ$(2)_H_$(4))\t\t\t\t\t\\\n-\t\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTPKG_GLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp $$< $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTPKG_GLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTPKG_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTPKG_DSYM_GLOB_$(4))) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\n-$$(HBIN$(2)_H_$(4))/rustpkg$$(X_$(4)):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X_$(4))\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTPKG_$(4))\t\\\n-\t\t$$(HSREQ$(2)_H_$(4))\t\t\t\t\\\n-\t\t| $$(HBIN$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTDOC_$(4)):\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4))\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4))\t\t\t\\\n-\t\t$$(HSREQ$(2)_H_$(4)) \\\n-\t\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTDOC_GLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp $$< $$@\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTDOC_GLOB_$(4)),$$(notdir $$@))\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTDOC_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTDOC_DSYM_GLOB_$(4))) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\n-$$(HBIN$(2)_H_$(4))/rustdoc$$(X_$(4)):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X_$(4))\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTDOC_$(4))\t\\\n-\t\t$$(HSREQ$(2)_H_$(4))\t\t\t\t\\\n-\t\t| $$(HBIN$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST),\t\t\t\t\\\n-$(foreach target,$(CFG_TARGET),\t\t\t\t\\\n- $(eval $(call TOOLS_STAGE_N_TARGET,0,1,$(host),$(target)))\t\\\n- $(eval $(call TOOLS_STAGE_N_TARGET,1,2,$(host),$(target)))\t\\\n- $(eval $(call TOOLS_STAGE_N_TARGET,2,3,$(host),$(target)))\t\\\n- $(eval $(call TOOLS_STAGE_N_TARGET,3,bogus,$(host),$(target)))))\n-\n-$(foreach host,$(CFG_HOST),\t\t\t\t\\\n- $(eval $(call TOOLS_STAGE_N_HOST,0,1,$(host),$(host)))\t\\\n- $(eval $(call TOOLS_STAGE_N_HOST,1,2,$(host),$(host)))\t\\\n- $(eval $(call TOOLS_STAGE_N_HOST,2,3,$(host),$(host))))"}, {"sha": "5a4fedd2b2a9afcdd65a8b323d6275915df0dcdf", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -82,7 +82,6 @@ pub mod rational;\n pub mod complex;\n pub mod stats;\n pub mod semver;\n-pub mod flate;\n pub mod hex;\n pub mod uuid;\n "}, {"sha": "f746fe4ec32a1378cd69c4afe668588e7825defc", "filename": "src/libflate/lib.rs", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -14,6 +14,10 @@ Simple compression\n \n */\n \n+#[crate_id = \"flate#0.10-pre\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[license = \"MIT/ASL2\"];\n #[allow(missing_doc)];\n \n use std::libc::{c_void, size_t, c_int};\n@@ -23,7 +27,7 @@ use std::vec;\n pub mod rustrt {\n     use std::libc::{c_int, c_void, size_t};\n \n-    #[link(name = \"rustrt\", kind = \"static\")]\n+    #[link(name = \"miniz\", kind = \"static\")]\n     extern {\n         pub fn tdefl_compress_mem_to_heap(psrc_buf: *c_void,\n                                           src_buf_len: size_t,\n@@ -91,7 +95,7 @@ pub fn inflate_bytes_zlib(bytes: &[u8]) -> ~[u8] {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n+    use super::{inflate_bytes, deflate_bytes};\n     use std::rand;\n     use std::rand::Rng;\n ", "previous_filename": "src/libextra/flate.rs"}, {"sha": "86e82dec9e6e988abcfd74302c7be6d492aea85e", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -30,6 +30,7 @@ This API is completely unstable and subject to change.\n #[feature(macro_rules, globs, struct_variant, managed_boxes)];\n \n extern mod extra;\n+extern mod flate;\n extern mod syntax;\n \n use back::link;"}, {"sha": "046184bef58bb3e7e788587ed88525809f31d120", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -33,7 +33,7 @@ use std::os::consts::{macos, freebsd, linux, android, win32};\n use std::ptr;\n use std::str;\n use std::vec;\n-use extra::flate;\n+use flate;\n \n pub enum Os {\n     OsMacos,"}, {"sha": "9744c395b7c193aa44999801380ce9c6da635591", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -2683,7 +2683,7 @@ pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::encode_\n }\n \n pub fn write_metadata(cx: &CrateContext, crate: &ast::Crate) -> ~[u8] {\n-    use extra::flate;\n+    use flate;\n \n     if !cx.sess.building_library.get() {\n         return ~[]"}, {"sha": "d53adb78a30866b440286a14088d0794aa43b73e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fedf325a2fc4cfe2f2f46c930de0cba56af5e4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=74fedf325a2fc4cfe2f2f46c930de0cba56af5e4", "patch": "@@ -16,7 +16,9 @@\n //! functionality through a unit-struct, `Markdown`, which has an implementation\n //! of `fmt::Default`. Example usage:\n //!\n-//! ```rust\n+//! ```rust,ignore\n+//! use rustdoc::html::markdown::Markdown;\n+//!\n //! let s = \"My *markdown* _text_\";\n //! let html = format!(\"{}\", Markdown(s));\n //! // ... something using html"}]}