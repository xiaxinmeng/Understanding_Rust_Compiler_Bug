{"sha": "f071b5066a9b49c5912dd359e34a8e7c4e863970", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNzFiNTA2NmE5YjQ5YzU5MTJkZDM1OWUzNGE4ZTdjNGU4NjM5NzA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-27T10:21:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-24T11:42:33Z"}, "message": "Introduce should_encode_mir.", "tree": {"sha": "13c85fc82ad68b5646578ddd627391640964b4e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13c85fc82ad68b5646578ddd627391640964b4e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f071b5066a9b49c5912dd359e34a8e7c4e863970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f071b5066a9b49c5912dd359e34a8e7c4e863970", "html_url": "https://github.com/rust-lang/rust/commit/f071b5066a9b49c5912dd359e34a8e7c4e863970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f071b5066a9b49c5912dd359e34a8e7c4e863970/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e355ea9bd86ac6580a5d422a65dbf689845808", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e355ea9bd86ac6580a5d422a65dbf689845808", "html_url": "https://github.com/rust-lang/rust/commit/85e355ea9bd86ac6580a5d422a65dbf689845808"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "329ba92e4efc1e18e8f033e08d04d6a1326b6b51", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f071b5066a9b49c5912dd359e34a8e7c4e863970/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f071b5066a9b49c5912dd359e34a8e7c4e863970/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f071b5066a9b49c5912dd359e34a8e7c4e863970", "patch": "@@ -785,6 +785,43 @@ fn should_encode_stability(def_kind: DefKind) -> bool {\n     }\n }\n \n+/// Whether we should encode MIR.\n+///\n+/// Return a pair, resp. for CTFE and for LLVM.\n+fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n+    match tcx.def_kind(def_id) {\n+        // Constructors\n+        DefKind::Ctor(_, _) => {\n+            let mir_opt_base = tcx.sess.opts.output_types.should_codegen()\n+                || tcx.sess.opts.debugging_opts.always_encode_mir;\n+            (true, mir_opt_base)\n+        }\n+        // Constants\n+        DefKind::AnonConst | DefKind::AssocConst | DefKind::Static | DefKind::Const => {\n+            (true, false)\n+        }\n+        // Closures and functions\n+        DefKind::Closure | DefKind::AssocFn | DefKind::Fn => {\n+            let generics = tcx.generics_of(def_id);\n+            let needs_inline = (generics.requires_monomorphization(tcx)\n+                || tcx.codegen_fn_attrs(def_id).requests_inline())\n+                && tcx.sess.opts.output_types.should_codegen();\n+            // Only check the presence of the `const` modifier.\n+            let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id());\n+            let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;\n+            (is_const_fn, needs_inline || is_const_fn || always_encode_mir)\n+        }\n+        // Generators require optimized MIR to compute layout.\n+        DefKind::Generator => {\n+            // Only check the presence of the `const` modifier.\n+            let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id());\n+            (is_const_fn, true)\n+        }\n+        // The others don't have MIR.\n+        _ => (false, false),\n+    }\n+}\n+\n impl EncodeContext<'a, 'tcx> {\n     fn encode_def_ids(&mut self) {\n         if self.is_proc_macro {"}]}