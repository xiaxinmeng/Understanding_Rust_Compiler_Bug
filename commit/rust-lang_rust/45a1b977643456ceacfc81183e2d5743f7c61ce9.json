{"sha": "45a1b977643456ceacfc81183e2d5743f7c61ce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YTFiOTc3NjQzNDU2Y2VhY2ZjODExODNlMmQ1NzQzZjdjNjFjZTk=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-14T03:48:09Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-14T03:48:09Z"}, "message": "Make analyze_move_out_from more field-sensitive\n\nCurrently analyze_move_out_from checks all restrictions on all base\npaths of the move path, but it only needs to check restrictions from\nloans of the base paths, and can disregard restrictions from loans of\nextensions of those base paths.", "tree": {"sha": "94e71110ec115abe06df393c2b1000c3f9da4b92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94e71110ec115abe06df393c2b1000c3f9da4b92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45a1b977643456ceacfc81183e2d5743f7c61ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45a1b977643456ceacfc81183e2d5743f7c61ce9", "html_url": "https://github.com/rust-lang/rust/commit/45a1b977643456ceacfc81183e2d5743f7c61ce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45a1b977643456ceacfc81183e2d5743f7c61ce9/comments", "author": null, "committer": null, "parents": [{"sha": "8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed", "html_url": "https://github.com/rust-lang/rust/commit/8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed"}], "stats": {"total": 81, "additions": 51, "deletions": 30}, "files": [{"sha": "ab004e4a3e934c08360cca4a586bab0a5a3c78f2", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/45a1b977643456ceacfc81183e2d5743f7c61ce9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a1b977643456ceacfc81183e2d5743f7c61ce9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=45a1b977643456ceacfc81183e2d5743f7c61ce9", "patch": "@@ -871,33 +871,55 @@ impl<'a> CheckLoanCtxt<'a> {\n                self.tcx().map.node_to_str(expr_id),\n                move_path.repr(self.tcx()));\n \n-        // We must check every element of a move path. See\n-        // `borrowck-move-subcomponent.rs` for a test case.\n-\n         let mut ret = MoveOk;\n+\n+        // First, we check for a restriction on the path P being used. This\n+        // accounts for borrows of P but also borrows of subpaths, like P.a.b.\n+        // Consider the following example:\n+        //\n+        //     let x = &mut a.b.c; // Restricts a, a.b, and a.b.c\n+        //     let y = a;          // Conflicts with restriction\n+\n+        self.each_in_scope_restriction(expr_id, move_path, |loan, _restr| {\n+            // Any restriction prevents moves.\n+            ret = MoveWhileBorrowed(loan.loan_path.clone(), loan.span);\n+            false\n+        });\n+\n+        // Next, we must check for *loans* (not restrictions) on the path P or\n+        // any base path. This rejects examples like the following:\n+        //\n+        //     let x = &mut a.b;\n+        //     let y = a.b.c;\n+        //\n+        // Limiting this search to *loans* and not *restrictions* means that\n+        // examples like the following continue to work:\n+        //\n+        //     let x = &mut a.b;\n+        //     let y = a.c;\n+\n         let mut loan_path = move_path;\n         loop {\n-            // check for a conflicting loan:\n-            self.each_in_scope_restriction(expr_id, loan_path, |loan, _| {\n+            self.each_in_scope_loan(expr_id, |loan| {\n                 // Any restriction prevents moves.\n-                ret = MoveWhileBorrowed(loan.loan_path.clone(), loan.span);\n-                false\n+                if *loan.loan_path == *loan_path {\n+                    ret = MoveWhileBorrowed(loan.loan_path.clone(), loan.span);\n+                    false\n+                } else {\n+                    true\n+                }\n             });\n \n-            if ret != MoveOk {\n-                return ret\n-            }\n-\n             match *loan_path {\n                 LpVar(_) => {\n-                    ret = MoveOk;\n                     break;\n                 }\n                 LpExtend(ref lp_base, _, _) => {\n                     loan_path = &**lp_base;\n                 }\n             }\n         }\n-        ret\n+\n+        return ret;\n     }\n }"}, {"sha": "72042b8373d84c2565e2e12daf150130ffd59601", "filename": "src/test/compile-fail/borrowck-field-sensitivity.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/45a1b977643456ceacfc81183e2d5743f7c61ce9/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a1b977643456ceacfc81183e2d5743f7c61ce9/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs?ref=45a1b977643456ceacfc81183e2d5743f7c61ce9", "patch": "@@ -84,20 +84,6 @@ fn fu_move_after_fu_move() {\n \n // The following functions aren't yet accepted, but they should be.\n \n-fn move_after_borrow_correct() {\n-    let x = A { a: 1, b: box 2 };\n-    let p = &x.a;\n-    drop(x.b); //~ ERROR cannot move out of `x.b` because it is borrowed\n-    drop(*p);\n-}\n-\n-fn fu_move_after_borrow_correct() {\n-    let x = A { a: 1, b: box 2 };\n-    let p = &x.a;\n-    let _y = A { a: 3, .. x }; //~ ERROR cannot move out of `x.b` because it is borrowed\n-    drop(*p);\n-}\n-\n fn copy_after_field_assign_after_uninit() {\n     let mut x: A;\n     x.a = 1;\n@@ -132,9 +118,6 @@ fn main() {\n     fu_move_after_move();\n     fu_move_after_fu_move();\n \n-    move_after_borrow_correct();\n-    fu_move_after_borrow_correct();\n-\n     copy_after_field_assign_after_uninit();\n     borrow_after_field_assign_after_uninit();\n     move_after_field_assign_after_uninit();"}, {"sha": "33be47e504be2a06c6624d9d00b8a3e3990ee450", "filename": "src/test/run-pass/borrowck-field-sensitivity.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45a1b977643456ceacfc81183e2d5743f7c61ce9/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a1b977643456ceacfc81183e2d5743f7c61ce9/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs?ref=45a1b977643456ceacfc81183e2d5743f7c61ce9", "patch": "@@ -73,6 +73,20 @@ fn borrow_after_fu_move() {\n     drop(*p);\n }\n \n+fn move_after_borrow() {\n+    let x = A { a: 1, b: box 2 };\n+    let p = &x.a;\n+    drop(x.b);\n+    drop(*p);\n+}\n+\n+fn fu_move_after_borrow() {\n+    let x = A { a: 1, b: box 2 };\n+    let p = &x.a;\n+    let _y = A { a: 3, .. x };\n+    drop(*p);\n+}\n+\n fn mut_borrow_after_mut_borrow() {\n     let mut x = A { a: 1, b: box 2 };\n     let p = &mut x.a;\n@@ -225,6 +239,8 @@ fn main() {\n \n     borrow_after_move();\n     borrow_after_fu_move();\n+    move_after_borrow();\n+    fu_move_after_borrow();\n     mut_borrow_after_mut_borrow();\n \n     move_after_move();"}]}