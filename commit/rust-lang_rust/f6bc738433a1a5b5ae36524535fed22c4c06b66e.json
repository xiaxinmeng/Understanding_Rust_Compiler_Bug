{"sha": "f6bc738433a1a5b5ae36524535fed22c4c06b66e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YmM3Mzg0MzNhMWE1YjVhZTM2NTI0NTM1ZmVkMjJjNGMwNmI2NmU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-30T19:09:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-30T19:09:20Z"}, "message": "Rollup merge of #87385 - Aaron1011:final-enable-semi, r=petrochenkov\n\nMake `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` warn by default\n\nThis PR makes the `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` lint warn by default.\n\nTo avoid showing a large number of un-actionable warnings to users, we only enable the lint for macros defined in the same crate. This ensures that users will be able to fix the warning by simply removing a semicolon.\n\nIn the future, I'd like to enable this lint unconditionally, and eventually make it into a hard error in a future edition. This PR is a step towards that goal.", "tree": {"sha": "14696a6213ffc62c866f75ea12a6acadf12dbae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14696a6213ffc62c866f75ea12a6acadf12dbae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6bc738433a1a5b5ae36524535fed22c4c06b66e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhBE5gCRBK7hj4Ov3rIwAA6hAIAGp7sFGjJr+3dSKSHqLXODn4\nM9OOpL594vnv1EBnnrUMbW2HsiCHhEX0qUEBGzxyMsBXeK1hmmYOjgnGRtRMbCOc\ncwgloiY75tGri1ss4X5p8Se6RHDDU2S93f0Ofsh3EVAixlTmrKQoZonCD52YtOCW\naCvVoOMtUkXGsaXwX9Ug24BJAdcJ3QZGhk/oBFo2M69D2WFlWwejWpdYl62Ac5L+\nf25Ij+co7zlywDKWY68V/qbQSqmZt2lo21/+joqHI6FXePN2WyrRRZ2WlhX3QlVY\nlEt5ssw61AGf1YMAPldfZsPYP5dscTEeKiVkSTcZYtUsCrQpZpM1WuXaW+LUBrk=\n=xcmO\n-----END PGP SIGNATURE-----\n", "payload": "tree 14696a6213ffc62c866f75ea12a6acadf12dbae4\nparent 9391d5520478bd98276f8424b62a09b63e98037b\nparent e70ce57f306c730c7a949942671cd525e281f2ec\nauthor Yuki Okushi <jtitor@2k36.org> 1627672160 +0900\ncommitter GitHub <noreply@github.com> 1627672160 +0900\n\nRollup merge of #87385 - Aaron1011:final-enable-semi, r=petrochenkov\n\nMake `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` warn by default\n\nThis PR makes the `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` lint warn by default.\n\nTo avoid showing a large number of un-actionable warnings to users, we only enable the lint for macros defined in the same crate. This ensures that users will be able to fix the warning by simply removing a semicolon.\n\nIn the future, I'd like to enable this lint unconditionally, and eventually make it into a hard error in a future edition. This PR is a step towards that goal.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6bc738433a1a5b5ae36524535fed22c4c06b66e", "html_url": "https://github.com/rust-lang/rust/commit/f6bc738433a1a5b5ae36524535fed22c4c06b66e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6bc738433a1a5b5ae36524535fed22c4c06b66e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9391d5520478bd98276f8424b62a09b63e98037b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9391d5520478bd98276f8424b62a09b63e98037b", "html_url": "https://github.com/rust-lang/rust/commit/9391d5520478bd98276f8424b62a09b63e98037b"}, {"sha": "e70ce57f306c730c7a949942671cd525e281f2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70ce57f306c730c7a949942671cd525e281f2ec", "html_url": "https://github.com/rust-lang/rust/commit/e70ce57f306c730c7a949942671cd525e281f2ec"}], "stats": {"total": 172, "additions": 135, "deletions": 37}, "files": [{"sha": "9aee86c9e57ddec76967dae4e2276312e1b17ac1", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -45,6 +45,8 @@ crate struct ParserAnyMacro<'a> {\n     lint_node_id: NodeId,\n     is_trailing_mac: bool,\n     arm_span: Span,\n+    /// Whether or not this macro is defined in the current crate\n+    is_local: bool,\n }\n \n crate fn annotate_err_with_kind(\n@@ -124,6 +126,7 @@ impl<'a> ParserAnyMacro<'a> {\n             lint_node_id,\n             arm_span,\n             is_trailing_mac,\n+            is_local,\n         } = *self;\n         let snapshot = &mut parser.clone();\n         let fragment = match parse_ast_fragment(parser, kind) {\n@@ -138,13 +141,15 @@ impl<'a> ParserAnyMacro<'a> {\n         // `macro_rules! m { () => { panic!(); } }` isn't parsed by `.parse_expr()`,\n         // but `m!()` is allowed in expression positions (cf. issue #34706).\n         if kind == AstFragmentKind::Expr && parser.token == token::Semi {\n-            parser.sess.buffer_lint_with_diagnostic(\n-                SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n-                parser.token.span,\n-                lint_node_id,\n-                \"trailing semicolon in macro used in expression position\",\n-                BuiltinLintDiagnostics::TrailingMacro(is_trailing_mac, macro_ident),\n-            );\n+            if is_local {\n+                parser.sess.buffer_lint_with_diagnostic(\n+                    SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n+                    parser.token.span,\n+                    lint_node_id,\n+                    \"trailing semicolon in macro used in expression position\",\n+                    BuiltinLintDiagnostics::TrailingMacro(is_trailing_mac, macro_ident),\n+                );\n+            }\n             parser.bump();\n         }\n \n@@ -162,6 +167,7 @@ struct MacroRulesMacroExpander {\n     lhses: Vec<mbe::TokenTree>,\n     rhses: Vec<mbe::TokenTree>,\n     valid: bool,\n+    is_local: bool,\n }\n \n impl TTMacroExpander for MacroRulesMacroExpander {\n@@ -183,6 +189,7 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n             input,\n             &self.lhses,\n             &self.rhses,\n+            self.is_local,\n         )\n     }\n }\n@@ -210,6 +217,7 @@ fn generic_extension<'cx>(\n     arg: TokenStream,\n     lhses: &[mbe::TokenTree],\n     rhses: &[mbe::TokenTree],\n+    is_local: bool,\n ) -> Box<dyn MacResult + 'cx> {\n     let sess = &cx.sess.parse_sess;\n \n@@ -311,6 +319,7 @@ fn generic_extension<'cx>(\n                     lint_node_id: cx.current_expansion.lint_node_id,\n                     is_trailing_mac: cx.current_expansion.is_trailing_mac,\n                     arm_span,\n+                    is_local,\n                 });\n             }\n             Failure(token, msg) => match best_failure {\n@@ -544,6 +553,9 @@ pub fn compile_declarative_macro(\n         lhses,\n         rhses,\n         valid,\n+        // Macros defined in the current crate have a real node id,\n+        // whereas macros from an external crate have a dummy id.\n+        is_local: def.id != DUMMY_NODE_ID,\n     }))\n }\n "}, {"sha": "7195c41eae92e7aacb32d08ad578f93c977f1dfb", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -2799,7 +2799,7 @@ declare_lint! {\n     /// [issue #79813]: https://github.com/rust-lang/rust/issues/79813\n     /// [future-incompatible]: ../index.md#future-incompatible-lints\n     pub SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n-    Allow,\n+    Warn,\n     \"trailing semicolon in macro body used as expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #79813 <https://github.com/rust-lang/rust/issues/79813>\","}, {"sha": "676695795badcdde278ed9f47f4a08bacb1e43d4", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -290,7 +290,7 @@ macro_rules! dbg {\n     // `$val` expression could be a block (`{ .. }`), in which case the `eprintln!`\n     // will be malformed.\n     () => {\n-        $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!());\n+        $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!())\n     };\n     ($val:expr $(,)?) => {\n         // Use of `match` here is intentional because it affects the lifetimes"}, {"sha": "0685358851edda9aae3c0bd6ef27ea867d9aff66", "filename": "src/test/ui/hygiene/auxiliary/intercrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -5,7 +5,7 @@ pub mod foo {\n     mod bar {\n         fn f() -> u32 { 1 }\n         pub macro m() {\n-            f();\n+            f()\n         }\n     }\n }"}, {"sha": "a06d9255ab5b0d598f9a0fbbc71e92fcc8561d69", "filename": "src/test/ui/hygiene/hygienic-label-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -3,5 +3,5 @@ macro_rules! foo {\n }\n \n pub fn main() {\n-    'x: loop { foo!() }\n+    'x: loop { foo!(); }\n }"}, {"sha": "c1ed861836c1cea08f164c58a08b8c057c4be6d0", "filename": "src/test/ui/hygiene/hygienic-label-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -4,8 +4,8 @@ error[E0426]: use of undeclared label `'x`\n LL |     () => { break 'x; }\n    |                   ^^ undeclared label `'x`\n ...\n-LL |     'x: loop { foo!() }\n-   |                ------ in this macro invocation\n+LL |     'x: loop { foo!(); }\n+   |                ------- in this macro invocation\n    |\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "ab0559e1b6a8379adcbf912800bbe78fcf04ac32", "filename": "src/test/ui/hygiene/hygienic-label-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -4,6 +4,6 @@ macro_rules! foo {\n \n pub fn main() {\n     'x: for _ in 0..1 {\n-        foo!()\n+        foo!();\n     };\n }"}, {"sha": "29d1b67e09f9b88c137729b11efce84a4279a2d3", "filename": "src/test/ui/hygiene/hygienic-label-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -4,8 +4,8 @@ error[E0426]: use of undeclared label `'x`\n LL |     () => { break 'x; }\n    |                   ^^ undeclared label `'x`\n ...\n-LL |         foo!()\n-   |         ------ in this macro invocation\n+LL |         foo!();\n+   |         ------- in this macro invocation\n    |\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "6f9e6ec0a57ff0c17d87b33c10084e202c2bfe39", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/allow-semicolon-in-expressions-from-macros.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9391d5520478bd98276f8424b62a09b63e98037b/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9391d5520478bd98276f8424b62a09b63e98037b/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs?ref=9391d5520478bd98276f8424b62a09b63e98037b", "patch": "@@ -1,15 +0,0 @@\n-// check-pass\n-// Ensure that trailing semicolons are allowed by default\n-\n-macro_rules! foo {\n-    () => {\n-        true;\n-    }\n-}\n-\n-fn main() {\n-    let val = match true {\n-        true => false,\n-        _ => foo!()\n-    };\n-}"}, {"sha": "781391cc574a9d53e6fb10c3fa51be9d0a61d58b", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/auxiliary/foreign-crate.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fauxiliary%2Fforeign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fauxiliary%2Fforeign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fauxiliary%2Fforeign-crate.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -0,0 +1,4 @@\n+#[macro_export]\n+macro_rules! my_macro {\n+    () => { true; }\n+}"}, {"sha": "374506366f80236ed8a73910f08df4b21157b19e", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/foreign-crate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fforeign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fforeign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fforeign-crate.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:foreign-crate.rs\n+// check-pass\n+\n+extern crate foreign_crate;\n+\n+// Test that we do not lint for a macro in a foreign crate\n+fn main() {\n+    let _ = foreign_crate::my_macro!();\n+}"}, {"sha": "2c63311e659781de89fc1d1358d2bb348cc8cd59", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/warn-semicolon-in-expressions-from-macros.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// Ensure that trailing semicolons cause warnings by default\n+\n+macro_rules! foo {\n+    () => {\n+        true; //~  WARN trailing semicolon in macro\n+              //~| WARN this was previously\n+    }\n+}\n+\n+fn main() {\n+    let _val = match true {\n+        true => false,\n+        _ => foo!()\n+    };\n+}"}, {"sha": "d770a8c8f36e6f7c6b3d3c91d599220f925f12dc", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/warn-semicolon-in-expressions-from-macros.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -0,0 +1,16 @@\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/warn-semicolon-in-expressions-from-macros.rs:6:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         _ => foo!()\n+   |              ------ in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d09fdf118e6f4e073683aa5d8cd9271e2d327551", "filename": "src/test/ui/macros/macro-context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -6,6 +6,8 @@ macro_rules! m {\n                             //~| ERROR macro expansion ignores token `;`\n                             //~| ERROR cannot find type `i` in this scope\n                             //~| ERROR cannot find value `i` in this scope\n+                            //~| WARN trailing semicolon in macro\n+                            //~| WARN this was previously\n }\n \n fn main() {"}, {"sha": "3b8a6f17491582a7df22c0881e91157b86e1600b", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -64,7 +64,21 @@ LL |     let i = m!();\n    |\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 6 previous errors\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/macro-context.rs:3:15\n+   |\n+LL |     () => ( i ; typeof );\n+   |               ^\n+...\n+LL |     let i = m!();\n+   |             ---- in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: this warning originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0412, E0425.\n For more information about an error, try `rustc --explain E0412`."}, {"sha": "f22caf2793fd5ef07f4ede88e0d819420b6f64d4", "filename": "src/test/ui/macros/macro-in-expression-context.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -3,6 +3,12 @@\n macro_rules! foo {\n     () => {\n         assert_eq!(\"A\", \"A\");\n+        //~^ WARN trailing semicolon in macro\n+        //~| WARN this was previously\n+        //~| NOTE macro invocations at the end of a block\n+        //~| NOTE to ignore the value produced by the macro\n+        //~| NOTE for more information\n+        //~| NOTE `#[warn(semicolon_in_expressions_from_macros)]` on by default\n         assert_eq!(\"B\", \"B\");\n     }\n     //~^^ ERROR macro expansion ignores token `assert_eq` and any following\n@@ -12,4 +18,10 @@ macro_rules! foo {\n fn main() {\n     foo!();\n     //~^ NOTE caused by the macro expansion here\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n }"}, {"sha": "1a056e582ff4758b8298afabf202bfd5cc3a4081", "filename": "src/test/ui/macros/macro-in-expression-context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -3,6 +3,12 @@\n macro_rules! foo {\n     () => {\n         assert_eq!(\"A\", \"A\");\n+        //~^ WARN trailing semicolon in macro\n+        //~| WARN this was previously\n+        //~| NOTE macro invocations at the end of a block\n+        //~| NOTE to ignore the value produced by the macro\n+        //~| NOTE for more information\n+        //~| NOTE `#[warn(semicolon_in_expressions_from_macros)]` on by default\n         assert_eq!(\"B\", \"B\");\n     }\n     //~^^ ERROR macro expansion ignores token `assert_eq` and any following\n@@ -12,4 +18,10 @@ macro_rules! foo {\n fn main() {\n     foo!()\n     //~^ NOTE caused by the macro expansion here\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n }"}, {"sha": "1840babd61dc2a79a7326fc4072123643ca5e397", "filename": "src/test/ui/macros/macro-in-expression-context.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -1,5 +1,5 @@\n error: macro expansion ignores token `assert_eq` and any following\n-  --> $DIR/macro-in-expression-context.rs:6:9\n+  --> $DIR/macro-in-expression-context.rs:12:9\n    |\n LL |         assert_eq!(\"B\", \"B\");\n    |         ^^^^^^^^^\n@@ -11,5 +11,21 @@ LL |     foo!()\n    |\n    = note: the usage of `foo!` is likely invalid in expression context\n \n-error: aborting due to previous error\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/macro-in-expression-context.rs:5:29\n+   |\n+LL |         assert_eq!(\"A\", \"A\");\n+   |                             ^\n+...\n+LL |     foo!()\n+   |     ------ in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `foo`\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "04d34e21cdc74b1bc78999de1f015c50e7bb3988", "filename": "src/test/ui/proc-macro/nested-nonterminal-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -17,7 +17,7 @@ macro_rules! wrap {\n     (first, $e:expr) => { wrap!(second, $e + 1) };\n     (second, $e:expr) => { wrap!(third, $e + 2) };\n     (third, $e:expr) => {\n-        print_bang!($e + 3);\n+        print_bang!($e + 3)\n     };\n }\n "}, {"sha": "7a8137778b44607cd397c03b04205f43e27aeb84", "filename": "src/tools/clippy/tests/ui/needless_borrow_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow_pat.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -7,7 +7,7 @@\n fn f1(_: &str) {}\n macro_rules! m1 {\n     ($e:expr) => {\n-        f1($e);\n+        f1($e)\n     };\n }\n macro_rules! m3 {"}, {"sha": "cd6db8ddc8864fd2a08de85ed9de26c8c31fd553", "filename": "src/tools/clippy/tests/ui/ref_binding_to_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_binding_to_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6bc738433a1a5b5ae36524535fed22c4c06b66e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_binding_to_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_binding_to_reference.rs?ref=f6bc738433a1a5b5ae36524535fed22c4c06b66e", "patch": "@@ -7,7 +7,7 @@\n fn f1(_: &str) {}\n macro_rules! m2 {\n     ($e:expr) => {\n-        f1(*$e);\n+        f1(*$e)\n     };\n }\n macro_rules! m3 {"}]}