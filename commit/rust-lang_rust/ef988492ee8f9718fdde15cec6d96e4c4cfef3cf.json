{"sha": "ef988492ee8f9718fdde15cec6d96e4c4cfef3cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmOTg4NDkyZWU4Zjk3MThmZGRlMTVjZWM2ZDk2ZTRjNGNmZWYzY2Y=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-06T11:50:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-06T11:50:34Z"}, "message": "Merge #2191\n\n2191: Cleanup complete_postfix r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5dbb23a955a27d8a7e381f7c82ca8b8ed55d4eb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dbb23a955a27d8a7e381f7c82ca8b8ed55d4eb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef988492ee8f9718fdde15cec6d96e4c4cfef3cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwrOKCRBK7hj4Ov3rIwAAdHIIAEqx1fpieVYmF/2IWMA2RoRr\nmNS4nALFsCHY223gB7JYDO1U4CBn9BL9+U1eN8Go5AXYPBR/hTys8fwu81QZO6cS\nk9hoaZ2TPQxh6sVRJA5Parv7QBYyWTN3xZbZNB+Bg+IgxtUChYtHuEDbs2ZHjCZC\nzf3npUXfSVdEPg8hmI2S3X8zeANl+CXrgtKBEF4zeAgctKgNvQfZBpY3jwsZ90L3\nxEkTCYLAHkvJIGWA7ZGtOcDa49muY938TqFwH1UnCGVWrWHohYQ2cNNuAMpXlAZa\n9OO2UL767Oi6fOl9sVolnAdMkOCEgyPnKHVEClOz2hrsE78nGhs4/4wXNCPAOME=\n=Exr+\n-----END PGP SIGNATURE-----\n", "payload": "tree 5dbb23a955a27d8a7e381f7c82ca8b8ed55d4eb9\nparent d222608a45d53ca7a1bbc9f0126a092fda48503c\nparent b5349af05fca31af14f8997ed3f18027b1953517\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573041034 +0000\ncommitter GitHub <noreply@github.com> 1573041034 +0000\n\nMerge #2191\n\n2191: Cleanup complete_postfix r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef988492ee8f9718fdde15cec6d96e4c4cfef3cf", "html_url": "https://github.com/rust-lang/rust/commit/ef988492ee8f9718fdde15cec6d96e4c4cfef3cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef988492ee8f9718fdde15cec6d96e4c4cfef3cf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d222608a45d53ca7a1bbc9f0126a092fda48503c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d222608a45d53ca7a1bbc9f0126a092fda48503c", "html_url": "https://github.com/rust-lang/rust/commit/d222608a45d53ca7a1bbc9f0126a092fda48503c"}, {"sha": "b5349af05fca31af14f8997ed3f18027b1953517", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5349af05fca31af14f8997ed3f18027b1953517", "html_url": "https://github.com/rust-lang/rust/commit/b5349af05fca31af14f8997ed3f18027b1953517"}], "stats": {"total": 109, "additions": 57, "deletions": 52}, "files": [{"sha": "4f95654419772c5c0d28b8d3672fc123d19012cf", "filename": "crates/ra_ide_api/src/completion/complete_postfix.rs", "status": "modified", "additions": 57, "deletions": 52, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/ef988492ee8f9718fdde15cec6d96e4c4cfef3cf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef988492ee8f9718fdde15cec6d96e4c4cfef3cf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=ef988492ee8f9718fdde15cec6d96e4c4cfef3cf", "patch": "@@ -1,15 +1,63 @@\n //! FIXME: write short doc here\n \n+use hir::{Ty, TypeCtor};\n+use ra_syntax::{ast::AstNode, TextRange, TextUnit};\n+use ra_text_edit::TextEdit;\n+\n use crate::{\n     completion::{\n         completion_context::CompletionContext,\n         completion_item::{Builder, CompletionKind, Completions},\n     },\n     CompletionItem,\n };\n-use hir::{Ty, TypeCtor};\n-use ra_syntax::{ast::AstNode, TextRange, TextUnit};\n-use ra_text_edit::TextEdit;\n+\n+pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n+    let dot_receiver = match &ctx.dot_receiver {\n+        Some(it) => it,\n+        None => return,\n+    };\n+\n+    let receiver_text = if ctx.dot_receiver_is_ambiguous_float_literal {\n+        let text = dot_receiver.syntax().text();\n+        let without_dot = ..text.len() - TextUnit::of_char('.');\n+        text.slice(without_dot).to_string()\n+    } else {\n+        dot_receiver.syntax().text().to_string()\n+    };\n+\n+    let receiver_ty = ctx.analyzer.type_of(ctx.db, &dot_receiver);\n+\n+    if is_bool_or_unknown(receiver_ty) {\n+        postfix_snippet(ctx, \"if\", \"if expr {}\", &format!(\"if {} {{$0}}\", receiver_text))\n+            .add_to(acc);\n+        postfix_snippet(\n+            ctx,\n+            \"while\",\n+            \"while expr {}\",\n+            &format!(\"while {} {{\\n$0\\n}}\", receiver_text),\n+        )\n+        .add_to(acc);\n+    }\n+\n+    postfix_snippet(ctx, \"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n+\n+    postfix_snippet(ctx, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text)).add_to(acc);\n+    postfix_snippet(ctx, \"refm\", \"&mut expr\", &format!(\"&mut {}\", receiver_text)).add_to(acc);\n+\n+    postfix_snippet(\n+        ctx,\n+        \"match\",\n+        \"match expr {}\",\n+        &format!(\"match {} {{\\n    ${{1:_}} => {{$0\\\\}},\\n}}\", receiver_text),\n+    )\n+    .add_to(acc);\n+\n+    postfix_snippet(ctx, \"dbg\", \"dbg!(expr)\", &format!(\"dbg!({})\", receiver_text)).add_to(acc);\n+\n+    postfix_snippet(ctx, \"box\", \"Box::new(expr)\", &format!(\"Box::new({})\", receiver_text))\n+        .add_to(acc);\n+}\n \n fn postfix_snippet(ctx: &CompletionContext, label: &str, detail: &str, snippet: &str) -> Builder {\n     let edit = {\n@@ -24,62 +72,19 @@ fn postfix_snippet(ctx: &CompletionContext, label: &str, detail: &str, snippet:\n }\n \n fn is_bool_or_unknown(ty: Option<Ty>) -> bool {\n-    if let Some(ty) = ty {\n-        match ty {\n-            Ty::Apply(at) => match at.ctor {\n-                TypeCtor::Bool => true,\n-                _ => false,\n-            },\n-            Ty::Unknown => true,\n-            _ => false,\n-        }\n-    } else {\n-        true\n-    }\n-}\n-\n-pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n-    if let Some(dot_receiver) = &ctx.dot_receiver {\n-        let receiver_text = if ctx.dot_receiver_is_ambiguous_float_literal {\n-            let text = dot_receiver.syntax().text();\n-            let without_dot = ..text.len() - TextUnit::of_char('.');\n-            text.slice(without_dot).to_string()\n-        } else {\n-            dot_receiver.syntax().text().to_string()\n-        };\n-        let receiver_ty = ctx.analyzer.type_of(ctx.db, &dot_receiver);\n-        if is_bool_or_unknown(receiver_ty) {\n-            postfix_snippet(ctx, \"if\", \"if expr {}\", &format!(\"if {} {{$0}}\", receiver_text))\n-                .add_to(acc);\n-            postfix_snippet(\n-                ctx,\n-                \"while\",\n-                \"while expr {}\",\n-                &format!(\"while {} {{\\n$0\\n}}\", receiver_text),\n-            )\n-            .add_to(acc);\n-        }\n-        postfix_snippet(ctx, \"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n-        postfix_snippet(ctx, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text)).add_to(acc);\n-        postfix_snippet(ctx, \"refm\", \"&mut expr\", &format!(\"&mut {}\", receiver_text)).add_to(acc);\n-        postfix_snippet(\n-            ctx,\n-            \"match\",\n-            \"match expr {}\",\n-            &format!(\"match {} {{\\n    ${{1:_}} => {{$0\\\\}},\\n}}\", receiver_text),\n-        )\n-        .add_to(acc);\n-        postfix_snippet(ctx, \"dbg\", \"dbg!(expr)\", &format!(\"dbg!({})\", receiver_text)).add_to(acc);\n-        postfix_snippet(ctx, \"box\", \"Box::new(expr)\", &format!(\"Box::new({})\", receiver_text))\n-            .add_to(acc);\n+    match &ty {\n+        Some(Ty::Apply(app)) if app.ctor == TypeCtor::Bool => true,\n+        Some(Ty::Unknown) | None => true,\n+        Some(_) => false,\n     }\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n     use insta::assert_debug_snapshot;\n \n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n+\n     fn do_postfix_completion(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Postfix)\n     }"}]}