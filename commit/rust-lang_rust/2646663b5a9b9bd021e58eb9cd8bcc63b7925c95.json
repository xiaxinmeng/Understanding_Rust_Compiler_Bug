{"sha": "2646663b5a9b9bd021e58eb9cd8bcc63b7925c95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NDY2NjNiNWE5YjliZDAyMWU1OGViOWNkOGJjYzYzYjc5MjVjOTU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-03-25T17:17:04Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-03-30T20:23:48Z"}, "message": "Put in `-Z continue-parse-after-error`\n\nThis works by adding a boolean flag, `continue_after_error`, to\n`syntax::errors::Handler` that can be imperatively set to `true` or\n`false` via a new `fn set_continue_after_error`.\n\nThe flag starts off true (since we generally try to recover from\ncompiler errors, and `Handler` is shared across all phases).\n\nThen, during the `phase_1_parse_input`, we consult the setting of the\n`-Z continue-parse-after-error` debug flag to determine whether we\nshould leave the flag set to `true` or should change it to `false`.\n\n----\n\n(We might consider adding a debugflag to do such aborts in other\nplaces where we are currently attempting recovery, such as resolve,\nbut I think the parser is the really important case to handle in the\nface of #31994 and the parser bugs of varying degrees that were\ninjected by parse error recovery.)", "tree": {"sha": "072fa5018fa118c757a57653d74750f1fed56b8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072fa5018fa118c757a57653d74750f1fed56b8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2646663b5a9b9bd021e58eb9cd8bcc63b7925c95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2646663b5a9b9bd021e58eb9cd8bcc63b7925c95", "html_url": "https://github.com/rust-lang/rust/commit/2646663b5a9b9bd021e58eb9cd8bcc63b7925c95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2646663b5a9b9bd021e58eb9cd8bcc63b7925c95/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40deb279a87e640f799140e9f19b3e64623c30da", "url": "https://api.github.com/repos/rust-lang/rust/commits/40deb279a87e640f799140e9f19b3e64623c30da", "html_url": "https://github.com/rust-lang/rust/commit/40deb279a87e640f799140e9f19b3e64623c30da"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "ac0c18ea2b15fa6e54f06badc966b917ef9e902d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2646663b5a9b9bd021e58eb9cd8bcc63b7925c95/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2646663b5a9b9bd021e58eb9cd8bcc63b7925c95/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2646663b5a9b9bd021e58eb9cd8bcc63b7925c95", "patch": "@@ -138,6 +138,7 @@ pub struct Options {\n     pub no_trans: bool,\n     pub error_format: ErrorOutputType,\n     pub treat_err_as_bug: bool,\n+    pub continue_parse_after_error: bool,\n     pub mir_opt_level: usize,\n \n     /// if true, build up the dep-graph\n@@ -259,6 +260,7 @@ pub fn basic_options() -> Options {\n         parse_only: false,\n         no_trans: false,\n         treat_err_as_bug: false,\n+        continue_parse_after_error: false,\n         mir_opt_level: 1,\n         build_dep_graph: false,\n         dump_dep_graph: false,\n@@ -633,6 +635,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"run all passes except translation; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool,\n           \"treat all errors that occur as bugs\"),\n+    continue_parse_after_error: bool = (false, parse_bool,\n+          \"attempt to recover from parse errors (experimental)\"),\n     incr_comp: bool = (false, parse_bool,\n           \"enable incremental compilation (experimental)\"),\n     dump_dep_graph: bool = (false, parse_bool,\n@@ -1045,6 +1049,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let parse_only = debugging_opts.parse_only;\n     let no_trans = debugging_opts.no_trans;\n     let treat_err_as_bug = debugging_opts.treat_err_as_bug;\n+    let continue_parse_after_error = debugging_opts.continue_parse_after_error;\n     let mir_opt_level = debugging_opts.mir_opt_level.unwrap_or(1);\n     let incremental_compilation = debugging_opts.incr_comp;\n     let dump_dep_graph = debugging_opts.dump_dep_graph;\n@@ -1228,6 +1233,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         parse_only: parse_only,\n         no_trans: no_trans,\n         treat_err_as_bug: treat_err_as_bug,\n+        continue_parse_after_error: continue_parse_after_error,\n         mir_opt_level: mir_opt_level,\n         build_dep_graph: incremental_compilation || dump_dep_graph,\n         dump_dep_graph: dump_dep_graph,"}, {"sha": "55c46ae38713b6392c55c236e0859304465730c5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2646663b5a9b9bd021e58eb9cd8bcc63b7925c95/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2646663b5a9b9bd021e58eb9cd8bcc63b7925c95/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2646663b5a9b9bd021e58eb9cd8bcc63b7925c95", "patch": "@@ -427,6 +427,8 @@ pub fn phase_1_parse_input<'a>(sess: &'a Session,\n     // memory, but they do not restore the initial state.\n     syntax::ext::mtwt::reset_tables();\n     token::reset_ident_interner();\n+    let continue_after_error = sess.opts.continue_parse_after_error;\n+    sess.diagnostic().set_continue_after_error(continue_after_error);\n \n     let krate = time(sess.time_passes(), \"parsing\", || {\n         match *input {\n@@ -442,6 +444,8 @@ pub fn phase_1_parse_input<'a>(sess: &'a Session,\n         }\n     })?;\n \n+    sess.diagnostic().set_continue_after_error(true);\n+\n     if sess.opts.debugging_opts.ast_json_noexpand {\n         println!(\"{}\", json::as_json(&krate));\n     }"}, {"sha": "c8c12d5a883344b32cb999d66122c314cbb4957d", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2646663b5a9b9bd021e58eb9cd8bcc63b7925c95/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2646663b5a9b9bd021e58eb9cd8bcc63b7925c95/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=2646663b5a9b9bd021e58eb9cd8bcc63b7925c95", "patch": "@@ -370,6 +370,7 @@ pub struct Handler {\n     emit: RefCell<Box<Emitter>>,\n     pub can_emit_warnings: bool,\n     treat_err_as_bug: bool,\n+    continue_after_error: Cell<bool>,\n     delayed_span_bug: RefCell<Option<(MultiSpan, String)>>,\n }\n \n@@ -392,10 +393,15 @@ impl Handler {\n             emit: RefCell::new(e),\n             can_emit_warnings: can_emit_warnings,\n             treat_err_as_bug: treat_err_as_bug,\n+            continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n         }\n     }\n \n+    pub fn set_continue_after_error(&self, continue_after_error: bool) {\n+        self.continue_after_error.set(continue_after_error);\n+    }\n+\n     pub fn struct_dummy<'a>(&'a self) -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder::new(&self.emit, Level::Cancelled, \"\")\n     }\n@@ -612,6 +618,7 @@ impl Handler {\n                 lvl: Level) {\n         if lvl == Warning && !self.can_emit_warnings { return }\n         self.emit.borrow_mut().emit(msp, msg, None, lvl);\n+        if !self.continue_after_error.get() { self.abort_if_errors(); }\n     }\n     pub fn emit_with_code(&self,\n                           msp: Option<&MultiSpan>,\n@@ -620,10 +627,12 @@ impl Handler {\n                           lvl: Level) {\n         if lvl == Warning && !self.can_emit_warnings { return }\n         self.emit.borrow_mut().emit(msp, msg, Some(code), lvl);\n+        if !self.continue_after_error.get() { self.abort_if_errors(); }\n     }\n     pub fn custom_emit(&self, rsp: RenderSpan, msg: &str, lvl: Level) {\n         if lvl == Warning && !self.can_emit_warnings { return }\n         self.emit.borrow_mut().custom_emit(&rsp, msg, lvl);\n+        if !self.continue_after_error.get() { self.abort_if_errors(); }\n     }\n }\n "}]}