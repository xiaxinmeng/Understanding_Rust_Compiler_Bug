{"sha": "be799bc085f49bec37319d13b490de836d6b76e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNzk5YmMwODVmNDliZWMzNzMxOWQxM2I0OTBkZTgzNmQ2Yjc2ZTU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-11-19T23:13:08Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-11-19T23:13:08Z"}, "message": "Rustup to *rustc 1.15.0-nightly (ac635aa95 2016-11-18)*", "tree": {"sha": "fa9c478ea983cbbdc70f402ed47b968e344fa50e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa9c478ea983cbbdc70f402ed47b968e344fa50e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be799bc085f49bec37319d13b490de836d6b76e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJYMNyTAAoJEF5CfHlMukXoBJoP/idFRwYT5WPfQAjZp5joLTWh\nWCMjOxXvUIkNXjbecCPLGBhpcH9IapnMGyJf/SynJeGQozEnOZx73rjdKTKoe5RV\nyq1TktQoKbR22A7QWg+PuVkXS+nh6qMuzKKTtObooYm6nkIIDfAkKfOk45k9YUyT\n5ojbH9FL32EzWWmVzKh5s4vCdN1A/YH1es1fTfzwXCp5l5ChuYQUr6DOjFcjJ1KP\nQKC9d6YvWt7ZaWRVoWQm1jTLDjuUWsxUtrtRARSqqtM+RSGN0o585nK2RuvTQN3p\n3GuB4Qt3FHLKX/Pr/iFFNwzjPcnM9pV8HAIhGVAXQ+jBoelcABvAy++500Q3+cSd\n7RclxzOhEOc2dJ1KWeBnE8KvDkraTJD02JuDaHeVh94Iq2jBOMLwpDfxMrhWkMa7\nEbaqTGHJ00kdN5CKAcCpjPaH/hmATlcCsHOosojo8rr1CtNdzG9epc2HmFP3LRLb\nUUGyJ7KSl8aThGYQrZoW5yFazS9YzXWgE0ceVq4d7kOUYEzmxXx2CkiUDUGT3i2H\n4GQ0MjMsKs5gZzzgw/yVQQnwAqSiJkptWOCMIFvJJ1+7XT8SyCL1nLZpGue2vIsg\nsTg6lNFva+juYkizJ+HVxiIwxr011sLjegP8UfO88d9Y9Osc2NYgQUfWBg4vbsut\nuhrqyUBFS3w+Ltokl+0C\n=THG1\n-----END PGP SIGNATURE-----", "payload": "tree fa9c478ea983cbbdc70f402ed47b968e344fa50e\nparent 276e85b70068398a81e3ce0ab18dc6fe59004c7c\nauthor mcarton <cartonmartin+git@gmail.com> 1479597188 +0100\ncommitter mcarton <cartonmartin+git@gmail.com> 1479597188 +0100\n\nRustup to *rustc 1.15.0-nightly (ac635aa95 2016-11-18)*\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be799bc085f49bec37319d13b490de836d6b76e5", "html_url": "https://github.com/rust-lang/rust/commit/be799bc085f49bec37319d13b490de836d6b76e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be799bc085f49bec37319d13b490de836d6b76e5/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "276e85b70068398a81e3ce0ab18dc6fe59004c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/276e85b70068398a81e3ce0ab18dc6fe59004c7c", "html_url": "https://github.com/rust-lang/rust/commit/276e85b70068398a81e3ce0ab18dc6fe59004c7c"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "a6f4882358311c2cab27196535bde5b26d5e5e85", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/be799bc085f49bec37319d13b490de836d6b76e5/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be799bc085f49bec37319d13b490de836d6b76e5/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=be799bc085f49bec37319d13b490de836d6b76e5", "patch": "@@ -92,7 +92,11 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItem]) {\n     fn is_named_self(item: &TraitItem, name: &str) -> bool {\n         item.name.as_str() == name &&\n         if let MethodTraitItem(ref sig, _) = item.node {\n-            is_self_sig(sig)\n+            if sig.decl.has_self() {\n+                sig.decl.inputs.len() == 1\n+            } else {\n+                false\n+            }\n         } else {\n             false\n         }\n@@ -111,18 +115,22 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItem]) {\n     }\n }\n \n-fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItem]) {\n-    fn is_named_self(item: &ImplItem, name: &str) -> bool {\n+fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItemRef]) {\n+    fn is_named_self(cx: &LateContext, item: &ImplItemRef, name: &str) -> bool {\n         item.name.as_str() == name &&\n-        if let ImplItemKind::Method(ref sig, _) = item.node {\n-            is_self_sig(sig)\n+        if let AssociatedItemKind::Method { has_self } = item.kind {\n+            has_self && {\n+                let did = cx.tcx.map.local_def_id(item.id.node_id);\n+                let impl_ty = cx.tcx.item_type(did);\n+                impl_ty.fn_args().skip_binder().len() == 1\n+            }\n         } else {\n             false\n         }\n     }\n \n-    let is_empty = if let Some(is_empty) = impl_items.iter().find(|i| is_named_self(i, \"is_empty\")) {\n-        if cx.access_levels.is_exported(is_empty.id) {\n+    let is_empty = if let Some(is_empty) = impl_items.iter().find(|i| is_named_self(cx, i, \"is_empty\")) {\n+        if cx.access_levels.is_exported(is_empty.id.node_id) {\n             return;\n         } else {\n             \"a private\"\n@@ -131,8 +139,8 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItem]) {\n         \"no corresponding\"\n     };\n \n-    if let Some(i) = impl_items.iter().find(|i| is_named_self(i, \"len\")) {\n-        if cx.access_levels.is_exported(i.id) {\n+    if let Some(i) = impl_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n+        if cx.access_levels.is_exported(i.id.node_id) {\n             let def_id = cx.tcx.map.local_def_id(item.id);\n             let ty = cx.tcx.item_type(def_id);\n \n@@ -146,14 +154,6 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItem]) {\n     }\n }\n \n-fn is_self_sig(sig: &MethodSig) -> bool {\n-    if sig.decl.has_self() {\n-        sig.decl.inputs.len() == 1\n-    } else {\n-        false\n-    }\n-}\n-\n fn check_cmp(cx: &LateContext, span: Span, left: &Expr, right: &Expr, op: &str) {\n     // check if we are in an is_empty() method\n     if let Some(name) = get_item_name(cx, left) {"}]}