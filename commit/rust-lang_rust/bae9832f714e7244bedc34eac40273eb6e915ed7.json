{"sha": "bae9832f714e7244bedc34eac40273eb6e915ed7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZTk4MzJmNzE0ZTcyNDRiZWRjMzRlYWM0MDI3M2ViNmU5MTVlZDc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-12T15:36:20Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-12T15:36:20Z"}, "message": "Add test for issue-40231", "tree": {"sha": "8dbdcac043e7790888902a583fc349b9ae9be5df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dbdcac043e7790888902a583fc349b9ae9be5df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae9832f714e7244bedc34eac40273eb6e915ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae9832f714e7244bedc34eac40273eb6e915ed7", "html_url": "https://github.com/rust-lang/rust/commit/bae9832f714e7244bedc34eac40273eb6e915ed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae9832f714e7244bedc34eac40273eb6e915ed7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec45882b42a07303ae3682898124ee8ae035baba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec45882b42a07303ae3682898124ee8ae035baba", "html_url": "https://github.com/rust-lang/rust/commit/ec45882b42a07303ae3682898124ee8ae035baba"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "999399ec8d34c6bed4c93fcedc6bf399cf86cf9f", "filename": "src/test/ui/issues/issue-40231-1.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bae9832f714e7244bedc34eac40273eb6e915ed7/src%2Ftest%2Fui%2Fissues%2Fissue-40231-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae9832f714e7244bedc34eac40273eb6e915ed7/src%2Ftest%2Fui%2Fissues%2Fissue-40231-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40231-1.rs?ref=bae9832f714e7244bedc34eac40273eb6e915ed7", "patch": "@@ -0,0 +1,54 @@\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+trait Structure<E>: Sized where E: Encoding {\n+    type RefTarget: ?Sized;\n+    type FfiPtr;\n+    unsafe fn borrow_from_ffi_ptr<'a>(ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget>;\n+}\n+\n+enum Slice {}\n+\n+impl<E> Structure<E> for Slice where E: Encoding {\n+    type RefTarget = [E::Unit];\n+    type FfiPtr = (*const E::FfiUnit, usize);\n+    unsafe fn borrow_from_ffi_ptr<'a>(_ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget> {\n+        panic!()\n+    }\n+}\n+\n+trait Encoding {\n+    type Unit: Unit;\n+    type FfiUnit;\n+}\n+\n+trait Unit {}\n+\n+enum Utf16 {}\n+\n+impl Encoding for Utf16 {\n+    type Unit = Utf16Unit;\n+    type FfiUnit = u16;\n+}\n+\n+struct Utf16Unit(pub u16);\n+\n+impl Unit for Utf16Unit {}\n+\n+type SUtf16Str = SeStr<Slice, Utf16>;\n+\n+struct SeStr<S, E> where S: Structure<E>, E: Encoding {\n+    _data: S::RefTarget,\n+}\n+\n+impl<S, E> SeStr<S, E> where S: Structure<E>, E: Encoding {\n+    pub unsafe fn from_ptr<'a>(_ptr: S::FfiPtr) -> Option<&'a Self> {\n+        panic!()\n+    }\n+}\n+\n+fn main() {\n+    const TEXT_U16: &'static [u16] = &[];\n+    let _ = unsafe { SUtf16Str::from_ptr((TEXT_U16.as_ptr(), TEXT_U16.len())).unwrap() };\n+}"}, {"sha": "780433b28c5964951ee043701d842a1607d76284", "filename": "src/test/ui/issues/issue-40231-2.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bae9832f714e7244bedc34eac40273eb6e915ed7/src%2Ftest%2Fui%2Fissues%2Fissue-40231-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae9832f714e7244bedc34eac40273eb6e915ed7/src%2Ftest%2Fui%2Fissues%2Fissue-40231-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40231-2.rs?ref=bae9832f714e7244bedc34eac40273eb6e915ed7", "patch": "@@ -0,0 +1,54 @@\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+trait Structure<E>: Sized where E: Encoding {\n+    type RefTarget: ?Sized;\n+    type FfiPtr;\n+    unsafe fn borrow_from_ffi_ptr<'a>(ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget>;\n+}\n+\n+enum Slice {}\n+\n+impl<E> Structure<E> for Slice where E: Encoding {\n+    type RefTarget = [E::Unit];\n+    type FfiPtr = (*const E::FfiUnit, usize);\n+    unsafe fn borrow_from_ffi_ptr<'a>(_ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget> {\n+        panic!()\n+    }\n+}\n+\n+trait Encoding {\n+    type Unit: Unit;\n+    type FfiUnit;\n+}\n+\n+trait Unit {}\n+\n+enum Utf16 {}\n+\n+impl Encoding for Utf16 {\n+    type Unit = Utf16Unit;\n+    type FfiUnit = u16;\n+}\n+\n+struct Utf16Unit(pub u16);\n+\n+impl Unit for Utf16Unit {}\n+\n+struct SUtf16Str {\n+    _data: <Slice as Structure<Utf16>>::RefTarget,\n+}\n+\n+impl SUtf16Str {\n+    pub unsafe fn from_ptr<'a>(ptr: <Slice as Structure<Utf16>>::FfiPtr)\n+    -> Option<&'a Self> {\n+        std::mem::transmute::<Option<&[<Utf16 as Encoding>::Unit]>, _>(\n+            <Slice as Structure<Utf16>>::borrow_from_ffi_ptr(ptr))\n+    }\n+}\n+\n+fn main() {\n+    const TEXT_U16: &'static [u16] = &[];\n+    let _ = unsafe { SUtf16Str::from_ptr((TEXT_U16.as_ptr(), TEXT_U16.len())).unwrap() };\n+}"}]}