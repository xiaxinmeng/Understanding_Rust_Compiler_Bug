{"sha": "1b97cd338b5d425b24e821e815d84005e38b390a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOTdjZDMzOGI1ZDQyNWIyNGU4MjFlODE1ZDg0MDA1ZTM4YjM5MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-15T15:33:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-15T15:33:11Z"}, "message": "auto merge of #19785 : brson/rust/rollup, r=brson", "tree": {"sha": "28aadb0b5d2e8982efd923532534f6c65d1583fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28aadb0b5d2e8982efd923532534f6c65d1583fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b97cd338b5d425b24e821e815d84005e38b390a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b97cd338b5d425b24e821e815d84005e38b390a", "html_url": "https://github.com/rust-lang/rust/commit/1b97cd338b5d425b24e821e815d84005e38b390a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b97cd338b5d425b24e821e815d84005e38b390a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0bc464af110d24d4663fbe51eca3646a897308", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0bc464af110d24d4663fbe51eca3646a897308", "html_url": "https://github.com/rust-lang/rust/commit/ef0bc464af110d24d4663fbe51eca3646a897308"}, {"sha": "1cb7e9fc638e1addbc3645f202ea89a42662812b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb7e9fc638e1addbc3645f202ea89a42662812b", "html_url": "https://github.com/rust-lang/rust/commit/1cb7e9fc638e1addbc3645f202ea89a42662812b"}], "stats": {"total": 352, "additions": 205, "deletions": 147}, "files": [{"sha": "f14009b46543326624895afea3172efa739be666", "filename": "configure", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/configure", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -988,8 +988,7 @@ do\n     make_dir $t/rt/jemalloc\n     for i in                                          \\\n       isaac sync test \\\n-      arch/i386 arch/x86_64 arch/arm arch/mips  \\\n-      sundown/src sundown/html\n+      arch/i386 arch/x86_64 arch/arm arch/mips\n     do\n       make_dir $t/rt/stage$s/$i\n     done"}, {"sha": "39b1c4d4d59aee1298d99fc68a98fd8a22986a2d", "filename": "mk/ctags.mk", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/mk%2Fctags.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/mk%2Fctags.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fctags.mk?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -16,7 +16,7 @@\n .PHONY: TAGS.emacs TAGS.vi\n \n # This is using a blacklist approach, probably more durable than a whitelist.\n-# We exclude: external dependencies (llvm, rt/{msvc,sundown,vg}),\n+# We exclude: external dependencies (llvm, rt/{msvc,vg}),\n # tests (compiletest, test) and a couple of other things (rt/arch, etc)\n CTAGS_LOCATIONS=$(patsubst ${CFG_SRC_DIR}src/llvm,, \\\n \t\t\t\t$(patsubst ${CFG_SRC_DIR}src/compiletest,, \\\n@@ -25,7 +25,6 @@ CTAGS_LOCATIONS=$(patsubst ${CFG_SRC_DIR}src/llvm,, \\\n \t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt,, \\\n \t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/arch,, \\\n \t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/msvc,, \\\n-\t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/sundown,, \\\n \t\t\t\t$(patsubst ${CFG_SRC_DIR}src/rt/vg,, \\\n \t\t\t\t$(wildcard ${CFG_SRC_DIR}src/*) $(wildcard ${CFG_SRC_DIR}src/rt/*) \\\n \t\t\t\t)))))))))"}, {"sha": "22d17a9d6fe7da07b234f91627d41aae1e7e3211", "filename": "src/doc/complement-bugreport.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fcomplement-bugreport.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fcomplement-bugreport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-bugreport.md?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -37,7 +37,7 @@ It's also helpful to provide the exact version and host by copying the output of\n re-running the erroneous rustc command with the `--version=verbose` flag, which will\n produce something like this:\n \n-```{ignore}\n+```text\n rustc 0.12.0 (ba4081a5a 2014-10-07 13:44:41 -0700)\n binary: rustc\n commit-hash: ba4081a5a8573875fed17545846f6f6902c8ba8d\n@@ -46,8 +46,13 @@ host: i686-apple-darwin\n release: 0.12.0\n ```\n \n-Finally, if you can run the offending command under gdb, pasting a stack trace can be\n-useful; to do so, you will need to set a breakpoint on `rust_panic`.\n+Finally, if you can also provide a backtrace, that'd be great. You can get a\n+backtrace by setting the `RUST_BACKTRACE` environment variable to `1`, like\n+this: \n+\n+```bash\n+$ RUST_BACKTRACE=1 rustc ...\n+```\n \n # I submitted a bug, but nobody has commented on it!\n "}, {"sha": "ba825c2c9a8008e6ea22cda292cd213269ca0d0f", "filename": "src/doc/guide-crates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fguide-crates.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fguide-crates.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-crates.md?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -452,7 +452,7 @@ fn main() {\n \n Rust will give us a compile-time error:\n \n-```{notrust}\n+```text\n    Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n /home/you/projects/phrases/src/main.rs:4:5: 4:40 error: a value named `hello` has already been imported in this module\n /home/you/projects/phrases/src/main.rs:4 use phrases::japanese::greetings::hello;"}, {"sha": "d833827981e277ffd2f1205bbf01b7230ebc6cfb", "filename": "src/doc/guide-error-handling.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fguide-error-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fguide-error-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-error-handling.md?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -76,7 +76,7 @@ fn main() {\n \n This will give us an error:\n \n-```{notrust}\n+```text\n error: non-exhaustive patterns: `_` not covered [E0004]\n ```\n \n@@ -189,7 +189,7 @@ panic!(\"boom\");\n \n gives\n \n-```{notrust}\n+```text\n task '<main>' panicked at 'boom', hello.rs:2\n ```\n "}, {"sha": "ddabb1de76551a6498a7629ccee767fc2996fac2", "filename": "src/doc/guide-ownership.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fguide-ownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fguide-ownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ownership.md?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -130,7 +130,7 @@ fn add_one(mut num: Box<int>) {\n \n This does not compile, and gives us an error:\n \n-```{notrust}\n+```text\n error: use of moved value: `x`\n    println!(\"{}\", x);\n                   ^\n@@ -208,7 +208,7 @@ the function is over, and `num` goes out of scope, the borrow is over.\n Lending out a reference to a resource that someone else owns can be\n complicated, however. For example, imagine this set of operations:\n \n-1. I aquire a handle to some kind of resource.\n+1. I acquire a handle to some kind of resource.\n 2. I lend you a reference to the resource.\n 3. I decide I'm done with the resource, and deallocate it, while you still have\n    your reference.\n@@ -406,7 +406,7 @@ fn main() {\n We try to make four `Wheel`s, each with a `Car` that it's attached to. But the\n compiler knows that on the second iteration of the loop, there's a problem:\n \n-```{notrust}\n+```text\n error: use of moved value: `car`\n     Wheel { size: 360, owner: car };\n                               ^~~"}, {"sha": "678e817e2ebbe06b751610278775c2b2aeae0d1b", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -84,7 +84,7 @@ println!(\"{}\", x + z);\n \n This gives us an error:\n \n-```{notrust}\n+```text\n hello.rs:6:24: 6:25 error: mismatched types: expected `int` but found `&int` (expected int but found &-ptr)\n hello.rs:6     println!(\"{}\", x + z);\n                                   ^\n@@ -132,7 +132,7 @@ Pointers are useful in languages that are pass-by-value, rather than\n pass-by-reference. Basically, languages can make two choices (this is made\n up syntax, it's not Rust):\n \n-```{ignore}\n+```text\n func foo(x) {\n     x = 5\n }\n@@ -152,7 +152,7 @@ and therefore, can change its value. At the comment, `i` will be `5`.\n So what do pointers have to do with this? Well, since pointers point to a\n location in memory...\n \n-```{ignore}\n+```text\n func foo(&int x) {\n     *x = 5\n }\n@@ -191,7 +191,7 @@ knows. This might be harmless, and it might be catastrophic.\n When you combine pointers and functions, it's easy to accidentally invalidate\n the memory the pointer is pointing to. For example:\n \n-```{ignore}\n+```text\n func make_pointer(): &int {\n     x = 5;\n \n@@ -213,7 +213,7 @@ As one last example of a big problem with pointers, **aliasing** can be an\n issue. Two pointers are said to alias when they point at the same location\n in memory. Like this:\n \n-```{ignore}\n+```text\n func mutate(&int i, int j) {\n     *i = j;\n }\n@@ -398,7 +398,7 @@ fn main() {\n \n It gives this error:\n \n-```{notrust}\n+```text\n test.rs:5:8: 5:10 error: cannot assign to `*x` because it is borrowed\n test.rs:5         *x -= 1;\n                   ^~\n@@ -522,7 +522,7 @@ boxes, though. As a rough approximation, you can treat this Rust code:\n \n As being similar to this C code:\n \n-```{ignore}\n+```c\n {\n     int *x;\n     x = (int *)malloc(sizeof(int));\n@@ -626,7 +626,7 @@ fn main() {\n \n This prints:\n \n-```{ignore}\n+```text\n Cons(1, box Cons(2, box Cons(3, box Nil)))\n ```\n "}, {"sha": "a6bec84a60666885cacb2e71de0f0dc62e4d19fe", "filename": "src/doc/guide.md", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -22,7 +22,7 @@ install Rust, but the easiest is to use the `rustup` script. If you're on\n Linux or a Mac, all you need to do is this (note that you don't need to type\n in the `$`s, they just indicate the start of each command):\n \n-```{ignore}\n+```bash\n $ curl -s https://static.rust-lang.org/rustup.sh | sudo sh\n ```\n \n@@ -39,7 +39,7 @@ If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.\n Not every programming language is great for everyone. Just pass an argument to\n the script:\n \n-```{ignore}\n+```bash\n $ curl -s https://static.rust-lang.org/rustup.sh | sudo sh -s -- --uninstall\n ```\n \n@@ -78,13 +78,13 @@ commit is tested against Windows just like any other platform.\n \n If you've got Rust installed, you can open up a shell, and type this:\n \n-```{ignore}\n+```bash\n $ rustc --version\n ```\n \n You should see some output that looks something like this:\n \n-```{ignore}\n+```bash\n rustc 0.12.0-nightly (b7aa03a3c 2014-09-28 11:38:01 +0000)\n ```\n \n@@ -310,7 +310,7 @@ Make sure to get this name right: you need the capital `C`!\n \n Put this inside:\n \n-```{ignore}\n+```toml\n [package]\n \n name = \"hello_world\"\n@@ -355,7 +355,7 @@ just `cargo build` and it'll work the right way.\n \n You'll also notice that Cargo has created a new file: `Cargo.lock`.\n \n-```{ignore}\n+```toml\n [root]\n name = \"hello_world\"\n version = \"0.0.1\"\n@@ -426,7 +426,7 @@ x = 10i;\n \n It will give you this error:\n \n-```{notrust}\n+```text\n error: re-assignment of immutable variable `x`\n      x = 10i;\n      ^~~~~~~\n@@ -461,7 +461,7 @@ let x;\n \n ...we'll get an error:\n \n-```{ignore}\n+```text\n src/main.rs:2:9: 2:10 error: cannot determine a type for this local variable: unconstrained type\n src/main.rs:2     let x;\n                       ^\n@@ -486,7 +486,7 @@ fn main() {\n You can use `cargo build` on the command line to build it. You'll get a warning,\n but it will still print \"Hello, world!\":\n \n-```{notrust}\n+```text\n    Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)\n src/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variable)] on by default\n src/main.rs:2     let x: int;\n@@ -664,7 +664,7 @@ let y: int = if x == 5i { 10i; } else { 15i; };\n \n Note the semicolons after the 10 and 15. Rust will give us the following error:\n \n-```{notrust}\n+```text\n error: mismatched types: expected `int` but found `()` (expected int but found ())\n ```\n \n@@ -747,7 +747,7 @@ fn print_number(x, y) {\n \n You get this error:\n \n-```{notrust}\n+```text\n hello.rs:5:18: 5:19 error: expected `:` but found `,`\n hello.rs:5 fn print_number(x, y) {\n ```\n@@ -779,7 +779,7 @@ fn add_one(x: int) -> int {\n \n We would get an error:\n \n-```{ignore}\n+```text\n error: not all control paths return a value\n fn add_one(x: int) -> int {\n      x + 1;\n@@ -1246,7 +1246,7 @@ So what's the big advantage here? Well, there are a few. First of all, `match`\n enforces 'exhaustiveness checking.' Do you see that last arm, the one with the\n underscore (`_`)? If we remove that arm, Rust will give us an error:\n \n-```{notrust}\n+```text\n error: non-exhaustive patterns: `_` not covered\n ```\n \n@@ -1864,7 +1864,7 @@ since we're making a binary, rather than a library.\n \n Check out the generated `Cargo.toml`:\n \n-```{ignore}\n+```toml\n [package]\n \n name = \"guessing_game\"\n@@ -1898,7 +1898,7 @@ Before we move on, let me show you one more Cargo command: `run`. `cargo run`\n is kind of like `cargo build`, but it also then runs the produced executable.\n Try it out:\n \n-```{notrust}\n+```bash\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -1996,7 +1996,7 @@ for this example, it is not important.\n \n Let's try to compile this using `cargo build`:\n \n-```{notrust}\n+```bash\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:7:26: 7:34 error: the type of this value must be known in this context\n@@ -2044,7 +2044,7 @@ fn main() {\n \n Try running our new program a few times:\n \n-```{notrust}\n+```bash\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2097,7 +2097,7 @@ fn main() {\n \n And trying it out:\n \n-```{notrust}\n+```bash\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2152,7 +2152,7 @@ fn cmp(a: int, b: int) -> Ordering {\n \n If we try to compile, we'll get some errors:\n \n-```{notrust}\n+```bash\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:20:15: 20:20 error: mismatched types: expected `int` but found `collections::string::String` (expected int but found struct collections::string::String)\n@@ -2206,7 +2206,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n And try compiling again:\n \n-```{notrust}\n+```bash\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:20:15: 20:20 error: mismatched types: expected `uint` but found `collections::string::String` (expected uint but found struct collections::string::String)\n@@ -2219,7 +2219,7 @@ This error is similar to the last one: we expected to get a `uint`, but we got\n a `String` instead! That's because our `input` variable is coming from the\n standard input, and you can guess anything. Try it:\n \n-```{notrust}\n+```bash\n $ ./target/guessing_game\n Guess the number!\n The secret number is: 73\n@@ -2303,7 +2303,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n Let's try it out!\n \n-```{notrust}\n+```bash\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:22:15: 22:24 error: mismatched types: expected `uint` but found `core::option::Option<uint>` (expected uint but found enum core::option::Option)\n@@ -2362,7 +2362,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n We use a `match` to either give us the `uint` inside of the `Option`, or we\n print an error message and return. Let's give this a shot:\n \n-```{notrust}\n+```bash\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2427,7 +2427,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n Let's try it!\n \n-```{notrust}\n+```bash\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2504,7 +2504,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n And try it out. But wait, didn't we just add an infinite loop? Yup. Remember\n that `return`? If we give a non-number answer, we'll `return` and quit. Observe:\n \n-```{notrust}\n+```bash\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2636,7 +2636,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n Now we should be good! Let's try:\n \n-```{notrust}\n+```bash\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2814,7 +2814,7 @@ mod hello {\n \n It gives an error:\n \n-```{notrust}\n+```bash\n    Compiling modules v0.0.1 (file:///home/you/projects/modules)\n src/main.rs:2:5: 2:23 error: function `print_hello` is private\n src/main.rs:2     hello::print_hello();\n@@ -2838,7 +2838,7 @@ mod hello {\n Usage of the `pub` keyword is sometimes called 'exporting', because\n we're making the function available for other modules. This will work:\n \n-```{notrust}\n+```bash\n $ cargo run\n    Compiling modules v0.0.1 (file:///home/you/projects/modules)\n      Running `target/modules`\n@@ -2972,7 +2972,7 @@ $ cd testing\n \n And try it out:\n \n-```{notrust}\n+```bash\n $ cargo run\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running `target/testing`\n@@ -3004,7 +3004,7 @@ you give them descriptive names. You'll see why in a moment. We then use a\n macro, `assert!`, to assert that something is true. In this case, we're giving\n it `false`, so this test should fail. Let's try it!\n \n-```{notrust}\n+```bash\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n /home/you/projects/testing/src/main.rs:1:1: 3:2 warning: function is never used: `main`, #[warn(dead_code)] on by default\n@@ -3033,15 +3033,15 @@ task '<main>' failed at 'Some tests failed', /home/you/src/rust/src/libtest/lib.\n \n Lots of output! Let's break this down:\n \n-```{ignore}\n+```bash\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n ```\n \n You can run all of your tests with `cargo test`. This runs both your tests in\n `tests`, as well as the tests you put inside of your crate.\n \n-```{notrust}\n+```text\n /home/you/projects/testing/src/main.rs:1:1: 3:2 warning: function is never used: `main`, #[warn(dead_code)] on by default\n /home/you/projects/testing/src/main.rs:1 fn main() {\n /home/you/projects/testing/src/main.rs:2     println!(\"Hello, world!\")\n@@ -3055,7 +3055,7 @@ case, Rust is warning us that we've written some code that's never used: our\n We'll turn this lint off for just this function soon. For now, just ignore this\n output.\n \n-```{ignore}\n+```text\n      Running target/lib-654ce120f310a3a5\n \n running 1 test\n@@ -3067,7 +3067,7 @@ with good names? This is why. Here, it says 'test foo' because we called our\n test 'foo.' If we had given it a good name, it'd be more clear which test\n failed, especially as we accumulate more tests.\n \n-```{notrust}\n+```text\n failures:\n \n ---- foo stdout ----\n@@ -3098,7 +3098,7 @@ fn foo() {\n \n And then try to run our tests again:\n \n-```{ignore}\n+```bash\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running target/lib-654ce120f310a3a5\n@@ -3138,7 +3138,7 @@ include `main` when it's _not_ true. So we use `not` to negate things:\n With this attribute we won't get the warning (even\n though `src/main.rs` gets recompiled this time):\n \n-```{ignore}\n+```bash\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running target/lib-654ce120f310a3a5\n@@ -3169,7 +3169,7 @@ fn math_checks_out() {\n \n And try to run the test:\n \n-```{notrust}\n+```bash\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n /home/you/projects/testing/tests/lib.rs:3:18: 3:38 error: unresolved name `add_three_times_four`.\n@@ -3229,7 +3229,7 @@ fn math_checks_out() {\n \n Let's give it a run:\n \n-```{ignore}\n+```bash\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running target/lib-654ce120f310a3a5\n@@ -3278,7 +3278,7 @@ fn times_four(x: int) -> int { x * 4 }\n \n If you run `cargo test`, you should get the same output:\n \n-```{ignore}\n+```bash\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running target/lib-654ce120f310a3a5\n@@ -3332,7 +3332,7 @@ fn test_add_three() {\n \n We'd get this error:\n \n-```{notrust}\n+```text\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n /home/you/projects/testing/tests/lib.rs:3:5: 3:24 error: function `add_three` is private\n /home/you/projects/testing/tests/lib.rs:3 use testing::add_three;\n@@ -3374,7 +3374,7 @@ mod test {\n \n Let's give it a shot:\n \n-```{ignore}\n+```bash\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running target/lib-654ce120f310a3a5\n@@ -3504,7 +3504,7 @@ let y = &mut x;\n \n Rust will complain:\n \n-```{notrust}\n+```text\n error: cannot borrow immutable local variable `x` as mutable\n  let y = &mut x;\n               ^\n@@ -3531,7 +3531,7 @@ let z = &mut x;\n \n It gives us this error:\n \n-```{notrust}\n+```text\n error: cannot borrow `x` as mutable more than once at a time\n      let z = &mut x;\n                   ^\n@@ -3677,7 +3677,7 @@ let z = &mut x;\n \n The error:\n \n-```{notrust}\n+```text\n error: cannot borrow `x` as mutable more than once at a time\n      let z = &mut x;\n                   ^\n@@ -3695,7 +3695,7 @@ note: previous borrow ends here\n \n This error comes in three parts. Let's go over each in turn.\n \n-```{notrust}\n+```text\n error: cannot borrow `x` as mutable more than once at a time\n      let z = &mut x;\n                   ^\n@@ -3704,7 +3704,7 @@ error: cannot borrow `x` as mutable more than once at a time\n This error states the restriction: you cannot lend out something mutable more\n than once at the same time. The borrow checker knows the rules!\n \n-```{notrust}\n+```text\n note: previous borrow of `x` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `x` until the borrow ends\n      let y = &mut x;\n                   ^\n@@ -3716,7 +3716,7 @@ the first mutable borrow occurred. The error showed us the second. So now we\n see both parts of the problem. It also alludes to rule #3, by reminding us that\n we can't change `x` until the borrow is over.\n \n-```{ignore}\n+```text\n note: previous borrow ends here\n  fn main() {\n      let mut x = 5i;\n@@ -3819,7 +3819,7 @@ let y = &mut x;\n \n This gives us this error:\n \n-```{notrust}\n+```text\n error: cannot use `*x` because it was mutably borrowed\n  *x;\n  ^~\n@@ -4624,7 +4624,7 @@ element reference has the closure it's been given as an argument called on it.\n So this would give us the numbers from `2-100`. Well, almost! If you\n compile the example, you'll get a warning:\n \n-```{ignore}\n+```text\n warning: unused result which must be used: iterator adaptors are lazy and\n          do nothing unless consumed, #[warn(unused_must_use)] on by default\n  range(1i, 100i).map(|x| x + 1i);\n@@ -4654,7 +4654,7 @@ for i in std::iter::count(1i, 5i).take(5) {\n \n This will print\n \n-```{ignore}\n+```text\n 1\n 6\n 11\n@@ -4867,7 +4867,7 @@ We can then use `T` inside the rest of the signature: `x` has type `T`, and half\n of the `Result` has type `T`. However, if we try to compile that example, we'll get\n an error:\n \n-```{notrust}\n+```text\n error: binary operation `==` cannot be applied to type `T`\n ```\n \n@@ -4923,7 +4923,7 @@ we use `impl Trait for Item`, rather than just `impl Item`.\n So what's the big deal? Remember the error we were getting with our generic\n `inverse` function?\n \n-```{notrust}\n+```text\n error: binary operation `==` cannot be applied to type `T`\n ```\n \n@@ -4938,7 +4938,7 @@ fn print_area<T>(shape: T) {\n \n Rust complains:\n \n-```{notrust}\n+```text\n error: type `T` does not implement any method in scope named `area`\n ```\n \n@@ -5014,7 +5014,7 @@ fn main() {\n \n This program outputs:\n \n-```{ignore}\n+```text\n This shape has an area of 3.141593\n This shape has an area of 1\n ```\n@@ -5028,7 +5028,7 @@ print_area(5i);\n \n We get a compile-time error:\n \n-```{ignore}\n+```text\n error: failed to find an implementation of trait main::HasArea for int\n ```\n \n@@ -5095,7 +5095,7 @@ fn main() {\n Now that we've moved the structs and traits into their own module, we get an\n error:\n \n-```{notrust}\n+```text\n error: type `shapes::Circle` does not implement any method in scope named `area`\n ```\n "}, {"sha": "880dd6e2d6c3f4fe8fe3e57fe34005e6f5246cff", "filename": "src/doc/intro.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -155,13 +155,13 @@ when you have unrestricted access to memory. As an example, here's some Ruby\n code:\n \n ```{ruby}\n-v = [];\n+v = []\n \n-v.push(\"Hello\");\n+v.push(\"Hello\")\n \n-x = v[0];\n+x = v[0]\n \n-v.push(\"world\");\n+v.push(\"world\")\n \n puts x\n ```\n@@ -313,7 +313,7 @@ print `\"Hello\"`, or does Rust crash?\n \n Neither. It refuses to compile:\n \n-```{notrust}\n+```bash\n $ cargo run\n    Compiling hello_world v0.0.1 (file:///Users/you/src/hello_world)\n main.rs:8:5: 8:6 error: cannot borrow `v` as mutable because it is also borrowed as immutable\n@@ -431,7 +431,7 @@ fn main() {\n \n It gives us this error:\n \n-```{notrust}\n+```text\n 6:71 error: capture of moved value: `numbers`\n     for j in range(0, 3) { numbers[j] += 1 }\n                ^~~~~~~"}, {"sha": "80f8b748814cb3955c7449862bd62e15deade9b1", "filename": "src/doc/po4a.conf", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fpo4a.conf", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Fpo4a.conf", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo4a.conf?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -26,4 +26,3 @@\n [type: text] src/doc/intro.md $lang:doc/l10n/$lang/intro.md\n [type: text] src/doc/rust.md $lang:doc/l10n/$lang/rust.md\n [type: text] src/doc/rustdoc.md $lang:doc/l10n/$lang/rustdoc.md\n-[type: text] src/doc/guide.md $lang:doc/l10n/$lang/guide.md"}, {"sha": "3d4791e916e6a4a987826a16f971b37f9d20bcb0", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -1317,10 +1317,10 @@ let fptr: extern \"C\" fn() -> int = new_int;\n Extern functions may be called directly from Rust code as Rust uses large,\n contiguous stack segments like C.\n \n-### Type definitions\n+### Type aliases\n \n-A _type definition_ defines a new name for an existing [type](#types). Type\n-definitions are declared with the keyword `type`. Every value has a single,\n+A _type alias_ defines a new name for an existing [type](#types). Type\n+aliases are declared with the keyword `type`. Every value has a single,\n specific type; the type-specified aspects of a value include:\n \n * Whether the value is composed of sub-values or is indivisible.\n@@ -2548,10 +2548,6 @@ The currently implemented features of the reference compiler are:\n * `default_type_params` - Allows use of default type parameters. The future of\n                           this feature is uncertain.\n \n-* `if_let` - Allows use of the `if let` syntax.\n-\n-* `while_let` - Allows use of the `while let` syntax.\n-\n * `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n                  are inherently unstable and no promise about them is made.\n \n@@ -2638,8 +2634,6 @@ The currently implemented features of the reference compiler are:\n                         which is considered wildly unsafe and will be\n                         obsoleted by language improvements.\n \n-* `tuple_indexing` - Allows use of tuple indexing (expressions like `expr.0`)\n-\n * `associated_types` - Allows type aliases in traits. Experimental.\n \n If a feature is promoted to a language feature, then all existing programs will"}, {"sha": "373e9f78cc2952c7ecff4fd86496942061f9e06c", "filename": "src/etc/gedit/share/gtksourceview-3.0/language-specs/rust.lang", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -270,6 +270,7 @@\n       '|\"|\n       \\\\|n|r|t|0|\n       x\\%{hex_digit}{2}|\n+      u{\\%{hex_digit}{1,6}}|\n       u\\%{hex_digit}{4}|\n       U\\%{hex_digit}{8}\n     </define-regex>"}, {"sha": "9e663eb0317efcb47352dae8fb93f38ef8ec51f5", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -90,7 +90,7 @@ syn keyword rustTrait Clone\n syn keyword rustTrait PartialEq PartialOrd Eq Ord\n syn keyword rustEnum Ordering Equiv\n syn keyword rustEnumVariant Less Equal Greater\n-syn keyword rustTrait FromIterator Extend ExactSize\n+syn keyword rustTrait FromIterator Extend ExactSizeIterator\n syn keyword rustTrait Iterator DoubleEndedIterator\n syn keyword rustTrait RandomAccessIterator CloneableIterator\n syn keyword rustTrait OrdIterator MutableDoubleEndedIterator\n@@ -151,6 +151,7 @@ syn match     rustMacro       '#\\w\\(\\w\\)*' contains=rustAssert,rustPanic\n syn match     rustEscapeError   display contained /\\\\./\n syn match     rustEscape        display contained /\\\\\\([nrt0\\\\'\"]\\|x\\x\\{2}\\)/\n syn match     rustEscapeUnicode display contained /\\\\\\(u\\x\\{4}\\|U\\x\\{8}\\)/\n+syn match     rustEscapeUnicode display contained /\\\\u{\\x\\{1,6}}/\n syn match     rustStringContinuation display contained /\\\\\\n\\s*/\n syn region    rustString      start=+b\"+ skip=+\\\\\\\\\\|\\\\\"+ end=+\"+ contains=rustEscape,rustEscapeError,rustStringContinuation\n syn region    rustString      start=+\"+ skip=+\\\\\\\\\\|\\\\\"+ end=+\"+ contains=rustEscape,rustEscapeUnicode,rustEscapeError,rustStringContinuation,@Spell\n@@ -187,7 +188,7 @@ syn match   rustCharacterInvalid   display contained /b\\?'\\zs[\\n\\r\\t']\\ze'/\n \" The groups negated here add up to 0-255 but nothing else (they do not seem to go beyond ASCII).\n syn match   rustCharacterInvalidUnicode   display contained /b'\\zs[^[:cntrl:][:graph:][:alnum:][:space:]]\\ze'/\n syn match   rustCharacter   /b'\\([^\\\\]\\|\\\\\\(.\\|x\\x\\{2}\\)\\)'/ contains=rustEscape,rustEscapeError,rustCharacterInvalid,rustCharacterInvalidUnicode\n-syn match   rustCharacter   /'\\([^\\\\]\\|\\\\\\(.\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)\\)'/ contains=rustEscape,rustEscapeUnicode,rustEscapeError,rustCharacterInvalid\n+syn match   rustCharacter   /'\\([^\\\\]\\|\\\\\\(.\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\|u{\\x\\{1,6}}\\)\\)'/ contains=rustEscape,rustEscapeUnicode,rustEscapeError,rustCharacterInvalid\n \n syn region rustCommentLine                                        start=\"//\"                      end=\"$\"   contains=rustTodo,@Spell\n syn region rustCommentLineDoc                                     start=\"//\\%(//\\@!\\|!\\)\"         end=\"$\"   contains=rustTodo,@Spell"}, {"sha": "61ac9d829686a3147904ed907f78162de80c9362", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -65,6 +65,14 @@ pub struct UnionItems<'a, T:'a> {\n \n impl<T: Ord> BTreeSet<T> {\n     /// Makes a new BTreeSet with a reasonable choice of B.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut set: BTreeSet<int> = BTreeSet::new();\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n@@ -80,12 +88,38 @@ impl<T: Ord> BTreeSet<T> {\n \n impl<T> BTreeSet<T> {\n     /// Gets an iterator over the BTreeSet's contents.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<uint> = [1u, 2, 3, 4].iter().map(|&x| x).collect();\n+    ///\n+    /// for x in set.iter() {\n+    ///     println!(\"{}\", x);\n+    /// }\n+    ///\n+    /// let v: Vec<uint> = set.iter().map(|&x| x).collect();\n+    /// assert_eq!(v, vec![1u,2,3,4]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn iter<'a>(&'a self) -> Items<'a, T> {\n         self.map.keys()\n     }\n \n     /// Gets an iterator for moving out the BtreeSet's contents.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<uint> = [1u, 2, 3, 4].iter().map(|&x| x).collect();\n+    ///\n+    /// let v: Vec<uint> = set.into_iter().collect();\n+    /// assert_eq!(v, vec![1u,2,3,4]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn into_iter(self) -> MoveItems<T> {\n         fn first<A, B>((a, _): (A, B)) -> A { a }"}, {"sha": "8c8a2c2f78ee989253c1e35cf51f428d76f23f33", "filename": "src/libcollections/tree/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcollections%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcollections%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fmod.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -15,7 +15,7 @@\n //!\n //! `TreeMap`s are ordered.\n //!\n-//! ## Example\n+//! # Examples\n //!\n //! ```{rust}\n //! use std::collections::TreeSet;"}, {"sha": "b48a610b84999392612b92601e41ce593ec31b27", "filename": "src/libcollections/tree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcollections%2Ftree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcollections%2Ftree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fset.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -27,7 +27,7 @@ use tree_map::{TreeMap, Entries, RevEntries, MoveEntries};\n /// requirement is that the type of the elements contained ascribes to the\n /// `Ord` trait.\n ///\n-/// ## Examples\n+/// # Examples\n ///\n /// ```{rust}\n /// use std::collections::TreeSet;"}, {"sha": "edd5f989797b58469e48917b73f59fbb4c289e11", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -93,7 +93,7 @@ use intrinsics;\n use option::Option;\n use option::Option::{Some, None};\n \n-use cmp::{PartialEq, Eq, PartialOrd, Equiv};\n+use cmp::{PartialEq, Eq, Ord, PartialOrd, Equiv};\n use cmp::Ordering;\n use cmp::Ordering::{Less, Equal, Greater};\n \n@@ -388,17 +388,24 @@ mod externfnpointers {\n }\n \n // Comparison for pointers\n-impl<T> PartialOrd for *const T {\n+impl<T> Ord for *const T {\n     #[inline]\n-    fn partial_cmp(&self, other: &*const T) -> Option<Ordering> {\n+    fn cmp(&self, other: &*const T) -> Ordering {\n         if self < other {\n-            Some(Less)\n+            Less\n         } else if self == other {\n-            Some(Equal)\n+            Equal\n         } else {\n-            Some(Greater)\n+            Greater\n         }\n     }\n+}\n+\n+impl<T> PartialOrd for *const T {\n+    #[inline]\n+    fn partial_cmp(&self, other: &*const T) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n \n     #[inline]\n     fn lt(&self, other: &*const T) -> bool { *self < *other }\n@@ -413,17 +420,24 @@ impl<T> PartialOrd for *const T {\n     fn ge(&self, other: &*const T) -> bool { *self >= *other }\n }\n \n-impl<T> PartialOrd for *mut T {\n+impl<T> Ord for *mut T {\n     #[inline]\n-    fn partial_cmp(&self, other: &*mut T) -> Option<Ordering> {\n+    fn cmp(&self, other: &*mut T) -> Ordering {\n         if self < other {\n-            Some(Less)\n+            Less\n         } else if self == other {\n-            Some(Equal)\n+            Equal\n         } else {\n-            Some(Greater)\n+            Greater\n         }\n     }\n+}\n+\n+impl<T> PartialOrd for *mut T {\n+    #[inline]\n+    fn partial_cmp(&self, other: &*mut T) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n \n     #[inline]\n     fn lt(&self, other: &*mut T) -> bool { *self < *other }"}, {"sha": "252a24e3aa913f44e2f1588ce440ed1ff0ee519a", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -29,7 +29,7 @@\n //! }\n //! ```\n //!\n-//! ## Stability Note\n+//! # Stability Note\n //!\n //! These are all experimental. The interface may change entirely, without\n //! warning."}, {"sha": "e632934782c69e5a72f0da08c814a6b0d1e71578", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -1757,9 +1757,9 @@ pub trait StrPrelude for Sized? {\n     /// }\n     /// ```\n     ///\n-    /// ## Output\n+    /// This outputs:\n     ///\n-    /// ```ignore\n+    /// ```text\n     /// 0: \u4e2d\n     /// 3: \u534e\n     /// 6: V"}, {"sha": "0217c5b271388821b7b6ccfc2c60997bfe620a09", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -10,7 +10,7 @@\n \n //! Utilities for program-wide and customizable logging\n //!\n-//! ## Example\n+//! # Examples\n //!\n //! ```\n //! #![feature(phase)]\n@@ -64,8 +64,7 @@\n //! INFO:main: the answer was: 12\n //! ```\n //!\n-//!\n-//! ## Logging Macros\n+//! # Logging Macros\n //!\n //! There are five macros that the logging subsystem uses:\n //!\n@@ -86,7 +85,7 @@\n //!\n //! * `log_enabled!(level)` - returns true if logging of the given level is enabled\n //!\n-//! ## Enabling logging\n+//! # Enabling logging\n //!\n //! Log levels are controlled on a per-module basis, and by default all logging is\n //! disabled except for `error!` (a log level of 1). Logging is controlled via the\n@@ -123,7 +122,7 @@\n //! * `hello,std::option` turns on hello, and std's option logging\n //! * `error,hello=warn` turn on global error logging and also warn for hello\n //!\n-//! ## Filtering results\n+//! # Filtering results\n //!\n //! A RUST_LOG directive may include a regex filter. The syntax is to append `/`\n //! followed by a regex. Each message is checked against the regex, and is only\n@@ -143,7 +142,7 @@\n //!  hello. In both cases the log message must include a single digit number\n //!  followed by 'scopes'\n //!\n-//! ## Performance and Side Effects\n+//! # Performance and Side Effects\n //!\n //! Each of these macros will expand to code similar to:\n //!"}, {"sha": "5f1ff352f96e3f74d212e876b412ee88d5ad2d66", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -1056,6 +1056,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n         encode_name(rbml_w, item.ident.name);\n         encode_path(rbml_w, path);\n+        encode_attributes(rbml_w, item.attrs.as_slice());\n         encode_inlined_item(ecx, rbml_w, IIItemRef(item));\n         encode_visibility(rbml_w, vis);\n         encode_stability(rbml_w, stab);"}, {"sha": "b9357280d068b04ddb11b9a89e542d5519b57fd7", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -140,7 +140,7 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n     // Internalize everything but the reachable symbols of the current module\n     let cstrs: Vec<::std::c_str::CString> =\n         reachable.iter().map(|s| s.to_c_str()).collect();\n-    let arr: Vec<*const i8> = cstrs.iter().map(|c| c.as_ptr()).collect();\n+    let arr: Vec<*const libc::c_char> = cstrs.iter().map(|c| c.as_ptr()).collect();\n     let ptr = arr.as_ptr();\n     unsafe {\n         llvm::LLVMRustRunRestrictionPass(llmod,"}, {"sha": "d0988af1cb473f9b857fe069a88a5dd79e3d26e4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -104,6 +104,10 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n             record_extern_fqn(cx, did, clean::TypeStatic);\n             clean::StaticItem(build_static(cx, tcx, did, mtbl))\n         }\n+        def::DefConst(did) => {\n+            record_extern_fqn(cx, did, clean::TypeConst);\n+            clean::ConstantItem(build_const(cx, tcx, did))\n+        }\n         _ => return None,\n     };\n     let fqn = csearch::get_item_path(tcx, did);\n@@ -388,6 +392,24 @@ fn build_module(cx: &DocContext, tcx: &ty::ctxt,\n     }\n }\n \n+fn build_const(cx: &DocContext, tcx: &ty::ctxt,\n+               did: ast::DefId) -> clean::Constant {\n+    use rustc::middle::const_eval;\n+    use syntax::print::pprust;\n+\n+    let expr = const_eval::lookup_const_by_id(tcx, did).unwrap_or_else(|| {\n+        panic!(\"expected lookup_const_by_id to succeed for {}\", did);\n+    });\n+    debug!(\"converting constant expr {} to snippet\", expr);\n+    let sn = pprust::expr_to_string(expr);\n+    debug!(\"got snippet {}\", sn);\n+\n+    clean::Constant {\n+        type_: ty::lookup_item_type(tcx, did).ty.clean(cx),\n+        expr: sn\n+    }\n+}\n+\n fn build_static(cx: &DocContext, tcx: &ty::ctxt,\n                 did: ast::DefId,\n                 mutable: bool) -> clean::Static {"}, {"sha": "1cfa0cbd37c904be3c8d0828a2428644540cb348", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -1201,6 +1201,7 @@ pub enum TypeKind {\n     TypeEnum,\n     TypeFunction,\n     TypeModule,\n+    TypeConst,\n     TypeStatic,\n     TypeStruct,\n     TypeTrait,\n@@ -1841,7 +1842,7 @@ impl Clean<Item> for doctree::Static {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, Encodable, Decodable, Show)]\n pub struct Constant {\n     pub type_: Type,\n     pub expr: String,"}, {"sha": "580b7fbe1a3da723ee44c9ca11fa3d0bde213d6c", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -76,6 +76,7 @@ impl ItemType {\n             clean::TypeTrait    => ItemType::Trait,\n             clean::TypeModule   => ItemType::Module,\n             clean::TypeStatic   => ItemType::Static,\n+            clean::TypeConst    => ItemType::Constant,\n             clean::TypeVariant  => ItemType::Variant,\n             clean::TypeTypedef  => ItemType::Typedef,\n         }"}, {"sha": "82081a01956bb1530cae707f10599fa351875bfa", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -24,9 +24,11 @@ pub struct Toc {\n     /// both of which end up in the same `Toc` as they have the same\n     /// parent (Main).\n     ///\n+    /// ```text\n     /// # Main\n     /// ### A\n     /// ## B\n+    /// ```\n     entries: Vec<TocEntry>\n }\n \n@@ -78,6 +80,7 @@ impl TocBuilder {\n     ///\n     /// Example:\n     ///\n+    /// ```text\n     /// ## A\n     /// # B\n     /// # C\n@@ -86,6 +89,7 @@ impl TocBuilder {\n     /// ### F\n     /// #### G\n     /// ### H\n+    /// ```\n     ///\n     /// If we are considering H (i.e. level 3), then A and B are in\n     /// self.top_level, D is in C.children, and C, E, F, G are in"}, {"sha": "565483444604f7c996a0136df442977fc62f26b7", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -603,7 +603,7 @@ mod tests {\n             assert_eq!(*buf.offset(0), 'f' as libc::c_char);\n             assert_eq!(*buf.offset(1), 'o' as libc::c_char);\n             assert_eq!(*buf.offset(2), 'o' as libc::c_char);\n-            assert_eq!(*buf.offset(3), 0xffu8 as i8);\n+            assert_eq!(*buf.offset(3), 0xffu8 as libc::c_char);\n             assert_eq!(*buf.offset(4), 0);\n         }\n     }"}, {"sha": "a16b84d0c167e285e53851f7d55641fde6270b47", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -80,7 +80,7 @@ impl<R: Reader> BufferedReader<R> {\n \n     /// Gets a mutable reference to the underlying reader.\n     ///\n-    /// ## Warning\n+    /// # Warning\n     ///\n     /// It is inadvisable to directly read from the underlying reader.\n     pub fn get_mut(&mut self) -> &mut R { &mut self.inner }\n@@ -185,7 +185,7 @@ impl<W: Writer> BufferedWriter<W> {\n \n     /// Gets a mutable reference to the underlying write.\n     ///\n-    /// ## Warning\n+    /// # Warning\n     ///\n     /// It is inadvisable to directly read from the underlying writer.\n     pub fn get_mut(&mut self) -> &mut W { self.inner.as_mut().unwrap() }\n@@ -357,7 +357,7 @@ impl<S: Stream> BufferedStream<S> {\n \n     /// Gets a mutable reference to the underlying stream.\n     ///\n-    /// ## Warning\n+    /// # Warning\n     ///\n     /// It is inadvisable to read directly from or write directly to the\n     /// underlying stream."}, {"sha": "53fac3fd3c94de12c9581b3949e8c5a2210fb63c", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -127,7 +127,7 @@ impl StdinReader {\n     ///\n     /// This provides access to methods like `chars` and `lines`.\n     ///\n-    /// ## Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::io;"}, {"sha": "414ed87cfe4f9adbe756481143d4bb4102606402", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -378,7 +378,7 @@ pub fn getenv_as_bytes(n: &str) -> Option<Vec<u8>> {\n             if s.is_null() {\n                 None\n             } else {\n-                Some(CString::new(s as *const i8, false).as_bytes_no_nul().to_vec())\n+                Some(CString::new(s as *const libc::c_char, false).as_bytes_no_nul().to_vec())\n             }\n         })\n     }\n@@ -1237,7 +1237,7 @@ impl Copy for MapOption {}\n \n /// Possible errors when creating a map.\n pub enum MapError {\n-    /// ## The following are POSIX-specific\n+    /// # The following are POSIX-specific\n     ///\n     /// fd was not open for reading or, if using `MapWritable`, was not open for\n     /// writing.\n@@ -1259,7 +1259,7 @@ pub enum MapError {\n     ErrZeroLength,\n     /// Unrecognized error. The inner value is the unrecognized errno.\n     ErrUnknown(int),\n-    /// ## The following are Windows-specific\n+    /// # The following are Windows-specific\n     ///\n     /// Unsupported combination of protection flags\n     /// (`MapReadable`/`MapWritable`/`MapExecutable`)."}, {"sha": "562afd33e2fc20cbb1753810bc038542b7542e8f", "filename": "src/libstd/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -32,7 +32,7 @@\n //! the main task panics the application will exit with a non-zero\n //! exit code.\n //!\n-//! ## Example\n+//! # Examples\n //!\n //! ```rust\n //! spawn(move|| {"}, {"sha": "65a4c569b44b64b3cc936164303c9d81d21172b6", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -66,6 +66,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n     let equals_path = cx.path_global(span,\n                                      vec!(cx.ident_of(\"std\"),\n                                           cx.ident_of(\"cmp\"),\n+                                          cx.ident_of(\"Ordering\"),\n                                           cx.ident_of(\"Equal\")));\n \n     let cmp_path = vec!["}, {"sha": "e8824b1ad2ca1b264452d6e98adde4338084304d", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -16,7 +16,7 @@\n //! [terminfo][ti] database, and `WinConsole`, which uses the [Win32 Console\n //! API][win].\n //!\n-//! ## Example\n+//! # Examples\n //!\n //! ```no_run\n //! extern crate term;"}, {"sha": "5d915d6a59b1578bcb2517b7e13e5b79f1f5c835", "filename": "src/test/compile-fail/issue-19096.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n fn main() {\n     let t = (42i, 42i);\n     t.0::<int>; //~ ERROR expected one of `.`, `;`, `}`, or an operator, found `::`"}, {"sha": "a151a837f77d2d3444dbc37eae4b5544bc4fc94d", "filename": "src/test/run-pass/borrow-tuple-fields.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n struct Foo(int, int);\n \n fn main() {"}, {"sha": "4dff2ea55f16a4add6a7efe4d50f4ee73a6129f8", "filename": "src/test/run-pass/if-let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-let.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(if_let)]\n-\n pub fn main() {\n     let x = Some(3i);\n     if let Some(y) = x {"}, {"sha": "63f57e0a2e85eaea056cfe042e1ca0c2e6bbbea8", "filename": "src/test/run-pass/issue-18412.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fissue-18412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fissue-18412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18412.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n // Test that non-static methods can be assigned to local variables as\n // function pointers.\n "}, {"sha": "d42bda6cd5d420139953d59c0eaa09853859eaf0", "filename": "src/test/run-pass/issue-19244.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19244.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n struct MyStruct { field: uint }\n const STRUCT: MyStruct = MyStruct { field: 42 };\n const TUP: (uint,) = (43,);"}, {"sha": "3efc2ee50f3587983db33b7873e39ca0883db7bd", "filename": "src/test/run-pass/issue-19367.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fissue-19367.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fissue-19367.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19367.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n struct S {\n     o: Option<String>\n }"}, {"sha": "eccd841e357b608ebf9b44a0720729ed91649a87", "filename": "src/test/run-pass/tuple-index-fat-types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Ftuple-index-fat-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Ftuple-index-fat-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-index-fat-types.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n struct Foo<'a>(&'a [int]);\n \n fn main() {"}, {"sha": "78e0cad47129a9d4d7c30819c98a3299c141a92c", "filename": "src/test/run-pass/tuple-index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Ftuple-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Ftuple-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-index.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n struct Point(int, int);\n \n fn main() {"}, {"sha": "aa71de2123c7d596c9ef32d629350ed6e06903ae", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -19,7 +19,7 @@ extern {\n }\n \n unsafe fn check<T>(expected: &str, f: |*mut c_char| -> T) {\n-    let mut x = [0i8, ..50];\n+    let mut x = [0 as c_char, ..50];\n     f(&mut x[0] as *mut c_char);\n     let res = CString::new(&x[0], false);\n     assert_eq!(expected, res.as_str().unwrap());"}, {"sha": "94a45817ee580109f985114c35d2e287c30631fe", "filename": "src/test/run-pass/while-let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b97cd338b5d425b24e821e815d84005e38b390a/src%2Ftest%2Frun-pass%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-let.rs?ref=1b97cd338b5d425b24e821e815d84005e38b390a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(while_let)]\n-\n use std::collections::BinaryHeap;\n \n fn make_pq() -> BinaryHeap<int> {"}]}