{"sha": "92e93821931cf6784fa782b74752512ba1d35123", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZTkzODIxOTMxY2Y2Nzg0ZmE3ODJiNzQ3NTI1MTJiYTFkMzUxMjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-27T22:52:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-27T22:53:47Z"}, "message": "Remove task::worker\n\nIt was too unsafe to live. It already apeared to be causing problems with\neholk's incoming task changes, so I'm killing it now before it can spread.", "tree": {"sha": "8da3b3109d7a9bdd5d850d7f0d15839ebebb1684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8da3b3109d7a9bdd5d850d7f0d15839ebebb1684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92e93821931cf6784fa782b74752512ba1d35123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92e93821931cf6784fa782b74752512ba1d35123", "html_url": "https://github.com/rust-lang/rust/commit/92e93821931cf6784fa782b74752512ba1d35123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92e93821931cf6784fa782b74752512ba1d35123/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55a65a51aafe3097ff13055578d265adcc47c42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/55a65a51aafe3097ff13055578d265adcc47c42b", "html_url": "https://github.com/rust-lang/rust/commit/55a65a51aafe3097ff13055578d265adcc47c42b"}], "stats": {"total": 117, "additions": 10, "deletions": 107}, "files": [{"sha": "5968c456909a1443abe520f3abbf80858f12530a", "filename": "src/lib/task.rs", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/92e93821931cf6784fa782b74752512ba1d35123/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e93821931cf6784fa782b74752512ba1d35123/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=92e93821931cf6784fa782b74752512ba1d35123", "patch": "@@ -40,88 +40,6 @@ fn send[T](c: chan[T], v: &T) { c <| v; }\n \n fn recv[T](p: port[T]) -> T { let v; p |> v; v }\n \n-// Spawn a task and immediately return a channel for communicating to it\n-fn worker[T](f: fn(port[T]) ) -> {task: task, chan: chan[T]} {\n-    // FIXME: This is frighteningly unsafe and only works for\n-    // a few cases\n-\n-    type opaque = int;\n-\n-    // FIXME: This terrible hackery is because worktask can't currently\n-    // have type params\n-    type wordsz1 = int;\n-    type wordsz2 = {a: int, b: int};\n-    type wordsz3 = {a: int, b: int, c: int};\n-    type wordsz4 = {a: int, b: int, c: int, d: int};\n-    type wordsz5 = {a: int, b: int, c: int, d: int, e: int};\n-    type opaquechan_1wordsz = chan[chan[wordsz1]];\n-    type opaquechan_2wordsz = chan[chan[wordsz2]];\n-    type opaquechan_3wordsz = chan[chan[wordsz3]];\n-    type opaquechan_4wordsz = chan[chan[wordsz4]];\n-    type opaquechan_5wordsz = chan[chan[wordsz5]];\n-\n-    fn worktask1(setupch: opaquechan_1wordsz, fptr: opaque) {\n-        let f: *fn(port[wordsz1])  = unsafe::reinterpret_cast(fptr);\n-        let p = port[wordsz1]();\n-        setupch <| chan(p);\n-        (*f)(p);\n-    }\n-\n-    fn worktask2(setupch: opaquechan_2wordsz, fptr: opaque) {\n-        let f: *fn(port[wordsz2])  = unsafe::reinterpret_cast(fptr);\n-        let p = port[wordsz2]();\n-        setupch <| chan(p);\n-        (*f)(p);\n-    }\n-\n-    fn worktask3(setupch: opaquechan_3wordsz, fptr: opaque) {\n-        let f: *fn(port[wordsz3])  = unsafe::reinterpret_cast(fptr);\n-        let p = port[wordsz3]();\n-        setupch <| chan(p);\n-        (*f)(p);\n-    }\n-\n-    fn worktask4(setupch: opaquechan_4wordsz, fptr: opaque) {\n-        let f: *fn(port[wordsz4])  = unsafe::reinterpret_cast(fptr);\n-        let p = port[wordsz4]();\n-        setupch <| chan(p);\n-        (*f)(p);\n-    }\n-\n-    fn worktask5(setupch: opaquechan_5wordsz, fptr: opaque) {\n-        let f: *fn(port[wordsz5])  = unsafe::reinterpret_cast(fptr);\n-        let p = port[wordsz5]();\n-        setupch <| chan(p);\n-        (*f)(p);\n-    }\n-\n-    let p = port[chan[T]]();\n-    let setupch = chan(p);\n-    let fptr = unsafe::reinterpret_cast(ptr::addr_of(f));\n-\n-    let Tsz = sys::size_of[T]();\n-    let t =\n-        if Tsz == sys::size_of[wordsz1]() {\n-            let setupchptr = unsafe::reinterpret_cast(setupch);\n-            spawn worktask1(setupchptr, fptr)\n-        } else if (Tsz == sys::size_of[wordsz2]()) {\n-            let setupchptr = unsafe::reinterpret_cast(setupch);\n-            spawn worktask2(setupchptr, fptr)\n-        } else if (Tsz == sys::size_of[wordsz3]()) {\n-            let setupchptr = unsafe::reinterpret_cast(setupch);\n-            spawn worktask3(setupchptr, fptr)\n-        } else if (Tsz == sys::size_of[wordsz4]()) {\n-            let setupchptr = unsafe::reinterpret_cast(setupch);\n-            spawn worktask4(setupchptr, fptr)\n-        } else if (Tsz == sys::size_of[wordsz5]()) {\n-            let setupchptr = unsafe::reinterpret_cast(setupch);\n-            spawn worktask5(setupchptr, fptr)\n-        } else { fail #fmt(\"unhandled type size %u in task::worker\", Tsz) };\n-    let ch;\n-    p |> ch;\n-    ret {task: t, chan: ch};\n-}\n-\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "ecb4b9c4be764e3de9363e96685abee199598444", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/92e93821931cf6784fa782b74752512ba1d35123/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e93821931cf6784fa782b74752512ba1d35123/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=92e93821931cf6784fa782b74752512ba1d35123", "patch": "@@ -573,8 +573,16 @@ mod procsrv {\n     type response = {pid: int, outfd: int};\n \n     fn mk() -> handle {\n-        let res = task::worker(worker);\n-        ret {task: option::some(res.task), chan: res.chan};\n+        auto setupport = port();\n+        auto task = spawn fn(chan[chan[request]] setupchan) {\n+            auto reqport = port();\n+            auto reqchan = chan(reqport);\n+            task::send(setupchan, reqchan);\n+            worker(reqport);\n+        } (chan(setupport));\n+        ret {task: option::some(task),\n+                chan: task::recv(setupport)\n+                };\n     }\n \n     fn from_chan(ch: &reqchan) -> handle { {task: option::none, chan: ch} }"}, {"sha": "7b3283712d09405c7ee5d27ff20b187d31415a25", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/92e93821931cf6784fa782b74752512ba1d35123/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e93821931cf6784fa782b74752512ba1d35123/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=92e93821931cf6784fa782b74752512ba1d35123", "patch": "@@ -34,26 +34,3 @@ fn test_send_recv() {\n     assert (task::recv(p) == 10);\n }\n \n-#[test]\n-fn test_worker() {\n-    task::worker(fn (p: port[int]) { let x; p |> x; assert (x == 10); }).chan\n-        <| 10;\n-\n-    task::worker(fn (p: port[{x: int, y: int}]) {\n-                     let x;\n-                     p |> x;\n-                     assert (x.y == 20);\n-                 }).chan <| {x: 10, y: 20};\n-\n-    task::worker(fn (p: port[{x: int, y: int, z: int}]) {\n-                     let x;\n-                     p |> x;\n-                     assert (x.z == 30);\n-                 }).chan <| {x: 10, y: 20, z: 30};\n-\n-    task::worker(fn (p: port[{a: int, b: int, c: int, d: int}]) {\n-                     let x;\n-                     p |> x;\n-                     assert (x.d == 40);\n-                 }).chan <| {a: 10, b: 20, c: 30, d: 40};\n-}\n\\ No newline at end of file"}]}