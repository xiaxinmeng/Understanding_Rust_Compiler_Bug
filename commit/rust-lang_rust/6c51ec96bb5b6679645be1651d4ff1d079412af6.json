{"sha": "6c51ec96bb5b6679645be1651d4ff1d079412af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNTFlYzk2YmI1YjY2Nzk2NDViZTE2NTFkNGZmMWQwNzk0MTJhZjY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-02T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-02T00:00:00Z"}, "message": "inliner: Avoid query cycles when optimizing generators\n\nThe HIR Id trick is insufficient to prevent query cycles when optimizing\ngenerators, since merely requesting a layout of a generator also\ncomputes its `optimized_mir`.\n\nMake no attempts to inline functions into generators within the same\ncrate to avoid query cycles.", "tree": {"sha": "f04fe743f48b8cec385963f9ee15e7ecdab2634c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f04fe743f48b8cec385963f9ee15e7ecdab2634c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c51ec96bb5b6679645be1651d4ff1d079412af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c51ec96bb5b6679645be1651d4ff1d079412af6", "html_url": "https://github.com/rust-lang/rust/commit/6c51ec96bb5b6679645be1651d4ff1d079412af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c51ec96bb5b6679645be1651d4ff1d079412af6/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da897dfb6daa268a965d2d73620316ba56020a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/da897dfb6daa268a965d2d73620316ba56020a19", "html_url": "https://github.com/rust-lang/rust/commit/da897dfb6daa268a965d2d73620316ba56020a19"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "428f4e138c7f986860e3154f0d70135b1bfa8e7f", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c51ec96bb5b6679645be1651d4ff1d079412af6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c51ec96bb5b6679645be1651d4ff1d079412af6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=6c51ec96bb5b6679645be1651d4ff1d079412af6", "patch": "@@ -107,8 +107,14 @@ impl Inliner<'tcx> {\n                     // Avoid a cycle here by only using `optimized_mir` only if we have\n                     // a lower `HirId` than the callee. This ensures that the callee will\n                     // not inline us. This trick only works without incremental compilation.\n-                    // So don't do it if that is enabled.\n-                    if !self.tcx.dep_graph.is_fully_enabled() && self_hir_id < callee_hir_id {\n+                    // So don't do it if that is enabled. Also avoid inlining into generators,\n+                    // since their `optimized_mir` is used for layout computation, which can\n+                    // create a cycle, even when no attempt is made to inline the function\n+                    // in the other direction.\n+                    if !self.tcx.dep_graph.is_fully_enabled()\n+                        && self_hir_id < callee_hir_id\n+                        && caller_body.generator_kind.is_none()\n+                    {\n                         self.tcx.optimized_mir(callsite.callee)\n                     } else {\n                         continue;"}, {"sha": "5c838159b986c55d5c934a0bbccb6ea0ba00cf65", "filename": "src/test/mir-opt/inline/inline-async.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c51ec96bb5b6679645be1651d4ff1d079412af6/src%2Ftest%2Fmir-opt%2Finline%2Finline-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c51ec96bb5b6679645be1651d4ff1d079412af6/src%2Ftest%2Fmir-opt%2Finline%2Finline-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-async.rs?ref=6c51ec96bb5b6679645be1651d4ff1d079412af6", "patch": "@@ -0,0 +1,18 @@\n+// Checks that inliner doesn't introduce cycles when optimizing generators.\n+// The outcome of optimization is not verfied, just the absence of the cycle.\n+// Regression test for #76181.\n+//\n+// edition:2018\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct S;\n+\n+impl S {\n+    pub async fn g(&mut self) {\n+        self.h();\n+    }\n+    pub fn h(&mut self) {\n+        let _ = self.g();\n+    }\n+}"}]}