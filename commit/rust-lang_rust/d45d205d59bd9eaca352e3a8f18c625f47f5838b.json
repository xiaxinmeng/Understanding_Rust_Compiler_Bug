{"sha": "d45d205d59bd9eaca352e3a8f18c625f47f5838b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NWQyMDVkNTliZDllYWNhMzUyZTNhOGYxOGM2MjVmNDdmNTgzOGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T06:06:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T06:06:06Z"}, "message": "Auto merge of #86107 - Smittyvb:peephole-optim-eq-bool, r=wesleywiser\n\nPeephole optimize `x == false` and `x != true`\n\nThis adds peephole optimizations to make `x == false`, `false == x`, `x != true`, and `true != x` get optimized to `!x` in the `instcombine` MIR pass. That pass currently handles `x == true` -> `x` already.", "tree": {"sha": "0f893fbff81c786d9deea4c34cf594f1b3ecd2ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f893fbff81c786d9deea4c34cf594f1b3ecd2ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d45d205d59bd9eaca352e3a8f18c625f47f5838b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d45d205d59bd9eaca352e3a8f18c625f47f5838b", "html_url": "https://github.com/rust-lang/rust/commit/d45d205d59bd9eaca352e3a8f18c625f47f5838b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d45d205d59bd9eaca352e3a8f18c625f47f5838b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8381389ee10e3c0505ccb5bac05382de1b9f99d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8381389ee10e3c0505ccb5bac05382de1b9f99d", "html_url": "https://github.com/rust-lang/rust/commit/c8381389ee10e3c0505ccb5bac05382de1b9f99d"}, {"sha": "2f1c2193d1e9a01adbf5b7886eee229242407dcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1c2193d1e9a01adbf5b7886eee229242407dcb", "html_url": "https://github.com/rust-lang/rust/commit/2f1c2193d1e9a01adbf5b7886eee229242407dcb"}], "stats": {"total": 187, "additions": 180, "deletions": 7}, "files": [{"sha": "b64189a7f3c1e6a3d2a052dde6ea1c0a8b4938aa", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d45d205d59bd9eaca352e3a8f18c625f47f5838b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45d205d59bd9eaca352e3a8f18c625f47f5838b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=d45d205d59bd9eaca352e3a8f18c625f47f5838b", "patch": "@@ -4,7 +4,7 @@ use crate::transform::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::{\n     BinOp, Body, Constant, LocalDecls, Operand, Place, ProjectionElem, Rvalue, SourceInfo,\n-    StatementKind,\n+    StatementKind, UnOp,\n };\n use rustc_middle::ty::{self, TyCtxt};\n \n@@ -47,28 +47,35 @@ impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n             Rvalue::BinaryOp(op @ (BinOp::Eq | BinOp::Ne), box (a, b)) => {\n                 let new = match (op, self.try_eval_bool(a), self.try_eval_bool(b)) {\n                     // Transform \"Eq(a, true)\" ==> \"a\"\n-                    (BinOp::Eq, _, Some(true)) => Some(a.clone()),\n+                    (BinOp::Eq, _, Some(true)) => Some(Rvalue::Use(a.clone())),\n \n                     // Transform \"Ne(a, false)\" ==> \"a\"\n-                    (BinOp::Ne, _, Some(false)) => Some(a.clone()),\n+                    (BinOp::Ne, _, Some(false)) => Some(Rvalue::Use(a.clone())),\n \n                     // Transform \"Eq(true, b)\" ==> \"b\"\n-                    (BinOp::Eq, Some(true), _) => Some(b.clone()),\n+                    (BinOp::Eq, Some(true), _) => Some(Rvalue::Use(b.clone())),\n \n                     // Transform \"Ne(false, b)\" ==> \"b\"\n-                    (BinOp::Ne, Some(false), _) => Some(b.clone()),\n+                    (BinOp::Ne, Some(false), _) => Some(Rvalue::Use(b.clone())),\n \n-                    // FIXME: Consider combining remaining comparisons into logical operations:\n                     // Transform \"Eq(false, b)\" ==> \"Not(b)\"\n+                    (BinOp::Eq, Some(false), _) => Some(Rvalue::UnaryOp(UnOp::Not, b.clone())),\n+\n                     // Transform \"Ne(true, b)\" ==> \"Not(b)\"\n+                    (BinOp::Ne, Some(true), _) => Some(Rvalue::UnaryOp(UnOp::Not, b.clone())),\n+\n                     // Transform \"Eq(a, false)\" ==> \"Not(a)\"\n+                    (BinOp::Eq, _, Some(false)) => Some(Rvalue::UnaryOp(UnOp::Not, a.clone())),\n+\n                     // Transform \"Ne(a, true)\" ==> \"Not(a)\"\n+                    (BinOp::Ne, _, Some(true)) => Some(Rvalue::UnaryOp(UnOp::Not, a.clone())),\n+\n                     _ => None,\n                 };\n \n                 if let Some(new) = new {\n                     if self.should_combine(source_info, rvalue) {\n-                        *rvalue = Rvalue::Use(new);\n+                        *rvalue = new;\n                     }\n                 }\n             }"}, {"sha": "a14f64467a643b50da9ceb862f35844b0d70de53", "filename": "src/test/mir-opt/bool_compare.opt1.InstCombine.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d45d205d59bd9eaca352e3a8f18c625f47f5838b/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d45d205d59bd9eaca352e3a8f18c625f47f5838b/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff?ref=d45d205d59bd9eaca352e3a8f18c625f47f5838b", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `opt1` before InstCombine\n++ // MIR for `opt1` after InstCombine\n+  \n+  fn opt1(_1: bool) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:2:9: 2:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:2:21: 2:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n+      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:3:8: 3:9\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n+          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:3:8: 3:9\n+          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:3:8: 3:9\n+-         _2 = Ne(move _3, const true);    // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n++         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n+          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:3:16: 3:17\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:3:5: 3:34\n+      }\n+  \n+      bb1: {\n+          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:3:20: 3:21\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:3:5: 3:34\n+      }\n+  \n+      bb2: {\n+          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:3:31: 3:32\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:3:5: 3:34\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:3:33: 3:34\n+          return;                          // scope 0 at $DIR/bool_compare.rs:4:2: 4:2\n+      }\n+  }\n+  "}, {"sha": "4e9c255ad6265db607ae7e8e6961000eaf2cf8d1", "filename": "src/test/mir-opt/bool_compare.opt2.InstCombine.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d45d205d59bd9eaca352e3a8f18c625f47f5838b/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d45d205d59bd9eaca352e3a8f18c625f47f5838b/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff?ref=d45d205d59bd9eaca352e3a8f18c625f47f5838b", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `opt2` before InstCombine\n++ // MIR for `opt2` after InstCombine\n+  \n+  fn opt2(_1: bool) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:7:9: 7:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:7:21: 7:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n+      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n+          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n+          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n+-         _2 = Ne(const true, move _3);    // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n++         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n+          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:8:5: 8:34\n+      }\n+  \n+      bb1: {\n+          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:8:20: 8:21\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:8:5: 8:34\n+      }\n+  \n+      bb2: {\n+          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:8:31: 8:32\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:8:5: 8:34\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:8:33: 8:34\n+          return;                          // scope 0 at $DIR/bool_compare.rs:9:2: 9:2\n+      }\n+  }\n+  "}, {"sha": "2048c97a9e1c3b3d21fca66062677f6183008f9c", "filename": "src/test/mir-opt/bool_compare.opt3.InstCombine.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d45d205d59bd9eaca352e3a8f18c625f47f5838b/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d45d205d59bd9eaca352e3a8f18c625f47f5838b/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff?ref=d45d205d59bd9eaca352e3a8f18c625f47f5838b", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `opt3` before InstCombine\n++ // MIR for `opt3` after InstCombine\n+  \n+  fn opt3(_1: bool) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:12:9: 12:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:12:21: 12:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n+      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:13:8: 13:9\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n+          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:13:8: 13:9\n+          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:13:8: 13:9\n+-         _2 = Eq(move _3, const false);   // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n++         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n+          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:13:17: 13:18\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:13:5: 13:35\n+      }\n+  \n+      bb1: {\n+          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:13:21: 13:22\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:13:5: 13:35\n+      }\n+  \n+      bb2: {\n+          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:13:32: 13:33\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:13:5: 13:35\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:13:34: 13:35\n+          return;                          // scope 0 at $DIR/bool_compare.rs:14:2: 14:2\n+      }\n+  }\n+  "}, {"sha": "efcaa2766a9ed831f04aba7b1521db0c07b4c3a6", "filename": "src/test/mir-opt/bool_compare.opt4.InstCombine.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d45d205d59bd9eaca352e3a8f18c625f47f5838b/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d45d205d59bd9eaca352e3a8f18c625f47f5838b/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff?ref=d45d205d59bd9eaca352e3a8f18c625f47f5838b", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `opt4` before InstCombine\n++ // MIR for `opt4` after InstCombine\n+  \n+  fn opt4(_1: bool) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:17:9: 17:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:17:21: 17:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n+      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n+          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n+          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n+-         _2 = Eq(const false, move _3);   // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n++         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n+          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:18:5: 18:35\n+      }\n+  \n+      bb1: {\n+          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:18:21: 18:22\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:18:5: 18:35\n+      }\n+  \n+      bb2: {\n+          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:18:32: 18:33\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:18:5: 18:35\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:18:34: 18:35\n+          return;                          // scope 0 at $DIR/bool_compare.rs:19:2: 19:2\n+      }\n+  }\n+  "}, {"sha": "3ff046325dc1f5d957a0a2ec597bafe51e480ad0", "filename": "src/test/mir-opt/bool_compare.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d45d205d59bd9eaca352e3a8f18c625f47f5838b/src%2Ftest%2Fmir-opt%2Fbool_compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45d205d59bd9eaca352e3a8f18c625f47f5838b/src%2Ftest%2Fmir-opt%2Fbool_compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.rs?ref=d45d205d59bd9eaca352e3a8f18c625f47f5838b", "patch": "@@ -0,0 +1,26 @@\n+// EMIT_MIR bool_compare.opt1.InstCombine.diff\n+fn opt1(x: bool) -> u32 {\n+    if x != true { 0 } else { 1 }\n+}\n+\n+// EMIT_MIR bool_compare.opt2.InstCombine.diff\n+fn opt2(x: bool) -> u32 {\n+    if true != x { 0 } else { 1 }\n+}\n+\n+// EMIT_MIR bool_compare.opt3.InstCombine.diff\n+fn opt3(x: bool) -> u32 {\n+    if x == false { 0 } else { 1 }\n+}\n+\n+// EMIT_MIR bool_compare.opt4.InstCombine.diff\n+fn opt4(x: bool) -> u32 {\n+    if false == x { 0 } else { 1 }\n+}\n+\n+fn main() {\n+    opt1(false);\n+    opt2(false);\n+    opt3(false);\n+    opt4(false);\n+}"}]}