{"sha": "b7615389978eae2ae9f3cba9a776fd8da3f743ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjE1Mzg5OTc4ZWFlMmFlOWYzY2JhOWE3NzZmZDhkYTNmNzQzY2E=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-08-21T16:15:29Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:09Z"}, "message": "Generalized SynchronisationScope for BuilderMethods", "tree": {"sha": "16b5b6da384a12abc0016a389b5d295d66fe999c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16b5b6da384a12abc0016a389b5d295d66fe999c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7615389978eae2ae9f3cba9a776fd8da3f743ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7615389978eae2ae9f3cba9a776fd8da3f743ca", "html_url": "https://github.com/rust-lang/rust/commit/b7615389978eae2ae9f3cba9a776fd8da3f743ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7615389978eae2ae9f3cba9a776fd8da3f743ca/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6998662900290db23974e8a7ba3c3864330c368", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6998662900290db23974e8a7ba3c3864330c368", "html_url": "https://github.com/rust-lang/rust/commit/b6998662900290db23974e8a7ba3c3864330c368"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "61142d7fde34a8bd440be090b8bb7c425cdc1027", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7615389978eae2ae9f3cba9a776fd8da3f743ca/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7615389978eae2ae9f3cba9a776fd8da3f743ca/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=b7615389978eae2ae9f3cba9a776fd8da3f743ca", "patch": "@@ -1097,12 +1097,12 @@ impl BuilderMethods<'a, 'll, 'tcx, Value, BasicBlock>\n         }\n     }\n \n-    fn atomic_fence(&self, order: traits::AtomicOrdering, scope: SynchronizationScope) {\n+    fn atomic_fence(&self, order: traits::AtomicOrdering, scope: traits::SynchronizationScope) {\n         unsafe {\n             llvm::LLVMRustBuildAtomicFence(\n                 self.llbuilder,\n                 AtomicOrdering::from_generic(order),\n-                scope\n+                SynchronizationScope::from_generic(scope)\n             );\n         }\n     }"}, {"sha": "e9568761ac220c1935e2dd9a7835dfa7384465c3", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7615389978eae2ae9f3cba9a776fd8da3f743ca/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7615389978eae2ae9f3cba9a776fd8da3f743ca/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=b7615389978eae2ae9f3cba9a776fd8da3f743ca", "patch": "@@ -31,7 +31,7 @@ use syntax::symbol::Symbol;\n use builder::Builder;\n use value::Value;\n \n-use traits::{BuilderMethods, AtomicRmwBinOp};\n+use traits::{BuilderMethods, AtomicRmwBinOp, SynchronizationScope};\n \n use rustc::session::Session;\n use syntax_pos::Span;\n@@ -521,12 +521,12 @@ pub fn codegen_intrinsic_call(\n                 }\n \n                 \"fence\" => {\n-                    bx.atomic_fence(order, llvm::SynchronizationScope::CrossThread);\n+                    bx.atomic_fence(order, SynchronizationScope::CrossThread);\n                     return;\n                 }\n \n                 \"singlethreadfence\" => {\n-                    bx.atomic_fence(order, llvm::SynchronizationScope::SingleThread);\n+                    bx.atomic_fence(order, SynchronizationScope::SingleThread);\n                     return;\n                 }\n "}, {"sha": "8ac6e218d86b5a736b4477a9a8bddfbdbe141ceb", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7615389978eae2ae9f3cba9a776fd8da3f743ca/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7615389978eae2ae9f3cba9a776fd8da3f743ca/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=b7615389978eae2ae9f3cba9a776fd8da3f743ca", "patch": "@@ -304,6 +304,16 @@ pub enum SynchronizationScope {\n     CrossThread,\n }\n \n+impl SynchronizationScope {\n+    pub fn from_generic(sc : traits::SynchronizationScope) -> Self {\n+        match sc {\n+            traits::SynchronizationScope::Other => SynchronizationScope::Other,\n+            traits::SynchronizationScope::SingleThread => SynchronizationScope::SingleThread,\n+            traits::SynchronizationScope::CrossThread => SynchronizationScope::CrossThread,\n+        }\n+    }\n+}\n+\n /// LLVMRustFileType\n #[derive(Copy, Clone)]\n #[repr(C)]"}, {"sha": "d28dd0fa795a5f6a11e4fcedb0dc10ebb464f42e", "filename": "src/librustc_codegen_llvm/traits.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7615389978eae2ae9f3cba9a776fd8da3f743ca/src%2Flibrustc_codegen_llvm%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7615389978eae2ae9f3cba9a776fd8da3f743ca/src%2Flibrustc_codegen_llvm%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftraits.rs?ref=b7615389978eae2ae9f3cba9a776fd8da3f743ca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use llvm::{SynchronizationScope, AsmDialect};\n+use llvm::AsmDialect;\n use common::*;\n use type_::Type;\n use libc::c_char;\n@@ -94,6 +94,14 @@ pub enum AtomicOrdering {\n     SequentiallyConsistent,\n }\n \n+pub enum SynchronizationScope {\n+    // FIXME: figure out if this variant is needed at all.\n+    #[allow(dead_code)]\n+    Other,\n+    SingleThread,\n+    CrossThread,\n+}\n+\n \n pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll,\n     Value : ?Sized,"}]}