{"sha": "54eeef14a380ca026dc378e6927655fb08f64736", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZWVlZjE0YTM4MGNhMDI2ZGMzNzhlNjkyNzY1NWZiMDhmNjQ3MzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-12T04:08:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-12T04:08:14Z"}, "message": "Auto merge of #42419 - ucarion:ucarion-explain-rc-arc-abbrev, r=frewsxcv\n\nExplicate what \"Rc\" and \"Arc\" stand for.\n\nA person on the weekly \"Easy Questions\" Reddit thread [was mystified by what `Arc`/`Rc` means](https://www.reddit.com/r/rust/comments/6dyud9/hey_rustaceans_got_an_easy_question_ask_here/did87ds/). Though this is explained in various places, it's not mentioned in the documentation directly.\n\nThis PR adds an explanation of the `Rc`/`Arc` acronyms to their respective documentations. There are two things I'm not sure of:\n\n* Does \"Rc\" mean \"Reference Count**er**\" or \"Reference Count**ed**\"? ~~I went with the former.~~ *Edit:* I've changed this to use the latter alternative.\n* Should this information be spelled out elsewhere, such as in the docs for the `rc` module?", "tree": {"sha": "5a84cde6c14c489614177bc9fd48fe4ed7fb7511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a84cde6c14c489614177bc9fd48fe4ed7fb7511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54eeef14a380ca026dc378e6927655fb08f64736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54eeef14a380ca026dc378e6927655fb08f64736", "html_url": "https://github.com/rust-lang/rust/commit/54eeef14a380ca026dc378e6927655fb08f64736", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54eeef14a380ca026dc378e6927655fb08f64736/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ef41215c2ffe3105ea8cc1621dda00542f65ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ef41215c2ffe3105ea8cc1621dda00542f65ee", "html_url": "https://github.com/rust-lang/rust/commit/29ef41215c2ffe3105ea8cc1621dda00542f65ee"}, {"sha": "1af0cb165065ebca5296a7b5841ebec9bfb40476", "url": "https://api.github.com/repos/rust-lang/rust/commits/1af0cb165065ebca5296a7b5841ebec9bfb40476", "html_url": "https://github.com/rust-lang/rust/commit/1af0cb165065ebca5296a7b5841ebec9bfb40476"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "5ed41f6ffe6278c70d7b38b3d7dc55c1ea65f776", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54eeef14a380ca026dc378e6927655fb08f64736/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54eeef14a380ca026dc378e6927655fb08f64736/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=54eeef14a380ca026dc378e6927655fb08f64736", "patch": "@@ -42,7 +42,8 @@ use heap::deallocate;\n /// necessarily) at _exactly_ `MAX_REFCOUNT + 1` references.\n const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n \n-/// A thread-safe reference-counting pointer.\n+/// A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically\n+/// Reference Counted'.\n ///\n /// The type `Arc<T>` provides shared ownership of a value of type `T`,\n /// allocated in the heap. Invoking [`clone`][clone] on `Arc` produces"}, {"sha": "1f3388ad2c28c680dc402b62979638fcbeff5112", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54eeef14a380ca026dc378e6927655fb08f64736/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54eeef14a380ca026dc378e6927655fb08f64736/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=54eeef14a380ca026dc378e6927655fb08f64736", "patch": "@@ -10,7 +10,8 @@\n \n #![allow(deprecated)]\n \n-//! Single-threaded reference-counting pointers.\n+//! Single-threaded reference-counting pointers. 'Rc' stands for 'Reference\n+//! Counted'.\n //!\n //! The type [`Rc<T>`][`Rc`] provides shared ownership of a value of type `T`,\n //! allocated in the heap. Invoking [`clone`][clone] on [`Rc`] produces a new\n@@ -266,7 +267,8 @@ struct RcBox<T: ?Sized> {\n     value: T,\n }\n \n-/// A single-threaded reference-counting pointer.\n+/// A single-threaded reference-counting pointer. 'Rc' stands for 'Reference\n+/// Counted'.\n ///\n /// See the [module-level documentation](./index.html) for more details.\n ///"}]}