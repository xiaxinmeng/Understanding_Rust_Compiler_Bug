{"sha": "a17561ffc90c900cb7d0e96b00c6381244764ef7", "node_id": "C_kwDOAAsO6NoAKGExNzU2MWZmYzkwYzkwMGNiN2QwZTk2YjAwYzYzODEyNDQ3NjRlZjc", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-05-16T15:43:23Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-05-31T16:40:24Z"}, "message": "use new c literals instead of cstr! macro", "tree": {"sha": "d1d7929bc39c5ab1c6a9af6340800cc242807c0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d7929bc39c5ab1c6a9af6340800cc242807c0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17561ffc90c900cb7d0e96b00c6381244764ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17561ffc90c900cb7d0e96b00c6381244764ef7", "html_url": "https://github.com/rust-lang/rust/commit/a17561ffc90c900cb7d0e96b00c6381244764ef7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17561ffc90c900cb7d0e96b00c6381244764ef7/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4f7ad8e68206fa54372535b5c04d7ddbaea43be", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f7ad8e68206fa54372535b5c04d7ddbaea43be", "html_url": "https://github.com/rust-lang/rust/commit/e4f7ad8e68206fa54372535b5c04d7ddbaea43be"}], "stats": {"total": 119, "additions": 48, "deletions": 71}, "files": [{"sha": "2375d51098dc3ceca96547e25dfe8fddb3ff1e0e", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -872,16 +872,6 @@ dependencies = [\n  \"typenum\",\n ]\n \n-[[package]]\n-name = \"cstr\"\n-version = \"0.2.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c11a39d776a3b35896711da8a04dc1835169dcd36f710878187637314e47941b\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n-]\n-\n [[package]]\n name = \"ctrlc\"\n version = \"3.3.1\"\n@@ -3180,7 +3170,6 @@ name = \"rustc_codegen_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n- \"cstr\",\n  \"libc\",\n  \"measureme\",\n  \"object 0.31.1\","}, {"sha": "39ff3a0ba2d22d56e1b43efe3bafa682bced00a0", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -8,7 +8,6 @@ test = false\n \n [dependencies]\n bitflags = \"1.0\"\n-cstr = \"0.2\"\n libc = \"0.2\"\n measureme = \"10.0.0\"\n object = { version = \"0.31.1\", default-features = false, features = ["}, {"sha": "ad0636894b793a0503b9b5c4e29be27eaf27150c", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -77,7 +77,7 @@ pub(crate) unsafe fn codegen(\n                 llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n             llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);\n \n-            let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, \"entry\\0\".as_ptr().cast());\n+            let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, c\"entry\".as_ptr().cast());\n \n             let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n             llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);\n@@ -129,7 +129,7 @@ pub(crate) unsafe fn codegen(\n     attributes::apply_to_llfn(callee, llvm::AttributePlace::Function, &[no_return]);\n     llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);\n \n-    let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, \"entry\\0\".as_ptr().cast());\n+    let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, c\"entry\".as_ptr().cast());\n \n     let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n     llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);"}, {"sha": "8b05af7bed90959640d4c2e1eedcd0a6145f5888", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -595,7 +595,7 @@ pub(crate) fn run_pass_manager(\n             llvm::LLVMRustAddModuleFlag(\n                 module.module_llvm.llmod(),\n                 llvm::LLVMModFlagBehavior::Error,\n-                \"LTOPostLink\\0\".as_ptr().cast(),\n+                c\"LTOPostLink\".as_ptr().cast(),\n                 1,\n             );\n         }"}, {"sha": "53b4296802ef7e82bcb224b74fd69db337946a4d", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -891,11 +891,11 @@ unsafe fn embed_bitcode(\n         let llglobal = llvm::LLVMAddGlobal(\n             llmod,\n             common::val_ty(llconst),\n-            \"rustc.embedded.module\\0\".as_ptr().cast(),\n+            c\"rustc.embedded.module\".as_ptr().cast(),\n         );\n         llvm::LLVMSetInitializer(llglobal, llconst);\n \n-        let section = if is_apple { \"__LLVM,__bitcode\\0\" } else { \".llvmbc\\0\" };\n+        let section = if is_apple { c\"__LLVM,__bitcode\" } else { c\".llvmbc\" };\n         llvm::LLVMSetSection(llglobal, section.as_ptr().cast());\n         llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n         llvm::LLVMSetGlobalConstant(llglobal, llvm::True);\n@@ -904,10 +904,10 @@ unsafe fn embed_bitcode(\n         let llglobal = llvm::LLVMAddGlobal(\n             llmod,\n             common::val_ty(llconst),\n-            \"rustc.embedded.cmdline\\0\".as_ptr().cast(),\n+            c\"rustc.embedded.cmdline\".as_ptr().cast(),\n         );\n         llvm::LLVMSetInitializer(llglobal, llconst);\n-        let section = if is_apple { \"__LLVM,__cmdline\\0\" } else { \".llvmcmd\\0\" };\n+        let section = if is_apple { c\"__LLVM,__cmdline\" } else { c\".llvmcmd\" };\n         llvm::LLVMSetSection(llglobal, section.as_ptr().cast());\n         llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n     } else {"}, {"sha": "2f7eb08ad3d4c9ea6e4d9aaa5de33f644ba3ef01", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -19,8 +19,6 @@ use crate::context::CodegenCx;\n use crate::llvm;\n use crate::value::Value;\n \n-use cstr::cstr;\n-\n use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::*;\n@@ -110,11 +108,11 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'_>, cgu_name: Symbol) -> (ModuleCodegen\n \n             // Create the llvm.used and llvm.compiler.used variables.\n             if !cx.used_statics.borrow().is_empty() {\n-                cx.create_used_variable_impl(cstr!(\"llvm.used\"), &*cx.used_statics.borrow());\n+                cx.create_used_variable_impl(c\"llvm.used\", &*cx.used_statics.borrow());\n             }\n             if !cx.compiler_used_statics.borrow().is_empty() {\n                 cx.create_used_variable_impl(\n-                    cstr!(\"llvm.compiler.used\"),\n+                    c\"llvm.compiler.used\",\n                     &*cx.compiler_used_statics.borrow(),\n                 );\n             }"}, {"sha": "992b45bd6746cbf5fc214aa12dfd2ccb3210da7e", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -6,7 +6,6 @@ use crate::llvm::{self, AtomicOrdering, AtomicRmwBinOp, BasicBlock, False, True}\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n-use cstr::cstr;\n use libc::{c_char, c_uint};\n use rustc_codegen_ssa::common::{IntPredicate, RealPredicate, SynchronizationScope, TypeKind};\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n@@ -25,7 +24,6 @@ use rustc_symbol_mangling::typeid::{kcfi_typeid_for_fnabi, typeid_for_fnabi, Typ\n use rustc_target::abi::{self, call::FnAbi, Align, Size, WrappingRange};\n use rustc_target::spec::{HasTargetSpec, SanitizerSet, Target};\n use std::borrow::Cow;\n-use std::ffi::CStr;\n use std::iter;\n use std::ops::Deref;\n use std::ptr;\n@@ -45,13 +43,10 @@ impl Drop for Builder<'_, '_, '_> {\n     }\n }\n \n-// FIXME(eddyb) use a checked constructor when they become `const fn`.\n-const EMPTY_C_STR: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b\"\\0\") };\n-\n /// Empty string, to be used where LLVM expects an instruction name, indicating\n /// that the instruction is to be left unnamed (i.e. numbered, in textual IR).\n // FIXME(eddyb) pass `&CStr` directly to FFI once it's a thin pointer.\n-const UNNAMED: *const c_char = EMPTY_C_STR.as_ptr();\n+const UNNAMED: *const c_char = c\"\".as_ptr();\n \n impl<'ll, 'tcx> BackendTypes for Builder<'_, 'll, 'tcx> {\n     type Value = <CodegenCx<'ll, 'tcx> as BackendTypes>::Value;\n@@ -1010,14 +1005,13 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn cleanup_pad(&mut self, parent: Option<&'ll Value>, args: &[&'ll Value]) -> Funclet<'ll> {\n-        let name = cstr!(\"cleanuppad\");\n         let ret = unsafe {\n             llvm::LLVMBuildCleanupPad(\n                 self.llbuilder,\n                 parent,\n                 args.as_ptr(),\n                 args.len() as c_uint,\n-                name.as_ptr(),\n+                c\"cleanuppad\".as_ptr(),\n             )\n         };\n         Funclet::new(ret.expect(\"LLVM does not have support for cleanuppad\"))\n@@ -1031,14 +1025,13 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn catch_pad(&mut self, parent: &'ll Value, args: &[&'ll Value]) -> Funclet<'ll> {\n-        let name = cstr!(\"catchpad\");\n         let ret = unsafe {\n             llvm::LLVMBuildCatchPad(\n                 self.llbuilder,\n                 parent,\n                 args.as_ptr(),\n                 args.len() as c_uint,\n-                name.as_ptr(),\n+                c\"catchpad\".as_ptr(),\n             )\n         };\n         Funclet::new(ret.expect(\"LLVM does not have support for catchpad\"))\n@@ -1050,14 +1043,13 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unwind: Option<&'ll BasicBlock>,\n         handlers: &[&'ll BasicBlock],\n     ) -> &'ll Value {\n-        let name = cstr!(\"catchswitch\");\n         let ret = unsafe {\n             llvm::LLVMBuildCatchSwitch(\n                 self.llbuilder,\n                 parent,\n                 unwind,\n                 handlers.len() as c_uint,\n-                name.as_ptr(),\n+                c\"catchswitch\".as_ptr(),\n             )\n         };\n         let ret = ret.expect(\"LLVM does not have support for catchswitch\");"}, {"sha": "8bcd735ab325cd4016689ebefc3ddc5301d8ccad", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -6,7 +6,6 @@ use crate::llvm::{self, True};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n-use cstr::cstr;\n use rustc_codegen_ssa::traits::*;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -473,9 +472,9 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                             .all(|&byte| byte == 0);\n \n                     let sect_name = if all_bytes_are_zero {\n-                        cstr!(\"__DATA,__thread_bss\")\n+                        c\"__DATA,__thread_bss\"\n                     } else {\n-                        cstr!(\"__DATA,__thread_data\")\n+                        c\"__DATA,__thread_data\"\n                     };\n                     llvm::LLVMSetSection(g, sect_name.as_ptr());\n                 }\n@@ -504,7 +503,7 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                     let val = llvm::LLVMMetadataAsValue(self.llcx, meta);\n                     llvm::LLVMAddNamedMetadataOperand(\n                         self.llmod,\n-                        \"wasm.custom_sections\\0\".as_ptr().cast(),\n+                        c\"wasm.custom_sections\".as_ptr().cast(),\n                         val,\n                     );\n                 }"}, {"sha": "ff996b93a4c3e2d224c208e2655a71a230720cc3", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -8,7 +8,6 @@ use crate::llvm_util;\n use crate::type_::Type;\n use crate::value::Value;\n \n-use cstr::cstr;\n use rustc_codegen_ssa::base::wants_msvc_seh;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::base_n;\n@@ -224,36 +223,42 @@ pub unsafe fn create_module<'ll>(\n     // If skipping the PLT is enabled, we need to add some module metadata\n     // to ensure intrinsic calls don't use it.\n     if !sess.needs_plt() {\n-        let avoid_plt = \"RtLibUseGOT\\0\".as_ptr().cast();\n-        llvm::LLVMRustAddModuleFlag(llmod, llvm::LLVMModFlagBehavior::Warning, avoid_plt, 1);\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            llvm::LLVMModFlagBehavior::Warning,\n+            c\"RtLibUseGOT\".as_ptr().cast(),\n+            1,\n+        );\n     }\n \n     // Enable canonical jump tables if CFI is enabled. (See https://reviews.llvm.org/D65629.)\n     if sess.is_sanitizer_cfi_canonical_jump_tables_enabled() && sess.is_sanitizer_cfi_enabled() {\n-        let canonical_jump_tables = \"CFI Canonical Jump Tables\\0\".as_ptr().cast();\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Override,\n-            canonical_jump_tables,\n+            c\"CFI Canonical Jump Tables\".as_ptr().cast(),\n             1,\n         );\n     }\n \n     // Enable LTO unit splitting if specified or if CFI is enabled. (See https://reviews.llvm.org/D53891.)\n     if sess.is_split_lto_unit_enabled() || sess.is_sanitizer_cfi_enabled() {\n-        let enable_split_lto_unit = \"EnableSplitLTOUnit\\0\".as_ptr().cast();\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Override,\n-            enable_split_lto_unit,\n+            c\"EnableSplitLTOUnit\".as_ptr().cast(),\n             1,\n         );\n     }\n \n     // Add \"kcfi\" module flag if KCFI is enabled. (See https://reviews.llvm.org/D119296.)\n     if sess.is_sanitizer_kcfi_enabled() {\n-        let kcfi = \"kcfi\\0\".as_ptr().cast();\n-        llvm::LLVMRustAddModuleFlag(llmod, llvm::LLVMModFlagBehavior::Override, kcfi, 1);\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            llvm::LLVMModFlagBehavior::Override,\n+            c\"kcfi\".as_ptr().cast(),\n+            1,\n+        );\n     }\n \n     // Control Flow Guard is currently only supported by the MSVC linker on Windows.\n@@ -265,7 +270,7 @@ pub unsafe fn create_module<'ll>(\n                 llvm::LLVMRustAddModuleFlag(\n                     llmod,\n                     llvm::LLVMModFlagBehavior::Warning,\n-                    \"cfguard\\0\".as_ptr() as *const _,\n+                    c\"cfguard\".as_ptr() as *const _,\n                     1,\n                 )\n             }\n@@ -274,7 +279,7 @@ pub unsafe fn create_module<'ll>(\n                 llvm::LLVMRustAddModuleFlag(\n                     llmod,\n                     llvm::LLVMModFlagBehavior::Warning,\n-                    \"cfguard\\0\".as_ptr() as *const _,\n+                    c\"cfguard\".as_ptr() as *const _,\n                     2,\n                 )\n             }\n@@ -292,26 +297,26 @@ pub unsafe fn create_module<'ll>(\n             llvm::LLVMRustAddModuleFlag(\n                 llmod,\n                 behavior,\n-                \"branch-target-enforcement\\0\".as_ptr().cast(),\n+                c\"branch-target-enforcement\".as_ptr().cast(),\n                 bti.into(),\n             );\n             llvm::LLVMRustAddModuleFlag(\n                 llmod,\n                 behavior,\n-                \"sign-return-address\\0\".as_ptr().cast(),\n+                c\"sign-return-address\".as_ptr().cast(),\n                 pac_ret.is_some().into(),\n             );\n             let pac_opts = pac_ret.unwrap_or(PacRet { leaf: false, key: PAuthKey::A });\n             llvm::LLVMRustAddModuleFlag(\n                 llmod,\n                 behavior,\n-                \"sign-return-address-all\\0\".as_ptr().cast(),\n+                c\"sign-return-address-all\".as_ptr().cast(),\n                 pac_opts.leaf.into(),\n             );\n             llvm::LLVMRustAddModuleFlag(\n                 llmod,\n                 behavior,\n-                \"sign-return-address-with-bkey\\0\".as_ptr().cast(),\n+                c\"sign-return-address-with-bkey\".as_ptr().cast(),\n                 u32::from(pac_opts.key == PAuthKey::B),\n             );\n         } else {\n@@ -327,15 +332,15 @@ pub unsafe fn create_module<'ll>(\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Override,\n-            \"cf-protection-branch\\0\".as_ptr().cast(),\n+            c\"cf-protection-branch\".as_ptr().cast(),\n             1,\n         )\n     }\n     if let CFProtection::Return | CFProtection::Full = sess.opts.unstable_opts.cf_protection {\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Override,\n-            \"cf-protection-return\\0\".as_ptr().cast(),\n+            c\"cf-protection-return\".as_ptr().cast(),\n             1,\n         )\n     }\n@@ -344,7 +349,7 @@ pub unsafe fn create_module<'ll>(\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Error,\n-            \"Virtual Function Elim\\0\".as_ptr().cast(),\n+            c\"Virtual Function Elim\".as_ptr().cast(),\n             1,\n         );\n     }\n@@ -476,14 +481,13 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n     }\n \n     pub(crate) fn create_used_variable_impl(&self, name: &'static CStr, values: &[&'ll Value]) {\n-        let section = cstr!(\"llvm.metadata\");\n         let array = self.const_array(self.type_ptr_to(self.type_i8()), values);\n \n         unsafe {\n             let g = llvm::LLVMAddGlobal(self.llmod, self.val_ty(array), name.as_ptr());\n             llvm::LLVMSetInitializer(g, array);\n             llvm::LLVMRustSetLinkage(g, llvm::Linkage::AppendingLinkage);\n-            llvm::LLVMSetSection(g, section.as_ptr());\n+            llvm::LLVMSetSection(g, c\"llvm.metadata\".as_ptr());\n         }\n     }\n }"}, {"sha": "8be54b7eb7188adc2e63cef8b4f9a05b28cd3b87", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -38,7 +38,6 @@ pub fn get_or_insert_gdb_debug_scripts_section_global<'ll>(cx: &CodegenCx<'ll, '\n         unsafe { llvm::LLVMGetNamedGlobal(cx.llmod, c_section_var_name.as_ptr().cast()) };\n \n     section_var.unwrap_or_else(|| {\n-        let section_name = b\".debug_gdb_scripts\\0\";\n         let mut section_contents = Vec::new();\n \n         // Add the pretty printers for the standard library first.\n@@ -71,7 +70,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global<'ll>(cx: &CodegenCx<'ll, '\n             let section_var = cx\n                 .define_global(section_var_name, llvm_type)\n                 .unwrap_or_else(|| bug!(\"symbol `{}` is already defined\", section_var_name));\n-            llvm::LLVMSetSection(section_var, section_name.as_ptr().cast());\n+            llvm::LLVMSetSection(section_var, c\".debug_gdb_scripts\".as_ptr().cast());\n             llvm::LLVMSetInitializer(section_var, cx.const_bytes(section_contents));\n             llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n             llvm::LLVMSetUnnamedAddress(section_var, llvm::UnnamedAddr::Global);"}, {"sha": "166454d3ae74c53f3de8c8f211d6deac96663e9d", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -20,7 +20,6 @@ use crate::llvm::debuginfo::{\n };\n use crate::value::Value;\n \n-use cstr::cstr;\n use rustc_codegen_ssa::debuginfo::type_names::cpp_like_debuginfo;\n use rustc_codegen_ssa::debuginfo::type_names::VTableNameKind;\n use rustc_codegen_ssa::traits::*;\n@@ -812,7 +811,6 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n \n     let name_in_debuginfo = name_in_debuginfo.to_string_lossy();\n     let work_dir = tcx.sess.opts.working_dir.to_string_lossy(FileNameDisplayPreference::Remapped);\n-    let flags = \"\\0\";\n     let output_filenames = tcx.output_filenames(());\n     let split_name = if tcx.sess.target_can_use_split_dwarf() {\n         output_filenames\n@@ -849,7 +847,7 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n             producer.as_ptr().cast(),\n             producer.len(),\n             tcx.sess.opts.optimize != config::OptLevel::No,\n-            flags.as_ptr().cast(),\n+            c\"\".as_ptr().cast(),\n             0,\n             // NB: this doesn't actually have any perceptible effect, it seems. LLVM will instead\n             // put the path supplied to `MCSplitDwarfFile` into the debug info of the final\n@@ -878,8 +876,7 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n             );\n             let val = llvm::LLVMMetadataAsValue(debug_context.llcontext, gcov_metadata);\n \n-            let llvm_gcov_ident = cstr!(\"llvm.gcov\");\n-            llvm::LLVMAddNamedMetadataOperand(debug_context.llmod, llvm_gcov_ident.as_ptr(), val);\n+            llvm::LLVMAddNamedMetadataOperand(debug_context.llmod, c\"llvm.gcov\".as_ptr(), val);\n         }\n \n         // Insert `llvm.ident` metadata on the wasm targets since that will\n@@ -892,7 +889,7 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n             );\n             llvm::LLVMAddNamedMetadataOperand(\n                 debug_context.llmod,\n-                cstr!(\"llvm.ident\").as_ptr(),\n+                c\"llvm.ident\".as_ptr(),\n                 llvm::LLVMMDNodeInContext(debug_context.llcontext, &name_metadata, 1),\n             );\n         }"}, {"sha": "aa7ae9355bcfa29eba716bff1f54ba41c5ac56ca", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -113,25 +113,24 @@ impl<'ll, 'tcx> CodegenUnitDebugContext<'ll, 'tcx> {\n                 llvm::LLVMRustAddModuleFlag(\n                     self.llmod,\n                     llvm::LLVMModFlagBehavior::Warning,\n-                    \"Dwarf Version\\0\".as_ptr().cast(),\n+                    c\"Dwarf Version\".as_ptr().cast(),\n                     dwarf_version,\n                 );\n             } else {\n                 // Indicate that we want CodeView debug information on MSVC\n                 llvm::LLVMRustAddModuleFlag(\n                     self.llmod,\n                     llvm::LLVMModFlagBehavior::Warning,\n-                    \"CodeView\\0\".as_ptr().cast(),\n+                    c\"CodeView\".as_ptr().cast(),\n                     1,\n                 )\n             }\n \n             // Prevent bitcode readers from deleting the debug info.\n-            let ptr = \"Debug Info Version\\0\".as_ptr();\n             llvm::LLVMRustAddModuleFlag(\n                 self.llmod,\n                 llvm::LLVMModFlagBehavior::Warning,\n-                ptr.cast(),\n+                c\"Debug Info Version\".as_ptr().cast(),\n                 llvm::LLVMRustDebugMetadataVersion(),\n             );\n         }"}, {"sha": "ff9909c720e547906ae7107eec60f6272533a164", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17561ffc90c900cb7d0e96b00c6381244764ef7/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=a17561ffc90c900cb7d0e96b00c6381244764ef7", "patch": "@@ -11,6 +11,7 @@\n #![feature(let_chains)]\n #![feature(never_type)]\n #![feature(impl_trait_in_assoc_type)]\n+#![feature(c_str_literals)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}]}