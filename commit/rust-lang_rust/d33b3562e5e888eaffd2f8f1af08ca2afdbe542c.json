{"sha": "d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzM2IzNTYyZTVlODg4ZWFmZmQyZjhmMWFmMDhjYTJhZmRiZTU0MmM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-16T13:47:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-17T19:12:39Z"}, "message": "parser: Do not call `bump` recursively\n\nToken normalization is merged directly into `bump`.\nSpecial \"unknown macro variable\" diagnostic for unexpected `$`s is removed as preventing legal code from compiling.", "tree": {"sha": "c92a51b70f308f083c031111df7074227cd5a521", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c92a51b70f308f083c031111df7074227cd5a521"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "html_url": "https://github.com/rust-lang/rust/commit/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0176a9eef845e7421b7e2f7ef015333a41a7c027", "url": "https://api.github.com/repos/rust-lang/rust/commits/0176a9eef845e7421b7e2f7ef015333a41a7c027", "html_url": "https://github.com/rust-lang/rust/commit/0176a9eef845e7421b7e2f7ef015333a41a7c027"}], "stats": {"total": 90, "additions": 38, "deletions": 52}, "files": [{"sha": "6599e92222c75da0e453862eec407fdfd686e212", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "patch": "@@ -856,8 +856,6 @@ fn parse_nt(p: &mut Parser<'_>, sp: Span, name: Symbol) -> Nonterminal {\n     if name == sym::tt {\n         return token::NtTT(p.parse_token_tree());\n     }\n-    // check at the beginning and the parser checks after each bump\n-    p.process_potential_macro_variable();\n     match parse_nt_inner(p, sp, name) {\n         Ok(nt) => nt,\n         Err(mut err) => {"}, {"sha": "52e581e30f5378d403fb225ebe8c6ae87215427b", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "patch": "@@ -267,7 +267,6 @@ fn generic_extension<'cx>(\n                     cx.current_expansion.module.mod_path.last().map(|id| id.to_string());\n                 p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n \n-                p.process_potential_macro_variable();\n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros.\n                 return Box::new(ParserAnyMacro {"}, {"sha": "4f96d33b83f2f88853fb32967b1adcea4b0c0596", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 32, "deletions": 43, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "patch": "@@ -404,7 +404,8 @@ impl<'a> Parser<'a> {\n             subparser_name,\n         };\n \n-        parser.token = parser.next_tok();\n+        // Make parser point to the first token.\n+        parser.bump();\n \n         if let Some(directory) = directory {\n             parser.directory = directory;\n@@ -418,7 +419,6 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        parser.process_potential_macro_variable();\n         parser\n     }\n \n@@ -430,15 +430,15 @@ impl<'a> Parser<'a> {\n         self.unnormalized_prev_token.as_ref().unwrap_or(&self.prev_token)\n     }\n \n-    fn next_tok(&mut self) -> Token {\n+    fn next_tok(&mut self, fallback_span: Span) -> Token {\n         let mut next = if self.desugar_doc_comments {\n             self.token_cursor.next_desugared()\n         } else {\n             self.token_cursor.next()\n         };\n         if next.span.is_dummy() {\n             // Tweak the location for better diagnostics, but keep syntactic context intact.\n-            next.span = self.unnormalized_token().span.with_ctxt(next.span.ctxt());\n+            next.span = fallback_span.with_ctxt(next.span.ctxt());\n         }\n         next\n     }\n@@ -896,6 +896,24 @@ impl<'a> Parser<'a> {\n         self.parse_delim_comma_seq(token::Paren, f)\n     }\n \n+    // Interpolated identifier (`$i: ident`) and lifetime (`$l: lifetime`)\n+    // tokens are replaced with usual identifier and lifetime tokens,\n+    // so the former are never encountered during normal parsing.\n+    fn normalize_token(token: &Token) -> Option<Token> {\n+        match &token.kind {\n+            token::Interpolated(nt) => match **nt {\n+                token::NtIdent(ident, is_raw) => {\n+                    Some(Token::new(token::Ident(ident.name, is_raw), ident.span))\n+                }\n+                token::NtLifetime(ident) => {\n+                    Some(Token::new(token::Lifetime(ident.name), ident.span))\n+                }\n+                _ => None,\n+            },\n+            _ => None,\n+        }\n+    }\n+\n     /// Advance the parser by one token.\n     pub fn bump(&mut self) {\n         if self.prev_token.kind == TokenKind::Eof {\n@@ -905,16 +923,17 @@ impl<'a> Parser<'a> {\n         }\n \n         // Update the current and previous tokens.\n-        let next_token = self.next_tok();\n-        self.prev_token = mem::replace(&mut self.token, next_token);\n+        self.prev_token = self.token.take();\n         self.unnormalized_prev_token = self.unnormalized_token.take();\n+        self.token = self.next_tok(self.unnormalized_prev_token().span);\n+        if let Some(normalized_token) = Self::normalize_token(&self.token) {\n+            self.unnormalized_token = Some(mem::replace(&mut self.token, normalized_token));\n+        }\n \n         // Update fields derived from the previous token.\n         self.prev_span = self.unnormalized_prev_token().span;\n \n         self.expected_tokens.clear();\n-        // Check after each token.\n-        self.process_potential_macro_variable();\n     }\n \n     /// Advances the parser using provided token as a next one. Use this when\n@@ -924,9 +943,12 @@ impl<'a> Parser<'a> {\n     /// Correct token kinds and spans need to be calculated instead.\n     fn bump_with(&mut self, next: TokenKind, span: Span) {\n         // Update the current and previous tokens.\n-        let next_token = Token::new(next, span);\n-        self.prev_token = mem::replace(&mut self.token, next_token);\n+        self.prev_token = self.token.take();\n         self.unnormalized_prev_token = self.unnormalized_token.take();\n+        self.token = Token::new(next, span);\n+        if let Some(normalized_token) = Self::normalize_token(&self.token) {\n+            self.unnormalized_token = Some(mem::replace(&mut self.token, normalized_token));\n+        }\n \n         // Update fields derived from the previous token.\n         self.prev_span = self.unnormalized_prev_token().span.with_hi(span.lo());\n@@ -1066,39 +1088,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn process_potential_macro_variable(&mut self) {\n-        let normalized_token = match self.token.kind {\n-            token::Dollar\n-                if self.token.span.from_expansion() && self.look_ahead(1, |t| t.is_ident()) =>\n-            {\n-                self.bump();\n-                let name = match self.token.kind {\n-                    token::Ident(name, _) => name,\n-                    _ => unreachable!(),\n-                };\n-                let span = self.prev_span.to(self.token.span);\n-                self.struct_span_err(span, &format!(\"unknown macro variable `{}`\", name))\n-                    .span_label(span, \"unknown macro variable\")\n-                    .emit();\n-                self.bump();\n-                return;\n-            }\n-            token::Interpolated(ref nt) => {\n-                // Interpolated identifier and lifetime tokens are replaced with usual identifier\n-                // and lifetime tokens, so the former are never encountered during normal parsing.\n-                match **nt {\n-                    token::NtIdent(ident, is_raw) => {\n-                        Token::new(token::Ident(ident.name, is_raw), ident.span)\n-                    }\n-                    token::NtLifetime(ident) => Token::new(token::Lifetime(ident.name), ident.span),\n-                    _ => return,\n-                }\n-            }\n-            _ => return,\n-        };\n-        self.unnormalized_token = Some(mem::replace(&mut self.token, normalized_token));\n-    }\n-\n     /// Parses a single token tree from the input.\n     pub fn parse_token_tree(&mut self) -> TokenTree {\n         match self.token.kind {"}, {"sha": "25f1d6500726ee7b962d1312f2e575061b180eb6", "filename": "src/test/ui/issues/issue-6596-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.rs?ref=d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "patch": "@@ -1,7 +1,7 @@\n macro_rules! e {\n     ($inp:ident) => (\n         $nonexistent\n-        //~^ ERROR unknown macro variable `nonexistent`\n+        //~^ ERROR expected expression, found `$`\n     );\n }\n "}, {"sha": "216fe6472a5033187e793bb4f92067544ed6475c", "filename": "src/test/ui/issues/issue-6596-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr?ref=d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "patch": "@@ -1,8 +1,8 @@\n-error: unknown macro variable `nonexistent`\n+error: expected expression, found `$`\n   --> $DIR/issue-6596-1.rs:3:9\n    |\n LL |         $nonexistent\n-   |         ^^^^^^^^^^^^ unknown macro variable\n+   |         ^^^^^^^^^^^^ expected expression\n ...\n LL |     e!(foo);\n    |     -------- in this macro invocation"}, {"sha": "8f7c98d9a67a77baaee8f3f6332d56869631439c", "filename": "src/test/ui/issues/issue-6596-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs?ref=d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "patch": "@@ -3,7 +3,7 @@\n macro_rules! g {\n     ($inp:ident) => (\n         { $inp $nonexistent }\n-        //~^ ERROR unknown macro variable `nonexistent`\n+        //~^ ERROR expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `$`\n     );\n }\n "}, {"sha": "3d13c64f762ea5e6885fd16ffb52d0a2d08d8e27", "filename": "src/test/ui/issues/issue-6596-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr?ref=d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "patch": "@@ -1,8 +1,8 @@\n-error: unknown macro variable `nonexistent`\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `$`\n   --> $DIR/issue-6596-2.rs:5:16\n    |\n LL |         { $inp $nonexistent }\n-   |                ^^^^^^^^^^^^ unknown macro variable\n+   |                ^^^^^^^^^^^^ expected one of 8 possible tokens\n ...\n LL |     g!(foo);\n    |     -------- in this macro invocation"}]}