{"sha": "7897ee4d42e42d183d539fdf9fd5389ca249232a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4OTdlZTRkNDJlNDJkMTgzZDUzOWZkZjlmZDUzODljYTI0OTIzMmE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-11T18:38:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-11T18:38:36Z"}, "message": "Rollup merge of #52207 - RalfJung:unsafety-errors, r=estebank\n\nimprove error message shown for unsafe operations\n\nAdd a short explanation saying why undefined behavior could arise. In particular, the error many people got for \"creating a pointer to a packed field requires unsafe block\" was not worded great -- it lead to people just adding the unsafe block without considering if what they are doing follows the rules.\n\nI am not sure if a \"note\" is the right thing, but that was the easiest thing to add...\n\nInspired by @gnzlbg at https://github.com/rust-lang/rust/issues/46043#issuecomment-381544673", "tree": {"sha": "ea1a2231fbfc235f4e85851311bf1518b01bf684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea1a2231fbfc235f4e85851311bf1518b01bf684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7897ee4d42e42d183d539fdf9fd5389ca249232a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRk6sCRBK7hj4Ov3rIwAAdHIIAIlGRWFxErPl3GZHEx7hpK7g\nZFd35ym8J4kmsCgn0cdOGJNFeydR+VH1Fkl0eOx1Xz0G9LvVuO3YhtbFW3Ssu/hi\nQm7LAlQ7uzCfYaMn6zxCWu56I7KA/iWNg5N/hwZ4/saThDRYM/7eOwioUBDx34sR\nTT1Lfgt3JxsV5VbPmawk+lUD7KaVVjQ1Ihdw11e7SfqMpTOo1TX751AqExvf/aot\nFSefPYh6X4mLRgIjcJWDt8bgL2ObT7Z5QeFUQgMTIVp9p5/WzBKoSi6iGqNHtEDm\ntEiIpYrK2oVjqq0o879hsnypAy2hYMsmhoAwTUxrXjSaDbEYkKXLgK77awLemqE=\n=S+Ly\n-----END PGP SIGNATURE-----\n", "payload": "tree ea1a2231fbfc235f4e85851311bf1518b01bf684\nparent 74cc821fd583844fb3e4a0ebbe78a1962e87c4bd\nparent f68323b28adf9b5ac1d85abe48915bc189aed813\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1531334316 -0600\ncommitter GitHub <noreply@github.com> 1531334316 -0600\n\nRollup merge of #52207 - RalfJung:unsafety-errors, r=estebank\n\nimprove error message shown for unsafe operations\n\nAdd a short explanation saying why undefined behavior could arise. In particular, the error many people got for \"creating a pointer to a packed field requires unsafe block\" was not worded great -- it lead to people just adding the unsafe block without considering if what they are doing follows the rules.\n\nI am not sure if a \"note\" is the right thing, but that was the easiest thing to add...\n\nInspired by @gnzlbg at https://github.com/rust-lang/rust/issues/46043#issuecomment-381544673\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7897ee4d42e42d183d539fdf9fd5389ca249232a", "html_url": "https://github.com/rust-lang/rust/commit/7897ee4d42e42d183d539fdf9fd5389ca249232a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7897ee4d42e42d183d539fdf9fd5389ca249232a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74cc821fd583844fb3e4a0ebbe78a1962e87c4bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/74cc821fd583844fb3e4a0ebbe78a1962e87c4bd", "html_url": "https://github.com/rust-lang/rust/commit/74cc821fd583844fb3e4a0ebbe78a1962e87c4bd"}, {"sha": "f68323b28adf9b5ac1d85abe48915bc189aed813", "url": "https://api.github.com/repos/rust-lang/rust/commits/f68323b28adf9b5ac1d85abe48915bc189aed813", "html_url": "https://github.com/rust-lang/rust/commit/f68323b28adf9b5ac1d85abe48915bc189aed813"}], "stats": {"total": 164, "additions": 114, "deletions": 50}, "files": [{"sha": "ed2127cc755fc5f47dbddac5184357e97feda701", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -32,7 +32,7 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n });\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, var_hir_id, by_ref, mutability });\n impl_stable_hash_for!(struct mir::BasicBlockData<'tcx> { statements, terminator, is_cleanup });\n-impl_stable_hash_for!(struct mir::UnsafetyViolation { source_info, description, kind });\n+impl_stable_hash_for!(struct mir::UnsafetyViolation { source_info, description, details, kind });\n impl_stable_hash_for!(struct mir::UnsafetyCheckResult { violations, unsafe_blocks });\n \n impl<'a> HashStable<StableHashingContext<'a>>"}, {"sha": "f8f8753e214e85af15f9218388712ee4af5a05c9", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -2377,6 +2377,7 @@ pub enum UnsafetyViolationKind {\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n     pub description: InternedString,\n+    pub details: InternedString,\n     pub kind: UnsafetyViolationKind,\n }\n "}, {"sha": "7768e96d036125f007511c52794f4b7eab6791e7", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -85,7 +85,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let func_ty = func.ty(self.mir, self.tcx);\n                 let sig = func_ty.fn_sig(self.tcx);\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n-                    self.require_unsafe(\"call to unsafe function\")\n+                    self.require_unsafe(\"call to unsafe function\",\n+                        \"consult the function's documentation for information on how to avoid \\\n+                         undefined behavior\")\n                 }\n             }\n         }\n@@ -112,7 +114,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             }\n \n             StatementKind::InlineAsm { .. } => {\n-                self.require_unsafe(\"use of inline assembly\")\n+                self.require_unsafe(\"use of inline assembly\",\n+                    \"inline assembly is entirely unchecked and can cause undefined behavior\")\n             },\n         }\n         self.super_statement(block, statement, location);\n@@ -151,6 +154,11 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 self.register_violations(&[UnsafetyViolation {\n                     source_info,\n                     description: Symbol::intern(\"borrow of packed field\").as_interned_str(),\n+                    details:\n+                        Symbol::intern(\"fields of packed structs might be misaligned: \\\n+                                        dereferencing a misaligned pointer or even just creating a \\\n+                                        misaligned reference is undefined behavior\")\n+                            .as_interned_str(),\n                     kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n                 }], &[]);\n             }\n@@ -172,7 +180,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let base_ty = base.ty(self.mir, self.tcx).to_ty(self.tcx);\n                 match base_ty.sty {\n                     ty::TyRawPtr(..) => {\n-                        self.require_unsafe(\"dereference of raw pointer\")\n+                        self.require_unsafe(\"dereference of raw pointer\",\n+                            \"raw pointers may be NULL, dangling or unaligned; they can violate \\\n+                             aliasing rules and cause data races: all of these are undefined \\\n+                             behavior\")\n                     }\n                     ty::TyAdt(adt, _) => {\n                         if adt.is_union() {\n@@ -190,12 +201,17 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                                 if elem_ty.moves_by_default(self.tcx, self.param_env,\n                                                             self.source_info.span) {\n                                     self.require_unsafe(\n-                                        \"assignment to non-`Copy` union field\")\n+                                        \"assignment to non-`Copy` union field\",\n+                                        \"the previous content of the field will be dropped, which \\\n+                                         causes undefined behavior if the field was not properly \\\n+                                         initialized\")\n                                 } else {\n                                     // write to non-move union, safe\n                                 }\n                             } else {\n-                                self.require_unsafe(\"access to union field\")\n+                                self.require_unsafe(\"access to union field\",\n+                                    \"the field may not be properly initialized: using \\\n+                                     uninitialized data will cause undefined behavior\")\n                             }\n                         }\n                     }\n@@ -208,14 +224,21 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             }\n             &Place::Static(box Static { def_id, ty: _ }) => {\n                 if self.tcx.is_static(def_id) == Some(hir::Mutability::MutMutable) {\n-                    self.require_unsafe(\"use of mutable static\");\n+                    self.require_unsafe(\"use of mutable static\",\n+                        \"mutable statics can be mutated by multiple threads: aliasing violations \\\n+                         or data races will cause undefined behavior\");\n                 } else if self.tcx.is_foreign_item(def_id) {\n                     let source_info = self.source_info;\n                     let lint_root =\n                         self.source_scope_local_data[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n                         description: Symbol::intern(\"use of extern static\").as_interned_str(),\n+                        details:\n+                            Symbol::intern(\"extern statics are not controlled by the Rust type \\\n+                                            system: invalid data, aliasing violations or data \\\n+                                            races will cause undefined behavior\")\n+                                .as_interned_str(),\n                         kind: UnsafetyViolationKind::ExternStatic(lint_root)\n                     }], &[]);\n                 }\n@@ -227,12 +250,14 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn require_unsafe(&mut self,\n-                      description: &'static str)\n+                      description: &'static str,\n+                      details: &'static str)\n     {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n             source_info,\n             description: Symbol::intern(description).as_interned_str(),\n+            details: Symbol::intern(details).as_interned_str(),\n             kind: UnsafetyViolationKind::General,\n         }], &[]);\n     }\n@@ -437,33 +462,36 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     } = tcx.unsafety_check_result(def_id);\n \n     for &UnsafetyViolation {\n-        source_info, description, kind\n+        source_info, description, details, kind\n     } in violations.iter() {\n         // Report an error.\n         match kind {\n             UnsafetyViolationKind::General => {\n                 struct_span_err!(\n                     tcx.sess, source_info.span, E0133,\n-                    \"{} requires unsafe function or block\", description)\n+                    \"{} is unsafe and requires unsafe function or block\", description)\n                     .span_label(source_info.span, &description.as_str()[..])\n+                    .note(&details.as_str()[..])\n                     .emit();\n             }\n             UnsafetyViolationKind::ExternStatic(lint_node_id) => {\n-                tcx.lint_node(SAFE_EXTERN_STATICS,\n+                tcx.lint_node_note(SAFE_EXTERN_STATICS,\n                               lint_node_id,\n                               source_info.span,\n-                              &format!(\"{} requires unsafe function or \\\n-                                        block (error E0133)\", &description.as_str()[..]));\n+                              &format!(\"{} is unsafe and requires unsafe function or block \\\n+                                        (error E0133)\", &description.as_str()[..]),\n+                              &details.as_str()[..]);\n             }\n             UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n                     tcx.unsafe_derive_on_repr_packed(impl_def_id);\n                 } else {\n-                    tcx.lint_node(SAFE_PACKED_BORROWS,\n+                    tcx.lint_node_note(SAFE_PACKED_BORROWS,\n                                   lint_node_id,\n                                   source_info.span,\n-                                  &format!(\"{} requires unsafe function or \\\n-                                            block (error E0133)\", &description.as_str()[..]));\n+                                  &format!(\"{} is unsafe and requires unsafe function or block \\\n+                                            (error E0133)\", &description.as_str()[..]),\n+                                  &details.as_str()[..]);\n                 }\n             }\n         }"}, {"sha": "5fad4c3677c0d79b1360f124ad155fe54fcb2764", "filename": "src/test/compile-fail/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -17,5 +17,5 @@ mod test {\n \n fn main() {\n     test::free();\n-    //~^ ERROR call to unsafe function requires unsafe function or block\n+    //~^ ERROR call to unsafe function is unsafe\n }"}, {"sha": "9e599cebd7a1ceb8266a4ef1716a3d2be643f7da", "filename": "src/test/compile-fail/init-unsafe.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Finit-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Finit-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finit-unsafe.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -12,7 +12,7 @@\n \n use std::intrinsics::{init};\n \n-// Test that the `forget` and `init` intrinsics are really unsafe\n+// Test that the `init` intrinsic is really unsafe\n pub fn main() {\n-    let stuff = init::<isize>(); //~ ERROR call to unsafe function requires unsafe\n+    let stuff = init::<isize>(); //~ ERROR call to unsafe function is unsafe\n }", "previous_filename": "src/test/compile-fail/forget-init-unsafe.rs"}, {"sha": "7b1364ff41c4023754343aa601bd9c38ccd74cf7", "filename": "src/test/compile-fail/issue-43733.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -27,12 +27,12 @@ fn __getit() -> std::option::Option<\n     &'static std::cell::UnsafeCell<\n         std::option::Option<Foo>>>\n {\n-    __KEY.get() //~ ERROR call to unsafe function requires unsafe\n+    __KEY.get() //~ ERROR call to unsafe function is unsafe\n }\n \n static FOO: std::thread::LocalKey<Foo> =\n     std::thread::LocalKey::new(__getit, Default::default);\n-//~^ ERROR call to unsafe function requires unsafe\n+//~^ ERROR call to unsafe function is unsafe\n \n fn main() {\n     FOO.with(|foo| println!(\"{}\", foo.borrow()));"}, {"sha": "5af0bf6be56e93147665903733a5106a985724cd", "filename": "src/test/compile-fail/issue-45087-unreachable-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fissue-45087-unreachable-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fissue-45087-unreachable-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-45087-unreachable-unsafe.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     return;\n     *(1 as *mut u32) = 42;\n-    //~^ ERROR dereference of raw pointer requires unsafe\n+    //~^ ERROR dereference of raw pointer is unsafe\n }"}, {"sha": "b42ced07583f4f0fc63df3fe40f5c11047a9850d", "filename": "src/test/compile-fail/issue-45729-unsafe-in-generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fissue-45729-unsafe-in-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fissue-45729-unsafe-in-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-45729-unsafe-in-generator.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -13,7 +13,7 @@\n fn main() {\n     let _ = || {\n         *(1 as *mut u32) = 42;\n-        //~^ ERROR dereference of raw pointer requires unsafe\n+        //~^ ERROR dereference of raw pointer is unsafe\n         yield;\n     };\n }"}, {"sha": "683ef876f4e37ca7ac3b4e0bb3c9bdde1d275589", "filename": "src/test/compile-fail/issue-47412.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fissue-47412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fissue-47412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-47412.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -19,13 +19,13 @@ fn union_field() {\n     union Union { unit: (), void: Void }\n     let u = Union { unit: () };\n     match u.void {}\n-    //~^ ERROR access to union field requires unsafe function or block\n+    //~^ ERROR access to union field is unsafe\n }\n \n fn raw_ptr_deref() {\n     let ptr = std::ptr::null::<Void>();\n     match *ptr {}\n-    //~^ ERROR dereference of raw pointer requires unsafe function or block\n+    //~^ ERROR dereference of raw pointer is unsafe\n }\n \n fn main() {}"}, {"sha": "35ea6dd52c4f28fe29ff3cc19f326ca5e9fb46b4", "filename": "src/test/compile-fail/safe-extern-statics-mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics-mut.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -18,8 +18,8 @@ extern {\n }\n \n fn main() {\n-    let b = B; //~ ERROR use of mutable static requires unsafe function or block\n-    let rb = &B; //~ ERROR use of mutable static requires unsafe function or block\n-    let xb = XB; //~ ERROR use of mutable static requires unsafe function or block\n-    let xrb = &XB; //~ ERROR use of mutable static requires unsafe function or block\n+    let b = B; //~ ERROR use of mutable static is unsafe\n+    let rb = &B; //~ ERROR use of mutable static is unsafe\n+    let xb = XB; //~ ERROR use of mutable static is unsafe\n+    let xrb = &XB; //~ ERROR use of mutable static is unsafe\n }"}, {"sha": "83aa4b3316da0b7b9781ac2df49f1e977525c66c", "filename": "src/test/compile-fail/safe-extern-statics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -20,12 +20,12 @@ extern {\n }\n \n fn main() {\n-    let a = A; //~ ERROR use of extern static requires unsafe function or block\n+    let a = A; //~ ERROR use of extern static is unsafe\n                //~^ WARN this was previously accepted by the compiler\n-    let ra = &A; //~ ERROR use of extern static requires unsafe function or block\n+    let ra = &A; //~ ERROR use of extern static is unsafe\n                  //~^ WARN this was previously accepted by the compiler\n-    let xa = XA; //~ ERROR use of extern static requires unsafe function or block\n+    let xa = XA; //~ ERROR use of extern static is unsafe\n                  //~^ WARN this was previously accepted by the compiler\n-    let xra = &XA; //~ ERROR use of extern static requires unsafe function or block\n+    let xra = &XA; //~ ERROR use of extern static is unsafe\n                    //~^ WARN this was previously accepted by the compiler\n }"}, {"sha": "d993816e6f476f6234f1e8db55766ef8362bb0c8", "filename": "src/test/compile-fail/union/union-unsafe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -28,7 +28,7 @@ union U4<T: Copy> {\n \n fn generic_noncopy<T: Default>() {\n     let mut u3 = U3 { a: T::default() };\n-    u3.a = T::default(); //~ ERROR assignment to non-`Copy` union field requires unsafe\n+    u3.a = T::default(); //~ ERROR assignment to non-`Copy` union field is unsafe\n }\n \n fn generic_copy<T: Copy + Default>() {\n@@ -40,16 +40,16 @@ fn generic_copy<T: Copy + Default>() {\n \n fn main() {\n     let mut u1 = U1 { a: 10 }; // OK\n-    let a = u1.a; //~ ERROR access to union field requires unsafe\n+    let a = u1.a; //~ ERROR access to union field is unsafe\n     u1.a = 11; // OK\n-    let U1 { a } = u1; //~ ERROR access to union field requires unsafe\n-    if let U1 { a: 12 } = u1 {} //~ ERROR access to union field requires unsafe\n+    let U1 { a } = u1; //~ ERROR access to union field is unsafe\n+    if let U1 { a: 12 } = u1 {} //~ ERROR access to union field is unsafe\n     // let U1 { .. } = u1; // OK\n \n     let mut u2 = U2 { a: String::from(\"old\") }; // OK\n-    u2.a = String::from(\"new\"); //~ ERROR assignment to non-`Copy` union field requires unsafe\n+    u2.a = String::from(\"new\"); //~ ERROR assignment to non-`Copy` union field is unsafe\n     let mut u3 = U3 { a: 0 }; // OK\n     u3.a = 1; // OK\n     let mut u3 = U3 { a: String::from(\"old\") }; // OK\n-    u3.a = String::from(\"new\"); //~ ERROR assignment to non-`Copy` union field requires unsafe\n+    u3.a = String::from(\"new\"); //~ ERROR assignment to non-`Copy` union field is unsafe\n }"}, {"sha": "baf2002a94fc905157f2e3403c5219e98a5c2a67", "filename": "src/test/compile-fail/unsafe-fn-assign-deref-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -11,7 +11,7 @@\n \n \n fn f(p: *mut u8) {\n-    *p = 0; //~ ERROR dereference of raw pointer requires unsafe function or block\n+    *p = 0; //~ ERROR dereference of raw pointer is unsafe\n     return;\n }\n "}, {"sha": "46f28da43d03b4493cbc5ce12750482fe2009f8a", "filename": "src/test/compile-fail/unsafe-fn-called-from-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funsafe-fn-called-from-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funsafe-fn-called-from-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-called-from-safe.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -12,5 +12,5 @@\n unsafe fn f() { return; }\n \n fn main() {\n-    f(); //~ ERROR call to unsafe function requires unsafe function or block\n+    f(); //~ ERROR call to unsafe function is unsafe\n }"}, {"sha": "8e3ce8ff9b57d84fa1c373afeb7ae1f8b73ca21d", "filename": "src/test/compile-fail/unsafe-fn-deref-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -10,7 +10,7 @@\n \n \n fn f(p: *const u8) -> u8 {\n-    return *p; //~ ERROR dereference of raw pointer requires unsafe function or block\n+    return *p; //~ ERROR dereference of raw pointer is unsafe\n }\n \n fn main() {"}, {"sha": "f09a0c7107a8a847e41bf8ab86d32669068c94ab", "filename": "src/test/compile-fail/unsafe-fn-used-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-as-value.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -13,5 +13,5 @@ unsafe fn f() { return; }\n \n fn main() {\n     let x = f;\n-    x();    //~ ERROR call to unsafe function requires unsafe function or block\n+    x();    //~ ERROR call to unsafe function is unsafe\n }"}, {"sha": "b4e425e7bbff130ecdaa3c230735d5ca1200408e", "filename": "src/test/compile-fail/unsafe-move-val-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funsafe-move-val-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fcompile-fail%2Funsafe-move-val-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-move-val-init.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -16,5 +16,5 @@ use std::intrinsics;\n // as unsafe.\n fn main() {\n     intrinsics::move_val_init(1 as *mut u32, 1);\n-    //~^ ERROR dereference of raw pointer requires unsafe function or block\n+    //~^ ERROR dereference of raw pointer is unsafe\n }"}, {"sha": "9be80f8f21baa4dcb6c8b62f2fa0a5c9cd035679", "filename": "src/test/ui/error-codes/E0133.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Ferror-codes%2FE0133.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Ferror-codes%2FE0133.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.stderr?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -1,8 +1,10 @@\n-error[E0133]: call to unsafe function requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/E0133.rs:14:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: aborting due to previous error\n "}, {"sha": "f88c2137e77ef44353eb51728ff18e35d2133a90", "filename": "src/test/ui/issue-27060.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Fissue-27060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Fissue-27060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27060.rs?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -33,9 +33,9 @@ fn main() {\n         let _ = &good.data2[0]; // ok\n     }\n \n-    let _ = &good.data; //~ ERROR borrow of packed field requires unsafe\n+    let _ = &good.data; //~ ERROR borrow of packed field is unsafe\n                         //~| hard error\n-    let _ = &good.data2[0]; //~ ERROR borrow of packed field requires unsafe\n+    let _ = &good.data2[0]; //~ ERROR borrow of packed field is unsafe\n                             //~| hard error\n     let _ = &*good.data; // ok, behind a pointer\n     let _ = &good.aligned; // ok, has align 1", "previous_filename": "src/test/compile-fail/issue-27060.rs"}, {"sha": "bd01f75d8fbc991ba2eef7bdc47bf705d5789119", "filename": "src/test/ui/issue-27060.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Fissue-27060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Fissue-27060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27060.stderr?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -0,0 +1,27 @@\n+error: borrow of packed field is unsafe and requires unsafe function or block (error E0133)\n+  --> $DIR/issue-27060.rs:36:13\n+   |\n+LL |     let _ = &good.data; //~ ERROR borrow of packed field is unsafe\n+   |             ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-27060.rs:23:8\n+   |\n+LL | #[deny(safe_packed_borrows)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+error: borrow of packed field is unsafe and requires unsafe function or block (error E0133)\n+  --> $DIR/issue-27060.rs:38:13\n+   |\n+LL |     let _ = &good.data2[0]; //~ ERROR borrow of packed field is unsafe\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "aef0d9cd1d8c6bba1267a8490c8d56e38a2acf09", "filename": "src/test/ui/issue-28776.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Fissue-28776.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Fissue-28776.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28776.stderr?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -1,8 +1,10 @@\n-error[E0133]: call to unsafe function requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/issue-28776.rs:14:5\n    |\n LL |     (&ptr::write)(1 as *mut _, 42);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: aborting due to previous error\n "}, {"sha": "0b7b6e6167867b08e4ea7e17a71e7fdde84223c7", "filename": "src/test/ui/trait-safety-fn-body.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Ftrait-safety-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Ftrait-safety-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-safety-fn-body.stderr?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -1,8 +1,10 @@\n-error[E0133]: dereference of raw pointer requires unsafe function or block\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n   --> $DIR/trait-safety-fn-body.rs:21:9\n    |\n LL |         *self += 1;\n    |         ^^^^^^^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: aborting due to previous error\n "}, {"sha": "d4b3ed687e5e43b956c595f7004e9f29cb1d9e00", "filename": "src/test/ui/unsafe-const-fn.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Funsafe-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7897ee4d42e42d183d539fdf9fd5389ca249232a/src%2Ftest%2Fui%2Funsafe-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe-const-fn.stderr?ref=7897ee4d42e42d183d539fdf9fd5389ca249232a", "patch": "@@ -1,8 +1,10 @@\n-error[E0133]: call to unsafe function requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-const-fn.rs:19:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);\n    |                  ^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: aborting due to previous error\n "}]}