{"sha": "5b3c3511c9f69c047a5eb804c91f984d83779c83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViM2MzNTExYzlmNjljMDQ3YTVlYjgwNGM5MWY5ODRkODM3NzljODM=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2014-09-12T00:39:57Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2014-09-12T00:40:46Z"}, "message": "Fix bug in padding unicode, #17105.", "tree": {"sha": "2d5fa89fc4820670a356272ad5c6bcebe8b130cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d5fa89fc4820670a356272ad5c6bcebe8b130cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b3c3511c9f69c047a5eb804c91f984d83779c83", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3c3511c9f69c047a5eb804c91f984d83779c83", "html_url": "https://github.com/rust-lang/rust/commit/5b3c3511c9f69c047a5eb804c91f984d83779c83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b3c3511c9f69c047a5eb804c91f984d83779c83/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c0b1d28ac28ca42d6c179293e333a012a8a3fc", "html_url": "https://github.com/rust-lang/rust/commit/06c0b1d28ac28ca42d6c179293e333a012a8a3fc"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "3244a72897fbb1eeb75fd2a0fb16233b5068a78a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b3c3511c9f69c047a5eb804c91f984d83779c83/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3c3511c9f69c047a5eb804c91f984d83779c83/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=5b3c3511c9f69c047a5eb804c91f984d83779c83", "patch": "@@ -476,7 +476,7 @@ impl<'a> Formatter<'a> {\n \n         let mut prefixed = false;\n         if self.flags & (1 << (FlagAlternate as uint)) != 0 {\n-            prefixed = true; width += prefix.len();\n+            prefixed = true; width += prefix.char_len();\n         }\n \n         // Writes the sign if it exists, and then the prefix if it was requested\n@@ -562,7 +562,7 @@ impl<'a> Formatter<'a> {\n             // If we're under both the maximum and the minimum width, then fill\n             // up the minimum width with the specified string + some alignment.\n             Some(width) => {\n-                self.with_padding(width - s.len(), rt::AlignLeft, |me| {\n+                self.with_padding(width - s.char_len(), rt::AlignLeft, |me| {\n                     me.buf.write(s.as_bytes())\n                 })\n             }"}, {"sha": "78e17bb22bd0315c85abb1467a58adeb39efceb1", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b3c3511c9f69c047a5eb804c91f984d83779c83/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3c3511c9f69c047a5eb804c91f984d83779c83/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=5b3c3511c9f69c047a5eb804c91f984d83779c83", "patch": "@@ -25,6 +25,7 @@ use std::str;\n \n struct A;\n struct B;\n+struct C;\n \n impl fmt::Signed for A {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -36,6 +37,11 @@ impl fmt::Signed for B {\n         f.write(\"adios\".as_bytes())\n     }\n }\n+impl fmt::Show for C {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad_integral(true, \"\u2603\", \"123\".as_bytes())\n+    }\n+}\n \n macro_rules! t(($a:expr, $b:expr) => { assert_eq!($a.as_slice(), $b) })\n \n@@ -81,13 +87,15 @@ pub fn main() {\n     t!(format!(\"{} {0}\", \"a\"), \"a a\");\n     t!(format!(\"{foo_bar}\", foo_bar=1i), \"1\");\n     t!(format!(\"{:d}\", 5i + 5i), \"10\");\n+    t!(format!(\"{:#4}\", C), \"\u2603123\");\n \n     let a: &fmt::Show = &1i;\n     t!(format!(\"{}\", a), \"1\");\n \n     // Formatting strings and their arguments\n     t!(format!(\"{:s}\", \"a\"), \"a\");\n     t!(format!(\"{:4s}\", \"a\"), \"a   \");\n+    t!(format!(\"{:4s}\", \"\u2603\"), \"\u2603   \");\n     t!(format!(\"{:>4s}\", \"a\"), \"   a\");\n     t!(format!(\"{:<4s}\", \"a\"), \"a   \");\n     t!(format!(\"{:^5s}\", \"a\"),  \"  a  \");"}]}