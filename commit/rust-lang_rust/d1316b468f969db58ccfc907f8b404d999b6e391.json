{"sha": "d1316b468f969db58ccfc907f8b404d999b6e391", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzE2YjQ2OGY5NjlkYjU4Y2NmYzkwN2Y4YjQwNGQ5OTliNmUzOTE=", "commit": {"author": {"name": "Ryan Thomas", "email": "ryan@ryant.org", "date": "2017-06-22T19:49:22Z"}, "committer": {"name": "Ryan Thomas", "email": "ryan@ryant.org", "date": "2017-07-02T16:42:02Z"}, "message": "Add docs for Debug* structs. #29355\n\nThis adds docs for the Debug* structs as well as examples from the\nFormatter::debug_* methods, so that a user knows how to construct them.\n\nI added these examples as the builders module is not public and hence\nthe debug_*_new() functions are not available to a user.\n\nr? @steveklabnik\n\nReview comments.\n\nMainly adding in the links for all of the structs and functions.\n\nRemove rust tag on code blocks.", "tree": {"sha": "07fac38b48d58f282701b8f6caf9a70949c9df26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07fac38b48d58f282701b8f6caf9a70949c9df26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1316b468f969db58ccfc907f8b404d999b6e391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1316b468f969db58ccfc907f8b404d999b6e391", "html_url": "https://github.com/rust-lang/rust/commit/d1316b468f969db58ccfc907f8b404d999b6e391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1316b468f969db58ccfc907f8b404d999b6e391/comments", "author": {"login": "rthomas", "id": 564080, "node_id": "MDQ6VXNlcjU2NDA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/564080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rthomas", "html_url": "https://github.com/rthomas", "followers_url": "https://api.github.com/users/rthomas/followers", "following_url": "https://api.github.com/users/rthomas/following{/other_user}", "gists_url": "https://api.github.com/users/rthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/rthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rthomas/subscriptions", "organizations_url": "https://api.github.com/users/rthomas/orgs", "repos_url": "https://api.github.com/users/rthomas/repos", "events_url": "https://api.github.com/users/rthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/rthomas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rthomas", "id": 564080, "node_id": "MDQ6VXNlcjU2NDA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/564080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rthomas", "html_url": "https://github.com/rthomas", "followers_url": "https://api.github.com/users/rthomas/followers", "following_url": "https://api.github.com/users/rthomas/following{/other_user}", "gists_url": "https://api.github.com/users/rthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/rthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rthomas/subscriptions", "organizations_url": "https://api.github.com/users/rthomas/orgs", "repos_url": "https://api.github.com/users/rthomas/repos", "events_url": "https://api.github.com/users/rthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/rthomas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab5bec25530aac43dfd64384b405c909b6e405e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5bec25530aac43dfd64384b405c909b6e405e3", "html_url": "https://github.com/rust-lang/rust/commit/ab5bec25530aac43dfd64384b405c909b6e405e3"}], "stats": {"total": 139, "additions": 129, "deletions": 10}, "files": [{"sha": "322df6e5b47c690e5d05d0204de35701b40d9065", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 129, "deletions": 10, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/d1316b468f969db58ccfc907f8b404d999b6e391/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1316b468f969db58ccfc907f8b404d999b6e391/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=d1316b468f969db58ccfc907f8b404d999b6e391", "patch": "@@ -49,9 +49,37 @@ impl<'a, 'b: 'a> fmt::Write for PadAdapter<'a, 'b> {\n     }\n }\n \n-/// A struct to help with `fmt::Debug` implementations.\n+/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n ///\n-/// Constructed by the `Formatter::debug_struct` method.\n+/// This is useful when you wish to output a formatted struct as a part of your\n+/// [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+///\n+/// This can be constructed by the\n+/// [`Formatter::debug_struct`](struct.Formatter.html#method.debug_struct)\n+/// method.\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Foo {\n+///     bar: i32,\n+///     baz: String,\n+/// }\n+///\n+/// impl fmt::Debug for Foo {\n+///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+///         fmt.debug_struct(\"Foo\")\n+///            .field(\"bar\", &self.bar)\n+///            .field(\"baz\", &self.baz)\n+///            .finish()\n+///     }\n+/// }\n+///\n+/// // prints \"Foo { bar: 10, baz: \"Hello World\" }\"\n+/// println!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() });\n+/// ```\n #[must_use]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n@@ -116,9 +144,34 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     }\n }\n \n-/// A struct to help with `fmt::Debug` implementations.\n+/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+///\n+/// This is useful when you wish to output a formatted tuple as a part of your\n+/// [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+///\n+/// This can be constructed by the\n+/// [`Formatter::debug_tuple`](struct.Formatter.html#method.debug_tuple)\n+/// method.\n ///\n-/// Constructed by the `Formatter::debug_tuple` method.\n+/// # Example\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Foo(i32, String);\n+///\n+/// impl fmt::Debug for Foo {\n+///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+///         fmt.debug_tuple(\"Foo\")\n+///            .field(&self.0)\n+///            .field(&self.1)\n+///            .finish()\n+///     }\n+/// }\n+///\n+/// // prints \"Foo(10, \"Hello World\")\"\n+/// println!(\"{:?}\", Foo(10, \"Hello World\".to_string()));\n+/// ```\n #[must_use]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n@@ -228,9 +281,31 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n     }\n }\n \n-/// A struct to help with `fmt::Debug` implementations.\n+/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+///\n+/// This is useful when you wish to output a formatted set of items as a part\n+/// of your [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+///\n+/// This can be constructed by the\n+/// [`Formatter::debug_set`](struct.Formatter.html#method.debug_set)\n+/// method.\n+///\n+/// # Example\n ///\n-/// Constructed by the `Formatter::debug_set` method.\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Foo(Vec<i32>);\n+///\n+/// impl fmt::Debug for Foo {\n+///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+///         fmt.debug_set().entries(self.0.iter()).finish()\n+///     }\n+/// }\n+///\n+/// // prints \"{10, 11}\"\n+/// println!(\"{:?}\", Foo(vec![10, 11]));\n+/// ```\n #[must_use]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n@@ -277,9 +352,31 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     }\n }\n \n-/// A struct to help with `fmt::Debug` implementations.\n+/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+///\n+/// This is useful when you wish to output a formatted list of items as a part\n+/// of your [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+///\n+/// This can be constructed by the\n+/// [`Formatter::debug_list`](struct.Formatter.html#method.debug_list)\n+/// method.\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Foo(Vec<i32>);\n ///\n-/// Constructed by the `Formatter::debug_list` method.\n+/// impl fmt::Debug for Foo {\n+///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+///         fmt.debug_list().entries(self.0.iter()).finish()\n+///     }\n+/// }\n+///\n+/// // prints \"[10, 11]\"\n+/// println!(\"{:?}\", Foo(vec![10, 11]));\n+/// ```\n #[must_use]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n@@ -326,9 +423,31 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     }\n }\n \n-/// A struct to help with `fmt::Debug` implementations.\n+/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+///\n+/// This is useful when you wish to output a formatted map as a part of your\n+/// [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+///\n+/// This can be constructed by the\n+/// [`Formatter::debug_map`](struct.Formatter.html#method.debug_map)\n+/// method.\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Foo(Vec<(String, i32)>);\n+///\n+/// impl fmt::Debug for Foo {\n+///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+///         fmt.debug_map().entries(self.0.iter().map(|&(ref k, ref v)| (k, v))).finish()\n+///     }\n+/// }\n ///\n-/// Constructed by the `Formatter::debug_map` method.\n+/// // prints \"{\"A\": 10, \"B\": 11}\"\n+/// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n+/// ```\n #[must_use]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]"}]}