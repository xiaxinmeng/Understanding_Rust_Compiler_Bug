{"sha": "104fad65daaa6ab103ba8815244afa8243421594", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNGZhZDY1ZGFhYTZhYjEwM2JhODgxNTI0NGFmYTgyNDM0MjE1OTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-24T22:09:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T22:09:28Z"}, "message": "Merge #5025\n\n5025: Don't mess with messy temp dir and just download into extension dir r=matklad a=Veetaha\n\nTemp dirs are messy. Dealing with them requires handling quite a bunch of\r\nedge cases. As proposed by lnicola this seems better to just put the temp files\r\nin the extension dir and not care much about suddenly leaving garbage.\r\nInstead we get shorter and less platform-caveat-y code.\r\nWe will also assume users don't try to issue a download in different vscode windows simultaneously.\r\n\r\nFixes #5019 \n\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "1318ecab53002e3bc0d61de25665ce3a146bde1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1318ecab53002e3bc0d61de25665ce3a146bde1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104fad65daaa6ab103ba8815244afa8243421594", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe888YCRBK7hj4Ov3rIwAAdHIIAFCTK+XSm07PsLmWno/Slqhb\ncuTk/mV7/5ZXHWoc8wiiE4pG6N1mbbNaSnnroagEDYl+C0l5m9bNdaMgHGOAnzh7\nZqUhsjIbrjqLjptsZDCGl5UpY/Uhkeg0OqXuV56wAyc4LNAuFTi+ruK/hvqEOyhe\nJzje+2VhJUU5Izcne/pw4Zmd4JLS/gAX5emKdoBPLxgdgwZzWacaOJtXu/vR26Hn\nAlP3MTTKUY01Rl3okjXRHrc2W9RbRcnVyxtcqqNwl1zji7uqxyga0j2iHXVxcWT7\npZr3GEWzwZZOoOugWZ2H8FGyqx/ypnbPTijQ+gVIAbip8jZ2JzuBhRiSH5Rxm/Y=\n=jTWZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 1318ecab53002e3bc0d61de25665ce3a146bde1f\nparent bff7307b8c4cc8577ea2a58b8438afc70aab2bea\nparent c1d39571c9ac27c80ca2c1feb5dd53fc6f325b34\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593036568 +0000\ncommitter GitHub <noreply@github.com> 1593036568 +0000\n\nMerge #5025\n\n5025: Don't mess with messy temp dir and just download into extension dir r=matklad a=Veetaha\n\nTemp dirs are messy. Dealing with them requires handling quite a bunch of\r\nedge cases. As proposed by lnicola this seems better to just put the temp files\r\nin the extension dir and not care much about suddenly leaving garbage.\r\nInstead we get shorter and less platform-caveat-y code.\r\nWe will also assume users don't try to issue a download in different vscode windows simultaneously.\r\n\r\nFixes #5019 \n\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104fad65daaa6ab103ba8815244afa8243421594", "html_url": "https://github.com/rust-lang/rust/commit/104fad65daaa6ab103ba8815244afa8243421594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104fad65daaa6ab103ba8815244afa8243421594/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bff7307b8c4cc8577ea2a58b8438afc70aab2bea", "url": "https://api.github.com/repos/rust-lang/rust/commits/bff7307b8c4cc8577ea2a58b8438afc70aab2bea", "html_url": "https://github.com/rust-lang/rust/commit/bff7307b8c4cc8577ea2a58b8438afc70aab2bea"}, {"sha": "c1d39571c9ac27c80ca2c1feb5dd53fc6f325b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d39571c9ac27c80ca2c1feb5dd53fc6f325b34", "html_url": "https://github.com/rust-lang/rust/commit/c1d39571c9ac27c80ca2c1feb5dd53fc6f325b34"}], "stats": {"total": 84, "additions": 27, "deletions": 57}, "files": [{"sha": "86609288262624b10eca3564f8fe2da14241d220", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 27, "deletions": 57, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/104fad65daaa6ab103ba8815244afa8243421594/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/104fad65daaa6ab103ba8815244afa8243421594/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=104fad65daaa6ab103ba8815244afa8243421594", "patch": "@@ -1,10 +1,10 @@\n import fetch from \"node-fetch\";\n import * as vscode from \"vscode\";\n import * as stream from \"stream\";\n+import * as crypto from \"crypto\";\n import * as fs from \"fs\";\n-import * as os from \"os\";\n-import * as path from \"path\";\n import * as util from \"util\";\n+import * as path from \"path\";\n import { log, assert } from \"./util\";\n \n const pipeline = util.promisify(stream.pipeline);\n@@ -68,32 +68,33 @@ interface DownloadOpts {\n }\n \n export async function download(opts: DownloadOpts) {\n-    // Put the artifact into a temporary folder to prevent partially downloaded files when user kills vscode\n-    await withTempDir(async tempDir => {\n-        const tempFile = path.join(tempDir, path.basename(opts.dest));\n-\n-        await vscode.window.withProgress(\n-            {\n-                location: vscode.ProgressLocation.Notification,\n-                cancellable: false,\n-                title: opts.progressTitle\n-            },\n-            async (progress, _cancellationToken) => {\n-                let lastPercentage = 0;\n-                await downloadFile(opts.url, tempFile, opts.mode, (readBytes, totalBytes) => {\n-                    const newPercentage = (readBytes / totalBytes) * 100;\n-                    progress.report({\n-                        message: newPercentage.toFixed(0) + \"%\",\n-                        increment: newPercentage - lastPercentage\n-                    });\n-\n-                    lastPercentage = newPercentage;\n+    // Put artifact into a temporary file (in the same dir for simplicity)\n+    // to prevent partially downloaded files when user kills vscode\n+    const dest = path.parse(opts.dest);\n+    const randomHex = crypto.randomBytes(5).toString(\"hex\");\n+    const tempFile = path.join(dest.dir, `${dest.name}${randomHex}`);\n+\n+    await vscode.window.withProgress(\n+        {\n+            location: vscode.ProgressLocation.Notification,\n+            cancellable: false,\n+            title: opts.progressTitle\n+        },\n+        async (progress, _cancellationToken) => {\n+            let lastPercentage = 0;\n+            await downloadFile(opts.url, tempFile, opts.mode, (readBytes, totalBytes) => {\n+                const newPercentage = (readBytes / totalBytes) * 100;\n+                progress.report({\n+                    message: newPercentage.toFixed(0) + \"%\",\n+                    increment: newPercentage - lastPercentage\n                 });\n-            }\n-        );\n \n-        await moveFile(tempFile, opts.dest);\n-    });\n+                lastPercentage = newPercentage;\n+            });\n+        }\n+    );\n+\n+    await fs.promises.rename(tempFile, opts.dest);\n }\n \n /**\n@@ -137,34 +138,3 @@ async function downloadFile(\n         // https://github.com/rust-analyzer/rust-analyzer/issues/3167\n     });\n }\n-\n-async function withTempDir(scope: (tempDirPath: string) => Promise<void>) {\n-    // Based on the great article: https://advancedweb.hu/secure-tempfiles-in-nodejs-without-dependencies/\n-\n-    // `.realpath()` should handle the cases where os.tmpdir() contains symlinks\n-    const osTempDir = await fs.promises.realpath(os.tmpdir());\n-\n-    const tempDir = await fs.promises.mkdtemp(path.join(osTempDir, \"rust-analyzer\"));\n-\n-    try {\n-        return await scope(tempDir);\n-    } finally {\n-        // We are good citizens :D\n-        void fs.promises.rmdir(tempDir, { recursive: true }).catch(log.error);\n-    }\n-};\n-\n-async function moveFile(src: fs.PathLike, dest: fs.PathLike) {\n-    try {\n-        await fs.promises.rename(src, dest);\n-    } catch (err) {\n-        if (err.code === 'EXDEV') {\n-            // We are probably moving the file across partitions/devices\n-            await fs.promises.copyFile(src, dest);\n-            await fs.promises.unlink(src);\n-        } else {\n-            log.error(`Failed to rename the file ${src} -> ${dest}`, err);\n-            throw err;\n-        }\n-    }\n-}"}]}