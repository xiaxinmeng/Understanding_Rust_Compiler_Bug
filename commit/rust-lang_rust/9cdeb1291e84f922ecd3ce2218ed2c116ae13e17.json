{"sha": "9cdeb1291e84f922ecd3ce2218ed2c116ae13e17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZGViMTI5MWU4NGY5MjJlY2QzY2UyMjE4ZWQyYzExNmFlMTNlMTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T12:13:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T12:13:17Z"}, "message": "Better event naming", "tree": {"sha": "5f23071a22d1a096d33c16641d4536ad8ebb1be8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f23071a22d1a096d33c16641d4536ad8ebb1be8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cdeb1291e84f922ecd3ce2218ed2c116ae13e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdeb1291e84f922ecd3ce2218ed2c116ae13e17", "html_url": "https://github.com/rust-lang/rust/commit/9cdeb1291e84f922ecd3ce2218ed2c116ae13e17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cdeb1291e84f922ecd3ce2218ed2c116ae13e17/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec0a2c4541883a4f8837de0ecfb2e1fc700539a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec0a2c4541883a4f8837de0ecfb2e1fc700539a", "html_url": "https://github.com/rust-lang/rust/commit/4ec0a2c4541883a4f8837de0ecfb2e1fc700539a"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "a7a7d2eb7e401e71e5a24e9d821856af2127bf64", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9cdeb1291e84f922ecd3ce2218ed2c116ae13e17/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdeb1291e84f922ecd3ce2218ed2c116ae13e17/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=9cdeb1291e84f922ecd3ce2218ed2c116ae13e17", "patch": "@@ -7,7 +7,7 @@ use std::{\n };\n \n use crossbeam_channel::{never, select, unbounded, RecvError, Sender};\n-use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n+use lsp_server::{Connection, ErrorCode, Notification, Request, RequestId, Response};\n use lsp_types::{request::Request as _, NumberOrString};\n use ra_db::VfsPath;\n use ra_ide::{Canceled, FileId};\n@@ -128,7 +128,7 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n             log::trace!(\"selecting\");\n             let event = select! {\n                 recv(&connection.receiver) -> msg => match msg {\n-                    Ok(msg) => Event::Msg(msg),\n+                    Ok(msg) => Event::Lsp(msg),\n                     Err(RecvError) => return Err(\"client exited without shutdown\".into()),\n                 },\n                 recv(task_receiver) -> task => Event::Task(task.unwrap()),\n@@ -137,11 +137,11 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n                     Err(RecvError) => return Err(\"vfs died\".into()),\n                 },\n                 recv(global_state.flycheck.as_ref().map_or(&never(), |it| &it.1)) -> task => match task {\n-                    Ok(task) => Event::CheckWatcher(task),\n+                    Ok(task) => Event::Flycheck(task),\n                     Err(RecvError) => return Err(\"check watcher died\".into()),\n                 },\n             };\n-            if let Event::Msg(Message::Request(req)) = &event {\n+            if let Event::Lsp(lsp_server::Message::Request(req)) = &event {\n                 if connection.handle_shutdown(&req)? {\n                     break;\n                 };\n@@ -173,10 +173,10 @@ enum Task {\n }\n \n enum Event {\n-    Msg(Message),\n+    Lsp(lsp_server::Message),\n     Task(Task),\n     Vfs(vfs::loader::Message),\n-    CheckWatcher(flycheck::Message),\n+    Flycheck(flycheck::Message),\n }\n \n impl fmt::Debug for Event {\n@@ -186,7 +186,7 @@ impl fmt::Debug for Event {\n         };\n \n         match self {\n-            Event::Msg(Message::Notification(not)) => {\n+            Event::Lsp(lsp_server::Message::Notification(not)) => {\n                 if notification_is::<lsp_types::notification::DidOpenTextDocument>(not)\n                     || notification_is::<lsp_types::notification::DidChangeTextDocument>(not)\n                 {\n@@ -203,10 +203,10 @@ impl fmt::Debug for Event {\n             _ => (),\n         }\n         match self {\n-            Event::Msg(it) => fmt::Debug::fmt(it, f),\n+            Event::Lsp(it) => fmt::Debug::fmt(it, f),\n             Event::Task(it) => fmt::Debug::fmt(it, f),\n             Event::Vfs(it) => fmt::Debug::fmt(it, f),\n-            Event::CheckWatcher(it) => fmt::Debug::fmt(it, f),\n+            Event::Flycheck(it) => fmt::Debug::fmt(it, f),\n         }\n     }\n }\n@@ -269,17 +269,17 @@ fn loop_turn(\n                 )\n             }\n         },\n-        Event::CheckWatcher(task) => {\n+        Event::Flycheck(task) => {\n             on_check_task(task, global_state, task_sender, &connection.sender)?\n         }\n-        Event::Msg(msg) => match msg {\n-            Message::Request(req) => {\n+        Event::Lsp(msg) => match msg {\n+            lsp_server::Message::Request(req) => {\n                 on_request(global_state, pool, task_sender, &connection.sender, loop_start, req)?\n             }\n-            Message::Notification(not) => {\n+            lsp_server::Message::Notification(not) => {\n                 on_notification(&connection.sender, global_state, not)?;\n             }\n-            Message::Response(resp) => {\n+            lsp_server::Message::Response(resp) => {\n                 let handler = global_state.req_queue.outgoing.complete(resp.id.clone());\n                 handler(global_state, resp)\n             }\n@@ -329,7 +329,7 @@ fn loop_turn(\n     Ok(())\n }\n \n-fn on_task(task: Task, msg_sender: &Sender<Message>, global_state: &mut GlobalState) {\n+fn on_task(task: Task, msg_sender: &Sender<lsp_server::Message>, global_state: &mut GlobalState) {\n     match task {\n         Task::Respond(response) => {\n             if let Some((method, start)) =\n@@ -353,7 +353,7 @@ fn on_request(\n     global_state: &mut GlobalState,\n     pool: &ThreadPool,\n     task_sender: &Sender<Task>,\n-    msg_sender: &Sender<Message>,\n+    msg_sender: &Sender<lsp_server::Message>,\n     request_received: Instant,\n     req: Request,\n ) -> Result<()> {\n@@ -415,7 +415,7 @@ fn on_request(\n }\n \n fn on_notification(\n-    msg_sender: &Sender<Message>,\n+    msg_sender: &Sender<lsp_server::Message>,\n     global_state: &mut GlobalState,\n     not: Notification,\n ) -> Result<()> {\n@@ -553,7 +553,7 @@ fn on_check_task(\n     task: flycheck::Message,\n     global_state: &mut GlobalState,\n     task_sender: &Sender<Task>,\n-    msg_sender: &Sender<Message>,\n+    msg_sender: &Sender<lsp_server::Message>,\n ) -> Result<()> {\n     match task {\n         flycheck::Message::ClearDiagnostics => {\n@@ -598,7 +598,11 @@ fn on_check_task(\n     Ok(())\n }\n \n-fn on_diagnostic_task(task: DiagnosticTask, msg_sender: &Sender<Message>, state: &mut GlobalState) {\n+fn on_diagnostic_task(\n+    task: DiagnosticTask,\n+    msg_sender: &Sender<lsp_server::Message>,\n+    state: &mut GlobalState,\n+) {\n     let subscriptions = state.diagnostics.handle_task(task);\n \n     for file_id in subscriptions {\n@@ -623,7 +627,7 @@ fn percentage(done: usize, total: usize) -> f64 {\n \n fn report_progress(\n     global_state: &mut GlobalState,\n-    sender: &Sender<Message>,\n+    sender: &Sender<lsp_server::Message>,\n     title: &str,\n     state: Progress,\n     message: Option<String>,\n@@ -672,7 +676,7 @@ struct PoolDispatcher<'a> {\n     req: Option<Request>,\n     pool: &'a ThreadPool,\n     global_state: &'a mut GlobalState,\n-    msg_sender: &'a Sender<Message>,\n+    msg_sender: &'a Sender<lsp_server::Message>,\n     task_sender: &'a Sender<Task>,\n     request_received: Instant,\n }"}]}