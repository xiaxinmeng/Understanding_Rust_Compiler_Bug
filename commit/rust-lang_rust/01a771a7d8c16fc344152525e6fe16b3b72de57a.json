{"sha": "01a771a7d8c16fc344152525e6fe16b3b72de57a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYTc3MWE3ZDhjMTZmYzM0NDE1MjUyNWU2ZmUxNmIzYjcyZGU1N2E=", "commit": {"author": {"name": "Ishi Tatsuyuki", "email": "ishitatsuyuki@gmail.com", "date": "2020-09-22T05:24:55Z"}, "committer": {"name": "Ishi Tatsuyuki", "email": "ishitatsuyuki@gmail.com", "date": "2020-09-22T05:40:44Z"}, "message": "Add debug assertions against slow path reference results", "tree": {"sha": "5e0ad62c27a58b44382842ab51dcb6db0a590d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e0ad62c27a58b44382842ab51dcb6db0a590d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a771a7d8c16fc344152525e6fe16b3b72de57a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a771a7d8c16fc344152525e6fe16b3b72de57a", "html_url": "https://github.com/rust-lang/rust/commit/01a771a7d8c16fc344152525e6fe16b3b72de57a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a771a7d8c16fc344152525e6fe16b3b72de57a/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f95e4f3ca9860bfef68ca279017db8c035966dbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f95e4f3ca9860bfef68ca279017db8c035966dbe", "html_url": "https://github.com/rust-lang/rust/commit/f95e4f3ca9860bfef68ca279017db8c035966dbe"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "3f13af0586913e90262d7410942da81ca30046ce", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/01a771a7d8c16fc344152525e6fe16b3b72de57a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a771a7d8c16fc344152525e6fe16b3b72de57a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=01a771a7d8c16fc344152525e6fe16b3b72de57a", "patch": "@@ -416,7 +416,7 @@ impl<'tcx> Pat<'tcx> {\n \n /// A row of a matrix. Rows of len 1 are very common, which is why `SmallVec[_; 2]`\n /// works well.\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, PartialEq)]\n crate struct PatStack<'p, 'tcx>(SmallVec<[&'p Pat<'tcx>; 2]>);\n \n impl<'p, 'tcx> PatStack<'p, 'tcx> {\n@@ -506,7 +506,7 @@ impl<'p, 'tcx> FromIterator<&'p Pat<'tcx>> for PatStack<'p, 'tcx> {\n \n /// Depending on the match patterns, the specialization process might be able to use a fast path.\n /// Tracks whether we can use the fast path and the lookup table needed in those cases.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n enum SpecializationCache {\n     /// Patterns consist of only enum variants.\n     /// Variant patterns does not intersect with each other (in contrast to range patterns),\n@@ -523,7 +523,7 @@ enum SpecializationCache {\n }\n \n /// A 2D matrix.\n-#[derive(Clone)]\n+#[derive(Clone, PartialEq)]\n crate struct Matrix<'p, 'tcx> {\n     patterns: Vec<PatStack<'p, 'tcx>>,\n     cache: SpecializationCache,\n@@ -622,7 +622,19 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n     fn specialize_wildcard(&self) -> Self {\n         match &self.cache {\n             SpecializationCache::Variants { wilds, .. } => {\n-                wilds.iter().filter_map(|&i| self.patterns[i].specialize_wildcard()).collect()\n+                let result =\n+                    wilds.iter().filter_map(|&i| self.patterns[i].specialize_wildcard()).collect();\n+                // When debug assertions are enabled, check the results against the \"slow path\"\n+                // result.\n+                debug_assert_eq!(\n+                    result,\n+                    Self {\n+                        patterns: self.patterns.clone(),\n+                        cache: SpecializationCache::Incompatible\n+                    }\n+                    .specialize_wildcard()\n+                );\n+                result\n             }\n             SpecializationCache::Incompatible => {\n                 self.patterns.iter().filter_map(|r| r.specialize_wildcard()).collect()\n@@ -639,7 +651,7 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n     ) -> Matrix<'p, 'tcx> {\n         match &self.cache {\n             SpecializationCache::Variants { lookup, wilds } => {\n-                if let Constructor::Variant(id) = constructor {\n+                let result: Self = if let Constructor::Variant(id) = constructor {\n                     lookup\n                         .get(id)\n                         // Default to `wilds` for absent keys. See `update_cache` for an explanation.\n@@ -655,7 +667,22 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n                         .collect()\n                 } else {\n                     unreachable!()\n-                }\n+                };\n+                // When debug assertions are enabled, check the results against the \"slow path\"\n+                // result.\n+                debug_assert_eq!(\n+                    result,\n+                    Matrix {\n+                        patterns: self.patterns.clone(),\n+                        cache: SpecializationCache::Incompatible\n+                    }\n+                    .specialize_constructor(\n+                        cx,\n+                        constructor,\n+                        ctor_wild_subpatterns\n+                    )\n+                );\n+                result\n             }\n             SpecializationCache::Incompatible => self\n                 .patterns"}, {"sha": "718ed78889f09b95677871029f0f60a8e0112ba8", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01a771a7d8c16fc344152525e6fe16b3b72de57a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a771a7d8c16fc344152525e6fe16b3b72de57a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=01a771a7d8c16fc344152525e6fe16b3b72de57a", "patch": "@@ -39,19 +39,19 @@ crate enum PatternError {\n     NonConstPath(Span),\n }\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n crate enum BindingMode {\n     ByValue,\n     ByRef(BorrowKind),\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n crate struct FieldPat<'tcx> {\n     crate field: Field,\n     crate pattern: Pat<'tcx>,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n crate struct Pat<'tcx> {\n     crate ty: Ty<'tcx>,\n     crate span: Span,\n@@ -116,7 +116,7 @@ crate struct Ascription<'tcx> {\n     crate user_ty_span: Span,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n crate enum PatKind<'tcx> {\n     Wild,\n "}]}