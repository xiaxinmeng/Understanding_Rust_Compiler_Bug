{"sha": "bce190558f69bb9eb1574cfa98467a20cc1ff1bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZTE5MDU1OGY2OWJiOWViMTU3NGNmYTk4NDY3YTIwY2MxZmYxYmM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-24T14:42:40Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-24T14:42:40Z"}, "message": "Merge #3338\n\n3338: new_ret_no_self false positives r=flip1995 a=JoshMcguigan\n\n~~WORK IN PROGRESS~~\r\n\r\nI plan to fix all of the false positives in #3313 in this PR, but I wanted to open it now to start gathering feedback.\r\n\r\nIn this first commit, I've updated the lint to allow tuple return types as long as `Self` shows up at least once, in any position of the tuple. I believe this is the broadest possible interpretation of what should be allowed for tuple return types, but I would certainly be okay making the lint more strict. \r\n\r\nfixes #3313 \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "ea360cb4bc99886a71beb51b417bc8789fdc01ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea360cb4bc99886a71beb51b417bc8789fdc01ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bce190558f69bb9eb1574cfa98467a20cc1ff1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bce190558f69bb9eb1574cfa98467a20cc1ff1bc", "html_url": "https://github.com/rust-lang/rust/commit/bce190558f69bb9eb1574cfa98467a20cc1ff1bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bce190558f69bb9eb1574cfa98467a20cc1ff1bc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "319b75c75b65985b7d3389d65a49f993ef3345fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/319b75c75b65985b7d3389d65a49f993ef3345fa", "html_url": "https://github.com/rust-lang/rust/commit/319b75c75b65985b7d3389d65a49f993ef3345fa"}, {"sha": "30ffc17ef754f6b6c7bd47809afd51b1c5632f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/30ffc17ef754f6b6c7bd47809afd51b1c5632f22", "html_url": "https://github.com/rust-lang/rust/commit/30ffc17ef754f6b6c7bd47809afd51b1c5632f22"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "f0810c906eff8f86726d970fe5137ccd7261a6d8", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bce190558f69bb9eb1574cfa98467a20cc1ff1bc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bce190558f69bb9eb1574cfa98467a20cc1ff1bc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=bce190558f69bb9eb1574cfa98467a20cc1ff1bc", "patch": "@@ -936,10 +936,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if let hir::ImplItemKind::Method(_, _) = implitem.node {\n             let ret_ty = return_ty(cx, implitem.id);\n \n-            // if return type is impl trait\n+            // walk the return type and check for Self (this does not check associated types)\n+            for inner_type in ret_ty.walk() {\n+                if same_tys(cx, ty, inner_type) { return; }\n+            }\n+\n+            // if return type is impl trait, check the associated types\n             if let TyKind::Opaque(def_id, _) = ret_ty.sty {\n \n-                // then one of the associated types must be Self\n+                // one of the associated types must be Self\n                 for predicate in cx.tcx.predicates_of(def_id).predicates.iter() {\n                     match predicate {\n                         (Predicate::Projection(poly_projection_predicate), _) => {"}, {"sha": "035ca2b04964b7d8ee4c16841999ee9c16e2e346", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bce190558f69bb9eb1574cfa98467a20cc1ff1bc/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bce190558f69bb9eb1574cfa98467a20cc1ff1bc/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=bce190558f69bb9eb1574cfa98467a20cc1ff1bc", "patch": "@@ -1920,7 +1920,6 @@ enum ImplicitHasherType<'tcx> {\n \n impl<'tcx> ImplicitHasherType<'tcx> {\n     /// Checks that `ty` is a target type without a BuildHasher.\n-    #[allow(clippy::new_ret_no_self)]\n     fn new<'a>(cx: &LateContext<'a, 'tcx>, hir_ty: &hir::Ty) -> Option<Self> {\n         if let TyKind::Path(QPath::Resolved(None, ref path)) = hir_ty.node {\n             let params: Vec<_> = path.segments.last().as_ref()?.args.as_ref()?"}, {"sha": "bed43f550f218539dd2d7b5868a9d63b2b8fc3e2", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/bce190558f69bb9eb1574cfa98467a20cc1ff1bc/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bce190558f69bb9eb1574cfa98467a20cc1ff1bc/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=bce190558f69bb9eb1574cfa98467a20cc1ff1bc", "patch": "@@ -91,3 +91,87 @@ impl V {\n         unimplemented!();\n     }\n }\n+\n+struct TupleReturnerOk;\n+\n+impl TupleReturnerOk {\n+    // should not trigger lint\n+    pub fn new() -> (Self, u32) { unimplemented!(); }\n+}\n+\n+struct TupleReturnerOk2;\n+\n+impl TupleReturnerOk2 {\n+    // should not trigger lint (it doesn't matter which element in the tuple is Self)\n+    pub fn new() -> (u32, Self) { unimplemented!(); }\n+}\n+\n+struct TupleReturnerOk3;\n+\n+impl TupleReturnerOk3 {\n+    // should not trigger lint (tuple can contain multiple Self)\n+    pub fn new() -> (Self, Self) { unimplemented!(); }\n+}\n+\n+struct TupleReturnerBad;\n+\n+impl TupleReturnerBad {\n+    // should trigger lint\n+    pub fn new() -> (u32, u32) { unimplemented!(); }\n+}\n+\n+struct MutPointerReturnerOk;\n+\n+impl MutPointerReturnerOk {\n+    // should not trigger lint\n+    pub fn new() -> *mut Self { unimplemented!(); }\n+}\n+\n+struct MutPointerReturnerOk2;\n+\n+impl MutPointerReturnerOk2 {\n+    // should not trigger lint\n+    pub fn new() -> *const Self { unimplemented!(); }\n+}\n+\n+struct MutPointerReturnerBad;\n+\n+impl MutPointerReturnerBad {\n+    // should trigger lint\n+    pub fn new() -> *mut V { unimplemented!(); }\n+}\n+\n+struct GenericReturnerOk;\n+\n+impl GenericReturnerOk {\n+    // should not trigger lint\n+    pub fn new() -> Option<Self> { unimplemented!(); }\n+}\n+\n+struct GenericReturnerBad;\n+\n+impl GenericReturnerBad {\n+    // should trigger lint\n+    pub fn new() -> Option<u32> { unimplemented!(); }\n+}\n+\n+struct NestedReturnerOk;\n+\n+impl NestedReturnerOk {\n+    // should not trigger lint\n+    pub fn new() -> (Option<Self>, u32) { unimplemented!(); }\n+}\n+\n+struct NestedReturnerOk2;\n+\n+impl NestedReturnerOk2 {\n+    // should not trigger lint\n+    pub fn new() -> ((Self, u32), u32) { unimplemented!(); }\n+}\n+\n+struct NestedReturnerOk3;\n+\n+impl NestedReturnerOk3 {\n+    // should not trigger lint\n+    pub fn new() -> Option<(Self, u32)> { unimplemented!(); }\n+}"}, {"sha": "bab9627ca225cd1de6a8f86aa5a70d06c4832757", "filename": "tests/ui/new_ret_no_self.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bce190558f69bb9eb1574cfa98467a20cc1ff1bc/tests%2Fui%2Fnew_ret_no_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bce190558f69bb9eb1574cfa98467a20cc1ff1bc/tests%2Fui%2Fnew_ret_no_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.stderr?ref=bce190558f69bb9eb1574cfa98467a20cc1ff1bc", "patch": "@@ -24,5 +24,23 @@ error: methods called `new` usually return `Self`\n 92 | |     }\n    | |_____^\n \n-error: aborting due to 3 previous errors\n+error: methods called `new` usually return `Self`\n+   --> $DIR/new_ret_no_self.rs:120:5\n+    |\n+120 |     pub fn new() -> (u32, u32) { unimplemented!(); }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: methods called `new` usually return `Self`\n+   --> $DIR/new_ret_no_self.rs:141:5\n+    |\n+141 |     pub fn new() -> *mut V { unimplemented!(); }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: methods called `new` usually return `Self`\n+   --> $DIR/new_ret_no_self.rs:155:5\n+    |\n+155 |     pub fn new() -> Option<u32> { unimplemented!(); }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n "}]}