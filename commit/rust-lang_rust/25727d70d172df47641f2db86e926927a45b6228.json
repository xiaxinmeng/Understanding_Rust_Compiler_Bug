{"sha": "25727d70d172df47641f2db86e926927a45b6228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NzI3ZDcwZDE3MmRmNDc2NDFmMmRiODZlOTI2OTI3YTQ1YjYyMjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-17T22:38:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-19T00:22:18Z"}, "message": "Port the `map` construction code to use the new visitor.", "tree": {"sha": "249a27350acb7b5de430175a005f0105feac103e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/249a27350acb7b5de430175a005f0105feac103e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25727d70d172df47641f2db86e926927a45b6228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25727d70d172df47641f2db86e926927a45b6228", "html_url": "https://github.com/rust-lang/rust/commit/25727d70d172df47641f2db86e926927a45b6228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25727d70d172df47641f2db86e926927a45b6228/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "767ee79c4c38e7909c7fefef1b33be4612112336", "url": "https://api.github.com/repos/rust-lang/rust/commits/767ee79c4c38e7909c7fefef1b33be4612112336", "html_url": "https://github.com/rust-lang/rust/commit/767ee79c4c38e7909c7fefef1b33be4612112336"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "0e24a4446fbe942f49385561552edcfad608cd2b", "filename": "src/librustc/front/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25727d70d172df47641f2db86e926927a45b6228/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25727d70d172df47641f2db86e926927a45b6228/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs?ref=25727d70d172df47641f2db86e926927a45b6228", "patch": "@@ -29,7 +29,7 @@ use rustc_front::hir::{Block, FnDecl};\n use syntax::ast::{Name, NodeId};\n use rustc_front::hir as ast;\n use syntax::codemap::Span;\n-use rustc_front::visit::FnKind;\n+use rustc_front::intravisit::FnKind;\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl\n /// and a body (as well as a NodeId, a span, etc)."}, {"sha": "e98e88c9abf249aebd2b4cb286139857cf225bee", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/25727d70d172df47641f2db86e926927a45b6228/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25727d70d172df47641f2db86e926927a45b6228/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=25727d70d172df47641f2db86e926927a45b6228", "patch": "@@ -13,7 +13,7 @@ use super::MapEntry::*;\n \n use rustc_front::hir::*;\n use rustc_front::util;\n-use rustc_front::visit::{self, Visitor};\n+use rustc_front::intravisit::{self, Visitor};\n use middle::def_id::{CRATE_DEF_INDEX, DefIndex};\n use std::iter::repeat;\n use syntax::ast::{NodeId, CRATE_NODE_ID, DUMMY_NODE_ID};\n@@ -22,14 +22,16 @@ use syntax::codemap::Span;\n /// A Visitor that walks over an AST and collects Node's into an AST\n /// Map.\n pub struct NodeCollector<'ast> {\n+    pub krate: &'ast Crate,\n     pub map: Vec<MapEntry<'ast>>,\n     pub definitions: Definitions,\n     pub parent_node: NodeId,\n }\n \n impl<'ast> NodeCollector<'ast> {\n-    pub fn root() -> NodeCollector<'ast> {\n+    pub fn root(krate: &'ast Crate) -> NodeCollector<'ast> {\n         let mut collector = NodeCollector {\n+            krate: krate,\n             map: vec![],\n             definitions: Definitions::new(),\n             parent_node: CRATE_NODE_ID,\n@@ -44,13 +46,15 @@ impl<'ast> NodeCollector<'ast> {\n         collector\n     }\n \n-    pub fn extend(parent: &'ast InlinedParent,\n+    pub fn extend(krate: &'ast Crate,\n+                  parent: &'ast InlinedParent,\n                   parent_node: NodeId,\n                   parent_def_path: DefPath,\n                   map: Vec<MapEntry<'ast>>,\n                   definitions: Definitions)\n                   -> NodeCollector<'ast> {\n         let mut collector = NodeCollector {\n+            krate: krate,\n             map: map,\n             parent_node: parent_node,\n             definitions: definitions,\n@@ -107,6 +111,13 @@ impl<'ast> NodeCollector<'ast> {\n }\n \n impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n+    /// Because we want to track parent items and so forth, enable\n+    /// deep walking so that we walk nested items in the context of\n+    /// their outer items.\n+    fn visit_nested_item(&mut self, item: ItemId) {\n+        self.visit_item(self.krate.item(item.id))\n+    }\n+\n     fn visit_item(&mut self, i: &'ast Item) {\n         // Pick the def data. This need not be unique, but the more\n         // information we encapsulate into\n@@ -173,7 +184,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             }\n             _ => {}\n         }\n-        visit::walk_item(self, i);\n+        intravisit::walk_item(self, i);\n         self.parent_node = parent_node;\n     }\n \n@@ -184,7 +195,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n \n         let parent_node = self.parent_node;\n         self.parent_node = foreign_item.id;\n-        visit::walk_foreign_item(self, foreign_item);\n+        intravisit::walk_foreign_item(self, foreign_item);\n         self.parent_node = parent_node;\n     }\n \n@@ -195,7 +206,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                             DefPathData::TypeParam(ty_param.name));\n         }\n \n-        visit::walk_generics(self, generics);\n+        intravisit::walk_generics(self, generics);\n     }\n \n     fn visit_trait_item(&mut self, ti: &'ast TraitItem) {\n@@ -217,7 +228,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             _ => { }\n         }\n \n-        visit::walk_trait_item(self, ti);\n+        intravisit::walk_trait_item(self, ti);\n \n         self.parent_node = parent_node;\n     }\n@@ -240,7 +251,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             _ => { }\n         }\n \n-        visit::walk_impl_item(self, ii);\n+        intravisit::walk_impl_item(self, ii);\n \n         self.parent_node = parent_node;\n     }\n@@ -259,7 +270,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n \n         let parent_node = self.parent_node;\n         self.parent_node = pat.id;\n-        visit::walk_pat(self, pat);\n+        intravisit::walk_pat(self, pat);\n         self.parent_node = parent_node;\n     }\n \n@@ -273,7 +284,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n \n         let parent_node = self.parent_node;\n         self.parent_node = expr.id;\n-        visit::walk_expr(self, expr);\n+        intravisit::walk_expr(self, expr);\n         self.parent_node = parent_node;\n     }\n \n@@ -282,21 +293,21 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         self.insert(id, NodeStmt(stmt));\n         let parent_node = self.parent_node;\n         self.parent_node = id;\n-        visit::walk_stmt(self, stmt);\n+        intravisit::walk_stmt(self, stmt);\n         self.parent_node = parent_node;\n     }\n \n-    fn visit_fn(&mut self, fk: visit::FnKind<'ast>, fd: &'ast FnDecl,\n+    fn visit_fn(&mut self, fk: intravisit::FnKind<'ast>, fd: &'ast FnDecl,\n                 b: &'ast Block, s: Span, id: NodeId) {\n         assert_eq!(self.parent_node, id);\n-        visit::walk_fn(self, fk, fd, b, s);\n+        intravisit::walk_fn(self, fk, fd, b, s);\n     }\n \n     fn visit_block(&mut self, block: &'ast Block) {\n         self.insert(block.id, NodeBlock(block));\n         let parent_node = self.parent_node;\n         self.parent_node = block.id;\n-        visit::walk_block(self, block);\n+        intravisit::walk_block(self, block);\n         self.parent_node = parent_node;\n     }\n "}, {"sha": "6ee6b07059751e6876d4da20e3ba154c655ffd6e", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25727d70d172df47641f2db86e926927a45b6228/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25727d70d172df47641f2db86e926927a45b6228/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=25727d70d172df47641f2db86e926927a45b6228", "patch": "@@ -25,7 +25,7 @@ use syntax::parse::token;\n \n use rustc_front::hir::*;\n use rustc_front::fold::Folder;\n-use rustc_front::visit;\n+use rustc_front::intravisit;\n use rustc_front::print::pprust;\n \n use arena::TypedArena;\n@@ -809,9 +809,11 @@ impl<F: FoldOps> Folder for IdAndSpanUpdater<F> {\n }\n \n pub fn map_crate<'ast>(forest: &'ast mut Forest) -> Map<'ast> {\n-    let mut collector = NodeCollector::root();\n-    visit::walk_crate(&mut collector, &forest.krate);\n-    let NodeCollector { map, definitions, .. } = collector;\n+    let (map, definitions) = {\n+        let mut collector = NodeCollector::root(&forest.krate);\n+        intravisit::walk_crate(&mut collector, &forest.krate);\n+        (collector.map, collector.definitions)\n+    };\n \n     if log_enabled!(::log::DEBUG) {\n         // This only makes sense for ordered stores; note the\n@@ -847,7 +849,7 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n                                           -> &'ast InlinedItem {\n     let mut fld = IdAndSpanUpdater { fold_ops: fold_ops };\n     let ii = match ii {\n-        II::Item(i) => II::Item(fld.fold_item(i)),\n+        II::Item(i) => II::Item(i.map(|i| fld.fold_item(i))),\n         II::TraitItem(d, ti) => {\n             II::TraitItem(fld.fold_ops.new_def_id(d),\n                           fld.fold_trait_item(ti))\n@@ -867,6 +869,7 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n     let ii_parent_id = fld.new_id(DUMMY_NODE_ID);\n     let mut collector =\n         NodeCollector::extend(\n+            map.krate(),\n             ii_parent,\n             ii_parent_id,\n             def_path,"}]}