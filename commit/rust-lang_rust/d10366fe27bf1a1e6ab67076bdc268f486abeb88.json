{"sha": "d10366fe27bf1a1e6ab67076bdc268f486abeb88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMDM2NmZlMjdiZjFhMWU2YWI2NzA3NmJkYzI2OGY0ODZhYmViODg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:47:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T22:05:58Z"}, "message": "avoid unnecessary use of MaybeUninit::get_ref, and expand comment on the others", "tree": {"sha": "f3b6a30176b3748fb131cb795e346c4a42b9101b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3b6a30176b3748fb131cb795e346c4a42b9101b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d10366fe27bf1a1e6ab67076bdc268f486abeb88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d10366fe27bf1a1e6ab67076bdc268f486abeb88", "html_url": "https://github.com/rust-lang/rust/commit/d10366fe27bf1a1e6ab67076bdc268f486abeb88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d10366fe27bf1a1e6ab67076bdc268f486abeb88/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e", "html_url": "https://github.com/rust-lang/rust/commit/084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "edeb65afd67b2d89e336cbcbedae2a6ef3a8f9bf", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d10366fe27bf1a1e6ab67076bdc268f486abeb88/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10366fe27bf1a1e6ab67076bdc268f486abeb88/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=d10366fe27bf1a1e6ab67076bdc268f486abeb88", "patch": "@@ -15,6 +15,7 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n         // FIXME(#53491): Technically, this is calling `get_mut` on an uninitialized\n         // `MaybeUninit` (here and elsewhere in this file).  Revisit this once\n         // we decided whether that is valid or not.\n+        // Using `freeze` is *not enough*; `flt2dec::Part` is an enum!\n         let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n                                                     *num, sign, precision,\n                                                     false, buf.get_mut(), parts.get_mut());\n@@ -33,6 +34,7 @@ fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter, num: &T,\n         // enough for f32 and f64\n         let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninitialized();\n         let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n+        // FIXME(#53491)\n         let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num,\n                                                  sign, precision, false, buf.get_mut(),\n                                                  parts.get_mut());\n@@ -71,6 +73,7 @@ fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n         let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninitialized();\n+        // FIXME(#53491)\n         let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n                                                   *num, sign, precision,\n                                                   upper, buf.get_mut(), parts.get_mut());\n@@ -90,6 +93,7 @@ fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n         // enough for f32 and f64\n         let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninitialized();\n         let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninitialized();\n+        // FIXME(#53491)\n         let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n                                                      *num, sign, (0, 0), upper,\n                                                      buf.get_mut(), parts.get_mut());"}, {"sha": "a2599ae834c69fc0bec39951adeebab59ab73c70", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10366fe27bf1a1e6ab67076bdc268f486abeb88/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10366fe27bf1a1e6ab67076bdc268f486abeb88/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d10366fe27bf1a1e6ab67076bdc268f486abeb88", "patch": "@@ -301,7 +301,7 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n     // Perform the swap\n     copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);\n     copy(y, x, 1); // `x` and `y` may overlap\n-    copy_nonoverlapping(tmp.get_ref(), y, 1);\n+    copy_nonoverlapping(tmp.as_ptr(), y, 1);\n }\n \n /// Swaps `count * size_of::<T>()` bytes between the two regions of memory"}]}