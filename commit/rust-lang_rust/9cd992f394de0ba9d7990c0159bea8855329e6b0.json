{"sha": "9cd992f394de0ba9d7990c0159bea8855329e6b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZDk5MmYzOTRkZTBiYTlkNzk5MGMwMTU5YmVhODg1NTMyOWU2YjA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-22T14:54:23Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-22T14:54:23Z"}, "message": "Add some intra-doc links to compiler docs", "tree": {"sha": "09b81352131b4715691e7371b4a9d29ca06aeb87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09b81352131b4715691e7371b4a9d29ca06aeb87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cd992f394de0ba9d7990c0159bea8855329e6b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd992f394de0ba9d7990c0159bea8855329e6b0", "html_url": "https://github.com/rust-lang/rust/commit/9cd992f394de0ba9d7990c0159bea8855329e6b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cd992f394de0ba9d7990c0159bea8855329e6b0/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a90975c0f78219db45d3bee0676a22695ec103", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a90975c0f78219db45d3bee0676a22695ec103", "html_url": "https://github.com/rust-lang/rust/commit/50a90975c0f78219db45d3bee0676a22695ec103"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "6531e68be9cdc30050d1623f21c7e176efe337ba", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9cd992f394de0ba9d7990c0159bea8855329e6b0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd992f394de0ba9d7990c0159bea8855329e6b0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=9cd992f394de0ba9d7990c0159bea8855329e6b0", "patch": "@@ -257,7 +257,10 @@ pub struct Substructure<'a> {\n     pub type_ident: Ident,\n     /// ident of the method\n     pub method_ident: Ident,\n-    /// dereferenced access to any `Self_` or `Ptr(Self_, _)` arguments\n+    /// dereferenced access to any [`Self_`] or [`Ptr(Self_, _)][ptr]` arguments\n+    ///\n+    /// [`Self_`]: ty::Ty::Self_\n+    /// [ptr]: ty::Ty::Ptr\n     pub self_args: &'a [P<Expr>],\n     /// verbatim access to any other arguments\n     pub nonself_args: &'a [P<Expr>],"}, {"sha": "28eb1fed6a0ab6ae415bbab188878a0bb7fe8803", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9cd992f394de0ba9d7990c0159bea8855329e6b0/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd992f394de0ba9d7990c0159bea8855329e6b0/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=9cd992f394de0ba9d7990c0159bea8855329e6b0", "patch": "@@ -25,8 +25,9 @@ use std::sync::{Arc, Mutex};\n pub type Result<T> = result::Result<T, ErrorReported>;\n \n /// Represents a compiler session.\n+///\n /// Can be used to run `rustc_interface` queries.\n-/// Created by passing `Config` to `run_compiler`.\n+/// Created by passing [`Config`] to [`run_compiler`].\n pub struct Compiler {\n     pub(crate) sess: Lrc<Session>,\n     codegen_backend: Lrc<Box<dyn CodegenBackend>>,"}, {"sha": "3398da024c982f804a7a524e898ac46dea17a5ce", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cd992f394de0ba9d7990c0159bea8855329e6b0/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd992f394de0ba9d7990c0159bea8855329e6b0/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=9cd992f394de0ba9d7990c0159bea8855329e6b0", "patch": "@@ -95,7 +95,7 @@ declare_box_region_type!(\n /// harness if one is to be provided, injection of a dependency on the\n /// standard library and prelude, and name resolution.\n ///\n-/// Returns `None` if we're aborting after handling -W help.\n+/// Returns [`None`] if we're aborting after handling -W help.\n pub fn configure_and_expand(\n     sess: Lrc<Session>,\n     lint_store: Lrc<LintStore>,"}, {"sha": "6ea0828cea0d9bdda381eefab3ca5eeb1391783b", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cd992f394de0ba9d7990c0159bea8855329e6b0/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd992f394de0ba9d7990c0159bea8855329e6b0/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=9cd992f394de0ba9d7990c0159bea8855329e6b0", "patch": "@@ -23,7 +23,11 @@ use std::cell::{Ref, RefCell, RefMut};\n use std::rc::Rc;\n \n /// Represent the result of a query.\n-/// This result can be stolen with the `take` method and generated with the `compute` method.\n+///\n+/// This result can be stolen with the [`take`] method and generated with the [`compute`] method.\n+///\n+/// [`take`]: Self::take\n+/// [`compute`]: Self::compute\n pub struct Query<T> {\n     result: RefCell<Option<Result<T>>>,\n }"}, {"sha": "1af7fa81cbb4d1ea1680d362e56beba8dde13667", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cd992f394de0ba9d7990c0159bea8855329e6b0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd992f394de0ba9d7990c0159bea8855329e6b0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9cd992f394de0ba9d7990c0159bea8855329e6b0", "patch": "@@ -1681,7 +1681,7 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n     SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.symbol_interner.lock()))\n }\n \n-/// An alternative to `Symbol`, useful when the chars within the symbol need to\n+/// An alternative to [`Symbol`], useful when the chars within the symbol need to\n /// be accessed. It deliberately has limited functionality and should only be\n /// used for temporary values.\n ///"}]}