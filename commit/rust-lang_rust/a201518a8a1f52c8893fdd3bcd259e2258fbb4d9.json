{"sha": "a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "node_id": "C_kwDOAAsO6NoAKGEyMDE1MThhOGExZjUyYzg4OTNmZGQzYmNkMjU5ZTIyNThmYmI0ZDk", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-10-23T20:32:26Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-10-23T20:32:26Z"}, "message": "Generate lint categories and explanations with `declare_clippy_lint`\n\nChanges it to be a proc_macro rather than macro_rules", "tree": {"sha": "41f9b70334ba8a373f305fe9985d436bba7849e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f9b70334ba8a373f305fe9985d436bba7849e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "html_url": "https://github.com/rust-lang/rust/commit/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "html_url": "https://github.com/rust-lang/rust/commit/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1"}], "stats": {"total": 3564, "additions": 958, "deletions": 2606}, "files": [{"sha": "3cdbb42d44db3c72a0ffb4fc155465bacec71cd3", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 30, "deletions": 223, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "patch": "@@ -3,7 +3,7 @@ use aho_corasick::AhoCorasickBuilder;\n use indoc::writedoc;\n use itertools::Itertools;\n use rustc_lexer::{tokenize, unescape, LiteralKind, TokenKind};\n-use std::collections::{BTreeSet, HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n use std::ffi::OsStr;\n use std::fmt::Write;\n use std::fs::{self, OpenOptions};\n@@ -104,99 +104,23 @@ fn generate_lint_files(\n     );\n \n     process_file(\n-        \"clippy_lints/src/lib.register_lints.rs\",\n+        \"clippy_lints/src/declared_lints.rs\",\n         update_mode,\n-        &gen_register_lint_list(internal_lints.iter(), usable_lints.iter()),\n+        &gen_declared_lints(internal_lints.iter(), usable_lints.iter()),\n     );\n     process_file(\n         \"clippy_lints/src/lib.deprecated.rs\",\n         update_mode,\n         &gen_deprecated(deprecated_lints),\n     );\n \n-    let all_group_lints = usable_lints.iter().filter(|l| {\n-        matches!(\n-            &*l.group,\n-            \"correctness\" | \"suspicious\" | \"style\" | \"complexity\" | \"perf\"\n-        )\n-    });\n-    let content = gen_lint_group_list(\"all\", all_group_lints);\n-    process_file(\"clippy_lints/src/lib.register_all.rs\", update_mode, &content);\n-\n-    update_docs(update_mode, &usable_lints);\n-\n-    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n-        let content = gen_lint_group_list(&lint_group, lints.iter());\n-        process_file(\n-            format!(\"clippy_lints/src/lib.register_{lint_group}.rs\"),\n-            update_mode,\n-            &content,\n-        );\n-    }\n-\n     let content = gen_deprecated_lints_test(deprecated_lints);\n     process_file(\"tests/ui/deprecated.rs\", update_mode, &content);\n \n     let content = gen_renamed_lints_test(renamed_lints);\n     process_file(\"tests/ui/rename.rs\", update_mode, &content);\n }\n \n-fn update_docs(update_mode: UpdateMode, usable_lints: &[Lint]) {\n-    replace_region_in_file(update_mode, Path::new(\"src/docs.rs\"), \"docs! {\\n\", \"\\n}\\n\", |res| {\n-        for name in usable_lints.iter().map(|lint| lint.name.clone()).sorted() {\n-            writeln!(res, r#\"    \"{name}\",\"#).unwrap();\n-        }\n-    });\n-\n-    if update_mode == UpdateMode::Check {\n-        let mut extra = BTreeSet::new();\n-        let mut lint_names = usable_lints\n-            .iter()\n-            .map(|lint| lint.name.clone())\n-            .collect::<BTreeSet<_>>();\n-        for file in std::fs::read_dir(\"src/docs\").unwrap() {\n-            let filename = file.unwrap().file_name().into_string().unwrap();\n-            if let Some(name) = filename.strip_suffix(\".txt\") {\n-                if !lint_names.remove(name) {\n-                    extra.insert(name.to_string());\n-                }\n-            }\n-        }\n-\n-        let failed = print_lint_names(\"extra lint docs:\", &extra) | print_lint_names(\"missing lint docs:\", &lint_names);\n-\n-        if failed {\n-            exit_with_failure();\n-        }\n-    } else {\n-        if std::fs::remove_dir_all(\"src/docs\").is_err() {\n-            eprintln!(\"could not remove src/docs directory\");\n-        }\n-        if std::fs::create_dir(\"src/docs\").is_err() {\n-            eprintln!(\"could not recreate src/docs directory\");\n-        }\n-    }\n-    for lint in usable_lints {\n-        process_file(\n-            Path::new(\"src/docs\").join(lint.name.clone() + \".txt\"),\n-            update_mode,\n-            &lint.documentation,\n-        );\n-    }\n-}\n-\n-fn print_lint_names(header: &str, lints: &BTreeSet<String>) -> bool {\n-    if lints.is_empty() {\n-        return false;\n-    }\n-    println!(\"{header}\");\n-    for lint in lints.iter().sorted() {\n-        println!(\"    {lint}\");\n-    }\n-    println!();\n-    true\n-}\n-\n pub fn print_lints() {\n     let (lint_list, _, _) = gather_all();\n     let usable_lints = Lint::usable_lints(&lint_list);\n@@ -641,26 +565,17 @@ struct Lint {\n     desc: String,\n     module: String,\n     declaration_range: Range<usize>,\n-    documentation: String,\n }\n \n impl Lint {\n     #[must_use]\n-    fn new(\n-        name: &str,\n-        group: &str,\n-        desc: &str,\n-        module: &str,\n-        declaration_range: Range<usize>,\n-        documentation: String,\n-    ) -> Self {\n+    fn new(name: &str, group: &str, desc: &str, module: &str, declaration_range: Range<usize>) -> Self {\n         Self {\n             name: name.to_lowercase(),\n             group: group.into(),\n             desc: remove_line_splices(desc),\n             module: module.into(),\n             declaration_range,\n-            documentation,\n         }\n     }\n \n@@ -716,25 +631,6 @@ impl RenamedLint {\n     }\n }\n \n-/// Generates the code for registering a group\n-fn gen_lint_group_list<'a>(group_name: &str, lints: impl Iterator<Item = &'a Lint>) -> String {\n-    let mut details: Vec<_> = lints.map(|l| (&l.module, l.name.to_uppercase())).collect();\n-    details.sort_unstable();\n-\n-    let mut output = GENERATED_FILE_COMMENT.to_string();\n-\n-    let _ = writeln!(\n-        output,\n-        \"store.register_group(true, \\\"clippy::{group_name}\\\", Some(\\\"clippy_{group_name}\\\"), vec![\",\n-    );\n-    for (module, name) in details {\n-        let _ = writeln!(output, \"    LintId::of({module}::{name}),\");\n-    }\n-    output.push_str(\"])\\n\");\n-\n-    output\n-}\n-\n /// Generates the `register_removed` code\n #[must_use]\n fn gen_deprecated(lints: &[DeprecatedLint]) -> String {\n@@ -759,7 +655,7 @@ fn gen_deprecated(lints: &[DeprecatedLint]) -> String {\n \n /// Generates the code for registering lints\n #[must_use]\n-fn gen_register_lint_list<'a>(\n+fn gen_declared_lints<'a>(\n     internal_lints: impl Iterator<Item = &'a Lint>,\n     usable_lints: impl Iterator<Item = &'a Lint>,\n ) -> String {\n@@ -770,15 +666,15 @@ fn gen_register_lint_list<'a>(\n     details.sort_unstable();\n \n     let mut output = GENERATED_FILE_COMMENT.to_string();\n-    output.push_str(\"store.register_lints(&[\\n\");\n+    output.push_str(\"pub(crate) static LINTS: &[&crate::LintInfo] = &[\\n\");\n \n     for (is_public, module_name, lint_name) in details {\n         if !is_public {\n             output.push_str(\"    #[cfg(feature = \\\"internal\\\")]\\n\");\n         }\n-        let _ = writeln!(output, \"    {module_name}::{lint_name},\");\n+        let _ = writeln!(output, \"    crate::{module_name}::{lint_name}_INFO,\");\n     }\n-    output.push_str(\"])\\n\");\n+    output.push_str(\"];\\n\");\n \n     output\n }\n@@ -910,35 +806,26 @@ fn parse_contents(contents: &str, module: &str, lints: &mut Vec<Lint>) {\n          }| token_kind == &TokenKind::Ident && *content == \"declare_clippy_lint\",\n     ) {\n         let start = range.start;\n-        let mut docs = String::with_capacity(128);\n-        let mut iter = iter.by_ref().filter(|t| !matches!(t.token_kind, TokenKind::Whitespace));\n+        let mut iter = iter\n+            .by_ref()\n+            .filter(|t| !matches!(t.token_kind, TokenKind::Whitespace | TokenKind::LineComment { .. }));\n         // matches `!{`\n         match_tokens!(iter, Bang OpenBrace);\n-        let mut in_code = false;\n-        while let Some(t) = iter.next() {\n-            match t.token_kind {\n-                TokenKind::LineComment { .. } => {\n-                    if let Some(line) = t.content.strip_prefix(\"/// \").or_else(|| t.content.strip_prefix(\"///\")) {\n-                        if line.starts_with(\"```\") {\n-                            docs += \"```\\n\";\n-                            in_code = !in_code;\n-                        } else if !(in_code && line.starts_with(\"# \")) {\n-                            docs += line;\n-                            docs.push('\\n');\n-                        }\n-                    }\n-                },\n-                TokenKind::Pound => {\n-                    match_tokens!(iter, OpenBracket Ident Colon Colon Ident Eq Literal{..} CloseBracket Ident);\n-                    break;\n-                },\n-                TokenKind::Ident => {\n-                    break;\n-                },\n-                _ => {},\n-            }\n+        match iter.next() {\n+            // #[clippy::version = \"version\"] pub\n+            Some(LintDeclSearchResult {\n+                token_kind: TokenKind::Pound,\n+                ..\n+            }) => {\n+                match_tokens!(iter, OpenBracket Ident Colon Colon Ident Eq Literal{..} CloseBracket Ident);\n+            },\n+            // pub\n+            Some(LintDeclSearchResult {\n+                token_kind: TokenKind::Ident,\n+                ..\n+            }) => (),\n+            _ => continue,\n         }\n-        docs.pop(); // remove final newline\n \n         let (name, group, desc) = match_tokens!(\n             iter,\n@@ -956,7 +843,7 @@ fn parse_contents(contents: &str, module: &str, lints: &mut Vec<Lint>) {\n             ..\n         }) = iter.next()\n         {\n-            lints.push(Lint::new(name, group, desc, module, start..range.end, docs));\n+            lints.push(Lint::new(name, group, desc, module, start..range.end));\n         }\n     }\n }\n@@ -1186,15 +1073,13 @@ mod tests {\n                 \"\\\"really long text\\\"\",\n                 \"module_name\",\n                 Range::default(),\n-                String::new(),\n             ),\n             Lint::new(\n                 \"doc_markdown\",\n                 \"pedantic\",\n                 \"\\\"single line\\\"\",\n                 \"module_name\",\n                 Range::default(),\n-                String::new(),\n             ),\n         ];\n         assert_eq!(expected, result);\n@@ -1234,23 +1119,20 @@ mod tests {\n                 \"\\\"abc\\\"\",\n                 \"module_name\",\n                 Range::default(),\n-                String::new(),\n             ),\n             Lint::new(\n                 \"should_assert_eq2\",\n                 \"internal\",\n                 \"\\\"abc\\\"\",\n                 \"module_name\",\n                 Range::default(),\n-                String::new(),\n             ),\n             Lint::new(\n                 \"should_assert_eq2\",\n                 \"internal_style\",\n                 \"\\\"abc\\\"\",\n                 \"module_name\",\n                 Range::default(),\n-                String::new(),\n             ),\n         ];\n         let expected = vec![Lint::new(\n@@ -1259,59 +1141,29 @@ mod tests {\n             \"\\\"abc\\\"\",\n             \"module_name\",\n             Range::default(),\n-            String::new(),\n         )];\n         assert_eq!(expected, Lint::usable_lints(&lints));\n     }\n \n     #[test]\n     fn test_by_lint_group() {\n         let lints = vec![\n-            Lint::new(\n-                \"should_assert_eq\",\n-                \"group1\",\n-                \"\\\"abc\\\"\",\n-                \"module_name\",\n-                Range::default(),\n-                String::new(),\n-            ),\n+            Lint::new(\"should_assert_eq\", \"group1\", \"\\\"abc\\\"\", \"module_name\", Range::default()),\n             Lint::new(\n                 \"should_assert_eq2\",\n                 \"group2\",\n                 \"\\\"abc\\\"\",\n                 \"module_name\",\n                 Range::default(),\n-                String::new(),\n-            ),\n-            Lint::new(\n-                \"incorrect_match\",\n-                \"group1\",\n-                \"\\\"abc\\\"\",\n-                \"module_name\",\n-                Range::default(),\n-                String::new(),\n             ),\n+            Lint::new(\"incorrect_match\", \"group1\", \"\\\"abc\\\"\", \"module_name\", Range::default()),\n         ];\n         let mut expected: HashMap<String, Vec<Lint>> = HashMap::new();\n         expected.insert(\n             \"group1\".to_string(),\n             vec![\n-                Lint::new(\n-                    \"should_assert_eq\",\n-                    \"group1\",\n-                    \"\\\"abc\\\"\",\n-                    \"module_name\",\n-                    Range::default(),\n-                    String::new(),\n-                ),\n-                Lint::new(\n-                    \"incorrect_match\",\n-                    \"group1\",\n-                    \"\\\"abc\\\"\",\n-                    \"module_name\",\n-                    Range::default(),\n-                    String::new(),\n-                ),\n+                Lint::new(\"should_assert_eq\", \"group1\", \"\\\"abc\\\"\", \"module_name\", Range::default()),\n+                Lint::new(\"incorrect_match\", \"group1\", \"\\\"abc\\\"\", \"module_name\", Range::default()),\n             ],\n         );\n         expected.insert(\n@@ -1322,7 +1174,6 @@ mod tests {\n                 \"\\\"abc\\\"\",\n                 \"module_name\",\n                 Range::default(),\n-                String::new(),\n             )],\n         );\n         assert_eq!(expected, Lint::by_lint_group(lints.into_iter()));\n@@ -1357,48 +1208,4 @@ mod tests {\n \n         assert_eq!(expected, gen_deprecated(&lints));\n     }\n-\n-    #[test]\n-    fn test_gen_lint_group_list() {\n-        let lints = vec![\n-            Lint::new(\n-                \"abc\",\n-                \"group1\",\n-                \"\\\"abc\\\"\",\n-                \"module_name\",\n-                Range::default(),\n-                String::new(),\n-            ),\n-            Lint::new(\n-                \"should_assert_eq\",\n-                \"group1\",\n-                \"\\\"abc\\\"\",\n-                \"module_name\",\n-                Range::default(),\n-                String::new(),\n-            ),\n-            Lint::new(\n-                \"internal\",\n-                \"internal_style\",\n-                \"\\\"abc\\\"\",\n-                \"module_name\",\n-                Range::default(),\n-                String::new(),\n-            ),\n-        ];\n-        let expected = GENERATED_FILE_COMMENT.to_string()\n-            + &[\n-                \"store.register_group(true, \\\"clippy::group1\\\", Some(\\\"clippy_group1\\\"), vec![\",\n-                \"    LintId::of(module_name::ABC),\",\n-                \"    LintId::of(module_name::INTERNAL),\",\n-                \"    LintId::of(module_name::SHOULD_ASSERT_EQ),\",\n-                \"])\",\n-            ]\n-            .join(\"\\n\")\n-            + \"\\n\";\n-\n-        let result = gen_lint_group_list(\"group1\", lints.iter());\n-\n-        assert_eq!(expected, result);\n-    }\n }"}, {"sha": "5368932b3528dadf5a1ac0b659567d846b4fd9bd", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "patch": "@@ -11,6 +11,7 @@ edition = \"2021\"\n [dependencies]\n cargo_metadata = \"0.14\"\n clippy_utils = { path = \"../clippy_utils\" }\n+declare_clippy_lint = { path = \"../declare_clippy_lint\" }\n if_chain = \"1.0\"\n itertools = \"0.10.1\"\n pulldown-cmark = { version = \"0.9\", default-features = false }"}, {"sha": "c6ae0bddc5a902ac315dd1181789c3e16872f5b0", "filename": "clippy_lints/src/declared_lints.rs", "status": "added", "additions": 620, "deletions": 0, "changes": 620, "blob_url": "https://github.com/rust-lang/rust/blob/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "patch": "@@ -0,0 +1,620 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+pub(crate) static LINTS: &[&crate::LintInfo] = &[\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::clippy_lints_internal::CLIPPY_LINTS_INTERNAL_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::collapsible_calls::COLLAPSIBLE_SPAN_LINT_CALLS_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::compiler_lint_functions::COMPILER_LINT_FUNCTIONS_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::if_chain_style::IF_CHAIN_STYLE_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::interning_defined_symbol::INTERNING_DEFINED_SYMBOL_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::interning_defined_symbol::UNNECESSARY_SYMBOL_STR_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::invalid_paths::INVALID_PATHS_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::lint_without_lint_pass::DEFAULT_DEPRECATION_REASON_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::lint_without_lint_pass::DEFAULT_LINT_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::lint_without_lint_pass::INVALID_CLIPPY_VERSION_ATTRIBUTE_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::lint_without_lint_pass::LINT_WITHOUT_LINT_PASS_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::lint_without_lint_pass::MISSING_CLIPPY_VERSION_ATTRIBUTE_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::msrv_attr_impl::MISSING_MSRV_ATTR_IMPL_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::outer_expn_data_pass::OUTER_EXPN_EXPN_DATA_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::produce_ice::PRODUCE_ICE_INFO,\n+    #[cfg(feature = \"internal\")]\n+    crate::utils::internal_lints::unnecessary_def_path::UNNECESSARY_DEF_PATH_INFO,\n+    crate::almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE_INFO,\n+    crate::approx_const::APPROX_CONSTANT_INFO,\n+    crate::as_conversions::AS_CONVERSIONS_INFO,\n+    crate::asm_syntax::INLINE_ASM_X86_ATT_SYNTAX_INFO,\n+    crate::asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX_INFO,\n+    crate::assertions_on_constants::ASSERTIONS_ON_CONSTANTS_INFO,\n+    crate::assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES_INFO,\n+    crate::async_yields_async::ASYNC_YIELDS_ASYNC_INFO,\n+    crate::attrs::ALLOW_ATTRIBUTES_WITHOUT_REASON_INFO,\n+    crate::attrs::BLANKET_CLIPPY_RESTRICTION_LINTS_INFO,\n+    crate::attrs::DEPRECATED_CFG_ATTR_INFO,\n+    crate::attrs::DEPRECATED_SEMVER_INFO,\n+    crate::attrs::EMPTY_LINE_AFTER_OUTER_ATTR_INFO,\n+    crate::attrs::INLINE_ALWAYS_INFO,\n+    crate::attrs::MISMATCHED_TARGET_OS_INFO,\n+    crate::attrs::USELESS_ATTRIBUTE_INFO,\n+    crate::await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE_INFO,\n+    crate::await_holding_invalid::AWAIT_HOLDING_LOCK_INFO,\n+    crate::await_holding_invalid::AWAIT_HOLDING_REFCELL_REF_INFO,\n+    crate::blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS_INFO,\n+    crate::bool_assert_comparison::BOOL_ASSERT_COMPARISON_INFO,\n+    crate::bool_to_int_with_if::BOOL_TO_INT_WITH_IF_INFO,\n+    crate::booleans::NONMINIMAL_BOOL_INFO,\n+    crate::booleans::OVERLY_COMPLEX_BOOL_EXPR_INFO,\n+    crate::borrow_deref_ref::BORROW_DEREF_REF_INFO,\n+    crate::box_default::BOX_DEFAULT_INFO,\n+    crate::cargo::CARGO_COMMON_METADATA_INFO,\n+    crate::cargo::MULTIPLE_CRATE_VERSIONS_INFO,\n+    crate::cargo::NEGATIVE_FEATURE_NAMES_INFO,\n+    crate::cargo::REDUNDANT_FEATURE_NAMES_INFO,\n+    crate::cargo::WILDCARD_DEPENDENCIES_INFO,\n+    crate::casts::AS_PTR_CAST_MUT_INFO,\n+    crate::casts::AS_UNDERSCORE_INFO,\n+    crate::casts::BORROW_AS_PTR_INFO,\n+    crate::casts::CAST_ABS_TO_UNSIGNED_INFO,\n+    crate::casts::CAST_ENUM_CONSTRUCTOR_INFO,\n+    crate::casts::CAST_ENUM_TRUNCATION_INFO,\n+    crate::casts::CAST_LOSSLESS_INFO,\n+    crate::casts::CAST_NAN_TO_INT_INFO,\n+    crate::casts::CAST_POSSIBLE_TRUNCATION_INFO,\n+    crate::casts::CAST_POSSIBLE_WRAP_INFO,\n+    crate::casts::CAST_PRECISION_LOSS_INFO,\n+    crate::casts::CAST_PTR_ALIGNMENT_INFO,\n+    crate::casts::CAST_REF_TO_MUT_INFO,\n+    crate::casts::CAST_SIGN_LOSS_INFO,\n+    crate::casts::CAST_SLICE_DIFFERENT_SIZES_INFO,\n+    crate::casts::CAST_SLICE_FROM_RAW_PARTS_INFO,\n+    crate::casts::CHAR_LIT_AS_U8_INFO,\n+    crate::casts::FN_TO_NUMERIC_CAST_INFO,\n+    crate::casts::FN_TO_NUMERIC_CAST_ANY_INFO,\n+    crate::casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION_INFO,\n+    crate::casts::PTR_AS_PTR_INFO,\n+    crate::casts::UNNECESSARY_CAST_INFO,\n+    crate::checked_conversions::CHECKED_CONVERSIONS_INFO,\n+    crate::cognitive_complexity::COGNITIVE_COMPLEXITY_INFO,\n+    crate::collapsible_if::COLLAPSIBLE_ELSE_IF_INFO,\n+    crate::collapsible_if::COLLAPSIBLE_IF_INFO,\n+    crate::comparison_chain::COMPARISON_CHAIN_INFO,\n+    crate::copies::BRANCHES_SHARING_CODE_INFO,\n+    crate::copies::IFS_SAME_COND_INFO,\n+    crate::copies::IF_SAME_THEN_ELSE_INFO,\n+    crate::copies::SAME_FUNCTIONS_IN_IF_CONDITION_INFO,\n+    crate::copy_iterator::COPY_ITERATOR_INFO,\n+    crate::crate_in_macro_def::CRATE_IN_MACRO_DEF_INFO,\n+    crate::create_dir::CREATE_DIR_INFO,\n+    crate::dbg_macro::DBG_MACRO_INFO,\n+    crate::default::DEFAULT_TRAIT_ACCESS_INFO,\n+    crate::default::FIELD_REASSIGN_WITH_DEFAULT_INFO,\n+    crate::default_instead_of_iter_empty::DEFAULT_INSTEAD_OF_ITER_EMPTY_INFO,\n+    crate::default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK_INFO,\n+    crate::default_union_representation::DEFAULT_UNION_REPRESENTATION_INFO,\n+    crate::dereference::EXPLICIT_AUTO_DEREF_INFO,\n+    crate::dereference::EXPLICIT_DEREF_METHODS_INFO,\n+    crate::dereference::NEEDLESS_BORROW_INFO,\n+    crate::dereference::REF_BINDING_TO_REFERENCE_INFO,\n+    crate::derivable_impls::DERIVABLE_IMPLS_INFO,\n+    crate::derive::DERIVE_HASH_XOR_EQ_INFO,\n+    crate::derive::DERIVE_ORD_XOR_PARTIAL_ORD_INFO,\n+    crate::derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ_INFO,\n+    crate::derive::EXPL_IMPL_CLONE_ON_COPY_INFO,\n+    crate::derive::UNSAFE_DERIVE_DESERIALIZE_INFO,\n+    crate::disallowed_macros::DISALLOWED_MACROS_INFO,\n+    crate::disallowed_methods::DISALLOWED_METHODS_INFO,\n+    crate::disallowed_names::DISALLOWED_NAMES_INFO,\n+    crate::disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS_INFO,\n+    crate::disallowed_types::DISALLOWED_TYPES_INFO,\n+    crate::doc::DOC_LINK_WITH_QUOTES_INFO,\n+    crate::doc::DOC_MARKDOWN_INFO,\n+    crate::doc::MISSING_ERRORS_DOC_INFO,\n+    crate::doc::MISSING_PANICS_DOC_INFO,\n+    crate::doc::MISSING_SAFETY_DOC_INFO,\n+    crate::doc::NEEDLESS_DOCTEST_MAIN_INFO,\n+    crate::double_parens::DOUBLE_PARENS_INFO,\n+    crate::drop_forget_ref::DROP_COPY_INFO,\n+    crate::drop_forget_ref::DROP_NON_DROP_INFO,\n+    crate::drop_forget_ref::DROP_REF_INFO,\n+    crate::drop_forget_ref::FORGET_COPY_INFO,\n+    crate::drop_forget_ref::FORGET_NON_DROP_INFO,\n+    crate::drop_forget_ref::FORGET_REF_INFO,\n+    crate::drop_forget_ref::UNDROPPED_MANUALLY_DROPS_INFO,\n+    crate::duplicate_mod::DUPLICATE_MOD_INFO,\n+    crate::else_if_without_else::ELSE_IF_WITHOUT_ELSE_INFO,\n+    crate::empty_drop::EMPTY_DROP_INFO,\n+    crate::empty_enum::EMPTY_ENUM_INFO,\n+    crate::empty_structs_with_brackets::EMPTY_STRUCTS_WITH_BRACKETS_INFO,\n+    crate::entry::MAP_ENTRY_INFO,\n+    crate::enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT_INFO,\n+    crate::enum_variants::ENUM_VARIANT_NAMES_INFO,\n+    crate::enum_variants::MODULE_INCEPTION_INFO,\n+    crate::enum_variants::MODULE_NAME_REPETITIONS_INFO,\n+    crate::equatable_if_let::EQUATABLE_IF_LET_INFO,\n+    crate::escape::BOXED_LOCAL_INFO,\n+    crate::eta_reduction::REDUNDANT_CLOSURE_INFO,\n+    crate::eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS_INFO,\n+    crate::excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS_INFO,\n+    crate::excessive_bools::STRUCT_EXCESSIVE_BOOLS_INFO,\n+    crate::exhaustive_items::EXHAUSTIVE_ENUMS_INFO,\n+    crate::exhaustive_items::EXHAUSTIVE_STRUCTS_INFO,\n+    crate::exit::EXIT_INFO,\n+    crate::explicit_write::EXPLICIT_WRITE_INFO,\n+    crate::fallible_impl_from::FALLIBLE_IMPL_FROM_INFO,\n+    crate::float_literal::EXCESSIVE_PRECISION_INFO,\n+    crate::float_literal::LOSSY_FLOAT_LITERAL_INFO,\n+    crate::floating_point_arithmetic::IMPRECISE_FLOPS_INFO,\n+    crate::floating_point_arithmetic::SUBOPTIMAL_FLOPS_INFO,\n+    crate::format::USELESS_FORMAT_INFO,\n+    crate::format_args::FORMAT_IN_FORMAT_ARGS_INFO,\n+    crate::format_args::TO_STRING_IN_FORMAT_ARGS_INFO,\n+    crate::format_args::UNINLINED_FORMAT_ARGS_INFO,\n+    crate::format_args::UNUSED_FORMAT_SPECS_INFO,\n+    crate::format_impl::PRINT_IN_FORMAT_IMPL_INFO,\n+    crate::format_impl::RECURSIVE_FORMAT_IMPL_INFO,\n+    crate::format_push_string::FORMAT_PUSH_STRING_INFO,\n+    crate::formatting::POSSIBLE_MISSING_COMMA_INFO,\n+    crate::formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING_INFO,\n+    crate::formatting::SUSPICIOUS_ELSE_FORMATTING_INFO,\n+    crate::formatting::SUSPICIOUS_UNARY_OP_FORMATTING_INFO,\n+    crate::from_over_into::FROM_OVER_INTO_INFO,\n+    crate::from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR_INFO,\n+    crate::from_str_radix_10::FROM_STR_RADIX_10_INFO,\n+    crate::functions::DOUBLE_MUST_USE_INFO,\n+    crate::functions::MUST_USE_CANDIDATE_INFO,\n+    crate::functions::MUST_USE_UNIT_INFO,\n+    crate::functions::NOT_UNSAFE_PTR_ARG_DEREF_INFO,\n+    crate::functions::RESULT_LARGE_ERR_INFO,\n+    crate::functions::RESULT_UNIT_ERR_INFO,\n+    crate::functions::TOO_MANY_ARGUMENTS_INFO,\n+    crate::functions::TOO_MANY_LINES_INFO,\n+    crate::future_not_send::FUTURE_NOT_SEND_INFO,\n+    crate::if_let_mutex::IF_LET_MUTEX_INFO,\n+    crate::if_not_else::IF_NOT_ELSE_INFO,\n+    crate::if_then_some_else_none::IF_THEN_SOME_ELSE_NONE_INFO,\n+    crate::implicit_hasher::IMPLICIT_HASHER_INFO,\n+    crate::implicit_return::IMPLICIT_RETURN_INFO,\n+    crate::implicit_saturating_add::IMPLICIT_SATURATING_ADD_INFO,\n+    crate::implicit_saturating_sub::IMPLICIT_SATURATING_SUB_INFO,\n+    crate::inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR_INFO,\n+    crate::index_refutable_slice::INDEX_REFUTABLE_SLICE_INFO,\n+    crate::indexing_slicing::INDEXING_SLICING_INFO,\n+    crate::indexing_slicing::OUT_OF_BOUNDS_INDEXING_INFO,\n+    crate::infinite_iter::INFINITE_ITER_INFO,\n+    crate::infinite_iter::MAYBE_INFINITE_ITER_INFO,\n+    crate::inherent_impl::MULTIPLE_INHERENT_IMPL_INFO,\n+    crate::inherent_to_string::INHERENT_TO_STRING_INFO,\n+    crate::inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY_INFO,\n+    crate::init_numbered_fields::INIT_NUMBERED_FIELDS_INFO,\n+    crate::inline_fn_without_body::INLINE_FN_WITHOUT_BODY_INFO,\n+    crate::int_plus_one::INT_PLUS_ONE_INFO,\n+    crate::invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS_INFO,\n+    crate::invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED_INFO,\n+    crate::items_after_statements::ITEMS_AFTER_STATEMENTS_INFO,\n+    crate::iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR_INFO,\n+    crate::large_const_arrays::LARGE_CONST_ARRAYS_INFO,\n+    crate::large_enum_variant::LARGE_ENUM_VARIANT_INFO,\n+    crate::large_include_file::LARGE_INCLUDE_FILE_INFO,\n+    crate::large_stack_arrays::LARGE_STACK_ARRAYS_INFO,\n+    crate::len_zero::COMPARISON_TO_EMPTY_INFO,\n+    crate::len_zero::LEN_WITHOUT_IS_EMPTY_INFO,\n+    crate::len_zero::LEN_ZERO_INFO,\n+    crate::let_if_seq::USELESS_LET_IF_SEQ_INFO,\n+    crate::let_underscore::LET_UNDERSCORE_LOCK_INFO,\n+    crate::let_underscore::LET_UNDERSCORE_MUST_USE_INFO,\n+    crate::lifetimes::EXTRA_UNUSED_LIFETIMES_INFO,\n+    crate::lifetimes::NEEDLESS_LIFETIMES_INFO,\n+    crate::literal_representation::DECIMAL_LITERAL_REPRESENTATION_INFO,\n+    crate::literal_representation::INCONSISTENT_DIGIT_GROUPING_INFO,\n+    crate::literal_representation::LARGE_DIGIT_GROUPS_INFO,\n+    crate::literal_representation::MISTYPED_LITERAL_SUFFIXES_INFO,\n+    crate::literal_representation::UNREADABLE_LITERAL_INFO,\n+    crate::literal_representation::UNUSUAL_BYTE_GROUPINGS_INFO,\n+    crate::loops::EMPTY_LOOP_INFO,\n+    crate::loops::EXPLICIT_COUNTER_LOOP_INFO,\n+    crate::loops::EXPLICIT_INTO_ITER_LOOP_INFO,\n+    crate::loops::EXPLICIT_ITER_LOOP_INFO,\n+    crate::loops::FOR_KV_MAP_INFO,\n+    crate::loops::ITER_NEXT_LOOP_INFO,\n+    crate::loops::MANUAL_FIND_INFO,\n+    crate::loops::MANUAL_FLATTEN_INFO,\n+    crate::loops::MANUAL_MEMCPY_INFO,\n+    crate::loops::MISSING_SPIN_LOOP_INFO,\n+    crate::loops::MUT_RANGE_BOUND_INFO,\n+    crate::loops::NEEDLESS_COLLECT_INFO,\n+    crate::loops::NEEDLESS_RANGE_LOOP_INFO,\n+    crate::loops::NEVER_LOOP_INFO,\n+    crate::loops::SAME_ITEM_PUSH_INFO,\n+    crate::loops::SINGLE_ELEMENT_LOOP_INFO,\n+    crate::loops::WHILE_IMMUTABLE_CONDITION_INFO,\n+    crate::loops::WHILE_LET_LOOP_INFO,\n+    crate::loops::WHILE_LET_ON_ITERATOR_INFO,\n+    crate::macro_use::MACRO_USE_IMPORTS_INFO,\n+    crate::main_recursion::MAIN_RECURSION_INFO,\n+    crate::manual_assert::MANUAL_ASSERT_INFO,\n+    crate::manual_async_fn::MANUAL_ASYNC_FN_INFO,\n+    crate::manual_bits::MANUAL_BITS_INFO,\n+    crate::manual_clamp::MANUAL_CLAMP_INFO,\n+    crate::manual_instant_elapsed::MANUAL_INSTANT_ELAPSED_INFO,\n+    crate::manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE_INFO,\n+    crate::manual_rem_euclid::MANUAL_REM_EUCLID_INFO,\n+    crate::manual_retain::MANUAL_RETAIN_INFO,\n+    crate::manual_string_new::MANUAL_STRING_NEW_INFO,\n+    crate::manual_strip::MANUAL_STRIP_INFO,\n+    crate::map_unit_fn::OPTION_MAP_UNIT_FN_INFO,\n+    crate::map_unit_fn::RESULT_MAP_UNIT_FN_INFO,\n+    crate::match_result_ok::MATCH_RESULT_OK_INFO,\n+    crate::matches::COLLAPSIBLE_MATCH_INFO,\n+    crate::matches::INFALLIBLE_DESTRUCTURING_MATCH_INFO,\n+    crate::matches::MANUAL_FILTER_INFO,\n+    crate::matches::MANUAL_MAP_INFO,\n+    crate::matches::MANUAL_UNWRAP_OR_INFO,\n+    crate::matches::MATCH_AS_REF_INFO,\n+    crate::matches::MATCH_BOOL_INFO,\n+    crate::matches::MATCH_LIKE_MATCHES_MACRO_INFO,\n+    crate::matches::MATCH_ON_VEC_ITEMS_INFO,\n+    crate::matches::MATCH_OVERLAPPING_ARM_INFO,\n+    crate::matches::MATCH_REF_PATS_INFO,\n+    crate::matches::MATCH_SAME_ARMS_INFO,\n+    crate::matches::MATCH_SINGLE_BINDING_INFO,\n+    crate::matches::MATCH_STR_CASE_MISMATCH_INFO,\n+    crate::matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS_INFO,\n+    crate::matches::MATCH_WILD_ERR_ARM_INFO,\n+    crate::matches::NEEDLESS_MATCH_INFO,\n+    crate::matches::REDUNDANT_PATTERN_MATCHING_INFO,\n+    crate::matches::REST_PAT_IN_FULLY_BOUND_STRUCTS_INFO,\n+    crate::matches::SIGNIFICANT_DROP_IN_SCRUTINEE_INFO,\n+    crate::matches::SINGLE_MATCH_INFO,\n+    crate::matches::SINGLE_MATCH_ELSE_INFO,\n+    crate::matches::TRY_ERR_INFO,\n+    crate::matches::WILDCARD_ENUM_MATCH_ARM_INFO,\n+    crate::matches::WILDCARD_IN_OR_PATTERNS_INFO,\n+    crate::mem_forget::MEM_FORGET_INFO,\n+    crate::mem_replace::MEM_REPLACE_OPTION_WITH_NONE_INFO,\n+    crate::mem_replace::MEM_REPLACE_WITH_DEFAULT_INFO,\n+    crate::mem_replace::MEM_REPLACE_WITH_UNINIT_INFO,\n+    crate::methods::BIND_INSTEAD_OF_MAP_INFO,\n+    crate::methods::BYTES_COUNT_TO_LEN_INFO,\n+    crate::methods::BYTES_NTH_INFO,\n+    crate::methods::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS_INFO,\n+    crate::methods::CHARS_LAST_CMP_INFO,\n+    crate::methods::CHARS_NEXT_CMP_INFO,\n+    crate::methods::CLONED_INSTEAD_OF_COPIED_INFO,\n+    crate::methods::CLONE_DOUBLE_REF_INFO,\n+    crate::methods::CLONE_ON_COPY_INFO,\n+    crate::methods::CLONE_ON_REF_PTR_INFO,\n+    crate::methods::COLLAPSIBLE_STR_REPLACE_INFO,\n+    crate::methods::ERR_EXPECT_INFO,\n+    crate::methods::EXPECT_FUN_CALL_INFO,\n+    crate::methods::EXPECT_USED_INFO,\n+    crate::methods::EXTEND_WITH_DRAIN_INFO,\n+    crate::methods::FILETYPE_IS_FILE_INFO,\n+    crate::methods::FILTER_MAP_IDENTITY_INFO,\n+    crate::methods::FILTER_MAP_NEXT_INFO,\n+    crate::methods::FILTER_NEXT_INFO,\n+    crate::methods::FLAT_MAP_IDENTITY_INFO,\n+    crate::methods::FLAT_MAP_OPTION_INFO,\n+    crate::methods::FROM_ITER_INSTEAD_OF_COLLECT_INFO,\n+    crate::methods::GET_FIRST_INFO,\n+    crate::methods::GET_LAST_WITH_LEN_INFO,\n+    crate::methods::GET_UNWRAP_INFO,\n+    crate::methods::IMPLICIT_CLONE_INFO,\n+    crate::methods::INEFFICIENT_TO_STRING_INFO,\n+    crate::methods::INSPECT_FOR_EACH_INFO,\n+    crate::methods::INTO_ITER_ON_REF_INFO,\n+    crate::methods::IS_DIGIT_ASCII_RADIX_INFO,\n+    crate::methods::ITERATOR_STEP_BY_ZERO_INFO,\n+    crate::methods::ITER_CLONED_COLLECT_INFO,\n+    crate::methods::ITER_COUNT_INFO,\n+    crate::methods::ITER_KV_MAP_INFO,\n+    crate::methods::ITER_NEXT_SLICE_INFO,\n+    crate::methods::ITER_NTH_INFO,\n+    crate::methods::ITER_NTH_ZERO_INFO,\n+    crate::methods::ITER_ON_EMPTY_COLLECTIONS_INFO,\n+    crate::methods::ITER_ON_SINGLE_ITEMS_INFO,\n+    crate::methods::ITER_OVEREAGER_CLONED_INFO,\n+    crate::methods::ITER_SKIP_NEXT_INFO,\n+    crate::methods::ITER_WITH_DRAIN_INFO,\n+    crate::methods::MANUAL_FILTER_MAP_INFO,\n+    crate::methods::MANUAL_FIND_MAP_INFO,\n+    crate::methods::MANUAL_OK_OR_INFO,\n+    crate::methods::MANUAL_SATURATING_ARITHMETIC_INFO,\n+    crate::methods::MANUAL_SPLIT_ONCE_INFO,\n+    crate::methods::MANUAL_STR_REPEAT_INFO,\n+    crate::methods::MAP_CLONE_INFO,\n+    crate::methods::MAP_COLLECT_RESULT_UNIT_INFO,\n+    crate::methods::MAP_ERR_IGNORE_INFO,\n+    crate::methods::MAP_FLATTEN_INFO,\n+    crate::methods::MAP_IDENTITY_INFO,\n+    crate::methods::MAP_UNWRAP_OR_INFO,\n+    crate::methods::MUT_MUTEX_LOCK_INFO,\n+    crate::methods::NAIVE_BYTECOUNT_INFO,\n+    crate::methods::NEEDLESS_OPTION_AS_DEREF_INFO,\n+    crate::methods::NEEDLESS_OPTION_TAKE_INFO,\n+    crate::methods::NEEDLESS_SPLITN_INFO,\n+    crate::methods::NEW_RET_NO_SELF_INFO,\n+    crate::methods::NONSENSICAL_OPEN_OPTIONS_INFO,\n+    crate::methods::NO_EFFECT_REPLACE_INFO,\n+    crate::methods::OBFUSCATED_IF_ELSE_INFO,\n+    crate::methods::OK_EXPECT_INFO,\n+    crate::methods::OPTION_AS_REF_DEREF_INFO,\n+    crate::methods::OPTION_FILTER_MAP_INFO,\n+    crate::methods::OPTION_MAP_OR_NONE_INFO,\n+    crate::methods::OR_FUN_CALL_INFO,\n+    crate::methods::OR_THEN_UNWRAP_INFO,\n+    crate::methods::PATH_BUF_PUSH_OVERWRITE_INFO,\n+    crate::methods::RANGE_ZIP_WITH_LEN_INFO,\n+    crate::methods::REPEAT_ONCE_INFO,\n+    crate::methods::RESULT_MAP_OR_INTO_OPTION_INFO,\n+    crate::methods::SEARCH_IS_SOME_INFO,\n+    crate::methods::SHOULD_IMPLEMENT_TRAIT_INFO,\n+    crate::methods::SINGLE_CHAR_ADD_STR_INFO,\n+    crate::methods::SINGLE_CHAR_PATTERN_INFO,\n+    crate::methods::SKIP_WHILE_NEXT_INFO,\n+    crate::methods::STABLE_SORT_PRIMITIVE_INFO,\n+    crate::methods::STRING_EXTEND_CHARS_INFO,\n+    crate::methods::SUSPICIOUS_MAP_INFO,\n+    crate::methods::SUSPICIOUS_SPLITN_INFO,\n+    crate::methods::SUSPICIOUS_TO_OWNED_INFO,\n+    crate::methods::UNINIT_ASSUMED_INIT_INFO,\n+    crate::methods::UNIT_HASH_INFO,\n+    crate::methods::UNNECESSARY_FILTER_MAP_INFO,\n+    crate::methods::UNNECESSARY_FIND_MAP_INFO,\n+    crate::methods::UNNECESSARY_FOLD_INFO,\n+    crate::methods::UNNECESSARY_JOIN_INFO,\n+    crate::methods::UNNECESSARY_LAZY_EVALUATIONS_INFO,\n+    crate::methods::UNNECESSARY_SORT_BY_INFO,\n+    crate::methods::UNNECESSARY_TO_OWNED_INFO,\n+    crate::methods::UNWRAP_OR_ELSE_DEFAULT_INFO,\n+    crate::methods::UNWRAP_USED_INFO,\n+    crate::methods::USELESS_ASREF_INFO,\n+    crate::methods::VEC_RESIZE_TO_ZERO_INFO,\n+    crate::methods::VERBOSE_FILE_READS_INFO,\n+    crate::methods::WRONG_SELF_CONVENTION_INFO,\n+    crate::methods::ZST_OFFSET_INFO,\n+    crate::minmax::MIN_MAX_INFO,\n+    crate::misc::SHORT_CIRCUIT_STATEMENT_INFO,\n+    crate::misc::TOPLEVEL_REF_ARG_INFO,\n+    crate::misc::USED_UNDERSCORE_BINDING_INFO,\n+    crate::misc::ZERO_PTR_INFO,\n+    crate::misc_early::BUILTIN_TYPE_SHADOW_INFO,\n+    crate::misc_early::DOUBLE_NEG_INFO,\n+    crate::misc_early::DUPLICATE_UNDERSCORE_ARGUMENT_INFO,\n+    crate::misc_early::MIXED_CASE_HEX_LITERALS_INFO,\n+    crate::misc_early::REDUNDANT_PATTERN_INFO,\n+    crate::misc_early::SEPARATED_LITERAL_SUFFIX_INFO,\n+    crate::misc_early::UNNEEDED_FIELD_PATTERN_INFO,\n+    crate::misc_early::UNNEEDED_WILDCARD_PATTERN_INFO,\n+    crate::misc_early::UNSEPARATED_LITERAL_SUFFIX_INFO,\n+    crate::misc_early::ZERO_PREFIXED_LITERAL_INFO,\n+    crate::mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER_INFO,\n+    crate::missing_const_for_fn::MISSING_CONST_FOR_FN_INFO,\n+    crate::missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS_INFO,\n+    crate::missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES_INFO,\n+    crate::missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS_INFO,\n+    crate::missing_trait_methods::MISSING_TRAIT_METHODS_INFO,\n+    crate::mixed_read_write_in_expression::DIVERGING_SUB_EXPRESSION_INFO,\n+    crate::mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION_INFO,\n+    crate::module_style::MOD_MODULE_FILES_INFO,\n+    crate::module_style::SELF_NAMED_MODULE_FILES_INFO,\n+    crate::multi_assignments::MULTI_ASSIGNMENTS_INFO,\n+    crate::mut_key::MUTABLE_KEY_TYPE_INFO,\n+    crate::mut_mut::MUT_MUT_INFO,\n+    crate::mut_reference::UNNECESSARY_MUT_PASSED_INFO,\n+    crate::mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL_INFO,\n+    crate::mutex_atomic::MUTEX_ATOMIC_INFO,\n+    crate::mutex_atomic::MUTEX_INTEGER_INFO,\n+    crate::needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE_INFO,\n+    crate::needless_bool::BOOL_COMPARISON_INFO,\n+    crate::needless_bool::NEEDLESS_BOOL_INFO,\n+    crate::needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE_INFO,\n+    crate::needless_continue::NEEDLESS_CONTINUE_INFO,\n+    crate::needless_for_each::NEEDLESS_FOR_EACH_INFO,\n+    crate::needless_late_init::NEEDLESS_LATE_INIT_INFO,\n+    crate::needless_parens_on_range_literals::NEEDLESS_PARENS_ON_RANGE_LITERALS_INFO,\n+    crate::needless_pass_by_value::NEEDLESS_PASS_BY_VALUE_INFO,\n+    crate::needless_question_mark::NEEDLESS_QUESTION_MARK_INFO,\n+    crate::needless_update::NEEDLESS_UPDATE_INFO,\n+    crate::neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD_INFO,\n+    crate::neg_multiply::NEG_MULTIPLY_INFO,\n+    crate::new_without_default::NEW_WITHOUT_DEFAULT_INFO,\n+    crate::no_effect::NO_EFFECT_INFO,\n+    crate::no_effect::NO_EFFECT_UNDERSCORE_BINDING_INFO,\n+    crate::no_effect::UNNECESSARY_OPERATION_INFO,\n+    crate::non_copy_const::BORROW_INTERIOR_MUTABLE_CONST_INFO,\n+    crate::non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST_INFO,\n+    crate::non_expressive_names::JUST_UNDERSCORES_AND_DIGITS_INFO,\n+    crate::non_expressive_names::MANY_SINGLE_CHAR_NAMES_INFO,\n+    crate::non_expressive_names::SIMILAR_NAMES_INFO,\n+    crate::non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS_INFO,\n+    crate::non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY_INFO,\n+    crate::nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES_INFO,\n+    crate::octal_escapes::OCTAL_ESCAPES_INFO,\n+    crate::only_used_in_recursion::ONLY_USED_IN_RECURSION_INFO,\n+    crate::operators::ABSURD_EXTREME_COMPARISONS_INFO,\n+    crate::operators::ARITHMETIC_SIDE_EFFECTS_INFO,\n+    crate::operators::ASSIGN_OP_PATTERN_INFO,\n+    crate::operators::BAD_BIT_MASK_INFO,\n+    crate::operators::CMP_NAN_INFO,\n+    crate::operators::CMP_OWNED_INFO,\n+    crate::operators::DOUBLE_COMPARISONS_INFO,\n+    crate::operators::DURATION_SUBSEC_INFO,\n+    crate::operators::EQ_OP_INFO,\n+    crate::operators::ERASING_OP_INFO,\n+    crate::operators::FLOAT_ARITHMETIC_INFO,\n+    crate::operators::FLOAT_CMP_INFO,\n+    crate::operators::FLOAT_CMP_CONST_INFO,\n+    crate::operators::FLOAT_EQUALITY_WITHOUT_ABS_INFO,\n+    crate::operators::IDENTITY_OP_INFO,\n+    crate::operators::INEFFECTIVE_BIT_MASK_INFO,\n+    crate::operators::INTEGER_ARITHMETIC_INFO,\n+    crate::operators::INTEGER_DIVISION_INFO,\n+    crate::operators::MISREFACTORED_ASSIGN_OP_INFO,\n+    crate::operators::MODULO_ARITHMETIC_INFO,\n+    crate::operators::MODULO_ONE_INFO,\n+    crate::operators::NEEDLESS_BITWISE_BOOL_INFO,\n+    crate::operators::OP_REF_INFO,\n+    crate::operators::PTR_EQ_INFO,\n+    crate::operators::SELF_ASSIGNMENT_INFO,\n+    crate::operators::VERBOSE_BIT_MASK_INFO,\n+    crate::option_env_unwrap::OPTION_ENV_UNWRAP_INFO,\n+    crate::option_if_let_else::OPTION_IF_LET_ELSE_INFO,\n+    crate::overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL_INFO,\n+    crate::panic_in_result_fn::PANIC_IN_RESULT_FN_INFO,\n+    crate::panic_unimplemented::PANIC_INFO,\n+    crate::panic_unimplemented::TODO_INFO,\n+    crate::panic_unimplemented::UNIMPLEMENTED_INFO,\n+    crate::panic_unimplemented::UNREACHABLE_INFO,\n+    crate::partial_pub_fields::PARTIAL_PUB_FIELDS_INFO,\n+    crate::partialeq_ne_impl::PARTIALEQ_NE_IMPL_INFO,\n+    crate::partialeq_to_none::PARTIALEQ_TO_NONE_INFO,\n+    crate::pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE_INFO,\n+    crate::pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF_INFO,\n+    crate::pattern_type_mismatch::PATTERN_TYPE_MISMATCH_INFO,\n+    crate::precedence::PRECEDENCE_INFO,\n+    crate::ptr::CMP_NULL_INFO,\n+    crate::ptr::INVALID_NULL_PTR_USAGE_INFO,\n+    crate::ptr::MUT_FROM_REF_INFO,\n+    crate::ptr::PTR_ARG_INFO,\n+    crate::ptr_offset_with_cast::PTR_OFFSET_WITH_CAST_INFO,\n+    crate::pub_use::PUB_USE_INFO,\n+    crate::question_mark::QUESTION_MARK_INFO,\n+    crate::ranges::MANUAL_RANGE_CONTAINS_INFO,\n+    crate::ranges::RANGE_MINUS_ONE_INFO,\n+    crate::ranges::RANGE_PLUS_ONE_INFO,\n+    crate::ranges::REVERSED_EMPTY_RANGES_INFO,\n+    crate::rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT_INFO,\n+    crate::read_zero_byte_vec::READ_ZERO_BYTE_VEC_INFO,\n+    crate::redundant_clone::REDUNDANT_CLONE_INFO,\n+    crate::redundant_closure_call::REDUNDANT_CLOSURE_CALL_INFO,\n+    crate::redundant_else::REDUNDANT_ELSE_INFO,\n+    crate::redundant_field_names::REDUNDANT_FIELD_NAMES_INFO,\n+    crate::redundant_pub_crate::REDUNDANT_PUB_CRATE_INFO,\n+    crate::redundant_slicing::DEREF_BY_SLICING_INFO,\n+    crate::redundant_slicing::REDUNDANT_SLICING_INFO,\n+    crate::redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES_INFO,\n+    crate::ref_option_ref::REF_OPTION_REF_INFO,\n+    crate::reference::DEREF_ADDROF_INFO,\n+    crate::regex::INVALID_REGEX_INFO,\n+    crate::regex::TRIVIAL_REGEX_INFO,\n+    crate::return_self_not_must_use::RETURN_SELF_NOT_MUST_USE_INFO,\n+    crate::returns::LET_AND_RETURN_INFO,\n+    crate::returns::NEEDLESS_RETURN_INFO,\n+    crate::same_name_method::SAME_NAME_METHOD_INFO,\n+    crate::self_named_constructors::SELF_NAMED_CONSTRUCTORS_INFO,\n+    crate::semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED_INFO,\n+    crate::serde_api::SERDE_API_MISUSE_INFO,\n+    crate::shadow::SHADOW_REUSE_INFO,\n+    crate::shadow::SHADOW_SAME_INFO,\n+    crate::shadow::SHADOW_UNRELATED_INFO,\n+    crate::single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES_INFO,\n+    crate::single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS_INFO,\n+    crate::size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT_INFO,\n+    crate::slow_vector_initialization::SLOW_VECTOR_INITIALIZATION_INFO,\n+    crate::std_instead_of_core::ALLOC_INSTEAD_OF_CORE_INFO,\n+    crate::std_instead_of_core::STD_INSTEAD_OF_ALLOC_INFO,\n+    crate::std_instead_of_core::STD_INSTEAD_OF_CORE_INFO,\n+    crate::strings::STRING_ADD_INFO,\n+    crate::strings::STRING_ADD_ASSIGN_INFO,\n+    crate::strings::STRING_FROM_UTF8_AS_BYTES_INFO,\n+    crate::strings::STRING_LIT_AS_BYTES_INFO,\n+    crate::strings::STRING_SLICE_INFO,\n+    crate::strings::STRING_TO_STRING_INFO,\n+    crate::strings::STR_TO_STRING_INFO,\n+    crate::strings::TRIM_SPLIT_WHITESPACE_INFO,\n+    crate::strlen_on_c_strings::STRLEN_ON_C_STRINGS_INFO,\n+    crate::suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS_INFO,\n+    crate::suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL_INFO,\n+    crate::suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL_INFO,\n+    crate::swap::ALMOST_SWAPPED_INFO,\n+    crate::swap::MANUAL_SWAP_INFO,\n+    crate::swap_ptr_to_ref::SWAP_PTR_TO_REF_INFO,\n+    crate::tabs_in_doc_comments::TABS_IN_DOC_COMMENTS_INFO,\n+    crate::temporary_assignment::TEMPORARY_ASSIGNMENT_INFO,\n+    crate::to_digit_is_some::TO_DIGIT_IS_SOME_INFO,\n+    crate::trailing_empty_array::TRAILING_EMPTY_ARRAY_INFO,\n+    crate::trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS_INFO,\n+    crate::trait_bounds::TYPE_REPETITION_IN_BOUNDS_INFO,\n+    crate::transmute::CROSSPOINTER_TRANSMUTE_INFO,\n+    crate::transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS_INFO,\n+    crate::transmute::TRANSMUTE_BYTES_TO_STR_INFO,\n+    crate::transmute::TRANSMUTE_FLOAT_TO_INT_INFO,\n+    crate::transmute::TRANSMUTE_INT_TO_BOOL_INFO,\n+    crate::transmute::TRANSMUTE_INT_TO_CHAR_INFO,\n+    crate::transmute::TRANSMUTE_INT_TO_FLOAT_INFO,\n+    crate::transmute::TRANSMUTE_NUM_TO_BYTES_INFO,\n+    crate::transmute::TRANSMUTE_PTR_TO_PTR_INFO,\n+    crate::transmute::TRANSMUTE_PTR_TO_REF_INFO,\n+    crate::transmute::TRANSMUTE_UNDEFINED_REPR_INFO,\n+    crate::transmute::TRANSMUTING_NULL_INFO,\n+    crate::transmute::UNSOUND_COLLECTION_TRANSMUTE_INFO,\n+    crate::transmute::USELESS_TRANSMUTE_INFO,\n+    crate::transmute::WRONG_TRANSMUTE_INFO,\n+    crate::types::BORROWED_BOX_INFO,\n+    crate::types::BOX_COLLECTION_INFO,\n+    crate::types::LINKEDLIST_INFO,\n+    crate::types::OPTION_OPTION_INFO,\n+    crate::types::RC_BUFFER_INFO,\n+    crate::types::RC_MUTEX_INFO,\n+    crate::types::REDUNDANT_ALLOCATION_INFO,\n+    crate::types::TYPE_COMPLEXITY_INFO,\n+    crate::types::VEC_BOX_INFO,\n+    crate::undocumented_unsafe_blocks::UNDOCUMENTED_UNSAFE_BLOCKS_INFO,\n+    crate::unicode::INVISIBLE_CHARACTERS_INFO,\n+    crate::unicode::NON_ASCII_LITERAL_INFO,\n+    crate::unicode::UNICODE_NOT_NFC_INFO,\n+    crate::uninit_vec::UNINIT_VEC_INFO,\n+    crate::unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD_INFO,\n+    crate::unit_types::LET_UNIT_VALUE_INFO,\n+    crate::unit_types::UNIT_ARG_INFO,\n+    crate::unit_types::UNIT_CMP_INFO,\n+    crate::unnamed_address::FN_ADDRESS_COMPARISONS_INFO,\n+    crate::unnamed_address::VTABLE_ADDRESS_COMPARISONS_INFO,\n+    crate::unnecessary_owned_empty_strings::UNNECESSARY_OWNED_EMPTY_STRINGS_INFO,\n+    crate::unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS_INFO,\n+    crate::unnecessary_wraps::UNNECESSARY_WRAPS_INFO,\n+    crate::unnested_or_patterns::UNNESTED_OR_PATTERNS_INFO,\n+    crate::unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME_INFO,\n+    crate::unused_async::UNUSED_ASYNC_INFO,\n+    crate::unused_io_amount::UNUSED_IO_AMOUNT_INFO,\n+    crate::unused_peekable::UNUSED_PEEKABLE_INFO,\n+    crate::unused_rounding::UNUSED_ROUNDING_INFO,\n+    crate::unused_self::UNUSED_SELF_INFO,\n+    crate::unused_unit::UNUSED_UNIT_INFO,\n+    crate::unwrap::PANICKING_UNWRAP_INFO,\n+    crate::unwrap::UNNECESSARY_UNWRAP_INFO,\n+    crate::unwrap_in_result::UNWRAP_IN_RESULT_INFO,\n+    crate::upper_case_acronyms::UPPER_CASE_ACRONYMS_INFO,\n+    crate::use_self::USE_SELF_INFO,\n+    crate::useless_conversion::USELESS_CONVERSION_INFO,\n+    crate::vec::USELESS_VEC_INFO,\n+    crate::vec_init_then_push::VEC_INIT_THEN_PUSH_INFO,\n+    crate::wildcard_imports::ENUM_GLOB_USE_INFO,\n+    crate::wildcard_imports::WILDCARD_IMPORTS_INFO,\n+    crate::write::PRINTLN_EMPTY_STRING_INFO,\n+    crate::write::PRINT_LITERAL_INFO,\n+    crate::write::PRINT_STDERR_INFO,\n+    crate::write::PRINT_STDOUT_INFO,\n+    crate::write::PRINT_WITH_NEWLINE_INFO,\n+    crate::write::USE_DEBUG_INFO,\n+    crate::write::WRITELN_EMPTY_STRING_INFO,\n+    crate::write::WRITE_LITERAL_INFO,\n+    crate::write::WRITE_WITH_NEWLINE_INFO,\n+    crate::zero_div_zero::ZERO_DIVIDED_BY_ZERO_INFO,\n+    crate::zero_sized_map_values::ZERO_SIZED_MAP_VALUES_INFO,\n+];"}, {"sha": "34fded26cfcfcff469c05672df638cf3224a3009", "filename": "clippy_lints/src/lib.register_all.rs", "status": "removed", "additions": 0, "deletions": 370, "changes": 370, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,370 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n-    LintId::of(almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE),\n-    LintId::of(approx_const::APPROX_CONSTANT),\n-    LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n-    LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n-    LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n-    LintId::of(attrs::DEPRECATED_CFG_ATTR),\n-    LintId::of(attrs::DEPRECATED_SEMVER),\n-    LintId::of(attrs::MISMATCHED_TARGET_OS),\n-    LintId::of(attrs::USELESS_ATTRIBUTE),\n-    LintId::of(await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE),\n-    LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n-    LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n-    LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n-    LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n-    LintId::of(bool_to_int_with_if::BOOL_TO_INT_WITH_IF),\n-    LintId::of(booleans::NONMINIMAL_BOOL),\n-    LintId::of(booleans::OVERLY_COMPLEX_BOOL_EXPR),\n-    LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n-    LintId::of(box_default::BOX_DEFAULT),\n-    LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n-    LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n-    LintId::of(casts::CAST_ENUM_TRUNCATION),\n-    LintId::of(casts::CAST_NAN_TO_INT),\n-    LintId::of(casts::CAST_REF_TO_MUT),\n-    LintId::of(casts::CAST_SLICE_DIFFERENT_SIZES),\n-    LintId::of(casts::CAST_SLICE_FROM_RAW_PARTS),\n-    LintId::of(casts::CHAR_LIT_AS_U8),\n-    LintId::of(casts::FN_TO_NUMERIC_CAST),\n-    LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-    LintId::of(casts::UNNECESSARY_CAST),\n-    LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n-    LintId::of(collapsible_if::COLLAPSIBLE_IF),\n-    LintId::of(comparison_chain::COMPARISON_CHAIN),\n-    LintId::of(copies::IFS_SAME_COND),\n-    LintId::of(copies::IF_SAME_THEN_ELSE),\n-    LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n-    LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n-    LintId::of(default_instead_of_iter_empty::DEFAULT_INSTEAD_OF_ITER_EMPTY),\n-    LintId::of(dereference::EXPLICIT_AUTO_DEREF),\n-    LintId::of(dereference::NEEDLESS_BORROW),\n-    LintId::of(derivable_impls::DERIVABLE_IMPLS),\n-    LintId::of(derive::DERIVE_HASH_XOR_EQ),\n-    LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n-    LintId::of(disallowed_macros::DISALLOWED_MACROS),\n-    LintId::of(disallowed_methods::DISALLOWED_METHODS),\n-    LintId::of(disallowed_names::DISALLOWED_NAMES),\n-    LintId::of(disallowed_types::DISALLOWED_TYPES),\n-    LintId::of(doc::MISSING_SAFETY_DOC),\n-    LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n-    LintId::of(double_parens::DOUBLE_PARENS),\n-    LintId::of(drop_forget_ref::DROP_COPY),\n-    LintId::of(drop_forget_ref::DROP_NON_DROP),\n-    LintId::of(drop_forget_ref::DROP_REF),\n-    LintId::of(drop_forget_ref::FORGET_COPY),\n-    LintId::of(drop_forget_ref::FORGET_NON_DROP),\n-    LintId::of(drop_forget_ref::FORGET_REF),\n-    LintId::of(drop_forget_ref::UNDROPPED_MANUALLY_DROPS),\n-    LintId::of(duplicate_mod::DUPLICATE_MOD),\n-    LintId::of(entry::MAP_ENTRY),\n-    LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n-    LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n-    LintId::of(enum_variants::MODULE_INCEPTION),\n-    LintId::of(escape::BOXED_LOCAL),\n-    LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n-    LintId::of(explicit_write::EXPLICIT_WRITE),\n-    LintId::of(float_literal::EXCESSIVE_PRECISION),\n-    LintId::of(format::USELESS_FORMAT),\n-    LintId::of(format_args::FORMAT_IN_FORMAT_ARGS),\n-    LintId::of(format_args::TO_STRING_IN_FORMAT_ARGS),\n-    LintId::of(format_args::UNINLINED_FORMAT_ARGS),\n-    LintId::of(format_args::UNUSED_FORMAT_SPECS),\n-    LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),\n-    LintId::of(format_impl::RECURSIVE_FORMAT_IMPL),\n-    LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n-    LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n-    LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n-    LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n-    LintId::of(from_over_into::FROM_OVER_INTO),\n-    LintId::of(from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR),\n-    LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n-    LintId::of(functions::DOUBLE_MUST_USE),\n-    LintId::of(functions::MUST_USE_UNIT),\n-    LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n-    LintId::of(functions::RESULT_LARGE_ERR),\n-    LintId::of(functions::RESULT_UNIT_ERR),\n-    LintId::of(functions::TOO_MANY_ARGUMENTS),\n-    LintId::of(if_let_mutex::IF_LET_MUTEX),\n-    LintId::of(implicit_saturating_add::IMPLICIT_SATURATING_ADD),\n-    LintId::of(implicit_saturating_sub::IMPLICIT_SATURATING_SUB),\n-    LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n-    LintId::of(infinite_iter::INFINITE_ITER),\n-    LintId::of(inherent_to_string::INHERENT_TO_STRING),\n-    LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n-    LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n-    LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n-    LintId::of(int_plus_one::INT_PLUS_ONE),\n-    LintId::of(invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED),\n-    LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n-    LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n-    LintId::of(len_zero::COMPARISON_TO_EMPTY),\n-    LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n-    LintId::of(len_zero::LEN_ZERO),\n-    LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n-    LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n-    LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n-    LintId::of(literal_representation::INCONSISTENT_DIGIT_GROUPING),\n-    LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-    LintId::of(literal_representation::UNUSUAL_BYTE_GROUPINGS),\n-    LintId::of(loops::EMPTY_LOOP),\n-    LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n-    LintId::of(loops::FOR_KV_MAP),\n-    LintId::of(loops::ITER_NEXT_LOOP),\n-    LintId::of(loops::MANUAL_FIND),\n-    LintId::of(loops::MANUAL_FLATTEN),\n-    LintId::of(loops::MANUAL_MEMCPY),\n-    LintId::of(loops::MISSING_SPIN_LOOP),\n-    LintId::of(loops::MUT_RANGE_BOUND),\n-    LintId::of(loops::NEEDLESS_COLLECT),\n-    LintId::of(loops::NEEDLESS_RANGE_LOOP),\n-    LintId::of(loops::NEVER_LOOP),\n-    LintId::of(loops::SAME_ITEM_PUSH),\n-    LintId::of(loops::SINGLE_ELEMENT_LOOP),\n-    LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n-    LintId::of(loops::WHILE_LET_LOOP),\n-    LintId::of(loops::WHILE_LET_ON_ITERATOR),\n-    LintId::of(main_recursion::MAIN_RECURSION),\n-    LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n-    LintId::of(manual_bits::MANUAL_BITS),\n-    LintId::of(manual_clamp::MANUAL_CLAMP),\n-    LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n-    LintId::of(manual_rem_euclid::MANUAL_REM_EUCLID),\n-    LintId::of(manual_retain::MANUAL_RETAIN),\n-    LintId::of(manual_strip::MANUAL_STRIP),\n-    LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n-    LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n-    LintId::of(match_result_ok::MATCH_RESULT_OK),\n-    LintId::of(matches::COLLAPSIBLE_MATCH),\n-    LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n-    LintId::of(matches::MANUAL_FILTER),\n-    LintId::of(matches::MANUAL_MAP),\n-    LintId::of(matches::MANUAL_UNWRAP_OR),\n-    LintId::of(matches::MATCH_AS_REF),\n-    LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n-    LintId::of(matches::MATCH_OVERLAPPING_ARM),\n-    LintId::of(matches::MATCH_REF_PATS),\n-    LintId::of(matches::MATCH_SINGLE_BINDING),\n-    LintId::of(matches::MATCH_STR_CASE_MISMATCH),\n-    LintId::of(matches::NEEDLESS_MATCH),\n-    LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n-    LintId::of(matches::SINGLE_MATCH),\n-    LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n-    LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n-    LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n-    LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n-    LintId::of(methods::BIND_INSTEAD_OF_MAP),\n-    LintId::of(methods::BYTES_COUNT_TO_LEN),\n-    LintId::of(methods::BYTES_NTH),\n-    LintId::of(methods::CHARS_LAST_CMP),\n-    LintId::of(methods::CHARS_NEXT_CMP),\n-    LintId::of(methods::CLONE_DOUBLE_REF),\n-    LintId::of(methods::CLONE_ON_COPY),\n-    LintId::of(methods::COLLAPSIBLE_STR_REPLACE),\n-    LintId::of(methods::ERR_EXPECT),\n-    LintId::of(methods::EXPECT_FUN_CALL),\n-    LintId::of(methods::EXTEND_WITH_DRAIN),\n-    LintId::of(methods::FILTER_MAP_IDENTITY),\n-    LintId::of(methods::FILTER_NEXT),\n-    LintId::of(methods::FLAT_MAP_IDENTITY),\n-    LintId::of(methods::GET_FIRST),\n-    LintId::of(methods::GET_LAST_WITH_LEN),\n-    LintId::of(methods::INSPECT_FOR_EACH),\n-    LintId::of(methods::INTO_ITER_ON_REF),\n-    LintId::of(methods::IS_DIGIT_ASCII_RADIX),\n-    LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n-    LintId::of(methods::ITER_CLONED_COLLECT),\n-    LintId::of(methods::ITER_COUNT),\n-    LintId::of(methods::ITER_KV_MAP),\n-    LintId::of(methods::ITER_NEXT_SLICE),\n-    LintId::of(methods::ITER_NTH),\n-    LintId::of(methods::ITER_NTH_ZERO),\n-    LintId::of(methods::ITER_OVEREAGER_CLONED),\n-    LintId::of(methods::ITER_SKIP_NEXT),\n-    LintId::of(methods::MANUAL_FILTER_MAP),\n-    LintId::of(methods::MANUAL_FIND_MAP),\n-    LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n-    LintId::of(methods::MANUAL_SPLIT_ONCE),\n-    LintId::of(methods::MANUAL_STR_REPEAT),\n-    LintId::of(methods::MAP_CLONE),\n-    LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n-    LintId::of(methods::MAP_FLATTEN),\n-    LintId::of(methods::MAP_IDENTITY),\n-    LintId::of(methods::MUT_MUTEX_LOCK),\n-    LintId::of(methods::NEEDLESS_OPTION_AS_DEREF),\n-    LintId::of(methods::NEEDLESS_OPTION_TAKE),\n-    LintId::of(methods::NEEDLESS_SPLITN),\n-    LintId::of(methods::NEW_RET_NO_SELF),\n-    LintId::of(methods::NONSENSICAL_OPEN_OPTIONS),\n-    LintId::of(methods::NO_EFFECT_REPLACE),\n-    LintId::of(methods::OBFUSCATED_IF_ELSE),\n-    LintId::of(methods::OK_EXPECT),\n-    LintId::of(methods::OPTION_AS_REF_DEREF),\n-    LintId::of(methods::OPTION_FILTER_MAP),\n-    LintId::of(methods::OPTION_MAP_OR_NONE),\n-    LintId::of(methods::OR_FUN_CALL),\n-    LintId::of(methods::OR_THEN_UNWRAP),\n-    LintId::of(methods::RANGE_ZIP_WITH_LEN),\n-    LintId::of(methods::REPEAT_ONCE),\n-    LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n-    LintId::of(methods::SEARCH_IS_SOME),\n-    LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n-    LintId::of(methods::SINGLE_CHAR_ADD_STR),\n-    LintId::of(methods::SINGLE_CHAR_PATTERN),\n-    LintId::of(methods::SKIP_WHILE_NEXT),\n-    LintId::of(methods::STRING_EXTEND_CHARS),\n-    LintId::of(methods::SUSPICIOUS_MAP),\n-    LintId::of(methods::SUSPICIOUS_SPLITN),\n-    LintId::of(methods::SUSPICIOUS_TO_OWNED),\n-    LintId::of(methods::UNINIT_ASSUMED_INIT),\n-    LintId::of(methods::UNIT_HASH),\n-    LintId::of(methods::UNNECESSARY_FILTER_MAP),\n-    LintId::of(methods::UNNECESSARY_FIND_MAP),\n-    LintId::of(methods::UNNECESSARY_FOLD),\n-    LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n-    LintId::of(methods::UNNECESSARY_SORT_BY),\n-    LintId::of(methods::UNNECESSARY_TO_OWNED),\n-    LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n-    LintId::of(methods::USELESS_ASREF),\n-    LintId::of(methods::VEC_RESIZE_TO_ZERO),\n-    LintId::of(methods::WRONG_SELF_CONVENTION),\n-    LintId::of(methods::ZST_OFFSET),\n-    LintId::of(minmax::MIN_MAX),\n-    LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n-    LintId::of(misc::TOPLEVEL_REF_ARG),\n-    LintId::of(misc::ZERO_PTR),\n-    LintId::of(misc_early::BUILTIN_TYPE_SHADOW),\n-    LintId::of(misc_early::DOUBLE_NEG),\n-    LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n-    LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n-    LintId::of(misc_early::REDUNDANT_PATTERN),\n-    LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n-    LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n-    LintId::of(mixed_read_write_in_expression::DIVERGING_SUB_EXPRESSION),\n-    LintId::of(multi_assignments::MULTI_ASSIGNMENTS),\n-    LintId::of(mut_key::MUTABLE_KEY_TYPE),\n-    LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n-    LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n-    LintId::of(needless_bool::BOOL_COMPARISON),\n-    LintId::of(needless_bool::NEEDLESS_BOOL),\n-    LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n-    LintId::of(needless_late_init::NEEDLESS_LATE_INIT),\n-    LintId::of(needless_parens_on_range_literals::NEEDLESS_PARENS_ON_RANGE_LITERALS),\n-    LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n-    LintId::of(needless_update::NEEDLESS_UPDATE),\n-    LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n-    LintId::of(neg_multiply::NEG_MULTIPLY),\n-    LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n-    LintId::of(no_effect::NO_EFFECT),\n-    LintId::of(no_effect::UNNECESSARY_OPERATION),\n-    LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n-    LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n-    LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n-    LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n-    LintId::of(octal_escapes::OCTAL_ESCAPES),\n-    LintId::of(only_used_in_recursion::ONLY_USED_IN_RECURSION),\n-    LintId::of(operators::ABSURD_EXTREME_COMPARISONS),\n-    LintId::of(operators::ASSIGN_OP_PATTERN),\n-    LintId::of(operators::BAD_BIT_MASK),\n-    LintId::of(operators::CMP_NAN),\n-    LintId::of(operators::CMP_OWNED),\n-    LintId::of(operators::DOUBLE_COMPARISONS),\n-    LintId::of(operators::DURATION_SUBSEC),\n-    LintId::of(operators::EQ_OP),\n-    LintId::of(operators::ERASING_OP),\n-    LintId::of(operators::FLOAT_EQUALITY_WITHOUT_ABS),\n-    LintId::of(operators::IDENTITY_OP),\n-    LintId::of(operators::INEFFECTIVE_BIT_MASK),\n-    LintId::of(operators::MISREFACTORED_ASSIGN_OP),\n-    LintId::of(operators::MODULO_ONE),\n-    LintId::of(operators::OP_REF),\n-    LintId::of(operators::PTR_EQ),\n-    LintId::of(operators::SELF_ASSIGNMENT),\n-    LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n-    LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n-    LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n-    LintId::of(partialeq_to_none::PARTIALEQ_TO_NONE),\n-    LintId::of(precedence::PRECEDENCE),\n-    LintId::of(ptr::CMP_NULL),\n-    LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n-    LintId::of(ptr::MUT_FROM_REF),\n-    LintId::of(ptr::PTR_ARG),\n-    LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n-    LintId::of(question_mark::QUESTION_MARK),\n-    LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n-    LintId::of(ranges::REVERSED_EMPTY_RANGES),\n-    LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n-    LintId::of(read_zero_byte_vec::READ_ZERO_BYTE_VEC),\n-    LintId::of(redundant_clone::REDUNDANT_CLONE),\n-    LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n-    LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n-    LintId::of(redundant_slicing::REDUNDANT_SLICING),\n-    LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n-    LintId::of(reference::DEREF_ADDROF),\n-    LintId::of(regex::INVALID_REGEX),\n-    LintId::of(returns::LET_AND_RETURN),\n-    LintId::of(returns::NEEDLESS_RETURN),\n-    LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n-    LintId::of(serde_api::SERDE_API_MISUSE),\n-    LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n-    LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n-    LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-    LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n-    LintId::of(strings::TRIM_SPLIT_WHITESPACE),\n-    LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n-    LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n-    LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n-    LintId::of(swap::ALMOST_SWAPPED),\n-    LintId::of(swap::MANUAL_SWAP),\n-    LintId::of(swap_ptr_to_ref::SWAP_PTR_TO_REF),\n-    LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n-    LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n-    LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n-    LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n-    LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n-    LintId::of(transmute::TRANSMUTE_BYTES_TO_STR),\n-    LintId::of(transmute::TRANSMUTE_FLOAT_TO_INT),\n-    LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n-    LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n-    LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n-    LintId::of(transmute::TRANSMUTE_NUM_TO_BYTES),\n-    LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n-    LintId::of(transmute::TRANSMUTING_NULL),\n-    LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n-    LintId::of(transmute::USELESS_TRANSMUTE),\n-    LintId::of(transmute::WRONG_TRANSMUTE),\n-    LintId::of(types::BORROWED_BOX),\n-    LintId::of(types::BOX_COLLECTION),\n-    LintId::of(types::REDUNDANT_ALLOCATION),\n-    LintId::of(types::TYPE_COMPLEXITY),\n-    LintId::of(types::VEC_BOX),\n-    LintId::of(unicode::INVISIBLE_CHARACTERS),\n-    LintId::of(uninit_vec::UNINIT_VEC),\n-    LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n-    LintId::of(unit_types::LET_UNIT_VALUE),\n-    LintId::of(unit_types::UNIT_ARG),\n-    LintId::of(unit_types::UNIT_CMP),\n-    LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),\n-    LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n-    LintId::of(unnecessary_owned_empty_strings::UNNECESSARY_OWNED_EMPTY_STRINGS),\n-    LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n-    LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n-    LintId::of(unused_unit::UNUSED_UNIT),\n-    LintId::of(unwrap::PANICKING_UNWRAP),\n-    LintId::of(unwrap::UNNECESSARY_UNWRAP),\n-    LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n-    LintId::of(useless_conversion::USELESS_CONVERSION),\n-    LintId::of(vec::USELESS_VEC),\n-    LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n-    LintId::of(write::PRINTLN_EMPTY_STRING),\n-    LintId::of(write::PRINT_LITERAL),\n-    LintId::of(write::PRINT_WITH_NEWLINE),\n-    LintId::of(write::WRITELN_EMPTY_STRING),\n-    LintId::of(write::WRITE_LITERAL),\n-    LintId::of(write::WRITE_WITH_NEWLINE),\n-    LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n-])"}, {"sha": "c890523fe5aebc1808dba4de08d1d4956f2fca28", "filename": "clippy_lints/src/lib.register_cargo.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_cargo.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,11 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n-    LintId::of(cargo::CARGO_COMMON_METADATA),\n-    LintId::of(cargo::MULTIPLE_CRATE_VERSIONS),\n-    LintId::of(cargo::NEGATIVE_FEATURE_NAMES),\n-    LintId::of(cargo::REDUNDANT_FEATURE_NAMES),\n-    LintId::of(cargo::WILDCARD_DEPENDENCIES),\n-])"}, {"sha": "8be9dc4baf19360a6977a0a7aa118a612e8bde4b", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,111 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n-    LintId::of(attrs::DEPRECATED_CFG_ATTR),\n-    LintId::of(booleans::NONMINIMAL_BOOL),\n-    LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n-    LintId::of(casts::CHAR_LIT_AS_U8),\n-    LintId::of(casts::UNNECESSARY_CAST),\n-    LintId::of(dereference::EXPLICIT_AUTO_DEREF),\n-    LintId::of(derivable_impls::DERIVABLE_IMPLS),\n-    LintId::of(double_parens::DOUBLE_PARENS),\n-    LintId::of(explicit_write::EXPLICIT_WRITE),\n-    LintId::of(format::USELESS_FORMAT),\n-    LintId::of(format_args::UNUSED_FORMAT_SPECS),\n-    LintId::of(functions::TOO_MANY_ARGUMENTS),\n-    LintId::of(int_plus_one::INT_PLUS_ONE),\n-    LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n-    LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n-    LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n-    LintId::of(loops::MANUAL_FIND),\n-    LintId::of(loops::MANUAL_FLATTEN),\n-    LintId::of(loops::SINGLE_ELEMENT_LOOP),\n-    LintId::of(loops::WHILE_LET_LOOP),\n-    LintId::of(manual_clamp::MANUAL_CLAMP),\n-    LintId::of(manual_rem_euclid::MANUAL_REM_EUCLID),\n-    LintId::of(manual_strip::MANUAL_STRIP),\n-    LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n-    LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n-    LintId::of(matches::MANUAL_FILTER),\n-    LintId::of(matches::MANUAL_UNWRAP_OR),\n-    LintId::of(matches::MATCH_AS_REF),\n-    LintId::of(matches::MATCH_SINGLE_BINDING),\n-    LintId::of(matches::NEEDLESS_MATCH),\n-    LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n-    LintId::of(methods::BIND_INSTEAD_OF_MAP),\n-    LintId::of(methods::BYTES_COUNT_TO_LEN),\n-    LintId::of(methods::CLONE_ON_COPY),\n-    LintId::of(methods::FILTER_MAP_IDENTITY),\n-    LintId::of(methods::FILTER_NEXT),\n-    LintId::of(methods::FLAT_MAP_IDENTITY),\n-    LintId::of(methods::GET_LAST_WITH_LEN),\n-    LintId::of(methods::INSPECT_FOR_EACH),\n-    LintId::of(methods::ITER_COUNT),\n-    LintId::of(methods::ITER_KV_MAP),\n-    LintId::of(methods::MANUAL_FILTER_MAP),\n-    LintId::of(methods::MANUAL_FIND_MAP),\n-    LintId::of(methods::MANUAL_SPLIT_ONCE),\n-    LintId::of(methods::MAP_FLATTEN),\n-    LintId::of(methods::MAP_IDENTITY),\n-    LintId::of(methods::NEEDLESS_OPTION_AS_DEREF),\n-    LintId::of(methods::NEEDLESS_OPTION_TAKE),\n-    LintId::of(methods::NEEDLESS_SPLITN),\n-    LintId::of(methods::OPTION_AS_REF_DEREF),\n-    LintId::of(methods::OPTION_FILTER_MAP),\n-    LintId::of(methods::OR_THEN_UNWRAP),\n-    LintId::of(methods::RANGE_ZIP_WITH_LEN),\n-    LintId::of(methods::REPEAT_ONCE),\n-    LintId::of(methods::SEARCH_IS_SOME),\n-    LintId::of(methods::SKIP_WHILE_NEXT),\n-    LintId::of(methods::UNNECESSARY_FILTER_MAP),\n-    LintId::of(methods::UNNECESSARY_FIND_MAP),\n-    LintId::of(methods::UNNECESSARY_SORT_BY),\n-    LintId::of(methods::USELESS_ASREF),\n-    LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n-    LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n-    LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n-    LintId::of(mixed_read_write_in_expression::DIVERGING_SUB_EXPRESSION),\n-    LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n-    LintId::of(needless_bool::BOOL_COMPARISON),\n-    LintId::of(needless_bool::NEEDLESS_BOOL),\n-    LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n-    LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n-    LintId::of(needless_update::NEEDLESS_UPDATE),\n-    LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n-    LintId::of(no_effect::NO_EFFECT),\n-    LintId::of(no_effect::UNNECESSARY_OPERATION),\n-    LintId::of(only_used_in_recursion::ONLY_USED_IN_RECURSION),\n-    LintId::of(operators::DOUBLE_COMPARISONS),\n-    LintId::of(operators::DURATION_SUBSEC),\n-    LintId::of(operators::IDENTITY_OP),\n-    LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n-    LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n-    LintId::of(precedence::PRECEDENCE),\n-    LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n-    LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n-    LintId::of(redundant_slicing::REDUNDANT_SLICING),\n-    LintId::of(reference::DEREF_ADDROF),\n-    LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n-    LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n-    LintId::of(swap::MANUAL_SWAP),\n-    LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n-    LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n-    LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n-    LintId::of(transmute::TRANSMUTE_BYTES_TO_STR),\n-    LintId::of(transmute::TRANSMUTE_FLOAT_TO_INT),\n-    LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n-    LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n-    LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n-    LintId::of(transmute::TRANSMUTE_NUM_TO_BYTES),\n-    LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n-    LintId::of(transmute::USELESS_TRANSMUTE),\n-    LintId::of(types::BORROWED_BOX),\n-    LintId::of(types::TYPE_COMPLEXITY),\n-    LintId::of(types::VEC_BOX),\n-    LintId::of(unit_types::UNIT_ARG),\n-    LintId::of(unwrap::UNNECESSARY_UNWRAP),\n-    LintId::of(useless_conversion::USELESS_CONVERSION),\n-    LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n-])"}, {"sha": "bb94037ec2e7949ba52a2b25ba0bd89ae6794e89", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,78 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n-    LintId::of(approx_const::APPROX_CONSTANT),\n-    LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n-    LintId::of(attrs::DEPRECATED_SEMVER),\n-    LintId::of(attrs::MISMATCHED_TARGET_OS),\n-    LintId::of(attrs::USELESS_ATTRIBUTE),\n-    LintId::of(booleans::OVERLY_COMPLEX_BOOL_EXPR),\n-    LintId::of(casts::CAST_REF_TO_MUT),\n-    LintId::of(casts::CAST_SLICE_DIFFERENT_SIZES),\n-    LintId::of(copies::IFS_SAME_COND),\n-    LintId::of(copies::IF_SAME_THEN_ELSE),\n-    LintId::of(derive::DERIVE_HASH_XOR_EQ),\n-    LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n-    LintId::of(drop_forget_ref::DROP_COPY),\n-    LintId::of(drop_forget_ref::DROP_REF),\n-    LintId::of(drop_forget_ref::FORGET_COPY),\n-    LintId::of(drop_forget_ref::FORGET_REF),\n-    LintId::of(drop_forget_ref::UNDROPPED_MANUALLY_DROPS),\n-    LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n-    LintId::of(format_impl::RECURSIVE_FORMAT_IMPL),\n-    LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n-    LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n-    LintId::of(if_let_mutex::IF_LET_MUTEX),\n-    LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n-    LintId::of(infinite_iter::INFINITE_ITER),\n-    LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n-    LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n-    LintId::of(invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED),\n-    LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n-    LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-    LintId::of(loops::ITER_NEXT_LOOP),\n-    LintId::of(loops::NEVER_LOOP),\n-    LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n-    LintId::of(matches::MATCH_STR_CASE_MISMATCH),\n-    LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n-    LintId::of(methods::CLONE_DOUBLE_REF),\n-    LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n-    LintId::of(methods::NONSENSICAL_OPEN_OPTIONS),\n-    LintId::of(methods::SUSPICIOUS_SPLITN),\n-    LintId::of(methods::UNINIT_ASSUMED_INIT),\n-    LintId::of(methods::UNIT_HASH),\n-    LintId::of(methods::VEC_RESIZE_TO_ZERO),\n-    LintId::of(methods::ZST_OFFSET),\n-    LintId::of(minmax::MIN_MAX),\n-    LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n-    LintId::of(operators::ABSURD_EXTREME_COMPARISONS),\n-    LintId::of(operators::BAD_BIT_MASK),\n-    LintId::of(operators::CMP_NAN),\n-    LintId::of(operators::EQ_OP),\n-    LintId::of(operators::ERASING_OP),\n-    LintId::of(operators::INEFFECTIVE_BIT_MASK),\n-    LintId::of(operators::MODULO_ONE),\n-    LintId::of(operators::SELF_ASSIGNMENT),\n-    LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n-    LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n-    LintId::of(ptr::MUT_FROM_REF),\n-    LintId::of(ranges::REVERSED_EMPTY_RANGES),\n-    LintId::of(read_zero_byte_vec::READ_ZERO_BYTE_VEC),\n-    LintId::of(regex::INVALID_REGEX),\n-    LintId::of(serde_api::SERDE_API_MISUSE),\n-    LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n-    LintId::of(swap::ALMOST_SWAPPED),\n-    LintId::of(transmute::TRANSMUTING_NULL),\n-    LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n-    LintId::of(transmute::WRONG_TRANSMUTE),\n-    LintId::of(unicode::INVISIBLE_CHARACTERS),\n-    LintId::of(uninit_vec::UNINIT_VEC),\n-    LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n-    LintId::of(unit_types::UNIT_CMP),\n-    LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),\n-    LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n-    LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n-    LintId::of(unwrap::PANICKING_UNWRAP),\n-])"}, {"sha": "40c94c6e8d33dc8101986d7ba7251433288adaa5", "filename": "clippy_lints/src/lib.register_internal.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_internal.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,22 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n-    LintId::of(utils::internal_lints::clippy_lints_internal::CLIPPY_LINTS_INTERNAL),\n-    LintId::of(utils::internal_lints::collapsible_calls::COLLAPSIBLE_SPAN_LINT_CALLS),\n-    LintId::of(utils::internal_lints::compiler_lint_functions::COMPILER_LINT_FUNCTIONS),\n-    LintId::of(utils::internal_lints::if_chain_style::IF_CHAIN_STYLE),\n-    LintId::of(utils::internal_lints::interning_defined_symbol::INTERNING_DEFINED_SYMBOL),\n-    LintId::of(utils::internal_lints::interning_defined_symbol::UNNECESSARY_SYMBOL_STR),\n-    LintId::of(utils::internal_lints::invalid_paths::INVALID_PATHS),\n-    LintId::of(utils::internal_lints::lint_without_lint_pass::DEFAULT_DEPRECATION_REASON),\n-    LintId::of(utils::internal_lints::lint_without_lint_pass::DEFAULT_LINT),\n-    LintId::of(utils::internal_lints::lint_without_lint_pass::INVALID_CLIPPY_VERSION_ATTRIBUTE),\n-    LintId::of(utils::internal_lints::lint_without_lint_pass::LINT_WITHOUT_LINT_PASS),\n-    LintId::of(utils::internal_lints::lint_without_lint_pass::MISSING_CLIPPY_VERSION_ATTRIBUTE),\n-    LintId::of(utils::internal_lints::msrv_attr_impl::MISSING_MSRV_ATTR_IMPL),\n-    LintId::of(utils::internal_lints::outer_expn_data_pass::OUTER_EXPN_EXPN_DATA),\n-    LintId::of(utils::internal_lints::produce_ice::PRODUCE_ICE),\n-    LintId::of(utils::internal_lints::unnecessary_def_path::UNNECESSARY_DEF_PATH),\n-])"}, {"sha": "6eaf17709a88836fac87ccfaab3b2e838c45cc5d", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "removed", "additions": 0, "deletions": 620, "changes": 620, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,620 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_lints(&[\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::clippy_lints_internal::CLIPPY_LINTS_INTERNAL,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::collapsible_calls::COLLAPSIBLE_SPAN_LINT_CALLS,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::compiler_lint_functions::COMPILER_LINT_FUNCTIONS,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::if_chain_style::IF_CHAIN_STYLE,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::interning_defined_symbol::INTERNING_DEFINED_SYMBOL,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::interning_defined_symbol::UNNECESSARY_SYMBOL_STR,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::invalid_paths::INVALID_PATHS,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::lint_without_lint_pass::DEFAULT_DEPRECATION_REASON,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::lint_without_lint_pass::DEFAULT_LINT,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::lint_without_lint_pass::INVALID_CLIPPY_VERSION_ATTRIBUTE,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::lint_without_lint_pass::LINT_WITHOUT_LINT_PASS,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::lint_without_lint_pass::MISSING_CLIPPY_VERSION_ATTRIBUTE,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::msrv_attr_impl::MISSING_MSRV_ATTR_IMPL,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::outer_expn_data_pass::OUTER_EXPN_EXPN_DATA,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::produce_ice::PRODUCE_ICE,\n-    #[cfg(feature = \"internal\")]\n-    utils::internal_lints::unnecessary_def_path::UNNECESSARY_DEF_PATH,\n-    almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE,\n-    approx_const::APPROX_CONSTANT,\n-    as_conversions::AS_CONVERSIONS,\n-    asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n-    asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n-    assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n-    assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES,\n-    async_yields_async::ASYNC_YIELDS_ASYNC,\n-    attrs::ALLOW_ATTRIBUTES_WITHOUT_REASON,\n-    attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n-    attrs::DEPRECATED_CFG_ATTR,\n-    attrs::DEPRECATED_SEMVER,\n-    attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n-    attrs::INLINE_ALWAYS,\n-    attrs::MISMATCHED_TARGET_OS,\n-    attrs::USELESS_ATTRIBUTE,\n-    await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE,\n-    await_holding_invalid::AWAIT_HOLDING_LOCK,\n-    await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n-    blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n-    bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n-    bool_to_int_with_if::BOOL_TO_INT_WITH_IF,\n-    booleans::NONMINIMAL_BOOL,\n-    booleans::OVERLY_COMPLEX_BOOL_EXPR,\n-    borrow_deref_ref::BORROW_DEREF_REF,\n-    box_default::BOX_DEFAULT,\n-    cargo::CARGO_COMMON_METADATA,\n-    cargo::MULTIPLE_CRATE_VERSIONS,\n-    cargo::NEGATIVE_FEATURE_NAMES,\n-    cargo::REDUNDANT_FEATURE_NAMES,\n-    cargo::WILDCARD_DEPENDENCIES,\n-    casts::AS_PTR_CAST_MUT,\n-    casts::AS_UNDERSCORE,\n-    casts::BORROW_AS_PTR,\n-    casts::CAST_ABS_TO_UNSIGNED,\n-    casts::CAST_ENUM_CONSTRUCTOR,\n-    casts::CAST_ENUM_TRUNCATION,\n-    casts::CAST_LOSSLESS,\n-    casts::CAST_NAN_TO_INT,\n-    casts::CAST_POSSIBLE_TRUNCATION,\n-    casts::CAST_POSSIBLE_WRAP,\n-    casts::CAST_PRECISION_LOSS,\n-    casts::CAST_PTR_ALIGNMENT,\n-    casts::CAST_REF_TO_MUT,\n-    casts::CAST_SIGN_LOSS,\n-    casts::CAST_SLICE_DIFFERENT_SIZES,\n-    casts::CAST_SLICE_FROM_RAW_PARTS,\n-    casts::CHAR_LIT_AS_U8,\n-    casts::FN_TO_NUMERIC_CAST,\n-    casts::FN_TO_NUMERIC_CAST_ANY,\n-    casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n-    casts::PTR_AS_PTR,\n-    casts::UNNECESSARY_CAST,\n-    checked_conversions::CHECKED_CONVERSIONS,\n-    cognitive_complexity::COGNITIVE_COMPLEXITY,\n-    collapsible_if::COLLAPSIBLE_ELSE_IF,\n-    collapsible_if::COLLAPSIBLE_IF,\n-    comparison_chain::COMPARISON_CHAIN,\n-    copies::BRANCHES_SHARING_CODE,\n-    copies::IFS_SAME_COND,\n-    copies::IF_SAME_THEN_ELSE,\n-    copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n-    copy_iterator::COPY_ITERATOR,\n-    crate_in_macro_def::CRATE_IN_MACRO_DEF,\n-    create_dir::CREATE_DIR,\n-    dbg_macro::DBG_MACRO,\n-    default::DEFAULT_TRAIT_ACCESS,\n-    default::FIELD_REASSIGN_WITH_DEFAULT,\n-    default_instead_of_iter_empty::DEFAULT_INSTEAD_OF_ITER_EMPTY,\n-    default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK,\n-    default_union_representation::DEFAULT_UNION_REPRESENTATION,\n-    dereference::EXPLICIT_AUTO_DEREF,\n-    dereference::EXPLICIT_DEREF_METHODS,\n-    dereference::NEEDLESS_BORROW,\n-    dereference::REF_BINDING_TO_REFERENCE,\n-    derivable_impls::DERIVABLE_IMPLS,\n-    derive::DERIVE_HASH_XOR_EQ,\n-    derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n-    derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ,\n-    derive::EXPL_IMPL_CLONE_ON_COPY,\n-    derive::UNSAFE_DERIVE_DESERIALIZE,\n-    disallowed_macros::DISALLOWED_MACROS,\n-    disallowed_methods::DISALLOWED_METHODS,\n-    disallowed_names::DISALLOWED_NAMES,\n-    disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS,\n-    disallowed_types::DISALLOWED_TYPES,\n-    doc::DOC_LINK_WITH_QUOTES,\n-    doc::DOC_MARKDOWN,\n-    doc::MISSING_ERRORS_DOC,\n-    doc::MISSING_PANICS_DOC,\n-    doc::MISSING_SAFETY_DOC,\n-    doc::NEEDLESS_DOCTEST_MAIN,\n-    double_parens::DOUBLE_PARENS,\n-    drop_forget_ref::DROP_COPY,\n-    drop_forget_ref::DROP_NON_DROP,\n-    drop_forget_ref::DROP_REF,\n-    drop_forget_ref::FORGET_COPY,\n-    drop_forget_ref::FORGET_NON_DROP,\n-    drop_forget_ref::FORGET_REF,\n-    drop_forget_ref::UNDROPPED_MANUALLY_DROPS,\n-    duplicate_mod::DUPLICATE_MOD,\n-    else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n-    empty_drop::EMPTY_DROP,\n-    empty_enum::EMPTY_ENUM,\n-    empty_structs_with_brackets::EMPTY_STRUCTS_WITH_BRACKETS,\n-    entry::MAP_ENTRY,\n-    enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n-    enum_variants::ENUM_VARIANT_NAMES,\n-    enum_variants::MODULE_INCEPTION,\n-    enum_variants::MODULE_NAME_REPETITIONS,\n-    equatable_if_let::EQUATABLE_IF_LET,\n-    escape::BOXED_LOCAL,\n-    eta_reduction::REDUNDANT_CLOSURE,\n-    eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n-    excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n-    excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n-    exhaustive_items::EXHAUSTIVE_ENUMS,\n-    exhaustive_items::EXHAUSTIVE_STRUCTS,\n-    exit::EXIT,\n-    explicit_write::EXPLICIT_WRITE,\n-    fallible_impl_from::FALLIBLE_IMPL_FROM,\n-    float_literal::EXCESSIVE_PRECISION,\n-    float_literal::LOSSY_FLOAT_LITERAL,\n-    floating_point_arithmetic::IMPRECISE_FLOPS,\n-    floating_point_arithmetic::SUBOPTIMAL_FLOPS,\n-    format::USELESS_FORMAT,\n-    format_args::FORMAT_IN_FORMAT_ARGS,\n-    format_args::TO_STRING_IN_FORMAT_ARGS,\n-    format_args::UNINLINED_FORMAT_ARGS,\n-    format_args::UNUSED_FORMAT_SPECS,\n-    format_impl::PRINT_IN_FORMAT_IMPL,\n-    format_impl::RECURSIVE_FORMAT_IMPL,\n-    format_push_string::FORMAT_PUSH_STRING,\n-    formatting::POSSIBLE_MISSING_COMMA,\n-    formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n-    formatting::SUSPICIOUS_ELSE_FORMATTING,\n-    formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n-    from_over_into::FROM_OVER_INTO,\n-    from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR,\n-    from_str_radix_10::FROM_STR_RADIX_10,\n-    functions::DOUBLE_MUST_USE,\n-    functions::MUST_USE_CANDIDATE,\n-    functions::MUST_USE_UNIT,\n-    functions::NOT_UNSAFE_PTR_ARG_DEREF,\n-    functions::RESULT_LARGE_ERR,\n-    functions::RESULT_UNIT_ERR,\n-    functions::TOO_MANY_ARGUMENTS,\n-    functions::TOO_MANY_LINES,\n-    future_not_send::FUTURE_NOT_SEND,\n-    if_let_mutex::IF_LET_MUTEX,\n-    if_not_else::IF_NOT_ELSE,\n-    if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n-    implicit_hasher::IMPLICIT_HASHER,\n-    implicit_return::IMPLICIT_RETURN,\n-    implicit_saturating_add::IMPLICIT_SATURATING_ADD,\n-    implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n-    inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR,\n-    index_refutable_slice::INDEX_REFUTABLE_SLICE,\n-    indexing_slicing::INDEXING_SLICING,\n-    indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n-    infinite_iter::INFINITE_ITER,\n-    infinite_iter::MAYBE_INFINITE_ITER,\n-    inherent_impl::MULTIPLE_INHERENT_IMPL,\n-    inherent_to_string::INHERENT_TO_STRING,\n-    inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n-    init_numbered_fields::INIT_NUMBERED_FIELDS,\n-    inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n-    int_plus_one::INT_PLUS_ONE,\n-    invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS,\n-    invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED,\n-    items_after_statements::ITEMS_AFTER_STATEMENTS,\n-    iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n-    large_const_arrays::LARGE_CONST_ARRAYS,\n-    large_enum_variant::LARGE_ENUM_VARIANT,\n-    large_include_file::LARGE_INCLUDE_FILE,\n-    large_stack_arrays::LARGE_STACK_ARRAYS,\n-    len_zero::COMPARISON_TO_EMPTY,\n-    len_zero::LEN_WITHOUT_IS_EMPTY,\n-    len_zero::LEN_ZERO,\n-    let_if_seq::USELESS_LET_IF_SEQ,\n-    let_underscore::LET_UNDERSCORE_LOCK,\n-    let_underscore::LET_UNDERSCORE_MUST_USE,\n-    lifetimes::EXTRA_UNUSED_LIFETIMES,\n-    lifetimes::NEEDLESS_LIFETIMES,\n-    literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n-    literal_representation::INCONSISTENT_DIGIT_GROUPING,\n-    literal_representation::LARGE_DIGIT_GROUPS,\n-    literal_representation::MISTYPED_LITERAL_SUFFIXES,\n-    literal_representation::UNREADABLE_LITERAL,\n-    literal_representation::UNUSUAL_BYTE_GROUPINGS,\n-    loops::EMPTY_LOOP,\n-    loops::EXPLICIT_COUNTER_LOOP,\n-    loops::EXPLICIT_INTO_ITER_LOOP,\n-    loops::EXPLICIT_ITER_LOOP,\n-    loops::FOR_KV_MAP,\n-    loops::ITER_NEXT_LOOP,\n-    loops::MANUAL_FIND,\n-    loops::MANUAL_FLATTEN,\n-    loops::MANUAL_MEMCPY,\n-    loops::MISSING_SPIN_LOOP,\n-    loops::MUT_RANGE_BOUND,\n-    loops::NEEDLESS_COLLECT,\n-    loops::NEEDLESS_RANGE_LOOP,\n-    loops::NEVER_LOOP,\n-    loops::SAME_ITEM_PUSH,\n-    loops::SINGLE_ELEMENT_LOOP,\n-    loops::WHILE_IMMUTABLE_CONDITION,\n-    loops::WHILE_LET_LOOP,\n-    loops::WHILE_LET_ON_ITERATOR,\n-    macro_use::MACRO_USE_IMPORTS,\n-    main_recursion::MAIN_RECURSION,\n-    manual_assert::MANUAL_ASSERT,\n-    manual_async_fn::MANUAL_ASYNC_FN,\n-    manual_bits::MANUAL_BITS,\n-    manual_clamp::MANUAL_CLAMP,\n-    manual_instant_elapsed::MANUAL_INSTANT_ELAPSED,\n-    manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n-    manual_rem_euclid::MANUAL_REM_EUCLID,\n-    manual_retain::MANUAL_RETAIN,\n-    manual_string_new::MANUAL_STRING_NEW,\n-    manual_strip::MANUAL_STRIP,\n-    map_unit_fn::OPTION_MAP_UNIT_FN,\n-    map_unit_fn::RESULT_MAP_UNIT_FN,\n-    match_result_ok::MATCH_RESULT_OK,\n-    matches::COLLAPSIBLE_MATCH,\n-    matches::INFALLIBLE_DESTRUCTURING_MATCH,\n-    matches::MANUAL_FILTER,\n-    matches::MANUAL_MAP,\n-    matches::MANUAL_UNWRAP_OR,\n-    matches::MATCH_AS_REF,\n-    matches::MATCH_BOOL,\n-    matches::MATCH_LIKE_MATCHES_MACRO,\n-    matches::MATCH_ON_VEC_ITEMS,\n-    matches::MATCH_OVERLAPPING_ARM,\n-    matches::MATCH_REF_PATS,\n-    matches::MATCH_SAME_ARMS,\n-    matches::MATCH_SINGLE_BINDING,\n-    matches::MATCH_STR_CASE_MISMATCH,\n-    matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n-    matches::MATCH_WILD_ERR_ARM,\n-    matches::NEEDLESS_MATCH,\n-    matches::REDUNDANT_PATTERN_MATCHING,\n-    matches::REST_PAT_IN_FULLY_BOUND_STRUCTS,\n-    matches::SIGNIFICANT_DROP_IN_SCRUTINEE,\n-    matches::SINGLE_MATCH,\n-    matches::SINGLE_MATCH_ELSE,\n-    matches::TRY_ERR,\n-    matches::WILDCARD_ENUM_MATCH_ARM,\n-    matches::WILDCARD_IN_OR_PATTERNS,\n-    mem_forget::MEM_FORGET,\n-    mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n-    mem_replace::MEM_REPLACE_WITH_DEFAULT,\n-    mem_replace::MEM_REPLACE_WITH_UNINIT,\n-    methods::BIND_INSTEAD_OF_MAP,\n-    methods::BYTES_COUNT_TO_LEN,\n-    methods::BYTES_NTH,\n-    methods::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n-    methods::CHARS_LAST_CMP,\n-    methods::CHARS_NEXT_CMP,\n-    methods::CLONED_INSTEAD_OF_COPIED,\n-    methods::CLONE_DOUBLE_REF,\n-    methods::CLONE_ON_COPY,\n-    methods::CLONE_ON_REF_PTR,\n-    methods::COLLAPSIBLE_STR_REPLACE,\n-    methods::ERR_EXPECT,\n-    methods::EXPECT_FUN_CALL,\n-    methods::EXPECT_USED,\n-    methods::EXTEND_WITH_DRAIN,\n-    methods::FILETYPE_IS_FILE,\n-    methods::FILTER_MAP_IDENTITY,\n-    methods::FILTER_MAP_NEXT,\n-    methods::FILTER_NEXT,\n-    methods::FLAT_MAP_IDENTITY,\n-    methods::FLAT_MAP_OPTION,\n-    methods::FROM_ITER_INSTEAD_OF_COLLECT,\n-    methods::GET_FIRST,\n-    methods::GET_LAST_WITH_LEN,\n-    methods::GET_UNWRAP,\n-    methods::IMPLICIT_CLONE,\n-    methods::INEFFICIENT_TO_STRING,\n-    methods::INSPECT_FOR_EACH,\n-    methods::INTO_ITER_ON_REF,\n-    methods::IS_DIGIT_ASCII_RADIX,\n-    methods::ITERATOR_STEP_BY_ZERO,\n-    methods::ITER_CLONED_COLLECT,\n-    methods::ITER_COUNT,\n-    methods::ITER_KV_MAP,\n-    methods::ITER_NEXT_SLICE,\n-    methods::ITER_NTH,\n-    methods::ITER_NTH_ZERO,\n-    methods::ITER_ON_EMPTY_COLLECTIONS,\n-    methods::ITER_ON_SINGLE_ITEMS,\n-    methods::ITER_OVEREAGER_CLONED,\n-    methods::ITER_SKIP_NEXT,\n-    methods::ITER_WITH_DRAIN,\n-    methods::MANUAL_FILTER_MAP,\n-    methods::MANUAL_FIND_MAP,\n-    methods::MANUAL_OK_OR,\n-    methods::MANUAL_SATURATING_ARITHMETIC,\n-    methods::MANUAL_SPLIT_ONCE,\n-    methods::MANUAL_STR_REPEAT,\n-    methods::MAP_CLONE,\n-    methods::MAP_COLLECT_RESULT_UNIT,\n-    methods::MAP_ERR_IGNORE,\n-    methods::MAP_FLATTEN,\n-    methods::MAP_IDENTITY,\n-    methods::MAP_UNWRAP_OR,\n-    methods::MUT_MUTEX_LOCK,\n-    methods::NAIVE_BYTECOUNT,\n-    methods::NEEDLESS_OPTION_AS_DEREF,\n-    methods::NEEDLESS_OPTION_TAKE,\n-    methods::NEEDLESS_SPLITN,\n-    methods::NEW_RET_NO_SELF,\n-    methods::NONSENSICAL_OPEN_OPTIONS,\n-    methods::NO_EFFECT_REPLACE,\n-    methods::OBFUSCATED_IF_ELSE,\n-    methods::OK_EXPECT,\n-    methods::OPTION_AS_REF_DEREF,\n-    methods::OPTION_FILTER_MAP,\n-    methods::OPTION_MAP_OR_NONE,\n-    methods::OR_FUN_CALL,\n-    methods::OR_THEN_UNWRAP,\n-    methods::PATH_BUF_PUSH_OVERWRITE,\n-    methods::RANGE_ZIP_WITH_LEN,\n-    methods::REPEAT_ONCE,\n-    methods::RESULT_MAP_OR_INTO_OPTION,\n-    methods::SEARCH_IS_SOME,\n-    methods::SHOULD_IMPLEMENT_TRAIT,\n-    methods::SINGLE_CHAR_ADD_STR,\n-    methods::SINGLE_CHAR_PATTERN,\n-    methods::SKIP_WHILE_NEXT,\n-    methods::STABLE_SORT_PRIMITIVE,\n-    methods::STRING_EXTEND_CHARS,\n-    methods::SUSPICIOUS_MAP,\n-    methods::SUSPICIOUS_SPLITN,\n-    methods::SUSPICIOUS_TO_OWNED,\n-    methods::UNINIT_ASSUMED_INIT,\n-    methods::UNIT_HASH,\n-    methods::UNNECESSARY_FILTER_MAP,\n-    methods::UNNECESSARY_FIND_MAP,\n-    methods::UNNECESSARY_FOLD,\n-    methods::UNNECESSARY_JOIN,\n-    methods::UNNECESSARY_LAZY_EVALUATIONS,\n-    methods::UNNECESSARY_SORT_BY,\n-    methods::UNNECESSARY_TO_OWNED,\n-    methods::UNWRAP_OR_ELSE_DEFAULT,\n-    methods::UNWRAP_USED,\n-    methods::USELESS_ASREF,\n-    methods::VEC_RESIZE_TO_ZERO,\n-    methods::VERBOSE_FILE_READS,\n-    methods::WRONG_SELF_CONVENTION,\n-    methods::ZST_OFFSET,\n-    minmax::MIN_MAX,\n-    misc::SHORT_CIRCUIT_STATEMENT,\n-    misc::TOPLEVEL_REF_ARG,\n-    misc::USED_UNDERSCORE_BINDING,\n-    misc::ZERO_PTR,\n-    misc_early::BUILTIN_TYPE_SHADOW,\n-    misc_early::DOUBLE_NEG,\n-    misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n-    misc_early::MIXED_CASE_HEX_LITERALS,\n-    misc_early::REDUNDANT_PATTERN,\n-    misc_early::SEPARATED_LITERAL_SUFFIX,\n-    misc_early::UNNEEDED_FIELD_PATTERN,\n-    misc_early::UNNEEDED_WILDCARD_PATTERN,\n-    misc_early::UNSEPARATED_LITERAL_SUFFIX,\n-    misc_early::ZERO_PREFIXED_LITERAL,\n-    mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER,\n-    missing_const_for_fn::MISSING_CONST_FOR_FN,\n-    missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n-    missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES,\n-    missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n-    missing_trait_methods::MISSING_TRAIT_METHODS,\n-    mixed_read_write_in_expression::DIVERGING_SUB_EXPRESSION,\n-    mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION,\n-    module_style::MOD_MODULE_FILES,\n-    module_style::SELF_NAMED_MODULE_FILES,\n-    multi_assignments::MULTI_ASSIGNMENTS,\n-    mut_key::MUTABLE_KEY_TYPE,\n-    mut_mut::MUT_MUT,\n-    mut_reference::UNNECESSARY_MUT_PASSED,\n-    mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n-    mutex_atomic::MUTEX_ATOMIC,\n-    mutex_atomic::MUTEX_INTEGER,\n-    needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE,\n-    needless_bool::BOOL_COMPARISON,\n-    needless_bool::NEEDLESS_BOOL,\n-    needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n-    needless_continue::NEEDLESS_CONTINUE,\n-    needless_for_each::NEEDLESS_FOR_EACH,\n-    needless_late_init::NEEDLESS_LATE_INIT,\n-    needless_parens_on_range_literals::NEEDLESS_PARENS_ON_RANGE_LITERALS,\n-    needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n-    needless_question_mark::NEEDLESS_QUESTION_MARK,\n-    needless_update::NEEDLESS_UPDATE,\n-    neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n-    neg_multiply::NEG_MULTIPLY,\n-    new_without_default::NEW_WITHOUT_DEFAULT,\n-    no_effect::NO_EFFECT,\n-    no_effect::NO_EFFECT_UNDERSCORE_BINDING,\n-    no_effect::UNNECESSARY_OPERATION,\n-    non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n-    non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,\n-    non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n-    non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n-    non_expressive_names::SIMILAR_NAMES,\n-    non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n-    non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY,\n-    nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n-    octal_escapes::OCTAL_ESCAPES,\n-    only_used_in_recursion::ONLY_USED_IN_RECURSION,\n-    operators::ABSURD_EXTREME_COMPARISONS,\n-    operators::ARITHMETIC_SIDE_EFFECTS,\n-    operators::ASSIGN_OP_PATTERN,\n-    operators::BAD_BIT_MASK,\n-    operators::CMP_NAN,\n-    operators::CMP_OWNED,\n-    operators::DOUBLE_COMPARISONS,\n-    operators::DURATION_SUBSEC,\n-    operators::EQ_OP,\n-    operators::ERASING_OP,\n-    operators::FLOAT_ARITHMETIC,\n-    operators::FLOAT_CMP,\n-    operators::FLOAT_CMP_CONST,\n-    operators::FLOAT_EQUALITY_WITHOUT_ABS,\n-    operators::IDENTITY_OP,\n-    operators::INEFFECTIVE_BIT_MASK,\n-    operators::INTEGER_ARITHMETIC,\n-    operators::INTEGER_DIVISION,\n-    operators::MISREFACTORED_ASSIGN_OP,\n-    operators::MODULO_ARITHMETIC,\n-    operators::MODULO_ONE,\n-    operators::NEEDLESS_BITWISE_BOOL,\n-    operators::OP_REF,\n-    operators::PTR_EQ,\n-    operators::SELF_ASSIGNMENT,\n-    operators::VERBOSE_BIT_MASK,\n-    option_env_unwrap::OPTION_ENV_UNWRAP,\n-    option_if_let_else::OPTION_IF_LET_ELSE,\n-    overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n-    panic_in_result_fn::PANIC_IN_RESULT_FN,\n-    panic_unimplemented::PANIC,\n-    panic_unimplemented::TODO,\n-    panic_unimplemented::UNIMPLEMENTED,\n-    panic_unimplemented::UNREACHABLE,\n-    partial_pub_fields::PARTIAL_PUB_FIELDS,\n-    partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n-    partialeq_to_none::PARTIALEQ_TO_NONE,\n-    pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE,\n-    pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF,\n-    pattern_type_mismatch::PATTERN_TYPE_MISMATCH,\n-    precedence::PRECEDENCE,\n-    ptr::CMP_NULL,\n-    ptr::INVALID_NULL_PTR_USAGE,\n-    ptr::MUT_FROM_REF,\n-    ptr::PTR_ARG,\n-    ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n-    pub_use::PUB_USE,\n-    question_mark::QUESTION_MARK,\n-    ranges::MANUAL_RANGE_CONTAINS,\n-    ranges::RANGE_MINUS_ONE,\n-    ranges::RANGE_PLUS_ONE,\n-    ranges::REVERSED_EMPTY_RANGES,\n-    rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT,\n-    read_zero_byte_vec::READ_ZERO_BYTE_VEC,\n-    redundant_clone::REDUNDANT_CLONE,\n-    redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n-    redundant_else::REDUNDANT_ELSE,\n-    redundant_field_names::REDUNDANT_FIELD_NAMES,\n-    redundant_pub_crate::REDUNDANT_PUB_CRATE,\n-    redundant_slicing::DEREF_BY_SLICING,\n-    redundant_slicing::REDUNDANT_SLICING,\n-    redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n-    ref_option_ref::REF_OPTION_REF,\n-    reference::DEREF_ADDROF,\n-    regex::INVALID_REGEX,\n-    regex::TRIVIAL_REGEX,\n-    return_self_not_must_use::RETURN_SELF_NOT_MUST_USE,\n-    returns::LET_AND_RETURN,\n-    returns::NEEDLESS_RETURN,\n-    same_name_method::SAME_NAME_METHOD,\n-    self_named_constructors::SELF_NAMED_CONSTRUCTORS,\n-    semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED,\n-    serde_api::SERDE_API_MISUSE,\n-    shadow::SHADOW_REUSE,\n-    shadow::SHADOW_SAME,\n-    shadow::SHADOW_UNRELATED,\n-    single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES,\n-    single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n-    size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n-    slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n-    std_instead_of_core::ALLOC_INSTEAD_OF_CORE,\n-    std_instead_of_core::STD_INSTEAD_OF_ALLOC,\n-    std_instead_of_core::STD_INSTEAD_OF_CORE,\n-    strings::STRING_ADD,\n-    strings::STRING_ADD_ASSIGN,\n-    strings::STRING_FROM_UTF8_AS_BYTES,\n-    strings::STRING_LIT_AS_BYTES,\n-    strings::STRING_SLICE,\n-    strings::STRING_TO_STRING,\n-    strings::STR_TO_STRING,\n-    strings::TRIM_SPLIT_WHITESPACE,\n-    strlen_on_c_strings::STRLEN_ON_C_STRINGS,\n-    suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS,\n-    suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n-    suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n-    swap::ALMOST_SWAPPED,\n-    swap::MANUAL_SWAP,\n-    swap_ptr_to_ref::SWAP_PTR_TO_REF,\n-    tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n-    temporary_assignment::TEMPORARY_ASSIGNMENT,\n-    to_digit_is_some::TO_DIGIT_IS_SOME,\n-    trailing_empty_array::TRAILING_EMPTY_ARRAY,\n-    trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS,\n-    trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n-    transmute::CROSSPOINTER_TRANSMUTE,\n-    transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n-    transmute::TRANSMUTE_BYTES_TO_STR,\n-    transmute::TRANSMUTE_FLOAT_TO_INT,\n-    transmute::TRANSMUTE_INT_TO_BOOL,\n-    transmute::TRANSMUTE_INT_TO_CHAR,\n-    transmute::TRANSMUTE_INT_TO_FLOAT,\n-    transmute::TRANSMUTE_NUM_TO_BYTES,\n-    transmute::TRANSMUTE_PTR_TO_PTR,\n-    transmute::TRANSMUTE_PTR_TO_REF,\n-    transmute::TRANSMUTE_UNDEFINED_REPR,\n-    transmute::TRANSMUTING_NULL,\n-    transmute::UNSOUND_COLLECTION_TRANSMUTE,\n-    transmute::USELESS_TRANSMUTE,\n-    transmute::WRONG_TRANSMUTE,\n-    types::BORROWED_BOX,\n-    types::BOX_COLLECTION,\n-    types::LINKEDLIST,\n-    types::OPTION_OPTION,\n-    types::RC_BUFFER,\n-    types::RC_MUTEX,\n-    types::REDUNDANT_ALLOCATION,\n-    types::TYPE_COMPLEXITY,\n-    types::VEC_BOX,\n-    undocumented_unsafe_blocks::UNDOCUMENTED_UNSAFE_BLOCKS,\n-    unicode::INVISIBLE_CHARACTERS,\n-    unicode::NON_ASCII_LITERAL,\n-    unicode::UNICODE_NOT_NFC,\n-    uninit_vec::UNINIT_VEC,\n-    unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n-    unit_types::LET_UNIT_VALUE,\n-    unit_types::UNIT_ARG,\n-    unit_types::UNIT_CMP,\n-    unnamed_address::FN_ADDRESS_COMPARISONS,\n-    unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n-    unnecessary_owned_empty_strings::UNNECESSARY_OWNED_EMPTY_STRINGS,\n-    unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS,\n-    unnecessary_wraps::UNNECESSARY_WRAPS,\n-    unnested_or_patterns::UNNESTED_OR_PATTERNS,\n-    unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n-    unused_async::UNUSED_ASYNC,\n-    unused_io_amount::UNUSED_IO_AMOUNT,\n-    unused_peekable::UNUSED_PEEKABLE,\n-    unused_rounding::UNUSED_ROUNDING,\n-    unused_self::UNUSED_SELF,\n-    unused_unit::UNUSED_UNIT,\n-    unwrap::PANICKING_UNWRAP,\n-    unwrap::UNNECESSARY_UNWRAP,\n-    unwrap_in_result::UNWRAP_IN_RESULT,\n-    upper_case_acronyms::UPPER_CASE_ACRONYMS,\n-    use_self::USE_SELF,\n-    useless_conversion::USELESS_CONVERSION,\n-    vec::USELESS_VEC,\n-    vec_init_then_push::VEC_INIT_THEN_PUSH,\n-    wildcard_imports::ENUM_GLOB_USE,\n-    wildcard_imports::WILDCARD_IMPORTS,\n-    write::PRINTLN_EMPTY_STRING,\n-    write::PRINT_LITERAL,\n-    write::PRINT_STDERR,\n-    write::PRINT_STDOUT,\n-    write::PRINT_WITH_NEWLINE,\n-    write::USE_DEBUG,\n-    write::WRITELN_EMPTY_STRING,\n-    write::WRITE_LITERAL,\n-    write::WRITE_WITH_NEWLINE,\n-    zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n-    zero_sized_map_values::ZERO_SIZED_MAP_VALUES,\n-])"}, {"sha": "a75bc81b2222c0d9685f4c9eff42b8f51ed077a8", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,41 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n-    LintId::of(attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n-    LintId::of(casts::AS_PTR_CAST_MUT),\n-    LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n-    LintId::of(copies::BRANCHES_SHARING_CODE),\n-    LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n-    LintId::of(equatable_if_let::EQUATABLE_IF_LET),\n-    LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n-    LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),\n-    LintId::of(floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n-    LintId::of(future_not_send::FUTURE_NOT_SEND),\n-    LintId::of(index_refutable_slice::INDEX_REFUTABLE_SLICE),\n-    LintId::of(let_if_seq::USELESS_LET_IF_SEQ),\n-    LintId::of(matches::SIGNIFICANT_DROP_IN_SCRUTINEE),\n-    LintId::of(methods::ITER_ON_EMPTY_COLLECTIONS),\n-    LintId::of(methods::ITER_ON_SINGLE_ITEMS),\n-    LintId::of(methods::ITER_WITH_DRAIN),\n-    LintId::of(methods::PATH_BUF_PUSH_OVERWRITE),\n-    LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n-    LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n-    LintId::of(mutex_atomic::MUTEX_ATOMIC),\n-    LintId::of(mutex_atomic::MUTEX_INTEGER),\n-    LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n-    LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n-    LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n-    LintId::of(redundant_pub_crate::REDUNDANT_PUB_CRATE),\n-    LintId::of(regex::TRIVIAL_REGEX),\n-    LintId::of(strings::STRING_LIT_AS_BYTES),\n-    LintId::of(suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n-    LintId::of(trailing_empty_array::TRAILING_EMPTY_ARRAY),\n-    LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n-    LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n-    LintId::of(transmute::TRANSMUTE_UNDEFINED_REPR),\n-    LintId::of(unused_peekable::UNUSED_PEEKABLE),\n-    LintId::of(unused_rounding::UNUSED_ROUNDING),\n-    LintId::of(use_self::USE_SELF),\n-])"}, {"sha": "768b3347c2aa94b0bb0001feb66652e31c8430da", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,100 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n-    LintId::of(attrs::INLINE_ALWAYS),\n-    LintId::of(casts::BORROW_AS_PTR),\n-    LintId::of(casts::CAST_LOSSLESS),\n-    LintId::of(casts::CAST_POSSIBLE_TRUNCATION),\n-    LintId::of(casts::CAST_POSSIBLE_WRAP),\n-    LintId::of(casts::CAST_PRECISION_LOSS),\n-    LintId::of(casts::CAST_PTR_ALIGNMENT),\n-    LintId::of(casts::CAST_SIGN_LOSS),\n-    LintId::of(casts::PTR_AS_PTR),\n-    LintId::of(checked_conversions::CHECKED_CONVERSIONS),\n-    LintId::of(copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n-    LintId::of(copy_iterator::COPY_ITERATOR),\n-    LintId::of(default::DEFAULT_TRAIT_ACCESS),\n-    LintId::of(dereference::EXPLICIT_DEREF_METHODS),\n-    LintId::of(dereference::REF_BINDING_TO_REFERENCE),\n-    LintId::of(derive::EXPL_IMPL_CLONE_ON_COPY),\n-    LintId::of(derive::UNSAFE_DERIVE_DESERIALIZE),\n-    LintId::of(doc::DOC_LINK_WITH_QUOTES),\n-    LintId::of(doc::DOC_MARKDOWN),\n-    LintId::of(doc::MISSING_ERRORS_DOC),\n-    LintId::of(doc::MISSING_PANICS_DOC),\n-    LintId::of(empty_enum::EMPTY_ENUM),\n-    LintId::of(enum_variants::MODULE_NAME_REPETITIONS),\n-    LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n-    LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n-    LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n-    LintId::of(functions::MUST_USE_CANDIDATE),\n-    LintId::of(functions::TOO_MANY_LINES),\n-    LintId::of(if_not_else::IF_NOT_ELSE),\n-    LintId::of(implicit_hasher::IMPLICIT_HASHER),\n-    LintId::of(inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR),\n-    LintId::of(infinite_iter::MAYBE_INFINITE_ITER),\n-    LintId::of(invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS),\n-    LintId::of(items_after_statements::ITEMS_AFTER_STATEMENTS),\n-    LintId::of(iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR),\n-    LintId::of(large_stack_arrays::LARGE_STACK_ARRAYS),\n-    LintId::of(literal_representation::LARGE_DIGIT_GROUPS),\n-    LintId::of(literal_representation::UNREADABLE_LITERAL),\n-    LintId::of(loops::EXPLICIT_INTO_ITER_LOOP),\n-    LintId::of(loops::EXPLICIT_ITER_LOOP),\n-    LintId::of(macro_use::MACRO_USE_IMPORTS),\n-    LintId::of(manual_assert::MANUAL_ASSERT),\n-    LintId::of(manual_instant_elapsed::MANUAL_INSTANT_ELAPSED),\n-    LintId::of(manual_string_new::MANUAL_STRING_NEW),\n-    LintId::of(matches::MATCH_BOOL),\n-    LintId::of(matches::MATCH_ON_VEC_ITEMS),\n-    LintId::of(matches::MATCH_SAME_ARMS),\n-    LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n-    LintId::of(matches::MATCH_WILD_ERR_ARM),\n-    LintId::of(matches::SINGLE_MATCH_ELSE),\n-    LintId::of(methods::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n-    LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n-    LintId::of(methods::FILTER_MAP_NEXT),\n-    LintId::of(methods::FLAT_MAP_OPTION),\n-    LintId::of(methods::FROM_ITER_INSTEAD_OF_COLLECT),\n-    LintId::of(methods::IMPLICIT_CLONE),\n-    LintId::of(methods::INEFFICIENT_TO_STRING),\n-    LintId::of(methods::MANUAL_OK_OR),\n-    LintId::of(methods::MAP_UNWRAP_OR),\n-    LintId::of(methods::NAIVE_BYTECOUNT),\n-    LintId::of(methods::STABLE_SORT_PRIMITIVE),\n-    LintId::of(methods::UNNECESSARY_JOIN),\n-    LintId::of(misc::USED_UNDERSCORE_BINDING),\n-    LintId::of(mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER),\n-    LintId::of(mut_mut::MUT_MUT),\n-    LintId::of(needless_continue::NEEDLESS_CONTINUE),\n-    LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n-    LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n-    LintId::of(no_effect::NO_EFFECT_UNDERSCORE_BINDING),\n-    LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n-    LintId::of(non_expressive_names::SIMILAR_NAMES),\n-    LintId::of(operators::FLOAT_CMP),\n-    LintId::of(operators::NEEDLESS_BITWISE_BOOL),\n-    LintId::of(operators::VERBOSE_BIT_MASK),\n-    LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),\n-    LintId::of(pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n-    LintId::of(ranges::RANGE_MINUS_ONE),\n-    LintId::of(ranges::RANGE_PLUS_ONE),\n-    LintId::of(redundant_else::REDUNDANT_ELSE),\n-    LintId::of(ref_option_ref::REF_OPTION_REF),\n-    LintId::of(return_self_not_must_use::RETURN_SELF_NOT_MUST_USE),\n-    LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n-    LintId::of(strings::STRING_ADD_ASSIGN),\n-    LintId::of(transmute::TRANSMUTE_PTR_TO_PTR),\n-    LintId::of(types::LINKEDLIST),\n-    LintId::of(types::OPTION_OPTION),\n-    LintId::of(unicode::UNICODE_NOT_NFC),\n-    LintId::of(unnecessary_wraps::UNNECESSARY_WRAPS),\n-    LintId::of(unnested_or_patterns::UNNESTED_OR_PATTERNS),\n-    LintId::of(unused_async::UNUSED_ASYNC),\n-    LintId::of(unused_self::UNUSED_SELF),\n-    LintId::of(wildcard_imports::ENUM_GLOB_USE),\n-    LintId::of(wildcard_imports::WILDCARD_IMPORTS),\n-    LintId::of(zero_sized_map_values::ZERO_SIZED_MAP_VALUES),\n-])"}, {"sha": "8e927470e02ffea36f947a6133ba0dacb98f4226", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,34 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n-    LintId::of(box_default::BOX_DEFAULT),\n-    LintId::of(entry::MAP_ENTRY),\n-    LintId::of(escape::BOXED_LOCAL),\n-    LintId::of(format_args::FORMAT_IN_FORMAT_ARGS),\n-    LintId::of(format_args::TO_STRING_IN_FORMAT_ARGS),\n-    LintId::of(functions::RESULT_LARGE_ERR),\n-    LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n-    LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n-    LintId::of(loops::MANUAL_MEMCPY),\n-    LintId::of(loops::MISSING_SPIN_LOOP),\n-    LintId::of(loops::NEEDLESS_COLLECT),\n-    LintId::of(manual_retain::MANUAL_RETAIN),\n-    LintId::of(methods::COLLAPSIBLE_STR_REPLACE),\n-    LintId::of(methods::EXPECT_FUN_CALL),\n-    LintId::of(methods::EXTEND_WITH_DRAIN),\n-    LintId::of(methods::ITER_NTH),\n-    LintId::of(methods::ITER_OVEREAGER_CLONED),\n-    LintId::of(methods::MANUAL_STR_REPEAT),\n-    LintId::of(methods::OR_FUN_CALL),\n-    LintId::of(methods::SINGLE_CHAR_PATTERN),\n-    LintId::of(methods::UNNECESSARY_TO_OWNED),\n-    LintId::of(operators::CMP_OWNED),\n-    LintId::of(redundant_clone::REDUNDANT_CLONE),\n-    LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-    LintId::of(types::BOX_COLLECTION),\n-    LintId::of(types::REDUNDANT_ALLOCATION),\n-    LintId::of(vec::USELESS_VEC),\n-    LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n-])"}, {"sha": "f62d57af5b47f1aed2849a352043102bb818b5cc", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,90 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n-    LintId::of(as_conversions::AS_CONVERSIONS),\n-    LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n-    LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n-    LintId::of(assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES),\n-    LintId::of(attrs::ALLOW_ATTRIBUTES_WITHOUT_REASON),\n-    LintId::of(casts::AS_UNDERSCORE),\n-    LintId::of(casts::FN_TO_NUMERIC_CAST_ANY),\n-    LintId::of(create_dir::CREATE_DIR),\n-    LintId::of(dbg_macro::DBG_MACRO),\n-    LintId::of(default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK),\n-    LintId::of(default_union_representation::DEFAULT_UNION_REPRESENTATION),\n-    LintId::of(disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS),\n-    LintId::of(else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n-    LintId::of(empty_drop::EMPTY_DROP),\n-    LintId::of(empty_structs_with_brackets::EMPTY_STRUCTS_WITH_BRACKETS),\n-    LintId::of(exhaustive_items::EXHAUSTIVE_ENUMS),\n-    LintId::of(exhaustive_items::EXHAUSTIVE_STRUCTS),\n-    LintId::of(exit::EXIT),\n-    LintId::of(float_literal::LOSSY_FLOAT_LITERAL),\n-    LintId::of(format_push_string::FORMAT_PUSH_STRING),\n-    LintId::of(if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n-    LintId::of(implicit_return::IMPLICIT_RETURN),\n-    LintId::of(indexing_slicing::INDEXING_SLICING),\n-    LintId::of(inherent_impl::MULTIPLE_INHERENT_IMPL),\n-    LintId::of(large_include_file::LARGE_INCLUDE_FILE),\n-    LintId::of(let_underscore::LET_UNDERSCORE_MUST_USE),\n-    LintId::of(literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n-    LintId::of(matches::REST_PAT_IN_FULLY_BOUND_STRUCTS),\n-    LintId::of(matches::TRY_ERR),\n-    LintId::of(matches::WILDCARD_ENUM_MATCH_ARM),\n-    LintId::of(mem_forget::MEM_FORGET),\n-    LintId::of(methods::CLONE_ON_REF_PTR),\n-    LintId::of(methods::EXPECT_USED),\n-    LintId::of(methods::FILETYPE_IS_FILE),\n-    LintId::of(methods::GET_UNWRAP),\n-    LintId::of(methods::MAP_ERR_IGNORE),\n-    LintId::of(methods::UNWRAP_USED),\n-    LintId::of(methods::VERBOSE_FILE_READS),\n-    LintId::of(misc_early::SEPARATED_LITERAL_SUFFIX),\n-    LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n-    LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n-    LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n-    LintId::of(missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES),\n-    LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n-    LintId::of(missing_trait_methods::MISSING_TRAIT_METHODS),\n-    LintId::of(mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION),\n-    LintId::of(module_style::MOD_MODULE_FILES),\n-    LintId::of(module_style::SELF_NAMED_MODULE_FILES),\n-    LintId::of(operators::ARITHMETIC_SIDE_EFFECTS),\n-    LintId::of(operators::FLOAT_ARITHMETIC),\n-    LintId::of(operators::FLOAT_CMP_CONST),\n-    LintId::of(operators::INTEGER_ARITHMETIC),\n-    LintId::of(operators::INTEGER_DIVISION),\n-    LintId::of(operators::MODULO_ARITHMETIC),\n-    LintId::of(panic_in_result_fn::PANIC_IN_RESULT_FN),\n-    LintId::of(panic_unimplemented::PANIC),\n-    LintId::of(panic_unimplemented::TODO),\n-    LintId::of(panic_unimplemented::UNIMPLEMENTED),\n-    LintId::of(panic_unimplemented::UNREACHABLE),\n-    LintId::of(partial_pub_fields::PARTIAL_PUB_FIELDS),\n-    LintId::of(pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n-    LintId::of(pub_use::PUB_USE),\n-    LintId::of(redundant_slicing::DEREF_BY_SLICING),\n-    LintId::of(same_name_method::SAME_NAME_METHOD),\n-    LintId::of(shadow::SHADOW_REUSE),\n-    LintId::of(shadow::SHADOW_SAME),\n-    LintId::of(shadow::SHADOW_UNRELATED),\n-    LintId::of(single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES),\n-    LintId::of(std_instead_of_core::ALLOC_INSTEAD_OF_CORE),\n-    LintId::of(std_instead_of_core::STD_INSTEAD_OF_ALLOC),\n-    LintId::of(std_instead_of_core::STD_INSTEAD_OF_CORE),\n-    LintId::of(strings::STRING_ADD),\n-    LintId::of(strings::STRING_SLICE),\n-    LintId::of(strings::STRING_TO_STRING),\n-    LintId::of(strings::STR_TO_STRING),\n-    LintId::of(types::RC_BUFFER),\n-    LintId::of(types::RC_MUTEX),\n-    LintId::of(undocumented_unsafe_blocks::UNDOCUMENTED_UNSAFE_BLOCKS),\n-    LintId::of(unicode::NON_ASCII_LITERAL),\n-    LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n-    LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n-    LintId::of(write::PRINT_STDERR),\n-    LintId::of(write::PRINT_STDOUT),\n-    LintId::of(write::USE_DEBUG),\n-])"}, {"sha": "6894d69e928a716b5a07e086d74c3e8938c527ac", "filename": "clippy_lints/src/lib.register_style.rs", "status": "removed", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,132 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n-    LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n-    LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n-    LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n-    LintId::of(bool_to_int_with_if::BOOL_TO_INT_WITH_IF),\n-    LintId::of(casts::FN_TO_NUMERIC_CAST),\n-    LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-    LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n-    LintId::of(collapsible_if::COLLAPSIBLE_IF),\n-    LintId::of(comparison_chain::COMPARISON_CHAIN),\n-    LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n-    LintId::of(default_instead_of_iter_empty::DEFAULT_INSTEAD_OF_ITER_EMPTY),\n-    LintId::of(dereference::NEEDLESS_BORROW),\n-    LintId::of(disallowed_macros::DISALLOWED_MACROS),\n-    LintId::of(disallowed_methods::DISALLOWED_METHODS),\n-    LintId::of(disallowed_names::DISALLOWED_NAMES),\n-    LintId::of(disallowed_types::DISALLOWED_TYPES),\n-    LintId::of(doc::MISSING_SAFETY_DOC),\n-    LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n-    LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n-    LintId::of(enum_variants::MODULE_INCEPTION),\n-    LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n-    LintId::of(float_literal::EXCESSIVE_PRECISION),\n-    LintId::of(format_args::UNINLINED_FORMAT_ARGS),\n-    LintId::of(from_over_into::FROM_OVER_INTO),\n-    LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n-    LintId::of(functions::DOUBLE_MUST_USE),\n-    LintId::of(functions::MUST_USE_UNIT),\n-    LintId::of(functions::RESULT_UNIT_ERR),\n-    LintId::of(implicit_saturating_add::IMPLICIT_SATURATING_ADD),\n-    LintId::of(implicit_saturating_sub::IMPLICIT_SATURATING_SUB),\n-    LintId::of(inherent_to_string::INHERENT_TO_STRING),\n-    LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n-    LintId::of(len_zero::COMPARISON_TO_EMPTY),\n-    LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n-    LintId::of(len_zero::LEN_ZERO),\n-    LintId::of(literal_representation::INCONSISTENT_DIGIT_GROUPING),\n-    LintId::of(literal_representation::UNUSUAL_BYTE_GROUPINGS),\n-    LintId::of(loops::FOR_KV_MAP),\n-    LintId::of(loops::NEEDLESS_RANGE_LOOP),\n-    LintId::of(loops::SAME_ITEM_PUSH),\n-    LintId::of(loops::WHILE_LET_ON_ITERATOR),\n-    LintId::of(main_recursion::MAIN_RECURSION),\n-    LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n-    LintId::of(manual_bits::MANUAL_BITS),\n-    LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n-    LintId::of(match_result_ok::MATCH_RESULT_OK),\n-    LintId::of(matches::COLLAPSIBLE_MATCH),\n-    LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n-    LintId::of(matches::MANUAL_MAP),\n-    LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n-    LintId::of(matches::MATCH_OVERLAPPING_ARM),\n-    LintId::of(matches::MATCH_REF_PATS),\n-    LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n-    LintId::of(matches::SINGLE_MATCH),\n-    LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n-    LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n-    LintId::of(methods::BYTES_NTH),\n-    LintId::of(methods::CHARS_LAST_CMP),\n-    LintId::of(methods::CHARS_NEXT_CMP),\n-    LintId::of(methods::ERR_EXPECT),\n-    LintId::of(methods::GET_FIRST),\n-    LintId::of(methods::INTO_ITER_ON_REF),\n-    LintId::of(methods::IS_DIGIT_ASCII_RADIX),\n-    LintId::of(methods::ITER_CLONED_COLLECT),\n-    LintId::of(methods::ITER_NEXT_SLICE),\n-    LintId::of(methods::ITER_NTH_ZERO),\n-    LintId::of(methods::ITER_SKIP_NEXT),\n-    LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n-    LintId::of(methods::MAP_CLONE),\n-    LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n-    LintId::of(methods::MUT_MUTEX_LOCK),\n-    LintId::of(methods::NEW_RET_NO_SELF),\n-    LintId::of(methods::OBFUSCATED_IF_ELSE),\n-    LintId::of(methods::OK_EXPECT),\n-    LintId::of(methods::OPTION_MAP_OR_NONE),\n-    LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n-    LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n-    LintId::of(methods::SINGLE_CHAR_ADD_STR),\n-    LintId::of(methods::STRING_EXTEND_CHARS),\n-    LintId::of(methods::UNNECESSARY_FOLD),\n-    LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n-    LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n-    LintId::of(methods::WRONG_SELF_CONVENTION),\n-    LintId::of(misc::TOPLEVEL_REF_ARG),\n-    LintId::of(misc::ZERO_PTR),\n-    LintId::of(misc_early::BUILTIN_TYPE_SHADOW),\n-    LintId::of(misc_early::DOUBLE_NEG),\n-    LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n-    LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n-    LintId::of(misc_early::REDUNDANT_PATTERN),\n-    LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n-    LintId::of(needless_late_init::NEEDLESS_LATE_INIT),\n-    LintId::of(needless_parens_on_range_literals::NEEDLESS_PARENS_ON_RANGE_LITERALS),\n-    LintId::of(neg_multiply::NEG_MULTIPLY),\n-    LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n-    LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n-    LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n-    LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n-    LintId::of(operators::ASSIGN_OP_PATTERN),\n-    LintId::of(operators::OP_REF),\n-    LintId::of(operators::PTR_EQ),\n-    LintId::of(partialeq_to_none::PARTIALEQ_TO_NONE),\n-    LintId::of(ptr::CMP_NULL),\n-    LintId::of(ptr::PTR_ARG),\n-    LintId::of(question_mark::QUESTION_MARK),\n-    LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n-    LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n-    LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n-    LintId::of(returns::LET_AND_RETURN),\n-    LintId::of(returns::NEEDLESS_RETURN),\n-    LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n-    LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n-    LintId::of(strings::TRIM_SPLIT_WHITESPACE),\n-    LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n-    LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n-    LintId::of(unit_types::LET_UNIT_VALUE),\n-    LintId::of(unnecessary_owned_empty_strings::UNNECESSARY_OWNED_EMPTY_STRINGS),\n-    LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n-    LintId::of(unused_unit::UNUSED_UNIT),\n-    LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n-    LintId::of(write::PRINTLN_EMPTY_STRING),\n-    LintId::of(write::PRINT_LITERAL),\n-    LintId::of(write::PRINT_WITH_NEWLINE),\n-    LintId::of(write::WRITELN_EMPTY_STRING),\n-    LintId::of(write::WRITE_LITERAL),\n-    LintId::of(write::WRITE_WITH_NEWLINE),\n-])"}, {"sha": "61af098c59a04b76c40762679a64c30346d07b80", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,39 +0,0 @@\n-// This file was generated by `cargo dev update_lints`.\n-// Use that command to update this file and do not edit by hand.\n-// Manual edits will be overwritten.\n-\n-store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec![\n-    LintId::of(almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE),\n-    LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n-    LintId::of(await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE),\n-    LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n-    LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n-    LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n-    LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n-    LintId::of(casts::CAST_ENUM_TRUNCATION),\n-    LintId::of(casts::CAST_NAN_TO_INT),\n-    LintId::of(casts::CAST_SLICE_FROM_RAW_PARTS),\n-    LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n-    LintId::of(drop_forget_ref::DROP_NON_DROP),\n-    LintId::of(drop_forget_ref::FORGET_NON_DROP),\n-    LintId::of(duplicate_mod::DUPLICATE_MOD),\n-    LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),\n-    LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n-    LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n-    LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n-    LintId::of(from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR),\n-    LintId::of(loops::EMPTY_LOOP),\n-    LintId::of(loops::MUT_RANGE_BOUND),\n-    LintId::of(methods::NO_EFFECT_REPLACE),\n-    LintId::of(methods::SUSPICIOUS_MAP),\n-    LintId::of(methods::SUSPICIOUS_TO_OWNED),\n-    LintId::of(multi_assignments::MULTI_ASSIGNMENTS),\n-    LintId::of(mut_key::MUTABLE_KEY_TYPE),\n-    LintId::of(octal_escapes::OCTAL_ESCAPES),\n-    LintId::of(operators::FLOAT_EQUALITY_WITHOUT_ABS),\n-    LintId::of(operators::MISREFACTORED_ASSIGN_OP),\n-    LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n-    LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n-    LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n-    LintId::of(swap_ptr_to_ref::SWAP_PTR_TO_REF),\n-])"}, {"sha": "7837e04bca1f626f3d4ccc5a00cbf95de9d63a3f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 110, "deletions": 121, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "patch": "@@ -46,122 +46,21 @@ extern crate rustc_trait_selection;\n \n #[macro_use]\n extern crate clippy_utils;\n+#[macro_use]\n+extern crate declare_clippy_lint;\n \n use clippy_utils::parse_msrv;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_lint::LintId;\n+use rustc_lint::{Lint, LintId};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n \n-/// Macro used to declare a Clippy lint.\n-///\n-/// Every lint declaration consists of 4 parts:\n-///\n-/// 1. The documentation, which is used for the website\n-/// 2. The `LINT_NAME`. See [lint naming][lint_naming] on lint naming conventions.\n-/// 3. The `lint_level`, which is a mapping from *one* of our lint groups to `Allow`, `Warn` or\n-///    `Deny`. The lint level here has nothing to do with what lint groups the lint is a part of.\n-/// 4. The `description` that contains a short explanation on what's wrong with code where the\n-///    lint is triggered.\n-///\n-/// Currently the categories `style`, `correctness`, `suspicious`, `complexity` and `perf` are\n-/// enabled by default. As said in the README.md of this repository, if the lint level mapping\n-/// changes, please update README.md.\n-///\n-/// # Example\n-///\n-/// ```\n-/// #![feature(rustc_private)]\n-/// extern crate rustc_session;\n-/// use rustc_session::declare_tool_lint;\n-/// use clippy_lints::declare_clippy_lint;\n-///\n-/// declare_clippy_lint! {\n-///     /// ### What it does\n-///     /// Checks for ... (describe what the lint matches).\n-///     ///\n-///     /// ### Why is this bad?\n-///     /// Supply the reason for linting the code.\n-///     ///\n-///     /// ### Example\n-///     /// ```rust\n-///     /// Insert a short example of code that triggers the lint\n-///     /// ```\n-///     ///\n-///     /// Use instead:\n-///     /// ```rust\n-///     /// Insert a short example of improved code that doesn't trigger the lint\n-///     /// ```\n-///     pub LINT_NAME,\n-///     pedantic,\n-///     \"description\"\n-/// }\n-/// ```\n-/// [lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n-#[macro_export]\n-macro_rules! declare_clippy_lint {\n-    { $(#[$attr:meta])* pub $name:tt, style, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, correctness, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Deny, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, suspicious, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, complexity, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, perf, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, pedantic, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, restriction, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, cargo, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, nursery, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, internal, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, internal_warn, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n-        }\n-    };\n-}\n-\n #[cfg(feature = \"internal\")]\n pub mod deprecated_lints;\n #[cfg_attr(feature = \"internal\", allow(clippy::missing_clippy_version_attribute))]\n mod utils;\n \n+mod declared_lints;\n mod renamed_lints;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n@@ -495,31 +394,121 @@ pub fn read_conf(sess: &Session) -> Conf {\n     conf\n }\n \n+#[derive(Default)]\n+struct RegistrationGroups {\n+    all: Vec<LintId>,\n+    cargo: Vec<LintId>,\n+    complexity: Vec<LintId>,\n+    correctness: Vec<LintId>,\n+    nursery: Vec<LintId>,\n+    pedantic: Vec<LintId>,\n+    perf: Vec<LintId>,\n+    restriction: Vec<LintId>,\n+    style: Vec<LintId>,\n+    suspicious: Vec<LintId>,\n+    #[cfg(feature = \"internal\")]\n+    internal: Vec<LintId>,\n+}\n+\n+impl RegistrationGroups {\n+    #[rustfmt::skip]\n+    fn register(self, store: &mut rustc_lint::LintStore) {\n+        store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), self.all);\n+        store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), self.cargo);\n+        store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), self.complexity);\n+        store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), self.correctness);\n+        store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), self.nursery);\n+        store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), self.pedantic);\n+        store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), self.perf);\n+        store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), self.restriction);\n+        store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), self.style);\n+        store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), self.suspicious);\n+        #[cfg(feature = \"internal\")]\n+        store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), self.internal);\n+    }\n+}\n+\n+#[derive(Copy, Clone)]\n+pub(crate) enum LintCategory {\n+    Cargo,\n+    Complexity,\n+    Correctness,\n+    Nursery,\n+    Pedantic,\n+    Perf,\n+    Restriction,\n+    Style,\n+    Suspicious,\n+    #[cfg(feature = \"internal\")]\n+    Internal,\n+}\n+#[allow(clippy::enum_glob_use)]\n+use LintCategory::*;\n+\n+impl LintCategory {\n+    fn is_all(self) -> bool {\n+        matches!(self, Correctness | Suspicious | Style | Complexity | Perf)\n+    }\n+\n+    fn group(self, groups: &mut RegistrationGroups) -> &mut Vec<LintId> {\n+        match self {\n+            Cargo => &mut groups.cargo,\n+            Complexity => &mut groups.complexity,\n+            Correctness => &mut groups.correctness,\n+            Nursery => &mut groups.nursery,\n+            Pedantic => &mut groups.pedantic,\n+            Perf => &mut groups.perf,\n+            Restriction => &mut groups.restriction,\n+            Style => &mut groups.style,\n+            Suspicious => &mut groups.suspicious,\n+            #[cfg(feature = \"internal\")]\n+            Internal => &mut groups.internal,\n+        }\n+    }\n+}\n+\n+pub(crate) struct LintInfo {\n+    /// Double reference to maintain pointer equality\n+    lint: &'static &'static Lint,\n+    category: LintCategory,\n+    explanation: &'static str,\n+}\n+\n+pub fn explain(name: &str) {\n+    let target = format!(\"clippy::{}\", name.to_ascii_uppercase());\n+    match declared_lints::LINTS.iter().find(|info| info.lint.name == target) {\n+        Some(info) => print!(\"{}\", info.explanation),\n+        None => println!(\"unknown lint: {name}\"),\n+    }\n+}\n+\n+fn register_categories(store: &mut rustc_lint::LintStore) {\n+    let mut groups = RegistrationGroups::default();\n+\n+    for LintInfo { lint, category, .. } in declared_lints::LINTS {\n+        if category.is_all() {\n+            groups.all.push(LintId::of(lint));\n+        }\n+\n+        category.group(&mut groups).push(LintId::of(lint));\n+    }\n+\n+    let lints: Vec<&'static Lint> = declared_lints::LINTS.iter().map(|info| *info.lint).collect();\n+\n+    store.register_lints(&lints);\n+    groups.register(store);\n+}\n+\n /// Register all lints and lint groups with the rustc plugin registry\n ///\n /// Used in `./src/driver.rs`.\n #[expect(clippy::too_many_lines)]\n pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf: &Conf) {\n     register_removed_non_tool_lints(store);\n+    register_categories(store);\n \n     include!(\"lib.deprecated.rs\");\n \n-    include!(\"lib.register_lints.rs\");\n-    include!(\"lib.register_restriction.rs\");\n-    include!(\"lib.register_pedantic.rs\");\n-\n-    #[cfg(feature = \"internal\")]\n-    include!(\"lib.register_internal.rs\");\n-\n-    include!(\"lib.register_all.rs\");\n-    include!(\"lib.register_style.rs\");\n-    include!(\"lib.register_complexity.rs\");\n-    include!(\"lib.register_correctness.rs\");\n-    include!(\"lib.register_suspicious.rs\");\n-    include!(\"lib.register_perf.rs\");\n-    include!(\"lib.register_cargo.rs\");\n-    include!(\"lib.register_nursery.rs\");\n-\n     #[cfg(feature = \"internal\")]\n     {\n         if std::env::var(\"ENABLE_METADATA_COLLECTION\").eq(&Ok(\"1\".to_string())) {"}, {"sha": "68bb0be67a75e6dabba5a77eb8b892569db6dff1", "filename": "declare_clippy_lint/Cargo.toml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "patch": "@@ -0,0 +1,13 @@\n+[package]\n+name = \"declare_clippy_lint\"\n+version = \"0.1.66\"\n+edition = \"2021\"\n+publish = false\n+\n+[lib]\n+proc-macro = true\n+\n+[dependencies]\n+itertools = \"0.10.1\"\n+quote = \"1.0.21\"\n+syn = \"1.0.100\""}, {"sha": "962766916dd1f1fe8b9762b57fcb8cc5ed7bd4cd", "filename": "declare_clippy_lint/src/lib.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/declare_clippy_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/declare_clippy_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2Fsrc%2Flib.rs?ref=a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "patch": "@@ -0,0 +1,173 @@\n+#![feature(let_chains)]\n+#![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n+\n+use proc_macro::TokenStream;\n+use quote::{format_ident, quote};\n+use syn::parse::{Parse, ParseStream};\n+use syn::{parse_macro_input, Attribute, Error, Ident, Lit, LitStr, Meta, Result, Token};\n+\n+fn parse_attr<const LEN: usize>(path: [&'static str; LEN], attr: &Attribute) -> Option<LitStr> {\n+    if let Meta::NameValue(name_value) = attr.parse_meta().ok()? {\n+        let path_idents = name_value.path.segments.iter().map(|segment| &segment.ident);\n+\n+        if itertools::equal(path_idents, path)\n+            && let Lit::Str(lit) = name_value.lit\n+        {\n+            return Some(lit);\n+        }\n+    }\n+\n+    None\n+}\n+\n+struct ClippyLint {\n+    attrs: Vec<Attribute>,\n+    explanation: String,\n+    name: Ident,\n+    category: Ident,\n+    description: LitStr,\n+}\n+\n+impl Parse for ClippyLint {\n+    fn parse(input: ParseStream) -> Result<Self> {\n+        let attrs = input.call(Attribute::parse_outer)?;\n+\n+        let mut in_code = false;\n+        let mut explanation = String::new();\n+        let mut version = None;\n+        for attr in &attrs {\n+            if let Some(lit) = parse_attr([\"doc\"], attr) {\n+                let value = lit.value();\n+                let line = value.strip_prefix(' ').unwrap_or(&value);\n+\n+                if line.starts_with(\"```\") {\n+                    explanation += \"```\\n\";\n+                    in_code = !in_code;\n+                } else if !(in_code && line.starts_with(\"# \")) {\n+                    explanation += line;\n+                    explanation.push('\\n');\n+                }\n+            } else if let Some(lit) = parse_attr([\"clippy\", \"version\"], attr) {\n+                if let Some(duplicate) = version.replace(lit) {\n+                    return Err(Error::new_spanned(duplicate, \"duplicate clippy::version\"));\n+                }\n+            } else {\n+                return Err(Error::new_spanned(attr, \"unexpected attribute\"));\n+            }\n+        }\n+\n+        input.parse::<Token![pub]>()?;\n+        let name = input.parse()?;\n+        input.parse::<Token![,]>()?;\n+\n+        let category = input.parse()?;\n+        input.parse::<Token![,]>()?;\n+\n+        let description = input.parse()?;\n+\n+        Ok(Self {\n+            attrs,\n+            explanation,\n+            name,\n+            category,\n+            description,\n+        })\n+    }\n+}\n+\n+/// Macro used to declare a Clippy lint.\n+///\n+/// Every lint declaration consists of 4 parts:\n+///\n+/// 1. The documentation, which is used for the website and `cargo clippy --explain`\n+/// 2. The `LINT_NAME`. See [lint naming][lint_naming] on lint naming conventions.\n+/// 3. The `lint_level`, which is a mapping from *one* of our lint groups to `Allow`, `Warn` or\n+///    `Deny`. The lint level here has nothing to do with what lint groups the lint is a part of.\n+/// 4. The `description` that contains a short explanation on what's wrong with code where the\n+///    lint is triggered.\n+///\n+/// Currently the categories `style`, `correctness`, `suspicious`, `complexity` and `perf` are\n+/// enabled by default. As said in the README.md of this repository, if the lint level mapping\n+/// changes, please update README.md.\n+///\n+/// # Example\n+///\n+/// ```\n+/// use rustc_session::declare_tool_lint;\n+///\n+/// declare_clippy_lint! {\n+///     /// ### What it does\n+///     /// Checks for ... (describe what the lint matches).\n+///     ///\n+///     /// ### Why is this bad?\n+///     /// Supply the reason for linting the code.\n+///     ///\n+///     /// ### Example\n+///     /// ```rust\n+///     /// Insert a short example of code that triggers the lint\n+///     /// ```\n+///     ///\n+///     /// Use instead:\n+///     /// ```rust\n+///     /// Insert a short example of improved code that doesn't trigger the lint\n+///     /// ```\n+///     #[clippy::version = \"1.65.0\"]\n+///     pub LINT_NAME,\n+///     pedantic,\n+///     \"description\"\n+/// }\n+/// ```\n+/// [lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n+#[proc_macro]\n+pub fn declare_clippy_lint(input: TokenStream) -> TokenStream {\n+    let ClippyLint {\n+        attrs,\n+        explanation,\n+        name,\n+        category,\n+        description,\n+    } = parse_macro_input!(input as ClippyLint);\n+\n+    let mut category = category.to_string();\n+\n+    let level = format_ident!(\n+        \"{}\",\n+        match category.as_str() {\n+            \"correctness\" => \"Deny\",\n+            \"style\" | \"suspicious\" | \"complexity\" | \"perf\" | \"internal_warn\" => \"Warn\",\n+            \"pedantic\" | \"restriction\" | \"cargo\" | \"nursery\" | \"internal\" => \"Allow\",\n+            _ => panic!(\"unknown category {category}\"),\n+        },\n+    );\n+\n+    let info = if category == \"internal_warn\" {\n+        None\n+    } else {\n+        let info_name = format_ident!(\"{name}_INFO\");\n+\n+        (&mut category[0..1]).make_ascii_uppercase();\n+        let category_variant = format_ident!(\"{category}\");\n+\n+        Some(quote! {\n+            pub(crate) static #info_name: &'static crate::LintInfo = &crate::LintInfo {\n+                lint: &#name,\n+                category: crate::LintCategory::#category_variant,\n+                explanation: #explanation,\n+            };\n+        })\n+    };\n+\n+    let output = quote! {\n+        declare_tool_lint! {\n+            #(#attrs)*\n+            pub clippy::#name,\n+            #level,\n+            #description,\n+            report_in_external_macro: true\n+        }\n+\n+        #info\n+    };\n+\n+    TokenStream::from(output)\n+}"}, {"sha": "d9c34a6c04981d1026dc6e98371868f02aa50272", "filename": "src/docs.rs", "status": "removed", "additions": 0, "deletions": 606, "changes": 606, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -1,606 +0,0 @@\n-// autogenerated. Please look at /clippy_dev/src/update_lints.rs\n-\n-macro_rules! include_lint {\n-    ($file_name: expr) => {\n-        include_str!($file_name)\n-    };\n-}\n-\n-macro_rules! docs {\n-    ($($lint_name: expr,)*) => {\n-        pub fn explain(lint: &str) {\n-            println!(\"{}\", match lint {\n-                $(\n-                    $lint_name => include_lint!(concat!(\"docs/\", concat!($lint_name, \".txt\"))),\n-                )*\n-                _ => \"unknown lint\",\n-            })\n-        }\n-    }\n-}\n-\n-docs! {\n-    \"absurd_extreme_comparisons\",\n-    \"alloc_instead_of_core\",\n-    \"allow_attributes_without_reason\",\n-    \"almost_complete_letter_range\",\n-    \"almost_swapped\",\n-    \"approx_constant\",\n-    \"arithmetic_side_effects\",\n-    \"as_conversions\",\n-    \"as_ptr_cast_mut\",\n-    \"as_underscore\",\n-    \"assertions_on_constants\",\n-    \"assertions_on_result_states\",\n-    \"assign_op_pattern\",\n-    \"async_yields_async\",\n-    \"await_holding_invalid_type\",\n-    \"await_holding_lock\",\n-    \"await_holding_refcell_ref\",\n-    \"bad_bit_mask\",\n-    \"bind_instead_of_map\",\n-    \"blanket_clippy_restriction_lints\",\n-    \"blocks_in_if_conditions\",\n-    \"bool_assert_comparison\",\n-    \"bool_comparison\",\n-    \"bool_to_int_with_if\",\n-    \"borrow_as_ptr\",\n-    \"borrow_deref_ref\",\n-    \"borrow_interior_mutable_const\",\n-    \"borrowed_box\",\n-    \"box_collection\",\n-    \"box_default\",\n-    \"boxed_local\",\n-    \"branches_sharing_code\",\n-    \"builtin_type_shadow\",\n-    \"bytes_count_to_len\",\n-    \"bytes_nth\",\n-    \"cargo_common_metadata\",\n-    \"case_sensitive_file_extension_comparisons\",\n-    \"cast_abs_to_unsigned\",\n-    \"cast_enum_constructor\",\n-    \"cast_enum_truncation\",\n-    \"cast_lossless\",\n-    \"cast_nan_to_int\",\n-    \"cast_possible_truncation\",\n-    \"cast_possible_wrap\",\n-    \"cast_precision_loss\",\n-    \"cast_ptr_alignment\",\n-    \"cast_ref_to_mut\",\n-    \"cast_sign_loss\",\n-    \"cast_slice_different_sizes\",\n-    \"cast_slice_from_raw_parts\",\n-    \"char_lit_as_u8\",\n-    \"chars_last_cmp\",\n-    \"chars_next_cmp\",\n-    \"checked_conversions\",\n-    \"clone_double_ref\",\n-    \"clone_on_copy\",\n-    \"clone_on_ref_ptr\",\n-    \"cloned_instead_of_copied\",\n-    \"cmp_nan\",\n-    \"cmp_null\",\n-    \"cmp_owned\",\n-    \"cognitive_complexity\",\n-    \"collapsible_else_if\",\n-    \"collapsible_if\",\n-    \"collapsible_match\",\n-    \"collapsible_str_replace\",\n-    \"comparison_chain\",\n-    \"comparison_to_empty\",\n-    \"copy_iterator\",\n-    \"crate_in_macro_def\",\n-    \"create_dir\",\n-    \"crosspointer_transmute\",\n-    \"dbg_macro\",\n-    \"debug_assert_with_mut_call\",\n-    \"decimal_literal_representation\",\n-    \"declare_interior_mutable_const\",\n-    \"default_instead_of_iter_empty\",\n-    \"default_numeric_fallback\",\n-    \"default_trait_access\",\n-    \"default_union_representation\",\n-    \"deprecated_cfg_attr\",\n-    \"deprecated_semver\",\n-    \"deref_addrof\",\n-    \"deref_by_slicing\",\n-    \"derivable_impls\",\n-    \"derive_hash_xor_eq\",\n-    \"derive_ord_xor_partial_ord\",\n-    \"derive_partial_eq_without_eq\",\n-    \"disallowed_macros\",\n-    \"disallowed_methods\",\n-    \"disallowed_names\",\n-    \"disallowed_script_idents\",\n-    \"disallowed_types\",\n-    \"diverging_sub_expression\",\n-    \"doc_link_with_quotes\",\n-    \"doc_markdown\",\n-    \"double_comparisons\",\n-    \"double_must_use\",\n-    \"double_neg\",\n-    \"double_parens\",\n-    \"drop_copy\",\n-    \"drop_non_drop\",\n-    \"drop_ref\",\n-    \"duplicate_mod\",\n-    \"duplicate_underscore_argument\",\n-    \"duration_subsec\",\n-    \"else_if_without_else\",\n-    \"empty_drop\",\n-    \"empty_enum\",\n-    \"empty_line_after_outer_attr\",\n-    \"empty_loop\",\n-    \"empty_structs_with_brackets\",\n-    \"enum_clike_unportable_variant\",\n-    \"enum_glob_use\",\n-    \"enum_variant_names\",\n-    \"eq_op\",\n-    \"equatable_if_let\",\n-    \"erasing_op\",\n-    \"err_expect\",\n-    \"excessive_precision\",\n-    \"exhaustive_enums\",\n-    \"exhaustive_structs\",\n-    \"exit\",\n-    \"expect_fun_call\",\n-    \"expect_used\",\n-    \"expl_impl_clone_on_copy\",\n-    \"explicit_auto_deref\",\n-    \"explicit_counter_loop\",\n-    \"explicit_deref_methods\",\n-    \"explicit_into_iter_loop\",\n-    \"explicit_iter_loop\",\n-    \"explicit_write\",\n-    \"extend_with_drain\",\n-    \"extra_unused_lifetimes\",\n-    \"fallible_impl_from\",\n-    \"field_reassign_with_default\",\n-    \"filetype_is_file\",\n-    \"filter_map_identity\",\n-    \"filter_map_next\",\n-    \"filter_next\",\n-    \"flat_map_identity\",\n-    \"flat_map_option\",\n-    \"float_arithmetic\",\n-    \"float_cmp\",\n-    \"float_cmp_const\",\n-    \"float_equality_without_abs\",\n-    \"fn_address_comparisons\",\n-    \"fn_params_excessive_bools\",\n-    \"fn_to_numeric_cast\",\n-    \"fn_to_numeric_cast_any\",\n-    \"fn_to_numeric_cast_with_truncation\",\n-    \"for_kv_map\",\n-    \"forget_copy\",\n-    \"forget_non_drop\",\n-    \"forget_ref\",\n-    \"format_in_format_args\",\n-    \"format_push_string\",\n-    \"from_iter_instead_of_collect\",\n-    \"from_over_into\",\n-    \"from_raw_with_void_ptr\",\n-    \"from_str_radix_10\",\n-    \"future_not_send\",\n-    \"get_first\",\n-    \"get_last_with_len\",\n-    \"get_unwrap\",\n-    \"identity_op\",\n-    \"if_let_mutex\",\n-    \"if_not_else\",\n-    \"if_same_then_else\",\n-    \"if_then_some_else_none\",\n-    \"ifs_same_cond\",\n-    \"implicit_clone\",\n-    \"implicit_hasher\",\n-    \"implicit_return\",\n-    \"implicit_saturating_add\",\n-    \"implicit_saturating_sub\",\n-    \"imprecise_flops\",\n-    \"inconsistent_digit_grouping\",\n-    \"inconsistent_struct_constructor\",\n-    \"index_refutable_slice\",\n-    \"indexing_slicing\",\n-    \"ineffective_bit_mask\",\n-    \"inefficient_to_string\",\n-    \"infallible_destructuring_match\",\n-    \"infinite_iter\",\n-    \"inherent_to_string\",\n-    \"inherent_to_string_shadow_display\",\n-    \"init_numbered_fields\",\n-    \"inline_always\",\n-    \"inline_asm_x86_att_syntax\",\n-    \"inline_asm_x86_intel_syntax\",\n-    \"inline_fn_without_body\",\n-    \"inspect_for_each\",\n-    \"int_plus_one\",\n-    \"integer_arithmetic\",\n-    \"integer_division\",\n-    \"into_iter_on_ref\",\n-    \"invalid_null_ptr_usage\",\n-    \"invalid_regex\",\n-    \"invalid_upcast_comparisons\",\n-    \"invalid_utf8_in_unchecked\",\n-    \"invisible_characters\",\n-    \"is_digit_ascii_radix\",\n-    \"items_after_statements\",\n-    \"iter_cloned_collect\",\n-    \"iter_count\",\n-    \"iter_kv_map\",\n-    \"iter_next_loop\",\n-    \"iter_next_slice\",\n-    \"iter_not_returning_iterator\",\n-    \"iter_nth\",\n-    \"iter_nth_zero\",\n-    \"iter_on_empty_collections\",\n-    \"iter_on_single_items\",\n-    \"iter_overeager_cloned\",\n-    \"iter_skip_next\",\n-    \"iter_with_drain\",\n-    \"iterator_step_by_zero\",\n-    \"just_underscores_and_digits\",\n-    \"large_const_arrays\",\n-    \"large_digit_groups\",\n-    \"large_enum_variant\",\n-    \"large_include_file\",\n-    \"large_stack_arrays\",\n-    \"large_types_passed_by_value\",\n-    \"len_without_is_empty\",\n-    \"len_zero\",\n-    \"let_and_return\",\n-    \"let_underscore_lock\",\n-    \"let_underscore_must_use\",\n-    \"let_unit_value\",\n-    \"linkedlist\",\n-    \"lossy_float_literal\",\n-    \"macro_use_imports\",\n-    \"main_recursion\",\n-    \"manual_assert\",\n-    \"manual_async_fn\",\n-    \"manual_bits\",\n-    \"manual_clamp\",\n-    \"manual_filter\",\n-    \"manual_filter_map\",\n-    \"manual_find\",\n-    \"manual_find_map\",\n-    \"manual_flatten\",\n-    \"manual_instant_elapsed\",\n-    \"manual_map\",\n-    \"manual_memcpy\",\n-    \"manual_non_exhaustive\",\n-    \"manual_ok_or\",\n-    \"manual_range_contains\",\n-    \"manual_rem_euclid\",\n-    \"manual_retain\",\n-    \"manual_saturating_arithmetic\",\n-    \"manual_split_once\",\n-    \"manual_str_repeat\",\n-    \"manual_string_new\",\n-    \"manual_strip\",\n-    \"manual_swap\",\n-    \"manual_unwrap_or\",\n-    \"many_single_char_names\",\n-    \"map_clone\",\n-    \"map_collect_result_unit\",\n-    \"map_entry\",\n-    \"map_err_ignore\",\n-    \"map_flatten\",\n-    \"map_identity\",\n-    \"map_unwrap_or\",\n-    \"match_as_ref\",\n-    \"match_bool\",\n-    \"match_like_matches_macro\",\n-    \"match_on_vec_items\",\n-    \"match_overlapping_arm\",\n-    \"match_ref_pats\",\n-    \"match_result_ok\",\n-    \"match_same_arms\",\n-    \"match_single_binding\",\n-    \"match_str_case_mismatch\",\n-    \"match_wild_err_arm\",\n-    \"match_wildcard_for_single_variants\",\n-    \"maybe_infinite_iter\",\n-    \"mem_forget\",\n-    \"mem_replace_option_with_none\",\n-    \"mem_replace_with_default\",\n-    \"mem_replace_with_uninit\",\n-    \"min_max\",\n-    \"mismatched_target_os\",\n-    \"mismatching_type_param_order\",\n-    \"misrefactored_assign_op\",\n-    \"missing_const_for_fn\",\n-    \"missing_docs_in_private_items\",\n-    \"missing_enforced_import_renames\",\n-    \"missing_errors_doc\",\n-    \"missing_inline_in_public_items\",\n-    \"missing_panics_doc\",\n-    \"missing_safety_doc\",\n-    \"missing_spin_loop\",\n-    \"missing_trait_methods\",\n-    \"mistyped_literal_suffixes\",\n-    \"mixed_case_hex_literals\",\n-    \"mixed_read_write_in_expression\",\n-    \"mod_module_files\",\n-    \"module_inception\",\n-    \"module_name_repetitions\",\n-    \"modulo_arithmetic\",\n-    \"modulo_one\",\n-    \"multi_assignments\",\n-    \"multiple_crate_versions\",\n-    \"multiple_inherent_impl\",\n-    \"must_use_candidate\",\n-    \"must_use_unit\",\n-    \"mut_from_ref\",\n-    \"mut_mut\",\n-    \"mut_mutex_lock\",\n-    \"mut_range_bound\",\n-    \"mutable_key_type\",\n-    \"mutex_atomic\",\n-    \"mutex_integer\",\n-    \"naive_bytecount\",\n-    \"needless_arbitrary_self_type\",\n-    \"needless_bitwise_bool\",\n-    \"needless_bool\",\n-    \"needless_borrow\",\n-    \"needless_borrowed_reference\",\n-    \"needless_collect\",\n-    \"needless_continue\",\n-    \"needless_doctest_main\",\n-    \"needless_for_each\",\n-    \"needless_late_init\",\n-    \"needless_lifetimes\",\n-    \"needless_match\",\n-    \"needless_option_as_deref\",\n-    \"needless_option_take\",\n-    \"needless_parens_on_range_literals\",\n-    \"needless_pass_by_value\",\n-    \"needless_question_mark\",\n-    \"needless_range_loop\",\n-    \"needless_return\",\n-    \"needless_splitn\",\n-    \"needless_update\",\n-    \"neg_cmp_op_on_partial_ord\",\n-    \"neg_multiply\",\n-    \"negative_feature_names\",\n-    \"never_loop\",\n-    \"new_ret_no_self\",\n-    \"new_without_default\",\n-    \"no_effect\",\n-    \"no_effect_replace\",\n-    \"no_effect_underscore_binding\",\n-    \"non_ascii_literal\",\n-    \"non_octal_unix_permissions\",\n-    \"non_send_fields_in_send_ty\",\n-    \"nonminimal_bool\",\n-    \"nonsensical_open_options\",\n-    \"nonstandard_macro_braces\",\n-    \"not_unsafe_ptr_arg_deref\",\n-    \"obfuscated_if_else\",\n-    \"octal_escapes\",\n-    \"ok_expect\",\n-    \"only_used_in_recursion\",\n-    \"op_ref\",\n-    \"option_as_ref_deref\",\n-    \"option_env_unwrap\",\n-    \"option_filter_map\",\n-    \"option_if_let_else\",\n-    \"option_map_or_none\",\n-    \"option_map_unit_fn\",\n-    \"option_option\",\n-    \"or_fun_call\",\n-    \"or_then_unwrap\",\n-    \"out_of_bounds_indexing\",\n-    \"overflow_check_conditional\",\n-    \"overly_complex_bool_expr\",\n-    \"panic\",\n-    \"panic_in_result_fn\",\n-    \"panicking_unwrap\",\n-    \"partial_pub_fields\",\n-    \"partialeq_ne_impl\",\n-    \"partialeq_to_none\",\n-    \"path_buf_push_overwrite\",\n-    \"pattern_type_mismatch\",\n-    \"possible_missing_comma\",\n-    \"precedence\",\n-    \"print_in_format_impl\",\n-    \"print_literal\",\n-    \"print_stderr\",\n-    \"print_stdout\",\n-    \"print_with_newline\",\n-    \"println_empty_string\",\n-    \"ptr_arg\",\n-    \"ptr_as_ptr\",\n-    \"ptr_eq\",\n-    \"ptr_offset_with_cast\",\n-    \"pub_use\",\n-    \"question_mark\",\n-    \"range_minus_one\",\n-    \"range_plus_one\",\n-    \"range_zip_with_len\",\n-    \"rc_buffer\",\n-    \"rc_clone_in_vec_init\",\n-    \"rc_mutex\",\n-    \"read_zero_byte_vec\",\n-    \"recursive_format_impl\",\n-    \"redundant_allocation\",\n-    \"redundant_clone\",\n-    \"redundant_closure\",\n-    \"redundant_closure_call\",\n-    \"redundant_closure_for_method_calls\",\n-    \"redundant_else\",\n-    \"redundant_feature_names\",\n-    \"redundant_field_names\",\n-    \"redundant_pattern\",\n-    \"redundant_pattern_matching\",\n-    \"redundant_pub_crate\",\n-    \"redundant_slicing\",\n-    \"redundant_static_lifetimes\",\n-    \"ref_binding_to_reference\",\n-    \"ref_option_ref\",\n-    \"repeat_once\",\n-    \"rest_pat_in_fully_bound_structs\",\n-    \"result_large_err\",\n-    \"result_map_or_into_option\",\n-    \"result_map_unit_fn\",\n-    \"result_unit_err\",\n-    \"return_self_not_must_use\",\n-    \"reversed_empty_ranges\",\n-    \"same_functions_in_if_condition\",\n-    \"same_item_push\",\n-    \"same_name_method\",\n-    \"search_is_some\",\n-    \"self_assignment\",\n-    \"self_named_constructors\",\n-    \"self_named_module_files\",\n-    \"semicolon_if_nothing_returned\",\n-    \"separated_literal_suffix\",\n-    \"serde_api_misuse\",\n-    \"shadow_reuse\",\n-    \"shadow_same\",\n-    \"shadow_unrelated\",\n-    \"short_circuit_statement\",\n-    \"should_implement_trait\",\n-    \"significant_drop_in_scrutinee\",\n-    \"similar_names\",\n-    \"single_char_add_str\",\n-    \"single_char_lifetime_names\",\n-    \"single_char_pattern\",\n-    \"single_component_path_imports\",\n-    \"single_element_loop\",\n-    \"single_match\",\n-    \"single_match_else\",\n-    \"size_of_in_element_count\",\n-    \"skip_while_next\",\n-    \"slow_vector_initialization\",\n-    \"stable_sort_primitive\",\n-    \"std_instead_of_alloc\",\n-    \"std_instead_of_core\",\n-    \"str_to_string\",\n-    \"string_add\",\n-    \"string_add_assign\",\n-    \"string_extend_chars\",\n-    \"string_from_utf8_as_bytes\",\n-    \"string_lit_as_bytes\",\n-    \"string_slice\",\n-    \"string_to_string\",\n-    \"strlen_on_c_strings\",\n-    \"struct_excessive_bools\",\n-    \"suboptimal_flops\",\n-    \"suspicious_arithmetic_impl\",\n-    \"suspicious_assignment_formatting\",\n-    \"suspicious_else_formatting\",\n-    \"suspicious_map\",\n-    \"suspicious_op_assign_impl\",\n-    \"suspicious_operation_groupings\",\n-    \"suspicious_splitn\",\n-    \"suspicious_to_owned\",\n-    \"suspicious_unary_op_formatting\",\n-    \"swap_ptr_to_ref\",\n-    \"tabs_in_doc_comments\",\n-    \"temporary_assignment\",\n-    \"to_digit_is_some\",\n-    \"to_string_in_format_args\",\n-    \"todo\",\n-    \"too_many_arguments\",\n-    \"too_many_lines\",\n-    \"toplevel_ref_arg\",\n-    \"trailing_empty_array\",\n-    \"trait_duplication_in_bounds\",\n-    \"transmute_bytes_to_str\",\n-    \"transmute_float_to_int\",\n-    \"transmute_int_to_bool\",\n-    \"transmute_int_to_char\",\n-    \"transmute_int_to_float\",\n-    \"transmute_num_to_bytes\",\n-    \"transmute_ptr_to_ptr\",\n-    \"transmute_ptr_to_ref\",\n-    \"transmute_undefined_repr\",\n-    \"transmutes_expressible_as_ptr_casts\",\n-    \"transmuting_null\",\n-    \"trim_split_whitespace\",\n-    \"trivial_regex\",\n-    \"trivially_copy_pass_by_ref\",\n-    \"try_err\",\n-    \"type_complexity\",\n-    \"type_repetition_in_bounds\",\n-    \"undocumented_unsafe_blocks\",\n-    \"undropped_manually_drops\",\n-    \"unicode_not_nfc\",\n-    \"unimplemented\",\n-    \"uninit_assumed_init\",\n-    \"uninit_vec\",\n-    \"uninlined_format_args\",\n-    \"unit_arg\",\n-    \"unit_cmp\",\n-    \"unit_hash\",\n-    \"unit_return_expecting_ord\",\n-    \"unnecessary_cast\",\n-    \"unnecessary_filter_map\",\n-    \"unnecessary_find_map\",\n-    \"unnecessary_fold\",\n-    \"unnecessary_join\",\n-    \"unnecessary_lazy_evaluations\",\n-    \"unnecessary_mut_passed\",\n-    \"unnecessary_operation\",\n-    \"unnecessary_owned_empty_strings\",\n-    \"unnecessary_self_imports\",\n-    \"unnecessary_sort_by\",\n-    \"unnecessary_to_owned\",\n-    \"unnecessary_unwrap\",\n-    \"unnecessary_wraps\",\n-    \"unneeded_field_pattern\",\n-    \"unneeded_wildcard_pattern\",\n-    \"unnested_or_patterns\",\n-    \"unreachable\",\n-    \"unreadable_literal\",\n-    \"unsafe_derive_deserialize\",\n-    \"unsafe_removed_from_name\",\n-    \"unseparated_literal_suffix\",\n-    \"unsound_collection_transmute\",\n-    \"unused_async\",\n-    \"unused_format_specs\",\n-    \"unused_io_amount\",\n-    \"unused_peekable\",\n-    \"unused_rounding\",\n-    \"unused_self\",\n-    \"unused_unit\",\n-    \"unusual_byte_groupings\",\n-    \"unwrap_in_result\",\n-    \"unwrap_or_else_default\",\n-    \"unwrap_used\",\n-    \"upper_case_acronyms\",\n-    \"use_debug\",\n-    \"use_self\",\n-    \"used_underscore_binding\",\n-    \"useless_asref\",\n-    \"useless_attribute\",\n-    \"useless_conversion\",\n-    \"useless_format\",\n-    \"useless_let_if_seq\",\n-    \"useless_transmute\",\n-    \"useless_vec\",\n-    \"vec_box\",\n-    \"vec_init_then_push\",\n-    \"vec_resize_to_zero\",\n-    \"verbose_bit_mask\",\n-    \"verbose_file_reads\",\n-    \"vtable_address_comparisons\",\n-    \"while_immutable_condition\",\n-    \"while_let_loop\",\n-    \"while_let_on_iterator\",\n-    \"wildcard_dependencies\",\n-    \"wildcard_enum_match_arm\",\n-    \"wildcard_imports\",\n-    \"wildcard_in_or_patterns\",\n-    \"write_literal\",\n-    \"write_with_newline\",\n-    \"writeln_empty_string\",\n-    \"wrong_self_convention\",\n-    \"wrong_transmute\",\n-    \"zero_divided_by_zero\",\n-    \"zero_prefixed_literal\",\n-    \"zero_ptr\",\n-    \"zero_sized_map_values\",\n-    \"zst_offset\",\n-\n-}"}, {"sha": "d418d2daa313e75d69fb6454fc12a8e59f7e37f2", "filename": "src/main.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "patch": "@@ -7,8 +7,6 @@ use std::env;\n use std::path::PathBuf;\n use std::process::{self, Command};\n \n-mod docs;\n-\n const CARGO_CLIPPY_HELP: &str = r#\"Checks a package to catch common mistakes and improve your Rust code.\n \n Usage:\n@@ -60,7 +58,7 @@ pub fn main() {\n     if let Some(pos) = env::args().position(|a| a == \"--explain\") {\n         if let Some(mut lint) = env::args().nth(pos + 1) {\n             lint.make_ascii_lowercase();\n-            docs::explain(&lint.strip_prefix(\"clippy::\").unwrap_or(&lint).replace('-', \"_\"));\n+            clippy_lints::explain(&lint.strip_prefix(\"clippy::\").unwrap_or(&lint).replace('-', \"_\"));\n         } else {\n             show_help();\n         }"}, {"sha": "7a85386a3df4b8fc9934fe30010e5f87820fe12d", "filename": "tests/versioncheck.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a201518a8a1f52c8893fdd3bcd259e2258fbb4d9/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=a201518a8a1f52c8893fdd3bcd259e2258fbb4d9", "patch": "@@ -6,7 +6,7 @@ use rustc_tools_util::VersionInfo;\n use std::fs;\n \n #[test]\n-fn check_that_clippy_lints_and_clippy_utils_have_the_same_version_as_clippy() {\n+fn consistent_clippy_crate_versions() {\n     fn read_version(path: &str) -> String {\n         let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"error reading `{path}`: {e:?}\"));\n         contents\n@@ -24,11 +24,16 @@ fn check_that_clippy_lints_and_clippy_utils_have_the_same_version_as_clippy() {\n     }\n \n     let clippy_version = read_version(\"Cargo.toml\");\n-    let clippy_lints_version = read_version(\"clippy_lints/Cargo.toml\");\n-    let clippy_utils_version = read_version(\"clippy_utils/Cargo.toml\");\n \n-    assert_eq!(clippy_version, clippy_lints_version);\n-    assert_eq!(clippy_version, clippy_utils_version);\n+    let paths = [\n+        \"declare_clippy_lint/Cargo.toml\",\n+        \"clippy_lints/Cargo.toml\",\n+        \"clippy_utils/Cargo.toml\",\n+    ];\n+\n+    for path in paths {\n+        assert_eq!(clippy_version, read_version(path), \"{path} version differs\");\n+    }\n }\n \n #[test]"}]}