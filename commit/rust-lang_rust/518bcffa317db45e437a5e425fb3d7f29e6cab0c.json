{"sha": "518bcffa317db45e437a5e425fb3d7f29e6cab0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxOGJjZmZhMzE3ZGI0NWU0MzdhNWU0MjVmYjNkN2YyOWU2Y2FiMGM=", "commit": {"author": {"name": "Tinco Andringa", "email": "mail@tinco.nl", "date": "2018-09-10T10:28:30Z"}, "committer": {"name": "Tinco Andringa", "email": "mail@tinco.nl", "date": "2018-09-10T10:33:39Z"}, "message": "refactor so that it's no longer possible to call print_source incorrectly", "tree": {"sha": "311e22896e525be1cbc527cde9d27f7a0b406239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/311e22896e525be1cbc527cde9d27f7a0b406239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/518bcffa317db45e437a5e425fb3d7f29e6cab0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/518bcffa317db45e437a5e425fb3d7f29e6cab0c", "html_url": "https://github.com/rust-lang/rust/commit/518bcffa317db45e437a5e425fb3d7f29e6cab0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/518bcffa317db45e437a5e425fb3d7f29e6cab0c/comments", "author": {"login": "tinco", "id": 22532, "node_id": "MDQ6VXNlcjIyNTMy", "avatar_url": "https://avatars.githubusercontent.com/u/22532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinco", "html_url": "https://github.com/tinco", "followers_url": "https://api.github.com/users/tinco/followers", "following_url": "https://api.github.com/users/tinco/following{/other_user}", "gists_url": "https://api.github.com/users/tinco/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinco/subscriptions", "organizations_url": "https://api.github.com/users/tinco/orgs", "repos_url": "https://api.github.com/users/tinco/repos", "events_url": "https://api.github.com/users/tinco/events{/privacy}", "received_events_url": "https://api.github.com/users/tinco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tinco", "id": 22532, "node_id": "MDQ6VXNlcjIyNTMy", "avatar_url": "https://avatars.githubusercontent.com/u/22532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinco", "html_url": "https://github.com/tinco", "followers_url": "https://api.github.com/users/tinco/followers", "following_url": "https://api.github.com/users/tinco/following{/other_user}", "gists_url": "https://api.github.com/users/tinco/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinco/subscriptions", "organizations_url": "https://api.github.com/users/tinco/orgs", "repos_url": "https://api.github.com/users/tinco/repos", "events_url": "https://api.github.com/users/tinco/events{/privacy}", "received_events_url": "https://api.github.com/users/tinco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca901a187c9104b91de0d2370025024397c90832", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca901a187c9104b91de0d2370025024397c90832", "html_url": "https://github.com/rust-lang/rust/commit/ca901a187c9104b91de0d2370025024397c90832"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "c9ddd5f00f23cdcfd1feb2f4ae7abce5fd406c6b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/518bcffa317db45e437a5e425fb3d7f29e6cab0c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518bcffa317db45e437a5e425fb3d7f29e6cab0c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=518bcffa317db45e437a5e425fb3d7f29e6cab0c", "patch": "@@ -242,7 +242,7 @@ struct DebuggerCommands {\n \n enum ReadFrom {\n     Path,\n-    Stdin,\n+    Stdin(String),\n }\n \n impl<'test> TestCx<'test> {\n@@ -426,11 +426,14 @@ impl<'test> TestCx<'test> {\n                     round, self.revision\n                 ),\n             );\n-            let read_from = if round == 0 { ReadFrom::Path } else { ReadFrom::Stdin };\n-            let proc_res = self.print_source(srcs[round].to_owned(),\n-                                             &self.props.pretty_mode,\n-                                             read_from);\n+            let read_from = if round == 0 {\n+                ReadFrom::Path\n+            } else {\n+                ReadFrom::Stdin(srcs[round].to_owned())\n+            };\n \n+            let proc_res = self.print_source(read_from,\n+                                             &self.props.pretty_mode);\n             if !proc_res.status.success() {\n                 self.fatal_proc_rec(\n                     &format!(\n@@ -485,7 +488,7 @@ impl<'test> TestCx<'test> {\n         }\n \n         // additionally, run `--pretty expanded` and try to build it.\n-        let proc_res = self.print_source(srcs[round].clone(), \"expanded\", ReadFrom::Path);\n+        let proc_res = self.print_source(ReadFrom::Path, \"expanded\");\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"pretty-printing (expanded) failed\", &proc_res);\n         }\n@@ -503,10 +506,10 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn print_source(&self, src: String, pretty_type: &str, read_from: ReadFrom) -> ProcRes {\n+    fn print_source(&self, read_from: ReadFrom, pretty_type: &str) -> ProcRes {\n         let aux_dir = self.aux_output_dir_name();\n         let input: &str = match read_from {\n-            ReadFrom::Stdin => \"-\",\n+            ReadFrom::Stdin(_) => \"-\",\n             ReadFrom::Path => self.testpaths.file.to_str().unwrap(),\n         };\n \n@@ -521,16 +524,16 @@ impl<'test> TestCx<'test> {\n             .args(&self.props.compile_flags)\n             .envs(self.props.exec_env.clone());\n \n-        let src_to_read = match read_from {\n-            ReadFrom::Stdin => Some(src),\n+        let src = match read_from {\n+            ReadFrom::Stdin(src) => Some(src),\n             ReadFrom::Path => None\n         };\n \n         self.compose_and_run(\n             rustc,\n             self.config.compile_lib_path.to_str().unwrap(),\n             Some(aux_dir.to_str().unwrap()),\n-            src_to_read,\n+            src,\n         )\n     }\n "}]}