{"sha": "3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZWM5ZjQ2ZDNmZWU5YzVmYTBkNDRkMWVlNDBlNzZmOGVhZWMyZWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-08-05T18:49:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-08-06T02:54:54Z"}, "message": "native, rustuv: Fix spawning with empty args\n\nThere was a bug in both libnative and libuv which prevented child processes from\nbeing spawned correctly on windows when one of the arguments was an empty\nstring. The libuv bug has since been fixed upstream, and the libnative bug was\nfixed as part of this commit.\n\nWhen updating libuv, this also includes a fix for #15149.\n\nCloses #15149\nCloses #16272", "tree": {"sha": "4a9b983ab8ce7de3c7c2fed5b93b6e21781270ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a9b983ab8ce7de3c7c2fed5b93b6e21781270ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed", "html_url": "https://github.com/rust-lang/rust/commit/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce83301f8c64f77c876ecfed65962b7dc407f093", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce83301f8c64f77c876ecfed65962b7dc407f093", "html_url": "https://github.com/rust-lang/rust/commit/ce83301f8c64f77c876ecfed65962b7dc407f093"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "d64e81c6d15b689b69a4d44b0d1720e2164a2cd2", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed", "patch": "@@ -479,7 +479,10 @@ fn make_command_line(prog: &CString, args: &[CString]) -> String {\n     return cmd;\n \n     fn append_arg(cmd: &mut String, arg: &str) {\n-        let quote = arg.chars().any(|c| c == ' ' || c == '\\t');\n+        // If an argument has 0 characters then we need to quote it to ensure\n+        // that it actually gets passed through on the command line or otherwise\n+        // it will be dropped entirely when parsed on the other end.\n+        let quote = arg.chars().any(|c| c == ' ' || c == '\\t') || arg.len() == 0;\n         if quote {\n             cmd.push_char('\"');\n         }"}, {"sha": "0da8d0d2108eaac45f88cc61cc201b2f6ef082ba", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed", "patch": "@@ -137,7 +137,7 @@ fn socket_name(sk: SocketNameKind,\n \n     let sockaddr_p = &mut sockaddr as *mut libc::sockaddr_storage;\n     match unsafe {\n-        getsockname(handle, sockaddr_p as *mut libc::sockaddr, &mut namelen)\n+        getsockname(&*handle, sockaddr_p as *mut libc::sockaddr, &mut namelen)\n     } {\n         0 => Ok(sockaddr_to_addr(&sockaddr, namelen as uint)),\n         n => Err(uv_error_to_io_error(UvError(n)))\n@@ -365,7 +365,7 @@ impl TcpListener {\n         let _len = addr_to_sockaddr(address, &mut storage);\n         let res = unsafe {\n             let addr_p = &storage as *const _ as *const libc::sockaddr;\n-            uvll::uv_tcp_bind(l.handle, addr_p)\n+            uvll::uv_tcp_bind(l.handle, addr_p, 0)\n         };\n         return match res {\n             0 => Ok(l.install()),"}, {"sha": "6fb45339ba699c85465fc3f6775053b49533eb80", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed", "patch": "@@ -312,6 +312,7 @@ pub enum uv_req_type {\n     UV_FS,\n     UV_WORK,\n     UV_GETADDRINFO,\n+    UV_GETNAMEINFO,\n     UV_REQ_TYPE_MAX\n }\n \n@@ -329,6 +330,7 @@ pub enum uv_req_type {\n     UV_UDP_SEND,\n     UV_FS,\n     UV_WORK,\n+    UV_GETNAMEINFO,\n     UV_GETADDRINFO,\n     UV_ACCEPT,\n     UV_FS_EVENT_REQ,\n@@ -578,14 +580,16 @@ extern {\n     pub fn uv_tcp_init(l: *mut uv_loop_t, h: *mut uv_tcp_t) -> c_int;\n     pub fn uv_tcp_connect(c: *mut uv_connect_t, h: *mut uv_tcp_t,\n                           addr: *const sockaddr, cb: uv_connect_cb) -> c_int;\n-    pub fn uv_tcp_bind(t: *mut uv_tcp_t, addr: *const sockaddr) -> c_int;\n+    pub fn uv_tcp_bind(t: *mut uv_tcp_t,\n+                       addr: *const sockaddr,\n+                       flags: c_uint) -> c_int;\n     pub fn uv_tcp_nodelay(h: *mut uv_tcp_t, enable: c_int) -> c_int;\n     pub fn uv_tcp_keepalive(h: *mut uv_tcp_t, enable: c_int,\n                             delay: c_uint) -> c_int;\n     pub fn uv_tcp_simultaneous_accepts(h: *mut uv_tcp_t, enable: c_int) -> c_int;\n-    pub fn uv_tcp_getsockname(h: *mut uv_tcp_t, name: *mut sockaddr,\n+    pub fn uv_tcp_getsockname(h: *const uv_tcp_t, name: *mut sockaddr,\n                               len: *mut c_int) -> c_int;\n-    pub fn uv_tcp_getpeername(h: *mut uv_tcp_t, name: *mut sockaddr,\n+    pub fn uv_tcp_getpeername(h: *const uv_tcp_t, name: *mut sockaddr,\n                               len: *mut c_int) -> c_int;\n \n     // udp bindings\n@@ -604,7 +608,7 @@ extern {\n     pub fn uv_udp_set_multicast_ttl(handle: *mut uv_udp_t, ttl: c_int) -> c_int;\n     pub fn uv_udp_set_ttl(handle: *mut uv_udp_t, ttl: c_int) -> c_int;\n     pub fn uv_udp_set_broadcast(handle: *mut uv_udp_t, on: c_int) -> c_int;\n-    pub fn uv_udp_getsockname(h: *mut uv_udp_t, name: *mut sockaddr,\n+    pub fn uv_udp_getsockname(h: *const uv_udp_t, name: *mut sockaddr,\n                               len: *mut c_int) -> c_int;\n \n     // timer bindings"}, {"sha": "dec0561d198d86a274b1067b53b64fea3c659202", "filename": "src/libuv", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuv?ref=3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed", "patch": "@@ -1 +1 @@\n-Subproject commit 43495892ded622de51eba7362c5ffae1ed50c9cc\n+Subproject commit dec0561d198d86a274b1067b53b64fea3c659202"}, {"sha": "cb4410cc1aad98414506431af29d9a67f5809f1d", "filename": "src/test/run-pass/issue-15149.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15149.rs?ref=3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed", "patch": "@@ -18,9 +18,7 @@ use std::io::{TempDir, Command, fs};\n use std::os;\n use std::task::TaskBuilder;\n \n-// FIXME(#15149) libgreen still needs to be update. There is an open PR for it\n-//               but it is not yet merged.\n-// green_start!(main)\n+green_start!(main)\n \n fn main() {\n     // If we're the child, make sure we were invoked correctly"}, {"sha": "86427f5e9ddf62b6e41534601aaed96c6f149b52", "filename": "src/test/run-pass/issue-16272.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16272.rs?ref=3aec9f46d3fee9c5fa0d44d1ee40e76f8eaec2ed", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(phase)]\n+#[phase(plugin)]\n+extern crate green;\n+extern crate native;\n+\n+use native::NativeTaskBuilder;\n+use std::io::{process, Command};\n+use std::os;\n+use std::task::TaskBuilder;\n+\n+green_start!(main)\n+\n+fn main() {\n+    let len = os::args().len();\n+\n+    if len == 1 {\n+        test();\n+        let (tx, rx) = channel();\n+        TaskBuilder::new().native().spawn(proc() {\n+            tx.send(test());\n+        });\n+        rx.recv();\n+    } else {\n+        assert_eq!(len, 3);\n+    }\n+}\n+\n+fn test() {\n+    let status = Command::new(os::self_exe_name().unwrap())\n+                         .arg(\"foo\").arg(\"\")\n+                         .stdout(process::InheritFd(1))\n+                         .stderr(process::InheritFd(2))\n+                         .status().unwrap();\n+    assert!(status.success());\n+}"}]}