{"sha": "428a6ff5b8bad2c80a3522599195bf2a393f744e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOGE2ZmY1YjhiYWQyYzgwYTM1MjI1OTkxOTViZjJhMzkzZjc0NGU=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-27T10:10:07Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-27T10:10:07Z"}, "message": "Move cargo watch functionality to separate crate", "tree": {"sha": "9707dd343b8f00f01041a7995536aac84b137291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9707dd343b8f00f01041a7995536aac84b137291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428a6ff5b8bad2c80a3522599195bf2a393f744e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428a6ff5b8bad2c80a3522599195bf2a393f744e", "html_url": "https://github.com/rust-lang/rust/commit/428a6ff5b8bad2c80a3522599195bf2a393f744e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428a6ff5b8bad2c80a3522599195bf2a393f744e/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "html_url": "https://github.com/rust-lang/rust/commit/0cdbd0814958e174c5481d6bf16bd2a7e53ec981"}], "stats": {"total": 2711, "additions": 1373, "deletions": 1338}, "files": [{"sha": "7d29110763da31d8e07acb04732b47bce86cca73", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -897,6 +897,20 @@ dependencies = [\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ra_cargo_watch\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"cargo_metadata 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jod-thread 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lsp-types 0.67.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"ra_cfg\"\n version = \"0.1.0\"\n@@ -1051,15 +1065,14 @@ dependencies = [\n name = \"ra_lsp_server\"\n version = \"0.1.0\"\n dependencies = [\n- \"cargo_metadata 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jod-thread 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-server 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-types 0.67.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_cargo_watch 0.1.0\",\n  \"ra_ide 0.1.0\",\n  \"ra_prof 0.1.0\",\n  \"ra_project_model 0.1.0\","}, {"sha": "bcc4648ff44d454f38d1f346b0c5e642b7967d22", "filename": "crates/ra_cargo_watch/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2FCargo.toml?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_cargo_watch\"\n+version = \"0.1.0\"\n+authors = [\"rust-analyzer developers\"]\n+\n+[dependencies]\n+crossbeam-channel = \"0.4\"\n+lsp-types = { version = \"0.67.0\", features = [\"proposed\"] }\n+log = \"0.4.3\"\n+cargo_metadata = \"0.9.1\"\n+jod-thread = \"0.1.0\"\n+parking_lot = \"0.10.0\"\n+\n+[dev-dependencies]\n+insta = \"0.12.0\"\n+serde_json = \"1.0\"\n\\ No newline at end of file"}, {"sha": "3bd4bf7a5f62ff5a86c0ea033e1d7fa1ab3f4dbe", "filename": "crates/ra_cargo_watch/src/conv.rs", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -0,0 +1,280 @@\n+//! This module provides the functionality needed to convert diagnostics from\n+//! `cargo check` json format to the LSP diagnostic format.\n+use cargo_metadata::diagnostic::{\n+    Applicability, Diagnostic as RustDiagnostic, DiagnosticLevel, DiagnosticSpan,\n+    DiagnosticSpanMacroExpansion,\n+};\n+use lsp_types::{\n+    Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag, Location,\n+    NumberOrString, Position, Range, Url,\n+};\n+use std::{fmt::Write, path::PathBuf};\n+\n+#[cfg(test)]\n+mod test;\n+\n+/// Converts a Rust level string to a LSP severity\n+fn map_level_to_severity(val: DiagnosticLevel) -> Option<DiagnosticSeverity> {\n+    match val {\n+        DiagnosticLevel::Ice => Some(DiagnosticSeverity::Error),\n+        DiagnosticLevel::Error => Some(DiagnosticSeverity::Error),\n+        DiagnosticLevel::Warning => Some(DiagnosticSeverity::Warning),\n+        DiagnosticLevel::Note => Some(DiagnosticSeverity::Information),\n+        DiagnosticLevel::Help => Some(DiagnosticSeverity::Hint),\n+        DiagnosticLevel::Unknown => None,\n+    }\n+}\n+\n+/// Check whether a file name is from macro invocation\n+fn is_from_macro(file_name: &str) -> bool {\n+    file_name.starts_with('<') && file_name.ends_with('>')\n+}\n+\n+/// Converts a Rust macro span to a LSP location recursively\n+fn map_macro_span_to_location(\n+    span_macro: &DiagnosticSpanMacroExpansion,\n+    workspace_root: &PathBuf,\n+) -> Option<Location> {\n+    if !is_from_macro(&span_macro.span.file_name) {\n+        return Some(map_span_to_location(&span_macro.span, workspace_root));\n+    }\n+\n+    if let Some(expansion) = &span_macro.span.expansion {\n+        return map_macro_span_to_location(&expansion, workspace_root);\n+    }\n+\n+    None\n+}\n+\n+/// Converts a Rust span to a LSP location\n+fn map_span_to_location(span: &DiagnosticSpan, workspace_root: &PathBuf) -> Location {\n+    if is_from_macro(&span.file_name) && span.expansion.is_some() {\n+        let expansion = span.expansion.as_ref().unwrap();\n+        if let Some(macro_range) = map_macro_span_to_location(&expansion, workspace_root) {\n+            return macro_range;\n+        }\n+    }\n+\n+    let mut file_name = workspace_root.clone();\n+    file_name.push(&span.file_name);\n+    let uri = Url::from_file_path(file_name).unwrap();\n+\n+    let range = Range::new(\n+        Position::new(span.line_start as u64 - 1, span.column_start as u64 - 1),\n+        Position::new(span.line_end as u64 - 1, span.column_end as u64 - 1),\n+    );\n+\n+    Location { uri, range }\n+}\n+\n+/// Converts a secondary Rust span to a LSP related information\n+///\n+/// If the span is unlabelled this will return `None`.\n+fn map_secondary_span_to_related(\n+    span: &DiagnosticSpan,\n+    workspace_root: &PathBuf,\n+) -> Option<DiagnosticRelatedInformation> {\n+    if let Some(label) = &span.label {\n+        let location = map_span_to_location(span, workspace_root);\n+        Some(DiagnosticRelatedInformation { location, message: label.clone() })\n+    } else {\n+        // Nothing to label this with\n+        None\n+    }\n+}\n+\n+/// Determines if diagnostic is related to unused code\n+fn is_unused_or_unnecessary(rd: &RustDiagnostic) -> bool {\n+    if let Some(code) = &rd.code {\n+        match code.code.as_str() {\n+            \"dead_code\" | \"unknown_lints\" | \"unreachable_code\" | \"unused_attributes\"\n+            | \"unused_imports\" | \"unused_macros\" | \"unused_variables\" => true,\n+            _ => false,\n+        }\n+    } else {\n+        false\n+    }\n+}\n+\n+/// Determines if diagnostic is related to deprecated code\n+fn is_deprecated(rd: &RustDiagnostic) -> bool {\n+    if let Some(code) = &rd.code {\n+        match code.code.as_str() {\n+            \"deprecated\" => true,\n+            _ => false,\n+        }\n+    } else {\n+        false\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct SuggestedFix {\n+    pub title: String,\n+    pub location: Location,\n+    pub replacement: String,\n+    pub applicability: Applicability,\n+    pub diagnostics: Vec<Diagnostic>,\n+}\n+\n+impl std::cmp::PartialEq<SuggestedFix> for SuggestedFix {\n+    fn eq(&self, other: &SuggestedFix) -> bool {\n+        if self.title == other.title\n+            && self.location == other.location\n+            && self.replacement == other.replacement\n+        {\n+            // Applicability doesn't impl PartialEq...\n+            match (&self.applicability, &other.applicability) {\n+                (Applicability::MachineApplicable, Applicability::MachineApplicable) => true,\n+                (Applicability::HasPlaceholders, Applicability::HasPlaceholders) => true,\n+                (Applicability::MaybeIncorrect, Applicability::MaybeIncorrect) => true,\n+                (Applicability::Unspecified, Applicability::Unspecified) => true,\n+                _ => false,\n+            }\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+enum MappedRustChildDiagnostic {\n+    Related(DiagnosticRelatedInformation),\n+    SuggestedFix(SuggestedFix),\n+    MessageLine(String),\n+}\n+\n+fn map_rust_child_diagnostic(\n+    rd: &RustDiagnostic,\n+    workspace_root: &PathBuf,\n+) -> MappedRustChildDiagnostic {\n+    let span: &DiagnosticSpan = match rd.spans.iter().find(|s| s.is_primary) {\n+        Some(span) => span,\n+        None => {\n+            // `rustc` uses these spanless children as a way to print multi-line\n+            // messages\n+            return MappedRustChildDiagnostic::MessageLine(rd.message.clone());\n+        }\n+    };\n+\n+    // If we have a primary span use its location, otherwise use the parent\n+    let location = map_span_to_location(&span, workspace_root);\n+\n+    if let Some(suggested_replacement) = &span.suggested_replacement {\n+        // Include our replacement in the title unless it's empty\n+        let title = if !suggested_replacement.is_empty() {\n+            format!(\"{}: '{}'\", rd.message, suggested_replacement)\n+        } else {\n+            rd.message.clone()\n+        };\n+\n+        MappedRustChildDiagnostic::SuggestedFix(SuggestedFix {\n+            title,\n+            location,\n+            replacement: suggested_replacement.clone(),\n+            applicability: span.suggestion_applicability.clone().unwrap_or(Applicability::Unknown),\n+            diagnostics: vec![],\n+        })\n+    } else {\n+        MappedRustChildDiagnostic::Related(DiagnosticRelatedInformation {\n+            location,\n+            message: rd.message.clone(),\n+        })\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub(crate) struct MappedRustDiagnostic {\n+    pub location: Location,\n+    pub diagnostic: Diagnostic,\n+    pub suggested_fixes: Vec<SuggestedFix>,\n+}\n+\n+/// Converts a Rust root diagnostic to LSP form\n+///\n+/// This flattens the Rust diagnostic by:\n+///\n+/// 1. Creating a LSP diagnostic with the root message and primary span.\n+/// 2. Adding any labelled secondary spans to `relatedInformation`\n+/// 3. Categorising child diagnostics as either `SuggestedFix`es,\n+///    `relatedInformation` or additional message lines.\n+///\n+/// If the diagnostic has no primary span this will return `None`\n+pub(crate) fn map_rust_diagnostic_to_lsp(\n+    rd: &RustDiagnostic,\n+    workspace_root: &PathBuf,\n+) -> Option<MappedRustDiagnostic> {\n+    let primary_span = rd.spans.iter().find(|s| s.is_primary)?;\n+\n+    let location = map_span_to_location(&primary_span, workspace_root);\n+\n+    let severity = map_level_to_severity(rd.level);\n+    let mut primary_span_label = primary_span.label.as_ref();\n+\n+    let mut source = String::from(\"rustc\");\n+    let mut code = rd.code.as_ref().map(|c| c.code.clone());\n+    if let Some(code_val) = &code {\n+        // See if this is an RFC #2103 scoped lint (e.g. from Clippy)\n+        let scoped_code: Vec<&str> = code_val.split(\"::\").collect();\n+        if scoped_code.len() == 2 {\n+            source = String::from(scoped_code[0]);\n+            code = Some(String::from(scoped_code[1]));\n+        }\n+    }\n+\n+    let mut related_information = vec![];\n+    let mut tags = vec![];\n+\n+    for secondary_span in rd.spans.iter().filter(|s| !s.is_primary) {\n+        let related = map_secondary_span_to_related(secondary_span, workspace_root);\n+        if let Some(related) = related {\n+            related_information.push(related);\n+        }\n+    }\n+\n+    let mut suggested_fixes = vec![];\n+    let mut message = rd.message.clone();\n+    for child in &rd.children {\n+        let child = map_rust_child_diagnostic(&child, workspace_root);\n+        match child {\n+            MappedRustChildDiagnostic::Related(related) => related_information.push(related),\n+            MappedRustChildDiagnostic::SuggestedFix(suggested_fix) => {\n+                suggested_fixes.push(suggested_fix)\n+            }\n+            MappedRustChildDiagnostic::MessageLine(message_line) => {\n+                write!(&mut message, \"\\n{}\", message_line).unwrap();\n+\n+                // These secondary messages usually duplicate the content of the\n+                // primary span label.\n+                primary_span_label = None;\n+            }\n+        }\n+    }\n+\n+    if let Some(primary_span_label) = primary_span_label {\n+        write!(&mut message, \"\\n{}\", primary_span_label).unwrap();\n+    }\n+\n+    if is_unused_or_unnecessary(rd) {\n+        tags.push(DiagnosticTag::Unnecessary);\n+    }\n+\n+    if is_deprecated(rd) {\n+        tags.push(DiagnosticTag::Deprecated);\n+    }\n+\n+    let diagnostic = Diagnostic {\n+        range: location.range,\n+        severity,\n+        code: code.map(NumberOrString::String),\n+        source: Some(source),\n+        message,\n+        related_information: if !related_information.is_empty() {\n+            Some(related_information)\n+        } else {\n+            None\n+        },\n+        tags: if !tags.is_empty() { Some(tags) } else { None },\n+    };\n+\n+    Some(MappedRustDiagnostic { location, diagnostic, suggested_fixes })\n+}"}, {"sha": "cb0920914b670163f61dee9eb9069c365abaf3dd", "filename": "crates/ra_cargo_watch/src/conv/snapshots/test__snap_clippy_pass_by_ref.snap", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_clippy_pass_by_ref.snap", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_clippy_pass_by_ref.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_clippy_pass_by_ref.snap?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -1,5 +1,5 @@\n ---\n-source: crates/ra_lsp_server/src/cargo_check.rs\n+source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n MappedRustDiagnostic {", "previous_filename": "crates/ra_lsp_server/src/snapshots/test__snap_clippy_pass_by_ref.snap"}, {"sha": "19510ecc1ee793cbe5fe67e39cf452264ae5e8b5", "filename": "crates/ra_cargo_watch/src/conv/snapshots/test__snap_handles_macro_location.snap", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_handles_macro_location.snap", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_handles_macro_location.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_handles_macro_location.snap?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -1,5 +1,5 @@\n ---\n-source: crates/ra_lsp_server/src/cargo_check.rs\n+source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n MappedRustDiagnostic {", "previous_filename": "crates/ra_lsp_server/src/snapshots/test__snap_handles_macro_location.snap"}, {"sha": "cf683e4b6f86d7465768159275fc104f1bc038d8", "filename": "crates/ra_cargo_watch/src/conv/snapshots/test__snap_rustc_incompatible_type_for_trait.snap", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_incompatible_type_for_trait.snap", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_incompatible_type_for_trait.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_incompatible_type_for_trait.snap?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -1,5 +1,5 @@\n ---\n-source: crates/ra_lsp_server/src/cargo_check.rs\n+source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n MappedRustDiagnostic {", "previous_filename": "crates/ra_lsp_server/src/snapshots/test__snap_rustc_incompatible_type_for_trait.snap"}, {"sha": "8c1483c74b112a805bfe9c67f47329731d4567eb", "filename": "crates/ra_cargo_watch/src/conv/snapshots/test__snap_rustc_mismatched_type.snap", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_mismatched_type.snap", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_mismatched_type.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_mismatched_type.snap?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -1,5 +1,5 @@\n ---\n-source: crates/ra_lsp_server/src/cargo_check.rs\n+source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n MappedRustDiagnostic {", "previous_filename": "crates/ra_lsp_server/src/snapshots/test__snap_rustc_mismatched_type.snap"}, {"sha": "eb5a2247be549e897a2fd35a37a18a4ee6901eff", "filename": "crates/ra_cargo_watch/src/conv/snapshots/test__snap_rustc_unused_variable.snap", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_unused_variable.snap", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_unused_variable.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_unused_variable.snap?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -1,5 +1,5 @@\n ---\n-source: crates/ra_lsp_server/src/cargo_check.rs\n+source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n MappedRustDiagnostic {", "previous_filename": "crates/ra_lsp_server/src/snapshots/test__snap_rustc_unused_variable.snap"}, {"sha": "2f4518931ec6da989f45e6bf6b47c13c55ed5e0d", "filename": "crates/ra_cargo_watch/src/conv/snapshots/test__snap_rustc_wrong_number_of_parameters.snap", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_wrong_number_of_parameters.snap", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_wrong_number_of_parameters.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_rustc_wrong_number_of_parameters.snap?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -1,5 +1,5 @@\n ---\n-source: crates/ra_lsp_server/src/cargo_check.rs\n+source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n MappedRustDiagnostic {", "previous_filename": "crates/ra_lsp_server/src/snapshots/test__snap_rustc_wrong_number_of_parameters.snap"}, {"sha": "69a07be11c237d743a8e7bf3304a7ec13c47f07a", "filename": "crates/ra_cargo_watch/src/conv/test.rs", "status": "added", "additions": 698, "deletions": 0, "changes": 698, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -0,0 +1,698 @@\n+use crate::*;\n+\n+fn parse_diagnostic(val: &str) -> cargo_metadata::diagnostic::Diagnostic {\n+    serde_json::from_str::<cargo_metadata::diagnostic::Diagnostic>(val).unwrap()\n+}\n+\n+#[test]\n+fn snap_rustc_incompatible_type_for_trait() {\n+    let diag = parse_diagnostic(\n+        r##\"{\n+            \"message\": \"method `next` has an incompatible type for trait\",\n+            \"code\": {\n+                \"code\": \"E0053\",\n+                \"explanation\": \"\\nThe parameters of any trait method must match between a trait implementation\\nand the trait definition.\\n\\nHere are a couple examples of this error:\\n\\n```compile_fail,E0053\\ntrait Foo {\\n    fn foo(x: u16);\\n    fn bar(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, expected u16, found i16\\n    fn foo(x: i16) { }\\n\\n    // error, types differ in mutability\\n    fn bar(&mut self) { }\\n}\\n```\\n\"\n+            },\n+            \"level\": \"error\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"compiler/ty/list_iter.rs\",\n+                    \"byte_start\": 1307,\n+                    \"byte_end\": 1350,\n+                    \"line_start\": 52,\n+                    \"line_end\": 52,\n+                    \"column_start\": 5,\n+                    \"column_end\": 48,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    fn next(&self) -> Option<&'list ty::Ref<M>> {\",\n+                            \"highlight_start\": 5,\n+                            \"highlight_end\": 48\n+                        }\n+                    ],\n+                    \"label\": \"types differ in mutability\",\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [\n+                {\n+                    \"message\": \"expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n   found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\",\n+                    \"code\": null,\n+                    \"level\": \"note\",\n+                    \"spans\": [],\n+                    \"children\": [],\n+                    \"rendered\": null\n+                }\n+            ],\n+            \"rendered\": \"error[E0053]: method `next` has an incompatible type for trait\\n  --> compiler/ty/list_iter.rs:52:5\\n   |\\n52 |     fn next(&self) -> Option<&'list ty::Ref<M>> {\\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\\n   |\\n   = note: expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n              found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\\n\\n\"\n+        }\n+        \"##,\n+    );\n+\n+    let workspace_root = PathBuf::from(\"/test/\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    insta::assert_debug_snapshot!(diag);\n+}\n+\n+#[test]\n+fn snap_rustc_unused_variable() {\n+    let diag = parse_diagnostic(\n+        r##\"{\n+\"message\": \"unused variable: `foo`\",\n+\"code\": {\n+    \"code\": \"unused_variables\",\n+    \"explanation\": null\n+},\n+\"level\": \"warning\",\n+\"spans\": [\n+    {\n+        \"file_name\": \"driver/subcommand/repl.rs\",\n+        \"byte_start\": 9228,\n+        \"byte_end\": 9231,\n+        \"line_start\": 291,\n+        \"line_end\": 291,\n+        \"column_start\": 9,\n+        \"column_end\": 12,\n+        \"is_primary\": true,\n+        \"text\": [\n+            {\n+                \"text\": \"    let foo = 42;\",\n+                \"highlight_start\": 9,\n+                \"highlight_end\": 12\n+            }\n+        ],\n+        \"label\": null,\n+        \"suggested_replacement\": null,\n+        \"suggestion_applicability\": null,\n+        \"expansion\": null\n+    }\n+],\n+\"children\": [\n+    {\n+        \"message\": \"#[warn(unused_variables)] on by default\",\n+        \"code\": null,\n+        \"level\": \"note\",\n+        \"spans\": [],\n+        \"children\": [],\n+        \"rendered\": null\n+    },\n+    {\n+        \"message\": \"consider prefixing with an underscore\",\n+        \"code\": null,\n+        \"level\": \"help\",\n+        \"spans\": [\n+            {\n+                \"file_name\": \"driver/subcommand/repl.rs\",\n+                \"byte_start\": 9228,\n+                \"byte_end\": 9231,\n+                \"line_start\": 291,\n+                \"line_end\": 291,\n+                \"column_start\": 9,\n+                \"column_end\": 12,\n+                \"is_primary\": true,\n+                \"text\": [\n+                    {\n+                        \"text\": \"    let foo = 42;\",\n+                        \"highlight_start\": 9,\n+                        \"highlight_end\": 12\n+                    }\n+                ],\n+                \"label\": null,\n+                \"suggested_replacement\": \"_foo\",\n+                \"suggestion_applicability\": \"MachineApplicable\",\n+                \"expansion\": null\n+            }\n+        ],\n+        \"children\": [],\n+        \"rendered\": null\n+    }\n+],\n+\"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n+}\"##,\n+    );\n+\n+    let workspace_root = PathBuf::from(\"/test/\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    insta::assert_debug_snapshot!(diag);\n+}\n+\n+#[test]\n+fn snap_rustc_wrong_number_of_parameters() {\n+    let diag = parse_diagnostic(\n+        r##\"{\n+\"message\": \"this function takes 2 parameters but 3 parameters were supplied\",\n+\"code\": {\n+    \"code\": \"E0061\",\n+    \"explanation\": \"\\nThe number of arguments passed to a function must match the number of arguments\\nspecified in the function signature.\\n\\nFor example, a function like:\\n\\n```\\nfn f(a: u16, b: &str) {}\\n```\\n\\nMust always be called with exactly two arguments, e.g., `f(2, \\\"test\\\")`.\\n\\nNote that Rust does not have a notion of optional function arguments or\\nvariadic functions (except for its C-FFI).\\n\"\n+},\n+\"level\": \"error\",\n+\"spans\": [\n+    {\n+        \"file_name\": \"compiler/ty/select.rs\",\n+        \"byte_start\": 8787,\n+        \"byte_end\": 9241,\n+        \"line_start\": 219,\n+        \"line_end\": 231,\n+        \"column_start\": 5,\n+        \"column_end\": 6,\n+        \"is_primary\": false,\n+        \"text\": [\n+            {\n+                \"text\": \"    pub fn add_evidence(\",\n+                \"highlight_start\": 5,\n+                \"highlight_end\": 25\n+            },\n+            {\n+                \"text\": \"        &mut self,\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 19\n+            },\n+            {\n+                \"text\": \"        target_poly: &ty::Ref<ty::Poly>,\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 41\n+            },\n+            {\n+                \"text\": \"        evidence_poly: &ty::Ref<ty::Poly>,\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 43\n+            },\n+            {\n+                \"text\": \"    ) {\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 8\n+            },\n+            {\n+                \"text\": \"        match target_poly {\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 28\n+            },\n+            {\n+                \"text\": \"            ty::Ref::Var(tvar, _) => self.add_var_evidence(tvar, evidence_poly),\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 81\n+            },\n+            {\n+                \"text\": \"            ty::Ref::Fixed(target_ty) => {\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 43\n+            },\n+            {\n+                \"text\": \"                let evidence_ty = evidence_poly.resolve_to_ty();\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 65\n+            },\n+            {\n+                \"text\": \"                self.add_evidence_ty(target_ty, evidence_poly, evidence_ty)\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 76\n+            },\n+            {\n+                \"text\": \"            }\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 14\n+            },\n+            {\n+                \"text\": \"        }\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 10\n+            },\n+            {\n+                \"text\": \"    }\",\n+                \"highlight_start\": 1,\n+                \"highlight_end\": 6\n+            }\n+        ],\n+        \"label\": \"defined here\",\n+        \"suggested_replacement\": null,\n+        \"suggestion_applicability\": null,\n+        \"expansion\": null\n+    },\n+    {\n+        \"file_name\": \"compiler/ty/select.rs\",\n+        \"byte_start\": 4045,\n+        \"byte_end\": 4057,\n+        \"line_start\": 104,\n+        \"line_end\": 104,\n+        \"column_start\": 18,\n+        \"column_end\": 30,\n+        \"is_primary\": true,\n+        \"text\": [\n+            {\n+                \"text\": \"            self.add_evidence(target_fixed, evidence_fixed, false);\",\n+                \"highlight_start\": 18,\n+                \"highlight_end\": 30\n+            }\n+        ],\n+        \"label\": \"expected 2 parameters\",\n+        \"suggested_replacement\": null,\n+        \"suggestion_applicability\": null,\n+        \"expansion\": null\n+    }\n+],\n+\"children\": [],\n+\"rendered\": \"error[E0061]: this function takes 2 parameters but 3 parameters were supplied\\n   --> compiler/ty/select.rs:104:18\\n    |\\n104 |               self.add_evidence(target_fixed, evidence_fixed, false);\\n    |                    ^^^^^^^^^^^^ expected 2 parameters\\n...\\n219 | /     pub fn add_evidence(\\n220 | |         &mut self,\\n221 | |         target_poly: &ty::Ref<ty::Poly>,\\n222 | |         evidence_poly: &ty::Ref<ty::Poly>,\\n...   |\\n230 | |         }\\n231 | |     }\\n    | |_____- defined here\\n\\n\"\n+}\"##,\n+    );\n+\n+    let workspace_root = PathBuf::from(\"/test/\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    insta::assert_debug_snapshot!(diag);\n+}\n+\n+#[test]\n+fn snap_clippy_pass_by_ref() {\n+    let diag = parse_diagnostic(\n+        r##\"{\n+\"message\": \"this argument is passed by reference, but would be more efficient if passed by value\",\n+\"code\": {\n+    \"code\": \"clippy::trivially_copy_pass_by_ref\",\n+    \"explanation\": null\n+},\n+\"level\": \"warning\",\n+\"spans\": [\n+    {\n+        \"file_name\": \"compiler/mir/tagset.rs\",\n+        \"byte_start\": 941,\n+        \"byte_end\": 946,\n+        \"line_start\": 42,\n+        \"line_end\": 42,\n+        \"column_start\": 24,\n+        \"column_end\": 29,\n+        \"is_primary\": true,\n+        \"text\": [\n+            {\n+                \"text\": \"    pub fn is_disjoint(&self, other: Self) -> bool {\",\n+                \"highlight_start\": 24,\n+                \"highlight_end\": 29\n+            }\n+        ],\n+        \"label\": null,\n+        \"suggested_replacement\": null,\n+        \"suggestion_applicability\": null,\n+        \"expansion\": null\n+    }\n+],\n+\"children\": [\n+    {\n+        \"message\": \"lint level defined here\",\n+        \"code\": null,\n+        \"level\": \"note\",\n+        \"spans\": [\n+            {\n+                \"file_name\": \"compiler/lib.rs\",\n+                \"byte_start\": 8,\n+                \"byte_end\": 19,\n+                \"line_start\": 1,\n+                \"line_end\": 1,\n+                \"column_start\": 9,\n+                \"column_end\": 20,\n+                \"is_primary\": true,\n+                \"text\": [\n+                    {\n+                        \"text\": \"#![warn(clippy::all)]\",\n+                        \"highlight_start\": 9,\n+                        \"highlight_end\": 20\n+                    }\n+                ],\n+                \"label\": null,\n+                \"suggested_replacement\": null,\n+                \"suggestion_applicability\": null,\n+                \"expansion\": null\n+            }\n+        ],\n+        \"children\": [],\n+        \"rendered\": null\n+    },\n+    {\n+        \"message\": \"#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\",\n+        \"code\": null,\n+        \"level\": \"note\",\n+        \"spans\": [],\n+        \"children\": [],\n+        \"rendered\": null\n+    },\n+    {\n+        \"message\": \"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\",\n+        \"code\": null,\n+        \"level\": \"help\",\n+        \"spans\": [],\n+        \"children\": [],\n+        \"rendered\": null\n+    },\n+    {\n+        \"message\": \"consider passing by value instead\",\n+        \"code\": null,\n+        \"level\": \"help\",\n+        \"spans\": [\n+            {\n+                \"file_name\": \"compiler/mir/tagset.rs\",\n+                \"byte_start\": 941,\n+                \"byte_end\": 946,\n+                \"line_start\": 42,\n+                \"line_end\": 42,\n+                \"column_start\": 24,\n+                \"column_end\": 29,\n+                \"is_primary\": true,\n+                \"text\": [\n+                    {\n+                        \"text\": \"    pub fn is_disjoint(&self, other: Self) -> bool {\",\n+                        \"highlight_start\": 24,\n+                        \"highlight_end\": 29\n+                    }\n+                ],\n+                \"label\": null,\n+                \"suggested_replacement\": \"self\",\n+                \"suggestion_applicability\": \"Unspecified\",\n+                \"expansion\": null\n+            }\n+        ],\n+        \"children\": [],\n+        \"rendered\": null\n+    }\n+],\n+\"rendered\": \"warning: this argument is passed by reference, but would be more efficient if passed by value\\n  --> compiler/mir/tagset.rs:42:24\\n   |\\n42 |     pub fn is_disjoint(&self, other: Self) -> bool {\\n   |                        ^^^^^ help: consider passing by value instead: `self`\\n   |\\nnote: lint level defined here\\n  --> compiler/lib.rs:1:9\\n   |\\n1  | #![warn(clippy::all)]\\n   |         ^^^^^^^^^^^\\n   = note: #[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\\n\\n\"\n+}\"##,\n+    );\n+\n+    let workspace_root = PathBuf::from(\"/test/\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    insta::assert_debug_snapshot!(diag);\n+}\n+\n+#[test]\n+fn snap_rustc_mismatched_type() {\n+    let diag = parse_diagnostic(\n+        r##\"{\n+\"message\": \"mismatched types\",\n+\"code\": {\n+    \"code\": \"E0308\",\n+    \"explanation\": \"\\nThis error occurs when the compiler was unable to infer the concrete type of a\\nvariable. It can occur for several cases, the most common of which is a\\nmismatch in the expected type that the compiler inferred for a variable's\\ninitializing expression, and the actual type explicitly assigned to the\\nvariable.\\n\\nFor example:\\n\\n```compile_fail,E0308\\nlet x: i32 = \\\"I am not a number!\\\";\\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\\n//      |             |\\n//      |    initializing expression;\\n//      |    compiler infers type `&str`\\n//      |\\n//    type `i32` assigned to variable `x`\\n```\\n\"\n+},\n+\"level\": \"error\",\n+\"spans\": [\n+    {\n+        \"file_name\": \"runtime/compiler_support.rs\",\n+        \"byte_start\": 1589,\n+        \"byte_end\": 1594,\n+        \"line_start\": 48,\n+        \"line_end\": 48,\n+        \"column_start\": 65,\n+        \"column_end\": 70,\n+        \"is_primary\": true,\n+        \"text\": [\n+            {\n+                \"text\": \"    let layout = alloc::Layout::from_size_align_unchecked(size, align);\",\n+                \"highlight_start\": 65,\n+                \"highlight_end\": 70\n+            }\n+        ],\n+        \"label\": \"expected usize, found u32\",\n+        \"suggested_replacement\": null,\n+        \"suggestion_applicability\": null,\n+        \"expansion\": null\n+    }\n+],\n+\"children\": [],\n+\"rendered\": \"error[E0308]: mismatched types\\n  --> runtime/compiler_support.rs:48:65\\n   |\\n48 |     let layout = alloc::Layout::from_size_align_unchecked(size, align);\\n   |                                                                 ^^^^^ expected usize, found u32\\n\\n\"\n+}\"##,\n+    );\n+\n+    let workspace_root = PathBuf::from(\"/test/\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    insta::assert_debug_snapshot!(diag);\n+}\n+\n+#[test]\n+fn snap_handles_macro_location() {\n+    let diag = parse_diagnostic(\n+        r##\"{\n+\"rendered\": \"error[E0277]: can't compare `{integer}` with `&str`\\n --> src/main.rs:2:5\\n  |\\n2 |     assert_eq!(1, \\\"love\\\");\\n  |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &str`\\n  |\\n  = help: the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\\n  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\\n\\n\",\n+\"children\": [\n+    {\n+        \"children\": [],\n+        \"code\": null,\n+        \"level\": \"help\",\n+        \"message\": \"the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n+        \"rendered\": null,\n+        \"spans\": []\n+    }\n+],\n+\"code\": {\n+    \"code\": \"E0277\",\n+    \"explanation\": \"\\nYou tried to use a type which doesn't implement some trait in a place which\\nexpected that trait. Erroneous code example:\\n\\n```compile_fail,E0277\\n// here we declare the Foo trait with a bar method\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we now declare a function which takes an object implementing the Foo trait\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar();\\n}\\n\\nfn main() {\\n    // we now call the method with the i32 type, which doesn't implement\\n    // the Foo trait\\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\\n}\\n```\\n\\nIn order to fix this error, verify that the type you're using does implement\\nthe trait. Example:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar(); // we can now use this method since i32 implements the\\n               // Foo trait\\n}\\n\\n// we implement the trait on the i32 type\\nimpl Foo for i32 {\\n    fn bar(&self) {}\\n}\\n\\nfn main() {\\n    some_func(5i32); // ok!\\n}\\n```\\n\\nOr in a generic context, an erroneous code example would look like:\\n\\n```compile_fail,E0277\\nfn some_func<T>(foo: T) {\\n    println!(\\\"{:?}\\\", foo); // error: the trait `core::fmt::Debug` is not\\n                           //        implemented for the type `T`\\n}\\n\\nfn main() {\\n    // We now call the method with the i32 type,\\n    // which *does* implement the Debug trait.\\n    some_func(5i32);\\n}\\n```\\n\\nNote that the error here is in the definition of the generic function: Although\\nwe only call it with a parameter that does implement `Debug`, the compiler\\nstill rejects the function: It must work with all possible input types. In\\norder to make this example compile, we need to restrict the generic type we're\\naccepting:\\n\\n```\\nuse std::fmt;\\n\\n// Restrict the input type to types that implement Debug.\\nfn some_func<T: fmt::Debug>(foo: T) {\\n    println!(\\\"{:?}\\\", foo);\\n}\\n\\nfn main() {\\n    // Calling the method is still fine, as i32 implements Debug.\\n    some_func(5i32);\\n\\n    // This would fail to compile now:\\n    // struct WithoutDebug;\\n    // some_func(WithoutDebug);\\n}\\n```\\n\\nRust only looks at the signature of the called function, as such it must\\nalready specify all requirements that will be used for every type parameter.\\n\"\n+},\n+\"level\": \"error\",\n+\"message\": \"can't compare `{integer}` with `&str`\",\n+\"spans\": [\n+    {\n+        \"byte_end\": 155,\n+        \"byte_start\": 153,\n+        \"column_end\": 33,\n+        \"column_start\": 31,\n+        \"expansion\": {\n+            \"def_site_span\": {\n+                \"byte_end\": 940,\n+                \"byte_start\": 0,\n+                \"column_end\": 6,\n+                \"column_start\": 1,\n+                \"expansion\": null,\n+                \"file_name\": \"<::core::macros::assert_eq macros>\",\n+                \"is_primary\": false,\n+                \"label\": null,\n+                \"line_end\": 36,\n+                \"line_start\": 1,\n+                \"suggested_replacement\": null,\n+                \"suggestion_applicability\": null,\n+                \"text\": [\n+                    {\n+                        \"highlight_end\": 35,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"($ left : expr, $ right : expr) =>\"\n+                    },\n+                    {\n+                        \"highlight_end\": 3,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"({\"\n+                    },\n+                    {\n+                        \"highlight_end\": 33,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"     match (& $ left, & $ right)\"\n+                    },\n+                    {\n+                        \"highlight_end\": 7,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"     {\"\n+                    },\n+                    {\n+                        \"highlight_end\": 34,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"         (left_val, right_val) =>\"\n+                    },\n+                    {\n+                        \"highlight_end\": 11,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"         {\"\n+                    },\n+                    {\n+                        \"highlight_end\": 46,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"             if ! (* left_val == * right_val)\"\n+                    },\n+                    {\n+                        \"highlight_end\": 15,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"             {\"\n+                    },\n+                    {\n+                        \"highlight_end\": 25,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"                 panic !\"\n+                    },\n+                    {\n+                        \"highlight_end\": 57,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n+                    },\n+                    {\n+                        \"highlight_end\": 16,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"  left: `{:?}`,\"\n+                    },\n+                    {\n+                        \"highlight_end\": 18,\n+                        \"highlight_start\": 1,\n+                        \"text\": \" right: `{:?}`\\\"#,\"\n+                    },\n+                    {\n+                        \"highlight_end\": 47,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"                  & * left_val, & * right_val)\"\n+                    },\n+                    {\n+                        \"highlight_end\": 15,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"             }\"\n+                    },\n+                    {\n+                        \"highlight_end\": 11,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"         }\"\n+                    },\n+                    {\n+                        \"highlight_end\": 7,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"     }\"\n+                    },\n+                    {\n+                        \"highlight_end\": 42,\n+                        \"highlight_start\": 1,\n+                        \"text\": \" }) ; ($ left : expr, $ right : expr,) =>\"\n+                    },\n+                    {\n+                        \"highlight_end\": 49,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"({ $ crate :: assert_eq ! ($ left, $ right) }) ;\"\n+                    },\n+                    {\n+                        \"highlight_end\": 53,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"($ left : expr, $ right : expr, $ ($ arg : tt) +) =>\"\n+                    },\n+                    {\n+                        \"highlight_end\": 3,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"({\"\n+                    },\n+                    {\n+                        \"highlight_end\": 37,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"     match (& ($ left), & ($ right))\"\n+                    },\n+                    {\n+                        \"highlight_end\": 7,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"     {\"\n+                    },\n+                    {\n+                        \"highlight_end\": 34,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"         (left_val, right_val) =>\"\n+                    },\n+                    {\n+                        \"highlight_end\": 11,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"         {\"\n+                    },\n+                    {\n+                        \"highlight_end\": 46,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"             if ! (* left_val == * right_val)\"\n+                    },\n+                    {\n+                        \"highlight_end\": 15,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"             {\"\n+                    },\n+                    {\n+                        \"highlight_end\": 25,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"                 panic !\"\n+                    },\n+                    {\n+                        \"highlight_end\": 57,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n+                    },\n+                    {\n+                        \"highlight_end\": 16,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"  left: `{:?}`,\"\n+                    },\n+                    {\n+                        \"highlight_end\": 22,\n+                        \"highlight_start\": 1,\n+                        \"text\": \" right: `{:?}`: {}\\\"#,\"\n+                    },\n+                    {\n+                        \"highlight_end\": 72,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"                  & * left_val, & * right_val, $ crate :: format_args !\"\n+                    },\n+                    {\n+                        \"highlight_end\": 33,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"                  ($ ($ arg) +))\"\n+                    },\n+                    {\n+                        \"highlight_end\": 15,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"             }\"\n+                    },\n+                    {\n+                        \"highlight_end\": 11,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"         }\"\n+                    },\n+                    {\n+                        \"highlight_end\": 7,\n+                        \"highlight_start\": 1,\n+                        \"text\": \"     }\"\n+                    },\n+                    {\n+                        \"highlight_end\": 6,\n+                        \"highlight_start\": 1,\n+                        \"text\": \" }) ;\"\n+                    }\n+                ]\n+            },\n+            \"macro_decl_name\": \"assert_eq!\",\n+            \"span\": {\n+                \"byte_end\": 38,\n+                \"byte_start\": 16,\n+                \"column_end\": 27,\n+                \"column_start\": 5,\n+                \"expansion\": null,\n+                \"file_name\": \"src/main.rs\",\n+                \"is_primary\": false,\n+                \"label\": null,\n+                \"line_end\": 2,\n+                \"line_start\": 2,\n+                \"suggested_replacement\": null,\n+                \"suggestion_applicability\": null,\n+                \"text\": [\n+                    {\n+                        \"highlight_end\": 27,\n+                        \"highlight_start\": 5,\n+                        \"text\": \"    assert_eq!(1, \\\"love\\\");\"\n+                    }\n+                ]\n+            }\n+        },\n+        \"file_name\": \"<::core::macros::assert_eq macros>\",\n+        \"is_primary\": true,\n+        \"label\": \"no implementation for `{integer} == &str`\",\n+        \"line_end\": 7,\n+        \"line_start\": 7,\n+        \"suggested_replacement\": null,\n+        \"suggestion_applicability\": null,\n+        \"text\": [\n+            {\n+                \"highlight_end\": 33,\n+                \"highlight_start\": 31,\n+                \"text\": \"             if ! (* left_val == * right_val)\"\n+            }\n+        ]\n+    }\n+]\n+}\"##,\n+    );\n+\n+    let workspace_root = PathBuf::from(\"/test/\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    insta::assert_debug_snapshot!(diag);\n+}"}, {"sha": "c86386610815795de4af39eadd67648bf38c7c2f", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -0,0 +1,345 @@\n+//! cargo_check provides the functionality needed to run `cargo check` or\n+//! another compatible command (f.x. clippy) in a background thread and provide\n+//! LSP diagnostics based on the output of the command.\n+use cargo_metadata::Message;\n+use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender, TryRecvError};\n+use lsp_types::{\n+    Diagnostic, Url, WorkDoneProgress, WorkDoneProgressBegin, WorkDoneProgressEnd,\n+    WorkDoneProgressReport,\n+};\n+use parking_lot::RwLock;\n+use std::{\n+    collections::HashMap,\n+    path::PathBuf,\n+    process::{Command, Stdio},\n+    sync::Arc,\n+    thread::JoinHandle,\n+    time::Instant,\n+};\n+\n+mod conv;\n+\n+use crate::conv::{map_rust_diagnostic_to_lsp, MappedRustDiagnostic, SuggestedFix};\n+\n+#[derive(Clone, Debug)]\n+pub struct CheckOptions {\n+    pub enable: bool,\n+    pub args: Vec<String>,\n+    pub command: String,\n+    pub all_targets: bool,\n+}\n+\n+/// CheckWatcher wraps the shared state and communication machinery used for\n+/// running `cargo check` (or other compatible command) and providing\n+/// diagnostics based on the output.\n+#[derive(Debug)]\n+pub struct CheckWatcher {\n+    pub task_recv: Receiver<CheckTask>,\n+    pub cmd_send: Sender<CheckCommand>,\n+    pub shared: Arc<RwLock<CheckWatcherSharedState>>,\n+    handle: JoinHandle<()>,\n+}\n+\n+impl CheckWatcher {\n+    pub fn new(options: &CheckOptions, workspace_root: PathBuf) -> CheckWatcher {\n+        let options = options.clone();\n+        let shared = Arc::new(RwLock::new(CheckWatcherSharedState::new()));\n+\n+        let (task_send, task_recv) = unbounded::<CheckTask>();\n+        let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n+        let shared_ = shared.clone();\n+        let handle = std::thread::spawn(move || {\n+            let mut check = CheckWatcherState::new(options, workspace_root, shared_);\n+            check.run(&task_send, &cmd_recv);\n+        });\n+\n+        CheckWatcher { task_recv, cmd_send, handle, shared }\n+    }\n+\n+    /// Schedule a re-start of the cargo check worker.\n+    pub fn update(&self) {\n+        self.cmd_send.send(CheckCommand::Update).unwrap();\n+    }\n+}\n+\n+pub struct CheckWatcherState {\n+    options: CheckOptions,\n+    workspace_root: PathBuf,\n+    running: bool,\n+    watcher: WatchThread,\n+    last_update_req: Option<Instant>,\n+    shared: Arc<RwLock<CheckWatcherSharedState>>,\n+}\n+\n+#[derive(Debug)]\n+pub struct CheckWatcherSharedState {\n+    diagnostic_collection: HashMap<Url, Vec<Diagnostic>>,\n+    suggested_fix_collection: HashMap<Url, Vec<SuggestedFix>>,\n+}\n+\n+impl CheckWatcherSharedState {\n+    fn new() -> CheckWatcherSharedState {\n+        CheckWatcherSharedState {\n+            diagnostic_collection: HashMap::new(),\n+            suggested_fix_collection: HashMap::new(),\n+        }\n+    }\n+\n+    /// Clear the cached diagnostics, and schedule updating diagnostics by the\n+    /// server, to clear stale results.\n+    pub fn clear(&mut self, task_send: &Sender<CheckTask>) {\n+        let cleared_files: Vec<Url> = self.diagnostic_collection.keys().cloned().collect();\n+\n+        self.diagnostic_collection.clear();\n+        self.suggested_fix_collection.clear();\n+\n+        for uri in cleared_files {\n+            task_send.send(CheckTask::Update(uri.clone())).unwrap();\n+        }\n+    }\n+\n+    pub fn diagnostics_for(&self, uri: &Url) -> Option<&[Diagnostic]> {\n+        self.diagnostic_collection.get(uri).map(|d| d.as_slice())\n+    }\n+\n+    pub fn fixes_for(&self, uri: &Url) -> Option<&[SuggestedFix]> {\n+        self.suggested_fix_collection.get(uri).map(|d| d.as_slice())\n+    }\n+\n+    fn add_diagnostic(&mut self, file_uri: Url, diagnostic: Diagnostic) {\n+        let diagnostics = self.diagnostic_collection.entry(file_uri).or_default();\n+\n+        // If we're building multiple targets it's possible we've already seen this diagnostic\n+        let is_duplicate = diagnostics.iter().any(|d| are_diagnostics_equal(d, &diagnostic));\n+        if is_duplicate {\n+            return;\n+        }\n+\n+        diagnostics.push(diagnostic);\n+    }\n+\n+    fn add_suggested_fix_for_diagnostic(\n+        &mut self,\n+        mut suggested_fix: SuggestedFix,\n+        diagnostic: &Diagnostic,\n+    ) {\n+        let file_uri = suggested_fix.location.uri.clone();\n+        let file_suggestions = self.suggested_fix_collection.entry(file_uri).or_default();\n+\n+        let existing_suggestion: Option<&mut SuggestedFix> =\n+            file_suggestions.iter_mut().find(|s| s == &&suggested_fix);\n+        if let Some(existing_suggestion) = existing_suggestion {\n+            // The existing suggestion also applies to this new diagnostic\n+            existing_suggestion.diagnostics.push(diagnostic.clone());\n+        } else {\n+            // We haven't seen this suggestion before\n+            suggested_fix.diagnostics.push(diagnostic.clone());\n+            file_suggestions.push(suggested_fix);\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum CheckTask {\n+    /// Request a update of the given files diagnostics\n+    Update(Url),\n+\n+    /// Request check progress notification to client\n+    Status(WorkDoneProgress),\n+}\n+\n+pub enum CheckCommand {\n+    /// Request re-start of check thread\n+    Update,\n+}\n+\n+impl CheckWatcherState {\n+    pub fn new(\n+        options: CheckOptions,\n+        workspace_root: PathBuf,\n+        shared: Arc<RwLock<CheckWatcherSharedState>>,\n+    ) -> CheckWatcherState {\n+        let watcher = WatchThread::new(&options, &workspace_root);\n+        CheckWatcherState {\n+            options,\n+            workspace_root,\n+            running: false,\n+            watcher,\n+            last_update_req: None,\n+            shared,\n+        }\n+    }\n+\n+    pub fn run(&mut self, task_send: &Sender<CheckTask>, cmd_recv: &Receiver<CheckCommand>) {\n+        self.running = true;\n+        while self.running {\n+            select! {\n+                recv(&cmd_recv) -> cmd => match cmd {\n+                    Ok(cmd) => self.handle_command(cmd),\n+                    Err(RecvError) => {\n+                        // Command channel has closed, so shut down\n+                        self.running = false;\n+                    },\n+                },\n+                recv(self.watcher.message_recv) -> msg => match msg {\n+                    Ok(msg) => self.handle_message(msg, task_send),\n+                    Err(RecvError) => {},\n+                }\n+            };\n+\n+            if self.should_recheck() {\n+                self.last_update_req.take();\n+                self.shared.write().clear(task_send);\n+\n+                self.watcher.cancel();\n+                self.watcher = WatchThread::new(&self.options, &self.workspace_root);\n+            }\n+        }\n+    }\n+\n+    fn should_recheck(&mut self) -> bool {\n+        if let Some(_last_update_req) = &self.last_update_req {\n+            // We currently only request an update on save, as we need up to\n+            // date source on disk for cargo check to do it's magic, so we\n+            // don't really need to debounce the requests at this point.\n+            return true;\n+        }\n+        false\n+    }\n+\n+    fn handle_command(&mut self, cmd: CheckCommand) {\n+        match cmd {\n+            CheckCommand::Update => self.last_update_req = Some(Instant::now()),\n+        }\n+    }\n+\n+    fn handle_message(&mut self, msg: CheckEvent, task_send: &Sender<CheckTask>) {\n+        match msg {\n+            CheckEvent::Begin => {\n+                task_send\n+                    .send(CheckTask::Status(WorkDoneProgress::Begin(WorkDoneProgressBegin {\n+                        title: \"Running 'cargo check'\".to_string(),\n+                        cancellable: Some(false),\n+                        message: None,\n+                        percentage: None,\n+                    })))\n+                    .unwrap();\n+            }\n+\n+            CheckEvent::End => {\n+                task_send\n+                    .send(CheckTask::Status(WorkDoneProgress::End(WorkDoneProgressEnd {\n+                        message: None,\n+                    })))\n+                    .unwrap();\n+            }\n+\n+            CheckEvent::Msg(Message::CompilerArtifact(msg)) => {\n+                task_send\n+                    .send(CheckTask::Status(WorkDoneProgress::Report(WorkDoneProgressReport {\n+                        cancellable: Some(false),\n+                        message: Some(msg.target.name),\n+                        percentage: None,\n+                    })))\n+                    .unwrap();\n+            }\n+\n+            CheckEvent::Msg(Message::CompilerMessage(msg)) => {\n+                let map_result =\n+                    match map_rust_diagnostic_to_lsp(&msg.message, &self.workspace_root) {\n+                        Some(map_result) => map_result,\n+                        None => return,\n+                    };\n+\n+                let MappedRustDiagnostic { location, diagnostic, suggested_fixes } = map_result;\n+                let file_uri = location.uri.clone();\n+\n+                if !suggested_fixes.is_empty() {\n+                    for suggested_fix in suggested_fixes {\n+                        self.shared\n+                            .write()\n+                            .add_suggested_fix_for_diagnostic(suggested_fix, &diagnostic);\n+                    }\n+                }\n+                self.shared.write().add_diagnostic(file_uri, diagnostic);\n+\n+                task_send.send(CheckTask::Update(location.uri)).unwrap();\n+            }\n+\n+            CheckEvent::Msg(Message::BuildScriptExecuted(_msg)) => {}\n+            CheckEvent::Msg(Message::Unknown) => {}\n+        }\n+    }\n+}\n+\n+/// WatchThread exists to wrap around the communication needed to be able to\n+/// run `cargo check` without blocking. Currently the Rust standard library\n+/// doesn't provide a way to read sub-process output without blocking, so we\n+/// have to wrap sub-processes output handling in a thread and pass messages\n+/// back over a channel.\n+struct WatchThread {\n+    message_recv: Receiver<CheckEvent>,\n+    cancel_send: Sender<()>,\n+}\n+\n+enum CheckEvent {\n+    Begin,\n+    Msg(cargo_metadata::Message),\n+    End,\n+}\n+\n+impl WatchThread {\n+    fn new(options: &CheckOptions, workspace_root: &PathBuf) -> WatchThread {\n+        let mut args: Vec<String> = vec![\n+            options.command.clone(),\n+            \"--message-format=json\".to_string(),\n+            \"--manifest-path\".to_string(),\n+            format!(\"{}/Cargo.toml\", workspace_root.to_string_lossy()),\n+        ];\n+        if options.all_targets {\n+            args.push(\"--all-targets\".to_string());\n+        }\n+        args.extend(options.args.iter().cloned());\n+\n+        let (message_send, message_recv) = unbounded();\n+        let (cancel_send, cancel_recv) = unbounded();\n+        let enabled = options.enable;\n+        std::thread::spawn(move || {\n+            if !enabled {\n+                return;\n+            }\n+\n+            let mut command = Command::new(\"cargo\")\n+                .args(&args)\n+                .stdout(Stdio::piped())\n+                .stderr(Stdio::null())\n+                .spawn()\n+                .expect(\"couldn't launch cargo\");\n+\n+            message_send.send(CheckEvent::Begin).unwrap();\n+            for message in cargo_metadata::parse_messages(command.stdout.take().unwrap()) {\n+                match cancel_recv.try_recv() {\n+                    Ok(()) | Err(TryRecvError::Disconnected) => {\n+                        command.kill().expect(\"couldn't kill command\");\n+                    }\n+                    Err(TryRecvError::Empty) => (),\n+                }\n+\n+                message_send.send(CheckEvent::Msg(message.unwrap())).unwrap();\n+            }\n+            message_send.send(CheckEvent::End).unwrap();\n+        });\n+        WatchThread { message_recv, cancel_send }\n+    }\n+\n+    fn cancel(&self) {\n+        let _ = self.cancel_send.send(());\n+    }\n+}\n+\n+fn are_diagnostics_equal(left: &Diagnostic, right: &Diagnostic) -> bool {\n+    left.source == right.source\n+        && left.severity == right.severity\n+        && left.range == right.range\n+        && left.message == right.message\n+}"}, {"sha": "9b7dcb6e9ada277730c1daef727c29aeca343588", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -27,10 +27,9 @@ ra_project_model = { path = \"../ra_project_model\" }\n ra_prof = { path = \"../ra_prof\" }\n ra_vfs_glob = { path = \"../ra_vfs_glob\" }\n env_logger = { version = \"0.7.1\", default-features = false, features = [\"humantime\"] }\n-cargo_metadata = \"0.9.1\"\n+ra_cargo_watch = { path = \"../ra_cargo_watch\" }\n \n [dev-dependencies]\n-insta = \"0.12.0\"\n tempfile = \"3\"\n test_utils = { path = \"../test_utils\" }\n "}, {"sha": "70c723b1996904db51fdf418bc72e2ff3b6aa723", "filename": "crates/ra_lsp_server/src/cargo_check.rs", "status": "removed", "additions": 0, "deletions": 1316, "changes": 1316, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs?ref=0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "patch": "@@ -1,1316 +0,0 @@\n-//! cargo_check provides the functionality needed to run `cargo check` or\n-//! another compatible command (f.x. clippy) in a background thread and provide\n-//! LSP diagnostics based on the output of the command.\n-use crate::world::Options;\n-use cargo_metadata::{\n-    diagnostic::{\n-        Applicability, Diagnostic as RustDiagnostic, DiagnosticLevel, DiagnosticSpan,\n-        DiagnosticSpanMacroExpansion,\n-    },\n-    Message,\n-};\n-use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender, TryRecvError};\n-use lsp_types::{\n-    Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag, Location,\n-    NumberOrString, Position, Range, Url, WorkDoneProgress, WorkDoneProgressBegin,\n-    WorkDoneProgressEnd, WorkDoneProgressReport,\n-};\n-use parking_lot::RwLock;\n-use std::{\n-    collections::HashMap,\n-    fmt::Write,\n-    path::PathBuf,\n-    process::{Command, Stdio},\n-    sync::Arc,\n-    thread::JoinHandle,\n-    time::Instant,\n-};\n-\n-/// CheckWatcher wraps the shared state and communication machinery used for\n-/// running `cargo check` (or other compatible command) and providing\n-/// diagnostics based on the output.\n-#[derive(Debug)]\n-pub struct CheckWatcher {\n-    pub task_recv: Receiver<CheckTask>,\n-    pub cmd_send: Sender<CheckCommand>,\n-    pub shared: Arc<RwLock<CheckWatcherSharedState>>,\n-    handle: JoinHandle<()>,\n-}\n-\n-impl CheckWatcher {\n-    pub fn new(options: &Options, workspace_root: PathBuf) -> CheckWatcher {\n-        let options = options.clone();\n-        let shared = Arc::new(RwLock::new(CheckWatcherSharedState::new()));\n-\n-        let (task_send, task_recv) = unbounded::<CheckTask>();\n-        let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n-        let shared_ = shared.clone();\n-        let handle = std::thread::spawn(move || {\n-            let mut check = CheckWatcherState::new(options, workspace_root, shared_);\n-            check.run(&task_send, &cmd_recv);\n-        });\n-\n-        CheckWatcher { task_recv, cmd_send, handle, shared }\n-    }\n-\n-    /// Schedule a re-start of the cargo check worker.\n-    pub fn update(&self) {\n-        self.cmd_send.send(CheckCommand::Update).unwrap();\n-    }\n-}\n-\n-pub struct CheckWatcherState {\n-    options: Options,\n-    workspace_root: PathBuf,\n-    running: bool,\n-    watcher: WatchThread,\n-    last_update_req: Option<Instant>,\n-    shared: Arc<RwLock<CheckWatcherSharedState>>,\n-}\n-\n-#[derive(Debug)]\n-pub struct CheckWatcherSharedState {\n-    diagnostic_collection: HashMap<Url, Vec<Diagnostic>>,\n-    suggested_fix_collection: HashMap<Url, Vec<SuggestedFix>>,\n-}\n-\n-impl CheckWatcherSharedState {\n-    fn new() -> CheckWatcherSharedState {\n-        CheckWatcherSharedState {\n-            diagnostic_collection: HashMap::new(),\n-            suggested_fix_collection: HashMap::new(),\n-        }\n-    }\n-\n-    /// Clear the cached diagnostics, and schedule updating diagnostics by the\n-    /// server, to clear stale results.\n-    pub fn clear(&mut self, task_send: &Sender<CheckTask>) {\n-        let cleared_files: Vec<Url> = self.diagnostic_collection.keys().cloned().collect();\n-\n-        self.diagnostic_collection.clear();\n-        self.suggested_fix_collection.clear();\n-\n-        for uri in cleared_files {\n-            task_send.send(CheckTask::Update(uri.clone())).unwrap();\n-        }\n-    }\n-\n-    pub fn diagnostics_for(&self, uri: &Url) -> Option<&[Diagnostic]> {\n-        self.diagnostic_collection.get(uri).map(|d| d.as_slice())\n-    }\n-\n-    pub fn fixes_for(&self, uri: &Url) -> Option<&[SuggestedFix]> {\n-        self.suggested_fix_collection.get(uri).map(|d| d.as_slice())\n-    }\n-\n-    fn add_diagnostic(&mut self, file_uri: Url, diagnostic: Diagnostic) {\n-        let diagnostics = self.diagnostic_collection.entry(file_uri).or_default();\n-\n-        // If we're building multiple targets it's possible we've already seen this diagnostic\n-        let is_duplicate = diagnostics.iter().any(|d| are_diagnostics_equal(d, &diagnostic));\n-        if is_duplicate {\n-            return;\n-        }\n-\n-        diagnostics.push(diagnostic);\n-    }\n-\n-    fn add_suggested_fix_for_diagnostic(\n-        &mut self,\n-        mut suggested_fix: SuggestedFix,\n-        diagnostic: &Diagnostic,\n-    ) {\n-        let file_uri = suggested_fix.location.uri.clone();\n-        let file_suggestions = self.suggested_fix_collection.entry(file_uri).or_default();\n-\n-        let existing_suggestion: Option<&mut SuggestedFix> =\n-            file_suggestions.iter_mut().find(|s| s == &&suggested_fix);\n-        if let Some(existing_suggestion) = existing_suggestion {\n-            // The existing suggestion also applies to this new diagnostic\n-            existing_suggestion.diagnostics.push(diagnostic.clone());\n-        } else {\n-            // We haven't seen this suggestion before\n-            suggested_fix.diagnostics.push(diagnostic.clone());\n-            file_suggestions.push(suggested_fix);\n-        }\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub enum CheckTask {\n-    /// Request a update of the given files diagnostics\n-    Update(Url),\n-\n-    /// Request check progress notification to client\n-    Status(WorkDoneProgress),\n-}\n-\n-pub enum CheckCommand {\n-    /// Request re-start of check thread\n-    Update,\n-}\n-\n-impl CheckWatcherState {\n-    pub fn new(\n-        options: Options,\n-        workspace_root: PathBuf,\n-        shared: Arc<RwLock<CheckWatcherSharedState>>,\n-    ) -> CheckWatcherState {\n-        let watcher = WatchThread::new(&options, &workspace_root);\n-        CheckWatcherState {\n-            options,\n-            workspace_root,\n-            running: false,\n-            watcher,\n-            last_update_req: None,\n-            shared,\n-        }\n-    }\n-\n-    pub fn run(&mut self, task_send: &Sender<CheckTask>, cmd_recv: &Receiver<CheckCommand>) {\n-        self.running = true;\n-        while self.running {\n-            select! {\n-                recv(&cmd_recv) -> cmd => match cmd {\n-                    Ok(cmd) => self.handle_command(cmd),\n-                    Err(RecvError) => {\n-                        // Command channel has closed, so shut down\n-                        self.running = false;\n-                    },\n-                },\n-                recv(self.watcher.message_recv) -> msg => match msg {\n-                    Ok(msg) => self.handle_message(msg, task_send),\n-                    Err(RecvError) => {},\n-                }\n-            };\n-\n-            if self.should_recheck() {\n-                self.last_update_req.take();\n-                self.shared.write().clear(task_send);\n-\n-                self.watcher.cancel();\n-                self.watcher = WatchThread::new(&self.options, &self.workspace_root);\n-            }\n-        }\n-    }\n-\n-    fn should_recheck(&mut self) -> bool {\n-        if let Some(_last_update_req) = &self.last_update_req {\n-            // We currently only request an update on save, as we need up to\n-            // date source on disk for cargo check to do it's magic, so we\n-            // don't really need to debounce the requests at this point.\n-            return true;\n-        }\n-        false\n-    }\n-\n-    fn handle_command(&mut self, cmd: CheckCommand) {\n-        match cmd {\n-            CheckCommand::Update => self.last_update_req = Some(Instant::now()),\n-        }\n-    }\n-\n-    fn handle_message(&mut self, msg: CheckEvent, task_send: &Sender<CheckTask>) {\n-        match msg {\n-            CheckEvent::Begin => {\n-                task_send\n-                    .send(CheckTask::Status(WorkDoneProgress::Begin(WorkDoneProgressBegin {\n-                        title: \"Running 'cargo check'\".to_string(),\n-                        cancellable: Some(false),\n-                        message: None,\n-                        percentage: None,\n-                    })))\n-                    .unwrap();\n-            }\n-\n-            CheckEvent::End => {\n-                task_send\n-                    .send(CheckTask::Status(WorkDoneProgress::End(WorkDoneProgressEnd {\n-                        message: None,\n-                    })))\n-                    .unwrap();\n-            }\n-\n-            CheckEvent::Msg(Message::CompilerArtifact(msg)) => {\n-                task_send\n-                    .send(CheckTask::Status(WorkDoneProgress::Report(WorkDoneProgressReport {\n-                        cancellable: Some(false),\n-                        message: Some(msg.target.name),\n-                        percentage: None,\n-                    })))\n-                    .unwrap();\n-            }\n-\n-            CheckEvent::Msg(Message::CompilerMessage(msg)) => {\n-                let map_result =\n-                    match map_rust_diagnostic_to_lsp(&msg.message, &self.workspace_root) {\n-                        Some(map_result) => map_result,\n-                        None => return,\n-                    };\n-\n-                let MappedRustDiagnostic { location, diagnostic, suggested_fixes } = map_result;\n-                let file_uri = location.uri.clone();\n-\n-                if !suggested_fixes.is_empty() {\n-                    for suggested_fix in suggested_fixes {\n-                        self.shared\n-                            .write()\n-                            .add_suggested_fix_for_diagnostic(suggested_fix, &diagnostic);\n-                    }\n-                }\n-                self.shared.write().add_diagnostic(file_uri, diagnostic);\n-\n-                task_send.send(CheckTask::Update(location.uri)).unwrap();\n-            }\n-\n-            CheckEvent::Msg(Message::BuildScriptExecuted(_msg)) => {}\n-            CheckEvent::Msg(Message::Unknown) => {}\n-        }\n-    }\n-}\n-\n-/// WatchThread exists to wrap around the communication needed to be able to\n-/// run `cargo check` without blocking. Currently the Rust standard library\n-/// doesn't provide a way to read sub-process output without blocking, so we\n-/// have to wrap sub-processes output handling in a thread and pass messages\n-/// back over a channel.\n-struct WatchThread {\n-    message_recv: Receiver<CheckEvent>,\n-    cancel_send: Sender<()>,\n-}\n-\n-enum CheckEvent {\n-    Begin,\n-    Msg(cargo_metadata::Message),\n-    End,\n-}\n-\n-impl WatchThread {\n-    fn new(options: &Options, workspace_root: &PathBuf) -> WatchThread {\n-        let mut args: Vec<String> = vec![\n-            options.cargo_watch_command.clone(),\n-            \"--message-format=json\".to_string(),\n-            \"--manifest-path\".to_string(),\n-            format!(\"{}/Cargo.toml\", workspace_root.to_string_lossy()),\n-        ];\n-        if options.cargo_watch_all_targets {\n-            args.push(\"--all-targets\".to_string());\n-        }\n-        args.extend(options.cargo_watch_args.iter().cloned());\n-\n-        let (message_send, message_recv) = unbounded();\n-        let (cancel_send, cancel_recv) = unbounded();\n-        let enabled = options.cargo_watch_enable;\n-        std::thread::spawn(move || {\n-            if !enabled {\n-                return;\n-            }\n-\n-            let mut command = Command::new(\"cargo\")\n-                .args(&args)\n-                .stdout(Stdio::piped())\n-                .stderr(Stdio::null())\n-                .spawn()\n-                .expect(\"couldn't launch cargo\");\n-\n-            message_send.send(CheckEvent::Begin).unwrap();\n-            for message in cargo_metadata::parse_messages(command.stdout.take().unwrap()) {\n-                match cancel_recv.try_recv() {\n-                    Ok(()) | Err(TryRecvError::Disconnected) => {\n-                        command.kill().expect(\"couldn't kill command\");\n-                    }\n-                    Err(TryRecvError::Empty) => (),\n-                }\n-\n-                message_send.send(CheckEvent::Msg(message.unwrap())).unwrap();\n-            }\n-            message_send.send(CheckEvent::End).unwrap();\n-        });\n-        WatchThread { message_recv, cancel_send }\n-    }\n-\n-    fn cancel(&self) {\n-        let _ = self.cancel_send.send(());\n-    }\n-}\n-\n-/// Converts a Rust level string to a LSP severity\n-fn map_level_to_severity(val: DiagnosticLevel) -> Option<DiagnosticSeverity> {\n-    match val {\n-        DiagnosticLevel::Ice => Some(DiagnosticSeverity::Error),\n-        DiagnosticLevel::Error => Some(DiagnosticSeverity::Error),\n-        DiagnosticLevel::Warning => Some(DiagnosticSeverity::Warning),\n-        DiagnosticLevel::Note => Some(DiagnosticSeverity::Information),\n-        DiagnosticLevel::Help => Some(DiagnosticSeverity::Hint),\n-        DiagnosticLevel::Unknown => None,\n-    }\n-}\n-\n-/// Check whether a file name is from macro invocation\n-fn is_from_macro(file_name: &str) -> bool {\n-    file_name.starts_with('<') && file_name.ends_with('>')\n-}\n-\n-/// Converts a Rust macro span to a LSP location recursively\n-fn map_macro_span_to_location(\n-    span_macro: &DiagnosticSpanMacroExpansion,\n-    workspace_root: &PathBuf,\n-) -> Option<Location> {\n-    if !is_from_macro(&span_macro.span.file_name) {\n-        return Some(map_span_to_location(&span_macro.span, workspace_root));\n-    }\n-\n-    if let Some(expansion) = &span_macro.span.expansion {\n-        return map_macro_span_to_location(&expansion, workspace_root);\n-    }\n-\n-    None\n-}\n-\n-/// Converts a Rust span to a LSP location\n-fn map_span_to_location(span: &DiagnosticSpan, workspace_root: &PathBuf) -> Location {\n-    if is_from_macro(&span.file_name) && span.expansion.is_some() {\n-        let expansion = span.expansion.as_ref().unwrap();\n-        if let Some(macro_range) = map_macro_span_to_location(&expansion, workspace_root) {\n-            return macro_range;\n-        }\n-    }\n-\n-    let mut file_name = workspace_root.clone();\n-    file_name.push(&span.file_name);\n-    let uri = Url::from_file_path(file_name).unwrap();\n-\n-    let range = Range::new(\n-        Position::new(span.line_start as u64 - 1, span.column_start as u64 - 1),\n-        Position::new(span.line_end as u64 - 1, span.column_end as u64 - 1),\n-    );\n-\n-    Location { uri, range }\n-}\n-\n-/// Converts a secondary Rust span to a LSP related information\n-///\n-/// If the span is unlabelled this will return `None`.\n-fn map_secondary_span_to_related(\n-    span: &DiagnosticSpan,\n-    workspace_root: &PathBuf,\n-) -> Option<DiagnosticRelatedInformation> {\n-    if let Some(label) = &span.label {\n-        let location = map_span_to_location(span, workspace_root);\n-        Some(DiagnosticRelatedInformation { location, message: label.clone() })\n-    } else {\n-        // Nothing to label this with\n-        None\n-    }\n-}\n-\n-/// Determines if diagnostic is related to unused code\n-fn is_unused_or_unnecessary(rd: &RustDiagnostic) -> bool {\n-    if let Some(code) = &rd.code {\n-        match code.code.as_str() {\n-            \"dead_code\" | \"unknown_lints\" | \"unreachable_code\" | \"unused_attributes\"\n-            | \"unused_imports\" | \"unused_macros\" | \"unused_variables\" => true,\n-            _ => false,\n-        }\n-    } else {\n-        false\n-    }\n-}\n-\n-/// Determines if diagnostic is related to deprecated code\n-fn is_deprecated(rd: &RustDiagnostic) -> bool {\n-    if let Some(code) = &rd.code {\n-        match code.code.as_str() {\n-            \"deprecated\" => true,\n-            _ => false,\n-        }\n-    } else {\n-        false\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct SuggestedFix {\n-    pub title: String,\n-    pub location: Location,\n-    pub replacement: String,\n-    pub applicability: Applicability,\n-    pub diagnostics: Vec<Diagnostic>,\n-}\n-\n-impl std::cmp::PartialEq<SuggestedFix> for SuggestedFix {\n-    fn eq(&self, other: &SuggestedFix) -> bool {\n-        if self.title == other.title\n-            && self.location == other.location\n-            && self.replacement == other.replacement\n-        {\n-            // Applicability doesn't impl PartialEq...\n-            match (&self.applicability, &other.applicability) {\n-                (Applicability::MachineApplicable, Applicability::MachineApplicable) => true,\n-                (Applicability::HasPlaceholders, Applicability::HasPlaceholders) => true,\n-                (Applicability::MaybeIncorrect, Applicability::MaybeIncorrect) => true,\n-                (Applicability::Unspecified, Applicability::Unspecified) => true,\n-                _ => false,\n-            }\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n-enum MappedRustChildDiagnostic {\n-    Related(DiagnosticRelatedInformation),\n-    SuggestedFix(SuggestedFix),\n-    MessageLine(String),\n-}\n-\n-fn map_rust_child_diagnostic(\n-    rd: &RustDiagnostic,\n-    workspace_root: &PathBuf,\n-) -> MappedRustChildDiagnostic {\n-    let span: &DiagnosticSpan = match rd.spans.iter().find(|s| s.is_primary) {\n-        Some(span) => span,\n-        None => {\n-            // `rustc` uses these spanless children as a way to print multi-line\n-            // messages\n-            return MappedRustChildDiagnostic::MessageLine(rd.message.clone());\n-        }\n-    };\n-\n-    // If we have a primary span use its location, otherwise use the parent\n-    let location = map_span_to_location(&span, workspace_root);\n-\n-    if let Some(suggested_replacement) = &span.suggested_replacement {\n-        // Include our replacement in the title unless it's empty\n-        let title = if !suggested_replacement.is_empty() {\n-            format!(\"{}: '{}'\", rd.message, suggested_replacement)\n-        } else {\n-            rd.message.clone()\n-        };\n-\n-        MappedRustChildDiagnostic::SuggestedFix(SuggestedFix {\n-            title,\n-            location,\n-            replacement: suggested_replacement.clone(),\n-            applicability: span.suggestion_applicability.clone().unwrap_or(Applicability::Unknown),\n-            diagnostics: vec![],\n-        })\n-    } else {\n-        MappedRustChildDiagnostic::Related(DiagnosticRelatedInformation {\n-            location,\n-            message: rd.message.clone(),\n-        })\n-    }\n-}\n-\n-#[derive(Debug)]\n-struct MappedRustDiagnostic {\n-    location: Location,\n-    diagnostic: Diagnostic,\n-    suggested_fixes: Vec<SuggestedFix>,\n-}\n-\n-/// Converts a Rust root diagnostic to LSP form\n-///\n-/// This flattens the Rust diagnostic by:\n-///\n-/// 1. Creating a LSP diagnostic with the root message and primary span.\n-/// 2. Adding any labelled secondary spans to `relatedInformation`\n-/// 3. Categorising child diagnostics as either `SuggestedFix`es,\n-///    `relatedInformation` or additional message lines.\n-///\n-/// If the diagnostic has no primary span this will return `None`\n-fn map_rust_diagnostic_to_lsp(\n-    rd: &RustDiagnostic,\n-    workspace_root: &PathBuf,\n-) -> Option<MappedRustDiagnostic> {\n-    let primary_span = rd.spans.iter().find(|s| s.is_primary)?;\n-\n-    let location = map_span_to_location(&primary_span, workspace_root);\n-\n-    let severity = map_level_to_severity(rd.level);\n-    let mut primary_span_label = primary_span.label.as_ref();\n-\n-    let mut source = String::from(\"rustc\");\n-    let mut code = rd.code.as_ref().map(|c| c.code.clone());\n-    if let Some(code_val) = &code {\n-        // See if this is an RFC #2103 scoped lint (e.g. from Clippy)\n-        let scoped_code: Vec<&str> = code_val.split(\"::\").collect();\n-        if scoped_code.len() == 2 {\n-            source = String::from(scoped_code[0]);\n-            code = Some(String::from(scoped_code[1]));\n-        }\n-    }\n-\n-    let mut related_information = vec![];\n-    let mut tags = vec![];\n-\n-    for secondary_span in rd.spans.iter().filter(|s| !s.is_primary) {\n-        let related = map_secondary_span_to_related(secondary_span, workspace_root);\n-        if let Some(related) = related {\n-            related_information.push(related);\n-        }\n-    }\n-\n-    let mut suggested_fixes = vec![];\n-    let mut message = rd.message.clone();\n-    for child in &rd.children {\n-        let child = map_rust_child_diagnostic(&child, workspace_root);\n-        match child {\n-            MappedRustChildDiagnostic::Related(related) => related_information.push(related),\n-            MappedRustChildDiagnostic::SuggestedFix(suggested_fix) => {\n-                suggested_fixes.push(suggested_fix)\n-            }\n-            MappedRustChildDiagnostic::MessageLine(message_line) => {\n-                write!(&mut message, \"\\n{}\", message_line).unwrap();\n-\n-                // These secondary messages usually duplicate the content of the\n-                // primary span label.\n-                primary_span_label = None;\n-            }\n-        }\n-    }\n-\n-    if let Some(primary_span_label) = primary_span_label {\n-        write!(&mut message, \"\\n{}\", primary_span_label).unwrap();\n-    }\n-\n-    if is_unused_or_unnecessary(rd) {\n-        tags.push(DiagnosticTag::Unnecessary);\n-    }\n-\n-    if is_deprecated(rd) {\n-        tags.push(DiagnosticTag::Deprecated);\n-    }\n-\n-    let diagnostic = Diagnostic {\n-        range: location.range,\n-        severity,\n-        code: code.map(NumberOrString::String),\n-        source: Some(source),\n-        message,\n-        related_information: if !related_information.is_empty() {\n-            Some(related_information)\n-        } else {\n-            None\n-        },\n-        tags: if !tags.is_empty() { Some(tags) } else { None },\n-    };\n-\n-    Some(MappedRustDiagnostic { location, diagnostic, suggested_fixes })\n-}\n-\n-fn are_diagnostics_equal(left: &Diagnostic, right: &Diagnostic) -> bool {\n-    left.source == right.source\n-        && left.severity == right.severity\n-        && left.range == right.range\n-        && left.message == right.message\n-}\n-\n-#[cfg(test)]\n-mod test {\n-    use super::*;\n-\n-    fn parse_diagnostic(val: &str) -> cargo_metadata::diagnostic::Diagnostic {\n-        serde_json::from_str::<cargo_metadata::diagnostic::Diagnostic>(val).unwrap()\n-    }\n-\n-    #[test]\n-    fn snap_rustc_incompatible_type_for_trait() {\n-        let diag = parse_diagnostic(\n-            r##\"{\n-                \"message\": \"method `next` has an incompatible type for trait\",\n-                \"code\": {\n-                    \"code\": \"E0053\",\n-                    \"explanation\": \"\\nThe parameters of any trait method must match between a trait implementation\\nand the trait definition.\\n\\nHere are a couple examples of this error:\\n\\n```compile_fail,E0053\\ntrait Foo {\\n    fn foo(x: u16);\\n    fn bar(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, expected u16, found i16\\n    fn foo(x: i16) { }\\n\\n    // error, types differ in mutability\\n    fn bar(&mut self) { }\\n}\\n```\\n\"\n-                },\n-                \"level\": \"error\",\n-                \"spans\": [\n-                    {\n-                        \"file_name\": \"compiler/ty/list_iter.rs\",\n-                        \"byte_start\": 1307,\n-                        \"byte_end\": 1350,\n-                        \"line_start\": 52,\n-                        \"line_end\": 52,\n-                        \"column_start\": 5,\n-                        \"column_end\": 48,\n-                        \"is_primary\": true,\n-                        \"text\": [\n-                            {\n-                                \"text\": \"    fn next(&self) -> Option<&'list ty::Ref<M>> {\",\n-                                \"highlight_start\": 5,\n-                                \"highlight_end\": 48\n-                            }\n-                        ],\n-                        \"label\": \"types differ in mutability\",\n-                        \"suggested_replacement\": null,\n-                        \"suggestion_applicability\": null,\n-                        \"expansion\": null\n-                    }\n-                ],\n-                \"children\": [\n-                    {\n-                        \"message\": \"expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n   found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\",\n-                        \"code\": null,\n-                        \"level\": \"note\",\n-                        \"spans\": [],\n-                        \"children\": [],\n-                        \"rendered\": null\n-                    }\n-                ],\n-                \"rendered\": \"error[E0053]: method `next` has an incompatible type for trait\\n  --> compiler/ty/list_iter.rs:52:5\\n   |\\n52 |     fn next(&self) -> Option<&'list ty::Ref<M>> {\\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\\n   |\\n   = note: expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n              found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\\n\\n\"\n-            }\n-            \"##,\n-        );\n-\n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag =\n-            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n-        insta::assert_debug_snapshot!(diag);\n-    }\n-\n-    #[test]\n-    fn snap_rustc_unused_variable() {\n-        let diag = parse_diagnostic(\n-            r##\"{\n-    \"message\": \"unused variable: `foo`\",\n-    \"code\": {\n-        \"code\": \"unused_variables\",\n-        \"explanation\": null\n-    },\n-    \"level\": \"warning\",\n-    \"spans\": [\n-        {\n-            \"file_name\": \"driver/subcommand/repl.rs\",\n-            \"byte_start\": 9228,\n-            \"byte_end\": 9231,\n-            \"line_start\": 291,\n-            \"line_end\": 291,\n-            \"column_start\": 9,\n-            \"column_end\": 12,\n-            \"is_primary\": true,\n-            \"text\": [\n-                {\n-                    \"text\": \"    let foo = 42;\",\n-                    \"highlight_start\": 9,\n-                    \"highlight_end\": 12\n-                }\n-            ],\n-            \"label\": null,\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        }\n-    ],\n-    \"children\": [\n-        {\n-            \"message\": \"#[warn(unused_variables)] on by default\",\n-            \"code\": null,\n-            \"level\": \"note\",\n-            \"spans\": [],\n-            \"children\": [],\n-            \"rendered\": null\n-        },\n-        {\n-            \"message\": \"consider prefixing with an underscore\",\n-            \"code\": null,\n-            \"level\": \"help\",\n-            \"spans\": [\n-                {\n-                    \"file_name\": \"driver/subcommand/repl.rs\",\n-                    \"byte_start\": 9228,\n-                    \"byte_end\": 9231,\n-                    \"line_start\": 291,\n-                    \"line_end\": 291,\n-                    \"column_start\": 9,\n-                    \"column_end\": 12,\n-                    \"is_primary\": true,\n-                    \"text\": [\n-                        {\n-                            \"text\": \"    let foo = 42;\",\n-                            \"highlight_start\": 9,\n-                            \"highlight_end\": 12\n-                        }\n-                    ],\n-                    \"label\": null,\n-                    \"suggested_replacement\": \"_foo\",\n-                    \"suggestion_applicability\": \"MachineApplicable\",\n-                    \"expansion\": null\n-                }\n-            ],\n-            \"children\": [],\n-            \"rendered\": null\n-        }\n-    ],\n-    \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n-}\"##,\n-        );\n-\n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag =\n-            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n-        insta::assert_debug_snapshot!(diag);\n-    }\n-\n-    #[test]\n-    fn snap_rustc_wrong_number_of_parameters() {\n-        let diag = parse_diagnostic(\n-            r##\"{\n-    \"message\": \"this function takes 2 parameters but 3 parameters were supplied\",\n-    \"code\": {\n-        \"code\": \"E0061\",\n-        \"explanation\": \"\\nThe number of arguments passed to a function must match the number of arguments\\nspecified in the function signature.\\n\\nFor example, a function like:\\n\\n```\\nfn f(a: u16, b: &str) {}\\n```\\n\\nMust always be called with exactly two arguments, e.g., `f(2, \\\"test\\\")`.\\n\\nNote that Rust does not have a notion of optional function arguments or\\nvariadic functions (except for its C-FFI).\\n\"\n-    },\n-    \"level\": \"error\",\n-    \"spans\": [\n-        {\n-            \"file_name\": \"compiler/ty/select.rs\",\n-            \"byte_start\": 8787,\n-            \"byte_end\": 9241,\n-            \"line_start\": 219,\n-            \"line_end\": 231,\n-            \"column_start\": 5,\n-            \"column_end\": 6,\n-            \"is_primary\": false,\n-            \"text\": [\n-                {\n-                    \"text\": \"    pub fn add_evidence(\",\n-                    \"highlight_start\": 5,\n-                    \"highlight_end\": 25\n-                },\n-                {\n-                    \"text\": \"        &mut self,\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 19\n-                },\n-                {\n-                    \"text\": \"        target_poly: &ty::Ref<ty::Poly>,\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 41\n-                },\n-                {\n-                    \"text\": \"        evidence_poly: &ty::Ref<ty::Poly>,\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 43\n-                },\n-                {\n-                    \"text\": \"    ) {\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 8\n-                },\n-                {\n-                    \"text\": \"        match target_poly {\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 28\n-                },\n-                {\n-                    \"text\": \"            ty::Ref::Var(tvar, _) => self.add_var_evidence(tvar, evidence_poly),\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 81\n-                },\n-                {\n-                    \"text\": \"            ty::Ref::Fixed(target_ty) => {\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 43\n-                },\n-                {\n-                    \"text\": \"                let evidence_ty = evidence_poly.resolve_to_ty();\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 65\n-                },\n-                {\n-                    \"text\": \"                self.add_evidence_ty(target_ty, evidence_poly, evidence_ty)\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 76\n-                },\n-                {\n-                    \"text\": \"            }\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 14\n-                },\n-                {\n-                    \"text\": \"        }\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 10\n-                },\n-                {\n-                    \"text\": \"    }\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 6\n-                }\n-            ],\n-            \"label\": \"defined here\",\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        },\n-        {\n-            \"file_name\": \"compiler/ty/select.rs\",\n-            \"byte_start\": 4045,\n-            \"byte_end\": 4057,\n-            \"line_start\": 104,\n-            \"line_end\": 104,\n-            \"column_start\": 18,\n-            \"column_end\": 30,\n-            \"is_primary\": true,\n-            \"text\": [\n-                {\n-                    \"text\": \"            self.add_evidence(target_fixed, evidence_fixed, false);\",\n-                    \"highlight_start\": 18,\n-                    \"highlight_end\": 30\n-                }\n-            ],\n-            \"label\": \"expected 2 parameters\",\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        }\n-    ],\n-    \"children\": [],\n-    \"rendered\": \"error[E0061]: this function takes 2 parameters but 3 parameters were supplied\\n   --> compiler/ty/select.rs:104:18\\n    |\\n104 |               self.add_evidence(target_fixed, evidence_fixed, false);\\n    |                    ^^^^^^^^^^^^ expected 2 parameters\\n...\\n219 | /     pub fn add_evidence(\\n220 | |         &mut self,\\n221 | |         target_poly: &ty::Ref<ty::Poly>,\\n222 | |         evidence_poly: &ty::Ref<ty::Poly>,\\n...   |\\n230 | |         }\\n231 | |     }\\n    | |_____- defined here\\n\\n\"\n-}\"##,\n-        );\n-\n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag =\n-            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n-        insta::assert_debug_snapshot!(diag);\n-    }\n-\n-    #[test]\n-    fn snap_clippy_pass_by_ref() {\n-        let diag = parse_diagnostic(\n-            r##\"{\n-    \"message\": \"this argument is passed by reference, but would be more efficient if passed by value\",\n-    \"code\": {\n-        \"code\": \"clippy::trivially_copy_pass_by_ref\",\n-        \"explanation\": null\n-    },\n-    \"level\": \"warning\",\n-    \"spans\": [\n-        {\n-            \"file_name\": \"compiler/mir/tagset.rs\",\n-            \"byte_start\": 941,\n-            \"byte_end\": 946,\n-            \"line_start\": 42,\n-            \"line_end\": 42,\n-            \"column_start\": 24,\n-            \"column_end\": 29,\n-            \"is_primary\": true,\n-            \"text\": [\n-                {\n-                    \"text\": \"    pub fn is_disjoint(&self, other: Self) -> bool {\",\n-                    \"highlight_start\": 24,\n-                    \"highlight_end\": 29\n-                }\n-            ],\n-            \"label\": null,\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        }\n-    ],\n-    \"children\": [\n-        {\n-            \"message\": \"lint level defined here\",\n-            \"code\": null,\n-            \"level\": \"note\",\n-            \"spans\": [\n-                {\n-                    \"file_name\": \"compiler/lib.rs\",\n-                    \"byte_start\": 8,\n-                    \"byte_end\": 19,\n-                    \"line_start\": 1,\n-                    \"line_end\": 1,\n-                    \"column_start\": 9,\n-                    \"column_end\": 20,\n-                    \"is_primary\": true,\n-                    \"text\": [\n-                        {\n-                            \"text\": \"#![warn(clippy::all)]\",\n-                            \"highlight_start\": 9,\n-                            \"highlight_end\": 20\n-                        }\n-                    ],\n-                    \"label\": null,\n-                    \"suggested_replacement\": null,\n-                    \"suggestion_applicability\": null,\n-                    \"expansion\": null\n-                }\n-            ],\n-            \"children\": [],\n-            \"rendered\": null\n-        },\n-        {\n-            \"message\": \"#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\",\n-            \"code\": null,\n-            \"level\": \"note\",\n-            \"spans\": [],\n-            \"children\": [],\n-            \"rendered\": null\n-        },\n-        {\n-            \"message\": \"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\",\n-            \"code\": null,\n-            \"level\": \"help\",\n-            \"spans\": [],\n-            \"children\": [],\n-            \"rendered\": null\n-        },\n-        {\n-            \"message\": \"consider passing by value instead\",\n-            \"code\": null,\n-            \"level\": \"help\",\n-            \"spans\": [\n-                {\n-                    \"file_name\": \"compiler/mir/tagset.rs\",\n-                    \"byte_start\": 941,\n-                    \"byte_end\": 946,\n-                    \"line_start\": 42,\n-                    \"line_end\": 42,\n-                    \"column_start\": 24,\n-                    \"column_end\": 29,\n-                    \"is_primary\": true,\n-                    \"text\": [\n-                        {\n-                            \"text\": \"    pub fn is_disjoint(&self, other: Self) -> bool {\",\n-                            \"highlight_start\": 24,\n-                            \"highlight_end\": 29\n-                        }\n-                    ],\n-                    \"label\": null,\n-                    \"suggested_replacement\": \"self\",\n-                    \"suggestion_applicability\": \"Unspecified\",\n-                    \"expansion\": null\n-                }\n-            ],\n-            \"children\": [],\n-            \"rendered\": null\n-        }\n-    ],\n-    \"rendered\": \"warning: this argument is passed by reference, but would be more efficient if passed by value\\n  --> compiler/mir/tagset.rs:42:24\\n   |\\n42 |     pub fn is_disjoint(&self, other: Self) -> bool {\\n   |                        ^^^^^ help: consider passing by value instead: `self`\\n   |\\nnote: lint level defined here\\n  --> compiler/lib.rs:1:9\\n   |\\n1  | #![warn(clippy::all)]\\n   |         ^^^^^^^^^^^\\n   = note: #[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\\n\\n\"\n-}\"##,\n-        );\n-\n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag =\n-            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n-        insta::assert_debug_snapshot!(diag);\n-    }\n-\n-    #[test]\n-    fn snap_rustc_mismatched_type() {\n-        let diag = parse_diagnostic(\n-            r##\"{\n-    \"message\": \"mismatched types\",\n-    \"code\": {\n-        \"code\": \"E0308\",\n-        \"explanation\": \"\\nThis error occurs when the compiler was unable to infer the concrete type of a\\nvariable. It can occur for several cases, the most common of which is a\\nmismatch in the expected type that the compiler inferred for a variable's\\ninitializing expression, and the actual type explicitly assigned to the\\nvariable.\\n\\nFor example:\\n\\n```compile_fail,E0308\\nlet x: i32 = \\\"I am not a number!\\\";\\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\\n//      |             |\\n//      |    initializing expression;\\n//      |    compiler infers type `&str`\\n//      |\\n//    type `i32` assigned to variable `x`\\n```\\n\"\n-    },\n-    \"level\": \"error\",\n-    \"spans\": [\n-        {\n-            \"file_name\": \"runtime/compiler_support.rs\",\n-            \"byte_start\": 1589,\n-            \"byte_end\": 1594,\n-            \"line_start\": 48,\n-            \"line_end\": 48,\n-            \"column_start\": 65,\n-            \"column_end\": 70,\n-            \"is_primary\": true,\n-            \"text\": [\n-                {\n-                    \"text\": \"    let layout = alloc::Layout::from_size_align_unchecked(size, align);\",\n-                    \"highlight_start\": 65,\n-                    \"highlight_end\": 70\n-                }\n-            ],\n-            \"label\": \"expected usize, found u32\",\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        }\n-    ],\n-    \"children\": [],\n-    \"rendered\": \"error[E0308]: mismatched types\\n  --> runtime/compiler_support.rs:48:65\\n   |\\n48 |     let layout = alloc::Layout::from_size_align_unchecked(size, align);\\n   |                                                                 ^^^^^ expected usize, found u32\\n\\n\"\n-}\"##,\n-        );\n-\n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag =\n-            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n-        insta::assert_debug_snapshot!(diag);\n-    }\n-\n-    #[test]\n-    fn snap_handles_macro_location() {\n-        let diag = parse_diagnostic(\n-            r##\"{\n-    \"rendered\": \"error[E0277]: can't compare `{integer}` with `&str`\\n --> src/main.rs:2:5\\n  |\\n2 |     assert_eq!(1, \\\"love\\\");\\n  |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &str`\\n  |\\n  = help: the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\\n  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\\n\\n\",\n-    \"children\": [\n-        {\n-            \"children\": [],\n-            \"code\": null,\n-            \"level\": \"help\",\n-            \"message\": \"the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n-            \"rendered\": null,\n-            \"spans\": []\n-        }\n-    ],\n-    \"code\": {\n-        \"code\": \"E0277\",\n-        \"explanation\": \"\\nYou tried to use a type which doesn't implement some trait in a place which\\nexpected that trait. Erroneous code example:\\n\\n```compile_fail,E0277\\n// here we declare the Foo trait with a bar method\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we now declare a function which takes an object implementing the Foo trait\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar();\\n}\\n\\nfn main() {\\n    // we now call the method with the i32 type, which doesn't implement\\n    // the Foo trait\\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\\n}\\n```\\n\\nIn order to fix this error, verify that the type you're using does implement\\nthe trait. Example:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar(); // we can now use this method since i32 implements the\\n               // Foo trait\\n}\\n\\n// we implement the trait on the i32 type\\nimpl Foo for i32 {\\n    fn bar(&self) {}\\n}\\n\\nfn main() {\\n    some_func(5i32); // ok!\\n}\\n```\\n\\nOr in a generic context, an erroneous code example would look like:\\n\\n```compile_fail,E0277\\nfn some_func<T>(foo: T) {\\n    println!(\\\"{:?}\\\", foo); // error: the trait `core::fmt::Debug` is not\\n                           //        implemented for the type `T`\\n}\\n\\nfn main() {\\n    // We now call the method with the i32 type,\\n    // which *does* implement the Debug trait.\\n    some_func(5i32);\\n}\\n```\\n\\nNote that the error here is in the definition of the generic function: Although\\nwe only call it with a parameter that does implement `Debug`, the compiler\\nstill rejects the function: It must work with all possible input types. In\\norder to make this example compile, we need to restrict the generic type we're\\naccepting:\\n\\n```\\nuse std::fmt;\\n\\n// Restrict the input type to types that implement Debug.\\nfn some_func<T: fmt::Debug>(foo: T) {\\n    println!(\\\"{:?}\\\", foo);\\n}\\n\\nfn main() {\\n    // Calling the method is still fine, as i32 implements Debug.\\n    some_func(5i32);\\n\\n    // This would fail to compile now:\\n    // struct WithoutDebug;\\n    // some_func(WithoutDebug);\\n}\\n```\\n\\nRust only looks at the signature of the called function, as such it must\\nalready specify all requirements that will be used for every type parameter.\\n\"\n-    },\n-    \"level\": \"error\",\n-    \"message\": \"can't compare `{integer}` with `&str`\",\n-    \"spans\": [\n-        {\n-            \"byte_end\": 155,\n-            \"byte_start\": 153,\n-            \"column_end\": 33,\n-            \"column_start\": 31,\n-            \"expansion\": {\n-                \"def_site_span\": {\n-                    \"byte_end\": 940,\n-                    \"byte_start\": 0,\n-                    \"column_end\": 6,\n-                    \"column_start\": 1,\n-                    \"expansion\": null,\n-                    \"file_name\": \"<::core::macros::assert_eq macros>\",\n-                    \"is_primary\": false,\n-                    \"label\": null,\n-                    \"line_end\": 36,\n-                    \"line_start\": 1,\n-                    \"suggested_replacement\": null,\n-                    \"suggestion_applicability\": null,\n-                    \"text\": [\n-                        {\n-                            \"highlight_end\": 35,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"($ left : expr, $ right : expr) =>\"\n-                        },\n-                        {\n-                            \"highlight_end\": 3,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"({\"\n-                        },\n-                        {\n-                            \"highlight_end\": 33,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     match (& $ left, & $ right)\"\n-                        },\n-                        {\n-                            \"highlight_end\": 7,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 34,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         (left_val, right_val) =>\"\n-                        },\n-                        {\n-                            \"highlight_end\": 11,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 46,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             if ! (* left_val == * right_val)\"\n-                        },\n-                        {\n-                            \"highlight_end\": 15,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 25,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                 panic !\"\n-                        },\n-                        {\n-                            \"highlight_end\": 57,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n-                        },\n-                        {\n-                            \"highlight_end\": 16,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"  left: `{:?}`,\"\n-                        },\n-                        {\n-                            \"highlight_end\": 18,\n-                            \"highlight_start\": 1,\n-                            \"text\": \" right: `{:?}`\\\"#,\"\n-                        },\n-                        {\n-                            \"highlight_end\": 47,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                  & * left_val, & * right_val)\"\n-                        },\n-                        {\n-                            \"highlight_end\": 15,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 11,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 7,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 42,\n-                            \"highlight_start\": 1,\n-                            \"text\": \" }) ; ($ left : expr, $ right : expr,) =>\"\n-                        },\n-                        {\n-                            \"highlight_end\": 49,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"({ $ crate :: assert_eq ! ($ left, $ right) }) ;\"\n-                        },\n-                        {\n-                            \"highlight_end\": 53,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"($ left : expr, $ right : expr, $ ($ arg : tt) +) =>\"\n-                        },\n-                        {\n-                            \"highlight_end\": 3,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"({\"\n-                        },\n-                        {\n-                            \"highlight_end\": 37,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     match (& ($ left), & ($ right))\"\n-                        },\n-                        {\n-                            \"highlight_end\": 7,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 34,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         (left_val, right_val) =>\"\n-                        },\n-                        {\n-                            \"highlight_end\": 11,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 46,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             if ! (* left_val == * right_val)\"\n-                        },\n-                        {\n-                            \"highlight_end\": 15,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 25,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                 panic !\"\n-                        },\n-                        {\n-                            \"highlight_end\": 57,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n-                        },\n-                        {\n-                            \"highlight_end\": 16,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"  left: `{:?}`,\"\n-                        },\n-                        {\n-                            \"highlight_end\": 22,\n-                            \"highlight_start\": 1,\n-                            \"text\": \" right: `{:?}`: {}\\\"#,\"\n-                        },\n-                        {\n-                            \"highlight_end\": 72,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                  & * left_val, & * right_val, $ crate :: format_args !\"\n-                        },\n-                        {\n-                            \"highlight_end\": 33,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                  ($ ($ arg) +))\"\n-                        },\n-                        {\n-                            \"highlight_end\": 15,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 11,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 7,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 6,\n-                            \"highlight_start\": 1,\n-                            \"text\": \" }) ;\"\n-                        }\n-                    ]\n-                },\n-                \"macro_decl_name\": \"assert_eq!\",\n-                \"span\": {\n-                    \"byte_end\": 38,\n-                    \"byte_start\": 16,\n-                    \"column_end\": 27,\n-                    \"column_start\": 5,\n-                    \"expansion\": null,\n-                    \"file_name\": \"src/main.rs\",\n-                    \"is_primary\": false,\n-                    \"label\": null,\n-                    \"line_end\": 2,\n-                    \"line_start\": 2,\n-                    \"suggested_replacement\": null,\n-                    \"suggestion_applicability\": null,\n-                    \"text\": [\n-                        {\n-                            \"highlight_end\": 27,\n-                            \"highlight_start\": 5,\n-                            \"text\": \"    assert_eq!(1, \\\"love\\\");\"\n-                        }\n-                    ]\n-                }\n-            },\n-            \"file_name\": \"<::core::macros::assert_eq macros>\",\n-            \"is_primary\": true,\n-            \"label\": \"no implementation for `{integer} == &str`\",\n-            \"line_end\": 7,\n-            \"line_start\": 7,\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"text\": [\n-                {\n-                    \"highlight_end\": 33,\n-                    \"highlight_start\": 31,\n-                    \"text\": \"             if ! (* left_val == * right_val)\"\n-                }\n-            ]\n-        }\n-    ]\n-}\"##,\n-        );\n-\n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag =\n-            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n-        insta::assert_debug_snapshot!(diag);\n-    }\n-}"}, {"sha": "2ca149fd56b82738216a6eaf665869a97740f785", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -22,7 +22,6 @@ macro_rules! print {\n }\n \n mod caps;\n-mod cargo_check;\n mod cargo_target_spec;\n mod conv;\n mod main_loop;"}, {"sha": "e66b8f9eb22950648179eab43042df9457cf96d3", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -10,6 +10,7 @@ use std::{error::Error, fmt, panic, path::PathBuf, sync::Arc, time::Instant};\n use crossbeam_channel::{select, unbounded, RecvError, Sender};\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{ClientCapabilities, NumberOrString};\n+use ra_cargo_watch::{CheckOptions, CheckTask};\n use ra_ide::{Canceled, FeatureFlags, FileId, LibraryData, SourceRootId};\n use ra_prof::profile;\n use ra_vfs::{VfsTask, Watch};\n@@ -19,7 +20,6 @@ use serde::{de::DeserializeOwned, Serialize};\n use threadpool::ThreadPool;\n \n use crate::{\n-    cargo_check::CheckTask,\n     main_loop::{\n         pending_requests::{PendingRequest, PendingRequests},\n         subscriptions::Subscriptions,\n@@ -127,10 +127,12 @@ pub fn main_loop(\n                     .and_then(|it| it.line_folding_only)\n                     .unwrap_or(false),\n                 max_inlay_hint_length: config.max_inlay_hint_length,\n-                cargo_watch_enable: config.cargo_watch_enable,\n-                cargo_watch_args: config.cargo_watch_args,\n-                cargo_watch_command: config.cargo_watch_command,\n-                cargo_watch_all_targets: config.cargo_watch_all_targets,\n+                cargo_watch: CheckOptions {\n+                    enable: config.cargo_watch_enable,\n+                    args: config.cargo_watch_args,\n+                    command: config.cargo_watch_command,\n+                    all_targets: config.cargo_watch_all_targets,\n+                },\n             }\n         };\n "}, {"sha": "4b3959e38a0f8193846523fb5c01c7032109c14a", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428a6ff5b8bad2c80a3522599195bf2a393f744e/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=428a6ff5b8bad2c80a3522599195bf2a393f744e", "patch": "@@ -12,6 +12,7 @@ use crossbeam_channel::{unbounded, Receiver};\n use lsp_server::ErrorCode;\n use lsp_types::Url;\n use parking_lot::RwLock;\n+use ra_cargo_watch::{CheckOptions, CheckWatcher, CheckWatcherSharedState};\n use ra_ide::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FeatureFlags, FileId, LibraryData,\n     SourceRootId,\n@@ -23,7 +24,6 @@ use relative_path::RelativePathBuf;\n use std::path::{Component, Prefix};\n \n use crate::{\n-    cargo_check::{CheckWatcher, CheckWatcherSharedState},\n     main_loop::pending_requests::{CompletedRequest, LatestRequests},\n     LspError, Result,\n };\n@@ -35,10 +35,7 @@ pub struct Options {\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n     pub max_inlay_hint_length: Option<usize>,\n-    pub cargo_watch_enable: bool,\n-    pub cargo_watch_args: Vec<String>,\n-    pub cargo_watch_command: String,\n-    pub cargo_watch_all_targets: bool,\n+    pub cargo_watch: CheckOptions,\n }\n \n /// `WorldState` is the primary mutable state of the language server\n@@ -135,7 +132,8 @@ impl WorldState {\n         change.set_crate_graph(crate_graph);\n \n         // FIXME: Figure out the multi-workspace situation\n-        let check_watcher = CheckWatcher::new(&options, folder_roots.first().cloned().unwrap());\n+        let check_watcher =\n+            CheckWatcher::new(&options.cargo_watch, folder_roots.first().cloned().unwrap());\n \n         let mut analysis_host = AnalysisHost::new(lru_capacity, feature_flags);\n         analysis_host.apply_change(change);"}]}