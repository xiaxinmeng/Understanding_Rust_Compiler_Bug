{"sha": "df86200965c89d31063475ae8106637f66fdf889", "node_id": "C_kwDOAAsO6NoAKGRmODYyMDA5NjVjODlkMzEwNjM0NzVhZTgxMDY2MzdmNjZmZGY4ODk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-22T19:02:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-22T19:02:17Z"}, "message": "Rollup merge of #111501 - WaffleLapkin:drivebycleanupuwu, r=oli-obk\n\nMIR drive-by cleanups\n\nSome random drive-by cleanups I did while working with MIR/THIR.", "tree": {"sha": "3d5daa57c44cb573c7d09d59c7ecdbba6914211f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5daa57c44cb573c7d09d59c7ecdbba6914211f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df86200965c89d31063475ae8106637f66fdf889", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJka7w5CRBK7hj4Ov3rIwAA8voIAAji/G+gaefJ8M7DzDhUK/Mm\nkbDLSK0vR9vXY7uMCt225OrCLs53w9+2kbdaQiIWBVPfRJPgLyiHcQtsSnO+MYkr\nNV2pAbnOSWPANBLKnZvP8t5GbrcpHKp1kjwAKLP48T5qZALxiVzVXMPDRgF6A3n3\nvZQKHPnUiadf8ovAg5TA6Dv9233FShbQwK4T1RpjRz0SUD4+XWHxS3Px8sNiWiIJ\nQj52whsz8z5MiW0vTcp/h1/z1shhYGO3MNSqGA/V4gvHAM0Pf9VPq58LlQpGzROS\nxLHXSfIBKsou8NEzN3sMotE4DU/neLJre1m0E/cUaT7ZeCq6R5y+KJKV+GML/FI=\n=IQP6\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d5daa57c44cb573c7d09d59c7ecdbba6914211f\nparent 2fe47b966a8ee689d697583be4182262e7b4fd08\nparent 140cdcbc9d50713143f8d1f2403d9044eb0a528f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684782137 +0530\ncommitter GitHub <noreply@github.com> 1684782137 +0530\n\nRollup merge of #111501 - WaffleLapkin:drivebycleanupuwu, r=oli-obk\n\nMIR drive-by cleanups\n\nSome random drive-by cleanups I did while working with MIR/THIR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df86200965c89d31063475ae8106637f66fdf889", "html_url": "https://github.com/rust-lang/rust/commit/df86200965c89d31063475ae8106637f66fdf889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df86200965c89d31063475ae8106637f66fdf889/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe47b966a8ee689d697583be4182262e7b4fd08", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe47b966a8ee689d697583be4182262e7b4fd08", "html_url": "https://github.com/rust-lang/rust/commit/2fe47b966a8ee689d697583be4182262e7b4fd08"}, {"sha": "140cdcbc9d50713143f8d1f2403d9044eb0a528f", "url": "https://api.github.com/repos/rust-lang/rust/commits/140cdcbc9d50713143f8d1f2403d9044eb0a528f", "html_url": "https://github.com/rust-lang/rust/commit/140cdcbc9d50713143f8d1f2403d9044eb0a528f"}], "stats": {"total": 303, "additions": 124, "deletions": 179}, "files": [{"sha": "21faf1958e9113541ad956e6f43a78403c88f7bb", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -749,6 +749,29 @@ pub enum TerminatorKind<'tcx> {\n     },\n }\n \n+impl TerminatorKind<'_> {\n+    /// Returns a simple string representation of a `TerminatorKind` variant, independent of any\n+    /// values it might hold (e.g. `TerminatorKind::Call` always returns `\"Call\"`).\n+    pub const fn name(&self) -> &'static str {\n+        match self {\n+            TerminatorKind::Goto { .. } => \"Goto\",\n+            TerminatorKind::SwitchInt { .. } => \"SwitchInt\",\n+            TerminatorKind::Resume => \"Resume\",\n+            TerminatorKind::Terminate => \"Terminate\",\n+            TerminatorKind::Return => \"Return\",\n+            TerminatorKind::Unreachable => \"Unreachable\",\n+            TerminatorKind::Drop { .. } => \"Drop\",\n+            TerminatorKind::Call { .. } => \"Call\",\n+            TerminatorKind::Assert { .. } => \"Assert\",\n+            TerminatorKind::Yield { .. } => \"Yield\",\n+            TerminatorKind::GeneratorDrop => \"GeneratorDrop\",\n+            TerminatorKind::FalseEdge { .. } => \"FalseEdge\",\n+            TerminatorKind::FalseUnwind { .. } => \"FalseUnwind\",\n+            TerminatorKind::InlineAsm { .. } => \"InlineAsm\",\n+        }\n+    }\n+}\n+\n /// Action to be taken when a stack unwind happens.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n #[derive(TypeFoldable, TypeVisitable)]"}, {"sha": "b01b6fbf22259f7447a5038ba654885b589f3bf0", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -644,24 +644,27 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         };\n \n-        if let Some(destination) = destination {\n-            if let Some(value) = value {\n+        match (destination, value) {\n+            (Some(destination), Some(value)) => {\n                 debug!(\"stmt_expr Break val block_context.push(SubExpr)\");\n                 self.block_context.push(BlockFrame::SubExpr);\n                 unpack!(block = self.expr_into_dest(destination, block, value));\n                 self.block_context.pop();\n-            } else {\n+            }\n+            (Some(destination), None) => {\n                 self.cfg.push_assign_unit(block, source_info, destination, self.tcx)\n             }\n-        } else {\n-            assert!(value.is_none(), \"`return` and `break` should have a destination\");\n-            if self.tcx.sess.instrument_coverage() {\n+            (None, Some(_)) => {\n+                panic!(\"`return`, `become` and `break` with value and must have a destination\")\n+            }\n+            (None, None) if self.tcx.sess.instrument_coverage() => {\n                 // Unlike `break` and `return`, which push an `Assign` statement to MIR, from which\n                 // a Coverage code region can be generated, `continue` needs no `Assign`; but\n                 // without one, the `InstrumentCoverage` MIR pass cannot generate a code region for\n                 // `continue`. Coverage will be missing unless we add a dummy `Assign` to MIR.\n                 self.add_dummy_assignment(span, block, source_info);\n             }\n+            (None, None) => {}\n         }\n \n         let region_scope = self.scopes.breakable_scopes[break_index].region_scope;\n@@ -671,12 +674,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         } else {\n             self.scopes.breakable_scopes[break_index].continue_drops.as_mut().unwrap()\n         };\n-        let mut drop_idx = ROOT_NODE;\n-        for scope in &self.scopes.scopes[scope_index + 1..] {\n-            for drop in &scope.drops {\n-                drop_idx = drops.add_drop(*drop, drop_idx);\n-            }\n-        }\n+\n+        let drop_idx = self.scopes.scopes[scope_index + 1..]\n+            .iter()\n+            .flat_map(|scope| &scope.drops)\n+            .fold(ROOT_NODE, |drop_idx, &drop| drops.add_drop(drop, drop_idx));\n+\n         drops.add_entry(block, drop_idx);\n \n         // `build_drop_trees` doesn't have access to our source_info, so we"}, {"sha": "c8648224ac1e89c135b2777f23bbf46dc5d6825b", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -130,6 +130,7 @@ impl<'tcx> Cx<'tcx> {\n                 ExprKind::Pointer { cast: PointerCast::Unsize, source: self.thir.exprs.push(expr) }\n             }\n             Adjust::Pointer(cast) => ExprKind::Pointer { cast, source: self.thir.exprs.push(expr) },\n+            Adjust::NeverToAny if adjustment.target.is_never() => return expr,\n             Adjust::NeverToAny => ExprKind::NeverToAny { source: self.thir.exprs.push(expr) },\n             Adjust::Deref(None) => {\n                 adjust_span(&mut expr);"}, {"sha": "35e4c24dc462b7caeb20fb5bcf694c679a39b84c", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -118,7 +118,7 @@ use rustc_middle::mir::spanview::{self, SpanViewable};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::coverage::*;\n-use rustc_middle::mir::{self, BasicBlock, TerminatorKind};\n+use rustc_middle::mir::{self, BasicBlock};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n@@ -796,36 +796,15 @@ fn bcb_to_string_sections<'tcx>(\n     }\n     let non_term_blocks = bcb_data.basic_blocks[0..len - 1]\n         .iter()\n-        .map(|&bb| format!(\"{:?}: {}\", bb, term_type(&mir_body[bb].terminator().kind)))\n+        .map(|&bb| format!(\"{:?}: {}\", bb, mir_body[bb].terminator().kind.name()))\n         .collect::<Vec<_>>();\n     if non_term_blocks.len() > 0 {\n         sections.push(non_term_blocks.join(\"\\n\"));\n     }\n     sections.push(format!(\n         \"{:?}: {}\",\n         bcb_data.basic_blocks.last().unwrap(),\n-        term_type(&bcb_data.terminator(mir_body).kind)\n+        bcb_data.terminator(mir_body).kind.name(),\n     ));\n     sections\n }\n-\n-/// Returns a simple string representation of a `TerminatorKind` variant, independent of any\n-/// values it might hold.\n-pub(super) fn term_type(kind: &TerminatorKind<'_>) -> &'static str {\n-    match kind {\n-        TerminatorKind::Goto { .. } => \"Goto\",\n-        TerminatorKind::SwitchInt { .. } => \"SwitchInt\",\n-        TerminatorKind::Resume => \"Resume\",\n-        TerminatorKind::Terminate => \"Terminate\",\n-        TerminatorKind::Return => \"Return\",\n-        TerminatorKind::Unreachable => \"Unreachable\",\n-        TerminatorKind::Drop { .. } => \"Drop\",\n-        TerminatorKind::Call { .. } => \"Call\",\n-        TerminatorKind::Assert { .. } => \"Assert\",\n-        TerminatorKind::Yield { .. } => \"Yield\",\n-        TerminatorKind::GeneratorDrop => \"GeneratorDrop\",\n-        TerminatorKind::FalseEdge { .. } => \"FalseEdge\",\n-        TerminatorKind::FalseUnwind { .. } => \"FalseUnwind\",\n-        TerminatorKind::InlineAsm { .. } => \"InlineAsm\",\n-    }\n-}"}, {"sha": "14937912cc599dc368933a256c41e8de6ad25f35", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -1,4 +1,3 @@\n-use super::debug::term_type;\n use super::graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph, START_BCB};\n \n use itertools::Itertools;\n@@ -40,7 +39,7 @@ impl CoverageStatement {\n                     \"{}: @{}.{}: {:?}\",\n                     source_range_no_file(tcx, span),\n                     bb.index(),\n-                    term_type(&term.kind),\n+                    term.kind.name(),\n                     term.kind\n                 )\n             }"}, {"sha": "90b58933df7c0a3d1f8837756320498302c6cfbf", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -25,7 +25,6 @@\n //! to: `rustc_span::create_default_session_globals_then(|| { test_here(); })`.\n \n use super::counters;\n-use super::debug;\n use super::graph;\n use super::spans;\n \n@@ -188,12 +187,12 @@ fn debug_basic_blocks(mir_body: &Body<'_>) -> String {\n                     | TerminatorKind::Goto { target }\n                     | TerminatorKind::InlineAsm { destination: Some(target), .. }\n                     | TerminatorKind::Yield { resume: target, .. } => {\n-                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, debug::term_type(kind), target)\n+                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, kind.name(), target)\n                     }\n                     TerminatorKind::SwitchInt { targets, .. } => {\n-                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, debug::term_type(kind), targets)\n+                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, kind.name(), targets)\n                     }\n-                    _ => format!(\"{}{:?}:{}\", sp, bb, debug::term_type(kind)),\n+                    _ => format!(\"{}{:?}:{}\", sp, bb, kind.name()),\n                 }\n             })\n             .collect::<Vec<_>>()\n@@ -215,7 +214,7 @@ fn print_mir_graphviz(name: &str, mir_body: &Body<'_>) {\n                         \"    {:?} [label=\\\"{:?}: {}\\\"];\\n{}\",\n                         bb,\n                         bb,\n-                        debug::term_type(&data.terminator().kind),\n+                        data.terminator().kind.name(),\n                         mir_body\n                             .basic_blocks\n                             .successors(bb)\n@@ -244,7 +243,7 @@ fn print_coverage_graphviz(\n                         \"    {:?} [label=\\\"{:?}: {}\\\"];\\n{}\",\n                         bcb,\n                         bcb,\n-                        debug::term_type(&bcb_data.terminator(mir_body).kind),\n+                        bcb_data.terminator(mir_body).kind.name(),\n                         basic_coverage_blocks\n                             .successors(bcb)\n                             .map(|successor| { format!(\"    {:?} -> {:?};\", bcb, successor) })"}, {"sha": "fd082e367a83a07acf6706b30ead7d3d20345715", "filename": "src/tools/miri/tests/fail/never_say_never.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.rs?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -6,10 +6,8 @@\n \n fn main() {\n     let y = &5;\n-    let x: ! = unsafe {\n-        *(y as *const _ as *const !) //~ ERROR: entering unreachable code\n-    };\n-    f(x)\n+    let x: ! = unsafe { *(y as *const _ as *const !) };\n+    f(x) //~ ERROR: entering unreachable code\n }\n \n fn f(x: !) -> ! {"}, {"sha": "9d3a8df525a49178bc6bfd6a1bcc52524b4e187f", "filename": "src/tools/miri/tests/fail/never_say_never.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.stderr?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: entering unreachable code\n   --> $DIR/never_say_never.rs:LL:CC\n    |\n-LL |         *(y as *const _ as *const !)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n+LL |     f(x)\n+   |     ^^^^ entering unreachable code\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "5258d75bdf78635ce0dab443f7a3bbf8b502b900", "filename": "tests/mir-opt/const_prop/transmute.unreachable_box.ConstProp.32bit.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,24 +3,20 @@\n   \n   fn unreachable_box() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _2 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+-         _1 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _1 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: Box<Never>, val: Value(Scalar(0x00000001)) }\n-          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "7e57e06a5cf8b136531e06f4cca4c75cd93cf500", "filename": "tests/mir-opt/const_prop/transmute.unreachable_box.ConstProp.64bit.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,24 +3,20 @@\n   \n   fn unreachable_box() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _2 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+-         _1 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _1 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: Box<Never>, val: Value(Scalar(0x0000000000000001)) }\n-          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "032681f230ba64d3912d1b327282bb74fb330cc7", "filename": "tests/mir-opt/const_prop/transmute.unreachable_direct.ConstProp.32bit.diff", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,22 +3,19 @@\n   \n   fn unreachable_direct() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:39: +0:40\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:41: +3:2\n-      let _2: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n-      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:15\n+      let _1: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _2: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:41: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _3 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _2 = move _3 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _2 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _1 = move _2 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n           unreachable;                     // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n       }\n   }"}, {"sha": "032681f230ba64d3912d1b327282bb74fb330cc7", "filename": "tests/mir-opt/const_prop/transmute.unreachable_direct.ConstProp.64bit.diff", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,22 +3,19 @@\n   \n   fn unreachable_direct() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:39: +0:40\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:41: +3:2\n-      let _2: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n-      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:15\n+      let _1: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _2: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:41: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _3 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _2 = move _3 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _2 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _1 = move _2 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n           unreachable;                     // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n       }\n   }"}, {"sha": "ec8a62bd62cd6efb073d9a7be3e5459928439baa", "filename": "tests/mir-opt/const_prop/transmute.unreachable_mut.ConstProp.32bit.diff", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,28 +3,24 @@\n   \n   fn unreachable_mut() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _2: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n--         _3 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _3 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+-         _2 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _2 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: &mut Never, val: Value(Scalar(0x00000001)) }\n-          _2 = &mut (*_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-          StorageDead(_3);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n-          StorageLive(_4);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n+          _1 = &mut (*_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageDead(_2);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "288da6e56c53c43750f17e3297e98f7cd1195b23", "filename": "tests/mir-opt/const_prop/transmute.unreachable_mut.ConstProp.64bit.diff", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,28 +3,24 @@\n   \n   fn unreachable_mut() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _2: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n--         _3 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _3 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+-         _2 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _2 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: &mut Never, val: Value(Scalar(0x0000000000000001)) }\n-          _2 = &mut (*_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-          StorageDead(_3);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n-          StorageLive(_4);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n+          _1 = &mut (*_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageDead(_2);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "dcca0fca619b0a89f7d8366f4a98bebe99c01682", "filename": "tests/mir-opt/const_prop/transmute.unreachable_ref.ConstProp.32bit.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,24 +3,20 @@\n   \n   fn unreachable_ref() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _2 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n-+         _2 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+-         _1 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n++         _1 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: &Never, val: Value(Scalar(0x00000001)) }\n-          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "3a0b967e66f1ad7097c8a2018f567d211fe2bcdd", "filename": "tests/mir-opt/const_prop/transmute.unreachable_ref.ConstProp.64bit.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,24 +3,20 @@\n   \n   fn unreachable_ref() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _2 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n-+         _2 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+-         _1 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n++         _1 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: &Never, val: Value(Scalar(0x0000000000000001)) }\n-          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "25f472251137d95fe71e4556d76da7e69df8cf2d", "filename": "tests/mir-opt/issue_72181_1.f.built.after.mir", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fissue_72181_1.f.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Fissue_72181_1.f.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_72181_1.f.built.after.mir?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,27 +3,13 @@\n fn f(_1: Void) -> ! {\n     debug v => _1;                       // in scope 0 at $DIR/issue_72181_1.rs:+0:6: +0:7\n     let mut _0: !;                       // return place in scope 0 at $DIR/issue_72181_1.rs:+0:18: +0:19\n-    let mut _2: !;                       // in scope 0 at $DIR/issue_72181_1.rs:+0:20: +2:2\n-    let mut _3: !;                       // in scope 0 at $DIR/issue_72181_1.rs:+1:5: +1:15\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue_72181_1.rs:+0:20: +2:2\n-        StorageLive(_3);                 // scope 0 at $DIR/issue_72181_1.rs:+1:5: +1:15\n         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/issue_72181_1.rs:+1:11: +1:12\n         unreachable;                     // scope 0 at $DIR/issue_72181_1.rs:+1:11: +1:12\n     }\n \n     bb1: {\n-        unreachable;                     // scope 0 at $DIR/issue_72181_1.rs:+1:5: +1:15\n-    }\n-\n-    bb2: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue_72181_1.rs:+1:14: +1:15\n-        unreachable;                     // scope 0 at $DIR/issue_72181_1.rs:+0:20: +2:2\n-    }\n-\n-    bb3: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue_72181_1.rs:+2:1: +2:2\n         return;                          // scope 0 at $DIR/issue_72181_1.rs:+2:2: +2:2\n     }\n }"}, {"sha": "aa5d9619d10a9bdac318fc443b2f08b160f47b92", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,26 +3,22 @@\n   \n   fn transmute_to_box_uninhabited() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:49: +0:50\n-      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-      let _2: std::boxed::Box<Never>;      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+      let _1: std::boxed::Box<Never>;      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, Box<Never>>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+-         _1 = transmute::<usize, Box<Never>>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:70:25: 70:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> Box<Never> {transmute::<usize, Box<Never>>}, val: Value(<ZST>) }\n-+         _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n++         _1 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n       }\n   \n       bb1: {\n-          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "5fafd45fe85263a1d570d28116dc6bcd3527cc6b", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,26 +3,22 @@\n   \n   fn transmute_to_mut_uninhabited() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:49: +0:50\n-      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-      let _2: &mut Never;                  // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+      let _1: &mut Never;                  // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, &mut Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+-         _1 = transmute::<usize, &mut Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:64:25: 64:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &mut Never {transmute::<usize, &mut Never>}, val: Value(<ZST>) }\n-+         _2 = const 1_usize as &mut Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n++         _1 = const 1_usize as &mut Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n       }\n   \n       bb1: {\n-          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "08dead13211947021accdb6691f6cfb05f6bee27", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,26 +3,22 @@\n   \n   fn transmute_to_ref_uninhabited() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:49: +0:50\n-      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-      let _2: &Never;                      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+      let _1: &Never;                      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, &Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+-         _1 = transmute::<usize, &Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:58:21: 58:40\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &Never {transmute::<usize, &Never>}, val: Value(<ZST>) }\n-+         _2 = const 1_usize as &Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n++         _1 = const 1_usize as &Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n       }\n   \n       bb1: {\n-          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "28e45909c3372213590a5a0c33ba031de48fb9b3", "filename": "tests/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df86200965c89d31063475ae8106637f66fdf889/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=df86200965c89d31063475ae8106637f66fdf889", "patch": "@@ -3,16 +3,15 @@\n   \n   fn unreachable() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:25: +0:26\n-      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:27: +2:2\n-      let _2: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n-      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n+      let _1: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n+      let mut _2: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:47\n-          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n--         _3 = std::intrinsics::unreachable() -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:47\n+          StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n+-         _2 = std::intrinsics::unreachable() -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:31:14: 31:43\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(<ZST>) }"}]}