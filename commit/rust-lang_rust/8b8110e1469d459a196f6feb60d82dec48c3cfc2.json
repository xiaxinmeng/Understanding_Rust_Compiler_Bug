{"sha": "8b8110e1469d459a196f6feb60d82dec48c3cfc2", "node_id": "C_kwDOAAsO6NoAKDhiODExMGUxNDY5ZDQ1OWExOTZmNmZlYjYwZDgyZGVjNDhjM2NmYzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-27T04:29:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-27T04:29:49Z"}, "message": "Auto merge of #110728 - cjgillot:no-false-optes, r=oli-obk\n\nDo not bother optimizing impossible functions.\n\nThis is currently checked by `ConstProp`, but I see no reason to restrict it to ConstProp only.", "tree": {"sha": "5c33ce49bc864101a1756cfb8f015edf4e628f42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c33ce49bc864101a1756cfb8f015edf4e628f42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b8110e1469d459a196f6feb60d82dec48c3cfc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8110e1469d459a196f6feb60d82dec48c3cfc2", "html_url": "https://github.com/rust-lang/rust/commit/8b8110e1469d459a196f6feb60d82dec48c3cfc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b8110e1469d459a196f6feb60d82dec48c3cfc2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3ccd4b9a51ded19bf1c3f6c647c96b6dd52eced", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ccd4b9a51ded19bf1c3f6c647c96b6dd52eced", "html_url": "https://github.com/rust-lang/rust/commit/e3ccd4b9a51ded19bf1c3f6c647c96b6dd52eced"}, {"sha": "0ee32fb3c77a890a4f2b7990ce70527af801df9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee32fb3c77a890a4f2b7990ce70527af801df9e", "html_url": "https://github.com/rust-lang/rust/commit/0ee32fb3c77a890a4f2b7990ce70527af801df9e"}], "stats": {"total": 84, "additions": 46, "deletions": 38}, "files": [{"sha": "1ce7f09d8ceb4611c14ddf9445ac64eb8e30817b", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8b8110e1469d459a196f6feb60d82dec48c3cfc2/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8110e1469d459a196f6feb60d82dec48c3cfc2/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=8b8110e1469d459a196f6feb60d82dec48c3cfc2", "patch": "@@ -18,7 +18,6 @@ use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeVisi\n use rustc_span::{def_id::DefId, Span, DUMMY_SP};\n use rustc_target::abi::{self, Align, HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi as CallAbi;\n-use rustc_trait_selection::traits;\n \n use crate::MirPass;\n use rustc_const_eval::interpret::{\n@@ -84,42 +83,6 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             return;\n         }\n \n-        // Check if it's even possible to satisfy the 'where' clauses\n-        // for this item.\n-        // This branch will never be taken for any normal function.\n-        // However, it's possible to `#!feature(trivial_bounds)]` to write\n-        // a function with impossible to satisfy clauses, e.g.:\n-        // `fn foo() where String: Copy {}`\n-        //\n-        // We don't usually need to worry about this kind of case,\n-        // since we would get a compilation error if the user tried\n-        // to call it. However, since we can do const propagation\n-        // even without any calls to the function, we need to make\n-        // sure that it even makes sense to try to evaluate the body.\n-        // If there are unsatisfiable where clauses, then all bets are\n-        // off, and we just give up.\n-        //\n-        // We manually filter the predicates, skipping anything that's not\n-        // \"global\". We are in a potentially generic context\n-        // (e.g. we are evaluating a function without substituting generic\n-        // parameters, so this filtering serves two purposes:\n-        //\n-        // 1. We skip evaluating any predicates that we would\n-        // never be able prove are unsatisfiable (e.g. `<T as Foo>`\n-        // 2. We avoid trying to normalize predicates involving generic\n-        // parameters (e.g. `<T as Foo>::MyItem`). This can confuse\n-        // the normalization code (leading to cycle errors), since\n-        // it's usually never invoked in this way.\n-        let predicates = tcx\n-            .predicates_of(def_id.to_def_id())\n-            .predicates\n-            .iter()\n-            .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n-        if traits::impossible_predicates(tcx, traits::elaborate(tcx, predicates).collect()) {\n-            trace!(\"ConstProp skipped for {:?}: found unsatisfiable predicates\", def_id);\n-            return;\n-        }\n-\n         trace!(\"ConstProp starting for {:?}\", def_id);\n \n         let dummy_body = &Body::new("}, {"sha": "25d7db0ee605a2ad43edd63906462a60c9988dff", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8b8110e1469d459a196f6feb60d82dec48c3cfc2/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8110e1469d459a196f6feb60d82dec48c3cfc2/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=8b8110e1469d459a196f6feb60d82dec48c3cfc2", "patch": "@@ -30,11 +30,12 @@ use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{\n     traversal, AnalysisPhase, Body, ClearCrossCrate, ConstQualifs, Constant, LocalDecl, MirPass,\n     MirPhase, Operand, Place, ProjectionElem, Promoted, RuntimePhase, Rvalue, SourceInfo,\n-    Statement, StatementKind, TerminatorKind,\n+    Statement, StatementKind, TerminatorKind, START_BLOCK,\n };\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::sym;\n+use rustc_trait_selection::traits;\n \n #[macro_use]\n mod pass_manager;\n@@ -389,6 +390,50 @@ fn mir_drops_elaborated_and_const_checked(tcx: TyCtxt<'_>, def: LocalDefId) -> &\n         body.tainted_by_errors = Some(error_reported);\n     }\n \n+    // Check if it's even possible to satisfy the 'where' clauses\n+    // for this item.\n+    //\n+    // This branch will never be taken for any normal function.\n+    // However, it's possible to `#!feature(trivial_bounds)]` to write\n+    // a function with impossible to satisfy clauses, e.g.:\n+    // `fn foo() where String: Copy {}`\n+    //\n+    // We don't usually need to worry about this kind of case,\n+    // since we would get a compilation error if the user tried\n+    // to call it. However, since we optimize even without any\n+    // calls to the function, we need to make sure that it even\n+    // makes sense to try to evaluate the body.\n+    //\n+    // If there are unsatisfiable where clauses, then all bets are\n+    // off, and we just give up.\n+    //\n+    // We manually filter the predicates, skipping anything that's not\n+    // \"global\". We are in a potentially generic context\n+    // (e.g. we are evaluating a function without substituting generic\n+    // parameters, so this filtering serves two purposes:\n+    //\n+    // 1. We skip evaluating any predicates that we would\n+    // never be able prove are unsatisfiable (e.g. `<T as Foo>`\n+    // 2. We avoid trying to normalize predicates involving generic\n+    // parameters (e.g. `<T as Foo>::MyItem`). This can confuse\n+    // the normalization code (leading to cycle errors), since\n+    // it's usually never invoked in this way.\n+    let predicates = tcx\n+        .predicates_of(body.source.def_id())\n+        .predicates\n+        .iter()\n+        .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n+    if traits::impossible_predicates(tcx, traits::elaborate(tcx, predicates).collect()) {\n+        trace!(\"found unsatisfiable predicates for {:?}\", body.source);\n+        // Clear the body to only contain a single `unreachable` statement.\n+        let bbs = body.basic_blocks.as_mut();\n+        bbs.raw.truncate(1);\n+        bbs[START_BLOCK].statements.clear();\n+        bbs[START_BLOCK].terminator_mut().kind = TerminatorKind::Unreachable;\n+        body.var_debug_info.clear();\n+        body.local_decls.raw.truncate(body.arg_count + 1);\n+    }\n+\n     run_analysis_to_runtime_passes(tcx, &mut body);\n \n     tcx.alloc_steal_mir(body)"}]}