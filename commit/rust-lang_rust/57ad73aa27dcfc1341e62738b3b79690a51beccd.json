{"sha": "57ad73aa27dcfc1341e62738b3b79690a51beccd", "node_id": "C_kwDOAAsO6NoAKDU3YWQ3M2FhMjdkY2ZjMTM0MWU2MjczOGIzYjc5NjkwYTUxYmVjY2Q", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-12T19:32:07Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-12T19:32:07Z"}, "message": "rename query and use `NoSolution`", "tree": {"sha": "00180c3218add053a74477f459aec025ac562366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00180c3218add053a74477f459aec025ac562366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57ad73aa27dcfc1341e62738b3b79690a51beccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57ad73aa27dcfc1341e62738b3b79690a51beccd", "html_url": "https://github.com/rust-lang/rust/commit/57ad73aa27dcfc1341e62738b3b79690a51beccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57ad73aa27dcfc1341e62738b3b79690a51beccd/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85b0101e6a1d7d2a7a51d0e5472c1a1215b3031", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85b0101e6a1d7d2a7a51d0e5472c1a1215b3031", "html_url": "https://github.com/rust-lang/rust/commit/a85b0101e6a1d7d2a7a51d0e5472c1a1215b3031"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "49567c341d4d8b49991eb49f8265e78533c2c2cc", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57ad73aa27dcfc1341e62738b3b79690a51beccd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ad73aa27dcfc1341e62738b3b79690a51beccd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=57ad73aa27dcfc1341e62738b3b79690a51beccd", "patch": "@@ -34,6 +34,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::infer::canonical::OriginalQueryValues;\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n@@ -172,7 +173,8 @@ impl<'tcx> InferCtxt<'tcx> {\n                 (relation.param_env(), a.ty(), b.ty()),\n                 &mut OriginalQueryValues::default(),\n             );\n-            if let Err(()) = self.tcx.check_const_param_definitely_unequal(canonical) {\n+\n+            if let Err(NoSolution) = self.tcx.check_tys_might_be_eq(canonical) {\n                 self.tcx.sess.delay_span_bug(\n                     DUMMY_SP,\n                     &format!(\"cannot relate consts of different types (a={:?}, b={:?})\", a, b,),"}, {"sha": "b0660c3d62b87d008d62a05047ace7b6a321a47b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57ad73aa27dcfc1341e62738b3b79690a51beccd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ad73aa27dcfc1341e62738b3b79690a51beccd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=57ad73aa27dcfc1341e62738b3b79690a51beccd", "patch": "@@ -2172,7 +2172,7 @@ rustc_queries! {\n     /// Used in `super_combine_consts` to ICE if the type of the two consts are definitely not going to end up being\n     /// equal to eachother. This might return `Ok` even if the types are unequal, but will never return `Err` if\n     /// the types might be equal.\n-    query check_const_param_definitely_unequal(arg: Canonical<'tcx, (ty::ParamEnv<'tcx>, Ty<'tcx>, Ty<'tcx>)>) -> Result<(), ()> {\n+    query check_tys_might_be_eq(arg: Canonical<'tcx, (ty::ParamEnv<'tcx>, Ty<'tcx>, Ty<'tcx>)>) -> Result<(), NoSolution> {\n         desc { \"check whether two const param are definitely not equal to eachother\"}\n     }\n }"}, {"sha": "de730773794b6164cf78b6d72b6211eeefae6c5a", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57ad73aa27dcfc1341e62738b3b79690a51beccd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ad73aa27dcfc1341e62738b3b79690a51beccd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=57ad73aa27dcfc1341e62738b3b79690a51beccd", "patch": "@@ -6,6 +6,7 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::infer::{RegionResolutionError, TyCtxtInferExt};\n+use rustc_infer::traits::query::NoSolution;\n use rustc_infer::{infer::outlives::env::OutlivesEnvironment, traits::FulfillmentError};\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeVisitable};\n use rustc_span::DUMMY_SP;\n@@ -134,10 +135,10 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n     Ok(())\n }\n \n-pub fn check_const_param_definitely_unequal<'tcx>(\n+pub fn check_tys_might_be_eq<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     canonical: Canonical<'tcx, (ParamEnv<'tcx>, Ty<'tcx>, Ty<'tcx>)>,\n-) -> Result<(), ()> {\n+) -> Result<(), NoSolution> {\n     let (infcx, (param_env, ty_a, ty_b), _) =\n         tcx.infer_ctxt().build_with_canonical(DUMMY_SP, &canonical);\n     let ocx = ObligationCtxt::new(&infcx);\n@@ -147,5 +148,5 @@ pub fn check_const_param_definitely_unequal<'tcx>(\n     // we don't get errors from obligations being ambiguous.\n     let errors = ocx.select_where_possible();\n \n-    if errors.len() > 0 || result.is_err() { Err(()) } else { Ok(()) }\n+    if errors.len() > 0 || result.is_err() { Err(NoSolution) } else { Ok(()) }\n }"}, {"sha": "227119ac7ac9f5a3c883fb474122c27c964d895d", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57ad73aa27dcfc1341e62738b3b79690a51beccd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ad73aa27dcfc1341e62738b3b79690a51beccd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=57ad73aa27dcfc1341e62738b3b79690a51beccd", "patch": "@@ -554,7 +554,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n         subst_and_check_impossible_predicates,\n-        check_const_param_definitely_unequal: misc::check_const_param_definitely_unequal,\n+        check_tys_might_be_eq: misc::check_tys_might_be_eq,\n         is_impossible_method,\n         ..*providers\n     };"}]}