{"sha": "852543212ba5c68b3428a80187087cc641de612c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MjU0MzIxMmJhNWM2OGIzNDI4YTgwMTg3MDg3Y2M2NDFkZTYxMmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-04T11:35:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-04T11:57:57Z"}, "message": "Extract parser input into a separate struct", "tree": {"sha": "0495db2ec299fd7d617f84febffa5ea954f2d513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0495db2ec299fd7d617f84febffa5ea954f2d513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/852543212ba5c68b3428a80187087cc641de612c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/852543212ba5c68b3428a80187087cc641de612c", "html_url": "https://github.com/rust-lang/rust/commit/852543212ba5c68b3428a80187087cc641de612c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/852543212ba5c68b3428a80187087cc641de612c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa36ad008eae28d1251a4bf276b1d13398fcf89f", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa36ad008eae28d1251a4bf276b1d13398fcf89f", "html_url": "https://github.com/rust-lang/rust/commit/aa36ad008eae28d1251a4bf276b1d13398fcf89f"}], "stats": {"total": 117, "additions": 89, "deletions": 28}, "files": [{"sha": "162b9ef5fb664840dbce95df6dfac498a80f0923", "filename": "src/parser/input.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/852543212ba5c68b3428a80187087cc641de612c/src%2Fparser%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852543212ba5c68b3428a80187087cc641de612c/src%2Fparser%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Finput.rs?ref=852543212ba5c68b3428a80187087cc641de612c", "patch": "@@ -0,0 +1,77 @@\n+use {SyntaxKind, TextRange, TextUnit, Token};\n+use syntax_kinds::EOF;\n+use super::is_insignificant;\n+\n+use std::ops::{Add, AddAssign};\n+\n+pub(crate) struct ParserInput<'t> {\n+    #[allow(unused)]\n+    text: &'t str,\n+    #[allow(unused)]\n+    start_offsets: Vec<TextUnit>,\n+    tokens: Vec<Token>, // non-whitespace tokens\n+}\n+\n+impl<'t> ParserInput<'t> {\n+    pub fn new(text: &'t str, raw_tokens: &'t [Token]) -> ParserInput<'t> {\n+        let mut tokens = Vec::new();\n+        let mut start_offsets = Vec::new();\n+        let mut len = TextUnit::new(0);\n+        for &token in raw_tokens.iter() {\n+            if !is_insignificant(token.kind) {\n+                tokens.push(token);\n+                start_offsets.push(len);\n+            }\n+            len += token.len;\n+        }\n+\n+        ParserInput {\n+            text,\n+            start_offsets,\n+            tokens,\n+        }\n+    }\n+\n+    pub fn kind(&self, pos: InputPosition) -> SyntaxKind {\n+        let idx = pos.0 as usize;\n+        if !(idx < self.tokens.len()) {\n+            return EOF;\n+        }\n+        self.tokens[idx].kind\n+    }\n+\n+    #[allow(unused)]\n+    pub fn text(&self, pos: InputPosition) -> &'t str {\n+        let idx = pos.0 as usize;\n+        if !(idx < self.tokens.len()) {\n+            return \"\";\n+        }\n+        let start_offset = self.start_offsets[idx];\n+        let end_offset = self.tokens[idx].len;\n+        let range = TextRange::from_to(start_offset, end_offset);\n+        &self.text[range]\n+    }\n+}\n+\n+#[derive(Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]\n+pub(crate) struct InputPosition(u32);\n+\n+impl InputPosition {\n+    pub fn new() -> Self {\n+        InputPosition(0)\n+    }\n+}\n+\n+impl Add<u32> for InputPosition {\n+    type Output = InputPosition;\n+\n+    fn add(self, rhs: u32) -> InputPosition {\n+        InputPosition(self.0 + rhs)\n+    }\n+}\n+\n+impl AddAssign<u32> for InputPosition {\n+    fn add_assign(&mut self, rhs: u32) {\n+        self.0 += rhs\n+    }\n+}"}, {"sha": "49a69900f7d08223ee87316a45f393e88ec660fe", "filename": "src/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/852543212ba5c68b3428a80187087cc641de612c/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852543212ba5c68b3428a80187087cc641de612c/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=852543212ba5c68b3428a80187087cc641de612c", "patch": "@@ -4,14 +4,16 @@ use syntax_kinds::*;\n \n #[macro_use]\n mod parser;\n+mod input;\n mod event;\n mod grammar;\n use self::event::Event;\n \n /// Parse a sequence of tokens into the representative node tree\n pub fn parse(text: String, tokens: &[Token]) -> File {\n     let events = {\n-        let mut parser = parser::Parser::new(&text, tokens);\n+        let input = input::ParserInput::new(&text, tokens);\n+        let mut parser = parser::Parser::new(&input);\n         grammar::file(&mut parser);\n         parser.into_events()\n     };"}, {"sha": "bb775c4a5bc445e6e30adaab0b9a5403571eba26", "filename": "src/parser/parser.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/852543212ba5c68b3428a80187087cc641de612c/src%2Fparser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852543212ba5c68b3428a80187087cc641de612c/src%2Fparser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fparser.rs?ref=852543212ba5c68b3428a80187087cc641de612c", "patch": "@@ -1,7 +1,6 @@\n-use {SyntaxKind, TextUnit, Token};\n use super::Event;\n-use super::is_insignificant;\n-use SyntaxKind::{EOF, TOMBSTONE};\n+use super::input::{InputPosition, ParserInput};\n+use SyntaxKind::{self, EOF, TOMBSTONE};\n \n pub(crate) struct Marker {\n     pos: u32,\n@@ -98,35 +97,18 @@ macro_rules! token_set {\n }\n \n pub(crate) struct Parser<'t> {\n-    #[allow(unused)]\n-    text: &'t str,\n-    #[allow(unused)]\n-    start_offsets: Vec<TextUnit>,\n-    tokens: Vec<Token>, // non-whitespace tokens\n+    inp: &'t ParserInput<'t>,\n \n-    pos: usize,\n+    pos: InputPosition,\n     events: Vec<Event>,\n }\n \n impl<'t> Parser<'t> {\n-    pub(crate) fn new(text: &'t str, raw_tokens: &'t [Token]) -> Parser<'t> {\n-        let mut tokens = Vec::new();\n-        let mut start_offsets = Vec::new();\n-        let mut len = TextUnit::new(0);\n-        for &token in raw_tokens.iter() {\n-            if !is_insignificant(token.kind) {\n-                tokens.push(token);\n-                start_offsets.push(len);\n-            }\n-            len += token.len;\n-        }\n-\n+    pub(crate) fn new(inp: &'t ParserInput<'t>) -> Parser<'t> {\n         Parser {\n-            text,\n-            start_offsets,\n-            tokens,\n+            inp,\n \n-            pos: 0,\n+            pos: InputPosition::new(),\n             events: Vec::new(),\n         }\n     }\n@@ -163,8 +145,8 @@ impl<'t> Parser<'t> {\n         });\n     }\n \n-    pub(crate) fn nth(&self, n: usize) -> SyntaxKind {\n-        self.tokens.get(self.pos + n).map(|t| t.kind).unwrap_or(EOF)\n+    pub(crate) fn nth(&self, n: u32) -> SyntaxKind {\n+        self.inp.kind(self.pos + n)\n     }\n \n     pub(crate) fn current(&self) -> SyntaxKind {"}]}