{"sha": "3925b4d5c94c10f6e3cff05afcb5866d62a7235c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MjViNGQ1Yzk0YzEwZjZlM2NmZjA1YWZjYjU4NjZkNjJhNzIzNWM=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-12-13T22:42:38Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-12-16T02:26:05Z"}, "message": "Add regression test for #19791", "tree": {"sha": "79fa8fc09329934c361495144976f1c14a278e57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79fa8fc09329934c361495144976f1c14a278e57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3925b4d5c94c10f6e3cff05afcb5866d62a7235c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3925b4d5c94c10f6e3cff05afcb5866d62a7235c", "html_url": "https://github.com/rust-lang/rust/commit/3925b4d5c94c10f6e3cff05afcb5866d62a7235c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3925b4d5c94c10f6e3cff05afcb5866d62a7235c/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13e7f9c0a7ced7c20ea909e46bc6c520a9a2b260", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e7f9c0a7ced7c20ea909e46bc6c520a9a2b260", "html_url": "https://github.com/rust-lang/rust/commit/13e7f9c0a7ced7c20ea909e46bc6c520a9a2b260"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "efda7771403a393066a13bc24b6d609198d6dad2", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3925b4d5c94c10f6e3cff05afcb5866d62a7235c/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3925b4d5c94c10f6e3cff05afcb5866d62a7235c/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=3925b4d5c94c10f6e3cff05afcb5866d62a7235c", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that type IDs correctly account for higher-rank lifetimes\n+// Also acts as a regression test for an ICE (issue #19791)\n+\n+#![feature(unboxed_closures)]\n+\n+use std::intrinsics::TypeId;\n+\n+fn main() {\n+    // Bare fns\n+    {\n+        let a = TypeId::of::<fn(&'static int, &'static int)>();\n+        let b = TypeId::of::<for<'a> fn(&'static int, &'a int)>();\n+        let c = TypeId::of::<for<'a, 'b> fn(&'a int, &'b int)>();\n+        let d = TypeId::of::<for<'a, 'b> fn(&'b int, &'a int)>();\n+        assert!(a != b);\n+        assert!(a != c);\n+        assert!(a != d);\n+        assert!(b != c);\n+        assert!(b != d);\n+        assert_eq!(c, d);\n+\n+        // Make sure De Bruijn indices are handled correctly\n+        let e = TypeId::of::<for<'a> fn(fn(&'a int) -> &'a int)>();\n+        let f = TypeId::of::<fn(for<'a> fn(&'a int) -> &'a int)>();\n+        assert!(e != f);\n+    }\n+    // Stack closures\n+    {\n+        let a = TypeId::of::<|&'static int, &'static int|>();\n+        let b = TypeId::of::<for<'a> |&'static int, &'a int|>();\n+        let c = TypeId::of::<for<'a, 'b> |&'a int, &'b int|>();\n+        let d = TypeId::of::<for<'a, 'b> |&'b int, &'a int|>();\n+        assert!(a != b);\n+        assert!(a != c);\n+        assert!(a != d);\n+        assert!(b != c);\n+        assert!(b != d);\n+        assert_eq!(c, d);\n+\n+        // Make sure De Bruijn indices are handled correctly\n+        let e = TypeId::of::<for<'a> |(|&'a int| -> &'a int)|>();\n+        let f = TypeId::of::<|for<'a> |&'a int| -> &'a int|>();\n+        assert!(e != f);\n+    }\n+    // Boxed unboxed closures\n+    {\n+        let a = TypeId::of::<Box<Fn(&'static int, &'static int)>>();\n+        let b = TypeId::of::<Box<for<'a> Fn(&'static int, &'a int)>>();\n+        let c = TypeId::of::<Box<for<'a, 'b> Fn(&'a int, &'b int)>>();\n+        let d = TypeId::of::<Box<for<'a, 'b> Fn(&'b int, &'a int)>>();\n+        assert!(a != b);\n+        assert!(a != c);\n+        assert!(a != d);\n+        assert!(b != c);\n+        assert!(b != d);\n+        assert_eq!(c, d);\n+\n+        // Make sure De Bruijn indices are handled correctly\n+        let e = TypeId::of::<Box<for<'a> Fn(Box<Fn(&'a int) -> &'a int>)>>();\n+        let f = TypeId::of::<Box<Fn(Box<for<'a> Fn(&'a int) -> &'a int>)>>();\n+        assert!(e != f);\n+    }\n+    // Raw unboxed closures\n+    // Note that every unboxed closure has its own anonymous type,\n+    // so no two IDs should equal each other, even when compatible\n+    {\n+        let a = id(|&: _: &int, _: &int| {});\n+        let b = id(|&: _: &int, _: &int| {});\n+        assert!(a != b);\n+    }\n+\n+    fn id<T:'static>(_: T) -> TypeId {\n+        TypeId::of::<T>()\n+    }\n+}"}]}