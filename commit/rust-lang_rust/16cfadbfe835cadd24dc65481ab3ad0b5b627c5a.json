{"sha": "16cfadbfe835cadd24dc65481ab3ad0b5b627c5a", "node_id": "C_kwDOAAsO6NoAKDE2Y2ZhZGJmZTgzNWNhZGQyNGRjNjU0ODFhYjNhZDBiNWI2MjdjNWE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-09T20:59:26Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-13T23:06:29Z"}, "message": "Suggest lifetime bound in illegal Copy impl", "tree": {"sha": "5cc4dd2a65bc23a95e5049239a9cc756494efa95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cc4dd2a65bc23a95e5049239a9cc756494efa95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16cfadbfe835cadd24dc65481ab3ad0b5b627c5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16cfadbfe835cadd24dc65481ab3ad0b5b627c5a", "html_url": "https://github.com/rust-lang/rust/commit/16cfadbfe835cadd24dc65481ab3ad0b5b627c5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16cfadbfe835cadd24dc65481ab3ad0b5b627c5a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "333c6bf523019fd1565a5236d3c727172ec844f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/333c6bf523019fd1565a5236d3c727172ec844f2", "html_url": "https://github.com/rust-lang/rust/commit/333c6bf523019fd1565a5236d3c727172ec844f2"}], "stats": {"total": 160, "additions": 103, "deletions": 57}, "files": [{"sha": "e642572e3dab20097d5c0b408af87ec86e75ef90", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 63, "deletions": 43, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/16cfadbfe835cadd24dc65481ab3ad0b5b627c5a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cfadbfe835cadd24dc65481ab3ad0b5b627c5a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=16cfadbfe835cadd24dc65481ab3ad0b5b627c5a", "patch": "@@ -7,14 +7,14 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::ItemKind;\n-use rustc_infer::infer;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::infer::{self, RegionResolutionError};\n use rustc_middle::ty::adjustment::CoerceUnsizedInfo;\n use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeVisitable};\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::misc::{\n-    type_allowed_to_implement_copy, CopyImplementationError,\n+    type_allowed_to_implement_copy, CopyImplementationError, InfringingFieldsReason,\n };\n use rustc_trait_selection::traits::predicate_for_trait_def;\n use rustc_trait_selection::traits::{self, ObligationCause};\n@@ -99,50 +99,70 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n             let mut errors: BTreeMap<_, Vec<_>> = Default::default();\n             let mut bounds = vec![];\n \n-            for (field, ty) in fields {\n+            for (field, ty, reason) in fields {\n                 let field_span = tcx.def_span(field.did);\n-                let field_ty_span = match tcx.hir().get_if_local(field.did) {\n-                    Some(hir::Node::Field(field_def)) => field_def.ty.span,\n-                    _ => field_span,\n-                };\n                 err.span_label(field_span, \"this field does not implement `Copy`\");\n-                // Spin up a new FulfillmentContext, so we can get the _precise_ reason\n-                // why this field does not implement Copy. This is useful because sometimes\n-                // it is not immediately clear why Copy is not implemented for a field, since\n-                // all we point at is the field itself.\n-                let infcx = tcx.infer_ctxt().ignoring_regions().build();\n-                for error in traits::fully_solve_bound(\n-                    &infcx,\n-                    traits::ObligationCause::dummy_with_span(field_ty_span),\n-                    param_env,\n-                    ty,\n-                    tcx.require_lang_item(LangItem::Copy, Some(span)),\n-                ) {\n-                    let error_predicate = error.obligation.predicate;\n-                    // Only note if it's not the root obligation, otherwise it's trivial and\n-                    // should be self-explanatory (i.e. a field literally doesn't implement Copy).\n-\n-                    // FIXME: This error could be more descriptive, especially if the error_predicate\n-                    // contains a foreign type or if it's a deeply nested type...\n-                    if error_predicate != error.root_obligation.predicate {\n-                        errors\n-                            .entry((ty.to_string(), error_predicate.to_string()))\n-                            .or_default()\n-                            .push(error.obligation.cause.span);\n+\n+                match reason {\n+                    InfringingFieldsReason::Fulfill(fulfillment_errors) => {\n+                        for error in fulfillment_errors {\n+                            let error_predicate = error.obligation.predicate;\n+                            // Only note if it's not the root obligation, otherwise it's trivial and\n+                            // should be self-explanatory (i.e. a field literally doesn't implement Copy).\n+\n+                            // FIXME: This error could be more descriptive, especially if the error_predicate\n+                            // contains a foreign type or if it's a deeply nested type...\n+                            if error_predicate != error.root_obligation.predicate {\n+                                errors\n+                                    .entry((ty.to_string(), error_predicate.to_string()))\n+                                    .or_default()\n+                                    .push(error.obligation.cause.span);\n+                            }\n+                            if let ty::PredicateKind::Clause(ty::Clause::Trait(\n+                                ty::TraitPredicate {\n+                                    trait_ref,\n+                                    polarity: ty::ImplPolarity::Positive,\n+                                    ..\n+                                },\n+                            )) = error_predicate.kind().skip_binder()\n+                            {\n+                                let ty = trait_ref.self_ty();\n+                                if let ty::Param(_) = ty.kind() {\n+                                    bounds.push((\n+                                        format!(\"{ty}\"),\n+                                        trait_ref.print_only_trait_path().to_string(),\n+                                        Some(trait_ref.def_id),\n+                                    ));\n+                                }\n+                            }\n+                        }\n                     }\n-                    if let ty::PredicateKind::Clause(ty::Clause::Trait(ty::TraitPredicate {\n-                        trait_ref,\n-                        polarity: ty::ImplPolarity::Positive,\n-                        ..\n-                    })) = error_predicate.kind().skip_binder()\n-                    {\n-                        let ty = trait_ref.self_ty();\n-                        if let ty::Param(_) = ty.kind() {\n-                            bounds.push((\n-                                format!(\"{ty}\"),\n-                                trait_ref.print_only_trait_path().to_string(),\n-                                Some(trait_ref.def_id),\n-                            ));\n+                    InfringingFieldsReason::Regions(region_errors) => {\n+                        for error in region_errors {\n+                            let ty = ty.to_string();\n+                            match error {\n+                                RegionResolutionError::ConcreteFailure(origin, a, b) => {\n+                                    let predicate = format!(\"{b}: {a}\");\n+                                    errors\n+                                        .entry((ty.clone(), predicate.clone()))\n+                                        .or_default()\n+                                        .push(origin.span());\n+                                    if let ty::RegionKind::ReEarlyBound(ebr) = *b && ebr.has_name() {\n+                                        bounds.push((b.to_string(), a.to_string(), None));\n+                                    }\n+                                }\n+                                RegionResolutionError::GenericBoundFailure(origin, a, b) => {\n+                                    let predicate = format!(\"{a}: {b}\");\n+                                    errors\n+                                        .entry((ty.clone(), predicate.clone()))\n+                                        .or_default()\n+                                        .push(origin.span());\n+                                    if let infer::region_constraints::GenericKind::Param(_) = a {\n+                                        bounds.push((a.to_string(), b.to_string(), None));\n+                                    }\n+                                }\n+                                _ => continue,\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "0de44dba0ddd037583f98c3312c133907fadf28c", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/16cfadbfe835cadd24dc65481ab3ad0b5b627c5a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cfadbfe835cadd24dc65481ab3ad0b5b627c5a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=16cfadbfe835cadd24dc65481ab3ad0b5b627c5a", "patch": "@@ -4,21 +4,25 @@ use crate::traits::{self, ObligationCause};\n \n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n-use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::infer::{RegionResolutionError, TyCtxtInferExt};\n+use rustc_infer::{infer::outlives::env::OutlivesEnvironment, traits::FulfillmentError};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n \n use crate::traits::error_reporting::TypeErrCtxtExt;\n \n use super::outlives_bounds::InferCtxtExt;\n \n-#[derive(Clone)]\n pub enum CopyImplementationError<'tcx> {\n-    InfrigingFields(Vec<(&'tcx ty::FieldDef, Ty<'tcx>)>),\n+    InfrigingFields(Vec<(&'tcx ty::FieldDef, Ty<'tcx>, InfringingFieldsReason<'tcx>)>),\n     NotAnAdt,\n     HasDestructor,\n }\n \n+pub enum InfringingFieldsReason<'tcx> {\n+    Fulfill(Vec<FulfillmentError<'tcx>>),\n+    Regions(Vec<RegionResolutionError<'tcx>>),\n+}\n+\n /// Checks that the fields of the type (an ADT) all implement copy.\n ///\n /// If fields don't implement copy, return an error containing a list of\n@@ -60,22 +64,27 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n             if ty.references_error() {\n                 continue;\n             }\n-            let span = tcx.def_span(field.did);\n+\n+            let field_span = tcx.def_span(field.did);\n+            let field_ty_span = match tcx.hir().get_if_local(field.did) {\n+                Some(hir::Node::Field(field_def)) => field_def.ty.span,\n+                _ => field_span,\n+            };\n+\n             // FIXME(compiler-errors): This gives us better spans for bad\n             // projection types like in issue-50480.\n             // If the ADT has substs, point to the cause we are given.\n             // If it does not, then this field probably doesn't normalize\n             // to begin with, and point to the bad field's span instead.\n-            let cause = if field\n+            let normalization_cause = if field\n                 .ty(tcx, traits::InternalSubsts::identity_for_item(tcx, adt.did()))\n                 .has_non_region_param()\n             {\n                 parent_cause.clone()\n             } else {\n-                ObligationCause::dummy_with_span(span)\n+                ObligationCause::dummy_with_span(field_ty_span)\n             };\n-\n-            let ty = ocx.normalize(&cause, param_env, ty);\n+            let ty = ocx.normalize(&normalization_cause, param_env, ty);\n             let normalization_errors = ocx.select_where_possible();\n             if !normalization_errors.is_empty() {\n                 // Don't report this as a field that doesn't implement Copy,\n@@ -84,9 +93,15 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n                 continue;\n             }\n \n-            ocx.register_bound(cause, param_env, ty, copy_def_id);\n-            if !ocx.select_all_or_error().is_empty() {\n-                infringing.push((field, ty));\n+            ocx.register_bound(\n+                ObligationCause::dummy_with_span(field_ty_span),\n+                param_env,\n+                ty,\n+                copy_def_id,\n+            );\n+            let errors = ocx.select_all_or_error();\n+            if !errors.is_empty() {\n+                infringing.push((field, ty, InfringingFieldsReason::Fulfill(errors)));\n             }\n \n             // Check regions assuming the self type of the impl is WF\n@@ -103,8 +118,9 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n                 outlives_env.region_bound_pairs(),\n                 param_env,\n             );\n-            if !infcx.resolve_regions(&outlives_env).is_empty() {\n-                infringing.push((field, ty));\n+            let errors = infcx.resolve_regions(&outlives_env);\n+            if !errors.is_empty() {\n+                infringing.push((field, ty, InfringingFieldsReason::Regions(errors)));\n             }\n         }\n     }"}, {"sha": "edd94d2010b966ce358d77bb0f03911d90fdcaa6", "filename": "src/test/ui/traits/copy-is-not-modulo-regions.not_static.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16cfadbfe835cadd24dc65481ab3ad0b5b627c5a/src%2Ftest%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.not_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16cfadbfe835cadd24dc65481ab3ad0b5b627c5a/src%2Ftest%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.not_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.not_static.stderr?ref=16cfadbfe835cadd24dc65481ab3ad0b5b627c5a", "patch": "@@ -6,6 +6,16 @@ LL | struct Bar<'lt>(Foo<'lt>);\n ...\n LL | impl<'any> Copy for Bar<'any> {}\n    |                     ^^^^^^^^^\n+   |\n+note: the `Copy` impl for `Foo<'any>` requires that `'any: 'static`\n+  --> $DIR/copy-is-not-modulo-regions.rs:10:17\n+   |\n+LL | struct Bar<'lt>(Foo<'lt>);\n+   |                 ^^^^^^^^\n+help: consider restricting type parameter `'any`\n+   |\n+LL | impl<'any: 'static> Copy for Bar<'any> {}\n+   |          +++++++++\n \n error: aborting due to previous error\n "}]}