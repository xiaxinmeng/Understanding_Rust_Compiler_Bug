{"sha": "b2eed3a559e1e59900261f4a5abf11053590e9df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZWVkM2E1NTllMWU1OTkwMDI2MWY0YTVhYmYxMTA1MzU5MGU5ZGY=", "commit": {"author": {"name": "1000teslas", "email": "47207223+1000teslas@users.noreply.github.com", "date": "2021-02-01T16:13:19Z"}, "committer": {"name": "1000teslas", "email": "47207223+1000teslas@users.noreply.github.com", "date": "2021-02-08T02:24:37Z"}, "message": "Point out implicit deref coercions in borrow\n\nClean up code", "tree": {"sha": "c7aefe32d7c0679217ac4870895cb16dcbbc619c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7aefe32d7c0679217ac4870895cb16dcbbc619c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2eed3a559e1e59900261f4a5abf11053590e9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2eed3a559e1e59900261f4a5abf11053590e9df", "html_url": "https://github.com/rust-lang/rust/commit/b2eed3a559e1e59900261f4a5abf11053590e9df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2eed3a559e1e59900261f4a5abf11053590e9df/comments", "author": {"login": "1000teslas", "id": 47207223, "node_id": "MDQ6VXNlcjQ3MjA3MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47207223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1000teslas", "html_url": "https://github.com/1000teslas", "followers_url": "https://api.github.com/users/1000teslas/followers", "following_url": "https://api.github.com/users/1000teslas/following{/other_user}", "gists_url": "https://api.github.com/users/1000teslas/gists{/gist_id}", "starred_url": "https://api.github.com/users/1000teslas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1000teslas/subscriptions", "organizations_url": "https://api.github.com/users/1000teslas/orgs", "repos_url": "https://api.github.com/users/1000teslas/repos", "events_url": "https://api.github.com/users/1000teslas/events{/privacy}", "received_events_url": "https://api.github.com/users/1000teslas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1000teslas", "id": 47207223, "node_id": "MDQ6VXNlcjQ3MjA3MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47207223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1000teslas", "html_url": "https://github.com/1000teslas", "followers_url": "https://api.github.com/users/1000teslas/followers", "following_url": "https://api.github.com/users/1000teslas/following{/other_user}", "gists_url": "https://api.github.com/users/1000teslas/gists{/gist_id}", "starred_url": "https://api.github.com/users/1000teslas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1000teslas/subscriptions", "organizations_url": "https://api.github.com/users/1000teslas/orgs", "repos_url": "https://api.github.com/users/1000teslas/repos", "events_url": "https://api.github.com/users/1000teslas/events{/privacy}", "received_events_url": "https://api.github.com/users/1000teslas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e63af5da3400ace48a0345117980473fd21ad73", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e63af5da3400ace48a0345117980473fd21ad73", "html_url": "https://github.com/rust-lang/rust/commit/0e63af5da3400ace48a0345117980473fd21ad73"}], "stats": {"total": 379, "additions": 375, "deletions": 4}, "files": [{"sha": "4bf4df226e172a95545931fd5e1711ca83f6a2f2", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -8,11 +8,10 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::{\n     self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, ConstraintCategory,\n     FakeReadCause, Local, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n-    ProjectionElem, Rvalue, Statement, StatementKind, TerminatorKind, VarBindingForm,\n+    ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n-use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n-use rustc_span::source_map::DesugaringKind;\n-use rustc_span::Span;\n+use rustc_middle::ty::{self, suggest_constraining_type_param, Instance, Ty};\n+use rustc_span::{source_map::DesugaringKind, symbol::sym, Span};\n \n use crate::dataflow::drop_flag_effects;\n use crate::dataflow::indexes::{MoveOutIndex, MovePathIndex};\n@@ -1543,6 +1542,36 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             None,\n         );\n \n+        let tcx = self.infcx.tcx;\n+        // point out implicit deref coercion\n+        if let (\n+            Some(Terminator { kind: TerminatorKind::Call { from_hir_call: false, .. }, .. }),\n+            Some((method_did, method_substs)),\n+        ) = (\n+            &self.body[loan.reserve_location.block].terminator,\n+            crate::util::find_self_call(\n+                tcx,\n+                self.body,\n+                loan.assigned_place.local,\n+                loan.reserve_location.block,\n+            ),\n+        ) {\n+            if tcx.is_diagnostic_item(sym::deref_method, method_did) {\n+                let deref_target =\n+                    tcx.get_diagnostic_item(sym::deref_target).and_then(|deref_target| {\n+                        Instance::resolve(tcx, self.param_env, deref_target, method_substs)\n+                            .transpose()\n+                    });\n+                if let Some(Ok(instance)) = deref_target {\n+                    let deref_target_ty = instance.ty(tcx, self.param_env);\n+                    err.note(&format!(\n+                        \"borrow occurs due to deref coercion to `{}`\",\n+                        deref_target_ty\n+                    ));\n+                }\n+            }\n+        }\n+\n         err.buffer(&mut self.errors_buffer);\n     }\n "}, {"sha": "fbbdd93b97cc86b839c372ec1d84a82d608397d5", "filename": "src/test/ui/borrowck/issue-81365-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.rs?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,30 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+struct Outer {\n+    container: Container,\n+}\n+\n+impl Outer {\n+    fn bad_borrow(&mut self) {\n+        let first = &self.container.target_field;\n+        self.container.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "851cc4b1af29fcc22c4648ee05433289c2162003", "filename": "src/test/ui/borrowck/issue-81365-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-2.stderr?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `self.container.container_field` because it is borrowed\n+  --> $DIR/issue-81365-2.rs:25:9\n+   |\n+LL |         let first = &self.container.target_field;\n+   |                      -------------- borrow of `self.container.container_field` occurs here\n+LL |         self.container.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `DerefTarget`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "9a9e3a31358223da0329f5f350714a00dbb6fa94", "filename": "src/test/ui/borrowck/issue-81365-3.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.rs?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,37 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+struct Outer {\n+    container: Container,\n+}\n+\n+impl Deref for Outer {\n+    type Target = Container;\n+    fn deref(&self) -> &Self::Target {\n+        &self.container\n+    }\n+}\n+\n+impl Outer {\n+    fn bad_borrow(&mut self) {\n+        let first = &self.target_field;\n+        self.container.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "eedbed3cfe6c147612c9a2a499141e3fd6c6f535", "filename": "src/test/ui/borrowck/issue-81365-3.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-3.stderr?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `self.container.container_field` because it is borrowed\n+  --> $DIR/issue-81365-3.rs:32:9\n+   |\n+LL |         let first = &self.target_field;\n+   |                      ---- borrow of `self.container.container_field` occurs here\n+LL |         self.container.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `Container`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "b2643eb3358ac58bfe3590a55e97d225c012907c", "filename": "src/test/ui/borrowck/issue-81365-4.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.rs?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,38 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+struct Outer {\n+    container: Container,\n+    outer_field: bool,\n+}\n+\n+impl Deref for Outer {\n+    type Target = Container;\n+    fn deref(&self) -> &Self::Target {\n+        &self.container\n+    }\n+}\n+\n+impl Outer {\n+    fn bad_borrow(&mut self) {\n+        let first = &self.target_field;\n+        self.outer_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "82c9fbbc16f6bb9e72e32f160f6414391fdc90d9", "filename": "src/test/ui/borrowck/issue-81365-4.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-4.stderr?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `self.outer_field` because it is borrowed\n+  --> $DIR/issue-81365-4.rs:33:9\n+   |\n+LL |         let first = &self.target_field;\n+   |                      ---- borrow of `self.outer_field` occurs here\n+LL |         self.outer_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.outer_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `Container`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "d36b79615e3ad1b90342d076270bba7e424e4c8c", "filename": "src/test/ui/borrowck/issue-81365-5.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.rs?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,33 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+\n+impl DerefTarget {\n+    fn get(&self) -> &bool {\n+        &self.target_field\n+    }\n+}\n+\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = self.get();\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8085faf82ed06c59a28749f7f8e91f7c6cb3b519", "filename": "src/test/ui/borrowck/issue-81365-5.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-5.rs:28:9\n+   |\n+LL |         let first = self.get();\n+   |                     ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `DerefTarget`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "85ea77756b3bae25871a92fa74b785fc383f389f", "filename": "src/test/ui/borrowck/issue-81365-6.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.rs?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,23 @@\n+use std::ops::Deref;\n+\n+struct Container {\n+    target: Vec<()>,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = [()];\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &self[0];\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d35d12b9a8b5daa4a971e9a664896c2f1a016c88", "filename": "src/test/ui/borrowck/issue-81365-6.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-6.stderr?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-6.rs:18:9\n+   |\n+LL |         let first = &self[0];\n+   |                      ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `[()]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "cbf70f11a9acfaf0f42edad0d0778d3b62654fd7", "filename": "src/test/ui/borrowck/issue-81365-7.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.rs?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,24 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+fn bad_borrow(c: &mut Container) {\n+    let first = &c.target_field;\n+    c.container_field = true; //~ ERROR E0506\n+    first;\n+}\n+\n+fn main() {}"}, {"sha": "0ee9fb828211281648d84f1a0cdd64f25adc4e67", "filename": "src/test/ui/borrowck/issue-81365-7.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-7.stderr?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `c.container_field` because it is borrowed\n+  --> $DIR/issue-81365-7.rs:20:5\n+   |\n+LL |     let first = &c.target_field;\n+   |                  - borrow of `c.container_field` occurs here\n+LL |     c.container_field = true;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `c.container_field` occurs here\n+LL |     first;\n+   |     ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `DerefTarget`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "0bb1033fb42f71f000501a954e5bad63c729eba3", "filename": "src/test/ui/borrowck/issue-81365-8.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.rs?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,26 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &(*self).target_field;\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8e212a77016470c4c93ed4937d3944014ca4c6e9", "filename": "src/test/ui/borrowck/issue-81365.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365.rs?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,26 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &self.target_field;\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a7dc5366f807e339af05cd17db34779b740fed5f", "filename": "src/test/ui/borrowck/issue-81365.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2eed3a559e1e59900261f4a5abf11053590e9df/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365.stderr?ref=b2eed3a559e1e59900261f4a5abf11053590e9df", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365.rs:21:9\n+   |\n+LL |         let first = &self.target_field;\n+   |                      ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `DerefTarget`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}]}