{"sha": "e7503ca7bf78eece210c061f324ecfc8e3955321", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NTAzY2E3YmY3OGVlY2UyMTBjMDYxZjMyNGVjZmM4ZTM5NTUzMjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-22T14:58:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T14:58:37Z"}, "message": "Rollup merge of #72435 - petrochenkov:cratetypesopt, r=Mark-Simulacrum\n\nrustllvm: Fix warnings about unused function parameters\n\nAnd then perform corresponding cleanups on Rust side.\n\nFixes https://github.com/rust-lang/rust/issues/72427", "tree": {"sha": "7e00d93c42f269f074a0570ad48cc48ad98cf161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e00d93c42f269f074a0570ad48cc48ad98cf161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7503ca7bf78eece210c061f324ecfc8e3955321", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJex+ieCRBK7hj4Ov3rIwAAdHIIAFu0/mEjP4T0PBNFPYpuow8t\n+as7yI3yqy4u1WTtoNuKrYQAHQRey+f7qLxqW9kSBmd2aqaGcV7IDs/nOTo2iUFR\n4l+ToUo8cKIa5mVFApaR9C0sFTkcIl32VMay5Al8ERrqsSuX3TRO7BzPirPADXoT\n0m0L79q30QkaaQDA2T/6HtAUaq/sjJP1H6AVyLcQ3XSxI8GGiGfRdq3Jzv188nBh\n7o5xuSax1QQPf7VQWD6Csn56yr/NfsTTPmaty3n+0BISm2Vjmz+uJ1AhYPVK7+dK\niGfyImQCcSNIyhuaX4BR0Ard03L2wQi1z6WsQPo0iU4Jth1ium1QToRJLJLTw6g=\n=oEz/\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e00d93c42f269f074a0570ad48cc48ad98cf161\nparent 37587af8d53b516b5f74a0ff667c83bccd308b8d\nparent d0a48d19f5e10869ea4a137d4bb3b84d62966e31\nauthor Ralf Jung <post@ralfj.de> 1590159517 +0200\ncommitter GitHub <noreply@github.com> 1590159517 +0200\n\nRollup merge of #72435 - petrochenkov:cratetypesopt, r=Mark-Simulacrum\n\nrustllvm: Fix warnings about unused function parameters\n\nAnd then perform corresponding cleanups on Rust side.\n\nFixes https://github.com/rust-lang/rust/issues/72427\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7503ca7bf78eece210c061f324ecfc8e3955321", "html_url": "https://github.com/rust-lang/rust/commit/e7503ca7bf78eece210c061f324ecfc8e3955321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7503ca7bf78eece210c061f324ecfc8e3955321/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37587af8d53b516b5f74a0ff667c83bccd308b8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/37587af8d53b516b5f74a0ff667c83bccd308b8d", "html_url": "https://github.com/rust-lang/rust/commit/37587af8d53b516b5f74a0ff667c83bccd308b8d"}, {"sha": "d0a48d19f5e10869ea4a137d4bb3b84d62966e31", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a48d19f5e10869ea4a137d4bb3b84d62966e31", "html_url": "https://github.com/rust-lang/rust/commit/d0a48d19f5e10869ea4a137d4bb3b84d62966e31"}], "stats": {"total": 59, "additions": 12, "deletions": 47}, "files": [{"sha": "57e018bba6a1a07faae1edfc2d4742b35de8966a", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=e7503ca7bf78eece210c061f324ecfc8e3955321", "patch": "@@ -6,7 +6,6 @@ use crate::back::profiling::{\n use crate::base;\n use crate::common;\n use crate::consts;\n-use crate::context::all_outputs_are_pic_executables;\n use crate::llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -150,7 +149,6 @@ pub fn target_machine_factory(\n     let features = features.join(\",\");\n     let features = CString::new(features).unwrap();\n     let abi = SmallCStr::new(&sess.target.target.options.llvm_abiname);\n-    let pic_is_pie = all_outputs_are_pic_executables(sess);\n     let trap_unreachable = sess.target.target.options.trap_unreachable;\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n \n@@ -174,7 +172,6 @@ pub fn target_machine_factory(\n                 reloc_model,\n                 opt_level,\n                 use_softfp,\n-                pic_is_pie,\n                 ffunction_sections,\n                 fdata_sections,\n                 trap_unreachable,"}, {"sha": "3192d4fc15701daf1d9e67c27d675983330ae468", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=e7503ca7bf78eece210c061f324ecfc8e3955321", "patch": "@@ -97,17 +97,6 @@ fn to_llvm_tls_model(tls_model: TlsModel) -> llvm::ThreadLocalMode {\n     }\n }\n \n-/// PIE is potentially more effective than PIC, but can only be used in executables.\n-/// If all our outputs are executables, then we can relax PIC to PIE when producing object code.\n-/// If the list of crate types is not yet known we conservatively return `false`.\n-pub fn all_outputs_are_pic_executables(sess: &Session) -> bool {\n-    sess.relocation_model() == RelocModel::Pic\n-        && sess\n-            .crate_types\n-            .try_get()\n-            .map_or(false, |crate_types| crate_types.iter().all(|ty| *ty == CrateType::Executable))\n-}\n-\n fn strip_function_ptr_alignment(data_layout: String) -> String {\n     // FIXME: Make this more general.\n     data_layout.replace(\"-Fi8-\", \"-\")\n@@ -183,10 +172,11 @@ pub unsafe fn create_module(\n \n     if sess.relocation_model() == RelocModel::Pic {\n         llvm::LLVMRustSetModulePICLevel(llmod);\n-    }\n-\n-    if all_outputs_are_pic_executables(sess) {\n-        llvm::LLVMRustSetModulePIELevel(llmod);\n+        // PIE is potentially more effective than PIC, but can only be used in executables.\n+        // If all our outputs are executables, then we can relax PIC to PIE.\n+        if sess.crate_types.get().iter().all(|ty| *ty == CrateType::Executable) {\n+            llvm::LLVMRustSetModulePIELevel(llmod);\n+        }\n     }\n \n     // If skipping the PLT is enabled, we need to add some module metadata"}, {"sha": "0cce0b25e5893a02169d551ef5c024d964018881", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=e7503ca7bf78eece210c061f324ecfc8e3955321", "patch": "@@ -447,7 +447,6 @@ fn subroutine_type_metadata(\n         unsafe {\n             llvm::LLVMRustDIBuilderCreateSubroutineType(\n                 DIB(cx),\n-                unknown_file_metadata(cx),\n                 create_DIArray(DIB(cx), &signature_metadata[..]),\n             )\n         },\n@@ -635,14 +634,12 @@ pub fn type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>, usage_site_span: Sp\n                     // anything reading the debuginfo for a recursive\n                     // type is going to see *something* weird - the only\n                     // question is what exactly it will see.\n-                    let (size, align) = cx.size_and_align_of(t);\n                     let name = \"<recur_type>\";\n                     llvm::LLVMRustDIBuilderCreateBasicType(\n                         DIB(cx),\n                         name.as_ptr().cast(),\n                         name.len(),\n-                        size.bits(),\n-                        align.bits() as u32,\n+                        cx.size_of(t).bits(),\n                         DW_ATE_unsigned,\n                     )\n                 }\n@@ -841,14 +838,12 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n         _ => bug!(\"debuginfo::basic_type_metadata - `t` is invalid type\"),\n     };\n \n-    let (size, align) = cx.size_and_align_of(t);\n     let ty_metadata = unsafe {\n         llvm::LLVMRustDIBuilderCreateBasicType(\n             DIB(cx),\n             name.as_ptr().cast(),\n             name.len(),\n-            size.bits(),\n-            align.bits() as u32,\n+            cx.size_of(t).bits(),\n             encoding,\n         )\n     };\n@@ -2187,9 +2182,6 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'\n                                 name.as_ptr().cast(),\n                                 name.len(),\n                                 actual_type_metadata,\n-                                unknown_file_metadata(cx),\n-                                0,\n-                                0,\n                             ))\n                         })\n                     } else {"}, {"sha": "8c580847ef8fdad866019975ef219134b26efa0a", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=e7503ca7bf78eece210c061f324ecfc8e3955321", "patch": "@@ -252,7 +252,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         let function_type_metadata = unsafe {\n             let fn_signature = get_function_signature(self, fn_abi);\n-            llvm::LLVMRustDIBuilderCreateSubroutineType(DIB(self), file_metadata, fn_signature)\n+            llvm::LLVMRustDIBuilderCreateSubroutineType(DIB(self), fn_signature)\n         };\n \n         // Find the enclosing function, in case this is a closure.\n@@ -265,8 +265,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         // name if necessary.\n         let generics = self.tcx().generics_of(enclosing_fn_def_id);\n         let substs = instance.substs.truncate_to(self.tcx(), generics);\n-        let template_parameters =\n-            get_template_parameters(self, &generics, substs, file_metadata, &mut name);\n+        let template_parameters = get_template_parameters(self, &generics, substs, &mut name);\n \n         // Get the linkage_name, which is just the symbol name\n         let linkage_name = mangled_name_of_instance(self, instance);\n@@ -388,7 +387,6 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             cx: &CodegenCx<'ll, 'tcx>,\n             generics: &ty::Generics,\n             substs: SubstsRef<'tcx>,\n-            file_metadata: &'ll DIFile,\n             name_to_append_suffix_to: &mut String,\n         ) -> &'ll DIArray {\n             if substs.types().next().is_none() {\n@@ -429,9 +427,6 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                                     name.as_ptr().cast(),\n                                     name.len(),\n                                     actual_type_metadata,\n-                                    file_metadata,\n-                                    0,\n-                                    0,\n                                 ))\n                             })\n                         } else {"}, {"sha": "3fb7ff3cb8dfd8420265a6ec4227d6d8259e6942", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=e7503ca7bf78eece210c061f324ecfc8e3955321", "patch": "@@ -1655,7 +1655,6 @@ extern \"C\" {\n \n     pub fn LLVMRustDIBuilderCreateSubroutineType(\n         Builder: &DIBuilder<'a>,\n-        File: &'a DIFile,\n         ParameterTypes: &'a DIArray,\n     ) -> &'a DICompositeType;\n \n@@ -1682,7 +1681,6 @@ extern \"C\" {\n         Name: *const c_char,\n         NameLen: size_t,\n         SizeInBits: u64,\n-        AlignInBits: u32,\n         Encoding: c_uint,\n     ) -> &'a DIBasicType;\n \n@@ -1880,9 +1878,6 @@ extern \"C\" {\n         Name: *const c_char,\n         NameLen: size_t,\n         Ty: &'a DIType,\n-        File: &'a DIFile,\n-        LineNo: c_uint,\n-        ColumnNo: c_uint,\n     ) -> &'a DITemplateTypeParameter;\n \n     pub fn LLVMRustDIBuilderCreateNameSpace(\n@@ -1948,7 +1943,6 @@ extern \"C\" {\n         Reloc: RelocModel,\n         Level: CodeGenOptLevel,\n         UseSoftFP: bool,\n-        PositionIndependentExecutable: bool,\n         FunctionSections: bool,\n         DataSections: bool,\n         TrapUnreachable: bool,"}, {"sha": "02dcfb8e829529c1d757ebaec3845794dcbcff73", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=e7503ca7bf78eece210c061f324ecfc8e3955321", "patch": "@@ -445,7 +445,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     const char *TripleStr, const char *CPU, const char *Feature,\n     const char *ABIStr, LLVMRustCodeModel RustCM, LLVMRustRelocModel RustReloc,\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n-    bool PositionIndependentExecutable, bool FunctionSections,\n+    bool FunctionSections,\n     bool DataSections,\n     bool TrapUnreachable,\n     bool Singlethread,"}, {"sha": "24f35627d10e5b7287697b791d8bfde1ed7afb81", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e7503ca7bf78eece210c061f324ecfc8e3955321/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=e7503ca7bf78eece210c061f324ecfc8e3955321", "patch": "@@ -720,7 +720,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFile(\n \n extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateSubroutineType(LLVMRustDIBuilderRef Builder,\n-                                      LLVMMetadataRef File,\n                                       LLVMMetadataRef ParameterTypes) {\n   return wrap(Builder->createSubroutineType(\n       DITypeRefArray(unwrap<MDTuple>(ParameterTypes))));\n@@ -755,7 +754,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateBasicType(\n     LLVMRustDIBuilderRef Builder, const char *Name, size_t NameLen,\n-    uint64_t SizeInBits, uint32_t AlignInBits, unsigned Encoding) {\n+    uint64_t SizeInBits, unsigned Encoding) {\n   return wrap(Builder->createBasicType(StringRef(Name, NameLen), SizeInBits, Encoding));\n }\n \n@@ -964,9 +963,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateUnionType(\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateTemplateTypeParameter(\n     LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope,\n-    const char *Name, size_t NameLen,\n-    LLVMMetadataRef Ty, LLVMMetadataRef File, unsigned LineNo,\n-    unsigned ColumnNo) {\n+    const char *Name, size_t NameLen, LLVMMetadataRef Ty) {\n   return wrap(Builder->createTemplateTypeParameter(\n       unwrapDI<DIDescriptor>(Scope), StringRef(Name, NameLen), unwrapDI<DIType>(Ty)));\n }"}]}