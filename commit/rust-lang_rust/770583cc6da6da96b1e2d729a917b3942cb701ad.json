{"sha": "770583cc6da6da96b1e2d729a917b3942cb701ad", "node_id": "C_kwDOAAsO6NoAKDc3MDU4M2NjNmRhNmRhOTZiMWUyZDcyOWE5MTdiMzk0MmNiNzAxYWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-08T11:43:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-08T11:43:20Z"}, "message": "Rollup merge of #97848 - spastorino:universal-lowering-refactor-1, r=cjgillot\n\nImpl Traits lowering minor refactors\n\nThis are unrelated changes on my RPIT refactor that may be better to merge before opening the main PR.\n\nr? `@cjgillot`\n\ncc `@nikomatsakis`", "tree": {"sha": "13bea8d829f39fa06e4c4bc14ef0af3927c8a6d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13bea8d829f39fa06e4c4bc14ef0af3927c8a6d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770583cc6da6da96b1e2d729a917b3942cb701ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJioItYCRBK7hj4Ov3rIwAAoU4IAJLC7vgMJ7et1gIEkpj0eMpP\nP20Qp5Jfkn5Dhp8caz3P1RQ0b4MCElTPd2CbzlW7JymgiIYmy7jzbfTQCeDUJeu7\nH6l3e6coNG2BSB7VK5kao4e1k3mj3G5Ed9rc+6fSokTqVwI7N8HpxYt8r1B7AEzP\n8P0mt42MGeHw5+ENQ9MGsENFn30n7Qmpni88XVdOl6r7b13395zLxPl+2gIP8amL\nZNZbjTLKkECWMp41rObcxwPRa4DMQ7wa46iVUPr3PCF/uv9GgoZ9nsOw2YMmpWN+\nwjUaPYzQAQ3mih1pxHk/zLvCe1UI2WK2FCp1y5OqT5foXabKuXmghukDIRMiNG8=\n=Agcs\n-----END PGP SIGNATURE-----\n", "payload": "tree 13bea8d829f39fa06e4c4bc14ef0af3927c8a6d7\nparent 82a1d79dffd5e6ba86271046f795a4235d734845\nparent 4ae69f86179cb263b61621b8c4b9e90e861acb10\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654688600 +0200\ncommitter GitHub <noreply@github.com> 1654688600 +0200\n\nRollup merge of #97848 - spastorino:universal-lowering-refactor-1, r=cjgillot\n\nImpl Traits lowering minor refactors\n\nThis are unrelated changes on my RPIT refactor that may be better to merge before opening the main PR.\n\nr? `@cjgillot`\n\ncc `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770583cc6da6da96b1e2d729a917b3942cb701ad", "html_url": "https://github.com/rust-lang/rust/commit/770583cc6da6da96b1e2d729a917b3942cb701ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770583cc6da6da96b1e2d729a917b3942cb701ad/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82a1d79dffd5e6ba86271046f795a4235d734845", "url": "https://api.github.com/repos/rust-lang/rust/commits/82a1d79dffd5e6ba86271046f795a4235d734845", "html_url": "https://github.com/rust-lang/rust/commit/82a1d79dffd5e6ba86271046f795a4235d734845"}, {"sha": "4ae69f86179cb263b61621b8c4b9e90e861acb10", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae69f86179cb263b61621b8c4b9e90e861acb10", "html_url": "https://github.com/rust-lang/rust/commit/4ae69f86179cb263b61621b8c4b9e90e861acb10"}], "stats": {"total": 158, "additions": 95, "deletions": 63}, "files": [{"sha": "d5ed9aa380f458e2ff6e9a8ea92f9093275b8b50", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/770583cc6da6da96b1e2d729a917b3942cb701ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770583cc6da6da96b1e2d729a917b3942cb701ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=770583cc6da6da96b1e2d729a917b3942cb701ad", "patch": "@@ -19,7 +19,6 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use smallvec::{smallvec, SmallVec};\n-use tracing::debug;\n \n use std::iter;\n \n@@ -117,6 +116,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         self.owners[def_id]\n     }\n \n+    #[instrument(level = \"debug\", skip(self, c))]\n     fn lower_crate(&mut self, c: &Crate) {\n         debug_assert_eq!(self.resolver.local_def_id(CRATE_NODE_ID), CRATE_DEF_ID);\n \n@@ -127,6 +127,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         })\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_item(&mut self, item: &Item) {\n         self.with_lctx(item.id, |lctx| hir::OwnerNode::Item(lctx.lower_item(item)))\n     }\n@@ -485,6 +486,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         (ty, self.lower_const_body(span, body))\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_use_tree(\n         &mut self,\n         tree: &UseTree,\n@@ -494,8 +496,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         ident: &mut Ident,\n         attrs: Option<&'hir [Attribute]>,\n     ) -> hir::ItemKind<'hir> {\n-        debug!(\"lower_use_tree(tree={:?})\", tree);\n-\n         let path = &tree.prefix;\n         let segments = prefix.segments.iter().chain(path.segments.iter()).cloned().collect();\n \n@@ -1298,6 +1298,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     /// Return the pair of the lowered `generics` as `hir::Generics` and the evaluation of `f` with\n     /// the carried impl trait definitions and bounds.\n+    #[instrument(level = \"debug\", skip(self, f))]\n     fn lower_generics<T>(\n         &mut self,\n         generics: &Generics,"}, {"sha": "6d780b8448cc09e42272c5b2912618ff0586bdac", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 79, "deletions": 46, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/770583cc6da6da96b1e2d729a917b3942cb701ad/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770583cc6da6da96b1e2d729a917b3942cb701ad/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=770583cc6da6da96b1e2d729a917b3942cb701ad", "patch": "@@ -37,6 +37,9 @@\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n@@ -63,7 +66,6 @@ use rustc_span::{Span, DUMMY_SP};\n \n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n-use tracing::{debug, trace};\n \n macro_rules! arena_vec {\n     ($this:expr; $($x:expr),*) => (\n@@ -439,7 +441,7 @@ pub fn lower_crate<'a, 'hir>(\n     arena.alloc(krate)\n }\n \n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum ParamMode {\n     /// Any path in a type context.\n     Explicit,\n@@ -455,6 +457,7 @@ enum ParenthesizedGenericArgs {\n }\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n+    #[instrument(level = \"debug\", skip(self, f))]\n     fn with_hir_id_owner(\n         &mut self,\n         owner: NodeId,\n@@ -599,12 +602,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.lower_node_id(node_id)\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn lower_res(&mut self, res: Res<NodeId>) -> Res {\n         let res: Result<Res, ()> = res.apply_id(|id| {\n             let owner = self.current_hir_id_owner;\n             let local_id = self.node_id_to_local_id.get(&id).copied().ok_or(())?;\n             Ok(hir::HirId { owner, local_id })\n         });\n+        trace!(?res);\n+\n         // We may fail to find a HirId when the Res points to a Local from an enclosing HIR owner.\n         // This can happen when trying to lower the return type `x` in erroneous code like\n         //   async fn foo(x: u8) -> x {}\n@@ -851,6 +857,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// ```\n     ///\n     /// returns a `hir::TypeBinding` representing `Item`.\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocConstraint,\n@@ -1011,6 +1018,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         err.emit();\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_generic_arg(\n         &mut self,\n         arg: &ast::GenericArg,\n@@ -1081,6 +1089,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext) -> &'hir hir::Ty<'hir> {\n         self.arena.alloc(self.lower_ty_direct(t, itctx))\n     }\n@@ -1212,41 +1221,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         )\n                     }\n                     ImplTraitContext::Universal => {\n-                        // Add a definition for the in-band `Param`.\n-                        let def_id = self.resolver.local_def_id(def_node_id);\n-\n-                        let hir_bounds =\n-                            self.lower_param_bounds(bounds, ImplTraitContext::Universal);\n-                        // Set the name to `impl Bound1 + Bound2`.\n+                        let span = t.span;\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n-                        let param = hir::GenericParam {\n-                            hir_id: self.lower_node_id(def_node_id),\n-                            name: ParamName::Plain(self.lower_ident(ident)),\n-                            pure_wrt_drop: false,\n-                            span: self.lower_span(span),\n-                            kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n-                            colon_span: None,\n-                        };\n+                        let (param, bounds, path) =\n+                            self.lower_generic_and_bounds(def_node_id, span, ident, bounds);\n                         self.impl_trait_defs.push(param);\n-\n-                        if let Some(preds) = self.lower_generic_bound_predicate(\n-                            ident,\n-                            def_node_id,\n-                            &GenericParamKind::Type { default: None },\n-                            hir_bounds,\n-                            hir::PredicateOrigin::ImplTrait,\n-                        ) {\n-                            self.impl_trait_bounds.push(preds)\n+                        if let Some(bounds) = bounds {\n+                            self.impl_trait_bounds.push(bounds);\n                         }\n-\n-                        hir::TyKind::Path(hir::QPath::Resolved(\n-                            None,\n-                            self.arena.alloc(hir::Path {\n-                                span: self.lower_span(span),\n-                                res: Res::Def(DefKind::TyParam, def_id.to_def_id()),\n-                                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n-                            }),\n-                        ))\n+                        path\n                     }\n                     ImplTraitContext::Disallowed(position) => {\n                         let mut err = struct_span_err!(\n@@ -1737,6 +1720,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         )\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn lower_param_bound(\n         &mut self,\n         tpb: &GenericBound,\n@@ -1862,8 +1846,27 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.arena.alloc_from_iter(self.lower_generic_params_mut(params))\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn lower_generic_param(&mut self, param: &GenericParam) -> hir::GenericParam<'hir> {\n-        let (name, kind) = match param.kind {\n+        let (name, kind) = self.lower_generic_param_kind(param);\n+\n+        let hir_id = self.lower_node_id(param.id);\n+        self.lower_attrs(hir_id, &param.attrs);\n+        hir::GenericParam {\n+            hir_id,\n+            name,\n+            span: self.lower_span(param.span()),\n+            pure_wrt_drop: self.sess.contains_name(&param.attrs, sym::may_dangle),\n+            kind,\n+            colon_span: param.colon_span.map(|s| self.lower_span(s)),\n+        }\n+    }\n+\n+    fn lower_generic_param_kind(\n+        &mut self,\n+        param: &GenericParam,\n+    ) -> (hir::ParamName, hir::GenericParamKind<'hir>) {\n+        match param.kind {\n             GenericParamKind::Lifetime => {\n                 // AST resolution emitted an error on those parameters, so we lower them using\n                 // `ParamName::Error`.\n@@ -1897,17 +1900,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     hir::GenericParamKind::Const { ty, default },\n                 )\n             }\n-        };\n-\n-        let hir_id = self.lower_node_id(param.id);\n-        self.lower_attrs(hir_id, &param.attrs);\n-        hir::GenericParam {\n-            hir_id,\n-            name,\n-            span: self.lower_span(param.span()),\n-            pure_wrt_drop: self.sess.contains_name(&param.attrs, sym::may_dangle),\n-            kind,\n-            colon_span: param.colon_span.map(|s| self.lower_span(s)),\n         }\n     }\n \n@@ -1954,6 +1946,47 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx))\n     }\n \n+    fn lower_generic_and_bounds(\n+        &mut self,\n+        node_id: NodeId,\n+        span: Span,\n+        ident: Ident,\n+        bounds: &[GenericBound],\n+    ) -> (hir::GenericParam<'hir>, Option<hir::WherePredicate<'hir>>, hir::TyKind<'hir>) {\n+        // Add a definition for the in-band `Param`.\n+        let def_id = self.resolver.local_def_id(node_id);\n+\n+        let hir_bounds = self.lower_param_bounds(bounds, ImplTraitContext::Universal);\n+        // Set the name to `impl Bound1 + Bound2`.\n+        let param = hir::GenericParam {\n+            hir_id: self.lower_node_id(node_id),\n+            name: ParamName::Plain(self.lower_ident(ident)),\n+            pure_wrt_drop: false,\n+            span: self.lower_span(span),\n+            kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n+            colon_span: None,\n+        };\n+\n+        let preds = self.lower_generic_bound_predicate(\n+            ident,\n+            node_id,\n+            &GenericParamKind::Type { default: None },\n+            hir_bounds,\n+            hir::PredicateOrigin::ImplTrait,\n+        );\n+\n+        let ty = hir::TyKind::Path(hir::QPath::Resolved(\n+            None,\n+            self.arena.alloc(hir::Path {\n+                span: self.lower_span(span),\n+                res: Res::Def(DefKind::TyParam, def_id.to_def_id()),\n+                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n+            }),\n+        ));\n+\n+        (param, preds, ty)\n+    }\n+\n     /// Lowers a block directly to an expression, presuming that it\n     /// has no attributes and is not targeted by a `break`.\n     fn lower_block_expr(&mut self, b: &Block) -> hir::Expr<'hir> {"}, {"sha": "ac63a075ac65fe22d466dba3359a8634cec4aa2f", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770583cc6da6da96b1e2d729a917b3942cb701ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770583cc6da6da96b1e2d729a917b3942cb701ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=770583cc6da6da96b1e2d729a917b3942cb701ad", "patch": "@@ -15,6 +15,7 @@ use smallvec::smallvec;\n use tracing::debug;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n+    #[instrument(level = \"trace\", skip(self))]\n     pub(crate) fn lower_qpath(\n         &mut self,\n         id: NodeId,\n@@ -23,7 +24,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         param_mode: ParamMode,\n         itctx: ImplTraitContext,\n     ) -> hir::QPath<'hir> {\n-        debug!(\"lower_qpath(id: {:?}, qself: {:?}, p: {:?})\", id, qself, p);\n         let qself_position = qself.as_ref().map(|q| q.position);\n         let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx));\n "}, {"sha": "26e954b0026aa3b9cc06a7cc969d46c960dbdfc8", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/770583cc6da6da96b1e2d729a917b3942cb701ad/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770583cc6da6da96b1e2d729a917b3942cb701ad/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=770583cc6da6da96b1e2d729a917b3942cb701ad", "patch": "@@ -23,7 +23,7 @@ use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{GenericArg, GenericArgs};\n+use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n@@ -2627,16 +2627,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let def_id = item_id.def_id.to_def_id();\n \n                 match opaque_ty.kind {\n-                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => self\n-                        .impl_trait_ty_to_ty(\n-                            def_id,\n-                            lifetimes,\n-                            matches!(\n-                                origin,\n-                                hir::OpaqueTyOrigin::FnReturn(..)\n-                                    | hir::OpaqueTyOrigin::AsyncFn(..)\n-                            ),\n-                        ),\n+                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n+                        self.impl_trait_ty_to_ty(def_id, lifetimes, origin)\n+                    }\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n                 }\n             }\n@@ -2705,7 +2698,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         def_id: DefId,\n         lifetimes: &[hir::GenericArg<'_>],\n-        replace_parent_lifetimes: bool,\n+        origin: OpaqueTyOrigin,\n     ) -> Ty<'tcx> {\n         debug!(\"impl_trait_ty_to_ty(def_id={:?}, lifetimes={:?})\", def_id, lifetimes);\n         let tcx = self.tcx();\n@@ -2735,7 +2728,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     // For `impl Trait` in the types of statics, constants,\n                     // locals and type aliases. These capture all parent\n                     // lifetimes, so they can use their identity subst.\n-                    GenericParamDefKind::Lifetime if replace_parent_lifetimes => {\n+                    GenericParamDefKind::Lifetime\n+                        if matches!(\n+                            origin,\n+                            hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..)\n+                        ) =>\n+                    {\n                         tcx.lifetimes.re_static.into()\n                     }\n                     _ => tcx.mk_param_from_def(param),"}]}