{"sha": "dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkODFkMWViZDk3NWQ0YzgxMmNiYjVkZDlkOGFmYWVmYmQ1M2RkMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-04T14:57:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-04T14:57:18Z"}, "message": "Auto merge of #26005 - Ms2ger:get_enum_variant_defs, r=Aatch", "tree": {"sha": "981e8bf0754094f5c694fcb515447ba68376e830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/981e8bf0754094f5c694fcb515447ba68376e830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c", "html_url": "https://github.com/rust-lang/rust/commit/dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52e530af4cfe4a873cd27278ee3ddff66b6754e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/52e530af4cfe4a873cd27278ee3ddff66b6754e1", "html_url": "https://github.com/rust-lang/rust/commit/52e530af4cfe4a873cd27278ee3ddff66b6754e1"}, {"sha": "f2cca31e3db5386436400554191d920dc35c5de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2cca31e3db5386436400554191d920dc35c5de8", "html_url": "https://github.com/rust-lang/rust/commit/f2cca31e3db5386436400554191d920dc35c5de8"}], "stats": {"total": 52, "additions": 2, "deletions": 50}, "files": [{"sha": "081c035b5950d1235a2b81b647276db9aa6cf223", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c", "patch": "@@ -13,7 +13,6 @@\n use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;\n-use middle::def;\n use middle::lang_items;\n use middle::ty;\n \n@@ -114,12 +113,6 @@ pub fn maybe_get_item_ast<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId,\n     decoder::maybe_get_item_ast(&*cdata, tcx, def.node, decode_inlined_item)\n }\n \n-pub fn get_enum_variant_defs(cstore: &cstore::CStore, enum_id: ast::DefId)\n-                             -> Vec<(def::Def, ast::Name, ast::Visibility)> {\n-    let cdata = cstore.get_crate_data(enum_id.krate);\n-    decoder::get_enum_variant_defs(&*cstore.intr, &*cdata, enum_id.node)\n-}\n-\n pub fn get_enum_variants<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId)\n                                -> Vec<Rc<ty::VariantInfo<'tcx>>> {\n     let cstore = &tcx.sess.cstore;"}, {"sha": "2a7ec48378ac12b789eb19f6ef3e50acfc40efc8", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=dd81d1ebd975d4c812cbb5dd9d8afaefbd53dd2c", "patch": "@@ -268,30 +268,6 @@ fn item_trait_ref<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd)\n     doc_trait_ref(tp, tcx, cdata)\n }\n \n-struct EnumVariantIds<'a> {\n-    iter: reader::TaggedDocsIterator<'a>,\n-    cdata: Cmd<'a>,\n-}\n-\n-impl<'a> Iterator for EnumVariantIds<'a> {\n-    type Item = ast::DefId;\n-\n-    fn next(&mut self) -> Option<ast::DefId> {\n-        self.iter.next().map(|p| translated_def_id(self.cdata, p))\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.size_hint()\n-    }\n-}\n-\n-fn enum_variant_ids<'a>(item: rbml::Doc<'a>, cdata: Cmd<'a>) -> EnumVariantIds<'a> {\n-    EnumVariantIds {\n-        iter: reader::tagged_docs(item, tag_items_data_item_variant),\n-        cdata: cdata,\n-    }\n-}\n-\n fn item_path(item_doc: rbml::Doc) -> Vec<ast_map::PathElem> {\n     let path_doc = reader::get_doc(item_doc, tag_path);\n     reader::docs(path_doc).filter_map(|(tag, elt_doc)| {\n@@ -730,31 +706,14 @@ pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: ast::NodeI\n     }\n }\n \n-pub fn get_enum_variant_defs(intr: &IdentInterner,\n-                             cdata: Cmd,\n-                             id: ast::NodeId)\n-                             -> Vec<(def::Def, ast::Name, ast::Visibility)> {\n-    let data = cdata.data();\n-    let items = reader::get_doc(rbml::Doc::new(data), tag_items);\n-    let item = find_item(id, items);\n-    enum_variant_ids(item, cdata).map(|did| {\n-        let item = find_item(did.node, items);\n-        let name = item_name(intr, item);\n-        let visibility = item_visibility(item);\n-        match item_to_def_like(cdata, item, did) {\n-            DlDef(def @ def::DefVariant(..)) => (def, name, visibility),\n-            _ => unreachable!()\n-        }\n-    }).collect()\n-}\n-\n pub fn get_enum_variants<'tcx>(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::NodeId,\n                                tcx: &ty::ctxt<'tcx>) -> Vec<Rc<ty::VariantInfo<'tcx>>> {\n     let data = cdata.data();\n     let items = reader::get_doc(rbml::Doc::new(data), tag_items);\n     let item = find_item(id, items);\n     let mut disr_val = 0;\n-    enum_variant_ids(item, cdata).map(|did| {\n+    reader::tagged_docs(item, tag_items_data_item_variant).map(|p| {\n+        let did = translated_def_id(cdata, p);\n         let item = find_item(did.node, items);\n         let ctor_ty = item_type(ast::DefId { krate: cdata.cnum, node: id},\n                                 item, tcx, cdata);"}]}