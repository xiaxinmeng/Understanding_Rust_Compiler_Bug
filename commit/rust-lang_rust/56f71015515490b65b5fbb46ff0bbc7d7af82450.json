{"sha": "56f71015515490b65b5fbb46ff0bbc7d7af82450", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZjcxMDE1NTE1NDkwYjY1YjVmYmI0NmZmMGJiYzdkN2FmODI0NTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-05T19:37:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-05T19:46:42Z"}, "message": "rustc: Default #[crate_name] on input, not output", "tree": {"sha": "23adf899f04d42d55b35334a7c29d3be3f5a6e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23adf899f04d42d55b35334a7c29d3be3f5a6e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56f71015515490b65b5fbb46ff0bbc7d7af82450", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56f71015515490b65b5fbb46ff0bbc7d7af82450", "html_url": "https://github.com/rust-lang/rust/commit/56f71015515490b65b5fbb46ff0bbc7d7af82450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56f71015515490b65b5fbb46ff0bbc7d7af82450/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15b680ae86eefae754c3a348d89207fa100b4ca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/15b680ae86eefae754c3a348d89207fa100b4ca6", "html_url": "https://github.com/rust-lang/rust/commit/15b680ae86eefae754c3a348d89207fa100b4ca6"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "f1856850701b27995c107e26572475ebca369de2", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=56f71015515490b65b5fbb46ff0bbc7d7af82450", "patch": "@@ -11,7 +11,7 @@\n use back::archive::{Archive, METADATA_FILENAME};\n use back::rpath;\n use back::svh::Svh;\n-use driver::driver::{CrateTranslation, OutputFilenames};\n+use driver::driver::{CrateTranslation, OutputFilenames, Input, FileInput};\n use driver::config::NoDebugInfo;\n use driver::session::Session;\n use driver::config;\n@@ -545,10 +545,9 @@ pub mod write {\n  *    system linkers understand.\n  */\n \n-// FIXME (#9639): This needs to handle non-utf8 `out_filestem` values\n pub fn find_crate_name(sess: Option<&Session>,\n                        attrs: &[ast::Attribute],\n-                       out_filestem: &str) -> String {\n+                       input: &Input) -> String {\n     use syntax::crateid::CrateId;\n \n     let validate = |s: String, span: Option<Span>| {\n@@ -591,11 +590,17 @@ pub fn find_crate_name(sess: Option<&Session>,\n         }\n         None => {}\n     }\n-    return validate(from_str(out_filestem).unwrap_or_else(|| {\n-        let mut s = out_filestem.chars().filter(|c| c.is_XID_continue());\n-        from_str(s.collect::<String>().as_slice())\n-            .or(from_str(\"rust-out\")).unwrap()\n-    }), None)\n+    match *input {\n+        FileInput(ref path) => {\n+            match path.filestem_str() {\n+                Some(s) => return validate(s.to_string(), None),\n+                None => {}\n+            }\n+        }\n+        _ => {}\n+    }\n+\n+    \"rust-out\".to_string()\n }\n \n pub fn build_link_meta(sess: &Session, krate: &ast::Crate,"}, {"sha": "16605c060170f58e5d6e90247a4d14905e52240a", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=56f71015515490b65b5fbb46ff0bbc7d7af82450", "patch": "@@ -77,7 +77,7 @@ pub fn compile_input(sess: Session,\n                                                  krate.attrs.as_slice(),\n                                                  &sess);\n             let id = link::find_crate_name(Some(&sess), krate.attrs.as_slice(),\n-                                           outputs.out_filestem.as_slice());\n+                                           input);\n             let (expanded_crate, ast_map)\n                 = match phase_2_configure_and_expand(&sess, krate, id.as_slice()) {\n                     None => return,\n@@ -652,8 +652,7 @@ pub fn pretty_print_input(sess: Session,\n                           ppm: PpMode,\n                           ofile: Option<Path>) {\n     let krate = phase_1_parse_input(&sess, cfg, input);\n-    let id = link::find_crate_name(Some(&sess), krate.attrs.as_slice(),\n-                                   input.filestem().as_slice());\n+    let id = link::find_crate_name(Some(&sess), krate.attrs.as_slice(), input);\n \n     let (krate, ast_map, is_expanded) = match ppm {\n         PpmExpanded | PpmExpandedIdentified | PpmTyped | PpmFlowGraph(_) => {"}, {"sha": "807c2590566d91e4f2f7c7cacae554600cc55dd2", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=56f71015515490b65b5fbb46ff0bbc7d7af82450", "patch": "@@ -303,8 +303,7 @@ fn print_crate_info(sess: &Session,\n                                                        ofile,\n                                                        attrs.as_slice(),\n                                                        sess);\n-        let id = link::find_crate_name(Some(sess), attrs.as_slice(),\n-                                       t_outputs.out_filestem.as_slice());\n+        let id = link::find_crate_name(Some(sess), attrs.as_slice(), input);\n \n         if crate_name {\n             println!(\"{}\", id);"}, {"sha": "1ddd97e2ed45f35e65a8a2ed3b214015a2a41484", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=56f71015515490b65b5fbb46ff0bbc7d7af82450", "patch": "@@ -119,14 +119,7 @@ impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n \n         // Figure out the name of this crate\n         let input = driver::FileInput(cx.src.clone());\n-        let t_outputs = driver::build_output_filenames(&input,\n-                                                       &None,\n-                                                       &None,\n-                                                       self.attrs.as_slice(),\n-                                                       cx.sess());\n-        let name = link::find_crate_name(None,\n-                                         self.attrs.as_slice(),\n-                                         t_outputs.out_filestem.as_slice());\n+        let name = link::find_crate_name(None, self.attrs.as_slice(), &input);\n \n         // Clean the crate, translating the entire libsyntax AST to one that is\n         // understood by rustdoc."}, {"sha": "9ef671ef2fcbbddc79e6fc125b6492fd330b29f0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=56f71015515490b65b5fbb46ff0bbc7d7af82450", "patch": "@@ -84,8 +84,7 @@ fn get_ast_and_resolve(cpath: &Path, libs: HashSet<Path>, cfgs: Vec<String>)\n     use rustc::driver::driver::{FileInput,\n                                 phase_1_parse_input,\n                                 phase_2_configure_and_expand,\n-                                phase_3_run_analysis_passes,\n-                                build_output_filenames};\n+                                phase_3_run_analysis_passes};\n     use rustc::driver::config::build_configuration;\n \n     let input = FileInput(cpath.clone());\n@@ -118,10 +117,8 @@ fn get_ast_and_resolve(cpath: &Path, libs: HashSet<Path>, cfgs: Vec<String>)\n \n     let krate = phase_1_parse_input(&sess, cfg, &input);\n \n-    let t_outputs = build_output_filenames(&input, &None, &None,\n-                                           krate.attrs.as_slice(), &sess);\n     let name = link::find_crate_name(Some(&sess), krate.attrs.as_slice(),\n-                                     t_outputs.out_filestem.as_slice());\n+                                     &input);\n \n     let (krate, ast_map)\n         = phase_2_configure_and_expand(&sess, krate, name.as_slice())"}, {"sha": "22e98b61c6113646d3fdd9fcf5df426c14e091d3", "filename": "src/test/compile-fail/bad-crate-id2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs?ref=56f71015515490b65b5fbb46ff0bbc7d7af82450", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate bar = \"#a\"; //~ ERROR: invalid character in crate name: `#`\n+extern crate bar = \"#a\"; //~ ERROR: invalid character `#` in crate name: `#a`\n \n fn main() {}\n "}, {"sha": "5d6e629ffc1d1627dccc0be3042322042e096d0f", "filename": "src/test/run-make/weird-output-filenames/Makefile", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/56f71015515490b65b5fbb46ff0bbc7d7af82450/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile?ref=56f71015515490b65b5fbb46ff0bbc7d7af82450", "patch": "@@ -1,9 +1,12 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) foo.rs -o $(TMPDIR)/.foo 2>&1 \\\n-\t\t| grep \"invalid character in crate name:\"\n-\t$(RUSTC) foo.rs -o $(TMPDIR)/.foo.bar 2>&1 \\\n-\t\t| grep \"invalid character in crate name:\"\n-\t$(RUSTC) foo.rs -o $(TMPDIR)/+foo+bar 2>&1 \\\n-\t\t| grep \"invalid character in crate name:\"\n+\tcp foo.rs $(TMPDIR)/.foo.rs\n+\t$(RUSTC) $(TMPDIR)/.foo.rs 2>&1 \\\n+\t\t| grep \"invalid character.*in crate name:\"\n+\tcp foo.rs $(TMPDIR)/.foo.bar\n+\t$(RUSTC) $(TMPDIR)/.foo.bar 2>&1 \\\n+\t\t| grep \"invalid character.*in crate name:\"\n+\tcp foo.rs $(TMPDIR)/+foo+bar\n+\t$(RUSTC) $(TMPDIR)/+foo+bar 2>&1 \\\n+\t\t| grep \"invalid character.*in crate name:\""}]}