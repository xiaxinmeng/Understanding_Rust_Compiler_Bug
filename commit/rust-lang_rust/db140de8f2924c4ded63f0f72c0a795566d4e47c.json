{"sha": "db140de8f2924c4ded63f0f72c0a795566d4e47c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMTQwZGU4ZjI5MjRjNGRlZDYzZjBmNzJjMGE3OTU1NjZkNGU0N2M=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-04-05T09:26:48Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-05-08T08:58:08Z"}, "message": "Explicitly register GCOV profiling pass as well", "tree": {"sha": "1edf737b0d275e85fa56cb2785940f17c8a9c12a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1edf737b0d275e85fa56cb2785940f17c8a9c12a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db140de8f2924c4ded63f0f72c0a795566d4e47c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db140de8f2924c4ded63f0f72c0a795566d4e47c", "html_url": "https://github.com/rust-lang/rust/commit/db140de8f2924c4ded63f0f72c0a795566d4e47c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db140de8f2924c4ded63f0f72c0a795566d4e47c/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ecbe7fcf8bceb91d43a21be872aaef44c01073a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ecbe7fcf8bceb91d43a21be872aaef44c01073a", "html_url": "https://github.com/rust-lang/rust/commit/5ecbe7fcf8bceb91d43a21be872aaef44c01073a"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "2b54ad278a2251c2f9c9cdb444585e491046757f", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db140de8f2924c4ded63f0f72c0a795566d4e47c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db140de8f2924c4ded63f0f72c0a795566d4e47c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=db140de8f2924c4ded63f0f72c0a795566d4e47c", "patch": "@@ -473,6 +473,7 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         pgo_gen_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         pgo_use_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         config.instrument_coverage,\n+        config.instrument_gcov,\n         llvm_selfprofiler,\n         selfprofile_before_pass_callback,\n         selfprofile_after_pass_callback,\n@@ -546,15 +547,6 @@ pub(crate) unsafe fn optimize(\n                     llvm::LLVMRustAddPass(fpm, find_pass(\"lint\").unwrap());\n                     continue;\n                 }\n-                if pass_name == \"insert-gcov-profiling\" {\n-                    // Instrumentation must be inserted before optimization,\n-                    // otherwise LLVM may optimize some functions away which\n-                    // breaks llvm-cov.\n-                    //\n-                    // This mirrors what Clang does in lib/CodeGen/BackendUtil.cpp.\n-                    llvm::LLVMRustAddPass(mpm, find_pass(pass_name).unwrap());\n-                    continue;\n-                }\n \n                 if let Some(pass) = find_pass(pass_name) {\n                     extra_passes.push(pass);\n@@ -567,6 +559,14 @@ pub(crate) unsafe fn optimize(\n                 }\n             }\n \n+            // Instrumentation must be inserted before optimization,\n+            // otherwise LLVM may optimize some functions away which\n+            // breaks llvm-cov.\n+            //\n+            // This mirrors what Clang does in lib/CodeGen/BackendUtil.cpp.\n+            if config.instrument_gcov {\n+                llvm::LLVMRustAddPass(mpm, find_pass(\"insert-gcov-profiling\").unwrap());\n+            }\n             if config.instrument_coverage {\n                 llvm::LLVMRustAddPass(mpm, find_pass(\"instrprof\").unwrap());\n             }"}, {"sha": "9c9201aea36b3b7f17d86a766a58171dc5fe000d", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db140de8f2924c4ded63f0f72c0a795566d4e47c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db140de8f2924c4ded63f0f72c0a795566d4e47c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=db140de8f2924c4ded63f0f72c0a795566d4e47c", "patch": "@@ -2204,6 +2204,7 @@ extern \"C\" {\n         PGOGenPath: *const c_char,\n         PGOUsePath: *const c_char,\n         InstrumentCoverage: bool,\n+        InstrumentGCOV: bool,\n         llvm_selfprofiler: *mut c_void,\n         begin_callback: SelfProfileBeforePassCallback,\n         end_callback: SelfProfileAfterPassCallback,"}, {"sha": "0dfb007a2473e31a6fc135add423bcc8475f9282", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db140de8f2924c4ded63f0f72c0a795566d4e47c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db140de8f2924c4ded63f0f72c0a795566d4e47c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=db140de8f2924c4ded63f0f72c0a795566d4e47c", "patch": "@@ -85,6 +85,7 @@ pub struct ModuleConfig {\n     pub pgo_gen: SwitchWithOptPath,\n     pub pgo_use: Option<PathBuf>,\n     pub instrument_coverage: bool,\n+    pub instrument_gcov: bool,\n \n     pub sanitizer: SanitizerSet,\n     pub sanitizer_recover: SanitizerSet,\n@@ -166,19 +167,7 @@ impl ModuleConfig {\n         };\n \n         ModuleConfig {\n-            passes: if_regular!(\n-                {\n-                    let mut passes = sess.opts.cg.passes.clone();\n-                    // compiler_builtins overrides the codegen-units settings,\n-                    // which is incompatible with -Zprofile which requires that\n-                    // only a single codegen unit is used per crate.\n-                    if sess.opts.debugging_opts.profile && !is_compiler_builtins {\n-                        passes.push(\"insert-gcov-profiling\".to_owned());\n-                    }\n-                    passes\n-                },\n-                vec![]\n-            ),\n+            passes: if_regular!(sess.opts.cg.passes.clone(), vec![]),\n \n             opt_level: opt_level_and_size,\n             opt_size: opt_level_and_size,\n@@ -189,6 +178,13 @@ impl ModuleConfig {\n             ),\n             pgo_use: if_regular!(sess.opts.cg.profile_use.clone(), None),\n             instrument_coverage: if_regular!(sess.instrument_coverage(), false),\n+            instrument_gcov: if_regular!(\n+                // compiler_builtins overrides the codegen-units settings,\n+                // which is incompatible with -Zprofile which requires that\n+                // only a single codegen unit is used per crate.\n+                sess.opts.debugging_opts.profile && !is_compiler_builtins,\n+                false\n+            ),\n \n             sanitizer: if_regular!(sess.opts.debugging_opts.sanitizer, SanitizerSet::empty()),\n             sanitizer_recover: if_regular!("}, {"sha": "355746a55820ad9dc9619977ed64dd5f6efeaec3", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db140de8f2924c4ded63f0f72c0a795566d4e47c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/db140de8f2924c4ded63f0f72c0a795566d4e47c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=db140de8f2924c4ded63f0f72c0a795566d4e47c", "patch": "@@ -32,6 +32,7 @@\n #include \"llvm/Transforms/Instrumentation.h\"\n #include \"llvm/Transforms/Instrumentation/AddressSanitizer.h\"\n #include \"llvm/Support/TimeProfiler.h\"\n+#include \"llvm/Transforms/Instrumentation/GCOVProfiler.h\"\n #include \"llvm/Transforms/Instrumentation/InstrProfiling.h\"\n #include \"llvm/Transforms/Instrumentation/ThreadSanitizer.h\"\n #include \"llvm/Transforms/Instrumentation/MemorySanitizer.h\"\n@@ -745,7 +746,8 @@ LLVMRustOptimizeWithNewPassManager(\n     bool MergeFunctions, bool UnrollLoops, bool SLPVectorize, bool LoopVectorize,\n     bool DisableSimplifyLibCalls, bool EmitLifetimeMarkers,\n     LLVMRustSanitizerOptions *SanitizerOptions,\n-    const char *PGOGenPath, const char *PGOUsePath, bool InstrumentCoverage,\n+    const char *PGOGenPath, const char *PGOUsePath,\n+    bool InstrumentCoverage, bool InstrumentGCOV,\n     void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n     LLVMRustSelfProfileAfterPassCallback AfterPassCallback) {\n@@ -835,6 +837,14 @@ LLVMRustOptimizeWithNewPassManager(\n     );\n   }\n \n+  if (InstrumentGCOV) {\n+    PipelineStartEPCallbacks.push_back(\n+      [](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        MPM.addPass(GCOVProfilerPass(GCOVOptions::getDefault()));\n+      }\n+    );\n+  }\n+\n   if (InstrumentCoverage) {\n     PipelineStartEPCallbacks.push_back(\n       [](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {"}]}