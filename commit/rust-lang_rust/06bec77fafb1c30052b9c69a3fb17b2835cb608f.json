{"sha": "06bec77fafb1c30052b9c69a3fb17b2835cb608f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YmVjNzdmYWZiMWMzMDA1MmI5YzY5YTNmYjE3YjI4MzVjYjYwOGY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-19T22:56:57Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-21T07:24:03Z"}, "message": "replace vec::find with the IteratorUtil method", "tree": {"sha": "720e62a93084d160efa4aa40057558237ce4d76e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/720e62a93084d160efa4aa40057558237ce4d76e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06bec77fafb1c30052b9c69a3fb17b2835cb608f", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06bec77fafb1c30052b9c69a3fb17b2835cb608f", "html_url": "https://github.com/rust-lang/rust/commit/06bec77fafb1c30052b9c69a3fb17b2835cb608f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06bec77fafb1c30052b9c69a3fb17b2835cb608f/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883c966d5c6ba93bf8834543500b01f644ab362f", "url": "https://api.github.com/repos/rust-lang/rust/commits/883c966d5c6ba93bf8834543500b01f644ab362f", "html_url": "https://github.com/rust-lang/rust/commit/883c966d5c6ba93bf8834543500b01f644ab362f"}], "stats": {"total": 73, "additions": 16, "deletions": 57}, "files": [{"sha": "346e2162385ce56ea75a96aae2357ac462bf057c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=06bec77fafb1c30052b9c69a3fb17b2835cb608f", "patch": "@@ -456,7 +456,7 @@ pub fn ctor_arity(cx: @MatchCheckCtxt, ctor: &ctor, ty: ty::t) -> uint {\n       ty::ty_enum(eid, _) => {\n           let id = match *ctor { variant(id) => id,\n           _ => fail!(\"impossible case\") };\n-        match vec::find(*ty::enum_variants(cx.tcx, eid), |v| v.id == id ) {\n+        match ty::enum_variants(cx.tcx, eid).iter().find_(|v| v.id == id ) {\n             Some(v) => v.args.len(),\n             None => fail!(\"impossible case\")\n         }"}, {"sha": "f082150e39490095770d7a548a27fa9b056448c9", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=06bec77fafb1c30052b9c69a3fb17b2835cb608f", "patch": "@@ -209,7 +209,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n       }\n       ast_map::node_variant(ref v, enum_item, _) => {\n         let tvs = ty::enum_variants(ccx.tcx, local_def(enum_item.id));\n-        let this_tv = vec::find(*tvs, |tv| { tv.id.node == fn_id.node}).get();\n+        let this_tv = *tvs.iter().find_(|tv| { tv.id.node == fn_id.node}).get();\n         let d = mk_lldecl();\n         set_inline_hint(d);\n         match v.node.kind {"}, {"sha": "8595adcd1c73344dcae184ea18e6dad4d2013d49", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=06bec77fafb1c30052b9c69a3fb17b2835cb608f", "patch": "@@ -4128,9 +4128,10 @@ pub fn lookup_struct_field(cx: ctxt,\n                            parent: ast::def_id,\n                            field_id: ast::def_id)\n                         -> field_ty {\n-    match vec::find(lookup_struct_fields(cx, parent),\n+    let r = lookup_struct_fields(cx, parent);\n+    match r.iter().find_(\n                  |f| f.id.node == field_id.node) {\n-        Some(t) => t,\n+        Some(t) => *t,\n         None => cx.sess.bug(\"struct ID not found in parent's fields\")\n     }\n }"}, {"sha": "13ded50167939dbb132fb97b513e952469476c04", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=06bec77fafb1c30052b9c69a3fb17b2835cb608f", "patch": "@@ -1107,7 +1107,7 @@ pub fn lookup_field_ty(tcx: ty::ctxt,\n                        fieldname: ast::ident,\n                        substs: &ty::substs) -> Option<ty::t> {\n \n-    let o_field = vec::find(items, |f| f.ident == fieldname);\n+    let o_field = items.iter().find_(|f| f.ident == fieldname);\n     do o_field.map() |f| {\n         ty::lookup_field_type(tcx, class_id, f.id, substs)\n     }"}, {"sha": "1c34007c99d42f3dd3b441cd97ecdf745da95951", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=06bec77fafb1c30052b9c69a3fb17b2835cb608f", "patch": "@@ -135,7 +135,7 @@ fn fold_enum(\n                             node: ast::item_enum(ref enum_definition, _), _\n                         }, _) => {\n                             let ast_variant =\n-                                vec::find(enum_definition.variants, |v| {\n+                                copy *enum_definition.variants.iter().find_(|v| {\n                                     to_str(v.node.name) == variant.name\n                                 }).get();\n "}, {"sha": "84a194627fb56fe969f15d106e5c6e50029130c9", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=06bec77fafb1c30052b9c69a3fb17b2835cb608f", "patch": "@@ -230,16 +230,15 @@ pub fn maybe_find_pandoc(\n       }\n     };\n \n-    let pandoc = do vec::find(possible_pandocs) |pandoc| {\n+    let pandoc = do possible_pandocs.iter().find_ |&pandoc| {\n         let output = process_output(*pandoc, [~\"--version\"]);\n         debug!(\"testing pandoc cmd %s: %?\", *pandoc, output);\n         output.status == 0\n     };\n \n-    if pandoc.is_some() {\n-        result::Ok(pandoc)\n-    } else {\n-        result::Err(~\"couldn't find pandoc\")\n+    match pandoc {\n+        Some(x) => Ok(Some(copy *x)), // ugly, shouldn't be doubly wrapped\n+        None => Err(~\"couldn't find pandoc\")\n     }\n }\n "}, {"sha": "e3abe6e926a5ef2145314514c2f14a63605ddb63", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=06bec77fafb1c30052b9c69a3fb17b2835cb608f", "patch": "@@ -124,7 +124,7 @@ fn fold_enum(\n                             node: ast::item_enum(ref enum_definition, _), _\n                         }, _) => {\n                             let ast_variant =\n-                                do vec::find(enum_definition.variants) |v| {\n+                                copy *do enum_definition.variants.iter().find_ |v| {\n                                 to_str(v.node.name) == variant.name\n                             }.get();\n \n@@ -178,14 +178,14 @@ fn get_method_sig(\n             ast_map::node_item(@ast::item {\n                 node: ast::item_trait(_, _, ref methods), _\n             }, _) => {\n-                match vec::find(*methods, |method| {\n+                match methods.iter().find_(|&method| {\n                     match copy *method {\n                         ast::required(ty_m) => to_str(ty_m.ident) == method_name,\n                         ast::provided(m) => to_str(m.ident) == method_name,\n                     }\n                 }) {\n                     Some(method) => {\n-                        match method {\n+                        match copy *method {\n                             ast::required(ty_m) => {\n                                 Some(pprust::fun_to_str(\n                                     &ty_m.decl,\n@@ -214,7 +214,7 @@ fn get_method_sig(\n             ast_map::node_item(@ast::item {\n                 node: ast::item_impl(_, _, _, ref methods), _\n             }, _) => {\n-                match vec::find(*methods, |method| {\n+                match methods.iter().find_(|method| {\n                     to_str(method.ident) == method_name\n                 }) {\n                     Some(method) => {"}, {"sha": "f3226b27d1be35326e37f51636539bf4e9d22885", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=06bec77fafb1c30052b9c69a3fb17b2835cb608f", "patch": "@@ -60,7 +60,7 @@ pub fn from_bytes(vv: &[u8]) -> ~str {\n     use str::not_utf8::cond;\n \n     if !is_utf8(vv) {\n-        let first_bad_byte = vec::find(vv, |b| !is_utf8([*b])).get();\n+        let first_bad_byte = *vv.iter().find_(|&b| !is_utf8([*b])).get();\n         cond.raise(fmt!(\"from_bytes: input is not UTF-8; first bad byte is %u\",\n                         first_bad_byte as uint))\n     }"}, {"sha": "703224e37c579546569e96d99c19ae2b9d94cbe5", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bec77fafb1c30052b9c69a3fb17b2835cb608f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=06bec77fafb1c30052b9c69a3fb17b2835cb608f", "patch": "@@ -1056,17 +1056,6 @@ pub fn contains<T:Eq>(v: &[T], x: &T) -> bool {\n     false\n }\n \n-/**\n- * Search for the first element that matches a given predicate\n- *\n- * Apply function `f` to each element of `v`, starting from the first.\n- * When function `f` returns true then an option containing the element\n- * is returned. If `f` matches no elements then none is returned.\n- */\n-pub fn find<T:Copy>(v: &[T], f: &fn(t: &T) -> bool) -> Option<T> {\n-    find_between(v, 0u, v.len(), f)\n-}\n-\n /**\n  * Search for the first element that matches a given predicate within a range\n  *\n@@ -3163,18 +3152,6 @@ mod tests {\n         assert!(position_between(v, 4u, 4u, f).is_none());\n     }\n \n-    #[test]\n-    fn test_find() {\n-        assert!(find([], f).is_none());\n-\n-        fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n-        fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n-        let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n-\n-        assert_eq!(find(v, f), Some((1, 'b')));\n-        assert!(find(v, g).is_none());\n-    }\n-\n     #[test]\n     fn test_find_between() {\n         assert!(find_between([], 0u, 0u, f).is_none());\n@@ -3205,8 +3182,6 @@ mod tests {\n \n     #[test]\n     fn test_rposition() {\n-        assert!(find([], f).is_none());\n-\n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n         let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n@@ -3838,22 +3813,6 @@ mod tests {\n         };\n     }\n \n-    #[test]\n-    #[ignore(windows)]\n-    #[should_fail]\n-    #[allow(non_implicitly_copyable_typarams)]\n-    fn test_find_fail() {\n-        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n-        let mut i = 0;\n-        do find(v) |_elt| {\n-            if i == 2 {\n-                fail!()\n-            }\n-            i += 0;\n-            false\n-        };\n-    }\n-\n     #[test]\n     #[ignore(windows)]\n     #[should_fail]"}]}