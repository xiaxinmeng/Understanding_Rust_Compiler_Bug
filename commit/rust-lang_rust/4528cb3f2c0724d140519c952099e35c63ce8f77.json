{"sha": "4528cb3f2c0724d140519c952099e35c63ce8f77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MjhjYjNmMmMwNzI0ZDE0MDUxOWM5NTIwOTllMzVjNjNjZThmNzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-21T14:25:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-21T14:25:15Z"}, "message": "Merge #2633\n\n2633: Remove imports from hir r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "085b33cc69bac4812fa5e25b7f227f21e030d91d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/085b33cc69bac4812fa5e25b7f227f21e030d91d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4528cb3f2c0724d140519c952099e35c63ce8f77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/itLCRBK7hj4Ov3rIwAAdHIIAH1uIEvozIfeSKo6WllRLCxg\n72wTeofAVOaToLjerF1wnl7Y2GbF9jroHe82kAcShAOgYjT25s7Xn2FdnpoBx+a7\n4O8Z5cNaENw6WGDGdi8aoWdSL91fiRdm00jiC1c7S4umpCpbZy/S3wDTNeyLysX4\n6XSYoC1c4yxZ088GgVNHa/1doK0T4VHjgQD6TiyIi8aCJ+33L4YVaQNXOJpQmWIa\nYWG0slLxgdMJ+sAqt4FTn1FKCHy6ZpjQLNVoFo7dMuzMXKOVg5cJXonoDxrdVmYU\nwediA7rwyYiMKruTt4oT2nNeUTpW/lwVj+yZ1D8EjeC43ohkEy3v0bWbIoo/bhY=\n=rjd7\n-----END PGP SIGNATURE-----\n", "payload": "tree 085b33cc69bac4812fa5e25b7f227f21e030d91d\nparent df45f28fedab9b0620ea038849ec8e93c3b4ab26\nparent 4e0168ec14b74003e8388b72b64c2ca78b580274\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576938315 +0000\ncommitter GitHub <noreply@github.com> 1576938315 +0000\n\nMerge #2633\n\n2633: Remove imports from hir r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4528cb3f2c0724d140519c952099e35c63ce8f77", "html_url": "https://github.com/rust-lang/rust/commit/4528cb3f2c0724d140519c952099e35c63ce8f77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4528cb3f2c0724d140519c952099e35c63ce8f77/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df45f28fedab9b0620ea038849ec8e93c3b4ab26", "url": "https://api.github.com/repos/rust-lang/rust/commits/df45f28fedab9b0620ea038849ec8e93c3b4ab26", "html_url": "https://github.com/rust-lang/rust/commit/df45f28fedab9b0620ea038849ec8e93c3b4ab26"}, {"sha": "4e0168ec14b74003e8388b72b64c2ca78b580274", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0168ec14b74003e8388b72b64c2ca78b580274", "html_url": "https://github.com/rust-lang/rust/commit/4e0168ec14b74003e8388b72b64c2ca78b580274"}], "stats": {"total": 67, "additions": 22, "deletions": 45}, "files": [{"sha": "4cd28eb4e361e0ddb3ce1817f65cb017e87a5229", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=4528cb3f2c0724d140519c952099e35c63ce8f77", "patch": "@@ -12,8 +12,8 @@ use hir_def::{\n     resolver::HasResolver,\n     type_ref::{Mutability, TypeRef},\n     AdtId, ConstId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId, LocalEnumVariantId,\n-    LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId,\n-    TraitId, TypeAliasId, TypeParamId, UnionId,\n+    LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n+    TypeParamId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -180,13 +180,11 @@ impl Module {\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n-    pub fn scope(self, db: &impl HirDatabase) -> Vec<(Name, ScopeDef, Option<Import>)> {\n+    pub fn scope(self, db: &impl HirDatabase) -> Vec<(Name, ScopeDef)> {\n         db.crate_def_map(self.id.krate)[self.id.local_id]\n             .scope\n             .entries()\n-            .map(|(name, res)| {\n-                (name.clone(), res.def.into(), res.import.map(|id| Import { parent: self, id }))\n-            })\n+            .map(|(name, res)| (name.clone(), res.def.into()))\n             .collect()\n     }\n \n@@ -229,11 +227,6 @@ impl Module {\n     }\n }\n \n-pub struct Import {\n-    pub(crate) parent: Module,\n-    pub(crate) id: LocalImportId,\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructField {\n     pub(crate) parent: VariantDef,"}, {"sha": "5541266e2b1e0f534909313d9d630ee7c1b71087", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=4528cb3f2c0724d140519c952099e35c63ce8f77", "patch": "@@ -9,8 +9,8 @@ use hir_def::{\n use ra_syntax::ast;\n \n use crate::{\n-    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplBlock, Import, MacroDef,\n-    Module, Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n+    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplBlock, MacroDef, Module,\n+    Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n };\n \n pub use hir_expand::InFile;\n@@ -117,18 +117,6 @@ impl HasSource for ImplBlock {\n         self.id.lookup(db).source(db)\n     }\n }\n-impl HasSource for Import {\n-    type Ast = Either<ast::UseTree, ast::ExternCrateItem>;\n-\n-    /// Returns the syntax of the last path segment corresponding to this import\n-    fn source(self, db: &impl DefDatabase) -> InFile<Self::Ast> {\n-        let src = self.parent.definition_source(db);\n-        let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n-        let root = db.parse_or_expand(src.file_id).unwrap();\n-        let ptr = source_map.get(self.id);\n-        src.with_value(ptr.map_left(|it| it.to_node(&root)).map_right(|it| it.to_node(&root)))\n-    }\n-}\n \n impl HasSource for TypeParam {\n     type Ast = Either<ast::TraitDef, ast::TypeParam>;"}, {"sha": "0008a8858fc44a45813fe5f96830c90594c2c6c4", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=4528cb3f2c0724d140519c952099e35c63ce8f77", "patch": "@@ -40,8 +40,8 @@ mod from_source;\n pub use crate::{\n     code_model::{\n         Adt, AssocItem, AttrDef, Const, Crate, CrateDependency, DefWithBody, Docs, Enum,\n-        EnumVariant, FieldSource, Function, GenericDef, HasAttrs, ImplBlock, Import, Local,\n-        MacroDef, Module, ModuleDef, ScopeDef, Static, Struct, StructField, Trait, Type, TypeAlias,\n+        EnumVariant, FieldSource, Function, GenericDef, HasAttrs, ImplBlock, Local, MacroDef,\n+        Module, ModuleDef, ScopeDef, Static, Struct, StructField, Trait, Type, TypeAlias,\n         TypeParam, Union, VariantDef,\n     },\n     from_source::FromSource,"}, {"sha": "ad104bb3d718a2070fa34fd6a5d2b30e41776d86", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=4528cb3f2c0724d140519c952099e35c63ce8f77", "patch": "@@ -161,5 +161,5 @@ pub struct Resolution {\n     /// None for unresolved\n     pub def: PerNs,\n     /// ident by which this is imported into local scope.\n-    pub import: Option<LocalImportId>,\n+    pub(crate) import: Option<LocalImportId>,\n }"}, {"sha": "8cb5ab8d037b4b380a8293788411c277e0991b60", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=4528cb3f2c0724d140519c952099e35c63ce8f77", "patch": "@@ -52,7 +52,7 @@ use crate::body::Expander;\n use crate::builtin_type::BuiltinType;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct LocalImportId(RawId);\n+pub(crate) struct LocalImportId(RawId);\n impl_arena_id!(LocalImportId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "df5dac88a5d8a5069cfad1c738efd4053c454e35", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=4528cb3f2c0724d140519c952099e35c63ce8f77", "patch": "@@ -48,12 +48,6 @@ pub struct ImportSourceMap {\n \n type ImportSourcePtr = Either<AstPtr<ast::UseTree>, AstPtr<ast::ExternCrateItem>>;\n \n-impl ImportSourceMap {\n-    pub fn get(&self, import: LocalImportId) -> ImportSourcePtr {\n-        self.map[import].clone()\n-    }\n-}\n-\n impl RawItems {\n     pub(crate) fn raw_items_query(\n         db: &(impl DefDatabase + AstDatabase),"}, {"sha": "cc1f7c830528c455e95ab2fa8a84d32749ee5aa4", "filename": "crates/ra_ide/src/completion/complete_path.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=4528cb3f2c0724d140519c952099e35c63ce8f77", "patch": "@@ -1,7 +1,6 @@\n //! FIXME: write short doc here\n \n-use either::Either;\n-use hir::{Adt, HasSource, PathResolution};\n+use hir::{Adt, PathResolution, ScopeDef};\n use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n@@ -19,24 +18,23 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n     match def {\n         hir::ModuleDef::Module(module) => {\n             let module_scope = module.scope(ctx.db);\n-            for (name, def, import) in module_scope {\n-                if let hir::ScopeDef::ModuleDef(hir::ModuleDef::BuiltinType(..)) = def {\n-                    if ctx.use_item_syntax.is_some() {\n+            for (name, def) in module_scope {\n+                if ctx.use_item_syntax.is_some() {\n+                    if let hir::ScopeDef::ModuleDef(hir::ModuleDef::BuiltinType(..)) = def {\n                         tested_by!(dont_complete_primitive_in_use);\n                         continue;\n                     }\n-                }\n-                if Some(module) == ctx.module {\n-                    if let Some(import) = import {\n-                        if let Either::Left(use_tree) = import.source(ctx.db).value {\n-                            if use_tree.syntax().text_range().contains_inclusive(ctx.offset) {\n+                    if let ScopeDef::Unknown = def {\n+                        if let Some(name_ref) = ctx.name_ref_syntax.as_ref() {\n+                            if &name_ref.syntax().text() == name.to_string().as_str() {\n                                 // for `use self::foo<|>`, don't suggest `foo` as a completion\n                                 tested_by!(dont_complete_current_use);\n                                 continue;\n                             }\n                         }\n                     }\n                 }\n+\n                 acc.add_resolution(ctx, name.to_string(), &def);\n             }\n         }"}, {"sha": "48d69f7e54f5bb1670cd0b1d24603f99cc0332e2", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528cb3f2c0724d140519c952099e35c63ce8f77/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=4528cb3f2c0724d140519c952099e35c63ce8f77", "patch": "@@ -19,6 +19,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) offset: TextUnit,\n     pub(super) token: SyntaxToken,\n     pub(super) module: Option<hir::Module>,\n+    pub(super) name_ref_syntax: Option<ast::NameRef>,\n     pub(super) function_syntax: Option<ast::FnDef>,\n     pub(super) use_item_syntax: Option<ast::UseItem>,\n     pub(super) record_lit_syntax: Option<ast::RecordLit>,\n@@ -69,6 +70,7 @@ impl<'a> CompletionContext<'a> {\n             token,\n             offset: position.offset,\n             module,\n+            name_ref_syntax: None,\n             function_syntax: None,\n             use_item_syntax: None,\n             record_lit_syntax: None,\n@@ -142,6 +144,8 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     fn classify_name_ref(&mut self, original_file: SourceFile, name_ref: ast::NameRef) {\n+        self.name_ref_syntax =\n+            find_node_at_offset(original_file.syntax(), name_ref.syntax().text_range().start());\n         let name_range = name_ref.syntax().text_range();\n         if name_ref.syntax().parent().and_then(ast::RecordField::cast).is_some() {\n             self.record_lit_syntax = find_node_at_offset(original_file.syntax(), self.offset);"}]}