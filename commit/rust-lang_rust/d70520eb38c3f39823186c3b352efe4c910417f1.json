{"sha": "d70520eb38c3f39823186c3b352efe4c910417f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MDUyMGViMzhjM2YzOTgyMzE4NmMzYjM1MmVmZTRjOTEwNDE3ZjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-30T11:40:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-30T11:49:45Z"}, "message": "print memory usage for queries", "tree": {"sha": "74cde977e61652f9bd0af6c62449037ac100e94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74cde977e61652f9bd0af6c62449037ac100e94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d70520eb38c3f39823186c3b352efe4c910417f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d70520eb38c3f39823186c3b352efe4c910417f1", "html_url": "https://github.com/rust-lang/rust/commit/d70520eb38c3f39823186c3b352efe4c910417f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d70520eb38c3f39823186c3b352efe4c910417f1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad8220f58675193860337a00fed87162a98dc1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad8220f58675193860337a00fed87162a98dc1a", "html_url": "https://github.com/rust-lang/rust/commit/2ad8220f58675193860337a00fed87162a98dc1a"}], "stats": {"total": 114, "additions": 101, "deletions": 13}, "files": [{"sha": "639b7c949e2d1da66b4f4ddd505069c976f484a5", "filename": "crates/ra_cli/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=d70520eb38c3f39823186c3b352efe4c910417f1", "patch": "@@ -20,3 +20,4 @@ ra_db = { path = \"../ra_db\" }\n [dependencies.ra_prof]\n path = \"../ra_prof\"\n # features = [ \"cpuprofiler\" ]\n+# features = [ \"jemalloc\" ]"}, {"sha": "a01c07c3fc89a0ecc2430416f93386fe78b57d22", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=d70520eb38c3f39823186c3b352efe4c910417f1", "patch": "@@ -6,9 +6,9 @@ use ra_syntax::AstNode;\n \n use crate::Result;\n \n-pub fn run(verbose: bool, path: &Path, only: Option<&str>) -> Result<()> {\n+pub fn run(verbose: bool, memory_usage: bool, path: &Path, only: Option<&str>) -> Result<()> {\n     let db_load_time = Instant::now();\n-    let (host, roots) = ra_batch::load_cargo(path)?;\n+    let (mut host, roots) = ra_batch::load_cargo(path)?;\n     let db = host.raw_database();\n     println!(\"Database loaded, {} roots, {:?}\", roots.len(), db_load_time.elapsed());\n     let analysis_time = Instant::now();\n@@ -113,5 +113,12 @@ pub fn run(verbose: bool, path: &Path, only: Option<&str>) -> Result<()> {\n         (num_exprs_partially_unknown * 100 / num_exprs)\n     );\n     println!(\"Analysis: {:?}, {}\", analysis_time.elapsed(), ra_prof::memory_usage());\n+\n+    if memory_usage {\n+        for (name, bytes) in host.per_query_memory_usage() {\n+            println!(\"{:>8} {}\", bytes, name)\n+        }\n+    }\n+\n     Ok(())\n }"}, {"sha": "d2f6544f8d49ae34dbde9d598a110e66ac2681fa", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=d70520eb38c3f39823186c3b352efe4c910417f1", "patch": "@@ -24,6 +24,7 @@ fn main() -> Result<()> {\n         .subcommand(\n             SubCommand::with_name(\"analysis-stats\")\n                 .arg(Arg::with_name(\"verbose\").short(\"v\").long(\"verbose\"))\n+                .arg(Arg::with_name(\"memory-usage\").long(\"memory-usage\"))\n                 .arg(Arg::with_name(\"only\").short(\"o\").takes_value(true))\n                 .arg(Arg::with_name(\"path\")),\n         )\n@@ -71,9 +72,10 @@ fn main() -> Result<()> {\n         }\n         (\"analysis-stats\", Some(matches)) => {\n             let verbose = matches.is_present(\"verbose\");\n+            let memory_usage = matches.is_present(\"memory-usage\");\n             let path = matches.value_of(\"path\").unwrap_or(\"\");\n             let only = matches.value_of(\"only\");\n-            analysis_stats::run(verbose, path.as_ref(), only)?;\n+            analysis_stats::run(verbose, memory_usage, path.as_ref(), only)?;\n         }\n         (\"analysis-bench\", Some(matches)) => {\n             let verbose = matches.is_present(\"verbose\");"}, {"sha": "b7d5ab5c6abdb3a636913a4a80a56baba646df1c", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=d70520eb38c3f39823186c3b352efe4c910417f1", "patch": "@@ -57,17 +57,21 @@ pub trait InternDatabase: SourceDatabase {\n pub trait AstDatabase: InternDatabase {\n     #[salsa::invoke(crate::source_id::AstIdMap::ast_id_map_query)]\n     fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n+\n     #[salsa::transparent]\n     #[salsa::invoke(crate::source_id::AstIdMap::file_item_query)]\n     fn ast_id_to_node(&self, file_id: HirFileId, ast_id: ErasedFileAstId) -> TreeArc<SyntaxNode>;\n+\n     #[salsa::transparent]\n     #[salsa::invoke(crate::ids::HirFileId::parse_or_expand_query)]\n     fn parse_or_expand(&self, file_id: HirFileId) -> Option<TreeArc<SyntaxNode>>;\n+\n     #[salsa::invoke(crate::ids::HirFileId::parse_macro_query)]\n     fn parse_macro(&self, macro_file: ids::MacroFile) -> Option<TreeArc<SyntaxNode>>;\n \n     #[salsa::invoke(crate::ids::macro_def_query)]\n     fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n+\n     #[salsa::invoke(crate::ids::macro_arg_query)]\n     fn macro_arg(&self, macro_call: ids::MacroCallId) -> Option<Arc<tt::Subtree>>;\n "}, {"sha": "2dfedad01be08ecdb8cdcf7438ebe33b2c406ad0", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=d70520eb38c3f39823186c3b352efe4c910417f1", "patch": "@@ -9,7 +9,7 @@ use ra_db::{\n     salsa::{Database, SweepStrategy},\n };\n use ra_syntax::SourceFile;\n-use ra_prof::profile;\n+use ra_prof::{profile, Bytes, memory_usage};\n use relative_path::RelativePathBuf;\n use rayon::prelude::*;\n \n@@ -243,4 +243,65 @@ impl RootDatabase {\n         self.query(hir::db::InferQuery).sweep(sweep);\n         self.query(hir::db::BodyHirQuery).sweep(sweep);\n     }\n+\n+    pub(crate) fn per_query_memory_usage(&mut self) -> Vec<(String, Bytes)> {\n+        let mut acc: Vec<(String, Bytes)> = vec![];\n+        let sweep = SweepStrategy::default().discard_values().sweep_all_revisions();\n+        macro_rules! sweep_each_query {\n+            ($($q:path)*) => {$(\n+                let before = memory_usage().allocated;\n+                self.query($q).sweep(sweep);\n+                let after = memory_usage().allocated;\n+                let q: $q = Default::default();\n+                let name = format!(\"{:?}\", q);\n+                acc.push((name, before - after));\n+            )*}\n+        }\n+        sweep_each_query![\n+            ra_db::ParseQuery\n+            ra_db::SourceRootCratesQuery\n+            hir::db::AstIdMapQuery\n+            hir::db::ParseMacroQuery\n+            hir::db::MacroDefQuery\n+            hir::db::MacroArgQuery\n+            hir::db::MacroExpandQuery\n+            hir::db::StructDataQuery\n+            hir::db::EnumDataQuery\n+            hir::db::TraitDataQuery\n+            hir::db::TraitItemsIndexQuery\n+            hir::db::RawItemsQuery\n+            hir::db::RawItemsWithSourceMapQuery\n+            hir::db::CrateDefMapQuery\n+            hir::db::ImplsInModuleQuery\n+            hir::db::ImplsInModuleWithSourceMapQuery\n+            hir::db::GenericParamsQuery\n+            hir::db::FnDataQuery\n+            hir::db::TypeAliasDataQuery\n+            hir::db::ConstDataQuery\n+            hir::db::StaticDataQuery\n+            hir::db::ModuleLangItemsQuery\n+            hir::db::LangItemsQuery\n+            hir::db::LangItemQuery\n+            hir::db::DocumentationQuery\n+            hir::db::ExprScopesQuery\n+            hir::db::InferQuery\n+            hir::db::TypeForDefQuery\n+            hir::db::TypeForFieldQuery\n+            hir::db::CallableItemSignatureQuery\n+            hir::db::GenericPredicatesQuery\n+            hir::db::GenericDefaultsQuery\n+            hir::db::BodyWithSourceMapQuery\n+            hir::db::BodyHirQuery\n+            hir::db::ImplsInCrateQuery\n+            hir::db::ImplsForTraitQuery\n+            hir::db::AssociatedTyDataQuery\n+            hir::db::TraitDatumQuery\n+            hir::db::StructDatumQuery\n+            hir::db::ImplDatumQuery\n+            hir::db::ImplementsQuery\n+            hir::db::NormalizeQuery\n+        ];\n+        acc.sort_by_key(|it| std::cmp::Reverse(it.1));\n+        acc\n+    }\n }"}, {"sha": "817e65df0f944c7ff0026513bc77387952a0a0f0", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=d70520eb38c3f39823186c3b352efe4c910417f1", "patch": "@@ -270,6 +270,10 @@ impl AnalysisHost {\n     pub fn collect_garbage(&mut self) {\n         self.db.collect_garbage();\n     }\n+    /// NB: this clears the database\n+    pub fn per_query_memory_usage(&mut self) -> Vec<(String, ra_prof::Bytes)> {\n+        self.db.per_query_memory_usage()\n+    }\n     pub fn raw_database(&self) -> &(impl hir::db::HirDatabase + salsa::Database) {\n         &self.db\n     }"}, {"sha": "7f857942dfa114332e60ce20afb1fce4c40a9605", "filename": "crates/ra_prof/src/memory_usage.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70520eb38c3f39823186c3b352efe4c910417f1/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs?ref=d70520eb38c3f39823186c3b352efe4c910417f1", "patch": "@@ -27,21 +27,23 @@ impl fmt::Display for MemoryUsage {\n     }\n }\n \n-#[derive(Default)]\n+#[derive(Default, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n pub struct Bytes(usize);\n \n impl fmt::Display for Bytes {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let bytes = self.0;\n-        if bytes < 4096 {\n-            return write!(f, \"{} bytes\", bytes);\n+        let mut value = bytes;\n+        let mut suffix = \"b\";\n+        if value > 4096 {\n+            value /= 1024;\n+            suffix = \"kb\";\n+            if value > 4096 {\n+                value /= 1024;\n+                suffix = \"mb\";\n+            }\n         }\n-        let kb = bytes / 1024;\n-        if kb < 4096 {\n-            return write!(f, \"{}kb\", kb);\n-        }\n-        let mb = kb / 1024;\n-        write!(f, \"{}mb\", mb)\n+        f.pad(&format!(\"{}{}\", value, suffix))\n     }\n }\n \n@@ -50,3 +52,10 @@ impl std::ops::AddAssign<usize> for Bytes {\n         self.0 += x;\n     }\n }\n+\n+impl std::ops::Sub for Bytes {\n+    type Output = Bytes;\n+    fn sub(self, rhs: Bytes) -> Bytes {\n+        Bytes(self.0 - rhs.0)\n+    }\n+}"}]}