{"sha": "f76e28aa1c093c59671749006e1a7ae203d66b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NmUyOGFhMWMwOTNjNTk2NzE3NDkwMDZlMWE3YWUyMDNkNjZiN2M=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2012-12-31T04:30:23Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-01-12T07:42:51Z"}, "message": "Allow consts' LLVM types to depend on their initializers.\n\nLoosening the connection between the LLVM type and the Rust type\nis necessary to use non-nullary enum constructors as const initializers,\nbecause the const needs to be initialized with data of the actual type of\nthe variant in question, which is (generally) not the same as the u8\narray in the `type_of` type.\n\nThus, referring to a const now requires casting the LLVM global to the\nexpected pointer type instead of using it as-is.", "tree": {"sha": "c731df0c8bba4ce50f16d412e9e9f9f67f635dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c731df0c8bba4ce50f16d412e9e9f9f67f635dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f76e28aa1c093c59671749006e1a7ae203d66b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f76e28aa1c093c59671749006e1a7ae203d66b7c", "html_url": "https://github.com/rust-lang/rust/commit/f76e28aa1c093c59671749006e1a7ae203d66b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f76e28aa1c093c59671749006e1a7ae203d66b7c/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452642422dda045b89cbcb2b7d011c85c5202d5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/452642422dda045b89cbcb2b7d011c85c5202d5d", "html_url": "https://github.com/rust-lang/rust/commit/452642422dda045b89cbcb2b7d011c85c5202d5d"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "a8b0da47e9ac2344c48571ab47a99fe0b56fdf71", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f76e28aa1c093c59671749006e1a7ae203d66b7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76e28aa1c093c59671749006e1a7ae203d66b7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f76e28aa1c093c59671749006e1a7ae203d66b7c", "patch": "@@ -2308,16 +2308,21 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             let my_path = vec::append(/*bad*/copy *pth,\n                                       ~[path_name(i.ident)]);\n             match i.node {\n-              ast::item_const(_, _) => {\n+              ast::item_const(_, expr) => {\n                 let typ = ty::node_id_to_type(ccx.tcx, i.id);\n                 let s = mangle_exported_name(ccx, my_path, typ);\n-                let g = str::as_c_str(s, |buf| {\n-                    unsafe {\n-                        llvm::LLVMAddGlobal(ccx.llmod, type_of(ccx, typ), buf)\n-                    }\n-                });\n-                ccx.item_symbols.insert(i.id, s);\n-                g\n+                // We need the translated value here, because for enums the\n+                // LLVM type is not fully determined by the Rust type.\n+                let v = consts::const_expr(ccx, expr);\n+                ccx.const_values.insert(id, v);\n+                unsafe {\n+                    let llty = llvm::LLVMTypeOf(v);\n+                    let g = str::as_c_str(s, |buf| {\n+                        llvm::LLVMAddGlobal(ccx.llmod, llty, buf)\n+                    });\n+                    ccx.item_symbols.insert(i.id, s);\n+                    g\n+                }\n               }\n               ast::item_fn(_, purity, _, _) => {\n                 let llfn = if purity != ast::extern_fn {"}, {"sha": "baa774724047f5976a95316b50b1af23ae398400", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f76e28aa1c093c59671749006e1a7ae203d66b7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76e28aa1c093c59671749006e1a7ae203d66b7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=f76e28aa1c093c59671749006e1a7ae203d66b7c", "patch": "@@ -464,12 +464,13 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n     }\n }\n \n-fn trans_const(ccx: @crate_ctxt, e: @ast::expr, id: ast::node_id) {\n+fn trans_const(ccx: @crate_ctxt, _e: @ast::expr, id: ast::node_id) {\n     unsafe {\n         let _icx = ccx.insn_ctxt(\"trans_const\");\n         let g = base::get_item_val(ccx, id);\n-        let v = const_expr(ccx, e);\n-        ccx.const_values.insert(id, v);\n+        // At this point, get_item_val has already translated the\n+        // constant's initializer to determine its LLVM type.\n+        let v = ccx.const_values.get(id);\n         llvm::LLVMSetInitializer(g, v);\n         llvm::LLVMSetGlobalConstant(g, True);\n     }"}, {"sha": "6b6db7172698878ff6bc2c098d4b85f93a0250ba", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f76e28aa1c093c59671749006e1a7ae203d66b7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76e28aa1c093c59671749006e1a7ae203d66b7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f76e28aa1c093c59671749006e1a7ae203d66b7c", "patch": "@@ -798,7 +798,11 @@ fn trans_def_lvalue(bcx: block,\n         ast::def_const(did) => {\n             let const_ty = expr_ty(bcx, ref_expr);\n             let val = if did.crate == ast::local_crate {\n-                base::get_item_val(ccx, did.node)\n+                // The LLVM global has the type of its initializer,\n+                // which may not be equal to the enum's type for\n+                // non-C-like enums.\n+                PointerCast(bcx, base::get_item_val(ccx, did.node),\n+                            T_ptr(type_of(bcx.ccx(), const_ty)))\n             } else {\n                 base::trans_external_path(ccx, did, const_ty)\n             };"}]}