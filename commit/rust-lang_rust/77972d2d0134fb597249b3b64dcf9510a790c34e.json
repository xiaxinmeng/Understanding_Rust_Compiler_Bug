{"sha": "77972d2d0134fb597249b3b64dcf9510a790c34e", "node_id": "C_kwDOAAsO6NoAKDc3OTcyZDJkMDEzNGZiNTk3MjQ5YjNiNjRkY2Y5NTEwYTc5MGMzNGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T03:42:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T03:42:04Z"}, "message": "Auto merge of #97126 - JohnTitor:rollup-7gdt2aw, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #96647 (rustdoc-json: Fix HRTBs for WherePredicate::BoundPredicate)\n - #96651 (Omit unnecessary help to add `#[cfg(test)]` when already annotated)\n - #96761 (rustdoc: don't build `rayon` for non-windows targets)\n - #97096 (Types with reachable constructors are reachable)\n - #97097 (Add tmm_reg clobbers)\n - #97113 (Search GUI fixes)\n - #97116 (interpret/validity: reject references to uninhabited types)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "69b8eaa00bb5d5e5f65a275c054d543f2c815467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69b8eaa00bb5d5e5f65a275c054d543f2c815467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77972d2d0134fb597249b3b64dcf9510a790c34e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77972d2d0134fb597249b3b64dcf9510a790c34e", "html_url": "https://github.com/rust-lang/rust/commit/77972d2d0134fb597249b3b64dcf9510a790c34e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77972d2d0134fb597249b3b64dcf9510a790c34e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c5f6e6277b89e47d73a192078697f7a5f3dc0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5f6e6277b89e47d73a192078697f7a5f3dc0ac", "html_url": "https://github.com/rust-lang/rust/commit/4c5f6e6277b89e47d73a192078697f7a5f3dc0ac"}, {"sha": "248890c32ec174596d520936110709deb879a10f", "url": "https://api.github.com/repos/rust-lang/rust/commits/248890c32ec174596d520936110709deb879a10f", "html_url": "https://github.com/rust-lang/rust/commit/248890c32ec174596d520936110709deb879a10f"}], "stats": {"total": 512, "additions": 459, "deletions": 53}, "files": [{"sha": "20d91b80e8c52821904c449c572e2fa681225c8c", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -592,7 +592,7 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => unimplemented!(),\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => unimplemented!(),\n             InlineAsmRegClass::X86(\n-                X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg,\n+                X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg | X86InlineAsmRegClass::tmm_reg,\n             ) => unreachable!(\"clobber-only\"),\n             InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"GCC backend does not support SPIR-V\")\n@@ -656,6 +656,7 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg) => unimplemented!(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => cx.type_i16(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => cx.type_i16(),\n+        InlineAsmRegClass::X86(X86InlineAsmRegClass::tmm_reg) => unimplemented!(),\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => cx.type_i32(),\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n@@ -787,7 +788,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => None,\n-        InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg) => {\n+        InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg | X86InlineAsmRegClass::tmm_reg) => {\n             unreachable!(\"clobber-only\")\n         }\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => unimplemented!(),"}, {"sha": "a53946995ee1c43d484f35369c4e31d72fb9fecf", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -604,7 +604,8 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'_>>) ->\n             InlineAsmRegClass::X86(\n                 X86InlineAsmRegClass::x87_reg\n                 | X86InlineAsmRegClass::mmx_reg\n-                | X86InlineAsmRegClass::kreg0,\n+                | X86InlineAsmRegClass::kreg0\n+                | X86InlineAsmRegClass::tmm_reg,\n             ) => unreachable!(\"clobber-only\"),\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n             InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => \"r\",\n@@ -692,7 +693,8 @@ fn modifier_to_llvm(\n         InlineAsmRegClass::X86(\n             X86InlineAsmRegClass::x87_reg\n             | X86InlineAsmRegClass::mmx_reg\n-            | X86InlineAsmRegClass::kreg0,\n+            | X86InlineAsmRegClass::kreg0\n+            | X86InlineAsmRegClass::tmm_reg,\n         ) => {\n             unreachable!(\"clobber-only\")\n         }\n@@ -766,7 +768,8 @@ fn dummy_output_type<'ll>(cx: &CodegenCx<'ll, '_>, reg: InlineAsmRegClass) -> &'\n         InlineAsmRegClass::X86(\n             X86InlineAsmRegClass::x87_reg\n             | X86InlineAsmRegClass::mmx_reg\n-            | X86InlineAsmRegClass::kreg0,\n+            | X86InlineAsmRegClass::kreg0\n+            | X86InlineAsmRegClass::tmm_reg,\n         ) => {\n             unreachable!(\"clobber-only\")\n         }"}, {"sha": "8770ed956e61f99ceee6929bb3df87c9c89ac541", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -412,22 +412,27 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             self.path,\n             err_ub!(AlignmentCheckFailed { required, has }) =>\n                 {\n-                    \"an unaligned {} (required {} byte alignment but found {})\",\n-                    kind,\n+                    \"an unaligned {kind} (required {} byte alignment but found {})\",\n                     required.bytes(),\n                     has.bytes()\n                 },\n             err_ub!(DanglingIntPointer(0, _)) =>\n-                { \"a null {}\", kind },\n+                { \"a null {kind}\" },\n             err_ub!(DanglingIntPointer(i, _)) =>\n-                { \"a dangling {} (address 0x{:x} is unallocated)\", kind, i },\n+                { \"a dangling {kind} (address 0x{i:x} is unallocated)\" },\n             err_ub!(PointerOutOfBounds { .. }) =>\n-                { \"a dangling {} (going beyond the bounds of its allocation)\", kind },\n+                { \"a dangling {kind} (going beyond the bounds of its allocation)\" },\n             // This cannot happen during const-eval (because interning already detects\n             // dangling pointers), but it can happen in Miri.\n             err_ub!(PointerUseAfterFree(..)) =>\n-                { \"a dangling {} (use-after-free)\", kind },\n+                { \"a dangling {kind} (use-after-free)\" },\n         );\n+        // Do not allow pointers to uninhabited types.\n+        if place.layout.abi.is_uninhabited() {\n+            throw_validation_failure!(self.path,\n+                { \"a {kind} pointing to uninhabited type {}\", place.layout.ty }\n+            )\n+        }\n         // Recursive checking\n         if let Some(ref mut ref_tracking) = self.ref_tracking {\n             // Proceed recursively even for ZST, no reason to skip them!"}, {"sha": "e6c7b4064fb09dc490409225506f6ec0c0e4de9c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -775,7 +775,14 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                         }\n                         // Corner case: if the variant is reachable, but its\n                         // enum is not, make the enum reachable as well.\n-                        self.update(item.def_id, variant_level);\n+                        self.reach(item.def_id, variant_level).ty();\n+                    }\n+                    if let Some(hir_id) = variant.data.ctor_hir_id() {\n+                        let ctor_def_id = self.tcx.hir().local_def_id(hir_id);\n+                        let ctor_level = self.get(ctor_def_id);\n+                        if ctor_level.is_some() {\n+                            self.reach(item.def_id, ctor_level).ty();\n+                        }\n                     }\n                 }\n             }\n@@ -803,6 +810,13 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                         }\n                     }\n                 }\n+                if let Some(hir_id) = struct_def.ctor_hir_id() {\n+                    let ctor_def_id = self.tcx.hir().local_def_id(hir_id);\n+                    let ctor_level = self.get(ctor_def_id);\n+                    if ctor_level.is_some() {\n+                        self.reach(item.def_id, ctor_level).ty();\n+                    }\n+                }\n             }\n         }\n "}, {"sha": "ec3b14ace4df21553bf957af963496708022c8ef", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -315,21 +315,28 @@ impl Resolver<'_> {\n                 \"remove the unused import\"\n             };\n \n-            let parent_module = visitor.r.get_nearest_non_block_module(\n-                visitor.r.local_def_id(unused.use_tree_id).to_def_id(),\n-            );\n-            let test_module_span = match module_to_string(parent_module) {\n-                Some(module)\n-                    if module == \"test\"\n-                        || module == \"tests\"\n-                        || module.starts_with(\"test_\")\n-                        || module.starts_with(\"tests_\")\n-                        || module.ends_with(\"_test\")\n-                        || module.ends_with(\"_tests\") =>\n-                {\n-                    Some(parent_module.span)\n+            // If we are in the `--test` mode, suppress a help that adds the `#[cfg(test)]`\n+            // attribute; however, if not, suggest adding the attribute. There is no way to\n+            // retrieve attributes here because we do not have a `TyCtxt` yet.\n+            let test_module_span = if visitor.r.session.opts.test {\n+                None\n+            } else {\n+                let parent_module = visitor.r.get_nearest_non_block_module(\n+                    visitor.r.local_def_id(unused.use_tree_id).to_def_id(),\n+                );\n+                match module_to_string(parent_module) {\n+                    Some(module)\n+                        if module == \"test\"\n+                            || module == \"tests\"\n+                            || module.starts_with(\"test_\")\n+                            || module.starts_with(\"tests_\")\n+                            || module.ends_with(\"_test\")\n+                            || module.ends_with(\"_tests\") =>\n+                    {\n+                        Some(parent_module.span)\n+                    }\n+                    _ => None,\n                 }\n-                _ => None,\n             };\n \n             visitor.r.lint_buffer.buffer_lint_with_diagnostic("}, {"sha": "5c9c16350e469b3a96fa4d42de2f8b7fc0d4548a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -1408,6 +1408,7 @@ symbols! {\n         thread_local_macro,\n         thumb2,\n         thumb_mode: \"thumb-mode\",\n+        tmm_reg,\n         todo_macro,\n         tool_attributes,\n         tool_lints,"}, {"sha": "df8ccc42a77a33fe27629c09aa0eb2863e1a41ba", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -912,6 +912,7 @@ impl InlineAsmClobberAbi {\n \n                     mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7,\n                     st0, st1, st2, st3, st4, st5, st6, st7,\n+                    tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7,\n                 }\n             },\n             InlineAsmClobberAbi::X86_64Win => clobbered_regs! {\n@@ -931,6 +932,7 @@ impl InlineAsmClobberAbi {\n \n                     mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7,\n                     st0, st1, st2, st3, st4, st5, st6, st7,\n+                    tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7,\n                 }\n             },\n             InlineAsmClobberAbi::AArch64 => clobbered_regs! {"}, {"sha": "e35035fd25af6e52263aad4218d15b16a73d092b", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -17,6 +17,7 @@ def_reg_class! {\n         kreg0,\n         mmx_reg,\n         x87_reg,\n+        tmm_reg,\n     }\n }\n \n@@ -41,6 +42,7 @@ impl X86InlineAsmRegClass {\n             Self::xmm_reg | Self::ymm_reg | Self::zmm_reg => &['x', 'y', 'z'],\n             Self::kreg | Self::kreg0 => &[],\n             Self::mmx_reg | Self::x87_reg => &[],\n+            Self::tmm_reg => &[],\n         }\n     }\n \n@@ -80,6 +82,7 @@ impl X86InlineAsmRegClass {\n             },\n             Self::kreg | Self::kreg0 => None,\n             Self::mmx_reg | Self::x87_reg => None,\n+            Self::tmm_reg => None,\n         }\n     }\n \n@@ -98,6 +101,7 @@ impl X86InlineAsmRegClass {\n             Self::zmm_reg => Some(('z', \"zmm0\")),\n             Self::kreg | Self::kreg0 => None,\n             Self::mmx_reg | Self::x87_reg => None,\n+            Self::tmm_reg => None,\n         }\n     }\n \n@@ -135,6 +139,7 @@ impl X86InlineAsmRegClass {\n             },\n             Self::kreg0 => &[],\n             Self::mmx_reg | Self::x87_reg => &[],\n+            Self::tmm_reg => &[],\n         }\n     }\n }\n@@ -320,6 +325,14 @@ def_regs! {\n         st5: x87_reg = [\"st(5)\"],\n         st6: x87_reg = [\"st(6)\"],\n         st7: x87_reg = [\"st(7)\"],\n+        tmm0: tmm_reg = [\"tmm0\"] % x86_64_only,\n+        tmm1: tmm_reg = [\"tmm1\"] % x86_64_only,\n+        tmm2: tmm_reg = [\"tmm2\"] % x86_64_only,\n+        tmm3: tmm_reg = [\"tmm3\"] % x86_64_only,\n+        tmm4: tmm_reg = [\"tmm4\"] % x86_64_only,\n+        tmm5: tmm_reg = [\"tmm5\"] % x86_64_only,\n+        tmm6: tmm_reg = [\"tmm6\"] % x86_64_only,\n+        tmm7: tmm_reg = [\"tmm7\"] % x86_64_only,\n         #error = [\"bp\", \"bpl\", \"ebp\", \"rbp\"] =>\n             \"the frame pointer cannot be used as an operand for inline asm\",\n         #error = [\"sp\", \"spl\", \"esp\", \"rsp\"] =>"}, {"sha": "f76f9131742ee389211cdafc141553a15268098f", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -1 +1 @@\n-0.9.1\n\\ No newline at end of file\n+0.9.2\n\\ No newline at end of file"}, {"sha": "0495cd97dc229f3adde1b0cfc5437e699eb1410e", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -12,7 +12,6 @@ askama = { version = \"0.11\", default-features = false, features = [\"config\"] }\n atty = \"0.2\"\n pulldown-cmark = { version = \"0.9\", default-features = false }\n minifier = \"0.0.43\"\n-rayon = \"1.5.1\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n smallvec = \"1.6.1\"\n@@ -29,6 +28,9 @@ version = \"0.3.3\"\n default-features = false\n features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"]\n \n+[target.'cfg(windows)'.dependencies]\n+rayon = \"1.5.1\"\n+\n [dev-dependencies]\n expect-test = \"1.0\"\n "}, {"sha": "8dd8eb23df2706fe5f60beffe8d6200d5e06f81c", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -54,7 +54,8 @@ impl DocFS {\n     where\n         E: PathError,\n     {\n-        if !self.sync_only && cfg!(windows) {\n+        #[cfg(windows)]\n+        if !self.sync_only {\n             // A possible future enhancement after more detailed profiling would\n             // be to create the file sync so errors are reported eagerly.\n             let sender = self.errors.clone().expect(\"can't write after closing\");\n@@ -68,6 +69,10 @@ impl DocFS {\n         } else {\n             fs::write(&path, contents).map_err(|e| E::new(e, path))?;\n         }\n+\n+        #[cfg(not(windows))]\n+        fs::write(&path, contents).map_err(|e| E::new(e, path))?;\n+\n         Ok(())\n     }\n }"}, {"sha": "4eb8029ee2db6e4dc3cb947e0d93a0aeaac6d6e8", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -897,7 +897,7 @@ table,\n \tmargin-left: 0.25em;\n \tpadding-left: 0.3125em;\n \tpadding-right: 23px;\n-\tborder: 0;\n+\tborder: 1px solid;\n \tborder-radius: 4px;\n \toutline: none;\n \tcursor: pointer;\n@@ -2010,7 +2010,6 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \n \t#crate-search {\n \t\tborder-radius: 4px;\n-\t\tborder: 0;\n \t}\n \n \t.docblock {"}, {"sha": "d32bb4cf22d6e665823f6e565cb49d7e86438b6c", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -236,8 +236,8 @@ details.undocumented > summary::before {\n \n #crate-search, .search-input {\n \tbackground-color: #141920;\n-\tborder-color: #424c57;\n-\tcolor: #c5c5c5;\n+\t/* Without the `!important`, the border-color is ignored for `<select>`... */\n+\tborder-color: #424c57 !important;\n }\n \n .search-input {"}, {"sha": "4957f25bcf358a3e46bb85215104c9c4d1f80227", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -217,7 +217,8 @@ details.undocumented > summary::before {\n #crate-search, .search-input {\n \tcolor: #111;\n \tbackground-color: #f0f0f0;\n-\tborder-color: #000;\n+\t/* Without the `!important`, the border-color is ignored for `<select>`... */\n+\tborder-color: #f0f0f0 !important;\n }\n \n .search-input {"}, {"sha": "7d4acc6c61181901b2aa5c1736e8c6932f0634a6", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -209,9 +209,9 @@ details.undocumented > summary::before {\n }\n \n #crate-search, .search-input {\n-\tcolor: #555;\n \tbackground-color: white;\n-\tborder-color: #e0e0e0;\n+\t/* Without the `!important`, the border-color is ignored for `<select>`... */\n+\tborder-color: #e0e0e0 !important;\n }\n \n .search-input:focus {"}, {"sha": "c784d69dcd66f1003b83c539ee64f3808085ef52", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -1738,7 +1738,7 @@ function initSearch(rawSearchIndex) {\n \n         let output = \"<div id=\\\"search-settings\\\">\" +\n             `<h1 class=\"search-results-title\">Results for ${escape(results.query.userQuery)}` +\n-            `${typeFilter}</h1> in ${crates} </div>`;\n+            `${typeFilter}</h1>${crates}</div>`;\n         if (results.query.error !== null) {\n             output += `<h3>Query parser error: \"${results.query.error}\".</h3>`;\n             output += \"<div id=\\\"titles\\\">\" +"}, {"sha": "412387313dc1719343e3809eaa3714472daf6cd5", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -350,10 +350,16 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n     fn from_tcx(predicate: clean::WherePredicate, tcx: TyCtxt<'_>) -> Self {\n         use clean::WherePredicate::*;\n         match predicate {\n-            BoundPredicate { ty, bounds, .. } => WherePredicate::BoundPredicate {\n+            BoundPredicate { ty, bounds, bound_params } => WherePredicate::BoundPredicate {\n                 type_: ty.into_tcx(tcx),\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-                // FIXME: add `bound_params` to rustdoc-json-params?\n+                generic_params: bound_params\n+                    .into_iter()\n+                    .map(|x| GenericParamDef {\n+                        name: x.0.to_string(),\n+                        kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n+                    })\n+                    .collect(),\n             },\n             RegionPredicate { lifetime, bounds } => WherePredicate::RegionPredicate {\n                 lifetime: lifetime.0.to_string(),"}, {"sha": "eb2c8e5bae1c43c7b81c6d5a641f11326f1386a5", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 14;\n+pub const FORMAT_VERSION: u32 = 15;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -391,6 +391,14 @@ pub enum WherePredicate {\n         #[serde(rename = \"type\")]\n         type_: Type,\n         bounds: Vec<GenericBound>,\n+        /// Used for Higher-Rank Trait Bounds (HRTBs)\n+        /// ```plain\n+        /// where for<'a> &'a T: Iterator,\"\n+        ///       ^^^^^^^\n+        ///       |\n+        ///       this part\n+        /// ```\n+        generic_params: Vec<GenericParamDef>,\n     },\n     RegionPredicate {\n         lifetime: String,\n@@ -408,7 +416,13 @@ pub enum GenericBound {\n     TraitBound {\n         #[serde(rename = \"trait\")]\n         trait_: Type,\n-        /// Used for HRTBs\n+        /// Used for Higher-Rank Trait Bounds (HRTBs)\n+        /// ```plain\n+        /// where F: for<'a, 'b> Fn(&'a u8, &'b u8)\n+        ///          ^^^^^^^^^^^\n+        ///          |\n+        ///          this part\n+        /// ```\n         generic_params: Vec<GenericParamDef>,\n         modifier: TraitBoundModifier,\n     },\n@@ -487,6 +501,13 @@ pub enum Type {\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n+    /// Used for Higher-Rank Trait Bounds (HRTBs)\n+    /// ```plain\n+    /// for<'c> fn(val: &'c i32) -> i32\n+    /// ^^^^^^^\n+    ///       |\n+    ///       this part\n+    /// ```\n     pub generic_params: Vec<GenericParamDef>,\n     pub header: Header,\n }"}, {"sha": "f70caea2fb9e26417730742ec11bff205e4f536a", "filename": "src/test/codegen/asm-clobber_abi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fcodegen%2Fasm-clobber_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fcodegen%2Fasm-clobber_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-clobber_abi.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -6,29 +6,29 @@\n use std::arch::asm;\n \n // CHECK-LABEL: @clobber_sysv64\n-// CHECK: ={ax},={cx},={dx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: ={ax},={cx},={dx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{tmm0},~{tmm1},~{tmm2},~{tmm3},~{tmm4},~{tmm5},~{tmm6},~{tmm7},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_sysv64() {\n     asm!(\"\", clobber_abi(\"sysv64\"));\n }\n \n // CHECK-LABEL: @clobber_win64\n-// CHECK: ={ax},={cx},={dx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: ={ax},={cx},={dx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{tmm0},~{tmm1},~{tmm2},~{tmm3},~{tmm4},~{tmm5},~{tmm6},~{tmm7},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_win64() {\n     asm!(\"\", clobber_abi(\"win64\"));\n }\n \n // CHECK-LABEL: @clobber_sysv64\n-// CHECK: =&{dx},={ax},={cx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: =&{dx},={ax},={cx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{tmm0},~{tmm1},~{tmm2},~{tmm3},~{tmm4},~{tmm5},~{tmm6},~{tmm7},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_sysv64_edx() {\n     let foo: i32;\n     asm!(\"\", out(\"edx\") foo, clobber_abi(\"sysv64\"));\n }\n \n // CHECK-LABEL: @clobber_win64\n-// CHECK: =&{dx},={ax},={cx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: =&{dx},={ax},={cx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{tmm0},~{tmm1},~{tmm2},~{tmm3},~{tmm4},~{tmm5},~{tmm6},~{tmm7},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_win64_edx() {\n     let foo: i32;"}, {"sha": "ac30e18ec52346791a68bf118c4dc26bc966bd5b", "filename": "src/test/codegen/asm-target-clobbers.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -6,6 +6,13 @@\n \n use std::arch::asm;\n \n+// CHECK-LABEL: @amx_clobber\n+// base: call void asm sideeffect inteldialect \"\", \"~{tmm0}\"()\n+#[no_mangle]\n+pub unsafe fn amx_clobber() {\n+    asm!(\"\", out(\"tmm0\") _, options(nostack, nomem, preserves_flags));\n+}\n+\n // CHECK-LABEL: @avx512_clobber\n // base: call void asm sideeffect inteldialect \"\", \"~{xmm31}\"()\n // avx512: call float asm sideeffect inteldialect \"\", \"=&{xmm31}\"()"}, {"sha": "d0b3175114cce90897c05097cdf11b0247062f35", "filename": "src/test/rustdoc-gui/search-filter.goml", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -45,3 +45,37 @@ goto: file://|DOC_PATH|/test_docs/index.html?search=test&filter-crate=lib2\n wait-for: \"#crate-search\"\n assert-property: (\"#crate-search\", {\"value\": \"lib2\"})\n assert-false: \"#results .externcrate\"\n+\n+// Checking that the text for the \"title\" is correct (the \"All\" comes from the \"<select>\").\n+assert-text: (\"#search-settings\", \"Results for test in All\", STARTS_WITH)\n+\n+// Checking the display of the crate filter.\n+// We start with the light theme.\n+local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+timeout: 2000\n+wait-for: \"#crate-search\"\n+assert-css: (\"#crate-search\", {\n+    \"border\": \"1px solid rgb(224, 224, 224)\",\n+    \"color\": \"rgb(0, 0, 0)\",\n+    \"background-color\": \"rgb(255, 255, 255)\",\n+})\n+\n+// We now check the dark theme.\n+click: \"#settings-menu\"\n+wait-for: \"#settings\"\n+click: \"#theme-dark\"\n+wait-for-css: (\"#crate-search\", {\n+    \"border\": \"1px solid rgb(240, 240, 240)\",\n+    \"color\": \"rgb(17, 17, 17)\",\n+    \"background-color\": \"rgb(240, 240, 240)\",\n+})\n+\n+// And finally we check the ayu theme.\n+click: \"#theme-ayu\"\n+wait-for-css: (\"#crate-search\", {\n+    \"border\": \"1px solid rgb(66, 76, 87)\",\n+    \"color\": \"rgb(197, 197, 197)\",\n+    \"background-color\": \"rgb(20, 25, 32)\",\n+})"}, {"sha": "646f720e66396441d2dbe9d9f9b2355ab251251b", "filename": "src/test/rustdoc-json/fn_pointer/generics.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -0,0 +1,14 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @count generics.json \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[*]\" 1\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][0]\" '\"val\"'\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'c\\\"\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.output\" '{ \"kind\": \"primitive\", \"inner\": \"i32\" }'\n+// @count - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].name\" \\\"\\'c\\\"\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+pub type WithHigherRankTraitBounds = for<'c> fn(val: &'c i32) -> i32;"}, {"sha": "69150443c29dc9059a3c2c0c10c807bcf3c94844", "filename": "src/test/rustdoc-json/fns/generic_args.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -6,6 +6,9 @@\n // @set foo = generic_args.json \"$.index[*][?(@.name=='Foo')].id\"\n pub trait Foo {}\n \n+// @set generic_foo = generic_args.json \"$.index[*][?(@.name=='GenericFoo')].id\"\n+pub trait GenericFoo<'a> {}\n+\n // @is - \"$.index[*][?(@.name=='generics')].inner.generics.where_predicates\" \"[]\"\n // @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[*]\" 1\n // @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].name\" '\"F\"'\n@@ -29,19 +32,40 @@ pub fn generics<F: Foo>(f: F) {}\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.inner.id\" $foo\n pub fn impl_trait(f: impl Foo) {}\n \n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 1\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 3\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].name\" '\"F\"'\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].kind\" '{\"type\": {\"bounds\": [], \"default\": null, \"synthetic\": false}}'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 1\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 3\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][0]\" '\"f\"'\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].inner\" '\"F\"'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 1\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 3\n+\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\", \"kind\": \"generic\"}'\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n-pub fn where_clase<F>(f: F)\n+\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.type\" '{\"inner\": \"G\", \"kind\": \"generic\"}'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $generic_foo\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].name\" \\\"\\'a\\\"\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.generic_params\" \"[]\"\n+\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.lifetime\" \\\"\\'b\\\"\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.type\" '{\"inner\": \"H\", \"kind\": \"generic\"}'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.generic_params\" \"[]\"\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].name\" \\\"\\'b\\\"\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+pub fn where_clase<F, G, H>(f: F, g: G, h: H)\n where\n     F: Foo,\n+    G: for<'a> GenericFoo<'a>,\n+    for<'b> &'b H: Foo,\n {\n }"}, {"sha": "7873b3463c1178ea42e6fdbe3ea552493cb1250c", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.32bit.stderr?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -11,7 +11,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:18:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a value of uninhabited type Bar\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "473497501113ceaa74e25740b651fe1c150bff6c", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -11,7 +11,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:18:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a value of uninhabited type Bar\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "6280a7478e70c19cea7c909a0d4d649e7a0baad2", "filename": "src/test/ui/consts/validate_never_arrays.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.32bit.stderr?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:4:1\n    |\n LL | const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>[0]: encountered a value of the never type `!`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to uninhabited type [!; 1]\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "c5a71e5be51b663cbb56953bced96032c81bb096", "filename": "src/test/ui/consts/validate_never_arrays.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:4:1\n    |\n LL | const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>[0]: encountered a value of the never type `!`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to uninhabited type [!; 1]\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "ed0bb65b3aa91634030de0886a12aff4f671fa9e", "filename": "src/test/ui/imports/unused-imports-in-test-mode.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-mode.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -0,0 +1,84 @@\n+// compile-flags: --test\n+\n+#![deny(unused_imports)]\n+\n+use std::io::BufRead; //~ ERROR unused import: `std::io::BufRead`\n+\n+fn a() {}\n+fn b() {}\n+\n+mod test {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod tests {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod test_a {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod a_test {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod tests_a {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod a_tests {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod fastest_search {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test_has_attr {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod test_has_no_attr {\n+    #[cfg(test)]\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1847abd64b4f22c60db0e1cad5759d944e73f5ed", "filename": "src/test/ui/imports/unused-imports-in-test-mode.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-mode.stderr?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -0,0 +1,122 @@\n+error: unused import: `std::io::BufRead`\n+  --> $DIR/unused-imports-in-test-mode.rs:5:5\n+   |\n+LL | use std::io::BufRead;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-imports-in-test-mode.rs:3:9\n+   |\n+LL | #![deny(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-mode.rs:11:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-mode.rs:14:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-mode.rs:19:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-mode.rs:22:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-mode.rs:27:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-mode.rs:30:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-mode.rs:35:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-mode.rs:38:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-mode.rs:43:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-mode.rs:46:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-mode.rs:51:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-mode.rs:54:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-mode.rs:59:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-mode.rs:62:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-mode.rs:68:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-mode.rs:71:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-mode.rs:77:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-mode.rs:80:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+\n+error: aborting due to 19 previous errors\n+"}, {"sha": "9c99cca9ae6edc1c49cb637635ab99a52aa7aa37", "filename": "src/test/ui/privacy/auxiliary/ctor_aux.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fctor_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fctor_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fctor_aux.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -0,0 +1,25 @@\n+// edition:2021\n+//! Missing docs lint warns about undocumented exported items.\n+//! Use the lint to additionally verify that items are reachable\n+//! but not exported.\n+#![allow(non_camel_case_types)]\n+#![deny(missing_docs)]\n+\n+mod hidden {\n+    pub struct s;\n+    pub enum e { x, y, z }\n+    pub use e::*;\n+    impl s {\n+        pub fn f(&self) {}\n+    }\n+    impl e {\n+        pub fn g(&self) {}\n+    }\n+}\n+// Hide all type definitions while reexporting their constructors:\n+mod e {}\n+mod x {}\n+mod y {}\n+mod z {}\n+mod s {}\n+pub use hidden::*;"}, {"sha": "0ec15d68ed39ee30f55cfbe34d8b3d38db05ac73", "filename": "src/test/ui/privacy/ctor.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fprivacy%2Fctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972d2d0134fb597249b3b64dcf9510a790c34e/src%2Ftest%2Fui%2Fprivacy%2Fctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fctor.rs?ref=77972d2d0134fb597249b3b64dcf9510a790c34e", "patch": "@@ -0,0 +1,16 @@\n+// Verify that a type is considered reachable when its constructor is\n+// reachable. The auxiliary library is constructed so that all types are\n+// shadowed and cannot be named directly, while their constructors are\n+// reexported. Regression test for issue #96934.\n+//\n+// aux-build:ctor_aux.rs\n+// edition:2021\n+// build-pass\n+\n+extern crate ctor_aux;\n+\n+fn main() {\n+    ctor_aux::s.f();\n+    ctor_aux::x.g();\n+    ctor_aux::y.g();\n+}"}]}