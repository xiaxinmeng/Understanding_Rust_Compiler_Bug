{"sha": "d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "node_id": "C_kwDOAAsO6NoAKGQxOTgyYmQwYWYwYWMzZTliYzBiMWUzYmY1OTZhMWE1Yzg0ZTYwYWY", "commit": {"author": {"name": "Rageking8", "email": "tomleetyt@gmail.com", "date": "2022-10-12T16:12:19Z"}, "committer": {"name": "Rageking8", "email": "tomleetyt@gmail.com", "date": "2022-10-12T16:53:46Z"}, "message": "fix small word dupe typos", "tree": {"sha": "0ea5cee5b1a24c63436fd259e5bad2306e6b7fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea5cee5b1a24c63436fd259e5bad2306e6b7fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "html_url": "https://github.com/rust-lang/rust/commit/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/comments", "author": {"login": "Rageking8", "id": 106309953, "node_id": "U_kgDOBlYpQQ", "avatar_url": "https://avatars.githubusercontent.com/u/106309953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rageking8", "html_url": "https://github.com/Rageking8", "followers_url": "https://api.github.com/users/Rageking8/followers", "following_url": "https://api.github.com/users/Rageking8/following{/other_user}", "gists_url": "https://api.github.com/users/Rageking8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rageking8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rageking8/subscriptions", "organizations_url": "https://api.github.com/users/Rageking8/orgs", "repos_url": "https://api.github.com/users/Rageking8/repos", "events_url": "https://api.github.com/users/Rageking8/events{/privacy}", "received_events_url": "https://api.github.com/users/Rageking8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rageking8", "id": 106309953, "node_id": "U_kgDOBlYpQQ", "avatar_url": "https://avatars.githubusercontent.com/u/106309953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rageking8", "html_url": "https://github.com/Rageking8", "followers_url": "https://api.github.com/users/Rageking8/followers", "following_url": "https://api.github.com/users/Rageking8/following{/other_user}", "gists_url": "https://api.github.com/users/Rageking8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rageking8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rageking8/subscriptions", "organizations_url": "https://api.github.com/users/Rageking8/orgs", "repos_url": "https://api.github.com/users/Rageking8/repos", "events_url": "https://api.github.com/users/Rageking8/events{/privacy}", "received_events_url": "https://api.github.com/users/Rageking8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f6d337c632cbb5bd1dc3a80b5d428cebd8dce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f6d337c632cbb5bd1dc3a80b5d428cebd8dce4", "html_url": "https://github.com/rust-lang/rust/commit/50f6d337c632cbb5bd1dc3a80b5d428cebd8dce4"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "6ed8370e8c1c7f64fec42dc1cc6ff3fcbda2024c", "filename": "compiler/rustc_error_codes/src/error_codes/E0591.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0591.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0591.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0591.md?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -53,8 +53,8 @@ unsafe {\n ```\n \n Here, transmute is being used to convert the types of the fn arguments.\n-This pattern is incorrect because, because the type of `foo` is a function\n-**item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n+This pattern is incorrect because the type of `foo` is a function **item**\n+(`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n is a function pointer, which is not zero-sized.\n This pattern should be rewritten. There are a few possible ways to do this:\n "}, {"sha": "5a5e9db81a2433d73cf78492dbe31d49bafadcde", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -1283,7 +1283,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         assert!(old_value.is_none());\n     }\n \n-    /// Process the region constraints and return any any errors that\n+    /// Process the region constraints and return any errors that\n     /// result. After this, no more unification operations should be\n     /// done -- or the compiler will panic -- but it is legal to use\n     /// `resolve_vars_if_possible` as well as `fully_resolve`."}, {"sha": "16c634e9afd50110519875b191aa035c3bc6e13e", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -86,7 +86,7 @@ fn test_errorkind_packing() {\n     assert_eq!(Error::from(ErrorKind::NotFound).kind(), ErrorKind::NotFound);\n     assert_eq!(Error::from(ErrorKind::PermissionDenied).kind(), ErrorKind::PermissionDenied);\n     assert_eq!(Error::from(ErrorKind::Uncategorized).kind(), ErrorKind::Uncategorized);\n-    // Check that the innards look like like what we want.\n+    // Check that the innards look like what we want.\n     assert_matches!(\n         Error::from(ErrorKind::OutOfMemory).repr.data(),\n         ErrorData::Simple(ErrorKind::OutOfMemory),"}, {"sha": "94546ca09d00d859bdf3863eb4cead3f9223d120", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -20,7 +20,7 @@\n //! Since those syscalls have requirements that cannot be fully checked in advance and\n //! gathering additional information about file descriptors would require additional syscalls\n //! anyway it simply attempts to use them one after another (guided by inaccurate hints) to\n-//! figure out which one works and and falls back to the generic read-write copy loop if none of them\n+//! figure out which one works and falls back to the generic read-write copy loop if none of them\n //! does.\n //! Once a working syscall is found for a pair of file descriptors it will be called in a loop\n //! until the copy operation is completed."}, {"sha": "1714cec5221de4e8cdeb6b9819f31d25dc8c9d64", "filename": "src/test/ui/async-await/issue-64130-1-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -1,7 +1,7 @@\n #![feature(negative_impls)]\n // edition:2018\n \n-// This tests the the specialized async-await-specific error when futures don't implement an\n+// This tests the specialized async-await-specific error when futures don't implement an\n // auto trait (which is specifically Sync) due to some type that was captured.\n \n struct Foo;"}, {"sha": "7a6e5952cb956df7bfed253cb716c31dd01bec01", "filename": "src/test/ui/async-await/issue-64130-2-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -1,7 +1,7 @@\n #![feature(negative_impls)]\n // edition:2018\n \n-// This tests the the specialized async-await-specific error when futures don't implement an\n+// This tests the specialized async-await-specific error when futures don't implement an\n // auto trait (which is specifically Send) due to some type that was captured.\n \n struct Foo;"}, {"sha": "630fb2c41cded629a7d0c6eb9c452988a6e2632d", "filename": "src/test/ui/async-await/issue-64130-3-other.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -2,7 +2,7 @@\n #![feature(negative_impls)]\n // edition:2018\n \n-// This tests the the unspecialized async-await-specific error when futures don't implement an\n+// This tests the unspecialized async-await-specific error when futures don't implement an\n // auto trait (which is not Send or Sync) due to some type that was captured.\n \n auto trait Qux {}"}, {"sha": "9b1212694f5ba886a0534ebb5f3c931ee65e0363", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -1,7 +1,7 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n-// The goal is is to get an unevaluated const `ct` with a `Ty::Infer(TyVar(_#1t)` subst.\n+// The goal is to get an unevaluated const `ct` with a `Ty::Infer(TyVar(_#1t)` subst.\n //\n // If we are then able to infer `ty::Infer(TyVar(_#1t) := Ty<ct>` we introduced an\n // artificial inference cycle."}, {"sha": "d5aeab47e62b0ae2ad0fd1fdab330d98edf1c246", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -1,7 +1,7 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n-// The goal is is to get an unevaluated const `ct` with a `Ty::Infer(TyVar(_#1t)` subst.\n+// The goal is to get an unevaluated const `ct` with a `Ty::Infer(TyVar(_#1t)` subst.\n //\n // If we are then able to infer `ty::Infer(TyVar(_#1t) := Ty<ct>` we introduced an\n // artificial inference cycle."}, {"sha": "0417e952eb71d3a19571384b623ada2e6cb97472", "filename": "src/test/ui/deprecation/deprecation-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -51,7 +51,7 @@ mod cross_crate {\n \n         let _ = nested::DeprecatedTupleStruct (1); //~ ERROR use of deprecated tuple struct `deprecation_lint::nested::DeprecatedTupleStruct`: text\n \n-        // At the moment, the lint checker only checks stability in\n+        // At the moment, the lint checker only checks stability\n         // in the arguments of macros.\n         // Eventually, we will want to lint the contents of the\n         // macro in the module *defining* it. Also, stability levels"}, {"sha": "ef1d866c3ff3b153a3e25b200dbbfc674106accb", "filename": "src/test/ui/explain.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fexplain.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fexplain.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplain.stdout?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -47,8 +47,8 @@ unsafe {\n ```\n \n Here, transmute is being used to convert the types of the fn arguments.\n-This pattern is incorrect because, because the type of `foo` is a function\n-**item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n+This pattern is incorrect because the type of `foo` is a function **item**\n+(`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n is a function pointer, which is not zero-sized.\n This pattern should be rewritten. There are a few possible ways to do this:\n "}, {"sha": "3470a7e09ad8bba2948234a4df95c25a5796e53f", "filename": "src/test/ui/issues/issue-29746.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fissues%2Fissue-29746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fissues%2Fissue-29746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29746.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -7,7 +7,7 @@ macro_rules! zip {\n         zip!([$($rest),*], $a.zip($b), (x,y), [x,y])\n     };\n \n-    // Intermediate steps to build the zipped expression, the match pattern, and\n+    // Intermediate steps to build the zipped expression, the match pattern\n     //  and the output tuple of the closure, using macro hygiene to repeatedly\n     //  introduce new variables named 'x'.\n     ([$a:expr, $($rest:expr),*], $zip:expr, $pat:pat, [$($flat:expr),*]) => {"}, {"sha": "6da99cf6435cff9b9050d8788358eef382caced4", "filename": "src/test/ui/issues/issue-75907.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fissues%2Fissue-75907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fissues%2Fissue-75907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -1,4 +1,4 @@\n-// Test for for diagnostic improvement issue #75907\n+// Test for diagnostic improvement issue #75907\n \n mod foo {\n     pub(crate) struct Foo(u8);"}, {"sha": "fdfc5907c167477108221f9729ff8d9f74ed92b5", "filename": "src/test/ui/issues/issue-75907_b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -1,4 +1,4 @@\n-// Test for for diagnostic improvement issue #75907, extern crate\n+// Test for diagnostic improvement issue #75907, extern crate\n // aux-build:issue-75907.rs\n \n extern crate issue_75907 as a;"}, {"sha": "74c35083e60b5766f9e22b642a40357b6b08f9eb", "filename": "src/test/ui/lint/lint-stability-deprecated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -130,7 +130,7 @@ mod cross_crate {\n         let _ = UnstableTupleStruct (1);\n         let _ = StableTupleStruct (1);\n \n-        // At the moment, the lint checker only checks stability in\n+        // At the moment, the lint checker only checks stability\n         // in the arguments of macros.\n         // Eventually, we will want to lint the contents of the\n         // macro in the module *defining* it. Also, stability levels"}, {"sha": "70b8d8da19b3261d070d3a5f28d9c35f43c053f3", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -19,8 +19,8 @@ macro_rules! produce_it {\n         // `print_def_site!` will respan the `$crate` identifier\n         // with `Span::def_site()`. This should cause it to resolve\n         // relative to `meta_macro`, *not* `make_macro` (despite\n-        // the fact that that `print_def_site` is produced by\n-        // a `macro_rules!` macro in `make_macro`).\n+        // the fact that `print_def_site` is produced by a\n+        // `macro_rules!` macro in `make_macro`).\n         meta_macro::print_def_site!($crate::dummy!());\n     }\n }"}, {"sha": "6b7b0c819cca6a29ce39b6885bde715f280a6223", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=d1982bd0af0ac3e9bc0b1e3bf596a1a5c84e60af", "patch": "@@ -35,8 +35,8 @@ macro_rules! produce_it\n         // `print_def_site!` will respan the `$crate` identifier\n         // with `Span::def_site()`. This should cause it to resolve\n         // relative to `meta_macro`, *not* `make_macro` (despite\n-        // the fact that that `print_def_site` is produced by\n-        // a `macro_rules!` macro in `make_macro`).\n+        // the fact that `print_def_site` is produced by a\n+        // `macro_rules!` macro in `make_macro`).\n     }\n }\n "}]}