{"sha": "8e5e1a0d3c796d224d4f63bcf3be421c91386d39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNWUxYTBkM2M3OTZkMjI0ZDRmNjNiY2YzYmU0MjFjOTEzODZkMzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-25T02:55:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-25T02:55:36Z"}, "message": "Rollup merge of #61113 - SimonSapin:fnbox, r=alexcrichton\n\nDeprecate `FnBox`. `Box<dyn FnOnce()>` can be called directly, since 1.35\n\nFCP completion: https://github.com/rust-lang/rust/issues/28796#issuecomment-439731515", "tree": {"sha": "af773fddd2bc2420cefc02c2054d4a39277e9182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af773fddd2bc2420cefc02c2054d4a39277e9182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e5e1a0d3c796d224d4f63bcf3be421c91386d39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc6K6oCRBK7hj4Ov3rIwAAdHIIACPLQ3+QTdncn2FV3RH8g2RH\nNP8HI1c4Vh3+iWtJ30wkhzSlvpuDX/VKmb/BDMMUOgvswgmrSF5N6aCNIY+o+4Nc\n0m+rRXZ0KuOw1wf4eW5spnL3xLQcCNeJHiWb6bcPaMZG5ogjMOy4L+3wrnnemz5D\nP8oXZxjkhc59HihjsE/NogsU9pjemHm38v72rQJzpQRXpYN1C37fkD0ofQ6MZ7GR\nMdTNfHOv5tn8VeiQoohhBVTBNp2Q9ynnd9nlYLAit96UPVQgVtWYzzThE/xRpXT1\nMzuzC4OdcSBj/rFLMYkxWqenwG9O1ODwkd15iBR5lr8rtl/e5OL2srtD2Isw8w8=\n=kXU1\n-----END PGP SIGNATURE-----\n", "payload": "tree af773fddd2bc2420cefc02c2054d4a39277e9182\nparent 65ddf284b6188b35cc1e5e65c27ebf30a63c5fee\nparent 73fd3497d4cc65c733cc1848bea363c00cb87878\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558752936 +0200\ncommitter GitHub <noreply@github.com> 1558752936 +0200\n\nRollup merge of #61113 - SimonSapin:fnbox, r=alexcrichton\n\nDeprecate `FnBox`. `Box<dyn FnOnce()>` can be called directly, since 1.35\n\nFCP completion: https://github.com/rust-lang/rust/issues/28796#issuecomment-439731515\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5e1a0d3c796d224d4f63bcf3be421c91386d39", "html_url": "https://github.com/rust-lang/rust/commit/8e5e1a0d3c796d224d4f63bcf3be421c91386d39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65ddf284b6188b35cc1e5e65c27ebf30a63c5fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ddf284b6188b35cc1e5e65c27ebf30a63c5fee", "html_url": "https://github.com/rust-lang/rust/commit/65ddf284b6188b35cc1e5e65c27ebf30a63c5fee"}, {"sha": "73fd3497d4cc65c733cc1848bea363c00cb87878", "url": "https://api.github.com/repos/rust-lang/rust/commits/73fd3497d4cc65c733cc1848bea363c00cb87878", "html_url": "https://github.com/rust-lang/rust/commit/73fd3497d4cc65c733cc1848bea363c00cb87878"}], "stats": {"total": 89, "additions": 54, "deletions": 35}, "files": [{"sha": "bf8f5b8b91a1eccf60d13d2c6d40e31d2eb904dc", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=8e5e1a0d3c796d224d4f63bcf3be421c91386d39", "patch": "@@ -759,13 +759,14 @@ impl<A, F: Fn<A> + ?Sized> Fn<A> for Box<F> {\n     }\n }\n \n+/// `FnBox` is deprecated and will be removed.\n+/// `Box<dyn FnOnce()>` can be called directly, since Rust 1.35.0.\n+///\n /// `FnBox` is a version of the `FnOnce` intended for use with boxed\n-/// closure objects. The idea is that where one would normally store a\n-/// `Box<dyn FnOnce()>` in a data structure, you should use\n+/// closure objects. The idea was that where one would normally store a\n+/// `Box<dyn FnOnce()>` in a data structure, you whould use\n /// `Box<dyn FnBox()>`. The two traits behave essentially the same, except\n-/// that a `FnBox` closure can only be called if it is boxed. (Note\n-/// that `FnBox` may be deprecated in the future if `Box<dyn FnOnce()>`\n-/// closures become directly usable.)\n+/// that a `FnBox` closure can only be called if it is boxed.\n ///\n /// # Examples\n ///\n@@ -777,6 +778,7 @@ impl<A, F: Fn<A> + ?Sized> Fn<A> for Box<F> {\n ///\n /// ```\n /// #![feature(fnbox)]\n+/// #![allow(deprecated)]\n ///\n /// use std::boxed::FnBox;\n /// use std::collections::HashMap;\n@@ -796,16 +798,38 @@ impl<A, F: Fn<A> + ?Sized> Fn<A> for Box<F> {\n ///     }\n /// }\n /// ```\n+///\n+/// In Rust 1.35.0 or later, use `FnOnce`, `FnMut`, or `Fn` instead:\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// fn make_map() -> HashMap<i32, Box<dyn FnOnce() -> i32>> {\n+///     let mut map: HashMap<i32, Box<dyn FnOnce() -> i32>> = HashMap::new();\n+///     map.insert(1, Box::new(|| 22));\n+///     map.insert(2, Box::new(|| 44));\n+///     map\n+/// }\n+///\n+/// fn main() {\n+///     let mut map = make_map();\n+///     for i in &[1, 2] {\n+///         let f = map.remove(&i).unwrap();\n+///         assert_eq!(f(), i * 22);\n+///     }\n+/// }\n+/// ```\n #[rustc_paren_sugar]\n-#[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n+#[unstable(feature = \"fnbox\", issue = \"28796\")]\n+#[rustc_deprecated(reason = \"use `FnOnce`, `FnMut`, or `Fn` instead\", since = \"1.37.0\")]\n pub trait FnBox<A>: FnOnce<A> {\n     /// Performs the call operation.\n     fn call_box(self: Box<Self>, args: A) -> Self::Output;\n }\n \n-#[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n+#[unstable(feature = \"fnbox\", issue = \"28796\")]\n+#[rustc_deprecated(reason = \"use `FnOnce`, `FnMut`, or `Fn` instead\", since = \"1.37.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n impl<A, F> FnBox<A> for F\n     where F: FnOnce<A>\n {"}, {"sha": "8bd0d74cd1710673bd62e8a34d22a1c7118e04f9", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8e5e1a0d3c796d224d4f63bcf3be421c91386d39", "patch": "@@ -22,7 +22,6 @@\n #![unstable(feature = \"test\", issue = \"27812\")]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n #![feature(asm)]\n-#![feature(fnbox)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc, rustc_private))]\n #![feature(nll)]\n #![feature(set_stdio)]\n@@ -56,7 +55,6 @@ pub use self::TestResult::*;\n \n use std::any::Any;\n use std::borrow::Cow;\n-use std::boxed::FnBox;\n use std::cmp;\n use std::collections::BTreeMap;\n use std::env;\n@@ -174,7 +172,7 @@ pub trait TDynBenchFn: Send {\n pub enum TestFn {\n     StaticTestFn(fn()),\n     StaticBenchFn(fn(&mut Bencher)),\n-    DynTestFn(Box<dyn FnBox() + Send>),\n+    DynTestFn(Box<dyn FnOnce() + Send>),\n     DynBenchFn(Box<dyn TDynBenchFn + 'static>),\n }\n \n@@ -1447,7 +1445,7 @@ pub fn run_test(\n         desc: TestDesc,\n         monitor_ch: Sender<MonitorMsg>,\n         nocapture: bool,\n-        testfn: Box<dyn FnBox() + Send>,\n+        testfn: Box<dyn FnOnce() + Send>,\n         concurrency: Concurrent,\n     ) {\n         // Buffer for capturing standard I/O"}, {"sha": "74a4dd5d8515b3825743b6b1f1f971a58cae4093", "filename": "src/test/run-pass/unsized-locals/fnbox-compat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/src%2Ftest%2Frun-pass%2Funsized-locals%2Ffnbox-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/src%2Ftest%2Frun-pass%2Funsized-locals%2Ffnbox-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Ffnbox-compat.rs?ref=8e5e1a0d3c796d224d4f63bcf3be421c91386d39", "patch": "@@ -1,4 +1,5 @@\n #![feature(fnbox)]\n+#![allow(deprecated, deprecated_in_future)]\n \n use std::boxed::FnBox;\n "}, {"sha": "c242b6c2c20a28047a87918c1ebe2385284ec52c", "filename": "src/test/ui/confuse-field-and-method/issue-2392.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs?ref=8e5e1a0d3c796d224d4f63bcf3be421c91386d39", "patch": "@@ -1,7 +1,3 @@\n-#![feature(core, fnbox)]\n-\n-use std::boxed::FnBox;\n-\n struct FuncContainer {\n     f1: fn(data: u8),\n     f2: extern \"C\" fn(data: u8),\n@@ -18,7 +14,7 @@ struct Obj<F> where F: FnOnce() -> u32 {\n }\n \n struct BoxedObj {\n-    boxed_closure: Box<FnBox() -> u32>,\n+    boxed_closure: Box<FnOnce() -> u32>,\n }\n \n struct Wrapper<F> where F: FnMut() -> u32 {\n@@ -29,8 +25,8 @@ fn func() -> u32 {\n     0\n }\n \n-fn check_expression() -> Obj<Box<FnBox() -> u32>> {\n-    Obj { closure: Box::new(|| 42_u32) as Box<FnBox() -> u32>, not_closure: 42 }\n+fn check_expression() -> Obj<Box<FnOnce() -> u32>> {\n+    Obj { closure: Box::new(|| 42_u32) as Box<FnOnce() -> u32>, not_closure: 42 }\n }\n \n fn main() {\n@@ -48,7 +44,7 @@ fn main() {\n     let boxed_fn = BoxedObj { boxed_closure: Box::new(func) };\n     boxed_fn.boxed_closure();//~ ERROR no method named `boxed_closure` found\n \n-    let boxed_closure = BoxedObj { boxed_closure: Box::new(|| 42_u32) as Box<FnBox() -> u32> };\n+    let boxed_closure = BoxedObj { boxed_closure: Box::new(|| 42_u32) as Box<FnOnce() -> u32> };\n     boxed_closure.boxed_closure();//~ ERROR no method named `boxed_closure` found\n \n     // test expression writing in the notes"}, {"sha": "351cfef1b53ea0517de30663cd7a9b88ad62926e", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e5e1a0d3c796d224d4f63bcf3be421c91386d39/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=8e5e1a0d3c796d224d4f63bcf3be421c91386d39", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: no method named `closure` found for type `Obj<[closure@$DIR/issue-2392.rs:39:36: 39:41]>` in the current scope\n-  --> $DIR/issue-2392.rs:40:15\n+error[E0599]: no method named `closure` found for type `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n+  --> $DIR/issue-2392.rs:36:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n@@ -11,8 +11,8 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (o_closure.closure)();\n    |     ^                 ^\n \n-error[E0599]: no method named `not_closure` found for type `Obj<[closure@$DIR/issue-2392.rs:39:36: 39:41]>` in the current scope\n-  --> $DIR/issue-2392.rs:42:15\n+error[E0599]: no method named `not_closure` found for type `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n+  --> $DIR/issue-2392.rs:38:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `not_closure` not found for this\n@@ -23,7 +23,7 @@ LL |     o_closure.not_closure();\n    |               field, not a method\n \n error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n-  --> $DIR/issue-2392.rs:46:12\n+  --> $DIR/issue-2392.rs:42:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n@@ -36,7 +36,7 @@ LL |     (o_func.closure)();\n    |     ^              ^\n \n error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n-  --> $DIR/issue-2392.rs:49:14\n+  --> $DIR/issue-2392.rs:45:14\n    |\n LL | struct BoxedObj {\n    | --------------- method `boxed_closure` not found for this\n@@ -49,7 +49,7 @@ LL |     (boxed_fn.boxed_closure)();\n    |     ^                      ^\n \n error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n-  --> $DIR/issue-2392.rs:52:19\n+  --> $DIR/issue-2392.rs:48:19\n    |\n LL | struct BoxedObj {\n    | --------------- method `boxed_closure` not found for this\n@@ -62,7 +62,7 @@ LL |     (boxed_closure.boxed_closure)();\n    |     ^                           ^\n \n error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n-  --> $DIR/issue-2392.rs:57:12\n+  --> $DIR/issue-2392.rs:53:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n@@ -75,7 +75,7 @@ LL |     (w.wrap.closure)();\n    |     ^              ^\n \n error[E0599]: no method named `not_closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n-  --> $DIR/issue-2392.rs:59:12\n+  --> $DIR/issue-2392.rs:55:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `not_closure` not found for this\n@@ -85,8 +85,8 @@ LL |     w.wrap.not_closure();\n    |            |\n    |            field, not a method\n \n-error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::boxed::FnBox<(), Output = u32> + 'static)>>` in the current scope\n-  --> $DIR/issue-2392.rs:62:24\n+error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::ops::FnOnce() -> u32 + 'static)>>` in the current scope\n+  --> $DIR/issue-2392.rs:58:24\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n@@ -99,7 +99,7 @@ LL |     (check_expression().closure)();\n    |     ^                          ^\n \n error[E0599]: no method named `f1` found for type `FuncContainer` in the current scope\n-  --> $DIR/issue-2392.rs:68:31\n+  --> $DIR/issue-2392.rs:64:31\n    |\n LL | struct FuncContainer {\n    | -------------------- method `f1` not found for this\n@@ -112,7 +112,7 @@ LL |             ((*self.container).f1)(1);\n    |             ^                    ^\n \n error[E0599]: no method named `f2` found for type `FuncContainer` in the current scope\n-  --> $DIR/issue-2392.rs:69:31\n+  --> $DIR/issue-2392.rs:65:31\n    |\n LL | struct FuncContainer {\n    | -------------------- method `f2` not found for this\n@@ -125,7 +125,7 @@ LL |             ((*self.container).f2)(1);\n    |             ^                    ^\n \n error[E0599]: no method named `f3` found for type `FuncContainer` in the current scope\n-  --> $DIR/issue-2392.rs:70:31\n+  --> $DIR/issue-2392.rs:66:31\n    |\n LL | struct FuncContainer {\n    | -------------------- method `f3` not found for this"}]}