{"sha": "6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOGJiMmMxYzA5Zjc5MWEzYThhN2YyNTk5MzNlNzNkYWViMGMyOGM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-30T01:09:26Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-30T01:09:32Z"}, "message": "Add initial error reporting via rustc's interface.", "tree": {"sha": "65b947c702044cda6d94e4a0848b7f12549754d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65b947c702044cda6d94e4a0848b7f12549754d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c", "html_url": "https://github.com/rust-lang/rust/commit/6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4dcdcab650f1c32864ac243fbdb410e5115a957", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4dcdcab650f1c32864ac243fbdb410e5115a957", "html_url": "https://github.com/rust-lang/rust/commit/e4dcdcab650f1c32864ac243fbdb410e5115a957"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "8f450388c7bd7c5c4b4e0ee08b690c271b404c48", "filename": "src/interpreter.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c", "patch": "@@ -16,7 +16,7 @@ use std::ops::Deref;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::DUMMY_SP;\n+use syntax::codemap::{self, DUMMY_SP};\n \n use error::{EvalError, EvalResult};\n use memory::{self, FieldRepr, Memory, Pointer, Repr};\n@@ -122,6 +122,14 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         }\n     }\n \n+    fn maybe_report<T>(&self, span: codemap::Span, r: EvalResult<T>) -> EvalResult<T> {\n+        if let Err(ref e) = r {\n+            let mut err = self.tcx.sess.struct_span_err(span, &e.to_string());\n+            err.emit();\n+        }\n+        r\n+    }\n+\n     fn run(&mut self) -> EvalResult<()> {\n         use std::fmt::Debug;\n         fn print_trace<T: Debug>(t: &T, suffix: &'static str, indent: usize) {\n@@ -141,13 +149,15 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 for stmt in &block_data.statements {\n                     print_trace(stmt, \"\", self.stack.len() + 1);\n                     let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n-                    try!(self.eval_assignment(lvalue, rvalue));\n+                    let result = self.eval_assignment(lvalue, rvalue);\n+                    try!(self.maybe_report(stmt.span, result));\n                 }\n \n                 let terminator = block_data.terminator();\n                 print_trace(terminator, \"\", self.stack.len() + 1);\n \n-                match try!(self.eval_terminator(terminator)) {\n+                let result = self.eval_terminator(terminator);\n+                match try!(self.maybe_report(terminator.span, result)) {\n                     TerminatorTarget::Block(block) => current_block = block,\n                     TerminatorTarget::Return => {\n                         self.pop_stack_frame();\n@@ -1146,7 +1156,11 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n                     ty::FnDiverging => None,\n                 };\n                 miri.push_stack_frame(CachedMir::Ref(mir), return_ptr);\n-                miri.run().unwrap();\n+                if let Err(_e) = miri.run() {\n+                    // // TODO(tsion): report error\n+                    // let err = tcx.struct_err()\n+                }\n+                tcx.sess.abort_if_errors();\n \n                 if let Some(ret) = return_ptr {\n                     println!(\"Result:\");"}]}