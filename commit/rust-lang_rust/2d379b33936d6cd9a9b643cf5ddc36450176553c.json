{"sha": "2d379b33936d6cd9a9b643cf5ddc36450176553c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMzc5YjMzOTM2ZDZjZDlhOWI2NDNjZjVkZGMzNjQ1MDE3NjU1M2M=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-06-14T11:36:30Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-06-14T11:36:30Z"}, "message": "Fix formatting and add a test for destruction order of unbound values", "tree": {"sha": "7bb580a28866702a2306f68a33ba7716d5b84c6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bb580a28866702a2306f68a33ba7716d5b84c6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d379b33936d6cd9a9b643cf5ddc36450176553c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d379b33936d6cd9a9b643cf5ddc36450176553c", "html_url": "https://github.com/rust-lang/rust/commit/2d379b33936d6cd9a9b643cf5ddc36450176553c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d379b33936d6cd9a9b643cf5ddc36450176553c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbb655a1e3a6e0b5525b8ef8109a0546d874f707", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb655a1e3a6e0b5525b8ef8109a0546d874f707", "html_url": "https://github.com/rust-lang/rust/commit/dbb655a1e3a6e0b5525b8ef8109a0546d874f707"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "f2a434979535d361022c387b225dd0aaa8645f30", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d379b33936d6cd9a9b643cf5ddc36450176553c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d379b33936d6cd9a9b643cf5ddc36450176553c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2d379b33936d6cd9a9b643cf5ddc36450176553c", "patch": "@@ -2190,14 +2190,16 @@ impl<'a> LoweringContext<'a> {\n \n                 let next_ident = self.str_to_ident(\"next\");\n                 let next_pat = self.pat_ident(e.span, next_ident);\n-                \n+\n                 // `::std::option::Option::Some(val) => next = val`\n                 let pat_arm = {\n                     let val_ident = self.str_to_ident(\"val\");\n                     let val_pat = self.pat_ident(e.span, val_ident);\n                     let val_expr = P(self.expr_ident(e.span, val_ident, val_pat.id));\n                     let next_expr = P(self.expr_ident(e.span, next_ident, next_pat.id));\n-                    let assign = P(self.expr(e.span, hir::ExprAssign(next_expr, val_expr), ThinVec::new()));\n+                    let assign = P(self.expr(e.span,\n+                                             hir::ExprAssign(next_expr, val_expr),\n+                                             ThinVec::new()));\n                     let some_pat = self.pat_some(e.span, val_pat);\n                     self.arm(hir_vec![some_pat], assign)\n                 };\n@@ -2232,7 +2234,7 @@ impl<'a> LoweringContext<'a> {\n                 let match_stmt = respan(e.span, hir::StmtExpr(match_expr, self.next_id()));\n \n                 let next_expr = P(self.expr_ident(e.span, next_ident, next_pat.id));\n-                \n+\n                 // `let next`\n                 let next_let = self.stmt_let_pat(e.span,\n                     None,\n@@ -2251,7 +2253,12 @@ impl<'a> LoweringContext<'a> {\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n                 let body_stmt = respan(e.span, hir::StmtExpr(body_expr, self.next_id()));\n \n-                let loop_block = P(self.block_all(e.span, hir_vec![next_let, match_stmt, pat_let, body_stmt], None));\n+                let loop_block = P(self.block_all(e.span,\n+                                                  hir_vec![next_let,\n+                                                           match_stmt,\n+                                                           pat_let,\n+                                                           body_stmt],\n+                                                  None));\n \n                 // `[opt_ident]: loop { ... }`\n                 let loop_expr = hir::ExprLoop(loop_block, self.lower_opt_sp_ident(opt_ident),"}, {"sha": "a273fb579fa0b3e98f30b84e484ac5069ae02649", "filename": "src/test/run-pass/for-loop-lifetime-of-unbound-values.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2d379b33936d6cd9a9b643cf5ddc36450176553c/src%2Ftest%2Frun-pass%2Ffor-loop-lifetime-of-unbound-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d379b33936d6cd9a9b643cf5ddc36450176553c/src%2Ftest%2Frun-pass%2Ffor-loop-lifetime-of-unbound-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-lifetime-of-unbound-values.rs?ref=2d379b33936d6cd9a9b643cf5ddc36450176553c", "patch": "@@ -0,0 +1,28 @@\n+use std::cell::Cell;\n+\n+struct Flag<'a>(&'a Cell<bool>);\n+\n+impl<'a> Drop for Flag<'a> {\n+\tfn drop(&mut self) {\n+\t    self.0.set(false)\n+\t}\n+}\n+\n+fn main() {\n+    let alive2 = Cell::new(true);\n+    for _i in std::iter::once(Flag(&alive2)) {\n+        // The Flag value should be alive in the for loop body\n+        assert_eq!(alive2.get(), true);\n+    }\n+    // The Flag value should be dead outside of the loop\n+    assert_eq!(alive2.get(), false);\n+    \n+    let alive = Cell::new(true);\n+    for _ in std::iter::once(Flag(&alive)) {\n+        // The Flag value should be alive in the for loop body even if it wasn't\n+        // bound by the for loop\n+        assert_eq!(alive.get(), true);\n+    }\n+    // The Flag value should be dead outside of the loop\n+    assert_eq!(alive.get(), false);\n+}\n\\ No newline at end of file"}]}