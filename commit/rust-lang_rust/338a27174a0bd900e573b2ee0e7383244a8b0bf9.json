{"sha": "338a27174a0bd900e573b2ee0e7383244a8b0bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOGEyNzE3NGEwYmQ5MDBlNTczYjJlZTBlNzM4MzI0NGE4YjBiZjk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-08T20:16:18Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-16T09:13:05Z"}, "message": "forbid generic params in the type of const params", "tree": {"sha": "a570321149ca2c501e430852c252389972c5d4c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a570321149ca2c501e430852c252389972c5d4c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/338a27174a0bd900e573b2ee0e7383244a8b0bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/338a27174a0bd900e573b2ee0e7383244a8b0bf9", "html_url": "https://github.com/rust-lang/rust/commit/338a27174a0bd900e573b2ee0e7383244a8b0bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/338a27174a0bd900e573b2ee0e7383244a8b0bf9/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e29de5e8a2908260d54182638241ff086a26c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e29de5e8a2908260d54182638241ff086a26c2", "html_url": "https://github.com/rust-lang/rust/commit/e2e29de5e8a2908260d54182638241ff086a26c2"}], "stats": {"total": 189, "additions": 160, "deletions": 29}, "files": [{"sha": "6160450d766769fe4f0169b7317ed528d33f12f7", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -452,6 +452,7 @@ E0766: include_str!(\"./error_codes/E0766.md\"),\n E0767: include_str!(\"./error_codes/E0767.md\"),\n E0768: include_str!(\"./error_codes/E0768.md\"),\n E0769: include_str!(\"./error_codes/E0769.md\"),\n+E0770: include_str!(\"./error_codes/E0770.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "a993ce826a737e0cfada3310469bf4b408bffefa", "filename": "src/librustc_error_codes/error_codes/E0671.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0671.md", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0671.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0671.md?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -3,7 +3,7 @@\n Const parameters cannot depend on type parameters.\n The following is therefore invalid:\n \n-```compile_fail,E0741\n+```compile_fail,E0770\n #![feature(const_generics)]\n \n fn const_id<T, const N: T>() -> T { // error"}, {"sha": "278bf9b907b240358802d40bf5c53a59f6238035", "filename": "src/librustc_error_codes/error_codes/E0770.md", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0770.md", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0770.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0770.md?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -0,0 +1,15 @@\n+The type of a const parameter references other generic parameters.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0770\n+#![feature(const_generics)]\n+fn foo<T, const N: T>() {} // error!\n+```\n+\n+To fix this error, use a concrete type for the const parameter:\n+\n+```\n+#![feature(const_generics)]\n+fn foo<T, const N: usize>() {}\n+```"}, {"sha": "c5ac7f7413ad4c5f3bcc8140dac0de689c6efa21", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -442,6 +442,16 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n+            ResolutionError::ParamInTyOfConstArg => {\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0770,\n+                    \"the type of const parameters must not depend on other generic parameters\"\n+                );\n+                err.span_label(span, \"const parameters must have a concrete type\");\n+                err\n+            }\n             ResolutionError::SelfInTyParamDefault => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "b252e5f29a3e5cb77e327b9e01630af84e9610e2", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -123,6 +123,10 @@ crate enum RibKind<'a> {\n     /// from the default of a type parameter because they're not declared\n     /// before said type parameter. Also see the `visit_generics` override.\n     ForwardTyParamBanRibKind,\n+\n+    /// We are inside of the type of a const parameter. Can't refer to any\n+    /// parameters.\n+    ConstParamTyRibKind,\n }\n \n impl RibKind<'_> {\n@@ -135,7 +139,8 @@ impl RibKind<'_> {\n             | FnItemRibKind\n             | ConstantItemRibKind\n             | ModuleRibKind(_)\n-            | MacroDefinition(_) => false,\n+            | MacroDefinition(_)\n+            | ConstParamTyRibKind => false,\n             AssocItemRibKind | ItemRibKind(_) | ForwardTyParamBanRibKind => true,\n         }\n     }\n@@ -562,7 +567,11 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }\n+                    self.ribs[TypeNS].push(Rib::new(ConstParamTyRibKind));\n+                    self.ribs[ValueNS].push(Rib::new(ConstParamTyRibKind));\n                     self.visit_ty(ty);\n+                    self.ribs[TypeNS].pop().unwrap();\n+                    self.ribs[ValueNS].pop().unwrap();\n                 }\n             }\n         }\n@@ -798,7 +807,8 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | ItemRibKind(..)\n                 | ConstantItemRibKind\n                 | ModuleRibKind(..)\n-                | ForwardTyParamBanRibKind => {\n+                | ForwardTyParamBanRibKind\n+                | ConstParamTyRibKind => {\n                     return false;\n                 }\n             }"}, {"sha": "ba365e8f8418ca8d32c69e1c06282fe7df696487", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -214,6 +214,8 @@ enum ResolutionError<'a> {\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n+    /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n+    ParamInTyOfConstArg,\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n@@ -2480,6 +2482,12 @@ impl<'a> Resolver<'a> {\n                             }\n                             return Res::Err;\n                         }\n+                        ConstParamTyRibKind => {\n+                            if record_used {\n+                                self.report_error(span, ParamInTyOfConstArg);\n+                            }\n+                            return Res::Err;\n+                        }\n                     }\n                 }\n                 if let Some(res_err) = res_err {\n@@ -2503,6 +2511,12 @@ impl<'a> Resolver<'a> {\n                         // This was an attempt to use a type parameter outside its scope.\n                         ItemRibKind(has_generic_params) => has_generic_params,\n                         FnItemRibKind => HasGenericParams::Yes,\n+                        ConstParamTyRibKind => {\n+                            if record_used {\n+                                self.report_error(span, ResolutionError::ParamInTyOfConstArg);\n+                            }\n+                            return Res::Err;\n+                        }\n                     };\n \n                     if record_used {\n@@ -2527,9 +2541,21 @@ impl<'a> Resolver<'a> {\n                 }\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n+                        NormalRibKind\n+                        | ClosureOrAsyncRibKind\n+                        | AssocItemRibKind\n+                        | ModuleRibKind(..)\n+                        | MacroDefinition(..)\n+                        | ForwardTyParamBanRibKind\n+                        | ConstantItemRibKind => continue,\n                         ItemRibKind(has_generic_params) => has_generic_params,\n                         FnItemRibKind => HasGenericParams::Yes,\n-                        _ => continue,\n+                        ConstParamTyRibKind => {\n+                            if record_used {\n+                                self.report_error(span, ResolutionError::ParamInTyOfConstArg);\n+                            }\n+                            return Res::Err;\n+                        }\n                     };\n \n                     // This was an attempt to use a const parameter outside its scope."}, {"sha": "6eb13c38e021c82f87ff28a97004f7d70f20dfb8", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+// Currently, const parameters cannot depend on other generic parameters,\n+// as our current implementation can't really support this.\n+//\n+// We may want to lift this restriction in the future.\n+\n+pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+//~^ ERROR: the type of const parameters must not depend on other generic parameters\n+//~| ERROR: cycle detected when computing type of `Dependent::X`\n+\n+fn main() {}"}, {"sha": "63416732bf4ce456294435da82cd30afda026d5e", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -0,0 +1,31 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-const-param.rs:9:52\n+   |\n+LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+   |                                                    ^ const parameters must have a concrete type\n+\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-param-type-depends-on-const-param.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error[E0391]: cycle detected when computing type of `Dependent::X`\n+  --> $DIR/const-param-type-depends-on-const-param.rs:9:44\n+   |\n+LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+   |                                            ^\n+   |\n+   = note: ...which again requires computing type of `Dependent::X`, completing the cycle\n+note: cycle used when computing type of `Dependent`\n+  --> $DIR/const-param-type-depends-on-const-param.rs:9:1\n+   |\n+LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "db15ececfa436e26f7d67d12b7b0eb988485a24c", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -1,6 +1,6 @@\n use std::marker::PhantomData;\n \n struct B<T, const N: T>(PhantomData<[T; N]>); //~ ERROR const generics are unstable\n-//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n+//~^ ERROR the type of const parameters must not depend on other generic parameters\n \n fn main() {}"}, {"sha": "a2182d9edaf3d31efb2576f1efb1eae7c7694d04", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -1,3 +1,9 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n+   |\n+LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n+   |                      ^ const parameters must have a concrete type\n+\n error[E0658]: const generics are unstable\n   --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:19\n    |\n@@ -7,15 +13,6 @@ LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n-error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n-  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n-   |\n-LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n-   |                      ^ `T` may not derive both `PartialEq` and `Eq`\n-   |\n-   = note: it is not currently possible to use a type parameter as the type of a const parameter\n-\n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0658, E0741.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7fe04a43412a1edd26c4f33e141083bc7525e168", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -1,12 +1,13 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n-// Currently, const parameters cannot depend on type parameters, because there is no way to\n-// enforce the structural-match property on an arbitrary type parameter. This restriction\n-// may be relaxed in the future. See https://github.com/rust-lang/rfcs/pull/2000 for more\n-// details.\n+// Currently, const parameters cannot depend on other generic parameters,\n+// as our current implementation can't really support this.\n+//\n+// We may want to lift this restriction in the future.\n \n pub struct Dependent<T, const X: T>([(); X]);\n-//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n+//~^ ERROR: the type of const parameters must not depend on other generic parameters\n+//~| ERROR: parameter `T` is never used\n \n fn main() {}"}, {"sha": "606bb4f4fe7e02bd9d9f3301bb1357a74f86e80d", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -1,3 +1,9 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n+   |\n+LL | pub struct Dependent<T, const X: T>([(); X]);\n+   |                                  ^ const parameters must have a concrete type\n+\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-param-type-depends-on-type-param.rs:1:12\n    |\n@@ -7,14 +13,14 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n-  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/const-param-type-depends-on-type-param.rs:9:22\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                                  ^ `T` may not derive both `PartialEq` and `Eq`\n+   |                      ^ unused parameter\n    |\n-   = note: it is not currently possible to use a type parameter as the type of a const parameter\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0741`.\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "08f948239421879811e1f2ee28c42dbfc936b91e", "filename": "src/test/ui/const-generics/issues/issue-71381.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -12,6 +12,7 @@ unsafe extern \"C\" fn pass(args: PassArg) {\n impl Test {\n     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n         //~^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~| ERROR: the type of const parameters must not depend on other generic parameters\n         self.0 = Self::trampiline::<Args, IDX, FN> as _\n     }\n \n@@ -20,6 +21,7 @@ impl Test {\n         const IDX: usize,\n         const FN: unsafe extern \"C\" fn(Args),\n         //~^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~| ERROR: the type of const parameters must not depend on other generic parameters\n     >(\n         args: Args,\n     ) {"}, {"sha": "177a2cdf14c32a6ae273f3e38ebee676cb6dcb49", "filename": "src/test/ui/const-generics/issues/issue-71381.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -1,14 +1,26 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71381.rs:13:82\n+   |\n+LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n+   |                                                                                  ^^^^ const parameters must have a concrete type\n+\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71381.rs:22:40\n+   |\n+LL |         const FN: unsafe extern \"C\" fn(Args),\n+   |                                        ^^^^ const parameters must have a concrete type\n+\n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71381.rs:13:61\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:21:19\n+  --> $DIR/issue-71381.rs:22:19\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "06ff38dec66c74e8c157568fc04c4abb3d23c2cc", "filename": "src/test/ui/const-generics/issues/issue-71611.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -3,6 +3,7 @@\n \n fn func<A, const F: fn(inner: A)>(outer: A) {\n     //~^ ERROR: using function pointers as const generic parameters is forbidden\n+    //~| ERROR: the type of const parameters must not depend on other generic parameters\n     F(outer);\n }\n "}, {"sha": "fe8978b42988e6ea731533ee677509da7b8cd961", "filename": "src/test/ui/const-generics/issues/issue-71611.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/338a27174a0bd900e573b2ee0e7383244a8b0bf9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr?ref=338a27174a0bd900e573b2ee0e7383244a8b0bf9", "patch": "@@ -1,8 +1,14 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71611.rs:4:31\n+   |\n+LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n+   |                               ^ const parameters must have a concrete type\n+\n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71611.rs:4:21\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                     ^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}]}