{"sha": "1095e635340fa2e305a15bec3058c2dad62eb490", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOTVlNjM1MzQwZmEyZTMwNWExNWJlYzMwNThjMmRhZDYyZWI0OTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T00:13:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:29Z"}, "message": "librustc: De-`@mut` `RegionVarBindings::values`", "tree": {"sha": "4fa48f02b0c5c06e0c980e83b0653bc5057e26c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fa48f02b0c5c06e0c980e83b0653bc5057e26c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1095e635340fa2e305a15bec3058c2dad62eb490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1095e635340fa2e305a15bec3058c2dad62eb490", "html_url": "https://github.com/rust-lang/rust/commit/1095e635340fa2e305a15bec3058c2dad62eb490", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1095e635340fa2e305a15bec3058c2dad62eb490/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38d5072018d63733170661ff1cbac4a8709c1788", "url": "https://api.github.com/repos/rust-lang/rust/commits/38d5072018d63733170661ff1cbac4a8709c1788", "html_url": "https://github.com/rust-lang/rust/commit/38d5072018d63733170661ff1cbac4a8709c1788"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "2e357ba1d4953d6a83c3281db3791c044498a4ef", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1095e635340fa2e305a15bec3058c2dad62eb490/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1095e635340fa2e305a15bec3058c2dad62eb490/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=1095e635340fa2e305a15bec3058c2dad62eb490", "patch": "@@ -107,14 +107,14 @@ pub struct RegionVarBindings {\n \n     // This contains the results of inference.  It begins as an empty\n     // option and only acquires a value after inference is complete.\n-    values: Option<~[VarValue]>,\n+    values: RefCell<Option<~[VarValue]>>,\n }\n \n pub fn RegionVarBindings(tcx: ty::ctxt) -> RegionVarBindings {\n     RegionVarBindings {\n         tcx: tcx,\n         var_origins: ~[],\n-        values: None,\n+        values: RefCell::new(None),\n         constraints: RefCell::new(HashMap::new()),\n         lubs: RefCell::new(HashMap::new()),\n         glbs: RefCell::new(HashMap::new()),\n@@ -236,11 +236,16 @@ impl RegionVarBindings {\n         ReLateBound(binder_id, BrFresh(sc))\n     }\n \n+    fn values_are_none(&self) -> bool {\n+        let values = self.values.borrow();\n+        values.get().is_none()\n+    }\n+\n     pub fn add_constraint(&mut self,\n                           constraint: Constraint,\n                           origin: SubregionOrigin) {\n         // cannot add constraints once regions are resolved\n-        assert!(self.values.is_none());\n+        assert!(self.values_are_none());\n \n         debug!(\"RegionVarBindings: add_constraint({:?})\", constraint);\n \n@@ -260,7 +265,7 @@ impl RegionVarBindings {\n                           sub: Region,\n                           sup: Region) {\n         // cannot add constraints once regions are resolved\n-        assert!(self.values.is_none());\n+        assert!(self.values_are_none());\n \n         debug!(\"RegionVarBindings: make_subregion({:?}, {:?})\", sub, sup);\n         match (sub, sup) {\n@@ -295,7 +300,7 @@ impl RegionVarBindings {\n                        b: Region)\n                        -> Region {\n         // cannot add constraints once regions are resolved\n-        assert!(self.values.is_none());\n+        assert!(self.values_are_none());\n \n         debug!(\"RegionVarBindings: lub_regions({:?}, {:?})\", a, b);\n         match (a, b) {\n@@ -318,7 +323,7 @@ impl RegionVarBindings {\n                        b: Region)\n                        -> Region {\n         // cannot add constraints once regions are resolved\n-        assert!(self.values.is_none());\n+        assert!(self.values_are_none());\n \n         debug!(\"RegionVarBindings: glb_regions({:?}, {:?})\", a, b);\n         match (a, b) {\n@@ -337,7 +342,8 @@ impl RegionVarBindings {\n     }\n \n     pub fn resolve_var(&mut self, rid: RegionVid) -> ty::Region {\n-        let v = match self.values {\n+        let values = self.values.borrow();\n+        let v = match *values.get() {\n             None => self.tcx.sess.span_bug(\n                 self.var_origins[rid.to_uint()].span(),\n                 format!(\"Attempt to resolve region variable before values have \\\n@@ -514,7 +520,8 @@ impl RegionVarBindings {\n         debug!(\"RegionVarBindings: resolve_regions()\");\n         let mut errors = opt_vec::Empty;\n         let v = self.infer_variable_values(&mut errors);\n-        self.values = Some(v);\n+        let mut values = self.values.borrow_mut();\n+        *values.get() = Some(v);\n         errors\n     }\n }"}]}