{"sha": "ed38d9c79f6c8613f508e024d4aa0d78b8b6e108", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMzhkOWM3OWY2Yzg2MTNmNTA4ZTAyNGQ0YWEwZDc4YjhiNmUxMDg=", "commit": {"author": {"name": "Philipp Krones", "email": "uwdkn@student.kit.edu", "date": "2018-09-04T19:13:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-04T19:13:30Z"}, "message": "Merge pull request #3108 from daubaris/range-plus-one\n\nrange_plus_one suggestion should not remove braces fix", "tree": {"sha": "d456c800c6fb87846208c4b45cae7f46723b9e32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d456c800c6fb87846208c4b45cae7f46723b9e32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed38d9c79f6c8613f508e024d4aa0d78b8b6e108", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbjtlbCRBK7hj4Ov3rIwAAdHIIADx7nC2L6o6xlOpJE9fZT4Y0\n7yfrvOt1HPPEXxw3qobnTu8G69wk/+feZ1dUXxia/B6CJB0mU5YYHBfQPfPbRI3t\nMAwxVBSzaB5wVDXyc1h2SSYfKcBOxj5l9KcPm6etrjK7tkO/JBmHE0V8e4wpRkWB\nS/mqhiYUpcJqPYKDsnxBH8bsXyEt4lXlswdEpbqSduu37h4bUw/hew0IZAPYaPqw\nOMfENpJ3VH9Ncaq4I+B9VLHY4kW7aQYp2gZkw3xzLLhxkxhlPnQATXZWNqsbBnoA\nN0CXsi+b0LZnxNiFjmSIs+4QM8xHepD+dR6rwbQJtcKrwJjA+HqCzzTnL2ucG5I=\n=m40z\n-----END PGP SIGNATURE-----\n", "payload": "tree d456c800c6fb87846208c4b45cae7f46723b9e32\nparent b7587d8176ee1b866e8c2eb49e32a1ff4f029a2f\nparent 009c29069c1cf188e6d1935292c288c22d57cc04\nauthor Philipp Krones <uwdkn@student.kit.edu> 1536088410 +0200\ncommitter GitHub <noreply@github.com> 1536088410 +0200\n\nMerge pull request #3108 from daubaris/range-plus-one\n\nrange_plus_one suggestion should not remove braces fix"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed38d9c79f6c8613f508e024d4aa0d78b8b6e108", "html_url": "https://github.com/rust-lang/rust/commit/ed38d9c79f6c8613f508e024d4aa0d78b8b6e108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed38d9c79f6c8613f508e024d4aa0d78b8b6e108/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7587d8176ee1b866e8c2eb49e32a1ff4f029a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7587d8176ee1b866e8c2eb49e32a1ff4f029a2f", "html_url": "https://github.com/rust-lang/rust/commit/b7587d8176ee1b866e8c2eb49e32a1ff4f029a2f"}, {"sha": "009c29069c1cf188e6d1935292c288c22d57cc04", "url": "https://api.github.com/repos/rust-lang/rust/commits/009c29069c1cf188e6d1935292c288c22d57cc04", "html_url": "https://github.com/rust-lang/rust/commit/009c29069c1cf188e6d1935292c288c22d57cc04"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "f9cdffea79c5096efe22f064cf9600015c3b5cee", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed38d9c79f6c8613f508e024d4aa0d78b8b6e108/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed38d9c79f6c8613f508e024d4aa0d78b8b6e108/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=ed38d9c79f6c8613f508e024d4aa0d78b8b6e108", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use syntax::ast::RangeLimits;\n use syntax::source_map::Spanned;\n-use crate::utils::{is_integer_literal, paths, snippet, span_lint, span_lint_and_then};\n+use crate::utils::{is_integer_literal, paths, snippet, span_lint, span_lint_and_then, snippet_opt};\n use crate::utils::{get_trait_def_id, higher, implements_trait, SpanlessEq};\n use crate::utils::sugg::Sugg;\n \n@@ -49,7 +49,10 @@ declare_clippy_lint! {\n /// **Why is this bad?** The code is more readable with an inclusive range\n /// like `x..=y`.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** Will add unnecessary pair of parentheses when the\n+/// expression is not wrapped in a pair but starts with a opening parenthesis\n+/// and ends with a closing one.\n+/// I.e: `let _ = (f()+1)..(f()+1)` results in `let _ = ((f()+1)..=f())`.\n ///\n /// **Example:**\n /// ```rust\n@@ -145,9 +148,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     |db| {\n                         let start = start.map_or(\"\".to_owned(), |x| Sugg::hir(cx, x, \"x\").to_string());\n                         let end = Sugg::hir(cx, y, \"y\");\n-                        db.span_suggestion(expr.span,\n+                        if let Some(is_wrapped) = &snippet_opt(cx, expr.span) {\n+                            if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n+                                db.span_suggestion(expr.span,\n+                                           \"use\",\n+                                           format!(\"({}..={})\", start, end));\n+                            } else {\n+                                db.span_suggestion(expr.span,\n                                            \"use\",\n                                            format!(\"{}..={}\", start, end));\n+                            }\n+                        }\n                     },\n                 );\n             }"}, {"sha": "1ee3637f266d7654eda12f7ebcc2ef476bd533f7", "filename": "tests/ui/range_plus_minus_one.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed38d9c79f6c8613f508e024d4aa0d78b8b6e108/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed38d9c79f6c8613f508e024d4aa0d78b8b6e108/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=ed38d9c79f6c8613f508e024d4aa0d78b8b6e108", "patch": "@@ -27,6 +27,7 @@ fn main() {\n     let _ = ..11-1;\n     let _ = ..=11-1;\n     let _ = ..=(11-1);\n+    let _ = (1..11+1);\n     let _ = (f()+1)..(f()+1);\n \n     let mut vec: Vec<()> = std::vec::Vec::new();"}, {"sha": "3fe4e7ca073f990b6bfb6863397681b3bfa4b2e3", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed38d9c79f6c8613f508e024d4aa0d78b8b6e108/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed38d9c79f6c8613f508e024d4aa0d78b8b6e108/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=ed38d9c79f6c8613f508e024d4aa0d78b8b6e108", "patch": "@@ -41,8 +41,14 @@ error: an exclusive range would be more readable\n error: an inclusive range would be more readable\n   --> $DIR/range_plus_minus_one.rs:30:13\n    |\n-30 |     let _ = (f()+1)..(f()+1);\n-   |             ^^^^^^^^^^^^^^^^ help: use: `(f()+1)..=f()`\n+30 |     let _ = (1..11+1);\n+   |             ^^^^^^^^^ help: use: `(1..=11)`\n \n-error: aborting due to 7 previous errors\n+error: an inclusive range would be more readable\n+  --> $DIR/range_plus_minus_one.rs:31:13\n+   |\n+31 |     let _ = (f()+1)..(f()+1);\n+   |             ^^^^^^^^^^^^^^^^ help: use: `((f()+1)..=f())`\n+\n+error: aborting due to 8 previous errors\n "}]}