{"sha": "982dcc29bf6cd41e967a0befe0c6195811cd6a55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MmRjYzI5YmY2Y2Q0MWU5NjdhMGJlZmUwYzYxOTU4MTFjZDZhNTU=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-09T22:45:08Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-09T22:45:08Z"}, "message": "Get object's captured typarams when calculating sizes in the backend's fn-prologue-generation for object methods.", "tree": {"sha": "5973524a65f4a2095b75b63c8d72b2b3804ddd6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5973524a65f4a2095b75b63c8d72b2b3804ddd6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/982dcc29bf6cd41e967a0befe0c6195811cd6a55", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/982dcc29bf6cd41e967a0befe0c6195811cd6a55", "html_url": "https://github.com/rust-lang/rust/commit/982dcc29bf6cd41e967a0befe0c6195811cd6a55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/982dcc29bf6cd41e967a0befe0c6195811cd6a55/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76e03be459e0ad0defc6c6855e4ccfde85782a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/76e03be459e0ad0defc6c6855e4ccfde85782a53", "html_url": "https://github.com/rust-lang/rust/commit/76e03be459e0ad0defc6c6855e4ccfde85782a53"}], "stats": {"total": 219, "additions": 139, "deletions": 80}, "files": [{"sha": "5bdf21faa1246808d2c74c0e5c76f1cdd169cf5f", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=982dcc29bf6cd41e967a0befe0c6195811cd6a55", "patch": "@@ -121,7 +121,8 @@ type abi =\n                              -> Common.size      (* callsz  *)\n                                -> Common.nabi\n                                  -> Common.fixup (* grow_task *)\n-                                   -> unit);\n+                                   -> bool       (* is_obj_fn *)\n+                                     -> unit);\n \n     abi_emit_fn_epilogue: (Il.emitter -> unit);\n "}, {"sha": "2a5b643a8d785f911f2fdf5a96701bfd178a5181", "filename": "src/boot/be/il.ml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fbe%2Fil.ml", "raw_url": "https://github.com/rust-lang/rust/raw/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fbe%2Fil.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fil.ml?ref=982dcc29bf6cd41e967a0befe0c6195811cd6a55", "patch": "@@ -901,6 +901,13 @@ let get_element_ptr\n         (string_of_cell fmt mem_cell)\n ;;\n \n+let ptr_cast (cell:cell) (rty:referent_ty) : cell =\n+  match cell with\n+      Mem (mem, _) -> Mem (mem, rty)\n+    | Reg (reg, AddrTy _) -> Reg (reg, AddrTy rty)\n+    | _ -> bug () \"expected address cell in Il.ptr_cast\"\n+;;\n+\n (*\n  * Local Variables:\n  * fill-column: 78;"}, {"sha": "826127a0b496fa0f2e87d9c60d8c61719f64de22", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=982dcc29bf6cd41e967a0befe0c6195811cd6a55", "patch": "@@ -593,6 +593,7 @@ let restore_frame_base (e:Il.emitter) (base:Il.reg) (retpc:Il.reg) : unit =\n  *\n  *   *ebp+20+(4*N) = [argN   ]\n  *   ...\n+ *   *ebp+28       = [arg2   ] = obj/closure ptr\n  *   *ebp+24       = [arg1   ] = task ptr\n  *   *ebp+20       = [arg0   ] = out ptr\n  *   *ebp+16       = [retpc  ]\n@@ -1033,7 +1034,7 @@ let unwind_glue\n \n \n (* Puts result in eax; clobbers ecx, edx in the process. *)\n-let rec calculate_sz (e:Il.emitter) (size:size) : unit =\n+let rec calculate_sz (e:Il.emitter) (size:size) (in_obj:bool) : unit =\n   let emit = Il.emit e in\n   let mov dst src = emit (Il.umov dst src) in\n   let push x = emit (Il.Push x) in\n@@ -1045,11 +1046,48 @@ let rec calculate_sz (e:Il.emitter) (size:size) : unit =\n   let mul x y = emit (Il.binary Il.UMUL (rc x) (ro x) (ro y)) in\n   let subi x y = emit (Il.binary Il.SUB (rc x) (ro x) (immi y)) in\n   let eax_gets_a_and_ecx_gets_b a b =\n-    calculate_sz e b;\n+    calculate_sz e b in_obj;\n     push (ro eax);\n-    calculate_sz e a;\n+    calculate_sz e a in_obj;\n     pop (rc ecx);\n   in\n+\n+  let ty_param_n_in_obj_fn i =\n+    (*\n+     * Here we are trying to immitate the obj-fn branch of\n+     * Trans.get_ty_params_of_current_frame while using\n+     * eax as our only register.\n+     *)\n+\n+    (* Bind all the referent types we'll need... *)\n+\n+    let obj_body_rty = Semant.obj_closure_rty word_bits in\n+    let tydesc_rty = Semant.tydesc_rty word_bits in\n+    (* Note that we cheat here and pretend only to have i+1 tydescs (because\n+       we GEP to the i'th while still in this function, so no one outside\n+       finds out about the lie. *)\n+    let tydesc_tys = Array.init (i + 1) (fun _ -> Ast.TY_type) in\n+    let ty_params_ty = Ast.TY_tup tydesc_tys in\n+    let ty_params_rty = Semant.referent_type word_bits ty_params_ty in\n+\n+      (* ... and fetch! *)\n+\n+      mov (rc eax) (Il.Cell closure_ptr);\n+      let obj_body = word_n (h eax) Abi.box_rc_field_body in\n+      let obj_body = Il.ptr_cast obj_body obj_body_rty in\n+      let tydesc_ptr = get_element_ptr obj_body Abi.obj_body_elt_tydesc in\n+\n+        mov (rc eax) (Il.Cell tydesc_ptr);\n+        let tydesc = Il.ptr_cast (word_at (h eax)) tydesc_rty in\n+        let ty_params_ptr =\n+          get_element_ptr tydesc Abi.tydesc_field_first_param\n+        in\n+\n+          mov (rc eax) (Il.Cell ty_params_ptr);\n+          let ty_params = Il.ptr_cast (word_at (h eax)) ty_params_rty in\n+            get_element_ptr ty_params i\n+  in\n+\n     match size with\n         SIZE_fixed i ->\n           mov (rc eax) (immi i)\n@@ -1061,15 +1099,23 @@ let rec calculate_sz (e:Il.emitter) (size:size) : unit =\n           mov (rc eax) (imm (Asm.M_POS f))\n \n       | SIZE_param_size i ->\n-          mov (rc eax) (Il.Cell (ty_param_n i));\n+          if in_obj\n+          then\n+            mov (rc eax) (Il.Cell (ty_param_n_in_obj_fn i))\n+          else\n+            mov (rc eax) (Il.Cell (ty_param_n i));\n           mov (rc eax) (Il.Cell (word_n (h eax) Abi.tydesc_field_size))\n \n       | SIZE_param_align i ->\n-          mov (rc eax) (Il.Cell (ty_param_n i));\n+          if in_obj\n+          then\n+            mov (rc eax) (Il.Cell (ty_param_n_in_obj_fn i))\n+          else\n+            mov (rc eax) (Il.Cell (ty_param_n i));\n           mov (rc eax) (Il.Cell (word_n (h eax) Abi.tydesc_field_align))\n \n       | SIZE_rt_neg a ->\n-          calculate_sz e a;\n+          calculate_sz e a in_obj;\n           neg eax\n \n       | SIZE_rt_add (a, b) ->\n@@ -1185,6 +1231,7 @@ let fn_prologue\n     (callsz:size)\n     (nabi:nabi)\n     (grow_task_fixup:fixup)\n+    (is_obj_fn:bool)\n     : unit =\n \n   let esi_n = word_n (h esi) in\n@@ -1314,7 +1361,7 @@ let fn_prologue\n                     emit (Il.jmp Il.JA Il.CodeNone);\n \n                     (* Calculate dynamic frame size. *)\n-                    calculate_sz e call_and_frame_sz;\n+                    calculate_sz e call_and_frame_sz is_obj_fn;\n                     ((ro eax), Some primordial_underflow_jmp_pc)\n               end\n           | Some e -> ((imm e), None)"}, {"sha": "0ec7af780e8e915f63375e6194ba6e4390bd6b52", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=982dcc29bf6cd41e967a0befe0c6195811cd6a55", "patch": "@@ -1677,7 +1677,7 @@ let dwarf_visitor\n       in\n \n       let record trec =\n-        let rty = referent_type abi (Ast.TY_rec trec) in\n+        let rty = referent_type word_bits (Ast.TY_rec trec) in\n         let rty_sz = Il.referent_ty_size abi.Abi.abi_word_bits in\n         let fix = new_fixup \"record type DIE\" in\n         let die = DEF (fix, SEQ [|\n@@ -1926,7 +1926,7 @@ let dwarf_visitor\n          * I'm a bit surprised by that!\n          *)\n \n-        let rty = referent_type abi (Ast.TY_tag ttag) in\n+        let rty = referent_type word_bits (Ast.TY_tag ttag) in\n         let rty_sz = Il.referent_ty_size abi.Abi.abi_word_bits in\n         let rtys =\n           match rty with"}, {"sha": "6464a8f75d5e16e53a43099ac67ee8db94e7402f", "filename": "src/boot/me/layout.ml", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fme%2Flayout.ml", "raw_url": "https://github.com/rust-lang/rust/raw/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fme%2Flayout.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Flayout.ml?ref=982dcc29bf6cd41e967a0befe0c6195811cd6a55", "patch": "@@ -113,7 +113,7 @@ let layout_visitor\n         | Il.CodeTy -> true\n         | Il.NilTy -> false\n     in\n-      rt_in_mem (slot_referent_type cx.ctxt_abi slot)\n+      rt_in_mem (slot_referent_type cx.ctxt_abi.Abi.abi_word_bits slot)\n   in\n \n   let rty_sz rty = Il.referent_ty_size cx.ctxt_abi.Abi.abi_word_bits rty in\n@@ -142,7 +142,7 @@ let layout_visitor\n       : unit =\n     let accum (off,align) id : (size * size) =\n       let slot = get_slot cx id in\n-      let rt = slot_referent_type cx.ctxt_abi slot in\n+      let rt = slot_referent_type cx.ctxt_abi.Abi.abi_word_bits slot in\n       let (elt_size, elt_align) = rty_layout rt in\n         if vregs_ok\n           && (is_subword_size elt_size)\n@@ -170,7 +170,9 @@ let layout_visitor\n               then elt_off\n               else neg_sz (add_sz elt_off elt_size)\n             in\n-              Stack.push (slot_referent_type cx.ctxt_abi slot) slot_accum;\n+              Stack.push\n+                (slot_referent_type cx.ctxt_abi.Abi.abi_word_bits slot)\n+                slot_accum;\n             iflog\n               begin\n                 fun _ ->"}, {"sha": "a3a8abdfcebf80d2e7f97092ebfc86814905af43", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=982dcc29bf6cd41e967a0befe0c6195811cd6a55", "patch": "@@ -1822,24 +1822,24 @@ let run_passes\n \n (* Rust type -> IL type conversion. *)\n \n-let word_sty (abi:Abi.abi) : Il.scalar_ty =\n-  Il.ValTy abi.Abi.abi_word_bits\n+let word_sty (word_bits:Il.bits) : Il.scalar_ty =\n+  Il.ValTy word_bits\n ;;\n \n-let word_rty (abi:Abi.abi) : Il.referent_ty =\n-  Il.ScalarTy (word_sty abi)\n+let word_rty (word_bits:Il.bits) : Il.referent_ty =\n+  Il.ScalarTy (word_sty word_bits)\n ;;\n \n-let tydesc_rty (abi:Abi.abi) : Il.referent_ty =\n+let tydesc_rty (word_bits:Il.bits) : Il.referent_ty =\n   (* \n    * NB: must match corresponding tydesc structure\n    * in trans and offsets in ABI exactly.\n    *)\n   Il.StructTy\n     [|\n-      word_rty abi;                      (* Abi.tydesc_field_first_param   *)\n-      word_rty abi;                      (* Abi.tydesc_field_size          *)\n-      word_rty abi;                      (* Abi.tydesc_field_align         *)\n+      word_rty word_bits;                (* Abi.tydesc_field_first_param   *)\n+      word_rty word_bits;                (* Abi.tydesc_field_size          *)\n+      word_rty word_bits;                (* Abi.tydesc_field_align         *)\n       Il.ScalarTy (Il.AddrTy Il.CodeTy); (* Abi.tydesc_field_copy_glue     *)\n       Il.ScalarTy (Il.AddrTy Il.CodeTy); (* Abi.tydesc_field_drop_glue     *)\n       Il.ScalarTy (Il.AddrTy Il.CodeTy); (* Abi.tydesc_field_free_glue     *)\n@@ -1849,29 +1849,29 @@ let tydesc_rty (abi:Abi.abi) : Il.referent_ty =\n     |]\n ;;\n \n-let obj_closure_rty (abi:Abi.abi) : Il.referent_ty =\n+let obj_closure_rty (word_bits:Il.bits) : Il.referent_ty =\n   Il.StructTy [|\n-    word_rty abi;\n+    word_rty word_bits;\n     Il.StructTy [|\n-      Il.ScalarTy (Il.AddrTy (tydesc_rty abi));\n-      word_rty abi (* A lie: it's opaque, but this permits\n-                    * GEP'ing to it. *)\n+      Il.ScalarTy (Il.AddrTy (tydesc_rty word_bits));\n+      word_rty word_bits (* A lie: it's opaque, but this permits\n+                          * GEP'ing to it. *)\n     |]\n   |]\n ;;\n \n-let rec referent_type (abi:Abi.abi) (t:Ast.ty) : Il.referent_ty =\n+let rec referent_type (word_bits:Il.bits) (t:Ast.ty) : Il.referent_ty =\n   let s t = Il.ScalarTy t in\n   let v b = Il.ValTy b in\n   let p t = Il.AddrTy t in\n   let sv b = s (v b) in\n   let sp t = s (p t) in\n \n-  let word = word_rty abi in\n+  let word = word_rty word_bits in\n   let ptr = sp Il.OpaqueTy in\n   let rc_ptr = sp (Il.StructTy [| word; Il.OpaqueTy |]) in\n   let codeptr = sp Il.CodeTy in\n-  let tup ttup = Il.StructTy (Array.map (referent_type abi) ttup) in\n+  let tup ttup = Il.StructTy (Array.map (referent_type word_bits) ttup) in\n   let tag ttag =\n     let union =\n       Il.UnionTy\n@@ -1916,7 +1916,7 @@ let rec referent_type (abi:Abi.abi) (t:Ast.ty) : Il.referent_ty =\n             Il.StructTy [| codeptr; fn_closure_ptr |]\n \n       | Ast.TY_obj _ ->\n-          let obj_closure_ptr = sp (obj_closure_rty abi) in\n+          let obj_closure_ptr = sp (obj_closure_rty word_bits) in\n             Il.StructTy [| ptr; obj_closure_ptr |]\n \n       | Ast.TY_tag ttag -> tag ttag\n@@ -1928,26 +1928,26 @@ let rec referent_type (abi:Abi.abi) (t:Ast.ty) : Il.referent_ty =\n       | Ast.TY_port _\n       | Ast.TY_task -> rc_ptr\n \n-      | Ast.TY_type -> sp (tydesc_rty abi)\n+      | Ast.TY_type -> sp (tydesc_rty word_bits)\n \n       | Ast.TY_native _ -> ptr\n \n       | Ast.TY_box t ->\n-          sp (Il.StructTy [| word; referent_type abi t |])\n+          sp (Il.StructTy [| word; referent_type word_bits t |])\n \n-      | Ast.TY_mutable t -> referent_type abi t\n+      | Ast.TY_mutable t -> referent_type word_bits t\n \n       | Ast.TY_param (i, _) -> Il.ParamTy i\n \n       | Ast.TY_named _ -> bug () \"named type in referent_type\"\n-      | Ast.TY_constrained (t, _) -> referent_type abi t\n+      | Ast.TY_constrained (t, _) -> referent_type word_bits t\n \n-and slot_referent_type (abi:Abi.abi) (sl:Ast.slot) : Il.referent_ty =\n+and slot_referent_type (word_bits:Il.bits) (sl:Ast.slot) : Il.referent_ty =\n   let s t = Il.ScalarTy t in\n   let p t = Il.AddrTy t in\n   let sp t = s (p t) in\n \n-  let rty = referent_type abi (slot_ty sl) in\n+  let rty = referent_type word_bits (slot_ty sl) in\n     match sl.Ast.slot_mode with\n       | Ast.MODE_local -> rty\n       | Ast.MODE_alias -> sp rty\n@@ -1958,7 +1958,7 @@ let task_rty (abi:Abi.abi) : Il.referent_ty =\n     begin\n       Array.init\n         Abi.n_visible_task_fields\n-        (fun _ -> word_rty abi)\n+        (fun _ -> word_rty abi.Abi.abi_word_bits)\n     end\n ;;\n \n@@ -1970,14 +1970,17 @@ let call_args_referent_type_full\n     (iterator_arg_rtys:Il.referent_ty array)\n     (indirect_arg_rtys:Il.referent_ty array)\n     : Il.referent_ty =\n-  let out_slot_rty = slot_referent_type abi out_slot in\n+  let out_slot_rty = slot_referent_type abi.Abi.abi_word_bits out_slot in\n   let out_ptr_rty = Il.ScalarTy (Il.AddrTy out_slot_rty) in\n   let task_ptr_rty = Il.ScalarTy (Il.AddrTy (task_rty abi)) in\n   let ty_param_rtys =\n-    let td = Il.ScalarTy (Il.AddrTy (tydesc_rty abi)) in\n+    let td = Il.ScalarTy (Il.AddrTy (tydesc_rty abi.Abi.abi_word_bits)) in\n       Il.StructTy (Array.init n_ty_params (fun _ -> td))\n   in\n-  let arg_rtys = Il.StructTy (Array.map (slot_referent_type abi) in_slots) in\n+  let arg_rtys =\n+    Il.StructTy\n+      (Array.map (slot_referent_type abi.Abi.abi_word_bits) in_slots)\n+  in\n     (* \n      * NB: must match corresponding calltup structure in trans and\n      * member indices in ABI exactly.\n@@ -2003,7 +2006,7 @@ let call_args_referent_type\n     (* Abi.indirect_args_elt_closure *)\n     match closure with\n         None ->\n-          [| word_rty cx.ctxt_abi |]\n+          [| word_rty cx.ctxt_abi.Abi.abi_word_bits |]\n       | Some c ->\n           [| Il.ScalarTy (Il.AddrTy c) |]\n   in\n@@ -2057,16 +2060,18 @@ let direct_call_args_referent_type\n ;;\n \n let ty_sz (abi:Abi.abi) (t:Ast.ty) : int64 =\n-  force_sz (Il.referent_ty_size abi.Abi.abi_word_bits (referent_type abi t))\n+  let wb = abi.Abi.abi_word_bits in\n+    force_sz (Il.referent_ty_size wb (referent_type wb t))\n ;;\n \n let ty_align (abi:Abi.abi) (t:Ast.ty) : int64 =\n-  force_sz (Il.referent_ty_align abi.Abi.abi_word_bits (referent_type abi t))\n+  let wb = abi.Abi.abi_word_bits in\n+    force_sz (Il.referent_ty_align wb (referent_type wb t))\n ;;\n \n let slot_sz (abi:Abi.abi) (s:Ast.slot) : int64 =\n-  force_sz (Il.referent_ty_size abi.Abi.abi_word_bits\n-              (slot_referent_type abi s))\n+  let wb = abi.Abi.abi_word_bits in\n+    force_sz (Il.referent_ty_size wb (slot_referent_type wb s))\n ;;\n \n let word_slot (abi:Abi.abi) : Ast.slot ="}, {"sha": "67e81c84b874c92278ac51dd36bda783cd562eeb", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/982dcc29bf6cd41e967a0befe0c6195811cd6a55/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=982dcc29bf6cd41e967a0befe0c6195811cd6a55", "patch": "@@ -292,7 +292,7 @@ let trans_visitor\n   in\n \n   let ptr_at (mem:Il.mem) (pointee_ty:Ast.ty) : Il.cell =\n-    rty_ptr_at mem (referent_type abi pointee_ty)\n+    rty_ptr_at mem (referent_type word_bits pointee_ty)\n   in\n \n   let need_scalar_ty (rty:Il.referent_ty) : Il.scalar_ty =\n@@ -330,11 +330,7 @@ let trans_visitor\n           (cell_str mem_cell)\n   in\n \n-  let rec ptr_cast (cell:Il.cell) (rty:Il.referent_ty) : Il.cell =\n-    match cell with\n-        Il.Mem (mem, _) -> Il.Mem (mem, rty)\n-      | Il.Reg (reg, Il.AddrTy _) -> Il.Reg (reg, Il.AddrTy rty)\n-      | _ -> bug () \"expected address cell in Trans.ptr_cast\"\n+  let rec ptr_cast = Il.ptr_cast\n \n   and curr_crate_ptr _ : Il.cell =\n     word_at (fp_imm frame_crate_ptr)\n@@ -453,7 +449,7 @@ let trans_visitor\n   in\n \n   let slot_id_referent_type (slot_id:node_id) : Il.referent_ty =\n-    slot_referent_type abi (get_slot cx slot_id)\n+    slot_referent_type word_bits (get_slot cx slot_id)\n   in\n \n   let caller_args_cell (args_rty:Il.referent_ty) : Il.cell =\n@@ -523,7 +519,7 @@ let trans_visitor\n   let get_obj_for_current_frame _ =\n     deref (ptr_cast\n              (get_closure_for_current_frame ())\n-             (Il.ScalarTy (Il.AddrTy (obj_closure_rty abi))))\n+             (Il.ScalarTy (Il.AddrTy (obj_closure_rty word_bits))))\n   in\n \n   let get_ty_params_of_current_frame _ : Il.cell =\n@@ -536,7 +532,7 @@ let trans_visitor\n           let obj = get_element_ptr obj_box Abi.box_rc_field_body in\n           let tydesc = get_element_ptr obj Abi.obj_body_elt_tydesc in\n           let ty_params_ty = Ast.TY_tup (make_tydesc_tys n_ty_params) in\n-          let ty_params_rty = referent_type abi ty_params_ty in\n+          let ty_params_rty = referent_type word_bits ty_params_ty in\n           let ty_params =\n             get_element_ptr (deref tydesc) Abi.tydesc_field_first_param\n           in\n@@ -721,7 +717,7 @@ let trans_visitor\n   in\n \n   let ty_sz_in_current_frame (ty:Ast.ty) : Il.operand =\n-    let rty = referent_type abi ty in\n+    let rty = referent_type word_bits ty in\n     let sz = Il.referent_ty_size word_bits rty in\n       calculate_sz_in_current_frame sz\n   in\n@@ -730,7 +726,7 @@ let trans_visitor\n       (ty_params:Il.cell)\n       (ty:Ast.ty)\n       : Il.operand =\n-    let rty = referent_type abi ty in\n+    let rty = referent_type word_bits ty in\n     let sz = Il.referent_ty_size word_bits rty in\n       calculate_sz ty_params sz\n   in\n@@ -931,7 +927,7 @@ let trans_visitor\n         mov idx atop;\n         emit (Il.binary Il.UMUL idx (Il.Cell idx) unit_sz);\n         let elt_mem = trans_bounds_check (deref cell) (Il.Cell idx) in\n-          (Il.Mem (elt_mem, referent_type abi ty), ty)\n+          (Il.Mem (elt_mem, referent_type word_bits ty), ty)\n     in\n       (* \n        * All lval components aside from explicit-deref just auto-deref\n@@ -1120,7 +1116,7 @@ let trans_visitor\n   and trans_static_string (s:string) : Il.operand =\n     Il.Cell (crate_rel_to_ptr\n                (trans_crate_rel_static_string_operand s)\n-               (referent_type abi Ast.TY_str))\n+               (referent_type word_bits Ast.TY_str))\n \n   and get_static_tydesc\n       (idopt:node_id option)\n@@ -1226,7 +1222,7 @@ let trans_visitor\n     let fty = Hashtbl.find (snd caller) ident in\n     let self_args_rty =\n       call_args_referent_type cx 0\n-        (Ast.TY_fn fty) (Some (obj_closure_rty abi))\n+        (Ast.TY_fn fty) (Some (obj_closure_rty word_bits))\n     in\n     let callsz = Il.referent_ty_size word_bits self_args_rty in\n     let spill = new_fixup \"forwarding fn spill\" in\n@@ -1394,7 +1390,7 @@ let trans_visitor\n       push_new_emitter_with_vregs None;\n       iflog (fun _ -> annotate \"prologue\");\n       abi.Abi.abi_emit_fn_prologue (emitter())\n-        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\");\n+        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\") false;\n       write_frame_info_ptrs None;\n       (* FIXME: not clear why, but checking interrupt in glue context\n        * causes many.rs to crash when run on a sufficiently large number\n@@ -1473,8 +1469,8 @@ let trans_visitor\n       (* FIXME (issue #5): mutability flag *)\n       : Il.referent_ty =\n     let rc = Il.ScalarTy word_sty in\n-    let targ = referent_type abi (mk_simple_ty_fn [||]) in\n-    let bindings = Array.map (slot_referent_type abi) bs in\n+    let targ = referent_type word_bits (mk_simple_ty_fn [||]) in\n+    let bindings = Array.map (slot_referent_type word_bits) bs in\n       Il.StructTy [| rc; targ; Il.StructTy bindings |]\n \n   (* FIXME (issue #2): this should eventually use tail calling logic *)\n@@ -2331,7 +2327,7 @@ let trans_visitor\n                  (get_element_ptr_dyn_in_current_frame\n                     vec Abi.vec_elt_data))\n         in\n-        let unit_rty = referent_type abi unit_ty in\n+        let unit_rty = referent_type word_bits unit_ty in\n         let body_rty = Il.StructTy (Array.map (fun _ -> unit_rty) atoms) in\n         let body = Il.Mem (body_mem, body_rty) in\n           Array.iteri\n@@ -2377,12 +2373,12 @@ let trans_visitor\n     let root_desc =\n       Il.Cell (crate_rel_to_ptr\n                  (get_static_tydesc idopt t 0L 0L force_stateful)\n-                 (tydesc_rty abi))\n+                 (tydesc_rty word_bits))\n     in\n     let (t, param_descs) = linearize_ty_params t in\n     let descs = Array.append [| root_desc |] param_descs in\n     let n = Array.length descs in\n-    let rty = referent_type abi t in\n+    let rty = referent_type word_bits t in\n     let (size_sz, align_sz) = Il.referent_ty_layout word_bits rty in\n     let size = calculate_sz_in_current_frame size_sz in\n     let align = calculate_sz_in_current_frame align_sz in\n@@ -2418,7 +2414,7 @@ let trans_visitor\n                                (ty_sz abi ty)\n                                (ty_align abi ty)\n                                mut)\n-             (tydesc_rty abi))\n+             (tydesc_rty word_bits))\n \n   and box_rc_cell (cell:Il.cell) : Il.cell =\n     get_element_ptr (deref cell) Abi.box_rc_field_refcnt\n@@ -2435,7 +2431,7 @@ let trans_visitor\n     in\n     let ty = simplified_ty ty in\n     let refty_sz =\n-      Il.referent_ty_size abi.Abi.abi_word_bits (referent_type abi ty)\n+      Il.referent_ty_size abi.Abi.abi_word_bits (referent_type word_bits ty)\n     in\n       match refty_sz with\n           SIZE_fixed _ -> imm (Int64.add (ty_sz abi ty) header_sz)\n@@ -2532,7 +2528,7 @@ let trans_visitor\n               trans_compare_simple Il.JAE (Il.Cell ptr) (Il.Cell lim)\n             in\n             let unit_cell =\n-              deref (ptr_cast ptr (referent_type abi unit_ty))\n+              deref (ptr_cast ptr (referent_type word_bits unit_ty))\n             in\n               f unit_cell unit_cell unit_ty curr_iso;\n               add_to ptr unit_sz;\n@@ -4310,7 +4306,7 @@ let trans_visitor\n       push_new_emitter_with_vregs (Some id);\n       iflog (fun _ -> annotate \"prologue\");\n       abi.Abi.abi_emit_fn_prologue (emitter())\n-        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\");\n+        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\") false;\n       write_frame_info_ptrs None;\n       iflog (fun _ -> annotate \"finished prologue\");\n       trans_block fe.Ast.for_each_body;\n@@ -4394,7 +4390,7 @@ let trans_visitor\n               let dst_fill = get_element_ptr dst_vec Abi.vec_elt_fill in\n \n               (* Copy loop: *)\n-              let eltp_rty = Il.AddrTy (referent_type abi elt_ty) in\n+              let eltp_rty = Il.AddrTy (referent_type word_bits elt_ty) in\n               let dptr = next_vreg_cell eltp_rty in\n               let sptr = next_vreg_cell eltp_rty in\n               let dlim = next_vreg_cell eltp_rty in\n@@ -4771,7 +4767,7 @@ let trans_visitor\n       end\n   in\n \n-  let trans_frame_entry (fnid:node_id) : unit =\n+  let trans_frame_entry (fnid:node_id) (obj_fn:bool) : unit =\n     let framesz = get_framesz cx fnid in\n     let callsz = get_callsz cx fnid in\n       Stack.push (Stack.create()) epilogue_jumps;\n@@ -4785,7 +4781,7 @@ let trans_visitor\n                                   (string_of_size callsz)));\n       abi.Abi.abi_emit_fn_prologue\n         (emitter()) framesz callsz nabi_rust\n-        (upcall_fixup \"upcall_grow_task\");\n+        (upcall_fixup \"upcall_grow_task\") obj_fn;\n \n       write_frame_info_ptrs (Some fnid);\n       check_interrupt_flag ();\n@@ -4809,8 +4805,9 @@ let trans_visitor\n   let trans_fn\n       (fnid:node_id)\n       (body:Ast.block)\n+      (obj_fn:bool)\n       : unit =\n-    trans_frame_entry fnid;\n+    trans_frame_entry fnid obj_fn;\n     trans_block body;\n     trans_frame_exit fnid true;\n   in\n@@ -4819,7 +4816,7 @@ let trans_visitor\n       (obj_id:node_id)\n       (header:Ast.header_slots)\n       : unit =\n-    trans_frame_entry obj_id;\n+    trans_frame_entry obj_id true;\n \n     let all_args_rty = current_fn_args_rty None in\n     let all_args_cell = caller_args_cell all_args_rty in\n@@ -4838,7 +4835,7 @@ let trans_visitor\n     let obj_args_ty = Ast.TY_tup obj_args_tup in\n     let state_ty = Ast.TY_tup [| Ast.TY_type; obj_args_ty |] in\n     let state_ptr_ty = Ast.TY_box state_ty in\n-    let state_ptr_rty = referent_type abi state_ptr_ty in\n+    let state_ptr_rty = referent_type word_bits state_ptr_ty in\n     let state_malloc_sz = box_allocation_size state_ptr_ty in\n \n     let ctor_ty = Hashtbl.find cx.ctxt_all_item_types obj_id in\n@@ -4940,7 +4937,7 @@ let trans_visitor\n   in\n \n   let trans_required_fn (fnid:node_id) (blockid:node_id) : unit =\n-    trans_frame_entry fnid;\n+    trans_frame_entry fnid false;\n     emit (Il.Enter (Hashtbl.find cx.ctxt_block_fixups blockid));\n     let (ilib, conv) = Hashtbl.find cx.ctxt_required_items fnid in\n     let lib_num =\n@@ -5078,7 +5075,7 @@ let trans_visitor\n       (tagid:node_id)\n       (tag:(Ast.header_tup * Ast.ty_tag * node_id))\n       : unit =\n-    trans_frame_entry tagid;\n+    trans_frame_entry tagid false;\n     trace_str cx.ctxt_sess.Session.sess_trace_tag\n       (\"in tag constructor \" ^ n);\n     let (header_tup, _, _) = tag in\n@@ -5141,7 +5138,7 @@ let trans_visitor\n     iflog (fun _ -> log cx \"translating defined item #%d = %s\"\n              (int_of_node i.id) (path_name()));\n     match i.node.Ast.decl_item with\n-        Ast.MOD_ITEM_fn f -> trans_fn i.id f.Ast.fn_body\n+        Ast.MOD_ITEM_fn f -> trans_fn i.id f.Ast.fn_body false\n       | Ast.MOD_ITEM_tag t -> trans_tag n i.id t\n       | Ast.MOD_ITEM_obj ob ->\n           trans_obj_ctor i.id\n@@ -5175,7 +5172,7 @@ let trans_visitor\n       push_new_emitter_with_vregs (Some b.id);\n       iflog (fun _ -> annotate \"prologue\");\n       abi.Abi.abi_emit_fn_prologue (emitter())\n-        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\");\n+        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\") true;\n       write_frame_info_ptrs None;\n       iflog (fun _ -> annotate \"finished prologue\");\n       trans_block b;\n@@ -5185,7 +5182,7 @@ let trans_visitor\n   in\n \n   let visit_defined_obj_fn_pre _ _ fn =\n-    trans_fn fn.id fn.node.Ast.fn_body\n+    trans_fn fn.id fn.node.Ast.fn_body true\n   in\n \n   let visit_required_obj_fn_pre _ _ _ ="}]}