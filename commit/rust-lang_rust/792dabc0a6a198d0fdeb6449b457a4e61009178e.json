{"sha": "792dabc0a6a198d0fdeb6449b457a4e61009178e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MmRhYmMwYTZhMTk4ZDBmZGViNjQ0OWI0NTdhNGU2MTAwOTE3OGU=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2018-12-21T14:27:04Z"}, "committer": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2018-12-21T14:27:04Z"}, "message": "When constructing a crate graph, detect and forbid cycles.\n\nfixed #300", "tree": {"sha": "e706fdada931060f8541fa2c2cdb8838d15c1b29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e706fdada931060f8541fa2c2cdb8838d15c1b29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/792dabc0a6a198d0fdeb6449b457a4e61009178e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/792dabc0a6a198d0fdeb6449b457a4e61009178e", "html_url": "https://github.com/rust-lang/rust/commit/792dabc0a6a198d0fdeb6449b457a4e61009178e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/792dabc0a6a198d0fdeb6449b457a4e61009178e/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463e5af3f2ff54b74e4aeb73e75047c00b6339be", "url": "https://api.github.com/repos/rust-lang/rust/commits/463e5af3f2ff54b74e4aeb73e75047c00b6339be", "html_url": "https://github.com/rust-lang/rust/commit/463e5af3f2ff54b74e4aeb73e75047c00b6339be"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "f220eda9ef70444d16d7a4110cbf8f925c4677cd", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 52, "deletions": 6, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/792dabc0a6a198d0fdeb6449b457a4e61009178e/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792dabc0a6a198d0fdeb6449b457a4e61009178e/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=792dabc0a6a198d0fdeb6449b457a4e61009178e", "patch": "@@ -7,11 +7,12 @@\n /// actual IO is done and lowered to input.\n use std::sync::Arc;\n \n-use rustc_hash::{FxHashMap};\n use relative_path::RelativePathBuf;\n-use ra_syntax::SmolStr;\n+use rustc_hash::FxHashMap;\n use salsa;\n \n+use ra_syntax::SmolStr;\n+\n /// `FileId` is an integer which uniquely identifies a file. File paths are\n /// messy and system-dependent, so most of the code should work directly with\n /// `FileId`, without inspecting the path. The mapping between `FileId` and path\n@@ -92,10 +93,10 @@ impl CrateGraph {\n         assert!(prev.is_none());\n         crate_id\n     }\n-    // FIXME: check that we don't have cycles here.\n-    // Just a simple depth first search from `to` should work,\n-    // the graph is small.\n     pub fn add_dep(&mut self, from: CrateId, name: SmolStr, to: CrateId) {\n+        if self.dfs(from, to) {\n+           panic!(\"Cycle dependencies found.\")\n+        }\n         self.arena.get_mut(&from).unwrap().add_dep(name, to)\n     }\n     pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n@@ -111,11 +112,56 @@ impl CrateGraph {\n     pub fn dependencies<'a>(\n         &'a self,\n         crate_id: CrateId,\n-    ) -> impl Iterator<Item = &'a Dependency> + 'a {\n+    ) -> impl Iterator<Item=&'a Dependency> + 'a {\n         self.arena[&crate_id].dependencies.iter()\n     }\n+    fn dfs(&self, target: CrateId, from: CrateId) -> bool {\n+        for dep in self.dependencies(from) {\n+            let crate_id = dep.crate_id();\n+            if crate_id == target {\n+                return true;\n+            }\n+            if self.arena.contains_key(&crate_id) {\n+                if self.dfs(target, crate_id) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n }\n \n+\n+mod test {\n+    use super::{CrateGraph, FxHashMap, FileId, SmolStr};\n+    #[test]\n+    #[should_panic]\n+    fn it_should_painc_because_of_cycle_dependencies() {\n+        let mut graph = CrateGraph {\n+            arena: FxHashMap::default()\n+        };\n+        let crate1 = graph.add_crate_root(FileId(1u32));\n+        let crate2 = graph.add_crate_root(FileId(2u32));\n+        let crate3 = graph.add_crate_root(FileId(3u32));\n+        graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2);\n+        graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3);\n+        graph.add_dep(crate3, SmolStr::new(\"crate1\"), crate1);\n+    }\n+\n+    #[test]\n+    fn it_works() {\n+        let mut graph = CrateGraph {\n+            arena: FxHashMap::default()\n+        };\n+        let crate1 = graph.add_crate_root(FileId(1u32));\n+        let crate2 = graph.add_crate_root(FileId(2u32));\n+        let crate3 = graph.add_crate_root(FileId(3u32));\n+        graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2);\n+        graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3);\n+    }\n+}\n+\n+\n salsa::query_group! {\n     pub trait FilesDatabase: salsa::Database {\n         /// Text of the file."}]}