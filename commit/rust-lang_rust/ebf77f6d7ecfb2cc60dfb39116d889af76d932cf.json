{"sha": "ebf77f6d7ecfb2cc60dfb39116d889af76d932cf", "node_id": "C_kwDOAAsO6NoAKGViZjc3ZjZkN2VjZmIyY2M2MGRmYjM5MTE2ZDg4OWFmNzZkOTMyY2Y", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-06-23T14:37:00Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-06-23T14:44:11Z"}, "message": "Fix ICE when deprecating lints in directories", "tree": {"sha": "5402cbdeb3c22a0fc17c54a88503a1843a0e3e39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5402cbdeb3c22a0fc17c54a88503a1843a0e3e39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf77f6d7ecfb2cc60dfb39116d889af76d932cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf77f6d7ecfb2cc60dfb39116d889af76d932cf", "html_url": "https://github.com/rust-lang/rust/commit/ebf77f6d7ecfb2cc60dfb39116d889af76d932cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf77f6d7ecfb2cc60dfb39116d889af76d932cf/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd1581bbf8e6e1ac3ad78638ac9c1ab0baa9a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd1581bbf8e6e1ac3ad78638ac9c1ab0baa9a8f", "html_url": "https://github.com/rust-lang/rust/commit/2bd1581bbf8e6e1ac3ad78638ac9c1ab0baa9a8f"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "115f5f0064fea9bcd741f820ae1492e77edf7485", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ebf77f6d7ecfb2cc60dfb39116d889af76d932cf/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf77f6d7ecfb2cc60dfb39116d889af76d932cf/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=ebf77f6d7ecfb2cc60dfb39116d889af76d932cf", "patch": "@@ -363,12 +363,12 @@ pub fn deprecate(name: &str, reason: Option<&String>) {\n     let name_upper = name.to_uppercase();\n \n     let (mut lints, deprecated_lints, renamed_lints) = gather_all();\n-    let Some(lint) = lints.iter().find(|l| l.name == name_lower) else { panic!(\"failed to find lint `{}`\", name) };\n+    let Some(lint) = lints.iter().find(|l| l.name == name_lower) else { eprintln!(\"error: failed to find lint `{}`\", name); return; };\n \n     let mod_path = {\n         let mut mod_path = PathBuf::from(format!(\"clippy_lints/src/{}\", lint.module));\n         if mod_path.is_dir() {\n-            mod_path = mod_path.join(name);\n+            mod_path = mod_path.join(\"mod\");\n         }\n \n         mod_path.set_extension(\"rs\");\n@@ -422,7 +422,7 @@ fn remove_lint_declaration(name: &str, path: &Path, lints: &mut Vec<Lint>) -> io\n             let mut lint_name_end = impl_lint_pass_start + (lint_name_pos + lint_name_upper.len());\n             for c in content[lint_name_end..impl_lint_pass_end].chars() {\n                 // Remove trailing whitespace\n-                if c.is_whitespace() {\n+                if c == ',' || c.is_whitespace() {\n                     lint_name_end += 1;\n                 } else {\n                     break;\n@@ -440,39 +440,41 @@ fn remove_lint_declaration(name: &str, path: &Path, lints: &mut Vec<Lint>) -> io\n                 fs::remove_file(path)?;\n             } else {\n                 // We can't delete the entire file, just remove the declaration\n-                if lint.module != name {\n-                    let mut mod_decl_path = path.to_path_buf();\n-                    if mod_decl_path.is_dir() {\n-                        mod_decl_path = Path::new(\"clippy_lints/src\").join(&lint.module).join(\"mod.rs\");\n-                    }\n-\n-                    let mut content = fs::read_to_string(&mod_decl_path)\n-                        .unwrap_or_else(|_| panic!(\"failed to read `{}`\", path.to_string_lossy()));\n-\n-                    eprintln!(\n-                        \"warn: you will have to manually remove any code related to `{}` from `{}`\",\n-                        name,\n-                        &mod_decl_path.to_string_lossy()\n-                    );\n-\n-                    assert!(\n-                        content[lint.declaration_range.clone()].contains(&name.to_uppercase()),\n-                        \"error: `{}` does not contain lint `{}`'s declaration\",\n-                        mod_decl_path.display(),\n-                        lint.name\n-                    );\n-\n-                    // Remove lint declaration (declare_clippy_lint!)\n-                    content.replace_range(lint.declaration_range.clone(), \"\");\n-\n-                    // Remove the module declaration (mod xyz;)\n-                    let mod_decl = format!(\"\\nmod {};\", name);\n-                    content = content.replacen(&mod_decl, \"\", 1);\n-\n-                    remove_impl_lint_pass(&lint.name.to_uppercase(), &mut content);\n-                    fs::write(mod_decl_path, content)\n-                        .unwrap_or_else(|_| panic!(\"failed to write to `{}`\", path.to_string_lossy()));\n+\n+                if let Some(Some(\"mod.rs\")) = path.file_name().map(OsStr::to_str) {\n+                    // Remove clippy_lints/src/some_mod/some_lint.rs\n+                    let mut lint_mod_path = path.to_path_buf();\n+                    lint_mod_path.set_file_name(name);\n+                    lint_mod_path.set_extension(\"rs\");\n+\n+                    fs::remove_file(lint_mod_path).ok();\n                 }\n+\n+                let mut content =\n+                    fs::read_to_string(&path).unwrap_or_else(|_| panic!(\"failed to read `{}`\", path.to_string_lossy()));\n+\n+                eprintln!(\n+                    \"warn: you will have to manually remove any code related to `{}` from `{}`\",\n+                    name,\n+                    path.display()\n+                );\n+\n+                assert!(\n+                    content[lint.declaration_range.clone()].contains(&name.to_uppercase()),\n+                    \"error: `{}` does not contain lint `{}`'s declaration\",\n+                    path.display(),\n+                    lint.name\n+                );\n+\n+                // Remove lint declaration (declare_clippy_lint!)\n+                content.replace_range(lint.declaration_range.clone(), \"\");\n+\n+                // Remove the module declaration (mod xyz;)\n+                let mod_decl = format!(\"\\nmod {};\", name);\n+                content = content.replacen(&mod_decl, \"\", 1);\n+\n+                remove_impl_lint_pass(&lint.name.to_uppercase(), &mut content);\n+                fs::write(path, content).unwrap_or_else(|_| panic!(\"failed to write to `{}`\", path.to_string_lossy()));\n             }\n \n             remove_test_assets(name);"}]}