{"sha": "13b82ecf80031cd0d50fa400ca87e044b292298d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYjgyZWNmODAwMzFjZDBkNTBmYTQwMGNhODdlMDQ0YjI5MjI5OGQ=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-06-24T23:08:36Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-06-30T22:53:52Z"}, "message": "Minor refactoring.", "tree": {"sha": "ce1b0138b819fee7020310e74af1a9a800c72634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce1b0138b819fee7020310e74af1a9a800c72634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13b82ecf80031cd0d50fa400ca87e044b292298d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13b82ecf80031cd0d50fa400ca87e044b292298d", "html_url": "https://github.com/rust-lang/rust/commit/13b82ecf80031cd0d50fa400ca87e044b292298d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13b82ecf80031cd0d50fa400ca87e044b292298d/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f751a9c5a03bfa3d04cc34f4ba46ff0c3699547", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f751a9c5a03bfa3d04cc34f4ba46ff0c3699547", "html_url": "https://github.com/rust-lang/rust/commit/9f751a9c5a03bfa3d04cc34f4ba46ff0c3699547"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "7e2c144e0a71df68731067f21cd4e2ac1fd9aa63", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b82ecf80031cd0d50fa400ca87e044b292298d/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b82ecf80031cd0d50fa400ca87e044b292298d/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=13b82ecf80031cd0d50fa400ca87e044b292298d", "patch": "@@ -306,7 +306,7 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n             ReadBytesAsPointer =>\n                 \"a memory access tried to interpret some bytes as a pointer\",\n             ReadForeignStatic =>\n-                \"tried to read foreign (extern) static\",\n+                \"tried to read from foreign (extern) static\",\n             InvalidPointerMath =>\n                 \"attempted to do invalid arithmetic on pointers that would leak base addresses, e.g. comparing pointers into different allocations\",\n             ReadUndefBytes =>"}, {"sha": "986957d5a82676b1fdf64f41d0aeb35c306603e5", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/13b82ecf80031cd0d50fa400ca87e044b292298d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b82ecf80031cd0d50fa400ca87e044b292298d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=13b82ecf80031cd0d50fa400ca87e044b292298d", "patch": "@@ -450,25 +450,26 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n         match *place {\n             Place::Local(ref local) => self.visit_local(local, context, location),\n             Place::Static(ref global) => {\n-                // Only allow statics (not consts) to refer to other statics.\n-                if !(self.mode == Mode::Static || self.mode == Mode::StaticMut) {\n+                if self.tcx\n+                       .get_attrs(global.def_id)\n+                       .iter()\n+                       .any(|attr| attr.check_name(\"thread_local\")) {\n+                    if self.mode != Mode::Fn {\n+                        span_err!(self.tcx.sess, self.span, E0625,\n+                                  \"thread-local statics cannot be \\\n+                                   accessed at compile-time\");\n+                    }\n                     self.add(Qualif::NOT_CONST);\n+                    return;\n                 }\n \n-                if self.mode != Mode::Fn {\n-                    if self.tcx\n-                           .get_attrs(global.def_id)\n-                           .iter()\n-                           .any(|attr| attr.check_name(\"thread_local\")) {\n-                        span_err!(self.tcx.sess, self.span, E0625,\n-                                    \"thread-local statics cannot be \\\n-                                    accessed at compile-time\");\n-                        self.add(Qualif::NOT_CONST);\n-                        return;\n-                    }\n+                // Only allow statics (not consts) to refer to other statics.\n+                if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n+                    return;\n                 }\n+                self.add(Qualif::NOT_CONST);\n \n-                if self.mode == Mode::Const || self.mode == Mode::ConstFn {\n+                if self.mode != Mode::Fn {\n                     let mut err = struct_span_err!(self.tcx.sess, self.span, E0013,\n                                                    \"{}s cannot refer to statics, use \\\n                                                     a constant instead\", self.mode);\n@@ -544,13 +545,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n     }\n \n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n+        self.super_operand(operand, location);\n+\n         match *operand {\n             Operand::Copy(_) |\n             Operand::Move(_) => {\n-                self.nest(|this| {\n-                    this.super_operand(operand, location);\n-                });\n-\n                 // Mark the consumed locals to indicate later drops are noops.\n                 if let Operand::Move(Place::Local(local)) = *operand {\n                     self.local_qualif[local] = self.local_qualif[local].map(|q|\n@@ -595,12 +594,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             }\n \n             if is_reborrow {\n-                self.nest(|this| {\n-                    this.super_place(place, PlaceContext::Borrow {\n-                        region,\n-                        kind\n-                    }, location);\n-                });\n+                self.super_place(place, PlaceContext::Borrow {\n+                    region,\n+                    kind\n+                }, location);\n             } else {\n                 self.super_rvalue(rvalue, location);\n             }"}, {"sha": "0f9fe3fe246f679173bc906f478161e718c22b8e", "filename": "src/test/compile-fail/issue-28324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b82ecf80031cd0d50fa400ca87e044b292298d/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b82ecf80031cd0d50fa400ca87e044b292298d/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs?ref=13b82ecf80031cd0d50fa400ca87e044b292298d", "patch": "@@ -16,6 +16,6 @@ extern {\n \n pub static BAZ: u32 = *&error_message_count;\n //~^ ERROR constant evaluation error\n-//~| tried to read foreign (extern) static\n+//~| tried to read from foreign (extern) static\n \n fn main() {}"}]}