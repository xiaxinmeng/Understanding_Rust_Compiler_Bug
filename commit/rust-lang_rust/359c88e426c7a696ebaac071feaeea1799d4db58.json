{"sha": "359c88e426c7a696ebaac071feaeea1799d4db58", "node_id": "C_kwDOAAsO6NoAKDM1OWM4OGU0MjZjN2E2OTZlYmFhYzA3MWZlYWVlYTE3OTlkNGRiNTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-18T09:26:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T09:26:35Z"}, "message": "Rollup merge of #91439 - ecstatic-morse:const-cmp-trait-default-methods, r=oli-obk\n\nMark defaulted `PartialEq`/`PartialOrd` methods as const\n\nWIthout it, `const` impls of these traits are unpleasant to write. I think this kind of change is allowed now. although it looks like it might require some Miri tweaks. Let's find out.\n\nr? ```@fee1-dead```", "tree": {"sha": "652481be0267da3aab94a8588bdca5ecc3cc45d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/652481be0267da3aab94a8588bdca5ecc3cc45d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/359c88e426c7a696ebaac071feaeea1799d4db58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvalLCRBK7hj4Ov3rIwAA9vgIACTJjDXF5ndy9TZAUjbkqaMU\nsleqTPKpwBAcvImnxUunb3THlwl2gZzxICa7c+gQynKkk3jF0xgPHxsh5V0cowEP\nm0oHhrOluJ+7fn/wetG0OZq07gBnecWLS3bCq3Pr0It1YN8uj2/Q40FWIDsEzH/Z\nMwE+icn+/d/0kmuqP5YPu+97+aGW2DgD2RWLTJ0dwM8mvjSXAhZa+x6UAjfGrMjl\nLRyKpeChAqNFWuaLF1TQ6N6MVyIKVdPVXknUsarDzNo/X+RNPsTVKMT1IomMIPmi\nLc0WK1H6+P4d7rp7gTztogGO6DcpLGpYY4kPpiDZQTSgo12fD/tD5sGQOo7H7Bk=\n=fXMS\n-----END PGP SIGNATURE-----\n", "payload": "tree 652481be0267da3aab94a8588bdca5ecc3cc45d2\nparent dde825db464b08d6f572766579dfb629b837368c\nparent 20492870307feae4ca57acdca75bcc8ea06fe175\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639819595 +0100\ncommitter GitHub <noreply@github.com> 1639819595 +0100\n\nRollup merge of #91439 - ecstatic-morse:const-cmp-trait-default-methods, r=oli-obk\n\nMark defaulted `PartialEq`/`PartialOrd` methods as const\n\nWIthout it, `const` impls of these traits are unpleasant to write. I think this kind of change is allowed now. although it looks like it might require some Miri tweaks. Let's find out.\n\nr? ```@fee1-dead```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/359c88e426c7a696ebaac071feaeea1799d4db58", "html_url": "https://github.com/rust-lang/rust/commit/359c88e426c7a696ebaac071feaeea1799d4db58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/359c88e426c7a696ebaac071feaeea1799d4db58/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dde825db464b08d6f572766579dfb629b837368c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dde825db464b08d6f572766579dfb629b837368c", "html_url": "https://github.com/rust-lang/rust/commit/dde825db464b08d6f572766579dfb629b837368c"}, {"sha": "20492870307feae4ca57acdca75bcc8ea06fe175", "url": "https://api.github.com/repos/rust-lang/rust/commits/20492870307feae4ca57acdca75bcc8ea06fe175", "html_url": "https://github.com/rust-lang/rust/commit/20492870307feae4ca57acdca75bcc8ea06fe175"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "deed9901cc9e4595919ba893927d7c34820616a8", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/359c88e426c7a696ebaac071feaeea1799d4db58/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359c88e426c7a696ebaac071feaeea1799d4db58/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=359c88e426c7a696ebaac071feaeea1799d4db58", "patch": "@@ -215,6 +215,7 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[default_method_body_is_const]\n     fn ne(&self, other: &Rhs) -> bool {\n         !self.eq(other)\n     }\n@@ -1031,6 +1032,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[default_method_body_is_const]\n     fn lt(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Less))\n     }\n@@ -1050,6 +1052,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[default_method_body_is_const]\n     fn le(&self, other: &Rhs) -> bool {\n         // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.\n         // FIXME: The root cause was fixed upstream in LLVM with:\n@@ -1072,6 +1075,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[default_method_body_is_const]\n     fn gt(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Greater))\n     }\n@@ -1091,6 +1095,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[default_method_body_is_const]\n     fn ge(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Greater | Equal))\n     }"}, {"sha": "58fee19ca7490d3e2251fe3e8ad40a101bcac1f0", "filename": "library/core/tests/cmp.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/359c88e426c7a696ebaac071feaeea1799d4db58/library%2Fcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359c88e426c7a696ebaac071feaeea1799d4db58/library%2Fcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcmp.rs?ref=359c88e426c7a696ebaac071feaeea1799d4db58", "patch": "@@ -203,3 +203,36 @@ fn cmp_default() {\n     assert!(Fool(false) != Fool(false));\n     assert_eq!(Fool(false), Fool(true));\n }\n+\n+#[cfg(not(bootstrap))]\n+mod const_cmp {\n+    use super::*;\n+\n+    struct S(i32);\n+\n+    impl const PartialEq for S {\n+        fn eq(&self, other: &Self) -> bool {\n+            self.0 == other.0\n+        }\n+    }\n+\n+    impl const PartialOrd for S {\n+        fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+            let ret = match (self.0, other.0) {\n+                (a, b) if a > b => Ordering::Greater,\n+                (a, b) if a < b => Ordering::Less,\n+                _ => Ordering::Equal,\n+            };\n+\n+            Some(ret)\n+        }\n+    }\n+\n+    const _: () = assert!(S(1) == S(1));\n+    const _: () = assert!(S(0) != S(1));\n+\n+    const _: () = assert!(S(1) <= S(1));\n+    const _: () = assert!(S(1) >= S(1));\n+    const _: () = assert!(S(0) < S(1));\n+    const _: () = assert!(S(1) > S(0));\n+}"}]}