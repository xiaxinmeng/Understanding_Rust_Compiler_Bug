{"sha": "4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTAwYzUyNDgyZmQzOThjYmVjNGQxZDQzM2ZjYzJlNjg4OGZmMWI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-07-26T12:54:44Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-07-27T09:22:26Z"}, "message": "rustc_const_eval: always require correct Substs.", "tree": {"sha": "ada190e0f3340111d3355b63addc136a815ac6b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ada190e0f3340111d3355b63addc136a815ac6b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "html_url": "https://github.com/rust-lang/rust/commit/4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c126bdee6af3feef2d51956debab72f933078c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c126bdee6af3feef2d51956debab72f933078c6", "html_url": "https://github.com/rust-lang/rust/commit/5c126bdee6af3feef2d51956debab72f933078c6"}], "stats": {"total": 206, "additions": 113, "deletions": 93}, "files": [{"sha": "33e9df1e413c7b21cdb50a93e4de9fb400f3e1b8", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -229,7 +229,7 @@ pub fn eval_length(tcx: TyCtxt,\n {\n     let count_expr = &tcx.hir.body(count).value;\n     let count_def_id = tcx.hir.body_owner_def_id(count);\n-    let substs = Substs::empty();\n+    let substs = Substs::identity_for_item(tcx.global_tcx(), count_def_id);\n     match tcx.at(count_expr.span).const_eval((count_def_id, substs)) {\n         Ok(Integral(Usize(count))) => {\n             let val = count.as_u64(tcx.sess.target.uint_type);"}, {"sha": "70aee6ffcf357bcac2b5177e763973219fff6b22", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -1588,7 +1588,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         self.variants.iter().map(move |v| {\n             let mut discr = prev_discr.map_or(initial, |d| d.wrap_incr());\n             if let VariantDiscr::Explicit(expr_did) = v.discr {\n-                let substs = Substs::empty();\n+                let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n                 match tcx.const_eval((expr_did, substs)) {\n                     Ok(ConstVal::Integral(v)) => {\n                         discr = v;\n@@ -1627,7 +1627,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                     explicit_index -= distance;\n                 }\n                 ty::VariantDiscr::Explicit(expr_did) => {\n-                    let substs = Substs::empty();\n+                    let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n                     match tcx.const_eval((expr_did, substs)) {\n                         Ok(ConstVal::Integral(v)) => {\n                             explicit_value = v;"}, {"sha": "e7a12df0a27ae1d3b106905021392fed05fbd2f7", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -21,6 +21,7 @@ use rustc::middle::mem_categorization::{cmt};\n use rustc::middle::region::RegionMaps;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::subst::Substs;\n use rustc::lint;\n use rustc_errors::{Diagnostic, Level, DiagnosticBuilder};\n \n@@ -51,7 +52,8 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n             tcx: self.tcx,\n             tables: self.tcx.body_tables(b),\n             region_maps: &self.tcx.region_maps(def_id),\n-            param_env: self.tcx.param_env(def_id)\n+            param_env: self.tcx.param_env(def_id),\n+            identity_substs: Substs::identity_for_item(self.tcx, def_id),\n         }.visit_body(self.tcx.hir.body(b));\n     }\n }\n@@ -69,6 +71,7 @@ struct MatchVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n+    identity_substs: &'tcx Substs<'tcx>,\n     region_maps: &'a RegionMaps,\n }\n \n@@ -110,7 +113,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n+impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     fn report_inlining_errors(&self, pat_span: Span) {\n         for error in &self.errors {\n             match *error {\n@@ -162,7 +165,8 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n \n             let inlined_arms : Vec<(Vec<_>, _)> = arms.iter().map(|arm| (\n                 arm.pats.iter().map(|pat| {\n-                    let mut patcx = PatternContext::new(self.tcx, self.tables);\n+                    let substs = self.identity_substs;\n+                    let mut patcx = PatternContext::new(self.tcx, self.tables, substs);\n                     let pattern = expand_pattern(cx, patcx.lower_pattern(&pat));\n                     if !patcx.errors.is_empty() {\n                         patcx.report_inlining_errors(pat.span);\n@@ -229,7 +233,8 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n     fn check_irrefutable(&self, pat: &Pat, origin: &str) {\n         let module = self.tcx.hir.get_module_parent(pat.id);\n         MatchCheckCtxt::create_and_enter(self.tcx, module, |ref mut cx| {\n-            let mut patcx = PatternContext::new(self.tcx, self.tables);\n+            let substs = self.identity_substs;\n+            let mut patcx = PatternContext::new(self.tcx, self.tables, substs);\n             let pattern = patcx.lower_pattern(pat);\n             let pattern_ty = pattern.ty;\n             let pats : Matrix = vec![vec!["}, {"sha": "bcf5fd2b13db1bbc6d97c189f4fe76ea20e625fa", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 15, "deletions": 38, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -94,11 +94,13 @@ pub struct ConstContext<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n-    pub fn with_tables(tcx: TyCtxt<'a, 'tcx, 'tcx>, tables: &'a ty::TypeckTables<'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+               tables: &'a ty::TypeckTables<'tcx>,\n+               substs: &'tcx Substs<'tcx>) -> Self {\n         ConstContext {\n-            tcx: tcx,\n-            tables: tables,\n-            substs: tcx.intern_substs(&[]),\n+            tcx,\n+            tables,\n+            substs,\n             fn_args: None\n         }\n     }\n@@ -118,14 +120,7 @@ type CastResult<'tcx> = Result<ConstVal<'tcx>, ErrKind<'tcx>>;\n fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n                                      e: &Expr) -> EvalResult<'tcx> {\n     let tcx = cx.tcx;\n-    let ety = cx.tables.expr_ty(e);\n-\n-    // Avoid applying substitutions if they're empty, that'd ICE.\n-    let ety = if cx.substs.is_empty() {\n-        ety\n-    } else {\n-        ety.subst(tcx, cx.substs)\n-    };\n+    let ety = cx.tables.expr_ty(e).subst(tcx, cx.substs);\n \n     let result = match e.node {\n       hir::ExprUnary(hir::UnNeg, ref inner) => {\n@@ -269,14 +264,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n       }\n       hir::ExprCast(ref base, _) => {\n         let base_val = cx.eval(base)?;\n-        let base_ty = cx.tables.expr_ty(base);\n-\n-        // Avoid applying substitutions if they're empty, that'd ICE.\n-        let base_ty = if cx.substs.is_empty() {\n-            base_ty\n-        } else {\n-            base_ty.subst(tcx, cx.substs)\n-        };\n+        let base_ty = cx.tables.expr_ty(base).subst(tcx, cx.substs);\n         if ety == base_ty {\n             base_val\n         } else {\n@@ -287,15 +275,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n         }\n       }\n       hir::ExprPath(ref qpath) => {\n-        let substs = cx.tables.node_substs(e.id);\n-\n-        // Avoid applying substitutions if they're empty, that'd ICE.\n-        let substs = if cx.substs.is_empty() {\n-            substs\n-        } else {\n-            substs.subst(tcx, cx.substs)\n-        };\n-\n+        let substs = cx.tables.node_substs(e.id).subst(tcx, cx.substs);\n           match cx.tables.qpath_def(qpath, e.id) {\n               Def::Const(def_id) |\n               Def::AssociatedConst(def_id) => {\n@@ -538,7 +518,10 @@ fn resolve_trait_associated_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 match ac {\n                     // FIXME(eddyb) Use proper Instance resolution to\n                     // get the correct Substs returned from here.\n-                    Some(ic) => Some((ic.def_id, Substs::empty())),\n+                    Some(ic) => {\n+                        let substs = Substs::identity_for_item(tcx, ic.def_id);\n+                        Some((ic.def_id, substs))\n+                    }\n                     None => {\n                         if trait_item.defaultness.has_value() {\n                             Some((def_id, substs))\n@@ -789,18 +772,12 @@ fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         });\n     };\n \n-    let cx = ConstContext {\n-        tcx,\n-        tables: tcx.typeck_tables_of(def_id),\n-        substs: substs,\n-        fn_args: None\n-    };\n-\n+    let tables = tcx.typeck_tables_of(def_id);\n     let body = if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n         tcx.mir_const_qualif(def_id);\n         tcx.hir.body(tcx.hir.body_owned_by(id))\n     } else {\n         tcx.sess.cstore.item_body(tcx, def_id)\n     };\n-    cx.eval(&body.value)\n+    ConstContext::new(tcx, tables, substs).eval(&body.value)\n }"}, {"sha": "07c45d3ee5192418e5313138d977f7bf16b814d9", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -266,17 +266,19 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n     }\n }\n \n-pub struct PatternContext<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    pub tables: &'a ty::TypeckTables<'gcx>,\n+pub struct PatternContext<'a, 'tcx: 'a> {\n+    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    pub tables: &'a ty::TypeckTables<'tcx>,\n+    pub substs: &'tcx Substs<'tcx>,\n     pub errors: Vec<PatternError<'tcx>>,\n }\n \n-impl<'a, 'gcx, 'tcx> Pattern<'tcx> {\n-    pub fn from_hir(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                    tables: &'a ty::TypeckTables<'gcx>,\n+impl<'a, 'tcx> Pattern<'tcx> {\n+    pub fn from_hir(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    tables: &'a ty::TypeckTables<'tcx>,\n+                    substs: &'tcx Substs<'tcx>,\n                     pat: &hir::Pat) -> Self {\n-        let mut pcx = PatternContext::new(tcx, tables);\n+        let mut pcx = PatternContext::new(tcx, tables, substs);\n         let result = pcx.lower_pattern(pat);\n         if !pcx.errors.is_empty() {\n             span_bug!(pat.span, \"encountered errors lowering pattern: {:?}\", pcx.errors)\n@@ -286,9 +288,11 @@ impl<'a, 'gcx, 'tcx> Pattern<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>, tables: &'a ty::TypeckTables<'gcx>) -> Self {\n-        PatternContext { tcx: tcx, tables: tables, errors: vec![] }\n+impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+               tables: &'a ty::TypeckTables<'tcx>,\n+               substs: &'tcx Substs<'tcx>) -> Self {\n+        PatternContext { tcx, tables, substs, errors: vec![] }\n     }\n \n     pub fn lower_pattern(&mut self, pat: &hir::Pat) -> Pattern<'tcx> {\n@@ -583,20 +587,22 @@ impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n         let def = self.tables.qpath_def(qpath, id);\n         let kind = match def {\n             Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n-                let tcx = self.tcx.global_tcx();\n                 let substs = self.tables.node_substs(id);\n-                match eval::lookup_const_by_id(tcx, def_id, substs) {\n-                    Some((def_id, _substs)) => {\n-                        // Enter the inlined constant's tables temporarily.\n+                match eval::lookup_const_by_id(self.tcx, def_id, substs) {\n+                    Some((def_id, substs)) => {\n+                        // Enter the inlined constant's tables&substs temporarily.\n                         let old_tables = self.tables;\n-                        self.tables = tcx.typeck_tables_of(def_id);\n-                        let body = if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n-                            tcx.hir.body(tcx.hir.body_owned_by(id))\n+                        let old_substs = self.substs;\n+                        self.tables = self.tcx.typeck_tables_of(def_id);\n+                        self.substs = substs;\n+                        let body = if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n+                            self.tcx.hir.body(self.tcx.hir.body_owned_by(id))\n                         } else {\n-                            tcx.sess.cstore.item_body(tcx, def_id)\n+                            self.tcx.sess.cstore.item_body(self.tcx, def_id)\n                         };\n                         let pat = self.lower_const_expr(&body.value, pat_id, span);\n                         self.tables = old_tables;\n+                        self.substs = old_substs;\n                         return pat;\n                     }\n                     None => {\n@@ -616,7 +622,7 @@ impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn lower_lit(&mut self, expr: &hir::Expr) -> PatternKind<'tcx> {\n-        let const_cx = eval::ConstContext::with_tables(self.tcx.global_tcx(), self.tables);\n+        let const_cx = eval::ConstContext::new(self.tcx, self.tables, self.substs);\n         match const_cx.eval(expr) {\n             Ok(value) => {\n                 if let ConstVal::Variant(def_id) = value {"}, {"sha": "be7976b7a93b29962981d0c3f9f7e7bcc7b71a7f", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -106,7 +106,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                 false\n                             }\n                         } else {\n-                            let const_cx = ConstContext::with_tables(cx.tcx, cx.tables);\n+                            // HACK(eddyb) This might be quite inefficient.\n+                            // This would be better left to MIR constant propagation,\n+                            // perhaps even at trans time (like is the case already\n+                            // when the value being shifted is *also* constant).\n+                            let parent_item = cx.tcx.hir.get_parent(e.id);\n+                            let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+                            let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+                            let const_cx = ConstContext::new(cx.tcx, cx.tables, substs);\n                             match const_cx.eval(&r) {\n                                 Ok(ConstVal::Integral(i)) => {\n                                     i.is_negative() ||"}, {"sha": "9615dfa5093c394fa63a16224cdfa5f63d3785dc", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -513,7 +513,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let lvalue = Lvalue::Local(Local::new(index + 1));\n \n             if let Some(pattern) = pattern {\n-                let pattern = Pattern::from_hir(self.hir.tcx(), self.hir.tables(), pattern);\n+                let pattern = Pattern::from_hir(self.hir.tcx().global_tcx(),\n+                                                self.hir.tables(),\n+                                                self.hir.identity_substs,\n+                                                pattern);\n                 scope = self.declare_bindings(scope, ast_body.span, &pattern);\n                 unpack!(block = self.lvalue_into_pattern(block, pattern, &lvalue));\n             }"}, {"sha": "f39c354fb3020b374d7dbd7273301d92d9746969", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -70,7 +70,10 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             first_statement_index: index as u32,\n                         });\n \n-                        let pattern = Pattern::from_hir(cx.tcx, cx.tables(), &local.pat);\n+                        let pattern = Pattern::from_hir(cx.tcx.global_tcx(),\n+                                                        cx.tables(),\n+                                                        cx.identity_substs,\n+                                                        &local.pat);\n                         result.push(StmtRef::Mirror(Box::new(Stmt {\n                             span: stmt.span,\n                             kind: StmtKind::Let {"}, {"sha": "db3b15d44bcc2d1db1d98ac31f032b48b7566e97", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -466,7 +466,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprRepeat(ref v, count) => {\n             let c = &cx.tcx.hir.body(count).value;\n             let def_id = cx.tcx.hir.body_owner_def_id(count);\n-            let substs = Substs::empty();\n+            let substs = Substs::identity_for_item(cx.tcx.global_tcx(), def_id);\n             let count = match cx.tcx.at(c.span).const_eval((def_id, substs)) {\n                 Ok(ConstVal::Integral(ConstInt::Usize(u))) => u,\n                 Ok(other) => bug!(\"constant evaluation of repeat count yielded {:?}\", other),\n@@ -604,7 +604,9 @@ fn to_borrow_kind(m: hir::Mutability) -> BorrowKind {\n \n fn convert_arm<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>, arm: &'tcx hir::Arm) -> Arm<'tcx> {\n     Arm {\n-        patterns: arm.pats.iter().map(|p| Pattern::from_hir(cx.tcx, cx.tables(), p)).collect(),\n+        patterns: arm.pats.iter().map(|p| {\n+            Pattern::from_hir(cx.tcx.global_tcx(), cx.tables(), cx.identity_substs, p)\n+        }).collect(),\n         guard: arm.guard.to_ref(),\n         body: arm.body.to_ref(),\n     }"}, {"sha": "2d6dce8adf5329238e991cb740ab483bdd88830c", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -26,6 +26,7 @@ use rustc::middle::region::RegionMaps;\n use rustc::infer::InferCtxt;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::subst::Substs;\n use syntax::symbol::Symbol;\n use rustc::hir;\n use rustc_const_math::{ConstInt, ConstUsize};\n@@ -35,7 +36,12 @@ use std::rc::Rc;\n pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+\n     pub param_env: ty::ParamEnv<'tcx>,\n+\n+    /// Identity `Substs` for use with const-evaluation.\n+    pub identity_substs: &'gcx Substs<'gcx>,\n+\n     pub region_maps: Rc<RegionMaps>,\n     pub tables: &'a ty::TypeckTables<'gcx>,\n \n@@ -66,10 +72,6 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         let src_id = src.item_id();\n         let src_def_id = tcx.hir.local_def_id(src_id);\n \n-        let param_env = tcx.param_env(src_def_id);\n-        let region_maps = tcx.region_maps(src_def_id);\n-        let tables = tcx.typeck_tables_of(src_def_id);\n-\n         let attrs = tcx.hir.attrs(src_id);\n \n         // Some functions always have overflow checks enabled,\n@@ -84,7 +86,17 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         // Constants and const fn's always need overflow checks.\n         check_overflow |= constness == hir::Constness::Const;\n \n-        Cx { tcx, infcx, param_env, region_maps, tables, constness, src, check_overflow }\n+        Cx {\n+            tcx,\n+            infcx,\n+            param_env: tcx.param_env(src_def_id),\n+            identity_substs: Substs::identity_for_item(tcx.global_tcx(), src_def_id),\n+            region_maps: tcx.region_maps(src_def_id),\n+            tables: tcx.typeck_tables_of(src_def_id),\n+            constness,\n+            src,\n+            check_overflow,\n+        }\n     }\n }\n \n@@ -123,13 +135,13 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n \n     pub fn const_eval_literal(&mut self, e: &hir::Expr) -> Literal<'tcx> {\n         let tcx = self.tcx.global_tcx();\n-        match ConstContext::with_tables(tcx, self.tables()).eval(e) {\n+        match ConstContext::new(tcx, self.tables(), self.identity_substs).eval(e) {\n             Ok(value) => Literal::Value { value: value },\n             Err(s) => self.fatal_const_eval_err(&s, e.span, \"expression\")\n         }\n     }\n \n-    pub fn fatal_const_eval_err(&self,\n+    pub fn fatal_const_eval_err(&mut self,\n         err: &ConstEvalErr<'tcx>,\n         primary_span: Span,\n         primary_kind: &str)"}, {"sha": "76a576cd17b07b5ee17c285948074c45993364bd", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -39,6 +39,7 @@ use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::mir::transform::MirSource;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::subst::Substs;\n use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeSet;\n@@ -58,13 +59,17 @@ struct CheckCrateVisitor<'a, 'tcx: 'a> {\n     promotable: bool,\n     mut_rvalue_borrows: NodeSet,\n     param_env: ty::ParamEnv<'tcx>,\n+    identity_substs: &'tcx Substs<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n }\n \n impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n+    fn const_cx(&self) -> ConstContext<'a, 'gcx> {\n+        ConstContext::new(self.tcx, self.tables, self.identity_substs)\n+    }\n+\n     fn check_const_eval(&self, expr: &'gcx hir::Expr) {\n-        let const_cx = ConstContext::with_tables(self.tcx, self.tables);\n-        if let Err(err) = const_cx.eval(expr) {\n+        if let Err(err) = self.const_cx().eval(expr) {\n             match err.kind {\n                 UnimplementedConstVal(_) => {}\n                 IndexOpFeatureGated => {}\n@@ -121,25 +126,26 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n         }\n \n         let item_id = self.tcx.hir.body_owner(body_id);\n+        let item_def_id = self.tcx.hir.local_def_id(item_id);\n \n         let outer_in_fn = self.in_fn;\n+        let outer_tables = self.tables;\n+        let outer_param_env = self.param_env;\n+        let outer_identity_substs = self.identity_substs;\n+\n         self.in_fn = match MirSource::from_node(self.tcx, item_id) {\n             MirSource::Fn(_) => true,\n             _ => false\n         };\n-\n-        let outer_tables = self.tables;\n-        let item_def_id = self.tcx.hir.local_def_id(item_id);\n         self.tables = self.tcx.typeck_tables_of(item_def_id);\n+        self.param_env = self.tcx.param_env(item_def_id);\n+        self.identity_substs = Substs::identity_for_item(self.tcx, item_def_id);\n \n         let body = self.tcx.hir.body(body_id);\n         if !self.in_fn {\n             self.check_const_eval(&body.value);\n         }\n \n-        let outer_penv = self.param_env;\n-        self.param_env = self.tcx.param_env(item_def_id);\n-\n         let tcx = self.tcx;\n         let param_env = self.param_env;\n         let region_maps = self.tcx.region_maps(item_def_id);\n@@ -148,9 +154,10 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n \n         self.visit_body(body);\n \n-        self.param_env = outer_penv;\n-        self.tables = outer_tables;\n         self.in_fn = outer_in_fn;\n+        self.tables = outer_tables;\n+        self.param_env = outer_param_env;\n+        self.identity_substs = outer_identity_substs;\n     }\n \n     fn visit_pat(&mut self, p: &'tcx hir::Pat) {\n@@ -159,8 +166,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n                 self.check_const_eval(lit);\n             }\n             PatKind::Range(ref start, ref end, RangeEnd::Excluded) => {\n-                let const_cx = ConstContext::with_tables(self.tcx, self.tables);\n-                match const_cx.compare_lit_exprs(p.span, start, end) {\n+                match self.const_cx().compare_lit_exprs(p.span, start, end) {\n                     Ok(Ordering::Less) => {}\n                     Ok(Ordering::Equal) |\n                     Ok(Ordering::Greater) => {\n@@ -173,8 +179,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n                 }\n             }\n             PatKind::Range(ref start, ref end, RangeEnd::Included) => {\n-                let const_cx = ConstContext::with_tables(self.tcx, self.tables);\n-                match const_cx.compare_lit_exprs(p.span, start, end) {\n+                match self.const_cx().compare_lit_exprs(p.span, start, end) {\n                     Ok(Ordering::Less) |\n                     Ok(Ordering::Equal) => {}\n                     Ok(Ordering::Greater) => {\n@@ -240,8 +245,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n         }\n \n         if self.in_fn && self.promotable {\n-            let const_cx = ConstContext::with_tables(self.tcx, self.tables);\n-            match const_cx.eval(ex) {\n+            match self.const_cx().eval(ex) {\n                 Ok(_) => {}\n                 Err(ConstEvalErr { kind: UnimplementedConstVal(_), .. }) |\n                 Err(ConstEvalErr { kind: MiscCatchAll, .. }) |\n@@ -472,6 +476,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         promotable: false,\n         mut_rvalue_borrows: NodeSet(),\n         param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n+        identity_substs: Substs::empty(),\n     }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }"}, {"sha": "45ed6ecffd86aecd10405a2ae8292bae8a4ae3cb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c900c52482fd398cbec4d1d433fcc2e6888ff1b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "patch": "@@ -560,7 +560,7 @@ fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let wrapped_discr = prev_discr.map_or(initial, |d| d.wrap_incr());\n         prev_discr = Some(if let Some(e) = variant.node.disr_expr {\n             let expr_did = tcx.hir.local_def_id(e.node_id);\n-            let substs = Substs::empty();\n+            let substs = Substs::identity_for_item(tcx, expr_did);\n             let result = tcx.at(variant.span).const_eval((expr_did, substs));\n \n             // enum variant evaluation happens before the global constant check"}]}