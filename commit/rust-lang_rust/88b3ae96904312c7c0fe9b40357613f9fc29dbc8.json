{"sha": "88b3ae96904312c7c0fe9b40357613f9fc29dbc8", "node_id": "C_kwDOAAsO6NoAKDg4YjNhZTk2OTA0MzEyYzdjMGZlOWI0MDM1NzYxM2Y5ZmMyOWRiYzg", "commit": {"author": {"name": "Lenko Donchev", "email": "lenko.donchev@gmail.com", "date": "2023-03-26T20:43:23Z"}, "committer": {"name": "Lenko Donchev", "email": "lenko.donchev@gmail.com", "date": "2023-03-27T04:46:09Z"}, "message": "check for missing codegen backeng config", "tree": {"sha": "b14482cb78ca77adf5f4ed85eff9ae79a70896c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b14482cb78ca77adf5f4ed85eff9ae79a70896c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88b3ae96904312c7c0fe9b40357613f9fc29dbc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88b3ae96904312c7c0fe9b40357613f9fc29dbc8", "html_url": "https://github.com/rust-lang/rust/commit/88b3ae96904312c7c0fe9b40357613f9fc29dbc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88b3ae96904312c7c0fe9b40357613f9fc29dbc8/comments", "author": {"login": "lenko-d", "id": 1954225, "node_id": "MDQ6VXNlcjE5NTQyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1954225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lenko-d", "html_url": "https://github.com/lenko-d", "followers_url": "https://api.github.com/users/lenko-d/followers", "following_url": "https://api.github.com/users/lenko-d/following{/other_user}", "gists_url": "https://api.github.com/users/lenko-d/gists{/gist_id}", "starred_url": "https://api.github.com/users/lenko-d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lenko-d/subscriptions", "organizations_url": "https://api.github.com/users/lenko-d/orgs", "repos_url": "https://api.github.com/users/lenko-d/repos", "events_url": "https://api.github.com/users/lenko-d/events{/privacy}", "received_events_url": "https://api.github.com/users/lenko-d/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lenko-d", "id": 1954225, "node_id": "MDQ6VXNlcjE5NTQyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1954225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lenko-d", "html_url": "https://github.com/lenko-d", "followers_url": "https://api.github.com/users/lenko-d/followers", "following_url": "https://api.github.com/users/lenko-d/following{/other_user}", "gists_url": "https://api.github.com/users/lenko-d/gists{/gist_id}", "starred_url": "https://api.github.com/users/lenko-d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lenko-d/subscriptions", "organizations_url": "https://api.github.com/users/lenko-d/orgs", "repos_url": "https://api.github.com/users/lenko-d/repos", "events_url": "https://api.github.com/users/lenko-d/events{/privacy}", "received_events_url": "https://api.github.com/users/lenko-d/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d5820784e442ec7e89474e2fa305440253ffaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5820784e442ec7e89474e2fa305440253ffaeb", "html_url": "https://github.com/rust-lang/rust/commit/1d5820784e442ec7e89474e2fa305440253ffaeb"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "783061d8ee84bc5bfcb17a12207f3db4c488a38b", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/88b3ae96904312c7c0fe9b40357613f9fc29dbc8/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b3ae96904312c7c0fe9b40357613f9fc29dbc8/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=88b3ae96904312c7c0fe9b40357613f9fc29dbc8", "patch": "@@ -20,7 +20,7 @@ use serde_derive::Deserialize;\n \n use crate::builder::crate_description;\n use crate::builder::Cargo;\n-use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n+use crate::builder::{Builder, Kind, PathSet, RunConfig, ShouldRun, Step, TaskPath};\n use crate::cache::{Interned, INTERNER};\n use crate::config::{LlvmLibunwind, RustcLto, TargetSelection};\n use crate::dist;\n@@ -995,6 +995,44 @@ pub struct CodegenBackend {\n     pub backend: Interned<String>,\n }\n \n+fn needs_codegen_config(run: &RunConfig<'_>) -> bool {\n+    let mut needs_codegen_cfg = false;\n+    for path_set in &run.paths {\n+        needs_codegen_cfg = match path_set {\n+            PathSet::Set(set) => set.iter().any(|p| is_codegen_cfg_needed(p, run)),\n+            PathSet::Suite(suite) => is_codegen_cfg_needed(&suite, run),\n+        }\n+    }\n+    needs_codegen_cfg\n+}\n+\n+const CODEGEN_BACKEND_PREFIX: &str = \"rustc_codegen_\";\n+\n+fn is_codegen_cfg_needed(path: &TaskPath, run: &RunConfig<'_>) -> bool {\n+    if path.path.to_str().unwrap().contains(&CODEGEN_BACKEND_PREFIX) {\n+        let mut needs_codegen_backend_config = true;\n+        for &backend in &run.builder.config.rust_codegen_backends {\n+            if path\n+                .path\n+                .to_str()\n+                .unwrap()\n+                .ends_with(&(CODEGEN_BACKEND_PREFIX.to_owned() + &backend))\n+            {\n+                needs_codegen_backend_config = false;\n+            }\n+        }\n+        if needs_codegen_backend_config {\n+            run.builder.info(\n+                \"Warning: no codegen-backends config matched the requested path to build a codegen backend. \\\n+                Help: add backend to codegen-backends in config.toml.\",\n+            );\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n impl Step for CodegenBackend {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n@@ -1006,6 +1044,10 @@ impl Step for CodegenBackend {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n+        if needs_codegen_config(&run) {\n+            return;\n+        }\n+\n         for &backend in &run.builder.config.rust_codegen_backends {\n             if backend == \"llvm\" {\n                 continue; // Already built as part of rustc"}]}