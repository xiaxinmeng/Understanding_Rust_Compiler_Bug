{"sha": "31874800702537252a2d1450d4b3c6e2d2321c22", "node_id": "C_kwDOAAsO6NoAKDMxODc0ODAwNzAyNTM3MjUyYTJkMTQ1MGQ0YjNjNmUyZDIzMjFjMjI", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-05-10T14:50:08Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-12-06T20:05:22Z"}, "message": "Avoid using Option where values are always Some", "tree": {"sha": "b396f7c20b61804add21c09d85ebea398d75ee1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b396f7c20b61804add21c09d85ebea398d75ee1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31874800702537252a2d1450d4b3c6e2d2321c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31874800702537252a2d1450d4b3c6e2d2321c22", "html_url": "https://github.com/rust-lang/rust/commit/31874800702537252a2d1450d4b3c6e2d2321c22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31874800702537252a2d1450d4b3c6e2d2321c22/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b6305977219af72d445c4014bbcbdf136e581f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b6305977219af72d445c4014bbcbdf136e581f4", "html_url": "https://github.com/rust-lang/rust/commit/2b6305977219af72d445c4014bbcbdf136e581f4"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "104a4119f3265efc659e577d0dda659d7b8ac340", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/31874800702537252a2d1450d4b3c6e2d2321c22/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31874800702537252a2d1450d4b3c6e2d2321c22/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=31874800702537252a2d1450d4b3c6e2d2321c22", "patch": "@@ -23,8 +23,11 @@ rustc_index::newtype_index! {\n pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n     // compute the post order index (rank) for each node\n     let mut post_order_rank = IndexVec::from_elem_n(0, graph.num_nodes());\n-    let mut parent: IndexVec<PreorderIndex, Option<PreorderIndex>> =\n-        IndexVec::from_elem_n(None, graph.num_nodes());\n+\n+    // We allocate capacity for the full set of nodes, because most of the time\n+    // most of the nodes *are* reachable.\n+    let mut parent: IndexVec<PreorderIndex, PreorderIndex> =\n+        IndexVec::with_capacity(graph.num_nodes());\n \n     let mut stack = vec![PreOrderFrame {\n         pre_order_idx: PreorderIndex::new(0),\n@@ -35,6 +38,7 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n     let mut real_to_pre_order: IndexVec<G::Node, Option<PreorderIndex>> =\n         IndexVec::from_elem_n(None, graph.num_nodes());\n     pre_order_to_real.push(graph.start_node());\n+    parent.push(PreorderIndex::new(0)); // the parent of the root node is the root for now.\n     real_to_pre_order[graph.start_node()] = Some(PreorderIndex::new(0));\n     let mut post_order_idx = 0;\n \n@@ -43,7 +47,7 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n             if real_to_pre_order[successor].is_none() {\n                 let pre_order_idx = pre_order_to_real.push(successor);\n                 real_to_pre_order[successor] = Some(pre_order_idx);\n-                parent[pre_order_idx] = Some(frame.pre_order_idx);\n+                parent.push(frame.pre_order_idx);\n                 stack.push(PreOrderFrame { pre_order_idx, iter: graph.successors(successor) });\n \n                 continue 'recurse;\n@@ -67,7 +71,7 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n         // Optimization: process buckets just once, at the start of the\n         // iteration. Do not explicitly empty the bucket (even though it will\n         // not be used again), to save some instructions.\n-        let z = parent[w].unwrap();\n+        let z = parent[w];\n         for &v in bucket[z].iter() {\n             let y = eval(&mut parent, lastlinked, &semi, &mut label, v);\n             idom[v] = if semi[y] < z { y } else { z };\n@@ -83,10 +87,10 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n \n         // Optimization: Do not insert into buckets if parent[w] = semi[w], as\n         // we then immediately know the idom.\n-        if parent[w].unwrap() != semi[w] {\n+        if parent[w] != semi[w] {\n             bucket[semi[w]].push(w);\n         } else {\n-            idom[w] = parent[w].unwrap();\n+            idom[w] = parent[w];\n         }\n \n         // Optimization: We share the parent array between processed and not\n@@ -109,7 +113,7 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n \n #[inline]\n fn eval(\n-    ancestor: &mut IndexVec<PreorderIndex, Option<PreorderIndex>>,\n+    ancestor: &mut IndexVec<PreorderIndex, PreorderIndex>,\n     lastlinked: Option<PreorderIndex>,\n     semi: &IndexVec<PreorderIndex, PreorderIndex>,\n     label: &mut IndexVec<PreorderIndex, PreorderIndex>,\n@@ -130,14 +134,14 @@ fn is_processed(v: PreorderIndex, lastlinked: Option<PreorderIndex>) -> bool {\n \n #[inline]\n fn compress(\n-    ancestor: &mut IndexVec<PreorderIndex, Option<PreorderIndex>>,\n+    ancestor: &mut IndexVec<PreorderIndex, PreorderIndex>,\n     lastlinked: Option<PreorderIndex>,\n     semi: &IndexVec<PreorderIndex, PreorderIndex>,\n     label: &mut IndexVec<PreorderIndex, PreorderIndex>,\n     v: PreorderIndex,\n ) {\n     assert!(is_processed(v, lastlinked));\n-    let u = ancestor[v].unwrap();\n+    let u = ancestor[v];\n     if is_processed(u, lastlinked) {\n         compress(ancestor, lastlinked, semi, label, u);\n         if semi[label[u]] < semi[label[v]] {"}]}