{"sha": "cf08eda0b379cdce4983f6fa344059b6bc23a64d", "node_id": "C_kwDOAAsO6NoAKGNmMDhlZGEwYjM3OWNkY2U0OTgzZjZmYTM0NDA1OWI2YmMyM2E2NGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-17T22:44:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-17T22:44:29Z"}, "message": "Rollup merge of #105829 - the8472:tidy-style, r=jyn514\n\nSpeed up tidy\n\nThis can be reviewed commit by commit since they contain separate optimizations.\n\n```\n# master\n$ taskset -c 0-5 hyperfine './x test tidy'\nBenchmark #1: ./x test tidy\n  Time (mean \u00b1 \u03c3):      4.857 s \u00b1  0.064 s    [User: 12.967 s, System: 2.014 s]\n  Range (min \u2026 max):    4.779 s \u2026  4.997 s    10 runs\n\n# PR\n$ taskset -c 0-5 hyperfine './x test tidy'\nBenchmark #1: ./x test tidy\n  Time (mean \u00b1 \u03c3):      3.672 s \u00b1  0.035 s    [User: 10.524 s, System: 2.029 s]\n  Range (min \u2026 max):    3.610 s \u2026  3.725 s    10 runs\n```", "tree": {"sha": "dcbe3ef5efb96ac61b17fbfda083dd41e9250770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcbe3ef5efb96ac61b17fbfda083dd41e9250770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf08eda0b379cdce4983f6fa344059b6bc23a64d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjnkZNCRBK7hj4Ov3rIwAAnxMIAI9dZfA9QX+mjl4x1nTvOnvK\n/8xNRX6zegWzQQpLFCOHw85KKibuTaaaDkvjVgbkWbNMNx+RyLBStlRqQ1IT6yM1\nXaSItAo+jAeSnPUp3k76V+9cXrYnN/QwLoCSplQW55L9AJXHEPizi/3+4/CMDDX+\nHnj9nB68ZhvMxYe2iUWMMGdIMpjvFVZ1gjWVfOoyDzdaUO69PonkgouDbTrtZBLD\nnexNNBIxKJ8zcjgQjOsQpg2zXefNNDyaIuriNQBNj2nWOMGjEAXL7SLwx+BfY/OX\nU3Dp0BO/9f5vbauPY5r1hAugyket9BpwaaENkWJzCcm8Eu6XJviGaXkaobJdjvs=\n=Hk5k\n-----END PGP SIGNATURE-----\n", "payload": "tree dcbe3ef5efb96ac61b17fbfda083dd41e9250770\nparent eaf2f26ecc7338093fce4ec0013056d1fe6c720c\nparent ab7d76965168f1104488549feaebd24ffa69b3b7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671317069 +0100\ncommitter GitHub <noreply@github.com> 1671317069 +0100\n\nRollup merge of #105829 - the8472:tidy-style, r=jyn514\n\nSpeed up tidy\n\nThis can be reviewed commit by commit since they contain separate optimizations.\n\n```\n# master\n$ taskset -c 0-5 hyperfine './x test tidy'\nBenchmark #1: ./x test tidy\n  Time (mean \u00b1 \u03c3):      4.857 s \u00b1  0.064 s    [User: 12.967 s, System: 2.014 s]\n  Range (min \u2026 max):    4.779 s \u2026  4.997 s    10 runs\n\n# PR\n$ taskset -c 0-5 hyperfine './x test tidy'\nBenchmark #1: ./x test tidy\n  Time (mean \u00b1 \u03c3):      3.672 s \u00b1  0.035 s    [User: 10.524 s, System: 2.029 s]\n  Range (min \u2026 max):    3.610 s \u2026  3.725 s    10 runs\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf08eda0b379cdce4983f6fa344059b6bc23a64d", "html_url": "https://github.com/rust-lang/rust/commit/cf08eda0b379cdce4983f6fa344059b6bc23a64d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf08eda0b379cdce4983f6fa344059b6bc23a64d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "html_url": "https://github.com/rust-lang/rust/commit/eaf2f26ecc7338093fce4ec0013056d1fe6c720c"}, {"sha": "ab7d76965168f1104488549feaebd24ffa69b3b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7d76965168f1104488549feaebd24ffa69b3b7", "html_url": "https://github.com/rust-lang/rust/commit/ab7d76965168f1104488549feaebd24ffa69b3b7"}], "stats": {"total": 104, "additions": 70, "deletions": 34}, "files": [{"sha": "b2f6afead798088e12ae27425b354540ea6c302b", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf08eda0b379cdce4983f6fa344059b6bc23a64d/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf08eda0b379cdce4983f6fa344059b6bc23a64d/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=cf08eda0b379cdce4983f6fa344059b6bc23a64d", "patch": "@@ -8,7 +8,7 @@ use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::sync::mpsc::SyncSender;\n \n-fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl FnMut() {\n+fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl FnMut(bool) -> bool {\n     let mut cmd = Command::new(&rustfmt);\n     // avoid the submodule config paths from coming into play,\n     // we only allow a single global config for the workspace for now\n@@ -23,7 +23,13 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n     let cmd_debug = format!(\"{:?}\", cmd);\n     let mut cmd = cmd.spawn().expect(\"running rustfmt\");\n     // poor man's async: return a closure that'll wait for rustfmt's completion\n-    move || {\n+    move |block: bool| -> bool {\n+        if !block {\n+            match cmd.try_wait() {\n+                Ok(Some(_)) => {}\n+                _ => return false,\n+            }\n+        }\n         let status = cmd.wait().unwrap();\n         if !status.success() {\n             eprintln!(\n@@ -34,6 +40,7 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n             );\n             crate::detail_exit(1);\n         }\n+        true\n     }\n }\n \n@@ -146,15 +153,23 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n             let child = rustfmt(&src, &rustfmt_path, paths.as_slice(), check);\n             children.push_back(child);\n \n+            // poll completion before waiting\n+            for i in (0..children.len()).rev() {\n+                if children[i](false) {\n+                    children.swap_remove_back(i);\n+                    break;\n+                }\n+            }\n+\n             if children.len() >= max_processes {\n                 // await oldest child\n-                children.pop_front().unwrap()();\n+                children.pop_front().unwrap()(true);\n             }\n         }\n \n         // await remaining children\n         for mut child in children {\n-            child();\n+            child(true);\n         }\n     });\n "}, {"sha": "6714c63ee62a143a923f84088101cc99ec1142d1", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cf08eda0b379cdce4983f6fa344059b6bc23a64d/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf08eda0b379cdce4983f6fa344059b6bc23a64d/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=cf08eda0b379cdce4983f6fa344059b6bc23a64d", "patch": "@@ -35,15 +35,26 @@ fn main() {\n \n     let bad = std::sync::Arc::new(AtomicBool::new(false));\n \n+    let drain_handles = |handles: &mut VecDeque<ScopedJoinHandle<'_, ()>>| {\n+        // poll all threads for completion before awaiting the oldest one\n+        for i in (0..handles.len()).rev() {\n+            if handles[i].is_finished() {\n+                handles.swap_remove_back(i).unwrap().join().unwrap();\n+            }\n+        }\n+\n+        while handles.len() >= concurrency.get() {\n+            handles.pop_front().unwrap().join().unwrap();\n+        }\n+    };\n+\n     scope(|s| {\n         let mut handles: VecDeque<ScopedJoinHandle<'_, ()>> =\n             VecDeque::with_capacity(concurrency.get());\n \n         macro_rules! check {\n             ($p:ident $(, $args:expr)* ) => {\n-                while handles.len() >= concurrency.get() {\n-                    handles.pop_front().unwrap().join().unwrap();\n-                }\n+                drain_handles(&mut handles);\n \n                 let handle = s.spawn(|| {\n                     let mut flag = false;\n@@ -97,9 +108,8 @@ fn main() {\n         check!(alphabetical, &library_path);\n \n         let collected = {\n-            while handles.len() >= concurrency.get() {\n-                handles.pop_front().unwrap().join().unwrap();\n-            }\n+            drain_handles(&mut handles);\n+\n             let mut flag = false;\n             let r = features::check(&src_path, &compiler_path, &library_path, &mut flag, verbose);\n             if flag {"}, {"sha": "f91e38262f64ff8fd1800c99b1cc10ec85856569", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cf08eda0b379cdce4983f6fa344059b6bc23a64d/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf08eda0b379cdce4983f6fa344059b6bc23a64d/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=cf08eda0b379cdce4983f6fa344059b6bc23a64d", "patch": "@@ -17,7 +17,7 @@\n //! `// ignore-tidy-CHECK-NAME`.\n \n use crate::walk::{filter_dirs, walk};\n-use regex::Regex;\n+use regex::{Regex, RegexSet};\n use std::path::Path;\n \n /// Error code markdown is restricted to 80 columns because they can be\n@@ -225,6 +225,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:x}\", v)))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n+    let problematic_regex = RegexSet::new(problematic_consts_strings.as_slice()).unwrap();\n     walk(path, &mut skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n@@ -281,7 +282,27 @@ pub fn check(path: &Path, bad: &mut bool) {\n         let mut trailing_new_lines = 0;\n         let mut lines = 0;\n         let mut last_safety_comment = false;\n+        let is_test = file.components().any(|c| c.as_os_str() == \"tests\");\n+        // scanning the whole file for multiple needles at once is more efficient than\n+        // executing lines times needles separate searches.\n+        let any_problematic_line = problematic_regex.is_match(contents);\n         for (i, line) in contents.split('\\n').enumerate() {\n+            if line.is_empty() {\n+                if i == 0 {\n+                    leading_new_lines = true;\n+                }\n+                trailing_new_lines += 1;\n+                continue;\n+            } else {\n+                trailing_new_lines = 0;\n+            }\n+\n+            let trimmed = line.trim();\n+\n+            if !trimmed.starts_with(\"//\") {\n+                lines += 1;\n+            }\n+\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n@@ -308,36 +329,38 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 suppressible_tidy_err!(err, skip_cr, \"CR character\");\n             }\n             if filename != \"style.rs\" {\n-                if line.contains(\"TODO\") {\n+                if trimmed.contains(\"TODO\") {\n                     err(\"TODO is deprecated; use FIXME\")\n                 }\n-                if line.contains(\"//\") && line.contains(\" XXX\") {\n+                if trimmed.contains(\"//\") && trimmed.contains(\" XXX\") {\n                     err(\"XXX is deprecated; use FIXME\")\n                 }\n-                for s in problematic_consts_strings.iter() {\n-                    if line.contains(s) {\n-                        err(\"Don't use magic numbers that spell things (consider 0x12345678)\");\n+                if any_problematic_line {\n+                    for s in problematic_consts_strings.iter() {\n+                        if trimmed.contains(s) {\n+                            err(\"Don't use magic numbers that spell things (consider 0x12345678)\");\n+                        }\n                     }\n                 }\n             }\n-            let is_test = || file.components().any(|c| c.as_os_str() == \"tests\");\n             // for now we just check libcore\n-            if line.contains(\"unsafe {\") && !line.trim().starts_with(\"//\") && !last_safety_comment {\n-                if file.components().any(|c| c.as_os_str() == \"core\") && !is_test() {\n+            if trimmed.contains(\"unsafe {\") && !trimmed.starts_with(\"//\") && !last_safety_comment {\n+                if file.components().any(|c| c.as_os_str() == \"core\") && !is_test {\n                     suppressible_tidy_err!(err, skip_undocumented_unsafe, \"undocumented unsafe\");\n                 }\n             }\n-            if line.contains(\"// SAFETY:\") {\n+            if trimmed.contains(\"// SAFETY:\") {\n                 last_safety_comment = true;\n-            } else if line.trim().starts_with(\"//\") || line.trim().is_empty() {\n+            } else if trimmed.starts_with(\"//\") || trimmed.is_empty() {\n                 // keep previous value\n             } else {\n                 last_safety_comment = false;\n             }\n             if (line.starts_with(\"// Copyright\")\n                 || line.starts_with(\"# Copyright\")\n                 || line.starts_with(\"Copyright\"))\n-                && (line.contains(\"Rust Developers\") || line.contains(\"Rust Project Developers\"))\n+                && (trimmed.contains(\"Rust Developers\")\n+                    || trimmed.contains(\"Rust Project Developers\"))\n             {\n                 suppressible_tidy_err!(\n                     err,\n@@ -351,18 +374,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n             if filename.ends_with(\".cpp\") && line.contains(\"llvm_unreachable\") {\n                 err(LLVM_UNREACHABLE_INFO);\n             }\n-            if line.is_empty() {\n-                if i == 0 {\n-                    leading_new_lines = true;\n-                }\n-                trailing_new_lines += 1;\n-            } else {\n-                trailing_new_lines = 0;\n-            }\n-\n-            if !line.trim().starts_with(\"//\") {\n-                lines += 1;\n-            }\n         }\n         if leading_new_lines {\n             let mut err = |_| {"}]}