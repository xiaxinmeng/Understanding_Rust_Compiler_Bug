{"sha": "04311341197ddabc420a8cffc0d26c12228d445b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MzExMzQxMTk3ZGRhYmM0MjBhOGNmZmMwZDI2YzEyMjI4ZDQ0NWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-03T16:34:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-03T16:56:16Z"}, "message": "Remove the explicit closure kind syntax from the parser and AST;\nupgrade the inference based on expected type so that it is able to\ninfer the fn kind in isolation even if the full signature is not\navailable (and we could perhaps do better still in some cases, such as\nextracting just the types of the arguments but not the return value).", "tree": {"sha": "4c28b4373079ca63d53bfe6ee1250500113cf982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c28b4373079ca63d53bfe6ee1250500113cf982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04311341197ddabc420a8cffc0d26c12228d445b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04311341197ddabc420a8cffc0d26c12228d445b", "html_url": "https://github.com/rust-lang/rust/commit/04311341197ddabc420a8cffc0d26c12228d445b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04311341197ddabc420a8cffc0d26c12228d445b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47f18659ff629792f49b5ed87e870687703831fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f18659ff629792f49b5ed87e870687703831fe", "html_url": "https://github.com/rust-lang/rust/commit/47f18659ff629792f49b5ed87e870687703831fe"}], "stats": {"total": 291, "additions": 155, "deletions": 136}, "files": [{"sha": "ea584407944abeaa89d657e1cf47953fa62700ef", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n             ast::ExprLoop(ref b, _) => {\n                 self.with_context(Loop, |v| v.visit_block(&**b));\n             }\n-            ast::ExprClosure(_, _, _, ref b) => {\n+            ast::ExprClosure(_, _, ref b) => {\n                 self.with_context(Closure, |v| v.visit_block(&**b));\n             }\n             ast::ExprBreak(_) => self.require_loop(\"break\", e.span),"}, {"sha": "c0fabb2a3481d7c622145e6ec939388e7f49ee40", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -959,7 +959,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n               self.propagate_through_expr(&**e, succ)\n           }\n \n-          ast::ExprClosure(_, _, _, ref blk) => {\n+          ast::ExprClosure(_, _, ref blk) => {\n               debug!(\"{} is an ExprClosure\",\n                      expr_to_string(expr));\n "}, {"sha": "156ff43e2bab3c690e1e491c6d33ace9dfef276f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -739,7 +739,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n             };\n \n             match fn_expr.node {\n-                ast::ExprClosure(_, _, _, ref body) => body.id,\n+                ast::ExprClosure(_, _, ref body) => body.id,\n                 _ => unreachable!()\n             }\n         };"}, {"sha": "b9d2b9ec263ab450480bf3fa02db5c5505a6dd28", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -324,7 +324,7 @@ pub fn closure_to_block(closure_id: ast::NodeId,\n                         tcx: &ty::ctxt) -> ast::NodeId {\n     match tcx.map.get(closure_id) {\n         ast_map::NodeExpr(expr) => match expr.node {\n-            ast::ExprClosure(_, _, _, ref block) => {\n+            ast::ExprClosure(_, _, ref block) => {\n                 block.id\n             }\n             _ => {"}, {"sha": "dd739059ed0ddf13c10d19ea06ce7a9aab9a90bb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -4521,7 +4521,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 visit::walk_expr(self, expr);\n             }\n \n-            ExprClosure(_, _, ref fn_decl, ref block) => {\n+            ExprClosure(_, ref fn_decl, ref block) => {\n                 self.resolve_function(ClosureRibKind(expr.id),\n                                       Some(&**fn_decl), NoTypeParameters,\n                                       &**block);"}, {"sha": "b0ce9641cf440e8a658e9bcb314d129720692fbe", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -1394,7 +1394,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                                                       type, found {:?}\", ty)[]),\n                 }\n             },\n-            ast::ExprClosure(_, _, ref decl, ref body) => {\n+            ast::ExprClosure(_, ref decl, ref body) => {\n                 if generated_code(body.span) {\n                     return\n                 }"}, {"sha": "6901eb25b31feb1dda95147af59f7ec977ba1b13", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -1340,7 +1340,7 @@ fn build_cfg(tcx: &ty::ctxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>)\n         }\n         Some(ast_map::NodeExpr(e)) => {\n             match e.node {\n-                ast::ExprClosure(_, _, _, ref blk) => {\n+                ast::ExprClosure(_, _, ref blk) => {\n                     blk\n                 }\n                 _ => tcx.sess.bug(\"unexpected expr variant in has_nested_returns\")"}, {"sha": "172e105896c304e90c5964fe110c1ecd869325f8", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -1283,7 +1283,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n         ast_map::NodeExpr(ref expr) => {\n             match expr.node {\n-                ast::ExprClosure(_, _, ref fn_decl, ref top_level_block) => {\n+                ast::ExprClosure(_, ref fn_decl, ref top_level_block) => {\n                     let name = format!(\"fn{}\", token::gensym(\"fn\"));\n                     let name = token::str_to_ident(&name[]);\n                     (name, &**fn_decl,\n@@ -3595,7 +3595,7 @@ fn create_scope_map(cx: &CrateContext,\n                 })\n             }\n \n-            ast::ExprClosure(_, _, ref decl, ref block) => {\n+            ast::ExprClosure(_, ref decl, ref block) => {\n                 with_new_scope(cx,\n                                block.span,\n                                scope_stack,"}, {"sha": "df9e722569701dacf4092b09f614eb07faaef5d2", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -1094,7 +1094,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ast::ExprVec(..) | ast::ExprRepeat(..) => {\n             tvec::trans_fixed_vstore(bcx, expr, dest)\n         }\n-        ast::ExprClosure(_, _, ref decl, ref body) => {\n+        ast::ExprClosure(_, ref decl, ref body) => {\n             closure::trans_closure_expr(bcx, &**decl, &**body, expr.id, dest)\n         }\n         ast::ExprCall(ref f, ref args) => {"}, {"sha": "b2a676e878e6302e556e8aab29e462d8942da6fb", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 90, "deletions": 61, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -25,46 +25,21 @@ use util::ppaux::Repr;\n pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n                                    expr: &ast::Expr,\n                                    _capture: ast::CaptureClause,\n-                                   opt_kind: Option<ast::ClosureKind>,\n                                    decl: &'tcx ast::FnDecl,\n                                    body: &'tcx ast::Block,\n                                    expected: Expectation<'tcx>) {\n     debug!(\"check_expr_closure(expr={},expected={})\",\n            expr.repr(fcx.tcx()),\n            expected.repr(fcx.tcx()));\n \n-    let expected_sig_and_kind = expected.to_option(fcx).and_then(|ty| {\n-        deduce_expectations_from_expected_type(fcx, ty)\n-    });\n-\n-    match opt_kind {\n-        None => {\n-            // If users didn't specify what sort of closure they want,\n-            // examine the expected type. For now, if we see explicit\n-            // evidence than an unboxed closure is desired, we'll use\n-            // that. Otherwise, we leave it unspecified, to be filled\n-            // in by upvar inference.\n-            match expected_sig_and_kind {\n-                None => { // don't have information about the kind, request explicit annotation\n-                    check_closure(fcx, expr, None, decl, body, None);\n-                },\n-                Some((sig, kind)) => {\n-                    check_closure(fcx, expr, Some(kind), decl, body, Some(sig));\n-                }\n-            }\n-        }\n-\n-        Some(kind) => {\n-            let kind = match kind {\n-                ast::FnClosureKind => ty::FnClosureKind,\n-                ast::FnMutClosureKind => ty::FnMutClosureKind,\n-                ast::FnOnceClosureKind => ty::FnOnceClosureKind,\n-            };\n-\n-            let expected_sig = expected_sig_and_kind.map(|t| t.0);\n-            check_closure(fcx, expr, Some(kind), decl, body, expected_sig);\n-        }\n-    }\n+    // It's always helpful for inference if we know the kind of\n+    // closure sooner rather than later, so first examine the expected\n+    // type, and see if can glean a closure kind from there.\n+    let (expected_sig,expected_kind) = match expected.to_option(fcx) {\n+        Some(ty) => deduce_expectations_from_expected_type(fcx, ty),\n+        None => (None, None)\n+    };\n+    check_closure(fcx, expr, expected_kind, decl, body, expected_sig)\n }\n \n fn check_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n@@ -133,55 +108,92 @@ fn check_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n fn deduce_expectations_from_expected_type<'a,'tcx>(\n     fcx: &FnCtxt<'a,'tcx>,\n     expected_ty: Ty<'tcx>)\n-    -> Option<(ty::FnSig<'tcx>,ty::ClosureKind)>\n+    -> (Option<ty::FnSig<'tcx>>,Option<ty::ClosureKind>)\n {\n+    debug!(\"deduce_expectations_from_expected_type(expected_ty={})\",\n+           expected_ty.repr(fcx.tcx()));\n+\n     match expected_ty.sty {\n         ty::ty_trait(ref object_type) => {\n             let proj_bounds = object_type.projection_bounds_with_self_ty(fcx.tcx(),\n                                                                          fcx.tcx().types.err);\n-            proj_bounds.iter()\n-                       .filter_map(|pb| deduce_expectations_from_projection(fcx, pb))\n-                       .next()\n+            let expectations =\n+                proj_bounds.iter()\n+                           .filter_map(|pb| deduce_expectations_from_projection(fcx, pb))\n+                           .next();\n+\n+            match expectations {\n+                Some((sig, kind)) => (Some(sig), Some(kind)),\n+                None => (None, None)\n+            }\n         }\n         ty::ty_infer(ty::TyVar(vid)) => {\n             deduce_expectations_from_obligations(fcx, vid)\n         }\n         _ => {\n-            None\n+            (None, None)\n         }\n     }\n }\n \n fn deduce_expectations_from_obligations<'a,'tcx>(\n     fcx: &FnCtxt<'a,'tcx>,\n     expected_vid: ty::TyVid)\n-    -> Option<(ty::FnSig<'tcx>, ty::ClosureKind)>\n+    -> (Option<ty::FnSig<'tcx>>, Option<ty::ClosureKind>)\n {\n     let fulfillment_cx = fcx.inh.fulfillment_cx.borrow();\n     // Here `expected_ty` is known to be a type inference variable.\n \n-    fulfillment_cx.pending_obligations()\n-                  .iter()\n-                  .filter_map(|obligation| {\n-                      match obligation.predicate {\n-                          ty::Predicate::Projection(ref proj_predicate) => {\n-                              let trait_ref = proj_predicate.to_poly_trait_ref();\n-                              let self_ty = fcx.infcx().shallow_resolve(trait_ref.self_ty());\n-                              match self_ty.sty {\n-                                  ty::ty_infer(ty::TyVar(v)) if expected_vid == v => {\n-                                      deduce_expectations_from_projection(fcx, proj_predicate)\n-                                  }\n-                                  _ => {\n-                                      None\n-                                  }\n-                              }\n-                          }\n-                          _ => {\n-                              None\n-                          }\n-                      }\n-                  })\n-                  .next()\n+    let expected_sig_and_kind =\n+        fulfillment_cx\n+        .pending_obligations()\n+        .iter()\n+        .filter_map(|obligation| {\n+            debug!(\"deduce_expectations_from_obligations: obligation.predicate={}\",\n+                   obligation.predicate.repr(fcx.tcx()));\n+\n+            match obligation.predicate {\n+                // Given a Projection predicate, we can potentially infer\n+                // the complete signature.\n+                ty::Predicate::Projection(ref proj_predicate) => {\n+                    let trait_ref = proj_predicate.to_poly_trait_ref();\n+                    self_type_matches_expected_vid(fcx, trait_ref, expected_vid)\n+                        .and_then(|_| deduce_expectations_from_projection(fcx, proj_predicate))\n+                }\n+                _ => {\n+                    None\n+                }\n+            }\n+        })\n+        .next();\n+\n+    match expected_sig_and_kind {\n+        Some((sig, kind)) => { return (Some(sig), Some(kind)); }\n+        None => { }\n+    }\n+\n+    // Even if we can't infer the full signature, we may be able to\n+    // infer the kind. This can occur if there is a trait-reference\n+    // like `F : Fn<A>`.\n+    let expected_kind =\n+        fulfillment_cx\n+        .pending_obligations()\n+        .iter()\n+        .filter_map(|obligation| {\n+            let opt_trait_ref = match obligation.predicate {\n+                ty::Predicate::Projection(ref data) => Some(data.to_poly_trait_ref()),\n+                ty::Predicate::Trait(ref data) => Some(data.to_poly_trait_ref()),\n+                ty::Predicate::Equate(..) => None,\n+                ty::Predicate::RegionOutlives(..) => None,\n+                ty::Predicate::TypeOutlives(..) => None,\n+            };\n+            opt_trait_ref\n+                .and_then(|trait_ref| self_type_matches_expected_vid(fcx, trait_ref, expected_vid))\n+                .and_then(|trait_ref| fcx.tcx().lang_items.fn_trait_kind(trait_ref.def_id()))\n+        })\n+        .next();\n+\n+    (None, expected_kind)\n }\n \n /// Given a projection like \"<F as Fn(X)>::Result == Y\", we can deduce\n@@ -229,3 +241,20 @@ fn deduce_expectations_from_projection<'a,'tcx>(\n     return Some((fn_sig, kind));\n }\n \n+fn self_type_matches_expected_vid<'a,'tcx>(\n+    fcx: &FnCtxt<'a,'tcx>,\n+    trait_ref: ty::PolyTraitRef<'tcx>,\n+    expected_vid: ty::TyVid)\n+    -> Option<ty::PolyTraitRef<'tcx>>\n+{\n+    let self_ty = fcx.infcx().shallow_resolve(trait_ref.self_ty());\n+    debug!(\"self_type_matches_expected_vid(trait_ref={}, self_ty={})\",\n+           trait_ref.repr(fcx.tcx()),\n+           self_ty.repr(fcx.tcx()));\n+    match self_ty.sty {\n+        ty::ty_infer(ty::TyVar(v)) if expected_vid == v => Some(trait_ref),\n+        _ => None,\n+    }\n+}\n+\n+"}, {"sha": "adf15fbf28a8f040708e9e9aaea3b371558fdd9a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -3736,8 +3736,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n       ast::ExprMatch(ref discrim, ref arms, match_src) => {\n         _match::check_match(fcx, expr, &**discrim, arms.as_slice(), expected, match_src);\n       }\n-      ast::ExprClosure(capture, opt_kind, ref decl, ref body) => {\n-          closure::check_expr_closure(fcx, expr, capture, opt_kind, &**decl, &**body, expected);\n+      ast::ExprClosure(capture, ref decl, ref body) => {\n+          closure::check_expr_closure(fcx, expr, capture, &**decl, &**body, expected);\n       }\n       ast::ExprBlock(ref b) => {\n         check_block_with_expected(fcx, &**b, expected);"}, {"sha": "9df0403794d7c8e8bd03087dda0a33a387ab2a47", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -638,7 +638,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             visit::walk_expr(rcx, expr);\n         }\n \n-        ast::ExprClosure(_, _, _, ref body) => {\n+        ast::ExprClosure(_, _, ref body) => {\n             check_expr_fn_block(rcx, expr, &**body);\n         }\n "}, {"sha": "f452c8488ce1c7eb2fe900db03205d06889460ac", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -83,7 +83,7 @@ struct SeedBorrowKind<'a,'tcx:'a> {\n impl<'a, 'tcx, 'v> Visitor<'v> for SeedBorrowKind<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &ast::Expr) {\n         match expr.node {\n-            ast::ExprClosure(cc, _, _, ref body) => {\n+            ast::ExprClosure(cc, _, ref body) => {\n                 self.check_closure(expr, cc, &**body);\n             }\n "}, {"sha": "f047a36c56095fcc3433b872c2edb9480f1addb7", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -118,7 +118,7 @@ impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n                                     MethodCall::expr(e.id));\n \n         match e.node {\n-            ast::ExprClosure(_, _, ref decl, _) => {\n+            ast::ExprClosure(_, ref decl, _) => {\n                 for input in &decl.inputs {\n                     let _ = self.visit_node_id(ResolvingExpr(e.span),\n                                                input.id);"}, {"sha": "34eeedeaa7650bba3e232b1f6fe901982fb1071e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -48,7 +48,6 @@ pub use self::TraitItem::*;\n pub use self::Ty_::*;\n pub use self::TyParamBound::*;\n pub use self::UintTy::*;\n-pub use self::ClosureKind::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n pub use self::VariantKind::*;\n@@ -736,7 +735,7 @@ pub enum Expr_ {\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprLoop(P<Block>, Option<Ident>),\n     ExprMatch(P<Expr>, Vec<Arm>, MatchSource),\n-    ExprClosure(CaptureClause, Option<ClosureKind>, P<FnDecl>, P<Block>),\n+    ExprClosure(CaptureClause, P<FnDecl>, P<Block>),\n     ExprBlock(P<Block>),\n \n     ExprAssign(P<Expr>, P<Expr>),\n@@ -1687,13 +1686,6 @@ impl ForeignItem_ {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum ClosureKind {\n-    FnClosureKind,\n-    FnMutClosureKind,\n-    FnOnceClosureKind,\n-}\n-\n /// The data we save and restore about an inlined item or method.  This is not\n /// part of the AST that we parse from a file, but it becomes part of the tree\n /// that we trans."}, {"sha": "a85b87f47d6ee0d1a9338f262a8344bed2624ff9", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -218,7 +218,7 @@ impl<'a> FnLikeNode<'a> {\n                 }\n             }\n             ast_map::NodeExpr(e) => match e.node {\n-                ast::ExprClosure(_, _, ref decl, ref block) =>\n+                ast::ExprClosure(_, ref decl, ref block) =>\n                     closure(ClosureParts::new(&**decl, &**block, e.id, e.span)),\n                 _ => panic!(\"expr FnLikeNode that is not fn-like\"),\n             },"}, {"sha": "53c35ef34cd0d4293ed2803b08a26af76a62f710", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -876,14 +876,14 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn lambda_fn_decl(&self, span: Span,\n                       fn_decl: P<ast::FnDecl>, blk: P<ast::Block>) -> P<ast::Expr> {\n-        self.expr(span, ast::ExprClosure(ast::CaptureByRef, None, fn_decl, blk))\n+        self.expr(span, ast::ExprClosure(ast::CaptureByRef, fn_decl, blk))\n     }\n     fn lambda(&self, span: Span, ids: Vec<ast::Ident>, blk: P<ast::Block>) -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n             ids.iter().map(|id| self.arg(span, *id, self.ty_infer(span))).collect(),\n             self.ty_infer(span));\n \n-        self.expr(span, ast::ExprClosure(ast::CaptureByRef, None, fn_decl, blk))\n+        self.expr(span, ast::ExprClosure(ast::CaptureByRef, fn_decl, blk))\n     }\n     fn lambda0(&self, span: Span, blk: P<ast::Block>) -> P<ast::Expr> {\n         self.lambda(span, Vec::new(), blk)"}, {"sha": "77440914342fb2ef4a60710bf3c16376db58934b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -322,11 +322,10 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             fld.cx.expr_match(span, into_iter_expr, vec![iter_arm])\n         }\n \n-        ast::ExprClosure(capture_clause, opt_kind, fn_decl, block) => {\n+        ast::ExprClosure(capture_clause, fn_decl, block) => {\n             let (rewritten_fn_decl, rewritten_block)\n                 = expand_and_rename_fn_decl_and_block(fn_decl, block, fld);\n             let new_node = ast::ExprClosure(capture_clause,\n-                                            opt_kind,\n                                             rewritten_fn_decl,\n                                             rewritten_block);\n             P(ast::Expr{id:id, node: new_node, span: fld.new_span(span)})"}, {"sha": "07b6af651f610eec1e10c9744fcd64d725657dfd", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -1325,9 +1325,8 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                         arms.move_map(|x| folder.fold_arm(x)),\n                         source)\n             }\n-            ExprClosure(capture_clause, opt_kind, decl, body) => {\n+            ExprClosure(capture_clause, decl, body) => {\n                 ExprClosure(capture_clause,\n-                            opt_kind,\n                             folder.fold_fn_decl(decl),\n                             folder.fold_block(body))\n             }"}, {"sha": "60de6c909b78bfc2d8fb7371bea068650da2a536", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -27,6 +27,7 @@ pub enum ObsoleteSyntax {\n     ProcType,\n     ProcExpr,\n     ClosureType,\n+    ClosureKind,\n }\n \n pub trait ParserObsoleteMethods {\n@@ -65,6 +66,10 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n                 \"`|usize| -> bool` closure type syntax\",\n                 \"use unboxed closures instead, no type annotation needed\"\n             ),\n+            ObsoleteSyntax::ClosureKind => (\n+                \"`:`, `&mut:`, or `&:` syntax\",\n+                \"rely on inference instead\"\n+            ),\n             ObsoleteSyntax::Sized => (\n                 \"`Sized? T` syntax for removing the `Sized` bound\",\n                 \"write `T: ?Sized` instead\""}, {"sha": "385c0a48f870f8142f96b42b201fce3c3f8573ca", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -28,8 +28,6 @@ use ast::{ExprLit, ExprLoop, ExprMac, ExprRange};\n use ast::{ExprMethodCall, ExprParen, ExprPath, ExprQPath};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n-use ast::{FnClosureKind, FnMutClosureKind};\n-use ast::{FnOnceClosureKind};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod, FunctionRetTy};\n use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl, ItemConst};\n@@ -57,7 +55,7 @@ use ast::{TyFixedLengthVec, TyBareFn};\n use ast::{TyTypeof, TyInfer, TypeMethod};\n use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr, TyQPath};\n use ast::{TyRptr, TyTup, TyU32, TyVec, UnUniq};\n-use ast::{TypeImplItem, TypeTraitItem, Typedef, ClosureKind};\n+use ast::{TypeImplItem, TypeTraitItem, Typedef,};\n use ast::{UnnamedField, UnsafeBlock};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n@@ -1139,29 +1137,36 @@ impl<'a> Parser<'a> {\n         TyInfer\n     }\n \n-    /// Parses an optional closure kind (`&:`, `&mut:`, or `:`).\n-    pub fn parse_optional_closure_kind(&mut self) -> Option<ClosureKind> {\n-        if self.check(&token::BinOp(token::And)) &&\n-                self.look_ahead(1, |t| t.is_keyword(keywords::Mut)) &&\n-                self.look_ahead(2, |t| *t == token::Colon) {\n+    /// Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).\n+    pub fn parse_obsolete_closure_kind(&mut self) {\n+        // let lo = self.span.lo;\n+        if\n+            self.check(&token::BinOp(token::And)) &&\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Mut)) &&\n+            self.look_ahead(2, |t| *t == token::Colon)\n+        {\n             self.bump();\n             self.bump();\n             self.bump();\n-            return Some(FnMutClosureKind)\n-        }\n-\n-        if self.token == token::BinOp(token::And) &&\n-                    self.look_ahead(1, |t| *t == token::Colon) {\n+        } else if\n+            self.token == token::BinOp(token::And) &&\n+            self.look_ahead(1, |t| *t == token::Colon)\n+        {\n             self.bump();\n             self.bump();\n-            return Some(FnClosureKind)\n-        }\n-\n-        if self.eat(&token::Colon) {\n-            return Some(FnOnceClosureKind)\n+            return;\n+        } else if\n+            self.eat(&token::Colon)\n+        {\n+            /* nothing */\n+        } else {\n+            return;\n         }\n \n-        return None\n+        // SNAP a45e117\n+        // Enable these obsolete errors after snapshot:\n+        // let span = mk_sp(lo, self.span.hi);\n+        // self.obsolete(span, ObsoleteSyntax::ClosureKind);\n     }\n \n     pub fn parse_ty_bare_fn_or_ty_closure(&mut self, lifetime_defs: Vec<LifetimeDef>) -> Ty_ {\n@@ -3047,7 +3052,7 @@ impl<'a> Parser<'a> {\n                              -> P<Expr>\n     {\n         let lo = self.span.lo;\n-        let (decl, optional_closure_kind) = self.parse_fn_block_decl();\n+        let decl = self.parse_fn_block_decl();\n         let body = self.parse_expr();\n         let fakeblock = P(ast::Block {\n             id: ast::DUMMY_NODE_ID,\n@@ -3060,7 +3065,7 @@ impl<'a> Parser<'a> {\n         self.mk_expr(\n             lo,\n             fakeblock.span.hi,\n-            ExprClosure(capture_clause, optional_closure_kind, decl, fakeblock))\n+            ExprClosure(capture_clause, decl, fakeblock))\n     }\n \n     pub fn parse_else_expr(&mut self) -> P<Expr> {\n@@ -4529,30 +4534,29 @@ impl<'a> Parser<'a> {\n     }\n \n     // parse the |arg, arg| header on a lambda\n-    fn parse_fn_block_decl(&mut self) -> (P<FnDecl>, Option<ClosureKind>) {\n-        let (optional_closure_kind, inputs_captures) = {\n+    fn parse_fn_block_decl(&mut self) -> P<FnDecl> {\n+        let inputs_captures = {\n             if self.eat(&token::OrOr) {\n-                (None, Vec::new())\n+                Vec::new()\n             } else {\n                 self.expect(&token::BinOp(token::Or));\n-                let optional_closure_kind =\n-                    self.parse_optional_closure_kind();\n+                self.parse_obsolete_closure_kind();\n                 let args = self.parse_seq_to_before_end(\n                     &token::BinOp(token::Or),\n                     seq_sep_trailing_allowed(token::Comma),\n                     |p| p.parse_fn_block_arg()\n                 );\n                 self.bump();\n-                (optional_closure_kind, args)\n+                args\n             }\n         };\n         let output = self.parse_ret_ty();\n \n-        (P(FnDecl {\n+        P(FnDecl {\n             inputs: inputs_captures,\n             output: output,\n             variadic: false\n-        }), optional_closure_kind)\n+        })\n     }\n \n     /// Parses the `(arg, arg) -> return_type` header on a procedure."}, {"sha": "ee8e207fa6c059b909914232d1d501cda015a9f0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -11,11 +11,9 @@\n pub use self::AnnNode::*;\n \n use abi;\n-use ast::{self, FnClosureKind, FnMutClosureKind};\n-use ast::{FnOnceClosureKind};\n+use ast;\n use ast::{MethodImplItem, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::{RequiredMethod, ProvidedMethod, TypeImplItem, TypeTraitItem};\n-use ast::{ClosureKind};\n use ast_util;\n use owned_slice::OwnedSlice;\n use attr::{AttrMetaMethods, AttributeMethods};\n@@ -350,7 +348,7 @@ pub fn method_to_string(p: &ast::Method) -> String {\n }\n \n pub fn fn_block_to_string(p: &ast::FnDecl) -> String {\n-    $to_string(|s| s.print_fn_block_args(p, None))\n+    $to_string(|s| s.print_fn_block_args(p))\n }\n \n pub fn path_to_string(p: &ast::Path) -> String {\n@@ -1747,10 +1745,10 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.bclose_(expr.span, indent_unit));\n             }\n-            ast::ExprClosure(capture_clause, opt_kind, ref decl, ref body) => {\n+            ast::ExprClosure(capture_clause, ref decl, ref body) => {\n                 try!(self.print_capture_clause(capture_clause));\n \n-                try!(self.print_fn_block_args(&**decl, opt_kind));\n+                try!(self.print_fn_block_args(&**decl));\n                 try!(space(&mut self.s));\n \n                 if !body.stmts.is_empty() || !body.expr.is_some() {\n@@ -2350,16 +2348,9 @@ impl<'a> State<'a> {\n \n     pub fn print_fn_block_args(\n             &mut self,\n-            decl: &ast::FnDecl,\n-            closure_kind: Option<ClosureKind>)\n+            decl: &ast::FnDecl)\n             -> IoResult<()> {\n         try!(word(&mut self.s, \"|\"));\n-        match closure_kind {\n-            None => {}\n-            Some(FnClosureKind) => try!(self.word_space(\"&:\")),\n-            Some(FnMutClosureKind) => try!(self.word_space(\"&mut:\")),\n-            Some(FnOnceClosureKind) => try!(self.word_space(\":\")),\n-        }\n         try!(self.print_fn_args(decl, None));\n         try!(word(&mut self.s, \"|\"));\n "}, {"sha": "fbcfcaadf12b71c29782e0ae4d5944b92043232a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04311341197ddabc420a8cffc0d26c12228d445b/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=04311341197ddabc420a8cffc0d26c12228d445b", "patch": "@@ -836,7 +836,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n                 visitor.visit_arm(arm)\n             }\n         }\n-        ExprClosure(_, _, ref function_declaration, ref body) => {\n+        ExprClosure(_, ref function_declaration, ref body) => {\n             visitor.visit_fn(FkFnBlock,\n                              &**function_declaration,\n                              &**body,"}]}