{"sha": "deb7b67aa1a26aff628da272531aa9f74d166f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYjdiNjdhYTFhMjZhZmY2MjhkYTI3MjUzMWFhOWY3NGQxNjZmNzg=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-08-08T19:46:36Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-11T00:18:21Z"}, "message": "Add a \"peekable\" iterator adaptor, with a peek() method that returns the next element.", "tree": {"sha": "56a5ec692ef3a2d974f9c291178ba036a476a77e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56a5ec692ef3a2d974f9c291178ba036a476a77e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deb7b67aa1a26aff628da272531aa9f74d166f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deb7b67aa1a26aff628da272531aa9f74d166f78", "html_url": "https://github.com/rust-lang/rust/commit/deb7b67aa1a26aff628da272531aa9f74d166f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deb7b67aa1a26aff628da272531aa9f74d166f78/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b44f423dd4f6e9c8f462904c884308f44544c192", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44f423dd4f6e9c8f462904c884308f44544c192", "html_url": "https://github.com/rust-lang/rust/commit/b44f423dd4f6e9c8f462904c884308f44544c192"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "e2d157c2a59ea6cabd4429dfa6f23023242f34fe", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/deb7b67aa1a26aff628da272531aa9f74d166f78/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb7b67aa1a26aff628da272531aa9f74d166f78/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=deb7b67aa1a26aff628da272531aa9f74d166f78", "patch": "@@ -156,6 +156,28 @@ pub trait Iterator<A> {\n         Enumerate{iter: self, count: 0}\n     }\n \n+\n+    /// Creates an iterator that has a `.peek()` method\n+    /// that returns a optional reference to the next element.\n+    ///\n+    /// # Example\n+    ///\n+    /// ~~~ {.rust}\n+    /// let a = [100, 200, 300];\n+    /// let mut it = xs.iter().map(|&x|x).peekable();\n+    /// assert_eq!(it.peek().unwrap(), &100);\n+    /// assert_eq!(it.next().unwrap(), 100);\n+    /// assert_eq!(it.next().unwrap(), 200);\n+    /// assert_eq!(it.peek().unwrap(), &300);\n+    /// assert_eq!(it.peek().unwrap(), &300);\n+    /// assert_eq!(it.next().unwrap(), 300);\n+    /// assert!(it.peek().is_none());\n+    /// assert!(it.next().is_none());\n+    /// ~~~\n+    fn peekable(self) -> Peekable<A, Self> {\n+        Peekable{iter: self, peeked: None}\n+    }\n+\n     /// Creates an iterator which invokes the predicate on elements until it\n     /// returns false. Once the predicate returns false, all further elements are\n     /// yielded.\n@@ -1059,6 +1081,38 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<(uint, A)> for Enumerat\n     }\n }\n \n+/// An iterator with a `peek()` that returns an optional reference to the next element.\n+pub struct Peekable<A, T> {\n+    priv iter: T,\n+    priv peeked: Option<A>,\n+}\n+\n+impl<A, T: Iterator<A>> Iterator<A> for Peekable<A, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        if self.peeked.is_some() { self.peeked.take() }\n+        else { self.iter.next() }\n+    }\n+}\n+\n+impl<'self, A, T: Iterator<A>> Peekable<A, T> {\n+    /// Return a reference to the next element of the iterator with out advancing it,\n+    /// or None if the iterator is exhausted.\n+    #[inline]\n+    pub fn peek(&'self mut self) -> Option<&'self A> {\n+        match self.peeked {\n+            Some(ref value) => Some(value),\n+            None => {\n+                self.peeked = self.iter.next();\n+                match self.peeked {\n+                    Some(ref value) => Some(value),\n+                    None => None,\n+                }\n+            },\n+        }\n+    }\n+}\n+\n /// An iterator which rejects elements while `predicate` is true\n pub struct SkipWhile<'self, A, T> {\n     priv iter: T,\n@@ -1568,6 +1622,24 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_iterator_peekable() {\n+        let xs = ~[0u, 1, 2, 3, 4, 5];\n+        let mut it = xs.iter().map(|&x|x).peekable();\n+        assert_eq!(it.peek().unwrap(), &0);\n+        assert_eq!(it.next().unwrap(), 0);\n+        assert_eq!(it.next().unwrap(), 1);\n+        assert_eq!(it.next().unwrap(), 2);\n+        assert_eq!(it.peek().unwrap(), &3);\n+        assert_eq!(it.peek().unwrap(), &3);\n+        assert_eq!(it.next().unwrap(), 3);\n+        assert_eq!(it.next().unwrap(), 4);\n+        assert_eq!(it.peek().unwrap(), &5);\n+        assert_eq!(it.next().unwrap(), 5);\n+        assert!(it.peek().is_none());\n+        assert!(it.next().is_none());\n+    }\n+\n     #[test]\n     fn test_iterator_take_while() {\n         let xs = [0u, 1, 2, 3, 5, 13, 15, 16, 17, 19];"}]}