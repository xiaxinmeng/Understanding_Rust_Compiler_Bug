{"sha": "1c277d1be896ad5499a464d92a3d427488df470e", "node_id": "C_kwDOAAsO6NoAKDFjMjc3ZDFiZTg5NmFkNTQ5OWE0NjRkOTJhM2Q0Mjc0ODhkZjQ3MGU", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2023-05-22T03:33:42Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2023-05-22T06:48:14Z"}, "message": "Unit tests highlighting unsafe match issue\n\nThese unit tests generate non-compilable code.  I did NOT `bless` them on purpose because the stderr output is not good.\n\nI'm surprised we don't auto-compile the suggestions here - is this something that can be easily enabled?\n\nSee #10808", "tree": {"sha": "b908da73024a2c8ab654bfa0f488001e3892c87b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b908da73024a2c8ab654bfa0f488001e3892c87b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c277d1be896ad5499a464d92a3d427488df470e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c277d1be896ad5499a464d92a3d427488df470e", "html_url": "https://github.com/rust-lang/rust/commit/1c277d1be896ad5499a464d92a3d427488df470e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c277d1be896ad5499a464d92a3d427488df470e/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "html_url": "https://github.com/rust-lang/rust/commit/435a8ad86c7a33bd7ffb91c59039943408d3b6aa"}], "stats": {"total": 109, "additions": 107, "deletions": 2}, "files": [{"sha": "d474088aab668bbc64e758b58788fabb4ec9278b", "filename": "tests/ui/single_match.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1c277d1be896ad5499a464d92a3d427488df470e/tests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c277d1be896ad5499a464d92a3d427488df470e/tests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.rs?ref=1c277d1be896ad5499a464d92a3d427488df470e", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::single_match)]\n-#![allow(clippy::uninlined_format_args)]\n+#![allow(unused, clippy::uninlined_format_args)]\n \n fn dummy() {}\n \n@@ -244,3 +244,24 @@ fn main() {\n         _ => 0,\n     };\n }\n+\n+fn issue_10808(bar: Option<i32>) {\n+    match bar {\n+        Some(v) => unsafe {\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        },\n+        _ => {},\n+    }\n+\n+    match bar {\n+        Some(v) => {\n+            // this comment prevents rustfmt from collapsing the block\n+            unsafe {\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+        _ => {},\n+    }\n+}"}, {"sha": "768316edad539c7e5f2f44f8ba9efd0242b6622f", "filename": "tests/ui/single_match_else.rs", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/1c277d1be896ad5499a464d92a3d427488df470e/tests%2Fui%2Fsingle_match_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c277d1be896ad5499a464d92a3d427488df470e/tests%2Fui%2Fsingle_match_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.rs?ref=1c277d1be896ad5499a464d92a3d427488df470e", "patch": "@@ -1,6 +1,6 @@\n //@aux-build: proc_macros.rs\n #![warn(clippy::single_match_else)]\n-#![allow(clippy::needless_return, clippy::no_effect, clippy::uninlined_format_args)]\n+#![allow(unused, clippy::needless_return, clippy::no_effect, clippy::uninlined_format_args)]\n \n extern crate proc_macros;\n use proc_macros::with_span;\n@@ -115,3 +115,87 @@ fn main() {\n         }\n     }\n }\n+\n+fn issue_10808(bar: Option<i32>) {\n+    match bar {\n+        Some(v) => unsafe {\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        },\n+        None => {\n+            println!(\"None1\");\n+            println!(\"None2\");\n+        },\n+    }\n+\n+    match bar {\n+        Some(v) => {\n+            println!(\"Some\");\n+            println!(\"{v}\");\n+        },\n+        None => unsafe {\n+            let v = 0;\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        },\n+    }\n+\n+    match bar {\n+        Some(v) => unsafe {\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        },\n+        None => unsafe {\n+            let v = 0;\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        },\n+    }\n+\n+    match bar {\n+        Some(v) => {\n+            // this comment prevents rustfmt from collapsing the block\n+            unsafe {\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+        None => {\n+            println!(\"None\");\n+            println!(\"None\");\n+        },\n+    }\n+\n+    match bar {\n+        Some(v) => {\n+            println!(\"Some\");\n+            println!(\"{v}\");\n+        },\n+        None => {\n+            // this comment prevents rustfmt from collapsing the block\n+            unsafe {\n+                let v = 0;\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+    }\n+\n+    match bar {\n+        Some(v) => {\n+            // this comment prevents rustfmt from collapsing the block\n+            unsafe {\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+        None => {\n+            // this comment prevents rustfmt from collapsing the block\n+            unsafe {\n+                let v = 0;\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+    }\n+}"}]}