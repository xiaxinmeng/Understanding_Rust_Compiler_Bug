{"sha": "d9ea132b7322cebd595598a0639cf6018816d454", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZWExMzJiNzMyMmNlYmQ1OTU1OThhMDYzOWNmNjAxODgxNmQ0NTQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-22T17:20:19Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-22T17:50:26Z"}, "message": "Explain error when yielding a reference to a local variable", "tree": {"sha": "01e39d54268672b33e3975c056459c95ed00c955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e39d54268672b33e3975c056459c95ed00c955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9ea132b7322cebd595598a0639cf6018816d454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ea132b7322cebd595598a0639cf6018816d454", "html_url": "https://github.com/rust-lang/rust/commit/d9ea132b7322cebd595598a0639cf6018816d454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9ea132b7322cebd595598a0639cf6018816d454/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "html_url": "https://github.com/rust-lang/rust/commit/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3"}], "stats": {"total": 133, "additions": 107, "deletions": 26}, "files": [{"sha": "956e8c5627278818fb82d027ae6530ac11cc4eea", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d9ea132b7322cebd595598a0639cf6018816d454/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ea132b7322cebd595598a0639cf6018816d454/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=d9ea132b7322cebd595598a0639cf6018816d454", "patch": "@@ -826,18 +826,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let borrow_span = borrow_spans.var_or_use();\n         if let BorrowExplanation::MustBeValidFor {\n-            category: ConstraintCategory::Return,\n+            category,\n             span,\n             ref opt_place_desc,\n             from_closure: false,\n             ..\n         } = explanation {\n-            return self.report_cannot_return_reference_to_local(\n+            if let Some(diag) = self.try_report_cannot_return_reference_to_local(\n                 borrow,\n                 borrow_span,\n                 span,\n+                category,\n                 opt_place_desc.as_ref(),\n-            );\n+            ) {\n+                return diag;\n+            }\n         }\n \n         let mut err = self.infcx.tcx.path_does_not_live_long_enough(\n@@ -1015,17 +1018,20 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n \n         if let BorrowExplanation::MustBeValidFor {\n-            category: ConstraintCategory::Return,\n+            category,\n             span,\n             from_closure: false,\n             ..\n         } = explanation {\n-            return self.report_cannot_return_reference_to_local(\n+            if let Some(diag) = self.try_report_cannot_return_reference_to_local(\n                 borrow,\n                 proper_span,\n                 span,\n+                category,\n                 None,\n-            );\n+            ) {\n+                return diag;\n+            }\n         }\n \n         let tcx = self.infcx.tcx;\n@@ -1064,15 +1070,22 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err\n     }\n \n-    fn report_cannot_return_reference_to_local(\n+    fn try_report_cannot_return_reference_to_local(\n         &self,\n         borrow: &BorrowData<'tcx>,\n         borrow_span: Span,\n         return_span: Span,\n+        category: ConstraintCategory,\n         opt_place_desc: Option<&String>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> Option<DiagnosticBuilder<'cx>> {\n         let tcx = self.infcx.tcx;\n \n+        let return_kind = match category {\n+            ConstraintCategory::Return => \"return\",\n+            ConstraintCategory::Yield => \"yield\",\n+            _ => return None,\n+        };\n+\n         // FIXME use a better heuristic than Spans\n         let reference_desc = if return_span == self.mir.source_info(borrow.reserve_location).span {\n             \"reference to\"\n@@ -1110,7 +1123,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             let local = if let Place::Base(PlaceBase::Local(local)) = *root_place {\n                 local\n             } else {\n-                bug!(\"report_cannot_return_reference_to_local: not a local\")\n+                bug!(\"try_report_cannot_return_reference_to_local: not a local\")\n             };\n             match self.mir.local_kind(local) {\n                 LocalKind::ReturnPointer | LocalKind::Temp => {\n@@ -1131,6 +1144,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let mut err = tcx.cannot_return_reference_to_local(\n             return_span,\n+            return_kind,\n             reference_desc,\n             &place_desc,\n             Origin::Mir,\n@@ -1140,7 +1154,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             err.span_label(borrow_span, note);\n         }\n \n-        err\n+        Some(err)\n     }\n \n     fn report_escaping_closure_capture("}, {"sha": "5b1c64039bee3400c3aa6c9d452bc56c5684fe6e", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9ea132b7322cebd595598a0639cf6018816d454/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ea132b7322cebd595598a0639cf6018816d454/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=d9ea132b7322cebd595598a0639cf6018816d454", "patch": "@@ -313,9 +313,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             opt_place_desc,\n                         }\n                     } else {\n+                        debug!(\"explain_why_borrow_contains_point: \\\n+                                Could not generate a region name\");\n                         BorrowExplanation::Unexplained\n                     }\n                 } else {\n+                    debug!(\"explain_why_borrow_contains_point: \\\n+                            Could not generate an error region vid\");\n                     BorrowExplanation::Unexplained\n                 }\n             }"}, {"sha": "e72d4c9e3d570752599d5a8cabc88e290546130b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d9ea132b7322cebd595598a0639cf6018816d454/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ea132b7322cebd595598a0639cf6018816d454/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=d9ea132b7322cebd595598a0639cf6018816d454", "patch": "@@ -32,6 +32,7 @@ crate enum RegionNameSource {\n     MatchedAdtAndSegment(Span),\n     AnonRegionFromUpvar(Span, String),\n     AnonRegionFromOutput(Span, String, String),\n+    AnonRegionFromYieldTy(Span, String),\n }\n \n impl RegionName {\n@@ -46,7 +47,8 @@ impl RegionName {\n             RegionNameSource::MatchedHirTy(..) |\n             RegionNameSource::MatchedAdtAndSegment(..) |\n             RegionNameSource::AnonRegionFromUpvar(..) |\n-            RegionNameSource::AnonRegionFromOutput(..) => false,\n+            RegionNameSource::AnonRegionFromOutput(..) |\n+            RegionNameSource::AnonRegionFromYieldTy(..) => false,\n         }\n     }\n \n@@ -103,6 +105,12 @@ impl RegionName {\n                     format!(\"return type{} is {}\", mir_description, type_name),\n                 );\n             },\n+            RegionNameSource::AnonRegionFromYieldTy(span, type_name) => {\n+                diag.span_label(\n+                    *span,\n+                    format!(\"yield type is {}\", type_name),\n+                );\n+            }\n             RegionNameSource::Static => {},\n         }\n     }\n@@ -167,6 +175,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 self.give_name_if_anonymous_region_appears_in_output(\n                     infcx, mir, mir_def_id, fr, counter,\n                 )\n+            })\n+            .or_else(|| {\n+                self.give_name_if_anonymous_region_appears_in_yield_ty(\n+                    infcx, mir, mir_def_id, fr, counter,\n+                )\n             });\n \n         debug!(\"give_region_a_name: gave name {:?}\", value);\n@@ -673,10 +686,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             \"give_name_if_anonymous_region_appears_in_output: return_ty = {:?}\",\n             return_ty\n         );\n-        if !infcx\n-            .tcx\n-            .any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr)\n-        {\n+        if !tcx.any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr) {\n             return None;\n         }\n \n@@ -721,6 +731,57 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         })\n     }\n \n+    fn give_name_if_anonymous_region_appears_in_yield_ty(\n+        &self,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        mir: &Mir<'tcx>,\n+        mir_def_id: DefId,\n+        fr: RegionVid,\n+        counter: &mut usize,\n+    ) -> Option<RegionName> {\n+        // Note: generators from `async fn` yield `()`, so we don't have to\n+        // worry about them here.\n+        let yield_ty = self.universal_regions.yield_ty?;\n+        debug!(\n+            \"give_name_if_anonymous_region_appears_in_yield_ty: yield_ty = {:?}\",\n+            yield_ty,\n+        );\n+\n+        let tcx = infcx.tcx;\n+\n+        if !tcx.any_free_region_meets(&yield_ty, |r| r.to_region_vid() == fr) {\n+            return None;\n+        }\n+\n+        let mut highlight = RegionHighlightMode::default();\n+        highlight.highlighting_region_vid(fr, *counter);\n+        let type_name = infcx.extract_type_name(&yield_ty, Some(highlight));\n+\n+        let mir_node_id = tcx.hir().as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+\n+        let yield_span = match tcx.hir().get(mir_node_id) {\n+            hir::Node::Expr(hir::Expr {\n+                node: hir::ExprKind::Closure(_, _, _, span, _),\n+                ..\n+            }) => (\n+                tcx.sess.source_map().end_point(*span)\n+            ),\n+            _ => mir.span,\n+        };\n+\n+        debug!(\n+            \"give_name_if_anonymous_region_appears_in_yield_ty: \\\n+             type_name = {:?}, yield_span = {:?}\",\n+            yield_span,\n+            type_name,\n+        );\n+\n+        Some(RegionName {\n+            name: self.synthesize_region_name(counter),\n+            source: RegionNameSource::AnonRegionFromYieldTy(yield_span, type_name),\n+        })\n+    }\n+\n     /// Creates a synthetic region named `'1`, incrementing the\n     /// counter.\n     fn synthesize_region_name(&self, counter: &mut usize) -> InternedString {"}, {"sha": "0cbe39ab6d43477d436c73377d70e45dc5b5eb50", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9ea132b7322cebd595598a0639cf6018816d454/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ea132b7322cebd595598a0639cf6018816d454/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=d9ea132b7322cebd595598a0639cf6018816d454", "patch": "@@ -650,6 +650,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_return_reference_to_local(\n         self,\n         span: Span,\n+        return_kind: &str,\n         reference_desc: &str,\n         path_desc: &str,\n         o: Origin,\n@@ -658,15 +659,16 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n             self,\n             span,\n             E0515,\n-            \"cannot return {REFERENCE} {LOCAL}{OGN}\",\n+            \"cannot {RETURN} {REFERENCE} {LOCAL}{OGN}\",\n+            RETURN=return_kind,\n             REFERENCE=reference_desc,\n             LOCAL=path_desc,\n             OGN = o\n         );\n \n         err.span_label(\n             span,\n-            format!(\"returns a {} data owned by the current function\", reference_desc),\n+            format!(\"{}s a {} data owned by the current function\", return_kind, reference_desc),\n         );\n \n         self.cancel_if_wrong_origin(err, o)"}, {"sha": "a8f7299f89937a29898d7fd31052cec7de32bf22", "filename": "src/test/ui/nll/issue-55850.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ea132b7322cebd595598a0639cf6018816d454/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ea132b7322cebd595598a0639cf6018816d454/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs?ref=d9ea132b7322cebd595598a0639cf6018816d454", "patch": "@@ -25,7 +25,7 @@ where\n fn bug<'a>() -> impl Iterator<Item = &'a str> {\n     GenIter(move || {\n         let mut s = String::new();\n-        yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+        yield &s[..] //~ ERROR cannot yield value referencing local variable `s` [E0515]\n         //~| ERROR borrow may still be in use when generator yields\n     })\n }"}, {"sha": "86a8cdc42ff9fdf1e344ae54ae628241c1a135c8", "filename": "src/test/ui/nll/issue-55850.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9ea132b7322cebd595598a0639cf6018816d454/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9ea132b7322cebd595598a0639cf6018816d454/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr?ref=d9ea132b7322cebd595598a0639cf6018816d454", "patch": "@@ -1,11 +1,11 @@\n-error[E0597]: `s` does not live long enough\n-  --> $DIR/issue-55850.rs:28:16\n+error[E0515]: cannot yield value referencing local variable `s`\n+  --> $DIR/issue-55850.rs:28:9\n    |\n LL |         yield &s[..]\n-   |                ^ borrowed value does not live long enough\n-LL |\n-LL |     })\n-   |     - `s` dropped here while still borrowed\n+   |         ^^^^^^^-^^^^\n+   |         |      |\n+   |         |      `s` is borrowed here\n+   |         yields a value referencing data owned by the current function\n \n error[E0626]: borrow may still be in use when generator yields\n   --> $DIR/issue-55850.rs:28:16\n@@ -15,5 +15,5 @@ LL |         yield &s[..]\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0597, E0626.\n-For more information about an error, try `rustc --explain E0597`.\n+Some errors have detailed explanations: E0515, E0626.\n+For more information about an error, try `rustc --explain E0515`."}]}