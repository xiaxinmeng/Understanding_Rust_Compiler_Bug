{"sha": "02317542ebceef780ddac660d751cbe268f56105", "node_id": "C_kwDOAAsO6NoAKDAyMzE3NTQyZWJjZWVmNzgwZGRhYzY2MGQ3NTFjYmUyNjhmNTYxMDU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-19T03:41:02Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-19T07:02:48Z"}, "message": "Rearrange `TokenCursor::inlined_next()`.\n\nIn particular, avoid wrapping a token within `TokenTree::Token` and then\nimmediately matching it and returning the token within. Just return the\ntoken immediately.", "tree": {"sha": "8c16b75b22e8f9723fc9a3df78d07b7b833aed20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c16b75b22e8f9723fc9a3df78d07b7b833aed20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02317542ebceef780ddac660d751cbe268f56105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02317542ebceef780ddac660d751cbe268f56105", "html_url": "https://github.com/rust-lang/rust/commit/02317542ebceef780ddac660d751cbe268f56105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02317542ebceef780ddac660d751cbe268f56105/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e6dee59666d2f85a5121730ec128934519260f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e6dee59666d2f85a5121730ec128934519260f", "html_url": "https://github.com/rust-lang/rust/commit/b1e6dee59666d2f85a5121730ec128934519260f"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "513a95234abb5157fc127d0409d192b2de292507", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/02317542ebceef780ddac660d751cbe268f56105/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02317542ebceef780ddac660d751cbe268f56105/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=02317542ebceef780ddac660d751cbe268f56105", "patch": "@@ -262,29 +262,32 @@ impl TokenCursor {\n     #[inline(always)]\n     fn inlined_next(&mut self, desugar_doc_comments: bool) -> (Token, Spacing) {\n         let (token, spacing) = loop {\n-            let (tree, spacing) = if !self.frame.open_delim {\n+            if !self.frame.open_delim {\n                 self.frame.open_delim = true;\n-                TokenTree::token(token::OpenDelim(self.frame.delim), self.frame.span.open).into()\n-            } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {\n-                tree\n+                return (\n+                    Token::new(token::OpenDelim(self.frame.delim), self.frame.span.open),\n+                    Spacing::Alone,\n+                );\n+            } else if let Some((tree, spacing)) = self.frame.tree_cursor.next_with_spacing() {\n+                match tree {\n+                    TokenTree::Token(token) => {\n+                        break (token, spacing);\n+                    }\n+                    TokenTree::Delimited(sp, delim, tts) => {\n+                        let frame = TokenCursorFrame::new(sp, delim, tts);\n+                        self.stack.push(mem::replace(&mut self.frame, frame));\n+                    }\n+                }\n             } else if !self.frame.close_delim {\n                 self.frame.close_delim = true;\n-                TokenTree::token(token::CloseDelim(self.frame.delim), self.frame.span.close).into()\n+                return (\n+                    Token::new(token::CloseDelim(self.frame.delim), self.frame.span.close),\n+                    Spacing::Alone,\n+                );\n             } else if let Some(frame) = self.stack.pop() {\n                 self.frame = frame;\n-                continue;\n             } else {\n-                (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)\n-            };\n-\n-            match tree {\n-                TokenTree::Token(token) => {\n-                    break (token, spacing);\n-                }\n-                TokenTree::Delimited(sp, delim, tts) => {\n-                    let frame = TokenCursorFrame::new(sp, delim, tts);\n-                    self.stack.push(mem::replace(&mut self.frame, frame));\n-                }\n+                return (Token::new(token::Eof, DUMMY_SP), Spacing::Alone);\n             }\n         };\n "}]}