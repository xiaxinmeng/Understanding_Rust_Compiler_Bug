{"sha": "3c069a066e50598ef230ba71ed5c5bcf596beb90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMDY5YTA2NmU1MDU5OGVmMjMwYmE3MWVkNWM1YmNmNTk2YmViOTA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-01-25T01:31:32Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-02T12:20:57Z"}, "message": "Change MIR building to fill in the resume place\n\nThis changes `Yield` from `as_rvalue` to `into` lowering, which could\nhave a possible performance impact. I could imagine special-casing\nsome resume types here to use a simpler lowering for them, but it's\nunclear if that makes sense at this stage.", "tree": {"sha": "038799d9e6fd26623ad07cf97c09707094ada128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038799d9e6fd26623ad07cf97c09707094ada128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c069a066e50598ef230ba71ed5c5bcf596beb90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c069a066e50598ef230ba71ed5c5bcf596beb90", "html_url": "https://github.com/rust-lang/rust/commit/3c069a066e50598ef230ba71ed5c5bcf596beb90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c069a066e50598ef230ba71ed5c5bcf596beb90/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c1468965a7af5887d353adf77427344327be0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c1468965a7af5887d353adf77427344327be0d", "html_url": "https://github.com/rust-lang/rust/commit/f2c1468965a7af5887d353adf77427344327be0d"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "6f5c5f0dd4c5013b795c7cdd4eea0457235930ec", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c069a066e50598ef230ba71ed5c5bcf596beb90/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c069a066e50598ef230ba71ed5c5bcf596beb90/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=3c069a066e50598ef230ba71ed5c5bcf596beb90", "patch": "@@ -230,18 +230,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block = unpack!(this.stmt_expr(block, expr, None));\n                 block.and(this.unit_rvalue())\n             }\n-            ExprKind::Yield { value } => {\n-                let value = unpack!(block = this.as_operand(block, scope, value));\n-                let resume = this.cfg.start_new_block();\n-                let cleanup = this.generator_drop_cleanup();\n-                this.cfg.terminate(\n-                    block,\n-                    source_info,\n-                    TerminatorKind::Yield { value: value, resume: resume, drop: cleanup },\n-                );\n-                resume.and(this.unit_rvalue())\n-            }\n-            ExprKind::Literal { .. }\n+            ExprKind::Yield { .. }\n+            | ExprKind::Literal { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::Block { .. }\n             | ExprKind::Match { .. }"}, {"sha": "cc139dee63f92b86100045d40fd406db2764d37c", "filename": "src/librustc_mir_build/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c069a066e50598ef230ba71ed5c5bcf596beb90/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c069a066e50598ef230ba71ed5c5bcf596beb90/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs?ref=3c069a066e50598ef230ba71ed5c5bcf596beb90", "patch": "@@ -50,6 +50,7 @@ impl Category {\n             | ExprKind::Adt { .. }\n             | ExprKind::Borrow { .. }\n             | ExprKind::AddressOf { .. }\n+            | ExprKind::Yield { .. }\n             | ExprKind::Call { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n \n             ExprKind::Array { .. }\n@@ -63,7 +64,6 @@ impl Category {\n             | ExprKind::Repeat { .. }\n             | ExprKind::Assign { .. }\n             | ExprKind::AssignOp { .. }\n-            | ExprKind::Yield { .. }\n             | ExprKind::InlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n             ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => Some(Category::Constant),"}, {"sha": "51b0b5bc7cb0b73c320df8bae29c8a8b4b9ea87e", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c069a066e50598ef230ba71ed5c5bcf596beb90/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c069a066e50598ef230ba71ed5c5bcf596beb90/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=3c069a066e50598ef230ba71ed5c5bcf596beb90", "patch": "@@ -365,6 +365,24 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.unit()\n             }\n \n+            ExprKind::Yield { value } => {\n+                let scope = this.local_scope();\n+                let value = unpack!(block = this.as_operand(block, scope, value));\n+                let resume = this.cfg.start_new_block();\n+                let cleanup = this.generator_drop_cleanup();\n+                this.cfg.terminate(\n+                    block,\n+                    source_info,\n+                    TerminatorKind::Yield {\n+                        value,\n+                        resume,\n+                        resume_arg: destination.clone(),\n+                        drop: cleanup,\n+                    },\n+                );\n+                resume.unit()\n+            }\n+\n             // these are the cases that are more naturally handled by some other mode\n             ExprKind::Unary { .. }\n             | ExprKind::Binary { .. }\n@@ -376,8 +394,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Tuple { .. }\n             | ExprKind::Closure { .. }\n             | ExprKind::Literal { .. }\n-            | ExprKind::StaticRef { .. }\n-            | ExprKind::Yield { .. } => {\n+            | ExprKind::StaticRef { .. } => {\n                 debug_assert!(match Category::of(&expr.kind).unwrap() {\n                     // should be handled above\n                     Category::Rvalue(RvalueFunc::Into) => false,"}, {"sha": "4c8d8e3a0eac84b5afc2e3702cfde475acaaf7ba", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3c069a066e50598ef230ba71ed5c5bcf596beb90/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c069a066e50598ef230ba71ed5c5bcf596beb90/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=3c069a066e50598ef230ba71ed5c5bcf596beb90", "patch": "@@ -68,6 +68,12 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n             let fn_sig = cx.tables().liberated_fn_sigs()[id];\n             let fn_def_id = tcx.hir().local_def_id(id);\n \n+            let safety = match fn_sig.unsafety {\n+                hir::Unsafety::Normal => Safety::Safe,\n+                hir::Unsafety::Unsafe => Safety::FnUnsafe,\n+            };\n+\n+            let body = tcx.hir().body(body_id);\n             let ty = tcx.type_of(fn_def_id);\n             let mut abi = fn_sig.abi;\n             let implicit_argument = match ty.kind {\n@@ -77,22 +83,23 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n                     abi = Abi::Rust;\n                     vec![ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None)]\n                 }\n-                ty::Generator(..) => {\n+                ty::Generator(def_id, substs, _) => {\n                     let gen_ty = tcx.body_tables(body_id).node_type(id);\n-                    vec![\n-                        ArgInfo(gen_ty, None, None, None),\n-                        ArgInfo(tcx.mk_unit(), None, None, None),\n-                    ]\n+                    let resume_ty = substs.as_generator().resume_ty(def_id, tcx);\n+\n+                    // The resume argument may be missing, in that case we need to provide it here.\n+                    if body.params.is_empty() {\n+                        vec![\n+                            ArgInfo(gen_ty, None, None, None),\n+                            ArgInfo(resume_ty, None, None, None),\n+                        ]\n+                    } else {\n+                        vec![ArgInfo(gen_ty, None, None, None)]\n+                    }\n                 }\n                 _ => vec![],\n             };\n \n-            let safety = match fn_sig.unsafety {\n-                hir::Unsafety::Normal => Safety::Safe,\n-                hir::Unsafety::Unsafe => Safety::FnUnsafe,\n-            };\n-\n-            let body = tcx.hir().body(body_id);\n             let explicit_arguments = body.params.iter().enumerate().map(|(index, arg)| {\n                 let owner_id = tcx.hir().body_owner(body_id);\n                 let opt_ty_info;"}]}