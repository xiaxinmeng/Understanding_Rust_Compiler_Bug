{"sha": "5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NzFjMWVmNGIyZmRhMmZiYWE2M2Y3ZDg0MDRhYmYwNGEzZTlkYTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T13:22:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T13:37:29Z"}, "message": "generalize SourceAnalyzer to handle all defs with bodies", "tree": {"sha": "b5a77b6b7474e728f5884969b41f53f0c2ebceb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a77b6b7474e728f5884969b41f53f0c2ebceb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4", "html_url": "https://github.com/rust-lang/rust/commit/5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07cc047b4ffe3049dfe95fc5cd59383336976e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/07cc047b4ffe3049dfe95fc5cd59383336976e2d", "html_url": "https://github.com/rust-lang/rust/commit/07cc047b4ffe3049dfe95fc5cd59383336976e2d"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "40bfd5faf032665565d56a09b70c93ac8d68a492", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4", "patch": "@@ -454,6 +454,14 @@ impl DefWithBody {\n         db.body_hir(*self)\n     }\n \n+    pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        match *self {\n+            DefWithBody::Const(ref c) => c.body_source_map(db),\n+            DefWithBody::Function(ref f) => f.body_source_map(db),\n+            DefWithBody::Static(ref s) => s.body_source_map(db),\n+        }\n+    }\n+\n     /// Builds a resolver for code inside this item.\n     pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         match *self {"}, {"sha": "dc9d614c0e2d9e6337e5a055967fade7f43c7975", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4", "patch": "@@ -15,7 +15,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    HirDatabase, Function, Struct, Enum, Const, Static, Either,\n+    HirDatabase, Function, Struct, Enum, Const, Static, Either, DefWithBody,\n     AsName, Module, HirFileId, Crate, Trait, Resolver,\n     ids::LocationCtx,\n     expr, AstId\n@@ -219,7 +219,7 @@ pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> R\n         .unwrap_or_default()\n }\n \n-pub fn resolver_for_node(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNode) -> Resolver {\n+fn resolver_for_node(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNode) -> Resolver {\n     node.ancestors()\n         .find_map(|node| {\n             if ast::Expr::cast(node).is_some() || ast::Block::cast(node).is_some() {\n@@ -284,16 +284,24 @@ pub enum PathResolution {\n \n impl SourceAnalyzer {\n     pub fn new(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNode) -> SourceAnalyzer {\n-        let resolver = resolver_for_node(db, file_id, node);\n-        let function = function_from_child_node(db, file_id, node);\n-        if let Some(function) = function {\n-            SourceAnalyzer {\n-                resolver,\n-                body_source_map: Some(function.body_source_map(db)),\n-                infer: Some(function.infer(db)),\n+        let def_with_body = node.ancestors().find_map(|node| {\n+            if let Some(src) = ast::FnDef::cast(node) {\n+                return function_from_source(db, file_id, src).map(DefWithBody::from);\n             }\n-        } else {\n-            SourceAnalyzer { resolver, body_source_map: None, infer: None }\n+            if let Some(src) = ast::StaticDef::cast(node) {\n+                return static_from_source(db, file_id, src).map(DefWithBody::from);\n+            }\n+            if let Some(src) = ast::ConstDef::cast(node) {\n+                return const_from_source(db, file_id, src).map(DefWithBody::from);\n+            }\n+            None\n+        });\n+        SourceAnalyzer {\n+            resolver: def_with_body\n+                .map(|it| it.resolver(db))\n+                .unwrap_or_else(|| resolver_for_node(db, file_id, node)),\n+            body_source_map: def_with_body.map(|it| it.body_source_map(db)),\n+            infer: def_with_body.map(|it| it.infer(db)),\n         }\n     }\n "}, {"sha": "4a111aba5a9bf9b955c544a55577dbcb224dcf07", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=5471c1ef4b2fda2fbaa63f7d8404abf04a3e9da4", "patch": "@@ -305,6 +305,30 @@ mod tests {\n         kind: Method,\n         detail: \"pub fn blah(&self)\"\n     }\n+]\"###\n+        );\n+    }\n+\n+    #[test]\n+    fn test_completion_works_in_consts() {\n+        assert_debug_snapshot_matches!(\n+        do_ref_completion(\n+            r\"\n+            struct A { the_field: u32 }\n+            const X: u32 = {\n+                A { the_field: 92 }.<|>\n+            };\n+            \",\n+        ),\n+        @r###\"[\n+    CompletionItem {\n+        label: \"the_field\",\n+        source_range: [106; 106),\n+        delete: [106; 106),\n+        insert: \"the_field\",\n+        kind: Field,\n+        detail: \"u32\"\n+    }\n ]\"###\n         );\n     }"}]}