{"sha": "0bb1c285af51def917dd17ec1b1815cb34d4b208", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjFjMjg1YWY1MWRlZjkxN2RkMTdlYzFiMTgxNWNiMzRkNGIyMDg=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-23T01:53:00Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-11T18:24:53Z"}, "message": "rustdoc: Get symbol for `TyParam` directly", "tree": {"sha": "31868e5dc7f06b5f2958d301d3f3f773ba1dc955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31868e5dc7f06b5f2958d301d3f3f773ba1dc955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb1c285af51def917dd17ec1b1815cb34d4b208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb1c285af51def917dd17ec1b1815cb34d4b208", "html_url": "https://github.com/rust-lang/rust/commit/0bb1c285af51def917dd17ec1b1815cb34d4b208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb1c285af51def917dd17ec1b1815cb34d4b208/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df281ee57b3eb04184802da552b06d1b83a04ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/df281ee57b3eb04184802da552b06d1b83a04ad3", "html_url": "https://github.com/rust-lang/rust/commit/df281ee57b3eb04184802da552b06d1b83a04ad3"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "a11b9c2af8a967221cf6b1600885ccf19c0bc285", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bb1c285af51def917dd17ec1b1815cb34d4b208/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb1c285af51def917dd17ec1b1815cb34d4b208/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=0bb1c285af51def917dd17ec1b1815cb34d4b208", "patch": "@@ -414,7 +414,7 @@ crate fn resolve_type(cx: &mut DocContext<'_>, path: Path, id: hir::HirId) -> Ty\n             return Generic(kw::SelfUpper);\n         }\n         Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => {\n-            return Generic(Symbol::intern(&path.whole_name()));\n+            return Generic(path.segments[0].name);\n         }\n         Res::SelfTy(..) | Res::Def(DefKind::TyParam | DefKind::AssocTy, _) => true,\n         _ => false,"}]}