{"sha": "2d17597f849fce55aa730edaa8f1bf0e91d64147", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTc1OTdmODQ5ZmNlNTVhYTczMGVkYWE4ZjFiZjBlOTFkNjQxNDc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-19T15:43:38Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-31T00:02:15Z"}, "message": "Strip out non-diagnostic lines from rustfix input", "tree": {"sha": "d2503337fad87f1761ba1f654e953f1edfe48349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2503337fad87f1761ba1f654e953f1edfe48349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d17597f849fce55aa730edaa8f1bf0e91d64147", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+cqYcACgkQtAh+UQ6Y\nsWRbSRAAsrLGgUKK8nwXQRmtGvzXYlrF09coYPpOqkky1keXzM/QDKorv4cpOW9V\n6ZnUCjCcGD0kxBFGL6OOI1pMMiUX+FdMzeGpo+sBXiZdKE3x+a7Sox2AuZfEvt3B\nTxBhJlfPFsMk3FJsF6xm8IzMkg3NnonKWmbqvWE2gvy0OAkNjm2LgRHw0KO7KDm+\nvFm9mWCVCSehP+CHtWsO9rhSjW3TGf728zaOYKC0wdIgRtMjWSty1//rT9LoaySF\nhlRi56AlRfuGC3mWE5M7eiAEYpU5VP+xZLq/50RErDWPrvpFIswVRc7WoFeWv+/D\nJZDlX/3GecQUgIMPCOzMP6f8NUBMR2WBTK26mnH4KRIY9Z/h/wlNyN/neX3WGOCC\nbdGcE9Cx7YxqwQVEcleeGL5HHmMGlg7Px9ZrD/1IsK/PuimwwCQ0kpoZnimqVt+m\nsSwkCgRqOGWoZ+DipPfcvNdw9BTy6mhF21bGAqwIepyirvUCuXxEz3Cvo+EQfp9S\nTNJi1sWeiR+leYFdfcQooV0oRyxeuqDvNJxGpRg3v0sVtTmbiLf3qxJewEbekBIJ\nROhfiJCXAUXaUJkLCGmuivquZEot0rTXVjV951CUN9poPkL7JY9aB8vJi6MpUhwH\nE1SDdVOIs/OTWDf2P75pTO6XiTnl2/SzSyFjK9z50PJ4WUZsAEA=\n=gKRT\n-----END PGP SIGNATURE-----", "payload": "tree d2503337fad87f1761ba1f654e953f1edfe48349\nparent a77a65c029fc2543ec753982ff8d6da2bdb1d866\nauthor Aaron Hill <aa1ronham@gmail.com> 1603122218 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1604102535 -0400\n\nStrip out non-diagnostic lines from rustfix input\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d17597f849fce55aa730edaa8f1bf0e91d64147", "html_url": "https://github.com/rust-lang/rust/commit/2d17597f849fce55aa730edaa8f1bf0e91d64147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d17597f849fce55aa730edaa8f1bf0e91d64147/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77a65c029fc2543ec753982ff8d6da2bdb1d866", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77a65c029fc2543ec753982ff8d6da2bdb1d866", "html_url": "https://github.com/rust-lang/rust/commit/a77a65c029fc2543ec753982ff8d6da2bdb1d866"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "8eeaf8b1bb50ca502ff21d8fb98127b17ce6e808", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2d17597f849fce55aa730edaa8f1bf0e91d64147/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d17597f849fce55aa730edaa8f1bf0e91d64147/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=2d17597f849fce55aa730edaa8f1bf0e91d64147", "patch": "@@ -79,6 +79,12 @@ struct DiagnosticCode {\n     explanation: Option<String>,\n }\n \n+pub fn rustfix_diagnostics_only(output: &str) -> String {\n+    output.lines().filter(|line| {\n+        line.starts_with('{') && serde_json::from_str::<Diagnostic>(line).is_ok()\n+    }).collect()\n+}\n+\n pub fn extract_rendered(output: &str) -> String {\n     output\n         .lines()\n@@ -126,11 +132,17 @@ fn parse_line(file_name: &str, line: &str, output: &str, proc_res: &ProcRes) ->\n                 expected_errors\n             }\n             Err(error) => {\n-                proc_res.fatal(Some(&format!(\n-                    \"failed to decode compiler output as json: \\\n-                     `{}`\\nline: {}\\noutput: {}\",\n-                    error, line, output\n-                )));\n+                // Ignore the future compat report message - this is handled\n+                // by `extract_rendered`\n+                if serde_json::from_str::<FutureIncompatReport>(line).is_ok() {\n+                    vec![]\n+                } else {\n+                    proc_res.fatal(Some(&format!(\n+                        \"failed to decode compiler output as json: \\\n+                         `{}`\\nline: {}\\noutput: {}\",\n+                        error, line, output\n+                    )));\n+                }\n             }\n         }\n     } else {"}, {"sha": "0f2165edacb64441195e16a2ae306e98bfb9f111", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d17597f849fce55aa730edaa8f1bf0e91d64147/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d17597f849fce55aa730edaa8f1bf0e91d64147/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=2d17597f849fce55aa730edaa8f1bf0e91d64147", "patch": "@@ -2978,6 +2978,7 @@ impl<'test> TestCx<'test> {\n         self.prune_duplicate_outputs(&modes_to_prune);\n \n         let mut errors = self.load_compare_outputs(&proc_res, TestOutput::Compile, explicit);\n+        let rustfix_input = json::rustfix_diagnostics_only(&proc_res.stderr);\n \n         if self.config.compare_mode.is_some() {\n             // don't test rustfix with nll right now\n@@ -2988,7 +2989,7 @@ impl<'test> TestCx<'test> {\n             // This will return an empty `Vec` in case the executed test file has a\n             // `compile-flags: --error-format=xxxx` header with a value other than `json`.\n             let suggestions = get_suggestions_from_json(\n-                &proc_res.stderr,\n+                &rustfix_input,\n                 &HashSet::new(),\n                 Filter::MachineApplicableOnly,\n             )\n@@ -3015,7 +3016,7 @@ impl<'test> TestCx<'test> {\n             // Apply suggestions from rustc to the code itself\n             let unfixed_code = self.load_expected_output_from_path(&self.testpaths.file).unwrap();\n             let suggestions = get_suggestions_from_json(\n-                &proc_res.stderr,\n+                &rustfix_input,\n                 &HashSet::new(),\n                 if self.props.rustfix_only_machine_applicable {\n                     Filter::MachineApplicableOnly"}]}