{"sha": "c83241a7f9ca77acfe0264b4d42a0f915b0a5a34", "node_id": "C_kwDOAAsO6NoAKGM4MzI0MWE3ZjljYTc3YWNmZTAyNjRiNGQ0MmEwZjkxNWIwYTVhMzQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-18T15:48:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-18T16:30:17Z"}, "message": "avoid an unnecessary call to Pointer::into_parts, and caution against into_pointer_or_addr", "tree": {"sha": "9b9f2f8de1d38336ac542a5aa593b4ba584b0ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b9f2f8de1d38336ac542a5aa593b4ba584b0ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c83241a7f9ca77acfe0264b4d42a0f915b0a5a34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c83241a7f9ca77acfe0264b4d42a0f915b0a5a34", "html_url": "https://github.com/rust-lang/rust/commit/c83241a7f9ca77acfe0264b4d42a0f915b0a5a34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c83241a7f9ca77acfe0264b4d42a0f915b0a5a34/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32360925035716a78509629aeff57208ab312649", "url": "https://api.github.com/repos/rust-lang/rust/commits/32360925035716a78509629aeff57208ab312649", "html_url": "https://github.com/rust-lang/rust/commit/32360925035716a78509629aeff57208ab312649"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "f08bf801633f975d5612105ba089d724e5763d05", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c83241a7f9ca77acfe0264b4d42a0f915b0a5a34/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83241a7f9ca77acfe0264b4d42a0f915b0a5a34/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=c83241a7f9ca77acfe0264b4d42a0f915b0a5a34", "patch": "@@ -158,8 +158,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         ptr: Pointer<AllocId>,\n     ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n-        // We know `offset` is relative to the allocation, so we can use `into_parts`.\n-        let (alloc_id, offset) = ptr.into_parts();\n+        let alloc_id = ptr.provenance;\n         // We need to handle `extern static`.\n         match self.tcx.get_global_alloc(alloc_id) {\n             Some(GlobalAlloc::Static(def_id)) if self.tcx.is_thread_local_static(def_id) => {\n@@ -171,7 +170,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             _ => {}\n         }\n         // And we need to get the tag.\n-        Ok(M::tag_alloc_base_pointer(self, Pointer::new(alloc_id, offset)))\n+        Ok(M::tag_alloc_base_pointer(self, ptr))\n     }\n \n     pub fn create_fn_alloc_ptr("}, {"sha": "c71aea417eca0143279c565a813ed0da9203dabc", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c83241a7f9ca77acfe0264b4d42a0f915b0a5a34/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83241a7f9ca77acfe0264b4d42a0f915b0a5a34/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=c83241a7f9ca77acfe0264b4d42a0f915b0a5a34", "patch": "@@ -201,6 +201,10 @@ impl<Tag> From<Pointer<Tag>> for Pointer<Option<Tag>> {\n }\n \n impl<Tag> Pointer<Option<Tag>> {\n+    /// Convert this pointer that *might* have a tag into a pointer that *definitely* has a tag, or\n+    /// an absolute address.\n+    ///\n+    /// This is rarely what you want; call `ptr_try_get_alloc_id` instead.\n     pub fn into_pointer_or_addr(self) -> Result<Pointer<Tag>, Size> {\n         match self.provenance {\n             Some(tag) => Ok(Pointer::new(tag, self.offset)),"}]}