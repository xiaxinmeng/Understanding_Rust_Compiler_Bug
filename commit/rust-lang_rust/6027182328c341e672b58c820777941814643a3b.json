{"sha": "6027182328c341e672b58c820777941814643a3b", "node_id": "C_kwDOAAsO6NoAKDYwMjcxODIzMjhjMzQxZTY3MmI1OGM4MjA3Nzc5NDE4MTQ2NDNhM2I", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-03-31T15:04:14Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2022-02-12T10:40:59Z"}, "message": "Fix a layout miscalculation in alloc::RawVec", "tree": {"sha": "62ac97f66915570ab64ecaed4ba3269208182e59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62ac97f66915570ab64ecaed4ba3269208182e59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6027182328c341e672b58c820777941814643a3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6027182328c341e672b58c820777941814643a3b", "html_url": "https://github.com/rust-lang/rust/commit/6027182328c341e672b58c820777941814643a3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6027182328c341e672b58c820777941814643a3b/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "html_url": "https://github.com/rust-lang/rust/commit/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "0edcaa9ef76759793e2037e76ea43c68880fdcd3", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6027182328c341e672b58c820777941814643a3b/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6027182328c341e672b58c820777941814643a3b/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=6027182328c341e672b58c820777941814643a3b", "patch": "@@ -244,9 +244,7 @@ impl<T, A: Allocator> RawVec<T, A> {\n             // We have an allocated chunk of memory, so we can bypass runtime\n             // checks to get our current layout.\n             unsafe {\n-                let align = mem::align_of::<T>();\n-                let size = mem::size_of::<T>() * self.cap;\n-                let layout = Layout::from_size_align_unchecked(size, align);\n+                let layout = Layout::array::<T>(self.cap).unwrap_unchecked();\n                 Some((self.ptr.cast().into(), layout))\n             }\n         }"}]}