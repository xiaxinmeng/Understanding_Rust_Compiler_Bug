{"sha": "564715a5b7fa43dbdca96b49d0086ac7a2d76b58", "node_id": "C_kwDOAAsO6NoAKDU2NDcxNWE1YjdmYTQzZGJkY2E5NmI0OWQwMDg2YWM3YTJkNzZiNTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-02T22:05:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-02T22:05:28Z"}, "message": "Rollup merge of #108557 - Nathan-Fenner:nathanf/adjust-error-span-fix-Some, r=WaffleLapkin\n\nPoint error span at Some constructor argument when trait resolution fails\n\nThis is a follow up to #108254 and #106477 which extends error span refinement to handle a case which I mistakenly believed was handled in #106477. The goal is to refine the error span depicted below:\n\n```rs\ntrait Fancy {}\nimpl <T> Fancy for Option<T> where T: Iterator {}\n\nfn want_fancy<F>(f: F) where F: Fancy {}\n\nfn example() {\n    want_fancy(Some(5));\n//  (BEFORE)   ^^^^^^^ `{integer}` is not an iterator\n//  (AFTER)         ^  `{integer}` is not an iterator\n}\n```\n\nI had used a (slightly more complex) example as an illustrative example in #108254 , but hadn't actually turned it into a test, because I had (incorrectly) believed at the time it was covered by existing behavior. It turns out that `Some` is slightly \"special\" in that it resolves differently from the other `enum` constructors I had tried, and therefore this test was actually broken.\n\nI've now updated the tests to include this example, and fixed the code to correctly resolve the `Some` constructor so that the span of the error is reduced.", "tree": {"sha": "30b4595ecab7e3b77a87b07315c8ab68bcfa3313", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b4595ecab7e3b77a87b07315c8ab68bcfa3313"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/564715a5b7fa43dbdca96b49d0086ac7a2d76b58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkAR2oCRBK7hj4Ov3rIwAAuYEIAFahrqEhShyyQEcibLa+ylK+\nIRywaX29eYCbQ4p13E+rcaORCtQmMRT1i5KLVcl2wUPkAY7L5x1d1Mj8c0FJuXUV\nL6jLdOkj1O4/fIiofWM9lFcKVox203ZCzf1/zqW7k9OPCMDbyoBqg8FfJWrPb+SS\n/r5JRVs/YC/OXcNLjOWALtloTmT/0MVRJJuakYB9wf/VGsK9LlXQLS+rkmGTv37D\nk6d9PHqmh5a4BzG6YAzNQcjJRWmNcj5iJApq7oogRS5V+RGx4qI3ugOIwsvF/QvZ\njQVTY9e2FZtSEK+9/LaGz0IpUKxegYgQrAYews1qMsaSaYRzjKf19owW6Osa3fM=\n=Wi0b\n-----END PGP SIGNATURE-----\n", "payload": "tree 30b4595ecab7e3b77a87b07315c8ab68bcfa3313\nparent a27a4e4c7ab5dc2315dacef717e3baaba409c53b\nparent be15f174fa13386a1b5f69fedbe0301c84d3df4d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677794728 +0100\ncommitter GitHub <noreply@github.com> 1677794728 +0100\n\nRollup merge of #108557 - Nathan-Fenner:nathanf/adjust-error-span-fix-Some, r=WaffleLapkin\n\nPoint error span at Some constructor argument when trait resolution fails\n\nThis is a follow up to #108254 and #106477 which extends error span refinement to handle a case which I mistakenly believed was handled in #106477. The goal is to refine the error span depicted below:\n\n```rs\ntrait Fancy {}\nimpl <T> Fancy for Option<T> where T: Iterator {}\n\nfn want_fancy<F>(f: F) where F: Fancy {}\n\nfn example() {\n    want_fancy(Some(5));\n//  (BEFORE)   ^^^^^^^ `{integer}` is not an iterator\n//  (AFTER)         ^  `{integer}` is not an iterator\n}\n```\n\nI had used a (slightly more complex) example as an illustrative example in #108254 , but hadn't actually turned it into a test, because I had (incorrectly) believed at the time it was covered by existing behavior. It turns out that `Some` is slightly \"special\" in that it resolves differently from the other `enum` constructors I had tried, and therefore this test was actually broken.\n\nI've now updated the tests to include this example, and fixed the code to correctly resolve the `Some` constructor so that the span of the error is reduced.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/564715a5b7fa43dbdca96b49d0086ac7a2d76b58", "html_url": "https://github.com/rust-lang/rust/commit/564715a5b7fa43dbdca96b49d0086ac7a2d76b58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/564715a5b7fa43dbdca96b49d0086ac7a2d76b58/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a27a4e4c7ab5dc2315dacef717e3baaba409c53b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a27a4e4c7ab5dc2315dacef717e3baaba409c53b", "html_url": "https://github.com/rust-lang/rust/commit/a27a4e4c7ab5dc2315dacef717e3baaba409c53b"}, {"sha": "be15f174fa13386a1b5f69fedbe0301c84d3df4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/be15f174fa13386a1b5f69fedbe0301c84d3df4d", "html_url": "https://github.com/rust-lang/rust/commit/be15f174fa13386a1b5f69fedbe0301c84d3df4d"}], "stats": {"total": 471, "additions": 463, "deletions": 8}, "files": [{"sha": "b09886fe3a96a29af515da35685ea2b9dd6d4442", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/564715a5b7fa43dbdca96b49d0086ac7a2d76b58/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564715a5b7fa43dbdca96b49d0086ac7a2d76b58/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=564715a5b7fa43dbdca96b49d0086ac7a2d76b58", "patch": "@@ -714,12 +714,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.tcx.parent(expr_ctor_def_id)\n                 }\n                 hir::def::DefKind::Ctor(hir::def::CtorOf::Variant, hir::def::CtorKind::Fn) => {\n-                    // If this is a variant, its parent is the type definition.\n-                    if in_ty_adt.did() != self.tcx.parent(expr_ctor_def_id) {\n+                    // For a typical enum like\n+                    // `enum Blah<T> { Variant(T) }`\n+                    // we get the following resolutions:\n+                    // - expr_ctor_def_id :::                                   DefId(0:29 ~ source_file[b442]::Blah::Variant::{constructor#0})\n+                    // - self.tcx.parent(expr_ctor_def_id) :::                  DefId(0:28 ~ source_file[b442]::Blah::Variant)\n+                    // - self.tcx.parent(self.tcx.parent(expr_ctor_def_id)) ::: DefId(0:26 ~ source_file[b442]::Blah)\n+\n+                    // Therefore, we need to go up once to obtain the variant and up twice to obtain the type.\n+                    // Note that this pattern still holds even when we `use` a variant or `use` an enum type to rename it, or chain `use` expressions\n+                    // together; this resolution is handled automatically by `qpath_res`.\n+\n+                    // FIXME: Deal with type aliases?\n+                    if in_ty_adt.did() == self.tcx.parent(self.tcx.parent(expr_ctor_def_id)) {\n+                        // The constructor definition refers to the \"constructor\" of the variant:\n+                        // For example, `Some(5)` triggers this case.\n+                        self.tcx.parent(expr_ctor_def_id)\n+                    } else {\n                         // FIXME: Deal with type aliases?\n                         return Err(expr);\n                     }\n-                    expr_ctor_def_id\n                 }\n                 _ => {\n                     return Err(expr);"}, {"sha": "0fbd851431ea6c6fa9959856fa3e558a1f0c6f1a", "filename": "tests/ui/errors/trait-bound-error-spans/blame-trait-error.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/564715a5b7fa43dbdca96b49d0086ac7a2d76b58/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564715a5b7fa43dbdca96b49d0086ac7a2d76b58/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.rs?ref=564715a5b7fa43dbdca96b49d0086ac7a2d76b58", "patch": "@@ -18,11 +18,85 @@ struct Burrito<F> {\n     filling: F,\n }\n \n+impl<It: Iterator> T1 for Option<It> {}\n+\n+impl<'a, A: T1> T1 for &'a A {}\n+\n fn want<V: T1>(_x: V) {}\n \n+enum ExampleTuple<T> {\n+    ExampleTupleVariant(T),\n+}\n+use ExampleDifferentTupleVariantName as ExampleYetAnotherTupleVariantName;\n+use ExampleTuple as ExampleOtherTuple;\n+use ExampleTuple::ExampleTupleVariant as ExampleDifferentTupleVariantName;\n+use ExampleTuple::*;\n+\n+impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+\n+enum ExampleStruct<T> {\n+    ExampleStructVariant { field: T },\n+}\n+use ExampleDifferentStructVariantName as ExampleYetAnotherStructVariantName;\n+use ExampleStruct as ExampleOtherStruct;\n+use ExampleStruct::ExampleStructVariant as ExampleDifferentStructVariantName;\n+use ExampleStruct::*;\n+\n+impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+\n+struct ExampleActuallyTupleStruct<T>(T, i32);\n+use ExampleActuallyTupleStruct as ExampleActuallyTupleStructOther;\n+\n+impl<A> T1 for ExampleActuallyTupleStruct<A> where A: T3 {}\n+\n fn example<Q>(q: Q) {\n     want(Wrapper { value: Burrito { filling: q } });\n     //~^ ERROR the trait bound `Q: T3` is not satisfied [E0277]\n+\n+    want(Some(()));\n+    //~^ ERROR `()` is not an iterator [E0277]\n+\n+    want(Some(q));\n+    //~^ ERROR `Q` is not an iterator [E0277]\n+\n+    want(&Some(q));\n+    //~^ ERROR `Q` is not an iterator [E0277]\n+\n+    want(&ExampleTuple::ExampleTupleVariant(q));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleTupleVariant(q));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleOtherTuple::ExampleTupleVariant(q));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleDifferentTupleVariantName(q));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleYetAnotherTupleVariantName(q));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleStruct::ExampleStructVariant { field: q });\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleStructVariant { field: q });\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleOtherStruct::ExampleStructVariant { field: q });\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleDifferentStructVariantName { field: q });\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleYetAnotherStructVariantName { field: q });\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleActuallyTupleStruct(q, 0));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleActuallyTupleStructOther(q, 0));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n }\n \n fn main() {}"}, {"sha": "9228a047e8785c0930d45b5e40ec2a435f744552", "filename": "tests/ui/errors/trait-bound-error-spans/blame-trait-error.stderr", "status": "modified", "additions": 370, "deletions": 3, "changes": 373, "blob_url": "https://github.com/rust-lang/rust/blob/564715a5b7fa43dbdca96b49d0086ac7a2d76b58/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/564715a5b7fa43dbdca96b49d0086ac7a2d76b58/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.stderr?ref=564715a5b7fa43dbdca96b49d0086ac7a2d76b58", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Q: T3` is not satisfied\n-  --> $DIR/blame-trait-error.rs:24:46\n+  --> $DIR/blame-trait-error.rs:53:46\n    |\n LL |     want(Wrapper { value: Burrito { filling: q } });\n    |     ----                                     ^ the trait `T3` is not implemented for `Q`\n@@ -21,7 +21,7 @@ LL | impl<B: T2> T1 for Wrapper<B> {}\n    |         |\n    |         unsatisfied trait bound introduced here\n note: required by a bound in `want`\n-  --> $DIR/blame-trait-error.rs:21:12\n+  --> $DIR/blame-trait-error.rs:25:12\n    |\n LL | fn want<V: T1>(_x: V) {}\n    |            ^^ required by this bound in `want`\n@@ -30,6 +30,373 @@ help: consider restricting type parameter `Q`\n LL | fn example<Q: T3>(q: Q) {\n    |             ++++\n \n-error: aborting due to previous error\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/blame-trait-error.rs:56:15\n+   |\n+LL |     want(Some(()));\n+   |     ----      ^^ `()` is not an iterator\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+   = help: the trait `T1` is implemented for `Option<It>`\n+note: required for `Option<()>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:21:20\n+   |\n+LL | impl<It: Iterator> T1 for Option<It> {}\n+   |          --------  ^^     ^^^^^^^^^^\n+   |          |\n+   |          unsatisfied trait bound introduced here\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+\n+error[E0277]: `Q` is not an iterator\n+  --> $DIR/blame-trait-error.rs:59:15\n+   |\n+LL |     want(Some(q));\n+   |     ----      ^ `Q` is not an iterator\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `Option<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:21:20\n+   |\n+LL | impl<It: Iterator> T1 for Option<It> {}\n+   |          --------  ^^     ^^^^^^^^^^\n+   |          |\n+   |          unsatisfied trait bound introduced here\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: std::iter::Iterator>(q: Q) {\n+   |             +++++++++++++++++++++\n+\n+error[E0277]: `Q` is not an iterator\n+  --> $DIR/blame-trait-error.rs:62:16\n+   |\n+LL |     want(&Some(q));\n+   |     ----       ^ `Q` is not an iterator\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `Option<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:21:20\n+   |\n+LL | impl<It: Iterator> T1 for Option<It> {}\n+   |          --------  ^^     ^^^^^^^^^^\n+   |          |\n+   |          unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&Option<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: std::iter::Iterator>(q: Q) {\n+   |             +++++++++++++++++++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:65:45\n+   |\n+LL |     want(&ExampleTuple::ExampleTupleVariant(q));\n+   |     ----                                    ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleTuple<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:35:9\n+   |\n+LL | impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleTuple<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:68:31\n+   |\n+LL |     want(&ExampleTupleVariant(q));\n+   |     ----                      ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleTuple<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:35:9\n+   |\n+LL | impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleTuple<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:71:50\n+   |\n+LL |     want(&ExampleOtherTuple::ExampleTupleVariant(q));\n+   |     ----                                         ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleTuple<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:35:9\n+   |\n+LL | impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleTuple<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:74:44\n+   |\n+LL |     want(&ExampleDifferentTupleVariantName(q));\n+   |     ----                                   ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleTuple<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:35:9\n+   |\n+LL | impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleTuple<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:77:45\n+   |\n+LL |     want(&ExampleYetAnotherTupleVariantName(q));\n+   |     ----                                    ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleTuple<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:35:9\n+   |\n+LL | impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleTuple<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:80:56\n+   |\n+LL |     want(&ExampleStruct::ExampleStructVariant { field: q });\n+   |     ---- required by a bound introduced by this call   ^ the trait `T3` is not implemented for `Q`\n+   |\n+note: required for `ExampleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:45:9\n+   |\n+LL | impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:83:41\n+   |\n+LL |     want(&ExampleStructVariant { field: q });\n+   |     ----                                ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:45:9\n+   |\n+LL | impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:86:61\n+   |\n+LL |     want(&ExampleOtherStruct::ExampleStructVariant { field: q });\n+   |     ---- required by a bound introduced by this call        ^ the trait `T3` is not implemented for `Q`\n+   |\n+note: required for `ExampleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:45:9\n+   |\n+LL | impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:89:54\n+   |\n+LL |     want(&ExampleDifferentStructVariantName { field: q });\n+   |     ---- required by a bound introduced by this call ^ the trait `T3` is not implemented for `Q`\n+   |\n+note: required for `ExampleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:45:9\n+   |\n+LL | impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:92:55\n+   |\n+LL |     want(&ExampleYetAnotherStructVariantName { field: q });\n+   |     ---- required by a bound introduced by this call  ^ the trait `T3` is not implemented for `Q`\n+   |\n+note: required for `ExampleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:45:9\n+   |\n+LL | impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:95:38\n+   |\n+LL |     want(&ExampleActuallyTupleStruct(q, 0));\n+   |     ----                             ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleActuallyTupleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:50:9\n+   |\n+LL | impl<A> T1 for ExampleActuallyTupleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleActuallyTupleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:98:43\n+   |\n+LL |     want(&ExampleActuallyTupleStructOther(q, 0));\n+   |     ----                                  ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleActuallyTupleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:50:9\n+   |\n+LL | impl<A> T1 for ExampleActuallyTupleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleActuallyTupleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "b6a24e12bcc76819f531e74644e226a341d2474b", "filename": "tests/ui/errors/traits/blame-trait-error-spans-on-exprs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/564715a5b7fa43dbdca96b49d0086ac7a2d76b58/tests%2Fui%2Ferrors%2Ftraits%2Fblame-trait-error-spans-on-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/564715a5b7fa43dbdca96b49d0086ac7a2d76b58/tests%2Fui%2Ferrors%2Ftraits%2Fblame-trait-error-spans-on-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Ftraits%2Fblame-trait-error-spans-on-exprs.stderr?ref=564715a5b7fa43dbdca96b49d0086ac7a2d76b58", "patch": "@@ -91,10 +91,10 @@ LL | fn example<Q: T3>(q: Q) {\n    |             ++++\n \n error[E0277]: the trait bound `Q: T3` is not satisfied\n-  --> $DIR/blame-trait-error-spans-on-exprs.rs:93:27\n+  --> $DIR/blame-trait-error-spans-on-exprs.rs:93:53\n    |\n LL |     want(Wrapper { value: TacoKinds::OneTaco(false, q) });\n-   |     ----                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `T3` is not implemented for `Q`\n+   |     ----                                            ^ the trait `T3` is not implemented for `Q`\n    |     |\n    |     required by a bound introduced by this call\n    |"}]}