{"sha": "3f3289df2aa44a2f33907e6e2abad75fa9787d01", "node_id": "C_kwDOAAsO6NoAKDNmMzI4OWRmMmFhNDRhMmYzMzkwN2U2ZTJhYmFkNzVmYTk3ODdkMDE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-03T19:28:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-03T19:28:36Z"}, "message": "Merge #10915\n\n10915: feat: Resolve builtin-attr and tools in ide layer r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "a7e1bafebcb753184164f52f3d2bb43b4dffa1c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7e1bafebcb753184164f52f3d2bb43b4dffa1c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f3289df2aa44a2f33907e6e2abad75fa9787d01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqm/kCRBK7hj4Ov3rIwAAf7IIAK9lqtylbbPq2nyEYp1H09PN\n7p3WMkYaSxo9HHTByuXRZKkNvDLYnA5mWxJkgj0z+ggq9xpTOrXiV6R5qN2nbvcf\n8+gQPMnFeTOLTa71MjmQzjrrWKBDfdb8MzXXN02QyDSQeBchrTup51tGU//EgJKJ\nvRu/+rc4J1FlWekZH8ndTCknPZNbFmN4JqhlCJn950dYWOMzFdRXKuKbpMOoJeM5\nQ6ohFyiVPRdCUIQRpvHXUa0ro/NJTv8oVv7vAN71rb2FkxSyKVLWsjS+/3l30t1G\nq4VzLVVXNJs2HcQAVDWEGCVJ5DZLVyq+6UXkV/B6fEFnLUTsk94nHnzarISim8I=\n=UlKh\n-----END PGP SIGNATURE-----\n", "payload": "tree a7e1bafebcb753184164f52f3d2bb43b4dffa1c0\nparent cf1c7e5d264f6239426752bd400cb5ab97160c15\nparent 8da850b6d5cdb9896ff936170ccc6a6891ca067d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1638559716 +0000\ncommitter GitHub <noreply@github.com> 1638559716 +0000\n\nMerge #10915\n\n10915: feat: Resolve builtin-attr and tools in ide layer r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f3289df2aa44a2f33907e6e2abad75fa9787d01", "html_url": "https://github.com/rust-lang/rust/commit/3f3289df2aa44a2f33907e6e2abad75fa9787d01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f3289df2aa44a2f33907e6e2abad75fa9787d01/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf1c7e5d264f6239426752bd400cb5ab97160c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1c7e5d264f6239426752bd400cb5ab97160c15", "html_url": "https://github.com/rust-lang/rust/commit/cf1c7e5d264f6239426752bd400cb5ab97160c15"}, {"sha": "8da850b6d5cdb9896ff936170ccc6a6891ca067d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da850b6d5cdb9896ff936170ccc6a6891ca067d", "html_url": "https://github.com/rust-lang/rust/commit/8da850b6d5cdb9896ff936170ccc6a6891ca067d"}], "stats": {"total": 526, "additions": 350, "deletions": 176}, "files": [{"sha": "4d758c7df7610b01e61e91c0eb220d71e0e858db", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -103,6 +103,7 @@ pub use {\n     hir_def::{\n         adt::StructKind,\n         attr::{Attr, Attrs, AttrsWithOwner, Documentation},\n+        builtin_attr::AttributeTemplate,\n         find_path::PrefixKind,\n         import_map,\n         item_scope::ItemScope,\n@@ -2023,6 +2024,40 @@ impl Local {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct BuiltinAttr(usize);\n+\n+impl BuiltinAttr {\n+    pub(crate) fn by_name(name: &str) -> Option<Self> {\n+        // FIXME: def maps registered attrs?\n+        hir_def::builtin_attr::find_builtin_attr_idx(name).map(Self)\n+    }\n+\n+    pub fn name(&self, _: &dyn HirDatabase) -> &str {\n+        // FIXME: Return a `Name` here\n+        hir_def::builtin_attr::INERT_ATTRIBUTES[self.0].name\n+    }\n+\n+    pub fn template(&self, _: &dyn HirDatabase) -> AttributeTemplate {\n+        hir_def::builtin_attr::INERT_ATTRIBUTES[self.0].template\n+    }\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct ToolModule(usize);\n+\n+impl ToolModule {\n+    pub(crate) fn by_name(name: &str) -> Option<Self> {\n+        // FIXME: def maps registered tools\n+        hir_def::builtin_attr::TOOL_MODULES.iter().position(|&tool| tool == name).map(Self)\n+    }\n+\n+    pub fn name(&self, _: &dyn HirDatabase) -> &str {\n+        // FIXME: Return a `Name` here\n+        hir_def::builtin_attr::TOOL_MODULES[self.0]\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct Label {\n     pub(crate) parent: DefWithBodyId,"}, {"sha": "ed1b2f64fd1d155bafbec72a005d2f9082a14c1f", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -25,9 +25,9 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, resolve_hir_path_as_macro, SourceAnalyzer},\n-    Access, AssocItem, Callable, ConstParam, Crate, Field, Function, HasSource, HirFileId, Impl,\n-    InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait,\n-    Type, TypeAlias, TypeParam, VariantDef,\n+    Access, AssocItem, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource,\n+    HirFileId, Impl, InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path,\n+    ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -43,6 +43,8 @@ pub enum PathResolution {\n     SelfType(Impl),\n     Macro(MacroDef),\n     AssocItem(AssocItem),\n+    BuiltinAttr(BuiltinAttr),\n+    ToolModule(ToolModule),\n }\n \n impl PathResolution {\n@@ -63,9 +65,11 @@ impl PathResolution {\n             PathResolution::Def(ModuleDef::TypeAlias(alias)) => {\n                 Some(TypeNs::TypeAliasId((*alias).into()))\n             }\n-            PathResolution::Local(_) | PathResolution::Macro(_) | PathResolution::ConstParam(_) => {\n-                None\n-            }\n+            PathResolution::BuiltinAttr(_)\n+            | PathResolution::ToolModule(_)\n+            | PathResolution::Local(_)\n+            | PathResolution::Macro(_)\n+            | PathResolution::ConstParam(_) => None,\n             PathResolution::TypeParam(param) => Some(TypeNs::GenericParam((*param).into())),\n             PathResolution::SelfType(impl_def) => Some(TypeNs::SelfType((*impl_def).into())),\n             PathResolution::AssocItem(AssocItem::Const(_) | AssocItem::Function(_)) => None,\n@@ -334,10 +338,6 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_path(path)\n     }\n \n-    pub fn resolve_path_as_macro(&self, path: &ast::Path) -> Option<MacroDef> {\n-        self.imp.resolve_path_as_macro(path)\n-    }\n-\n     pub fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n         self.imp.resolve_extern_crate(extern_crate)\n     }\n@@ -860,12 +860,6 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n-    // FIXME: This shouldn't exist, but is currently required to always resolve attribute paths in\n-    // the IDE layer due to namespace collisions\n-    fn resolve_path_as_macro(&self, path: &ast::Path) -> Option<MacroDef> {\n-        self.analyze(path.syntax()).resolve_path_as_macro(self.db, path)\n-    }\n-\n     fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n         let krate = self.scope(extern_crate.syntax()).krate()?;\n         krate.dependencies(self.db).into_iter().find_map(|dep| {"}, {"sha": "762f172c2afdb2a46b06ddb5bbbd412898e1608a", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -29,8 +29,9 @@ use syntax::{\n };\n \n use crate::{\n-    db::HirDatabase, semantics::PathResolution, Adt, BuiltinType, Const, Field, Function, Local,\n-    MacroDef, ModuleDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Variant,\n+    db::HirDatabase, semantics::PathResolution, Adt, BuiltinAttr, BuiltinType, Const, Field,\n+    Function, Local, MacroDef, ModuleDef, Static, Struct, ToolModule, Trait, Type, TypeAlias,\n+    TypeParam, Variant,\n };\n use base_db::CrateId;\n \n@@ -246,24 +247,14 @@ impl SourceAnalyzer {\n         }\n     }\n \n-    pub(crate) fn resolve_path_as_macro(\n-        &self,\n-        db: &dyn HirDatabase,\n-        path: &ast::Path,\n-    ) -> Option<MacroDef> {\n-        // This must be a normal source file rather than macro file.\n-        let hygiene = Hygiene::new(db.upcast(), self.file_id);\n-        let ctx = body::LowerCtx::with_hygiene(db.upcast(), &hygiene);\n-        let hir_path = Path::from_src(path.clone(), &ctx)?;\n-        resolve_hir_path_as_macro(db, &self.resolver, &hir_path)\n-    }\n-\n     pub(crate) fn resolve_path(\n         &self,\n         db: &dyn HirDatabase,\n         path: &ast::Path,\n     ) -> Option<PathResolution> {\n-        let parent = || path.syntax().parent();\n+        let parent = path.syntax().parent();\n+        let parent = || parent.clone();\n+\n         let mut prefer_value_ns = false;\n         if let Some(path_expr) = parent().and_then(ast::PathExpr::cast) {\n             let expr_id = self.expr_id(db, &path_expr.into())?;\n@@ -318,29 +309,62 @@ impl SourceAnalyzer {\n         let ctx = body::LowerCtx::with_hygiene(db.upcast(), &hygiene);\n         let hir_path = Path::from_src(path.clone(), &ctx)?;\n \n-        // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we are\n+        // Case where path is a qualifier of a use tree, e.g. foo::bar::{Baz, Qux} where we are\n         // trying to resolve foo::bar.\n-        if let Some(outer_path) = parent().and_then(ast::Path::cast) {\n-            if let Some(qualifier) = outer_path.qualifier() {\n-                if path == &qualifier {\n+        if let Some(use_tree) = parent().and_then(ast::UseTree::cast) {\n+            if let Some(qualifier) = use_tree.path() {\n+                if path == &qualifier && use_tree.coloncolon_token().is_some() {\n                     return resolve_hir_path_qualifier(db, &self.resolver, &hir_path);\n                 }\n             }\n         }\n-        // Case where path is a qualifier of a use tree, e.g. foo::bar::{Baz, Qux} where we are\n+\n+        let is_path_of_attr = path\n+            .top_path()\n+            .syntax()\n+            .ancestors()\n+            .nth(2) // Path -> Meta -> Attr\n+            .map_or(false, |it| ast::Attr::can_cast(it.kind()));\n+\n+        // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we are\n         // trying to resolve foo::bar.\n-        if let Some(use_tree) = parent().and_then(ast::UseTree::cast) {\n-            if let Some(qualifier) = use_tree.path() {\n-                if path == &qualifier && use_tree.coloncolon_token().is_some() {\n+        if let Some(outer_path) = path.parent_path() {\n+            if let Some(qualifier) = outer_path.qualifier() {\n+                if path == &qualifier {\n                     return resolve_hir_path_qualifier(db, &self.resolver, &hir_path);\n                 }\n             }\n+        } else if is_path_of_attr {\n+            let res = resolve_hir_path_as_macro(db, &self.resolver, &hir_path);\n+            return match res {\n+                Some(_) => res.map(PathResolution::Macro),\n+                None => path.as_single_name_ref().and_then(|name_ref| {\n+                    if let builtin @ Some(_) = BuiltinAttr::by_name(&name_ref.text()) {\n+                        builtin.map(PathResolution::BuiltinAttr)\n+                    } else if let tool @ Some(_) = ToolModule::by_name(&name_ref.text()) {\n+                        tool.map(PathResolution::ToolModule)\n+                    } else {\n+                        None\n+                    }\n+                }),\n+            };\n         }\n \n-        if parent().map_or(false, |it| ast::Visibility::can_cast(it.kind())) {\n+        let res = if parent().map_or(false, |it| ast::Visibility::can_cast(it.kind())) {\n             resolve_hir_path_qualifier(db, &self.resolver, &hir_path)\n         } else {\n             resolve_hir_path_(db, &self.resolver, &hir_path, prefer_value_ns)\n+        };\n+        match res {\n+            Some(_) => res,\n+            // this labels any path that starts with a tool module as the tool itself, this is technically wrong\n+            // but there is no benefit in differentiating these two cases for the time being\n+            None if is_path_of_attr => path\n+                .first_segment()\n+                .and_then(|seg| seg.name_ref())\n+                .and_then(|name_ref| ToolModule::by_name(&name_ref.text()))\n+                .map(PathResolution::ToolModule),\n+            None => None,\n         }\n     }\n "}, {"sha": "3f43111fb1d5726a91ec96f93c1eb01ab71c4dcb", "filename": "crates/hir_def/src/builtin_attr.rs", "status": "modified", "additions": 89, "deletions": 17, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -2,35 +2,100 @@\n //!\n //! The actual definitions were copied from rustc's `compiler/rustc_feature/src/builtin_attrs.rs`.\n //!\n-//! It was last synchronized with upstream commit 835150e70288535bc57bb624792229b9dc94991d.\n+//! It was last synchronized with upstream commit ae90dcf0207c57c3034f00b07048d63f8b2363c8.\n //!\n //! The macros were adjusted to only expand to the attribute name, since that is all we need to do\n //! name resolution, and `BUILTIN_ATTRIBUTES` is almost entirely unchanged from the original, to\n //! ease updating.\n \n+use once_cell::sync::OnceCell;\n+use rustc_hash::FxHashMap;\n+\n /// Ignored attribute namespaces used by tools.\n pub const TOOL_MODULES: &[&str] = &[\"rustfmt\", \"clippy\"];\n \n-type BuiltinAttribute = &'static str;\n+pub struct BuiltinAttribute {\n+    pub name: &'static str,\n+    pub template: AttributeTemplate,\n+}\n+\n+/// A template that the attribute input must match.\n+/// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n+#[derive(Clone, Copy)]\n+pub struct AttributeTemplate {\n+    pub word: bool,\n+    pub list: Option<&'static str>,\n+    pub name_value_str: Option<&'static str>,\n+}\n+\n+pub fn find_builtin_attr_idx(name: &str) -> Option<usize> {\n+    static BUILTIN_LOOKUP_TABLE: OnceCell<FxHashMap<&'static str, usize>> = OnceCell::new();\n+    BUILTIN_LOOKUP_TABLE\n+        .get_or_init(|| {\n+            INERT_ATTRIBUTES.iter().map(|attr| attr.name).enumerate().map(|(a, b)| (b, a)).collect()\n+        })\n+        .get(name)\n+        .copied()\n+}\n+\n+// impl AttributeTemplate {\n+//     const DEFAULT: AttributeTemplate =\n+//         AttributeTemplate { word: false, list: None, name_value_str: None };\n+// }\n+\n+/// A convenience macro for constructing attribute templates.\n+/// E.g., `template!(Word, List: \"description\")` means that the attribute\n+/// supports forms `#[attr]` and `#[attr(description)]`.\n+macro_rules! template {\n+    (Word) => { template!(@ true, None, None) };\n+    (List: $descr: expr) => { template!(@ false, Some($descr), None) };\n+    (NameValueStr: $descr: expr) => { template!(@ false, None, Some($descr)) };\n+    (Word, List: $descr: expr) => { template!(@ true, Some($descr), None) };\n+    (Word, NameValueStr: $descr: expr) => { template!(@ true, None, Some($descr)) };\n+    (List: $descr1: expr, NameValueStr: $descr2: expr) => {\n+        template!(@ false, Some($descr1), Some($descr2))\n+    };\n+    (Word, List: $descr1: expr, NameValueStr: $descr2: expr) => {\n+        template!(@ true, Some($descr1), Some($descr2))\n+    };\n+    (@ $word: expr, $list: expr, $name_value_str: expr) => {\n+        AttributeTemplate {\n+            word: $word, list: $list, name_value_str: $name_value_str\n+        }\n+    };\n+}\n \n macro_rules! ungated {\n     ($attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n-        stringify!($attr)\n+        BuiltinAttribute { name: stringify!($attr), template: $tpl }\n     };\n }\n \n macro_rules! gated {\n-    ($attr:ident $($rest:tt)*) => {\n-        stringify!($attr)\n+    ($attr:ident, $typ:expr, $tpl:expr, $gate:ident, $msg:expr $(,)?) => {\n+        BuiltinAttribute { name: stringify!($attr), template: $tpl }\n+    };\n+    ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+        BuiltinAttribute { name: stringify!($attr), template: $tpl }\n     };\n }\n \n macro_rules! rustc_attr {\n-    (TEST, $attr:ident $($rest:tt)*) => {\n-        stringify!($attr)\n+    (TEST, $attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n+        rustc_attr!(\n+            $attr,\n+            $typ,\n+            $tpl,\n+            concat!(\n+                \"the `#[\",\n+                stringify!($attr),\n+                \"]` attribute is just used for rustc unit tests \\\n+                and will never be stable\",\n+            ),\n+        )\n     };\n-    ($attr:ident $($rest:tt)*) => {\n-        stringify!($attr)\n+    ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+        BuiltinAttribute { name: stringify!($attr), template: $tpl }\n     };\n }\n \n@@ -158,8 +223,8 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     // Plugins:\n     // XXX Modified for use in rust-analyzer\n-    gated!(plugin_registrar),\n-    gated!(plugin),\n+    gated!(plugin_registrar, Normal, template!(Word), experimental!()),\n+    gated!(plugin, CrateLevel, template!(Word), experimental!()),\n \n     // Testing:\n     gated!(allow_fail, Normal, template!(Word), experimental!(allow_fail)),\n@@ -195,6 +260,12 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     gated!(cmse_nonsecure_entry, AssumedUsed, template!(Word), experimental!(cmse_nonsecure_entry)),\n+    // RFC 2632\n+    gated!(\n+        default_method_body_is_const, AssumedUsed, template!(Word), const_trait_impl,\n+        \"`default_method_body_is_const` is a temporary placeholder for declaring default bodies \\\n+        as `const`, which may be removed or renamed in the future.\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n@@ -258,10 +329,6 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     gated!(panic_runtime, AssumedUsed, template!(Word), experimental!(panic_runtime)),\n     gated!(needs_panic_runtime, AssumedUsed, template!(Word), experimental!(needs_panic_runtime)),\n-    gated!(\n-        unwind, AssumedUsed, template!(List: \"allowed|aborts\"), unwind_attributes,\n-        experimental!(unwind),\n-    ),\n     gated!(\n         compiler_builtins, AssumedUsed, template!(Word),\n         \"the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate \\\n@@ -287,7 +354,11 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Macro related:\n     // ==========================================================================\n \n-    rustc_attr!(rustc_builtin_macro, AssumedUsed, template!(Word, NameValueStr: \"name\"), IMPL_DETAIL),\n+    rustc_attr!(\n+        rustc_builtin_macro, AssumedUsed,\n+        template!(Word, List: \"name, /*opt*/ attributes(name1, name2, ...)\"),\n+        IMPL_DETAIL,\n+    ),\n     rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERNAL_UNSTABLE),\n     rustc_attr!(\n         rustc_macro_transparency, AssumedUsed,\n@@ -344,7 +415,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n         lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n         \"language items are subject to change\",\n     ),\n-    gated!(rustc_diagnostic_item), // XXX modified in rust-analyzer\n+    gated!(rustc_diagnostic_item, Normal, template!(NameValueStr: \"name\"), experimental!()), // XXX Modified for use in rust-analyzer\n     gated!(\n         // Used in resolve:\n         prelude_import, AssumedUsed, template!(Word),\n@@ -428,6 +499,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(TEST, rustc_dump_program_clauses, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_dump_env_program_clauses, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_object_lifetime_default, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_dump_vtable, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_dummy, Normal, template!(Word /* doesn't matter*/)),\n     gated!(\n         omit_gdb_pretty_printer_section, AssumedUsed, template!(Word),"}, {"sha": "ad4a4aa752b37e4d4bb320448c9f50f50ba22840", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -1798,14 +1798,18 @@ impl ModCollector<'_, '_> {\n \n             let registered = self.def_collector.registered_tools.iter().map(SmolStr::as_str);\n             let is_tool = builtin_attr::TOOL_MODULES.iter().copied().chain(registered).any(pred);\n+            // FIXME: tool modules can be shadowed by actual modules\n             if is_tool {\n                 return true;\n             }\n \n             if segments.len() == 1 {\n                 let registered = self.def_collector.registered_attrs.iter().map(SmolStr::as_str);\n-                let is_inert =\n-                    builtin_attr::INERT_ATTRIBUTES.iter().copied().chain(registered).any(pred);\n+                let is_inert = builtin_attr::INERT_ATTRIBUTES\n+                    .iter()\n+                    .map(|it| it.name)\n+                    .chain(registered)\n+                    .any(pred);\n                 return is_inert;\n             }\n         }"}, {"sha": "617f63d358283e99bfd50d906a3f121a8b8a00be", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -181,7 +181,9 @@ pub(crate) fn resolve_doc_path_for_def(\n         Definition::TypeAlias(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Macro(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Field(it) => it.resolve_doc_path(db, link, ns),\n-        Definition::BuiltinType(_)\n+        Definition::BuiltinAttr(_)\n+        | Definition::ToolModule(_)\n+        | Definition::BuiltinType(_)\n         | Definition::SelfType(_)\n         | Definition::Local(_)\n         | Definition::GenericParam(_)\n@@ -492,9 +494,11 @@ fn filename_and_frag_for_def(\n             // FIXME fragment numbering\n             return Some((adt, file, Some(String::from(\"impl\"))));\n         }\n-        Definition::Local(_) => return None,\n-        Definition::GenericParam(_) => return None,\n-        Definition::Label(_) => return None,\n+        Definition::Local(_)\n+        | Definition::GenericParam(_)\n+        | Definition::Label(_)\n+        | Definition::BuiltinAttr(_)\n+        | Definition::ToolModule(_) => return None,\n     };\n \n     Some((def, res, None))"}, {"sha": "c493e3e2fb255123faf8e2b6db1db717ae14d58e", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -2,7 +2,7 @@\n use std::fmt::Display;\n \n use either::Either;\n-use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo};\n+use hir::{AsAssocItem, AttributeTemplate, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo};\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::Definition,\n@@ -369,11 +369,32 @@ pub(super) fn definition(\n         }\n         Definition::GenericParam(it) => label_and_docs(db, it),\n         Definition::Label(it) => return Some(Markup::fenced_block(&it.name(db))),\n+        // FIXME: We should be able to show more info about these\n+        Definition::BuiltinAttr(it) => return render_builtin_attr(db, it),\n+        Definition::ToolModule(it) => return Some(Markup::fenced_block(&it.name(db))),\n     };\n \n     markup(docs.filter(|_| config.documentation.is_some()).map(Into::into), label, mod_path)\n }\n \n+fn render_builtin_attr(db: &RootDatabase, attr: hir::BuiltinAttr) -> Option<Markup> {\n+    let name = attr.name(db);\n+    let desc = format!(\"#[{}]\", name);\n+\n+    let AttributeTemplate { word, list, name_value_str } = attr.template(db);\n+    let mut docs = \"Valid forms are:\".to_owned();\n+    if word {\n+        format_to!(docs, \"\\n - #\\\\[{}]\", name);\n+    }\n+    if let Some(list) = list {\n+        format_to!(docs, \"\\n - #\\\\[{}({})]\", name, list);\n+    }\n+    if let Some(name_value_str) = name_value_str {\n+        format_to!(docs, \"\\n - #\\\\[{} = {}]\", name, name_value_str);\n+    }\n+    markup(Some(docs.replace('*', \"\\\\*\")), desc, None)\n+}\n+\n fn label_and_docs<D>(db: &RootDatabase, def: D) -> (String, Option<hir::Documentation>)\n where\n     D: HasAttrs + HirDisplay,"}, {"sha": "f1d7d2791d8ecf402cf14315c89bf61f08dde61c", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -3678,7 +3678,6 @@ fn hover_clippy_lint() {\n \n #[test]\n fn hover_attr_path_qualifier() {\n-    cov_mark::check!(name_ref_classify_attr_path_qualifier);\n     check(\n         r#\"\n //- /foo.rs crate:foo\n@@ -4278,3 +4277,46 @@ pub struct Foo;\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn hover_inert_attr() {\n+    check(\n+        r#\"\n+#[doc$0 = \"\"]\n+pub struct Foo;\n+\"#,\n+        expect![[r##\"\n+            *doc*\n+\n+            ```rust\n+            #[doc]\n+            ```\n+\n+            ---\n+\n+            Valid forms are:\n+\n+            * \\#\\[doc(hidden|inline|...)\\]\n+            * \\#\\[doc = string\\]\n+        \"##]],\n+    );\n+    check(\n+        r#\"\n+#[allow$0()]\n+pub struct Foo;\n+\"#,\n+        expect![[r##\"\n+            *allow*\n+\n+            ```rust\n+            #[allow]\n+            ```\n+\n+            ---\n+\n+            Valid forms are:\n+\n+            * \\#\\[allow(lint1, lint2, ..., /\\*opt\\*/ reason = \"...\")\\]\n+        \"##]],\n+    );\n+}"}, {"sha": "49ff3625caa7de01dcf51056a92a1890c02469ff", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -214,6 +214,8 @@ impl TryToNav for Definition {\n             Definition::Trait(it) => it.try_to_nav(db),\n             Definition::TypeAlias(it) => it.try_to_nav(db),\n             Definition::BuiltinType(_) => None,\n+            Definition::ToolModule(_) => None,\n+            Definition::BuiltinAttr(_) => None,\n         }\n     }\n }"}, {"sha": "77d202cc39c5774998cbaae6fe25221036d55b7f", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -299,6 +299,7 @@ pub func() {\n             r#\"\n //- minicore:derive\n #[rustc_builtin_macro]\n+//^^^^^^^^^^^^^^^^^^^\n pub macro Copy {}\n         //^^^^\n #[derive(Copy)]"}, {"sha": "56e07da0b90085f547debe9f16f0ee0a8898ceb0", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -115,6 +115,7 @@ pub struct HlRange {\n // parameter:: Emitted for non-self function parameters.\n // property:: Emitted for struct and union fields.\n // selfKeyword:: Emitted for the self function parameter and self path-specifier.\n+// toolModule:: Emitted for tool modules.\n // typeParameter:: Emitted for type parameters.\n // unresolvedReference:: Emitted for unresolved references, names that rust-analyzer can't find the definition of.\n // variable:: Emitted for locals, constants and statics."}, {"sha": "34c4ccd4c76a1ea0067af1f85410baa8df41967f", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -208,22 +208,14 @@ fn node(\n             },\n             // Highlight references like the definitions they resolve to\n             ast::NameRef(name_ref) => {\n-                if node.ancestors().any(|it| it.kind() == ATTR) {\n-\n-                    // FIXME: We highlight paths in attributes slightly differently to work around this module\n-                    // currently not knowing about tool attributes and rustc builtin attributes as\n-                    // we do not want to resolve those to functions that may be defined in scope.\n-                    highlight_name_ref_in_attr(sema, name_ref)\n-                } else {\n-                    highlight_name_ref(\n-                        sema,\n-                        krate,\n-                        bindings_shadow_count,\n-                        &mut binding_hash,\n-                        syntactic_name_ref_highlighting,\n-                        name_ref,\n-                    )\n-                }\n+                highlight_name_ref(\n+                    sema,\n+                    krate,\n+                    bindings_shadow_count,\n+                    &mut binding_hash,\n+                    syntactic_name_ref_highlighting,\n+                    name_ref,\n+                )\n             },\n             ast::Lifetime(lifetime) => {\n                 match NameClass::classify_lifetime(sema, &lifetime) {\n@@ -243,28 +235,6 @@ fn node(\n     Some((highlight, binding_hash))\n }\n \n-fn highlight_name_ref_in_attr(sema: &Semantics<RootDatabase>, name_ref: ast::NameRef) -> Highlight {\n-    match NameRefClass::classify(sema, &name_ref) {\n-        Some(name_class) => match name_class {\n-            NameRefClass::Definition(Definition::Module(_))\n-                if name_ref\n-                    .syntax()\n-                    .ancestors()\n-                    .find_map(ast::Path::cast)\n-                    .map_or(false, |it| it.parent_path().is_some()) =>\n-            {\n-                HlTag::Symbol(SymbolKind::Module)\n-            }\n-            NameRefClass::Definition(Definition::Macro(m)) if m.kind() == hir::MacroKind::Attr => {\n-                HlTag::Symbol(SymbolKind::Macro)\n-            }\n-            _ => HlTag::BuiltinAttr,\n-        },\n-        None => HlTag::BuiltinAttr,\n-    }\n-    .into()\n-}\n-\n fn highlight_name_ref(\n     sema: &Semantics<RootDatabase>,\n     krate: Option<hir::Crate>,\n@@ -542,6 +512,8 @@ fn highlight_def(\n             h\n         }\n         Definition::Label(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),\n+        Definition::BuiltinAttr(_) => Highlight::new(HlTag::Symbol(SymbolKind::BuiltinAttr)),\n+        Definition::ToolModule(_) => Highlight::new(HlTag::Symbol(SymbolKind::ToolModule)),\n     };\n \n     let famous_defs = FamousDefs(sema, krate);"}, {"sha": "a3b05ee2633280d3a9d3eeb8c03ab169d32f97ad", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -263,6 +263,8 @@ fn module_def_to_hl_tag(def: Definition) -> HlTag {\n             hir::GenericParam::ConstParam(_) => SymbolKind::ConstParam,\n         },\n         Definition::Label(_) => SymbolKind::Label,\n+        Definition::BuiltinAttr(_) => SymbolKind::BuiltinAttr,\n+        Definition::ToolModule(_) => SymbolKind::ToolModule,\n     };\n     HlTag::Symbol(symbol)\n }"}, {"sha": "3e0a78392a380b677ccf49e257084437681e7e3c", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -20,7 +20,6 @@ pub enum HlTag {\n \n     Attribute,\n     BoolLiteral,\n-    BuiltinAttr,\n     BuiltinType,\n     ByteLiteral,\n     CharLiteral,\n@@ -125,30 +124,31 @@ impl HlTag {\n     fn as_str(self) -> &'static str {\n         match self {\n             HlTag::Symbol(symbol) => match symbol {\n+                SymbolKind::BuiltinAttr => \"builtin_attr\",\n                 SymbolKind::Const => \"constant\",\n-                SymbolKind::Static => \"static\",\n+                SymbolKind::ConstParam => \"const_param\",\n                 SymbolKind::Enum => \"enum\",\n-                SymbolKind::Variant => \"enum_variant\",\n-                SymbolKind::Struct => \"struct\",\n-                SymbolKind::Union => \"union\",\n                 SymbolKind::Field => \"field\",\n+                SymbolKind::Function => \"function\",\n+                SymbolKind::Impl => \"self_type\",\n+                SymbolKind::Label => \"label\",\n+                SymbolKind::LifetimeParam => \"lifetime\",\n+                SymbolKind::Local => \"variable\",\n+                SymbolKind::Macro => \"macro\",\n                 SymbolKind::Module => \"module\",\n+                SymbolKind::SelfParam => \"self_keyword\",\n+                SymbolKind::Static => \"static\",\n+                SymbolKind::Struct => \"struct\",\n+                SymbolKind::ToolModule => \"tool_module\",\n                 SymbolKind::Trait => \"trait\",\n-                SymbolKind::Function => \"function\",\n                 SymbolKind::TypeAlias => \"type_alias\",\n                 SymbolKind::TypeParam => \"type_param\",\n-                SymbolKind::ConstParam => \"const_param\",\n-                SymbolKind::LifetimeParam => \"lifetime\",\n-                SymbolKind::Macro => \"macro\",\n-                SymbolKind::Local => \"variable\",\n-                SymbolKind::Label => \"label\",\n+                SymbolKind::Union => \"union\",\n                 SymbolKind::ValueParam => \"value_param\",\n-                SymbolKind::SelfParam => \"self_keyword\",\n-                SymbolKind::Impl => \"self_type\",\n+                SymbolKind::Variant => \"enum_variant\",\n             },\n             HlTag::Attribute => \"attribute\",\n             HlTag::BoolLiteral => \"bool_literal\",\n-            HlTag::BuiltinAttr => \"builtin_attr\",\n             HlTag::BuiltinType => \"builtin_type\",\n             HlTag::ByteLiteral => \"byte_literal\",\n             HlTag::CharLiteral => \"char_literal\","}, {"sha": "1e778cc61948207fcf682ff80ebf67fda1b38d5f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -72,7 +72,7 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"builtin_attr attribute injected\">allow</span><span class=\"parenthesis attribute injected\">(</span><span class=\"none attribute injected\">unused_mut</span><span class=\"parenthesis attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n+    <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"builtin_attr attribute injected library\">allow</span><span class=\"parenthesis attribute injected\">(</span><span class=\"none attribute injected\">unused_mut</span><span class=\"parenthesis attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"none injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public static\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n@@ -143,12 +143,12 @@\n <span class=\"comment documentation\">///</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">/// </span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"false\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"false\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"attribute attribute\">]</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">///</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```rust\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```rust\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"none injected\">alloc::</span><span class=\"macro injected\">vec!</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>"}, {"sha": "b44fc817c783288b8ccd5739a6c771761109e3e0", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -45,14 +45,14 @@\n         <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>io<span class=\"colon\">:</span><span class=\"colon\">:</span>_print<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>format_args_nl<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span><span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">const_format_args</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">mod</span> <span class=\"module declaration\">panic</span> <span class=\"brace\">{</span>\n@@ -77,12 +77,12 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">std_panic</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">std_panic</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">macro_export</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">panic</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">assert</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">asm</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">toho</span> <span class=\"brace\">{</span>"}, {"sha": "65dfbdf2119a97f556f585e2b1a0fa88def49845", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -54,7 +54,7 @@\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">repr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">packed</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">repr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">packed</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Packed</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">a</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u16</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>"}, {"sha": "370f58080e6bb4379df5b15992961b023f571a13", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -43,15 +43,16 @@\n <pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"module attribute\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"macro attribute\">identity</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">allow</span><span class=\"parenthesis attribute\">(</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"module attribute crate_root library\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"macro attribute library\">identity</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_mut\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_mut\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Fn</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n@@ -86,7 +87,7 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"macro attribute\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"macro attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"macro attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"macro attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>"}, {"sha": "63a1417c6aaa14f169c984ceebd21d4a36eeec24", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -16,6 +16,7 @@ fn test_highlighting() {\n use inner::{self as inner_mod};\n mod inner {}\n \n+#[allow()]\n #[proc_macros::identity]\n pub mod ops {\n     #[lang = \"fn_once\"]"}, {"sha": "b3f404d9053ddd2fd55b96d1979f671fe7b1c18e", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -232,6 +232,7 @@ impl CompletionItemKind {\n     pub(crate) fn tag(&self) -> &'static str {\n         match self {\n             CompletionItemKind::SymbolKind(kind) => match kind {\n+                SymbolKind::BuiltinAttr => \"ba\",\n                 SymbolKind::Const => \"ct\",\n                 SymbolKind::ConstParam => \"cp\",\n                 SymbolKind::Enum => \"en\",\n@@ -246,6 +247,7 @@ impl CompletionItemKind {\n                 SymbolKind::SelfParam => \"sp\",\n                 SymbolKind::Static => \"sc\",\n                 SymbolKind::Struct => \"st\",\n+                SymbolKind::ToolModule => \"tm\",\n                 SymbolKind::Trait => \"tt\",\n                 SymbolKind::TypeAlias => \"ta\",\n                 SymbolKind::TypeParam => \"tp\","}, {"sha": "ef2f0f940f51c3da99a4119da27e891a310db6ed", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -7,9 +7,9 @@\n \n use arrayvec::ArrayVec;\n use hir::{\n-    Adt, AsAssocItem, AssocItem, BuiltinType, Const, Field, Function, GenericParam, HasVisibility,\n-    Impl, ItemInNs, Label, Local, MacroDef, Module, ModuleDef, Name, PathResolution, Semantics,\n-    Static, Trait, TypeAlias, Variant, Visibility,\n+    Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Field, Function, GenericParam,\n+    HasVisibility, Impl, ItemInNs, Label, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n+    Semantics, Static, ToolModule, Trait, TypeAlias, Variant, Visibility,\n };\n use stdx::impl_from;\n use syntax::{\n@@ -37,6 +37,8 @@ pub enum Definition {\n     Local(Local),\n     GenericParam(GenericParam),\n     Label(Label),\n+    BuiltinAttr(BuiltinAttr),\n+    ToolModule(ToolModule),\n }\n \n impl Definition {\n@@ -48,10 +50,9 @@ impl Definition {\n             Some(parent) => parent,\n             None => return Default::default(),\n         };\n+        // resolve derives if possible\n         if let Some(ident) = ast::Ident::cast(token.clone()) {\n-            let attr = parent\n-                .ancestors()\n-                .find_map(ast::TokenTree::cast)\n+            let attr = ast::TokenTree::cast(parent.clone())\n                 .and_then(|tt| tt.parent_meta())\n                 .and_then(|meta| meta.parent_attr());\n             if let Some(attr) = attr {\n@@ -128,7 +129,9 @@ impl Definition {\n             Definition::Local(it) => it.module(db),\n             Definition::GenericParam(it) => it.module(db),\n             Definition::Label(it) => it.module(db),\n-            Definition::BuiltinType(_) => return None,\n+            Definition::BuiltinAttr(_) | Definition::BuiltinType(_) | Definition::ToolModule(_) => {\n+                return None\n+            }\n         };\n         Some(module)\n     }\n@@ -146,7 +149,9 @@ impl Definition {\n             Definition::Variant(it) => it.visibility(db),\n             Definition::BuiltinType(_) => Visibility::Public,\n             Definition::Macro(_) => return None,\n-            Definition::SelfType(_)\n+            Definition::BuiltinAttr(_)\n+            | Definition::ToolModule(_)\n+            | Definition::SelfType(_)\n             | Definition::Local(_)\n             | Definition::GenericParam(_)\n             | Definition::Label(_) => return None,\n@@ -171,6 +176,8 @@ impl Definition {\n             Definition::Local(it) => it.name(db)?,\n             Definition::GenericParam(it) => it.name(db),\n             Definition::Label(it) => it.name(db),\n+            Definition::BuiltinAttr(_) => return None, // FIXME\n+            Definition::ToolModule(_) => return None,  // FIXME\n         };\n         Some(name)\n     }\n@@ -450,30 +457,7 @@ impl NameRefClass {\n                     }\n                 }\n             }\n-            let top_path = path.top_path();\n-            let is_attribute_path = top_path\n-                .syntax()\n-                .ancestors()\n-                .find_map(ast::Attr::cast)\n-                .map(|attr| attr.path().as_ref() == Some(&top_path));\n-            return match is_attribute_path {\n-                Some(true) if path == top_path => sema\n-                    .resolve_path_as_macro(&path)\n-                    .filter(|mac| mac.kind() == hir::MacroKind::Attr)\n-                    .map(Definition::Macro)\n-                    .map(NameRefClass::Definition),\n-                // in case of the path being a qualifier, don't resolve to anything but a module\n-                Some(true) => match sema.resolve_path(&path)? {\n-                    PathResolution::Def(ModuleDef::Module(module)) => {\n-                        cov_mark::hit!(name_ref_classify_attr_path_qualifier);\n-                        Some(NameRefClass::Definition(Definition::Module(module)))\n-                    }\n-                    _ => None,\n-                },\n-                // inside attribute, but our path isn't part of the attribute's path(might be in its expression only)\n-                Some(false) => None,\n-                None => sema.resolve_path(&path).map(Into::into).map(NameRefClass::Definition),\n-            };\n+            return sema.resolve_path(&path).map(Into::into).map(NameRefClass::Definition);\n         }\n \n         let extern_crate = ast::ExternCrate::cast(parent)?;\n@@ -566,6 +550,8 @@ impl From<PathResolution> for Definition {\n             PathResolution::Macro(def) => Definition::Macro(def),\n             PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n             PathResolution::ConstParam(par) => Definition::GenericParam(par.into()),\n+            PathResolution::BuiltinAttr(attr) => Definition::BuiltinAttr(attr),\n+            PathResolution::ToolModule(tool) => Definition::ToolModule(tool),\n         }\n     }\n }"}, {"sha": "67f23536bd8b5cccf3a4fb7525be08c9abab7846", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -145,6 +145,7 @@ fn line_index(db: &dyn LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum SymbolKind {\n+    BuiltinAttr,\n     Const,\n     ConstParam,\n     Enum,\n@@ -159,6 +160,7 @@ pub enum SymbolKind {\n     SelfParam,\n     Static,\n     Struct,\n+    ToolModule,\n     Trait,\n     TypeAlias,\n     TypeParam,"}, {"sha": "1b4f793a507fe4cb41b9a7d085e4c1edd55816f3", "filename": "crates/ide_db/src/path_transform.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fpath_transform.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -164,7 +164,9 @@ impl<'a> Ctx<'a> {\n             | hir::PathResolution::ConstParam(_)\n             | hir::PathResolution::SelfType(_)\n             | hir::PathResolution::Macro(_)\n-            | hir::PathResolution::AssocItem(_) => (),\n+            | hir::PathResolution::AssocItem(_)\n+            | hir::PathResolution::BuiltinAttr(_)\n+            | hir::PathResolution::ToolModule(_) => (),\n         }\n         Some(())\n     }"}, {"sha": "60160f9553e93d66d370ba50cf2904b14c2d71bf", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -115,8 +115,6 @@ impl Definition {\n             Definition::Static(it) => name_range(it, sema),\n             Definition::Trait(it) => name_range(it, sema),\n             Definition::TypeAlias(it) => name_range(it, sema),\n-            Definition::BuiltinType(_) => return None,\n-            Definition::SelfType(_) => return None,\n             Definition::Local(local) => {\n                 let src = local.source(sema.db);\n                 let name = match &src.value {\n@@ -146,6 +144,10 @@ impl Definition {\n                 let lifetime = src.value.lifetime()?;\n                 src.with_value(lifetime.syntax()).original_file_range_opt(sema.db)\n             }\n+            Definition::BuiltinType(_) => return None,\n+            Definition::SelfType(_) => return None,\n+            Definition::BuiltinAttr(_) => return None,\n+            Definition::ToolModule(_) => return None,\n         };\n         return res;\n "}, {"sha": "8e1ccfb397bdbb0106614e1ec6b4b6ce7d248a75", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -65,6 +65,7 @@ define_semantic_token_types![\n     (SELF_KEYWORD, \"selfKeyword\"),\n     (SEMICOLON, \"semicolon\"),\n     (TYPE_ALIAS, \"typeAlias\"),\n+    (TOOL_MODULE, \"toolModule\"),\n     (UNION, \"union\"),\n     (UNRESOLVED_REFERENCE, \"unresolvedReference\"),\n ];"}, {"sha": "579ad22baca1300088f843f92acdce3c4e30eef3", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3289df2aa44a2f33907e6e2abad75fa9787d01/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3f3289df2aa44a2f33907e6e2abad75fa9787d01", "patch": "@@ -50,8 +50,8 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         SymbolKind::Enum => lsp_types::SymbolKind::ENUM,\n         SymbolKind::Variant => lsp_types::SymbolKind::ENUM_MEMBER,\n         SymbolKind::Trait => lsp_types::SymbolKind::INTERFACE,\n-        SymbolKind::Macro => lsp_types::SymbolKind::FUNCTION,\n-        SymbolKind::Module => lsp_types::SymbolKind::MODULE,\n+        SymbolKind::Macro | SymbolKind::BuiltinAttr => lsp_types::SymbolKind::FUNCTION,\n+        SymbolKind::Module | SymbolKind::ToolModule => lsp_types::SymbolKind::MODULE,\n         SymbolKind::TypeAlias | SymbolKind::TypeParam => lsp_types::SymbolKind::TYPE_PARAMETER,\n         SymbolKind::Field => lsp_types::SymbolKind::FIELD,\n         SymbolKind::Static => lsp_types::SymbolKind::CONSTANT,\n@@ -128,6 +128,8 @@ pub(crate) fn completion_item_kind(\n             SymbolKind::Union => lsp_types::CompletionItemKind::STRUCT,\n             SymbolKind::ValueParam => lsp_types::CompletionItemKind::VALUE,\n             SymbolKind::Variant => lsp_types::CompletionItemKind::ENUM_MEMBER,\n+            SymbolKind::BuiltinAttr => lsp_types::CompletionItemKind::FUNCTION,\n+            SymbolKind::ToolModule => lsp_types::CompletionItemKind::MODULE,\n         },\n     }\n }\n@@ -499,10 +501,11 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::TypeAlias => semantic_tokens::TYPE_ALIAS,\n             SymbolKind::Trait => lsp_types::SemanticTokenType::INTERFACE,\n             SymbolKind::Macro => lsp_types::SemanticTokenType::MACRO,\n+            SymbolKind::BuiltinAttr => semantic_tokens::BUILTIN_ATTRIBUTE,\n+            SymbolKind::ToolModule => semantic_tokens::TOOL_MODULE,\n         },\n         HlTag::Attribute => semantic_tokens::ATTRIBUTE,\n         HlTag::BoolLiteral => semantic_tokens::BOOLEAN,\n-        HlTag::BuiltinAttr => semantic_tokens::BUILTIN_ATTRIBUTE,\n         HlTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n         HlTag::ByteLiteral | HlTag::NumericLiteral => lsp_types::SemanticTokenType::NUMBER,\n         HlTag::CharLiteral => semantic_tokens::CHAR,"}]}