{"sha": "5dbddfb210d511af4b1b673c11053074505f11d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYmRkZmIyMTBkNTExYWY0YjFiNjczYzExMDUzMDc0NTA1ZjExZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-21T16:14:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-21T16:14:46Z"}, "message": "Auto merge of #26935 - oli-obk:const_val_description, r=eddyb\n\nr? @eddyb \r\n\r\nAdding new variants is annoying as one needs to modify all these places that **don't** handle the new variant.\r\n\r\nI chose not to use `Display` as I don't think it is appropriate.", "tree": {"sha": "047d55a0c1d9e355ef388f40c28b0374419f94b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/047d55a0c1d9e355ef388f40c28b0374419f94b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dbddfb210d511af4b1b673c11053074505f11d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dbddfb210d511af4b1b673c11053074505f11d2", "html_url": "https://github.com/rust-lang/rust/commit/5dbddfb210d511af4b1b673c11053074505f11d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dbddfb210d511af4b1b673c11053074505f11d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90a36923e5ac3f167236ee99c8abe8122e3b067e", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a36923e5ac3f167236ee99c8abe8122e3b067e", "html_url": "https://github.com/rust-lang/rust/commit/90a36923e5ac3f167236ee99c8abe8122e3b067e"}, {"sha": "441b9940ecc2056f04065f8d08ae7cde8bdae684", "url": "https://api.github.com/repos/rust-lang/rust/commits/441b9940ecc2056f04065f8d08ae7cde8bdae684", "html_url": "https://github.com/rust-lang/rust/commit/441b9940ecc2056f04065f8d08ae7cde8bdae684"}], "stats": {"total": 105, "additions": 51, "deletions": 54}, "files": [{"sha": "58053fbb189b10295e8168ad52194a003f810e83", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5dbddfb210d511af4b1b673c11053074505f11d2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dbddfb210d511af4b1b673c11053074505f11d2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=5dbddfb210d511af4b1b673c11053074505f11d2", "patch": "@@ -271,6 +271,22 @@ pub enum ConstVal {\n     Tuple(ast::NodeId),\n }\n \n+impl ConstVal {\n+    pub fn description(&self) -> &'static str {\n+        match *self {\n+            Float(_) => \"float\",\n+            Int(i) if i < 0 => \"negative integer\",\n+            Int(_) => \"positive integer\",\n+            Uint(_) => \"unsigned integer\",\n+            Str(_) => \"string literal\",\n+            Binary(_) => \"binary array\",\n+            Bool(_) => \"boolean\",\n+            Struct(_) => \"struct\",\n+            Tuple(_) => \"tuple\",\n+        }\n+    }\n+}\n+\n pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<ast::Pat> {\n     let pat = match expr.node {\n         ast::ExprTup(ref exprs) =>\n@@ -350,16 +366,8 @@ pub enum ErrKind {\n     InvalidOpForFloats(ast::BinOp_),\n     InvalidOpForIntUint(ast::BinOp_),\n     InvalidOpForUintInt(ast::BinOp_),\n-    NegateOnString,\n-    NegateOnBoolean,\n-    NegateOnBinary,\n-    NegateOnStruct,\n-    NegateOnTuple,\n-    NotOnFloat,\n-    NotOnString,\n-    NotOnBinary,\n-    NotOnStruct,\n-    NotOnTuple,\n+    NegateOn(ConstVal),\n+    NotOn(ConstVal),\n \n     NegateWithOverflow(i64),\n     AddiWithOverflow(i64, i64),\n@@ -395,16 +403,8 @@ impl ConstEvalErr {\n             InvalidOpForFloats(_) => \"can't do this op on floats\".into_cow(),\n             InvalidOpForIntUint(..) => \"can't do this op on an isize and usize\".into_cow(),\n             InvalidOpForUintInt(..) => \"can't do this op on a usize and isize\".into_cow(),\n-            NegateOnString => \"negate on string\".into_cow(),\n-            NegateOnBoolean => \"negate on boolean\".into_cow(),\n-            NegateOnBinary => \"negate on binary literal\".into_cow(),\n-            NegateOnStruct => \"negate on struct\".into_cow(),\n-            NegateOnTuple => \"negate on tuple\".into_cow(),\n-            NotOnFloat => \"not on float or string\".into_cow(),\n-            NotOnString => \"not on float or string\".into_cow(),\n-            NotOnBinary => \"not on binary literal\".into_cow(),\n-            NotOnStruct => \"not on struct\".into_cow(),\n-            NotOnTuple => \"not on tuple\".into_cow(),\n+            NegateOn(ref const_val) => format!(\"negate on {}\", const_val.description()).into_cow(),\n+            NotOn(ref const_val) => format!(\"not on {}\", const_val.description()).into_cow(),\n \n             NegateWithOverflow(..) => \"attempted to negate with overflow\".into_cow(),\n             AddiWithOverflow(..) => \"attempted to add with overflow\".into_cow(),\n@@ -745,23 +745,15 @@ pub fn eval_const_expr_with_substs<'tcx, S>(tcx: &ty::ctxt<'tcx>,\n           Uint(i) => {\n               try!(const_uint_checked_neg(i, e, expr_uint_type))\n           }\n-          Str(_) => signal!(e, NegateOnString),\n-          Bool(_) => signal!(e, NegateOnBoolean),\n-          Binary(_) => signal!(e, NegateOnBinary),\n-          Tuple(_) => signal!(e, NegateOnTuple),\n-          Struct(..) => signal!(e, NegateOnStruct),\n+          const_val => signal!(e, NegateOn(const_val)),\n         }\n       }\n       ast::ExprUnary(ast::UnNot, ref inner) => {\n         match try!(eval_const_expr_partial(tcx, &**inner, ety)) {\n           Int(i) => Int(!i),\n           Uint(i) => const_uint_not(i, expr_uint_type),\n           Bool(b) => Bool(!b),\n-          Str(_) => signal!(e, NotOnString),\n-          Float(_) => signal!(e, NotOnFloat),\n-          Binary(_) => signal!(e, NotOnBinary),\n-          Tuple(_) => signal!(e, NotOnTuple),\n-          Struct(..) => signal!(e, NotOnStruct),\n+          const_val => signal!(e, NotOn(const_val)),\n         }\n       }\n       ast::ExprBinary(op, ref a, ref b) => {"}, {"sha": "7d79cc4df3d7ad7c763753e53abc48ee31993704", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5dbddfb210d511af4b1b673c11053074505f11d2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dbddfb210d511af4b1b673c11053074505f11d2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5dbddfb210d511af4b1b673c11053074505f11d2", "patch": "@@ -6091,13 +6091,7 @@ impl<'tcx> ctxt<'tcx> {\n                 let found = match val {\n                     ConstVal::Uint(count) => return count as usize,\n                     ConstVal::Int(count) if count >= 0 => return count as usize,\n-                    ConstVal::Int(_) => \"negative integer\",\n-                    ConstVal::Float(_) => \"float\",\n-                    ConstVal::Str(_) => \"string\",\n-                    ConstVal::Bool(_) => \"boolean\",\n-                    ConstVal::Binary(_) => \"binary array\",\n-                    ConstVal::Struct(..) => \"struct\",\n-                    ConstVal::Tuple(_) => \"tuple\"\n+                    const_val => const_val.description(),\n                 };\n                 span_err!(self.sess, count_expr.span, E0306,\n                     \"expected positive integer for repeat count, found {}\","}, {"sha": "7a0623ba44f0240c2713d3dd644ffa5917ad6d77", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5dbddfb210d511af4b1b673c11053074505f11d2/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dbddfb210d511af4b1b673c11053074505f11d2/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=5dbddfb210d511af4b1b673c11053074505f11d2", "patch": "@@ -12,47 +12,58 @@\n \n fn main() {\n     let n = 1;\n-    let a = [0; n]; //~ ERROR expected constant integer for repeat count, found variable\n+    let a = [0; n];\n+    //~^ ERROR expected constant integer for repeat count, found variable [E0307]\n     let b = [0; ()];\n-//~^ ERROR mismatched types\n-//~| expected `usize`\n-//~| found `()`\n-//~| expected usize\n-//~| found ()\n-//~| ERROR expected positive integer for repeat count, found tuple\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`\n+    //~| found `()`\n+    //~| expected usize\n+    //~| found ()) [E0308]\n+    //~| ERROR expected positive integer for repeat count, found tuple [E0306]\n     let c = [0; true];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n     //~| found `bool`\n     //~| expected usize\n-    //~| found bool\n-    //~| ERROR expected positive integer for repeat count, found boolean\n+    //~| found bool) [E0308]\n+    //~| ERROR expected positive integer for repeat count, found boolean [E0306]\n     let d = [0; 0.5];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n     //~| found `_`\n     //~| expected usize\n-    //~| found floating-point variable\n-    //~| ERROR expected positive integer for repeat count, found float\n+    //~| found floating-point variable) [E0308]\n+    //~| ERROR expected positive integer for repeat count, found float [E0306]\n     let e = [0; \"foo\"];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n     //~| found `&'static str`\n     //~| expected usize\n-    //~| found &-ptr\n-    //~| ERROR expected positive integer for repeat count, found string\n+    //~| found &-ptr) [E0308]\n+    //~| ERROR expected positive integer for repeat count, found string literal [E0306]\n     let f = [0; -4_isize];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n     //~| found `isize`\n     //~| expected usize\n-    //~| found isize\n-    //~| ERROR expected positive integer for repeat count, found negative integer\n+    //~| found isize) [E0308]\n+    //~| ERROR expected positive integer for repeat count, found negative integer [E0306]\n     let f = [0_usize; -1_isize];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n     //~| found `isize`\n     //~| expected usize\n-    //~| found isize\n-    //~| ERROR expected positive integer for repeat count, found negative integer\n+    //~| found isize) [E0308]\n+    //~| ERROR expected positive integer for repeat count, found negative integer [E0306]\n+    struct G {\n+        g: (),\n+    }\n+    let g = [0; G { g: () }];\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`\n+    //~| found `main::G`\n+    //~| expected usize\n+    //~| found struct `main::G`) [E0308]\n+    //~| ERROR expected positive integer for repeat count, found struct [E0306]\n }"}]}