{"sha": "2036fdd24f77d607dcfaa24c48fbe85d3f785823", "node_id": "C_kwDOAAsO6NoAKDIwMzZmZGQyNGY3N2Q2MDdkY2ZhYTI0YzQ4ZmJlODVkM2Y3ODU4MjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-27T19:44:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-27T19:44:36Z"}, "message": "Auto merge of #109668 - GuillaumeGomez:rollup-j01if4b, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #109330 (rustdoc: Fix ICE for intra-doc link on intermediate re-export)\n - #109354 (Remove the `NodeId` of `ast::ExprKind::Async`)\n - #109445 (Allow passing the --nocapture flag to compiletest)\n - #109512 (bump `askama_derive` to 0.12.1)\n - #109637 (Add missing needs-asm-support annotation to ui/simple_global_asm.rs)\n - #109666 (Correct ASCII case comment)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5d6ab7f730f13fe9468eb77838a139f4de6bce0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d6ab7f730f13fe9468eb77838a139f4de6bce0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2036fdd24f77d607dcfaa24c48fbe85d3f785823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2036fdd24f77d607dcfaa24c48fbe85d3f785823", "html_url": "https://github.com/rust-lang/rust/commit/2036fdd24f77d607dcfaa24c48fbe85d3f785823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2036fdd24f77d607dcfaa24c48fbe85d3f785823/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd19135b044cd21a9c3ae7ae87620bf41a208066", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd19135b044cd21a9c3ae7ae87620bf41a208066", "html_url": "https://github.com/rust-lang/rust/commit/dd19135b044cd21a9c3ae7ae87620bf41a208066"}, {"sha": "c0dec2bbe35a69fab67d8549280caae5d43527a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0dec2bbe35a69fab67d8549280caae5d43527a7", "html_url": "https://github.com/rust-lang/rust/commit/c0dec2bbe35a69fab67d8549280caae5d43527a7"}], "stats": {"total": 391, "additions": 235, "deletions": 156}, "files": [{"sha": "b07a7a8e5cb5473f09b54ec5556f62965f099471", "filename": "Cargo.lock", "status": "modified", "additions": 47, "deletions": 36, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -149,9 +149,9 @@ dependencies = [\n \n [[package]]\n name = \"askama_derive\"\n-version = \"0.12.0\"\n+version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e80b5ad1afe82872b7aa3e9de9b206ecb85584aa324f0f60fa4c903ce935936b\"\n+checksum = \"c22fbe0413545c098358e56966ff22cdd039e10215ae213cfbd65032b119fc94\"\n dependencies = [\n  \"basic-toml\",\n  \"mime\",\n@@ -160,7 +160,7 @@ dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n  \"serde\",\n- \"syn\",\n+ \"syn 2.0.8\",\n ]\n \n [[package]]\n@@ -590,7 +590,7 @@ checksum = \"d552b2fa341f5fc35c6b917b1d289d3c3a34d0b74e579390ea6192d6152a8cdb\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"synstructure\",\n ]\n \n@@ -702,7 +702,7 @@ dependencies = [\n  \"proc-macro-error\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -715,7 +715,7 @@ dependencies = [\n  \"proc-macro-error\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -757,7 +757,7 @@ dependencies = [\n  \"rustc_tools_util\",\n  \"semver\",\n  \"serde\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"tempfile\",\n  \"termize\",\n  \"tester\",\n@@ -1108,7 +1108,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"6d2301688392eb071b0bf1a37be05c469d3cc4dbbd95df672fe28ab021e6a096\"\n dependencies = [\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -1154,7 +1154,7 @@ version = \"0.1.70\"\n dependencies = [\n  \"itertools\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -1176,7 +1176,7 @@ checksum = \"71f31892cd5c62e414316f2963c5689242c43d8e7bbcaaeca97e5e28c95d91d9\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -1189,7 +1189,7 @@ dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n  \"rustc_version\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -1267,7 +1267,7 @@ checksum = \"3bf95dc3f046b9da4f2d51833c0d3547d8564ef6910f5c1ed130306a75b92886\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -1683,7 +1683,7 @@ checksum = \"6dbd947adfffb0efc70599b3ddcf7b5597bb5fa9e245eb99f62b3a5f7bb8bd3c\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -2530,7 +2530,7 @@ dependencies = [\n  \"markup5ever\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -2619,7 +2619,7 @@ checksum = \"9ddb07844c2ffc4c28840e799e9e54ff054393cf090740decf25624e9d94b93a\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -3089,7 +3089,7 @@ checksum = \"0f1b8c13cb1f814b634a96b2c725449fe7ed464a7b8781de8688be5ffbd3f305\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -3679,7 +3679,7 @@ dependencies = [\n  \"pest_meta\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -3823,7 +3823,7 @@ dependencies = [\n  \"proc-macro-error-attr\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"version_check\",\n ]\n \n@@ -3846,9 +3846,9 @@ checksum = \"dbf0c48bc1d91375ae5c3cd81e3722dff1abcf81a30960240640d223f59fe0e5\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.46\"\n+version = \"1.0.53\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"94e2ef8dbfc347b10c094890f778ee2e36ca9bb4262e86dc99cd217e35f3470b\"\n+checksum = \"ba466839c78239c09faf015484e5cc04860f88242cff4d03eb038f04b4699b73\"\n dependencies = [\n  \"unicode-ident\",\n ]\n@@ -3925,9 +3925,9 @@ checksum = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.21\"\n+version = \"1.0.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179\"\n+checksum = \"4424af4bf778aae2051a77b60283332f386554255d722233d09fbfc7e30da2fc\"\n dependencies = [\n  \"proc-macro2\",\n ]\n@@ -4224,7 +4224,7 @@ dependencies = [\n  \"regex\",\n  \"serde_json\",\n  \"smallvec\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"url\",\n  \"winapi\",\n ]\n@@ -4934,7 +4934,7 @@ dependencies = [\n  \"fluent-syntax\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"synstructure\",\n  \"unic-langid\",\n ]\n@@ -5514,7 +5514,7 @@ dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n  \"serde\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -5684,7 +5684,7 @@ checksum = \"4f1d362ca8fc9c3e3a7484440752472d68a6caa98f1ab81d99b5dfe517cec852\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -6028,7 +6028,7 @@ dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n  \"rustversion\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -6048,6 +6048,17 @@ dependencies = [\n  \"unicode-ident\",\n ]\n \n+[[package]]\n+name = \"syn\"\n+version = \"2.0.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bcc02725fd69ab9f26eab07fad303e2497fad6fb9eba4f96c4d1687bdf704ad9\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n [[package]]\n name = \"synstructure\"\n version = \"0.12.6\"\n@@ -6056,7 +6067,7 @@ checksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"unicode-xid\",\n ]\n \n@@ -6190,7 +6201,7 @@ checksum = \"1fb327af4685e4d03fa8cbcf1716380da910eeb2bb8be417e7f9fd3fb164f36f\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -6387,7 +6398,7 @@ checksum = \"11c75893af559bc8e10716548bdef5cb2b983f8e637db9d0e15126b61b484ee2\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n ]\n \n [[package]]\n@@ -6586,7 +6597,7 @@ checksum = \"1f5cdec05b907f4e2f6843f4354f4ce6a5bebe1a56df320a49134944477ce4d8\"\n dependencies = [\n  \"proc-macro-hack\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"unic-langid-impl\",\n ]\n \n@@ -6834,7 +6845,7 @@ dependencies = [\n  \"once_cell\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"wasm-bindgen-shared\",\n ]\n \n@@ -6856,7 +6867,7 @@ checksum = \"07bc0c051dc5f23e307b13285f9d75df86bfdf816c5721e573dec1f9b8aa193c\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"wasm-bindgen-backend\",\n  \"wasm-bindgen-shared\",\n ]\n@@ -7082,7 +7093,7 @@ checksum = \"ca800d73d6b7a7ee54f2608205c98b549fca71c9500c1abcb3abdc7708b4a8cb\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"synstructure\",\n ]\n \n@@ -7103,7 +7114,7 @@ checksum = \"2e8aa86add9ddbd2409c1ed01e033cd457d79b1b1229b64922c25095c595e829\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"synstructure\",\n ]\n \n@@ -7132,6 +7143,6 @@ checksum = \"2154cb6e2a748163354165e22c6a555effb09ca2d16334767bf66bb404f2206e\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn\",\n+ \"syn 1.0.102\",\n  \"synstructure\",\n ]"}, {"sha": "ab8b7f632e8efeb977e1a635f1d1c1e1894130a8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -1426,13 +1426,9 @@ pub enum ExprKind {\n     Block(P<Block>, Option<Label>),\n     /// An async block (`async move { ... }`).\n     ///\n-    /// The `NodeId` is the `NodeId` for the closure that results from\n-    /// desugaring an async block, just like the NodeId field in the\n-    /// `Async::Yes` variant. This is necessary in order to create a def for the\n-    /// closure which can be used as a parent of any child defs. Defs\n-    /// created during lowering cannot be made the parent of any other\n-    /// preexisting defs.\n-    Async(CaptureBy, NodeId, P<Block>),\n+    /// The async block used to have a `NodeId`, which was removed in favor of\n+    /// using the parent `NodeId` of the parent `Expr`.\n+    Async(CaptureBy, P<Block>),\n     /// An await expression (`my_future.await`).\n     Await(P<Expr>),\n "}, {"sha": "46e46ab575ef7b19d9cc6b571cfc751905eb4ae4", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -1407,8 +1407,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_block(blk);\n             visit_opt(label, |label| vis.visit_label(label));\n         }\n-        ExprKind::Async(_capture_by, node_id, body) => {\n-            vis.visit_id(node_id);\n+        ExprKind::Async(_capture_by, body) => {\n             vis.visit_block(body);\n         }\n         ExprKind::Await(expr) => vis.visit_expr(expr),"}, {"sha": "608f87ab6ebf465ef83640b1cd54e124e33604c0", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -860,7 +860,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);\n         }\n-        ExprKind::Async(_, _, body) => {\n+        ExprKind::Async(_, body) => {\n             visitor.visit_block(body);\n         }\n         ExprKind::Await(expr) => visitor.visit_expr(expr),"}, {"sha": "3247802345b0a56fa86d5da6bcbd1a1440207c11", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -63,20 +63,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::ForLoop(pat, head, body, opt_label) => {\n                     return self.lower_expr_for(e, pat, head, body, *opt_label);\n                 }\n-                // Similarly, async blocks do not use `e.id` but rather `closure_node_id`.\n-                ExprKind::Async(capture_clause, closure_node_id, block) => {\n-                    let hir_id = self.lower_node_id(*closure_node_id);\n-                    self.lower_attrs(hir_id, &e.attrs);\n-                    return self.make_async_expr(\n-                        *capture_clause,\n-                        hir_id,\n-                        *closure_node_id,\n-                        None,\n-                        e.span,\n-                        hir::AsyncGeneratorKind::Block,\n-                        |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n-                    );\n-                }\n                 _ => (),\n             }\n \n@@ -187,6 +173,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.arena.alloc_from_iter(arms.iter().map(|x| self.lower_arm(x))),\n                     hir::MatchSource::Normal,\n                 ),\n+                ExprKind::Async(capture_clause, block) => self.make_async_expr(\n+                    *capture_clause,\n+                    e.id,\n+                    None,\n+                    e.span,\n+                    hir::AsyncGeneratorKind::Block,\n+                    |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n+                ),\n                 ExprKind::Await(expr) => {\n                     let dot_await_span = if expr.span.hi() < e.span.hi() {\n                         let span_with_whitespace = self\n@@ -320,7 +314,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ),\n                 ExprKind::Try(sub_expr) => self.lower_expr_try(e.span, sub_expr),\n \n-                ExprKind::Paren(_) | ExprKind::ForLoop(..) | ExprKind::Async(..) => {\n+                ExprKind::Paren(_) | ExprKind::ForLoop(..) => {\n                     unreachable!(\"already handled\")\n                 }\n \n@@ -591,13 +585,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn make_async_expr(\n         &mut self,\n         capture_clause: CaptureBy,\n-        outer_hir_id: hir::HirId,\n         closure_node_id: NodeId,\n         ret_ty: Option<hir::FnRetTy<'hir>>,\n         span: Span,\n         async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n-    ) -> hir::Expr<'hir> {\n+    ) -> hir::ExprKind<'hir> {\n         let output = ret_ty.unwrap_or_else(|| hir::FnRetTy::DefaultReturn(self.lower_span(span)));\n \n         // Resume argument type: `ResumeTy`\n@@ -644,32 +637,36 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         });\n \n         // `static |_task_context| -> <ret_ty> { body }`:\n-        let generator_kind = {\n-            let c = self.arena.alloc(hir::Closure {\n-                def_id: self.local_def_id(closure_node_id),\n-                binder: hir::ClosureBinder::Default,\n-                capture_clause,\n-                bound_generic_params: &[],\n-                fn_decl,\n-                body,\n-                fn_decl_span: self.lower_span(span),\n-                fn_arg_span: None,\n-                movability: Some(hir::Movability::Static),\n-                constness: hir::Constness::NotConst,\n-            });\n-\n-            hir::ExprKind::Closure(c)\n-        };\n+        hir::ExprKind::Closure(self.arena.alloc(hir::Closure {\n+            def_id: self.local_def_id(closure_node_id),\n+            binder: hir::ClosureBinder::Default,\n+            capture_clause,\n+            bound_generic_params: &[],\n+            fn_decl,\n+            body,\n+            fn_decl_span: self.lower_span(span),\n+            fn_arg_span: None,\n+            movability: Some(hir::Movability::Static),\n+            constness: hir::Constness::NotConst,\n+        }))\n+    }\n \n-        let hir_id = self.lower_node_id(closure_node_id);\n+    /// Forwards a possible `#[track_caller]` annotation from `outer_hir_id` to\n+    /// `inner_hir_id` in case the `closure_track_caller` feature is enabled.\n+    pub(super) fn maybe_forward_track_caller(\n+        &mut self,\n+        span: Span,\n+        outer_hir_id: hir::HirId,\n+        inner_hir_id: hir::HirId,\n+    ) {\n         if self.tcx.features().closure_track_caller\n             && let Some(attrs) = self.attrs.get(&outer_hir_id.local_id)\n             && attrs.into_iter().any(|attr| attr.has_name(sym::track_caller))\n         {\n             let unstable_span =\n                 self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n             self.lower_attrs(\n-                hir_id,\n+                inner_hir_id,\n                 &[Attribute {\n                     kind: AttrKind::Normal(ptr::P(NormalAttr {\n                         item: AttrItem {\n@@ -685,8 +682,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }],\n             );\n         }\n-\n-        hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) }\n     }\n \n     /// Desugar `<expr>.await` into:\n@@ -1001,15 +996,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     None\n                 };\n \n-                this.make_async_expr(\n+                let async_body = this.make_async_expr(\n                     capture_clause,\n-                    closure_hir_id,\n                     inner_closure_id,\n                     async_ret_ty,\n                     body.span,\n                     hir::AsyncGeneratorKind::Closure,\n                     |this| this.with_new_scopes(|this| this.lower_expr_mut(body)),\n-                )\n+                );\n+                let hir_id = this.lower_node_id(inner_closure_id);\n+                this.maybe_forward_track_caller(body.span, closure_hir_id, hir_id);\n+                hir::Expr { hir_id, kind: async_body, span: this.lower_span(body.span) }\n             });\n             body_id\n         });"}, {"sha": "cc879982abce84fb28ac47b9ee6c4cbb6c26ed9b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -1146,7 +1146,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             let async_expr = this.make_async_expr(\n                 CaptureBy::Value,\n-                fn_id,\n                 closure_id,\n                 None,\n                 body.span,\n@@ -1180,7 +1179,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 },\n             );\n \n-            (this.arena.alloc_from_iter(parameters), async_expr)\n+            let hir_id = this.lower_node_id(closure_id);\n+            this.maybe_forward_track_caller(body.span, fn_id, hir_id);\n+            let expr = hir::Expr { hir_id, kind: async_expr, span: this.lower_span(body.span) };\n+\n+            (this.arena.alloc_from_iter(parameters), expr)\n         })\n     }\n "}, {"sha": "776bf54244ed1d4d36dddd494e98ff4efe35b4ae", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -439,7 +439,7 @@ impl<'a> State<'a> {\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n             }\n-            ast::ExprKind::Async(capture_clause, _, blk) => {\n+            ast::ExprKind::Async(capture_clause, blk) => {\n                 self.word_nbsp(\"async\");\n                 self.print_capture_clause(*capture_clause);\n                 // cbox/ibox in analogy to the `ExprKind::Block` arm above"}, {"sha": "c9e3cd486f8553d5b965556047047dbc6d5c83fb", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -287,7 +287,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             // sync with the `rfc-2011-nicer-assert-messages/all-expr-kinds.rs` test.\n             ExprKind::Assign(_, _, _)\n             | ExprKind::AssignOp(_, _, _)\n-            | ExprKind::Async(_, _, _)\n+            | ExprKind::Async(_, _)\n             | ExprKind::Await(_)\n             | ExprKind::Block(_, _)\n             | ExprKind::Break(_, _)"}, {"sha": "65607d71805c38204b9eb363feb940662094bfe0", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -224,8 +224,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n             ast::ExprKind::Closure(box ast::Closure {\n                 asyncness: ast::Async::Yes { closure_id, .. },\n                 ..\n-            })\n-            | ast::ExprKind::Async(_, closure_id, ..) => self.check_id(closure_id),\n+            }) => self.check_id(closure_id),\n             _ => {}\n         }\n     }"}, {"sha": "c4605e63cf39f0f99f63a06b4956e7baa3be316e", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -2911,7 +2911,7 @@ impl<'a> Parser<'a> {\n         self.expect_keyword(kw::Async)?;\n         let capture_clause = self.parse_capture_clause()?;\n         let (attrs, body) = self.parse_inner_attrs_and_block()?;\n-        let kind = ExprKind::Async(capture_clause, DUMMY_NODE_ID, body);\n+        let kind = ExprKind::Async(capture_clause, body);\n         Ok(self.mk_expr_with_attrs(lo.to(self.prev_token.span), kind, attrs))\n     }\n "}, {"sha": "356d7f365fe718fc315b1cc0fd0619cbe5c1368f", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -260,9 +260,7 @@ impl<'a, 'b, 'tcx> visit::Visitor<'a> for DefCollector<'a, 'b, 'tcx> {\n                     Async::No => closure_def,\n                 }\n             }\n-            ExprKind::Async(_, async_id, _) => {\n-                self.create_def(async_id, DefPathData::ClosureExpr, expr.span)\n-            }\n+            ExprKind::Async(_, _) => self.create_def(expr.id, DefPathData::ClosureExpr, expr.span),\n             _ => self.parent_def,\n         };\n "}, {"sha": "9b812bbfc236b1919488d1d8acd92acdfa7ede6b", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -414,7 +414,7 @@ impl isize {\n     }\n }\n \n-/// If 6th bit set ascii is upper case.\n+/// If 6th bit is set ascii is lower case.\n const ASCII_CASE_MASK: u8 = 0b0010_0000;\n \n impl u8 {"}, {"sha": "5f5521caf68b925d2f5b8a8358ea75616997cae2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 58, "deletions": 30, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -32,14 +32,14 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExpnKind};\n \n use std::assert_matches::assert_matches;\n+use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::collections::BTreeMap;\n use std::default::Default;\n use std::hash::Hash;\n use std::mem;\n use thin_vec::ThinVec;\n \n-use crate::clean::inline::merge_attrs;\n use crate::core::{self, DocContext, ImplTraitParam};\n use crate::formats::item_type::ItemType;\n use crate::visit_ast::Module as DocModule;\n@@ -2168,32 +2168,39 @@ impl<'hir> hir::intravisit::Visitor<'hir> for OneLevelVisitor<'hir> {\n /// documentation. Otherwise, we repeat the same operation until we find the \"end item\".\n fn get_all_import_attributes<'hir>(\n     mut item: &hir::Item<'hir>,\n-    tcx: TyCtxt<'hir>,\n+    cx: &mut DocContext<'hir>,\n     target_def_id: LocalDefId,\n-    attributes: &mut Vec<ast::Attribute>,\n     is_inline: bool,\n-) {\n+    mut prev_import: LocalDefId,\n+) -> Vec<(Cow<'hir, ast::Attribute>, Option<DefId>)> {\n+    let mut attributes: Vec<(Cow<'hir, ast::Attribute>, Option<DefId>)> = Vec::new();\n     let mut first = true;\n-    let hir_map = tcx.hir();\n+    let hir_map = cx.tcx.hir();\n     let mut visitor = OneLevelVisitor::new(hir_map, target_def_id);\n     let mut visited = FxHashSet::default();\n \n     // If the item is an import and has at least a path with two parts, we go into it.\n     while let hir::ItemKind::Use(path, _) = item.kind && visited.insert(item.hir_id()) {\n+        let import_parent = cx.tcx.opt_local_parent(prev_import).map(|def_id| def_id.to_def_id());\n         if first {\n             // This is the \"original\" reexport so we get all its attributes without filtering them.\n-            attributes.extend_from_slice(hir_map.attrs(item.hir_id()));\n+            attributes = hir_map.attrs(item.hir_id())\n+                .iter()\n+                .map(|attr| (Cow::Borrowed(attr), import_parent))\n+                .collect::<Vec<_>>();\n             first = false;\n         } else {\n-            add_without_unwanted_attributes(attributes, hir_map.attrs(item.hir_id()), is_inline);\n+            add_without_unwanted_attributes(&mut attributes, hir_map.attrs(item.hir_id()), is_inline, import_parent);\n         }\n \n-        if let Some(i) = visitor.find_target(tcx, item.owner_id.def_id.to_def_id(), path) {\n+        if let Some(i) = visitor.find_target(cx.tcx, item.owner_id.def_id.to_def_id(), path) {\n             item = i;\n         } else {\n             break;\n         }\n+        prev_import = item.owner_id.def_id;\n     }\n+    attributes\n }\n \n fn filter_tokens_from_list(\n@@ -2239,17 +2246,24 @@ fn filter_tokens_from_list(\n /// * `doc(inline)`\n /// * `doc(no_inline)`\n /// * `doc(hidden)`\n-fn add_without_unwanted_attributes(\n-    attrs: &mut Vec<ast::Attribute>,\n-    new_attrs: &[ast::Attribute],\n+fn add_without_unwanted_attributes<'hir>(\n+    attrs: &mut Vec<(Cow<'hir, ast::Attribute>, Option<DefId>)>,\n+    new_attrs: &'hir [ast::Attribute],\n     is_inline: bool,\n+    import_parent: Option<DefId>,\n ) {\n-    // If it's `#[doc(inline)]`, we don't want all attributes, otherwise we keep everything.\n+    // If it's not `#[doc(inline)]`, we don't want all attributes, otherwise we keep everything.\n     if !is_inline {\n-        attrs.extend_from_slice(new_attrs);\n+        for attr in new_attrs {\n+            attrs.push((Cow::Borrowed(attr), import_parent));\n+        }\n         return;\n     }\n     for attr in new_attrs {\n+        if matches!(attr.kind, ast::AttrKind::DocComment(..)) {\n+            attrs.push((Cow::Borrowed(attr), import_parent));\n+            continue;\n+        }\n         let mut attr = attr.clone();\n         match attr.kind {\n             ast::AttrKind::Normal(ref mut normal) => {\n@@ -2276,18 +2290,15 @@ fn add_without_unwanted_attributes(\n                                     )\n                                 });\n                             args.tokens = TokenStream::new(tokens);\n-                            attrs.push(attr);\n+                            attrs.push((Cow::Owned(attr), import_parent));\n                         }\n                         ast::AttrArgs::Empty | ast::AttrArgs::Eq(..) => {\n-                            attrs.push(attr);\n-                            continue;\n+                            attrs.push((Cow::Owned(attr), import_parent));\n                         }\n                     }\n                 }\n             }\n-            ast::AttrKind::DocComment(..) => {\n-                attrs.push(attr);\n-            }\n+            _ => unreachable!(),\n         }\n     }\n }\n@@ -2374,26 +2385,43 @@ fn clean_maybe_renamed_item<'tcx>(\n             _ => unreachable!(\"not yet converted\"),\n         };\n \n-        let mut import_attrs = Vec::new();\n-        let mut target_attrs = Vec::new();\n-        if let Some(import_id) = import_id &&\n+        let attrs = if let Some(import_id) = import_id &&\n             let Some(hir::Node::Item(use_node)) = cx.tcx.hir().find_by_def_id(import_id)\n         {\n-            let is_inline = inline::load_attrs(cx, import_id.to_def_id()).lists(sym::doc).get_word_attr(sym::inline).is_some();\n+            let is_inline = inline::load_attrs(cx, import_id.to_def_id())\n+                .lists(sym::doc)\n+                .get_word_attr(sym::inline)\n+                .is_some();\n             // Then we get all the various imports' attributes.\n-            get_all_import_attributes(use_node, cx.tcx, item.owner_id.def_id, &mut import_attrs, is_inline);\n-            add_without_unwanted_attributes(&mut target_attrs, inline::load_attrs(cx, def_id), is_inline);\n+            let mut attrs = get_all_import_attributes(\n+                use_node,\n+                cx,\n+                item.owner_id.def_id,\n+                is_inline,\n+                import_id,\n+            );\n+\n+            add_without_unwanted_attributes(\n+                &mut attrs,\n+                inline::load_attrs(cx, def_id),\n+                is_inline,\n+                None\n+            );\n+            attrs\n         } else {\n             // We only keep the item's attributes.\n-            target_attrs.extend_from_slice(inline::load_attrs(cx, def_id));\n-        }\n+            inline::load_attrs(cx, def_id).iter().map(|attr| (Cow::Borrowed(attr), None)).collect::<Vec<_>>()\n+        };\n \n-        let import_id = import_id.map(|def_id| def_id.to_def_id());\n-        let (attrs, cfg) =  merge_attrs(cx, &target_attrs, Some((&import_attrs, import_id)));\n+        let cfg = attrs.cfg(cx.tcx, &cx.cache.hidden_cfg);\n+        let attrs = Attributes::from_ast_iter(attrs.iter().map(|(attr, did)| match attr {\n+            Cow::Borrowed(attr) => (*attr, *did),\n+            Cow::Owned(attr) => (attr, *did)\n+        }), false);\n \n         let mut item =\n             Item::from_def_id_and_attrs_and_parts(def_id, Some(name), kind, Box::new(attrs), cfg);\n-        item.inline_stmt_id = import_id;\n+        item.inline_stmt_id = import_id.map(|local| local.to_def_id());\n         vec![item]\n     })\n }"}, {"sha": "9019a6c49ecc59171e48055606f0615874e95836", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -1,3 +1,4 @@\n+use std::borrow::Cow;\n use std::cell::RefCell;\n use std::default::Default;\n use std::hash::Hash;\n@@ -867,30 +868,15 @@ pub(crate) struct Module {\n \n pub(crate) trait AttributesExt {\n     type AttributeIterator<'a>: Iterator<Item = ast::NestedMetaItem>\n+    where\n+        Self: 'a;\n+    type Attributes<'a>: Iterator<Item = &'a ast::Attribute>\n     where\n         Self: 'a;\n \n     fn lists<'a>(&'a self, name: Symbol) -> Self::AttributeIterator<'a>;\n \n-    fn span(&self) -> Option<rustc_span::Span>;\n-\n-    fn cfg(&self, tcx: TyCtxt<'_>, hidden_cfg: &FxHashSet<Cfg>) -> Option<Arc<Cfg>>;\n-}\n-\n-impl AttributesExt for [ast::Attribute] {\n-    type AttributeIterator<'a> = impl Iterator<Item = ast::NestedMetaItem> + 'a;\n-\n-    fn lists<'a>(&'a self, name: Symbol) -> Self::AttributeIterator<'a> {\n-        self.iter()\n-            .filter(move |attr| attr.has_name(name))\n-            .filter_map(ast::Attribute::meta_item_list)\n-            .flatten()\n-    }\n-\n-    /// Return the span of the first doc-comment, if it exists.\n-    fn span(&self) -> Option<rustc_span::Span> {\n-        self.iter().find(|attr| attr.doc_str().is_some()).map(|attr| attr.span)\n-    }\n+    fn iter<'a>(&'a self) -> Self::Attributes<'a>;\n \n     fn cfg(&self, tcx: TyCtxt<'_>, hidden_cfg: &FxHashSet<Cfg>) -> Option<Arc<Cfg>> {\n         let sess = tcx.sess;\n@@ -980,6 +966,43 @@ impl AttributesExt for [ast::Attribute] {\n     }\n }\n \n+impl AttributesExt for [ast::Attribute] {\n+    type AttributeIterator<'a> = impl Iterator<Item = ast::NestedMetaItem> + 'a;\n+    type Attributes<'a> = impl Iterator<Item = &'a ast::Attribute> + 'a;\n+\n+    fn lists<'a>(&'a self, name: Symbol) -> Self::AttributeIterator<'a> {\n+        self.iter()\n+            .filter(move |attr| attr.has_name(name))\n+            .filter_map(ast::Attribute::meta_item_list)\n+            .flatten()\n+    }\n+\n+    fn iter<'a>(&'a self) -> Self::Attributes<'a> {\n+        self.into_iter()\n+    }\n+}\n+\n+impl AttributesExt for [(Cow<'_, ast::Attribute>, Option<DefId>)] {\n+    type AttributeIterator<'a> = impl Iterator<Item = ast::NestedMetaItem> + 'a\n+        where Self: 'a;\n+    type Attributes<'a> = impl Iterator<Item = &'a ast::Attribute> + 'a\n+        where Self: 'a;\n+\n+    fn lists<'a>(&'a self, name: Symbol) -> Self::AttributeIterator<'a> {\n+        AttributesExt::iter(self)\n+            .filter(move |attr| attr.has_name(name))\n+            .filter_map(ast::Attribute::meta_item_list)\n+            .flatten()\n+    }\n+\n+    fn iter<'a>(&'a self) -> Self::Attributes<'a> {\n+        self.into_iter().map(move |(attr, _)| match attr {\n+            Cow::Borrowed(attr) => *attr,\n+            Cow::Owned(attr) => attr,\n+        })\n+    }\n+}\n+\n pub(crate) trait NestedAttributesExt {\n     /// Returns `true` if the attribute list contains a specific `word`\n     fn has_word(self, word: Symbol) -> bool"}, {"sha": "1a896b411ab0691fd78b4614e604bc4826fea8e8", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -1239,8 +1239,9 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n         if let Some(doc) = attrs.collapsed_doc_value() {\n             // Use the outermost invocation, so that doctest names come from where the docs were written.\n             let span = ast_attrs\n-                .span()\n-                .map(|span| span.ctxt().outer_expn().expansion_cause().unwrap_or(span))\n+                .iter()\n+                .find(|attr| attr.doc_str().is_some())\n+                .map(|attr| attr.span.ctxt().outer_expn().expansion_cause().unwrap_or(attr.span))\n                 .unwrap_or(DUMMY_SP);\n             self.collector.set_position(span);\n             markdown::find_testable_code("}, {"sha": "5ac203665d0c02aac644c3cc38e230df8bb246a8", "filename": "src/tools/clippy/clippy_lints/src/redundant_async_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -42,7 +42,7 @@ impl EarlyLintPass for RedundantAsyncBlock {\n         if expr.span.from_expansion() {\n             return;\n         }\n-        if let ExprKind::Async(_, _, block) = &expr.kind && block.stmts.len() == 1 &&\n+        if let ExprKind::Async(_, block) = &expr.kind && block.stmts.len() == 1 &&\n             let Some(Stmt { kind: StmtKind::Expr(last), .. }) = block.stmts.last() &&\n             let ExprKind::Await(future) = &last.kind &&\n             !future.span.from_expansion() &&"}, {"sha": "fab8e9c2ec1c1b6544a7bd2b65639dbd2d2924c4", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -578,7 +578,7 @@ fn ident_difference_expr_with_base_location(\n         | (Assign(_, _, _), Assign(_, _, _))\n         | (TryBlock(_), TryBlock(_))\n         | (Await(_), Await(_))\n-        | (Async(_, _, _), Async(_, _, _))\n+        | (Async(_, _), Async(_, _))\n         | (Block(_, _), Block(_, _))\n         | (Closure(_), Closure(_))\n         | (Match(_, _), Match(_, _))"}, {"sha": "d2dedc20439571958b344682f3cf908a19484195", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -209,7 +209,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n                 && eq_fn_decl(lf, rf)\n                 && eq_expr(le, re)\n         },\n-        (Async(lc, _, lb), Async(rc, _, rb)) => lc == rc && eq_block(lb, rb),\n+        (Async(lc, lb), Async(rc, rb)) => lc == rc && eq_block(lb, rb),\n         (Range(lf, lt, ll), Range(rf, rt, rl)) => ll == rl && eq_expr_opt(lf, rf) && eq_expr_opt(lt, rt),\n         (AddrOf(lbk, lm, le), AddrOf(rbk, rm, re)) => lbk == rbk && lm == rm && eq_expr(le, re),\n         (Path(lq, lp), Path(rq, rp)) => both(lq, rq, eq_qself) && eq_path(lp, rp),"}, {"sha": "28c045f83824b2a506ab68b4ce0dd4ca6b4bec56", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -384,6 +384,8 @@ pub struct Config {\n     pub only_modified: bool,\n \n     pub target_cfg: LazyCell<TargetCfg>,\n+\n+    pub nocapture: bool,\n }\n \n impl Config {"}, {"sha": "bce61c55c3d0a57617bd2542ed2ca064a4191d83", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -152,6 +152,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         )\n         .optflag(\"\", \"force-rerun\", \"rerun tests even if the inputs are unchanged\")\n         .optflag(\"\", \"only-modified\", \"only run tests that result been modified\")\n+        .optflag(\"\", \"nocapture\", \"\")\n         .optflag(\"h\", \"help\", \"show this message\")\n         .reqopt(\"\", \"channel\", \"current Rust channel\", \"CHANNEL\")\n         .optopt(\"\", \"edition\", \"default Rust edition\", \"EDITION\");\n@@ -310,6 +311,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         force_rerun: matches.opt_present(\"force-rerun\"),\n \n         target_cfg: LazyCell::new(),\n+\n+        nocapture: matches.opt_present(\"nocapture\"),\n     }\n }\n \n@@ -502,6 +505,13 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n }\n \n pub fn test_opts(config: &Config) -> test::TestOpts {\n+    if env::var(\"RUST_TEST_NOCAPTURE\").is_ok() {\n+        eprintln!(\n+            \"WARNING: RUST_TEST_NOCAPTURE is no longer used. \\\n+                   Use the `--nocapture` flag instead.\"\n+        );\n+    }\n+\n     test::TestOpts {\n         exclude_should_panic: false,\n         filters: config.filters.clone(),\n@@ -511,10 +521,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         logfile: config.logfile.clone(),\n         run_tests: true,\n         bench_benchmarks: true,\n-        nocapture: match env::var(\"RUST_TEST_NOCAPTURE\") {\n-            Ok(val) => &val != \"0\",\n-            Err(_) => false,\n-        },\n+        nocapture: config.nocapture,\n         color: config.color,\n         shuffle: false,\n         shuffle_seed: None,"}, {"sha": "ac96bedf2fe86ea23ad566997dbe9619657ad87e", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -366,7 +366,7 @@ pub(crate) fn format_expr(\n                 ))\n             }\n         }\n-        ast::ExprKind::Async(capture_by, _node_id, ref block) => {\n+        ast::ExprKind::Async(capture_by, ref block) => {\n             let mover = if capture_by == ast::CaptureBy::Value {\n                 \"move \"\n             } else {"}, {"sha": "0ec8523222fbef9277446022a482d886d7ffd7d4", "filename": "tests/rustdoc-ui/issue-109282-import-inline-merge.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/tests%2Frustdoc-ui%2Fissue-109282-import-inline-merge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/tests%2Frustdoc-ui%2Fissue-109282-import-inline-merge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-109282-import-inline-merge.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/109282>.\n+// Import for `ValueEnum` is inlined and doc comments on the import and `ValueEnum` itself are\n+// merged. After the merge they still have correct parent scopes to resolve both `[ValueEnum]`.\n+\n+// check-pass\n+\n+mod m {\n+    pub enum ValueEnum {}\n+}\n+mod m2 {\n+    /// [`ValueEnum`]\n+    pub use crate::m::ValueEnum;\n+}\n+pub use m2::ValueEnum;"}, {"sha": "c3b2f2e0bc4dd06e4c84fec214d446dbcd32fd32", "filename": "tests/ui/simple_global_asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2036fdd24f77d607dcfaa24c48fbe85d3f785823/tests%2Fui%2Fsimple_global_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2036fdd24f77d607dcfaa24c48fbe85d3f785823/tests%2Fui%2Fsimple_global_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimple_global_asm.rs?ref=2036fdd24f77d607dcfaa24c48fbe85d3f785823", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-asm-support\n \n #![feature(naked_functions)]\n #![allow(dead_code)]"}]}