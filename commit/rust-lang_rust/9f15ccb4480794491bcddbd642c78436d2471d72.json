{"sha": "9f15ccb4480794491bcddbd642c78436d2471d72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMTVjY2I0NDgwNzk0NDkxYmNkZGJkNjQyYzc4NDM2ZDI0NzFkNzI=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-11-22T15:24:58Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-11-22T16:30:45Z"}, "message": "Fix pretty printing unsafe match arms", "tree": {"sha": "10da37c9a040773751904992d9a6c867cdec7237", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10da37c9a040773751904992d9a6c867cdec7237"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f15ccb4480794491bcddbd642c78436d2471d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f15ccb4480794491bcddbd642c78436d2471d72", "html_url": "https://github.com/rust-lang/rust/commit/9f15ccb4480794491bcddbd642c78436d2471d72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f15ccb4480794491bcddbd642c78436d2471d72/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acfdb14044bc5a8320536d19c381fb9c04420e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/acfdb14044bc5a8320536d19c381fb9c04420e3b", "html_url": "https://github.com/rust-lang/rust/commit/acfdb14044bc5a8320536d19c381fb9c04420e3b"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "10de040c048a3aa580d78e2f10053ad9dea80411", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9f15ccb4480794491bcddbd642c78436d2471d72/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f15ccb4480794491bcddbd642c78436d2471d72/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9f15ccb4480794491bcddbd642c78436d2471d72", "patch": "@@ -11,31 +11,25 @@\n pub use self::AnnNode::*;\n \n use abi;\n-use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n+use ast::{mod, FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n use ast::{FnOnceUnboxedClosureKind};\n use ast::{MethodImplItem, RegionTyParamBound, TraitTyParamBound};\n use ast::{RequiredMethod, ProvidedMethod, TypeImplItem, TypeTraitItem};\n use ast::{UnboxedClosureKind};\n-use ast;\n use ast_util;\n use owned_slice::OwnedSlice;\n use attr::{AttrMetaMethods, AttributeMethods};\n-use codemap::{CodeMap, BytePos};\n-use codemap;\n+use codemap::{mod, CodeMap, BytePos};\n use diagnostic;\n-use parse::token::{BinOpToken, Token};\n-use parse::token;\n+use parse::token::{mod, BinOpToken, Token};\n use parse::lexer::comments;\n use parse;\n-use print::pp::{break_offset, word, space, zerobreak, hardbreak};\n+use print::pp::{mod, break_offset, word, space, zerobreak, hardbreak};\n use print::pp::{Breaks, Consistent, Inconsistent, eof};\n-use print::pp;\n use ptr::P;\n \n-use std::ascii;\n-use std::io::IoResult;\n-use std::io;\n-use std::mem;\n+use std::{ascii, mem};\n+use std::io::{mod, IoResult};\n \n pub enum AnnNode<'a> {\n     NodeIdent(&'a ast::Ident),\n@@ -2164,21 +2158,22 @@ impl<'a> State<'a> {\n             try!(self.print_pat(&**p));\n         }\n         try!(space(&mut self.s));\n-        match arm.guard {\n-            Some(ref e) => {\n-                try!(self.word_space(\"if\"));\n-                try!(self.print_expr(&**e));\n-                try!(space(&mut self.s));\n-            }\n-            None => ()\n+        if let Some(ref e) = arm.guard {\n+            try!(self.word_space(\"if\"));\n+            try!(self.print_expr(&**e));\n+            try!(space(&mut self.s));\n         }\n         try!(self.word_space(\"=>\"));\n \n         match arm.body.node {\n             ast::ExprBlock(ref blk) => {\n                 // the block will close the pattern's ibox\n-                try!(self.print_block_unclosed_indent(&**blk,\n-                                                      indent_unit));\n+                try!(self.print_block_unclosed_indent(&**blk, indent_unit));\n+\n+                // If it is a user-provided unsafe block, print a comma after it\n+                if let ast::UnsafeBlock(ast::UserProvided) = blk.rules {\n+                    try!(word(&mut self.s, \",\"));\n+                }\n             }\n             _ => {\n                 try!(self.end()); // close the ibox for the pattern"}]}