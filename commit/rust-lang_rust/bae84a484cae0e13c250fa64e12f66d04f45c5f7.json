{"sha": "bae84a484cae0e13c250fa64e12f66d04f45c5f7", "node_id": "C_kwDOAAsO6NoAKGJhZTg0YTQ4NGNhZTBlMTNjMjUwZmE2NGUxMmY2NmQwNGY0NWM1Zjc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-26T11:21:09Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-10T10:07:35Z"}, "message": "update rustdoc", "tree": {"sha": "b9a9b0cfffc4a72f8ff280e6f153390d7f1dc74f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9a9b0cfffc4a72f8ff280e6f153390d7f1dc74f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae84a484cae0e13c250fa64e12f66d04f45c5f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae84a484cae0e13c250fa64e12f66d04f45c5f7", "html_url": "https://github.com/rust-lang/rust/commit/bae84a484cae0e13c250fa64e12f66d04f45c5f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae84a484cae0e13c250fa64e12f66d04f45c5f7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c8265dc56d221dce7f3535ecf8cdee6b9d2d618", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8265dc56d221dce7f3535ecf8cdee6b9d2d618", "html_url": "https://github.com/rust-lang/rust/commit/6c8265dc56d221dce7f3535ecf8cdee6b9d2d618"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "9a579cb5311642487251b5697021af5532b4dba3", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bae84a484cae0e13c250fa64e12f66d04f45c5f7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae84a484cae0e13c250fa64e12f66d04f45c5f7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=bae84a484cae0e13c250fa64e12f66d04f45c5f7", "patch": "@@ -22,7 +22,7 @@ use crate::clean::{\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n-type Attrs<'hir> = rustc_middle::ty::Attributes<'hir>;\n+type Attrs<'hir> = &'hir [ast::Attribute];\n \n /// Attempt to inline a definition into this AST.\n ///\n@@ -155,7 +155,7 @@ crate fn try_inline_glob(\n }\n \n crate fn load_attrs<'hir>(cx: &DocContext<'hir>, did: DefId) -> Attrs<'hir> {\n-    cx.tcx.get_attrs(did)\n+    cx.tcx.get_attrs_unchecked(did)\n }\n \n /// Record an external fully qualified name in the external_paths cache.\n@@ -691,7 +691,7 @@ crate fn record_extern_trait(cx: &mut DocContext<'_>, did: DefId) {\n \n     let trait_ = clean::TraitWithExtraInfo {\n         trait_,\n-        is_notable: clean::utils::has_doc_flag(cx.tcx.get_attrs(did), sym::notable_trait),\n+        is_notable: clean::utils::has_doc_flag(cx.tcx, did, sym::notable_trait),\n     };\n     cx.external_traits.borrow_mut().insert(did, trait_);\n     cx.active_extern_traits.remove(&did);"}, {"sha": "456d860f12559d4832c5df65e9d0121bafa127d1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bae84a484cae0e13c250fa64e12f66d04f45c5f7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae84a484cae0e13c250fa64e12f66d04f45c5f7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=bae84a484cae0e13c250fa64e12f66d04f45c5f7", "patch": "@@ -211,8 +211,8 @@ impl ExternalCrate {\n         // Failing that, see if there's an attribute specifying where to find this\n         // external crate\n         let did = self.crate_num.as_def_id();\n-        tcx.get_attrs(did)\n-            .lists(sym::doc)\n+        tcx.get_attrs(did, sym::doc)\n+            .flat_map(|attr| attr.meta_item_list().unwrap_or_default())\n             .filter(|a| a.has_name(sym::html_root_url))\n             .filter_map(|a| a.value_str())\n             .map(to_remote)\n@@ -226,11 +226,13 @@ impl ExternalCrate {\n \n         let as_keyword = |res: Res<!>| {\n             if let Res::Def(DefKind::Mod, def_id) = res {\n-                let attrs = tcx.get_attrs(def_id);\n                 let mut keyword = None;\n-                for attr in attrs.lists(sym::doc) {\n-                    if attr.has_name(sym::keyword) {\n-                        if let Some(v) = attr.value_str() {\n+                let meta_items = tcx\n+                    .get_attrs(def_id, sym::doc)\n+                    .flat_map(|attr| attr.meta_item_list().unwrap_or_default());\n+                for meta in meta_items {\n+                    if meta.has_name(sym::keyword) {\n+                        if let Some(v) = meta.value_str() {\n                             keyword = Some(v);\n                             break;\n                         }\n@@ -288,11 +290,13 @@ impl ExternalCrate {\n         // rendering by delegating everything to a hash map.\n         let as_primitive = |res: Res<!>| {\n             if let Res::Def(DefKind::Mod, def_id) = res {\n-                let attrs = tcx.get_attrs(def_id);\n                 let mut prim = None;\n-                for attr in attrs.lists(sym::doc) {\n-                    if let Some(v) = attr.value_str() {\n-                        if attr.has_name(sym::primitive) {\n+                let meta_items = tcx\n+                    .get_attrs(def_id, sym::doc)\n+                    .flat_map(|attr| attr.meta_item_list().unwrap_or_default());\n+                for meta in meta_items {\n+                    if let Some(v) = meta.value_str() {\n+                        if meta.has_name(sym::primitive) {\n                             prim = PrimitiveType::from_symbol(v);\n                             if prim.is_some() {\n                                 break;\n@@ -413,7 +417,10 @@ impl Item {\n     }\n \n     crate fn inner_docs(&self, tcx: TyCtxt<'_>) -> bool {\n-        self.item_id.as_def_id().map(|did| tcx.get_attrs(did).inner_docs()).unwrap_or(false)\n+        self.item_id\n+            .as_def_id()\n+            .map(|did| tcx.get_attrs_unchecked(did).inner_docs())\n+            .unwrap_or(false)\n     }\n \n     crate fn span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -464,7 +471,7 @@ impl Item {\n         kind: ItemKind,\n         cx: &mut DocContext<'_>,\n     ) -> Item {\n-        let ast_attrs = cx.tcx.get_attrs(def_id);\n+        let ast_attrs = cx.tcx.get_attrs_unchecked(def_id);\n \n         Self::from_def_id_and_attrs_and_parts(\n             def_id,"}, {"sha": "c67b92df6431f72eb610b2529375e74729382cb8", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bae84a484cae0e13c250fa64e12f66d04f45c5f7/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae84a484cae0e13c250fa64e12f66d04f45c5f7/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=bae84a484cae0e13c250fa64e12f66d04f45c5f7", "patch": "@@ -474,10 +474,9 @@ crate fn find_nearest_parent_module(tcx: TyCtxt<'_>, def_id: DefId) -> Option<De\n ///\n /// This function exists because it runs on `hir::Attributes` whereas the other is a\n /// `clean::Attributes` method.\n-crate fn has_doc_flag(attrs: ty::Attributes<'_>, flag: Symbol) -> bool {\n-    attrs.iter().any(|attr| {\n-        attr.has_name(sym::doc)\n-            && attr.meta_item_list().map_or(false, |l| rustc_attr::list_contains_name(&l, flag))\n+crate fn has_doc_flag(tcx: TyCtxt<'_>, did: DefId, flag: Symbol) -> bool {\n+    tcx.get_attrs(did, sym::doc).any(|attr| {\n+        attr.meta_item_list().map_or(false, |l| rustc_attr::list_contains_name(&l, flag))\n     })\n }\n "}, {"sha": "4951cd83af207a3635d1aa4c6c7a10d0bce8663b", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bae84a484cae0e13c250fa64e12f66d04f45c5f7/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae84a484cae0e13c250fa64e12f66d04f45c5f7/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=bae84a484cae0e13c250fa64e12f66d04f45c5f7", "patch": "@@ -323,7 +323,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n \n             clean::ImportItem(ref import) => {\n                 let (stab, stab_tags) = if let Some(import_def_id) = import.source.did {\n-                    let ast_attrs = cx.tcx().get_attrs(import_def_id);\n+                    let ast_attrs = cx.tcx().get_attrs_unchecked(import_def_id);\n                     let import_attrs = Box::new(clean::Attributes::from_ast(ast_attrs, None));\n \n                     // Just need an item with the correct def_id and attrs"}, {"sha": "3b7ca7dc3c5193bd2551f33ba1a34bddd00bf961", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bae84a484cae0e13c250fa64e12f66d04f45c5f7/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae84a484cae0e13c250fa64e12f66d04f45c5f7/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=bae84a484cae0e13c250fa64e12f66d04f45c5f7", "patch": "@@ -53,9 +53,7 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n             while let Some(did) = parent {\n                 attr_buf.extend(\n                     cx.tcx\n-                        .get_attrs(did)\n-                        .iter()\n-                        .filter(|attr| attr.has_name(sym::doc))\n+                        .get_attrs(did, sym::doc)\n                         .filter(|attr| {\n                             if let Some([attr]) = attr.meta_item_list().as_deref() {\n                                 attr.has_name(sym::cfg)"}]}