{"sha": "549c105bb365e14cb132b29a94126715158c5cfa", "node_id": "C_kwDOAAsO6NoAKDU0OWMxMDViYjM2NWUxNGNiMTMyYjI5YTk0MTI2NzE1MTU4YzVjZmE", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-06-28T21:02:30Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-12T23:55:56Z"}, "message": "dyn* through more typechecking and MIR", "tree": {"sha": "3d91612e22e9af455678f03f795f50d1e928ec16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d91612e22e9af455678f03f795f50d1e928ec16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/549c105bb365e14cb132b29a94126715158c5cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/549c105bb365e14cb132b29a94126715158c5cfa", "html_url": "https://github.com/rust-lang/rust/commit/549c105bb365e14cb132b29a94126715158c5cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/549c105bb365e14cb132b29a94126715158c5cfa/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe", "html_url": "https://github.com/rust-lang/rust/commit/7fccac3ea0db7cbbb1b84ff4ab824f8d85f415fe"}], "stats": {"total": 181, "additions": 168, "deletions": 13}, "files": [{"sha": "c78f9282e307a3c19e860dff5b4eb35e0b83c142", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -30,8 +30,9 @@ use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef, UserSubsts};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n-    self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, OpaqueHiddenType,\n-    OpaqueTypeKey, RegionVid, ToPredicate, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n+    self, Binder, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, Dynamic,\n+    OpaqueHiddenType, OpaqueTypeKey, RegionVid, ToPredicate, TraitObjectRepresentation, Ty, TyCtxt,\n+    UserType, UserTypeAnnotationIndex,\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n@@ -2009,6 +2010,38 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         );\n                     }\n \n+                    CastKind::DynStar => {\n+                        // get the constraints from the target type (`dyn* Clone`)\n+                        //\n+                        // apply them to prove that the source type `Foo` implements `Clone` etc\n+                        let (existential_predicates, region) = match ty.kind() {\n+                            Dynamic(predicates, region, TraitObjectRepresentation::Sized) => {\n+                                (predicates, region)\n+                            }\n+                            _ => panic!(\"Invalid dyn* cast_ty\"),\n+                        };\n+\n+                        let self_ty = op.ty(body, tcx);\n+\n+                        self.prove_predicates(\n+                            existential_predicates\n+                                .iter()\n+                                .map(|predicate| predicate.with_self_ty(tcx, self_ty)),\n+                            location.to_locations(),\n+                            ConstraintCategory::Cast,\n+                        );\n+\n+                        let outlives_predicate =\n+                            tcx.mk_predicate(Binder::dummy(ty::PredicateKind::TypeOutlives(\n+                                ty::OutlivesPredicate(self_ty, *region),\n+                            )));\n+                        self.prove_predicate(\n+                            outlives_predicate,\n+                            location.to_locations(),\n+                            ConstraintCategory::Cast,\n+                        );\n+                    }\n+\n                     CastKind::Pointer(PointerCast::MutToConstPointer) => {\n                         let ty::RawPtr(ty::TypeAndMut {\n                             ty: ty_from,"}, {"sha": "fb75ecc17356b5b879aad8bd1b6bfa2dbba70889", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -16,7 +16,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, AssertKind, SwitchTargets};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n-use rustc_middle::ty::{self, Instance, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, Ty, TypeVisitable, TraitObjectRepresentation};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n use rustc_symbol_mangling::typeid::typeid_for_fnabi;\n@@ -367,6 +367,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx.ret(llval);\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self, helper, bx))]\n     fn codegen_drop_terminator(\n         &mut self,\n         helper: TerminatorCodegenHelper<'tcx>,\n@@ -397,20 +398,61 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let (drop_fn, fn_abi) = match ty.kind() {\n             // FIXME(eddyb) perhaps move some of this logic into\n             // `Instance::resolve_drop_in_place`?\n-            ty::Dynamic(..) => {\n+            ty::Dynamic(_, _, TraitObjectRepresentation::Unsized) => {\n+                // IN THIS ARM, WE HAVE:\n+                // ty = *mut (dyn Trait)\n+                // which is: exists<T> ( *mut T,    Vtable<T: Trait> )\n+                //                       args[0]    args[1]\n+                //\n+                // args = ( Data, Vtable )\n+                //                  |\n+                //                  v\n+                //                /-------\\\n+                //                | ...   |\n+                //                \\-------/\n+                //\n                 let virtual_drop = Instance {\n                     def: ty::InstanceDef::Virtual(drop_fn.def_id(), 0),\n                     substs: drop_fn.substs,\n                 };\n+                debug!(\"ty = {:?}\", ty);\n+                debug!(\"drop_fn = {:?}\", drop_fn);\n+                debug!(\"args = {:?}\", args);\n                 let fn_abi = bx.fn_abi_of_instance(virtual_drop, ty::List::empty());\n                 let vtable = args[1];\n+                // Truncate vtable off of args list\n                 args = &args[..1];\n                 (\n                     meth::VirtualIndex::from_index(ty::COMMON_VTABLE_ENTRIES_DROPINPLACE)\n                         .get_fn(&mut bx, vtable, ty, &fn_abi),\n                     fn_abi,\n                 )\n             }\n+            ty::Dynamic(_, _, TraitObjectRepresentation::Sized) => {\n+                // IN THIS ARM, WE HAVE:\n+                // ty = *mut (dyn* Trait)\n+                // which is: *mut exists<T: sizeof(T) == sizeof(usize)> (T, Vtable<T: Trait>)\n+                //\n+                // args = [ * ]\n+                //          |\n+                //          v\n+                //      ( Data, Vtable )\n+                //                |\n+                //                v\n+                //              /-------\\\n+                //              | ...   |\n+                //              \\-------/\n+                //\n+                //\n+                // WE CAN CONVERT THIS INTO THE ABOVE LOGIC BY DOING\n+                //\n+                // data = &(*args[0]).0    // gives a pointer to Data above (really the same pointer)\n+                // vtable = (*args[0]).1   // loads the vtable out\n+                // (data, vtable)          // an equivalent Rust `*mut dyn Trait`\n+                //\n+                // SO THEN WE CAN USE THE ABOVE CODE.\n+                todo!()\n+            }\n             _ => (bx.get_fn_addr(drop_fn), bx.fn_abi_of_instance(drop_fn, ty::List::empty())),\n         };\n         helper.do_call("}, {"sha": "d3c6b731de3349a186d7d7b098e066c13a6f7097", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -271,6 +271,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             bug!(\"unexpected non-pair operand\");\n                         }\n                     }\n+                    #[allow(unreachable_code, unused)] // FIXME: remove this\n+                    mir::CastKind::DynStar => {\n+                        let data = match operand.val {\n+                            OperandValue::Ref(_, _, _) => todo!(),\n+                            OperandValue::Immediate(_) => todo!(),\n+                            OperandValue::Pair(_, _) => todo!(),\n+                        };\n+                        let vtable = todo!();\n+                        OperandValue::Pair(data, vtable)\n+                    }\n                     mir::CastKind::Pointer(\n                         PointerCast::MutToConstPointer | PointerCast::ArrayToPointer,\n                     )"}, {"sha": "9beeb2d8b2c7ea9cc60e587f65dc1cd3025c9eba", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -108,6 +108,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     _ => span_bug!(self.cur_span(), \"closure fn pointer on {:?}\", src.layout.ty),\n                 }\n             }\n+\n+            DynStar => {\n+                unimplemented!()\n+            }\n         }\n         Ok(())\n     }"}, {"sha": "7e15858c8c188ee690f54aba5891b4682b7ed5de", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -546,6 +546,10 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 // Since no pointer can ever get exposed (rejected above), this is easy to support.\n             }\n \n+            Rvalue::Cast(CastKind::DynStar, _, _) => {\n+                unimplemented!()\n+            }\n+\n             Rvalue::Cast(CastKind::Misc, _, _) => {}\n \n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}"}, {"sha": "1c4c7e7079d6495299827d226c237fe9d1e24d27", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -569,6 +569,9 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                             );\n                         }\n                     }\n+                    CastKind::DynStar => {\n+                        // FIXME: make sure nothing needs to be done here.\n+                    }\n                     // Nothing to check here\n                     CastKind::PointerFromExposedAddress\n                     | CastKind::PointerExposeAddress"}, {"sha": "47e62e82ac4aacc30038f68f828b4b937025e049", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -1834,6 +1834,7 @@ impl<'tcx> Rvalue<'tcx> {\n             // While the model is undecided, we should be conservative. See\n             // <https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html>\n             Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => false,\n+            Rvalue::Cast(CastKind::DynStar, _, _) => false,\n \n             Rvalue::Use(_)\n             | Rvalue::CopyForDeref(_)"}, {"sha": "d2bb897b5b676d9515aa66dc4f68540633bf40b0", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -1139,6 +1139,8 @@ pub enum CastKind {\n     /// All sorts of pointer-to-pointer casts. Note that reference-to-raw-ptr casts are\n     /// translated into `&raw mut/const *r`, i.e., they are not actually casts.\n     Pointer(PointerCast),\n+    /// Cast into a dyn* object.\n+    DynStar,\n     /// Remaining unclassified casts.\n     Misc,\n }"}, {"sha": "cc5381b467d780fd6c5dd8b0b80f935063bb0622", "filename": "compiler/rustc_middle/src/ty/cast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -4,6 +4,7 @@\n use crate::ty::{self, Ty};\n \n use rustc_macros::HashStable;\n+use rustc_type_ir::TraitObjectRepresentation;\n \n /// Types that are represented as ints.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -33,6 +34,8 @@ pub enum CastTy<'tcx> {\n     FnPtr,\n     /// Raw pointers.\n     Ptr(ty::TypeAndMut<'tcx>),\n+    /// Casting into a `dyn*` value.\n+    DynStar,\n }\n \n /// Cast Kind. See [RFC 401](https://rust-lang.github.io/rfcs/0401-coercions.html)\n@@ -50,6 +53,7 @@ pub enum CastKind {\n     ArrayPtrCast,\n     FnPtrPtrCast,\n     FnPtrAddrCast,\n+    DynStarCast,\n }\n \n impl<'tcx> CastTy<'tcx> {\n@@ -67,6 +71,7 @@ impl<'tcx> CastTy<'tcx> {\n             ty::Adt(d, _) if d.is_enum() && d.is_payloadfree() => Some(CastTy::Int(IntTy::CEnum)),\n             ty::RawPtr(mt) => Some(CastTy::Ptr(mt)),\n             ty::FnPtr(..) => Some(CastTy::FnPtr),\n+            ty::Dynamic(_, _, TraitObjectRepresentation::Sized) => Some(CastTy::DynStar),\n             _ => None,\n         }\n     }"}, {"sha": "2e68b96f87bc6af1a032435e74e4103a87697fff", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -21,6 +21,7 @@ use rustc_target::abi::call::{\n };\n use rustc_target::abi::*;\n use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec, PanicStrategy, Target};\n+use rustc_type_ir::TraitObjectRepresentation;\n \n use std::cmp::{self, Ordering};\n use std::fmt;\n@@ -625,6 +626,14 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 tcx.intern_layout(self.scalar_pair(data_ptr, metadata))\n             }\n \n+            ty::Dynamic(_, _, TraitObjectRepresentation::Sized) => {\n+                let mut pointer = scalar_unit(Pointer);\n+                pointer.valid_range_mut().start = 1;\n+                let mut vtable = scalar_unit(Pointer);\n+                vtable.valid_range_mut().start = 1;\n+                tcx.intern_layout(self.scalar_pair(pointer, vtable))\n+            }\n+\n             // Arrays and slices.\n             ty::Array(element, mut count) => {\n                 if count.has_projections() {\n@@ -679,7 +688,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n             // Odd unit types.\n             ty::FnDef(..) => univariant(&[], &ReprOptions::default(), StructKind::AlwaysSized)?,\n-            ty::Dynamic(..) | ty::Foreign(..) => {\n+            ty::Dynamic(_, _, TraitObjectRepresentation::Unsized) | ty::Foreign(..) => {\n                 let mut unit = self.univariant_uninterned(\n                     ty,\n                     &[],\n@@ -2435,7 +2444,9 @@ where\n                 | ty::FnDef(..)\n                 | ty::GeneratorWitness(..)\n                 | ty::Foreign(..)\n-                | ty::Dynamic(..) => bug!(\"TyAndLayout::field({:?}): not applicable\", this),\n+                | ty::Dynamic(_, _, TraitObjectRepresentation::Unsized) => {\n+                    bug!(\"TyAndLayout::field({:?}): not applicable\", this)\n+                }\n \n                 // Potentially-fat pointers.\n                 ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n@@ -2534,6 +2545,17 @@ where\n                     }\n                 }\n \n+                // dyn*\n+                ty::Dynamic(_, _, TraitObjectRepresentation::Sized) => {\n+                    TyMaybeWithLayout::TyAndLayout(\n+                        tcx.layout_of(\n+                            ty::ParamEnv::reveal_all()\n+                                .and(tcx.mk_tup([tcx.types.usize, tcx.types.usize].into_iter())),\n+                        )\n+                        .unwrap(),\n+                    )\n+                }\n+\n                 ty::Projection(_)\n                 | ty::Bound(..)\n                 | ty::Placeholder(..)"}, {"sha": "b4418ef9aa0f6d2e32e364b74f8666fee0d3ae99", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -1113,6 +1113,12 @@ pub trait ToPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n }\n \n+impl<'tcx> ToPredicate<'tcx> for Predicate<'tcx> {\n+    fn to_predicate(self, _tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        self\n+    }\n+}\n+\n impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {"}, {"sha": "f9394564f0eb17165e85b6ab42b977c2c1faf5bc", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -216,13 +216,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n                 let from_ty = CastTy::from_ty(ty);\n                 let cast_ty = CastTy::from_ty(expr.ty);\n+                debug!(\n+                    \"ExprKind::Cast from_ty={from_ty:?}, cast_ty={:?}/{cast_ty:?}\",\n+                     expr.ty,\n+                );\n                 let cast_kind = match (from_ty, cast_ty) {\n                     (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n                         CastKind::PointerExposeAddress\n                     }\n                     (Some(CastTy::Int(_)), Some(CastTy::Ptr(_))) => {\n                         CastKind::PointerFromExposedAddress\n                     }\n+                    (_, Some(CastTy::DynStar)) => CastKind::DynStar,\n                     (_, _) => CastKind::Misc,\n                 };\n                 block.and(Rvalue::Cast(cast_kind, source, expr.ty))"}, {"sha": "1248d5c8426ae968893c06d313748923971c8991", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -928,6 +928,12 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             (Int(Char) | Int(Bool), Int(_)) => Ok(CastKind::PrimIntCast),\n \n             (Int(_) | Float, Int(_) | Float) => Ok(CastKind::NumericCast),\n+\n+            // FIXME: this needs more conditions...\n+            (_, DynStar) => Ok(CastKind::DynStarCast),\n+\n+            // FIXME: do we want to allow dyn* upcasting or other casts?\n+            (DynStar, _) => Err(CastError::IllegalCast),\n         }\n     }\n "}, {"sha": "c4861de3606c72581367a7bc13935149e898b1bf", "filename": "src/test/ui/async-await/dyn-star-trait-const.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-const.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+// ignore-test\n+#![feature(async_fn_in_traits)]\n+\n+use std::fmt::Debug;\n+\n+fn make_dyn_star() {\n+    let i = 42usize;\n+    let dyn_i: dyn* Debug = i as dyn* Debug;\n+}\n+\n+fn main() {\n+    make_dyn_star();\n+}"}, {"sha": "593a4509f7d53c5afbcac8bb34e049d3245ca492", "filename": "src/test/ui/dyn-star/make-dyn-star.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/549c105bb365e14cb132b29a94126715158c5cfa/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549c105bb365e14cb132b29a94126715158c5cfa/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs?ref=549c105bb365e14cb132b29a94126715158c5cfa", "patch": "@@ -1,14 +1,12 @@\n-// check-pass\n+// run-pass\n #![feature(dyn_star)]\n \n use std::fmt::Debug;\n \n-pub fn dyn_star_parameter(_: dyn* Send) {\n-}\n-\n-fn make_dyn_star() {\n-    let i = 42usize;\n+fn make_dyn_star(i: usize) {\n     let dyn_i: dyn* Debug = i as dyn* Debug;\n }\n \n-fn main() {}\n+fn main() {\n+    make_dyn_star(42);\n+}"}]}