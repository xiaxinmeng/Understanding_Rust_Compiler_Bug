{"sha": "11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea", "node_id": "C_kwDOAAsO6NoAKDExZGU1MmE0NmRkOWIyZjZlMmQyNzk3ZDYwZGZjOTc3ZThiNmJjZWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-16T23:45:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-16T23:45:53Z"}, "message": "Rollup merge of #105780 - GuillaumeGomez:read-more-links, r=notriddle\n\nrustdoc: Don't add \"Read more\" link if there is no extra content\n\nFixes #105677.", "tree": {"sha": "e069476f6072ad903c1a5c14b335c7e822e31b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e069476f6072ad903c1a5c14b335c7e822e31b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjnQMxCRBK7hj4Ov3rIwAAfUwIAFeIXBVvjW9yfIae4FYVHe5u\nqBaasKjG/89rXiekoTQB7VwQbl5P3TZwMLSd6twq2ZrLHf+DqX2XWBZw7XUN6+CB\nHILsXcr/aoPiqhQVPUhHCfLDkQmiK+Bjq/+LM3rc7+u1dF/f4dOBn11PoKuA+YSK\nAWbfeyZFZYtwABUQgcpVnbpH2cvL6q1YjtHuKiTWFuFe4rfVI5lYULkDgQp+GZXW\npMqM13ejur9ofcdB90S3iuo+869aqWh+y624DnHfXzetXz47lBpK6EdzPJVakk5Y\n1DHt1TbU/U817PF8qLX+i20sWDRw7WDMIpiSLW0h/C8hqlRLSjAOYcCu9dWb3kA=\n=7w0g\n-----END PGP SIGNATURE-----\n", "payload": "tree e069476f6072ad903c1a5c14b335c7e822e31b02\nparent 81c11892a9228db4ff78773a5a45e0effa2a51e2\nparent 80059e1b7274fc7ba8d9201ea075fd1c7b7608f1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671234353 +0100\ncommitter GitHub <noreply@github.com> 1671234353 +0100\n\nRollup merge of #105780 - GuillaumeGomez:read-more-links, r=notriddle\n\nrustdoc: Don't add \"Read more\" link if there is no extra content\n\nFixes #105677.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea", "html_url": "https://github.com/rust-lang/rust/commit/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81c11892a9228db4ff78773a5a45e0effa2a51e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c11892a9228db4ff78773a5a45e0effa2a51e2", "html_url": "https://github.com/rust-lang/rust/commit/81c11892a9228db4ff78773a5a45e0effa2a51e2"}, {"sha": "80059e1b7274fc7ba8d9201ea075fd1c7b7608f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/80059e1b7274fc7ba8d9201ea075fd1c7b7608f1", "html_url": "https://github.com/rust-lang/rust/commit/80059e1b7274fc7ba8d9201ea075fd1c7b7608f1"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "aeaee524fd4532b820f130d04ccb7912ceb68411", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea", "patch": "@@ -567,11 +567,12 @@ struct SummaryLine<'a, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n     started: bool,\n     depth: u32,\n+    skipped_tags: u32,\n }\n \n impl<'a, I: Iterator<Item = Event<'a>>> SummaryLine<'a, I> {\n     fn new(iter: I) -> Self {\n-        SummaryLine { inner: iter, started: false, depth: 0 }\n+        SummaryLine { inner: iter, started: false, depth: 0, skipped_tags: 0 }\n     }\n }\n \n@@ -601,13 +602,15 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n             let is_allowed_tag = match event {\n                 Event::Start(ref c) => {\n                     if is_forbidden_tag(c) {\n+                        self.skipped_tags += 1;\n                         return None;\n                     }\n                     self.depth += 1;\n                     check_if_allowed_tag(c)\n                 }\n                 Event::End(ref c) => {\n                     if is_forbidden_tag(c) {\n+                        self.skipped_tags += 1;\n                         return None;\n                     }\n                     self.depth -= 1;\n@@ -616,6 +619,9 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n                 }\n                 _ => true,\n             };\n+            if !is_allowed_tag {\n+                self.skipped_tags += 1;\n+            }\n             return if !is_allowed_tag {\n                 if is_start {\n                     Some(Event::Start(Tag::Paragraph))\n@@ -1096,11 +1102,11 @@ impl MarkdownItemInfo<'_> {\n }\n \n impl MarkdownSummaryLine<'_> {\n-    pub(crate) fn into_string(self) -> String {\n+    pub(crate) fn into_string_with_has_more_content(self) -> (String, bool) {\n         let MarkdownSummaryLine(md, links) = self;\n         // This is actually common enough to special-case\n         if md.is_empty() {\n-            return String::new();\n+            return (String::new(), false);\n         }\n \n         let mut replacer = |broken_link: BrokenLink<'_>| {\n@@ -1110,17 +1116,26 @@ impl MarkdownSummaryLine<'_> {\n                 .map(|link| (link.href.as_str().into(), link.new_text.as_str().into()))\n         };\n \n-        let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer));\n+        let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer))\n+            .peekable();\n+        let mut summary = SummaryLine::new(p);\n \n         let mut s = String::new();\n \n-        let without_paragraphs = LinkReplacer::new(SummaryLine::new(p), links).filter(|event| {\n+        let without_paragraphs = LinkReplacer::new(&mut summary, links).filter(|event| {\n             !matches!(event, Event::Start(Tag::Paragraph) | Event::End(Tag::Paragraph))\n         });\n \n         html::push_html(&mut s, without_paragraphs);\n \n-        s\n+        let has_more_content =\n+            matches!(summary.inner.peek(), Some(Event::Start(_))) || summary.skipped_tags > 0;\n+\n+        (s, has_more_content)\n+    }\n+\n+    pub(crate) fn into_string(self) -> String {\n+        self.into_string_with_has_more_content().0\n     }\n }\n "}, {"sha": "146e5010e4e42827d7743a3ef2e73ae04d15f354", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea", "patch": "@@ -467,9 +467,10 @@ fn document_short(\n         return;\n     }\n     if let Some(s) = item.doc_value() {\n-        let mut summary_html = MarkdownSummaryLine(&s, &item.links(cx)).into_string();\n+        let (mut summary_html, has_more_content) =\n+            MarkdownSummaryLine(&s, &item.links(cx)).into_string_with_has_more_content();\n \n-        if s.contains('\\n') {\n+        if has_more_content {\n             let link = format!(r#\" <a{}>Read more</a>\"#, assoc_href_attr(item, link, cx));\n \n             if let Some(idx) = summary_html.rfind(\"</p>\") {"}, {"sha": "0303e44426141d4dd392299f190619f39469b7fb", "filename": "src/test/rustdoc/read-more-unneeded.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea/src%2Ftest%2Frustdoc%2Fread-more-unneeded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea/src%2Ftest%2Frustdoc%2Fread-more-unneeded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fread-more-unneeded.rs?ref=11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for https://github.com/rust-lang/rust/issues/105677.\n+// This test ensures that the \"Read more\" link is only generated when\n+// there is actually more documentation to read after the short summary.\n+\n+#![crate_name = \"foo\"]\n+\n+pub trait MyFrom {\n+    /// # Hello\n+    /// ## Yolo\n+    /// more!\n+    fn try_from1();\n+    /// a\n+    /// b\n+    /// c\n+    fn try_from2();\n+    /// a\n+    ///\n+    /// b\n+    ///\n+    /// c\n+    fn try_from3();\n+}\n+\n+pub struct NonZero;\n+\n+// @has 'foo/struct.NonZero.html'\n+impl MyFrom for NonZero {\n+    // @matches - '//*[@class=\"docblock\"]' '^Hello Read more$'\n+    fn try_from1() {}\n+    // @matches - '//*[@class=\"docblock\"]' '^a\\sb\\sc$'\n+    fn try_from2() {}\n+    // @matches - '//*[@class=\"docblock\"]' '^a Read more$'\n+    fn try_from3() {}\n+}"}, {"sha": "9cf3226f738c804da6357ecf5e058eee0e568280", "filename": "src/test/rustdoc/trait-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl.rs?ref=11de52a46dd9b2f6e2d2797d60dfc977e8b6bcea", "patch": "@@ -30,8 +30,6 @@ impl Trait for Struct {\n     // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]' 'These docs contain'\n     // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a' 'reference link'\n     // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a/@href' 'https://example.com'\n-    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a' 'Read more'\n-    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a/@href' 'trait.Trait.html#tymethod.b'\n     fn b() {}\n \n     // @!has - '//*[@id=\"method.c\"]/../../div[@class=\"docblock\"]' 'code block'"}]}