{"sha": "04eadedb2888d96c5f5222454a6ca5470e4c0834", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZWFkZWRiMjg4OGQ5NmM1ZjUyMjI0NTRhNmNhNTQ3MGU0YzA4MzQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-19T16:26:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-23T11:56:40Z"}, "message": "allow using tuple variant names as function handles", "tree": {"sha": "5158130dedb43027adc9eed290f8f02085bfa2e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5158130dedb43027adc9eed290f8f02085bfa2e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04eadedb2888d96c5f5222454a6ca5470e4c0834", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAliF73gACgkQpp+NIls6\n19kB6xAAp5wrRv1QRibmKPOtrAMUkmEKevmMztfr7grf9t0h1iu73yP+VhAwTEUu\nFMcoox0wYz+AFQ6mIcSdYAAtGrNBcTTuRzsNJFEgLgQw9B14p6sFFP4+S+nY8uLh\nzA7ONX0MeK7MFnMd1D/kCPGzQTESwNinKUkJU4/kJftFzvPtVt9nZQlMQhqNCO4E\nNXFrZgiMWVKhqDHiQEpX8+kevGJ903MC4mFdJaD8gEEAWtRiLCOfU1q350XxTUEU\nU9/XCC/wtZNyXHG2xSEbpDCUwfL7eZiah2n2UucS+zKXTF4tY9NUt8BF1Pu1/uIr\ncBlpfEUhjmspYGmde6p0/v/FdtnjblML3kHc5+8I00c/zCYH06q5TDqyHYJFcK3K\ny2E1nS59Kfb6c06FQJ4YuquNgoJTn2hpEgP6iJ+UdH9t5raJfwEqi3CFkHHyE8dT\nlqGEVUXM155VxsFiJoUqT2R+I5SruAPyL/9mNfWPMKNQKBIP4ym+8mf2g5Ou6iLG\nAk4RWqHWG58WJSGaPggDU2INX15mEKu0xDL8n/YpNnmc3io60QDcm7y4JGa0p+Fb\nl4A/cRFn6vmSs73y2QU1aNd4BAlDjddVs+TVr+41tzrvhPh1BjfAHCzlWhBzrB1g\nW4RtjFgdtK7Fj0TRY7h8QYNaSWiW+G5MAvHwP3nQIAHMumk97SI=\n=TgHA\n-----END PGP SIGNATURE-----", "payload": "tree 5158130dedb43027adc9eed290f8f02085bfa2e6\nparent 684f75713963f0ca67fcce2b13746e982f203cee\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482164807 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1485172600 +0100\n\nallow using tuple variant names as function handles\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04eadedb2888d96c5f5222454a6ca5470e4c0834", "html_url": "https://github.com/rust-lang/rust/commit/04eadedb2888d96c5f5222454a6ca5470e4c0834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04eadedb2888d96c5f5222454a6ca5470e4c0834/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "684f75713963f0ca67fcce2b13746e982f203cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/684f75713963f0ca67fcce2b13746e982f203cee", "html_url": "https://github.com/rust-lang/rust/commit/684f75713963f0ca67fcce2b13746e982f203cee"}], "stats": {"total": 100, "additions": 75, "deletions": 25}, "files": [{"sha": "6eb9b3a1e56d97b7843e95b1d64c323f78c588b1", "filename": "src/eval_context.rs", "status": "modified", "additions": 55, "deletions": 15, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/04eadedb2888d96c5f5222454a6ca5470e4c0834/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04eadedb2888d96c5f5222454a6ca5470e4c0834/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=04eadedb2888d96c5f5222454a6ca5470e4c0834", "patch": "@@ -355,18 +355,44 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n-    fn assign_fields<I: IntoIterator<Item = u64>>(\n+    pub fn assign_discr_and_fields<\n+        I: IntoIterator<Item = u64>,\n+        V: IntoValTyPair<'tcx>,\n+        J: IntoIterator<Item = V>,\n+    >(\n         &mut self,\n         dest: Lvalue<'tcx>,\n         offsets: I,\n-        operands: &[mir::Operand<'tcx>],\n+        operands: J,\n+        discr_val: u128,\n+        discr_size: u64,\n+    ) -> EvalResult<'tcx, ()> {\n+        // FIXME(solson)\n+        let dest_ptr = self.force_allocation(dest)?.to_ptr();\n+\n+        let mut offsets = offsets.into_iter();\n+        let discr_offset = offsets.next().unwrap();\n+        let discr_dest = dest_ptr.offset(discr_offset);\n+        self.memory.write_uint(discr_dest, discr_val, discr_size)?;\n+\n+        self.assign_fields(dest, offsets, operands)\n+    }\n+\n+    pub fn assign_fields<\n+        I: IntoIterator<Item = u64>,\n+        V: IntoValTyPair<'tcx>,\n+        J: IntoIterator<Item = V>,\n+    >(\n+        &mut self,\n+        dest: Lvalue<'tcx>,\n+        offsets: I,\n+        operands: J,\n     ) -> EvalResult<'tcx, ()> {\n         // FIXME(solson)\n         let dest = self.force_allocation(dest)?.to_ptr();\n \n         for (offset, operand) in offsets.into_iter().zip(operands) {\n-            let value = self.eval_operand(operand)?;\n-            let value_ty = self.operand_ty(operand);\n+            let (value, value_ty) = operand.into_val_ty_pair(self)?;\n             let field_dest = dest.offset(offset);\n             self.write_value_to_ptr(value, field_dest, value_ty)?;\n         }\n@@ -431,18 +457,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         if let mir::AggregateKind::Adt(adt_def, variant, _, _) = *kind {\n                             let discr_val = adt_def.variants[variant].disr_val.to_u128_unchecked();\n                             let discr_size = discr.size().bytes();\n-                            let discr_offset = variants[variant].offsets[0].bytes();\n-\n-                            // FIXME(solson)\n-                            let dest = self.force_allocation(dest)?;\n-                            let discr_dest = (dest.to_ptr()).offset(discr_offset);\n \n-                            self.memory.write_uint(discr_dest, discr_val, discr_size)?;\n-\n-                            // Don't include the first offset; it's for the discriminant.\n-                            let field_offsets = variants[variant].offsets.iter().skip(1)\n-                                .map(|s| s.bytes());\n-                            self.assign_fields(dest, field_offsets, operands)?;\n+                            self.assign_discr_and_fields(\n+                                dest,\n+                                variants[variant].offsets.iter().cloned().map(Size::bytes),\n+                                operands,\n+                                discr_val,\n+                                discr_size,\n+                            )?;\n                         } else {\n                             bug!(\"tried to assign {:?} to Layout::General\", kind);\n                         }\n@@ -1464,3 +1486,21 @@ pub fn monomorphize_field_ty<'a, 'tcx:'a >(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &ty::\n pub fn is_inhabited<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n     ty.uninhabited_from(&mut FxHashSet::default(), tcx).is_empty()\n }\n+\n+pub trait IntoValTyPair<'tcx> {\n+    fn into_val_ty_pair<'a>(self, ecx: &mut EvalContext<'a, 'tcx>) -> EvalResult<'tcx, (Value, Ty<'tcx>)> where 'tcx: 'a;\n+}\n+\n+impl<'tcx> IntoValTyPair<'tcx> for (Value, Ty<'tcx>) {\n+    fn into_val_ty_pair<'a>(self, _: &mut EvalContext<'a, 'tcx>) -> EvalResult<'tcx, (Value, Ty<'tcx>)> where 'tcx: 'a {\n+        Ok(self)\n+    }\n+}\n+\n+impl<'b, 'tcx: 'b> IntoValTyPair<'tcx> for &'b mir::Operand<'tcx> {\n+    fn into_val_ty_pair<'a>(self, ecx: &mut EvalContext<'a, 'tcx>) -> EvalResult<'tcx, (Value, Ty<'tcx>)> where 'tcx: 'a {\n+        let value = ecx.eval_operand(self)?;\n+        let value_ty = ecx.operand_ty(self);\n+        Ok((value, value_ty))\n+    }\n+}"}, {"sha": "bd1c85accd5883c6be7bfc45344c1029ff4e3732", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/04eadedb2888d96c5f5222454a6ca5470e4c0834/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04eadedb2888d96c5f5222454a6ca5470e4c0834/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=04eadedb2888d96c5f5222454a6ca5470e4c0834", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc::traits::{self, Reveal};\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::layout::Layout;\n+use rustc::ty::layout::{Layout, Size};\n use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::{self, Ty, TyCtxt, BareFnTy};\n use syntax::codemap::{DUMMY_SP, Span};\n@@ -238,20 +238,27 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let (lvalue, target) = destination.expect(\"tuple struct constructors can't diverge\");\n                         let dest_ty = self.tcx.item_type(adt_def.did);\n                         let dest_layout = self.type_layout(dest_ty)?;\n+                        let disr = v.disr_val.to_u128_unchecked();\n                         match *dest_layout {\n                             Layout::Univariant { ref variant, .. } => {\n-                                assert_eq!(v.disr_val.to_u128_unchecked(), 0);\n+                                assert_eq!(disr, 0);\n                                 let offsets = variant.offsets.iter().map(|s| s.bytes());\n \n-                                // FIXME: don't allocate for single or dual field structs\n-                                let dest = self.force_allocation(lvalue)?.to_ptr();\n-\n-                                for (offset, (value, value_ty)) in offsets.into_iter().zip(args) {\n-                                    let field_dest = dest.offset(offset);\n-                                    self.write_value_to_ptr(value, field_dest, value_ty)?;\n-                                }\n+                                self.assign_fields(lvalue, offsets, args)?;\n+                            },\n+                            Layout::General { discr, ref variants, .. } => {\n+                                // FIXME: report a proper error for invalid discriminants\n+                                // right now we simply go into index out of bounds\n+                                let discr_size = discr.size().bytes();\n+                                self.assign_discr_and_fields(\n+                                    lvalue,\n+                                    variants[disr as usize].offsets.iter().cloned().map(Size::bytes),\n+                                    args,\n+                                    disr,\n+                                    discr_size,\n+                                )?;\n                             },\n-                            // FIXME: enum variant constructors\n+                            // FIXME: raw nullable pointer constructors\n                             _ => bug!(\"bad layout for tuple struct constructor: {:?}\", dest_layout),\n                         }\n                         self.goto_block(target);"}, {"sha": "5cf91b3f4d194eb188c8942cbb902709e7674c4c", "filename": "tests/run-pass/tuple_like_enum_variant_constructor.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04eadedb2888d96c5f5222454a6ca5470e4c0834/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04eadedb2888d96c5f5222454a6ca5470e4c0834/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor.rs?ref=04eadedb2888d96c5f5222454a6ca5470e4c0834", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    assert_eq!(Some(42).map(Some), Some(Some(42)));\n+}"}]}