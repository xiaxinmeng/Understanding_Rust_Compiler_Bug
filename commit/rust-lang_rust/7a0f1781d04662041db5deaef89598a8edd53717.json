{"sha": "7a0f1781d04662041db5deaef89598a8edd53717", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMGYxNzgxZDA0NjYyMDQxZGI1ZGVhZWY4OTU5OGE4ZWRkNTM3MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-04T08:09:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-04T08:09:23Z"}, "message": "Auto merge of #83213 - rylev:update-lints-to-errors, r=nikomatsakis\n\nUpdate BARE_TRAIT_OBJECT and ELLIPSIS_INCLUSIVE_RANGE_PATTERNS to errors in Rust 2021\n\nThis addresses https://github.com/rust-lang/rust/pull/81244 by updating two lints to errors in the Rust 2021 edition.\n\nr? `@estebank`", "tree": {"sha": "367a0befca4b16da3b1bf60bd4873375c729c6f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/367a0befca4b16da3b1bf60bd4873375c729c6f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a0f1781d04662041db5deaef89598a8edd53717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0f1781d04662041db5deaef89598a8edd53717", "html_url": "https://github.com/rust-lang/rust/commit/7a0f1781d04662041db5deaef89598a8edd53717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a0f1781d04662041db5deaef89598a8edd53717/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c20c9219dae5ea56ce9bf1c211fafdc7da8700b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c20c9219dae5ea56ce9bf1c211fafdc7da8700b9", "html_url": "https://github.com/rust-lang/rust/commit/c20c9219dae5ea56ce9bf1c211fafdc7da8700b9"}, {"sha": "7a5039251ae9d4a356e0608b4adafcea84a11a7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5039251ae9d4a356e0608b4adafcea84a11a7e", "html_url": "https://github.com/rust-lang/rust/commit/7a5039251ae9d4a356e0608b4adafcea84a11a7e"}], "stats": {"total": 737, "additions": 541, "deletions": 196}, "files": [{"sha": "32320130b677cb3e77eef856e493c24489cff013", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -46,7 +46,7 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, CRATE_DEF_ID};\n@@ -58,6 +58,7 @@ use rustc_session::lint::builtin::{BARE_TRAIT_OBJECTS, MISSING_ABI};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::utils::{FlattenNonterminals, NtToTokenstream};\n use rustc_session::Session;\n+use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -2730,13 +2731,26 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .map(|snippet| snippet.starts_with(\"#[\"))\n             .unwrap_or(true);\n         if !is_macro_callsite {\n-            self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n-                BARE_TRAIT_OBJECTS,\n-                id,\n-                span,\n-                \"trait objects without an explicit `dyn` are deprecated\",\n-                BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n-            )\n+            if span.edition() < Edition::Edition2021 {\n+                self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n+                    BARE_TRAIT_OBJECTS,\n+                    id,\n+                    span,\n+                    \"trait objects without an explicit `dyn` are deprecated\",\n+                    BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n+                )\n+            } else {\n+                let msg = \"trait objects must include the `dyn` keyword\";\n+                let label = \"add `dyn` keyword before this trait\";\n+                let mut err = struct_span_err!(self.sess, span, E0782, \"{}\", msg,);\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_lo(),\n+                    label,\n+                    String::from(\"dyn \"),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.emit();\n+            }\n         }\n     }\n "}, {"sha": "c343809179b0a2d1f17851875cdcf1f5a4cfce28", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -470,6 +470,8 @@ E0778: include_str!(\"./error_codes/E0778.md\"),\n E0779: include_str!(\"./error_codes/E0779.md\"),\n E0780: include_str!(\"./error_codes/E0780.md\"),\n E0781: include_str!(\"./error_codes/E0781.md\"),\n+E0782: include_str!(\"./error_codes/E0782.md\"),\n+E0783: include_str!(\"./error_codes/E0783.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "0f3253c050e2b3a1b0ebd9fae03aff8676bdab93", "filename": "compiler/rustc_error_codes/src/error_codes/E0782.md", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0782.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0782.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0782.md?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -0,0 +1,26 @@\n+Trait objects must include the `dyn` keyword.\n+\n+Erroneous code example:\n+\n+```edition2021,compile_fail,E0782\n+trait Foo {}\n+fn test(arg: Box<Foo>) {} // error!\n+```\n+\n+Trait objects are a way to call methods on types that are not known until\n+runtime but conform to some trait.\n+\n+Trait objects should be formed with `Box<dyn Foo>`, but in the code above\n+`dyn` is left off.\n+\n+This makes it harder to see that `arg` is a trait object and not a\n+simply a heap allocated type called `Foo`.\n+\n+To fix this issue, add `dyn` before the trait name.\n+\n+```edition2021\n+trait Foo {}\n+fn test(arg: Box<dyn Foo>) {} // ok!\n+```\n+\n+This used to be allowed before edition 2021, but is now an error."}, {"sha": "73981e59e0d95e7bb85f21060b7d5396cdd176d5", "filename": "compiler/rustc_error_codes/src/error_codes/E0783.md", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0783.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0783.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0783.md?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -0,0 +1,22 @@\n+The range pattern `...` is no longer allowed.\n+\n+Erroneous code example:\n+\n+```edition2021,compile_fail,E0783\n+match 2u8 {\n+    0...9 => println!(\"Got a number less than 10\"), // error!\n+    _ => println!(\"Got a number 10 or more\"),\n+}\n+```\n+\n+Older Rust code using previous editions allowed `...` to stand for exclusive\n+ranges which are now signified using `..=`.\n+\n+To make this code compile replace the `...` with `..=`.\n+\n+```edition2021\n+match 2u8 {\n+    0..=9 => println!(\"Got a number less than 10\"), // ok!\n+    _ => println!(\"Got a number 10 or more\"),\n+}\n+```"}, {"sha": "e7275374b8915f39bb1976d30f649fc298ff8b97", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -1660,7 +1660,11 @@ declare_lint! {\n     /// [`..` range expression]: https://doc.rust-lang.org/reference/expressions/range-expr.html\n     pub ELLIPSIS_INCLUSIVE_RANGE_PATTERNS,\n     Warn,\n-    \"`...` range patterns are deprecated\"\n+    \"`...` range patterns are deprecated\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #80165 <https://github.com/rust-lang/rust/issues/80165>\",\n+        edition: Some(Edition::Edition2021),\n+    };\n }\n \n #[derive(Default)]\n@@ -1704,32 +1708,57 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n             let suggestion = \"use `..=` for an inclusive range\";\n             if parenthesise {\n                 self.node_id = Some(pat.id);\n-                cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, |lint| {\n-                    let end = expr_to_string(&end);\n-                    let replace = match start {\n-                        Some(start) => format!(\"&({}..={})\", expr_to_string(&start), end),\n-                        None => format!(\"&(..={})\", end),\n-                    };\n-                    lint.build(msg)\n-                        .span_suggestion(\n-                            pat.span,\n-                            suggestion,\n-                            replace,\n-                            Applicability::MachineApplicable,\n-                        )\n-                        .emit();\n-                });\n+                let end = expr_to_string(&end);\n+                let replace = match start {\n+                    Some(start) => format!(\"&({}..={})\", expr_to_string(&start), end),\n+                    None => format!(\"&(..={})\", end),\n+                };\n+                if join.edition() >= Edition::Edition2021 {\n+                    let mut err =\n+                        rustc_errors::struct_span_err!(cx.sess, pat.span, E0783, \"{}\", msg,);\n+                    err.span_suggestion(\n+                        pat.span,\n+                        suggestion,\n+                        replace,\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                } else {\n+                    cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, |lint| {\n+                        lint.build(msg)\n+                            .span_suggestion(\n+                                pat.span,\n+                                suggestion,\n+                                replace,\n+                                Applicability::MachineApplicable,\n+                            )\n+                            .emit();\n+                    });\n+                }\n             } else {\n-                cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, |lint| {\n-                    lint.build(msg)\n-                        .span_suggestion_short(\n-                            join,\n-                            suggestion,\n-                            \"..=\".to_owned(),\n-                            Applicability::MachineApplicable,\n-                        )\n-                        .emit();\n-                });\n+                let replace = \"..=\".to_owned();\n+                if join.edition() >= Edition::Edition2021 {\n+                    let mut err =\n+                        rustc_errors::struct_span_err!(cx.sess, pat.span, E0783, \"{}\", msg,);\n+                    err.span_suggestion_short(\n+                        join,\n+                        suggestion,\n+                        replace,\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                } else {\n+                    cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, |lint| {\n+                        lint.build(msg)\n+                            .span_suggestion_short(\n+                                join,\n+                                suggestion,\n+                                replace,\n+                                Applicability::MachineApplicable,\n+                            )\n+                            .emit();\n+                    });\n+                }\n             };\n         }\n     }"}, {"sha": "beb4d36597cfc800ba1be769d31a2d34b1ae2d49", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -1618,7 +1618,11 @@ declare_lint! {\n     /// [`impl Trait`]: https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n     pub BARE_TRAIT_OBJECTS,\n     Warn,\n-    \"suggest using `dyn Trait` for trait objects\"\n+    \"suggest using `dyn Trait` for trait objects\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #80165 <https://github.com/rust-lang/rust/issues/80165>\",\n+        edition: Some(Edition::Edition2021),\n+    };\n }\n \n declare_lint! {"}, {"sha": "7adaf54fa2374418e1a8fff081919a6546af3a8d", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -272,11 +272,13 @@ pub fn struct_lint_level<'s, 'd>(\n             // emit shouldn't be automatically fixed by rustfix.\n             err.allow_suggestions(false);\n \n-            // If this is a future incompatible lint it'll become a hard error, so\n-            // we have to emit *something*. Also, if this lint occurs in the\n-            // expansion of a macro from an external crate, allow individual lints\n-            // to opt-out from being reported.\n-            if future_incompatible.is_none() && !lint.report_in_external_macro {\n+            // If this is a future incompatible that is not an edition fixing lint\n+            // it'll become a hard error, so we have to emit *something*. Also,\n+            // if this lint occurs in the expansion of a macro from an external crate,\n+            // allow individual lints to opt-out from being reported.\n+            let not_future_incompatible =\n+                future_incompatible.map(|f| f.edition.is_some()).unwrap_or(true);\n+            if not_future_incompatible && !lint.report_in_external_macro {\n                 err.cancel();\n                 // Don't continue further, since we don't want to have\n                 // `diag_span_note_once` called for a diagnostic that isn't emitted."}, {"sha": "0c6a33b91cea5c24850faba477c03382f3db9161", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -30,6 +30,7 @@ use rustc_middle::ty::{\n use rustc_session::lint;\n use rustc_session::lint::builtin::BARE_TRAIT_OBJECTS;\n use rustc_session::parse::feature_err;\n+use rustc_span::edition::Edition;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{self, BytePos, MultiSpan, Span};\n@@ -969,20 +970,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let TyKind::TraitObject([poly_trait_ref, ..], _, TraitObjectSyntax::None) =\n                 self_ty.kind\n             {\n-                self.tcx.struct_span_lint_hir(BARE_TRAIT_OBJECTS, hir_id, self_ty.span, |lint| {\n-                    let mut db = lint\n-                        .build(&format!(\"trait objects without an explicit `dyn` are deprecated\"));\n-                    let (sugg, app) = match self.tcx.sess.source_map().span_to_snippet(self_ty.span)\n-                    {\n-                        Ok(s) if poly_trait_ref.trait_ref.path.is_global() => {\n-                            (format!(\"<dyn ({})>\", s), Applicability::MachineApplicable)\n-                        }\n-                        Ok(s) => (format!(\"<dyn {}>\", s), Applicability::MachineApplicable),\n-                        Err(_) => (\"<dyn <type>>\".to_string(), Applicability::HasPlaceholders),\n-                    };\n-                    db.span_suggestion(self_ty.span, \"use `dyn`\", sugg, app);\n-                    db.emit()\n-                });\n+                let msg = \"trait objects without an explicit `dyn` are deprecated\";\n+                let (sugg, app) = match self.tcx.sess.source_map().span_to_snippet(self_ty.span) {\n+                    Ok(s) if poly_trait_ref.trait_ref.path.is_global() => {\n+                        (format!(\"<dyn ({})>\", s), Applicability::MachineApplicable)\n+                    }\n+                    Ok(s) => (format!(\"<dyn {}>\", s), Applicability::MachineApplicable),\n+                    Err(_) => (\"<dyn <type>>\".to_string(), Applicability::HasPlaceholders),\n+                };\n+                let replace = String::from(\"use `dyn`\");\n+                if self.sess().edition() >= Edition::Edition2021 {\n+                    let mut err = rustc_errors::struct_span_err!(\n+                        self.sess(),\n+                        self_ty.span,\n+                        E0783,\n+                        \"{}\",\n+                        msg,\n+                    );\n+                    err.span_suggestion(\n+                        self_ty.span,\n+                        &sugg,\n+                        replace,\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                } else {\n+                    self.tcx.struct_span_lint_hir(\n+                        BARE_TRAIT_OBJECTS,\n+                        hir_id,\n+                        self_ty.span,\n+                        |lint| {\n+                            let mut db = lint.build(msg);\n+                            db.span_suggestion(self_ty.span, &replace, sugg, app);\n+                            db.emit()\n+                        },\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "de9c1882c7d48278edaee7c46a26d391c553e156", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -1709,6 +1709,9 @@ fn markdown_test(builder: &Builder<'_>, compiler: Compiler, markdown: &Path) ->\n     builder.info(&format!(\"doc tests for: {}\", markdown.display()));\n     let mut cmd = builder.rustdoc_cmd(compiler);\n     builder.add_rust_test_threads(&mut cmd);\n+    // allow for unstable options such as new editions\n+    cmd.arg(\"-Z\");\n+    cmd.arg(\"unstable-options\");\n     cmd.arg(\"--test\");\n     cmd.arg(markdown);\n     cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");"}, {"sha": "d845e00694a2dfdac606b6a0b7cec12531cb6452", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -13,6 +13,7 @@ fn b() {\n     //~| ERROR expected trait, found constant `BAR`\n     //~| ERROR type provided when a constant was expected\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }\n fn c() {\n     foo::<3 + 3>(); //~ ERROR expressions must be enclosed in braces"}, {"sha": "857498a1111f5d16b9222a3464ca6c3b8c0d8ebf", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -10,7 +10,7 @@ LL |     foo::<{ BAR + 3 }>();\n    |           ^         ^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-suggest-missing-braces.rs:18:11\n+  --> $DIR/const-expression-suggest-missing-braces.rs:19:11\n    |\n LL |     foo::<3 + 3>();\n    |           ^^^^^\n@@ -21,7 +21,7 @@ LL |     foo::<{ 3 + 3 }>();\n    |           ^       ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:21:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:22:15\n    |\n LL |     foo::<BAR - 3>();\n    |               ^ expected one of `,` or `>`\n@@ -32,7 +32,7 @@ LL |     foo::<{ BAR - 3 }>();\n    |           ^         ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:24:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:25:15\n    |\n LL |     foo::<BAR - BAR>();\n    |               ^ expected one of `,` or `>`\n@@ -43,7 +43,7 @@ LL |     foo::<{ BAR - BAR }>();\n    |           ^           ^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-suggest-missing-braces.rs:27:11\n+  --> $DIR/const-expression-suggest-missing-braces.rs:28:11\n    |\n LL |     foo::<100 - BAR>();\n    |           ^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     foo::<{ 100 - BAR }>();\n    |           ^           ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:30:19\n+  --> $DIR/const-expression-suggest-missing-braces.rs:31:19\n    |\n LL |     foo::<bar<i32>()>();\n    |                   ^ expected one of `,` or `>`\n@@ -65,7 +65,7 @@ LL |     foo::<{ bar<i32>() }>();\n    |           ^            ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:33:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:34:21\n    |\n LL |     foo::<bar::<i32>()>();\n    |                     ^ expected one of `,` or `>`\n@@ -76,7 +76,7 @@ LL |     foo::<{ bar::<i32>() }>();\n    |           ^              ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:36:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:37:21\n    |\n LL |     foo::<bar::<i32>() + BAR>();\n    |                     ^ expected one of `,` or `>`\n@@ -87,7 +87,7 @@ LL |     foo::<{ bar::<i32>() + BAR }>();\n    |           ^                    ^\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:39:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:40:21\n    |\n LL |     foo::<bar::<i32>() - BAR>();\n    |                     ^ expected one of `,` or `>`\n@@ -98,7 +98,7 @@ LL |     foo::<{ bar::<i32>() - BAR }>();\n    |           ^                    ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:42:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:43:15\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |               ^ expected one of `,` or `>`\n@@ -109,7 +109,7 @@ LL |     foo::<{ BAR - bar::<i32>() }>();\n    |           ^                    ^\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:45:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:46:15\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |               ^ expected one of `,` or `>`\n@@ -138,6 +138,8 @@ LL |     foo::<BAR + BAR>();\n    |           ^^^^^^^^^ help: use `dyn`: `dyn BAR + BAR`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/const-expression-suggest-missing-braces.rs:11:11"}, {"sha": "7c2babaf7abaa2fa6b42c56822b6654dbe7ade9b", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+#[deny(bare_trait_objects)]\n+\n+fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+    //~^ ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted\n+    let _x: &SomeTrait = todo!();\n+    //~^ ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted\n+}\n+\n+trait SomeTrait {}\n+\n+fn main() {}"}, {"sha": "ea73e56d8433da6a100118a527c1aba0befcf035", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -0,0 +1,34 @@\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:4:17\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                 ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/dyn-2018-edition-lint.rs:2:8\n+   |\n+LL | #[deny(bare_trait_objects)]\n+   |        ^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:4:35\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                                   ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:9:14\n+   |\n+LL |     let _x: &SomeTrait = todo!();\n+   |              ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "bc1bed8a9a4c6dd432d3ac383df1bce8ee12feba", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -0,0 +1,12 @@\n+// edition:2021\n+\n+fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+    //~^ ERROR trait objects must include the `dyn` keyword\n+    //~| ERROR trait objects must include the `dyn` keyword\n+    let _x: &SomeTrait = todo!();\n+    //~^ ERROR trait objects must include the `dyn` keyword\n+}\n+\n+trait SomeTrait {}\n+\n+fn main() {}"}, {"sha": "798f48060e7b7eed7915fae559ef4bb0b9429ad7", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -0,0 +1,36 @@\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/dyn-2021-edition-error.rs:6:14\n+   |\n+LL |     let _x: &SomeTrait = todo!();\n+   |              ^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL |     let _x: &dyn SomeTrait = todo!();\n+   |              ^^^\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/dyn-2021-edition-error.rs:3:17\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                 ^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL | fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   |                 ^^^\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/dyn-2021-edition-error.rs:3:35\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                                   ^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   |                                   ^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0782`."}, {"sha": "40ed42c9ce017becbc6190de1be6360032456461", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -11,5 +11,6 @@ fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~^ ERROR: lifetime in trait object type must be followed by `+`\n   //~| ERROR: parenthesized generic arguments cannot be used\n   //~| WARNING: trait objects without an explicit `dyn` are deprecated\n+  //~| WARNING: this was previously accepted by the compiler\n \n fn main() {}"}, {"sha": "0e95c54d8114ff86e44a7c39db51c14d156bfdd4", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -26,6 +26,8 @@ LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                             ^^ help: use `dyn`: `dyn 'a`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:5:8"}, {"sha": "74f838e9ed18dd4e4cedfff46f67464dc85facb9", "filename": "src/test/ui/lint/bare-trait-objects-path.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -11,8 +11,14 @@ trait Dyn {}\n impl Assoc for dyn Dyn {}\n \n fn main() {\n-    Dyn::func(); //~ WARN trait objects without an explicit `dyn` are deprecated\n-    ::Dyn::func(); //~ WARN trait objects without an explicit `dyn` are deprecated\n-    Dyn::CONST; //~ WARN trait objects without an explicit `dyn` are deprecated\n+    Dyn::func();\n+    //~^ WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n+    ::Dyn::func();\n+    //~^ WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n+    Dyn::CONST;\n+    //~^ WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n     let _: Dyn::Ty; //~ ERROR ambiguous associated type\n }"}, {"sha": "55c9ea234de29661081f11889c80c6d04fba0128", "filename": "src/test/ui/lint/bare-trait-objects-path.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -1,5 +1,5 @@\n error[E0223]: ambiguous associated type\n-  --> $DIR/bare-trait-objects-path.rs:17:12\n+  --> $DIR/bare-trait-objects-path.rs:23:12\n    |\n LL |     let _: Dyn::Ty;\n    |            ^^^^^^^ help: use fully-qualified syntax: `<dyn Dyn as Trait>::Ty`\n@@ -11,18 +11,26 @@ LL |     Dyn::func();\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/bare-trait-objects-path.rs:15:5\n+  --> $DIR/bare-trait-objects-path.rs:17:5\n    |\n LL |     ::Dyn::func();\n    |     ^^^^^ help: use `dyn`: `<dyn (::Dyn)>`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/bare-trait-objects-path.rs:16:5\n+  --> $DIR/bare-trait-objects-path.rs:20:5\n    |\n LL |     Dyn::CONST;\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 3 warnings emitted\n "}, {"sha": "a1b738e33fa9bdfd50bae3ae63d46fb97b5dba9c", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -8,12 +8,14 @@ fn main() {\n     match despondency {\n         1..=2 => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         _ => {}\n     }\n \n     match &despondency {\n         &(1..=2) => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         _ => {}\n     }\n }"}, {"sha": "d3ebbf38e1cba047dbe89b0c5ff3d5b38d01cb2c", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -8,12 +8,14 @@ fn main() {\n     match despondency {\n         1...2 => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         _ => {}\n     }\n \n     match &despondency {\n         &1...2 => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         _ => {}\n     }\n }"}, {"sha": "ba4ae208e39cb2e01ed5b697c84a91fd04e9e7fd", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -9,12 +9,17 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: `...` range patterns are deprecated\n-  --> $DIR/inclusive-range-pattern-syntax.rs:15:9\n+  --> $DIR/inclusive-range-pattern-syntax.rs:16:9\n    |\n LL |         &1...2 => {}\n    |         ^^^^^^ help: use `..=` for an inclusive range: `&(1..=2)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 2 warnings emitted\n "}, {"sha": "88527cc8783c83a6b455dace86b10911cbb231b4", "filename": "src/test/ui/parser/issue-68890-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -4,3 +4,4 @@ type X<'a> = (?'a) +;\n //~^ ERROR `?` may only modify trait bounds, not lifetime bounds\n //~| ERROR at least one trait is required for an object type\n //~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this was previously accepted by the compiler"}, {"sha": "37f38365b016f16fd53edce39cba98666a96ab94", "filename": "src/test/ui/parser/issue-68890-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -11,6 +11,8 @@ LL | type X<'a> = (?'a) +;\n    |              ^^^^^^^ help: use `dyn`: `dyn (?'a) +`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-68890-2.rs:3:14"}, {"sha": "0733b2d2df781453a82bf598e6dc2ef9cf0014b0", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -14,8 +14,10 @@ mac!('a);\n fn y<'a>(y: &mut 'a + Send) {\n     //~^ ERROR expected a path on the left-hand side of `+`, not `&mut 'a`\n     //~| WARNING trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n     //~| ERROR at least one trait is required for an object type\n     let z = y as &mut 'a + Send;\n     //~^ ERROR expected value, found trait `Send`\n     //~| WARNING trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }"}, {"sha": "9b05383dd7de0e1443e2e5946c11513981791398", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -22,7 +22,7 @@ LL | mac!('a);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0423]: expected value, found trait `Send`\n-  --> $DIR/issue-73568-lifetime-after-mut.rs:18:28\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:19:28\n    |\n LL |     let z = y as &mut 'a + Send;\n    |                            ^^^^ not a value\n@@ -34,12 +34,17 @@ LL | fn y<'a>(y: &mut 'a + Send) {\n    |                  ^^ help: use `dyn`: `dyn 'a`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-73568-lifetime-after-mut.rs:18:23\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:19:23\n    |\n LL |     let z = y as &mut 'a + Send;\n    |                       ^^ help: use `dyn`: `dyn 'a`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-73568-lifetime-after-mut.rs:14:18"}, {"sha": "0428ea0e2c1b1e74ce09efeeba5297d4d2f01410", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -12,4 +12,5 @@ fn main() {\n     //~^ ERROR lifetime in trait object type must be followed by `+`\n     //~| ERROR at least one trait is required for an object type\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }"}, {"sha": "8ae5611d89d196aa6d9ac0d8ba6f9b0ef77962fc", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -11,6 +11,8 @@ LL |     m!('static);\n    |        ^^^^^^^ help: use `dyn`: `dyn 'static`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/trait-object-macro-matcher.rs:11:8"}, {"sha": "a10add6d9e523c073c21b099161405d2605be2eb", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -39,20 +39,32 @@ fn inclusive_from_to() {\n }\n \n fn inclusive2_from_to() {\n-    if let 0...3 = 0 {} //~ ERROR `...` range patterns are deprecated\n-    if let 0...Y = 0 {} //~ ERROR `...` range patterns are deprecated\n-    if let X...3 = 0 {} //~ ERROR `...` range patterns are deprecated\n-    if let X...Y = 0 {} //~ ERROR `...` range patterns are deprecated\n+    if let 0...3 = 0 {}\n+    //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n+    if let 0...Y = 0 {}\n+    //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n+    if let X...3 = 0 {}\n+    //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n+    if let X...Y = 0 {}\n+    //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n     if let true...Y = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n     if let X...true = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n     if let .0...Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n+    //~| WARN this was previously accepted by the compiler\n     //~| ERROR `...` range patterns are deprecated\n     if let X... .0 = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR `...` range patterns are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }\n \n fn exclusive_from() {\n@@ -125,6 +137,7 @@ fn with_macro_expr_var() {\n             let $e1..$e2;\n             let $e1...$e2;\n             //~^ ERROR `...` range patterns are deprecated\n+            //~| WARN this was previously accepted by the compiler\n             let $e1..=$e2;\n         }\n     }"}, {"sha": "45f6b111e259cb03642bec49b5ab1a26cdd75b44", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 72, "deletions": 47, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -23,143 +23,143 @@ LL |     if let X..=.0 = 0 {}\n    |                ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:50:12\n+  --> $DIR/recover-range-pats.rs:60:12\n    |\n LL |     if let .0...Y = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:53:17\n+  --> $DIR/recover-range-pats.rs:64:17\n    |\n LL |     if let X... .0 = 0 {}\n    |                 ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:63:12\n+  --> $DIR/recover-range-pats.rs:75:12\n    |\n LL |     if let .0.. = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:69:13\n+  --> $DIR/recover-range-pats.rs:81:13\n    |\n LL |     if let 0..= = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:70:13\n+  --> $DIR/recover-range-pats.rs:82:13\n    |\n LL |     if let X..= = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:71:16\n+  --> $DIR/recover-range-pats.rs:83:16\n    |\n LL |     if let true..= = 0 {}\n    |                ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:73:12\n+  --> $DIR/recover-range-pats.rs:85:12\n    |\n LL |     if let .0..= = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:73:14\n+  --> $DIR/recover-range-pats.rs:85:14\n    |\n LL |     if let .0..= = 0 {}\n    |              ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:79:13\n+  --> $DIR/recover-range-pats.rs:91:13\n    |\n LL |     if let 0... = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:80:13\n+  --> $DIR/recover-range-pats.rs:92:13\n    |\n LL |     if let X... = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:81:16\n+  --> $DIR/recover-range-pats.rs:93:16\n    |\n LL |     if let true... = 0 {}\n    |                ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:83:12\n+  --> $DIR/recover-range-pats.rs:95:12\n    |\n LL |     if let .0... = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:83:14\n+  --> $DIR/recover-range-pats.rs:95:14\n    |\n LL |     if let .0... = 0 {}\n    |              ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:93:15\n+  --> $DIR/recover-range-pats.rs:105:15\n    |\n LL |     if let .. .0 = 0 {}\n    |               ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:103:15\n+  --> $DIR/recover-range-pats.rs:115:15\n    |\n LL |     if let ..=.0 = 0 {}\n    |               ^^ help: must have an integer part: `0.0`\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:109:12\n+  --> $DIR/recover-range-pats.rs:121:12\n    |\n LL |     if let ...3 = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:111:12\n+  --> $DIR/recover-range-pats.rs:123:12\n    |\n LL |     if let ...Y = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:113:12\n+  --> $DIR/recover-range-pats.rs:125:12\n    |\n LL |     if let ...true = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:116:15\n+  --> $DIR/recover-range-pats.rs:128:15\n    |\n LL |     if let ....3 = 0 {}\n    |               ^^ help: must have an integer part: `0.3`\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:116:12\n+  --> $DIR/recover-range-pats.rs:128:12\n    |\n LL |     if let ....3 = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:137:17\n+  --> $DIR/recover-range-pats.rs:150:17\n    |\n LL |             let ...$e;\n    |                 ^^^ help: use `..=` instead\n@@ -170,7 +170,7 @@ LL |     mac!(0);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:141:19\n+  --> $DIR/recover-range-pats.rs:154:19\n    |\n LL |             let $e...;\n    |                   ^^^ help: use `..` instead\n@@ -182,7 +182,7 @@ LL |     mac!(0);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:142:19\n+  --> $DIR/recover-range-pats.rs:155:19\n    |\n LL |             let $e..=;\n    |                   ^^^ help: use `..` instead\n@@ -204,58 +204,83 @@ note: the lint level is defined here\n    |\n LL | #![deny(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:43:13\n+  --> $DIR/recover-range-pats.rs:45:13\n    |\n LL |     if let 0...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:44:13\n+  --> $DIR/recover-range-pats.rs:48:13\n    |\n LL |     if let X...3 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:45:13\n+  --> $DIR/recover-range-pats.rs:51:13\n    |\n LL |     if let X...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:46:16\n+  --> $DIR/recover-range-pats.rs:54:16\n    |\n LL |     if let true...Y = 0 {}\n    |                ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:48:13\n+  --> $DIR/recover-range-pats.rs:57:13\n    |\n LL |     if let X...true = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:50:14\n+  --> $DIR/recover-range-pats.rs:60:14\n    |\n LL |     if let .0...Y = 0 {}\n    |              ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:53:13\n+  --> $DIR/recover-range-pats.rs:64:13\n    |\n LL |     if let X... .0 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:126:20\n+  --> $DIR/recover-range-pats.rs:138:20\n    |\n LL |             let $e1...$e2;\n    |                    ^^^ help: use `..=` for an inclusive range\n ...\n LL |     mac2!(0, 1);\n    |     ------------ in this macro invocation\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n@@ -325,31 +350,31 @@ LL |     if let X..=.0 = 0 {}\n    |            this is of type `u8`\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:46:12\n+  --> $DIR/recover-range-pats.rs:54:12\n    |\n LL |     if let true...Y = 0 {}\n    |            ^^^^   - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:48:16\n+  --> $DIR/recover-range-pats.rs:57:16\n    |\n LL |     if let X...true = 0 {}\n    |            -   ^^^^ this is of type `bool` but it should be `char` or numeric\n    |            |\n    |            this is of type `u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:50:12\n+  --> $DIR/recover-range-pats.rs:60:12\n    |\n LL |     if let .0...Y = 0 {}\n    |            ^^   - this is of type `u8`\n    |            |\n    |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:53:17\n+  --> $DIR/recover-range-pats.rs:64:17\n    |\n LL |     if let X... .0 = 0 {}\n    |            -    ^^   - this expression has type `u8`\n@@ -358,73 +383,73 @@ LL |     if let X... .0 = 0 {}\n    |            this is of type `u8`\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:61:12\n+  --> $DIR/recover-range-pats.rs:73:12\n    |\n LL |     if let true.. = 0 {}\n    |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:63:12\n+  --> $DIR/recover-range-pats.rs:75:12\n    |\n LL |     if let .0.. = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:71:12\n+  --> $DIR/recover-range-pats.rs:83:12\n    |\n LL |     if let true..= = 0 {}\n    |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:73:12\n+  --> $DIR/recover-range-pats.rs:85:12\n    |\n LL |     if let .0..= = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:81:12\n+  --> $DIR/recover-range-pats.rs:93:12\n    |\n LL |     if let true... = 0 {}\n    |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:83:12\n+  --> $DIR/recover-range-pats.rs:95:12\n    |\n LL |     if let .0... = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:91:14\n+  --> $DIR/recover-range-pats.rs:103:14\n    |\n LL |     if let ..true = 0 {}\n    |              ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:93:15\n+  --> $DIR/recover-range-pats.rs:105:15\n    |\n LL |     if let .. .0 = 0 {}\n    |               ^^ expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:101:15\n+  --> $DIR/recover-range-pats.rs:113:15\n    |\n LL |     if let ..=true = 0 {}\n    |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:103:15\n+  --> $DIR/recover-range-pats.rs:115:15\n    |\n LL |     if let ..=.0 = 0 {}\n    |               ^^ expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:113:15\n+  --> $DIR/recover-range-pats.rs:125:15\n    |\n LL |     if let ...true = 0 {}\n    |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:116:15\n+  --> $DIR/recover-range-pats.rs:128:15\n    |\n LL |     if let ....3 = 0 {}\n    |               ^^ expected integer, found floating-point number"}, {"sha": "7d55da7d09721a75758813eed37ac39820feeb68", "filename": "src/test/ui/parser/trait-object-trait-parens.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -9,12 +9,15 @@ fn main() {\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n+    //~| WARN this was previously accepted by the compiler\n+    let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n+    //~| WARN this was previously accepted by the compiler\n+    let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }"}, {"sha": "79b6892dc079a182e6dfc9a884ec5e09a70e467f", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -5,16 +5,16 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    |                        ^^^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/trait-object-trait-parens.rs:12:17\n+  --> $DIR/trait-object-trait-parens.rs:13:16\n    |\n-LL |     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n-   |                 ^^^^^^\n+LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   |                ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/trait-object-trait-parens.rs:16:46\n+  --> $DIR/trait-object-trait-parens.rs:18:44\n    |\n-LL |     let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n-   |                                              ^^^^^^^^\n+LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   |                                            ^^^^^^^^\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/trait-object-trait-parens.rs:8:16\n@@ -23,18 +23,26 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:12:16\n+  --> $DIR/trait-object-trait-parens.rs:13:16\n    |\n-LL |     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (?Sized) + (for<'a> Trait<'a>) + (Obj)`\n+LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn ?Sized + (for<'a> Trait<'a>) + (Obj)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:16:16\n+  --> $DIR/trait-object-trait-parens.rs:18:16\n+   |\n+LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> Trait<'a> + (Obj) + (?Sized)`\n    |\n-LL |     let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (for<'a> Trait<'a>) + (Obj) + (?Sized)`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:8:35\n@@ -48,23 +56,23 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-object-trait-parens.rs:12:49\n+  --> $DIR/trait-object-trait-parens.rs:13:47\n    |\n-LL |     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n-   |                           -------------------   ^^^^^ additional non-auto trait\n-   |                           |\n-   |                           first non-auto trait\n+LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   |                         -------------------   ^^^^^ additional non-auto trait\n+   |                         |\n+   |                         first non-auto trait\n    |\n    = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-object-trait-parens.rs:16:38\n+  --> $DIR/trait-object-trait-parens.rs:18:36\n    |\n-LL |     let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n-   |                 -----------------    ^^^^^ additional non-auto trait\n-   |                 |\n-   |                 first non-auto trait\n+LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   |                -----------------   ^^^^^ additional non-auto trait\n+   |                |\n+   |                first non-auto trait\n    |\n    = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>"}, {"sha": "de69c9bf2f384f8d0977d350318fc96cca2f72a4", "filename": "src/test/ui/range/exclusive-range-patterns-2021.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -0,0 +1,14 @@\n+// edition:2021\n+\n+fn main() {\n+    let n = 2;\n+    match n {\n+        0...3 => {}\n+        //~^ ERROR `...` range patterns are deprecated\n+        4...10 => {}\n+        //~^ ERROR `...` range patterns are deprecated\n+        (11...100) => {}\n+        //~^ ERROR `...` range patterns are deprecated\n+        _ => {}\n+    }\n+}"}, {"sha": "a967437041a547a68152f452739203367879f865", "filename": "src/test/ui/range/exclusive-range-patterns-2021.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fexclusive-range-patterns-2021.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -0,0 +1,27 @@\n+error[E0783]: `...` range patterns are deprecated\n+  --> $DIR/exclusive-range-patterns-2021.rs:6:9\n+   |\n+LL |         0...3 => {}\n+   |         ^---^\n+   |          |\n+   |          help: use `..=` for an inclusive range\n+\n+error[E0783]: `...` range patterns are deprecated\n+  --> $DIR/exclusive-range-patterns-2021.rs:8:9\n+   |\n+LL |         4...10 => {}\n+   |         ^---^^\n+   |          |\n+   |          help: use `..=` for an inclusive range\n+\n+error[E0783]: `...` range patterns are deprecated\n+  --> $DIR/exclusive-range-patterns-2021.rs:10:10\n+   |\n+LL |         (11...100) => {}\n+   |          ^^---^^^\n+   |            |\n+   |            help: use `..=` for an inclusive range\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0783`."}, {"sha": "6c01209967605fbc1117a545047c60919c5832fd", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -10,10 +10,11 @@ pub fn main() {\n     match &12 {\n         &(0..=9) => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         //~| HELP use `..=` for an inclusive range\n         &(10 ..=15) => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation\n-        //~^^ HELP add parentheses to clarify the precedence\n+        //~| HELP add parentheses to clarify the precedence\n         &(16..=20) => {}\n         _ => {}\n     }"}, {"sha": "ce763ba267798fc4c43c8f26dd443d493b11ed1f", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -10,10 +10,11 @@ pub fn main() {\n     match &12 {\n         &0...9 => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         //~| HELP use `..=` for an inclusive range\n         &10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation\n-        //~^^ HELP add parentheses to clarify the precedence\n+        //~| HELP add parentheses to clarify the precedence\n         &(16..=20) => {}\n         _ => {}\n     }"}, {"sha": "ffb833535c2f0cf37a06859b89b5c54fe96fe843", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -1,5 +1,5 @@\n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence.rs:14:10\n+  --> $DIR/range-inclusive-pattern-precedence.rs:15:10\n    |\n LL |         &10..=15 => {}\n    |          ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n@@ -15,6 +15,8 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "7fa2698a49603286d3c1c6277c69d9a7c4df55f5", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -9,6 +9,7 @@ fn main() {\n         // FIXME: can we add suggestions like `&(0..=9)`?\n         box 0...9 => {}\n         //~^ WARN `...` range patterns are deprecated\n+        //~| WARN this was previously accepted by the compiler\n         //~| HELP use `..=` for an inclusive range\n         box 10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "e8e62b485cc1d9615c614fbe99d960956090155c", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -1,5 +1,5 @@\n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence2.rs:13:13\n+  --> $DIR/range-inclusive-pattern-precedence2.rs:14:13\n    |\n LL |         box 10..=15 => {}\n    |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n@@ -15,6 +15,8 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "f5afbad9f78fe7741131a55d01199fb98b1b8807", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.fixed", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -14,12 +14,8 @@ pub struct Foo;\n mod test {\n     use crate::foo::foo;\n \n-    #[foo] //~ WARN: absolute paths must start with\n-    //~| WARN: previously accepted\n-    //~| WARN: absolute paths\n-    //~| WARN: previously accepted\n-    fn main() {\n-    }\n+    #[foo]\n+    fn main() {}\n }\n \n fn main() {"}, {"sha": "f5afbad9f78fe7741131a55d01199fb98b1b8807", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -14,12 +14,8 @@ pub struct Foo;\n mod test {\n     use crate::foo::foo;\n \n-    #[foo] //~ WARN: absolute paths must start with\n-    //~| WARN: previously accepted\n-    //~| WARN: absolute paths\n-    //~| WARN: previously accepted\n-    fn main() {\n-    }\n+    #[foo]\n+    fn main() {}\n }\n \n fn main() {"}, {"sha": "45502a5b880815550d49d793d20318cc5f0627ca", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c20c9219dae5ea56ce9bf1c211fafdc7da8700b9/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20c9219dae5ea56ce9bf1c211fafdc7da8700b9/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr?ref=c20c9219dae5ea56ce9bf1c211fafdc7da8700b9", "patch": "@@ -1,28 +0,0 @@\n-warning: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/suggestions-not-always-applicable.rs:17:5\n-   |\n-LL |     #[foo]\n-   |     ^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/suggestions-not-always-applicable.rs:8:9\n-   |\n-LL | #![warn(rust_2018_compatibility)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: `#[warn(absolute_paths_not_starting_with_crate)]` implied by `#[warn(rust_2018_compatibility)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-   = note: this warning originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/suggestions-not-always-applicable.rs:17:5\n-   |\n-LL |     #[foo]\n-   |     ^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n-   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n-   = note: this warning originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "b5c379ebc6eb94da5e5a716044ca41a269795cf3", "filename": "src/test/ui/suggestions/issue-61963.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -11,15 +11,17 @@ extern crate issue_61963_1;\n // generate code which would trigger the lint.\n \n pub struct Baz;\n-pub trait Bar { }\n+pub trait Bar {}\n pub struct Qux<T>(T);\n \n #[dom_struct]\n pub struct Foo {\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this was previously accepted by the compiler\n     qux: Qux<Qux<Baz>>,\n     bar: Box<Bar>,\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this was previously accepted by the compiler\n }\n \n fn main() {}"}, {"sha": "f8c58b6173477dc7711cfc5489ce7fdc24566862", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -1,5 +1,5 @@\n error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-61963.rs:21:14\n+  --> $DIR/issue-61963.rs:22:14\n    |\n LL |     bar: Box<Bar>,\n    |              ^^^ help: use `dyn`: `dyn Bar`\n@@ -9,12 +9,17 @@ note: the lint level is defined here\n    |\n LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n    |\n LL | pub struct Foo {\n    | ^^^ help: use `dyn`: `dyn pub`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "08355a55630f643bcc89f65965e66812bca0903c", "filename": "src/test/ui/traits/bound/not-on-bare-trait.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -1,12 +1,13 @@\n trait Foo {\n-    fn dummy(&self) { }\n+    fn dummy(&self) {}\n }\n \n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n     //~^ ERROR the size for values of type\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this was previously accepted by the compiler\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "418e67d56ea1d0fd4667cc665dc858f28024a9e5", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -5,6 +5,8 @@ LL | fn foo(_x: Foo + Send) {\n    |            ^^^^^^^^^^ help: use `dyn`: `dyn Foo + Send`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time\n   --> $DIR/not-on-bare-trait.rs:7:8"}, {"sha": "fb4589a48ec428b9be229534f7cbeda3ccf5e822", "filename": "src/tools/clippy/tests/ui/crashes/ice-3969.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-3969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-3969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-3969.stderr?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -5,18 +5,26 @@ LL |     for<'a> Dst<A + 'a>: Sized,\n    |                 ^^^^^^ help: use `dyn`: `dyn A + 'a`\n    |\n    = note: `-D bare-trait-objects` implied by `-D warnings`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/ice-3969.rs:27:16\n    |\n LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n    |                ^ help: use `dyn`: `dyn A`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/ice-3969.rs:27:57\n    |\n LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n    |                                                         ^ help: use `dyn`: `dyn A`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9696e35b7963f8a42f880c78f11ecb015a168e76", "filename": "src/tools/lint-docs/src/groups.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0f1781d04662041db5deaef89598a8edd53717/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs?ref=7a0f1781d04662041db5deaef89598a8edd53717", "patch": "@@ -13,6 +13,7 @@ static GROUP_DESCRIPTIONS: &[(&str, &str)] = &[\n     (\"nonstandard-style\", \"Violation of standard naming conventions\"),\n     (\"future-incompatible\", \"Lints that detect code that has future-compatibility problems\"),\n     (\"rust-2018-compatibility\", \"Lints used to transition code from the 2015 edition to 2018\"),\n+    (\"rust-2021-compatibility\", \"Lints used to transition code from the 2018 edition to 2021\"),\n ];\n \n type LintGroups = BTreeMap<String, BTreeSet<String>>;"}]}