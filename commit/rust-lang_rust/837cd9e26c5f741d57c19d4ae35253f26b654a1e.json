{"sha": "837cd9e26c5f741d57c19d4ae35253f26b654a1e", "node_id": "C_kwDOAAsO6NoAKDgzN2NkOWUyNmM1Zjc0MWQ1N2MxOWQ0YWUzNTI1M2YyNmI2NTRhMWU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-28T06:45:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-28T06:45:50Z"}, "message": "Rollup merge of #94640 - Pointerbender:issue-71146-partial-stabilization, r=yaahc\n\nPartially stabilize `(const_)slice_ptr_len` feature by stabilizing `NonNull::len`\n\nThis PR partially stabilizes features `const_slice_ptr_len` and `slice_ptr_len` by only stabilizing `NonNull::len`. This partial stabilization is tracked under features `slice_ptr_len_nonnull` and `const_slice_ptr_len_nonnull`, for which this PR can serve as the tracking issue.\n\nTo summarize the discussion from #71146 leading up to this partial stabilization request:\n\nIt's currently a bit footgunny to obtain the length of a raw slice pointer, stabilization of `NonNull:len` will help with removing these footguns. Some example footguns are:\n\n```rust\n/// # Safety\n/// The caller must ensure that `ptr`:\n/// 1. does not point to memory that was previously allocated but is now deallocated;\n/// 2. is within the bounds of a single allocated object;\n/// 3. does not to point to a slice for which the length exceeds `isize::MAX` bytes;\n/// 4. points to a properly aligned address;\n/// 5. does not point to uninitialized memory;\n/// 6. does not point to a mutably borrowed memory location.\npub unsafe fn ptr_len<T>(ptr: core::ptr::NonNull<[T]>) -> usize {\n   (&*ptr.as_ptr()).len()\n}\n```\n\nA slightly less complicated version (but still more complicated than it needs to be):\n\n```rust\n/// # Safety\n/// The caller must ensure that the start of `ptr`:\n/// 1. does not point to memory that was previously allocated but is now deallocated;\n/// 2. must be within the bounds of a single allocated object.\npub unsafe fn ptr_len<T>(ptr: NonNull<[T]>) -> usize {\n   (&*(ptr.as_ptr() as *const [()])).len()\n}\n```\n\nThis PR does not stabilize `<*const [T]>::len` and  `<*mut [T]>::len` because the tracking issue #71146 list a potential blocker for these methods, but this blocker [does not apply](https://github.com/rust-lang/rust/issues/71146#issuecomment-808735714) to `NonNull::len`.\n\nWe should probably also ping the [Constant Evaluation WG](https://github.com/rust-lang/const-eval) since this PR includes a `#[rustc_allow_const_fn_unstable(const_slice_ptr_len)]`. My instinct here is that this will probably be okay because the pointer is not actually dereferenced and `len()` does not touch the address component of the pointer, but would be best to double check :)\n\nOne potential down-side was raised that stabilizing `NonNull::len` could lead to encouragement of coding patterns like:\n\n```\npub fn ptr_len<T>(ptr: *mut [T]) -> usize {\n   NonNull::new(ptr).unwrap().len()\n}\n```\n\nwhich unnecessarily assert non-nullness. However, these are much less of a footgun than the above examples and this should be resolved when `slice_ptr_len` fully stabilizes eventually.", "tree": {"sha": "4602717402e4fc36a9ee1fd0b07b701faf884f79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4602717402e4fc36a9ee1fd0b07b701faf884f79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837cd9e26c5f741d57c19d4ae35253f26b654a1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJikcUfCRBK7hj4Ov3rIwAAqlYIAI8n2bpOckokumAnfpohv5NO\nVHltkQMJXpPyo4/ogVswsLX2gMIuesZPUjsDxtfPf6Dn/ruzsLh1agqI1Tih7zmj\nyzzivILlmBw6hc4Wm8xuu/91xSztTPiTNB+kXq0G9c8dyfc86PllzRR23uqdVvjA\n1idrmJ3tTf9wxw3fohQRz3KW8dkV4e8dVx5yT+ZPzCB9A3vYyXeglY3p8z90DGLZ\n5tp5DSgqmSV7z2ku7jGn9Fri6MwMduusVMDeXStjp8XCF9TwH35LWR5QVFx0kM6+\nT9bquBrs3iDcX3v0j2CiKodUJ6B5cJfzg4LDOl3Qq0uGKcMbfdZTqTlvbA5REG8=\n=I3m0\n-----END PGP SIGNATURE-----\n", "payload": "tree 4602717402e4fc36a9ee1fd0b07b701faf884f79\nparent ed76b773b57cf0aa48ec4e2fc6d6a3f7a9079491\nparent 021a7e48775e1b3ddd12a5463dc3f252da037644\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653720350 +0200\ncommitter GitHub <noreply@github.com> 1653720350 +0200\n\nRollup merge of #94640 - Pointerbender:issue-71146-partial-stabilization, r=yaahc\n\nPartially stabilize `(const_)slice_ptr_len` feature by stabilizing `NonNull::len`\n\nThis PR partially stabilizes features `const_slice_ptr_len` and `slice_ptr_len` by only stabilizing `NonNull::len`. This partial stabilization is tracked under features `slice_ptr_len_nonnull` and `const_slice_ptr_len_nonnull`, for which this PR can serve as the tracking issue.\n\nTo summarize the discussion from #71146 leading up to this partial stabilization request:\n\nIt's currently a bit footgunny to obtain the length of a raw slice pointer, stabilization of `NonNull:len` will help with removing these footguns. Some example footguns are:\n\n```rust\n/// # Safety\n/// The caller must ensure that `ptr`:\n/// 1. does not point to memory that was previously allocated but is now deallocated;\n/// 2. is within the bounds of a single allocated object;\n/// 3. does not to point to a slice for which the length exceeds `isize::MAX` bytes;\n/// 4. points to a properly aligned address;\n/// 5. does not point to uninitialized memory;\n/// 6. does not point to a mutably borrowed memory location.\npub unsafe fn ptr_len<T>(ptr: core::ptr::NonNull<[T]>) -> usize {\n   (&*ptr.as_ptr()).len()\n}\n```\n\nA slightly less complicated version (but still more complicated than it needs to be):\n\n```rust\n/// # Safety\n/// The caller must ensure that the start of `ptr`:\n/// 1. does not point to memory that was previously allocated but is now deallocated;\n/// 2. must be within the bounds of a single allocated object.\npub unsafe fn ptr_len<T>(ptr: NonNull<[T]>) -> usize {\n   (&*(ptr.as_ptr() as *const [()])).len()\n}\n```\n\nThis PR does not stabilize `<*const [T]>::len` and  `<*mut [T]>::len` because the tracking issue #71146 list a potential blocker for these methods, but this blocker [does not apply](https://github.com/rust-lang/rust/issues/71146#issuecomment-808735714) to `NonNull::len`.\n\nWe should probably also ping the [Constant Evaluation WG](https://github.com/rust-lang/const-eval) since this PR includes a `#[rustc_allow_const_fn_unstable(const_slice_ptr_len)]`. My instinct here is that this will probably be okay because the pointer is not actually dereferenced and `len()` does not touch the address component of the pointer, but would be best to double check :)\n\nOne potential down-side was raised that stabilizing `NonNull::len` could lead to encouragement of coding patterns like:\n\n```\npub fn ptr_len<T>(ptr: *mut [T]) -> usize {\n   NonNull::new(ptr).unwrap().len()\n}\n```\n\nwhich unnecessarily assert non-nullness. However, these are much less of a footgun than the above examples and this should be resolved when `slice_ptr_len` fully stabilizes eventually.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837cd9e26c5f741d57c19d4ae35253f26b654a1e", "html_url": "https://github.com/rust-lang/rust/commit/837cd9e26c5f741d57c19d4ae35253f26b654a1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837cd9e26c5f741d57c19d4ae35253f26b654a1e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed76b773b57cf0aa48ec4e2fc6d6a3f7a9079491", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed76b773b57cf0aa48ec4e2fc6d6a3f7a9079491", "html_url": "https://github.com/rust-lang/rust/commit/ed76b773b57cf0aa48ec4e2fc6d6a3f7a9079491"}, {"sha": "021a7e48775e1b3ddd12a5463dc3f252da037644", "url": "https://api.github.com/repos/rust-lang/rust/commits/021a7e48775e1b3ddd12a5463dc3f252da037644", "html_url": "https://github.com/rust-lang/rust/commit/021a7e48775e1b3ddd12a5463dc3f252da037644"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "f3ef094cbccc5ea191ef838d9d8e9987e980ebc3", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/837cd9e26c5f741d57c19d4ae35253f26b654a1e/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837cd9e26c5f741d57c19d4ae35253f26b654a1e/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=837cd9e26c5f741d57c19d4ae35253f26b654a1e", "patch": "@@ -499,14 +499,15 @@ impl<T> NonNull<[T]> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// #![feature(slice_ptr_len, nonnull_slice_from_raw_parts)]\n+    /// #![feature(nonnull_slice_from_raw_parts)]\n     /// use std::ptr::NonNull;\n     ///\n     /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\n     /// assert_eq!(slice.len(), 3);\n     /// ```\n-    #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n-    #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n+    #[stable(feature = \"slice_ptr_len_nonnull\", since = \"1.63.0\")]\n+    #[rustc_const_stable(feature = \"const_slice_ptr_len_nonnull\", since = \"1.63.0\")]\n+    #[rustc_allow_const_fn_unstable(const_slice_ptr_len)]\n     #[must_use]\n     #[inline]\n     pub const fn len(self) -> usize {"}]}