{"sha": "d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YTk0N2NlOGZkNGY1M2I3YTI3M2IzOWE4NGE3YWYwZmUzNGQyYzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-20T19:00:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-02T15:47:10Z"}, "message": "use new `note_expected_found` API\n\nThis API pulls the \"expected type foo, found type bar\" out after the\nmain snippet. There are some other places where it makes sense, but this\nis a start.", "tree": {"sha": "405710d977ddcfe1cb695d87e008edbb6f0b68fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/405710d977ddcfe1cb695d87e008edbb6f0b68fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "html_url": "https://github.com/rust-lang/rust/commit/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11dc974a38fd533aa692cea213305056cd3a6902", "url": "https://api.github.com/repos/rust-lang/rust/commits/11dc974a38fd533aa692cea213305056cd3a6902", "html_url": "https://github.com/rust-lang/rust/commit/11dc974a38fd533aa692cea213305056cd3a6902"}], "stats": {"total": 95, "additions": 46, "deletions": 49}, "files": [{"sha": "88972beb31b093e06ac2bb7abbe3f2363fbb502e", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "patch": "@@ -249,12 +249,12 @@ pub trait ErrorReporting<'tcx> {\n                                      terr: &TypeError<'tcx>)\n                                      -> DiagnosticBuilder<'tcx>;\n \n-    fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<String>;\n+    fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<(String, String)>;\n \n     fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + TypeFoldable<'tcx>>(\n         &self,\n         exp_found: &ty::error::ExpectedFound<T>)\n-        -> Option<String>;\n+        -> Option<(String, String)>;\n \n     fn report_concrete_failure(&self,\n                                origin: SubregionOrigin<'tcx>,\n@@ -535,7 +535,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                          trace: TypeTrace<'tcx>,\n                          terr: &TypeError<'tcx>)\n                          -> DiagnosticBuilder<'tcx> {\n-        let expected_found_str = match self.values_str(&trace.values) {\n+        let (expected, found) = match self.values_str(&trace.values) {\n             Some(v) => v,\n             None => {\n                 return self.tcx.sess.diagnostic().struct_dummy(); /* derived error */\n@@ -548,18 +548,17 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             false\n         };\n \n-        let expected_found_str = if is_simple_error {\n-            expected_found_str\n-        } else {\n-            format!(\"{} ({})\", expected_found_str, terr)\n-        };\n-\n         let mut err = struct_span_err!(self.tcx.sess,\n                                        trace.origin.span(),\n                                        E0308,\n-                                       \"{}: {}\",\n-                                       trace.origin,\n-                                       expected_found_str);\n+                                       \"{}\",\n+                                       trace.origin);\n+\n+        if !is_simple_error {\n+            err = err.note_expected_found(&\"type\", &expected, &found);\n+        }\n+\n+        err = err.span_label(trace.origin.span(), &terr);\n \n         self.check_and_note_conflicting_crates(&mut err, terr, trace.origin.span());\n \n@@ -574,6 +573,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             },\n             _ => ()\n         }\n+\n         err\n     }\n \n@@ -631,7 +631,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n \n     /// Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\n     /// error.\n-    fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<String> {\n+    fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<(String, String)> {\n         match *values {\n             infer::Types(ref exp_found) => self.expected_found_str(exp_found),\n             infer::TraitRefs(ref exp_found) => self.expected_found_str(exp_found),\n@@ -642,7 +642,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n     fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + TypeFoldable<'tcx>>(\n         &self,\n         exp_found: &ty::error::ExpectedFound<T>)\n-        -> Option<String>\n+        -> Option<(String, String)>\n     {\n         let expected = exp_found.expected.resolve(self);\n         if expected.references_error() {\n@@ -654,9 +654,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             return None;\n         }\n \n-        Some(format!(\"expected `{}`, found `{}`\",\n-                     expected,\n-                     found))\n+        Some((format!(\"{}\", expected), format!(\"{}\", found)))\n     }\n \n     fn report_generic_bound_failure(&self,\n@@ -1751,11 +1749,11 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n                 };\n \n                 match self.values_str(&trace.values) {\n-                    Some(values_str) => {\n+                    Some((expected, found)) => {\n                         err.span_note(\n                             trace.origin.span(),\n-                            &format!(\"...so that {} ({})\",\n-                                    desc, values_str));\n+                            &format!(\"...so that {} (expected {}, found {})\",\n+                                    desc, expected, found));\n                     }\n                     None => {\n                         // Really should avoid printing this error at"}, {"sha": "544fb117f361411fea223be475809b5594607680", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "patch": "@@ -116,8 +116,8 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n \n             // Check that the types of the end-points can be unified.\n             let types_unify = require_same_types(\n-                    tcx, Some(fcx.infcx()), false, pat.span, rhs_ty, lhs_ty,\n-                    || \"mismatched types in range\".to_string()\n+                tcx, Some(fcx.infcx()), false, pat.span, rhs_ty, lhs_ty,\n+                \"mismatched types in range\",\n             );\n \n             // It's ok to return without a message as `require_same_types` prints an error."}, {"sha": "b71ee8722ab607be5111f6b6d35dd3e39788ae6a", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "patch": "@@ -61,10 +61,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: &TyCtxt<'tcx>, it: &hir::ForeignItem,\n                            it.span,\n                            i_ty.ty,\n                            fty,\n-                           || {\n-                format!(\"intrinsic has wrong type: expected `{}`\",\n-                         fty)\n-            });\n+                           \"intrinsic has wrong type\");\n     }\n }\n "}, {"sha": "492dbce9bdf4571911694c14fe3e42c500565aa4", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "patch": "@@ -418,8 +418,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n         let _ = ::require_same_types(\n             fcx.tcx(), Some(fcx.infcx()), false, span,\n             sig.inputs[0], rcvr_ty,\n-            || \"mismatched method receiver\".to_owned()\n-        );\n+            \"mismatched method receiver\");\n     }\n \n     fn check_variances_for_type_defn(&self,"}, {"sha": "51534a46ddac33bf41def5c559b47c6baed01817", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "patch": "@@ -1044,8 +1044,9 @@ fn convert_enum_def<'tcx>(tcx: &TyCtxt<'tcx>,\n                           -> ty::AdtDefMaster<'tcx>\n {\n     fn print_err(tcx: &TyCtxt, span: Span, ty: ty::Ty, cv: ConstVal) {\n-        span_err!(tcx.sess, span, E0079, \"mismatched types: expected `{}` got `{}`\",\n-                  ty, cv.description());\n+        struct_span_err!(tcx.sess, span, E0079, \"mismatched types\")\n+            .note_expected_found(&\"type\", &ty, &format!(\"{}\", cv.description()))\n+            .emit();\n     }\n     fn evaluate_disr_expr<'tcx>(tcx: &TyCtxt<'tcx>,\n                                 repr_ty: attr::IntType,"}, {"sha": "c51304120a89c61abebc8315c7bc70ea38e77c4e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "patch": "@@ -185,15 +185,14 @@ fn require_c_abi_if_variadic(tcx: &TyCtxt,\n     }\n }\n \n-fn require_same_types<'a, 'tcx, M>(tcx: &TyCtxt<'tcx>,\n-                                   maybe_infcx: Option<&infer::InferCtxt<'a, 'tcx>>,\n-                                   t1_is_expected: bool,\n-                                   span: Span,\n-                                   t1: Ty<'tcx>,\n-                                   t2: Ty<'tcx>,\n-                                   msg: M)\n-                                   -> bool where\n-    M: FnOnce() -> String,\n+fn require_same_types<'a, 'tcx>(tcx: &TyCtxt<'tcx>,\n+                                maybe_infcx: Option<&infer::InferCtxt<'a, 'tcx>>,\n+                                t1_is_expected: bool,\n+                                span: Span,\n+                                t1: Ty<'tcx>,\n+                                t2: Ty<'tcx>,\n+                                msg: &str)\n+                                -> bool\n {\n     let result = match maybe_infcx {\n         None => {\n@@ -208,7 +207,17 @@ fn require_same_types<'a, 'tcx, M>(tcx: &TyCtxt<'tcx>,\n     match result {\n         Ok(_) => true,\n         Err(ref terr) => {\n-            let mut err = struct_span_err!(tcx.sess, span, E0211, \"{}: {}\", msg(), terr);\n+            let mut err = struct_span_err!(tcx.sess, span, E0211, \"{}\", msg);\n+            err = err.span_label(span, &terr);\n+            let (mut expected_ty, mut found_ty) =\n+                if t1_is_expected {(t1, t2)} else {(t2, t1)};\n+            if let Some(infcx) = maybe_infcx {\n+                expected_ty = infcx.resolve_type_vars_if_possible(&expected_ty);\n+                found_ty = infcx.resolve_type_vars_if_possible(&found_ty);\n+            }\n+            err = err.note_expected_found(&\"type\",\n+                                          &expected_ty,\n+                                          &found_ty);\n             tcx.note_and_explain_type_err(&mut err, terr, span);\n             err.emit();\n             false\n@@ -250,10 +259,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n             });\n \n             require_same_types(tcx, None, false, main_span, main_t, se_ty,\n-                || {\n-                    format!(\"main function expects type: `{}`\",\n-                             se_ty)\n-                });\n+                               \"main function has wrong type\");\n         }\n         _ => {\n             span_bug!(main_span,\n@@ -301,11 +307,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n             });\n \n             require_same_types(tcx, None, false, start_span, start_t, se_ty,\n-                || {\n-                    format!(\"start function expects type: `{}`\",\n-                             se_ty)\n-                });\n-\n+                               \"start function has wrong type\");\n         }\n         _ => {\n             span_bug!(start_span,"}]}