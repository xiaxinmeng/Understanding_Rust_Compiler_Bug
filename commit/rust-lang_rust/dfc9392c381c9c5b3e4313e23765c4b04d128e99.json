{"sha": "dfc9392c381c9c5b3e4313e23765c4b04d128e99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYzkzOTJjMzgxYzljNWIzZTQzMTNlMjM3NjVjNGIwNGQxMjhlOTk=", "commit": {"author": {"name": "Jed Estep", "email": "aje@jhu.edu", "date": "2013-06-26T02:33:02Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-26T22:08:56Z"}, "message": "iterators use deque ordering", "tree": {"sha": "0620de52b37a2aef0a524c8afc4f119bf226753e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0620de52b37a2aef0a524c8afc4f119bf226753e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfc9392c381c9c5b3e4313e23765c4b04d128e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc9392c381c9c5b3e4313e23765c4b04d128e99", "html_url": "https://github.com/rust-lang/rust/commit/dfc9392c381c9c5b3e4313e23765c4b04d128e99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfc9392c381c9c5b3e4313e23765c4b04d128e99/comments", "author": {"login": "jedestep", "id": 1072527, "node_id": "MDQ6VXNlcjEwNzI1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1072527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedestep", "html_url": "https://github.com/jedestep", "followers_url": "https://api.github.com/users/jedestep/followers", "following_url": "https://api.github.com/users/jedestep/following{/other_user}", "gists_url": "https://api.github.com/users/jedestep/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedestep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedestep/subscriptions", "organizations_url": "https://api.github.com/users/jedestep/orgs", "repos_url": "https://api.github.com/users/jedestep/repos", "events_url": "https://api.github.com/users/jedestep/events{/privacy}", "received_events_url": "https://api.github.com/users/jedestep/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7a742a067dcd6e8dbcf1da2bbcf203147562cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7a742a067dcd6e8dbcf1da2bbcf203147562cf", "html_url": "https://github.com/rust-lang/rust/commit/4f7a742a067dcd6e8dbcf1da2bbcf203147562cf"}], "stats": {"total": 121, "additions": 72, "deletions": 49}, "files": [{"sha": "a33314b67bc5ebd44d148ae61aff9d6be41642a5", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 72, "deletions": 49, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/dfc9392c381c9c5b3e4313e23765c4b04d128e99/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc9392c381c9c5b3e4313e23765c4b04d128e99/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=dfc9392c381c9c5b3e4313e23765c4b04d128e99", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n //! A double-ended queue implemented as a circular buffer\n-\n use core::prelude::*;\n \n use core::uint;\n@@ -156,98 +155,122 @@ impl<T> Deque<T> {\n \n     /// Front-to-back iterator.\n     pub fn iter<'a>(&'a self) -> DequeIterator<'a, T> {\n-\tDequeIterator { iter: self.elts.iter() }\n+    DequeIterator { idx: self.lo, nelts: self.nelts, used: 0, vec: self.elts }\n     }\n     \n     /// Front-to-back iterator which returns mutable values.\n     pub fn mut_iter<'a>(&'a mut self) -> DequeMutIterator<'a, T> {\n-\tDequeMutIterator { iter: self.elts.mut_iter() }\n+    DequeMutIterator { idx: self.lo, nelts: self.nelts, used: 0, vec: self.elts }\n     }\n \n     /// Back-to-front iterator.\n     pub fn rev_iter<'a>(&'a self) -> DequeRevIterator<'a, T> {\n-\tDequeRevIterator { iter: self.elts.rev_iter() }\n+    DequeRevIterator { idx: self.hi - 1u, nelts: self.nelts, used: 0, vec: self.elts }\n     }\n \n     /// Back-to-front iterator which returns mutable values.\n     pub fn mut_rev_iter<'a>(&'a mut self) -> DequeMutRevIterator<'a, T> {\n-\tDequeMutRevIterator { iter: self.elts.mut_rev_iter() }\n+    DequeMutRevIterator { idx: self.hi - 1u, nelts: self.nelts, used: 0, vec: self.elts }\n     }\n }\n \n /// Deque iterator\n pub struct DequeIterator<'self, T> {\n-\tpriv iter: vec::VecIterator<'self, Option<T>>\n+    priv idx: uint,\n+    priv nelts: uint,\n+    priv used: uint,\n+    priv vec: &'self [Option<T>]\n }\n \n /// Deque reverse iterator\n pub struct DequeRevIterator<'self, T> {\n-\tpriv iter: vec::VecRevIterator<'self, Option<T>>\n+    priv idx: uint,\n+    priv nelts: uint,\n+    priv used: uint,\n+    priv vec: &'self [Option<T>]\n }\n /// Deque mutable iterator\n pub struct DequeMutIterator<'self, T> {\n-\tpriv iter: vec::VecMutIterator<'self, Option<T>>\n+    priv idx: uint,\n+    priv nelts: uint,\n+    priv used: uint,\n+    priv vec: &'self mut [Option<T>]\n+\n }\n \n /// Deque mutable reverse iterator\n pub struct DequeMutRevIterator<'self, T> {\n-\tpriv iter: vec::VecMutRevIterator<'self, Option<T>>\n+    priv idx: uint,\n+    priv nelts: uint,\n+    priv used: uint,\n+    priv vec: &'self mut [Option<T>]\n }\n \n /// Iterator visiting elements of the deque from front to back\n impl<'self, T> Iterator<&'self T> for DequeIterator<'self, T> {\n-\t#[inline]\n-\tfn next(&mut self) -> Option<&'self T> {\n-\t\tfor self.iter.advance |elt| {\n-\t\t\tmatch elt {\n-\t\t\t\t&Some(ref e) => return Some(e),\n-\t\t\t\t&None => {},\n-\t\t\t}\n-\t\t}\n-\t\tNone\n-\t}\n+    fn next(&mut self) -> Option<&'self T> {\n+        if self.used >= self.nelts {\n+            return None;\n+        }\n+        let ret = match self.vec[self.idx % self.vec.len()] {\n+            Some(ref e) => Some(e),\n+            None => None\n+        };\n+        self.idx += 1;\n+        self.used += 1;\n+        ret\n+    }\n }\n \n /// Iterator visiting elements of the deque mutably from front to back\n impl<'self, T> Iterator<&'self mut T> for DequeMutIterator<'self, T> {\n-\t#[inline]\n-\tfn next(&mut self) -> Option<&'self mut T> {\n-\t\tfor self.iter.advance |elt| {\n-\t\t\tmatch elt {\n-\t\t\t\t&Some(ref mut e) => return Some(e),\n-\t\t\t\t&None => {},\n-\t\t\t}\n-\t\t}\n-\t\tNone\n-\t}\n+    fn next(&mut self) -> Option<&'self mut T> {\n+        if self.used >= self.nelts {\n+            return None;\n+        }\n+        let ret = match self.vec[self.idx % self.vec.len()] {\n+            Some(ref mut e) => Some(e),\n+            None => None\n+        };\n+        self.idx += 1;\n+        self.used += 1;\n+        ret\n+    }\n }\n \n /// Iterator visiting elements of the deque from back to front\n impl<'self, T> Iterator<&'self T> for DequeRevIterator<'self, T> {\n-\t#[inline]\n-\tfn next(&mut self) -> Option<&'self T> {\n-\t\tfor self.iter.advance |elt| {\n-\t\t\tmatch elt {\n-\t\t\t\t&Some(ref e) => return Some(e),\n-\t\t\t\t&None => {},\n-\t\t\t}\n-\t\t}\n-\t\tNone\n-\t}\n+    #[inline]\n+    fn next(&mut self) -> Option<&'self T> {\n+        if self.used >= self.nelts {\n+            return None;\n+        }\n+        let ret = match self.vec[self.idx % self.vec.len()] {\n+            Some(ref e) => Some(e),\n+            None => None\n+        };\n+        self.idx -= 1;\n+        self.used += 1;\n+        ret\n+\n+    }\n }\n \n /// Iterator visiting elements of the deque mutably from back to front\n impl<'self, T> Iterator<&'self mut T> for DequeMutRevIterator<'self, T> {\n-\t#[inline]\n-\tfn next(&mut self) -> Option<&'self mut T> {\n-\t\tfor self.iter.advance |elt| {\n-\t\t\tmatch elt {\n-\t\t\t\t&Some(ref mut e) => return Some(e),\n-\t\t\t\t&None => {},\n-\t\t\t}\n-\t\t}\n-\t\tNone\n-\t}\n+    #[inline]\n+    fn next(&mut self) -> Option<&'self mut T> {\n+        if self.used >= self.nelts {\n+            return None;\n+        }\n+        let ret = match self.vec[self.idx % self.vec.len()] {\n+            Some(ref mut e) => Some(e),\n+            None => None\n+        };\n+        self.idx -= 1;\n+        self.used += 1;\n+        ret\n+    }\n }\n \n /// Grow is only called on full elts, so nelts is also len(elts), unlike"}]}