{"sha": "d77248e6d201aca593bac3393bd7ad0159909cff", "node_id": "C_kwDOAAsO6NoAKGQ3NzI0OGU2ZDIwMWFjYTU5M2JhYzMzOTNiZDdhZDAxNTk5MDljZmY", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-15T20:27:41Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-15T20:27:41Z"}, "message": "nits", "tree": {"sha": "b2a78fb0c3cf91d396da35def9535b3cffdc49db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2a78fb0c3cf91d396da35def9535b3cffdc49db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d77248e6d201aca593bac3393bd7ad0159909cff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d77248e6d201aca593bac3393bd7ad0159909cff", "html_url": "https://github.com/rust-lang/rust/commit/d77248e6d201aca593bac3393bd7ad0159909cff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d77248e6d201aca593bac3393bd7ad0159909cff/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af8fb793697734bf3e19bcb1b5d152d617bb303", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af8fb793697734bf3e19bcb1b5d152d617bb303", "html_url": "https://github.com/rust-lang/rust/commit/6af8fb793697734bf3e19bcb1b5d152d617bb303"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "63b2088f7fc099f7a0183dd7d6f3535ca54cd408", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d77248e6d201aca593bac3393bd7ad0159909cff/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77248e6d201aca593bac3393bd7ad0159909cff/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=d77248e6d201aca593bac3393bd7ad0159909cff", "patch": "@@ -38,6 +38,11 @@ where\n     })\n }\n \n+// FIXME(valtrees): This function is necessary because `fold_regions`\n+// panics for mir constants in the visitor.\n+//\n+// Once `visit_mir_constant` is removed we can also remove this function\n+// and just use `renumber_regions`.\n fn renumber_regions_in_mir_constant<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     value: ConstantKind<'tcx>,"}, {"sha": "500f9ae08c5b66749d6626e0822a16934c5bbf67", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d77248e6d201aca593bac3393bd7ad0159909cff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77248e6d201aca593bac3393bd7ad0159909cff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=d77248e6d201aca593bac3393bd7ad0159909cff", "patch": "@@ -1816,12 +1816,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {\n         if let Operand::Constant(constant) = op {\n             let maybe_uneval = match constant.literal {\n-                ConstantKind::Ty(ct) => match ct.kind() {\n-                    ty::ConstKind::Unevaluated(uv) => Some(uv.expand()),\n-                    _ => None,\n-                },\n+                ConstantKind::Val(..) | ConstantKind::Ty(_) => None,\n                 ConstantKind::Unevaluated(uv, _) => Some(uv),\n-                ConstantKind::Val(..) => None,\n             };\n \n             if let Some(uv) = maybe_uneval {"}, {"sha": "6b4ed9b9d4053911b786715c1ef1060495060be8", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d77248e6d201aca593bac3393bd7ad0159909cff/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77248e6d201aca593bac3393bd7ad0159909cff/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=d77248e6d201aca593bac3393bd7ad0159909cff", "patch": "@@ -117,17 +117,7 @@ pub(crate) fn codegen_constant<'tcx>(\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n     let (const_val, ty) = match fx.monomorphize(constant.literal) {\n-        ConstantKind::Ty(const_) => match const_.kind() {\n-            ConstKind::Value(valtree) => {\n-                (fx.tcx.valtree_to_const_val((const_.ty(), valtree)), const_.ty())\n-            }\n-            ConstKind::Unevaluated(_) => bug!(\"expected constant to be evaluated at this stage\"),\n-            ConstKind::Param(_)\n-            | ConstKind::Infer(_)\n-            | ConstKind::Bound(_, _)\n-            | ConstKind::Placeholder(_)\n-            | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n-        },\n+        ConstantKind::Ty(const_) => unreachable!(\"{:?}\", const_),\n         ConstantKind::Unevaluated(ty::Unevaluated { def, substs, promoted }, ty)\n             if fx.tcx.is_static(def.did) =>\n         {"}, {"sha": "2fddb00d719cd687b31d142ffb473336c8eebd23", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d77248e6d201aca593bac3393bd7ad0159909cff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77248e6d201aca593bac3393bd7ad0159909cff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=d77248e6d201aca593bac3393bd7ad0159909cff", "patch": "@@ -2643,6 +2643,7 @@ impl<'tcx> Display for ConstantKind<'tcx> {\n         match *self {\n             ConstantKind::Ty(c) => pretty_print_const(c, fmt, true),\n             ConstantKind::Val(val, ty) => pretty_print_const_value(val, ty, fmt, true),\n+            // FIXME(valtrees): Correctly print mir constants.\n             ConstantKind::Unevaluated(..) => {\n                 fmt.write_str(\"_\")?;\n                 Ok(())"}, {"sha": "37e78f4ac07d019bdc085ac14bda3cc68b2f8db1", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d77248e6d201aca593bac3393bd7ad0159909cff/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77248e6d201aca593bac3393bd7ad0159909cff/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=d77248e6d201aca593bac3393bd7ad0159909cff", "patch": "@@ -307,9 +307,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                             // Promoteds must lint and not error as the user didn't ask for them\n                             true\n                         }\n-                        ConstantKind::Unevaluated(_, ty) | ConstantKind::Val(_, ty) => {\n-                            ty.needs_subst()\n-                        }\n+                        ConstantKind::Unevaluated(..) | ConstantKind::Val(..) => c.needs_subst(),\n                     };\n                     if lint_only {\n                         // Out of backwards compatibility we cannot report hard errors in unused"}]}