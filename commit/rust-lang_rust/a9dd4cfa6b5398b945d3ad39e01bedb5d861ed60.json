{"sha": "a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "node_id": "C_kwDOAAsO6NoAKGE5ZGQ0Y2ZhNmI1Mzk4Yjk0NWQzYWQzOWUwMWJlZGI1ZDg2MWVkNjA", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2022-02-08T09:52:11Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-19T12:21:45Z"}, "message": "Add and use stability helper methods\n\nThis avoids an ambiguity (when reading) where `.level.is_stable()` is\nnot immediately clear whether it is general stability or const\nstability.", "tree": {"sha": "32f0ae3100e71fb9a980dd1db74aaabf2be00fbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f0ae3100e71fb9a980dd1db74aaabf2be00fbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "html_url": "https://github.com/rust-lang/rust/commit/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f53fc41cfcb49bb47dab47962e045dd007f9ba9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f53fc41cfcb49bb47dab47962e045dd007f9ba9f", "html_url": "https://github.com/rust-lang/rust/commit/f53fc41cfcb49bb47dab47962e045dd007f9ba9f"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "2704cb8d78538da8497e3d793e4eb97591077f82", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "patch": "@@ -101,6 +101,16 @@ pub struct Stability {\n     pub feature: Symbol,\n }\n \n+impl Stability {\n+    pub fn is_unstable(&self) -> bool {\n+        self.level.is_unstable()\n+    }\n+\n+    pub fn is_stable(&self) -> bool {\n+        self.level.is_stable()\n+    }\n+}\n+\n /// Represents the `#[rustc_const_unstable]` and `#[rustc_const_stable]` attributes.\n #[derive(Encodable, Decodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n #[derive(HashStable_Generic)]\n@@ -111,6 +121,16 @@ pub struct ConstStability {\n     pub promotable: bool,\n }\n \n+impl ConstStability {\n+    pub fn is_const_unstable(&self) -> bool {\n+        self.level.is_unstable()\n+    }\n+\n+    pub fn is_const_stable(&self) -> bool {\n+        self.level.is_stable()\n+    }\n+}\n+\n /// The available stability levels.\n #[derive(Encodable, Decodable, PartialEq, Copy, Clone, Debug, Eq, Hash)]\n #[derive(HashStable_Generic)]"}, {"sha": "d6f62062d1f8ee39c8348249bcf949a96b37a9f1", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::Symbol;\n pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n     if tcx.is_const_fn_raw(def_id) {\n         let const_stab = tcx.lookup_const_stability(def_id)?;\n-        if const_stab.level.is_unstable() { Some(const_stab.feature) } else { None }\n+        if const_stab.is_const_unstable() { Some(const_stab.feature) } else { None }\n     } else {\n         None\n     }"}, {"sha": "7f9f5dc39a1fb6eca2cab43b3f364f1cc75e5c72", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "patch": "@@ -944,7 +944,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 // have no `rustc_const_stable` attributes to be const-unstable as well. This\n                 // should be fixed later.\n                 let callee_is_unstable_unmarked = tcx.lookup_const_stability(callee).is_none()\n-                    && tcx.lookup_stability(callee).map_or(false, |s| s.level.is_unstable());\n+                    && tcx.lookup_stability(callee).map_or(false, |s| s.is_unstable());\n                 if callee_is_unstable_unmarked {\n                     trace!(\"callee_is_unstable_unmarked\");\n                     // We do not use `const` modifiers for intrinsic \"functions\", as intrinsics are"}, {"sha": "fa519ede4eaf2b5189bd852432ad247603c93096", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "patch": "@@ -2791,7 +2791,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn is_const_fn(self, def_id: DefId) -> bool {\n         if self.is_const_fn_raw(def_id) {\n             match self.lookup_const_stability(def_id) {\n-                Some(stability) if stability.level.is_unstable() => {\n+                Some(stability) if stability.is_const_unstable() => {\n                     // has a `rustc_const_unstable` attribute, check whether the user enabled the\n                     // corresponding feature gate.\n                     self.features()"}, {"sha": "b96322db26efd44cd85550f254bb609eeac34a26", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             // Propagate unstability.  This can happen even for non-staged-api crates in case\n             // -Zforce-unstable-if-unmarked is set.\n             if let Some(stab) = self.parent_stab {\n-                if inherit_deprecation.yes() && stab.level.is_unstable() {\n+                if inherit_deprecation.yes() && stab.is_unstable() {\n                     self.index.stab_map.insert(def_id, stab);\n                 }\n             }\n@@ -190,7 +190,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if const_stab.is_none() {\n             debug!(\"annotate: const_stab not found, parent = {:?}\", self.parent_const_stab);\n             if let Some(parent) = self.parent_const_stab {\n-                if parent.level.is_unstable() {\n+                if parent.is_const_unstable() {\n                     self.index.const_stab_map.insert(def_id, parent);\n                 }\n             }\n@@ -272,9 +272,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if stab.is_none() {\n             debug!(\"annotate: stab not found, parent = {:?}\", self.parent_stab);\n             if let Some(stab) = self.parent_stab {\n-                if inherit_deprecation.yes() && stab.level.is_unstable()\n-                    || inherit_from_parent.yes()\n-                {\n+                if inherit_deprecation.yes() && stab.is_unstable() || inherit_from_parent.yes() {\n                     self.index.stab_map.insert(def_id, stab);\n                 }\n             }"}, {"sha": "6b73634afbc2ec43e1d68e0cf7fcf6727e68391a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "patch": "@@ -344,7 +344,7 @@ crate fn build_impl(\n             }\n \n             if let Some(stab) = tcx.lookup_stability(did) {\n-                if stab.level.is_unstable() && stab.feature == sym::rustc_private {\n+                if stab.is_unstable() && stab.feature == sym::rustc_private {\n                     return;\n                 }\n             }\n@@ -373,7 +373,7 @@ crate fn build_impl(\n             }\n \n             if let Some(stab) = tcx.lookup_stability(did) {\n-                if stab.level.is_unstable() && stab.feature == sym::rustc_private {\n+                if stab.is_unstable() && stab.feature == sym::rustc_private {\n                     return;\n                 }\n             }"}, {"sha": "934de5471fe136fda205660d51c2e080b9cecc29", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "patch": "@@ -632,7 +632,7 @@ impl Item {\n         self.stability(tcx).as_ref().and_then(|s| {\n             let mut classes = Vec::with_capacity(2);\n \n-            if s.level.is_unstable() {\n+            if s.is_unstable() {\n                 classes.push(\"unstable\");\n             }\n "}, {"sha": "e0f4083a9181249f2620705221fa730e0f2b8331", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "patch": "@@ -445,10 +445,7 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) ->\n \n     // The \"rustc_private\" crates are permanently unstable so it makes no sense\n     // to render \"unstable\" everywhere.\n-    if item\n-        .stability(tcx)\n-        .as_ref()\n-        .map(|s| s.level.is_unstable() && s.feature != sym::rustc_private)\n+    if item.stability(tcx).as_ref().map(|s| s.is_unstable() && s.feature != sym::rustc_private)\n         == Some(true)\n     {\n         tags += &tag_html(\"unstable\", \"\", \"Experimental\");"}]}