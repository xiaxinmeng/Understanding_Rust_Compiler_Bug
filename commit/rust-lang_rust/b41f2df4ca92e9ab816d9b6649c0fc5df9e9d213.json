{"sha": "b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MWYyZGY0Y2E5MmU5YWI4MTZkOWI2NjQ5YzBmYzVkZjllOWQyMTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-07T11:34:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-07T11:34:38Z"}, "message": "Auto merge of #23277 - aochagavia:intro, r=steveklabnik\n\ncc @steveklabnik", "tree": {"sha": "ab18921093269dd0cd0d7e2ad428e954e943e14c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab18921093269dd0cd0d7e2ad428e954e943e14c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213", "html_url": "https://github.com/rust-lang/rust/commit/b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de51bbec15bd689b9c56e8596d1a1e973b707bbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/de51bbec15bd689b9c56e8596d1a1e973b707bbd", "html_url": "https://github.com/rust-lang/rust/commit/de51bbec15bd689b9c56e8596d1a1e973b707bbd"}, {"sha": "5a82a8116bdefbfc68362f0b3c92f2d4bef711bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a82a8116bdefbfc68362f0b3c92f2d4bef711bc", "html_url": "https://github.com/rust-lang/rust/commit/5a82a8116bdefbfc68362f0b3c92f2d4bef711bc"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "10e52a159dfa29704393d2453d5a6e8da72a3394", "filename": "src/doc/intro.md", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213", "patch": "@@ -457,30 +457,25 @@ a problem. That\u2019s what it means by \u2018cannot move out of captured outer\n variable\u2019: our `thread::scoped` closure wants to take ownership, and it can\u2019t,\n because the closure for `map` won\u2019t let it.\n \n-What to do here? Rust has two types that helps us: `Arc<T>` and `Mutex<T>`.\n-*Arc* stands for \"atomically reference counted\". In other words, an Arc will\n-keep track of the number of references to something, and not free the\n-associated resource until the count is zero. The *atomic* portion refers to an\n-Arc's usage of concurrency primitives to atomically update the count, making it\n-safe across threads. If we use an Arc, we can have our three references. But,\n-an Arc does not allow mutable borrows of the data it holds, and we want to\n-modify what we're sharing. In this case, we can use a `Mutex<T>` inside of our\n-Arc. A Mutex will synchronize our accesses, so that we can ensure that our\n-mutation doesn't cause a data race.\n-\n-Here's what using an Arc with a Mutex looks like:\n+What to do here? Rust has a type that helps us: `Mutex<T>`. Because the threads\n+are scoped, it is possible to use an _immutable_ reference to `numbers` inside\n+of the closure. However, Rust prevents us from having multiple _mutable_\n+references to the same object, so we need a `Mutex` to be able to modify what\n+we're sharing. A Mutex will synchronize our accesses, so that we can ensure\n+that our mutation doesn't cause a data race.\n+\n+Here's what using a Mutex looks like:\n \n ```{rust}\n use std::thread;\n-use std::sync::{Arc,Mutex};\n+use std::sync::Mutex;\n \n fn main() {\n-    let numbers = Arc::new(Mutex::new(vec![1, 2, 3]));\n+    let numbers = &Mutex::new(vec![1, 2, 3]);\n \n     let guards: Vec<_> = (0..3).map(|i| {\n-        let number = numbers.clone();\n         thread::scoped(move || {\n-            let mut array = number.lock().unwrap();\n+            let mut array = numbers.lock().unwrap();\n             array[i] += 1;\n             println!(\"numbers[{}] is {}\", i, array[i]);\n         })\n@@ -489,12 +484,9 @@ fn main() {\n ```\n \n We first have to `use` the appropriate library, and then we wrap our vector in\n-an Arc with the call to `Arc::new()`. Inside of the loop, we make a new\n-reference to the Arc with the `clone()` method. This will increment the\n-reference count. When each new `numbers` variable binding goes out of scope, it\n-will decrement the count. The `lock()` call will return us a reference to the\n-value inside the Mutex, and block any other calls to `lock()` until said\n-reference goes out of scope.\n+a `Mutex` with the call to `Mutex::new()`. Inside of the loop, the `lock()`\n+call will return us a reference to the value inside the Mutex, and block any\n+other calls to `lock()` until said reference goes out of scope.\n \n We can compile and run this program without error, and in fact, see the\n non-deterministic aspect:"}]}