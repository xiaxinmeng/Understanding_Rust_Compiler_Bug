{"sha": "0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZDRkYzY4ZTZmNDVhNGZmZThlMTI2NDJhYTU1NzYzOGFiMmY1YmQ=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-12-17T04:09:16Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-12-18T21:20:32Z"}, "message": "s/Tree/BTree", "tree": {"sha": "a9e07f231d6fded252e594a1140d155cfea63af4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9e07f231d6fded252e594a1140d155cfea63af4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "html_url": "https://github.com/rust-lang/rust/commit/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c00f9c5ff67ec1e206cd1e6e2db37df298f5d5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c00f9c5ff67ec1e206cd1e6e2db37df298f5d5b", "html_url": "https://github.com/rust-lang/rust/commit/6c00f9c5ff67ec1e206cd1e6e2db37df298f5d5b"}], "stats": {"total": 104, "additions": 40, "deletions": 64}, "files": [{"sha": "8fb025623d478276cf093940f67a1a3387fb1774", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "patch": "@@ -15,7 +15,7 @@ use std::default::Default;\n use std::hash::{Hash, Hasher};\n \n use {Decodable, Encodable, Decoder, Encoder};\n-use std::collections::{DList, RingBuf, TreeMap, TreeSet, HashMap, HashSet,\n+use std::collections::{DList, RingBuf, BTreeMap, BTreeSet, HashMap, HashSet,\n                        TrieMap, TrieSet, VecMap};\n use std::collections::enum_set::{EnumSet, CLike};\n \n@@ -78,7 +78,7 @@ impl<\n     S: Encoder<E>,\n     K: Encodable<S, E> + PartialEq + Ord,\n     V: Encodable<S, E> + PartialEq\n-> Encodable<S, E> for TreeMap<K, V> {\n+> Encodable<S, E> for BTreeMap<K, V> {\n     fn encode(&self, e: &mut S) -> Result<(), E> {\n         e.emit_map(self.len(), |e| {\n             let mut i = 0;\n@@ -97,10 +97,10 @@ impl<\n     D: Decoder<E>,\n     K: Decodable<D, E> + PartialEq + Ord,\n     V: Decodable<D, E> + PartialEq\n-> Decodable<D, E> for TreeMap<K, V> {\n+> Decodable<D, E> for BTreeMap<K, V> {\n     fn decode(d: &mut D) -> Result<TreeMap<K, V>, E> {\n         d.read_map(|d, len| {\n-            let mut map = TreeMap::new();\n+            let mut map = BTreeMap::new();\n             for i in range(0u, len) {\n                 let key = try!(d.read_map_elt_key(i, |d| Decodable::decode(d)));\n                 let val = try!(d.read_map_elt_val(i, |d| Decodable::decode(d)));\n@@ -115,7 +115,7 @@ impl<\n     E,\n     S: Encoder<E>,\n     T: Encodable<S, E> + PartialEq + Ord\n-> Encodable<S, E> for TreeSet<T> {\n+> Encodable<S, E> for BTreeSet<T> {\n     fn encode(&self, s: &mut S) -> Result<(), E> {\n         s.emit_seq(self.len(), |s| {\n             let mut i = 0;\n@@ -132,10 +132,10 @@ impl<\n     E,\n     D: Decoder<E>,\n     T: Decodable<D, E> + PartialEq + Ord\n-> Decodable<D, E> for TreeSet<T> {\n+> Decodable<D, E> for BTreeSet<T> {\n     fn decode(d: &mut D) -> Result<TreeSet<T>, E> {\n         d.read_seq(|d, len| {\n-            let mut set = TreeSet::new();\n+            let mut set = BTreeSet::new();\n             for i in range(0u, len) {\n                 set.insert(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n             }"}, {"sha": "6d143329b0c30869616e7b5a79fa6f23fb8fb56f", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "patch": "@@ -151,7 +151,7 @@\n //!\n //! ```rust\n //! extern crate serialize;\n-//! use std::collections::TreeMap;\n+//! use std::collections::BTreeMap;\n //! use serialize::json::{mod, Json, ToJson};\n //!\n //! // Only generate `Decodable` trait implementation\n@@ -165,7 +165,7 @@\n //! // Specify encoding method manually\n //! impl ToJson for TestStruct {\n //!     fn to_json(&self) -> Json {\n-//!         let mut d = TreeMap::new();\n+//!         let mut d = BTreeMap::new();\n //!         // All standard types implement `to_json()`, so use it\n //!         d.insert(\"data_int\".to_string(), self.data_int.to_json());\n //!         d.insert(\"data_str\".to_string(), self.data_str.to_json());\n@@ -198,7 +198,7 @@ use self::ParserState::*;\n use self::InternalStackElement::*;\n \n use std;\n-use std::collections::{HashMap, TreeMap};\n+use std::collections::{HashMap, BTreeMap};\n use std::{char, f64, fmt, io, num, str};\n use std::mem::{swap, transmute};\n use std::num::{Float, FPNaN, FPInfinite, Int};\n@@ -223,7 +223,7 @@ pub enum Json {\n }\n \n pub type Array = Vec<Json>;\n-pub type Object = TreeMap<string::String, Json>;\n+pub type Object = BTreeMap<string::String, Json>;\n \n /// The errors that can arise while parsing a JSON stream.\n #[deriving(Clone, PartialEq)]\n@@ -973,7 +973,7 @@ impl Json {\n         self.as_object().is_some()\n     }\n \n-    /// If the Json value is an Object, returns the associated TreeMap.\n+    /// If the Json value is an Object, returns the associated BTreeMap.\n     /// Returns None otherwise.\n     pub fn as_object<'a>(&'a self) -> Option<&'a Object> {\n         match self {\n@@ -1909,7 +1909,7 @@ impl<T: Iterator<char>> Builder<T> {\n     fn build_object(&mut self) -> Result<Json, BuilderError> {\n         self.bump();\n \n-        let mut values = TreeMap::new();\n+        let mut values = BTreeMap::new();\n \n         loop {\n             match self.token {\n@@ -2391,9 +2391,9 @@ impl<A: ToJson> ToJson for Vec<A> {\n     fn to_json(&self) -> Json { Json::Array(self.iter().map(|elt| elt.to_json()).collect()) }\n }\n \n-impl<A: ToJson> ToJson for TreeMap<string::String, A> {\n+impl<A: ToJson> ToJson for BTreeMap<string::String, A> {\n     fn to_json(&self) -> Json {\n-        let mut d = TreeMap::new();\n+        let mut d = BTreeMap::new();\n         for (key, value) in self.iter() {\n             d.insert((*key).clone(), value.to_json());\n         }\n@@ -2403,7 +2403,7 @@ impl<A: ToJson> ToJson for TreeMap<string::String, A> {\n \n impl<A: ToJson> ToJson for HashMap<string::String, A> {\n     fn to_json(&self) -> Json {\n-        let mut d = TreeMap::new();\n+        let mut d = BTreeMap::new();\n         for (key, value) in self.iter() {\n             d.insert((*key).clone(), value.to_json());\n         }\n@@ -2451,7 +2451,7 @@ mod tests {\n     use super::{PrettyEncoder, Json, from_str, DecodeResult, DecoderError, JsonEvent, Parser,\n                 StackElement, Stack, Encoder, Decoder};\n     use std::{i64, u64, f32, f64, io};\n-    use std::collections::TreeMap;\n+    use std::collections::BTreeMap;\n     use std::num::Float;\n     use std::string;\n \n@@ -2501,7 +2501,7 @@ mod tests {\n     }\n \n     fn mk_object(items: &[(string::String, Json)]) -> Json {\n-        let mut d = TreeMap::new();\n+        let mut d = BTreeMap::new();\n \n         for item in items.iter() {\n             match *item {\n@@ -3075,7 +3075,7 @@ mod tests {\n     fn test_decode_map() {\n         let s = \"{\\\"a\\\": \\\"Dog\\\", \\\"b\\\": {\\\"variant\\\":\\\"Frog\\\",\\\n                   \\\"fields\\\":[\\\"Henry\\\", 349]}}\";\n-        let mut map: TreeMap<string::String, Animal> = super::decode(s).unwrap();\n+        let mut map: BTreeMap<string::String, Animal> = super::decode(s).unwrap();\n \n         assert_eq!(map.remove(&\"a\".into_string()), Some(Dog));\n         assert_eq!(map.remove(&\"b\".into_string()), Some(Frog(\"Henry\".into_string(), 349)));\n@@ -3350,9 +3350,9 @@ mod tests {\n     #[test]\n     fn test_prettyencoder_indent_level_param() {\n         use std::str::from_utf8;\n-        use std::collections::TreeMap;\n+        use std::collections::BTreeMap;\n \n-        let mut tree = TreeMap::new();\n+        let mut tree = BTreeMap::new();\n \n         tree.insert(\"hello\".into_string(), String(\"guten tag\".into_string()));\n         tree.insert(\"goodbye\".into_string(), String(\"sayonara\".into_string()));\n@@ -3719,13 +3719,13 @@ mod tests {\n \n     #[test]\n     fn test_to_json() {\n-        use std::collections::{HashMap,TreeMap};\n+        use std::collections::{HashMap,BTreeMap};\n         use super::ToJson;\n \n         let array2 = Array(vec!(U64(1), U64(2)));\n         let array3 = Array(vec!(U64(1), U64(2), U64(3)));\n         let object = {\n-            let mut tree_map = TreeMap::new();\n+            let mut tree_map = BTreeMap::new();\n             tree_map.insert(\"a\".into_string(), U64(1));\n             tree_map.insert(\"b\".into_string(), U64(2));\n             Object(tree_map)\n@@ -3758,7 +3758,7 @@ mod tests {\n         assert_eq!((&[1u, 2, 3]).to_json(), array3);\n         assert_eq!((vec![1u, 2]).to_json(), array2);\n         assert_eq!(vec!(1u, 2, 3).to_json(), array3);\n-        let mut tree_map = TreeMap::new();\n+        let mut tree_map = BTreeMap::new();\n         tree_map.insert(\"a\".into_string(), 1u);\n         tree_map.insert(\"b\".into_string(), 2);\n         assert_eq!(tree_map.to_json(), object);"}, {"sha": "02b266b8fe0b809d2a0e03b4a93cb6ec158aa8fc", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "patch": "@@ -251,7 +251,7 @@ pub enum MetricChange {\n \n impl Copy for MetricChange {}\n \n-pub type MetricDiff = TreeMap<String,MetricChange>;\n+pub type MetricDiff = BTreeMap<String,MetricChange>;\n \n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs.\n@@ -1227,7 +1227,7 @@ impl MetricMap {\n     /// map.\n     pub fn compare_to_old(&self, old: &MetricMap,\n                           noise_pct: Option<f64>) -> MetricDiff {\n-        let mut diff : MetricDiff = TreeMap::new();\n+        let mut diff : MetricDiff = BTreeMap::new();\n         let MetricMap(ref selfmap) = *self;\n         let MetricMap(ref old) = *old;\n         for (k, vold) in old.iter() {"}, {"sha": "60331dfb5505a72cf8bb76f304fe9a2ad0fef066", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(unboxed_closures)]\n \n-use std::collections::{TrieMap, TreeMap, HashMap, HashSet};\n+use std::collections::{BTreeMap, HashMap, HashSet};\n use std::os;\n use std::rand::{Rng, IsaacRng, SeedableRng};\n use std::time::Duration;\n@@ -26,7 +26,7 @@ trait MutableMap {\n     fn find(&self, k: &uint) -> Option<&uint>;\n }\n \n-impl MutableMap for TreeMap<uint, uint> {\n+impl MutableMap for BTreeMap<uint, uint> {\n     fn insert(&mut self, k: uint, v: uint) { self.insert(k, v); }\n     fn remove(&mut self, k: &uint) -> bool { self.remove(k).is_some() }\n     fn find(&self, k: &uint) -> Option<&uint> { self.get(k) }\n@@ -36,11 +36,6 @@ impl MutableMap for HashMap<uint, uint> {\n     fn remove(&mut self, k: &uint) -> bool { self.remove(k).is_some() }\n     fn find(&self, k: &uint) -> Option<&uint> { self.get(k) }\n }\n-impl MutableMap for TrieMap<uint> {\n-    fn insert(&mut self, k: uint, v: uint) { self.insert(k, v); }\n-    fn remove(&mut self, k: &uint) -> bool { self.remove(k).is_some() }\n-    fn find(&self, k: &uint) -> Option<&uint> { self.get(k) }\n-}\n \n fn ascending<M: MutableMap>(map: &mut M, n_keys: uint) {\n     println!(\" Ascending integers:\");\n@@ -134,21 +129,21 @@ fn main() {\n     println!(\"{} keys\", n_keys);\n \n     // FIXME: #9970\n-    println!(\"{}\", \"\\nTreeMap:\");\n+    println!(\"{}\", \"\\nBTreeMap:\");\n \n     {\n-        let mut map: TreeMap<uint,uint> = TreeMap::new();\n+        let mut map: BTreeMap<uint,uint> = BTreeMap::new();\n         ascending(&mut map, n_keys);\n     }\n \n     {\n-        let mut map: TreeMap<uint,uint> = TreeMap::new();\n+        let mut map: BTreeMap<uint,uint> = BTreeMap::new();\n         descending(&mut map, n_keys);\n     }\n \n     {\n         println!(\" Random integers:\");\n-        let mut map: TreeMap<uint,uint> = TreeMap::new();\n+        let mut map: BTreeMap<uint,uint> = BTreeMap::new();\n         vector(&mut map, n_keys, rand.as_slice());\n     }\n \n@@ -170,23 +165,4 @@ fn main() {\n         let mut map: HashMap<uint,uint> = HashMap::new();\n         vector(&mut map, n_keys, rand.as_slice());\n     }\n-\n-    // FIXME: #9970\n-    println!(\"{}\", \"\\nTrieMap:\");\n-\n-    {\n-        let mut map: TrieMap<uint> = TrieMap::new();\n-        ascending(&mut map, n_keys);\n-    }\n-\n-    {\n-        let mut map: TrieMap<uint> = TrieMap::new();\n-        descending(&mut map, n_keys);\n-    }\n-\n-    {\n-        println!(\" Random integers:\");\n-        let mut map: TrieMap<uint> = TrieMap::new();\n-        vector(&mut map, n_keys, rand.as_slice());\n-    }\n }"}, {"sha": "49f5c7751d9a0c5c1bb8ce85439ee0301074c6d2", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "patch": "@@ -17,7 +17,7 @@ extern crate rand;\n \n use std::collections::BitvSet;\n use std::collections::HashSet;\n-use std::collections::TreeSet;\n+use std::collections::BTreeSet;\n use std::hash::Hash;\n use std::os;\n use std::time::Duration;\n@@ -48,7 +48,7 @@ impl<T: Hash + Eq> MutableSet<T> for HashSet<T> {\n     fn remove(&mut self, k: &T) -> bool { self.remove(k) }\n     fn contains(&self, k: &T) -> bool { self.contains(k) }\n }\n-impl<T: Ord> MutableSet<T> for TreeSet<T> {\n+impl<T: Ord> MutableSet<T> for BTreeSet<T> {\n     fn insert(&mut self, k: T) { self.insert(k); }\n     fn remove(&mut self, k: &T) -> bool { self.remove(k) }\n     fn contains(&self, k: &T) -> bool { self.contains(k) }\n@@ -207,14 +207,14 @@ fn main() {\n         let mut rng: rand::IsaacRng = rand::SeedableRng::from_seed(seed);\n         let mut results = empty_results();\n         results.bench_int(&mut rng, num_keys, max, || {\n-            let s: TreeSet<uint> = TreeSet::new();\n+            let s: BTreeSet<uint> = BTreeSet::new();\n             s\n         });\n         results.bench_str(&mut rng, num_keys, || {\n-            let s: TreeSet<String> = TreeSet::new();\n+            let s: BTreeSet<String> = BTreeSet::new();\n             s\n         });\n-        write_results(\"collections::TreeSet\", &results);\n+        write_results(\"collections::BTreeSet\", &results);\n     }\n \n     {"}, {"sha": "ade312da21b7036853db790473cb1fe6bb088631", "filename": "src/test/run-pass/issue-16278.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Ftest%2Frun-pass%2Fissue-16278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Ftest%2Frun-pass%2Fissue-16278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16278.rs?ref=0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "patch": "@@ -12,9 +12,9 @@\n \n // this file has some special \\r\\n endings (use xxd to see them)\n \n-fn main() {assert_eq!(b\"\", b\"\\\r\n+fn main() {assert_eq!(b\"\", b\"\\\n                                    \");\n-assert_eq!(b\"\\n\", b\"\r\n+assert_eq!(b\"\\n\", b\"\n \");\n }\n "}, {"sha": "ee57d01c36d362610e17cbdfd099848285e775fe", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=0bd4dc68e6f45a4ffe8e12642aa557638ab2f5bd", "patch": "@@ -16,7 +16,7 @@ use std::str::SendStr;\n use std::string::ToString;\n \n pub fn main() {\n-    let mut map: TreeMap<SendStr, uint> = TreeMap::new();\n+    let mut map: BTreeMap<SendStr, uint> = BTreeMap::new();\n     assert!(map.insert(\"foo\".into_cow(), 42).is_none());\n     assert!(map.insert(\"foo\".to_string().into_cow(), 42).is_some());\n     assert!(map.insert(\"foo\".into_cow(), 42).is_some());"}]}