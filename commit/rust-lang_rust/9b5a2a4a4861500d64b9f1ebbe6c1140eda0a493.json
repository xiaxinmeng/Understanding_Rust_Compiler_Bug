{"sha": "9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493", "node_id": "C_kwDOAAsO6NoAKDliNWEyYTRhNDg2MTUwMGQ2NGI5ZjFlYmJlNmMxMTQwZWRhMGE0OTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-24T21:43:21Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-26T20:09:39Z"}, "message": "Use new solver during selection", "tree": {"sha": "65596169ed0c9227455f5ed92c8b35d558f1f256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65596169ed0c9227455f5ed92c8b35d558f1f256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493", "html_url": "https://github.com/rust-lang/rust/commit/9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c62665e09c11eb1c9d8ea02df5b723364a0b8ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c62665e09c11eb1c9d8ea02df5b723364a0b8ba4", "html_url": "https://github.com/rust-lang/rust/commit/c62665e09c11eb1c9d8ea02df5b723364a0b8ba4"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "1d23634b6aacf58762466cd987d387d2ea743525", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493", "patch": "@@ -38,6 +38,8 @@ use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n+use rustc_infer::traits::TraitEngine;\n+use rustc_infer::traits::TraitEngineExt;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n@@ -47,6 +49,7 @@ use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_session::config::TraitSolver;\n use rustc_span::symbol::sym;\n \n use std::cell::{Cell, RefCell};\n@@ -544,10 +547,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n     ) -> Result<EvaluationResult, OverflowError> {\n         self.evaluation_probe(|this| {\n-            this.evaluate_predicate_recursively(\n-                TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),\n-                obligation.clone(),\n-            )\n+            if this.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+                this.evaluate_predicate_recursively(\n+                    TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),\n+                    obligation.clone(),\n+                )\n+            } else {\n+                this.evaluate_predicates_recursively_in_new_solver([obligation.clone()])\n+            }\n         })\n     }\n \n@@ -586,18 +593,40 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     where\n         I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,\n     {\n-        let mut result = EvaluatedToOk;\n-        for obligation in predicates {\n-            let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;\n-            if let EvaluatedToErr = eval {\n-                // fast-path - EvaluatedToErr is the top of the lattice,\n-                // so we don't need to look on the other predicates.\n-                return Ok(EvaluatedToErr);\n-            } else {\n-                result = cmp::max(result, eval);\n+        if self.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+            let mut result = EvaluatedToOk;\n+            for obligation in predicates {\n+                let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;\n+                if let EvaluatedToErr = eval {\n+                    // fast-path - EvaluatedToErr is the top of the lattice,\n+                    // so we don't need to look on the other predicates.\n+                    return Ok(EvaluatedToErr);\n+                } else {\n+                    result = cmp::max(result, eval);\n+                }\n             }\n+            Ok(result)\n+        } else {\n+            self.evaluate_predicates_recursively_in_new_solver(predicates)\n         }\n-        Ok(result)\n+    }\n+\n+    /// Evaluates the predicates using the new solver when `-Ztrait-solver=next` is enabled\n+    fn evaluate_predicates_recursively_in_new_solver(\n+        &mut self,\n+        predicates: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n+    ) -> Result<EvaluationResult, OverflowError> {\n+        let mut fulfill_cx = crate::solve::FulfillmentCtxt::new();\n+        fulfill_cx.register_predicate_obligations(self.infcx, predicates);\n+        // True errors\n+        if !fulfill_cx.select_where_possible(self.infcx).is_empty() {\n+            return Ok(EvaluatedToErr);\n+        }\n+        if !fulfill_cx.select_all_or_error(self.infcx).is_empty() {\n+            return Ok(EvaluatedToAmbig);\n+        }\n+        // Regions and opaques are handled in the `evaluation_probe` by looking at the snapshot\n+        Ok(EvaluatedToOk)\n     }\n \n     #[instrument("}]}