{"sha": "7207eef716c0970df1b3523f8f4bb685518f8f73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDdlZWY3MTZjMDk3MGRmMWIzNTIzZjhmNGJiNjg1NTE4ZjhmNzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T20:48:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T20:48:24Z"}, "message": "rename FnDescriptior -> FnSignatureInfo", "tree": {"sha": "201c6357999f54a7ba5c9cbbc1ad9af31c8eb7c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/201c6357999f54a7ba5c9cbbc1ad9af31c8eb7c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7207eef716c0970df1b3523f8f4bb685518f8f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7207eef716c0970df1b3523f8f4bb685518f8f73", "html_url": "https://github.com/rust-lang/rust/commit/7207eef716c0970df1b3523f8f4bb685518f8f73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7207eef716c0970df1b3523f8f4bb685518f8f73/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67de38ec7d5c235dec209fe859d6bf6b0dbe497a", "url": "https://api.github.com/repos/rust-lang/rust/commits/67de38ec7d5c235dec209fe859d6bf6b0dbe497a", "html_url": "https://github.com/rust-lang/rust/commit/67de38ec7d5c235dec209fe859d6bf6b0dbe497a"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "5e44a88a73fbc6f927d95443d78249410bede5aa", "filename": "crates/ra_analysis/src/hir/function/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7207eef716c0970df1b3523f8f4bb685518f8f73/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7207eef716c0970df1b3523f8f4bb685518f8f73/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs?ref=7207eef716c0970df1b3523f8f4bb685518f8f73", "patch": "@@ -42,19 +42,24 @@ impl FunctionDescriptor {\n     pub(crate) fn scope(&self, db: &impl HirDatabase) -> Arc<FnScopes> {\n         db.fn_scopes(self.fn_id)\n     }\n+\n+    pub(crate) fn signature_info(&self, db: &impl HirDatabase) -> Option<FnSignatureInfo> {\n+        let syntax = db.fn_syntax(self.fn_id);\n+        FnSignatureInfo::new(syntax.borrowed())\n+    }\n }\n \n #[derive(Debug, Clone)]\n-pub struct FnDescriptor {\n+pub struct FnSignatureInfo {\n     pub name: String,\n     pub label: String,\n     pub ret_type: Option<String>,\n     pub params: Vec<String>,\n     pub doc: Option<String>,\n }\n \n-impl FnDescriptor {\n-    pub fn new(node: ast::FnDef) -> Option<Self> {\n+impl FnSignatureInfo {\n+    fn new(node: ast::FnDef) -> Option<Self> {\n         let name = node.name()?.text().to_string();\n \n         let mut doc = None;\n@@ -73,7 +78,7 @@ impl FnDescriptor {\n             node.syntax().text().to_string()\n         };\n \n-        if let Some((comment_range, docs)) = FnDescriptor::extract_doc_comments(node) {\n+        if let Some((comment_range, docs)) = FnSignatureInfo::extract_doc_comments(node) {\n             let comment_range = comment_range\n                 .checked_sub(node.syntax().range().start())\n                 .unwrap();\n@@ -105,10 +110,10 @@ impl FnDescriptor {\n             }\n         }\n \n-        let params = FnDescriptor::param_list(node);\n+        let params = FnSignatureInfo::param_list(node);\n         let ret_type = node.ret_type().map(|r| r.syntax().text().to_string());\n \n-        Some(FnDescriptor {\n+        Some(FnSignatureInfo {\n             name,\n             ret_type,\n             params,"}, {"sha": "5a9086cef8005c070117d491cb680fee83da57e1", "filename": "crates/ra_analysis/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7207eef716c0970df1b3523f8f4bb685518f8f73/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7207eef716c0970df1b3523f8f4bb685518f8f73/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs?ref=7207eef716c0970df1b3523f8f4bb685518f8f73", "patch": "@@ -29,8 +29,7 @@ pub(crate) use self::{\n     function::{FunctionDescriptor, FnScopes},\n };\n \n-//TODO: FIXME\n-pub use self::function::FnDescriptor;\n+pub use self::function::FnSignatureInfo;\n \n pub(crate) enum Def {\n     Module(ModuleDescriptor),"}, {"sha": "b16edb969cf1d0430cd3799b66bee5e15416b647", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7207eef716c0970df1b3523f8f4bb685518f8f73/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7207eef716c0970df1b3523f8f4bb685518f8f73/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=7207eef716c0970df1b3523f8f4bb685518f8f73", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     completion::{completions, CompletionItem},\n     db::{self, FileSyntaxQuery, SyntaxDatabase},\n     hir::{\n-        FnDescriptor, FunctionDescriptor, ModuleDescriptor,\n+        FunctionDescriptor, FnSignatureInfo, ModuleDescriptor,\n         Problem,\n         DeclarationDescriptor,\n     },\n@@ -445,7 +445,7 @@ impl AnalysisImpl {\n     pub fn resolve_callable(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Option<(FnDescriptor, Option<usize>)>> {\n+    ) -> Cancelable<Option<(FnSignatureInfo, Option<usize>)>> {\n         let file = self.db.file_syntax(position.file_id);\n         let syntax = file.syntax();\n \n@@ -455,11 +455,13 @@ impl AnalysisImpl {\n \n         // Resolve the function's NameRef (NOTE: this isn't entirely accurate).\n         let file_symbols = self.index_resolve(name_ref)?;\n-        for (fn_fiel_id, fs) in file_symbols {\n+        for (fn_file_id, fs) in file_symbols {\n             if fs.kind == FN_DEF {\n-                let fn_file = self.db.file_syntax(fn_fiel_id);\n+                let fn_file = self.db.file_syntax(fn_file_id);\n                 if let Some(fn_def) = find_node_at_offset(fn_file.syntax(), fs.node_range.start()) {\n-                    if let Some(descriptor) = FnDescriptor::new(fn_def) {\n+                    let descr =\n+                        FunctionDescriptor::guess_from_source(&*self.db, fn_file_id, fn_def);\n+                    if let Some(descriptor) = descr.signature_info(&*self.db) {\n                         // If we have a calling expression let's find which argument we are on\n                         let mut current_parameter = None;\n "}, {"sha": "c0e43544ea01aa9931d6994516a63ea68746f390", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7207eef716c0970df1b3523f8f4bb685518f8f73/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7207eef716c0970df1b3523f8f4bb685518f8f73/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=7207eef716c0970df1b3523f8f4bb685518f8f73", "patch": "@@ -42,7 +42,7 @@ use crate::{\n \n pub use crate::{\n     completion::CompletionItem,\n-    hir::FnDescriptor,\n+    hir::FnSignatureInfo,\n     input::{CrateGraph, CrateId, FileId, FileResolver},\n };\n pub use ra_editor::{\n@@ -305,7 +305,7 @@ impl Analysis {\n     pub fn resolve_callable(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Option<(FnDescriptor, Option<usize>)>> {\n+    ) -> Cancelable<Option<(FnSignatureInfo, Option<usize>)>> {\n         self.imp.resolve_callable(position)\n     }\n }"}]}