{"sha": "6c8ec842cc2dbd0f4dbf99dbd47717fb48cf5b88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOGVjODQyY2MyZGJkMGY0ZGJmOTlkYmQ0NzcxN2ZiNDhjZjViODg=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-05T17:45:22Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-05T18:14:53Z"}, "message": "Remove some transmutes", "tree": {"sha": "3f104a06cd18ffa143a35bb2c4df6f2ba338229e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f104a06cd18ffa143a35bb2c4df6f2ba338229e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c8ec842cc2dbd0f4dbf99dbd47717fb48cf5b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8ec842cc2dbd0f4dbf99dbd47717fb48cf5b88", "html_url": "https://github.com/rust-lang/rust/commit/6c8ec842cc2dbd0f4dbf99dbd47717fb48cf5b88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c8ec842cc2dbd0f4dbf99dbd47717fb48cf5b88/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e471c206cf472b54acee83a231560e16c439ab63", "url": "https://api.github.com/repos/rust-lang/rust/commits/e471c206cf472b54acee83a231560e16c439ab63", "html_url": "https://github.com/rust-lang/rust/commit/e471c206cf472b54acee83a231560e16c439ab63"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "a1928657dabc480413d361950f8234d60ab8474b", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c8ec842cc2dbd0f4dbf99dbd47717fb48cf5b88/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8ec842cc2dbd0f4dbf99dbd47717fb48cf5b88/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=6c8ec842cc2dbd0f4dbf99dbd47717fb48cf5b88", "patch": "@@ -11,7 +11,6 @@\n #![cfg(not(target_arch = \"wasm32\"))]\n \n use std::i16;\n-use std::mem;\n use std::str;\n \n use core::num::flt2dec::MAX_SIG_DIGITS;\n@@ -75,8 +74,7 @@ pub fn f32_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n     let mut rng: XorShiftRng = Rand::rand(&mut rand::thread_rng());\n     let f32_range = Range::new(0x0000_0001u32, 0x7f80_0000);\n     iterate(\"f32_random_equivalence_test\", k, n, f, g, |_| {\n-        let i: u32 = f32_range.ind_sample(&mut rng);\n-        let x: f32 = unsafe {mem::transmute(i)};\n+        let x = f32::from_bits(f32_range.ind_sample(&mut rng));\n         decode_finite(x)\n     });\n }\n@@ -87,8 +85,7 @@ pub fn f64_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n     let mut rng: XorShiftRng = Rand::rand(&mut rand::thread_rng());\n     let f64_range = Range::new(0x0000_0000_0000_0001u64, 0x7ff0_0000_0000_0000);\n     iterate(\"f64_random_equivalence_test\", k, n, f, g, |_| {\n-        let i: u64 = f64_range.ind_sample(&mut rng);\n-        let x: f64 = unsafe {mem::transmute(i)};\n+        let x = f64::from_bits(f64_range.ind_sample(&mut rng));\n         decode_finite(x)\n     });\n }\n@@ -105,7 +102,8 @@ pub fn f32_exhaustive_equivalence_test<F, G>(f: F, g: G, k: usize)\n     // iterate from 0x0000_0001 to 0x7f7f_ffff, i.e. all finite ranges\n     let (npassed, nignored) = iterate(\"f32_exhaustive_equivalence_test\",\n                                       k, 0x7f7f_ffff, f, g, |i: usize| {\n-        let x: f32 = unsafe {mem::transmute(i as u32 + 1)};\n+\n+        let x = f32::from_bits(i as u32 + 1);\n         decode_finite(x)\n     });\n     assert_eq!((npassed, nignored), (2121451881, 17643158));"}]}