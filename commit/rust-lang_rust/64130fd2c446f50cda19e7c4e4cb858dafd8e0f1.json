{"sha": "64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MTMwZmQyYzQ0NmY1MGNkYTE5ZTdjNGU0Y2I4NThkYWZkOGUwZjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T07:55:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-01T07:55:26Z"}, "message": "Rollup merge of #63674 - petrochenkov:meta2, r=Centril\n\nsyntax: Support modern attribute syntax in the `meta` matcher\n\nWhere \"modern\" means https://github.com/rust-lang/rust/pull/57367:\n```\nPATH\nPATH `(` TOKEN_STREAM `)`\nPATH `[` TOKEN_STREAM `]`\nPATH `{` TOKEN_STREAM `}`\n```\n\nUnfortunately, `meta` wasn't future-proofed using the `FOLLOW` token set like other matchers (https://github.com/rust-lang/rust/issues/34011), so code like `$meta:meta {` or `$meta:meta [` may break, and we need a crater run to find out how often this happens in practice.\n\nCloses https://github.com/rust-lang/rust/issues/49629 (by fully supporting `meta` rather than removing it.)", "tree": {"sha": "a990b0e4b226ca76bdf3131bff05a06498af6352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a990b0e4b226ca76bdf3131bff05a06498af6352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdkwZvCRBK7hj4Ov3rIwAAdHIIABO/kmXg+PvkQyL9szc/J0YJ\nw+jlWO/k6aj+rvhBP925NjalZrK3GZK2aeBHVETjtCE8/k7yIIjtKG5oZVyYamiX\naZb1R5UKIg4jir12O5NW3pzcj4ccCba/55VwBEbcLZBL2WrG6H6VB+JCoVFPiINt\n9JrQFKspQbk62iJb5vsYuCHjfYx2lhszjYpZ9wCHJi1LzSrpBbLc790JOLTvQtXR\nCxC1g1iceQ80VbCQNtG/QxuIeLpSCr+ioWv/r9lKEj2D8sFMxDw95QH4onieWXP9\njidOHD78kuqUCWD/+buy6UqkTHEqpeSCmZdkko9Z64Bo9ZzXNT8y7pYTVmlYwis=\n=iv00\n-----END PGP SIGNATURE-----\n", "payload": "tree a990b0e4b226ca76bdf3131bff05a06498af6352\nparent 42ec6831b019114a4b6f6b58bfb5bc2927d70388\nparent 6ea4a52f47f3f66f9db9004d8ed55a819dd81523\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569916526 +0200\ncommitter GitHub <noreply@github.com> 1569916526 +0200\n\nRollup merge of #63674 - petrochenkov:meta2, r=Centril\n\nsyntax: Support modern attribute syntax in the `meta` matcher\n\nWhere \"modern\" means https://github.com/rust-lang/rust/pull/57367:\n```\nPATH\nPATH `(` TOKEN_STREAM `)`\nPATH `[` TOKEN_STREAM `]`\nPATH `{` TOKEN_STREAM `}`\n```\n\nUnfortunately, `meta` wasn't future-proofed using the `FOLLOW` token set like other matchers (https://github.com/rust-lang/rust/issues/34011), so code like `$meta:meta {` or `$meta:meta [` may break, and we need a crater run to find out how often this happens in practice.\n\nCloses https://github.com/rust-lang/rust/issues/49629 (by fully supporting `meta` rather than removing it.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "html_url": "https://github.com/rust-lang/rust/commit/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42ec6831b019114a4b6f6b58bfb5bc2927d70388", "url": "https://api.github.com/repos/rust-lang/rust/commits/42ec6831b019114a4b6f6b58bfb5bc2927d70388", "html_url": "https://github.com/rust-lang/rust/commit/42ec6831b019114a4b6f6b58bfb5bc2927d70388"}, {"sha": "6ea4a52f47f3f66f9db9004d8ed55a819dd81523", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea4a52f47f3f66f9db9004d8ed55a819dd81523", "html_url": "https://github.com/rust-lang/rust/commit/6ea4a52f47f3f66f9db9004d8ed55a819dd81523"}], "stats": {"total": 202, "additions": 119, "deletions": 83}, "files": [{"sha": "2238a56b29d04b150139935aed91f6deaa676067", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -988,10 +988,12 @@ impl<'a> LoweringContext<'a> {\n         // lower attributes (we use the AST version) there is nowhere to keep\n         // the `HirId`s. We don't actually need HIR version of attributes anyway.\n         Attribute {\n+            item: AttrItem {\n+                path: attr.path.clone(),\n+                tokens: self.lower_token_stream(attr.tokens.clone()),\n+            },\n             id: attr.id,\n             style: attr.style,\n-            path: attr.path.clone(),\n-            tokens: self.lower_token_stream(attr.tokens.clone()),\n             is_sugared_doc: attr.is_sugared_doc,\n             span: attr.span,\n         }"}, {"sha": "23a2f115e05e2516fbb0acc8a38106c89812c0ac", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -196,26 +196,27 @@ impl<'a> HashStable<StableHashingContext<'a>> for ast::Path {\n     }\n }\n \n+impl_stable_hash_for!(struct ::syntax::ast::AttrItem {\n+    path,\n+    tokens,\n+});\n+\n impl<'a> HashStable<StableHashingContext<'a>> for ast::Attribute {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         // Make sure that these have been filtered out.\n         debug_assert!(!self.ident().map_or(false, |ident| hcx.is_ignored_attr(ident.name)));\n         debug_assert!(!self.is_sugared_doc);\n \n         let ast::Attribute {\n+            ref item,\n             id: _,\n             style,\n-            ref path,\n-            ref tokens,\n             is_sugared_doc: _,\n             span,\n         } = *self;\n \n+        item.hash_stable(hcx, hasher);\n         style.hash_stable(hcx, hasher);\n-        path.hash_stable(hcx, hasher);\n-        for tt in tokens.trees() {\n-            tt.hash_stable(hcx, hasher);\n-        }\n         span.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "023952042e6d478ce13b0d3d3e1d629144a9a0b1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -2139,18 +2139,29 @@ impl rustc_serialize::Decodable for AttrId {\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct AttrItem {\n+    pub path: Path,\n+    pub tokens: TokenStream,\n+}\n+\n /// Metadata associated with an item.\n /// Doc-comments are promoted to attributes that have `is_sugared_doc = true`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Attribute {\n+    pub item: AttrItem,\n     pub id: AttrId,\n     pub style: AttrStyle,\n-    pub path: Path,\n-    pub tokens: TokenStream,\n     pub is_sugared_doc: bool,\n     pub span: Span,\n }\n \n+// Compatibility impl to avoid churn, consider removing.\n+impl std::ops::Deref for Attribute {\n+    type Target = AttrItem;\n+    fn deref(&self) -> &Self::Target { &self.item }\n+}\n+\n /// `TraitRef`s appear in impls.\n ///\n /// Resolution maps each `TraitRef`'s `ref_id` to its defining trait; that's all"}, {"sha": "7bef693a5be4cce1bb3fcf4d202add442587d515", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -9,7 +9,7 @@ pub use StabilityLevel::*;\n pub use crate::ast::Attribute;\n \n use crate::ast;\n-use crate::ast::{AttrId, AttrStyle, Name, Ident, Path, PathSegment};\n+use crate::ast::{AttrItem, AttrId, AttrStyle, Name, Ident, Path, PathSegment};\n use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n@@ -255,9 +255,8 @@ impl MetaItem {\n     }\n }\n \n-impl Attribute {\n-    /// Extracts the `MetaItem` from inside this `Attribute`.\n-    pub fn meta(&self) -> Option<MetaItem> {\n+impl AttrItem {\n+    crate fn meta(&self, span: Span) -> Option<MetaItem> {\n         let mut tokens = self.tokens.trees().peekable();\n         Some(MetaItem {\n             path: self.path.clone(),\n@@ -269,9 +268,16 @@ impl Attribute {\n             } else {\n                 return None;\n             },\n-            span: self.span,\n+            span,\n         })\n     }\n+}\n+\n+impl Attribute {\n+    /// Extracts the MetaItem from inside this Attribute.\n+    pub fn meta(&self) -> Option<MetaItem> {\n+        self.item.meta(self.span)\n+    }\n \n     pub fn parse<'a, T, F>(&self, sess: &'a ParseSess, mut f: F) -> PResult<'a, T>\n         where F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n@@ -333,10 +339,9 @@ impl Attribute {\n                 DUMMY_SP,\n             );\n             f(&Attribute {\n+                item: AttrItem { path: meta.path, tokens: meta.kind.tokens(meta.span) },\n                 id: self.id,\n                 style: self.style,\n-                path: meta.path,\n-                tokens: meta.kind.tokens(meta.span),\n                 is_sugared_doc: true,\n                 span: self.span,\n             })\n@@ -384,10 +389,9 @@ crate fn mk_attr_id() -> AttrId {\n \n pub fn mk_attr(style: AttrStyle, path: Path, tokens: TokenStream, span: Span) -> Attribute {\n     Attribute {\n+        item: AttrItem { path, tokens },\n         id: mk_attr_id(),\n         style,\n-        path,\n-        tokens,\n         is_sugared_doc: false,\n         span,\n     }\n@@ -408,10 +412,12 @@ pub fn mk_sugared_doc_attr(text: Symbol, span: Span) -> Attribute {\n     let lit_kind = LitKind::Str(text, ast::StrStyle::Cooked);\n     let lit = Lit::from_lit_kind(lit_kind, span);\n     Attribute {\n+        item: AttrItem {\n+            path: Path::from_ident(Ident::with_dummy_span(sym::doc).with_span_pos(span)),\n+            tokens: MetaItemKind::NameValue(lit).tokens(span),\n+        },\n         id: mk_attr_id(),\n         style,\n-        path: Path::from_ident(Ident::with_dummy_span(sym::doc).with_span_pos(span)),\n-        tokens: MetaItemKind::NameValue(lit).tokens(span),\n         is_sugared_doc: true,\n         span,\n     }\n@@ -524,7 +530,7 @@ impl MetaItem {\n             }\n             Some(TokenTree::Token(Token { kind: token::Interpolated(nt), .. })) => match *nt {\n                 token::Nonterminal::NtIdent(ident, _) => Path::from_ident(ident),\n-                token::Nonterminal::NtMeta(ref meta) => return Some(meta.clone()),\n+                token::Nonterminal::NtMeta(ref item) => return item.meta(item.path.span),\n                 token::Nonterminal::NtPath(ref path) => path.clone(),\n                 _ => return None,\n             },"}, {"sha": "2923cc86ba029a16c9b3cb8d6347bbd545e12b34", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -122,8 +122,8 @@ impl<'a> StripUnconfigured<'a> {\n \n             while !parser.check(&token::CloseDelim(token::Paren)) {\n                 let lo = parser.token.span.lo();\n-                let (path, tokens) = parser.parse_meta_item_unrestricted()?;\n-                expanded_attrs.push((path, tokens, parser.prev_span.with_lo(lo)));\n+                let item = parser.parse_attr_item()?;\n+                expanded_attrs.push((item, parser.prev_span.with_lo(lo)));\n                 parser.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Paren)])?;\n             }\n \n@@ -150,11 +150,10 @@ impl<'a> StripUnconfigured<'a> {\n             // `cfg_attr` inside of another `cfg_attr`. E.g.\n             //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n             expanded_attrs.into_iter()\n-            .flat_map(|(path, tokens, span)| self.process_cfg_attr(ast::Attribute {\n+            .flat_map(|(item, span)| self.process_cfg_attr(ast::Attribute {\n+                item,\n                 id: attr::mk_attr_id(),\n                 style: attr.style,\n-                path,\n-                tokens,\n                 is_sugared_doc: false,\n                 span,\n             }))"}, {"sha": "2b0fc5d3677c7def85805be0aed2fdde0c14d83b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -1,4 +1,4 @@\n-use crate::ast::{self, Block, Ident, LitKind, NodeId, PatKind, Path};\n+use crate::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use crate::ast::{MacStmtStyle, StmtKind, ItemKind};\n use crate::attr::{self, HasAttrs};\n use crate::source_map::respan;\n@@ -625,9 +625,10 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         | Annotatable::Variant(..)\n                             => panic!(\"unexpected annotatable\"),\n                     })), DUMMY_SP).into();\n-                    let input = self.extract_proc_macro_attr_input(attr.tokens, span);\n+                    let input = self.extract_proc_macro_attr_input(attr.item.tokens, span);\n                     let tok_result = expander.expand(self.cx, span, input, item_tok);\n-                    let res = self.parse_ast_fragment(tok_result, fragment_kind, &attr.path, span);\n+                    let res =\n+                        self.parse_ast_fragment(tok_result, fragment_kind, &attr.item.path, span);\n                     self.gate_proc_macro_expansion(span, &res);\n                     res\n                 }\n@@ -1530,11 +1531,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n             let meta = attr::mk_list_item(Ident::with_dummy_span(sym::doc), items);\n             *at = attr::Attribute {\n+                item: AttrItem { path: meta.path, tokens: meta.kind.tokens(meta.span) },\n                 span: at.span,\n                 id: at.id,\n                 style: at.style,\n-                path: meta.path,\n-                tokens: meta.kind.tokens(meta.span),\n                 is_sugared_doc: false,\n             };\n         } else {"}, {"sha": "d1c50fd85945de745e2db8b5038f68030b633bae", "filename": "src/libsyntax/ext/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -924,7 +924,7 @@ fn parse_nt(p: &mut Parser<'_>, sp: Span, name: Symbol) -> Nonterminal {\n             FatalError.raise()\n         }\n         sym::path => token::NtPath(panictry!(p.parse_path(PathStyle::Type))),\n-        sym::meta => token::NtMeta(panictry!(p.parse_meta_item())),\n+        sym::meta => token::NtMeta(panictry!(p.parse_attr_item())),\n         sym::vis => token::NtVis(panictry!(p.parse_visibility(true))),\n         sym::lifetime => if p.check_lifetime() {\n             token::NtLifetime(p.expect_lifetime().ident)"}, {"sha": "3923b9f297b9ffaf897feb6b3b547529853a56b8", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -550,7 +550,8 @@ pub fn noop_visit_local<T: MutVisitor>(local: &mut P<Local>, vis: &mut T) {\n }\n \n pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n-    let Attribute { id: _, style: _, path, tokens, is_sugared_doc: _, span } = attr;\n+    let Attribute { item: AttrItem { path, tokens }, id: _, style: _, is_sugared_doc: _, span }\n+        = attr;\n     vis.visit_path(path);\n     vis.visit_tts(tokens);\n     vis.visit_span(span);\n@@ -681,7 +682,10 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n         token::NtIdent(ident, _is_raw) => vis.visit_ident(ident),\n         token::NtLifetime(ident) => vis.visit_ident(ident),\n         token::NtLiteral(expr) => vis.visit_expr(expr),\n-        token::NtMeta(meta) => vis.visit_meta_item(meta),\n+        token::NtMeta(AttrItem { path, tokens }) => {\n+            vis.visit_path(path);\n+            vis.visit_tts(tokens);\n+        }\n         token::NtPath(path) => vis.visit_path(path),\n         token::NtTT(tt) => vis.visit_tt(tt),\n         token::NtImplItem(item) =>"}, {"sha": "e74f3045db80477b249c925c59f4cd033d8fe7de", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -90,7 +90,7 @@ impl<'a> Parser<'a> {\n         debug!(\"parse_attribute_with_inner_parse_policy: inner_parse_policy={:?} self.token={:?}\",\n                inner_parse_policy,\n                self.token);\n-        let (span, path, tokens, style) = match self.token.kind {\n+        let (span, item, style) = match self.token.kind {\n             token::Pound => {\n                 let lo = self.token.span;\n                 self.bump();\n@@ -107,7 +107,7 @@ impl<'a> Parser<'a> {\n                 };\n \n                 self.expect(&token::OpenDelim(token::Bracket))?;\n-                let (path, tokens) = self.parse_meta_item_unrestricted()?;\n+                let item = self.parse_attr_item()?;\n                 self.expect(&token::CloseDelim(token::Bracket))?;\n                 let hi = self.prev_span;\n \n@@ -142,7 +142,7 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n \n-                (attr_sp, path, tokens, style)\n+                (attr_sp, item, style)\n             }\n             _ => {\n                 let token_str = self.this_token_to_string();\n@@ -151,10 +151,9 @@ impl<'a> Parser<'a> {\n         };\n \n         Ok(ast::Attribute {\n+            item,\n             id: attr::mk_attr_id(),\n             style,\n-            path,\n-            tokens,\n             is_sugared_doc: false,\n             span,\n         })\n@@ -167,19 +166,19 @@ impl<'a> Parser<'a> {\n     ///     PATH `[` TOKEN_STREAM `]`\n     ///     PATH `{` TOKEN_STREAM `}`\n     ///     PATH\n-    ///     PATH `=` TOKEN_TREE\n+    ///     PATH `=` UNSUFFIXED_LIT\n     /// The delimiters or `=` are still put into the resulting token stream.\n-    pub fn parse_meta_item_unrestricted(&mut self) -> PResult<'a, (ast::Path, TokenStream)> {\n-        let meta = match self.token.kind {\n+    pub fn parse_attr_item(&mut self) -> PResult<'a, ast::AttrItem> {\n+        let item = match self.token.kind {\n             token::Interpolated(ref nt) => match **nt {\n-                Nonterminal::NtMeta(ref meta) => Some(meta.clone()),\n+                Nonterminal::NtMeta(ref item) => Some(item.clone()),\n                 _ => None,\n             },\n             _ => None,\n         };\n-        Ok(if let Some(meta) = meta {\n+        Ok(if let Some(item) = item {\n             self.bump();\n-            (meta.path, meta.kind.tokens(meta.span))\n+            item\n         } else {\n             let path = self.parse_path(PathStyle::Mod)?;\n             let tokens = if self.check(&token::OpenDelim(DelimToken::Paren)) ||\n@@ -206,7 +205,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 TokenStream::empty()\n             };\n-            (path, tokens)\n+            ast::AttrItem { path, tokens }\n         })\n     }\n \n@@ -263,7 +262,7 @@ impl<'a> Parser<'a> {\n \n     /// Matches the following grammar (per RFC 1559).\n     ///\n-    ///     meta_item : IDENT ( '=' UNSUFFIXED_LIT | '(' meta_item_inner? ')' )? ;\n+    ///     meta_item : PATH ( '=' UNSUFFIXED_LIT | '(' meta_item_inner? ')' )? ;\n     ///     meta_item_inner : (meta_item | UNSUFFIXED_LIT) (',' meta_item_inner)? ;\n     pub fn parse_meta_item(&mut self) -> PResult<'a, ast::MetaItem> {\n         let nt_meta = match self.token.kind {\n@@ -274,9 +273,14 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        if let Some(meta) = nt_meta {\n-            self.bump();\n-            return Ok(meta);\n+        if let Some(item) = nt_meta {\n+            return match item.meta(item.path.span) {\n+                Some(meta) => {\n+                    self.bump();\n+                    Ok(meta)\n+                }\n+                None => self.unexpected(),\n+            }\n         }\n \n         let lo = self.token.span;"}, {"sha": "ca823991a2e5f25d6b4291b7d857e10e6dfa0c5c", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -114,9 +114,9 @@ impl<'a> Parser<'a> {\n     pub fn parse_path_allowing_meta(&mut self, style: PathStyle) -> PResult<'a, Path> {\n         let meta_ident = match self.token.kind {\n             token::Interpolated(ref nt) => match **nt {\n-                token::NtMeta(ref meta) => match meta.kind {\n-                    ast::MetaItemKind::Word => Some(meta.path.clone()),\n-                    _ => None,\n+                token::NtMeta(ref item) => match item.tokens.is_empty() {\n+                    true => Some(item.path.clone()),\n+                    false => None,\n                 },\n                 _ => None,\n             },"}, {"sha": "fd78a2bd53442dfe6fa3192191994db394cfb149", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -687,7 +687,7 @@ pub enum Nonterminal {\n     NtLifetime(ast::Ident),\n     NtLiteral(P<ast::Expr>),\n     /// Stuff inside brackets for attributes\n-    NtMeta(ast::MetaItem),\n+    NtMeta(ast::AttrItem),\n     NtPath(ast::Path),\n     NtVis(ast::Visibility),\n     NtTT(TokenTree),"}, {"sha": "7d4ffe493d709460cf3363e3d43ab19e6925f470", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -324,7 +324,7 @@ fn token_to_string_ext(token: &Token, convert_dollar_crate: bool) -> String {\n crate fn nonterminal_to_string(nt: &Nonterminal) -> String {\n     match *nt {\n         token::NtExpr(ref e)        => expr_to_string(e),\n-        token::NtMeta(ref e)        => meta_item_to_string(e),\n+        token::NtMeta(ref e)        => attr_item_to_string(e),\n         token::NtTy(ref e)          => ty_to_string(e),\n         token::NtPath(ref e)        => path_to_string(e),\n         token::NtItem(ref e)        => item_to_string(e),\n@@ -412,8 +412,8 @@ pub fn meta_list_item_to_string(li: &ast::NestedMetaItem) -> String {\n     to_string(|s| s.print_meta_list_item(li))\n }\n \n-pub fn meta_item_to_string(mi: &ast::MetaItem) -> String {\n-    to_string(|s| s.print_meta_item(mi))\n+fn attr_item_to_string(ai: &ast::AttrItem) -> String {\n+    to_string(|s| s.print_attr_item(ai, ai.path.span))\n }\n \n pub fn attribute_to_string(attr: &ast::Attribute) -> String {\n@@ -629,24 +629,28 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                 ast::AttrStyle::Inner => self.word(\"#![\"),\n                 ast::AttrStyle::Outer => self.word(\"#[\"),\n             }\n-            self.ibox(0);\n-            match attr.tokens.trees().next() {\n-                Some(TokenTree::Delimited(_, delim, tts)) => {\n-                    self.print_mac_common(\n-                        Some(MacHeader::Path(&attr.path)), false, None, delim, tts, true, attr.span\n-                    );\n-                }\n-                tree => {\n-                    self.print_path(&attr.path, false, 0);\n-                    if tree.is_some() {\n-                        self.space();\n-                        self.print_tts(attr.tokens.clone(), true);\n-                    }\n+            self.print_attr_item(&attr.item, attr.span);\n+            self.word(\"]\");\n+        }\n+    }\n+\n+    fn print_attr_item(&mut self, item: &ast::AttrItem, span: Span) {\n+        self.ibox(0);\n+        match item.tokens.trees().next() {\n+            Some(TokenTree::Delimited(_, delim, tts)) => {\n+                self.print_mac_common(\n+                    Some(MacHeader::Path(&item.path)), false, None, delim, tts, true, span\n+                );\n+            }\n+            tree => {\n+                self.print_path(&item.path, false, 0);\n+                if tree.is_some() {\n+                    self.space();\n+                    self.print_tts(item.tokens.clone(), true);\n                 }\n             }\n-            self.end();\n-            self.word(\"]\");\n         }\n+        self.end();\n     }\n \n     fn print_meta_list_item(&mut self, item: &ast::NestedMetaItem) {"}, {"sha": "203c4a834899b96aaa0c0c265f2a2689c9aa1fc1", "filename": "src/libsyntax_ext/cmdline_attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcmdline_attrs.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -1,6 +1,6 @@\n //! Attributes injected into the crate root from command line using `-Z crate-attr`.\n \n-use syntax::ast::{self, AttrStyle};\n+use syntax::ast::{self, AttrItem, AttrStyle};\n use syntax::attr::mk_attr;\n use syntax::panictry;\n use syntax::parse::{self, token, ParseSess};\n@@ -15,7 +15,7 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n         );\n \n         let start_span = parser.token.span;\n-        let (path, tokens) = panictry!(parser.parse_meta_item_unrestricted());\n+        let AttrItem { path, tokens } = panictry!(parser.parse_attr_item());\n         let end_span = parser.token.span;\n         if parser.token != token::Eof {\n             parse_sess.span_diagnostic"}, {"sha": "6381bb2d588770c275710e9e3ae855da5af1087c", "filename": "src/test/ui/cfg/cfg_stmt_expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Ftest%2Fui%2Fcfg%2Fcfg_stmt_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Ftest%2Fui%2Fcfg%2Fcfg_stmt_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg_stmt_expr.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -57,7 +57,7 @@ fn main() {\n     // check that macro expanded code works\n \n     macro_rules! if_cfg {\n-        ($cfg:meta $ib:block else $eb:block) => {\n+        ($cfg:meta? $ib:block else $eb:block) => {\n             {\n                 let r;\n                 #[cfg($cfg)]\n@@ -69,7 +69,7 @@ fn main() {\n         }\n     }\n \n-    let n = if_cfg!(unset {\n+    let n = if_cfg!(unset? {\n         413\n     } else {\n         612"}, {"sha": "eb2504d4bfdb7ef2024f35fc29127af189eb859a", "filename": "src/test/ui/macros/macro-first-set.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -252,12 +252,6 @@ test_path!(::std);\n test_path!(std::u8,);\n test_path!(any, super, super::super::self::path, X<Y>::Z<'a, T=U>);\n \n-macro_rules! test_meta_block {\n-    ($($m:meta)* $b:block) => {};\n-}\n-\n-test_meta_block!(windows {});\n-\n macro_rules! test_lifetime {\n     (1. $($l:lifetime)* $($b:block)*) => {};\n     (2. $($b:block)* $($l:lifetime)*) => {};"}, {"sha": "bc6938d4a6c9af000f0e89c35158b8e206b009a1", "filename": "src/test/ui/macros/macro-meta-items-modern.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Ftest%2Fui%2Fmacros%2Fmacro-meta-items-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64130fd2c446f50cda19e7c4e4cb858dafd8e0f1/src%2Ftest%2Fui%2Fmacros%2Fmacro-meta-items-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-meta-items-modern.rs?ref=64130fd2c446f50cda19e7c4e4cb858dafd8e0f1", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+macro_rules! check { ($meta:meta) => () }\n+\n+check!(meta(a b c d));\n+check!(meta[a b c d]);\n+check!(meta { a b c d });\n+check!(meta);\n+check!(meta = 0);\n+\n+fn main() {}"}]}