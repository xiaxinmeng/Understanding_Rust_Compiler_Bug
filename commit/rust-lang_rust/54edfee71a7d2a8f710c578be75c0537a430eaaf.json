{"sha": "54edfee71a7d2a8f710c578be75c0537a430eaaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZWRmZWU3MWE3ZDJhOGY3MTBjNTc4YmU3NWMwNTM3YTQzMGVhYWY=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-05-31T10:24:01Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-05-31T10:24:01Z"}, "message": "Parse macros named \"default\" correctly.", "tree": {"sha": "5b27adcc0f2d522fbec89b4a6eb35d073322cccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b27adcc0f2d522fbec89b4a6eb35d073322cccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54edfee71a7d2a8f710c578be75c0537a430eaaf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJZLpnBAAoJEHynqF4EmoLoSScP/1wPBtOqVtB9zlh8u1fYv6P+\n32EzJ3KPTyf9xue4WKDDUECMSlfK9hD1lUyVvHeaVm19PV138C7afqxYYV2HZlkm\nql/ieyye5FLcexkH/mvDtI1+UByQHjMgmF9bvQ3sHM77uOAmrgIgZrVOxaEC8pIJ\no0cYT2nJEYQM3sy0mpTHfzbzgu8La7ubaLm3YofR7pF3hlaOI9xB+7RKt9TCC/aC\niA/QNSC0gt9WbBCDYOcXdsS6eraE8ALiQv/jBunv8uh7RBElOorYHZ2ULWC9ZkRv\nD63KFYSiSeAC28EXKtw9bcJ78cax9HN81kFzVUPeO5WaEXqdU0YpfGaUcn6Ii+DW\ncB0YnMxhXr4wPv+yMF8FyJ5kFsZEcbpJAEjcFl6glO3eKYfwsyrl1pLHJ/T4XtsA\nWqRALMtsk99sCMn8qhsuAdyYovU3jNXiLjzVaC+xgW2KhgBh2R8N9J9U+0HR1ufA\nT2JLy1QYVQvWNSv/40BsIk/IkEB/lXEzjgGXdW9K9uLc/W15NZgwl6wfZoryO1Cm\nWxpTQ22cPQZPWFCoNanflqc5PfWLFy4I2zf+4mc8VFaMqfM5qzP9tdmPfp8JPlBO\n7ji+p+chr8weQf/wsY0wxYSyA2nGkVMYz3N7cRla+hKuThAqRE8lY1+4q5Ipp77k\nHwtHAdBGY87/2OaJQ4xT\n=2Os+\n-----END PGP SIGNATURE-----", "payload": "tree 5b27adcc0f2d522fbec89b4a6eb35d073322cccb\nparent f89d8d184490ecb3cf91f7b6bb7296d649f931ba\nauthor Masaki Hara <ackie.h.gmai@gmail.com> 1496226241 +0900\ncommitter Masaki Hara <ackie.h.gmai@gmail.com> 1496226241 +0900\n\nParse macros named \"default\" correctly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54edfee71a7d2a8f710c578be75c0537a430eaaf", "html_url": "https://github.com/rust-lang/rust/commit/54edfee71a7d2a8f710c578be75c0537a430eaaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54edfee71a7d2a8f710c578be75c0537a430eaaf/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89d8d184490ecb3cf91f7b6bb7296d649f931ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89d8d184490ecb3cf91f7b6bb7296d649f931ba", "html_url": "https://github.com/rust-lang/rust/commit/f89d8d184490ecb3cf91f7b6bb7296d649f931ba"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "63fe33b8754d3a5406def2aa6ff2f5ec235aa4b6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/54edfee71a7d2a8f710c578be75c0537a430eaaf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54edfee71a7d2a8f710c578be75c0537a430eaaf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=54edfee71a7d2a8f710c578be75c0537a430eaaf", "patch": "@@ -698,24 +698,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn check_contextual_keyword(&mut self, ident: Ident) -> bool {\n-        self.expected_tokens.push(TokenType::Token(token::Ident(ident)));\n-        if let token::Ident(ref cur_ident) = self.token {\n-            cur_ident.name == ident.name\n-        } else {\n-            false\n-        }\n-    }\n-\n-    pub fn eat_contextual_keyword(&mut self, ident: Ident) -> bool {\n-        if self.check_contextual_keyword(ident) {\n-            self.bump();\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-\n     /// If the given word is not a keyword, signal an error.\n     /// If the next token is not the given word, signal an error.\n     /// Otherwise, eat it.\n@@ -3755,6 +3737,18 @@ impl<'a> Parser<'a> {\n         self.look_ahead(1, |t| t.is_ident() && !t.is_any_keyword())\n     }\n \n+    fn is_defaultness(&self) -> bool {\n+        // `pub` is included for better error messages\n+        self.token.is_keyword(keywords::Default) &&\n+        self.look_ahead(1, |t| t.is_keyword(keywords::Impl) ||\n+                        t.is_keyword(keywords::Const) ||\n+                        t.is_keyword(keywords::Fn) ||\n+                        t.is_keyword(keywords::Unsafe) ||\n+                        t.is_keyword(keywords::Extern) ||\n+                        t.is_keyword(keywords::Type) ||\n+                        t.is_keyword(keywords::Pub))\n+    }\n+\n     fn eat_macro_def(&mut self, attrs: &[Attribute], vis: &Visibility)\n                      -> PResult<'a, Option<P<Item>>> {\n         let lo = self.span;\n@@ -5229,7 +5223,8 @@ impl<'a> Parser<'a> {\n \n     /// Parse defaultness: DEFAULT or nothing\n     fn parse_defaultness(&mut self) -> PResult<'a, Defaultness> {\n-        if self.eat_contextual_keyword(keywords::Default.ident()) {\n+        if self.is_defaultness() {\n+            self.bump();\n             Ok(Defaultness::Default)\n         } else {\n             Ok(Defaultness::Final)"}, {"sha": "028d59a19dd6496e9f02b37a91f1848af393f419", "filename": "src/test/run-pass/macro-named-default.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/54edfee71a7d2a8f710c578be75c0537a430eaaf/src%2Ftest%2Frun-pass%2Fmacro-named-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54edfee71a7d2a8f710c578be75c0537a430eaaf/src%2Ftest%2Frun-pass%2Fmacro-named-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-named-default.rs?ref=54edfee71a7d2a8f710c578be75c0537a430eaaf", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! default {\n+    ($($x:tt)*) => { $($x)* }\n+}\n+\n+default! {\n+    struct A;\n+}\n+\n+impl A {\n+    default! {\n+        fn foo(&self) {}\n+    }\n+}\n+\n+fn main() {\n+    A.foo();\n+}"}]}