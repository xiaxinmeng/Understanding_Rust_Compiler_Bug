{"sha": "47913ee8f488e2661a06337e060fb90895680c8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OTEzZWU4ZjQ4OGUyNjYxYTA2MzM3ZTA2MGZiOTA4OTU2ODBjOGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-02-22T16:29:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:35:38Z"}, "message": "Address review comments", "tree": {"sha": "0bda3b6825f9127d295bcabd11beb1b0c8da38a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bda3b6825f9127d295bcabd11beb1b0c8da38a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47913ee8f488e2661a06337e060fb90895680c8f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg58oACgkQpp+NIls6\n19l72Q/+O+q5HE5cEirGtYFM+4w+I/zegpJJ1CUVa3A9miVS/WU6f/E8cLpZS76S\nPV6g7I1oWlncaLN6D3tVRYa998NVNjC6kHlpLWgozNAqagRZ2GCk0dvGC32Gxa5l\ngA1nzid3x/y/fsm0loVE40lFMUXEvWG4ubFdqJyRn4ghCyQqMgX8810VssCrTutc\nE+yIKQJ1I6qYWv6vgIMsee2YqzeD6yCKET9ViImH+10L7O1bV2makbNvxzUN5oA0\nTFZVk98wugMFJe09/KDnPj/XWP+wsbg8MTB14wclFkILVYwBDlwBVf3Ta0ASfJLP\nqxqwXG6y8S5xbnSHZ1t58eyxrQary3055RtLQ0xBUNBi1qncPEhyFxTvGl2nXSlV\njdohq8Jo5AHGf9HI/yr/ZdBlFFvMnf0+modIUiX78qBGRsbVoXSDKBbbggXQ5R9V\nx/kz8vE4h912wmIZaDfr8cbX6cdIFKkEuVEHywVhGECQyPEPwN5AqXkjMG1MYw4x\n1AE/Hf44vXMDJIR3VJM/EcLi1pe6JfkPy/X6OrcGPpVtR2c/1iO+idDReLCBprVq\nzc1wUNQzRpoGsG8l0/RyQtXPT5t/8QnbMuF2t5I4wJOF8A6Q8OQ8w0KkcGVxkVKp\nbr/JZqsCR+Er0NIFN++75/78c9w+FsCtZzThE9B/2OJnIJrL/go=\n=fq7K\n-----END PGP SIGNATURE-----", "payload": "tree 0bda3b6825f9127d295bcabd11beb1b0c8da38a9\nparent 208d7648331874fcdbdb144025a516f03db1eb69\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1519316979 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494538 +0100\n\nAddress review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47913ee8f488e2661a06337e060fb90895680c8f", "html_url": "https://github.com/rust-lang/rust/commit/47913ee8f488e2661a06337e060fb90895680c8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47913ee8f488e2661a06337e060fb90895680c8f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "208d7648331874fcdbdb144025a516f03db1eb69", "url": "https://api.github.com/repos/rust-lang/rust/commits/208d7648331874fcdbdb144025a516f03db1eb69", "html_url": "https://github.com/rust-lang/rust/commit/208d7648331874fcdbdb144025a516f03db1eb69"}], "stats": {"total": 104, "additions": 33, "deletions": 71}, "files": [{"sha": "63494438f7d82e6866088d934542f9e883bab9ae", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=47913ee8f488e2661a06337e060fb90895680c8f", "patch": "@@ -1831,6 +1831,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     ) -> Option<Discr<'tcx>> {\n         let param_env = ParamEnv::empty(traits::Reveal::UserFacing);\n         let repr_type = self.repr.discr_type();\n+        let bit_size = layout::Integer::from_attr(tcx, repr_type).size().bits();\n         let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n         let instance = ty::Instance::new(expr_did, substs);\n         let cid = GlobalId {\n@@ -1844,22 +1845,10 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             }) => {\n                 trace!(\"discriminants: {} ({:?})\", b, repr_type);\n                 let ty = repr_type.to_ty(tcx);\n-                if ty.is_signed() {\n-                    let (ty, param_env) = tcx\n-                        .lift_to_global(&(ty, param_env))\n-                        .unwrap_or_else(|| {\n-                        bug!(\"MIR: discriminants({:?}, {:?}) got \\\n-                            type with inference types/regions\",\n-                            ty, param_env);\n-                    });\n-                    let size = tcx.global_tcx()\n-                        .layout_of(param_env.and(ty))\n-                        .expect(\"int layout\")\n-                        .size\n-                        .bits();\n+                if repr_type.is_signed() {\n                     let val = b as i128;\n                     // sign extend to i128\n-                    let amt = 128 - size;\n+                    let amt = 128 - bit_size;\n                     let val = (val << amt) >> amt;\n                     Some(Discr {\n                         val: val as u128,"}, {"sha": "28eef70679b95f70138463574a4bda10d767188a", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=47913ee8f488e2661a06337e060fb90895680c8f", "patch": "@@ -151,22 +151,13 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n \n     pub fn type_bit_size(\n         &self,\n-        ty: Ty<'tcx>,\n+        ty: Ty,\n     ) -> u64 {\n-        let tcx = self.tcx.global_tcx();\n-        let (ty, param_env) = self\n-            .tcx\n-            .lift_to_global(&(ty, self.param_env))\n-            .unwrap_or_else(|| {\n-            bug!(\"MIR: Cx::const_eval_literal({:?}, {:?}) got \\\n-                type with inference types/regions\",\n-                ty, self.param_env);\n-        });\n-        tcx\n-            .layout_of(param_env.and(ty))\n-            .expect(\"int layout\")\n-            .size\n-            .bits()\n+        match ty.sty {\n+            ty::TyInt(ity) => ity.bit_width(),\n+            ty::TyUint(uty) => uty.bit_width(),\n+            _ => bug!(\"{} is not an integer\", ty),\n+        }.map_or(self.tcx.data_layout.pointer_size.bits(), |n| n as u64)\n     }\n \n     pub fn const_eval_literal("}, {"sha": "13090ca53302b48ccc5d6ff4af0f9c8255d6a87b", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=47913ee8f488e2661a06337e060fb90895680c8f", "patch": "@@ -1256,20 +1256,20 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         pointee_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, Value> {\n         let ptr_size = self.memory.pointer_size();\n-        let p: Pointer = self.memory.read_ptr_sized_unsigned(ptr, ptr_align)?.into();\n+        let p: Pointer = self.memory.read_ptr_sized(ptr, ptr_align)?.into();\n         if self.type_is_sized(pointee_ty) {\n             Ok(p.to_value())\n         } else {\n             trace!(\"reading fat pointer extra of type {}\", pointee_ty);\n             let extra = ptr.offset(ptr_size, self)?;\n             match self.tcx.struct_tail(pointee_ty).sty {\n                 ty::TyDynamic(..) => Ok(p.to_value_with_vtable(\n-                    self.memory.read_ptr_sized_unsigned(extra, ptr_align)?.to_ptr()?,\n+                    self.memory.read_ptr_sized(extra, ptr_align)?.to_ptr()?,\n                 )),\n                 ty::TySlice(..) | ty::TyStr => {\n                     let len = self\n                         .memory\n-                        .read_ptr_sized_unsigned(extra, ptr_align)?\n+                        .read_ptr_sized(extra, ptr_align)?\n                         .to_bytes()?;\n                     Ok(p.to_value_with_len(len as u64))\n                 },\n@@ -1284,7 +1284,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         let ptr = ptr.to_ptr()?;\n         let val = match ty.sty {\n             ty::TyBool => {\n-                let val = self.memory.read_primval(ptr, ptr_align, 1, false)?;\n+                let val = self.memory.read_primval(ptr, ptr_align, 1)?;\n                 let val = match val {\n                     PrimVal::Bytes(0) => false,\n                     PrimVal::Bytes(1) => true,\n@@ -1294,7 +1294,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 PrimVal::from_bool(val)\n             }\n             ty::TyChar => {\n-                let c = self.memory.read_primval(ptr, ptr_align, 4, false)?.to_bytes()? as u32;\n+                let c = self.memory.read_primval(ptr, ptr_align, 4)?.to_bytes()? as u32;\n                 match ::std::char::from_u32(c) {\n                     Some(ch) => PrimVal::from_char(ch),\n                     None => return err!(InvalidChar(c as u128)),\n@@ -1311,7 +1311,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     I128 => 16,\n                     Isize => self.memory.pointer_size(),\n                 };\n-                self.memory.read_primval(ptr, ptr_align, size, true)?\n+                self.memory.read_primval(ptr, ptr_align, size)?\n             }\n \n             ty::TyUint(uint_ty) => {\n@@ -1324,17 +1324,17 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     U128 => 16,\n                     Usize => self.memory.pointer_size(),\n                 };\n-                self.memory.read_primval(ptr, ptr_align, size, false)?\n+                self.memory.read_primval(ptr, ptr_align, size)?\n             }\n \n             ty::TyFloat(FloatTy::F32) => {\n-                PrimVal::Bytes(self.memory.read_primval(ptr, ptr_align, 4, false)?.to_bytes()?)\n+                PrimVal::Bytes(self.memory.read_primval(ptr, ptr_align, 4)?.to_bytes()?)\n             }\n             ty::TyFloat(FloatTy::F64) => {\n-                PrimVal::Bytes(self.memory.read_primval(ptr, ptr_align, 8, false)?.to_bytes()?)\n+                PrimVal::Bytes(self.memory.read_primval(ptr, ptr_align, 8)?.to_bytes()?)\n             }\n \n-            ty::TyFnPtr(_) => self.memory.read_ptr_sized_unsigned(ptr, ptr_align)?,\n+            ty::TyFnPtr(_) => self.memory.read_ptr_sized(ptr, ptr_align)?,\n             ty::TyRef(_, ref tam) |\n             ty::TyRawPtr(ref tam) => return self.read_ptr(ptr, ptr_align, tam.ty).map(Some),\n \n@@ -1344,12 +1344,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 }\n \n                 if let layout::Abi::Scalar(ref scalar) = self.layout_of(ty)?.abi {\n-                    let mut signed = false;\n-                    if let layout::Int(_, s) = scalar.value {\n-                        signed = s;\n-                    }\n                     let size = scalar.value.size(self).bytes();\n-                    self.memory.read_primval(ptr, ptr_align, size, signed)?\n+                    self.memory.read_primval(ptr, ptr_align, size)?\n                 } else {\n                     return Ok(None);\n                 }"}, {"sha": "b369f80e849b0560404bfff09110d1846bbd9291", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=47913ee8f488e2661a06337e060fb90895680c8f", "patch": "@@ -655,7 +655,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub fn read_primval(&self, ptr: MemoryPointer, ptr_align: Align, size: u64, signed: bool) -> EvalResult<'tcx, PrimVal> {\n+    pub fn read_primval(&self, ptr: MemoryPointer, ptr_align: Align, size: u64) -> EvalResult<'tcx, PrimVal> {\n         self.check_relocation_edges(ptr, size)?; // Make sure we don't read part of a pointer as a pointer\n         let endianness = self.endianness();\n         let bytes = self.get_bytes_unchecked(ptr, size, ptr_align.min(self.int_align(size)))?;\n@@ -665,14 +665,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             return Ok(PrimVal::Undef.into());\n         }\n         // Now we do the actual reading\n-        let bytes = if signed {\n-            let bytes = read_target_int(endianness, bytes).unwrap() as u128;\n-            let amt = 128 - (size * 8);\n-            // truncate (shift left to drop out leftover values, shift right to fill with zeroes)\n-            (bytes << amt) >> amt\n-        } else {\n-            read_target_uint(endianness, bytes).unwrap()\n-        };\n+        let bytes = read_target_uint(endianness, bytes).unwrap();\n         // See if we got a pointer\n         if size != self.pointer_size() {\n             if self.relocations(ptr, size)?.count() != 0 {\n@@ -689,8 +682,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         Ok(PrimVal::Bytes(bytes))\n     }\n \n-    pub fn read_ptr_sized_unsigned(&self, ptr: MemoryPointer, ptr_align: Align) -> EvalResult<'tcx, PrimVal> {\n-        self.read_primval(ptr, ptr_align, self.pointer_size(), false)\n+    pub fn read_ptr_sized(&self, ptr: MemoryPointer, ptr_align: Align) -> EvalResult<'tcx, PrimVal> {\n+        self.read_primval(ptr, ptr_align, self.pointer_size())\n     }\n \n     pub fn write_primval(&mut self, ptr: MemoryPointer, ptr_align: Align, val: PrimVal, size: u64, signed: bool) -> EvalResult<'tcx> {\n@@ -901,13 +894,6 @@ pub fn read_target_uint(endianness: layout::Endian, mut source: &[u8]) -> Result\n     }\n }\n \n-pub fn read_target_int(endianness: layout::Endian, mut source: &[u8]) -> Result<i128, io::Error> {\n-    match endianness {\n-        layout::Endian::Little => source.read_int128::<LittleEndian>(source.len()),\n-        layout::Endian::Big => source.read_int128::<BigEndian>(source.len()),\n-    }\n-}\n-\n ////////////////////////////////////////////////////////////////////////////////\n // Unaligned accesses\n ////////////////////////////////////////////////////////////////////////////////\n@@ -924,7 +910,7 @@ pub trait HasMemory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     ) -> EvalResult<'tcx, Pointer> {\n         Ok(match value {\n             Value::ByRef(ptr, align) => {\n-                self.memory().read_ptr_sized_unsigned(ptr.to_ptr()?, align)?\n+                self.memory().read_ptr_sized(ptr.to_ptr()?, align)?\n             }\n             Value::ByVal(ptr) |\n             Value::ByValPair(ptr, _) => ptr,\n@@ -938,8 +924,8 @@ pub trait HasMemory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n         match value {\n             Value::ByRef(ref_ptr, align) => {\n                 let mem = self.memory();\n-                let ptr = mem.read_ptr_sized_unsigned(ref_ptr.to_ptr()?, align)?.into();\n-                let vtable = mem.read_ptr_sized_unsigned(\n+                let ptr = mem.read_ptr_sized(ref_ptr.to_ptr()?, align)?.into();\n+                let vtable = mem.read_ptr_sized(\n                     ref_ptr.offset(mem.pointer_size(), &mem.tcx.data_layout)?.to_ptr()?,\n                     align\n                 )?.to_ptr()?;\n@@ -960,8 +946,8 @@ pub trait HasMemory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n         match value {\n             Value::ByRef(ref_ptr, align) => {\n                 let mem = self.memory();\n-                let ptr = mem.read_ptr_sized_unsigned(ref_ptr.to_ptr()?, align)?.into();\n-                let len = mem.read_ptr_sized_unsigned(\n+                let ptr = mem.read_ptr_sized(ref_ptr.to_ptr()?, align)?.into();\n+                let len = mem.read_ptr_sized(\n                     ref_ptr.offset(mem.pointer_size(), &mem.tcx.data_layout)?.to_ptr()?,\n                     align\n                 )?.to_bytes()? as u64;"}, {"sha": "ae6337d82c3e3bd954be2be08b91ae57b6823e1d", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=47913ee8f488e2661a06337e060fb90895680c8f", "patch": "@@ -30,4 +30,4 @@ pub use self::const_eval::{\n \n pub use self::machine::Machine;\n \n-pub use self::memory::{write_target_uint, write_target_int, read_target_uint, read_target_int};\n+pub use self::memory::{write_target_uint, write_target_int, read_target_uint};"}, {"sha": "babc78470147584e87d455e8fa0b647ce8438866", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=47913ee8f488e2661a06337e060fb90895680c8f", "patch": "@@ -401,7 +401,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 let ptr_size = self.memory.pointer_size();\n                 let ptr_align = self.tcx.data_layout.pointer_align;\n                 let (ptr, vtable) = self.into_ptr_vtable_pair(args[0].value)?;\n-                let fn_ptr = self.memory.read_ptr_sized_unsigned(\n+                let fn_ptr = self.memory.read_ptr_sized(\n                     vtable.offset(ptr_size * (idx as u64 + 3), &self)?,\n                     ptr_align\n                 )?.to_ptr()?;"}, {"sha": "ded27108e716a235498d2ac4bb87e262512fd4ca", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47913ee8f488e2661a06337e060fb90895680c8f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=47913ee8f488e2661a06337e060fb90895680c8f", "patch": "@@ -79,8 +79,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     ) -> EvalResult<'tcx, (Size, Align)> {\n         let pointer_size = self.memory.pointer_size();\n         let pointer_align = self.tcx.data_layout.pointer_align;\n-        let size = self.memory.read_ptr_sized_unsigned(vtable.offset(pointer_size, self)?, pointer_align)?.to_bytes()? as u64;\n-        let align = self.memory.read_ptr_sized_unsigned(\n+        let size = self.memory.read_ptr_sized(vtable.offset(pointer_size, self)?, pointer_align)?.to_bytes()? as u64;\n+        let align = self.memory.read_ptr_sized(\n             vtable.offset(pointer_size * 2, self)?,\n             pointer_align\n         )?.to_bytes()? as u64;"}]}