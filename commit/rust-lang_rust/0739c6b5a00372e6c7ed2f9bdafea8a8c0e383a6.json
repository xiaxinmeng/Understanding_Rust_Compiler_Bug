{"sha": "0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MzljNmI1YTAwMzcyZTZjN2VkMmY5YmRhZmVhOGE4YzBlMzgzYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-22T20:29:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-22T20:29:10Z"}, "message": "auto merge of #7214 : Blei/rust/fix-owned-traits, r=pcwalton\n\nThis finishes the incomplete conversion of unique traits as two-word\r\nallocations started in 211d038abc05c77785f72a31840016517cf218c2.\r\n\r\nFixes #5882, #6717, #7153, #7208.", "tree": {"sha": "8de756e610327816d41871d2546d5362b432bd95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8de756e610327816d41871d2546d5362b432bd95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6", "html_url": "https://github.com/rust-lang/rust/commit/0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df166bae1ff583b39b4046becc87d28c9f90094b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df166bae1ff583b39b4046becc87d28c9f90094b", "html_url": "https://github.com/rust-lang/rust/commit/df166bae1ff583b39b4046becc87d28c9f90094b"}, {"sha": "de471a2eca15e6b9f3e4b81fc50d31b2ca9ee164", "url": "https://api.github.com/repos/rust-lang/rust/commits/de471a2eca15e6b9f3e4b81fc50d31b2ca9ee164", "html_url": "https://github.com/rust-lang/rust/commit/de471a2eca15e6b9f3e4b81fc50d31b2ca9ee164"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "004170dea7fe61346bd6a8f50528eae91faa83e9", "filename": "src/librustc/back/abi.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6/src%2Flibrustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6/src%2Flibrustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fabi.rs?ref=0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6", "patch": "@@ -57,12 +57,10 @@ pub static n_tydesc_fields: uint = 8u;\n pub static fn_field_code: uint = 0u;\n pub static fn_field_box: uint = 1u;\n \n-// The three fields of a trait object/trait instance: vtable, box, and type\n-// description.\n+// The two fields of a trait object/trait instance: vtable and box.\n+// The vtable contains the type descriptor as first element.\n pub static trt_field_vtable: uint = 0u;\n pub static trt_field_box: uint = 1u;\n-// This field is only present in unique trait objects, so it comes last.\n-pub static trt_field_tydesc: uint = 2u;\n \n pub static vec_elt_fill: uint = 0u;\n "}, {"sha": "e9febb51005cf92533c6198695d72e68583f7cfd", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6", "patch": "@@ -40,7 +40,6 @@ use middle::trans::type_::Type;\n use core::io;\n use core::libc::c_uint;\n use core::str;\n-use core::vec;\n use extra::time;\n use syntax::ast;\n \n@@ -578,11 +577,19 @@ pub fn make_take_glue(bcx: block, v: ValueRef, t: ty::t) {\n         bcx\n       }\n       ty::ty_trait(_, _, ty::UniqTraitStore, _) => {\n-        let llval = GEPi(bcx, v, [0, abi::trt_field_box]);\n-        let lltydesc = Load(bcx, GEPi(bcx, v, [0, abi::trt_field_tydesc]));\n-        call_tydesc_glue_full(bcx, llval, lltydesc,\n-                              abi::tydesc_field_take_glue, None);\n-        bcx\n+          let lluniquevalue = GEPi(bcx, v, [0, abi::trt_field_box]);\n+          let llvtable = Load(bcx, GEPi(bcx, v, [0, abi::trt_field_vtable]));\n+\n+          // Cast the vtable to a pointer to a pointer to a tydesc.\n+          let llvtable = PointerCast(bcx, llvtable,\n+                                     bcx.ccx().tydesc_type.ptr_to().ptr_to());\n+          let lltydesc = Load(bcx, llvtable);\n+          call_tydesc_glue_full(bcx,\n+                                lluniquevalue,\n+                                lltydesc,\n+                                abi::tydesc_field_take_glue,\n+                                None);\n+          bcx\n       }\n       ty::ty_opaque_closure_ptr(ck) => {\n         closure::make_opaque_cbox_take_glue(bcx, ck, v)"}, {"sha": "50b6666a20be15db91a59414b5f618d22f9bad5c", "filename": "src/test/run-pass/owned-trait-objects.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6/src%2Ftest%2Frun-pass%2Fowned-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6/src%2Ftest%2Frun-pass%2Fowned-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fowned-trait-objects.rs?ref=0739c6b5a00372e6c7ed2f9bdafea8a8c0e383a6", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::uint::{range};\n+\n+trait FooTrait {\n+    fn foo(&self) -> uint;\n+}\n+\n+struct BarStruct {\n+    x: uint\n+}\n+\n+impl FooTrait for BarStruct {\n+    fn foo(&self) -> uint {\n+        self.x\n+    }\n+}\n+\n+pub fn main() {\n+    let foos: ~[ ~FooTrait ] = ~[\n+        ~BarStruct{ x: 0 } as ~FooTrait,\n+        ~BarStruct{ x: 1 } as ~FooTrait,\n+        ~BarStruct{ x: 2 } as ~FooTrait\n+    ];\n+\n+    for range(0, foos.len()) |i| {\n+        assert_eq!(i, foos[i].foo());\n+    }\n+}"}]}