{"sha": "0673417daa13cc926e2cf618627675e76730e3f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NzM0MTdkYWExM2NjOTI2ZTJjZjYxODYyNzY3NWU3NjczMGUzZjg=", "commit": {"author": {"name": "Artyom Pavlov", "email": "newpavlov@gmail.com", "date": "2018-09-12T08:50:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-12T08:50:46Z"}, "message": "Move float ops to unstable inherent methods", "tree": {"sha": "53b16d381eb5ee9b6c31b5584f89e6d66af2b297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53b16d381eb5ee9b6c31b5584f89e6d66af2b297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0673417daa13cc926e2cf618627675e76730e3f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbmNNmCRBK7hj4Ov3rIwAAdHIIALG7Z1+VwB2PWaM5IpecLNN/\nyB9KKXU+ApgU9p8BFnayWbS1Ymaln8fuWKBF3mxVgdi22OvSE86xWrRut4lbn9Ku\nrucJCkmuzL18KbCzv4ffmUW56kk5kTIzCAYH2VK+ZqH792RILyarphrT9qwLxSQp\nfQfD3xtSW6htyOCLMhndjg9z/JFXw/JhGsh1GRZkRRMaxB7oovugXCIVi7db1lM2\nqfaSV0e8+0E3Qvba9xP28gu6d2joauiST0udrK1qEa3H0hWWrD5NMHMr2H4Pl577\nrnx8LzPfSpiNdTwxpk10KZF1DC1jEmr8IwEDGXn3HN5duq1DwdvzQ9SOQLL+Eck=\n=BQrt\n-----END PGP SIGNATURE-----\n", "payload": "tree 53b16d381eb5ee9b6c31b5584f89e6d66af2b297\nparent d48a649a17401d5c5fc25e9484b41f8b4643e6c0\nauthor Artyom Pavlov <newpavlov@gmail.com> 1536742246 +0300\ncommitter GitHub <noreply@github.com> 1536742246 +0300\n\nMove float ops to unstable inherent methods"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0673417daa13cc926e2cf618627675e76730e3f8", "html_url": "https://github.com/rust-lang/rust/commit/0673417daa13cc926e2cf618627675e76730e3f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0673417daa13cc926e2cf618627675e76730e3f8/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d48a649a17401d5c5fc25e9484b41f8b4643e6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d48a649a17401d5c5fc25e9484b41f8b4643e6c0", "html_url": "https://github.com/rust-lang/rust/commit/d48a649a17401d5c5fc25e9484b41f8b4643e6c0"}], "stats": {"total": 167, "additions": 83, "deletions": 84}, "files": [{"sha": "64cb13c7eae75f7477e81a3309284e7bca676fd1", "filename": "src/libcore/time.rs", "status": "modified", "additions": 83, "deletions": 84, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/0673417daa13cc926e2cf618627675e76730e3f8/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0673417daa13cc926e2cf618627675e76730e3f8/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=0673417daa13cc926e2cf618627675e76730e3f8", "patch": "@@ -459,6 +459,88 @@ impl Duration {\n             None\n         }\n     }\n+\n+    /// Multiply `Duration` by `f64`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\n+    /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n+    /// ```\n+    #[unstable(feature = \"duration_float_ops\",\n+               reason = \"duration/floats operations are unstabe\",\n+               issue = \"0\")]\n+    #[inline]\n+    pub fn mul_f64(self, rhs: f64) -> Duration {\n+        const NPS: f64 = NANOS_PER_SEC as f64;\n+        let nanos_f64 = rhs * (NPS * (self.secs as f64) + (self.nanos as f64));\n+        if !nanos_f64.is_finite() {\n+            panic!(\"got non-finite value when multiplying duration by float\");\n+        }\n+        if nanos_f64 > MAX_NANOS_F64 {\n+            panic!(\"overflow when multiplying duration by float\");\n+        }\n+        if nanos_f64 < 0.0 {\n+            panic!(\"underflow when multiplying duration by float\");\n+        }\n+        let nanos_u128 = nanos_f64 as u128;\n+        Duration {\n+            secs: (nanos_u128 / (NANOS_PER_SEC as u128)) as u64,\n+            nanos: (nanos_u128 % (NANOS_PER_SEC as u128)) as u32,\n+        }\n+    }\n+\n+    /// Divide `Duration` by `f64`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// assert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));\n+    /// // note that truncation is used, not rounding\n+    /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n+    /// ```\n+    #[unstable(feature = \"duration_float_ops\",\n+               reason = \"duration/floats operations are unstabe\",\n+               issue = \"0\")]\n+    #[inline]\n+    pub fn div_f64(self, rhs: f64) -> Duration {\n+        const NPS: f64 = NANOS_PER_SEC as f64;\n+        let nanos_f64 = (NPS * (self.secs as f64) + (self.nanos as f64)) / rhs;\n+        if !nanos_f64.is_finite() {\n+            panic!(\"got non-finite value when dividing duration by float\");\n+        }\n+        if nanos_f64 > MAX_NANOS_F64 {\n+            panic!(\"overflow when dividing duration by float\");\n+        }\n+        if nanos_f64 < 0.0 {\n+            panic!(\"underflow when multiplying duration by float\");\n+        }\n+        let nanos_u128 = nanos_f64 as u128;\n+        Duration {\n+            secs: (nanos_u128 / (NANOS_PER_SEC as u128)) as u64,\n+            nanos: (nanos_u128 % (NANOS_PER_SEC as u128)) as u32,\n+        }\n+    }\n+\n+    /// Divide `Duration` by `Duration` and return `f64`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// let dur1 = Duration::new(2, 700_000_000);\n+    /// let dur2 = Duration::new(5, 400_000_000);\n+    /// assert_eq!(dur1.div_duration(dur2), 0.5);\n+    /// ```\n+    #[unstable(feature = \"duration_float_ops\",\n+               reason = \"duration/floats operations are unstabe\",\n+               issue = \"0\")]\n+    #[inline]\n+    pub fn div_duration(self, rhs: Duration) -> f64 {\n+        const NPS: f64 = NANOS_PER_SEC as f64;\n+        let nanos1 = NPS * (self.secs as f64) + (self.nanos as f64);\n+        let nanos2 = NPS * (rhs.secs as f64) + (rhs.nanos as f64);\n+        nanos1/nanos2\n+    }\n }\n \n #[stable(feature = \"duration\", since = \"1.3.0\")]\n@@ -502,7 +584,7 @@ impl Mul<u32> for Duration {\n     }\n }\n \n-#[stable(feature = \"duration_mul_div_extras\", since = \"1.30.0\")]\n+#[stable(feature = \"symmetric_u32_duration_mul\", since = \"1.30.0\")]\n impl Mul<Duration> for u32 {\n     type Output = Duration;\n \n@@ -511,53 +593,13 @@ impl Mul<Duration> for u32 {\n     }\n }\n \n-#[stable(feature = \"duration_mul_div_extras\", since = \"1.30.0\")]\n-impl Mul<f64> for Duration {\n-    type Output = Duration;\n-\n-    fn mul(self, rhs: f64) -> Duration {\n-        const NPS: f64 = NANOS_PER_SEC as f64;\n-        let nanos_f64 = rhs * (NPS * (self.secs as f64) + (self.nanos as f64));\n-        if !nanos_f64.is_finite() {\n-            panic!(\"got non-finite value when multiplying duration by float\");\n-        }\n-        if nanos_f64 > MAX_NANOS_F64 {\n-            panic!(\"overflow when multiplying duration by float\");\n-        }\n-        if nanos_f64 < 0.0 {\n-            panic!(\"underflow when multiplying duration by float\");\n-        }\n-        let nanos_u128 = nanos_f64 as u128;\n-        Duration {\n-            secs: (nanos_u128 / (NANOS_PER_SEC as u128)) as u64,\n-            nanos: (nanos_u128 % (NANOS_PER_SEC as u128)) as u32,\n-        }\n-    }\n-}\n-\n-#[stable(feature = \"duration_mul_div_extras\", since = \"1.30.0\")]\n-impl Mul<Duration> for f64 {\n-    type Output = Duration;\n-\n-    fn mul(self, rhs: Duration) -> Duration {\n-        rhs * self\n-    }\n-}\n-\n #[stable(feature = \"time_augmented_assignment\", since = \"1.9.0\")]\n impl MulAssign<u32> for Duration {\n     fn mul_assign(&mut self, rhs: u32) {\n         *self = *self * rhs;\n     }\n }\n \n-#[stable(feature = \"duration_mul_div_extras\", since = \"1.30.0\")]\n-impl MulAssign<f64> for Duration {\n-    fn mul_assign(&mut self, rhs: f64) {\n-        *self = *self * rhs;\n-    }\n-}\n-\n #[stable(feature = \"duration\", since = \"1.3.0\")]\n impl Div<u32> for Duration {\n     type Output = Duration;\n@@ -567,56 +609,13 @@ impl Div<u32> for Duration {\n     }\n }\n \n-#[stable(feature = \"duration_mul_div_extras\", since = \"1.30.0\")]\n-impl Div<f64> for Duration {\n-    type Output = Duration;\n-\n-    fn div(self, rhs: f64) -> Duration {\n-        const NPS: f64 = NANOS_PER_SEC as f64;\n-        let nanos_f64 = (NPS * (self.secs as f64) + (self.nanos as f64)) / rhs;\n-        if !nanos_f64.is_finite() {\n-            panic!(\"got non-finite value when dividing duration by float\");\n-        }\n-        if nanos_f64 > MAX_NANOS_F64 {\n-            panic!(\"overflow when dividing duration by float\");\n-        }\n-        if nanos_f64 < 0.0 {\n-            panic!(\"underflow when multiplying duration by float\");\n-        }\n-        let nanos_u128 = nanos_f64 as u128;\n-        Duration {\n-            secs: (nanos_u128 / (NANOS_PER_SEC as u128)) as u64,\n-            nanos: (nanos_u128 % (NANOS_PER_SEC as u128)) as u32,\n-        }\n-    }\n-}\n-\n-#[stable(feature = \"duration_mul_div_extras\", since = \"1.30.0\")]\n-impl Div<Duration> for Duration {\n-    type Output = f64;\n-\n-    fn div(self, rhs: Duration) -> f64 {\n-        const NPS: f64 = NANOS_PER_SEC as f64;\n-        let nanos1 = NPS * (self.secs as f64) + (self.nanos as f64);\n-        let nanos2 = NPS * (rhs.secs as f64) + (rhs.nanos as f64);\n-        nanos1/nanos2\n-    }\n-}\n-\n #[stable(feature = \"time_augmented_assignment\", since = \"1.9.0\")]\n impl DivAssign<u32> for Duration {\n     fn div_assign(&mut self, rhs: u32) {\n         *self = *self / rhs;\n     }\n }\n \n-#[stable(feature = \"duration_mul_div_extras\", since = \"1.30.0\")]\n-impl DivAssign<f64> for Duration {\n-    fn div_assign(&mut self, rhs: f64) {\n-        *self = *self / rhs;\n-    }\n-}\n-\n \n macro_rules! sum_durations {\n     ($iter:expr) => {{"}]}