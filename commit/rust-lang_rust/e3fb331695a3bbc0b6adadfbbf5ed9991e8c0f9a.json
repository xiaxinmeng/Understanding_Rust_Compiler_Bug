{"sha": "e3fb331695a3bbc0b6adadfbbf5ed9991e8c0f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZmIzMzE2OTVhM2JiYzBiNmFkYWRmYmJmNWVkOTk5MWU4YzBmOWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-22T22:55:45Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-22T23:02:53Z"}, "message": "Temporarily accept [i|u][32|size] suffixes on a tuple index and warn", "tree": {"sha": "a6d2047b637059caf0a421aa780f1bfce1ce4934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6d2047b637059caf0a421aa780f1bfce1ce4934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3fb331695a3bbc0b6adadfbbf5ed9991e8c0f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fb331695a3bbc0b6adadfbbf5ed9991e8c0f9a", "html_url": "https://github.com/rust-lang/rust/commit/e3fb331695a3bbc0b6adadfbbf5ed9991e8c0f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3fb331695a3bbc0b6adadfbbf5ed9991e8c0f9a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "html_url": "https://github.com/rust-lang/rust/commit/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "32816d0b0b95230c6624cf681868448bfeb73432", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb331695a3bbc0b6adadfbbf5ed9991e8c0f9a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb331695a3bbc0b6adadfbbf5ed9991e8c0f9a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e3fb331695a3bbc0b6adadfbbf5ed9991e8c0f9a", "patch": "@@ -1145,9 +1145,34 @@ impl<'a> Parser<'a> {\n                 if text.is_empty() {\n                     self.span_bug(sp, \"found empty literal suffix in Some\")\n                 }\n-                self.struct_span_err(sp, &format!(\"suffixes on {} are invalid\", kind))\n-                    .span_label(sp, format!(\"invalid suffix `{}`\", text))\n-                    .emit();\n+                let mut err = if kind == \"a tuple index\" &&\n+                    [\"i32\", \"u32\", \"isize\", \"usize\"].contains(&text.to_string().as_str())\n+                {\n+                    // #59553: warn instead of reject out of hand to allow the fix to percolate\n+                    // through the ecosystem when people fix their macros\n+                    let mut err = self.struct_span_warn(\n+                        sp,\n+                        &format!(\"suffixes on {} are invalid\", kind),\n+                    );\n+                    err.note(&format!(\n+                        \"`{}` is *temporarily* accepted on tuple index fields as it was \\\n+                         incorrectly accepted on stable for a few releases\",\n+                        text,\n+                    ));\n+                    err.help(\n+                        \"on proc macros, you'll want to use `syn::Index::from` or \\\n+                         `proc_macro::Literal::*_unsuffixed` for code that will desugar \\\n+                         to tuple field access\",\n+                    );\n+                    err.note(\n+                        \"for more context, see https://github.com/rust-lang/rust/issues/59553\",\n+                    );\n+                    err\n+                } else {\n+                    self.struct_span_err(sp, &format!(\"suffixes on {} are invalid\", kind))\n+                };\n+                err.span_label(sp, format!(\"invalid suffix `{}`\", text));\n+                err.emit();\n             }\n         }\n     }\n@@ -1455,6 +1480,9 @@ impl<'a> Parser<'a> {\n     fn struct_span_err<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_err(sp, m)\n     }\n+    fn struct_span_warn<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> DiagnosticBuilder<'a> {\n+        self.sess.span_diagnostic.struct_span_warn(sp, m)\n+    }\n     crate fn span_bug<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> ! {\n         self.sess.span_diagnostic.span_bug(sp, m)\n     }"}]}