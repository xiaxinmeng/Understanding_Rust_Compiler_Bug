{"sha": "e9c4e291c400314d331b977c80dcf456cd6f7977", "node_id": "C_kwDOAAsO6NoAKGU5YzRlMjkxYzQwMDMxNGQzMzFiOTc3YzgwZGNmNDU2Y2Q2Zjc5Nzc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-02T16:14:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-02T16:14:05Z"}, "message": "Rollup merge of #107493 - clubby789:range-fat-arrow-followup, r=estebank\n\nImprove diagnostic for missing space in range pattern\n\nImproves the diagnostic in #107425 by turning it into a note explaining the parsing issue.\n\nr? `@compiler-errors`", "tree": {"sha": "9a36177a9ab41f6d7b17da8a56af0aac5374152e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a36177a9ab41f6d7b17da8a56af0aac5374152e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9c4e291c400314d331b977c80dcf456cd6f7977", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj2+FNCRBK7hj4Ov3rIwAA6SkIAA2Q8ghm3awdZ+ZMz5tNcRrc\n4sbQxHOcqgEoxIy+YKuoKPkliGZuJdPqTOwrZXLHa2hgFJdVR8TKCfASVYFYH8NJ\n5xvMhhNkdL/YLxthpRhe5d0gA/++Ng2QIS9K82XWJsMFZSrYVr1m+XJpYBrsyCo0\nZOOINn6Gp1Q1MEprJRyiHUDHIOxgSEplgHXzVea2koVJ2NZYVkW4hymd8lrUASfM\nOqQMgVpDKWiY98ZvgRtOXLmvpVmBKoM2CwShnp3QNi+gIYjDGOS95BeBo6AczPdv\nLWxMd1DtDr8Ar3TN/YRIsXgxsH0XykkwjMvoLWeLkWUge2ETwn3gfEmCRmSambs=\n=RENM\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a36177a9ab41f6d7b17da8a56af0aac5374152e\nparent 8f47954742364b452716daff72bba976e18288e5\nparent 4ab75de934935f59f243ab64a641e28aa89e6fcd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675354445 +0100\ncommitter GitHub <noreply@github.com> 1675354445 +0100\n\nRollup merge of #107493 - clubby789:range-fat-arrow-followup, r=estebank\n\nImprove diagnostic for missing space in range pattern\n\nImproves the diagnostic in #107425 by turning it into a note explaining the parsing issue.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c4e291c400314d331b977c80dcf456cd6f7977", "html_url": "https://github.com/rust-lang/rust/commit/e9c4e291c400314d331b977c80dcf456cd6f7977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9c4e291c400314d331b977c80dcf456cd6f7977/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f47954742364b452716daff72bba976e18288e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f47954742364b452716daff72bba976e18288e5", "html_url": "https://github.com/rust-lang/rust/commit/8f47954742364b452716daff72bba976e18288e5"}, {"sha": "4ab75de934935f59f243ab64a641e28aa89e6fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab75de934935f59f243ab64a641e28aa89e6fcd", "html_url": "https://github.com/rust-lang/rust/commit/4ab75de934935f59f243ab64a641e28aa89e6fcd"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "244eb41eb39eba2ba32b4d0556d939293df4fc51", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9c4e291c400314d331b977c80dcf456cd6f7977/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e9c4e291c400314d331b977c80dcf456cd6f7977/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=e9c4e291c400314d331b977c80dcf456cd6f7977", "patch": "@@ -203,8 +203,9 @@ parse_inclusive_range_extra_equals = unexpected `=` after inclusive range\n     .suggestion_remove_eq = use `..=` instead\n     .note = inclusive ranges end with a single equals sign (`..=`)\n \n-parse_inclusive_range_match_arrow = unexpected `=>` after open range\n-    .suggestion_add_space = add a space between the pattern and `=>`\n+parse_inclusive_range_match_arrow = unexpected `>` after inclusive range\n+    .label = this is parsed as an inclusive range `..=`\n+    .suggestion = add a space between the pattern and `=>`\n \n parse_inclusive_range_no_end = inclusive range with no end\n     .suggestion_open_range = use `..` instead"}, {"sha": "fd4333dbbecc3763f3dace3162c65890403af1cc", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9c4e291c400314d331b977c80dcf456cd6f7977/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c4e291c400314d331b977c80dcf456cd6f7977/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=e9c4e291c400314d331b977c80dcf456cd6f7977", "patch": "@@ -670,13 +670,10 @@ pub(crate) struct InclusiveRangeExtraEquals {\n #[diag(parse_inclusive_range_match_arrow)]\n pub(crate) struct InclusiveRangeMatchArrow {\n     #[primary_span]\n+    pub arrow: Span,\n+    #[label]\n     pub span: Span,\n-    #[suggestion(\n-        suggestion_add_space,\n-        style = \"verbose\",\n-        code = \" \",\n-        applicability = \"machine-applicable\"\n-    )]\n+    #[suggestion(style = \"verbose\", code = \" \", applicability = \"machine-applicable\")]\n     pub after_pat: Span,\n }\n "}, {"sha": "3d42a9dcbbea1916b3c6d3e66e408d2fc1eff1e9", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9c4e291c400314d331b977c80dcf456cd6f7977/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c4e291c400314d331b977c80dcf456cd6f7977/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=e9c4e291c400314d331b977c80dcf456cd6f7977", "patch": "@@ -2717,6 +2717,14 @@ impl<'a> Parser<'a> {\n                     );\n                     err.emit();\n                     this.bump();\n+                } else if matches!(\n+                    (&this.prev_token.kind, &this.token.kind),\n+                    (token::DotDotEq, token::Gt)\n+                ) {\n+                    // `error_inclusive_range_match_arrow` handles cases like `0..=> {}`,\n+                    // so we supress the error here\n+                    err.delay_as_bug();\n+                    this.bump();\n                 } else {\n                     return Err(err);\n                 }"}, {"sha": "b054dc59a0c9d93b43d1b2a365a4ec12d23c22ea", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9c4e291c400314d331b977c80dcf456cd6f7977/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c4e291c400314d331b977c80dcf456cd6f7977/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=e9c4e291c400314d331b977c80dcf456cd6f7977", "patch": "@@ -743,7 +743,7 @@ impl<'a> Parser<'a> {\n             }\n             token::Gt if no_space => {\n                 let after_pat = span.with_hi(span.hi() - rustc_span::BytePos(1)).shrink_to_hi();\n-                self.sess.emit_err(InclusiveRangeMatchArrow { span, after_pat });\n+                self.sess.emit_err(InclusiveRangeMatchArrow { span, arrow: tok.span, after_pat });\n             }\n             _ => {\n                 self.sess.emit_err(InclusiveRangeNoEnd { span });"}, {"sha": "30173b1b4be031eb2642eab7234bb7b65e439548", "filename": "tests/ui/half-open-range-patterns/half-open-range-pats-inclusive-match-arrow.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9c4e291c400314d331b977c80dcf456cd6f7977/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c4e291c400314d331b977c80dcf456cd6f7977/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs?ref=e9c4e291c400314d331b977c80dcf456cd6f7977", "patch": "@@ -2,7 +2,8 @@ fn main() {\n     let x = 42;\n     match x {\n         0..=73 => {},\n-        74..=> {},   //~ ERROR unexpected `=>` after open range\n-                     //~^ ERROR expected one of `=>`, `if`, or `|`, found `>`\n+        74..=> {},\n+        //~^ ERROR unexpected `>` after inclusive range\n+        //~| NOTE this is parsed as an inclusive range `..=`\n     }\n }"}, {"sha": "cb7f998df7a5b1471191ee7c46381b2662caf061", "filename": "tests/ui/half-open-range-patterns/half-open-range-pats-inclusive-match-arrow.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9c4e291c400314d331b977c80dcf456cd6f7977/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9c4e291c400314d331b977c80dcf456cd6f7977/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr?ref=e9c4e291c400314d331b977c80dcf456cd6f7977", "patch": "@@ -1,19 +1,15 @@\n-error: unexpected `=>` after open range\n-  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:11\n+error: unexpected `>` after inclusive range\n+  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:14\n    |\n LL |         74..=> {},\n-   |           ^^^\n+   |           ---^\n+   |           |\n+   |           this is parsed as an inclusive range `..=`\n    |\n help: add a space between the pattern and `=>`\n    |\n LL |         74.. => {},\n    |             +\n \n-error: expected one of `=>`, `if`, or `|`, found `>`\n-  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:14\n-   |\n-LL |         74..=> {},\n-   |              ^ expected one of `=>`, `if`, or `|`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}