{"sha": "c622840b909428bc77ab67f4f4fb61d03abb65eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MjI4NDBiOTA5NDI4YmM3N2FiNjdmNGY0ZmI2MWQwM2FiYjY1ZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-10T17:51:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-10T17:51:48Z"}, "message": "Auto merge of #86098 - pietroalbini:test-stable, r=Mark-Simulacrum\n\nAdd the x86_64-gnu-stable builder\n\nDuring the 1.52 release process we had to deal with some commits that passed the test suite on the nightly branch but failed on the beta or stable branch. In that case it was due to some UI tests including the channel name in the output, but other changes might also be dependent on the channel.\n\nThis commit adds a new CI job that runs the Linux x86_64 test suite with the stable branch, ensuring nightly changes also work as stable. To ensure the new job works the following other changes are present:\n\n* The `ui-fulldeps/session-derive-errors.rs` test has been disabled on beta and stable, which required adding support for `// ignore-{channel}` and `// only-{channel}`.\n* The `rustdoc/intra-doc/field.rs` has been fixed.\n\nr? `@Mark-Simulacrum`\nfixes https://github.com/rust-lang/release-team/issues/11", "tree": {"sha": "c1bfa7c9e7abfa2f658ed7f923aed2b38b2313e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1bfa7c9e7abfa2f658ed7f923aed2b38b2313e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c622840b909428bc77ab67f4f4fb61d03abb65eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c622840b909428bc77ab67f4f4fb61d03abb65eb", "html_url": "https://github.com/rust-lang/rust/commit/c622840b909428bc77ab67f4f4fb61d03abb65eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c622840b909428bc77ab67f4f4fb61d03abb65eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f949e94e8429ef33bb0ecb32082590631402b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f949e94e8429ef33bb0ecb32082590631402b23", "html_url": "https://github.com/rust-lang/rust/commit/1f949e94e8429ef33bb0ecb32082590631402b23"}, {"sha": "12d37e615faa179b90cbaf34e082fa0c03e416f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/12d37e615faa179b90cbaf34e082fa0c03e416f8", "html_url": "https://github.com/rust-lang/rust/commit/12d37e615faa179b90cbaf34e082fa0c03e416f8"}], "stats": {"total": 94, "additions": 72, "deletions": 22}, "files": [{"sha": "36362635b154552995070c1faaf9a3448ba71f4c", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -259,6 +259,11 @@ jobs:\n           - name: x86_64-gnu\n             os: ubuntu-latest-xl\n             env: {}\n+          - name: x86_64-gnu-stable\n+            env:\n+              IMAGE: x86_64-gnu\n+              RUST_CI_OVERRIDE_RELEASE_CHANNEL: stable\n+            os: ubuntu-latest-xl\n           - name: x86_64-gnu-aux\n             os: ubuntu-latest-xl\n             env: {}"}, {"sha": "fe4666effe6228aa3482fe7e9bc1d84b5d79fbfd", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -1503,6 +1503,8 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.env(\"BOOTSTRAP_CARGO\", &builder.initial_cargo);\n \n+        cmd.arg(\"--channel\").arg(&builder.config.channel);\n+\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         builder.info(&format!("}, {"sha": "3a47076722c3a8b5ca3a500180e43756258497cb", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -235,6 +235,7 @@ docker \\\n   --env TOOLSTATE_REPO_ACCESS_TOKEN \\\n   --env TOOLSTATE_REPO \\\n   --env TOOLSTATE_PUBLISH \\\n+  --env RUST_CI_OVERRIDE_RELEASE_CHANNEL \\\n   --env CI_JOB_NAME=\"${CI_JOB_NAME-$IMAGE}\" \\\n   --init \\\n   --rm \\"}, {"sha": "e704071e401b77398b291b7334258a9cce8aeb06", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -407,6 +407,17 @@ jobs:\n           - name: x86_64-gnu\n             <<: *job-linux-xl\n \n+          # This job ensures commits landing on nightly still pass the full\n+          # test suite on the stable channel. There are some UI tests that\n+          # depend on the channel being built (for example if they include the\n+          # channel name on the output), and this builder prevents landing\n+          # changes that would result in broken builds after a promotion.\n+          - name: x86_64-gnu-stable\n+            env:\n+              IMAGE: x86_64-gnu\n+              RUST_CI_OVERRIDE_RELEASE_CHANNEL: stable\n+            <<: *job-linux-xl\n+\n           - name: x86_64-gnu-aux\n             <<: *job-linux-xl\n "}, {"sha": "c5e225c7cd17df61bb3e49051c7002a4b6f0383a", "filename": "src/ci/run.sh", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -65,7 +65,11 @@ fi\n # Always set the release channel for bootstrap; this is normally not important (i.e., only dist\n # builds would seem to matter) but in practice bootstrap wants to know whether we're targeting\n # master, beta, or stable with a build to determine whether to run some checks (notably toolstate).\n-export RUST_RELEASE_CHANNEL=\"$(cat \"${ci_dir}/channel\")\"\n+if [[ -z \"${RUST_CI_OVERRIDE_RELEASE_CHANNEL+x}\" ]]; then\n+    export RUST_RELEASE_CHANNEL=\"$(cat \"${ci_dir}/channel\")\"\n+else\n+    export RUST_RELEASE_CHANNEL=\"${RUST_CI_OVERRIDE_RELEASE_CHANNEL}\"\n+fi\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n \n if [ \"$DEPLOY$DEPLOY_ALT\" = \"1\" ]; then"}, {"sha": "001143489242026b9b73e0a99526fda6a514b06c", "filename": "src/test/rustdoc/intra-doc/field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftest%2Frustdoc%2Fintra-doc%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftest%2Frustdoc%2Fintra-doc%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ffield.rs?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -1,4 +1,4 @@\n-// @has field/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html#structfield.start\"]' 'start'\n-// @has field/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html#variant.NotFound\"]' 'not_found'\n+// @has field/index.html '//a[@href=\"{{channel}}/core/ops/range/struct.Range.html#structfield.start\"]' 'start'\n+// @has field/index.html '//a[@href=\"{{channel}}/std/io/error/enum.ErrorKind.html#variant.NotFound\"]' 'not_found'\n //! [start][std::ops::Range::start]\n //! [not_found][std::io::ErrorKind::NotFound]"}, {"sha": "140aaad3b3839af41abdf4d722a7007b80ec124e", "filename": "src/test/ui-fulldeps/session-derive-errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -1,6 +1,12 @@\n // check-fail\n // Tests error conditions for specifying diagnostics using #[derive(SessionDiagnostic)]\n \n+// The proc_macro2 crate handles spans differently when on beta/stable release rather than nightly,\n+// changing the output of this test. Since SessionDiagnostic is strictly internal to the compiler\n+// the test is just ignored on stable and beta:\n+// ignore-beta\n+// ignore-stable\n+\n #![feature(rustc_private)]\n #![crate_type = \"lib\"]\n "}, {"sha": "2f1debe25b74fddb5563fe44345a4c267fbaa159", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -1,5 +1,5 @@\n error: `#[derive(SessionDiagnostic)]` can only be used on structs\n-  --> $DIR/session-derive-errors.rs:28:1\n+  --> $DIR/session-derive-errors.rs:34:1\n    |\n LL | / #[error = \"E0123\"]\n LL | |\n@@ -10,51 +10,51 @@ LL | | }\n    | |_^\n \n error: `#[label = ...]` is not a valid SessionDiagnostic struct attribute\n-  --> $DIR/session-derive-errors.rs:37:1\n+  --> $DIR/session-derive-errors.rs:43:1\n    |\n LL | #[label = \"This is in the wrong place\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion = ...]` is not a valid SessionDiagnostic field attribute\n-  --> $DIR/session-derive-errors.rs:44:5\n+  --> $DIR/session-derive-errors.rs:50:5\n    |\n LL |     #[suggestion = \"this is the wrong kind of attribute\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `error` specified multiple times\n-  --> $DIR/session-derive-errors.rs:52:11\n+  --> $DIR/session-derive-errors.rs:58:11\n    |\n LL | #[error = \"E0456\"]\n    |           ^^^^^^^\n \n error: `lint` specified when `error` was already specified\n-  --> $DIR/session-derive-errors.rs:58:10\n+  --> $DIR/session-derive-errors.rs:64:10\n    |\n LL | #[lint = \"some_useful_lint\"]\n    |          ^^^^^^^^^^^^^^^^^^\n \n error: `code` not specified\n-  --> $DIR/session-derive-errors.rs:67:1\n+  --> $DIR/session-derive-errors.rs:73:1\n    |\n LL | struct ErrorCodeNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use the [code = \"...\"] attribute to set this diagnostic's error code \n \n error: the `#[message = \"...\"]` attribute can only be applied to fields of type Span\n-  --> $DIR/session-derive-errors.rs:95:5\n+  --> $DIR/session-derive-errors.rs:101:5\n    |\n LL |     #[message = \"this message is applied to a String field\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/session-derive-errors.rs:102:1\n+  --> $DIR/session-derive-errors.rs:108:1\n    |\n LL | #[message = \"This error has a field, and references {name}\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/session-derive-errors.rs:110:1\n+  --> $DIR/session-derive-errors.rs:116:1\n    |\n LL | #[error = \"E0123\"]\n    |               - because of this opening brace\n@@ -65,7 +65,7 @@ LL | #[message = \"This is missing a closing brace: {name\"]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/session-derive-errors.rs:119:1\n+  --> $DIR/session-derive-errors.rs:125:1\n    |\n LL | #[message = \"This is missing an opening brace: name}\"]\n    | ^ unmatched `}` in format string\n@@ -74,33 +74,33 @@ LL | #[message = \"This is missing an opening brace: name}\"]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: The `#[label = ...]` attribute can only be applied to fields of type Span\n-  --> $DIR/session-derive-errors.rs:138:5\n+  --> $DIR/session-derive-errors.rs:144:5\n    |\n LL |     #[label = \"See here\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: `nonsense` is not a valid key for `#[suggestion(...)]`\n-  --> $DIR/session-derive-errors.rs:163:18\n+  --> $DIR/session-derive-errors.rs:169:18\n    |\n LL |     #[suggestion(nonsense = \"This is nonsense\")]\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `msg` is not a valid key for `#[suggestion(...)]`\n-  --> $DIR/session-derive-errors.rs:171:18\n+  --> $DIR/session-derive-errors.rs:177:18\n    |\n LL |     #[suggestion(msg = \"This is a suggestion\")]\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing suggestion message\n-  --> $DIR/session-derive-errors.rs:179:7\n+  --> $DIR/session-derive-errors.rs:185:7\n    |\n LL |     #[suggestion(code = \"This is suggested code\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: provide a suggestion message using #[suggestion(message = \"...\")]\n \n error: wrong field type for suggestion\n-  --> $DIR/session-derive-errors.rs:194:5\n+  --> $DIR/session-derive-errors.rs:200:5\n    |\n LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n LL | |\n@@ -110,23 +110,23 @@ LL | |     suggestion: Applicability,\n    = help: #[suggestion(...)] should be applied to fields of type Span or (Span, Applicability)\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Span\n-  --> $DIR/session-derive-errors.rs:209:5\n+  --> $DIR/session-derive-errors.rs:215:5\n    |\n LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Span, Span, Applicability),\n    | |___________________________________________^\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n-  --> $DIR/session-derive-errors.rs:217:5\n+  --> $DIR/session-derive-errors.rs:223:5\n    |\n LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Applicability, Applicability, Span),\n    | |____________________________________________________^\n \n error: invalid annotation list `#[label(...)]`\n-  --> $DIR/session-derive-errors.rs:225:7\n+  --> $DIR/session-derive-errors.rs:231:7\n    |\n LL |     #[label(\"wrong kind of annotation for label\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a5b526be86f3db133ea17f64ea0ee51c7962d516", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -346,6 +346,9 @@ pub struct Config {\n     /// whether to run `tidy` when a rustdoc test fails\n     pub has_tidy: bool,\n \n+    /// The current Rust channel\n+    pub channel: String,\n+\n     // Configuration for various run-make tests frobbing things like C compilers\n     // or querying about various LLVM component information.\n     pub cc: String,"}, {"sha": "d3e81bd4307264bc02ad0342b8705900b4797435", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -879,6 +879,7 @@ impl Config {\n             name == util::get_arch(&self.target) ||             // architecture\n             name == util::get_pointer_width(&self.target) ||    // pointer width\n             name == self.stage_id.split('-').next().unwrap() || // stage\n+            name == self.channel ||                             // channel\n             (self.target != self.host && name == \"cross-compile\") ||\n             (name == \"endian-big\" && util::is_big_endian(&self.target)) ||\n             (self.remote_test_client.is_some() && name == \"remote\") ||"}, {"sha": "2c607b6a50ef7d6aa7992936b3a631c41542f24d", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -55,6 +55,7 @@ fn config() -> Config {\n         \"--llvm-components=\",\n         \"--android-cross-path=\",\n         \"--target=x86_64-unknown-linux-gnu\",\n+        \"--channel=nightly\",\n     ];\n     let args = args.iter().map(ToString::to_string).collect();\n     crate::parse_config(args)\n@@ -234,6 +235,20 @@ fn asm_support() {\n     assert!(!parse_rs(&config, \"// needs-asm-support\").ignore);\n }\n \n+#[test]\n+fn channel() {\n+    let mut config = config();\n+    config.channel = \"beta\".into();\n+\n+    assert!(parse_rs(&config, \"// ignore-beta\").ignore);\n+    assert!(parse_rs(&config, \"// only-nightly\").ignore);\n+    assert!(parse_rs(&config, \"// only-stable\").ignore);\n+\n+    assert!(!parse_rs(&config, \"// only-beta\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-nightly\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-stable\").ignore);\n+}\n+\n #[test]\n fn test_extract_version_range() {\n     use super::{extract_llvm_version, extract_version_range};"}, {"sha": "c854663706a503efb898ca8c590b5a96c0c638c7", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c622840b909428bc77ab67f4f4fb61d03abb65eb/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=c622840b909428bc77ab67f4f4fb61d03abb65eb", "patch": "@@ -144,7 +144,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"enable this to generate a Rustfix coverage file, which is saved in \\\n                 `./<build_base>/rustfix_missing_coverage.txt`\",\n         )\n-        .optflag(\"h\", \"help\", \"show this message\");\n+        .optflag(\"h\", \"help\", \"show this message\")\n+        .reqopt(\"\", \"channel\", \"current Rust channel\", \"CHANNEL\");\n \n     let (argv0, args_) = args.split_first().unwrap();\n     if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {\n@@ -278,6 +279,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         compare_mode: matches.opt_str(\"compare-mode\").map(CompareMode::parse),\n         rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n         has_tidy,\n+        channel: matches.opt_str(\"channel\").unwrap(),\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),"}]}