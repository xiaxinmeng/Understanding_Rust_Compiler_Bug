{"sha": "7cfbe5429458151f6cb2fbd5fe2e44c56a18b644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZmJlNTQyOTQ1ODE1MWY2Y2IyZmJkNWZlMmU0NGM1NmExOGI2NDQ=", "commit": {"author": {"name": "Count Count", "email": "countvoncount123456@gmail.com", "date": "2021-03-24T17:22:09Z"}, "committer": {"name": "Count Count", "email": "countvoncount123456@gmail.com", "date": "2021-03-24T17:22:25Z"}, "message": "assert!() instead of panic!() for expected invariant", "tree": {"sha": "e73e1b10a088d7d567c8fd64ad63f7c5b8237d47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e73e1b10a088d7d567c8fd64ad63f7c5b8237d47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cfbe5429458151f6cb2fbd5fe2e44c56a18b644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cfbe5429458151f6cb2fbd5fe2e44c56a18b644", "html_url": "https://github.com/rust-lang/rust/commit/7cfbe5429458151f6cb2fbd5fe2e44c56a18b644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cfbe5429458151f6cb2fbd5fe2e44c56a18b644/comments", "author": {"login": "Count-Count", "id": 51271955, "node_id": "MDQ6VXNlcjUxMjcxOTU1", "avatar_url": "https://avatars.githubusercontent.com/u/51271955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Count-Count", "html_url": "https://github.com/Count-Count", "followers_url": "https://api.github.com/users/Count-Count/followers", "following_url": "https://api.github.com/users/Count-Count/following{/other_user}", "gists_url": "https://api.github.com/users/Count-Count/gists{/gist_id}", "starred_url": "https://api.github.com/users/Count-Count/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Count-Count/subscriptions", "organizations_url": "https://api.github.com/users/Count-Count/orgs", "repos_url": "https://api.github.com/users/Count-Count/repos", "events_url": "https://api.github.com/users/Count-Count/events{/privacy}", "received_events_url": "https://api.github.com/users/Count-Count/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Count-Count", "id": 51271955, "node_id": "MDQ6VXNlcjUxMjcxOTU1", "avatar_url": "https://avatars.githubusercontent.com/u/51271955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Count-Count", "html_url": "https://github.com/Count-Count", "followers_url": "https://api.github.com/users/Count-Count/followers", "following_url": "https://api.github.com/users/Count-Count/following{/other_user}", "gists_url": "https://api.github.com/users/Count-Count/gists{/gist_id}", "starred_url": "https://api.github.com/users/Count-Count/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Count-Count/subscriptions", "organizations_url": "https://api.github.com/users/Count-Count/orgs", "repos_url": "https://api.github.com/users/Count-Count/repos", "events_url": "https://api.github.com/users/Count-Count/events{/privacy}", "received_events_url": "https://api.github.com/users/Count-Count/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3103f5f5501cf10c04023b74d738b245dd42cea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3103f5f5501cf10c04023b74d738b245dd42cea2", "html_url": "https://github.com/rust-lang/rust/commit/3103f5f5501cf10c04023b74d738b245dd42cea2"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "8fb0f2f9ee7f5b8fd1de22a01d8bb29ea363480d", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7cfbe5429458151f6cb2fbd5fe2e44c56a18b644/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfbe5429458151f6cb2fbd5fe2e44c56a18b644/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=7cfbe5429458151f6cb2fbd5fe2e44c56a18b644", "patch": "@@ -78,43 +78,41 @@ fn write(\n         return ret;\n     }\n \n-    match incomplete_utf8.len {\n-        0 => {}\n-        1..=3 => {\n-            if data[0] >> 6 != 0b10 {\n-                incomplete_utf8.len = 0;\n-                // not a continuation byte - reject\n+    if incomplete_utf8.len > 0 {\n+        assert!(\n+            incomplete_utf8.len < 4,\n+            \"Unexpected number of bytes for incomplete UTF-8 codepoint.\"\n+        );\n+        if data[0] >> 6 != 0b10 {\n+            incomplete_utf8.len = 0;\n+            // not a continuation byte - reject\n+            return Err(io::Error::new_const(\n+                io::ErrorKind::InvalidData,\n+                &\"Windows stdio in console mode does not support writing non-UTF-8 byte sequences\",\n+            ));\n+        }\n+        incomplete_utf8.bytes[incomplete_utf8.len as usize] = data[0];\n+        incomplete_utf8.len += 1;\n+        let char_width = utf8_char_width(incomplete_utf8.bytes[0]);\n+        if (incomplete_utf8.len as usize) < char_width {\n+            // more bytes needed\n+            return Ok(1);\n+        }\n+        let s = str::from_utf8(&incomplete_utf8.bytes[0..incomplete_utf8.len as usize]);\n+        incomplete_utf8.len = 0;\n+        match s {\n+            Ok(s) => {\n+                assert_eq!(char_width, s.len());\n+                let written = write_valid_utf8_to_console(handle, s)?;\n+                assert_eq!(written, s.len()); // guaranteed by write_valid_utf8_to_console() for single codepoint writes\n+                return Ok(1);\n+            }\n+            Err(_) => {\n                 return Err(io::Error::new_const(\n                     io::ErrorKind::InvalidData,\n                     &\"Windows stdio in console mode does not support writing non-UTF-8 byte sequences\",\n                 ));\n             }\n-            incomplete_utf8.bytes[incomplete_utf8.len as usize] = data[0];\n-            incomplete_utf8.len += 1;\n-            let char_width = utf8_char_width(incomplete_utf8.bytes[0]);\n-            if (incomplete_utf8.len as usize) < char_width {\n-                // more bytes needed\n-                return Ok(1);\n-            }\n-            let s = str::from_utf8(&incomplete_utf8.bytes[0..incomplete_utf8.len as usize]);\n-            incomplete_utf8.len = 0;\n-            match s {\n-                Ok(s) => {\n-                    assert_eq!(char_width, s.len());\n-                    let written = write_valid_utf8_to_console(handle, s)?;\n-                    assert_eq!(written, s.len()); // guaranteed by write_valid_utf8_to_console() for single codepoint writes\n-                    return Ok(1);\n-                }\n-                Err(_) => {\n-                    return Err(io::Error::new_const(\n-                        io::ErrorKind::InvalidData,\n-                        &\"Windows stdio in console mode does not support writing non-UTF-8 byte sequences\",\n-                    ));\n-                }\n-            }\n-        }\n-        _ => {\n-            panic!(\"Unexpected number of incomplete UTF-8 chars.\");\n         }\n     }\n "}]}