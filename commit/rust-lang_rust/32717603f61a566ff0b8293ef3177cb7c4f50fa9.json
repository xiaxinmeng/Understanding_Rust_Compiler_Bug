{"sha": "32717603f61a566ff0b8293ef3177cb7c4f50fa9", "node_id": "C_kwDOAAsO6NoAKDMyNzE3NjAzZjYxYTU2NmZmMGI4MjkzZWYzMTc3Y2I3YzRmNTBmYTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T07:41:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T07:41:55Z"}, "message": "Auto merge of #102695 - compiler-errors:int-and-float-trivial-copy, r=lcnr\n\nInt and float inference variables are trivially copy\n\nFixes #102645", "tree": {"sha": "cc33fd4c0f6cdf11caf2f0aa7e1cd72ed791f89f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc33fd4c0f6cdf11caf2f0aa7e1cd72ed791f89f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32717603f61a566ff0b8293ef3177cb7c4f50fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32717603f61a566ff0b8293ef3177cb7c4f50fa9", "html_url": "https://github.com/rust-lang/rust/commit/32717603f61a566ff0b8293ef3177cb7c4f50fa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32717603f61a566ff0b8293ef3177cb7c4f50fa9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "html_url": "https://github.com/rust-lang/rust/commit/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f"}, {"sha": "42321b01e0acc46839dfecd78985174e4e6ef417", "url": "https://api.github.com/repos/rust-lang/rust/commits/42321b01e0acc46839dfecd78985174e4e6ef417", "html_url": "https://github.com/rust-lang/rust/commit/42321b01e0acc46839dfecd78985174e4e6ef417"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "2f68b57a0193f5e33c2f9b90841da1601cb4538c", "filename": "compiler/rustc_hir_analysis/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32717603f61a566ff0b8293ef3177cb7c4f50fa9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32717603f61a566ff0b8293ef3177cb7c4f50fa9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=32717603f61a566ff0b8293ef3177cb7c4f50fa9", "patch": "@@ -198,6 +198,10 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n \n         // If the type being assigned needs dropped, then the mutation counts as a borrow\n         // since it is essentially doing `Drop::drop(&mut x); x = new_value;`.\n+        //\n+        // FIXME(drop-tracking): We need to be more responsible about inference\n+        // variables here, since `needs_drop` is a \"raw\" type query, i.e. it\n+        // basically requires types to have been fully resolved.\n         if assignee_place.place.base_ty.needs_drop(self.tcx, self.param_env) {\n             self.places\n                 .borrowed"}, {"sha": "cf420bafeb12fbbd768c77badbe7c6bf4b0f1855", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32717603f61a566ff0b8293ef3177cb7c4f50fa9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32717603f61a566ff0b8293ef3177cb7c4f50fa9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=32717603f61a566ff0b8293ef3177cb7c4f50fa9", "patch": "@@ -2205,7 +2205,10 @@ impl<'tcx> Ty<'tcx> {\n             // These aren't even `Clone`\n             ty::Str | ty::Slice(..) | ty::Foreign(..) | ty::Dynamic(..) => false,\n \n-            ty::Int(..) | ty::Uint(..) | ty::Float(..) => true,\n+            ty::Infer(ty::InferTy::FloatVar(_) | ty::InferTy::IntVar(_))\n+            | ty::Int(..)\n+            | ty::Uint(..)\n+            | ty::Float(..) => true,\n \n             // The voldemort ZSTs are fine.\n             ty::FnDef(..) => true,"}, {"sha": "0589c5a009a1b1e2ce12fb3597fc2f38a6e8651e", "filename": "src/test/ui/generator/issue-102645.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/32717603f61a566ff0b8293ef3177cb7c4f50fa9/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32717603f61a566ff0b8293ef3177cb7c4f50fa9/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.rs?ref=32717603f61a566ff0b8293ef3177cb7c4f50fa9", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -Zdrop-tracking\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+use std::pin::Pin;\n+\n+fn main() {\n+    let mut a = 5;\n+    let mut b = || {\n+        let d = 6;\n+        yield;\n+        _zzz(); // #break\n+        a = d;\n+    };\n+    Pin::new(&mut b).resume();\n+    //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n+    // This type error is required to reproduce the ICE...\n+}\n+\n+fn _zzz() {\n+    ()\n+}"}, {"sha": "7b4d5021325176b33b55008a850a4607c83d1c46", "filename": "src/test/ui/generator/issue-102645.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32717603f61a566ff0b8293ef3177cb7c4f50fa9/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32717603f61a566ff0b8293ef3177cb7c4f50fa9/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr?ref=32717603f61a566ff0b8293ef3177cb7c4f50fa9", "patch": "@@ -0,0 +1,19 @@\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+  --> $DIR/issue-102645.rs:16:22\n+   |\n+LL |     Pin::new(&mut b).resume();\n+   |                      ^^^^^^-- an argument of type `()` is missing\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/ops/generator.rs:LL:COL\n+   |\n+LL |     fn resume(self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return>;\n+   |        ^^^^^^\n+help: provide the argument\n+   |\n+LL |     Pin::new(&mut b).resume(());\n+   |                            ~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}]}