{"sha": "7dd4e2db785c8ec360a989f69891b1e97dd4d369", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZDRlMmRiNzg1YzhlYzM2MGE5ODlmNjk4OTFiMWU5N2RkNGQzNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-26T04:26:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-26T04:26:22Z"}, "message": "Auto merge of #40347 - alexcrichton:rm-liblog, r=brson\n\nRemove internal liblog\n\nThis commit deletes the internal liblog in favor of the implementation that\nlives on crates.io. Similarly it's also setting a convention for adding crates\nto the compiler. The main restriction right now is that we want compiler\nimplementation details to be unreachable from normal Rust code (e.g. requires a\nfeature), and by default everything in the sysroot is reachable via `extern\ncrate`.\n\nThe proposal here is to require that crates pulled in have these lines in their\n`src/lib.rs`:\n\n    #![cfg_attr(rustbuild, feature(staged_api, rustc_private))]\n    #![cfg_attr(rustbuild, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n\nThis'll mean that by default they're not using these attributes but when\ncompiled as part of the compiler they do a few things:\n\n* Mark themselves as entirely unstable via the `staged_api` feature and the\n  `#![unstable]` attribute.\n* Allow usage of other unstable crates via `feature(rustc_private)` which is\n  required if the crate relies on any other crates to compile (other than std).", "tree": {"sha": "223f7115ef30e9ec99983d7fad3bcf7ded5b9596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/223f7115ef30e9ec99983d7fad3bcf7ded5b9596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dd4e2db785c8ec360a989f69891b1e97dd4d369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd4e2db785c8ec360a989f69891b1e97dd4d369", "html_url": "https://github.com/rust-lang/rust/commit/7dd4e2db785c8ec360a989f69891b1e97dd4d369", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dd4e2db785c8ec360a989f69891b1e97dd4d369/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "html_url": "https://github.com/rust-lang/rust/commit/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b"}, {"sha": "e341d603fe7c35ce174bd2e54e47ed6941ea4b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/e341d603fe7c35ce174bd2e54e47ed6941ea4b03", "html_url": "https://github.com/rust-lang/rust/commit/e341d603fe7c35ce174bd2e54e47ed6941ea4b03"}], "stats": {"total": 1248, "additions": 54, "deletions": 1194}, "files": [{"sha": "a0b47f4f0b2bb575be40d6eefd1801047a5969eb", "filename": "src/Cargo.lock", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -147,7 +147,7 @@ dependencies = [\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n- \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -162,14 +162,6 @@ name = \"dtoa\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"env_logger\"\n-version = \"0.3.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"env_logger\"\n version = \"0.4.2\"\n@@ -270,10 +262,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"linkchecker\"\n version = \"0.1.0\"\n \n-[[package]]\n-name = \"log\"\n-version = \"0.0.0\"\n-\n [[package]]\n name = \"log\"\n version = \"0.3.7\"\n@@ -439,7 +427,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -479,7 +467,7 @@ dependencies = [\n name = \"rustc_back\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -493,7 +481,7 @@ name = \"rustc_borrowck\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -508,7 +496,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -530,7 +518,7 @@ dependencies = [\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n ]\n \n@@ -539,8 +527,9 @@ name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro_plugin 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -579,7 +568,7 @@ name = \"rustc_incremental\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -591,7 +580,7 @@ dependencies = [\n name = \"rustc_lint\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -623,7 +612,7 @@ name = \"rustc_metadata\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -642,7 +631,7 @@ name = \"rustc_mir\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -666,7 +655,7 @@ dependencies = [\n name = \"rustc_passes\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -705,7 +694,7 @@ name = \"rustc_resolve\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -716,7 +705,7 @@ dependencies = [\n name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -730,7 +719,7 @@ name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n@@ -762,7 +751,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"fmt_macros 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -780,8 +769,9 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -857,7 +847,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"syntax\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -870,7 +860,7 @@ name = \"syntax_ext\"\n version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -996,7 +986,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum clap 2.21.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74a80f603221c9cd9aa27a28f52af452850051598537bb6b359c38a7d61e5cda\"\n \"checksum cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d18d68987ed4c516dcc3e7913659bfa4076f5182eea4a7e0038bb060953e76ac\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n-\"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3856f1697098606fc6cb97a93de88ca3f3bc35bb878c725920e6e82ecf05e83\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n \"checksum gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a32cd40070d7611ab76343dcb3204b2bb28c8a9450989a83a3d590248142f439\""}, {"sha": "31a862478d034f8353f3a14132748aa6e1ddb3f2", "filename": "src/liblog/Cargo.toml", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Fliblog%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Fliblog%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2FCargo.toml?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,9 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-name = \"log\"\n-version = \"0.0.0\"\n-\n-[lib]\n-name = \"log\"\n-path = \"lib.rs\"\n-crate-type = [\"dylib\", \"rlib\"]"}, {"sha": "eb50d6e6135ef2124e10987519d18225fdf566f4", "filename": "src/liblog/directive.rs", "status": "removed", "additions": 0, "deletions": 193, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,193 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::ascii::AsciiExt;\n-use std::cmp;\n-\n-#[derive(Debug, Clone)]\n-pub struct LogDirective {\n-    pub name: Option<String>,\n-    pub level: u32,\n-}\n-\n-pub const LOG_LEVEL_NAMES: [&'static str; 5] = [\"ERROR\", \"WARN\", \"INFO\", \"DEBUG\", \"TRACE\"];\n-\n-/// Parse an individual log level that is either a number or a symbolic log level\n-fn parse_log_level(level: &str) -> Option<u32> {\n-    level.parse::<u32>()\n-        .ok()\n-        .or_else(|| {\n-            let pos = LOG_LEVEL_NAMES.iter().position(|&name| name.eq_ignore_ascii_case(level));\n-            pos.map(|p| p as u32 + 1)\n-        })\n-        .map(|p| cmp::min(p, ::MAX_LOG_LEVEL))\n-}\n-\n-/// Parse a logging specification string (e.g: \"crate1,crate2::mod3,crate3::x=1/foo\")\n-/// and return a vector with log directives.\n-///\n-/// Valid log levels are 0-255, with the most likely ones being 1-4 (defined in\n-/// std::).  Also supports string log levels of error, warn, info, and debug\n-pub fn parse_logging_spec(spec: &str) -> (Vec<LogDirective>, Option<String>) {\n-    let mut dirs = Vec::new();\n-\n-    let mut parts = spec.split('/');\n-    let mods = parts.next();\n-    let filter = parts.next();\n-    if parts.next().is_some() {\n-        println!(\"warning: invalid logging spec '{}', ignoring it (too many '/'s)\",\n-                 spec);\n-        return (dirs, None);\n-    }\n-    if let Some(m) = mods {\n-        for s in m.split(',') {\n-            if s.is_empty() {\n-                continue;\n-            }\n-            let mut parts = s.split('=');\n-            let (log_level, name) =\n-                match (parts.next(), parts.next().map(|s| s.trim()), parts.next()) {\n-                    (Some(part0), None, None) => {\n-                        // if the single argument is a log-level string or number,\n-                        // treat that as a global fallback\n-                        match parse_log_level(part0) {\n-                            Some(num) => (num, None),\n-                            None => (::MAX_LOG_LEVEL, Some(part0)),\n-                        }\n-                    }\n-                    (Some(part0), Some(\"\"), None) => (::MAX_LOG_LEVEL, Some(part0)),\n-                    (Some(part0), Some(part1), None) => {\n-                        match parse_log_level(part1) {\n-                            Some(num) => (num, Some(part0)),\n-                            _ => {\n-                                println!(\"warning: invalid logging spec '{}', ignoring it\", part1);\n-                                continue;\n-                            }\n-                        }\n-                    }\n-                    _ => {\n-                        println!(\"warning: invalid logging spec '{}', ignoring it\", s);\n-                        continue;\n-                    }\n-                };\n-            dirs.push(LogDirective {\n-                name: name.map(str::to_owned),\n-                level: log_level,\n-            });\n-        }\n-    }\n-\n-    (dirs, filter.map(str::to_owned))\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::parse_logging_spec;\n-\n-    #[test]\n-    fn parse_logging_spec_valid() {\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1,crate1::mod2,crate2=4\");\n-        assert_eq!(dirs.len(), 3);\n-        assert_eq!(dirs[0].name, Some(\"crate1::mod1\".to_owned()));\n-        assert_eq!(dirs[0].level, 1);\n-\n-        assert_eq!(dirs[1].name, Some(\"crate1::mod2\".to_owned()));\n-        assert_eq!(dirs[1].level, ::MAX_LOG_LEVEL);\n-\n-        assert_eq!(dirs[2].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[2].level, 4);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_invalid_crate() {\n-        // test parse_logging_spec with multiple = in specification\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1=2,crate2=4\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[0].level, 4);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_invalid_log_level() {\n-        // test parse_logging_spec with 'noNumber' as log level\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=noNumber,crate2=4\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[0].level, 4);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_string_log_level() {\n-        // test parse_logging_spec with 'warn' as log level\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=wrong,crate2=warn\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[0].level, ::WARN);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_empty_log_level() {\n-        // test parse_logging_spec with '' as log level\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=wrong,crate2=\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[0].level, ::MAX_LOG_LEVEL);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_global() {\n-        // test parse_logging_spec with no crate\n-        let (dirs, filter) = parse_logging_spec(\"warn,crate2=4\");\n-        assert_eq!(dirs.len(), 2);\n-        assert_eq!(dirs[0].name, None);\n-        assert_eq!(dirs[0].level, 2);\n-        assert_eq!(dirs[1].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[1].level, 4);\n-        assert!(filter.is_none());\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_valid_filter() {\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1,crate1::mod2,crate2=4/abc\");\n-        assert_eq!(dirs.len(), 3);\n-        assert_eq!(dirs[0].name, Some(\"crate1::mod1\".to_owned()));\n-        assert_eq!(dirs[0].level, 1);\n-\n-        assert_eq!(dirs[1].name, Some(\"crate1::mod2\".to_owned()));\n-        assert_eq!(dirs[1].level, ::MAX_LOG_LEVEL);\n-\n-        assert_eq!(dirs[2].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[2].level, 4);\n-        assert!(filter.is_some() && filter.unwrap().to_owned() == \"abc\");\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_invalid_crate_filter() {\n-        let (dirs, filter) = parse_logging_spec(\"crate1::mod1=1=2,crate2=4/a.c\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n-        assert_eq!(dirs[0].level, 4);\n-        assert!(filter.is_some() && filter.unwrap().to_owned() == \"a.c\");\n-    }\n-\n-    #[test]\n-    fn parse_logging_spec_empty_with_filter() {\n-        let (dirs, filter) = parse_logging_spec(\"crate1/a*c\");\n-        assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate1\".to_owned()));\n-        assert_eq!(dirs[0].level, ::MAX_LOG_LEVEL);\n-        assert!(filter.is_some() && filter.unwrap().to_owned() == \"a*c\");\n-    }\n-}"}, {"sha": "057df647c7257df027fd7d6eab6d8ab52c2a64a9", "filename": "src/liblog/lib.rs", "status": "removed", "additions": 0, "deletions": 506, "changes": 506, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,506 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Utilities for program-wide and customizable logging\n-//!\n-//! # Examples\n-//!\n-//! ```\n-//! # #![feature(rustc_private)]\n-//! #[macro_use] extern crate log;\n-//!\n-//! fn main() {\n-//!     debug!(\"this is a debug {:?}\", \"message\");\n-//!     error!(\"this is printed by default\");\n-//!\n-//!     if log_enabled!(log::INFO) {\n-//!         let x = 3 * 4; // expensive computation\n-//!         info!(\"the answer was: {:?}\", x);\n-//!     }\n-//! }\n-//! ```\n-//!\n-//! Assumes the binary is `main`:\n-//!\n-//! ```{.bash}\n-//! $ RUST_LOG=error ./main\n-//! ERROR:main: this is printed by default\n-//! ```\n-//!\n-//! ```{.bash}\n-//! $ RUST_LOG=info ./main\n-//! ERROR:main: this is printed by default\n-//! INFO:main: the answer was: 12\n-//! ```\n-//!\n-//! ```{.bash}\n-//! $ RUST_LOG=debug ./main\n-//! DEBUG:main: this is a debug message\n-//! ERROR:main: this is printed by default\n-//! INFO:main: the answer was: 12\n-//! ```\n-//!\n-//! You can also set the log level on a per module basis:\n-//!\n-//! ```{.bash}\n-//! $ RUST_LOG=main=info ./main\n-//! ERROR:main: this is printed by default\n-//! INFO:main: the answer was: 12\n-//! ```\n-//!\n-//! And enable all logging:\n-//!\n-//! ```{.bash}\n-//! $ RUST_LOG=main ./main\n-//! DEBUG:main: this is a debug message\n-//! ERROR:main: this is printed by default\n-//! INFO:main: the answer was: 12\n-//! ```\n-//!\n-//! # Logging Macros\n-//!\n-//! There are five macros that the logging subsystem uses:\n-//!\n-//! * `log!(level, ...)` - the generic logging macro, takes a level as a u32 and any\n-//!                        related `format!` arguments\n-//! * `debug!(...)` - a macro hard-wired to the log level of `DEBUG`\n-//! * `info!(...)` - a macro hard-wired to the log level of `INFO`\n-//! * `warn!(...)` - a macro hard-wired to the log level of `WARN`\n-//! * `error!(...)` - a macro hard-wired to the log level of `ERROR`\n-//!\n-//! All of these macros use the same style of syntax as the `format!` syntax\n-//! extension. Details about the syntax can be found in the documentation of\n-//! `std::fmt` along with the Rust tutorial/manual.\n-//!\n-//! If you want to check at runtime if a given logging level is enabled (e.g. if the\n-//! information you would want to log is expensive to produce), you can use the\n-//! following macro:\n-//!\n-//! * `log_enabled!(level)` - returns true if logging of the given level is enabled\n-//!\n-//! # Enabling logging\n-//!\n-//! Log levels are controlled on a per-module basis, and by default all logging is\n-//! disabled except for `error!` (a log level of 1). Logging is controlled via the\n-//! `RUST_LOG` environment variable. The value of this environment variable is a\n-//! comma-separated list of logging directives. A logging directive is of the form:\n-//!\n-//! ```text\n-//! path::to::module=log_level\n-//! ```\n-//!\n-//! The path to the module is rooted in the name of the crate it was compiled for,\n-//! so if your program is contained in a file `hello.rs`, for example, to turn on\n-//! logging for this file you would use a value of `RUST_LOG=hello`.\n-//! Furthermore, this path is a prefix-search, so all modules nested in the\n-//! specified module will also have logging enabled.\n-//!\n-//! The actual `log_level` is optional to specify. If omitted, all logging will be\n-//! enabled. If specified, the it must be either a numeric in the range of 1-255, or\n-//! it must be one of the strings `debug`, `error`, `info`, or `warn`. If a numeric\n-//! is specified, then all logging less than or equal to that numeral is enabled.\n-//! For example, if logging level 3 is active, error, warn, and info logs will be\n-//! printed, but debug will be omitted.\n-//!\n-//! As the log level for a module is optional, the module to enable logging for is\n-//! also optional. If only a `log_level` is provided, then the global log level for\n-//! all modules is set to this value.\n-//!\n-//! Some examples of valid values of `RUST_LOG` are:\n-//!\n-//! * `hello` turns on all logging for the 'hello' module\n-//! * `info` turns on all info logging\n-//! * `hello=debug` turns on debug logging for 'hello'\n-//! * `hello=3` turns on info logging for 'hello'\n-//! * `hello,std::option` turns on hello, and std's option logging\n-//! * `error,hello=warn` turn on global error logging and also warn for hello\n-//!\n-//! # Filtering results\n-//!\n-//! A RUST_LOG directive may include a string filter. The syntax is to append\n-//! `/` followed by a string. Each message is checked against the string and is\n-//! only logged if it contains the string. Note that the matching is done after\n-//! formatting the log string but before adding any logging meta-data. There is\n-//! a single filter for all modules.\n-//!\n-//! Some examples:\n-//!\n-//! * `hello/foo` turns on all logging for the 'hello' module where the log message\n-//! includes 'foo'.\n-//! * `info/f.o` turns on all info logging where the log message includes 'foo',\n-//! 'f1o', 'fao', etc.\n-//! * `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n-//! message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n-//! * `error,hello=warn/[0-9] scopes` turn on global error logging and also warn for\n-//!  hello. In both cases the log message must include a single digit number\n-//!  followed by 'scopes'\n-//!\n-//! # Performance and Side Effects\n-//!\n-//! Each of these macros will expand to code similar to:\n-//!\n-//! ```rust,ignore\n-//! if log_level <= my_module_log_level() {\n-//!     ::log::log(log_level, format!(...));\n-//! }\n-//! ```\n-//!\n-//! What this means is that each of these macros are very cheap at runtime if\n-//! they're turned off (just a load and an integer comparison). This also means that\n-//! if logging is disabled, none of the components of the log will be executed.\n-\n-#![crate_name = \"log\"]\n-#![unstable(feature = \"rustc_private\",\n-            reason = \"use the crates.io `log` library instead\",\n-            issue = \"27812\")]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\",\n-       test(attr(deny(warnings))))]\n-#![deny(missing_docs)]\n-#![deny(warnings)]\n-\n-#![feature(staged_api)]\n-\n-use std::cell::RefCell;\n-use std::fmt;\n-use std::io::{self, Stderr};\n-use std::io::prelude::*;\n-use std::mem;\n-use std::env;\n-use std::slice;\n-use std::sync::{Mutex, ONCE_INIT, Once};\n-\n-use directive::LOG_LEVEL_NAMES;\n-\n-#[macro_use]\n-pub mod macros;\n-\n-mod directive;\n-\n-/// Maximum logging level of a module that can be specified. Common logging\n-/// levels are found in the DEBUG/INFO/WARN/ERROR constants.\n-pub const MAX_LOG_LEVEL: u32 = 255;\n-\n-/// The default logging level of a crate if no other is specified.\n-const DEFAULT_LOG_LEVEL: u32 = 1;\n-\n-static mut LOCK: *mut Mutex<(Vec<directive::LogDirective>, Option<String>)> = 0 as *mut _;\n-\n-/// An unsafe constant that is the maximum logging level of any module\n-/// specified. This is the first line of defense to determining whether a\n-/// logging statement should be run.\n-static mut LOG_LEVEL: u32 = MAX_LOG_LEVEL;\n-\n-/// Debug log level\n-pub const DEBUG: u32 = 4;\n-/// Info log level\n-pub const INFO: u32 = 3;\n-/// Warn log level\n-pub const WARN: u32 = 2;\n-/// Error log level\n-pub const ERROR: u32 = 1;\n-\n-thread_local! {\n-    static LOCAL_LOGGER: RefCell<Option<Box<Logger + Send>>> = {\n-        RefCell::new(None)\n-    }\n-}\n-\n-/// A trait used to represent an interface to a thread-local logger. Each thread\n-/// can have its own custom logger which can respond to logging messages\n-/// however it likes.\n-pub trait Logger {\n-    /// Logs a single message described by the `record`.\n-    fn log(&mut self, record: &LogRecord);\n-}\n-\n-struct DefaultLogger {\n-    handle: Stderr,\n-}\n-\n-/// Wraps the log level with fmt implementations.\n-#[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]\n-pub struct LogLevel(pub u32);\n-\n-impl fmt::Display for LogLevel {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let LogLevel(level) = *self;\n-        match LOG_LEVEL_NAMES.get(level as usize - 1) {\n-            Some(ref name) => fmt::Display::fmt(name, fmt),\n-            None => fmt::Display::fmt(&level, fmt),\n-        }\n-    }\n-}\n-\n-impl Logger for DefaultLogger {\n-    fn log(&mut self, record: &LogRecord) {\n-        match writeln!(&mut self.handle,\n-                       \"{}:{}: {}\",\n-                       record.level,\n-                       record.module_path,\n-                       record.args) {\n-            Err(e) => panic!(\"failed to log: {:?}\", e),\n-            Ok(()) => {}\n-        }\n-    }\n-}\n-\n-impl Drop for DefaultLogger {\n-    fn drop(&mut self) {\n-        // FIXME(#12628): is panicking the right thing to do?\n-        match self.handle.flush() {\n-            Err(e) => panic!(\"failed to flush a logger: {:?}\", e),\n-            Ok(()) => {}\n-        }\n-    }\n-}\n-\n-/// This function is called directly by the compiler when using the logging\n-/// macros. This function does not take into account whether the log level\n-/// specified is active or not, it will always log something if this method is\n-/// called.\n-///\n-/// It is not recommended to call this function directly, rather it should be\n-/// invoked through the logging family of macros.\n-#[doc(hidden)]\n-pub fn log(level: u32, loc: &'static LogLocation, args: fmt::Arguments) {\n-    // Test the literal string from args against the current filter, if there\n-    // is one.\n-    unsafe {\n-        let filter = (*LOCK).lock().unwrap();\n-        if let Some(ref filter) = filter.1 {\n-            if !args.to_string().contains(filter) {\n-                return;\n-            }\n-        }\n-    }\n-\n-    // Completely remove the local logger from TLS in case anyone attempts to\n-    // frob the slot while we're doing the logging. This will destroy any logger\n-    // set during logging.\n-    let logger = LOCAL_LOGGER.with(|s| s.borrow_mut().take());\n-    let mut logger = logger.unwrap_or_else(|| Box::new(DefaultLogger { handle: io::stderr() }));\n-    logger.log(&LogRecord {\n-        level: LogLevel(level),\n-        args: args,\n-        file: loc.file,\n-        module_path: loc.module_path,\n-        line: loc.line,\n-    });\n-    set_logger(logger);\n-}\n-\n-/// Getter for the global log level. This is a function so that it can be called\n-/// safely\n-#[doc(hidden)]\n-#[inline(always)]\n-pub fn log_level() -> u32 {\n-    unsafe { LOG_LEVEL }\n-}\n-\n-/// Replaces the thread-local logger with the specified logger, returning the old\n-/// logger.\n-pub fn set_logger(logger: Box<Logger + Send>) -> Option<Box<Logger + Send>> {\n-    LOCAL_LOGGER.with(|slot| mem::replace(&mut *slot.borrow_mut(), Some(logger)))\n-}\n-\n-/// A LogRecord is created by the logging macros, and passed as the only\n-/// argument to Loggers.\n-#[derive(Debug)]\n-pub struct LogRecord<'a> {\n-    /// The module path of where the LogRecord originated.\n-    pub module_path: &'a str,\n-\n-    /// The LogLevel of this record.\n-    pub level: LogLevel,\n-\n-    /// The arguments from the log line.\n-    pub args: fmt::Arguments<'a>,\n-\n-    /// The file of where the LogRecord originated.\n-    pub file: &'a str,\n-\n-    /// The line number of where the LogRecord originated.\n-    pub line: u32,\n-}\n-\n-#[doc(hidden)]\n-#[derive(Copy, Clone)]\n-pub struct LogLocation {\n-    pub module_path: &'static str,\n-    pub file: &'static str,\n-    pub line: u32,\n-}\n-\n-/// Tests whether a given module's name is enabled for a particular level of\n-/// logging. This is the second layer of defense about determining whether a\n-/// module's log statement should be emitted or not.\n-#[doc(hidden)]\n-pub fn mod_enabled(level: u32, module: &str) -> bool {\n-    static INIT: Once = ONCE_INIT;\n-    INIT.call_once(init);\n-\n-    // It's possible for many threads are in this function, only one of them\n-    // will perform the global initialization, but all of them will need to check\n-    // again to whether they should really be here or not. Hence, despite this\n-    // check being expanded manually in the logging macro, this function checks\n-    // the log level again.\n-    if level > unsafe { LOG_LEVEL } {\n-        return false;\n-    }\n-\n-    // This assertion should never get tripped unless we're in an at_exit\n-    // handler after logging has been torn down and a logging attempt was made.\n-\n-    unsafe {\n-        let directives = (*LOCK).lock().unwrap();\n-        enabled(level, module, directives.0.iter())\n-    }\n-}\n-\n-fn enabled(level: u32, module: &str, iter: slice::Iter<directive::LogDirective>) -> bool {\n-    // Search for the longest match, the vector is assumed to be pre-sorted.\n-    for directive in iter.rev() {\n-        match directive.name {\n-            Some(ref name) if !module.starts_with(&name[..]) => {}\n-            Some(..) | None => return level <= directive.level,\n-        }\n-    }\n-    level <= DEFAULT_LOG_LEVEL\n-}\n-\n-/// Initialize logging for the current process.\n-///\n-/// This is not threadsafe at all, so initialization is performed through a\n-/// `Once` primitive (and this function is called from that primitive).\n-fn init() {\n-    let (mut directives, filter) = match env::var(\"RUST_LOG\") {\n-        Ok(spec) => directive::parse_logging_spec(&spec[..]),\n-        Err(..) => (Vec::new(), None),\n-    };\n-\n-    // Sort the provided directives by length of their name, this allows a\n-    // little more efficient lookup at runtime.\n-    directives.sort_by(|a, b| {\n-        let alen = a.name.as_ref().map(|a| a.len()).unwrap_or(0);\n-        let blen = b.name.as_ref().map(|b| b.len()).unwrap_or(0);\n-        alen.cmp(&blen)\n-    });\n-\n-    let max_level = {\n-        let max = directives.iter().max_by_key(|d| d.level);\n-        max.map(|d| d.level).unwrap_or(DEFAULT_LOG_LEVEL)\n-    };\n-\n-    unsafe {\n-        LOG_LEVEL = max_level;\n-\n-        assert!(LOCK.is_null());\n-        LOCK = Box::into_raw(Box::new(Mutex::new((directives, filter))));\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::enabled;\n-    use directive::LogDirective;\n-\n-    #[test]\n-    fn match_full_path() {\n-        let dirs = [LogDirective {\n-                        name: Some(\"crate2\".to_string()),\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 2,\n-                    }];\n-        assert!(enabled(2, \"crate1::mod1\", dirs.iter()));\n-        assert!(!enabled(3, \"crate1::mod1\", dirs.iter()));\n-        assert!(enabled(3, \"crate2\", dirs.iter()));\n-        assert!(!enabled(4, \"crate2\", dirs.iter()));\n-    }\n-\n-    #[test]\n-    fn no_match() {\n-        let dirs = [LogDirective {\n-                        name: Some(\"crate2\".to_string()),\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 2,\n-                    }];\n-        assert!(!enabled(2, \"crate3\", dirs.iter()));\n-    }\n-\n-    #[test]\n-    fn match_beginning() {\n-        let dirs = [LogDirective {\n-                        name: Some(\"crate2\".to_string()),\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 2,\n-                    }];\n-        assert!(enabled(3, \"crate2::mod1\", dirs.iter()));\n-    }\n-\n-    #[test]\n-    fn match_beginning_longest_match() {\n-        let dirs = [LogDirective {\n-                        name: Some(\"crate2\".to_string()),\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate2::mod\".to_string()),\n-                        level: 4,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 2,\n-                    }];\n-        assert!(enabled(4, \"crate2::mod1\", dirs.iter()));\n-        assert!(!enabled(4, \"crate2\", dirs.iter()));\n-    }\n-\n-    #[test]\n-    fn match_default() {\n-        let dirs = [LogDirective {\n-                        name: None,\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 2,\n-                    }];\n-        assert!(enabled(2, \"crate1::mod1\", dirs.iter()));\n-        assert!(enabled(3, \"crate2::mod2\", dirs.iter()));\n-    }\n-\n-    #[test]\n-    fn zero_level() {\n-        let dirs = [LogDirective {\n-                        name: None,\n-                        level: 3,\n-                    },\n-                    LogDirective {\n-                        name: Some(\"crate1::mod1\".to_string()),\n-                        level: 0,\n-                    }];\n-        assert!(!enabled(1, \"crate1::mod1\", dirs.iter()));\n-        assert!(enabled(3, \"crate2::mod2\", dirs.iter()));\n-    }\n-}"}, {"sha": "803a2df9ccc8baff67d46d6a3b15db71c8d49602", "filename": "src/liblog/macros.rs", "status": "removed", "additions": 0, "deletions": 205, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,205 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Logging macros\n-\n-/// The standard logging macro\n-///\n-/// This macro will generically log over a provided level (of type u32) with a\n-/// format!-based argument list. See documentation in `std::fmt` for details on\n-/// how to use the syntax.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// fn main() {\n-///     log!(log::WARN, \"this is a warning {}\", \"message\");\n-///     log!(log::DEBUG, \"this is a debug message\");\n-///     log!(6, \"this is a custom logging level: {level}\", level=6);\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=warn ./main\n-/// WARN:main: this is a warning message\n-/// ```\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=debug ./main\n-/// DEBUG:main: this is a debug message\n-/// WARN:main: this is a warning message\n-/// ```\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=6 ./main\n-/// DEBUG:main: this is a debug message\n-/// WARN:main: this is a warning message\n-/// 6:main: this is a custom logging level: 6\n-/// ```\n-#[macro_export]\n-macro_rules! log {\n-    ($lvl:expr, $($arg:tt)+) => ({\n-        static LOC: ::log::LogLocation = ::log::LogLocation {\n-            line: line!(),\n-            file: file!(),\n-            module_path: module_path!(),\n-        };\n-        let lvl = $lvl;\n-        if log_enabled!(lvl) {\n-            ::log::log(lvl, &LOC, format_args!($($arg)+))\n-        }\n-    })\n-}\n-\n-/// A convenience macro for logging at the error log level.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// fn main() {\n-///     let error = 3;\n-///     error!(\"the build has failed with error code: {}\", error);\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=error ./main\n-/// ERROR:main: the build has failed with error code: 3\n-/// ```\n-///\n-#[macro_export]\n-macro_rules! error {\n-    ($($arg:tt)*) => (log!(::log::ERROR, $($arg)*))\n-}\n-\n-/// A convenience macro for logging at the warning log level.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// fn main() {\n-///     let code = 3;\n-///     warn!(\"you may like to know that a process exited with: {}\", code);\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=warn ./main\n-/// WARN:main: you may like to know that a process exited with: 3\n-/// ```\n-#[macro_export]\n-macro_rules! warn {\n-    ($($arg:tt)*) => (log!(::log::WARN, $($arg)*))\n-}\n-\n-/// A convenience macro for logging at the info log level.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// fn main() {\n-///     let ret = 3;\n-///     info!(\"this function is about to return: {}\", ret);\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=info ./main\n-/// INFO:main: this function is about to return: 3\n-/// ```\n-#[macro_export]\n-macro_rules! info {\n-    ($($arg:tt)*) => (log!(::log::INFO, $($arg)*))\n-}\n-\n-/// A convenience macro for logging at the debug log level. This macro will\n-/// be omitted at compile time in an optimized build unless `-C debug-assertions`\n-/// is passed to the compiler.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// fn main() {\n-///     debug!(\"x = {x}, y = {y}\", x=10, y=20);\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=debug ./main\n-/// DEBUG:main: x = 10, y = 20\n-/// ```\n-#[macro_export]\n-macro_rules! debug {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { log!(::log::DEBUG, $($arg)*) })\n-}\n-\n-/// A macro to test whether a log level is enabled for the current module.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![feature(rustc_private)]\n-/// #[macro_use] extern crate log;\n-///\n-/// struct Point { x: i32, y: i32 }\n-/// fn some_expensive_computation() -> Point { Point { x: 1, y: 2 } }\n-///\n-/// fn main() {\n-///     if log_enabled!(log::DEBUG) {\n-///         let x = some_expensive_computation();\n-///         debug!(\"x.x = {}, x.y = {}\", x.x, x.y);\n-///     }\n-/// }\n-/// ```\n-///\n-/// Assumes the binary is `main`:\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=error ./main\n-/// ```\n-///\n-/// ```{.bash}\n-/// $ RUST_LOG=debug ./main\n-/// DEBUG:main: x.x = 1, x.y = 2\n-/// ```\n-#[macro_export]\n-macro_rules! log_enabled {\n-    ($lvl:expr) => ({\n-        let lvl = $lvl;\n-        (lvl != ::log::DEBUG || cfg!(debug_assertions)) &&\n-        lvl <= ::log::log_level() &&\n-        ::log::mod_enabled(lvl, module_path!())\n-    })\n-}"}, {"sha": "fa217acd9f9bf5e4eed1ea2feaede465f4450cbd", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -12,7 +12,7 @@ crate-type = [\"dylib\"]\n arena = { path = \"../libarena\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n graphviz = { path = \"../libgraphviz\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_const_math = { path = \"../librustc_const_math\" }"}, {"sha": "d7aa36b24f94279ba345399f7276a1e6fe609fff", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -948,7 +948,7 @@ pub fn map_crate<'hir>(forest: &'hir mut Forest,\n     intravisit::walk_crate(&mut collector, &forest.krate);\n     let map = collector.map;\n \n-    if log_enabled!(::log::DEBUG) {\n+    if log_enabled!(::log::LogLevel::Debug) {\n         // This only makes sense for ordered stores; note the\n         // enumerate to count the number of entries.\n         let (entries_less_1, _) = map.iter().filter(|&x| {"}, {"sha": "38699105290551e97d7a344ca5d1ff75db8cf532", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -202,7 +202,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         } else {\n             // for local crates, check whether type info is\n             // available; typeck might not have completed yet\n-            self.maps.impl_trait_ref.borrow().contains_key(&impl_def_id)\n+            self.maps.impl_trait_ref.borrow().contains_key(&impl_def_id) &&\n+                self.maps.ty.borrow().contains_key(&impl_def_id)\n         };\n \n         if !use_types {"}, {"sha": "730abc54568e1364e12747db4329b8caea0acd1d", "filename": "src/librustc_back/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_back%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_back%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -11,7 +11,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n syntax = { path = \"../libsyntax\" }\n serialize = { path = \"../libserialize\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n \n [features]\n jemalloc = []"}, {"sha": "af99c0e938724d95023ff8c3831fdbb6e3d44670", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n graphviz = { path = \"../libgraphviz\" }"}, {"sha": "907410f74dca4f268697e32d036a606894924996", "filename": "src/librustc_const_eval/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n arena = { path = \"../libarena\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }"}, {"sha": "343b1ed68b80431cb3e734dff8adc4764073cd87", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -9,5 +9,5 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n serialize = { path = \"../libserialize\" }"}, {"sha": "5b5113caa8e8c0dd9d68e7e8078b71991efa107e", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -11,7 +11,8 @@ crate-type = [\"dylib\"]\n [dependencies]\n arena = { path = \"../libarena\" }\n graphviz = { path = \"../libgraphviz\" }\n-log = { path = \"../liblog\" }\n+log = { version = \"0.3\", features = [\"release_max_level_info\"] }\n+env_logger = { version = \"0.4\", default-features = false }\n proc_macro_plugin = { path = \"../libproc_macro_plugin\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }"}, {"sha": "81095ad9f83a1e6ef368754780baf1caa301390b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -198,13 +198,13 @@ pub fn compile_input(sess: &Session,\n \n             result?;\n \n-            if log_enabled!(::log::INFO) {\n+            if log_enabled!(::log::LogLevel::Info) {\n                 println!(\"Pre-trans\");\n                 tcx.print_debug_stats();\n             }\n             let trans = phase_4_translate_to_llvm(tcx, analysis, &incremental_hashes_map);\n \n-            if log_enabled!(::log::INFO) {\n+            if log_enabled!(::log::LogLevel::Info) {\n                 println!(\"Post-trans\");\n                 tcx.print_debug_stats();\n             }"}, {"sha": "68b9f85721ad5de950274ff21fb401610eeb242d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -35,6 +35,7 @@\n extern crate arena;\n extern crate getopts;\n extern crate graphviz;\n+extern crate env_logger;\n extern crate libc;\n extern crate rustc;\n extern crate rustc_back;\n@@ -1127,6 +1128,7 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n }\n \n pub fn main() {\n+    env_logger::init().unwrap();\n     let result = run(|| run_compiler(&env::args().collect::<Vec<_>>(),\n                                      &mut RustcDefaultCalls,\n                                      None,"}, {"sha": "7bf2efa4b885f8eef332581957e4a84f795f75c8", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -13,6 +13,6 @@ graphviz = { path = \"../libgraphviz\" }\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n serialize = { path = \"../libserialize\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "c3c5461ff7c506a612d45564e01aa6b8a8a41938", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }"}, {"sha": "e8b906092730e5cbee6f873daa302fd57eaf46a6", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n flate = { path = \"../libflate\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }"}, {"sha": "e1255110a83d1e8a80f7743b94fad92df4bcf984", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -1058,7 +1058,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         self.inject_allocator_crate();\n         self.inject_panic_runtime(krate);\n \n-        if log_enabled!(log::INFO) {\n+        if log_enabled!(log::LogLevel::Info) {\n             dump_crates(&self.cstore);\n         }\n "}, {"sha": "6e42e02d5109b6c5e1fd1ea83ec8d55c244ea379", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n graphviz = { path = \"../libgraphviz\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc = { path = \"../librustc\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }"}, {"sha": "d2560c2f8203f0557957ea0bbb968fbaa127bba3", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -9,10 +9,10 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc = { path = \"../librustc\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n\\ No newline at end of file\n+rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "0968ea31b754f9e7b2d0e47f5ccd871156483204", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n syntax = { path = \"../libsyntax\" }\n rustc = { path = \"../librustc\" }\n arena = { path = \"../libarena\" }"}, {"sha": "07a5c266fc026798a23251015f1ed319788da744", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -9,7 +9,7 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc = { path = \"../librustc\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "07dcb2fc29dc66d4f7db46140fdefd859a2238d6", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -11,7 +11,7 @@ test = false\n \n [dependencies]\n flate = { path = \"../libflate\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }"}, {"sha": "07998aa4a30ea0aee8b6a633cd8ea96c529d2843", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n syntax = { path = \"../libsyntax\" }\n arena = { path = \"../libarena\" }\n fmt_macros = { path = \"../libfmt_macros\" }"}, {"sha": "1c479ce1d0157beaee792e163f9caff0f8832316", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -11,11 +11,13 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n arena = { path = \"../libarena\" }\n+env_logger = { version = \"0.4\", default-features = false }\n+log = \"0.3\"\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n-rustc_driver = { path = \"../librustc_driver\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_driver = { path = \"../librustc_driver\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n@@ -24,7 +26,6 @@ rustc_trans = { path = \"../librustc_trans\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-log = { path = \"../liblog\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }"}, {"sha": "8dd03f6edc4d57cde00ef209a2a30d2ad73b77f5", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -30,6 +30,7 @@\n \n extern crate arena;\n extern crate getopts;\n+extern crate env_logger;\n extern crate libc;\n extern crate rustc;\n extern crate rustc_const_eval;\n@@ -99,6 +100,7 @@ struct Output {\n \n pub fn main() {\n     const STACK_SIZE: usize = 32_000_000; // 32MB\n+    env_logger::init().unwrap();\n     let res = std::thread::Builder::new().stack_size(STACK_SIZE).spawn(move || {\n         let s = env::args().collect::<Vec<_>>();\n         main_args(&s)"}, {"sha": "97d37266130af750a304561f1eb0ec33ae06f5e7", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n serialize = { path = \"../libserialize\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "bdcec26cb838b211ba5980542da2ca62bb386b99", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -10,7 +10,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n fmt_macros = { path = \"../libfmt_macros\" }\n-log = { path = \"../liblog\" }\n+log = \"0.3\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc_errors = { path = \"../librustc_errors\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "db26b10fc67cbf24442d3ea5bb78871234c7a03a", "filename": "src/test/run-pass-fulldeps/auxiliary/logging_right_crate.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flogging_right_crate.rs?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(rustc_private)]\n-\n-#[macro_use] extern crate log;\n-\n-pub fn foo<T>() {\n-    fn death() -> isize { panic!() }\n-    debug!(\"{}\", (||{ death() })());\n-}"}, {"sha": "c6beb5ba358750e25b1a32e4a7675755dfeaaceb", "filename": "src/test/run-pass-fulldeps/conditional-debug-macro-off.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fconditional-debug-macro-off.rs?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -C debug-assertions=no\n-// exec-env:RUST_LOG=conditional-debug-macro-off=4\n-\n-\n-#![feature(rustc_private)]\n-\n-#[macro_use]\n-extern crate log;\n-\n-pub fn main() {\n-    // only panics if println! evaluates its argument.\n-    debug!(\"{:?}\", { if true { panic!() } });\n-}"}, {"sha": "3ae4884ce47fce86f79db8321d49ff8f9a8c5b93", "filename": "src/test/run-pass-fulldeps/logging-enabled-debug.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Flogging-enabled-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Flogging-enabled-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flogging-enabled-debug.rs?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags:-C debug-assertions=no\n-// exec-env:RUST_LOG=logging-enabled-debug=debug\n-\n-\n-#![feature(rustc_private)]\n-\n-#[macro_use]\n-extern crate log;\n-\n-pub fn main() {\n-    if log_enabled!(log::DEBUG) {\n-        panic!(\"what?! debugging?\");\n-    }\n-}"}, {"sha": "26261348020f894dd832840396cd0348952255a5", "filename": "src/test/run-pass-fulldeps/logging-enabled.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Flogging-enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Flogging-enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flogging-enabled.rs?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_LOG=logging_enabled=info\n-// ignore-emscripten: FIXME(#31622)\n-\n-\n-#![feature(rustc_private)]\n-\n-#[macro_use]\n-extern crate log;\n-\n-pub fn main() {\n-    if log_enabled!(log::DEBUG) {\n-        panic!(\"what?! debugging?\");\n-    }\n-    if !log_enabled!(log::INFO) {\n-        panic!(\"what?! no info?\");\n-    }\n-}"}, {"sha": "7caeeb401244b3035c5cbb7b8215ab9a1fc763db", "filename": "src/test/run-pass-fulldeps/logging-right-crate.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Flogging-right-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Flogging-right-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flogging-right-crate.rs?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:logging_right_crate.rs\n-// exec-env:RUST_LOG=logging-right-crate=debug\n-\n-// This is a test for issue #3046 to make sure that when we monomorphize a\n-// function from one crate to another the right top-level logging name is\n-// preserved.\n-//\n-// It used to be the case that if logging were turned on for this crate, all\n-// monomorphized functions from other crates had logging turned on (their\n-// logging module names were all incorrect). This test ensures that this no\n-// longer happens by enabling logging for *this* crate and then invoking a\n-// function in an external crate which will panic when logging is enabled.\n-\n-// pretty-expanded FIXME #23616\n-\n-extern crate logging_right_crate;\n-\n-pub fn main() {\n-    // this function panicks if logging is turned on\n-    logging_right_crate::foo::<isize>();\n-}"}, {"sha": "183a522bba749290fc1cae429d3ebef7fe6c4f4e", "filename": "src/test/run-pass-fulldeps/logging-separate-lines.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flogging-separate-lines.rs?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,40 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-windows\n-// exec-env:RUST_LOG=debug\n-// compile-flags:-C debug-assertions=y\n-// ignore-emscripten: FIXME(#31622)\n-\n-#![feature(rustc_private)]\n-\n-#[macro_use]\n-extern crate log;\n-\n-use std::process::Command;\n-use std::env;\n-use std::str;\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    if args.len() > 1 && args[1] == \"child\" {\n-        debug!(\"foo\");\n-        debug!(\"bar\");\n-        return\n-    }\n-\n-    let p = Command::new(&args[0])\n-                    .arg(\"child\")\n-                    .output().unwrap();\n-    assert!(p.status.success());\n-    let mut lines = str::from_utf8(&p.stderr).unwrap().lines();\n-    assert!(lines.next().unwrap().contains(\"foo\"));\n-    assert!(lines.next().unwrap().contains(\"bar\"));\n-}"}, {"sha": "306d24e317754208d55c9cd4ee49dedd8c898b9b", "filename": "src/test/run-pass-fulldeps/rust-log-filter.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Frust-log-filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b/src%2Ftest%2Frun-pass-fulldeps%2Frust-log-filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Frust-log-filter.rs?ref=0f5ddb953aafa8c63098dc1a32d3fdebaad82a5b", "patch": "@@ -1,58 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_LOG=rust_log_filter/foo\n-// ignore-emscripten no threads support\n-\n-#![allow(unknown_features)]\n-#![feature(box_syntax, std_misc, rustc_private)]\n-\n-#[macro_use]\n-extern crate log;\n-\n-use std::sync::mpsc::{channel, Sender, Receiver};\n-use std::thread;\n-\n-pub struct ChannelLogger {\n-    tx: Sender<String>\n-}\n-\n-impl ChannelLogger {\n-    pub fn new() -> (Box<ChannelLogger>, Receiver<String>) {\n-        let (tx, rx) = channel();\n-        (box ChannelLogger { tx: tx }, rx)\n-    }\n-}\n-\n-impl log::Logger for ChannelLogger {\n-    fn log(&mut self, record: &log::LogRecord) {\n-        self.tx.send(format!(\"{}\", record.args)).unwrap();\n-    }\n-}\n-\n-pub fn main() {\n-    let (logger, rx) = ChannelLogger::new();\n-\n-    let t = thread::spawn(move|| {\n-        log::set_logger(logger);\n-\n-        info!(\"foo\");\n-        info!(\"bar\");\n-        info!(\"foo bar\");\n-        info!(\"bar foo\");\n-    });\n-\n-    assert_eq!(rx.recv().unwrap(), \"foo\");\n-    assert_eq!(rx.recv().unwrap(), \"foo bar\");\n-    assert_eq!(rx.recv().unwrap(), \"bar foo\");\n-    assert!(rx.recv().is_err());\n-\n-    t.join();\n-}"}, {"sha": "7da33be7a57daf19faa1a47bcad1fc9f4be345a4", "filename": "src/test/run-pass/conditional-debug-macro-on.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// exec-env:RUST_LOG=conditional-debug-macro-on=4\n-\n pub fn main() {\n     // exits early if println! evaluates its arguments, otherwise it\n     // will hit the panic."}, {"sha": "7530b65a9b7c4fc383dc24fe94a6426e81593d66", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dd4e2db785c8ec360a989f69891b1e97dd4d369/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=7dd4e2db785c8ec360a989f69891b1e97dd4d369", "patch": "@@ -5,6 +5,6 @@ version = \"0.0.0\"\n \n [dependencies]\n log = \"0.3\"\n-env_logger = { version = \"0.3.5\", default-features = false }\n+env_logger = { version = \"0.4\", default-features = false }\n rustc-serialize = \"0.3\"\n filetime = \"0.1\""}]}