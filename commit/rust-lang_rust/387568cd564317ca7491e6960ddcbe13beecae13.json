{"sha": "387568cd564317ca7491e6960ddcbe13beecae13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NzU2OGNkNTY0MzE3Y2E3NDkxZTY5NjBkZGNiZTEzYmVlY2FlMTM=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2020-11-09T21:34:31Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2020-11-09T21:34:31Z"}, "message": "Added SAFETY comment as request", "tree": {"sha": "0f544741db367fcc43a991bc79fa75742e748e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f544741db367fcc43a991bc79fa75742e748e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/387568cd564317ca7491e6960ddcbe13beecae13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/387568cd564317ca7491e6960ddcbe13beecae13", "html_url": "https://github.com/rust-lang/rust/commit/387568cd564317ca7491e6960ddcbe13beecae13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/387568cd564317ca7491e6960ddcbe13beecae13/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1575365dd9c3260d0aa44203b9ad169f0b5d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1575365dd9c3260d0aa44203b9ad169f0b5d74", "html_url": "https://github.com/rust-lang/rust/commit/8d1575365dd9c3260d0aa44203b9ad169f0b5d74"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "97ebc12175f73c6149a0b49189636b9d74cd2651", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387568cd564317ca7491e6960ddcbe13beecae13/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/387568cd564317ca7491e6960ddcbe13beecae13/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=387568cd564317ca7491e6960ddcbe13beecae13", "patch": "@@ -495,6 +495,10 @@ impl<T: Ord> BinaryHeap<T> {\n         let mut end = self.len();\n         while end > 1 {\n             end -= 1;\n+            // SAFETY: `end` goes from `self.len() - 1` to 1 (both included),\n+            //  so it's always a valid index to access.\n+            //  It is safe to access index 0 (i.e. `ptr`), because\n+            //  1 <= end < self.len(), which means self.len() >= 2.\n             unsafe {\n                 let ptr = self.data.as_mut_ptr();\n                 ptr::swap(ptr, ptr.add(end));"}]}