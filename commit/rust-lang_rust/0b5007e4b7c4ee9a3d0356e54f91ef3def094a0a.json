{"sha": "0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNTAwN2U0YjdjNGVlOWEzZDAzNTZlNTRmOTFlZjNkZWYwOTRhMGE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-30T17:42:22Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-19T08:55:38Z"}, "message": "merge coercion test folders", "tree": {"sha": "44f17d41097bc8a7296c80e3294e53f33c2d6a8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44f17d41097bc8a7296c80e3294e53f33c2d6a8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "html_url": "https://github.com/rust-lang/rust/commit/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39c7787ba246353178e099373b9240be0d9e603", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39c7787ba246353178e099373b9240be0d9e603", "html_url": "https://github.com/rust-lang/rust/commit/a39c7787ba246353178e099373b9240be0d9e603"}], "stats": {"total": 192, "additions": 95, "deletions": 97}, "files": [{"sha": "d5484607c8b52021ab31d7b36e7a7b688d904543", "filename": "src/test/ui/coerce/coerce-overloaded-autoderef.rs", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a39c7787ba246353178e099373b9240be0d9e603/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39c7787ba246353178e099373b9240be0d9e603/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs?ref=a39c7787ba246353178e099373b9240be0d9e603", "patch": "@@ -1,68 +0,0 @@\n-// run-pass\n-#![allow(unused_braces)]\n-#![allow(dead_code)]\n-// pretty-expanded FIXME #23616\n-\n-use std::rc::Rc;\n-\n-// Examples from the \"deref coercions\" RFC, at rust-lang/rfcs#241.\n-\n-fn use_ref<T>(_: &T) {}\n-fn use_mut<T>(_: &mut T) {}\n-\n-fn use_rc<T>(t: Rc<T>) {\n-    use_ref(&*t);  // what you have to write today\n-    use_ref(&t);   // what you'd be able to write\n-    use_ref(&&&&&&t);\n-    use_ref(&mut &&&&&t);\n-    use_ref(&&&mut &&&t);\n-}\n-\n-fn use_mut_box<T>(mut t: &mut Box<T>) {\n-    use_mut(&mut *t); // what you have to write today\n-    use_mut(t);       // what you'd be able to write\n-    use_mut(&mut &mut &mut t);\n-\n-    use_ref(&*t);      // what you have to write today\n-    use_ref(t);        // what you'd be able to write\n-    use_ref(&&&&&&t);\n-    use_ref(&mut &&&&&t);\n-    use_ref(&&&mut &&&t);\n-}\n-\n-fn use_nested<T>(t: &Box<T>) {\n-    use_ref(&**t);  // what you have to write today\n-    use_ref(t);     // what you'd be able to write (note: recursive deref)\n-    use_ref(&&&&&&t);\n-    use_ref(&mut &&&&&t);\n-    use_ref(&&&mut &&&t);\n-}\n-\n-fn use_slice(_: &[u8]) {}\n-fn use_slice_mut(_: &mut [u8]) {}\n-\n-fn use_vec(mut v: Vec<u8>) {\n-    use_slice_mut(&mut v[..]); // what you have to write today\n-    use_slice_mut(&mut v);     // what you'd be able to write\n-    use_slice_mut(&mut &mut &mut v);\n-\n-    use_slice(&v[..]);  // what you have to write today\n-    use_slice(&v);      // what you'd be able to write\n-    use_slice(&&&&&&v);\n-    use_slice(&mut &&&&&v);\n-    use_slice(&&&mut &&&v);\n-}\n-\n-fn use_vec_ref(v: &Vec<u8>) {\n-    use_slice(&v[..]);  // what you have to write today\n-    use_slice(v);       // what you'd be able to write\n-    use_slice(&&&&&&v);\n-    use_slice(&mut &&&&&v);\n-    use_slice(&&&mut &&&v);\n-}\n-\n-fn use_op_rhs(s: &mut String) {\n-    *s += {&String::from(\" \")};\n-}\n-\n-pub fn main() {}"}, {"sha": "d486fdf73aba8d795a1dde8c4ff37ad921efed26", "filename": "src/test/ui/coercion/coerce-expect-unsized.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-expect-unsized.rs"}, {"sha": "01d9c1e486a4225e3358bb51f4fd1a4b1362561d", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef-fail.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "patch": "@@ -0,0 +1,32 @@\n+fn borrow_mut<T>(x: &mut T) -> &mut T { x }\n+fn borrow<T>(x: &T) -> &T { x }\n+\n+fn borrow_mut2<T>(_: &mut T, _: &mut T) {}\n+fn borrow2<T>(_: &mut T, _: &T) {}\n+\n+fn double_mut_borrow<T>(x: &mut Box<T>) {\n+    let y = borrow_mut(x);\n+    let z = borrow_mut(x);\n+    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+    drop((y, z));\n+}\n+\n+fn double_imm_borrow(x: &mut Box<i32>) {\n+    let y = borrow(x);\n+    let z = borrow(x);\n+    **x += 1;\n+    //~^ ERROR cannot assign to `**x` because it is borrowed\n+    drop((y, z));\n+}\n+\n+fn double_mut_borrow2<T>(x: &mut Box<T>) {\n+    borrow_mut2(x, x);\n+    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+}\n+\n+fn double_borrow2<T>(x: &mut Box<T>) {\n+    borrow2(x, x);\n+    //~^ ERROR cannot borrow `*x` as mutable because it is also borrowed as immutable\n+}\n+\n+pub fn main() {}"}, {"sha": "d067c3b3a18056c1f3e5bb5c79b02da297ae17c5", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef-fail.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef-fail.stderr?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n-  --> $DIR/coerce-overloaded-autoderef.rs:9:24\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:9:24\n    |\n LL |     let y = borrow_mut(x);\n    |                        - first mutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     drop((y, z));\n    |           - first borrow later used here\n \n error[E0506]: cannot assign to `**x` because it is borrowed\n-  --> $DIR/coerce-overloaded-autoderef.rs:17:5\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:17:5\n    |\n LL |     let y = borrow(x);\n    |                    - borrow of `**x` occurs here\n@@ -22,7 +22,7 @@ LL |     drop((y, z));\n    |           - borrow later used here\n \n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n-  --> $DIR/coerce-overloaded-autoderef.rs:23:20\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:23:20\n    |\n LL |     borrow_mut2(x, x);\n    |     ----------- -  ^ second mutable borrow occurs here\n@@ -31,7 +31,7 @@ LL |     borrow_mut2(x, x);\n    |     first borrow later used by call\n \n error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n-  --> $DIR/coerce-overloaded-autoderef.rs:28:5\n+  --> $DIR/coerce-overloaded-autoderef-fail.rs:28:5\n    |\n LL |     borrow2(x, x);\n    |     -------^^^^-^", "previous_filename": "src/test/ui/coercion/coerce-overloaded-autoderef.stderr"}, {"sha": "d5484607c8b52021ab31d7b36e7a7b688d904543", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef.rs", "status": "modified", "additions": 57, "deletions": 21, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "patch": "@@ -1,32 +1,68 @@\n-fn borrow_mut<T>(x: &mut T) -> &mut T { x }\n-fn borrow<T>(x: &T) -> &T { x }\n+// run-pass\n+#![allow(unused_braces)]\n+#![allow(dead_code)]\n+// pretty-expanded FIXME #23616\n \n-fn borrow_mut2<T>(_: &mut T, _: &mut T) {}\n-fn borrow2<T>(_: &mut T, _: &T) {}\n+use std::rc::Rc;\n \n-fn double_mut_borrow<T>(x: &mut Box<T>) {\n-    let y = borrow_mut(x);\n-    let z = borrow_mut(x);\n-    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n-    drop((y, z));\n+// Examples from the \"deref coercions\" RFC, at rust-lang/rfcs#241.\n+\n+fn use_ref<T>(_: &T) {}\n+fn use_mut<T>(_: &mut T) {}\n+\n+fn use_rc<T>(t: Rc<T>) {\n+    use_ref(&*t);  // what you have to write today\n+    use_ref(&t);   // what you'd be able to write\n+    use_ref(&&&&&&t);\n+    use_ref(&mut &&&&&t);\n+    use_ref(&&&mut &&&t);\n+}\n+\n+fn use_mut_box<T>(mut t: &mut Box<T>) {\n+    use_mut(&mut *t); // what you have to write today\n+    use_mut(t);       // what you'd be able to write\n+    use_mut(&mut &mut &mut t);\n+\n+    use_ref(&*t);      // what you have to write today\n+    use_ref(t);        // what you'd be able to write\n+    use_ref(&&&&&&t);\n+    use_ref(&mut &&&&&t);\n+    use_ref(&&&mut &&&t);\n }\n \n-fn double_imm_borrow(x: &mut Box<i32>) {\n-    let y = borrow(x);\n-    let z = borrow(x);\n-    **x += 1;\n-    //~^ ERROR cannot assign to `**x` because it is borrowed\n-    drop((y, z));\n+fn use_nested<T>(t: &Box<T>) {\n+    use_ref(&**t);  // what you have to write today\n+    use_ref(t);     // what you'd be able to write (note: recursive deref)\n+    use_ref(&&&&&&t);\n+    use_ref(&mut &&&&&t);\n+    use_ref(&&&mut &&&t);\n+}\n+\n+fn use_slice(_: &[u8]) {}\n+fn use_slice_mut(_: &mut [u8]) {}\n+\n+fn use_vec(mut v: Vec<u8>) {\n+    use_slice_mut(&mut v[..]); // what you have to write today\n+    use_slice_mut(&mut v);     // what you'd be able to write\n+    use_slice_mut(&mut &mut &mut v);\n+\n+    use_slice(&v[..]);  // what you have to write today\n+    use_slice(&v);      // what you'd be able to write\n+    use_slice(&&&&&&v);\n+    use_slice(&mut &&&&&v);\n+    use_slice(&&&mut &&&v);\n }\n \n-fn double_mut_borrow2<T>(x: &mut Box<T>) {\n-    borrow_mut2(x, x);\n-    //~^ ERROR cannot borrow `*x` as mutable more than once at a time\n+fn use_vec_ref(v: &Vec<u8>) {\n+    use_slice(&v[..]);  // what you have to write today\n+    use_slice(v);       // what you'd be able to write\n+    use_slice(&&&&&&v);\n+    use_slice(&mut &&&&&v);\n+    use_slice(&&&mut &&&v);\n }\n \n-fn double_borrow2<T>(x: &mut Box<T>) {\n-    borrow2(x, x);\n-    //~^ ERROR cannot borrow `*x` as mutable because it is also borrowed as immutable\n+fn use_op_rhs(s: &mut String) {\n+    *s += {&String::from(\" \")};\n }\n \n pub fn main() {}"}, {"sha": "f033e1b5d2b01a2458b6e275f062962b3abd0c21", "filename": "src/test/ui/coercion/coerce-reborrow-imm-ptr-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-arg.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-ptr-arg.rs"}, {"sha": "64a365229cbb77e3438e5e922d7f6d2e86ef9cde", "filename": "src/test/ui/coercion/coerce-reborrow-imm-ptr-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-ptr-rcvr.rs"}, {"sha": "c2aaae1c73ec8473ed5e892b323cf1488dd91ec4", "filename": "src/test/ui/coercion/coerce-reborrow-imm-vec-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-arg.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-vec-arg.rs"}, {"sha": "9a5652acf87874c6ae50ff49254bc8ff287e8ac9", "filename": "src/test/ui/coercion/coerce-reborrow-imm-vec-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-reborrow-imm-vec-rcvr.rs"}, {"sha": "76cd6793b3c231d6e71dba3bae6b611832c58cf2", "filename": "src/test/ui/coercion/coerce-reborrow-mut-ptr-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-arg.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-ptr-arg.rs"}, {"sha": "e6e7c3a51aa09fcb9cec1d321de2eac1b42cb350", "filename": "src/test/ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-ptr-rcvr.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-ptr-rcvr.rs"}, {"sha": "2635754f14dacddea066a94009fcca92a1f434ae", "filename": "src/test/ui/coercion/coerce-reborrow-mut-vec-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-arg.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-vec-arg.rs"}, {"sha": "c03336ea37af8a36a1d4886539ce00f171a47152", "filename": "src/test/ui/coercion/coerce-reborrow-mut-vec-rcvr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-reborrow-mut-vec-rcvr.rs"}, {"sha": "85598a42eccd9bdc26534ab1752ca3987afb1227", "filename": "src/test/ui/coercion/coerce-to-bang-cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "patch": "@@ -1,7 +1,5 @@\n #![feature(never_type)]\n \n-fn foo(x: usize, y: !, z: usize) { }\n-\n fn cast_a() {\n     let y = {return; 22} as !;\n     //~^ ERROR non-primitive cast"}, {"sha": "50e009aa25bb1085ced0b993f0d548032459714a", "filename": "src/test/ui/coercion/coerce-to-bang-cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "patch": "@@ -1,11 +1,11 @@\n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:6:13\n+  --> $DIR/coerce-to-bang-cast.rs:4:13\n    |\n LL |     let y = {return; 22} as !;\n    |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:11:13\n+  --> $DIR/coerce-to-bang-cast.rs:9:13\n    |\n LL |     let y = 22 as !;\n    |             ^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object"}, {"sha": "95a7ee8fe0f2be1ebcee6028ce37beb90c2d2a88", "filename": "src/test/ui/coercion/coerce-unify-return.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify-return.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-unify-return.rs"}, {"sha": "f1818f9bb5a6df7fa791c747f106e0c7a957d3c5", "filename": "src/test/ui/coercion/coerce-unify.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unify.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-unify.rs"}, {"sha": "45b53300c5b4bd4652c28500fd578c9dadd5ac4f", "filename": "src/test/ui/coercion/coerce-unsize-subtype.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unsize-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unsize-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-unsize-subtype.rs?ref=0b5007e4b7c4ee9a3d0356e54f91ef3def094a0a", "previous_filename": "src/test/ui/coerce/coerce-unsize-subtype.rs"}]}