{"sha": "bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiY2RhOThkNDEwN2U0NjJhYWU5N2QwYjJlN2M5NDhhMGQxNmYwMmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-05T05:45:50Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T19:37:59Z"}, "message": "cfg_attr: avoid .outer_tokens", "tree": {"sha": "bfc279693e973fefe640a96c175c8a00bac77a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfc279693e973fefe640a96c175c8a00bac77a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "html_url": "https://github.com/rust-lang/rust/commit/bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9630dbbc3caca60f2482e6eae8904aa6bda54f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/9630dbbc3caca60f2482e6eae8904aa6bda54f93", "html_url": "https://github.com/rust-lang/rust/commit/9630dbbc3caca60f2482e6eae8904aa6bda54f93"}], "stats": {"total": 252, "additions": 177, "deletions": 75}, "files": [{"sha": "b81111db95fcdc5bfe9d18954b7685e210dce71f", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 79, "deletions": 44, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "patch": "@@ -8,18 +8,20 @@\n //!\n //! [#64197]: https://github.com/rust-lang/rust/issues/64197\n \n-use crate::validate_attr;\n+use crate::{parse_in, validate_attr};\n use rustc_feature::Features;\n use rustc_errors::Applicability;\n use syntax::attr::HasAttrs;\n use syntax::feature_gate::{feature_err, get_features};\n use syntax::attr;\n-use syntax::ast;\n+use syntax::ast::{self, Attribute, AttrItem, MetaItem};\n use syntax::edition::Edition;\n use syntax::mut_visit::*;\n use syntax::ptr::P;\n+use syntax::tokenstream::DelimSpan;\n use syntax::sess::ParseSess;\n use syntax::util::map_in_place::MapInPlace;\n+use syntax_pos::Span;\n use syntax_pos::symbol::sym;\n \n use smallvec::SmallVec;\n@@ -72,6 +74,11 @@ macro_rules! configure {\n     }\n }\n \n+const CFG_ATTR_GRAMMAR_HELP: &str = \"#[cfg_attr(condition, attribute, other_attribute, ...)]\";\n+const CFG_ATTR_NOTE_REF: &str = \"for more information, visit \\\n+    <https://doc.rust-lang.org/reference/conditional-compilation.html\\\n+    #the-cfg_attr-attribute>\";\n+\n impl<'a> StripUnconfigured<'a> {\n     pub fn configure<T: HasAttrs>(&mut self, mut node: T) -> Option<T> {\n         self.process_cfg_attrs(&mut node);\n@@ -97,34 +104,14 @@ impl<'a> StripUnconfigured<'a> {\n     /// Gives a compiler warning when the `cfg_attr` contains no attributes and\n     /// is in the original source file. Gives a compiler error if the syntax of\n     /// the attribute is incorrect.\n-    fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Vec<ast::Attribute> {\n+    fn process_cfg_attr(&mut self, attr: Attribute) -> Vec<Attribute> {\n         if !attr.has_name(sym::cfg_attr) {\n             return vec![attr];\n         }\n-        if let ast::MacArgs::Empty = attr.get_normal_item().args {\n-            self.sess.span_diagnostic\n-                .struct_span_err(\n-                    attr.span,\n-                    \"malformed `cfg_attr` attribute input\",\n-                ).span_suggestion(\n-                    attr.span,\n-                    \"missing condition and attribute\",\n-                    \"#[cfg_attr(condition, attribute, other_attribute, ...)]\".to_owned(),\n-                    Applicability::HasPlaceholders,\n-                ).note(\"for more information, visit \\\n-                       <https://doc.rust-lang.org/reference/conditional-compilation.html\\\n-                       #the-cfg_attr-attribute>\")\n-                .emit();\n-            return vec![];\n-        }\n \n-        let res = crate::parse_in_attr(self.sess, &attr, |p| p.parse_cfg_attr());\n-        let (cfg_predicate, expanded_attrs) = match res {\n-            Ok(result) => result,\n-            Err(mut e) => {\n-                e.emit();\n-                return vec![];\n-            }\n+        let (cfg_predicate, expanded_attrs) = match self.parse_cfg_attr(&attr) {\n+            None => return vec![],\n+            Some(r) => r,\n         };\n \n         // Lint on zero attributes in source.\n@@ -135,24 +122,72 @@ impl<'a> StripUnconfigured<'a> {\n         // At this point we know the attribute is considered used.\n         attr::mark_used(&attr);\n \n-        if attr::cfg_matches(&cfg_predicate, self.sess, self.features) {\n-            // We call `process_cfg_attr` recursively in case there's a\n-            // `cfg_attr` inside of another `cfg_attr`. E.g.\n-            //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n-            expanded_attrs.into_iter()\n-            .flat_map(|(item, span)| self.process_cfg_attr(attr::mk_attr_from_item(\n-                attr.style,\n-                item,\n-                span,\n-            )))\n+        if !attr::cfg_matches(&cfg_predicate, self.sess, self.features) {\n+            return vec![];\n+        }\n+\n+        // We call `process_cfg_attr` recursively in case there's a\n+        // `cfg_attr` inside of another `cfg_attr`. E.g.\n+        //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n+        expanded_attrs\n+            .into_iter()\n+            .flat_map(|(item, span)| {\n+                let attr = attr::mk_attr_from_item(attr.style, item, span);\n+                self.process_cfg_attr(attr)\n+            })\n             .collect()\n-        } else {\n-            vec![]\n+    }\n+\n+    fn parse_cfg_attr(&self, attr: &Attribute) -> Option<(MetaItem, Vec<(AttrItem, Span)>)> {\n+        match &attr.get_normal_item().args {\n+            ast::MacArgs::Delimited(dspan, delim, tts) if !tts.is_empty() => {\n+                if let ast::MacDelimiter::Brace | ast::MacDelimiter::Bracket = delim {\n+                    self.error_malformed_cfg_attr_wrong_delim(*dspan);\n+                }\n+                match parse_in(self.sess, tts.clone(), \"`cfg_attr` input\", |p| p.parse_cfg_attr()) {\n+                    Ok(r) => return Some(r),\n+                    Err(mut e) => e\n+                        .help(&format!(\"the valid syntax is `{}`\", CFG_ATTR_GRAMMAR_HELP))\n+                        .note(CFG_ATTR_NOTE_REF)\n+                        .emit(),\n+                }\n+            }\n+            _ => self.error_malformed_cfg_attr_missing(attr.span),\n         }\n+        None\n+    }\n+\n+    fn error_malformed_cfg_attr_wrong_delim(&self, dspan: DelimSpan) {\n+        self.sess\n+            .span_diagnostic\n+            .struct_span_err(dspan.entire(), \"wrong `cfg_attr` delimiters\")\n+            .multipart_suggestion(\n+                \"the delimiters should be `(` and `)`\",\n+                vec![\n+                    (dspan.open, \"(\".to_string()),\n+                    (dspan.close, \")\".to_string()),\n+                ],\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+    }\n+\n+    fn error_malformed_cfg_attr_missing(&self, span: Span) {\n+        self.sess\n+            .span_diagnostic\n+            .struct_span_err(span, \"malformed `cfg_attr` attribute input\")\n+            .span_suggestion(\n+                span,\n+                \"missing condition and attribute\",\n+                CFG_ATTR_GRAMMAR_HELP.to_string(),\n+                Applicability::HasPlaceholders,\n+            )\n+            .note(CFG_ATTR_NOTE_REF)\n+            .emit();\n     }\n \n     /// Determines if a node with the given attributes should be included in this configuration.\n-    pub fn in_cfg(&self, attrs: &[ast::Attribute]) -> bool {\n+    pub fn in_cfg(&self, attrs: &[Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n             if !is_cfg(attr) {\n                 return true;\n@@ -199,15 +234,15 @@ impl<'a> StripUnconfigured<'a> {\n     }\n \n     /// Visit attributes on expression and statements (but not attributes on items in blocks).\n-    fn visit_expr_attrs(&mut self, attrs: &[ast::Attribute]) {\n+    fn visit_expr_attrs(&mut self, attrs: &[Attribute]) {\n         // flag the offending attributes\n         for attr in attrs.iter() {\n             self.maybe_emit_expr_attr_err(attr);\n         }\n     }\n \n     /// If attributes are not allowed on expressions, emit an error for `attr`\n-    pub fn maybe_emit_expr_attr_err(&self, attr: &ast::Attribute) {\n+    pub fn maybe_emit_expr_attr_err(&self, attr: &Attribute) {\n         if !self.features.map(|features| features.stmt_expr_attributes).unwrap_or(true) {\n             let mut err = feature_err(self.sess,\n                                       sym::stmt_expr_attributes,\n@@ -350,7 +385,7 @@ impl<'a> MutVisitor for StripUnconfigured<'a> {\n     }\n }\n \n-fn is_cfg(attr: &ast::Attribute) -> bool {\n+fn is_cfg(attr: &Attribute) -> bool {\n     attr.check_name(sym::cfg)\n }\n \n@@ -359,8 +394,8 @@ fn is_cfg(attr: &ast::Attribute) -> bool {\n pub fn process_configure_mod(\n     sess: &ParseSess,\n     cfg_mods: bool,\n-    attrs: &[ast::Attribute],\n-) -> (bool, Vec<ast::Attribute>) {\n+    attrs: &[Attribute],\n+) -> (bool, Vec<Attribute>) {\n     // Don't perform gated feature checking.\n     let mut strip_unconfigured = StripUnconfigured { sess, features: None };\n     let mut attrs = attrs.to_owned();"}, {"sha": "f1967372f4d09f3e1e8549a491191832b58194df", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "patch": "@@ -270,28 +270,31 @@ pub fn stream_to_parser_with_base_dir<'a>(\n }\n \n /// Runs the given subparser `f` on the tokens of the given `attr`'s item.\n-pub fn parse_in_attr<'a, T>(\n+pub fn parse_in<'a, T>(\n     sess: &'a ParseSess,\n-    attr: &ast::Attribute,\n+    tts: TokenStream,\n+    name: &'static str,\n     mut f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n ) -> PResult<'a, T> {\n-    let mut parser = Parser::new(\n-        sess,\n-        // FIXME(#66940, Centril | petrochenkov): refactor this function so it doesn't\n-        // require reconstructing and immediately re-parsing delimiters.\n-        attr.get_normal_item().args.outer_tokens(),\n-        None,\n-        false,\n-        false,\n-        Some(\"attribute\"),\n-    );\n+    let mut parser = Parser::new(sess, tts, None, false, false, Some(name));\n     let result = f(&mut parser)?;\n     if parser.token != token::Eof {\n         parser.unexpected()?;\n     }\n     Ok(result)\n }\n \n+/// Runs the given subparser `f` on the tokens of the given `attr`'s item.\n+pub fn parse_in_attr<'a, T>(\n+    sess: &'a ParseSess,\n+    attr: &ast::Attribute,\n+    f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n+) -> PResult<'a, T> {\n+    // FIXME(#66940, Centril | petrochenkov): refactor this function so it doesn't\n+    // require reconstructing and immediately re-parsing delimiters.\n+    parse_in(sess, attr.get_normal_item().args.outer_tokens(), \"attribute\", f)\n+}\n+\n // NOTE(Centril): The following probably shouldn't be here but it acknowledges the\n // fact that architecturally, we are using parsing (read on below to understand why).\n "}, {"sha": "b2030a4570ef938e93855de82d228fd425e01726", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "patch": "@@ -238,22 +238,18 @@ impl<'a> Parser<'a> {\n \n     /// Parses `cfg_attr(pred, attr_item_list)` where `attr_item_list` is comma-delimited.\n     pub fn parse_cfg_attr(&mut self) -> PResult<'a, (ast::MetaItem, Vec<(ast::AttrItem, Span)>)> {\n-        self.expect(&token::OpenDelim(token::Paren))?;\n-\n         let cfg_predicate = self.parse_meta_item()?;\n         self.expect(&token::Comma)?;\n \n         // Presumably, the majority of the time there will only be one attr.\n         let mut expanded_attrs = Vec::with_capacity(1);\n-\n-        while !self.check(&token::CloseDelim(token::Paren)) {\n-            let lo = self.token.span.lo();\n+        while self.token.kind != token::Eof {\n+            let lo = self.token.span;\n             let item = self.parse_attr_item()?;\n-            expanded_attrs.push((item, self.prev_span.with_lo(lo)));\n-            self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Paren)])?;\n+            expanded_attrs.push((item, lo.to(self.prev_span)));\n+            self.eat(&token::Comma);\n         }\n \n-        self.expect(&token::CloseDelim(token::Paren))?;\n         Ok((cfg_predicate, expanded_attrs))\n     }\n "}, {"sha": "8ca31c118369c23f9db2f495676bcb647f5f61ae", "filename": "src/test/ui/conditional-compilation/cfg-attr-parse.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs?ref=bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "patch": "@@ -1,11 +1,11 @@\n // Parse `cfg_attr` with varying numbers of attributes and trailing commas\n \n // Completely empty `cfg_attr` input\n-#[cfg_attr()] //~ error: expected identifier, found `)`\n+#[cfg_attr()] //~ error: malformed `cfg_attr` attribute input\n struct NoConfigurationPredicate;\n \n // Zero attributes, zero trailing comma (comma manatory here)\n-#[cfg_attr(all())] //~ error: expected `,`, found `)`\n+#[cfg_attr(all())] //~ error: expected `,`, found end of `cfg_attr`\n struct A0C0;\n \n // Zero attributes, one trailing comma\n@@ -40,4 +40,16 @@ struct A2C1;\n #[cfg_attr(all(), must_use, deprecated,,)] //~ ERROR expected identifier\n struct A2C2;\n \n+// Wrong delimiter `[`\n+#[cfg_attr[all(),,]]\n+//~^ ERROR wrong `cfg_attr` delimiters\n+//~| ERROR expected identifier, found `,`\n+struct BracketZero;\n+\n+// Wrong delimiter `{`\n+#[cfg_attr{all(),,}]\n+//~^ ERROR wrong `cfg_attr` delimiters\n+//~| ERROR expected identifier, found `,`\n+struct BraceZero;\n+\n fn main() {}"}, {"sha": "3a590d3282d46b04bfba865e320b69270e4b45d8", "filename": "src/test/ui/conditional-compilation/cfg-attr-parse.stderr", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr?ref=bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "patch": "@@ -1,32 +1,86 @@\n-error: expected identifier, found `)`\n-  --> $DIR/cfg-attr-parse.rs:4:12\n+error: malformed `cfg_attr` attribute input\n+  --> $DIR/cfg-attr-parse.rs:4:1\n    |\n LL | #[cfg_attr()]\n-   |            ^ expected identifier\n+   | ^^^^^^^^^^^^^ help: missing condition and attribute: `#[cfg_attr(condition, attribute, other_attribute, ...)]`\n+   |\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg_attr-attribute>\n \n-error: expected `,`, found `)`\n+error: expected `,`, found end of `cfg_attr` input\n   --> $DIR/cfg-attr-parse.rs:8:17\n    |\n LL | #[cfg_attr(all())]\n    |                 ^ expected `,`\n+   |\n+   = help: the valid syntax is `#[cfg_attr(condition, attribute, other_attribute, ...)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg_attr-attribute>\n \n error: expected identifier, found `,`\n   --> $DIR/cfg-attr-parse.rs:16:18\n    |\n LL | #[cfg_attr(all(),,)]\n    |                  ^ expected identifier\n+   |\n+   = help: the valid syntax is `#[cfg_attr(condition, attribute, other_attribute, ...)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg_attr-attribute>\n \n error: expected identifier, found `,`\n   --> $DIR/cfg-attr-parse.rs:28:28\n    |\n LL | #[cfg_attr(all(), must_use,,)]\n    |                            ^ expected identifier\n+   |\n+   = help: the valid syntax is `#[cfg_attr(condition, attribute, other_attribute, ...)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg_attr-attribute>\n \n error: expected identifier, found `,`\n   --> $DIR/cfg-attr-parse.rs:40:40\n    |\n LL | #[cfg_attr(all(), must_use, deprecated,,)]\n    |                                        ^ expected identifier\n+   |\n+   = help: the valid syntax is `#[cfg_attr(condition, attribute, other_attribute, ...)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg_attr-attribute>\n+\n+error: wrong `cfg_attr` delimiters\n+  --> $DIR/cfg-attr-parse.rs:44:11\n+   |\n+LL | #[cfg_attr[all(),,]]\n+   |           ^^^^^^^^^\n+   |\n+help: the delimiters should be `(` and `)`\n+   |\n+LL | #[cfg_attr(all(),,)]\n+   |           ^       ^\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:44:18\n+   |\n+LL | #[cfg_attr[all(),,]]\n+   |                  ^ expected identifier\n+   |\n+   = help: the valid syntax is `#[cfg_attr(condition, attribute, other_attribute, ...)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg_attr-attribute>\n+\n+error: wrong `cfg_attr` delimiters\n+  --> $DIR/cfg-attr-parse.rs:50:11\n+   |\n+LL | #[cfg_attr{all(),,}]\n+   |           ^^^^^^^^^\n+   |\n+help: the delimiters should be `(` and `)`\n+   |\n+LL | #[cfg_attr(all(),,)]\n+   |           ^       ^\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:50:18\n+   |\n+LL | #[cfg_attr{all(),,}]\n+   |                  ^ expected identifier\n+   |\n+   = help: the valid syntax is `#[cfg_attr(condition, attribute, other_attribute, ...)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg_attr-attribute>\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "05b7ebe4666622c61f309087e983617db31c5dbc", "filename": "src/test/ui/malformed/malformed-special-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs?ref=bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "patch": "@@ -1,7 +1,7 @@\n #[cfg_attr] //~ ERROR malformed `cfg_attr` attribute\n struct S1;\n \n-#[cfg_attr = \"\"] //~ ERROR expected `(`, found `=`\n+#[cfg_attr = \"\"] //~ ERROR malformed `cfg_attr` attribute\n struct S2;\n \n #[derive] //~ ERROR malformed `derive` attribute"}, {"sha": "6f535e03e6aec31035d8bd73b56231aaebeaad30", "filename": "src/test/ui/malformed/malformed-special-attrs.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbcda98d4107e462aae97d0b2e7c948a0d16f02b/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr?ref=bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "patch": "@@ -6,11 +6,13 @@ LL | #[cfg_attr]\n    |\n    = note: for more information, visit <https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg_attr-attribute>\n \n-error: expected `(`, found `=`\n-  --> $DIR/malformed-special-attrs.rs:4:12\n+error: malformed `cfg_attr` attribute input\n+  --> $DIR/malformed-special-attrs.rs:4:1\n    |\n LL | #[cfg_attr = \"\"]\n-   |            ^ expected `(`\n+   | ^^^^^^^^^^^^^^^^ help: missing condition and attribute: `#[cfg_attr(condition, attribute, other_attribute, ...)]`\n+   |\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg_attr-attribute>\n \n error: malformed `derive` attribute input\n   --> $DIR/malformed-special-attrs.rs:7:1"}]}