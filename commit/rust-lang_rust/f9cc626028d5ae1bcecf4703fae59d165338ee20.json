{"sha": "f9cc626028d5ae1bcecf4703fae59d165338ee20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5Y2M2MjYwMjhkNWFlMWJjZWNmNDcwM2ZhZTU5ZDE2NTMzOGVlMjA=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-11T15:12:45Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-12-06T10:48:07Z"}, "message": "Implement typechecking if-let guards", "tree": {"sha": "61c56d5fb1a80298100545314aefb06d343c2aaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c56d5fb1a80298100545314aefb06d343c2aaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9cc626028d5ae1bcecf4703fae59d165338ee20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9cc626028d5ae1bcecf4703fae59d165338ee20", "html_url": "https://github.com/rust-lang/rust/commit/f9cc626028d5ae1bcecf4703fae59d165338ee20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9cc626028d5ae1bcecf4703fae59d165338ee20/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77d80b22f1abe8392f7124fec343fdbbe760340e", "url": "https://api.github.com/repos/rust-lang/rust/commits/77d80b22f1abe8392f7124fec343fdbbe760340e", "html_url": "https://github.com/rust-lang/rust/commit/77d80b22f1abe8392f7124fec343fdbbe760340e"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "3106f19cf86f33352145f3e0967f6c5af36009b5", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f9cc626028d5ae1bcecf4703fae59d165338ee20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9cc626028d5ae1bcecf4703fae59d165338ee20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=f9cc626028d5ae1bcecf4703fae59d165338ee20", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // FIXME(60707): Consider removing hack with principled solution.\n             self.check_expr_has_type_or_error(scrut, self.tcx.types.bool, |_| {})\n         } else {\n-            self.demand_scrutinee_type(arms, scrut)\n+            self.demand_scrutinee_type(scrut, arms_contain_ref_bindings(arms), arms.is_empty())\n         };\n \n         // If there are no arms, that is a diverging match; a special case.\n@@ -98,7 +98,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.diverges.set(Diverges::Maybe);\n                 match g {\n                     hir::Guard::If(e) => {\n-                        self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {})\n+                        self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {});\n+                    }\n+                    hir::Guard::IfLet(pat, e) => {\n+                        let scrutinee_ty = self.demand_scrutinee_type(\n+                            e,\n+                            pat.contains_explicit_ref_binding(),\n+                            false,\n+                        );\n+                        self.check_pat_top(&pat, scrutinee_ty, None, true);\n                     }\n                 };\n             }\n@@ -450,8 +458,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn demand_scrutinee_type(\n         &self,\n-        arms: &'tcx [hir::Arm<'tcx>],\n         scrut: &'tcx hir::Expr<'tcx>,\n+        contains_ref_bindings: Option<hir::Mutability>,\n+        no_arms: bool,\n     ) -> Ty<'tcx> {\n         // Not entirely obvious: if matches may create ref bindings, we want to\n         // use the *precise* type of the scrutinee, *not* some supertype, as\n@@ -505,17 +514,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // (once introduced) is populated by the time we get here.\n         //\n         // See #44848.\n-        let contains_ref_bindings = arms\n-            .iter()\n-            .filter_map(|a| a.pat.contains_explicit_ref_binding())\n-            .max_by_key(|m| match *m {\n-                hir::Mutability::Mut => 1,\n-                hir::Mutability::Not => 0,\n-            });\n-\n         if let Some(m) = contains_ref_bindings {\n             self.check_expr_with_needs(scrut, Needs::maybe_mut_place(m))\n-        } else if arms.is_empty() {\n+        } else if no_arms {\n             self.check_expr(scrut)\n         } else {\n             // ...but otherwise we want to use any supertype of the\n@@ -546,3 +547,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n }\n+\n+fn arms_contain_ref_bindings(arms: &'tcx [hir::Arm<'tcx>]) -> Option<hir::Mutability> {\n+    arms.iter().filter_map(|a| a.pat.contains_explicit_ref_binding()).max_by_key(|m| match *m {\n+        hir::Mutability::Mut => 1,\n+        hir::Mutability::Not => 0,\n+    })\n+}"}, {"sha": "5bc40d617d044f5991a6235673a96680d80dc84b", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9cc626028d5ae1bcecf4703fae59d165338ee20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9cc626028d5ae1bcecf4703fae59d165338ee20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=f9cc626028d5ae1bcecf4703fae59d165338ee20", "patch": "@@ -246,6 +246,10 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                 Guard::If(ref e) => {\n                     self.visit_expr(e);\n                 }\n+                Guard::IfLet(ref pat, ref e) => {\n+                    self.visit_pat(pat);\n+                    self.visit_expr(e);\n+                }\n             }\n \n             let mut scope_var_ids ="}]}