{"sha": "e7217e1a01e4b2c5b136d8f38f21b5ade0ddcf86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MjE3ZTFhMDFlNGIyYzViMTM2ZDhmMzhmMjFiNWFkZTBkZGNmODY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-25T14:42:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-25T14:42:29Z"}, "message": "dead code", "tree": {"sha": "2eaafc398857d6491e8ff509be7efc72dac689c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eaafc398857d6491e8ff509be7efc72dac689c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7217e1a01e4b2c5b136d8f38f21b5ade0ddcf86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7217e1a01e4b2c5b136d8f38f21b5ade0ddcf86", "html_url": "https://github.com/rust-lang/rust/commit/e7217e1a01e4b2c5b136d8f38f21b5ade0ddcf86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7217e1a01e4b2c5b136d8f38f21b5ade0ddcf86/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c024d6c62d9add4051b4d8a863b402c07e8c984", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c024d6c62d9add4051b4d8a863b402c07e8c984", "html_url": "https://github.com/rust-lang/rust/commit/3c024d6c62d9add4051b4d8a863b402c07e8c984"}], "stats": {"total": 116, "additions": 0, "deletions": 116}, "files": [{"sha": "1e9e613ac2d9323001a3c77e1a407a5c491d1e25", "filename": "crates/ra_analysis/src/roots.rs", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/3c024d6c62d9add4051b4d8a863b402c07e8c984/crates%2Fra_analysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c024d6c62d9add4051b4d8a863b402c07e8c984/crates%2Fra_analysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Froots.rs?ref=3c024d6c62d9add4051b4d8a863b402c07e8c984", "patch": "@@ -1,116 +0,0 @@\n-use std::{sync::Arc};\n-\n-use rustc_hash::FxHashSet;\n-use rayon::prelude::*;\n-use salsa::Database;\n-\n-use crate::{\n-    Cancelable,\n-    db::{self, FilesDatabase, SyntaxDatabase},\n-    imp::FileResolverImp,\n-    symbol_index::SymbolIndex,\n-    FileId,\n-};\n-\n-pub(crate) trait SourceRoot {\n-    fn contains(&self, file_id: FileId) -> bool;\n-    fn db(&self) -> &db::RootDatabase;\n-    fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>) -> Cancelable<()>;\n-}\n-\n-#[derive(Default, Debug, Clone)]\n-pub(crate) struct WritableSourceRoot {\n-    db: db::RootDatabase,\n-}\n-\n-impl WritableSourceRoot {\n-    pub fn apply_changes(\n-        &mut self,\n-        changes: &mut dyn Iterator<Item = (FileId, Option<String>)>,\n-        file_resolver: Option<FileResolverImp>,\n-    ) {\n-        let mut changed = FxHashSet::default();\n-        let mut removed = FxHashSet::default();\n-        for (file_id, text) in changes {\n-            match text {\n-                None => {\n-                    removed.insert(file_id);\n-                }\n-                Some(text) => {\n-                    self.db\n-                        .query(db::FileTextQuery)\n-                        .set(file_id, Arc::new(text));\n-                    changed.insert(file_id);\n-                }\n-            }\n-        }\n-        let file_set = self.db.file_set();\n-        let mut files: FxHashSet<FileId> = file_set.files.clone();\n-        for file_id in removed {\n-            files.remove(&file_id);\n-        }\n-        files.extend(changed);\n-        let resolver = file_resolver.unwrap_or_else(|| file_set.resolver.clone());\n-        self.db\n-            .query(db::FileSetQuery)\n-            .set((), Arc::new(db::FileSet { files, resolver }));\n-    }\n-}\n-\n-impl SourceRoot for WritableSourceRoot {\n-    fn contains(&self, file_id: FileId) -> bool {\n-        self.db.file_set().files.contains(&file_id)\n-    }\n-    fn db(&self) -> &db::RootDatabase {\n-        &self.db\n-    }\n-    fn symbols<'a>(&'a self, acc: &mut Vec<Arc<SymbolIndex>>) -> Cancelable<()> {\n-        for &file_id in self.db.file_set().files.iter() {\n-            let symbols = self.db.file_symbols(file_id)?;\n-            acc.push(symbols)\n-        }\n-        Ok(())\n-    }\n-}\n-\n-#[derive(Debug, Clone)]\n-pub(crate) struct ReadonlySourceRoot {\n-    db: db::RootDatabase,\n-    symbol_index: Arc<SymbolIndex>,\n-}\n-\n-impl ReadonlySourceRoot {\n-    pub(crate) fn new(\n-        files: Vec<(FileId, String)>,\n-        resolver: FileResolverImp,\n-    ) -> ReadonlySourceRoot {\n-        let db = db::RootDatabase::default();\n-        let mut file_ids = FxHashSet::default();\n-        for (file_id, text) in files {\n-            file_ids.insert(file_id);\n-            db.query(db::FileTextQuery).set(file_id, Arc::new(text));\n-        }\n-\n-        db.query(db::FileSetQuery)\n-            .set((), Arc::new(db::FileSet { files: file_ids, resolver }));\n-        let file_set = db.file_set();\n-        let symbol_index =\n-            SymbolIndex::for_files(file_set.files.par_iter()\n-                .map_with(db.clone(), |db, &file_id| (file_id, db.file_syntax(file_id))));\n-\n-        ReadonlySourceRoot { db, symbol_index: Arc::new(symbol_index) }\n-    }\n-}\n-\n-impl SourceRoot for ReadonlySourceRoot {\n-    fn contains(&self, file_id: FileId) -> bool {\n-        self.db.file_set().files.contains(&file_id)\n-    }\n-    fn db(&self) -> &db::RootDatabase {\n-        &self.db\n-    }\n-    fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>) -> Cancelable<()> {\n-        acc.push(Arc::clone(&self.symbol_index));\n-        Ok(())\n-    }\n-}"}]}