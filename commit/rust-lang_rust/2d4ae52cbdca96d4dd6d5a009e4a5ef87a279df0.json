{"sha": "2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNGFlNTJjYmRjYTk2ZDRkZDZkNWEwMDllNGE1ZWY4N2EyNzlkZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-14T11:05:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-14T11:05:34Z"}, "message": "Auto merge of #28358 - dotdash:nounwind, r=alexcrichton\n\nThis allows to skip the codegen for all the unneeded landing pads, reducing code size across the board by about 2-5%, depending on the crate. Compile times seem to be pretty unaffected though :-/", "tree": {"sha": "782f1b598d547a1d7b62afe14809b84aa82d11f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/782f1b598d547a1d7b62afe14809b84aa82d11f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "html_url": "https://github.com/rust-lang/rust/commit/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "664a45976fb5dd433766f73a221435883151d0ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/664a45976fb5dd433766f73a221435883151d0ee", "html_url": "https://github.com/rust-lang/rust/commit/664a45976fb5dd433766f73a221435883151d0ee"}, {"sha": "3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "html_url": "https://github.com/rust-lang/rust/commit/3ef75d5774cb9a7cf839a69341c620b98fa9c7df"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "94408072932ea5d6a5ad1690602d1331b8eaaba9", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -79,6 +79,7 @@\n #![feature(optin_builtin_traits)]\n #![feature(reflect)]\n #![feature(rustc_attrs)]\n+#![feature(unwind_attributes)]\n #![cfg_attr(stage0, feature(simd))]\n #![cfg_attr(not(stage0), feature(repr_simd, platform_intrinsics))]\n #![feature(staged_api)]"}, {"sha": "93ddfa72f63ca78f65413726246f5a2a538365e4", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -62,6 +62,7 @@ pub fn panic_fmt(fmt: fmt::Arguments, file_line: &(&'static str, u32)) -> ! {\n     #[allow(improper_ctypes)]\n     extern {\n         #[lang = \"panic_fmt\"]\n+        #[unwind]\n         fn panic_impl(fmt: fmt::Arguments, file: &'static str, line: u32) -> !;\n     }\n     let (file, line) = *file_line;"}, {"sha": "c77cb49144818b4e94c3d3b3f896b503e0eb30ff", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -59,7 +59,6 @@ pub fn emit_uwtable(val: ValueRef, emit: bool) {\n \n /// Tell LLVM whether the function can or cannot unwind.\n #[inline]\n-#[allow(dead_code)] // possibly useful function\n pub fn unwind(val: ValueRef, can_unwind: bool) {\n     if can_unwind {\n         unsafe {\n@@ -118,6 +117,8 @@ pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[hir::Attribute], llfn: ValueRe\n             }\n         } else if attr.check_name(\"allocator\") {\n             llvm::Attribute::NoAlias.apply_llfn(llvm::ReturnIndex as c_uint, llfn);\n+        } else if attr.check_name(\"unwind\") {\n+            unwind(llfn, true);\n         }\n     }\n }"}, {"sha": "1359252e0351af2e486941e0fac440a75e53fa07", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -677,11 +677,8 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                     ccx.sess().bug(\"unexpected intrinsic in trans_external_path\")\n                 }\n                 _ => {\n-                    let llfn = foreign::register_foreign_item_fn(ccx, fn_ty.abi,\n-                                                                 t, &name);\n                     let attrs = csearch::get_item_attrs(&ccx.sess().cstore, did);\n-                    attributes::from_fn_attrs(ccx, &attrs, llfn);\n-                    llfn\n+                    foreign::register_foreign_item_fn(ccx, fn_ty.abi, t, &name, &attrs)\n                 }\n             }\n         }\n@@ -2418,9 +2415,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     let abi = ccx.tcx().map.get_foreign_abi(id);\n                     let ty = ccx.tcx().node_id_to_type(ni.id);\n                     let name = foreign::link_name(&*ni);\n-                    let llfn = foreign::register_foreign_item_fn(ccx, abi, ty, &name);\n-                    attributes::from_fn_attrs(ccx, &ni.attrs, llfn);\n-                    llfn\n+                    foreign::register_foreign_item_fn(ccx, abi, ty, &name, &ni.attrs)\n                 }\n                 hir::ForeignItemStatic(..) => {\n                     foreign::register_static(ccx, &*ni)"}, {"sha": "cbb092aa4eb33b3ada7e399e4a1e2b3faaf451d9", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -187,7 +187,8 @@ pub fn get_extern_fn(ccx: &CrateContext,\n /// Registers a foreign function found in a library. Just adds a LLVM global.\n pub fn register_foreign_item_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                           abi: Abi, fty: Ty<'tcx>,\n-                                          name: &str) -> ValueRef {\n+                                          name: &str,\n+                                          attrs: &[hir::Attribute])-> ValueRef {\n     debug!(\"register_foreign_item_fn(abi={:?}, \\\n             ty={:?}, \\\n             name={})\",\n@@ -210,7 +211,9 @@ pub fn register_foreign_item_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let llfn_ty = lltype_for_fn_from_foreign_types(ccx, &tys);\n \n     let llfn = get_extern_fn(ccx, &mut *ccx.externs().borrow_mut(), name, cc, llfn_ty, fty);\n+    attributes::unwind(llfn, false);\n     add_argument_attributes(&tys, llfn);\n+    attributes::from_fn_attrs(ccx, attrs, llfn);\n     llfn\n }\n \n@@ -489,8 +492,7 @@ pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &hir::ForeignMod) {\n                                                      \"foreign fn's sty isn't a bare_fn_ty?\")\n                     }\n \n-                    let llfn = register_foreign_item_fn(ccx, abi, ty, &lname);\n-                    attributes::from_fn_attrs(ccx, &foreign_item.attrs, llfn);\n+                    register_foreign_item_fn(ccx, abi, ty, &lname, &foreign_item.attrs);\n                     // Unlike for other items, we shouldn't call\n                     // `base::update_linkage` here.  Foreign items have\n                     // special linkage requirements, which are handled"}, {"sha": "774d13966bd6b4d2624b93996911c9bebcc32c90", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -242,6 +242,7 @@\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(decode_utf16)]\n+#![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n #![feature(vec_resize)]\n #![feature(wrapping)]"}, {"sha": "c6bffb0f733eeab4223110db1017b4cd39f51921", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -124,10 +124,12 @@ extern \"C\" {\n     // iOS on armv7 uses SjLj exceptions and requires to link\n     // against corresponding routine (..._SjLj_...)\n     #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n+    #[unwind]\n     pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception)\n                                   -> _Unwind_Reason_Code;\n \n     #[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n+    #[unwind]\n     fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception)\n                                    -> _Unwind_Reason_Code;\n "}, {"sha": "738681c3cfed7469023d2e39cb74d44743c57ab4", "filename": "src/libstd/sys/common/unwind/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -192,6 +192,7 @@ fn rust_panic(cause: Box<Any + Send + 'static>) -> ! {\n #[cfg(not(test))]\n /// Entry point of panic from the libcore crate.\n #[lang = \"panic_fmt\"]\n+#[unwind]\n pub extern fn rust_begin_unwind(msg: fmt::Arguments,\n                                 file: &'static str, line: u32) -> ! {\n     begin_unwind_fmt(msg, &(file, line))"}, {"sha": "a89e8b499acceae3d84c1fa2c8853621d26d775c", "filename": "src/libstd/sys/common/unwind/seh.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -62,6 +62,7 @@ static PANIC_DATA: StaticKey = StaticKey::new(None);\n \n // This function is provided by kernel32.dll\n extern \"system\" {\n+    #[unwind]\n     fn RaiseException(dwExceptionCode: DWORD,\n                       dwExceptionFlags: DWORD,\n                       nNumberOfArguments: DWORD,"}, {"sha": "9478678fda995eee75c746ba7ad031169967aa03", "filename": "src/libstd/sys/common/unwind/seh64_gnu.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -93,6 +93,7 @@ pub enum EXCEPTION_DISPOSITION {\n \n // From kernel32.dll\n extern \"system\" {\n+    #[unwind]\n     fn RaiseException(dwExceptionCode: DWORD,\n                       dwExceptionFlags: DWORD,\n                       nNumberOfArguments: DWORD,\n@@ -198,6 +199,7 @@ unsafe extern fn rust_eh_personality(\n \n #[lang = \"eh_unwind_resume\"]\n #[cfg(not(test))]\n+#[unwind]\n unsafe extern fn rust_eh_unwind_resume(panic_ctx: LPVOID) {\n     let params = [panic_ctx as ULONG_PTR];\n     RaiseException(RUST_PANIC,"}, {"sha": "abc04102950557e972e05b66405865021960fe51", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -188,6 +188,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n \n     // allow `extern \"platform-intrinsic\" { ... }`\n     (\"platform_intrinsics\", \"1.4.0\", Some(27731), Active),\n+\n+    // allow `#[unwind]`\n+    (\"unwind_attributes\", \"1.4.0\", None, Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -316,6 +319,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"unsafe_no_drop_flag\", Whitelisted, Gated(\"unsafe_no_drop_flag\",\n                                                \"unsafe_no_drop_flag has unstable semantics \\\n                                                 and may be removed in the future\")),\n+    (\"unwind\", Whitelisted, Gated(\"unwind_attributes\", \"#[unwind] is experimental\")),\n \n     // used in resolve\n     (\"prelude_import\", Whitelisted, Gated(\"prelude_import\","}, {"sha": "4c30b5ce02f4d1af3e1b9f37ba78dc1b516c9693", "filename": "src/test/codegen/extern-functions.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fextern-functions.rs?ref=2d4ae52cbdca96d4dd6d5a009e4a5ef87a279df0", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![feature(unwind_attributes)]\n+\n+extern {\n+// CHECK: Function Attrs: nounwind\n+// CHECK-NEXT: declare void @extern_fn\n+    fn extern_fn();\n+// CHECK-NOT: Function Attrs: nounwind\n+// CHECK: declare void @unwinding_extern_fn\n+    #[unwind]\n+    fn unwinding_extern_fn();\n+}"}]}