{"sha": "e3a3c00be805c265e5be3b478d76423371459c3b", "node_id": "C_kwDOAAsO6NoAKGUzYTNjMDBiZTgwNWMyNjVlNWJlM2I0NzhkNzY0MjMzNzE0NTljM2I", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-13T22:47:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-13T22:47:22Z"}, "message": "Rollup merge of #95211 - terrarier2111:improve-parser, r=compiler-errors\n\nImprove parser diagnostics\n\nThis pr fixes https://github.com/rust-lang/rust/issues/93867 and contains a couple of diagnostics related changes to the parser.\nHere is a short list with some of the changes:\n- don't suggest the same thing that is the current token\n- suggest removing the current token if the following token is one of the suggestions (maybe incorrect)\n- tell the user to put a type or lifetime after where if there is none (as a warning)\n- reduce the amount of tokens suggested (via the new eat_noexpect and check_noexpect methods)\n\nIf any of these changes are undesirable, i can remove them, thanks!", "tree": {"sha": "e75f4d8fea7902be9326c077404f7a103bc35679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e75f4d8fea7902be9326c077404f7a103bc35679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a3c00be805c265e5be3b478d76423371459c3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJip756CRBK7hj4Ov3rIwAAK4oIADzaq+LyQz3rF/Q5dcx4e239\nfFRQfaFpzhjQHfZBODxIBGkjzYSl8QjS9I0eFhlBGPrJOGsBQtVQF+aRFSUFPAAv\nn27D9en77m32erQ9U/+ihjT8dtuym9FDWK7D/ntVqWjVkSt+KOGrm2Nb2oblXJhH\nodfbHfjxgndQbazkaT9vKgjlUvGbgGc+hwx9msyzbTwhWK/tdrQnMzHqU0aQEqba\nxGffupLG6KDARzCd0vtqCkMt5hBxVSioR1nnPR9GZ3wwd9bg391dq2gJaWQVzjA1\ntwHd3W8Dy1Eh0MbIR5CigrgpcB6dcHhiOMlqgZSMsaTHaxkwTpu3JEeQLMzwpdw=\n=llzb\n-----END PGP SIGNATURE-----\n", "payload": "tree e75f4d8fea7902be9326c077404f7a103bc35679\nparent ca122c7ebb3ab50149c9d3d24ddb59c252b32272\nparent 21fdd549f63499a6f15160c22175cc9c3bbeb473\nauthor Yuki Okushi <jtitor@2k36.org> 1655160442 +0900\ncommitter GitHub <noreply@github.com> 1655160442 +0900\n\nRollup merge of #95211 - terrarier2111:improve-parser, r=compiler-errors\n\nImprove parser diagnostics\n\nThis pr fixes https://github.com/rust-lang/rust/issues/93867 and contains a couple of diagnostics related changes to the parser.\nHere is a short list with some of the changes:\n- don't suggest the same thing that is the current token\n- suggest removing the current token if the following token is one of the suggestions (maybe incorrect)\n- tell the user to put a type or lifetime after where if there is none (as a warning)\n- reduce the amount of tokens suggested (via the new eat_noexpect and check_noexpect methods)\n\nIf any of these changes are undesirable, i can remove them, thanks!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a3c00be805c265e5be3b478d76423371459c3b", "html_url": "https://github.com/rust-lang/rust/commit/e3a3c00be805c265e5be3b478d76423371459c3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a3c00be805c265e5be3b478d76423371459c3b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca122c7ebb3ab50149c9d3d24ddb59c252b32272", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca122c7ebb3ab50149c9d3d24ddb59c252b32272", "html_url": "https://github.com/rust-lang/rust/commit/ca122c7ebb3ab50149c9d3d24ddb59c252b32272"}, {"sha": "21fdd549f63499a6f15160c22175cc9c3bbeb473", "url": "https://api.github.com/repos/rust-lang/rust/commits/21fdd549f63499a6f15160c22175cc9c3bbeb473", "html_url": "https://github.com/rust-lang/rust/commit/21fdd549f63499a6f15160c22175cc9c3bbeb473"}], "stats": {"total": 168, "additions": 135, "deletions": 33}, "files": [{"sha": "c56f70e853daa68f79c3643497ba4793cb867037", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -28,6 +28,7 @@ use std::ops::{Deref, DerefMut};\n \n use std::mem::take;\n \n+use crate::parser;\n use tracing::{debug, trace};\n \n const TURBOFISH_SUGGESTION_STR: &str =\n@@ -481,6 +482,35 @@ impl<'a> Parser<'a> {\n             .map(|x| TokenType::Token(x.clone()))\n             .chain(inedible.iter().map(|x| TokenType::Token(x.clone())))\n             .chain(self.expected_tokens.iter().cloned())\n+            .filter_map(|token| {\n+                // filter out suggestions which suggest the same token which was found and deemed incorrect\n+                fn is_ident_eq_keyword(found: &TokenKind, expected: &TokenType) -> bool {\n+                    if let TokenKind::Ident(current_sym, _) = found {\n+                        if let TokenType::Keyword(suggested_sym) = expected {\n+                            return current_sym == suggested_sym;\n+                        }\n+                    }\n+                    false\n+                }\n+                if token != parser::TokenType::Token(self.token.kind.clone()) {\n+                    let eq = is_ident_eq_keyword(&self.token.kind, &token);\n+                    // if the suggestion is a keyword and the found token is an ident,\n+                    // the content of which are equal to the suggestion's content,\n+                    // we can remove that suggestion (see the return None statement below)\n+\n+                    // if this isn't the case however, and the suggestion is a token the\n+                    // content of which is the same as the found token's, we remove it as well\n+                    if !eq {\n+                        if let TokenType::Token(kind) = &token {\n+                            if kind == &self.token.kind {\n+                                return None;\n+                            }\n+                        }\n+                        return Some(token);\n+                    }\n+                }\n+                return None;\n+            })\n             .collect::<Vec<_>>();\n         expected.sort_by_cached_key(|x| x.to_string());\n         expected.dedup();"}, {"sha": "b224fa9596eb8a07d35b14aac152b9b8ada1f990", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -980,12 +980,26 @@ impl<'a> Parser<'a> {\n \n     fn parse_dot_or_call_expr_with_(&mut self, mut e: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         loop {\n-            if self.eat(&token::Question) {\n+            let has_question = if self.prev_token.kind == TokenKind::Ident(kw::Return, false) {\n+                // we are using noexpect here because we don't expect a `?` directly after a `return`\n+                // which could be suggested otherwise\n+                self.eat_noexpect(&token::Question)\n+            } else {\n+                self.eat(&token::Question)\n+            };\n+            if has_question {\n                 // `expr?`\n                 e = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Try(e), AttrVec::new());\n                 continue;\n             }\n-            if self.eat(&token::Dot) {\n+            let has_dot = if self.prev_token.kind == TokenKind::Ident(kw::Return, false) {\n+                // we are using noexpect here because we don't expect a `.` directly after a `return`\n+                // which could be suggested otherwise\n+                self.eat_noexpect(&token::Dot)\n+            } else {\n+                self.eat(&token::Dot)\n+            };\n+            if has_dot {\n                 // expr.f\n                 e = self.parse_dot_suffix_expr(lo, e)?;\n                 continue;\n@@ -1541,9 +1555,13 @@ impl<'a> Parser<'a> {\n             self.parse_for_expr(label, lo, attrs)\n         } else if self.eat_keyword(kw::Loop) {\n             self.parse_loop_expr(label, lo, attrs)\n-        } else if self.check(&token::OpenDelim(Delimiter::Brace)) || self.token.is_whole_block() {\n+        } else if self.check_noexpect(&token::OpenDelim(Delimiter::Brace))\n+            || self.token.is_whole_block()\n+        {\n             self.parse_block_expr(label, lo, BlockCheckMode::Default, attrs)\n-        } else if !ate_colon && (self.check(&TokenKind::Comma) || self.check(&TokenKind::Gt)) {\n+        } else if !ate_colon\n+            && (self.check_noexpect(&TokenKind::Comma) || self.check_noexpect(&TokenKind::Gt))\n+        {\n             // We're probably inside of a `Path<'a>` that needs a turbofish\n             let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n             self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();"}, {"sha": "6d6667717f0a383f6bed2e38fe3649afccb2b357", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -547,6 +547,22 @@ impl<'a> Parser<'a> {\n         is_present\n     }\n \n+    fn check_noexpect(&self, tok: &TokenKind) -> bool {\n+        self.token == *tok\n+    }\n+\n+    /// Consumes a token 'tok' if it exists. Returns whether the given token was present.\n+    ///\n+    /// the main purpose of this function is to reduce the cluttering of the suggestions list\n+    /// which using the normal eat method could introduce in some cases.\n+    pub fn eat_noexpect(&mut self, tok: &TokenKind) -> bool {\n+        let is_present = self.check_noexpect(tok);\n+        if is_present {\n+            self.bump()\n+        }\n+        is_present\n+    }\n+\n     /// Consumes a token 'tok' if it exists. Returns whether the given token was present.\n     pub fn eat(&mut self, tok: &TokenKind) -> bool {\n         let is_present = self.check(tok);"}, {"sha": "5cf1758c31f7730a0f63247bbbb8824b75951f0f", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -2,7 +2,7 @@ use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{Parser, Restrictions, TokenType};\n use crate::maybe_whole;\n use rustc_ast::ptr::P;\n-use rustc_ast::token::{self, Delimiter, Token};\n+use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::{\n     self as ast, AngleBracketedArg, AngleBracketedArgs, AnonConst, AssocConstraint,\n     AssocConstraintKind, BlockCheckMode, GenericArg, GenericArgs, Generics, ParenthesizedArgs,\n@@ -96,7 +96,7 @@ impl<'a> Parser<'a> {\n     ///                ^ help: use double colon\n     /// ```\n     fn recover_colon_before_qpath_proj(&mut self) -> bool {\n-        if self.token.kind != token::Colon\n+        if !self.check_noexpect(&TokenKind::Colon)\n             || self.look_ahead(1, |t| !t.is_ident() || t.is_reserved_ident())\n         {\n             return false;\n@@ -478,7 +478,7 @@ impl<'a> Parser<'a> {\n         while let Some(arg) = self.parse_angle_arg(ty_generics)? {\n             args.push(arg);\n             if !self.eat(&token::Comma) {\n-                if self.token.kind == token::Semi\n+                if self.check_noexpect(&TokenKind::Semi)\n                     && self.look_ahead(1, |t| t.is_ident() || t.is_lifetime())\n                 {\n                     // Add `>` to the list of expected tokens.\n@@ -517,7 +517,11 @@ impl<'a> Parser<'a> {\n         let arg = self.parse_generic_arg(ty_generics)?;\n         match arg {\n             Some(arg) => {\n-                if self.check(&token::Colon) | self.check(&token::Eq) {\n+                // we are using noexpect here because we first want to find out if either `=` or `:`\n+                // is present and then use that info to push the other token onto the tokens list\n+                let separated =\n+                    self.check_noexpect(&token::Colon) || self.check_noexpect(&token::Eq);\n+                if separated && (self.check(&token::Colon) | self.check(&token::Eq)) {\n                     let arg_span = arg.span();\n                     let (binder, ident, gen_args) = match self.get_ident_from_generic_arg(&arg) {\n                         Ok(ident_gen_args) => ident_gen_args,\n@@ -553,6 +557,14 @@ impl<'a> Parser<'a> {\n                         AssocConstraint { id: ast::DUMMY_NODE_ID, ident, gen_args, kind, span };\n                     Ok(Some(AngleBracketedArg::Constraint(constraint)))\n                 } else {\n+                    // we only want to suggest `:` and `=` in contexts where the previous token\n+                    // is an ident and the current token or the next token is an ident\n+                    if self.prev_token.is_ident()\n+                        && (self.token.is_ident() || self.look_ahead(1, |token| token.is_ident()))\n+                    {\n+                        self.check(&token::Colon);\n+                        self.check(&token::Eq);\n+                    }\n                     Ok(Some(AngleBracketedArg::Arg(arg)))\n                 }\n             }"}, {"sha": "42355dd93a7a53d28d1721f3a33dd05380ca560f", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -260,7 +260,10 @@ impl<'a> Parser<'a> {\n                     if let Ok(snip) = self.span_to_snippet(pat.span) {\n                         err.span_label(pat.span, format!(\"while parsing the type for `{}`\", snip));\n                     }\n-                    let err = if self.check(&token::Eq) {\n+                    // we use noexpect here because we don't actually expect Eq to be here\n+                    // but we are still checking for it in order to be able to handle it if\n+                    // it is there\n+                    let err = if self.check_noexpect(&token::Eq) {\n                         err.emit();\n                         None\n                     } else {"}, {"sha": "e5be8de79a958461eeb0e711b39f36afc6d46bbe", "filename": "src/test/ui/parser/can-begin-expr-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n         return break as ();\n     }\n \n-    return enum; //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `enum`\n+    return enum; //~ ERROR expected one of `;`, `}`, or an operator, found keyword `enum`\n }"}, {"sha": "9569ababad8d52995f6d1674adcf09882b8217f8", "filename": "src/test/ui/parser/can-begin-expr-check.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcan-begin-expr-check.stderr?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `enum`\n+error: expected one of `;`, `}`, or an operator, found keyword `enum`\n   --> $DIR/can-begin-expr-check.rs:19:12\n    |\n LL |     return enum;\n-   |            ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+   |            ^^^^ expected one of `;`, `}`, or an operator\n \n error: aborting due to previous error\n "}, {"sha": "54955944c7d35e0d72207f7f7db8e94a916e07f8", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -2,8 +2,8 @@ fn main() {}\n \n extern \"C\" { //~ NOTE while parsing this item list starting here\n     pub pub fn foo();\n-    //~^ ERROR expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `pub`, `unsafe`, or `use`, found keyword `pub`\n-    //~| NOTE expected one of 9 possible tokens\n+    //~^ ERROR expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `unsafe`, or `use`, found keyword `pub`\n+    //~| NOTE expected one of 8 possible tokens\n     //~| HELP there is already a visibility modifier, remove one\n     //~| NOTE explicit visibility first seen here\n } //~ NOTE the item list ends here"}, {"sha": "8ecebf01f17a3f4758f3553966ecdeb621fd03ab", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -1,12 +1,12 @@\n-error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `pub`, `unsafe`, or `use`, found keyword `pub`\n+error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `unsafe`, or `use`, found keyword `pub`\n   --> $DIR/duplicate-visibility.rs:4:9\n    |\n LL | extern \"C\" {\n    |            - while parsing this item list starting here\n LL |     pub pub fn foo();\n    |         ^^^\n    |         |\n-   |         expected one of 9 possible tokens\n+   |         expected one of 8 possible tokens\n    |         help: there is already a visibility modifier, remove one\n ...\n LL | }"}, {"sha": "2f2c6903a9f4c515acf71cf45a2375a90fc67aba", "filename": "src/test/ui/parser/issues/issue-20616-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -9,7 +9,7 @@ type Type_1_<'a, T> = &'a T;\n //type Type_1<'a T> = &'a T; // error: expected `,` or `>` after lifetime name, found `T`\n \n \n-type Type_2 = Type_1_<'static ()>; //~ error: expected one of `,`, `:`, `=`, or `>`, found `(`\n+type Type_2 = Type_1_<'static ()>; //~ error: expected one of `,` or `>`, found `(`\n \n \n //type Type_3<T> = Box<T,,>; // error: expected type, found `,`"}, {"sha": "42059685c5cc42b41aa295f04791759fd36074c3", "filename": "src/test/ui/parser/issues/issue-20616-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-20616-2.stderr?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `,`, `:`, `=`, or `>`, found `(`\n+error: expected one of `,` or `>`, found `(`\n   --> $DIR/issue-20616-2.rs:12:31\n    |\n LL | type Type_2 = Type_1_<'static ()>;\n-   |                               ^ expected one of `,`, `:`, `=`, or `>`\n+   |                               ^ expected one of `,` or `>`\n    |\n help: you might have meant to end the type parameters here\n    |"}, {"sha": "33c8a9fa328ca2ee696ec3e88907f6f14c1f0069", "filename": "src/test/ui/parser/issues/issue-62660.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -5,7 +5,7 @@ struct Foo;\n \n impl Foo {\n     pub fn foo(_: i32, self: Box<Self) {}\n-    //~^ ERROR expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`, found `)`\n+    //~^ ERROR expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `)`\n }\n \n fn main() {}"}, {"sha": "14c0bdcb111b8a53768ffb334b1ae90da65c48aa", "filename": "src/test/ui/parser/issues/issue-62660.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62660.stderr?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`, found `)`\n+error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `)`\n   --> $DIR/issue-62660.rs:7:38\n    |\n LL |     pub fn foo(_: i32, self: Box<Self) {}\n-   |                                      ^ expected one of 9 possible tokens\n+   |                                      ^ expected one of 7 possible tokens\n    |\n help: you might have meant to end the type parameters here\n    |"}, {"sha": "c9ebf133588bfdd774aa9ef980b3c5a8e2e1be3d", "filename": "src/test/ui/parser/issues/issue-84117.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -6,4 +6,4 @@ fn main() {\n     //~| ERROR expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n     //~| ERROR expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n }\n-//~^ ERROR expected one of `,`, `:`, `=`, or `>`, found `}`\n+//~^ ERROR expected one of `,` or `>`, found `}`"}, {"sha": "237bc11bd060ddfc37d86df2af234a99a0d6d23f", "filename": "src/test/ui/parser/issues/issue-84117.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84117.stderr?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -21,11 +21,11 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, fo\n LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n    |                                                                 ^ expected one of 8 possible tokens\n \n-error: expected one of `,`, `:`, `=`, or `>`, found `}`\n+error: expected one of `,` or `>`, found `}`\n   --> $DIR/issue-84117.rs:8:1\n    |\n LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n-   |         ----------- while parsing the type for `outer_local`       - expected one of `,`, `:`, `=`, or `>`\n+   |         ----------- while parsing the type for `outer_local`       - expected one of `,` or `>`\n ...\n LL | }\n    | ^ unexpected token"}, {"sha": "ee554784b3a247c4772751f52a90e21aa338aa4a", "filename": "src/test/ui/parser/issues/issue-93282.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -4,11 +4,11 @@ error: expected `while`, `for`, `loop` or `{` after a label\n LL |     f<'a,>\n    |         ^ expected `while`, `for`, `loop` or `{` after a label\n \n-error: expected one of `.`, `:`, `;`, `?`, `for`, `loop`, `while`, `{`, `}`, or an operator, found `,`\n+error: expected one of `.`, `:`, `;`, `?`, `for`, `loop`, `while`, `}`, or an operator, found `,`\n   --> $DIR/issue-93282.rs:2:9\n    |\n LL |     f<'a,>\n-   |         ^ expected one of 10 possible tokens\n+   |         ^ expected one of 9 possible tokens\n    |\n help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |"}, {"sha": "507447923915b843507704d5c892d69e5dd747bc", "filename": "src/test/ui/parser/issues/issue-93867.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -0,0 +1,10 @@\n+pub struct Entry<'a, K, V> {\n+    k: &'a mut K,\n+    v: V,\n+}\n+\n+pub fn entry<'a, K, V>() -> Entry<'a K, V> {\n+//                                  ^ missing comma\n+//~^^ expected one of `,` or `>`, found `K`\n+    unimplemented!()\n+}"}, {"sha": "ee0cb4efd74c136372919ad055fcf969185adf25", "filename": "src/test/ui/parser/issues/issue-93867.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93867.stderr?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -0,0 +1,13 @@\n+error: expected one of `,` or `>`, found `K`\n+  --> $DIR/issue-93867.rs:6:38\n+   |\n+LL | pub fn entry<'a, K, V>() -> Entry<'a K, V> {\n+   |                                      ^ expected one of `,` or `>`\n+   |\n+help: you might have meant to end the type parameters here\n+   |\n+LL | pub fn entry<'a, K, V>() -> Entry<'a> K, V> {\n+   |                                     +\n+\n+error: aborting due to previous error\n+"}, {"sha": "482b7704695c371ef705df2b891ae9cabf98b9e7", "filename": "src/test/ui/parser/lifetime-semicolon.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.fixed?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -5,6 +5,6 @@ struct Foo<'a, 'b> {\n }\n \n fn foo<'a, 'b>(_x: &mut Foo<'a, 'b>) {}\n-//~^ ERROR expected one of `,`, `:`, `=`, or `>`, found `;`\n+//~^ ERROR expected one of `,` or `>`, found `;`\n \n fn main() {}"}, {"sha": "21c8b0a7f88b3d49e12a1112bb9a644121798152", "filename": "src/test/ui/parser/lifetime-semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.rs?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -5,6 +5,6 @@ struct Foo<'a, 'b> {\n }\n \n fn foo<'a, 'b>(_x: &mut Foo<'a; 'b>) {}\n-//~^ ERROR expected one of `,`, `:`, `=`, or `>`, found `;`\n+//~^ ERROR expected one of `,` or `>`, found `;`\n \n fn main() {}"}, {"sha": "ee486c2366c9537d412e85921a69e198ea280132", "filename": "src/test/ui/parser/lifetime-semicolon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-semicolon.stderr?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `,`, `:`, `=`, or `>`, found `;`\n+error: expected one of `,` or `>`, found `;`\n   --> $DIR/lifetime-semicolon.rs:7:31\n    |\n LL | fn foo<'a, 'b>(_x: &mut Foo<'a; 'b>) {}\n-   |                               ^ expected one of `,`, `:`, `=`, or `>`\n+   |                               ^ expected one of `,` or `>`\n    |\n help: use a comma to separate type parameters\n    |"}, {"sha": "0bf52854ec206d64717710fae077a9c72d69fc32", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a3c00be805c265e5be3b478d76423371459c3b/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=e3a3c00be805c265e5be3b478d76423371459c3b", "patch": "@@ -59,11 +59,11 @@ error: expected `while`, `for`, `loop` or `{` after a label\n LL |     let _ = f<'_, i8>();\n    |                 ^ expected `while`, `for`, `loop` or `{` after a label\n \n-error: expected one of `.`, `:`, `;`, `?`, `else`, `for`, `loop`, `while`, `{`, or an operator, found `,`\n+error: expected one of `.`, `:`, `;`, `?`, `else`, `for`, `loop`, `while`, or an operator, found `,`\n   --> $DIR/require-parens-for-chained-comparison.rs:22:17\n    |\n LL |     let _ = f<'_, i8>();\n-   |                 ^ expected one of 10 possible tokens\n+   |                 ^ expected one of 9 possible tokens\n    |\n help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |"}]}