{"sha": "c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYjQxMDJlMmZkMjUyZjRkMDg3YzBmN2QzYzdjMzBiOTA3MTMyZGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-08T23:16:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-08T23:16:03Z"}, "message": "Rollup merge of #58265 - taiki-e:librustc_mir-2018, r=matthewjasper\n\nlibrustc_mir => 2018\n\nTransitions `librustc_mir` to Rust 2018; cc #58099\n\nTODO: ~~elided_lifetimes_in_paths~~\n\nr? @Centril", "tree": {"sha": "99c038b513bcb2c9a5ff062d5211da81929b53f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99c038b513bcb2c9a5ff062d5211da81929b53f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcXg2zCRBK7hj4Ov3rIwAAdHIIAIMmxTakds+NjGXp3WdJM7hM\ny15vgNf8vYLcP5WclQ65RvyvxACg+d8ziOiKVR4Zly8C5OXAp5YAyX8duaXD/8un\nzAH6deSgQ5FbIZbuZvuci36Zk84ky1gponwCY+9QvM8ikxlEo/eyJsLk6wbYYSAt\nbsYiHvnlrQtN9obCm8dHMu3f4vHEoxCKJZGYtm1l4TCXTBjUGXLo14WuZYpjclXg\nLclpYkkXjcjZidwEPeVYBIH6GdblV3/T80qhwHRy924YMeFCV/mec3Ne7qg5AGMF\nt5Gr07YG532ChlKmtXw5ejN/kkycawGyIRPLFsmyKDUoeNMqFDdHo8WLNNrsnRI=\n=3690\n-----END PGP SIGNATURE-----\n", "payload": "tree 99c038b513bcb2c9a5ff062d5211da81929b53f9\nparent 4476e4fd36a0c1c5228c0497966cfe3f65b5d273\nparent c9bc85ecf100da1358ff2c2545fe5fa6caa506c2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1549667763 +0100\ncommitter GitHub <noreply@github.com> 1549667763 +0100\n\nRollup merge of #58265 - taiki-e:librustc_mir-2018, r=matthewjasper\n\nlibrustc_mir => 2018\n\nTransitions `librustc_mir` to Rust 2018; cc #58099\n\nTODO: ~~elided_lifetimes_in_paths~~\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "html_url": "https://github.com/rust-lang/rust/commit/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4476e4fd36a0c1c5228c0497966cfe3f65b5d273", "url": "https://api.github.com/repos/rust-lang/rust/commits/4476e4fd36a0c1c5228c0497966cfe3f65b5d273", "html_url": "https://github.com/rust-lang/rust/commit/4476e4fd36a0c1c5228c0497966cfe3f65b5d273"}, {"sha": "c9bc85ecf100da1358ff2c2545fe5fa6caa506c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9bc85ecf100da1358ff2c2545fe5fa6caa506c2", "html_url": "https://github.com/rust-lang/rust/commit/c9bc85ecf100da1358ff2c2545fe5fa6caa506c2"}], "stats": {"total": 1039, "additions": 520, "deletions": 519}, "files": [{"sha": "44a6b41cdfe45233e26c6df4d2b1a71fdfd2b444", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_mir\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_mir\"\n@@ -12,7 +13,7 @@ crate-type = [\"dylib\"]\n arena = { path = \"../libarena\" }\n bitflags = \"1.0\"\n either = \"1.5.0\"\n-graphviz = { path = \"../libgraphviz\" }\n+dot = { path = \"../libgraphviz\", package = \"graphviz\" }\n log = \"0.4\"\n log_settings = \"0.1.1\"\n polonius-engine = \"0.6.2\""}, {"sha": "2788f5d4325a962e6af1560703c9fa9cb2123c8f", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n-use borrow_check::place_ext::PlaceExt;\n-use borrow_check::nll::ToRegionVid;\n-use dataflow::indexes::BorrowIndex;\n-use dataflow::move_paths::MoveData;\n+use crate::borrow_check::place_ext::PlaceExt;\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::dataflow::indexes::BorrowIndex;\n+use crate::dataflow::move_paths::MoveData;\n use rustc::mir::traversal;\n use rustc::mir::visit::{\n     PlaceContext, Visitor, NonUseContext, MutatingUseContext, NonMutatingUseContext\n@@ -72,7 +72,7 @@ crate struct BorrowData<'tcx> {\n }\n \n impl<'tcx> fmt::Display for BorrowData<'tcx> {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let kind = match self.kind {\n             mir::BorrowKind::Shared => \"\",\n             mir::BorrowKind::Shallow => \"shallow \","}, {"sha": "afb26963217ff949da84e62237a432cbce6e38f9", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n-use borrow_check::nll::explain_borrow::BorrowExplanation;\n-use borrow_check::nll::region_infer::{RegionName, RegionNameSource};\n-use borrow_check::prefixes::IsPrefixOf;\n-use borrow_check::WriteKind;\n+use crate::borrow_check::nll::explain_borrow::BorrowExplanation;\n+use crate::borrow_check::nll::region_infer::{RegionName, RegionNameSource};\n+use crate::borrow_check::prefixes::IsPrefixOf;\n+use crate::borrow_check::WriteKind;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::region::ScopeTree;\n@@ -22,10 +22,10 @@ use syntax_pos::Span;\n use super::borrow_set::BorrowData;\n use super::{Context, MirBorrowckCtxt};\n use super::{InitializationRequiringAction, PrefixSet};\n-use dataflow::drop_flag_effects;\n-use dataflow::move_paths::indexes::MoveOutIndex;\n-use dataflow::move_paths::MovePathIndex;\n-use util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::dataflow::drop_flag_effects;\n+use crate::dataflow::move_paths::indexes::MoveOutIndex;\n+use crate::dataflow::move_paths::MovePathIndex;\n+use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n \n #[derive(Debug)]\n struct MoveSite {\n@@ -1726,7 +1726,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     /// End-user visible description of the `field`nth field of `base`\n-    fn describe_field(&self, base: &Place, field: Field) -> String {\n+    fn describe_field(&self, base: &Place<'_>, field: Field) -> String {\n         match *base {\n             Place::Local(local) => {\n                 let local = &self.mir.local_decls[local];\n@@ -1751,7 +1751,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     /// End-user visible description of the `field_index`nth field of `ty`\n-    fn describe_field_from_ty(&self, ty: &ty::Ty, field: Field) -> String {\n+    fn describe_field_from_ty(&self, ty: &ty::Ty<'_>, field: Field) -> String {\n         if ty.is_box() {\n             // If the type is a box, the field is described from the boxed type\n             self.describe_field_from_ty(&ty.boxed_ty(), field)\n@@ -1860,7 +1860,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn annotate_argument_and_return_for_borrow(\n         &self,\n         borrow: &BorrowData<'tcx>,\n-    ) -> Option<AnnotatedBorrowFnSignature> {\n+    ) -> Option<AnnotatedBorrowFnSignature<'_>> {\n         // Define a fallback for when we can't match a closure.\n         let fallback = || {\n             let is_closure = self.infcx.tcx.is_closure(self.mir_def_id);\n@@ -2081,7 +2081,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         did: DefId,\n         sig: ty::PolyFnSig<'tcx>,\n-    ) -> Option<AnnotatedBorrowFnSignature> {\n+    ) -> Option<AnnotatedBorrowFnSignature<'_>> {\n         debug!(\"annotate_fn_sig: did={:?} sig={:?}\", did, sig);\n         let is_closure = self.infcx.tcx.is_closure(did);\n         let fn_node_id = self.infcx.tcx.hir().as_local_node_id(did)?;\n@@ -2368,14 +2368,22 @@ impl UseSpans {\n     }\n \n     // Add a span label to the arguments of the closure, if it exists.\n-    pub(super) fn args_span_label(self, err: &mut DiagnosticBuilder, message: impl Into<String>) {\n+    pub(super) fn args_span_label(\n+        self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        message: impl Into<String>,\n+    ) {\n         if let UseSpans::ClosureUse { args_span, .. } = self {\n             err.span_label(args_span, message);\n         }\n     }\n \n     // Add a span label to the use of the captured variable, if it exists.\n-    pub(super) fn var_span_label(self, err: &mut DiagnosticBuilder, message: impl Into<String>) {\n+    pub(super) fn var_span_label(\n+        self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        message: impl Into<String>,\n+    ) {\n         if let UseSpans::ClosureUse { var_span, .. } = self {\n             err.span_label(var_span, message);\n         }\n@@ -2563,7 +2571,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n     /// Helper to retrieve span(s) of given borrow from the current MIR\n     /// representation\n-    pub(super) fn retrieve_borrow_spans(&self, borrow: &BorrowData) -> UseSpans {\n+    pub(super) fn retrieve_borrow_spans(&self, borrow: &BorrowData<'_>) -> UseSpans {\n         let span = self.mir.source_info(borrow.reserve_location).span;\n         self.borrow_spans(span, borrow.reserve_location)\n     }"}, {"sha": "8de39f0efc1a5309a39eca22b3242f239c58d341", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -7,16 +7,16 @@ use rustc::mir::{BasicBlock, Location};\n use rustc::ty::RegionVid;\n use rustc_data_structures::bit_set::BitIter;\n \n-use borrow_check::location::LocationIndex;\n+use crate::borrow_check::location::LocationIndex;\n \n use polonius_engine::Output;\n \n-use dataflow::move_paths::indexes::BorrowIndex;\n-use dataflow::move_paths::HasMoveData;\n-use dataflow::Borrows;\n-use dataflow::EverInitializedPlaces;\n-use dataflow::{FlowAtLocation, FlowsAtLocation};\n-use dataflow::MaybeUninitializedPlaces;\n+use crate::dataflow::move_paths::indexes::BorrowIndex;\n+use crate::dataflow::move_paths::HasMoveData;\n+use crate::dataflow::Borrows;\n+use crate::dataflow::EverInitializedPlaces;\n+use crate::dataflow::{FlowAtLocation, FlowsAtLocation};\n+use crate::dataflow::MaybeUninitializedPlaces;\n use either::Either;\n use std::fmt;\n use std::rc::Rc;\n@@ -57,7 +57,7 @@ impl<'b, 'gcx, 'tcx> Flows<'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    crate fn with_outgoing_borrows(&self, op: impl FnOnce(BitIter<BorrowIndex>)) {\n+    crate fn with_outgoing_borrows(&self, op: impl FnOnce(BitIter<'_, BorrowIndex>)) {\n         self.borrows.with_iter_outgoing(op)\n     }\n }\n@@ -93,7 +93,7 @@ impl<'b, 'gcx, 'tcx> FlowsAtLocation for Flows<'b, 'gcx, 'tcx> {\n }\n \n impl<'b, 'gcx, 'tcx> fmt::Display for Flows<'b, 'gcx, 'tcx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut s = String::new();\n \n         s.push_str(\"borrows in effect: [\");"}, {"sha": "45a8c9e8e6909483c2bc8876fffbee6047565714", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,6 +1,6 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n-use borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n@@ -25,16 +25,16 @@ use std::collections::BTreeMap;\n \n use syntax_pos::Span;\n \n-use dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n-use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError};\n-use dataflow::Borrows;\n-use dataflow::DataflowResultsConsumer;\n-use dataflow::FlowAtLocation;\n-use dataflow::MoveDataParamEnv;\n-use dataflow::{do_dataflow, DebugFormatted};\n-use dataflow::EverInitializedPlaces;\n-use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n+use crate::dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError};\n+use crate::dataflow::Borrows;\n+use crate::dataflow::DataflowResultsConsumer;\n+use crate::dataflow::FlowAtLocation;\n+use crate::dataflow::MoveDataParamEnv;\n+use crate::dataflow::{do_dataflow, DebugFormatted};\n+use crate::dataflow::EverInitializedPlaces;\n+use crate::dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n+use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n \n use self::borrow_set::{BorrowData, BorrowSet};\n use self::flows::Flows;\n@@ -59,7 +59,7 @@ mod used_muts;\n \n pub(crate) mod nll;\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         mir_borrowck,\n         ..*providers\n@@ -108,7 +108,7 @@ fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> BorrowC\n     }\n \n     let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {\n-        let input_mir: &Mir = &input_mir.borrow();\n+        let input_mir: &Mir<'_> = &input_mir.borrow();\n         do_mir_borrowck(&infcx, input_mir, def_id)\n     });\n     debug!(\"mir_borrowck done\");"}, {"sha": "f7d46925e17dfe14992b83c8559bfd4dcbb5188d", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -6,13 +6,13 @@ use rustc::ty;\n use rustc_errors::{DiagnosticBuilder,Applicability};\n use syntax_pos::Span;\n \n-use borrow_check::MirBorrowckCtxt;\n-use borrow_check::prefixes::PrefixSet;\n-use dataflow::move_paths::{\n+use crate::borrow_check::MirBorrowckCtxt;\n+use crate::borrow_check::prefixes::PrefixSet;\n+use crate::dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, InitLocation,\n     LookupResult, MoveError, MovePathIndex,\n };\n-use util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n \n // Often when desugaring a pattern match we may have many individual moves in\n // MIR that are all part of one operation from the user's point-of-view. For\n@@ -63,7 +63,7 @@ enum BorrowedContentSource {\n }\n \n impl Display for BorrowedContentSource {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             BorrowedContentSource::Arc => write!(f, \"an `Arc`\"),\n             BorrowedContentSource::Rc => write!(f, \"an `Rc`\"),\n@@ -240,7 +240,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n     fn report(&mut self, error: GroupedMoveError<'tcx>) {\n         let (mut err, err_span) = {\n-            let (span, original_path, kind): (Span, &Place<'tcx>, &IllegalMoveOriginKind) =\n+            let (span, original_path, kind): (Span, &Place<'tcx>, &IllegalMoveOriginKind<'_>) =\n                 match error {\n                     GroupedMoveError::MovesFromPlace {\n                         span,"}, {"sha": "dad8d903cf9feec11960f74869d1c100b86da616", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -8,11 +8,11 @@ use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n use syntax_pos::symbol::keywords;\n \n-use dataflow::move_paths::InitLocation;\n-use borrow_check::MirBorrowckCtxt;\n-use util::borrowck_errors::{BorrowckErrors, Origin};\n-use util::collect_writes::FindAssignments;\n-use util::suggest_ref_mut;\n+use crate::dataflow::move_paths::InitLocation;\n+use crate::borrow_check::MirBorrowckCtxt;\n+use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::util::collect_writes::FindAssignments;\n+use crate::util::suggest_ref_mut;\n use rustc_errors::Applicability;\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -611,7 +611,7 @@ fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n      })\n }\n \n-fn is_closure_or_generator(ty: ty::Ty) -> bool {\n+fn is_closure_or_generator(ty: ty::Ty<'_>) -> bool {\n     ty.is_closure() || ty.is_generator()\n }\n "}, {"sha": "c02c2b4934cf492261393cabfea022b48910a9e4", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,8 +1,8 @@\n-use borrow_check::borrow_set::BorrowSet;\n-use borrow_check::location::LocationTable;\n-use borrow_check::nll::ToRegionVid;\n-use borrow_check::nll::facts::AllFacts;\n-use borrow_check::nll::region_infer::values::LivenessValues;\n+use crate::borrow_check::borrow_set::BorrowSet;\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::facts::AllFacts;\n+use crate::borrow_check::nll::region_infer::values::LivenessValues;\n use rustc::infer::InferCtxt;\n use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;"}, {"sha": "2479dfd1c709318c7627a625c4634eed9ce10ac3", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,6 +1,6 @@\n-use borrow_check::nll::type_check::Locations;\n-use borrow_check::nll::constraints::ConstraintIndex;\n-use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::type_check::Locations;\n+use crate::borrow_check::nll::constraints::ConstraintIndex;\n+use crate::borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph;"}, {"sha": "d3f9743dfed7720453ac38719cfe60054f82deed", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -2,7 +2,7 @@ use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use borrow_check::nll::type_check::Locations;\n+use crate::borrow_check::nll::type_check::Locations;\n \n use std::fmt;\n use std::ops::Deref;\n@@ -84,7 +84,7 @@ pub struct OutlivesConstraint {\n }\n \n impl fmt::Debug for OutlivesConstraint {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             formatter,\n             \"({:?}: {:?}) due to {:?}\","}, {"sha": "c5aaf5b811ed7e6c956b0c6d56998544dfd32903", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,13 +1,13 @@\n use std::collections::VecDeque;\n use std::rc::Rc;\n \n-use borrow_check::nll::region_infer::{Cause, RegionInferenceContext};\n-use borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::region_infer::{Cause, RegionInferenceContext};\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::util::liveness::{self, DefUse};\n use rustc::mir::visit::{MirVisitable, PlaceContext, Visitor};\n use rustc::mir::{Local, Location, Mir};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n-use util::liveness::{self, DefUse};\n \n crate fn find<'tcx>(\n     mir: &Mir<'tcx>,"}, {"sha": "8e57d107aa61effea1334593db3f9ff44023d45d", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,8 +1,8 @@\n-use borrow_check::borrow_set::BorrowData;\n-use borrow_check::error_reporting::UseSpans;\n-use borrow_check::nll::ConstraintDescription;\n-use borrow_check::nll::region_infer::{Cause, RegionName};\n-use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n+use crate::borrow_check::borrow_set::BorrowData;\n+use crate::borrow_check::error_reporting::UseSpans;\n+use crate::borrow_check::nll::ConstraintDescription;\n+use crate::borrow_check::nll::region_infer::{Cause, RegionName};\n+use crate::borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{\n     CastKind, ConstraintCategory, FakeReadCause, Local, Location, Mir, Operand,\n@@ -14,7 +14,7 @@ use syntax_pos::Span;\n \n mod find_use;\n \n-pub(in borrow_check) enum BorrowExplanation {\n+pub(in crate::borrow_check) enum BorrowExplanation {\n     UsedLater(LaterUseKind, Span),\n     UsedLaterInLoop(LaterUseKind, Span),\n     UsedLaterWhenDropped {\n@@ -33,7 +33,7 @@ pub(in borrow_check) enum BorrowExplanation {\n }\n \n #[derive(Clone, Copy)]\n-pub(in borrow_check) enum LaterUseKind {\n+pub(in crate::borrow_check) enum LaterUseKind {\n     TraitCapture,\n     ClosureCapture,\n     Call,\n@@ -42,13 +42,13 @@ pub(in borrow_check) enum LaterUseKind {\n }\n \n impl BorrowExplanation {\n-    pub(in borrow_check) fn is_explained(&self) -> bool {\n+    pub(in crate::borrow_check) fn is_explained(&self) -> bool {\n         match self {\n             BorrowExplanation::Unexplained => false,\n             _ => true,\n         }\n     }\n-    pub(in borrow_check) fn add_explanation_to_diagnostic<'cx, 'gcx, 'tcx>(\n+    pub(in crate::borrow_check) fn add_explanation_to_diagnostic<'cx, 'gcx, 'tcx>(\n         &self,\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n         mir: &Mir<'tcx>,\n@@ -187,7 +187,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     ///   - second half is the place being accessed\n     ///\n     /// [d]: https://rust-lang.github.io/rfcs/2094-nll.html#leveraging-intuition-framing-errors-in-terms-of-points\n-    pub(in borrow_check) fn explain_why_borrow_contains_point(\n+    pub(in crate::borrow_check) fn explain_why_borrow_contains_point(\n         &self,\n         context: Context,\n         borrow: &BorrowData<'tcx>,"}, {"sha": "9672d3e78cd50a76c62ebca1c3ffaab41bb85e71", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,5 +1,5 @@\n-use borrow_check::location::{LocationIndex, LocationTable};\n-use dataflow::indexes::BorrowIndex;\n+use crate::borrow_check::location::{LocationIndex, LocationTable};\n+use crate::dataflow::indexes::BorrowIndex;\n use polonius_engine::AllFacts as PoloniusAllFacts;\n use polonius_engine::Atom;\n use rustc::ty::{RegionVid, TyCtxt};"}, {"sha": "3df6b797a44fb2b4f9b0b449248a5fe66a3b6112", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,15 +1,15 @@\n-use borrow_check::borrow_set::BorrowSet;\n-use borrow_check::location::LocationTable;\n-use borrow_check::{JustWrite, WriteAndRead};\n-use borrow_check::{AccessDepth, Deep, Shallow};\n-use borrow_check::{ReadOrWrite, Activation, Read, Reservation, Write};\n-use borrow_check::{Context, ContextKind};\n-use borrow_check::{LocalMutationIsAllowed, MutateMode};\n-use borrow_check::ArtificialField;\n-use borrow_check::{ReadKind, WriteKind};\n-use borrow_check::nll::facts::AllFacts;\n-use borrow_check::path_utils::*;\n-use dataflow::move_paths::indexes::BorrowIndex;\n+use crate::borrow_check::borrow_set::BorrowSet;\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::{JustWrite, WriteAndRead};\n+use crate::borrow_check::{AccessDepth, Deep, Shallow};\n+use crate::borrow_check::{ReadOrWrite, Activation, Read, Reservation, Write};\n+use crate::borrow_check::{Context, ContextKind};\n+use crate::borrow_check::{LocalMutationIsAllowed, MutateMode};\n+use crate::borrow_check::ArtificialField;\n+use crate::borrow_check::{ReadKind, WriteKind};\n+use crate::borrow_check::nll::facts::AllFacts;\n+use crate::borrow_check::path_utils::*;\n+use crate::dataflow::move_paths::indexes::BorrowIndex;\n use rustc::ty::TyCtxt;\n use rustc::mir::visit::Visitor;\n use rustc::mir::{BasicBlock, Location, Mir, Place, Rvalue};"}, {"sha": "1fca104cd3825b4f6301708348968e103da3f1c0", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,13 +1,14 @@\n-use borrow_check::borrow_set::BorrowSet;\n-use borrow_check::location::{LocationIndex, LocationTable};\n-use borrow_check::nll::facts::AllFactsExt;\n-use borrow_check::nll::type_check::{MirTypeckResults, MirTypeckRegionConstraints};\n-use borrow_check::nll::type_check::liveness::liveness_map::NllLivenessMap;\n-use borrow_check::nll::region_infer::values::RegionValueElements;\n-use dataflow::indexes::BorrowIndex;\n-use dataflow::move_paths::MoveData;\n-use dataflow::FlowAtLocation;\n-use dataflow::MaybeInitializedPlaces;\n+use crate::borrow_check::borrow_set::BorrowSet;\n+use crate::borrow_check::location::{LocationIndex, LocationTable};\n+use crate::borrow_check::nll::facts::AllFactsExt;\n+use crate::borrow_check::nll::type_check::{MirTypeckResults, MirTypeckRegionConstraints};\n+use crate::borrow_check::nll::type_check::liveness::liveness_map::NllLivenessMap;\n+use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n+use crate::dataflow::indexes::BorrowIndex;\n+use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::FlowAtLocation;\n+use crate::dataflow::MaybeInitializedPlaces;\n+use crate::transform::MirSource;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Mir};\n@@ -19,12 +20,11 @@ use std::io;\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::str::FromStr;\n-use transform::MirSource;\n \n use self::mir_util::PassWhere;\n use polonius_engine::{Algorithm, Output};\n-use util as mir_util;\n-use util::pretty;\n+use crate::util as mir_util;\n+use crate::util::pretty;\n \n mod constraint_generation;\n pub mod explain_borrow;\n@@ -45,7 +45,7 @@ use self::universal_regions::UniversalRegions;\n /// scraping out the set of universal regions (e.g., region parameters)\n /// declared on the function. That set will need to be given to\n /// `compute_regions`.\n-pub(in borrow_check) fn replace_regions_in_mir<'cx, 'gcx, 'tcx>(\n+pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'gcx, 'tcx>,\n     def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -68,7 +68,7 @@ pub(in borrow_check) fn replace_regions_in_mir<'cx, 'gcx, 'tcx>(\n /// Computes the (non-lexical) regions from the input MIR.\n ///\n /// This may result in errors being reported.\n-pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n+pub(in crate::borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'gcx, 'tcx>,\n     def_id: DefId,\n     universal_regions: UniversalRegions<'tcx>,\n@@ -211,8 +211,8 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     source: MirSource,\n     mir: &Mir<'tcx>,\n-    regioncx: &RegionInferenceContext,\n-    closure_region_requirements: &Option<ClosureRegionRequirements>,\n+    regioncx: &RegionInferenceContext<'_>,\n+    closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n ) {\n     if !mir_util::dump_enabled(infcx.tcx, \"nll\", source) {\n         return;\n@@ -254,14 +254,14 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     );\n \n     // Also dump the inference graph constraints as a graphviz file.\n-    let _: io::Result<()> = try_block! {\n+    let _: io::Result<()> = try {\n         let mut file =\n             pretty::create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, source)?;\n         regioncx.dump_graphviz_raw_constraints(&mut file)?;\n     };\n \n     // Also dump the inference graph constraints as a graphviz file.\n-    let _: io::Result<()> = try_block! {\n+    let _: io::Result<()> = try {\n         let mut file =\n             pretty::create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, source)?;\n         regioncx.dump_graphviz_scc_constraints(&mut file)?;\n@@ -273,7 +273,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n     mir: &Mir<'tcx>,\n     mir_def_id: DefId,\n     regioncx: &RegionInferenceContext<'tcx>,\n-    closure_region_requirements: &Option<ClosureRegionRequirements>,\n+    closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n     errors_buffer: &mut Vec<Diagnostic>,\n ) {\n     let tcx = infcx.tcx;\n@@ -322,7 +322,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n }\n \n fn for_each_region_constraint(\n-    closure_region_requirements: &ClosureRegionRequirements,\n+    closure_region_requirements: &ClosureRegionRequirements<'_>,\n     with_msg: &mut dyn FnMut(&str) -> io::Result<()>,\n ) -> io::Result<()> {\n     for req in &closure_region_requirements.outlives_requirements {"}, {"sha": "3498e3437676c628061f65d67b26614528120cc1", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,8 +1,9 @@\n-use borrow_check::nll::constraints::OutlivesConstraint;\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::type_check::Locations;\n-use borrow_check::nll::universal_regions::DefiningTy;\n-use borrow_check::nll::ConstraintDescription;\n+use crate::borrow_check::nll::constraints::OutlivesConstraint;\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::nll::type_check::Locations;\n+use crate::borrow_check::nll::universal_regions::DefiningTy;\n+use crate::borrow_check::nll::ConstraintDescription;\n+use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n@@ -15,7 +16,6 @@ use std::collections::VecDeque;\n use syntax::errors::Applicability;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n-use util::borrowck_errors::{BorrowckErrors, Origin};\n \n mod region_name;\n mod var_name;"}, {"sha": "2c4f359f65fa5cbb7395e567120bc92452a8c324", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n use std::fmt::{self, Display};\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::universal_regions::DefiningTy;\n-use borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::nll::universal_regions::DefiningTy;\n+use crate::borrow_check::nll::ToRegionVid;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n@@ -109,7 +109,7 @@ impl RegionName {\n }\n \n impl Display for RegionName {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.name)\n     }\n }"}, {"sha": "bd7b8829c7b4fc4f2636d196e5fe344065012c9d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,5 +1,5 @@\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::nll::ToRegionVid;\n use rustc::mir::{Local, Mir};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "cffc66ac7ddfd5bee81b828270a209755fdac771", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -3,8 +3,7 @@\n //! data to rendered labels.\n \n use super::*;\n-use borrow_check::nll::constraints::OutlivesConstraint;\n-use dot;\n+use crate::borrow_check::nll::constraints::OutlivesConstraint;\n use std::borrow::Cow;\n use std::io::{self, Write};\n "}, {"sha": "7fe657702d756375d89bb2583eaefbad7e5c3e5c", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,9 +1,11 @@\n use super::universal_regions::UniversalRegions;\n-use borrow_check::nll::constraints::graph::NormalConstraintGraph;\n-use borrow_check::nll::constraints::{ConstraintSccIndex, ConstraintSet, OutlivesConstraint};\n-use borrow_check::nll::region_infer::values::{PlaceholderIndices, RegionElement, ToElementIndex};\n-use borrow_check::nll::type_check::free_region_relations::UniversalRegionRelations;\n-use borrow_check::nll::type_check::Locations;\n+use crate::borrow_check::nll::constraints::graph::NormalConstraintGraph;\n+use crate::borrow_check::nll::constraints::{ConstraintSccIndex, ConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::region_infer::values::{\n+    PlaceholderIndices, RegionElement, ToElementIndex\n+};\n+use crate::borrow_check::nll::type_check::free_region_relations::UniversalRegionRelations;\n+use crate::borrow_check::nll::type_check::Locations;\n use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::region_constraints::{GenericKind, VarInfos, VerifyBound};"}, {"sha": "1a72205ad7ae1ba0e3e4c7a7fb3e767b9a2c7d12", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,8 +1,8 @@\n-use borrow_check::nll::constraints::OutlivesConstraint;\n-use borrow_check::nll::region_infer::TypeTest;\n-use borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n-use borrow_check::nll::universal_regions::UniversalRegions;\n-use borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::constraints::OutlivesConstraint;\n+use crate::borrow_check::nll::region_infer::TypeTest;\n+use crate::borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n+use crate::borrow_check::nll::universal_regions::UniversalRegions;\n+use crate::borrow_check::nll::ToRegionVid;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::outlives::obligations::{TypeOutlives, TypeOutlivesDelegate};"}, {"sha": "f549aea81f69f0742372de6a7d9507914aefc755", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n-use borrow_check::nll::type_check::constraint_conversion;\n-use borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n-use borrow_check::nll::universal_regions::UniversalRegions;\n-use borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::type_check::constraint_conversion;\n+use crate::borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n+use crate::borrow_check::nll::universal_regions::UniversalRegions;\n+use crate::borrow_check::nll::ToRegionVid;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc::infer::region_constraints::GenericKind;"}, {"sha": "50828c294fa1b8d83f9d2bb00caa38ed0fd919ac", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -7,7 +7,7 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n-use borrow_check::nll::universal_regions::UniversalRegions;\n+use crate::borrow_check::nll::universal_regions::UniversalRegions;\n use rustc::infer::LateBoundRegionConversionTime;\n use rustc::mir::*;\n use rustc::ty::Ty;"}, {"sha": "5e2e4407cbecddaf706b46ac23f97bb15654d27b", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/liveness_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -6,13 +6,13 @@\n //! liveness code so that it only operates over variables with regions in their\n //! types, instead of all variables.\n \n-use borrow_check::nll::ToRegionVid;\n-use borrow_check::nll::facts::{AllFacts, AllFactsExt};\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::facts::{AllFacts, AllFactsExt};\n+use crate::util::liveness::LiveVariableMap;\n use rustc::mir::{Local, Mir};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use util::liveness::LiveVariableMap;\n \n /// Map between Local and LiveVar indices: the purpose of this\n /// map is to define the subset of local variables for which we need"}, {"sha": "e9765d2798cd73aa0ac3a5f8dae93f9519b0d963", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,10 +1,10 @@\n-use borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n-use borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n+use crate::borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n+use crate::borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n+use crate::util::liveness::{categorize, DefUse, LiveVariableMap};\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::{Local, Location, Mir};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::vec_linked_list as vll;\n-use util::liveness::{categorize, DefUse, LiveVariableMap};\n \n /// A map that cross references each local with the locations where it\n /// is defined (assigned), used, or dropped. Used during liveness"}, {"sha": "a5510ba6936cc31f724c3f282139414dfe97c4a3", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,11 +1,11 @@\n-use borrow_check::location::LocationTable;\n-use borrow_check::nll::region_infer::values::RegionValueElements;\n-use borrow_check::nll::constraints::ConstraintSet;\n-use borrow_check::nll::NllLivenessMap;\n-use borrow_check::nll::universal_regions::UniversalRegions;\n-use dataflow::move_paths::MoveData;\n-use dataflow::MaybeInitializedPlaces;\n-use dataflow::FlowAtLocation;\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n+use crate::borrow_check::nll::constraints::ConstraintSet;\n+use crate::borrow_check::nll::NllLivenessMap;\n+use crate::borrow_check::nll::universal_regions::UniversalRegions;\n+use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::MaybeInitializedPlaces;\n+use crate::dataflow::FlowAtLocation;\n use rustc::mir::Mir;\n use rustc::ty::RegionVid;\n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "d058be03f55e66d9820823c074d51eb646d4f848", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,12 +1,13 @@\n-use borrow_check::location::LocationTable;\n-use borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n-use borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n-use borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n-use borrow_check::nll::type_check::NormalizeLocation;\n-use borrow_check::nll::type_check::TypeChecker;\n-use dataflow::move_paths::indexes::MovePathIndex;\n-use dataflow::move_paths::MoveData;\n-use dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n+use crate::borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n+use crate::borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n+use crate::borrow_check::nll::type_check::NormalizeLocation;\n+use crate::borrow_check::nll::type_check::TypeChecker;\n+use crate::dataflow::move_paths::indexes::MovePathIndex;\n+use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n+use crate::util::liveness::LiveVariableMap;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, Mir};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n@@ -16,7 +17,6 @@ use rustc::ty::{Ty, TypeFoldable};\n use rustc_data_structures::bit_set::HybridBitSet;\n use rustc_data_structures::fx::FxHashMap;\n use std::rc::Rc;\n-use util::liveness::LiveVariableMap;\n \n /// This is the heart of the liveness computation. For each variable X\n /// that requires a liveness computation, it walks over all the uses"}, {"sha": "19ff47f9c390d73d1c16b838989080f297a124dd", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -2,24 +2,25 @@\n \n #![allow(unreachable_code)]\n \n-use borrow_check::borrow_set::BorrowSet;\n-use borrow_check::location::LocationTable;\n-use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n-use borrow_check::nll::facts::AllFacts;\n-use borrow_check::nll::region_infer::values::LivenessValues;\n-use borrow_check::nll::region_infer::values::PlaceholderIndex;\n-use borrow_check::nll::region_infer::values::PlaceholderIndices;\n-use borrow_check::nll::region_infer::values::RegionValueElements;\n-use borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n-use borrow_check::nll::renumber;\n-use borrow_check::nll::type_check::free_region_relations::{\n+use crate::borrow_check::borrow_set::BorrowSet;\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::facts::AllFacts;\n+use crate::borrow_check::nll::region_infer::values::LivenessValues;\n+use crate::borrow_check::nll::region_infer::values::PlaceholderIndex;\n+use crate::borrow_check::nll::region_infer::values::PlaceholderIndices;\n+use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n+use crate::borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n+use crate::borrow_check::nll::renumber;\n+use crate::borrow_check::nll::type_check::free_region_relations::{\n     CreateResult, UniversalRegionRelations,\n };\n-use borrow_check::nll::universal_regions::{DefiningTy, UniversalRegions};\n-use borrow_check::nll::ToRegionVid;\n-use dataflow::move_paths::MoveData;\n-use dataflow::FlowAtLocation;\n-use dataflow::MaybeInitializedPlaces;\n+use crate::borrow_check::nll::universal_regions::{DefiningTy, UniversalRegions};\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::FlowAtLocation;\n+use crate::dataflow::MaybeInitializedPlaces;\n+use crate::transform::{MirPass, MirSource};\n use either::Either;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -46,7 +47,6 @@ use rustc::ty::layout::VariantIdx;\n use std::rc::Rc;\n use std::{fmt, iter};\n use syntax_pos::{Span, DUMMY_SP};\n-use transform::{MirPass, MirSource};\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n@@ -210,7 +210,7 @@ fn type_check_internal<'a, 'gcx, 'tcx, R>(\n     extra(&mut checker)\n }\n \n-fn translate_outlives_facts(cx: &mut BorrowCheckContext) {\n+fn translate_outlives_facts(cx: &mut BorrowCheckContext<'_, '_>) {\n     if let Some(facts) = cx.all_facts {\n         let location_table = cx.location_table;\n         facts\n@@ -235,7 +235,7 @@ fn translate_outlives_facts(cx: &mut BorrowCheckContext) {\n     }\n }\n \n-fn mirbug(tcx: TyCtxt, span: Span, msg: &str) {\n+fn mirbug(tcx: TyCtxt<'_, '_, '_>, span: Span, msg: &str) {\n     // We sometimes see MIR failures (notably predicate failures) due to\n     // the fact that we check rvalue sized predicates here. So use `delay_span_bug`\n     // to avoid reporting bugs in those cases.\n@@ -266,7 +266,7 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext<'_>, location: Location) {\n         self.sanitize_place(place, location, context);\n     }\n \n@@ -447,7 +447,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         &mut self,\n         place: &Place<'tcx>,\n         location: Location,\n-        context: PlaceContext,\n+        context: PlaceContext<'_>,\n     ) -> PlaceTy<'tcx> {\n         debug!(\"sanitize_place: {:?}\", place);\n         let place_ty = match *place {"}, {"sha": "1748e3008902128960fa9b72acde767ec86d916b", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,5 +1,5 @@\n-use borrow_check::nll::constraints::OutlivesConstraint;\n-use borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n+use crate::borrow_check::nll::constraints::OutlivesConstraint;\n+use crate::borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n use rustc::infer::nll_relate::{TypeRelating, TypeRelatingDelegate, NormalizationStrategy};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::mir::ConstraintCategory;"}, {"sha": "1cea9f662d3517118e5f85b82055670f3b46f9af", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,8 +1,8 @@\n-use borrow_check::borrow_set::{BorrowSet, BorrowData, TwoPhaseActivation};\n-use borrow_check::places_conflict;\n-use borrow_check::Context;\n-use borrow_check::AccessDepth;\n-use dataflow::indexes::BorrowIndex;\n+use crate::borrow_check::borrow_set::{BorrowSet, BorrowData, TwoPhaseActivation};\n+use crate::borrow_check::places_conflict;\n+use crate::borrow_check::Context;\n+use crate::borrow_check::AccessDepth;\n+use crate::dataflow::indexes::BorrowIndex;\n use rustc::mir::{BasicBlock, Location, Mir, Place};\n use rustc::mir::{ProjectionElem, BorrowKind};\n use rustc::ty::TyCtxt;"}, {"sha": "bad236a6f5256ace28e16cbad9e4aa1c874ffb10", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -2,7 +2,7 @@ use rustc::hir;\n use rustc::mir::ProjectionElem;\n use rustc::mir::{Local, Mir, Place, Mutability};\n use rustc::ty::{self, TyCtxt};\n-use borrow_check::borrow_set::LocalsStateAtExit;\n+use crate::borrow_check::borrow_set::LocalsStateAtExit;\n \n /// Extension methods for the `Place` type.\n crate trait PlaceExt<'tcx> {"}, {"sha": "cd33f22bf3cb7d73e15130383c255885e6ca156a", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,6 +1,6 @@\n-use borrow_check::ArtificialField;\n-use borrow_check::Overlap;\n-use borrow_check::{Deep, Shallow, AccessDepth};\n+use crate::borrow_check::ArtificialField;\n+use crate::borrow_check::Overlap;\n+use crate::borrow_check::{Deep, Shallow, AccessDepth};\n use rustc::hir;\n use rustc::mir::{BorrowKind, Mir, Place};\n use rustc::mir::{Projection, ProjectionElem};"}, {"sha": "8c7359bdee768f0f9f3611430fa561c0f8cfd811", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -3,7 +3,7 @@ use rustc::mir::{BasicBlock, Local, Location, Place, Statement, StatementKind, T\n \n use rustc_data_structures::fx::FxHashSet;\n \n-use borrow_check::MirBorrowckCtxt;\n+use crate::borrow_check::MirBorrowckCtxt;\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// Walks the MIR adding to the set of `used_mut` locals that will be ignored for the purposes"}, {"sha": "7d93e131a6ca9678cc9794fee7043d76f996c300", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n-use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use build::ForGuard::OutsideGuard;\n-use build::matches::ArmHasGuard;\n-use hair::*;\n+use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n+use crate::build::ForGuard::OutsideGuard;\n+use crate::build::matches::ArmHasGuard;\n+use crate::hair::*;\n use rustc::mir::*;\n use rustc::hir;\n use syntax_pos::Span;"}, {"sha": "778d1e71cedfc3d8bd2414270ec06ec29bc63866", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,6 +1,6 @@\n //! Routines for manipulating the control-flow graph.\n \n-use build::CFG;\n+use crate::build::CFG;\n use rustc::mir::*;\n \n impl<'tcx> CFG<'tcx> {"}, {"sha": "614668170d5be73c2b8648b6478b7e4a0b160932", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n-use build::Builder;\n-use hair::*;\n+use crate::build::Builder;\n+use crate::hair::*;\n use rustc::mir::*;\n use rustc::ty::CanonicalUserTypeAnnotation;\n "}, {"sha": "38fae8539c8d71bef80656516b0ab1c6860b3cc1", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,8 +1,8 @@\n //! See docs in build/expr/mod.rs\n \n-use build::expr::category::Category;\n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use hair::*;\n+use crate::build::expr::category::Category;\n+use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n "}, {"sha": "ed444191226a1ddef18c7fb89a6457498d921d3d", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,9 +1,9 @@\n //! See docs in build/expr/mod.rs\n \n-use build::expr::category::Category;\n-use build::ForGuard::{OutsideGuard, RefWithinGuard};\n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use hair::*;\n+use crate::build::expr::category::Category;\n+use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n+use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::hair::*;\n use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::*;\n use rustc::ty::{CanonicalUserTypeAnnotation, Variance};"}, {"sha": "06658675f70f441469c248d2dc7374ddf44c3da3", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -3,9 +3,9 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use build::expr::category::{Category, RvalueFunc};\n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use hair::*;\n+use crate::build::expr::category::{Category, RvalueFunc};\n+use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::hair::*;\n use rustc::middle::region;\n use rustc::mir::interpret::EvalErrorKind;\n use rustc::mir::*;"}, {"sha": "efa1a4895e0c064dc8128579e06efe93c23ea485", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use hair::*;\n+use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n "}, {"sha": "ca7d435e62229aeb2b785d2692953558da8e6015", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,4 +1,4 @@\n-use hair::*;\n+use crate::hair::*;\n \n #[derive(Debug, PartialEq)]\n pub enum Category {"}, {"sha": "05231bc7b3f16003d6046578666a3e7f281dc2fe", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,8 +1,8 @@\n //! See docs in build/expr/mod.rs\n \n-use build::expr::category::{Category, RvalueFunc};\n-use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use hair::*;\n+use crate::build::expr::category::{Category, RvalueFunc};\n+use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n+use crate::hair::*;\n use rustc::mir::*;\n use rustc::ty;\n "}, {"sha": "aadc2368f5aec7adddbc1ef85efcbcd6434d51e8", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,6 +1,6 @@\n-use build::scope::BreakableScope;\n-use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use hair::*;\n+use crate::build::scope::BreakableScope;\n+use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n+use crate::hair::*;\n use rustc::mir::*;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {"}, {"sha": "67b6540febea84ded5651362590feb7c17ce77cc", "filename": "src/librustc_mir/build/into.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Finto.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -4,11 +4,11 @@\n //! wrapped up as expressions (e.g., blocks). To make this ergonomic, we use this\n //! latter `EvalInto` trait.\n \n-use build::{BlockAnd, Builder};\n-use hair::*;\n+use crate::build::{BlockAnd, Builder};\n+use crate::hair::*;\n use rustc::mir::*;\n \n-pub(in build) trait EvalInto<'tcx> {\n+pub(in crate::build) trait EvalInto<'tcx> {\n     fn eval_into<'a, 'gcx>(self,\n                            builder: &mut Builder<'a, 'gcx, 'tcx>,\n                            destination: &Place<'tcx>,"}, {"sha": "cf051ba2e0fa6ab9dafb12578348293b64f10673", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -3,11 +3,11 @@\n //! includes the high-level algorithm, the submodules contain the\n //! details.\n \n-use build::scope::{CachedBlock, DropKind};\n-use build::ForGuard::{self, OutsideGuard, RefWithinGuard, ValWithinGuard};\n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n-use hair::*;\n+use crate::build::scope::{CachedBlock, DropKind};\n+use crate::build::ForGuard::{self, OutsideGuard, RefWithinGuard, ValWithinGuard};\n+use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n+use crate::hair::*;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc::ty::layout::VariantIdx;"}, {"sha": "6be9ccb27036e28b7176fcdc48ca4718f05cd29c", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -12,9 +12,9 @@\n //! sort of test: for example, testing which variant an enum is, or\n //! testing a value against a constant.\n \n-use build::Builder;\n-use build::matches::{Ascription, Binding, MatchPair, Candidate};\n-use hair::*;\n+use crate::build::Builder;\n+use crate::build::matches::{Ascription, Binding, MatchPair, Candidate};\n+use crate::hair::*;\n use rustc::ty;\n use rustc::ty::layout::{Integer, IntegerExt, Size};\n use syntax::attr::{SignedInt, UnsignedInt};"}, {"sha": "395858c07b606b8106f2524bf4315a96ca071c52", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -5,10 +5,10 @@\n // identify what tests are needed, perform the tests, and then filter\n // the candidates based on the result.\n \n-use build::Builder;\n-use build::matches::{Candidate, MatchPair, Test, TestKind};\n-use hair::*;\n-use hair::pattern::compare_const_vals;\n+use crate::build::Builder;\n+use crate::build::matches::{Candidate, MatchPair, Test, TestKind};\n+use crate::hair::*;\n+use crate::hair::pattern::compare_const_vals;\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::FxHashMap;\n use rustc::ty::{self, Ty};"}, {"sha": "ed12c1b3bc9c1de1461b3c657a97eef8eebfc24d", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,6 +1,6 @@\n-use build::Builder;\n-use build::matches::MatchPair;\n-use hair::*;\n+use crate::build::Builder;\n+use crate::build::matches::MatchPair;\n+use crate::hair::*;\n use rustc::mir::*;\n use std::u32;\n use std::convert::TryInto;"}, {"sha": "1634c36d34acf733e8f4fbe86ff93cf6c1a5936a", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n //! Miscellaneous builder routines that are not specific to building any particular\n //! kind of thing.\n \n-use build::Builder;\n+use crate::build::Builder;\n \n use rustc::ty::{self, Ty};\n "}, {"sha": "a52b032aeb508c5e8a825cd8208f6029da94bfeb", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,10 @@\n-use build;\n-use build::scope::{CachedBlock, DropKind};\n-use hair::cx::Cx;\n-use hair::{LintLevel, BindingMode, PatternKind};\n+use crate::build;\n+use crate::build::scope::{CachedBlock, DropKind};\n+use crate::hair::cx::Cx;\n+use crate::hair::{LintLevel, BindingMode, PatternKind};\n+use crate::shim;\n+use crate::transform::MirSource;\n+use crate::util as mir_util;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n@@ -13,16 +16,13 @@ use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n-use shim;\n use std::mem;\n use std::u32;\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr::{self, UnwindAttr};\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n-use transform::MirSource;\n-use util as mir_util;\n \n use super::lints;\n \n@@ -161,7 +161,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n         };\n         globalizer.visit_mir(&mut mir);\n         let mir = unsafe {\n-            mem::transmute::<Mir, Mir<'tcx>>(mir)\n+            mem::transmute::<Mir<'_>, Mir<'tcx>>(mir)\n         };\n \n         mir_util::dump_mir(tcx, None, \"mir_map\", &0,\n@@ -241,7 +241,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             };\n             globalizer.visit_mir(&mut mir);\n             let mir = unsafe {\n-                mem::transmute::<Mir, Mir<'tcx>>(mir)\n+                mem::transmute::<Mir<'_>, Mir<'tcx>>(mir)\n             };\n \n             mir_util::dump_mir(tcx, None, \"mir_map\", &0,"}, {"sha": "3872f5db26278d79b53c0d8421692927e583fc70", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -77,8 +77,8 @@ should go to.\n \n */\n \n-use build::{BlockAnd, BlockAndExtension, Builder, CFG};\n-use hair::LintLevel;\n+use crate::build::{BlockAnd, BlockAndExtension, Builder, CFG};\n+use crate::hair::LintLevel;\n use rustc::middle::region;\n use rustc::ty::Ty;\n use rustc::hir;"}, {"sha": "d1b4486dd9345d76d7e4d533685a9cd17e2ed7c4", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -190,7 +190,7 @@ enum ConstEvalError {\n }\n \n impl fmt::Display for ConstEvalError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::ConstEvalError::*;\n         match *self {\n             NeedsRfc(ref msg) => {"}, {"sha": "d0b9fbc99f03f754d24776721cc4533dabccf57e", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -4,8 +4,8 @@\n use rustc::mir::{BasicBlock, Location};\n use rustc_data_structures::bit_set::{BitIter, BitSet, HybridBitSet};\n \n-use dataflow::{BitDenotation, BlockSets, DataflowResults};\n-use dataflow::move_paths::{HasMoveData, MovePathIndex};\n+use crate::dataflow::{BitDenotation, BlockSets, DataflowResults};\n+use crate::dataflow::move_paths::{HasMoveData, MovePathIndex};\n \n use std::iter;\n \n@@ -115,7 +115,7 @@ where\n     }\n \n     /// Returns an iterator over the elements present in the current state.\n-    pub fn iter_incoming(&self) -> iter::Peekable<BitIter<BD::Idx>> {\n+    pub fn iter_incoming(&self) -> iter::Peekable<BitIter<'_, BD::Idx>> {\n         self.curr_state.iter().peekable()\n     }\n \n@@ -124,7 +124,7 @@ where\n     /// Invokes `f` with an iterator over the resulting state.\n     pub fn with_iter_outgoing<F>(&self, f: F)\n     where\n-        F: FnOnce(BitIter<BD::Idx>),\n+        F: FnOnce(BitIter<'_, BD::Idx>),\n     {\n         let mut curr_state = self.curr_state.clone();\n         curr_state.union(&self.stmt_gen);"}, {"sha": "49499cf928d743a96b7bdd2e71b1d78b1c0675ca", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,6 +1,6 @@\n use rustc::mir::{self, Mir, Location};\n use rustc::ty::{self, TyCtxt};\n-use util::elaborate_drops::DropFlagState;\n+use crate::util::elaborate_drops::DropFlagState;\n \n use super::{MoveDataParamEnv};\n use super::indexes::MovePathIndex;"}, {"sha": "9d9f18d4b0dcf926ae47784872f4d1fdf25d0603", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -3,8 +3,6 @@\n use syntax::ast::NodeId;\n use rustc::mir::{BasicBlock, Mir};\n \n-use dot;\n-\n use std::fs;\n use std::io;\n use std::marker::PhantomData;\n@@ -59,7 +57,7 @@ pub type Node = BasicBlock;\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct Edge { source: BasicBlock, index: usize }\n \n-fn outgoing(mir: &Mir, bb: BasicBlock) -> Vec<Edge> {\n+fn outgoing(mir: &Mir<'_>, bb: BasicBlock) -> Vec<Edge> {\n     (0..mir[bb].terminator().successors().count())\n         .map(|index| Edge { source: bb, index: index}).collect()\n }\n@@ -70,18 +68,18 @@ impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n {\n     type Node = Node;\n     type Edge = Edge;\n-    fn graph_id(&self) -> dot::Id {\n+    fn graph_id(&self) -> dot::Id<'_> {\n         dot::Id::new(format!(\"graph_for_node_{}\",\n                              self.mbcx.node_id()))\n             .unwrap()\n     }\n \n-    fn node_id(&self, n: &Node) -> dot::Id {\n+    fn node_id(&self, n: &Node) -> dot::Id<'_> {\n         dot::Id::new(format!(\"bb_{}\", n.index()))\n             .unwrap()\n     }\n \n-    fn node_label(&self, n: &Node) -> dot::LabelText {\n+    fn node_label(&self, n: &Node) -> dot::LabelText<'_> {\n         // Node label is something like this:\n         // +---------+----------------------------------+------------------+------------------+\n         // | ENTRY   | MIR                              | GEN              | KILL             |\n@@ -105,7 +103,7 @@ impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n     }\n \n \n-    fn node_shape(&self, _n: &Node) -> Option<dot::LabelText> {\n+    fn node_shape(&self, _n: &Node) -> Option<dot::LabelText<'_>> {\n         Some(dot::LabelText::label(\"none\"))\n     }\n \n@@ -125,7 +123,7 @@ where MWF: MirWithFlowState<'tcx>,\n                                          n: &Node,\n                                          w: &mut W,\n                                          block: BasicBlock,\n-                                         mir: &Mir) -> io::Result<()> {\n+                                         mir: &Mir<'_>) -> io::Result<()> {\n         // Header rows\n         const HDRS: [&str; 4] = [\"ENTRY\", \"MIR\", \"BLOCK GENS\", \"BLOCK KILLS\"];\n         const HDR_FMT: &str = \"bgcolor=\\\"grey\\\"\";\n@@ -150,7 +148,7 @@ where MWF: MirWithFlowState<'tcx>,\n                                             n: &Node,\n                                             w: &mut W,\n                                             block: BasicBlock,\n-                                            mir: &Mir)\n+                                            mir: &Mir<'_>)\n                                             -> io::Result<()> {\n         let i = n.index();\n \n@@ -200,7 +198,7 @@ where MWF: MirWithFlowState<'tcx>,\n                                           n: &Node,\n                                           w: &mut W,\n                                           block: BasicBlock,\n-                                          mir: &Mir)\n+                                          mir: &Mir<'_>)\n                                           -> io::Result<()> {\n         let i = n.index();\n \n@@ -241,15 +239,15 @@ impl<'a, 'tcx, MWF, P> dot::GraphWalk<'a> for Graph<'a, 'tcx, MWF, P>\n {\n     type Node = Node;\n     type Edge = Edge;\n-    fn nodes(&self) -> dot::Nodes<Node> {\n+    fn nodes(&self) -> dot::Nodes<'_, Node> {\n         self.mbcx.mir()\n             .basic_blocks()\n             .indices()\n             .collect::<Vec<_>>()\n             .into()\n     }\n \n-    fn edges(&self) -> dot::Edges<Edge> {\n+    fn edges(&self) -> dot::Edges<'_, Edge> {\n         let mir = self.mbcx.mir();\n \n         mir.basic_blocks()"}, {"sha": "51d628ce6c5c28b5ee59b92d9b7849e3c15052e4", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -2,7 +2,7 @@ pub use super::*;\n \n use rustc::mir::*;\n use rustc::mir::visit::Visitor;\n-use dataflow::BitDenotation;\n+use crate::dataflow::BitDenotation;\n \n /// This calculates if any part of a MIR local could have previously been borrowed.\n /// This means that once a local has been borrowed, its bit will be set\n@@ -38,7 +38,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for HaveBeenBorrowedLocals<'a, 'tcx> {\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<Local>,\n+                        sets: &mut BlockSets<'_, Local>,\n                         loc: Location) {\n         let stmt = &self.mir[loc.block].statements[loc.statement_index];\n \n@@ -54,7 +54,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for HaveBeenBorrowedLocals<'a, 'tcx> {\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<Local>,\n+                         sets: &mut BlockSets<'_, Local>,\n                          loc: Location) {\n         BorrowedLocalsVisitor {\n             sets,"}, {"sha": "beb0b3187082b410f1f0b71bbf4dacf19f27b916", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,5 +1,5 @@\n-use borrow_check::borrow_set::{BorrowSet, BorrowData};\n-use borrow_check::place_ext::PlaceExt;\n+use crate::borrow_check::borrow_set::{BorrowSet, BorrowData};\n+use crate::borrow_check::place_ext::PlaceExt;\n \n use rustc::mir::{self, Location, Place, Mir};\n use rustc::ty::TyCtxt;\n@@ -9,11 +9,11 @@ use rustc_data_structures::bit_set::{BitSet, BitSetOperator};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n-use dataflow::{BitDenotation, BlockSets, InitialFlow};\n-pub use dataflow::indexes::BorrowIndex;\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::ToRegionVid;\n-use borrow_check::places_conflict;\n+use crate::dataflow::{BitDenotation, BlockSets, InitialFlow};\n+pub use crate::dataflow::indexes::BorrowIndex;\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::places_conflict;\n \n use std::rc::Rc;\n \n@@ -163,7 +163,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     /// Add all borrows to the kill set, if those borrows are out of scope at `location`.\n     /// That means they went out of a nonlexical scope\n     fn kill_loans_out_of_scope_at_location(&self,\n-                                           sets: &mut BlockSets<BorrowIndex>,\n+                                           sets: &mut BlockSets<'_, BorrowIndex>,\n                                            location: Location) {\n         // NOTE: The state associated with a given `location`\n         // reflects the dataflow on entry to the statement.\n@@ -184,7 +184,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     /// Kill any borrows that conflict with `place`.\n     fn kill_borrows_on_place(\n         &self,\n-        sets: &mut BlockSets<BorrowIndex>,\n+        sets: &mut BlockSets<'_, BorrowIndex>,\n         place: &Place<'tcx>\n     ) {\n         debug!(\"kill_borrows_on_place: place={:?}\", place);\n@@ -243,13 +243,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'gcx, 'tcx> {\n     }\n \n     fn before_statement_effect(&self,\n-                               sets: &mut BlockSets<BorrowIndex>,\n+                               sets: &mut BlockSets<'_, BorrowIndex>,\n                                location: Location) {\n         debug!(\"Borrows::before_statement_effect sets: {:?} location: {:?}\", sets, location);\n         self.kill_loans_out_of_scope_at_location(sets, location);\n     }\n \n-    fn statement_effect(&self, sets: &mut BlockSets<BorrowIndex>, location: Location) {\n+    fn statement_effect(&self, sets: &mut BlockSets<'_, BorrowIndex>, location: Location) {\n         debug!(\"Borrows::statement_effect: sets={:?} location={:?}\", sets, location);\n \n         let block = &self.mir.basic_blocks().get(location.block).unwrap_or_else(|| {\n@@ -307,13 +307,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'gcx, 'tcx> {\n     }\n \n     fn before_terminator_effect(&self,\n-                                sets: &mut BlockSets<BorrowIndex>,\n+                                sets: &mut BlockSets<'_, BorrowIndex>,\n                                 location: Location) {\n         debug!(\"Borrows::before_terminator_effect sets: {:?} location: {:?}\", sets, location);\n         self.kill_loans_out_of_scope_at_location(sets, location);\n     }\n \n-    fn terminator_effect(&self, _: &mut BlockSets<BorrowIndex>, _: Location) {}\n+    fn terminator_effect(&self, _: &mut BlockSets<'_, BorrowIndex>, _: Location) {}\n \n     fn propagate_call_return(\n         &self,"}, {"sha": "c8965b9f7f4c79d94fad08b09b1b581a74713530", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::indexed_vec::Idx;\n \n use super::MoveDataParamEnv;\n \n-use util::elaborate_drops::DropFlagState;\n+use crate::util::elaborate_drops::DropFlagState;\n \n use super::move_paths::{HasMoveData, MoveData, MovePathIndex, InitIndex};\n use super::move_paths::{LookupResult, InitKind};\n@@ -251,7 +251,7 @@ impl<'a, 'gcx, 'tcx> HasMoveData<'tcx> for EverInitializedPlaces<'a, 'gcx, 'tcx>\n \n \n impl<'a, 'gcx, 'tcx> MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n-    fn update_bits(sets: &mut BlockSets<MovePathIndex>, path: MovePathIndex,\n+    fn update_bits(sets: &mut BlockSets<'_, MovePathIndex>, path: MovePathIndex,\n                    state: DropFlagState)\n     {\n         match state {\n@@ -262,7 +262,7 @@ impl<'a, 'gcx, 'tcx> MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n-    fn update_bits(sets: &mut BlockSets<MovePathIndex>, path: MovePathIndex,\n+    fn update_bits(sets: &mut BlockSets<'_, MovePathIndex>, path: MovePathIndex,\n                    state: DropFlagState)\n     {\n         match state {\n@@ -273,7 +273,7 @@ impl<'a, 'gcx, 'tcx> MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n-    fn update_bits(sets: &mut BlockSets<MovePathIndex>, path: MovePathIndex,\n+    fn update_bits(sets: &mut BlockSets<'_, MovePathIndex>, path: MovePathIndex,\n                    state: DropFlagState)\n     {\n         match state {\n@@ -300,7 +300,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for MaybeInitializedPlaces<'a, 'gcx, 't\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<MovePathIndex>,\n+                        sets: &mut BlockSets<'_, MovePathIndex>,\n                         location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -311,7 +311,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for MaybeInitializedPlaces<'a, 'gcx, 't\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<MovePathIndex>,\n+                         sets: &mut BlockSets<'_, MovePathIndex>,\n                          location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -358,7 +358,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for MaybeUninitializedPlaces<'a, 'gcx,\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<MovePathIndex>,\n+                        sets: &mut BlockSets<'_, MovePathIndex>,\n                         location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -369,7 +369,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for MaybeUninitializedPlaces<'a, 'gcx,\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<MovePathIndex>,\n+                         sets: &mut BlockSets<'_, MovePathIndex>,\n                          location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -414,7 +414,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for DefinitelyInitializedPlaces<'a, 'gc\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<MovePathIndex>,\n+                        sets: &mut BlockSets<'_, MovePathIndex>,\n                         location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -425,7 +425,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for DefinitelyInitializedPlaces<'a, 'gc\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<MovePathIndex>,\n+                         sets: &mut BlockSets<'_, MovePathIndex>,\n                          location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -464,7 +464,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for EverInitializedPlaces<'a, 'gcx, 'tc\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<InitIndex>,\n+                        sets: &mut BlockSets<'_, InitIndex>,\n                         location: Location) {\n         let (_, mir, move_data) = (self.tcx, self.mir, self.move_data());\n         let stmt = &mir[location.block].statements[location.statement_index];\n@@ -511,7 +511,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for EverInitializedPlaces<'a, 'gcx, 'tc\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<InitIndex>,\n+                         sets: &mut BlockSets<'_, InitIndex>,\n                          location: Location)\n     {\n         let (mir, move_data) = (self.mir, self.move_data());"}, {"sha": "6b8eb6f17f6c13aa03fbcd28a000ceb38e4f91b1", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n pub use super::*;\n \n use rustc::mir::*;\n-use dataflow::BitDenotation;\n+use crate::dataflow::BitDenotation;\n \n #[derive(Copy, Clone)]\n pub struct MaybeStorageLive<'a, 'tcx: 'a> {\n@@ -31,7 +31,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<Local>,\n+                        sets: &mut BlockSets<'_, Local>,\n                         loc: Location) {\n         let stmt = &self.mir[loc.block].statements[loc.statement_index];\n \n@@ -43,7 +43,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n     }\n \n     fn terminator_effect(&self,\n-                         _sets: &mut BlockSets<Local>,\n+                         _sets: &mut BlockSets<'_, Local>,\n                          _loc: Location) {\n         // Terminators have no effect\n     }"}, {"sha": "1853b60efd7e693f4dc8b03fe6bd070b7ad2a4f7", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -58,7 +58,7 @@ impl DebugFormatted {\n }\n \n impl fmt::Debug for DebugFormatted {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(w, \"{}\", self.0)\n     }\n }\n@@ -525,7 +525,7 @@ impl<'a, E:Idx> BlockSets<'a, E> {\n \n impl<E:Idx> AllSets<E> {\n     pub fn bits_per_block(&self) -> usize { self.bits_per_block }\n-    pub fn for_block(&mut self, block_idx: usize) -> BlockSets<E> {\n+    pub fn for_block(&mut self, block_idx: usize) -> BlockSets<'_, E> {\n         BlockSets {\n             on_entry: &mut self.on_entry_sets[block_idx],\n             gen_set: &mut self.gen_sets[block_idx],\n@@ -616,7 +616,7 @@ pub trait BitDenotation<'tcx>: BitSetOperator {\n     /// applied, in that order, before moving for the next\n     /// statement.\n     fn before_statement_effect(&self,\n-                               _sets: &mut BlockSets<Self::Idx>,\n+                               _sets: &mut BlockSets<'_, Self::Idx>,\n                                _location: Location) {}\n \n     /// Mutates the block-sets (the flow sets for the given\n@@ -630,7 +630,7 @@ pub trait BitDenotation<'tcx>: BitSetOperator {\n     /// `bb_data` is the sequence of statements identified by `bb` in\n     /// the MIR.\n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<Self::Idx>,\n+                        sets: &mut BlockSets<'_, Self::Idx>,\n                         location: Location);\n \n     /// Similar to `terminator_effect`, except it applies\n@@ -645,7 +645,7 @@ pub trait BitDenotation<'tcx>: BitSetOperator {\n     /// applied, in that order, before moving for the next\n     /// terminator.\n     fn before_terminator_effect(&self,\n-                                _sets: &mut BlockSets<Self::Idx>,\n+                                _sets: &mut BlockSets<'_, Self::Idx>,\n                                 _location: Location) {}\n \n     /// Mutates the block-sets (the flow sets for the given\n@@ -659,7 +659,7 @@ pub trait BitDenotation<'tcx>: BitSetOperator {\n     /// The effects applied here cannot depend on which branch the\n     /// terminator took.\n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<Self::Idx>,\n+                         sets: &mut BlockSets<'_, Self::Idx>,\n                          location: Location);\n \n     /// Mutates the block-sets according to the (flow-dependent)"}, {"sha": "efd979a7da4fb469b174c41acce5afd3e0bb4ef7", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -37,7 +37,7 @@ pub(crate) mod indexes {\n             }\n \n             impl fmt::Debug for $Index {\n-                fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     write!(fmt, \"{}{}\", $debug_name, self.index())\n                 }\n             }\n@@ -62,7 +62,7 @@ pub use self::indexes::MoveOutIndex;\n pub use self::indexes::InitIndex;\n \n impl MoveOutIndex {\n-    pub fn move_path_index(&self, move_data: &MoveData) -> MovePathIndex {\n+    pub fn move_path_index(&self, move_data: &MoveData<'_>) -> MovePathIndex {\n         move_data.moves[*self].path\n     }\n }\n@@ -88,7 +88,10 @@ pub struct MovePath<'tcx> {\n }\n \n impl<'tcx> MovePath<'tcx> {\n-    pub fn parents(&self, move_paths: &IndexVec<MovePathIndex, MovePath>) -> Vec<MovePathIndex> {\n+    pub fn parents(\n+        &self,\n+        move_paths: &IndexVec<MovePathIndex, MovePath<'_>>,\n+    ) -> Vec<MovePathIndex> {\n         let mut parents = Vec::new();\n \n         let mut curr_parent = self.parent;\n@@ -102,7 +105,7 @@ impl<'tcx> MovePath<'tcx> {\n }\n \n impl<'tcx> fmt::Debug for MovePath<'tcx> {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(w, \"MovePath {{\")?;\n         if let Some(parent) = self.parent {\n             write!(w, \" parent: {:?},\", parent)?;\n@@ -118,7 +121,7 @@ impl<'tcx> fmt::Debug for MovePath<'tcx> {\n }\n \n impl<'tcx> fmt::Display for MovePath<'tcx> {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(w, \"{:?}\", self.place)\n     }\n }\n@@ -166,7 +169,7 @@ impl<T> IndexMut<Location> for LocationMap<T> {\n }\n \n impl<T> LocationMap<T> where T: Default + Clone {\n-    fn new(mir: &Mir) -> Self {\n+    fn new(mir: &Mir<'_>) -> Self {\n         LocationMap {\n             map: mir.basic_blocks().iter().map(|block| {\n                 vec![T::default(); block.statements.len()+1]\n@@ -190,7 +193,7 @@ pub struct MoveOut {\n }\n \n impl fmt::Debug for MoveOut {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"{:?}@{:?}\", self.path, self.source)\n     }\n }\n@@ -227,7 +230,7 @@ pub enum InitKind {\n }\n \n impl fmt::Debug for Init {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"{:?}@{:?} ({:?})\", self.path, self.location, self.kind)\n     }\n }"}, {"sha": "c24cf956504daec0e2d139c2aeebbd1238d49dfb", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,6 +1,6 @@\n-use hair::*;\n-use hair::cx::Cx;\n-use hair::cx::to_ref::ToRef;\n+use crate::hair::*;\n+use crate::hair::cx::Cx;\n+use crate::hair::cx::to_ref::ToRef;\n use rustc::middle::region;\n use rustc::hir;\n use rustc::ty;"}, {"sha": "0759b95a78ff4b8a3940fce61372160145b7594e", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,9 +1,9 @@\n-use hair::*;\n+use crate::hair::*;\n+use crate::hair::cx::Cx;\n+use crate::hair::cx::block;\n+use crate::hair::cx::to_ref::ToRef;\n+use crate::hair::util::UserAnnotatedTyHelpers;\n use rustc_data_structures::indexed_vec::Idx;\n-use hair::cx::Cx;\n-use hair::cx::block;\n-use hair::cx::to_ref::ToRef;\n-use hair::util::UserAnnotatedTyHelpers;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::mir::interpret::{GlobalId, ErrorHandled};\n use rustc::ty::{self, AdtKind, Ty};"}, {"sha": "6d61801fc7162f1c6b1cd75923454bf7b8dc6040", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -4,8 +4,8 @@\n //! work.\n //!\n \n-use hair::*;\n-use hair::util::UserAnnotatedTyHelpers;\n+use crate::hair::*;\n+use crate::hair::util::UserAnnotatedTyHelpers;\n \n use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n@@ -21,7 +21,7 @@ use syntax::attr;\n use syntax::symbol::Symbol;\n use rustc::hir;\n use rustc_data_structures::sync::Lrc;\n-use hair::constant::{lit_to_const, LitToConstError};\n+use crate::hair::constant::{lit_to_const, LitToConstError};\n \n #[derive(Clone)]\n pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n@@ -239,7 +239,7 @@ impl UserAnnotatedTyHelpers<'gcx, 'tcx> for Cx<'_, 'gcx, 'tcx> {\n     }\n }\n \n-fn lint_level_for_hir_id(tcx: TyCtxt, mut id: ast::NodeId) -> ast::NodeId {\n+fn lint_level_for_hir_id(tcx: TyCtxt<'_, '_, '_>, mut id: ast::NodeId) -> ast::NodeId {\n     // Right now we insert a `with_ignore` node in the dep graph here to\n     // ignore the fact that `lint_levels` below depends on the entire crate.\n     // For now this'll prevent false positives of recompiling too much when"}, {"sha": "a462c61c2acba1184bf8aa3c7270adf2e6b0c5a1", "filename": "src/librustc_mir/hair/cx/to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,4 +1,4 @@\n-use hair::*;\n+use crate::hair::*;\n \n use rustc::hir;\n use syntax::ptr::P;"}, {"sha": "5779a032acc4d2d3308c87ff4c3f5ce9eec03eb5", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -307,7 +307,7 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n /// + _     + [_, _, ..tail] +\n /// ++++++++++++++++++++++++++\n impl<'p, 'tcx> fmt::Debug for Matrix<'p, 'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"\\n\")?;\n \n         let &Matrix(ref m) = self;\n@@ -442,7 +442,7 @@ impl<'tcx> Constructor<'tcx> {\n                 VariantIdx::new(0)\n             }\n             &ConstantValue(c) => {\n-                ::const_eval::const_variant_index(\n+                crate::const_eval::const_variant_index(\n                     cx.tcx,\n                     cx.param_env,\n                     c,\n@@ -1115,7 +1115,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     } else {\n         debug!(\"is_useful - expanding wildcard\");\n \n-        let used_ctors: Vec<Constructor> = rows.iter().flat_map(|row| {\n+        let used_ctors: Vec<Constructor<'_>> = rows.iter().flat_map(|row| {\n             pat_constructors(cx, row[0], pcx).unwrap_or(vec![])\n         }).collect();\n         debug!(\"used_ctors = {:#?}\", used_ctors);\n@@ -1302,7 +1302,7 @@ fn is_useful_specialized<'p, 'a: 'p, 'tcx: 'a>(\n /// Returns None in case of a catch-all, which can't be specialized.\n fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n                           pat: &Pattern<'tcx>,\n-                          pcx: PatternContext)\n+                          pcx: PatternContext<'_>)\n                           -> Option<Vec<Constructor<'tcx>>>\n {\n     match *pat.kind {"}, {"sha": "978051aab591b9cc0cf2e6d74cf264a4efce71f0", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -229,7 +229,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 return;\n             }\n \n-            let matrix: Matrix = inlined_arms\n+            let matrix: Matrix<'_, '_> = inlined_arms\n                 .iter()\n                 .filter(|&&(_, guard)| guard.is_none())\n                 .flat_map(|arm| &arm.0)\n@@ -248,7 +248,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                                                 self.tables);\n             let pattern = patcx.lower_pattern(pat);\n             let pattern_ty = pattern.ty;\n-            let pats: Matrix = vec![smallvec![\n+            let pats: Matrix<'_, '_> = vec![smallvec![\n                 expand_pattern(cx, pattern)\n             ]].into_iter().collect();\n \n@@ -283,7 +283,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n     }\n }\n \n-fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor, pat: &Pat) {\n+fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n     pat.walk(|p| {\n         if let PatKind::Binding(_, _, _, ident, None) = p.node {\n             if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n@@ -462,7 +462,7 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n }\n \n // Legality of move bindings checking\n-fn check_legality_of_move_bindings(cx: &MatchVisitor,\n+fn check_legality_of_move_bindings(cx: &MatchVisitor<'_, '_>,\n                                    has_guard: bool,\n                                    pats: &[P<Pat>]) {\n     let mut by_ref_span = None;\n@@ -541,7 +541,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n /// assign.\n ///\n /// FIXME: this should be done by borrowck.\n-fn check_for_mutation_in_guard(cx: &MatchVisitor, guard: &hir::Guard) {\n+fn check_for_mutation_in_guard(cx: &MatchVisitor<'_, '_>, guard: &hir::Guard) {\n     let mut checker = MutationChecker {\n         cx,\n     };\n@@ -561,13 +561,13 @@ struct MutationChecker<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n-    fn matched_pat(&mut self, _: &Pat, _: &cmt_, _: euv::MatchMode) {}\n-    fn consume(&mut self, _: ast::NodeId, _: Span, _: &cmt_, _: ConsumeMode) {}\n-    fn consume_pat(&mut self, _: &Pat, _: &cmt_, _: ConsumeMode) {}\n+    fn matched_pat(&mut self, _: &Pat, _: &cmt_<'_>, _: euv::MatchMode) {}\n+    fn consume(&mut self, _: ast::NodeId, _: Span, _: &cmt_<'_>, _: ConsumeMode) {}\n+    fn consume_pat(&mut self, _: &Pat, _: &cmt_<'_>, _: ConsumeMode) {}\n     fn borrow(&mut self,\n               _: ast::NodeId,\n               span: Span,\n-              _: &cmt_,\n+              _: &cmt_<'_>,\n               _: ty::Region<'tcx>,\n               kind:ty:: BorrowKind,\n               _: LoanCause) {\n@@ -588,7 +588,7 @@ impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n         }\n     }\n     fn decl_without_init(&mut self, _: ast::NodeId, _: Span) {}\n-    fn mutate(&mut self, _: ast::NodeId, span: Span, _: &cmt_, mode: MutateMode) {\n+    fn mutate(&mut self, _: ast::NodeId, span: Span, _: &cmt_<'_>, mode: MutateMode) {\n         match mode {\n             MutateMode::JustWrite | MutateMode::WriteAndRead => {\n                 struct_span_err!(self.cx.tcx.sess, span, E0302, \"cannot assign in a pattern guard\")\n@@ -603,7 +603,7 @@ impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n /// Forbids bindings in `@` patterns. This is necessary for memory safety,\n /// because of the way rvalues are handled in the borrow check. (See issue\n /// #14587.)\n-fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor, pat: &Pat) {\n+fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n     AtBindingPatternVisitor { cx: cx, bindings_allowed: true }.visit_pat(pat);\n }\n "}, {"sha": "84d8f32954c81ba080454273adbb846ee47a7d23", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -6,10 +6,10 @@ mod check_match;\n pub use self::check_match::check_crate;\n pub(crate) use self::check_match::check_match;\n \n-use const_eval::{const_field, const_variant_index};\n+use crate::const_eval::{const_field, const_variant_index};\n \n-use hair::util::UserAnnotatedTyHelpers;\n-use hair::constant::*;\n+use crate::hair::util::UserAnnotatedTyHelpers;\n+use crate::hair::constant::*;\n \n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::{UserTypeProjection};\n@@ -187,7 +187,7 @@ pub struct PatternRange<'tcx> {\n }\n \n impl<'tcx> fmt::Display for Pattern<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self.kind {\n             PatternKind::Wild => write!(f, \"_\"),\n             PatternKind::AscribeUserType { ref subpattern, .. } =>"}, {"sha": "c87338fb0ce947262b7638c88a1275b2fca746ad", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -322,7 +322,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     ) -> EvalResult<'tcx, TyLayout<'tcx>> {\n         match frame.locals[local].layout.get() {\n             None => {\n-                let layout = ::interpret::operand::from_known_layout(layout, || {\n+                let layout = crate::interpret::operand::from_known_layout(layout, || {\n                     let local_ty = frame.mir.local_decls[local].ty;\n                     let local_ty = self.monomorphize_with_substs(local_ty, frame.instance.substs);\n                     self.layout_of(local_ty)"}, {"sha": "ee295116ba9625f3169e92b9cca8c2d7e8953029", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -25,7 +25,7 @@ use syntax::source_map::Span;\n \n use super::eval_context::{LocalState, StackPopCleanup};\n use super::{Frame, Memory, Operand, MemPlace, Place, Immediate, ScalarMaybeUndef, LocalValue};\n-use const_eval::CompileTimeInterpreter;\n+use crate::const_eval::CompileTimeInterpreter;\n \n #[derive(Default)]\n pub(crate) struct InfiniteLoopDetector<'a, 'mir, 'tcx: 'a + 'mir> {\n@@ -200,7 +200,7 @@ impl_snapshot_for!(enum ScalarMaybeUndef {\n     Undef,\n });\n \n-impl_stable_hash_for!(struct ::interpret::MemPlace {\n+impl_stable_hash_for!(struct crate::interpret::MemPlace {\n     ptr,\n     align,\n     meta,\n@@ -211,7 +211,7 @@ impl_snapshot_for!(struct MemPlace {\n     align -> *align, // just copy alignment verbatim\n });\n \n-impl_stable_hash_for!(enum ::interpret::Place {\n+impl_stable_hash_for!(enum crate::interpret::Place {\n     Ptr(mem_place),\n     Local { frame, local },\n });\n@@ -232,7 +232,7 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for Place\n     }\n }\n \n-impl_stable_hash_for!(enum ::interpret::Immediate {\n+impl_stable_hash_for!(enum crate::interpret::Immediate {\n     Scalar(x),\n     ScalarPair(x, y),\n });\n@@ -241,7 +241,7 @@ impl_snapshot_for!(enum Immediate {\n     ScalarPair(s, t),\n });\n \n-impl_stable_hash_for!(enum ::interpret::Operand {\n+impl_stable_hash_for!(enum crate::interpret::Operand {\n     Immediate(x),\n     Indirect(x),\n });\n@@ -250,7 +250,7 @@ impl_snapshot_for!(enum Operand {\n     Indirect(m),\n });\n \n-impl_stable_hash_for!(enum ::interpret::LocalValue {\n+impl_stable_hash_for!(enum crate::interpret::LocalValue {\n     Dead,\n     Live(x),\n });\n@@ -298,7 +298,7 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for &'a Allocation\n     }\n }\n \n-impl_stable_hash_for!(enum ::interpret::eval_context::StackPopCleanup {\n+impl_stable_hash_for!(enum crate::interpret::eval_context::StackPopCleanup {\n     Goto(block),\n     None { cleanup },\n });"}, {"sha": "be50daa17092f1698eb180cb5814a98334878b1c", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 let ty = place.layout.ty;\n                 trace!(\"TerminatorKind::drop: {:?}, type {}\", location, ty);\n \n-                let instance = ::monomorphize::resolve_drop_in_place(*self.tcx, ty);\n+                let instance = crate::monomorphize::resolve_drop_in_place(*self.tcx, ty);\n                 self.drop_in_place(\n                     place,\n                     instance,\n@@ -326,7 +326,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     // last incoming argument.  These two iterators do not have the same type,\n                     // so to keep the code paths uniform we accept an allocation\n                     // (for RustCall ABI only).\n-                    let caller_args : Cow<[OpTy<'tcx, M::PointerTag>]> =\n+                    let caller_args : Cow<'_, [OpTy<'tcx, M::PointerTag>]> =\n                         if caller_abi == Abi::RustCall && !args.is_empty() {\n                             // Untuple\n                             let (&untuple_arg, args) = args.split_last().unwrap();\n@@ -335,7 +335,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                                 .chain((0..untuple_arg.layout.fields.count()).into_iter()\n                                     .map(|i| self.operand_field(untuple_arg, i as u64))\n                                 )\n-                                .collect::<EvalResult<Vec<OpTy<'tcx, M::PointerTag>>>>()?)\n+                                .collect::<EvalResult<'_, Vec<OpTy<'tcx, M::PointerTag>>>>()?)\n                         } else {\n                             // Plain arg passing\n                             Cow::from(args)"}, {"sha": "63253bae9078bdfd758c99c86b87c56939e11324", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         ).with_default_tag();\n         let tcx = &*self.tcx;\n \n-        let drop = ::monomorphize::resolve_drop_in_place(*tcx, ty);\n+        let drop = crate::monomorphize::resolve_drop_in_place(*tcx, ty);\n         let drop = self.memory.create_fn_alloc(drop).with_default_tag();\n         // no need to do any alignment checks on the memory accesses below, because we know the\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by"}, {"sha": "930bcb44374aa21fc5b52c97e179cd5568aaa3de", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -26,7 +26,7 @@ pub trait Value<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: Copy\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>>;\n \n     /// Create this from an `MPlaceTy`.\n-    fn from_mem_place(MPlaceTy<'tcx, M::PointerTag>) -> Self;\n+    fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self;\n \n     /// Project to the given enum variant.\n     fn project_downcast("}, {"sha": "909f96956695dabd9c73d22cd09115d203c64b2d", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -26,39 +26,21 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(slice_concat_ext)]\n #![feature(try_from)]\n #![feature(reverse_bits)]\n+#![feature(try_blocks)]\n \n #![recursion_limit=\"256\"]\n \n-extern crate arena;\n+#![deny(rust_2018_idioms)]\n+#![allow(explicit_outlives_requirements)]\n \n-#[macro_use]\n-extern crate bitflags;\n #[macro_use] extern crate log;\n-extern crate either;\n-extern crate graphviz as dot;\n-extern crate polonius_engine;\n #[macro_use]\n extern crate rustc;\n #[macro_use] extern crate rustc_data_structures;\n-extern crate serialize as rustc_serialize;\n-extern crate rustc_errors;\n+#[allow(unused_extern_crates)]\n+extern crate serialize as rustc_serialize; // used by deriving\n #[macro_use]\n extern crate syntax;\n-extern crate syntax_pos;\n-extern crate rustc_target;\n-extern crate log_settings;\n-extern crate rustc_apfloat;\n-extern crate byteorder;\n-extern crate core;\n-extern crate smallvec;\n-\n-// Once we can use edition 2018 in the compiler,\n-// replace this with real try blocks.\n-macro_rules! try_block {\n-    ($($inside:tt)*) => (\n-        (||{ ::std::ops::Try::from_ok({ $($inside)* }) })()\n-    )\n-}\n \n mod diagnostics;\n \n@@ -77,7 +59,7 @@ pub mod const_eval;\n pub use hair::pattern::check_crate as matchck_crate;\n use rustc::ty::query::Providers;\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     borrow_check::provide(providers);\n     shim::provide(providers);\n     transform::provide(providers);"}, {"sha": "6b6e8fcdc82cf57bcdf46a94bad09ff87d03d450", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -18,7 +18,7 @@ pub fn check(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_fn_for_unconditional_recursion(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                        fn_kind: FnKind,\n+                                        fn_kind: FnKind<'_>,\n                                         mir: &Mir<'tcx>,\n                                         def_id: DefId) {\n     if let FnKind::Closure(_) = fn_kind {"}, {"sha": "7f3c24daf606d4203e2e456bada43639b8090a3c", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -189,11 +189,11 @@ use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::MonoItem;\n use rustc::mir::interpret::{Scalar, GlobalId, AllocKind, ErrorHandled};\n \n-use monomorphize::{self, Instance};\n+use crate::monomorphize::{self, Instance};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n use rustc::util::common::time;\n \n-use monomorphize::item::{MonoItemExt, DefPathBasedNames, InstantiationMode};\n+use crate::monomorphize::item::{MonoItemExt, DefPathBasedNames, InstantiationMode};\n \n use rustc_data_structures::bit_set::GrowableBitSet;\n use rustc_data_structures::sync::{MTRef, MTLock, ParallelIterator, par_iter};"}, {"sha": "d3381f463f49ed1aa06278dbb34c87af3dc06b0f", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,4 +1,4 @@\n-use monomorphize::Instance;\n+use crate::monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::config::OptLevel;"}, {"sha": "d4c7ebefe1753027ce6078fc7a9cebe26a738813", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -111,9 +111,9 @@ use rustc::util::common::time;\n use rustc::util::nodemap::{DefIdSet, FxHashMap, FxHashSet};\n use rustc::mir::mono::MonoItem;\n \n-use monomorphize::collector::InliningMap;\n-use monomorphize::collector::{self, MonoItemCollectionMode};\n-use monomorphize::item::{MonoItemExt, InstantiationMode};\n+use crate::monomorphize::collector::InliningMap;\n+use crate::monomorphize::collector::{self, MonoItemCollectionMode};\n+use crate::monomorphize::item::{MonoItemExt, InstantiationMode};\n \n pub use rustc::mir::mono::CodegenUnit;\n \n@@ -146,7 +146,7 @@ pub trait CodegenUnitExt<'tcx> {\n         WorkProductId::from_cgu_name(&self.name().as_str())\n     }\n \n-    fn work_product(&self, tcx: TyCtxt) -> WorkProduct {\n+    fn work_product(&self, tcx: TyCtxt<'_, '_, '_>) -> WorkProduct {\n         let work_product_id = self.work_product_id();\n         tcx.dep_graph\n            .previous_work_product(&work_product_id)\n@@ -213,7 +213,7 @@ impl<'tcx> CodegenUnitExt<'tcx> for CodegenUnit<'tcx> {\n }\n \n // Anything we can't find a proper codegen unit for goes into this.\n-fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder) -> InternedString {\n+fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_, '_, '_>) -> InternedString {\n     name_builder.build_cgu_name(LOCAL_CRATE, &[\"fallback\"], Some(\"cgu\"))\n }\n \n@@ -536,7 +536,7 @@ fn mono_item_visibility(\n     }\n }\n \n-fn default_visibility(tcx: TyCtxt, id: DefId, is_generic: bool) -> Visibility {\n+fn default_visibility(tcx: TyCtxt<'_, '_, '_>, id: DefId, is_generic: bool) -> Visibility {\n     if !tcx.sess.target.target.options.default_hidden_visibility {\n         return Visibility::Default\n     }\n@@ -795,8 +795,8 @@ fn characteristic_def_id_of_mono_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n type CguNameCache = FxHashMap<(DefId, bool), InternedString>;\n \n-fn compute_codegen_unit_name(tcx: TyCtxt,\n-                             name_builder: &mut CodegenUnitNameBuilder,\n+fn compute_codegen_unit_name(tcx: TyCtxt<'_, '_, '_>,\n+                             name_builder: &mut CodegenUnitNameBuilder<'_, '_, '_>,\n                              def_id: DefId,\n                              volatile: bool,\n                              cache: &mut CguNameCache)\n@@ -855,7 +855,7 @@ fn compute_codegen_unit_name(tcx: TyCtxt,\n     }).clone()\n }\n \n-fn numbered_codegen_unit_name(name_builder: &mut CodegenUnitNameBuilder,\n+fn numbered_codegen_unit_name(name_builder: &mut CodegenUnitNameBuilder<'_, '_, '_>,\n                               index: usize)\n                               -> InternedString {\n     name_builder.build_cgu_name_no_mangle(LOCAL_CRATE, &[\"cgu\"], Some(index))\n@@ -929,7 +929,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n \n     tcx.sess.abort_if_errors();\n \n-    ::monomorphize::assert_symbols_are_distinct(tcx, items.iter());\n+    crate::monomorphize::assert_symbols_are_distinct(tcx, items.iter());\n \n     let strategy = if tcx.sess.opts.incremental.is_some() {\n         PartitioningStrategy::PerModule\n@@ -1013,7 +1013,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n     (Arc::new(mono_items), Arc::new(codegen_units))\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     providers.collect_and_partition_mono_items =\n         collect_and_partition_mono_items;\n "}, {"sha": "942e7a1f1bbbdef1a6466088ebb1a6ecbdaa64e1", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -16,12 +16,12 @@ use syntax_pos::Span;\n use std::fmt;\n use std::iter;\n \n-use transform::{add_moves_for_packed_drops, add_call_guards};\n-use transform::{remove_noop_landing_pads, no_landing_pads, simplify};\n-use util::elaborate_drops::{self, DropElaborator, DropStyle, DropFlagMode};\n-use util::patch::MirPatch;\n+use crate::transform::{add_moves_for_packed_drops, add_call_guards};\n+use crate::transform::{remove_noop_landing_pads, no_landing_pads, simplify};\n+use crate::util::elaborate_drops::{self, DropElaborator, DropStyle, DropFlagMode};\n+use crate::util::patch::MirPatch;\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     providers.mir_shims = make_shim;\n }\n \n@@ -138,7 +138,7 @@ enum CallKind {\n     Direct(DefId),\n }\n \n-fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n+fn temp_decl(mutability: Mutability, ty: Ty<'_>, span: Span) -> LocalDecl<'_> {\n     let source_info = SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span };\n     LocalDecl {\n         mutability,\n@@ -259,7 +259,7 @@ pub struct DropShimElaborator<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> fmt::Debug for DropShimElaborator<'a, 'tcx> {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         Ok(())\n     }\n }"}, {"sha": "dab96faaa2a5ecfe6e1039bbd2b0945b93319397", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n #[derive(PartialEq)]\n pub enum AddCallGuards {\n@@ -40,7 +40,7 @@ impl MirPass for AddCallGuards {\n }\n \n impl AddCallGuards {\n-    pub fn add_call_guards(&self, mir: &mut Mir) {\n+    pub fn add_call_guards(&self, mir: &mut Mir<'_>) {\n         let pred_count: IndexVec<_, _> =\n             mir.predecessors().iter().map(|ps| ps.len()).collect();\n "}, {"sha": "1492f0c50a31a67703d7cdc65f6dc4d2832fda3a", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -2,9 +2,9 @@ use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::TyCtxt;\n \n-use transform::{MirPass, MirSource};\n-use util::patch::MirPatch;\n-use util;\n+use crate::transform::{MirPass, MirSource};\n+use crate::util::patch::MirPatch;\n+use crate::util;\n \n // This pass moves values being dropped that are within a packed\n // struct to a separate local before dropping them, to ensure that"}, {"sha": "7bfcd318afe2d8adb94ebd1ab21f2a2532c76621", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -6,7 +6,7 @@\n \n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::mir::*;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct AddRetag;\n "}, {"sha": "b2e1afc519ec596b56d07e4921fcc48c4209688e", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -17,7 +17,7 @@ use syntax::symbol::Symbol;\n \n use std::ops::Bound;\n \n-use util;\n+use crate::util;\n \n pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n@@ -458,7 +458,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     }\n }\n \n-pub(crate) fn provide(providers: &mut Providers) {\n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         unsafety_check_result,\n         unsafe_derive_on_repr_packed,\n@@ -575,7 +575,7 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n }\n \n /// Return the NodeId for an enclosing scope that is also `unsafe`\n-fn is_enclosed(tcx: TyCtxt,\n+fn is_enclosed(tcx: TyCtxt<'_, '_, '_>,\n                used_unsafe: &FxHashSet<ast::NodeId>,\n                id: ast::NodeId) -> Option<(String, ast::NodeId)> {\n     let parent_id = tcx.hir().get_parent_node(id);\n@@ -598,7 +598,9 @@ fn is_enclosed(tcx: TyCtxt,\n     }\n }\n \n-fn report_unused_unsafe(tcx: TyCtxt, used_unsafe: &FxHashSet<ast::NodeId>, id: ast::NodeId) {\n+fn report_unused_unsafe(tcx: TyCtxt<'_, '_, '_>,\n+                        used_unsafe: &FxHashSet<ast::NodeId>,\n+                        id: ast::NodeId) {\n     let span = tcx.sess.source_map().def_span(tcx.hir().span(id));\n     let msg = \"unnecessary `unsafe` block\";\n     let mut db = tcx.struct_span_lint_node(UNUSED_UNSAFE, id, span, msg);"}, {"sha": "240ef7c8ba42a8e8d65e64abab3ecd8625a2c543", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -26,7 +26,7 @@ use rustc::mir::{BasicBlock, FakeReadCause, Local, Location, Mir, Place};\n use rustc::mir::{Statement, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct CleanAscribeUserType;\n "}, {"sha": "dd1f37a591888351564218e7d112e4166ff45d08", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -18,12 +18,12 @@ use rustc::ty::layout::{\n     HasTyCtxt, TargetDataLayout, HasDataLayout,\n };\n \n-use interpret::{self, EvalContext, ScalarMaybeUndef, Immediate, OpTy, MemoryKind};\n-use const_eval::{\n+use crate::interpret::{self, EvalContext, ScalarMaybeUndef, Immediate, OpTy, MemoryKind};\n+use crate::const_eval::{\n     CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_eval_cx,\n     lazy_const_to_op,\n };\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct ConstProp;\n \n@@ -486,7 +486,7 @@ struct CanConstProp {\n \n impl CanConstProp {\n     /// returns true if `local` can be propagated\n-    fn check(mir: &Mir) -> IndexVec<Local, bool> {\n+    fn check(mir: &Mir<'_>) -> IndexVec<Local, bool> {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(true, &mir.local_decls),\n             found_assignment: IndexVec::from_elem(false, &mir.local_decls),"}, {"sha": "4789c35740eb3ce5df82e9326366042fc44f4f1c", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -22,8 +22,8 @@\n use rustc::mir::{Constant, Local, LocalKind, Location, Place, Mir, Operand, Rvalue, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n-use transform::{MirPass, MirSource};\n-use util::def_use::DefUseAnalysis;\n+use crate::transform::{MirPass, MirSource};\n+use crate::util::def_use::DefUseAnalysis;\n \n pub struct CopyPropagation;\n \n@@ -173,7 +173,7 @@ enum Action<'tcx> {\n }\n \n impl<'tcx> Action<'tcx> {\n-    fn local_copy(mir: &Mir<'tcx>, def_use_analysis: &DefUseAnalysis, src_place: &Place<'tcx>)\n+    fn local_copy(mir: &Mir<'tcx>, def_use_analysis: &DefUseAnalysis<'_>, src_place: &Place<'tcx>)\n                   -> Option<Action<'tcx>> {\n         // The source must be a local.\n         let src_local = if let Place::Local(local) = *src_place {"}, {"sha": "669384e31dac354dfbf601e9c61e7ecc2b6152c8", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,7 +1,7 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc_data_structures::indexed_vec::Idx;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct Deaggregator;\n "}, {"sha": "d7f697a320049325992ed5bfdc5cadd79cb89f9a", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -8,8 +8,8 @@ use std::io;\n use rustc::mir::Mir;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::TyCtxt;\n-use transform::{MirPass, MirSource};\n-use util as mir_util;\n+use crate::transform::{MirPass, MirSource};\n+use crate::util as mir_util;\n \n pub struct Marker(pub &'static str);\n \n@@ -31,7 +31,7 @@ pub struct Disambiguator {\n }\n \n impl fmt::Display for Disambiguator {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let title = if self.is_after { \"after\" } else { \"before\" };\n         write!(formatter, \"{}\", title)\n     }"}, {"sha": "4aaa0be7964a4f7a3c5a4ff6ba7f90cf97977ae4", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,10 +1,14 @@\n-use dataflow::move_paths::{HasMoveData, MoveData, MovePathIndex, LookupResult};\n-use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use dataflow::{DataflowResults};\n-use dataflow::{on_all_children_bits, on_all_drop_children_bits};\n-use dataflow::{drop_flag_effects_for_location, on_lookup_result_bits};\n-use dataflow::MoveDataParamEnv;\n-use dataflow::{self, do_dataflow, DebugFormatted};\n+use crate::dataflow::move_paths::{HasMoveData, MoveData, MovePathIndex, LookupResult};\n+use crate::dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n+use crate::dataflow::{DataflowResults};\n+use crate::dataflow::{on_all_children_bits, on_all_drop_children_bits};\n+use crate::dataflow::{drop_flag_effects_for_location, on_lookup_result_bits};\n+use crate::dataflow::MoveDataParamEnv;\n+use crate::dataflow::{self, do_dataflow, DebugFormatted};\n+use crate::transform::{MirPass, MirSource};\n+use crate::util::patch::MirPatch;\n+use crate::util::elaborate_drops::{DropFlagState, Unwind, elaborate_drop};\n+use crate::util::elaborate_drops::{DropElaborator, DropStyle, DropFlagMode};\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::layout::VariantIdx;\n use rustc::mir::*;\n@@ -13,10 +17,6 @@ use rustc_data_structures::bit_set::BitSet;\n use std::fmt;\n use syntax::ast;\n use syntax_pos::Span;\n-use transform::{MirPass, MirSource};\n-use util::patch::MirPatch;\n-use util::elaborate_drops::{DropFlagState, Unwind, elaborate_drop};\n-use util::elaborate_drops::{DropElaborator, DropStyle, DropFlagMode};\n \n pub struct ElaborateDrops;\n \n@@ -174,7 +174,7 @@ struct Elaborator<'a, 'b: 'a, 'tcx: 'b> {\n }\n \n impl<'a, 'b, 'tcx> fmt::Debug for Elaborator<'a, 'b, 'tcx> {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Ok(())\n     }\n }"}, {"sha": "b555a2aa83ee3dd87534bb37e74e2641bbac07b2", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -8,7 +8,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, TyContext};\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "9897f9833ca621817d93eb8b66883ada609daa8d", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -56,19 +56,19 @@ use rustc::mir::visit::{PlaceContext, Visitor, MutVisitor};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty};\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::Substs;\n-use util::dump_mir;\n-use util::liveness::{self, IdentityMap};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::bit_set::BitSet;\n use std::borrow::Cow;\n use std::iter::once;\n use std::mem;\n-use transform::{MirPass, MirSource};\n-use transform::simplify;\n-use transform::no_landing_pads::no_landing_pads;\n-use dataflow::{do_dataflow, DebugFormatted, state_for_location};\n-use dataflow::{MaybeStorageLive, HaveBeenBorrowedLocals};\n+use crate::transform::{MirPass, MirSource};\n+use crate::transform::simplify;\n+use crate::transform::no_landing_pads::no_landing_pads;\n+use crate::dataflow::{do_dataflow, DebugFormatted, state_for_location};\n+use crate::dataflow::{MaybeStorageLive, HaveBeenBorrowedLocals};\n+use crate::util::dump_mir;\n+use crate::util::liveness::{self, IdentityMap};\n \n pub struct StateTransform;\n \n@@ -581,9 +581,9 @@ fn insert_switch<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn elaborate_generator_drops<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                        def_id: DefId,\n                                        mir: &mut Mir<'tcx>) {\n-    use util::elaborate_drops::{elaborate_drop, Unwind};\n-    use util::patch::MirPatch;\n-    use shim::DropShimElaborator;\n+    use crate::util::elaborate_drops::{elaborate_drop, Unwind};\n+    use crate::util::patch::MirPatch;\n+    use crate::shim::DropShimElaborator;\n \n     // Note that `elaborate_drops` only drops the upvars of a generator, and\n     // this is ok because `open_drop` can only be reached within that own"}, {"sha": "4fddf6f8e09c20ab0feaa135181e74de1e7942a9", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -13,10 +13,10 @@ use rustc::ty::subst::{Subst,Substs};\n \n use std::collections::VecDeque;\n use std::iter;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n \n-use syntax::{attr};\n+use syntax::attr;\n use rustc_target::spec::abi::Abi;\n \n const DEFAULT_THRESHOLD: usize = 50;\n@@ -426,7 +426,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 // Place could result in two different locations if `f`\n                 // writes to `i`. To prevent this we need to create a temporary\n                 // borrow of the place and pass the destination as `*temp` instead.\n-                fn dest_needs_borrow(place: &Place) -> bool {\n+                fn dest_needs_borrow(place: &Place<'_>) -> bool {\n                     match *place {\n                         Place::Projection(ref p) => {\n                             match p.elem {"}, {"sha": "21772e1f1cd5b08e56e4b05607576c831a011876", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::{TyCtxt, TyKind};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct InstCombine;\n "}, {"sha": "aa248ba7c53dfd6ca2105f55c038d327a71e0d70", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -5,8 +5,7 @@ use rustc::middle::lang_items::LangItem;\n use rustc::mir::*;\n use rustc::ty::{List, Ty, TyCtxt, TyKind};\n use rustc_data_structures::indexed_vec::{Idx};\n-use transform::{MirPass, MirSource};\n-use syntax;\n+use crate::transform::{MirPass, MirSource};\n \n pub struct Lower128Bit;\n \n@@ -182,7 +181,7 @@ impl RhsKind {\n     }\n }\n \n-fn sign_of_128bit(ty: Ty) -> Option<bool> {\n+fn sign_of_128bit(ty: Ty<'_>) -> Option<bool> {\n     match ty.sty {\n         TyKind::Int(syntax::ast::IntTy::I128) => Some(true),\n         TyKind::Uint(syntax::ast::UintTy::U128) => Some(false),"}, {"sha": "cc37a8381f234da9b21ad6117dd44e6a337c5355", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,5 +1,5 @@\n-use borrow_check::nll::type_check;\n-use build;\n+use crate::borrow_check::nll::type_check;\n+use crate::build;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::mir::{Mir, MirPhase, Promoted};\n use rustc::ty::TyCtxt;\n@@ -38,7 +38,7 @@ pub mod inline;\n pub mod lower_128bit;\n pub mod uniform_array_move_out;\n \n-pub(crate) fn provide(providers: &mut Providers) {\n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n     self::qualify_consts::provide(providers);\n     self::check_unsafety::provide(providers);\n     *providers = Providers {"}, {"sha": "15b59d36d363c75f52f9dad8c5f8858a0d22158f", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -4,7 +4,7 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc::mir::visit::MutVisitor;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct NoLandingPads;\n "}, {"sha": "d1dc5cfec994de503a14674f0cb4995d92fbb73e", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -130,7 +130,8 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n     }\n }\n \n-pub fn collect_temps(mir: &Mir, rpo: &mut ReversePostorder) -> IndexVec<Local, TempState> {\n+pub fn collect_temps(mir: &Mir<'_>,\n+                     rpo: &mut ReversePostorder<'_, '_>) -> IndexVec<Local, TempState> {\n     let mut collector = TempCollector {\n         temps: IndexVec::from_elem(TempState::Undefined, &mir.local_decls),\n         span: mir.span,"}, {"sha": "ab4e3ad23f69aa3c156e2d08eea6eee5c0ea3d80", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -27,10 +27,10 @@ use syntax_pos::{Span, DUMMY_SP};\n use std::fmt;\n use std::usize;\n \n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n use super::promote_consts::{self, Candidate, TempState};\n \n-bitflags! {\n+bitflags::bitflags! {\n     // Borrows of temporaries can be promoted only if\n     // they have none of these qualifications, with\n     // the exception of `STATIC_REF` (in statics only).\n@@ -84,7 +84,7 @@ enum Mode {\n }\n \n impl fmt::Display for Mode {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             Mode::Const => write!(f, \"constant\"),\n             Mode::Static | Mode::StaticMut => write!(f, \"static\"),\n@@ -1128,7 +1128,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         mir_const_qualif,\n         ..*providers\n@@ -1317,7 +1317,7 @@ impl MirPass for QualifyAndPromoteConstants {\n     }\n }\n \n-fn args_required_const(tcx: TyCtxt, def_id: DefId) -> Option<FxHashSet<usize>> {\n+fn args_required_const(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<FxHashSet<usize>> {\n     let attrs = tcx.get_attrs(def_id);\n     let attr = attrs.iter().find(|a| a.check_name(\"rustc_args_required_const\"))?;\n     let mut ret = FxHashSet::default();"}, {"sha": "4fcb4c10f9e6d2604a86cf39a9f5d520c9767211", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,8 +1,8 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc_data_structures::bit_set::BitSet;\n-use transform::{MirPass, MirSource};\n-use util::patch::MirPatch;\n+use crate::transform::{MirPass, MirSource};\n+use crate::util::patch::MirPatch;\n \n /// A pass that removes no-op landing pads and replaces jumps to them with\n /// `None`. This is important because otherwise LLVM generates terrible\n@@ -34,7 +34,7 @@ impl RemoveNoopLandingPads {\n     fn is_nop_landing_pad(\n         &self,\n         bb: BasicBlock,\n-        mir: &Mir,\n+        mir: &Mir<'_>,\n         nop_landing_pads: &BitSet<BasicBlock>,\n     ) -> bool {\n         for stmt in &mir[bb].statements {\n@@ -86,7 +86,7 @@ impl RemoveNoopLandingPads {\n         }\n     }\n \n-    fn remove_nop_landing_pads(&self, mir: &mut Mir) {\n+    fn remove_nop_landing_pads(&self, mir: &mut Mir<'_>) {\n         // make sure there's a single resume block\n         let resume_block = {\n             let patch = MirPatch::new(mir);"}, {"sha": "806c1c1cca457daaf7cd9558251d5a0bb27b4d7f", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -5,18 +5,20 @@ use syntax_pos::Span;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{self, Mir, Location};\n use rustc_data_structures::bit_set::BitSet;\n-use transform::{MirPass, MirSource};\n-\n-use dataflow::{do_dataflow, DebugFormatted};\n-use dataflow::MoveDataParamEnv;\n-use dataflow::BitDenotation;\n-use dataflow::DataflowResults;\n-use dataflow::{DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use dataflow::move_paths::{MovePathIndex, LookupResult};\n-use dataflow::move_paths::{HasMoveData, MoveData};\n-use dataflow;\n-\n-use dataflow::has_rustc_mir_with;\n+use crate::transform::{MirPass, MirSource};\n+\n+use crate::dataflow::{do_dataflow, DebugFormatted};\n+use crate::dataflow::MoveDataParamEnv;\n+use crate::dataflow::BitDenotation;\n+use crate::dataflow::DataflowResults;\n+use crate::dataflow::{\n+    DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces\n+};\n+use crate::dataflow::move_paths::{MovePathIndex, LookupResult};\n+use crate::dataflow::move_paths::{HasMoveData, MoveData};\n+use crate::dataflow;\n+\n+use crate::dataflow::has_rustc_mir_with;\n \n pub struct SanityCheck;\n "}, {"sha": "90486d1566413ca07c8fb744846ccff6f4e8b1e4", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -34,7 +34,7 @@ use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, Visitor, PlaceContext};\n use rustc::session::config::DebugInfo;\n use std::borrow::Cow;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct SimplifyCfg { label: String }\n \n@@ -44,7 +44,7 @@ impl SimplifyCfg {\n     }\n }\n \n-pub fn simplify_cfg(mir: &mut Mir) {\n+pub fn simplify_cfg(mir: &mut Mir<'_>) {\n     CfgSimplifier::new(mir).simplify();\n     remove_dead_blocks(mir);\n \n@@ -263,7 +263,7 @@ impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n-pub fn remove_dead_blocks(mir: &mut Mir) {\n+pub fn remove_dead_blocks(mir: &mut Mir<'_>) {\n     let mut seen = BitSet::new_empty(mir.basic_blocks().len());\n     for (bb, _) in traversal::preorder(mir) {\n         seen.insert(bb.index());"}, {"sha": "0dc89bfe14709c053b409d2b2466a9eced923281", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::ty::{TyCtxt, ParamEnv};\n use rustc::mir::*;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n use std::borrow::Cow;\n "}, {"sha": "09918436817f39ca0594b8a089f4078d8465c436", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -30,9 +30,9 @@ use rustc::ty;\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc::mir::visit::{Visitor, PlaceContext, NonUseContext};\n-use transform::{MirPass, MirSource};\n-use util::patch::MirPatch;\n use rustc_data_structures::indexed_vec::{IndexVec};\n+use crate::transform::{MirPass, MirSource};\n+use crate::util::patch::MirPatch;\n \n pub struct UniformArrayMoveOut;\n "}, {"sha": "fd694ddbbd19f994da5ccbe7f895b6cf0c52f5b9", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -12,7 +12,7 @@ pub enum Origin {\n }\n \n impl fmt::Display for Origin {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // If the user passed `-Z borrowck=compare`, then include\n         // origin info as part of the error report,\n         // otherwise\n@@ -437,7 +437,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_move_out_of_interior_noncopy(\n         self,\n         move_from_span: Span,\n-        ty: ty::Ty,\n+        ty: ty::Ty<'_>,\n         is_index: Option<bool>,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -464,7 +464,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_move_out_of_interior_of_drop(\n         self,\n         move_from_span: Span,\n-        container_ty: ty::Ty,\n+        container_ty: ty::Ty<'_>,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!("}, {"sha": "3b9d7c3612a5739f7a7c891932eb290d9146a029", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -107,7 +107,7 @@ impl<'tcx> Info<'tcx> {\n \n     pub fn defs_not_including_drop(\n         &self,\n-    ) -> iter::Filter<slice::Iter<Use<'tcx>>, fn(&&Use<'tcx>) -> bool> {\n+    ) -> iter::Filter<slice::Iter<'_, Use<'tcx>>, fn(&&Use<'tcx>) -> bool> {\n         self.defs_and_uses.iter().filter(|place_use| {\n             place_use.context.is_mutating_use() && !place_use.context.is_drop()\n         })"}, {"sha": "23e92b3e933d384f9a1e2a13fc9852f87917f19f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -8,7 +8,7 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::Substs;\n use rustc::ty::util::IntTypeExt;\n use rustc_data_structures::indexed_vec::Idx;\n-use util::patch::MirPatch;\n+use crate::util::patch::MirPatch;\n \n use std::u32;\n "}, {"sha": "e93b96c12161cd86aaba5b3dd5a09b8b77aff9ec", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -1,4 +1,3 @@\n-use dot;\n use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::TyCtxt;\n@@ -24,7 +23,7 @@ pub fn write_mir_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n /// Write a graphviz DOT graph of the MIR.\n pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n                                       def_id: DefId,\n-                                      mir: &Mir,\n+                                      mir: &Mir<'_>,\n                                       w: &mut W) -> io::Result<()>\n     where W: Write\n {\n@@ -58,7 +57,7 @@ pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n /// `init` and `fini` are callbacks for emitting additional rows of\n /// data (using HTML enclosed with `<tr>` in the emitted text).\n pub fn write_node_label<W: Write, INIT, FINI>(block: BasicBlock,\n-                                              mir: &Mir,\n+                                              mir: &Mir<'_>,\n                                               w: &mut W,\n                                               num_cols: u32,\n                                               init: INIT,\n@@ -100,7 +99,7 @@ pub fn write_node_label<W: Write, INIT, FINI>(block: BasicBlock,\n }\n \n /// Write a graphviz DOT node for the given basic block.\n-fn write_node<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> {\n+fn write_node<W: Write>(block: BasicBlock, mir: &Mir<'_>, w: &mut W) -> io::Result<()> {\n     // Start a new node with the label to follow, in one of DOT's pseudo-HTML tables.\n     write!(w, r#\"    {} [shape=\"none\", label=<\"#, node(block))?;\n     write_node_label(block, mir, w, 1, |_| Ok(()), |_| Ok(()))?;\n@@ -109,7 +108,7 @@ fn write_node<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<(\n }\n \n /// Write graphviz DOT edges with labels between the given basic block and all of its successors.\n-fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> {\n+fn write_edges<W: Write>(source: BasicBlock, mir: &Mir<'_>, w: &mut W) -> io::Result<()> {\n     let terminator = mir[source].terminator();\n     let labels = terminator.kind.fmt_successor_labels();\n \n@@ -125,7 +124,7 @@ fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result\n /// all the variables and temporaries.\n fn write_graph_label<'a, 'gcx, 'tcx, W: Write>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                def_id: DefId,\n-                                               mir: &Mir,\n+                                               mir: &Mir<'_>,\n                                                w: &mut W)\n                                                -> io::Result<()> {\n     write!(w, \"    label=<fn {}(\", dot::escape_html(&tcx.item_path_str(def_id)))?;"}, {"sha": "08ef58a232170f2a794913d7282b72ace8baf248", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -35,8 +35,8 @@ use rustc_data_structures::work_queue::WorkQueue;\n use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n-use transform::MirSource;\n-use util::pretty::{dump_enabled, write_basic_block, write_mir_intro};\n+use crate::transform::MirSource;\n+use crate::util::pretty::{dump_enabled, write_basic_block, write_mir_intro};\n \n pub type LiveVarSet<V> = BitSet<V>;\n "}, {"sha": "366cd71f6d4e9551646247aefd6414f3ee4878c1", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -170,14 +170,14 @@ impl<'tcx> MirPatch<'tcx> {\n         }\n     }\n \n-    pub fn source_info_for_index(data: &BasicBlockData, loc: Location) -> SourceInfo {\n+    pub fn source_info_for_index(data: &BasicBlockData<'_>, loc: Location) -> SourceInfo {\n         match data.statements.get(loc.statement_index) {\n             Some(stmt) => stmt.source_info,\n             None => data.terminator().source_info\n         }\n     }\n \n-    pub fn source_info_for_location(&self, mir: &Mir, loc: Location) -> SourceInfo {\n+    pub fn source_info_for_location(&self, mir: &Mir<'_>, loc: Location) -> SourceInfo {\n         let data = match loc.block.index().checked_sub(mir.basic_blocks().len()) {\n             Some(new) => &self.new_blocks[new],\n             None => &mir[loc.block]"}, {"sha": "2e1fc756833b8dceda85a4345e411e015f87f4ed", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b4102e2fd252f4d087c0f7d3c7c30b907132dc/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=c3b4102e2fd252f4d087c0f7d3c7c30b907132dc", "patch": "@@ -12,7 +12,7 @@ use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n use super::graphviz::write_mir_fn_graphviz;\n-use transform::MirSource;\n+use crate::transform::MirSource;\n \n const INDENT: &str = \"    \";\n /// Alignment for lining up comments following MIR statements\n@@ -131,7 +131,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n ) where\n     F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n-    let _: io::Result<()> = try_block! {\n+    let _: io::Result<()> = try {\n         let mut file = create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, source)?;\n         writeln!(file, \"// MIR for `{}`\", node_path)?;\n         writeln!(file, \"// source = {:?}\", source)?;\n@@ -148,7 +148,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     };\n \n     if tcx.sess.opts.debugging_opts.dump_mir_graphviz {\n-        let _: io::Result<()> = try_block! {\n+        let _: io::Result<()> = try {\n             let mut file =\n                 create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, source)?;\n             write_mir_fn_graphviz(tcx, source.def_id, mir, &mut file)?;\n@@ -446,7 +446,7 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ExtraComments<'cx, 'gcx, 'tcx> {\n     }\n }\n \n-fn comment(tcx: TyCtxt, SourceInfo { span, scope }: SourceInfo) -> String {\n+fn comment(tcx: TyCtxt<'_, '_, '_>, SourceInfo { span, scope }: SourceInfo) -> String {\n     format!(\n         \"scope {} at {}\",\n         scope.index(),\n@@ -458,8 +458,8 @@ fn comment(tcx: TyCtxt, SourceInfo { span, scope }: SourceInfo) -> String {\n ///\n /// Returns the total number of variables printed.\n fn write_scope_tree(\n-    tcx: TyCtxt,\n-    mir: &Mir,\n+    tcx: TyCtxt<'_, '_, '_>,\n+    mir: &Mir<'_>,\n     scope_tree: &FxHashMap<SourceScope, Vec<SourceScope>>,\n     w: &mut dyn Write,\n     parent: SourceScope,\n@@ -529,7 +529,7 @@ fn write_scope_tree(\n pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     src: MirSource,\n-    mir: &Mir,\n+    mir: &Mir<'_>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {\n     write_mir_sig(tcx, src, mir, w)?;\n@@ -568,7 +568,12 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     Ok(())\n }\n \n-fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n+fn write_mir_sig(\n+    tcx: TyCtxt<'_, '_, '_>,\n+    src: MirSource,\n+    mir: &Mir<'_>,\n+    w: &mut dyn Write,\n+) -> io::Result<()> {\n     let id = tcx.hir().as_local_node_id(src.def_id).unwrap();\n     let body_owner_kind = tcx.hir().body_owner_kind(id);\n     match (body_owner_kind, src.promoted) {\n@@ -614,7 +619,7 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut dyn Write) -> i\n     Ok(())\n }\n \n-fn write_temp_decls(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n+fn write_temp_decls(mir: &Mir<'_>, w: &mut dyn Write) -> io::Result<()> {\n     // Compiler-introduced temporary types.\n     for temp in mir.temps_iter() {\n         writeln!(\n@@ -630,7 +635,7 @@ fn write_temp_decls(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n     Ok(())\n }\n \n-fn write_user_type_annotations(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n+fn write_user_type_annotations(mir: &Mir<'_>, w: &mut dyn Write) -> io::Result<()> {\n     if !mir.user_type_annotations.is_empty() {\n         writeln!(w, \"| User Type Annotations\")?;\n     }\n@@ -643,7 +648,7 @@ fn write_user_type_annotations(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n     Ok(())\n }\n \n-pub fn dump_mir_def_ids(tcx: TyCtxt, single: Option<DefId>) -> Vec<DefId> {\n+pub fn dump_mir_def_ids(tcx: TyCtxt<'_, '_, '_>, single: Option<DefId>) -> Vec<DefId> {\n     if let Some(i) = single {\n         vec![i]\n     } else {"}]}