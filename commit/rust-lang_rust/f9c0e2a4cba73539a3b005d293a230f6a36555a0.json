{"sha": "f9c0e2a4cba73539a3b005d293a230f6a36555a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YzBlMmE0Y2JhNzM1MzlhM2IwMDVkMjkzYTIzMGY2YTM2NTU1YTA=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-11-27T20:13:08Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-11-27T20:13:08Z"}, "message": "Run rustfmt on clippy_dev", "tree": {"sha": "0fe7fd53d01e7cecb46bb5da1dbbad92911a1216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fe7fd53d01e7cecb46bb5da1dbbad92911a1216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c0e2a4cba73539a3b005d293a230f6a36555a0", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE46kBTF5vnyuSPg0W6OiXpYcOQcIFAlv9pVQACgkQ6OiXpYcO\nQcIXYg/+MoT5tOxSBAdwdhPtT8ywgMjj5FcNlsuR5415TZPhdpO14nbTLSHW/lxO\nEwYEdhozGb+1hQznINIgDiumj5eNq0qQo6DIwHaqMiUbbNkq+S8gG9oZyZxnvDgl\nf6Yk1JfiO5XWW47xiWv8dyfDW0PtSaHgl/hecuAdX1pZgDypEccEXUCGuB1gwf40\nSJvtI0gwntH0exxRSghVePeJIuvntMymBf0o2wXWlDRU4ssuc2qH2SEO6psq2L9w\n6F+DmJB/X95/IOwun/BY5uLzGdtnne0sXWgfTsBTLDCx3FLNxmU8HTmw2WA4YK3I\nv6C7rDq8xS1NfjEGMElJpZ4YpOruYl6uz1SDMgmosDqYjElWpAp23vto2iKXqobc\nZXdjvJ7ezV8InbPwTUG79lp1tjPj2XR988PgK3msJoEbh+o71It9cCHUfmo+9kfb\nCNmO24eFyGj6l7rXgzUpQIJ5C6UY70r16zD8dl3YDMBnuFCnY7YH8jzd9yOPv+zC\n3dyNqt2oGk45xg/HyUTid7qBZRwno2y8gAj6xEFuKGZE6nlcirtm7oyOj+kA1CkU\nONa1VE2riidJJnOBIw2sVM4YgaPi4fJAjYkcq6E9kmQDyxb3VHj+640dbzCOditA\nyo2ixgPGud3oYz7eiQ53MsGE6egdDAQuBDaaGMeLd2kyKbMgPVo=\n=0kdR\n-----END PGP SIGNATURE-----", "payload": "tree 0fe7fd53d01e7cecb46bb5da1dbbad92911a1216\nparent 3befd86967993fdb8dfb23bd8524de04b65e658d\nauthor flip1995 <hello@philkrones.com> 1543349588 +0100\ncommitter flip1995 <hello@philkrones.com> 1543349588 +0100\n\nRun rustfmt on clippy_dev\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c0e2a4cba73539a3b005d293a230f6a36555a0", "html_url": "https://github.com/rust-lang/rust/commit/f9c0e2a4cba73539a3b005d293a230f6a36555a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c0e2a4cba73539a3b005d293a230f6a36555a0/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3befd86967993fdb8dfb23bd8524de04b65e658d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3befd86967993fdb8dfb23bd8524de04b65e658d", "html_url": "https://github.com/rust-lang/rust/commit/3befd86967993fdb8dfb23bd8524de04b65e658d"}], "stats": {"total": 296, "additions": 181, "deletions": 115}, "files": [{"sha": "626afceecff659b21752564675457ee8d375954b", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 128, "deletions": 80, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/f9c0e2a4cba73539a3b005d293a230f6a36555a0/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c0e2a4cba73539a3b005d293a230f6a36555a0/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=f9c0e2a4cba73539a3b005d293a230f6a36555a0", "patch": "@@ -7,30 +7,35 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![allow(clippy::default_hash_types)]\n \n use itertools::Itertools;\n use lazy_static::lazy_static;\n use regex::Regex;\n-use walkdir::WalkDir;\n use std::collections::HashMap;\n use std::ffi::OsStr;\n use std::fs;\n use std::io::prelude::*;\n+use walkdir::WalkDir;\n \n lazy_static! {\n-    static ref DEC_CLIPPY_LINT_RE: Regex = Regex::new(r#\"(?x)\n+    static ref DEC_CLIPPY_LINT_RE: Regex = Regex::new(\n+        r#\"(?x)\n         declare_clippy_lint!\\s*[\\{(]\\s*\n         pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n         (?P<cat>[a-z_]+)\\s*,\\s*\n         \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n-    \"#).unwrap();\n-    static ref DEC_DEPRECATED_LINT_RE: Regex = Regex::new(r#\"(?x)\n+    \"#\n+    )\n+    .unwrap();\n+    static ref DEC_DEPRECATED_LINT_RE: Regex = Regex::new(\n+        r#\"(?x)\n         declare_deprecated_lint!\\s*[{(]\\s*\n         pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n         \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n-    \"#).unwrap();\n+    \"#\n+    )\n+    .unwrap();\n     static ref NL_ESCAPE_RE: Regex = Regex::new(r#\"\\\\\\n\\s*\"#).unwrap();\n     pub static ref DOCS_LINK: String = \"https://rust-lang.github.io/rust-clippy/master/index.html\".to_string();\n }\n@@ -57,13 +62,16 @@ impl Lint {\n     }\n \n     /// Returns all non-deprecated lints and non-internal lints\n-    pub fn usable_lints(lints: impl Iterator<Item=Self>) -> impl Iterator<Item=Self> {\n+    pub fn usable_lints(lints: impl Iterator<Item = Self>) -> impl Iterator<Item = Self> {\n         lints.filter(|l| l.deprecation.is_none() && !l.is_internal())\n     }\n \n     /// Returns the lints in a HashMap, grouped by the different lint groups\n     pub fn by_lint_group(lints: &[Self]) -> HashMap<String, Vec<Self>> {\n-        lints.iter().map(|lint| (lint.group.to_string(), lint.clone())).into_group_map()\n+        lints\n+            .iter()\n+            .map(|lint| (lint.group.to_string(), lint.clone()))\n+            .into_group_map()\n     }\n \n     pub fn is_internal(&self) -> bool {\n@@ -73,7 +81,8 @@ impl Lint {\n \n /// Generates the Vec items for `register_lint_group` calls in `clippy_lints/src/lib.rs`.\n pub fn gen_lint_group_list(lints: Vec<Lint>) -> Vec<String> {\n-    lints.into_iter()\n+    lints\n+        .into_iter()\n         .filter_map(|l| {\n             if l.is_internal() || l.deprecation.is_some() {\n                 None\n@@ -86,14 +95,17 @@ pub fn gen_lint_group_list(lints: Vec<Lint>) -> Vec<String> {\n \n /// Generates the `pub mod module_name` list in `clippy_lints/src/lib.rs`.\n pub fn gen_modules_list(lints: Vec<Lint>) -> Vec<String> {\n-    lints.into_iter()\n+    lints\n+        .into_iter()\n         .filter_map(|l| {\n-            if l.is_internal() || l.deprecation.is_some() { None } else { Some(l.module) }\n+            if l.is_internal() || l.deprecation.is_some() {\n+                None\n+            } else {\n+                Some(l.module)\n+            }\n         })\n         .unique()\n-        .map(|module| {\n-            format!(\"pub mod {};\", module)\n-        })\n+        .map(|module| format!(\"pub mod {};\", module))\n         .sorted()\n }\n \n@@ -109,60 +121,63 @@ pub fn gen_changelog_lint_list(lints: Vec<Lint>) -> Vec<String> {\n             } else {\n                 Some(format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK.clone(), l.name))\n             }\n-        }).collect()\n+        })\n+        .collect()\n }\n \n /// Generates the `register_removed` code in `./clippy_lints/src/lib.rs`.\n pub fn gen_deprecated(lints: &[Lint]) -> Vec<String> {\n-    itertools::flatten(\n-        lints\n-            .iter()\n-            .filter_map(|l| {\n-                l.clone().deprecation.and_then(|depr_text| {\n-                    Some(\n-                        vec![\n-                            \"    store.register_removed(\".to_string(),\n-                            format!(\"        \\\"{}\\\",\", l.name),\n-                            format!(\"        \\\"{}\\\",\", depr_text),\n-                            \"    );\".to_string()\n-                        ]\n-                    )\n-                })\n-            })\n-    ).collect()\n+    itertools::flatten(lints.iter().filter_map(|l| {\n+        l.clone().deprecation.and_then(|depr_text| {\n+            Some(vec![\n+                \"    store.register_removed(\".to_string(),\n+                format!(\"        \\\"{}\\\",\", l.name),\n+                format!(\"        \\\"{}\\\",\", depr_text),\n+                \"    );\".to_string(),\n+            ])\n+        })\n+    }))\n+    .collect()\n }\n \n /// Gathers all files in `src/clippy_lints` and gathers all lints inside\n-pub fn gather_all() -> impl Iterator<Item=Lint> {\n+pub fn gather_all() -> impl Iterator<Item = Lint> {\n     lint_files().flat_map(|f| gather_from_file(&f))\n }\n \n-fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item=Lint> {\n+fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item = Lint> {\n     let mut file = fs::File::open(dir_entry.path()).unwrap();\n     let mut content = String::new();\n     file.read_to_string(&mut content).unwrap();\n     let mut filename = dir_entry.path().file_stem().unwrap().to_str().unwrap();\n     // If the lints are stored in mod.rs, we get the module name from\n     // the containing directory:\n     if filename == \"mod\" {\n-        filename = dir_entry.path().parent().unwrap().file_stem().unwrap().to_str().unwrap()\n+        filename = dir_entry\n+            .path()\n+            .parent()\n+            .unwrap()\n+            .file_stem()\n+            .unwrap()\n+            .to_str()\n+            .unwrap()\n     }\n     parse_contents(&content, filename)\n }\n \n-fn parse_contents(content: &str, filename: &str) -> impl Iterator<Item=Lint> {\n+fn parse_contents(content: &str, filename: &str) -> impl Iterator<Item = Lint> {\n     let lints = DEC_CLIPPY_LINT_RE\n         .captures_iter(content)\n         .map(|m| Lint::new(&m[\"name\"], &m[\"cat\"], &m[\"desc\"], None, filename));\n     let deprecated = DEC_DEPRECATED_LINT_RE\n         .captures_iter(content)\n-        .map(|m| Lint::new( &m[\"name\"], \"Deprecated\", &m[\"desc\"], Some(&m[\"desc\"]), filename));\n+        .map(|m| Lint::new(&m[\"name\"], \"Deprecated\", &m[\"desc\"], Some(&m[\"desc\"]), filename));\n     // Removing the `.collect::<Vec<Lint>>().into_iter()` causes some lifetime issues due to the map\n     lints.chain(deprecated).collect::<Vec<Lint>>().into_iter()\n }\n \n /// Collects all .rs files in the `clippy_lints/src` directory\n-fn lint_files() -> impl Iterator<Item=walkdir::DirEntry> {\n+fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n     // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n     // Otherwise we would not collect all the lints, for example in `clippy_lints/src/methods/`.\n     WalkDir::new(\"../clippy_lints/src\")\n@@ -184,15 +199,27 @@ pub struct FileChange {\n ///\n /// See `replace_region_in_text` for documentation of the other options.\n #[allow(clippy::expect_fun_call)]\n-pub fn replace_region_in_file<F>(path: &str, start: &str, end: &str, replace_start: bool, write_back: bool, replacements: F) -> FileChange where F: Fn() -> Vec<String> {\n+pub fn replace_region_in_file<F>(\n+    path: &str,\n+    start: &str,\n+    end: &str,\n+    replace_start: bool,\n+    write_back: bool,\n+    replacements: F,\n+) -> FileChange\n+where\n+    F: Fn() -> Vec<String>,\n+{\n     let mut f = fs::File::open(path).expect(&format!(\"File not found: {}\", path));\n     let mut contents = String::new();\n-    f.read_to_string(&mut contents).expect(\"Something went wrong reading the file\");\n+    f.read_to_string(&mut contents)\n+        .expect(\"Something went wrong reading the file\");\n     let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n \n     if write_back {\n         let mut f = fs::File::create(path).expect(&format!(\"File not found: {}\", path));\n-        f.write_all(file_change.new_lines.as_bytes()).expect(\"Unable to write file\");\n+        f.write_all(file_change.new_lines.as_bytes())\n+            .expect(\"Unable to write file\");\n         // Ensure we write the changes with a trailing newline so that\n         // the file has the proper line endings.\n         f.write_all(b\"\\n\").expect(\"Unable to write file\");\n@@ -205,10 +232,10 @@ pub fn replace_region_in_file<F>(path: &str, start: &str, end: &str, replace_sta\n /// * `text` is the input text on which you want to perform the replacement\n /// * `start` is a `&str` that describes the delimiter line before the region you want to replace.\n ///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n-/// * `end` is a `&str` that describes the delimiter line until where the replacement should\n-///   happen.  As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n-/// * If `replace_start` is true, the `start` delimiter line is replaced as well.\n-///   The `end` delimiter line is never replaced.\n+/// * `end` is a `&str` that describes the delimiter line until where the replacement should happen.\n+///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n+/// * If `replace_start` is true, the `start` delimiter line is replaced as well. The `end`\n+///   delimiter line is never replaced.\n /// * `replacements` is a closure that has to return a `Vec<String>` which contains the new text.\n ///\n /// If you want to perform the replacement on files instead of already parsed text,\n@@ -218,18 +245,16 @@ pub fn replace_region_in_file<F>(path: &str, start: &str, end: &str, replace_sta\n ///\n /// ```\n /// let the_text = \"replace_start\\nsome text\\nthat will be replaced\\nreplace_end\";\n-/// let result = clippy_dev::replace_region_in_text(\n-///     the_text,\n-///     r#\"replace_start\"#,\n-///     r#\"replace_end\"#,\n-///     false,\n-///     || {\n-///         vec![\"a different\".to_string(), \"text\".to_string()]\n-///     }\n-/// ).new_lines;\n+/// let result = clippy_dev::replace_region_in_text(the_text, r#\"replace_start\"#, r#\"replace_end\"#, false, || {\n+///     vec![\"a different\".to_string(), \"text\".to_string()]\n+/// })\n+/// .new_lines;\n /// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n /// ```\n-pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange where F: Fn() -> Vec<String> {\n+pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n+where\n+    F: Fn() -> Vec<String>,\n+{\n     let lines = text.lines();\n     let mut in_old_region = false;\n     let mut found = false;\n@@ -264,7 +289,7 @@ pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_sta\n \n     FileChange {\n         changed: lines.ne(new_lines.clone()),\n-        new_lines: new_lines.join(\"\\n\")\n+        new_lines: new_lines.join(\"\\n\"),\n     }\n }\n \n@@ -291,7 +316,9 @@ declare_deprecated_lint! {\n     \"`assert!()` will be more flexible with RFC 2011\"\n }\n     \"#,\n-    \"module_name\").collect();\n+        \"module_name\",\n+    )\n+    .collect();\n \n     let expected = vec![\n         Lint::new(\"ptr_arg\", \"style\", \"really long text\", None, \"module_name\"),\n@@ -301,7 +328,7 @@ declare_deprecated_lint! {\n             \"Deprecated\",\n             \"`assert!()` will be more flexible with RFC 2011\",\n             Some(\"`assert!()` will be more flexible with RFC 2011\"),\n-            \"module_name\"\n+            \"module_name\",\n         ),\n     ];\n     assert_eq!(expected, result);\n@@ -312,7 +339,7 @@ fn test_replace_region() {\n     let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n     let expected = FileChange {\n         changed: true,\n-        new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string()\n+        new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string(),\n     };\n     let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n         vec![\"hello world\".to_string()]\n@@ -325,7 +352,7 @@ fn test_replace_region_with_start() {\n     let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n     let expected = FileChange {\n         changed: true,\n-        new_lines: \"\\nhello world\\ndef\\nghi\".to_string()\n+        new_lines: \"\\nhello world\\ndef\\nghi\".to_string(),\n     };\n     let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n         vec![\"hello world\".to_string()]\n@@ -338,11 +365,9 @@ fn test_replace_region_no_changes() {\n     let text = \"123\\n456\\n789\";\n     let expected = FileChange {\n         changed: false,\n-        new_lines: \"123\\n456\\n789\".to_string()\n+        new_lines: \"123\\n456\\n789\".to_string(),\n     };\n-    let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, || {\n-        vec![]\n-    });\n+    let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, || vec![]);\n     assert_eq!(expected, result);\n }\n \n@@ -352,11 +377,15 @@ fn test_usable_lints() {\n         Lint::new(\"should_assert_eq\", \"Deprecated\", \"abc\", Some(\"Reason\"), \"module_name\"),\n         Lint::new(\"should_assert_eq2\", \"Not Deprecated\", \"abc\", None, \"module_name\"),\n         Lint::new(\"should_assert_eq2\", \"internal\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"internal_style\", \"abc\", None, \"module_name\")\n-    ];\n-    let expected = vec![\n-        Lint::new(\"should_assert_eq2\", \"Not Deprecated\", \"abc\", None, \"module_name\")\n+        Lint::new(\"should_assert_eq2\", \"internal_style\", \"abc\", None, \"module_name\"),\n     ];\n+    let expected = vec![Lint::new(\n+        \"should_assert_eq2\",\n+        \"Not Deprecated\",\n+        \"abc\",\n+        None,\n+        \"module_name\",\n+    )];\n     assert_eq!(expected, Lint::usable_lints(lints.into_iter()).collect::<Vec<Lint>>());\n }\n \n@@ -368,13 +397,17 @@ fn test_by_lint_group() {\n         Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n     ];\n     let mut expected: HashMap<String, Vec<Lint>> = HashMap::new();\n-    expected.insert(\"group1\".to_string(), vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n-    ]);\n-    expected.insert(\"group2\".to_string(), vec![\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")\n-    ]);\n+    expected.insert(\n+        \"group1\".to_string(),\n+        vec![\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n+        ],\n+    );\n+    expected.insert(\n+        \"group2\".to_string(),\n+        vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")],\n+    );\n     assert_eq!(expected, Lint::by_lint_group(&lints));\n }\n \n@@ -387,17 +420,29 @@ fn test_gen_changelog_lint_list() {\n     ];\n     let expected = vec![\n         format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n-        format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string())\n+        format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n     ];\n     assert_eq!(expected, gen_changelog_lint_list(lints));\n }\n \n #[test]\n fn test_gen_deprecated() {\n     let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", Some(\"has been superseeded by should_assert_eq2\"), \"module_name\"),\n-        Lint::new(\"another_deprecated\", \"group2\", \"abc\", Some(\"will be removed\"), \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")\n+        Lint::new(\n+            \"should_assert_eq\",\n+            \"group1\",\n+            \"abc\",\n+            Some(\"has been superseeded by should_assert_eq2\"),\n+            \"module_name\",\n+        ),\n+        Lint::new(\n+            \"another_deprecated\",\n+            \"group2\",\n+            \"abc\",\n+            Some(\"will be removed\"),\n+            \"module_name\",\n+        ),\n+        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n     ];\n     let expected: Vec<String> = vec![\n         \"    store.register_removed(\",\n@@ -407,8 +452,11 @@ fn test_gen_deprecated() {\n         \"    store.register_removed(\",\n         \"        \\\"another_deprecated\\\",\",\n         \"        \\\"will be removed\\\",\",\n-        \"    );\"\n-    ].into_iter().map(String::from).collect();\n+        \"    );\",\n+    ]\n+    .into_iter()\n+    .map(String::from)\n+    .collect();\n     assert_eq!(expected, gen_deprecated(&lints));\n }\n "}, {"sha": "4ed0796001018b88d89407853676a61e95b5509e", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 53, "deletions": 35, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f9c0e2a4cba73539a3b005d293a230f6a36555a0/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c0e2a4cba73539a3b005d293a230f6a36555a0/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=f9c0e2a4cba73539a3b005d293a230f6a36555a0", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n extern crate clap;\n extern crate clippy_dev;\n extern crate regex;\n@@ -18,31 +17,33 @@ use clippy_dev::*;\n #[derive(PartialEq)]\n enum UpdateMode {\n     Check,\n-    Change\n+    Change,\n }\n \n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n         .subcommand(\n             SubCommand::with_name(\"update_lints\")\n-                .about(\"Makes sure that:\\n \\\n-                       * the lint count in README.md is correct\\n \\\n-                       * the changelog contains markdown link references at the bottom\\n \\\n-                       * all lint groups include the correct lints\\n \\\n-                       * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n-                       * all lints are registered in the lint store\")\n-                .arg(\n-                    Arg::with_name(\"print-only\")\n-                        .long(\"print-only\")\n-                        .help(\"Print a table of lints to STDOUT. This does not include deprecated and internal lints. (Does not modify any files)\")\n+                .about(\n+                    \"Makes sure that:\\n \\\n+                     * the lint count in README.md is correct\\n \\\n+                     * the changelog contains markdown link references at the bottom\\n \\\n+                     * all lint groups include the correct lints\\n \\\n+                     * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n+                     * all lints are registered in the lint store\",\n                 )\n+                .arg(Arg::with_name(\"print-only\").long(\"print-only\").help(\n+                    \"Print a table of lints to STDOUT. \\\n+                     This does not include deprecated and internal lints. \\\n+                     (Does not modify any files)\",\n+                ))\n                 .arg(\n                     Arg::with_name(\"check\")\n                         .long(\"check\")\n                         .help(\"Checks that util/dev update_lints has been run. Used on CI.\"),\n-                )\n-            )\n-            .get_matches();\n+                ),\n+        )\n+        .get_matches();\n \n     if let Some(matches) = matches.subcommand_matches(\"update_lints\") {\n         if matches.is_present(\"print-only\") {\n@@ -62,13 +63,21 @@ fn print_lints() {\n     let grouped_by_lint_group = Lint::by_lint_group(&usable_lints);\n \n     for (lint_group, mut lints) in grouped_by_lint_group {\n-        if lint_group == \"Deprecated\" { continue; }\n+        if lint_group == \"Deprecated\" {\n+            continue;\n+        }\n         println!(\"\\n## {}\", lint_group);\n \n         lints.sort_by_key(|l| l.name.clone());\n \n         for lint in lints {\n-            println!(\"* [{}]({}#{}) ({})\", lint.name, clippy_dev::DOCS_LINK.clone(), lint.name, lint.desc);\n+            println!(\n+                \"* [{}]({}#{}) ({})\",\n+                lint.name,\n+                clippy_dev::DOCS_LINK.clone(),\n+                lint.name,\n+                lint.desc\n+            );\n         }\n     }\n \n@@ -99,26 +108,29 @@ fn update_lints(update_mode: &UpdateMode) {\n         \"<!-- end autogenerated links to lint list -->\",\n         false,\n         update_mode == &UpdateMode::Change,\n-        || { gen_changelog_lint_list(lint_list.clone()) }\n-    ).changed;\n+        || gen_changelog_lint_list(lint_list.clone()),\n+    )\n+    .changed;\n \n     file_change |= replace_region_in_file(\n         \"../clippy_lints/src/lib.rs\",\n         \"begin deprecated lints\",\n         \"end deprecated lints\",\n         false,\n         update_mode == &UpdateMode::Change,\n-        || { gen_deprecated(&lint_list) }\n-    ).changed;\n+        || gen_deprecated(&lint_list),\n+    )\n+    .changed;\n \n     file_change |= replace_region_in_file(\n         \"../clippy_lints/src/lib.rs\",\n         \"begin lints modules\",\n         \"end lints modules\",\n         false,\n         update_mode == &UpdateMode::Change,\n-        || { gen_modules_list(lint_list.clone()) }\n-    ).changed;\n+        || gen_modules_list(lint_list.clone()),\n+    )\n+    .changed;\n \n     // Generate lists of lints in the clippy::all lint group\n     file_change |= replace_region_in_file(\n@@ -129,16 +141,18 @@ fn update_lints(update_mode: &UpdateMode) {\n         update_mode == &UpdateMode::Change,\n         || {\n             // clippy::all should only include the following lint groups:\n-            let all_group_lints = usable_lints.clone().into_iter().filter(|l| {\n-                l.group == \"correctness\" ||\n-                  l.group == \"style\" ||\n-                  l.group == \"complexity\" ||\n-                  l.group == \"perf\"\n-            }).collect();\n+            let all_group_lints = usable_lints\n+                .clone()\n+                .into_iter()\n+                .filter(|l| {\n+                    l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n+                })\n+                .collect();\n \n             gen_lint_group_list(all_group_lints)\n-        }\n-    ).changed;\n+        },\n+    )\n+    .changed;\n \n     // Generate the list of lints for all other lint groups\n     for (lint_group, lints) in Lint::by_lint_group(&usable_lints) {\n@@ -148,12 +162,16 @@ fn update_lints(update_mode: &UpdateMode) {\n             r#\"\\]\\);\"#,\n             false,\n             update_mode == &UpdateMode::Change,\n-            || { gen_lint_group_list(lints.clone()) }\n-        ).changed;\n+            || gen_lint_group_list(lints.clone()),\n+        )\n+        .changed;\n     }\n \n     if update_mode == &UpdateMode::Check && file_change {\n-      println!(\"Not all lints defined properly. Please run `util/dev update_lints` to make sure all lints are defined properly.\");\n-      std::process::exit(1);\n+        println!(\n+            \"Not all lints defined properly. \\\n+             Please run `util/dev update_lints` to make sure all lints are defined properly.\"\n+        );\n+        std::process::exit(1);\n     }\n }"}]}