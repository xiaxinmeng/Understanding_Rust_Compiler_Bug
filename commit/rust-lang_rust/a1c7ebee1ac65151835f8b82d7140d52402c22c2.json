{"sha": "a1c7ebee1ac65151835f8b82d7140d52402c22c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYzdlYmVlMWFjNjUxNTE4MzVmOGI4MmQ3MTQwZDUyNDAyYzIyYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-14T12:26:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-14T12:26:29Z"}, "message": "auto merge of #12874 : huonw/rust/printier-rustc, r=alexcrichton\n\nrustc: make stack traces print for .span_bug/.bug.\r\n\r\nPreviously a call to either of those to diagnostic printers would defer\r\nto the `fatal` equivalents, which explicitly silence the stderr\r\nprinting, including a stack trace from `RUST_LOG=std::rt::backtrace`.\r\n\r\nThis splits the bug printers out to their own diagnostic type so that\r\nthings work properly.\r\n\r\nAlso, this removes the `Ok(...)` that was being printed around the\r\nsubtask's stderr output.", "tree": {"sha": "248008ed59eb85597d31d5e420994ab602bc1745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/248008ed59eb85597d31d5e420994ab602bc1745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c7ebee1ac65151835f8b82d7140d52402c22c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c7ebee1ac65151835f8b82d7140d52402c22c2", "html_url": "https://github.com/rust-lang/rust/commit/a1c7ebee1ac65151835f8b82d7140d52402c22c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c7ebee1ac65151835f8b82d7140d52402c22c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d367482491ab82af8cc88f2f822fef725237cfbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d367482491ab82af8cc88f2f822fef725237cfbe", "html_url": "https://github.com/rust-lang/rust/commit/d367482491ab82af8cc88f2f822fef725237cfbe"}, {"sha": "edb6b025c48205c5084a648c7ef7859adbf5c705", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb6b025c48205c5084a648c7ef7859adbf5c705", "html_url": "https://github.com/rust-lang/rust/commit/edb6b025c48205c5084a648c7ef7859adbf5c705"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "9fe4a122b4aca5b478d66c558c22d795abfe2dbc", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a1c7ebee1ac65151835f8b82d7140d52402c22c2/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c7ebee1ac65151835f8b82d7140d52402c22c2/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a1c7ebee1ac65151835f8b82d7140d52402c22c2", "patch": "@@ -134,6 +134,9 @@ pub mod lib {\n     pub mod llvmdeps;\n }\n \n+static BUG_REPORT_URL: &'static str =\n+    \"http://static.rust-lang.org/doc/master/complement-bugreport.html\";\n+\n pub fn version(argv0: &str) {\n     let vers = match option_env!(\"CFG_VERSION\") {\n         Some(vers) => vers,\n@@ -393,20 +396,31 @@ pub fn monitor(f: proc()) {\n             // Task failed without emitting a fatal diagnostic\n             if !value.is::<diagnostic::FatalError>() {\n                 let mut emitter = diagnostic::EmitterWriter::stderr();\n-                emitter.emit(\n-                    None,\n-                    diagnostic::ice_msg(\"unexpected failure\"),\n-                    diagnostic::Error);\n+\n+                // a .span_bug or .bug call has already printed what\n+                // it wants to print.\n+                if !value.is::<diagnostic::ExplicitBug>() {\n+                    emitter.emit(\n+                        None,\n+                        \"unexpected failure\",\n+                        diagnostic::Bug);\n+                }\n \n                 let xs = [\n-                    ~\"the compiler hit an unexpected failure path. \\\n-                     this is a bug\",\n+                    ~\"the compiler hit an unexpected failure path. this is a bug.\",\n+                    \"we would appreciate a bug report: \" + BUG_REPORT_URL,\n+                    ~\"run with `RUST_LOG=std::rt::backtrace` for a backtrace\",\n                 ];\n                 for note in xs.iter() {\n                     emitter.emit(None, *note, diagnostic::Note)\n                 }\n \n-                println!(\"{}\", r.read_to_str());\n+                match r.read_to_str() {\n+                    Ok(s) => println!(\"{}\", s),\n+                    Err(e) => emitter.emit(None,\n+                                           format!(\"failed to read internal stderr: {}\", e),\n+                                           diagnostic::Error),\n+                }\n             }\n \n             // Fail so the process returns a failure code, but don't pollute the"}, {"sha": "2da8b7868053a7d25045093815bc95e4b2bd6006", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a1c7ebee1ac65151835f8b82d7140d52402c22c2/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c7ebee1ac65151835f8b82d7140d52402c22c2/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=a1c7ebee1ac65151835f8b82d7140d52402c22c2", "patch": "@@ -17,8 +17,6 @@ use std::io;\n use std::iter::range;\n use term;\n \n-static BUG_REPORT_URL: &'static str =\n-    \"http://static.rust-lang.org/doc/master/complement-bugreport.html\";\n // maximum number of lines we will print for each error; arbitrary.\n static MAX_LINES: uint = 6u;\n \n@@ -34,6 +32,10 @@ pub trait Emitter {\n /// how a rustc task died (if so desired).\n pub struct FatalError;\n \n+/// Signifies that the compiler died with an explicit call to `.bug`\n+/// or `.span_bug` rather than a failed assertion, etc.\n+pub struct ExplicitBug;\n+\n // a span-handler is like a handler but also\n // accepts span information for source-location\n // reporting.\n@@ -61,7 +63,8 @@ impl SpanHandler {\n         self.handler.custom_emit(&*self.cm, sp, msg, Note);\n     }\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n-        self.span_fatal(sp, ice_msg(msg));\n+        self.handler.emit(Some((&*self.cm, sp)), msg, Bug);\n+        fail!(ExplicitBug);\n     }\n     pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! {\n         self.span_bug(sp, ~\"unimplemented \" + msg);\n@@ -116,7 +119,8 @@ impl Handler {\n         self.emit.borrow_mut().get().emit(None, msg, Note);\n     }\n     pub fn bug(&self, msg: &str) -> ! {\n-        self.fatal(ice_msg(msg));\n+        self.emit.borrow_mut().get().emit(None, msg, Bug);\n+        fail!(ExplicitBug);\n     }\n     pub fn unimpl(&self, msg: &str) -> ! {\n         self.bug(~\"unimplemented \" + msg);\n@@ -133,11 +137,6 @@ impl Handler {\n     }\n }\n \n-pub fn ice_msg(msg: &str) -> ~str {\n-    format!(\"internal compiler error: {}\\nThis message reflects a bug in the Rust compiler. \\\n-            \\nWe would appreciate a bug report: {}\", msg, BUG_REPORT_URL)\n-}\n-\n pub fn mk_span_handler(handler: @Handler, cm: @codemap::CodeMap)\n                        -> @SpanHandler {\n     @SpanHandler {\n@@ -159,6 +158,7 @@ pub fn mk_handler(e: ~Emitter) -> @Handler {\n \n #[deriving(Eq)]\n pub enum Level {\n+    Bug,\n     Fatal,\n     Error,\n     Warning,\n@@ -170,6 +170,7 @@ impl fmt::Show for Level {\n         use std::fmt::Show;\n \n         match *self {\n+            Bug => \"error: internal compiler error\".fmt(f),\n             Fatal | Error => \"error\".fmt(f),\n             Warning => \"warning\".fmt(f),\n             Note => \"note\".fmt(f),\n@@ -180,7 +181,7 @@ impl fmt::Show for Level {\n impl Level {\n     fn color(self) -> term::color::Color {\n         match self {\n-            Fatal | Error => term::color::BRIGHT_RED,\n+            Bug | Fatal | Error => term::color::BRIGHT_RED,\n             Warning => term::color::BRIGHT_YELLOW,\n             Note => term::color::BRIGHT_GREEN\n         }"}]}