{"sha": "54664f188403a5bb72634b5e3ba9b2f7b60b4d9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NjY0ZjE4ODQwM2E1YmI3MjYzNGI1ZTNiYTliMmY3YjYwYjRkOWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-03T06:38:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-03T06:38:01Z"}, "message": "Auto merge of #31263 - dhuseby:fixing_bsd_builds, r=alexcrichton\n\nSomething went haywire with github last night and the old PR https://github.com/rust-lang/rust/pull/31230 got closed somehow.  This new PR is to replace the old one.  This incorporates all of the feedback from the other PR.\n\n@alexcrichton I incorporated the suggestion from @semarie and the result is cleaner and clearer.  I think this is ready to go.", "tree": {"sha": "6c680499f3822c50f9e900b2acc079bf4ca0f0b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c680499f3822c50f9e900b2acc079bf4ca0f0b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f", "html_url": "https://github.com/rust-lang/rust/commit/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50df6b9dc5144df09ef6b8519afd3657abdab03f", "url": "https://api.github.com/repos/rust-lang/rust/commits/50df6b9dc5144df09ef6b8519afd3657abdab03f", "html_url": "https://github.com/rust-lang/rust/commit/50df6b9dc5144df09ef6b8519afd3657abdab03f"}, {"sha": "ca6f9203461f57a1f1a88266efeb61a5aa47d66b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6f9203461f57a1f1a88266efeb61a5aa47d66b", "html_url": "https://github.com/rust-lang/rust/commit/ca6f9203461f57a1f1a88266efeb61a5aa47d66b"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "91931811234625c6c3a2bd496857eb82b4c33e68", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=54664f188403a5bb72634b5e3ba9b2f7b60b4d9f", "patch": "@@ -211,20 +211,14 @@ impl DirEntry {\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"netbsd\",\n-              target_os = \"openbsd\"))]\n-    fn name_bytes(&self) -> &[u8] {\n-        unsafe {\n-            ::slice::from_raw_parts(self.entry.d_name.as_ptr() as *const u8,\n-                                    self.entry.d_namlen as usize)\n-        }\n-    }\n-    #[cfg(any(target_os = \"freebsd\",\n+              target_os = \"openbsd\",\n+              target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\"))]\n     fn name_bytes(&self) -> &[u8] {\n         unsafe {\n             ::slice::from_raw_parts(self.entry.d_name.as_ptr() as *const u8,\n-                                    self.entry.d_namelen as usize)\n+                                    self.entry.d_namlen as usize)\n         }\n     }\n     #[cfg(any(target_os = \"android\","}, {"sha": "b5cbcaa44d56c5993928fb612997abe441f3d97e", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=54664f188403a5bb72634b5e3ba9b2f7b60b4d9f", "patch": "@@ -135,26 +135,38 @@ mod imp {\n         Handler { _data: MAIN_ALTSTACK };\n     }\n \n-    pub unsafe fn make_handler() -> Handler {\n-        let alt_stack = mmap(ptr::null_mut(),\n-                             SIGSTKSZ,\n-                             PROT_READ | PROT_WRITE,\n-                             MAP_PRIVATE | MAP_ANON,\n-                             -1,\n-                             0);\n-        if alt_stack == MAP_FAILED {\n+    unsafe fn get_stackp() -> *mut libc::c_void {\n+        let stackp = mmap(ptr::null_mut(),\n+                          SIGSTKSZ,\n+                          PROT_READ | PROT_WRITE,\n+                          MAP_PRIVATE | MAP_ANON,\n+                          -1,\n+                          0);\n+        if stackp == MAP_FAILED {\n             panic!(\"failed to allocate an alternative stack\");\n         }\n+        stackp\n+    }\n \n-        let mut stack: libc::stack_t = mem::zeroed();\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"macos\",\n+              target_os = \"bitrig\",\n+              target_os = \"netbsd\",\n+              target_os = \"openbsd\"))]\n+    unsafe fn get_stack() -> libc::stack_t {\n+        libc::stack_t { ss_sp: get_stackp(), ss_flags: 0, ss_size: SIGSTKSZ }\n+    }\n \n-        stack.ss_sp = alt_stack;\n-        stack.ss_flags = 0;\n-        stack.ss_size = SIGSTKSZ;\n+    #[cfg(any(target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n+    unsafe fn get_stack() -> libc::stack_t {\n+        libc::stack_t { ss_sp: get_stackp() as *mut i8, ss_flags: 0, ss_size: SIGSTKSZ }\n+    }\n \n+    pub unsafe fn make_handler() -> Handler {\n+        let stack = get_stack();\n         sigaltstack(&stack, ptr::null_mut());\n-\n-        Handler { _data: alt_stack }\n+        Handler { _data: stack.ss_sp as *mut libc::c_void }\n     }\n \n     pub unsafe fn drop_handler(handler: &mut Handler) {"}, {"sha": "443356fbe7cd54a83b408d6087482ce6a4a1b14b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54664f188403a5bb72634b5e3ba9b2f7b60b4d9f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=54664f188403a5bb72634b5e3ba9b2f7b60b4d9f", "patch": "@@ -939,18 +939,12 @@ fn get_concurrency() -> usize {\n     fn num_cpus() -> usize {\n         let mut cpus: libc::c_uint = 0;\n         let mut cpus_size = std::mem::size_of_val(&cpus);\n-        let mut mib = [libc::CTL_HW, libc::HW_AVAILCPU, 0, 0];\n \n         unsafe {\n-            libc::sysctl(mib.as_mut_ptr(),\n-                         2,\n-                         &mut cpus as *mut _ as *mut _,\n-                         &mut cpus_size as *mut _ as *mut _,\n-                         0 as *mut _,\n-                         0);\n+            cpus = libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as libc::c_uint;\n         }\n         if cpus < 1 {\n-            mib[1] = libc::HW_NCPU;\n+            let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n             unsafe {\n                 libc::sysctl(mib.as_mut_ptr(),\n                              2,"}]}