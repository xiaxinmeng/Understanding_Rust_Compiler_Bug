{"sha": "fb61b851efd7da06e72b193174305ab37abbf609", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNjFiODUxZWZkN2RhMDZlNzJiMTkzMTc0MzA1YWIzN2FiYmY2MDk=", "commit": {"author": {"name": "Thomas Bracht Laumann Jespersen", "email": "laumann.thomas@gmail.com", "date": "2019-06-06T19:42:15Z"}, "committer": {"name": "Thomas Bracht Laumann Jespersen", "email": "laumann.thomas@gmail.com", "date": "2019-06-07T09:03:01Z"}, "message": "libcore/pin: Minor grammar corrections for module documentation\n\nThis is by no means exhaustive, but I noticed a few grammatical errors\nwhen reading the documentation, and decided just to push these.\n\nSome standard rules/guidelines I followed:\n\n * Do not split infinitives, ie \"not to move\" instead of \"to not move\"\n\n * Do not use \"since\" when you want to say \"because\" or \"as\" - the word\n   \"since\" has a temporal meaning\n\nIn addition:\n\n * Fix a small typo: \"Similarily\" should be \"Similarly\"\n\n * Delete double-spaces after full stop", "tree": {"sha": "e5272648ac4fcef2fe780c2e6091bacd6d4cfd0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5272648ac4fcef2fe780c2e6091bacd6d4cfd0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb61b851efd7da06e72b193174305ab37abbf609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb61b851efd7da06e72b193174305ab37abbf609", "html_url": "https://github.com/rust-lang/rust/commit/fb61b851efd7da06e72b193174305ab37abbf609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb61b851efd7da06e72b193174305ab37abbf609/comments", "author": null, "committer": null, "parents": [{"sha": "8b36867093fb774bcbd9f787cbc470a5f44c1310", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b36867093fb774bcbd9f787cbc470a5f44c1310", "html_url": "https://github.com/rust-lang/rust/commit/8b36867093fb774bcbd9f787cbc470a5f44c1310"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "c5247e134c86a48e0c0dbeb50aad8c133fb3b586", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fb61b851efd7da06e72b193174305ab37abbf609/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb61b851efd7da06e72b193174305ab37abbf609/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=fb61b851efd7da06e72b193174305ab37abbf609", "patch": "@@ -1,10 +1,10 @@\n //! Types that pin data to its location in memory.\n //!\n-//! It is sometimes useful to have objects that are guaranteed to not move,\n+//! It is sometimes useful to have objects that are guaranteed not to move,\n //! in the sense that their placement in memory does not change, and can thus be relied upon.\n //! A prime example of such a scenario would be building self-referential structs,\n-//! since moving an object with pointers to itself will invalidate them,\n-//! which could cause undefined behavior.\n+//! as moving an object with pointers to itself will invalidate them, which could cause undefined\n+//! behavior.\n //!\n //! A [`Pin<P>`] ensures that the pointee of any pointer type `P` has a stable location in memory,\n //! meaning it cannot be moved elsewhere and its memory cannot be deallocated\n@@ -15,9 +15,10 @@\n //! moving the values they contain: you can move out of a `Box<T>`, or you can use [`mem::swap`].\n //! [`Pin<P>`] wraps a pointer type `P`, so `Pin<Box<T>>` functions much like a regular `Box<T>`:\n //! when a `Pin<Box<T>>` gets dropped, so do its contents, and the memory gets deallocated.\n-//! Similarily, `Pin<&mut T>` is a lot like `&mut T`. However, [`Pin<P>`] does not let clients\n+//! Similarly, `Pin<&mut T>` is a lot like `&mut T`. However, [`Pin<P>`] does not let clients\n //! actually obtain a `Box<T>` or `&mut T` to pinned data, which implies that you cannot use\n //! operations such as [`mem::swap`]:\n+//!\n //! ```\n //! use std::pin::Pin;\n //! fn swap_pins<T>(x: Pin<&mut T>, y: Pin<&mut T>) {\n@@ -39,19 +40,19 @@\n //! as a \"`P`-style pointer\" to a pinned `P::Target` -- so, a `Pin<Box<T>>` is\n //! an owned pointer to a pinned `T`, and a `Pin<Rc<T>>` is a reference-counted\n //! pointer to a pinned `T`.\n-//! For correctness, [`Pin<P>`] relies on the [`Deref`] and [`DerefMut`] implementations\n-//! to not move out of their `self` parameter, and to only ever return a pointer\n-//! to pinned data when they are called on a pinned pointer.\n+//! For correctness, [`Pin<P>`] relies on the implementations of [`Deref`] and\n+//! [`DerefMut`] not to move out of their `self` parameter, and only ever to\n+//! return a pointer to pinned data when they are called on a pinned pointer.\n //!\n //! # `Unpin`\n //!\n-//! However, these restrictions are usually not necessary. Many types are always freely\n-//! movable, even when pinned, because they do not rely on having a stable address.\n-//! This includes all the basic types (like `bool`, `i32`, references)\n-//! as well as types consisting solely of these types.\n-//! Types that do not care about pinning implement the [`Unpin`] auto-trait, which\n-//! cancels the effect of [`Pin<P>`]. For `T: Unpin`, `Pin<Box<T>>` and `Box<T>` function\n-//! identically, as do `Pin<&mut T>` and `&mut T`.\n+//! Many types are always freely movable, even when pinned, because they do not\n+//! rely on having a stable address. This includes all the basic types (like\n+//! `bool`, `i32`, and references) as well as types consisting solely of these\n+//! types. Types that do not care about pinning implement the [`Unpin`]\n+//! auto-trait, which cancels the effect of [`Pin<P>`]. For `T: Unpin`,\n+//! `Pin<Box<T>>` and `Box<T>` function identically, as do `Pin<&mut T>` and\n+//! `&mut T`.\n //!\n //! Note that pinning and `Unpin` only affect the pointed-to type `P::Target`, not the pointer\n //! type `P` itself that got wrapped in `Pin<P>`. For example, whether or not `Box<T>` is\n@@ -65,11 +66,11 @@\n //! use std::marker::PhantomPinned;\n //! use std::ptr::NonNull;\n //!\n-//! // This is a self-referential struct since the slice field points to the data field.\n+//! // This is a self-referential struct because the slice field points to the data field.\n //! // We cannot inform the compiler about that with a normal reference,\n-//! // since this pattern cannot be described with the usual borrowing rules.\n-//! // Instead we use a raw pointer, though one which is known to not be null,\n-//! // since we know it's pointing at the string.\n+//! // as this pattern cannot be described with the usual borrowing rules.\n+//! // Instead we use a raw pointer, though one which is known not to be null,\n+//! // as we know it's pointing at the string.\n //! struct Unmovable {\n //!     data: String,\n //!     slice: NonNull<String>,\n@@ -146,7 +147,7 @@\n //! section needs to function correctly.\n //!\n //! Notice that this guarantee does *not* mean that memory does not leak! It is still\n-//! completely okay not to ever call `drop` on a pinned element (e.g., you can still\n+//! completely okay not ever to call `drop` on a pinned element (e.g., you can still\n //! call [`mem::forget`] on a `Pin<Box<T>>`). In the example of the doubly-linked\n //! list, that element would just stay in the list. However you may not free or reuse the storage\n //! *without calling `drop`*.\n@@ -192,7 +193,7 @@\n //!     `Unpin`. This is the default, but `Unpin` is a safe trait, so as the author of\n //!     the wrapper it is your responsibility *not* to add something like\n //!     `impl<T> Unpin for Wrapper<T>`. (Notice that adding a projection operation\n-//!     requires unsafe code, so the fact that `Unpin` is a safe trait  does not break\n+//!     requires unsafe code, so the fact that `Unpin` is a safe trait does not break\n //!     the principle that you only have to worry about any of this if you use `unsafe`.)\n //! 2.  The destructor of the wrapper must not move structural fields out of its argument. This\n //!     is the exact point that was raised in the [previous section][drop-impl]: `drop` takes"}]}