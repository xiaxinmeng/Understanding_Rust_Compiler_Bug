{"sha": "ba6a4595285e38f35970e66db903475989e0be6f", "node_id": "C_kwDOAAsO6NoAKGJhNmE0NTk1Mjg1ZTM4ZjM1OTcwZTY2ZGI5MDM0NzU5ODllMGJlNmY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-05T17:05:11Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:28:59Z"}, "message": "Move `BytesCountToLen` into `Methods` lint pass", "tree": {"sha": "35b94dd061531babf7fa28b1e59f3ec786fafc72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b94dd061531babf7fa28b1e59f3ec786fafc72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba6a4595285e38f35970e66db903475989e0be6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6a4595285e38f35970e66db903475989e0be6f", "html_url": "https://github.com/rust-lang/rust/commit/ba6a4595285e38f35970e66db903475989e0be6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba6a4595285e38f35970e66db903475989e0be6f/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25028986864fbb3231c54feb5e769c8778e037bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/25028986864fbb3231c54feb5e769c8778e037bf", "html_url": "https://github.com/rust-lang/rust/commit/25028986864fbb3231c54feb5e769c8778e037bf"}], "stats": {"total": 143, "additions": 68, "deletions": 75}, "files": [{"sha": "d70dbf5b23904aa282d7be16b3c025add46f1781", "filename": "clippy_lints/src/bytes_count_to_len.rs", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/25028986864fbb3231c54feb5e769c8778e037bf/clippy_lints%2Fsrc%2Fbytes_count_to_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25028986864fbb3231c54feb5e769c8778e037bf/clippy_lints%2Fsrc%2Fbytes_count_to_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytes_count_to_len.rs?ref=25028986864fbb3231c54feb5e769c8778e037bf", "patch": "@@ -1,70 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{match_def_path, paths};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir as hir;\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// It checks for `str::bytes().count()` and suggests replacing it with\n-    /// `str::len()`.\n-    ///\n-    /// ### Why is this bad?\n-    /// `str::bytes().count()` is longer and may not be as performant as using\n-    /// `str::len()`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// \"hello\".bytes().count();\n-    /// String::from(\"hello\").bytes().count();\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// \"hello\".len();\n-    /// String::from(\"hello\").len();\n-    /// ```\n-    #[clippy::version = \"1.62.0\"]\n-    pub BYTES_COUNT_TO_LEN,\n-    complexity,\n-    \"Using `bytes().count()` when `len()` performs the same functionality\"\n-}\n-\n-declare_lint_pass!(BytesCountToLen => [BYTES_COUNT_TO_LEN]);\n-\n-impl<'tcx> LateLintPass<'tcx> for BytesCountToLen {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if_chain! {\n-            if let hir::ExprKind::MethodCall(_, expr_args, _) = &expr.kind;\n-            if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-            if match_def_path(cx, expr_def_id, &paths::ITER_COUNT);\n-\n-            if let [bytes_expr] = &**expr_args;\n-            if let hir::ExprKind::MethodCall(_, bytes_args, _) = &bytes_expr.kind;\n-            if let Some(bytes_def_id) = cx.typeck_results().type_dependent_def_id(bytes_expr.hir_id);\n-            if match_def_path(cx, bytes_def_id, &paths::STR_BYTES);\n-\n-            if let [str_expr] = &**bytes_args;\n-            let ty = cx.typeck_results().expr_ty(str_expr).peel_refs();\n-\n-            if is_type_diagnostic_item(cx, ty, sym::String) || ty.kind() == &ty::Str;\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                span_lint_and_sugg(\n-                    cx,\n-                    BYTES_COUNT_TO_LEN,\n-                    expr.span,\n-                    \"using long and hard to read `.bytes().count()`\",\n-                    \"consider calling `.len()` instead\",\n-                    format!(\"{}.len()\", snippet_with_applicability(cx, str_expr.span, \"..\", &mut applicability)),\n-                    applicability\n-                );\n-            }\n-        };\n-    }\n-}"}, {"sha": "f48e542ee4180efb1d3c1c6659e541eb195993be", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=ba6a4595285e38f35970e66db903475989e0be6f", "patch": "@@ -20,7 +20,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(booleans::NONMINIMAL_BOOL),\n     LintId::of(booleans::OVERLY_COMPLEX_BOOL_EXPR),\n     LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n-    LintId::of(bytes_count_to_len::BYTES_COUNT_TO_LEN),\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n@@ -151,6 +150,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n     LintId::of(methods::BIND_INSTEAD_OF_MAP),\n+    LintId::of(methods::BYTES_COUNT_TO_LEN),\n     LintId::of(methods::BYTES_NTH),\n     LintId::of(methods::CHARS_LAST_CMP),\n     LintId::of(methods::CHARS_NEXT_CMP),"}, {"sha": "324b380317f6d346981296cc568cec70017b8c31", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=ba6a4595285e38f35970e66db903475989e0be6f", "patch": "@@ -6,7 +6,6 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(attrs::DEPRECATED_CFG_ATTR),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n     LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n-    LintId::of(bytes_count_to_len::BYTES_COUNT_TO_LEN),\n     LintId::of(casts::CHAR_LIT_AS_U8),\n     LintId::of(casts::UNNECESSARY_CAST),\n     LintId::of(dereference::EXPLICIT_AUTO_DEREF),\n@@ -33,6 +32,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(matches::NEEDLESS_MATCH),\n     LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n     LintId::of(methods::BIND_INSTEAD_OF_MAP),\n+    LintId::of(methods::BYTES_COUNT_TO_LEN),\n     LintId::of(methods::CLONE_ON_COPY),\n     LintId::of(methods::FILTER_MAP_IDENTITY),\n     LintId::of(methods::FILTER_NEXT),"}, {"sha": "bfd12b98944d0adff917ea70f5ff68d52b249891", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=ba6a4595285e38f35970e66db903475989e0be6f", "patch": "@@ -59,7 +59,6 @@ store.register_lints(&[\n     booleans::NONMINIMAL_BOOL,\n     booleans::OVERLY_COMPLEX_BOOL_EXPR,\n     borrow_deref_ref::BORROW_DEREF_REF,\n-    bytes_count_to_len::BYTES_COUNT_TO_LEN,\n     cargo::CARGO_COMMON_METADATA,\n     cargo::MULTIPLE_CRATE_VERSIONS,\n     cargo::NEGATIVE_FEATURE_NAMES,\n@@ -284,6 +283,7 @@ store.register_lints(&[\n     mem_replace::MEM_REPLACE_WITH_DEFAULT,\n     mem_replace::MEM_REPLACE_WITH_UNINIT,\n     methods::BIND_INSTEAD_OF_MAP,\n+    methods::BYTES_COUNT_TO_LEN,\n     methods::BYTES_NTH,\n     methods::CHARS_LAST_CMP,\n     methods::CHARS_NEXT_CMP,"}, {"sha": "f4cb5e5bf16d7d8160a1323004f11d1dd2febb07", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ba6a4595285e38f35970e66db903475989e0be6f", "patch": "@@ -180,7 +180,6 @@ mod blocks_in_if_conditions;\n mod bool_assert_comparison;\n mod booleans;\n mod borrow_deref_ref;\n-mod bytes_count_to_len;\n mod cargo;\n mod case_sensitive_file_extension_comparisons;\n mod casts;\n@@ -907,7 +906,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(unnecessary_owned_empty_strings::UnnecessaryOwnedEmptyStrings));\n     store.register_early_pass(|| Box::new(pub_use::PubUse));\n     store.register_late_pass(|| Box::new(format_push_string::FormatPushString));\n-    store.register_late_pass(|| Box::new(bytes_count_to_len::BytesCountToLen));\n     let max_include_file_size = conf.max_include_file_size;\n     store.register_late_pass(move || Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n     store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));"}, {"sha": "fcfc25b523dac4d6dc16ff284fea4fe55e4d2e2f", "filename": "clippy_lints/src/methods/bytes_count_to_len.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs?ref=ba6a4595285e38f35970e66db903475989e0be6f", "patch": "@@ -0,0 +1,37 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::BYTES_COUNT_TO_LEN;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    count_recv: &'tcx hir::Expr<'_>,\n+    bytes_recv: &'tcx hir::Expr<'_>,\n+) {\n+    if_chain! {\n+        if let Some(bytes_id) = cx.typeck_results().type_dependent_def_id(count_recv.hir_id);\n+        if let Some(impl_id) = cx.tcx.impl_of_method(bytes_id);\n+        if cx.tcx.type_of(impl_id).is_str();\n+        let ty = cx.typeck_results().expr_ty(bytes_recv).peel_refs();\n+        if ty.is_str() || is_type_diagnostic_item(cx, ty, sym::String);\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                BYTES_COUNT_TO_LEN,\n+                expr.span,\n+                \"using long and hard to read `.bytes().count()`\",\n+                \"consider calling `.len()` instead\",\n+                format!(\"{}.len()\", snippet_with_applicability(cx, bytes_recv.span, \"..\", &mut applicability)),\n+                applicability\n+            );\n+        }\n+    };\n+}"}, {"sha": "eab3ca1842b0ff6124e0fd23935897012679e256", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ba6a4595285e38f35970e66db903475989e0be6f", "patch": "@@ -1,5 +1,6 @@\n mod bind_instead_of_map;\n mod bytecount;\n+mod bytes_count_to_len;\n mod bytes_nth;\n mod chars_cmp;\n mod chars_cmp_with_unwrap;\n@@ -2402,6 +2403,31 @@ declare_clippy_lint! {\n     \"use of naive `<slice>.filter(|&x| x == y).count()` to count byte values\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// It checks for `str::bytes().count()` and suggests replacing it with\n+    /// `str::len()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// `str::bytes().count()` is longer and may not be as performant as using\n+    /// `str::len()`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// \"hello\".bytes().count();\n+    /// String::from(\"hello\").bytes().count();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// \"hello\".len();\n+    /// String::from(\"hello\").len();\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub BYTES_COUNT_TO_LEN,\n+    complexity,\n+    \"Using `bytes().count()` when `len()` performs the same functionality\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2507,6 +2533,7 @@ impl_lint_pass!(Methods => [\n     ITER_ON_SINGLE_ITEMS,\n     ITER_ON_EMPTY_COLLECTIONS,\n     NAIVE_BYTECOUNT,\n+    BYTES_COUNT_TO_LEN,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2768,6 +2795,7 @@ impl Methods {\n                     },\n                     Some((\"map\", [_, arg], _)) => suspicious_map::check(cx, expr, recv, arg),\n                     Some((\"filter\", [recv2, arg], _)) => bytecount::check(cx, expr, recv2, arg),\n+                    Some((\"bytes\", [recv2], _)) => bytes_count_to_len::check(cx, expr, recv, recv2),\n                     _ => {},\n                 },\n                 (\"drain\", [arg]) => {"}]}