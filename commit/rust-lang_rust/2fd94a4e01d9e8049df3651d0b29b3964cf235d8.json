{"sha": "2fd94a4e01d9e8049df3651d0b29b3964cf235d8", "node_id": "C_kwDOAAsO6NoAKDJmZDk0YTRlMDFkOWU4MDQ5ZGYzNjUxZDBiMjliMzk2NGNmMjM1ZDg", "commit": {"author": {"name": "ksaleem", "email": "ksaleem@digitalocean.com", "date": "2023-01-29T18:48:06Z"}, "committer": {"name": "ksaleem", "email": "ksaleem@digitalocean.com", "date": "2023-01-29T22:35:36Z"}, "message": "prevents `len_without_is_empty` from yielding positive when `len` takes\nmore than just `&self` in non-standard implementations.\n\nchangelog: Fix [`len_without_is_empty`] false positive when len has a\nnon-standard method signature\n\nFixes #9520", "tree": {"sha": "b16eb1cef4148a3cd450f50e105d9d25c9fb11a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b16eb1cef4148a3cd450f50e105d9d25c9fb11a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd94a4e01d9e8049df3651d0b29b3964cf235d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd94a4e01d9e8049df3651d0b29b3964cf235d8", "html_url": "https://github.com/rust-lang/rust/commit/2fd94a4e01d9e8049df3651d0b29b3964cf235d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd94a4e01d9e8049df3651d0b29b3964cf235d8/comments", "author": {"login": "khayyamsaleem", "id": 7958841, "node_id": "MDQ6VXNlcjc5NTg4NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/7958841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khayyamsaleem", "html_url": "https://github.com/khayyamsaleem", "followers_url": "https://api.github.com/users/khayyamsaleem/followers", "following_url": "https://api.github.com/users/khayyamsaleem/following{/other_user}", "gists_url": "https://api.github.com/users/khayyamsaleem/gists{/gist_id}", "starred_url": "https://api.github.com/users/khayyamsaleem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khayyamsaleem/subscriptions", "organizations_url": "https://api.github.com/users/khayyamsaleem/orgs", "repos_url": "https://api.github.com/users/khayyamsaleem/repos", "events_url": "https://api.github.com/users/khayyamsaleem/events{/privacy}", "received_events_url": "https://api.github.com/users/khayyamsaleem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "khayyamsaleem", "id": 7958841, "node_id": "MDQ6VXNlcjc5NTg4NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/7958841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khayyamsaleem", "html_url": "https://github.com/khayyamsaleem", "followers_url": "https://api.github.com/users/khayyamsaleem/followers", "following_url": "https://api.github.com/users/khayyamsaleem/following{/other_user}", "gists_url": "https://api.github.com/users/khayyamsaleem/gists{/gist_id}", "starred_url": "https://api.github.com/users/khayyamsaleem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khayyamsaleem/subscriptions", "organizations_url": "https://api.github.com/users/khayyamsaleem/orgs", "repos_url": "https://api.github.com/users/khayyamsaleem/repos", "events_url": "https://api.github.com/users/khayyamsaleem/events{/privacy}", "received_events_url": "https://api.github.com/users/khayyamsaleem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c28d1f69a120de7fcdbc40fb17610a407a4900", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c28d1f69a120de7fcdbc40fb17610a407a4900", "html_url": "https://github.com/rust-lang/rust/commit/96c28d1f69a120de7fcdbc40fb17610a407a4900"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "920ab7f06336df59885d77e233baed59bb995882", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fd94a4e01d9e8049df3651d0b29b3964cf235d8/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd94a4e01d9e8049df3651d0b29b3964cf235d8/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=2fd94a4e01d9e8049df3651d0b29b3964cf235d8", "patch": "@@ -135,6 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if item.ident.name == sym::len;\n             if let ImplItemKind::Fn(sig, _) = &item.kind;\n             if sig.decl.implicit_self.has_implicit_self();\n+            if sig.decl.inputs.len() == 1;\n             if cx.effective_visibilities.is_exported(item.owner_id.def_id);\n             if matches!(sig.decl.output, FnRetTy::Return(_));\n             if let Some(imp) = get_parent_as_impl(cx.tcx, item.hir_id());"}, {"sha": "b5dec6c46bdddac2685705a76fc541c71671d4da", "filename": "tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2fd94a4e01d9e8049df3651d0b29b3964cf235d8/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd94a4e01d9e8049df3651d0b29b3964cf235d8/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=2fd94a4e01d9e8049df3651d0b29b3964cf235d8", "patch": "@@ -282,4 +282,50 @@ impl AsyncLen {\n     }\n }\n \n+// issue #9520\n+pub struct NonStandardLenAndIsEmptySignature;\n+impl NonStandardLenAndIsEmptySignature {\n+    // don't lint\n+    pub fn len(&self, something: usize) -> usize {\n+        something\n+    }\n+\n+    pub fn is_empty(&self, something: usize) -> bool {\n+        something == 0\n+    }\n+}\n+\n+// test case for #9520 with generics in the function signature\n+pub trait TestResource {\n+    type NonStandardSignatureWithGenerics: Copy;\n+    fn lookup_content(&self, item: Self::NonStandardSignatureWithGenerics) -> Result<Option<&[u8]>, String>;\n+}\n+pub struct NonStandardSignatureWithGenerics(u32);\n+impl NonStandardSignatureWithGenerics {\n+    pub fn is_empty<T, U>(self, resource: &T) -> bool\n+    where\n+        T: TestResource<NonStandardSignatureWithGenerics = U>,\n+        U: Copy + From<NonStandardSignatureWithGenerics>,\n+    {\n+        if let Ok(Some(content)) = resource.lookup_content(self.into()) {\n+            content.is_empty()\n+        } else {\n+            true\n+        }\n+    }\n+\n+    // test case for #9520 with generics in the function signature\n+    pub fn len<T, U>(self, resource: &T) -> usize\n+    where\n+        T: TestResource<NonStandardSignatureWithGenerics = U>,\n+        U: Copy + From<NonStandardSignatureWithGenerics>,\n+    {\n+        if let Ok(Some(content)) = resource.lookup_content(self.into()) {\n+            content.len()\n+        } else {\n+            0_usize\n+        }\n+    }\n+}\n+\n fn main() {}"}]}