{"sha": "413aaf3227be873d11aa47243489ea84b09c1500", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxM2FhZjMyMjdiZTg3M2QxMWFhNDcyNDM0ODllYTg0YjA5YzE1MDA=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2019-03-28T01:15:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T01:15:32Z"}, "message": "Rollup merge of #59393 - czipperz:refactor_tuple_comparison_tests, r=shepmaster\n\nRefactor tuple comparison tests", "tree": {"sha": "a71d98d402e1266c9117d7708e0c5bcf7f696cb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a71d98d402e1266c9117d7708e0c5bcf7f696cb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/413aaf3227be873d11aa47243489ea84b09c1500", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnCA0CRBK7hj4Ov3rIwAAdHIIABhc6CR0eTLgIlMqkaXlpVfd\nbp7eh9vHYczzDbyhbdkgV77//TP19nxD1DTTdRW5N/MTtiWw9//Pb57q1oEXZzWm\n1i2hzGNaYXB/RjHP2LHBqU3Ekc2KiCyI0YJr/246z/MxXa+Q7n6fLBYCmfr7nAhw\nmnjvVf9MPBn3l1MjYouDyarPojgBHPqQ4mTmHOovCHn7tqHsi7f9NGSh+fM+Ek70\ndSK6agiWCcevV5wEpBfVyBgz9ZAMt1xrtXLEcmFKz8KPOJ3q//iPiQLDzhF9jB89\nbIqLkIISUmQ7KLK/IlA45jYdpYPkgpWqFJP9zMhLux/1VAreJttM6dUORPmmC6U=\n=U3+f\n-----END PGP SIGNATURE-----\n", "payload": "tree a71d98d402e1266c9117d7708e0c5bcf7f696cb4\nparent 35b339bd5fbf678dd319c62ea1316a5d1160f0df\nparent c709a10434ecfdaa9ec8b726a405fb0d027edd07\nauthor Josh Stone <cuviper@gmail.com> 1553735732 -0700\ncommitter GitHub <noreply@github.com> 1553735732 -0700\n\nRollup merge of #59393 - czipperz:refactor_tuple_comparison_tests, r=shepmaster\n\nRefactor tuple comparison tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/413aaf3227be873d11aa47243489ea84b09c1500", "html_url": "https://github.com/rust-lang/rust/commit/413aaf3227be873d11aa47243489ea84b09c1500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/413aaf3227be873d11aa47243489ea84b09c1500/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35b339bd5fbf678dd319c62ea1316a5d1160f0df", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b339bd5fbf678dd319c62ea1316a5d1160f0df", "html_url": "https://github.com/rust-lang/rust/commit/35b339bd5fbf678dd319c62ea1316a5d1160f0df"}, {"sha": "c709a10434ecfdaa9ec8b726a405fb0d027edd07", "url": "https://api.github.com/repos/rust-lang/rust/commits/c709a10434ecfdaa9ec8b726a405fb0d027edd07", "html_url": "https://github.com/rust-lang/rust/commit/c709a10434ecfdaa9ec8b726a405fb0d027edd07"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "c7ed1612dd5eaa1ce96b5e4514cadf7c0bdd2edf", "filename": "src/libcore/tests/tuple.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/413aaf3227be873d11aa47243489ea84b09c1500/src%2Flibcore%2Ftests%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413aaf3227be873d11aa47243489ea84b09c1500/src%2Flibcore%2Ftests%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftuple.rs?ref=413aaf3227be873d11aa47243489ea84b09c1500", "patch": "@@ -1,4 +1,5 @@\n use std::cmp::Ordering::{Equal, Less, Greater};\n+use std::f64::NAN;\n \n #[test]\n fn test_clone() {\n@@ -8,18 +9,18 @@ fn test_clone() {\n }\n \n #[test]\n-fn test_tuple_cmp() {\n+fn test_partial_eq() {\n     let (small, big) = ((1, 2, 3), (3, 2, 1));\n-\n-    let nan = 0.0f64/0.0;\n-\n-    // PartialEq\n     assert_eq!(small, small);\n     assert_eq!(big, big);\n-    assert!(small != big);\n-    assert!(big != small);\n+    assert_ne!(small, big);\n+    assert_ne!(big, small);\n+}\n+\n+#[test]\n+fn test_partial_ord() {\n+    let (small, big) = ((1, 2, 3), (3, 2, 1));\n \n-    // PartialOrd\n     assert!(small < big);\n     assert!(!(small < small));\n     assert!(!(big < small));\n@@ -33,18 +34,21 @@ fn test_tuple_cmp() {\n     assert!(big >= small);\n     assert!(big >= big);\n \n-    assert!(!((1.0f64, 2.0f64) < (nan, 3.0)));\n-    assert!(!((1.0f64, 2.0f64) <= (nan, 3.0)));\n-    assert!(!((1.0f64, 2.0f64) > (nan, 3.0)));\n-    assert!(!((1.0f64, 2.0f64) >= (nan, 3.0)));\n-    assert!(((1.0f64, 2.0f64) < (2.0, nan)));\n-    assert!(!((2.0f64, 2.0f64) < (2.0, nan)));\n-\n-    // Ord\n-    assert!(small.cmp(&small) == Equal);\n-    assert!(big.cmp(&big) == Equal);\n-    assert!(small.cmp(&big) == Less);\n-    assert!(big.cmp(&small) == Greater);\n+    assert!(!((1.0f64, 2.0f64) < (NAN, 3.0)));\n+    assert!(!((1.0f64, 2.0f64) <= (NAN, 3.0)));\n+    assert!(!((1.0f64, 2.0f64) > (NAN, 3.0)));\n+    assert!(!((1.0f64, 2.0f64) >= (NAN, 3.0)));\n+    assert!(((1.0f64, 2.0f64) < (2.0, NAN)));\n+    assert!(!((2.0f64, 2.0f64) < (2.0, NAN)));\n+}\n+\n+#[test]\n+fn test_ord() {\n+    let (small, big) = ((1, 2, 3), (3, 2, 1));\n+    assert_eq!(small.cmp(&small), Equal);\n+    assert_eq!(big.cmp(&big), Equal);\n+    assert_eq!(small.cmp(&big), Less);\n+    assert_eq!(big.cmp(&small), Greater);\n }\n \n #[test]"}]}