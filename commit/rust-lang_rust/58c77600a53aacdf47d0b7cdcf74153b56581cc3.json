{"sha": "58c77600a53aacdf47d0b7cdcf74153b56581cc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4Yzc3NjAwYTUzYWFjZGY0N2QwYjdjZGNmNzQxNTNiNTY1ODFjYzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-15T21:58:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-15T21:58:14Z"}, "message": "move region resolution to be a sibling of `region_inference`\n\nTemporary make various fields public.", "tree": {"sha": "bcf1e385d54c274df666b9b790f860f8abe04d72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcf1e385d54c274df666b9b790f860f8abe04d72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58c77600a53aacdf47d0b7cdcf74153b56581cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58c77600a53aacdf47d0b7cdcf74153b56581cc3", "html_url": "https://github.com/rust-lang/rust/commit/58c77600a53aacdf47d0b7cdcf74153b56581cc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58c77600a53aacdf47d0b7cdcf74153b56581cc3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "467f2ea6531437d7cbc51712ba01886f41e2cf40", "url": "https://api.github.com/repos/rust-lang/rust/commits/467f2ea6531437d7cbc51712ba01886f41e2cf40", "html_url": "https://github.com/rust-lang/rust/commit/467f2ea6531437d7cbc51712ba01886f41e2cf40"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "efe364166e4be6c14f7fcf08f5645a492cec8614", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/58c77600a53aacdf47d0b7cdcf74153b56581cc3/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c77600a53aacdf47d0b7cdcf74153b56581cc3/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=58c77600a53aacdf47d0b7cdcf74153b56581cc3", "previous_filename": "src/librustc/infer/region_inference/graphviz.rs"}, {"sha": "8c5d7a7fc9b02420f3e94c90cb12398af8c722a0", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58c77600a53aacdf47d0b7cdcf74153b56581cc3/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c77600a53aacdf47d0b7cdcf74153b56581cc3/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=58c77600a53aacdf47d0b7cdcf74153b56581cc3", "patch": "@@ -11,7 +11,6 @@\n //! The code to do lexical region resolution.\n \n use infer::SubregionOrigin;\n-use infer::region_inference::graphviz;\n use infer::region_inference::Constraint;\n use infer::region_inference::Constraint::*;\n use infer::region_inference::RegionVarBindings;\n@@ -28,6 +27,8 @@ use ty::{Region, RegionVid};\n use ty::{ReEmpty, ReStatic, ReFree, ReEarlyBound, ReErased};\n use ty::{ReLateBound, ReScope, ReVar, ReSkolemized};\n \n+mod graphviz;\n+\n struct RegionAndOrigin<'tcx> {\n     region: Region<'tcx>,\n     origin: SubregionOrigin<'tcx>,", "previous_filename": "src/librustc/infer/region_inference/lexical_resolve.rs"}, {"sha": "cf32113343df39043f2c88260cf757f6c8ab1f53", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58c77600a53aacdf47d0b7cdcf74153b56581cc3/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c77600a53aacdf47d0b7cdcf74153b56581cc3/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=58c77600a53aacdf47d0b7cdcf74153b56581cc3", "patch": "@@ -55,6 +55,7 @@ mod higher_ranked;\n pub mod lattice;\n mod lub;\n pub mod region_inference;\n+mod lexical_region_resolve;\n mod outlives;\n pub mod resolve;\n mod freshen;"}, {"sha": "e197f4f27ef16b56fe567f6535794065c9d2b01c", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/58c77600a53aacdf47d0b7cdcf74153b56581cc3/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c77600a53aacdf47d0b7cdcf74153b56581cc3/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=58c77600a53aacdf47d0b7cdcf74153b56581cc3", "patch": "@@ -32,9 +32,6 @@ use std::fmt;\n use std::mem;\n use std::u32;\n \n-mod lexical_resolve;\n-mod graphviz;\n-\n /// A constraint that influences the inference process.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n pub enum Constraint<'tcx> {\n@@ -186,8 +183,8 @@ pub enum VarValue<'tcx> {\n pub type CombineMap<'tcx> = FxHashMap<TwoRegions<'tcx>, RegionVid>;\n \n pub struct RegionVarBindings<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    var_origins: RefCell<Vec<RegionVariableOrigin>>,\n+    pub(in infer) tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    pub(in infer) var_origins: RefCell<Vec<RegionVariableOrigin>>,\n \n     /// Constraints of the form `A <= B` introduced by the region\n     /// checker.  Here at least one of `A` and `B` must be a region\n@@ -198,14 +195,14 @@ pub struct RegionVarBindings<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// which in turn affects the way that region errors are reported,\n     /// leading to small variations in error output across runs and\n     /// platforms.\n-    constraints: RefCell<BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>>,\n+    pub(in infer) constraints: RefCell<BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>>,\n \n     /// A \"verify\" is something that we need to verify after inference is\n     /// done, but which does not directly affect inference in any way.\n     ///\n     /// An example is a `A <= B` where neither `A` nor `B` are\n     /// inference variables.\n-    verifys: RefCell<Vec<Verify<'tcx>>>,\n+    pub(in infer) verifys: RefCell<Vec<Verify<'tcx>>>,\n \n     /// A \"given\" is a relationship that is known to hold. In particular,\n     /// we often know from closure fn signatures that a particular free\n@@ -224,7 +221,7 @@ pub struct RegionVarBindings<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// record the fact that `'a <= 'b` is implied by the fn signature,\n     /// and then ignore the constraint when solving equations. This is\n     /// a bit of a hack but seems to work.\n-    givens: RefCell<FxHashSet<(Region<'tcx>, ty::RegionVid)>>,\n+    pub(in infer) givens: RefCell<FxHashSet<(Region<'tcx>, ty::RegionVid)>>,\n \n     lubs: RefCell<CombineMap<'tcx>>,\n     glbs: RefCell<CombineMap<'tcx>>,\n@@ -246,7 +243,7 @@ pub struct RegionVarBindings<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     /// This contains the results of inference.  It begins as an empty\n     /// option and only acquires a value after inference is complete.\n-    values: RefCell<Option<Vec<VarValue<'tcx>>>>,\n+    pub(in infer) values: RefCell<Option<Vec<VarValue<'tcx>>>>,\n }\n \n pub struct RegionSnapshot {"}]}