{"sha": "e3153cfd8896d97be89e3b1b26e44a3ebf8a6374", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTUzY2ZkODg5NmQ5N2JlODllM2IxYjI2ZTQ0YTNlYmY4YTYzNzQ=", "commit": {"author": {"name": "ggomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-09T14:08:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-11T09:58:20Z"}, "message": "Improve Result doc", "tree": {"sha": "e5272f5adb0c086d27bfe4580d4dfb0be1776bef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5272f5adb0c086d27bfe4580d4dfb0be1776bef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3153cfd8896d97be89e3b1b26e44a3ebf8a6374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3153cfd8896d97be89e3b1b26e44a3ebf8a6374", "html_url": "https://github.com/rust-lang/rust/commit/e3153cfd8896d97be89e3b1b26e44a3ebf8a6374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3153cfd8896d97be89e3b1b26e44a3ebf8a6374/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a603795160250de09dd4e3634c099a2d76fb58", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a603795160250de09dd4e3634c099a2d76fb58", "html_url": "https://github.com/rust-lang/rust/commit/57a603795160250de09dd4e3634c099a2d76fb58"}], "stats": {"total": 95, "additions": 59, "deletions": 36}, "files": [{"sha": "96845259299be29b52f4c597e6c780eed0e48375", "filename": "src/libcore/result.rs", "status": "modified", "additions": 59, "deletions": 36, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/e3153cfd8896d97be89e3b1b26e44a3ebf8a6374/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3153cfd8896d97be89e3b1b26e44a3ebf8a6374/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e3153cfd8896d97be89e3b1b26e44a3ebf8a6374", "patch": "@@ -10,9 +10,9 @@\n \n //! Error handling with the `Result` type.\n //!\n-//! `Result<T, E>` is the type used for returning and propagating\n-//! errors. It is an enum with the variants, `Ok(T)`, representing\n-//! success and containing a value, and `Err(E)`, representing error\n+//! [`Result<T, E>`][`Result`] is the type used for returning and propagating\n+//! errors. It is an enum with the variants, [`Ok(T)`], representing\n+//! success and containing a value, and [`Err(E)`], representing error\n //! and containing an error value.\n //!\n //! ```\n@@ -23,11 +23,11 @@\n //! }\n //! ```\n //!\n-//! Functions return `Result` whenever errors are expected and\n-//! recoverable. In the `std` crate `Result` is most prominently used\n+//! Functions return [`Result`] whenever errors are expected and\n+//! recoverable. In the `std` crate, [`Result`] is most prominently used\n //! for [I/O](../../std/io/index.html).\n //!\n-//! A simple function returning `Result` might be\n+//! A simple function returning [`Result`] might be\n //! defined and used like so:\n //!\n //! ```\n@@ -50,8 +50,8 @@\n //! }\n //! ```\n //!\n-//! Pattern matching on `Result`s is clear and straightforward for\n-//! simple cases, but `Result` comes with some convenience methods\n+//! Pattern matching on [`Result`]s is clear and straightforward for\n+//! simple cases, but [`Result`] comes with some convenience methods\n //! that make working with it more succinct.\n //!\n //! ```\n@@ -80,14 +80,14 @@\n //!\n //! A common problem with using return values to indicate errors is\n //! that it is easy to ignore the return value, thus failing to handle\n-//! the error. Result is annotated with the #[must_use] attribute,\n+//! the error. [`Result`] is annotated with the `#[must_use]` attribute,\n //! which will cause the compiler to issue a warning when a Result\n-//! value is ignored. This makes `Result` especially useful with\n+//! value is ignored. This makes [`Result`] especially useful with\n //! functions that may encounter errors but don't otherwise return a\n //! useful value.\n //!\n-//! Consider the `write_all` method defined for I/O types\n-//! by the [`Write`](../../std/io/trait.Write.html) trait:\n+//! Consider the [`write_all`] method defined for I/O types\n+//! by the [`Write`] trait:\n //!\n //! ```\n //! use std::io;\n@@ -97,8 +97,8 @@\n //! }\n //! ```\n //!\n-//! *Note: The actual definition of `Write` uses `io::Result`, which\n-//! is just a synonym for `Result<T, io::Error>`.*\n+//! *Note: The actual definition of [`Write`] uses [`io::Result`], which\n+//! is just a synonym for [`Result`]`<T, `[`io::Error`]`>`.*\n //!\n //! This method doesn't produce a value, but the write may\n //! fail. It's crucial to handle the error case, and *not* write\n@@ -119,7 +119,7 @@\n //! warning (by default, controlled by the `unused_must_use` lint).\n //!\n //! You might instead, if you don't want to handle the error, simply\n-//! assert success with `expect`. This will panic if the\n+//! assert success with [`expect`]. This will panic if the\n //! write fails, providing a marginally useful message indicating why:\n //!\n //! ```{.no_run}\n@@ -139,7 +139,7 @@\n //! assert!(file.write_all(b\"important message\").is_ok());\n //! ```\n //!\n-//! Or propagate the error up the call stack with `try!`:\n+//! Or propagate the error up the call stack with [`try!`]:\n //!\n //! ```\n //! # use std::fs::File;\n@@ -156,7 +156,7 @@\n //! # The `try!` macro\n //!\n //! When writing code that calls many functions that return the\n-//! `Result` type, the error handling can be tedious.  The `try!`\n+//! [`Result`] type, the error handling can be tedious. The [`try!`]\n //! macro hides some of the boilerplate of propagating errors up the\n //! call stack.\n //!\n@@ -219,9 +219,9 @@\n //!\n //! *It's much nicer!*\n //!\n-//! Wrapping an expression in `try!` will result in the unwrapped\n-//! success (`Ok`) value, unless the result is `Err`, in which case\n-//! `Err` is returned early from the enclosing function. Its simple definition\n+//! Wrapping an expression in [`try!`] will result in the unwrapped\n+//! success ([`Ok`]) value, unless the result is [`Err`], in which case\n+//! [`Err`] is returned early from the enclosing function. Its simple definition\n //! makes it clear:\n //!\n //! ```\n@@ -230,9 +230,21 @@\n //! }\n //! ```\n //!\n-//! `try!` is imported by the prelude and is available everywhere, but it can only\n-//! be used in functions that return `Result` because of the early return of\n-//! `Err` that it provides.\n+//! [`try!`] is imported by the prelude and is available everywhere, but it can only\n+//! be used in functions that return [`Result`] because of the early return of\n+//! [`Err`] that it provides.\n+//!\n+//! [`expect`]: enum.Result.html#method.expect\n+//! [`Write`]: ../../std/io/trait.Write.html\n+//! [`write_all`]: ../../std/io/trait.Write.html#method.write_all\n+//! [`io::Result`]: ../../std/io/type.Result.html\n+//! [`try!`]: ../../std/macro.try.html\n+//! [`Result`]: enum.Result.html\n+//! [`Ok(T)`]: enum.Result.html#variant.Ok\n+//! [`Err(E)`]: enum.Result.html#variant.Err\n+//! [`io::Error`]: ../../std/io/struct.Error.html\n+//! [`Ok`]: enum.Result.html#variant.Ok\n+//! [`Err`]: enum.Result.html#variant.Err\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -264,7 +276,7 @@ impl<T, E> Result<T, E> {\n     // Querying the contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns true if the result is `Ok`\n+    /// Returns true if the result is `Ok`.\n     ///\n     /// # Examples\n     ///\n@@ -286,7 +298,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Returns true if the result is `Err`\n+    /// Returns true if the result is `Err`.\n     ///\n     /// # Examples\n     ///\n@@ -309,11 +321,13 @@ impl<T, E> Result<T, E> {\n     // Adapter for each variant\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Converts from `Result<T, E>` to `Option<T>`\n+    /// Converts from `Result<T, E>` to [`Option<T>`].\n     ///\n-    /// Converts `self` into an `Option<T>`, consuming `self`,\n+    /// Converts `self` into an [`Option<T>`], consuming `self`,\n     /// and discarding the error, if any.\n     ///\n+    /// [`Option<T>`]: ../../std/option/enum.Option.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -334,11 +348,13 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Converts from `Result<T, E>` to `Option<E>`\n+    /// Converts from `Result<T, E>` to [`Option<E>`].\n     ///\n-    /// Converts `self` into an `Option<E>`, consuming `self`,\n+    /// Converts `self` into an [`Option<E>`], consuming `self`,\n     /// and discarding the success value, if any.\n     ///\n+    /// [`Option<E>`]: ../../std/option/enum.Option.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -363,7 +379,7 @@ impl<T, E> Result<T, E> {\n     // Adapter for working with references\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Converts from `Result<T, E>` to `Result<&T, &E>`\n+    /// Converts from `Result<T, E>` to `Result<&T, &E>`.\n     ///\n     /// Produces a new `Result`, containing a reference\n     /// into the original, leaving the original in place.\n@@ -388,7 +404,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Converts from `Result<T, E>` to `Result<&mut T, &mut E>`\n+    /// Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.\n     ///\n     /// # Examples\n     ///\n@@ -563,7 +579,7 @@ impl<T, E> Result<T, E> {\n \n     /// Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.\n     ///\n-    /// This function can be used for control flow based on result values.\n+    /// This function can be used for control flow based on `Result` values.\n     ///\n     /// # Examples\n     ///\n@@ -646,7 +662,7 @@ impl<T, E> Result<T, E> {\n     }\n \n     /// Unwraps a result, yielding the content of an `Ok`.\n-    /// Else it returns `optb`.\n+    /// Else, it returns `optb`.\n     ///\n     /// # Examples\n     ///\n@@ -837,7 +853,10 @@ impl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n // The Result Iterators\n /////////////////////////////////////////////////////////////////////////////\n \n-/// An iterator over a reference to the `Ok` variant of a `Result`.\n+/// An iterator over a reference to the [`Ok`] variant of a [`Result`].\n+///\n+/// [`Ok`]: enum.Result.html#variant.Ok\n+/// [`Result`]: enum.Result.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> { inner: Option<&'a T> }\n@@ -872,7 +891,10 @@ impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { inner: self.inner } }\n }\n \n-/// An iterator over a mutable reference to the `Ok` variant of a `Result`.\n+/// An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].\n+///\n+/// [`Ok`]: enum.Result.html#variant.Ok\n+/// [`Result`]: enum.Result.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> { inner: Option<&'a mut T> }\n@@ -902,10 +924,11 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n-/// An iterator over the value in a `Ok` variant of a `Result`. This struct is\n+/// An iterator over the value in a [`Ok`] variant of a [`Result`]. This struct is\n /// created by the [`into_iter`] method on [`Result`][`Result`] (provided by\n /// the [`IntoIterator`] trait).\n ///\n+/// [`Ok`]: enum.Result.html#variant.Ok\n /// [`Result`]: enum.Result.html\n /// [`into_iter`]: ../iter/trait.IntoIterator.html#tymethod.into_iter\n /// [`IntoIterator`]: ../iter/trait.IntoIterator.html"}]}