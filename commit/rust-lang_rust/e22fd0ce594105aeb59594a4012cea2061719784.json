{"sha": "e22fd0ce594105aeb59594a4012cea2061719784", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMmZkMGNlNTk0MTA1YWViNTk1OTRhNDAxMmNlYTIwNjE3MTk3ODQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-15T14:27:33Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-15T22:30:47Z"}, "message": "Refactor rewrite for closure", "tree": {"sha": "38abcbb2065f015a48b7125a621d6b16dee9a0dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38abcbb2065f015a48b7125a621d6b16dee9a0dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e22fd0ce594105aeb59594a4012cea2061719784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e22fd0ce594105aeb59594a4012cea2061719784", "html_url": "https://github.com/rust-lang/rust/commit/e22fd0ce594105aeb59594a4012cea2061719784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e22fd0ce594105aeb59594a4012cea2061719784/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f925100759256b87324ca07d7ff174330f60ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f925100759256b87324ca07d7ff174330f60ad", "html_url": "https://github.com/rust-lang/rust/commit/02f925100759256b87324ca07d7ff174330f60ad"}], "stats": {"total": 142, "additions": 87, "deletions": 55}, "files": [{"sha": "de9ea598df76143b8f01fb202d15a7bfd15253da", "filename": "src/expr.rs", "status": "modified", "additions": 87, "deletions": 55, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/e22fd0ce594105aeb59594a4012cea2061719784/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22fd0ce594105aeb59594a4012cea2061719784/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e22fd0ce594105aeb59594a4012cea2061719784", "patch": "@@ -535,23 +535,15 @@ where\n     Some(result)\n }\n \n-// This functions is pretty messy because of the rules around closures and blocks:\n-// FIXME - the below is probably no longer true in full.\n-//   * if there is a return type, then there must be braces,\n-//   * given a closure with braces, whether that is parsed to give an inner block\n-//     or not depends on if there is a return type and if there are statements\n-//     in that block,\n-//   * if the first expression in the body ends with a block (i.e., is a\n-//     statement without needing a semi-colon), then adding or removing braces\n-//     can change whether it is treated as an expression or statement.\n-fn rewrite_closure(\n+// Return type is (prefix, extra_offset)\n+fn rewrite_closure_fn_decl(\n     capture: ast::CaptureBy,\n     fn_decl: &ast::FnDecl,\n     body: &ast::Expr,\n     span: Span,\n     context: &RewriteContext,\n     shape: Shape,\n-) -> Option<String> {\n+) -> Option<(String, usize)> {\n     let mover = if capture == ast::CaptureBy::Value {\n         \"move \"\n     } else {\n@@ -598,6 +590,7 @@ fn rewrite_closure(\n     };\n     let list_str = try_opt!(write_list(&item_vec, &fmt));\n     let mut prefix = format!(\"{}|{}|\", mover, list_str);\n+    let extra_offset = extra_offset(&prefix, shape) + 1;\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -609,8 +602,35 @@ fn rewrite_closure(\n         prefix.push_str(&ret_str);\n     }\n \n+    Some((prefix, extra_offset))\n+}\n+\n+// This functions is pretty messy because of the rules around closures and blocks:\n+// FIXME - the below is probably no longer true in full.\n+//   * if there is a return type, then there must be braces,\n+//   * given a closure with braces, whether that is parsed to give an inner block\n+//     or not depends on if there is a return type and if there are statements\n+//     in that block,\n+//   * if the first expression in the body ends with a block (i.e., is a\n+//     statement without needing a semi-colon), then adding or removing braces\n+//     can change whether it is treated as an expression or statement.\n+fn rewrite_closure(\n+    capture: ast::CaptureBy,\n+    fn_decl: &ast::FnDecl,\n+    body: &ast::Expr,\n+    span: Span,\n+    context: &RewriteContext,\n+    shape: Shape,\n+) -> Option<String> {\n+    let (prefix, extra_offset) = try_opt!(rewrite_closure_fn_decl(\n+        capture,\n+        fn_decl,\n+        body,\n+        span,\n+        context,\n+        shape,\n+    ));\n     // 1 = space between `|...|` and body.\n-    let extra_offset = extra_offset(&prefix, shape) + 1;\n     let body_shape = try_opt!(shape.offset_left(extra_offset));\n \n     if let ast::ExprKind::Block(ref block) = body.node {\n@@ -625,7 +645,12 @@ fn rewrite_closure(\n             block_contains_comment(block, context.codemap) ||\n             prefix.contains('\\n');\n \n-        if ret_str.is_empty() && !needs_block {\n+        let no_return_type = if let ast::FunctionRetTy::Default(_) = fn_decl.output {\n+            true\n+        } else {\n+            false\n+        };\n+        if no_return_type && !needs_block {\n             // lock.stmts.len() == 1\n             if let Some(ref expr) = stmt_expr(&block.stmts[0]) {\n                 if let Some(rw) = rewrite_closure_expr(expr, &prefix, context, body_shape) {\n@@ -647,15 +672,22 @@ fn rewrite_closure(\n         }\n \n         // Either we require a block, or tried without and failed.\n-        return rewrite_closure_block(&block, prefix, context, body_shape);\n-    }\n-\n-    if let Some(rw) = rewrite_closure_expr(body, &prefix, context, body_shape) {\n-        return Some(rw);\n+        rewrite_closure_block(&block, &prefix, context, body_shape)\n+    } else {\n+        rewrite_closure_expr(body, &prefix, context, body_shape).or_else(|| {\n+            // The closure originally had a non-block expression, but we can't fit on\n+            // one line, so we'll insert a block.\n+            rewrite_closure_with_block(context, body_shape, &prefix, body)\n+        })\n     }\n+}\n \n-    // The closure originally had a non-block expression, but we can't fit on\n-    // one line, so we'll insert a block.\n+fn rewrite_closure_with_block(\n+    context: &RewriteContext,\n+    shape: Shape,\n+    prefix: &str,\n+    body: &ast::Expr,\n+) -> Option<String> {\n     let block = ast::Block {\n         stmts: vec![\n             ast::Stmt {\n@@ -668,48 +700,48 @@ fn rewrite_closure(\n         rules: ast::BlockCheckMode::Default,\n         span: body.span,\n     };\n-    return rewrite_closure_block(&block, prefix, context, body_shape);\n+    rewrite_closure_block(&block, prefix, context, shape)\n+}\n \n-    fn rewrite_closure_expr(\n-        expr: &ast::Expr,\n-        prefix: &str,\n-        context: &RewriteContext,\n-        shape: Shape,\n-    ) -> Option<String> {\n-        let mut rewrite = expr.rewrite(context, shape);\n-        if classify::expr_requires_semi_to_be_stmt(left_most_sub_expr(expr)) {\n-            rewrite = and_one_line(rewrite);\n-        }\n-        rewrite.map(|rw| format!(\"{} {}\", prefix, rw))\n+fn rewrite_closure_expr(\n+    expr: &ast::Expr,\n+    prefix: &str,\n+    context: &RewriteContext,\n+    shape: Shape,\n+) -> Option<String> {\n+    let mut rewrite = expr.rewrite(context, shape);\n+    if classify::expr_requires_semi_to_be_stmt(left_most_sub_expr(expr)) {\n+        rewrite = and_one_line(rewrite);\n     }\n+    rewrite.map(|rw| format!(\"{} {}\", prefix, rw))\n+}\n \n-    fn rewrite_closure_block(\n-        block: &ast::Block,\n-        prefix: String,\n-        context: &RewriteContext,\n-        shape: Shape,\n-    ) -> Option<String> {\n-        // Start with visual indent, then fall back to block indent if the\n-        // closure is large.\n-        let block_threshold = context.config.closure_block_indent_threshold();\n-        if block_threshold >= 0 {\n-            if let Some(block_str) = block.rewrite(&context, shape) {\n-                if block_str.matches('\\n').count() <= block_threshold as usize &&\n-                    !need_block_indent(&block_str, shape)\n-                {\n-                    if let Some(block_str) = block_str.rewrite(context, shape) {\n-                        return Some(format!(\"{} {}\", prefix, block_str));\n-                    }\n+fn rewrite_closure_block(\n+    block: &ast::Block,\n+    prefix: &str,\n+    context: &RewriteContext,\n+    shape: Shape,\n+) -> Option<String> {\n+    // Start with visual indent, then fall back to block indent if the\n+    // closure is large.\n+    let block_threshold = context.config.closure_block_indent_threshold();\n+    if block_threshold >= 0 {\n+        if let Some(block_str) = block.rewrite(&context, shape) {\n+            if block_str.matches('\\n').count() <= block_threshold as usize &&\n+                !need_block_indent(&block_str, shape)\n+            {\n+                if let Some(block_str) = block_str.rewrite(context, shape) {\n+                    return Some(format!(\"{} {}\", prefix, block_str));\n                 }\n             }\n         }\n-\n-        // The body of the closure is big enough to be block indented, that\n-        // means we must re-format.\n-        let block_shape = shape.block().with_max_width(context.config);\n-        let block_str = try_opt!(block.rewrite(&context, block_shape));\n-        Some(format!(\"{} {}\", prefix, block_str))\n     }\n+\n+    // The body of the closure is big enough to be block indented, that\n+    // means we must re-format.\n+    let block_shape = shape.block().with_max_width(context.config);\n+    let block_str = try_opt!(block.rewrite(&context, block_shape));\n+    Some(format!(\"{} {}\", prefix, block_str))\n }\n \n fn and_one_line(x: Option<String>) -> Option<String> {"}]}