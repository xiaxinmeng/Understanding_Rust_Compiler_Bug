{"sha": "6b8bc132dc6dee538964fffa0720480beb5b25dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOGJjMTMyZGM2ZGVlNTM4OTY0ZmZmYTA3MjA0ODBiZWI1YjI1ZGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-25T15:00:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-25T15:04:24Z"}, "message": "Prep work for overriding sysroot\n\nThe idea here is to make auto-discovery optional, and to allow to set\nthe path to sysroot directly. This is handy for JSON projects.", "tree": {"sha": "bc5229fabd65a060deaac0b801ef351dc2480a26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc5229fabd65a060deaac0b801ef351dc2480a26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b8bc132dc6dee538964fffa0720480beb5b25dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8bc132dc6dee538964fffa0720480beb5b25dd", "html_url": "https://github.com/rust-lang/rust/commit/6b8bc132dc6dee538964fffa0720480beb5b25dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b8bc132dc6dee538964fffa0720480beb5b25dd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a3404d8fcca9405a76cd971c8fe54ff732bda9", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a3404d8fcca9405a76cd971c8fe54ff732bda9", "html_url": "https://github.com/rust-lang/rust/commit/81a3404d8fcca9405a76cd971c8fe54ff732bda9"}], "stats": {"total": 115, "additions": 61, "deletions": 54}, "files": [{"sha": "2d65fc0763a5dfde1099454a1f9567c1fca611a1", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b8bc132dc6dee538964fffa0720480beb5b25dd/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8bc132dc6dee538964fffa0720480beb5b25dd/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=6b8bc132dc6dee538964fffa0720480beb5b25dd", "patch": "@@ -561,5 +561,5 @@ fn utf8_stdout(mut cmd: Command) -> Result<String> {\n         }\n     }\n     let stdout = String::from_utf8(output.stdout)?;\n-    Ok(stdout)\n+    Ok(stdout.trim().to_string())\n }"}, {"sha": "687e15337131b4d3cfeea29a4b48ea35bfe959f4", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 60, "deletions": 53, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/6b8bc132dc6dee538964fffa0720480beb5b25dd/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8bc132dc6dee538964fffa0720480beb5b25dd/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=6b8bc132dc6dee538964fffa0720480beb5b25dd", "patch": "@@ -1,8 +1,12 @@\n-//! FIXME: write short doc here\n+//! Loads \"sysroot\" crate.\n+//!\n+//! One confusing point here is that normally sysroot is a bunch of `.rlib`s,\n+//! but we can't process `.rlib` and need source code instead. The source code\n+//! is typically installed with `rustup component add rust-src` command.\n \n-use std::{convert::TryFrom, env, ops, path::Path, process::Command};\n+use std::{convert::TryFrom, env, ops, path::PathBuf, process::Command};\n \n-use anyhow::{bail, format_err, Result};\n+use anyhow::{format_err, Result};\n use arena::{Arena, Idx};\n use paths::{AbsPath, AbsPathBuf};\n \n@@ -51,92 +55,95 @@ impl Sysroot {\n     }\n \n     pub fn discover(cargo_toml: &AbsPath) -> Result<Sysroot> {\n-        let src = get_or_install_rust_src(cargo_toml)?;\n+        let current_dir = cargo_toml.parent().unwrap();\n+        let sysroot_src_dir = discover_sysroot_src_dir(current_dir)?;\n+        let res = Sysroot::load(&sysroot_src_dir);\n+        Ok(res)\n+    }\n+\n+    pub fn load(sysroot_src_dir: &AbsPath) -> Sysroot {\n         let mut sysroot = Sysroot { crates: Arena::default() };\n+\n         for name in SYSROOT_CRATES.trim().lines() {\n-            // FIXME: remove this path when 1.47 comes out\n+            // FIXME: first path when 1.47 comes out\n             // https://github.com/rust-lang/rust/pull/73265\n-            let root = src.join(format!(\"lib{}\", name)).join(\"lib.rs\");\n-            if root.exists() {\n+            let root = [format!(\"lib{}/lib.rs\", name), format!(\"{}/src/lib.rs\", name)]\n+                .iter()\n+                .map(|it| sysroot_src_dir.join(it))\n+                .find(|it| it.exists());\n+\n+            if let Some(root) = root {\n                 sysroot.crates.alloc(SysrootCrateData {\n                     name: name.into(),\n                     root,\n                     deps: Vec::new(),\n                 });\n-            } else {\n-                let root = src.join(name).join(\"src/lib.rs\");\n-                if root.exists() {\n-                    sysroot.crates.alloc(SysrootCrateData {\n-                        name: name.into(),\n-                        root,\n-                        deps: Vec::new(),\n-                    });\n-                }\n             }\n         }\n+\n         if let Some(std) = sysroot.std() {\n             for dep in STD_DEPS.trim().lines() {\n                 if let Some(dep) = sysroot.by_name(dep) {\n                     sysroot.crates[std].deps.push(dep)\n                 }\n             }\n         }\n+\n         if let Some(alloc) = sysroot.alloc() {\n             if let Some(core) = sysroot.core() {\n                 sysroot.crates[alloc].deps.push(core);\n             }\n         }\n-        Ok(sysroot)\n+\n+        sysroot\n     }\n \n     fn by_name(&self, name: &str) -> Option<SysrootCrate> {\n-        self.crates.iter().find(|(_id, data)| data.name == name).map(|(id, _data)| id)\n+        let (id, _data) = self.crates.iter().find(|(_id, data)| data.name == name)?;\n+        Some(id)\n     }\n }\n \n-fn get_or_install_rust_src(cargo_toml: &AbsPath) -> Result<AbsPathBuf> {\n+fn discover_sysroot_src_dir(current_dir: &AbsPath) -> Result<AbsPathBuf> {\n     if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n         let path = AbsPathBuf::try_from(path.as_str())\n             .map_err(|path| format_err!(\"RUST_SRC_PATH must be absolute: {}\", path.display()))?;\n         return Ok(path);\n     }\n-    let current_dir = cargo_toml.parent().unwrap();\n-    let mut rustc = Command::new(toolchain::rustc());\n-    rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n-    let stdout = utf8_stdout(rustc)?;\n-    let sysroot_path = AbsPath::assert(Path::new(stdout.trim()));\n-    let mut src = get_rust_src(sysroot_path);\n-    if src.is_none() {\n-        let mut rustup = Command::new(toolchain::rustup());\n-        rustup.current_dir(current_dir).args(&[\"component\", \"add\", \"rust-src\"]);\n-        utf8_stdout(rustup)?;\n-        src = get_rust_src(sysroot_path);\n-    }\n-    match src {\n-        Some(r) => Ok(r),\n-        None => bail!(\n-            \"can't load standard library from sysroot\\n\\\n-            {}\\n\\\n-            (discovered via `rustc --print sysroot`)\\n\\\n-            try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n-            sysroot_path.display(),\n-        ),\n-    }\n+\n+    let sysroot_path = {\n+        let mut rustc = Command::new(toolchain::rustc());\n+        rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n+        let stdout = utf8_stdout(rustc)?;\n+        AbsPathBuf::assert(PathBuf::from(stdout))\n+    };\n+\n+    get_rust_src(&sysroot_path)\n+        .or_else(|| {\n+            let mut rustup = Command::new(toolchain::rustup());\n+            rustup.current_dir(current_dir).args(&[\"component\", \"add\", \"rust-src\"]);\n+            utf8_stdout(rustup).ok()?;\n+            get_rust_src(&sysroot_path)\n+        })\n+        .ok_or_else(|| {\n+            format_err!(\n+                \"\\\n+can't load standard library from sysroot\n+{}\n+(discovered via `rustc --print sysroot`)\n+try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n+                sysroot_path.display(),\n+            )\n+        })\n }\n \n fn get_rust_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n-    // try the new path first since the old one still exists\n-    let mut src_path = sysroot_path.join(\"lib/rustlib/src/rust/library\");\n-    if !src_path.exists() {\n-        // FIXME: remove this path when 1.47 comes out\n-        // https://github.com/rust-lang/rust/pull/73265\n-        src_path = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n-    }\n-    if src_path.exists() {\n-        Some(src_path)\n-    } else {\n-        None\n-    }\n+    // Try the new path first since the old one still exists.\n+    //\n+    // FIXME: remove `src` when 1.47 comes out\n+    // https://github.com/rust-lang/rust/pull/73265\n+    let rust_src = sysroot_path.join(\"lib/rustlib/src/rust\");\n+    [\"library\", \"src\"].iter().map(|it| rust_src.join(it)).find(|it| it.exists())\n }\n \n impl SysrootCrateData {"}]}