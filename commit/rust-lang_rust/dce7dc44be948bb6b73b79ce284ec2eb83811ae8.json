{"sha": "dce7dc44be948bb6b73b79ce284ec2eb83811ae8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZTdkYzQ0YmU5NDhiYjZiNzNiNzljZTI4NGVjMmViODM4MTFhZTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-02T10:38:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-02T10:38:03Z"}, "message": "Merge #2978\n\n2978: Auto import functions r=flodiebold a=SomeoneToIgnore\n\nA follow up for https://github.com/rust-analyzer/rust-analyzer/pull/2887#issuecomment-577832601\r\n\r\nI've used the logic for conversion from the https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_def/src/item_scope.rs#L169 method.\r\n\r\nI'm not fond of how the conversion is implemented and for my needs, I can simply replace the `hir_def::item_scope::ItemInNs::Types(item.into())` with `hir_def::item_scope::ItemInNs::Values(item.into())` and it will work, so I can use this approach instead, if you find it a better one.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "4e223570d7ed75e24156d5452ac79ef1f1c53bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e223570d7ed75e24156d5452ac79ef1f1c53bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce7dc44be948bb6b73b79ce284ec2eb83811ae8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeNqaLCRBK7hj4Ov3rIwAAdHIIAFnPTEEOKUrSFbnNDVXlr/Lu\n+IYt/hZ2tBcx6PFA6x89XW8xugSEVLMbkUWwTVuHavh0biN7PsMmU39wF1i6MLBa\na939m1xtzCQUnPx0gldiqvjwXNHzvtqp0BYChBKOXZErP3LF96FbeOfz5aiezACP\n2GHJVXjuKni0UBUegFtgmhtABjymRxGjNACSE8PAbNg7i+lz3vc+8PnRG8KXE1uh\nascJEU+U9+8MK+/VxDc0AkcatnI7fuwL+IjWH+t4nG+2R1paooJ0UNwOPWXRT4cn\nxkPmhadfDjN+U+a0MClbYIm4hqbaEhBinesXJMDOUiKpo3/4pdDY0OvJZJH7Nq0=\n=JOpN\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e223570d7ed75e24156d5452ac79ef1f1c53bf4\nparent 96bd4f5704f447800067ce69d50ab8b4b2315fdb\nparent d3188769e41a051df7f02395b43f11e5cedede0b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580639883 +0000\ncommitter GitHub <noreply@github.com> 1580639883 +0000\n\nMerge #2978\n\n2978: Auto import functions r=flodiebold a=SomeoneToIgnore\n\nA follow up for https://github.com/rust-analyzer/rust-analyzer/pull/2887#issuecomment-577832601\r\n\r\nI've used the logic for conversion from the https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_def/src/item_scope.rs#L169 method.\r\n\r\nI'm not fond of how the conversion is implemented and for my needs, I can simply replace the `hir_def::item_scope::ItemInNs::Types(item.into())` with `hir_def::item_scope::ItemInNs::Values(item.into())` and it will work, so I can use this approach instead, if you find it a better one.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce7dc44be948bb6b73b79ce284ec2eb83811ae8", "html_url": "https://github.com/rust-lang/rust/commit/dce7dc44be948bb6b73b79ce284ec2eb83811ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce7dc44be948bb6b73b79ce284ec2eb83811ae8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96bd4f5704f447800067ce69d50ab8b4b2315fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/96bd4f5704f447800067ce69d50ab8b4b2315fdb", "html_url": "https://github.com/rust-lang/rust/commit/96bd4f5704f447800067ce69d50ab8b4b2315fdb"}, {"sha": "d3188769e41a051df7f02395b43f11e5cedede0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3188769e41a051df7f02395b43f11e5cedede0b", "html_url": "https://github.com/rust-lang/rust/commit/d3188769e41a051df7f02395b43f11e5cedede0b"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "8c483e2da38f0c0648900a6db020d5b9ddfca19f", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dce7dc44be948bb6b73b79ce284ec2eb83811ae8/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce7dc44be948bb6b73b79ce284ec2eb83811ae8/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=dce7dc44be948bb6b73b79ce284ec2eb83811ae8", "patch": "@@ -211,4 +211,28 @@ mod tests {\n             }\",\n         );\n     }\n+\n+    #[test]\n+    fn function_import() {\n+        check_assist_with_imports_locator(\n+            auto_import,\n+            TestImportsLocator::new,\n+            r\"\n+            test_function<|>\n+\n+            pub mod PubMod {\n+                pub fn test_function() {};\n+            }\n+            \",\n+            r\"\n+            use PubMod::test_function;\n+\n+            test_function<|>\n+\n+            pub mod PubMod {\n+                pub fn test_function() {};\n+            }\n+            \",\n+        );\n+    }\n }"}, {"sha": "eaacf8c9eda3e2feb66268f0d69e7ac7b750f586", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dce7dc44be948bb6b73b79ce284ec2eb83811ae8/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce7dc44be948bb6b73b79ce284ec2eb83811ae8/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=dce7dc44be948bb6b73b79ce284ec2eb83811ae8", "patch": "@@ -119,7 +119,7 @@ impl_froms!(\n     BuiltinType\n );\n \n-pub use hir_def::{attr::Attrs, visibility::Visibility, AssocItemId};\n+pub use hir_def::{attr::Attrs, item_scope::ItemInNs, visibility::Visibility, AssocItemId};\n use rustc_hash::FxHashSet;\n \n impl Module {\n@@ -238,11 +238,16 @@ impl Module {\n         item: ModuleDef,\n     ) -> Option<hir_def::path::ModPath> {\n         // FIXME expose namespace choice\n-        hir_def::find_path::find_path(\n-            db,\n-            hir_def::item_scope::ItemInNs::Types(item.into()),\n-            self.into(),\n-        )\n+        hir_def::find_path::find_path(db, determine_item_namespace(item), self.into())\n+    }\n+}\n+\n+fn determine_item_namespace(module_def: ModuleDef) -> ItemInNs {\n+    match module_def {\n+        ModuleDef::Static(_) | ModuleDef::Const(_) | ModuleDef::Function(_) => {\n+            ItemInNs::Values(module_def.into())\n+        }\n+        _ => ItemInNs::Types(module_def.into()),\n     }\n }\n "}]}