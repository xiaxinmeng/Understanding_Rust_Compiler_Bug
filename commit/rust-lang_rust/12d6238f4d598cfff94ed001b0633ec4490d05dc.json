{"sha": "12d6238f4d598cfff94ed001b0633ec4490d05dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZDYyMzhmNGQ1OThjZmZmOTRlZDAwMWIwNjMzZWM0NDkwZDA1ZGM=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-02-26T22:36:19Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-02-26T22:46:04Z"}, "message": "Add `as_str` method for split whitespace str iterators\n\nThis commit adds `as_str` methods to `SplitWhitespace` and `SplitAsciiWhitespace`\nstr iterators. The methods return the remainder, similar to `as_str` methods on\n`Chars` and other split iterators.\n\nThis commit also makes fields of some iterators `pub(crate)`.", "tree": {"sha": "cfb28efa0c186d3352693a2cd4d81b0bab0efb7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb28efa0c186d3352693a2cd4d81b0bab0efb7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d6238f4d598cfff94ed001b0633ec4490d05dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d6238f4d598cfff94ed001b0633ec4490d05dc", "html_url": "https://github.com/rust-lang/rust/commit/12d6238f4d598cfff94ed001b0633ec4490d05dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d6238f4d598cfff94ed001b0633ec4490d05dc/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cecdb181ade91c0a5ffab9a148dba68fc7d00ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cecdb181ade91c0a5ffab9a148dba68fc7d00ee3", "html_url": "https://github.com/rust-lang/rust/commit/cecdb181ade91c0a5ffab9a148dba68fc7d00ee3"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "0337892b9e8e18f9abd465682673e8189827b3a3", "filename": "library/core/src/iter/adapters/filter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12d6238f4d598cfff94ed001b0633ec4490d05dc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d6238f4d598cfff94ed001b0633ec4490d05dc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs?ref=12d6238f4d598cfff94ed001b0633ec4490d05dc", "patch": "@@ -13,7 +13,8 @@ use crate::ops::Try;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Filter<I, P> {\n-    iter: I,\n+    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods\n+    pub(crate) iter: I,\n     predicate: P,\n }\n impl<I, P> Filter<I, P> {"}, {"sha": "f6dbfce3e97a6cd490e74a679433ea489abd0a7b", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12d6238f4d598cfff94ed001b0633ec4490d05dc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d6238f4d598cfff94ed001b0633ec4490d05dc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=12d6238f4d598cfff94ed001b0633ec4490d05dc", "patch": "@@ -57,7 +57,8 @@ use crate::ops::Try;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Map<I, F> {\n-    iter: I,\n+    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods\n+    pub(crate) iter: I,\n     f: F,\n }\n "}, {"sha": "052021571b4a5e1d79cd980c55942bdb96ddfbe1", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12d6238f4d598cfff94ed001b0633ec4490d05dc/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d6238f4d598cfff94ed001b0633ec4490d05dc/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=12d6238f4d598cfff94ed001b0633ec4490d05dc", "patch": "@@ -335,9 +335,11 @@ pub struct Split<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n {\n-    v: &'a [T],\n+    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods\n+    pub(crate) v: &'a [T],\n     pred: P,\n-    finished: bool,\n+    // Used for `SplitAsciiWhitespace` `as_str` method\n+    pub(crate) finished: bool,\n }\n \n impl<'a, T: 'a, P: FnMut(&T) -> bool> Split<'a, T, P> {"}, {"sha": "93248d1583370f07f663474d6f33b97d96edaf05", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/12d6238f4d598cfff94ed001b0633ec4490d05dc/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d6238f4d598cfff94ed001b0633ec4490d05dc/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=12d6238f4d598cfff94ed001b0633ec4490d05dc", "patch": "@@ -1203,6 +1203,30 @@ impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for SplitWhitespace<'_> {}\n \n+impl<'a> SplitWhitespace<'a> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_whitespace_as_str)]\n+    ///\n+    /// let mut split = \"Mary had a little lamb\".split_whitespace();\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    ///\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    ///\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.inner.iter.as_str()\n+    }\n+}\n+\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n     type Item = &'a str;\n@@ -1234,6 +1258,37 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n+impl<'a> SplitAsciiWhitespace<'a> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_whitespace_as_str)]\n+    ///\n+    /// let mut split = \"Mary had a little lamb\".split_ascii_whitespace();\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    ///\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    ///\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        if self.inner.iter.iter.finished {\n+            return \"\";\n+        }\n+\n+        // Safety:\n+        //\n+        // Slice is created from str.\n+        unsafe { crate::str::from_utf8_unchecked(&self.inner.iter.iter.v) }\n+    }\n+}\n+\n #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     type Item = &'a str;"}]}