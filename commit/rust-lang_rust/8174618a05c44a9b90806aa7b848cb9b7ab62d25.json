{"sha": "8174618a05c44a9b90806aa7b848cb9b7ab62d25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNzQ2MThhMDVjNDRhOWI5MDgwNmFhN2I4NDhjYjliN2FiNjJkMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-30T12:01:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-30T12:01:23Z"}, "message": "auto merge of #9619 : toffaletti/rust/mmap, r=huonw", "tree": {"sha": "47c7664e32845d3e1a099f90fb615c1a621b4dcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47c7664e32845d3e1a099f90fb615c1a621b4dcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8174618a05c44a9b90806aa7b848cb9b7ab62d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8174618a05c44a9b90806aa7b848cb9b7ab62d25", "html_url": "https://github.com/rust-lang/rust/commit/8174618a05c44a9b90806aa7b848cb9b7ab62d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8174618a05c44a9b90806aa7b848cb9b7ab62d25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aafad43ae93605e52c4a276a544160116088d250", "url": "https://api.github.com/repos/rust-lang/rust/commits/aafad43ae93605e52c4a276a544160116088d250", "html_url": "https://github.com/rust-lang/rust/commit/aafad43ae93605e52c4a276a544160116088d250"}, {"sha": "b617569583e6b15d487c44ec6f7af866f2064d77", "url": "https://api.github.com/repos/rust-lang/rust/commits/b617569583e6b15d487c44ec6f7af866f2064d77", "html_url": "https://github.com/rust-lang/rust/commit/b617569583e6b15d487c44ec6f7af866f2064d77"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "7df98c1d1e8b0541585b0f7f301d1a66d3891cd9", "filename": "src/libstd/os.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8174618a05c44a9b90806aa7b848cb9b7ab62d25/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8174618a05c44a9b90806aa7b848cb9b7ab62d25/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=8174618a05c44a9b90806aa7b848cb9b7ab62d25", "patch": "@@ -1398,7 +1398,7 @@ impl to_str::ToStr for MapError {\n \n #[cfg(unix)]\n impl MemoryMap {\n-    pub fn new(min_len: uint, options: ~[MapOption]) -> Result<~MemoryMap, MapError> {\n+    pub fn new(min_len: uint, options: &[MapOption]) -> Result<MemoryMap, MapError> {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         use libc::off_t;\n@@ -1441,7 +1441,7 @@ impl MemoryMap {\n                 code => ErrUnknown(code)\n             })\n         } else {\n-            Ok(~MemoryMap {\n+            Ok(MemoryMap {\n                data: r as *mut u8,\n                len: len,\n                kind: if fd == -1 {\n@@ -1478,7 +1478,7 @@ impl Drop for MemoryMap {\n \n #[cfg(windows)]\n impl MemoryMap {\n-    pub fn new(min_len: uint, options: ~[MapOption]) -> Result<~MemoryMap, MapError> {\n+    pub fn new(min_len: uint, options: &[MapOption]) -> Result<MemoryMap, MapError> {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         use libc::types::os::arch::extra::{LPVOID, DWORD, SIZE_T, HANDLE};\n@@ -1524,7 +1524,7 @@ impl MemoryMap {\n             };\n             match r as uint {\n                 0 => Err(ErrVirtualAlloc(errno())),\n-                _ => Ok(~MemoryMap {\n+                _ => Ok(MemoryMap {\n                    data: r as *mut u8,\n                    len: len,\n                    kind: MapVirtual\n@@ -1560,7 +1560,7 @@ impl MemoryMap {\n                                             0);\n                 match r as uint {\n                     0 => Err(ErrMapViewOfFile(errno())),\n-                    _ => Ok(~MemoryMap {\n+                    _ => Ok(MemoryMap {\n                        data: r as *mut u8,\n                        len: len,\n                        kind: MapFile(mapping as *c_void)\n@@ -1996,7 +1996,7 @@ mod tests {\n     fn memory_map_rw() {\n         use result::{Ok, Err};\n \n-        let chunk = match os::MemoryMap::new(16, ~[\n+        let chunk = match os::MemoryMap::new(16, [\n             os::MapReadable,\n             os::MapWritable\n         ]) {\n@@ -2050,7 +2050,7 @@ mod tests {\n             }\n             fd\n         };\n-        let chunk = match MemoryMap::new(size / 2, ~[\n+        let chunk = match MemoryMap::new(size / 2, [\n             MapReadable,\n             MapWritable,\n             MapFd(fd),"}]}