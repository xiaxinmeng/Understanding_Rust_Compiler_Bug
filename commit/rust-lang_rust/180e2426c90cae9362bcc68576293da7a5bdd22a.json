{"sha": "180e2426c90cae9362bcc68576293da7a5bdd22a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MGUyNDI2YzkwY2FlOTM2MmJjYzY4NTc2MjkzZGE3YTViZGQyMmE=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2018-03-20T19:58:38Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2018-04-28T08:55:25Z"}, "message": "Return LocalMutationIsAllowed in is_mutable", "tree": {"sha": "2c534b6c59331d7002862dbab1fddedb1850cf3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c534b6c59331d7002862dbab1fddedb1850cf3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/180e2426c90cae9362bcc68576293da7a5bdd22a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/180e2426c90cae9362bcc68576293da7a5bdd22a", "html_url": "https://github.com/rust-lang/rust/commit/180e2426c90cae9362bcc68576293da7a5bdd22a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/180e2426c90cae9362bcc68576293da7a5bdd22a/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71d221f29425bf7c87fbc781fcbc5740b00d1c8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/71d221f29425bf7c87fbc781fcbc5740b00d1c8f", "html_url": "https://github.com/rust-lang/rust/commit/71d221f29425bf7c87fbc781fcbc5740b00d1c8f"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "9da5d1dcdcd4fac5f347a095f0f7f049608dce29", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/180e2426c90cae9362bcc68576293da7a5bdd22a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/180e2426c90cae9362bcc68576293da7a5bdd22a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=180e2426c90cae9362bcc68576293da7a5bdd22a", "patch": "@@ -1366,7 +1366,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     ) {\n         debug!(\"check_if_reassignment_to_immutable_state({:?})\", place);\n         // determine if this path has a non-mut owner (and thus needs checking).\n-        if let Ok(_) = self.is_mutable(place, LocalMutationIsAllowed::No) {\n+        if let Ok(..) = self.is_mutable(place, LocalMutationIsAllowed::No) {\n             return;\n         }\n         debug!(\n@@ -1681,24 +1681,23 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Reservation(WriteKind::MutableBorrow(BorrowKind::Mut { .. }))\n             | Write(WriteKind::MutableBorrow(BorrowKind::Mut { .. })) => {\n                 match self.is_mutable(place, is_local_mutation_allowed) {\n-                    Ok(Place::Local(local))\n-                        if is_local_mutation_allowed != LocalMutationIsAllowed::Yes =>\n-                    {\n-                        // If the local may be initialized, and it is now currently being\n-                        // mutated, then it is justified to be annotated with the `mut` keyword,\n-                        // since the mutation may be a possible reassignment.\n-                        let mpi = self.move_data.rev_lookup.find_local(*local);\n-                        if flow_state.inits.contains(&mpi) {\n-                            self.used_mut.insert(*local);\n+                    Ok((Place::Local(local), mut_allowed)) => {\n+                        if mut_allowed != LocalMutationIsAllowed::Yes {\n+                            // If the local may be initialized, and it is now currently being\n+                            // mutated, then it is justified to be annotated with the `mut`\n+                            // keyword, since the mutation may be a possible reassignment.\n+                            let mpi = self.move_data.rev_lookup.find_local(*local);\n+                            if flow_state.inits.contains(&mpi) {\n+                                self.used_mut.insert(*local);\n+                            }\n                         }\n                     }\n-                    Ok(Place::Projection(ref proj)) => {\n+                    Ok((Place::Projection(ref proj), _mut_allowed)) => {\n                         if let Some(field) = self.is_upvar_field_projection(&proj.base) {\n                             self.used_mut_upvars.push(field);\n                         }\n                     }\n-                    Ok(Place::Local(_)) |\n-                    Ok(Place::Static(..)) => {}\n+                    Ok((Place::Static(..), _mut_allowed)) => {}\n                     Err(place_err) => {\n                         error_reported = true;\n                         let item_msg = self.get_default_err_msg(place);\n@@ -1719,24 +1718,23 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n             Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {\n                 match self.is_mutable(place, is_local_mutation_allowed) {\n-                    Ok(Place::Local(local))\n-                        if is_local_mutation_allowed != LocalMutationIsAllowed::Yes =>\n-                    {\n-                        // If the local may be initialized, and it is now currently being\n-                        // mutated, then it is justified to be annotated with the `mut` keyword,\n-                        // since the mutation may be a possible reassignment.\n-                        let mpi = self.move_data.rev_lookup.find_local(*local);\n-                        if flow_state.inits.contains(&mpi) {\n-                            self.used_mut.insert(*local);\n+                    Ok((Place::Local(local), mut_allowed)) => {\n+                        if mut_allowed != LocalMutationIsAllowed::Yes {\n+                            // If the local may be initialized, and it is now currently being\n+                            // mutated, then it is justified to be annotated with the `mut`\n+                            // keyword, since the mutation may be a possible reassignment.\n+                            let mpi = self.move_data.rev_lookup.find_local(*local);\n+                            if flow_state.inits.contains(&mpi) {\n+                                self.used_mut.insert(*local);\n+                            }\n                         }\n                     }\n-                    Ok(Place::Projection(ref proj)) => {\n+                    Ok((Place::Projection(ref proj), _mut_allowed)) => {\n                         if let Some(field) = self.is_upvar_field_projection(&proj.base) {\n                             self.used_mut_upvars.push(field);\n                         }\n                     }\n-                    Ok(Place::Local(_)) |\n-                    Ok(Place::Static(..)) => {}\n+                    Ok((Place::Static(..), _mut_allowed)) => {}\n                     Err(place_err) => {\n                         error_reported = true;\n \n@@ -1835,25 +1833,28 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         place: &'d Place<'tcx>,\n         is_local_mutation_allowed: LocalMutationIsAllowed,\n-    ) -> Result<&'d Place<'tcx>, &'d Place<'tcx>> {\n+    ) -> Result<(&'d Place<'tcx>, LocalMutationIsAllowed), &'d Place<'tcx>> {\n         match *place {\n             Place::Local(local) => {\n                 let local = &self.mir.local_decls[local];\n                 match local.mutability {\n                     Mutability::Not => match is_local_mutation_allowed {\n-                        LocalMutationIsAllowed::Yes | LocalMutationIsAllowed::ExceptUpvars => {\n-                            Ok(place)\n+                        LocalMutationIsAllowed::Yes => {\n+                            Ok((place, LocalMutationIsAllowed::Yes))\n+                        }\n+                        LocalMutationIsAllowed::ExceptUpvars => {\n+                            Ok((place, LocalMutationIsAllowed::ExceptUpvars))\n                         }\n                         LocalMutationIsAllowed::No => Err(place),\n                     },\n-                    Mutability::Mut => Ok(place),\n+                    Mutability::Mut => Ok((place, is_local_mutation_allowed)),\n                 }\n             }\n             Place::Static(ref static_) =>\n                 if self.tcx.is_static(static_.def_id) != Some(hir::Mutability::MutMutable) {\n                     Err(place)\n                 } else {\n-                    Ok(place)\n+                    Ok((place, is_local_mutation_allowed))\n                 },\n             Place::Projection(ref proj) => {\n                 match proj.elem {\n@@ -1891,7 +1892,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                     hir::MutImmutable => return Err(place),\n                                     // `*mut` raw pointers are always mutable, regardless of context\n                                     // The users have to check by themselve.\n-                                    hir::MutMutable => return Ok(place),\n+                                    hir::MutMutable => return Ok((place, is_local_mutation_allowed)),\n                                 }\n                             }\n                             // `Box<T>` owns its content, so mutable if its location is mutable"}]}