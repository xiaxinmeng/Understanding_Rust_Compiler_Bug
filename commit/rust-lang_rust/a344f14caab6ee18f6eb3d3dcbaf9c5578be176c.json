{"sha": "a344f14caab6ee18f6eb3d3dcbaf9c5578be176c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNDRmMTRjYWFiNmVlMThmNmViM2QzZGNiYWY5YzU1NzhiZTE3NmM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-14T23:39:13Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-22T07:17:23Z"}, "message": "Refactor out `BuildReducedGraphVisitor::visit_trait_item`.", "tree": {"sha": "d0a2e036c13ed9cde002426a9a1eda367a673177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0a2e036c13ed9cde002426a9a1eda367a673177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a344f14caab6ee18f6eb3d3dcbaf9c5578be176c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a344f14caab6ee18f6eb3d3dcbaf9c5578be176c", "html_url": "https://github.com/rust-lang/rust/commit/a344f14caab6ee18f6eb3d3dcbaf9c5578be176c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a344f14caab6ee18f6eb3d3dcbaf9c5578be176c/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a0e88a339ca76159abaf7523ee5aaa8b19052b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0e88a339ca76159abaf7523ee5aaa8b19052b1", "html_url": "https://github.com/rust-lang/rust/commit/9a0e88a339ca76159abaf7523ee5aaa8b19052b1"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "7391645fabec687e1f8ae8b18d17e76100447812", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a344f14caab6ee18f6eb3d3dcbaf9c5578be176c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a344f14caab6ee18f6eb3d3dcbaf9c5578be176c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=a344f14caab6ee18f6eb3d3dcbaf9c5578be176c", "patch": "@@ -33,7 +33,7 @@ use syntax::parse::token;\n \n use syntax::ast::{Block, Crate};\n use syntax::ast::{ForeignItem, ForeignItemKind, Item, ItemKind};\n-use syntax::ast::{Mutability, StmtKind, TraitItemKind};\n+use syntax::ast::{Mutability, StmtKind, TraitItem, TraitItemKind};\n use syntax::ast::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::parse::token::keywords;\n use syntax::visit::{self, Visitor};\n@@ -289,32 +289,14 @@ impl<'b> Resolver<'b> {\n \n             ItemKind::DefaultImpl(..) | ItemKind::Impl(..) => {}\n \n-            ItemKind::Trait(.., ref items) => {\n+            ItemKind::Trait(..) => {\n                 let def_id = self.definitions.local_def_id(item.id);\n \n                 // Add all the items within to a new module.\n                 let kind = ModuleKind::Def(Def::Trait(def_id), name);\n-                let module_parent = self.new_module(parent, kind, parent.normal_ancestor_id);\n-                self.define(parent, name, TypeNS, (module_parent, sp, vis));\n-\n-                // Add the names of all the items to the trait info.\n-                for item in items {\n-                    let item_def_id = self.definitions.local_def_id(item.id);\n-                    let mut is_static_method = false;\n-                    let (def, ns) = match item.node {\n-                        TraitItemKind::Const(..) => (Def::AssociatedConst(item_def_id), ValueNS),\n-                        TraitItemKind::Method(ref sig, _) => {\n-                            is_static_method = !sig.decl.has_self();\n-                            (Def::Method(item_def_id), ValueNS)\n-                        }\n-                        TraitItemKind::Type(..) => (Def::AssociatedTy(item_def_id), TypeNS),\n-                        TraitItemKind::Macro(_) => panic!(\"unexpanded macro in resolve!\"),\n-                    };\n-\n-                    self.define(module_parent, item.ident.name, ns, (def, item.span, vis));\n-\n-                    self.trait_item_map.insert((item.ident.name, def_id), is_static_method);\n-                }\n+                let module = self.new_module(parent, kind, parent.normal_ancestor_id);\n+                self.define(parent, name, TypeNS, (module, sp, vis));\n+                self.current_module = module;\n             }\n             ItemKind::Mac(_) => panic!(\"unexpanded macro in resolve!\"),\n         }\n@@ -514,4 +496,31 @@ impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_block(&mut self, block: &Block) {\n         self.resolver.build_reduced_graph_for_block(block);\n     }\n+\n+    fn visit_trait_item(&mut self, item: &TraitItem) {\n+        let parent = self.resolver.current_module;\n+        let def_id = parent.def_id().unwrap();\n+\n+        // Add the item to the trait info.\n+        let item_def_id = self.resolver.definitions.local_def_id(item.id);\n+        let mut is_static_method = false;\n+        let (def, ns) = match item.node {\n+            TraitItemKind::Const(..) => (Def::AssociatedConst(item_def_id), ValueNS),\n+            TraitItemKind::Method(ref sig, _) => {\n+                is_static_method = !sig.decl.has_self();\n+                (Def::Method(item_def_id), ValueNS)\n+            }\n+            TraitItemKind::Type(..) => (Def::AssociatedTy(item_def_id), TypeNS),\n+            TraitItemKind::Macro(_) => panic!(\"unexpanded macro in resolve!\"),\n+        };\n+\n+        self.resolver.trait_item_map.insert((item.ident.name, def_id), is_static_method);\n+\n+        let vis = ty::Visibility::Public;\n+        self.resolver.define(parent, item.ident.name, ns, (def, item.span, vis));\n+\n+        self.resolver.current_module = parent.parent.unwrap(); // nearest normal ancestor\n+        visit::walk_trait_item(self, item);\n+        self.resolver.current_module = parent;\n+    }\n }"}]}