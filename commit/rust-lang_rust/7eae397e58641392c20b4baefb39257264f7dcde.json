{"sha": "7eae397e58641392c20b4baefb39257264f7dcde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYWUzOTdlNTg2NDEzOTJjMjBiNGJhZWZiMzkyNTcyNjRmN2RjZGU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-13T22:29:05Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-13T22:29:05Z"}, "message": "Merge pull request #4465 from thestinger/option\n\nimprovements to option module", "tree": {"sha": "69e7287234622868d9bc555cba8ff005f90c7b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e7287234622868d9bc555cba8ff005f90c7b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eae397e58641392c20b4baefb39257264f7dcde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eae397e58641392c20b4baefb39257264f7dcde", "html_url": "https://github.com/rust-lang/rust/commit/7eae397e58641392c20b4baefb39257264f7dcde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eae397e58641392c20b4baefb39257264f7dcde/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50cd3c18f5cb07f5c12ad6f1cbe872f5971fec32", "url": "https://api.github.com/repos/rust-lang/rust/commits/50cd3c18f5cb07f5c12ad6f1cbe872f5971fec32", "html_url": "https://github.com/rust-lang/rust/commit/50cd3c18f5cb07f5c12ad6f1cbe872f5971fec32"}, {"sha": "ac85bf356f3674ed0e0e79668b384141d38e0efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac85bf356f3674ed0e0e79668b384141d38e0efe", "html_url": "https://github.com/rust-lang/rust/commit/ac85bf356f3674ed0e0e79668b384141d38e0efe"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "48f2ae719384e1d818bf37042948844217e23580", "filename": "src/libcore/option.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7eae397e58641392c20b4baefb39257264f7dcde/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eae397e58641392c20b4baefb39257264f7dcde/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=7eae397e58641392c20b4baefb39257264f7dcde", "patch": "@@ -118,7 +118,7 @@ pub pure fn map_consume<T, U>(opt: Option<T>,\n      * As `map`, but consumes the option and gives `f` ownership to avoid\n      * copying.\n      */\n-    if opt.is_some() { Some(f(option::unwrap(move opt))) } else { None }\n+    match opt { None => None, Some(v) => Some(f(v)) }\n }\n \n #[inline(always)]\n@@ -278,12 +278,42 @@ impl<T> Option<T> {\n     #[inline(always)]\n     pure fn map<U>(&self, f: fn(x: &T) -> U) -> Option<U> { map(self, f) }\n \n+    /// As `map`, but consumes the option and gives `f` ownership to avoid\n+    /// copying.\n+    #[inline(always)]\n+    pure fn map_consume<U>(self, f: fn(v: T) -> U) -> Option<U> {\n+        map_consume(self, f)\n+    }\n+\n     /// Applies a function to the contained value or returns a default\n     #[inline(always)]\n     pure fn map_default<U>(&self, def: U, f: fn(x: &T) -> U) -> U {\n         map_default(self, move def, f)\n     }\n \n+    /// As `map_default`, but consumes the option and gives `f`\n+    /// ownership to avoid copying.\n+    #[inline(always)]\n+    pure fn map_consume_default<U>(self, def: U, f: fn(v: T) -> U) -> U {\n+        match self { None => def, Some(v) => f(v) }\n+    }\n+\n+    /// Apply a function to the contained value or do nothing\n+    fn mutate(&mut self, f: fn(T) -> T) {\n+        if self.is_some() {\n+            *self = Some(f(self.swap_unwrap()));\n+        }\n+    }\n+\n+    /// Apply a function to the contained value or set it to a default\n+    fn mutate_default(&mut self, def: T, f: fn(T) -> T) {\n+        if self.is_some() {\n+            *self = Some(f(self.swap_unwrap()));\n+        } else {\n+            *self = Some(def);\n+        }\n+    }\n+\n     /// Performs an operation on the contained value by reference\n     #[inline(always)]\n     pure fn iter(&self, f: fn(x: &T)) { iter(self, f) }\n@@ -315,6 +345,17 @@ impl<T> Option<T> {\n     #[inline(always)]\n     pure fn unwrap(self) -> T { unwrap(self) }\n \n+    /**\n+     * The option dance. Moves a value out of an option type and returns it,\n+     * replacing the original with `None`.\n+     *\n+     * # Failure\n+     *\n+     * Fails if the value equals `None`.\n+     */\n+    #[inline(always)]\n+    fn swap_unwrap(&mut self) -> T { swap_unwrap(self) }\n+\n     /**\n      * Gets the value out of an option, printing a specified message on\n      * failure"}]}