{"sha": "c4582f6d183abed38684e669573c27ce40007ea3", "node_id": "C_kwDOAAsO6NoAKGM0NTgyZjZkMTgzYWJlZDM4Njg0ZTY2OTU3M2MyN2NlNDAwMDdlYTM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-29T09:32:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-29T09:32:36Z"}, "message": "Fix visibilities", "tree": {"sha": "17d9bcff8efedb173c61ed7717845eb9f398f0f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17d9bcff8efedb173c61ed7717845eb9f398f0f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4582f6d183abed38684e669573c27ce40007ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4582f6d183abed38684e669573c27ce40007ea3", "html_url": "https://github.com/rust-lang/rust/commit/c4582f6d183abed38684e669573c27ce40007ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4582f6d183abed38684e669573c27ce40007ea3/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe52d270dd057fef27f53197522f8ac2a5f4aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe52d270dd057fef27f53197522f8ac2a5f4aed", "html_url": "https://github.com/rust-lang/rust/commit/afe52d270dd057fef27f53197522f8ac2a5f4aed"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "6293b11d1e89d9fb773bc9f59e9c6443d950d308", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4582f6d183abed38684e669573c27ce40007ea3/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/c4582f6d183abed38684e669573c27ce40007ea3/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=c4582f6d183abed38684e669573c27ce40007ea3", "patch": "@@ -24,6 +24,8 @@ jobs:\n     runs-on: ${{ matrix.os }}\n     env:\n       CC: deny_c\n+      # we want to build r-a on stable to check that it keeps building on stable,\n+      # but we also want to test our proc-macro-srv which depends on nightly features\n       RUSTC_BOOTSTRAP: 1\n \n     strategy:"}, {"sha": "dd05e250c2def3074b54a736492bf4fd4d82a10d", "filename": "crates/proc-macro-srv/src/dylib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fdylib.rs?ref=c4582f6d183abed38684e669573c27ce40007ea3", "patch": "@@ -13,8 +13,6 @@ use object::Object;\n use paths::AbsPath;\n use proc_macro_api::{read_dylib_info, ProcMacroKind};\n \n-use crate::tt;\n-\n const NEW_REGISTRAR_SYMBOL: &str = \"_rustc_proc_macro_decls_\";\n \n fn invalid_data_err(e: impl Into<Box<dyn std::error::Error + Send + Sync>>) -> io::Error {\n@@ -152,9 +150,9 @@ impl Expander {\n     pub fn expand(\n         &self,\n         macro_name: &str,\n-        macro_body: &tt::Subtree,\n-        attributes: Option<&tt::Subtree>,\n-    ) -> Result<tt::Subtree, String> {\n+        macro_body: &crate::tt::Subtree,\n+        attributes: Option<&crate::tt::Subtree>,\n+    ) -> Result<crate::tt::Subtree, String> {\n         let result = self.inner.proc_macros.expand(macro_name, macro_body, attributes);\n         result.map_err(|e| e.as_str().unwrap_or_else(|| \"<unknown error>\".to_string()))\n     }"}, {"sha": "2aac379031302a6b748d665c59afab8154de6610", "filename": "crates/proc-macro-srv/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs?ref=c4582f6d183abed38684e669573c27ce40007ea3", "patch": "@@ -13,6 +13,7 @@\n #![cfg(feature = \"sysroot-abi\")]\n #![feature(proc_macro_internals, proc_macro_diagnostic, proc_macro_span)]\n #![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+#![allow(unreachable_pub)]\n \n extern crate proc_macro;\n "}, {"sha": "74be5c7afea3e34ff6628904f813df0dc54cfa03", "filename": "crates/proc-macro-srv/src/proc_macros.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fproc_macros.rs?ref=c4582f6d183abed38684e669573c27ce40007ea3", "patch": "@@ -25,7 +25,7 @@ impl ProcMacros {\n     /// *`info` - RustCInfo about the compiler that was used to compile the\n     ///           macro crate. This is the information we use to figure out\n     ///           which ABI to return\n-    pub fn from_lib(\n+    pub(crate) fn from_lib(\n         lib: &Library,\n         symbol_name: String,\n         info: RustCInfo,\n@@ -37,22 +37,10 @@ impl ProcMacros {\n \n             return Ok(Self { exported_macros: macros.to_vec() });\n         }\n-\n-        // if we reached this point, versions didn't match. in testing, we\n-        // want that to panic - this could mean that the format of `rustc\n-        // --version` no longer matches the format of the version string\n-        // stored in the `.rustc` section, and we want to catch that in-tree\n-        // with `x.py test`\n-        if cfg!(test) {\n-            panic!(\n-                \"sysroot ABI mismatch: dylib rustc version (read from .rustc section): {:?} != proc-macro-srv version (read from 'rustc --version'): {:?}\",\n-                info.version_string, crate::RUSTC_VERSION_STRING\n-            );\n-        }\n         Err(LoadProcMacroDylibError::AbiMismatch(info.version_string))\n     }\n \n-    pub fn expand(\n+    pub(crate) fn expand(\n         &self,\n         macro_name: &str,\n         macro_body: &tt::Subtree,\n@@ -107,7 +95,7 @@ impl ProcMacros {\n         Err(proc_macro::bridge::PanicMessage::String(\"Nothing to expand\".to_string()).into())\n     }\n \n-    pub fn list_macros(&self) -> Vec<(String, ProcMacroKind)> {\n+    pub(crate) fn list_macros(&self) -> Vec<(String, ProcMacroKind)> {\n         self.exported_macros\n             .iter()\n             .map(|proc_macro| match proc_macro {\n@@ -129,5 +117,11 @@ impl ProcMacros {\n fn test_version_check() {\n     let path = paths::AbsPathBuf::assert(crate::proc_macro_test_dylib_path());\n     let info = proc_macro_api::read_dylib_info(&path).unwrap();\n-    assert_eq!(info.version_string, crate::RUSTC_VERSION_STRING);\n+    assert_eq!(\n+        info.version_string,\n+        crate::RUSTC_VERSION_STRING,\n+        \"sysroot ABI mismatch: dylib rustc version (read from .rustc section): {:?} != proc-macro-srv version (read from 'rustc --version'): {:?}\",\n+        info.version_string,\n+        crate::RUSTC_VERSION_STRING,\n+    );\n }"}, {"sha": "b7584e1016b9423e11ddab67e25bb17e1c16896c", "filename": "crates/proc-macro-srv/src/server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fserver.rs?ref=c4582f6d183abed38684e669573c27ce40007ea3", "patch": "@@ -14,7 +14,7 @@ use proc_macro::{\n };\n \n mod token_stream;\n-pub use token_stream::TokenStream;\n+pub(crate) use token_stream::TokenStream;\n use token_stream::TokenStreamBuilder;\n \n mod symbol;"}, {"sha": "99f8b1efaad6a91225fa273956d6c00b4e730029", "filename": "crates/proc-macro-srv/src/server/symbol.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Fserver%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Fserver%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fserver%2Fsymbol.rs?ref=c4582f6d183abed38684e669573c27ce40007ea3", "patch": "@@ -12,11 +12,11 @@ thread_local! {\n pub struct Symbol(u32);\n \n impl Symbol {\n-    pub fn intern(data: &str) -> Symbol {\n+    pub(super) fn intern(data: &str) -> Symbol {\n         SYMBOL_INTERNER.with(|i| i.borrow_mut().intern(data))\n     }\n \n-    pub fn text(&self) -> SmolStr {\n+    pub(super) fn text(&self) -> SmolStr {\n         SYMBOL_INTERNER.with(|i| i.borrow().get(self).clone())\n     }\n }"}, {"sha": "2589d8b64d489ee4410071eee5a734c451b37d07", "filename": "crates/proc-macro-srv/src/server/token_stream.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Fserver%2Ftoken_stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4582f6d183abed38684e669573c27ce40007ea3/crates%2Fproc-macro-srv%2Fsrc%2Fserver%2Ftoken_stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fserver%2Ftoken_stream.rs?ref=c4582f6d183abed38684e669573c27ce40007ea3", "patch": "@@ -4,27 +4,27 @@ use crate::tt::{self, TokenTree};\n \n #[derive(Debug, Default, Clone)]\n pub struct TokenStream {\n-    pub token_trees: Vec<TokenTree>,\n+    pub(super) token_trees: Vec<TokenTree>,\n }\n \n impl TokenStream {\n-    pub fn new() -> Self {\n+    pub(crate) fn new() -> Self {\n         TokenStream::default()\n     }\n \n-    pub fn with_subtree(subtree: tt::Subtree) -> Self {\n+    pub(crate) fn with_subtree(subtree: tt::Subtree) -> Self {\n         if subtree.delimiter.kind != tt::DelimiterKind::Invisible {\n             TokenStream { token_trees: vec![TokenTree::Subtree(subtree)] }\n         } else {\n             TokenStream { token_trees: subtree.token_trees }\n         }\n     }\n \n-    pub fn into_subtree(self) -> tt::Subtree {\n+    pub(crate) fn into_subtree(self) -> tt::Subtree {\n         tt::Subtree { delimiter: tt::Delimiter::UNSPECIFIED, token_trees: self.token_trees }\n     }\n \n-    pub fn is_empty(&self) -> bool {\n+    pub(super) fn is_empty(&self) -> bool {\n         self.token_trees.is_empty()\n     }\n }\n@@ -78,12 +78,12 @@ impl Extend<TokenStream> for TokenStream {\n     }\n }\n \n-pub struct TokenStreamBuilder {\n+pub(super) struct TokenStreamBuilder {\n     acc: TokenStream,\n }\n \n-/// Public implementation details for the `TokenStream` type, such as iterators.\n-pub mod token_stream {\n+/// pub(super)lic implementation details for the `TokenStream` type, such as iterators.\n+pub(super) mod token_stream {\n     use std::str::FromStr;\n \n     use super::{tt, TokenStream, TokenTree};"}]}