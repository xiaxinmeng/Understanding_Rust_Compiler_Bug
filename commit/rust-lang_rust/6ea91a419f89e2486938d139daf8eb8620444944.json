{"sha": "6ea91a419f89e2486938d139daf8eb8620444944", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYTkxYTQxOWY4OWUyNDg2OTM4ZDEzOWRhZjhlYjg2MjA0NDQ5NDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-30T08:57:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-30T08:57:17Z"}, "message": "Merge #8695\n\n8695: internal: fix naming polarity r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "82e7ad6968979da2c101d878c459618f1209cda2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e7ad6968979da2c101d878c459618f1209cda2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ea91a419f89e2486938d139daf8eb8620444944", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgi8ZtCRBK7hj4Ov3rIwAARX8IACL4s8GmHBY0OYIRZ6klW5zO\npgNp4kBtRN2GLEEI7H0asRjZxFfsg+99sZd6OTHzS+baC+gpwD26Teb5Q6aeGhF4\nStY8uCp+gJO9fTQ6M7u50n33l8JuWufaz1qkLvvDgtSpuscwgyHGaRQsNPq1JSxO\nJin9arkSEKdtTiX5SPKGCtT+jWvY119LXlKtyvItio7PuNSK9Z3qYi1B7J5yUOyY\nK5XLyNckTxdQVcn5uTfRsse7o3TXWgk1sBeO2sUPjLj/7TpQBJbEaQeQgDS/7jdv\nJTiXfA4TPKNtdvCGXifODBcBrQS74S0ZOoOj0m6gr1gk8uiN5Ch48S2Cau2JnL0=\n=G0up\n-----END PGP SIGNATURE-----\n", "payload": "tree 82e7ad6968979da2c101d878c459618f1209cda2\nparent 80bee14e14f67f02746befff77a8a4bbfd3e5849\nparent 1a01a5ae190ad02e44c3550ac0336b1f0983be51\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619773037 +0000\ncommitter GitHub <noreply@github.com> 1619773037 +0000\n\nMerge #8695\n\n8695: internal: fix naming polarity r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea91a419f89e2486938d139daf8eb8620444944", "html_url": "https://github.com/rust-lang/rust/commit/6ea91a419f89e2486938d139daf8eb8620444944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ea91a419f89e2486938d139daf8eb8620444944/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80bee14e14f67f02746befff77a8a4bbfd3e5849", "url": "https://api.github.com/repos/rust-lang/rust/commits/80bee14e14f67f02746befff77a8a4bbfd3e5849", "html_url": "https://github.com/rust-lang/rust/commit/80bee14e14f67f02746befff77a8a4bbfd3e5849"}, {"sha": "1a01a5ae190ad02e44c3550ac0336b1f0983be51", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a01a5ae190ad02e44c3550ac0336b1f0983be51", "html_url": "https://github.com/rust-lang/rust/commit/1a01a5ae190ad02e44c3550ac0336b1f0983be51"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "508ac37c22a6a4eaec5fe1db5ec3ba92cc0a6396", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=6ea91a419f89e2486938d139daf8eb8620444944", "patch": "@@ -170,7 +170,7 @@ impl HirDisplay for Field {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         write_visibility(self.parent.module(f.db).id, self.visibility(f.db), f)?;\n         write!(f, \"{}: \", self.name(f.db))?;\n-        self.signature_ty(f.db).hir_fmt(f)\n+        self.ty(f.db).hir_fmt(f)\n     }\n }\n "}, {"sha": "d8ccfde0cfb055b984274fc9e0a2588d9f79a910", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=6ea91a419f89e2486938d139daf8eb8620444944", "patch": "@@ -509,7 +509,7 @@ impl Field {\n     /// placeholder types for type parameters). This is good for showing\n     /// signature help, but not so good to actually get the type of the field\n     /// when you actually have a variable of the struct.\n-    pub fn signature_ty(&self, db: &dyn HirDatabase) -> Type {\n+    pub fn ty(&self, db: &dyn HirDatabase) -> Type {\n         let var_id = self.parent.into();\n         let generic_def_id: GenericDefId = match self.parent {\n             VariantDef::Struct(it) => it.id.into(),\n@@ -1984,7 +1984,7 @@ impl Type {\n         None\n     }\n \n-    pub fn type_parameters(&self) -> impl Iterator<Item = Type> + '_ {\n+    pub fn type_arguments(&self) -> impl Iterator<Item = Type> + '_ {\n         self.ty\n             .strip_references()\n             .as_adt()"}, {"sha": "f76715d84f3f1151af7bd2ee6c12a943f94f78ee", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=6ea91a419f89e2486938d139daf8eb8620444944", "patch": "@@ -304,11 +304,11 @@ fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Op\n                         let name = adt.name(sema.db);\n                         let idx = path.rfind(':').map_or(0, |idx| idx + 1);\n                         let (prefix, suffix) = path.split_at(idx);\n-                        let mut ty_params = ty.type_parameters().peekable();\n-                        let params = if ty_params.peek().is_some() {\n+                        let mut ty_args = ty.type_arguments().peekable();\n+                        let params = if ty_args.peek().is_some() {\n                             format!(\n                                 \"<{}>\",\n-                                ty_params.format_with(\", \", |ty, cb| cb(&ty.display(sema.db)))\n+                                ty_args.format_with(\", \", |ty, cb| cb(&ty.display(sema.db)))\n                             )\n                         } else {\n                             String::new()"}, {"sha": "b30652a9de66f9796828b5a937f8c0b99d7b7792", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=6ea91a419f89e2486938d139daf8eb8620444944", "patch": "@@ -1183,7 +1183,7 @@ fn make_ret_ty(ctx: &AssistContext, module: hir::Module, fun: &Function) -> Opti\n         }\n         FlowHandler::Try { kind: TryKind::Result { ty: parent_ret_ty } } => {\n             let handler_ty = parent_ret_ty\n-                .type_parameters()\n+                .type_arguments()\n                 .nth(1)\n                 .map(|ty| make_ty(&ty, ctx, module))\n                 .unwrap_or_else(make::ty_unit);"}, {"sha": "ce6998d82878f6e1d99d114f6777e2a284829d95", "filename": "crates/ide_assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=6ea91a419f89e2486938d139daf8eb8620444944", "patch": "@@ -91,7 +91,7 @@ fn existing_from_impl(\n \n     let enum_type = enum_.ty(sema.db);\n \n-    let wrapped_type = variant.fields(sema.db).get(0)?.signature_ty(sema.db);\n+    let wrapped_type = variant.fields(sema.db).get(0)?.ty(sema.db);\n \n     if enum_type.impls_trait(sema.db, from_trait, &[wrapped_type]) {\n         Some(())"}, {"sha": "deafcd630e542ed1149848dc9c7263ca1708c357", "filename": "crates/ide_assists/src/utils/suggest_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=6ea91a419f89e2486938d139daf8eb8620444944", "patch": "@@ -227,7 +227,7 @@ fn name_of_type(ty: &hir::Type, db: &RootDatabase) -> Option<String> {\n         let name = adt.name(db).to_string();\n \n         if WRAPPER_TYPES.contains(&name.as_str()) {\n-            let inner_ty = ty.type_parameters().next()?;\n+            let inner_ty = ty.type_arguments().next()?;\n             return name_of_type(&inner_ty, db);\n         }\n "}, {"sha": "b005bd7736dd50fa31e463e527b4d05928174039", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=6ea91a419f89e2486938d139daf8eb8620444944", "patch": "@@ -347,7 +347,7 @@ impl<'a> CompletionContext<'a> {\n                                 .and_then(|node| ast::RecordExprField::cast(node))\n                                 .and_then(|rf| self.sema.resolve_record_field(&rf).zip(Some(rf)))\n                                 .map(|(f, rf)|(\n-                                    Some(f.0.signature_ty(self.db)),\n+                                    Some(f.0.ty(self.db)),\n                                     rf.field_name().map(NameOrNameRef::NameRef),\n                                 ))\n                                 .unwrap_or((None, None))\n@@ -357,7 +357,7 @@ impl<'a> CompletionContext<'a> {\n                             self.sema\n                                 .resolve_record_field(&it)\n                                 .map(|f|(\n-                                    Some(f.0.signature_ty(self.db)),\n+                                    Some(f.0.ty(self.db)),\n                                     it.field_name().map(NameOrNameRef::NameRef),\n                                 ))\n                                 .unwrap_or((None, None))"}, {"sha": "0c0c71134a862e154be0a1df9a8ec495435fbe01", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea91a419f89e2486938d139daf8eb8620444944/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=6ea91a419f89e2486938d139daf8eb8620444944", "patch": "@@ -93,7 +93,7 @@ impl<'a> EnumRender<'a> {\n             .variant\n             .fields(self.ctx.db())\n             .into_iter()\n-            .map(|field| (field.name(self.ctx.db()), field.signature_ty(self.ctx.db())));\n+            .map(|field| (field.name(self.ctx.db()), field.ty(self.ctx.db())));\n \n         match self.variant_kind {\n             StructKind::Tuple | StructKind::Unit => format!("}]}