{"sha": "4a21a0bebc0493c963525d827c34e62a726be249", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMjFhMGJlYmMwNDkzYzk2MzUyNWQ4MjdjMzRlNjJhNzI2YmUyNDk=", "commit": {"author": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-05-28T03:39:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-14T17:27:25Z"}, "message": "Fix `future_prelude_collision` not maintaining type aliases", "tree": {"sha": "41488d9194359af10a245e101436815567617e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41488d9194359af10a245e101436815567617e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a21a0bebc0493c963525d827c34e62a726be249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a21a0bebc0493c963525d827c34e62a726be249", "html_url": "https://github.com/rust-lang/rust/commit/4a21a0bebc0493c963525d827c34e62a726be249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a21a0bebc0493c963525d827c34e62a726be249/comments", "author": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4999242d4921988b371dc62e40c877e7097a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4999242d4921988b371dc62e40c877e7097a1f", "html_url": "https://github.com/rust-lang/rust/commit/cb4999242d4921988b371dc62e40c877e7097a1f"}], "stats": {"total": 103, "additions": 71, "deletions": 32}, "files": [{"sha": "e6a2c5d5d14de2ef5d78f542d5fe11b76677d81a", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a21a0bebc0493c963525d827c34e62a726be249/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a21a0bebc0493c963525d827c34e62a726be249/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=4a21a0bebc0493c963525d827c34e62a726be249", "patch": "@@ -466,7 +466,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n-        let (res, opt_ty, segs) = self.resolve_ty_and_res_ufcs(qpath, expr.hir_id, expr.span);\n+        let (res, opt_ty, segs) =\n+            self.resolve_ty_and_res_fully_qualified_call(qpath, expr.hir_id, expr.span);\n         let ty = match res {\n             Res::Err => {\n                 self.set_tainted_by_errors();"}, {"sha": "8e33f4f9e12f637ccae950c920a5ffa08b4d6c9c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4a21a0bebc0493c963525d827c34e62a726be249/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a21a0bebc0493c963525d827c34e62a726be249/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=4a21a0bebc0493c963525d827c34e62a726be249", "patch": "@@ -906,13 +906,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Resolves an associated value path into a base type and associated constant, or method\n     /// resolution. The newly resolved definition is written into `type_dependent_defs`.\n-    pub fn resolve_ty_and_res_ufcs(\n+    pub fn resolve_ty_and_res_fully_qualified_call(\n         &self,\n         qpath: &'tcx QPath<'tcx>,\n         hir_id: hir::HirId,\n         span: Span,\n     ) -> (Res, Option<Ty<'tcx>>, &'tcx [hir::PathSegment<'tcx>]) {\n-        debug!(\"resolve_ty_and_res_ufcs: qpath={:?} hir_id={:?} span={:?}\", qpath, hir_id, span);\n+        debug!(\n+            \"resolve_ty_and_res_fully_qualified_call: qpath={:?} hir_id={:?} span={:?}\",\n+            qpath, hir_id, span\n+        );\n         let (ty, qself, item_segment) = match *qpath {\n             QPath::Resolved(ref opt_qself, ref path) => {\n                 return (\n@@ -922,7 +925,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n             }\n             QPath::TypeRelative(ref qself, ref segment) => (self.to_ty(qself), qself, segment),\n-            QPath::LangItem(..) => bug!(\"`resolve_ty_and_res_ufcs` called on `LangItem`\"),\n+            QPath::LangItem(..) => {\n+                bug!(\"`resolve_ty_and_res_fully_qualified_call` called on `LangItem`\")\n+            }\n         };\n         if let Some(&cached_result) = self.typeck_results.borrow().type_dependent_defs().get(hir_id)\n         {\n@@ -932,25 +937,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return (def, Some(ty), slice::from_ref(&**item_segment));\n         }\n         let item_name = item_segment.ident;\n-        let result = self.resolve_ufcs(span, item_name, ty, hir_id).or_else(|error| {\n-            let result = match error {\n-                method::MethodError::PrivateMatch(kind, def_id, _) => Ok((kind, def_id)),\n-                _ => Err(ErrorReported),\n-            };\n-            if item_name.name != kw::Empty {\n-                if let Some(mut e) = self.report_method_error(\n-                    span,\n-                    ty,\n-                    item_name,\n-                    SelfSource::QPath(qself),\n-                    error,\n-                    None,\n-                ) {\n-                    e.emit();\n+        let result = self\n+            .resolve_fully_qualified_call(span, item_name, ty, qself.span, hir_id)\n+            .or_else(|error| {\n+                let result = match error {\n+                    method::MethodError::PrivateMatch(kind, def_id, _) => Ok((kind, def_id)),\n+                    _ => Err(ErrorReported),\n+                };\n+                if item_name.name != kw::Empty {\n+                    if let Some(mut e) = self.report_method_error(\n+                        span,\n+                        ty,\n+                        item_name,\n+                        SelfSource::QPath(qself),\n+                        error,\n+                        None,\n+                    ) {\n+                        e.emit();\n+                    }\n                 }\n-            }\n-            result\n-        });\n+                result\n+            });\n \n         if result.is_ok() {\n             self.maybe_lint_bare_trait(qpath, hir_id);"}, {"sha": "2198455c1634717c9b8e9f7d099ddc0bf32a55af", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4a21a0bebc0493c963525d827c34e62a726be249/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a21a0bebc0493c963525d827c34e62a726be249/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=4a21a0bebc0493c963525d827c34e62a726be249", "patch": "@@ -501,8 +501,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         Some(InferOk { obligations, value: callee })\n     }\n \n-    /// Performs \"universal function call\" lookup. If lookup is successful, it will return the type\n-    /// of definition and the [`DefId`] of the found function definition.\n+    /// Performs a [full-qualified function call] (formerly \"universal function call\") lookup. If\n+    /// lookup is successful, it will return the type of definition and the [`DefId`] of the found\n+    /// function definition.\n+    ///\n+    /// [full-qualified function call]: https://doc.rust-lang.org/reference/expressions/call-expr.html#disambiguating-function-calls\n     ///\n     /// # Arguments\n     ///\n@@ -512,17 +515,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// * `span`:                  the span of the call, excluding arguments (`Foo::bar::<T1, ...Tn>`)\n     /// * `method_name`:           the identifier of the function within the container type (`bar`)\n     /// * `self_ty`:               the type to search within (`Foo`)\n+    /// * `self_ty_span`           the span for the type being searched within (span of `Foo`)\n     /// * `expr_id`:               the [`hir::HirId`] of the expression composing the entire call\n     #[instrument(level = \"debug\", skip(self))]\n-    pub fn resolve_ufcs(\n+    pub fn resolve_fully_qualified_call(\n         &self,\n         span: Span,\n         method_name: Ident,\n         self_ty: Ty<'tcx>,\n+        self_ty_span: Span,\n         expr_id: hir::HirId,\n     ) -> Result<(DefKind, DefId), MethodError<'tcx>> {\n         debug!(\n-            \"resolve_ufcs: method_name={:?} self_ty={:?} expr_id={:?}\",\n+            \"resolve_fully_qualified_call: method_name={:?} self_ty={:?} expr_id={:?}\",\n             method_name, self_ty, expr_id,\n         );\n \n@@ -589,6 +594,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             method_name.name\n                         ));\n \n+                        let self_ty = self\n+                            .sess()\n+                            .source_map()\n+                            .span_to_snippet(self_ty_span)\n+                            .unwrap_or_else(|_| self_ty.to_string());\n+\n                         lint.span_suggestion(\n                             span,\n                             \"disambiguate the associated function\",\n@@ -602,18 +613,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        debug!(\"resolve_ufcs: pick={:?}\", pick);\n+        debug!(\"resolve_fully_qualified_call: pick={:?}\", pick);\n         {\n             let mut typeck_results = self.typeck_results.borrow_mut();\n             let used_trait_imports = Lrc::get_mut(&mut typeck_results.used_trait_imports).unwrap();\n             for import_id in pick.import_ids {\n-                debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_id);\n+                debug!(\"resolve_fully_qualified_call: used_trait_import: {:?}\", import_id);\n                 used_trait_imports.insert(import_id);\n             }\n         }\n \n         let def_kind = pick.item.kind.as_def_kind();\n-        debug!(\"resolve_ufcs: def_kind={:?}, def_id={:?}\", def_kind, pick.item.def_id);\n+        debug!(\n+            \"resolve_fully_qualified_call: def_kind={:?}, def_id={:?}\",\n+            def_kind, pick.item.def_id\n+        );\n         tcx.check_stability(pick.item.def_id, Some(expr_id), span, Some(method_name.span));\n         Ok((def_kind, pick.item.def_id))\n     }"}, {"sha": "2879614d0c8085ff9ebcbbfa0769af46da4a2aaf", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a21a0bebc0493c963525d827c34e62a726be249/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a21a0bebc0493c963525d827c34e62a726be249/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=4a21a0bebc0493c963525d827c34e62a726be249", "patch": "@@ -160,7 +160,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ti: TopInfo<'tcx>,\n     ) {\n         let path_res = match &pat.kind {\n-            PatKind::Path(qpath) => Some(self.resolve_ty_and_res_ufcs(qpath, pat.hir_id, pat.span)),\n+            PatKind::Path(qpath) => {\n+                Some(self.resolve_ty_and_res_fully_qualified_call(qpath, pat.hir_id, pat.span))\n+            }\n             _ => None,\n         };\n         let adjust_mode = self.calc_adjust_mode(pat, path_res.map(|(res, ..)| res));\n@@ -904,7 +906,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         // Resolve the path and check the definition for errors.\n-        let (res, opt_ty, segments) = self.resolve_ty_and_res_ufcs(qpath, pat.hir_id, pat.span);\n+        let (res, opt_ty, segments) =\n+            self.resolve_ty_and_res_fully_qualified_call(qpath, pat.hir_id, pat.span);\n         if res == Res::Err {\n             self.set_tainted_by_errors();\n             on_error();"}, {"sha": "922c0d54a0075ba28c5b5b32fe15d4d37d460e29", "filename": "src/test/ui/lint/future-prelude-collision.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a21a0bebc0493c963525d827c34e62a726be249/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a21a0bebc0493c963525d827c34e62a726be249/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.fixed?ref=4a21a0bebc0493c963525d827c34e62a726be249", "patch": "@@ -80,4 +80,8 @@ fn main() {\n     let mut_ptr = std::ptr::addr_of_mut!(data);\n     let _: u32 = TryIntoU32::try_into(mut_ptr as *const _).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+\n+    type U32Alias = u32;\n+    let _ = <U32Alias as TryFromU8>::try_from(3u8).unwrap();\n+    //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n }"}, {"sha": "154dde16d9e9b44f2e8950e7211cb95ff66d471e", "filename": "src/test/ui/lint/future-prelude-collision.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a21a0bebc0493c963525d827c34e62a726be249/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a21a0bebc0493c963525d827c34e62a726be249/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.rs?ref=4a21a0bebc0493c963525d827c34e62a726be249", "patch": "@@ -80,4 +80,8 @@ fn main() {\n     let mut_ptr = std::ptr::addr_of_mut!(data);\n     let _: u32 = mut_ptr.try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+\n+    type U32Alias = u32;\n+    let _ = U32Alias::try_from(3u8).unwrap();\n+    //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n }"}, {"sha": "9c92074c36f5818c4bf88cea2577df746a66d729", "filename": "src/test/ui/lint/future-prelude-collision.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a21a0bebc0493c963525d827c34e62a726be249/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a21a0bebc0493c963525d827c34e62a726be249/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-prelude-collision.stderr?ref=4a21a0bebc0493c963525d827c34e62a726be249", "patch": "@@ -42,5 +42,11 @@ warning: trait method `try_into` will become ambiguous in Rust 2021\n LL |     let _: u32 = mut_ptr.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(mut_ptr as *const _)`\n \n-warning: 7 warnings emitted\n+warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision.rs:85:13\n+   |\n+LL |     let _ = U32Alias::try_from(3u8).unwrap();\n+   |             ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<U32Alias as TryFromU8>::try_from`\n+\n+warning: 8 warnings emitted\n "}]}