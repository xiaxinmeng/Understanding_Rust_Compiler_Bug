{"sha": "bfc184cd2c6baaba01f72bc11be2f0af3c21b236", "node_id": "C_kwDOAAsO6NoAKGJmYzE4NGNkMmM2YmFhYmEwMWY3MmJjMTFiZTJmMGFmM2MyMWIyMzY", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-10-26T16:20:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-26T16:20:15Z"}, "message": "Merge pull request #232 from GuillaumeGomez/more-inline-asm-register-class-conversion\n\nAdd missing register class conversion for inline asm", "tree": {"sha": "b11265a3a955f31dae1f3748d89e679a518bf1a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11265a3a955f31dae1f3748d89e679a518bf1a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfc184cd2c6baaba01f72bc11be2f0af3c21b236", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWV4/CRBK7hj4Ov3rIwAAxKYIAB2w/1V1J49DvuSlgj4mtToE\n1bhN3a5t0RJjcdxmy3SBjRqLGXJFXBBKL1hE/wa8d79Z3udaT42iSdh2wXBFLYQM\nkh7Es/770d1DjS4bjjm2uVOHg0SK7rDWnjmn1wXs8C/NL9aOSGK6SSo2NftntdIS\nb8wSDQtTyW1tCag6sopw/fI27KEbt9+wIZItUufVdPThskaEkAfWcv2WOoMlqIMA\nEO8oIMYnvLS/gIun0nAejQRXcMy8/c4XT5JIsvIdJStZok2wbIcEgMxZiyHNtF1r\nJdYalUTarmMEWYfEdTQDgahBwjC/H8WgxMDBuvNAr/zdlcJqa2TZN3Y5w225MkA=\n=QmRt\n-----END PGP SIGNATURE-----\n", "payload": "tree b11265a3a955f31dae1f3748d89e679a518bf1a7\nparent fac8d3aacfad27f9012b11f69118cf5df845055d\nparent bf3ef4ce1ae3f9b015c530c29eea01aa7312a1ec\nauthor antoyo <antoyo@users.noreply.github.com> 1666801215 -0400\ncommitter GitHub <noreply@github.com> 1666801215 -0400\n\nMerge pull request #232 from GuillaumeGomez/more-inline-asm-register-class-conversion\n\nAdd missing register class conversion for inline asm"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc184cd2c6baaba01f72bc11be2f0af3c21b236", "html_url": "https://github.com/rust-lang/rust/commit/bfc184cd2c6baaba01f72bc11be2f0af3c21b236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfc184cd2c6baaba01f72bc11be2f0af3c21b236/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fac8d3aacfad27f9012b11f69118cf5df845055d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fac8d3aacfad27f9012b11f69118cf5df845055d", "html_url": "https://github.com/rust-lang/rust/commit/fac8d3aacfad27f9012b11f69118cf5df845055d"}, {"sha": "bf3ef4ce1ae3f9b015c530c29eea01aa7312a1ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3ef4ce1ae3f9b015c530c29eea01aa7312a1ec", "html_url": "https://github.com/rust-lang/rust/commit/bf3ef4ce1ae3f9b015c530c29eea01aa7312a1ec"}], "stats": {"total": 228, "additions": 143, "deletions": 85}, "files": [{"sha": "915d4a9a8a7d03daa018057f2e3c81fe90f67750", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfc184cd2c6baaba01f72bc11be2f0af3c21b236/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/bfc184cd2c6baaba01f72bc11be2f0af3c21b236/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=bfc184cd2c6baaba01f72bc11be2f0af3c21b236", "patch": "@@ -13,7 +13,7 @@ env:\n \n jobs:\n   build:\n-    runs-on: ubuntu-latest\n+    runs-on: ubuntu-20.04\n \n     strategy:\n       fail-fast: false\n@@ -25,6 +25,8 @@ jobs:\n         commands: [\n           \"--mini-tests\",\n           \"--std-tests\",\n+          # FIXME: re-enable asm tests when GCC can emit in the right syntax.\n+          # \"--asm-tests\",\n           \"--test-libcore\",\n           \"--extended-rand-tests\",\n           \"--extended-regex-example-tests\",\n@@ -43,7 +45,8 @@ jobs:\n         path: llvm\n \n     - name: Install packages\n-      run: sudo apt-get install ninja-build ripgrep\n+      # `llvm-10-tools` is needed to install the `FileCheck` binary which is used for asm tests.\n+      run: sudo apt-get install ninja-build ripgrep llvm-10-tools\n \n     - name: Download artifact\n       uses: dawidd6/action-download-artifact@v2"}, {"sha": "6dea20e40081e369c7db6fc7ab4b4457bc0545b4", "filename": "src/asm.rs", "status": "modified", "additions": 94, "deletions": 60, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/bfc184cd2c6baaba01f72bc11be2f0af3c21b236/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc184cd2c6baaba01f72bc11be2f0af3c21b236/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=bfc184cd2c6baaba01f72bc11be2f0af3c21b236", "patch": "@@ -564,56 +564,71 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n                 _ => unimplemented!(),\n             }\n         },\n+        // They can be retrieved from https://gcc.gnu.org/onlinedocs/gcc/Machine-Constraints.html\n         InlineAsmRegOrRegClass::RegClass(reg) => match reg {\n-            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => unimplemented!(),\n-            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg) => unimplemented!(),\n-            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => unimplemented!(),\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => unimplemented!(),\n+            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg) => \"w\",\n+            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => \"x\",\n+            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n+                unreachable!(\"clobber-only\")\n+            }\n+            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low16)\n-            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8) => unimplemented!(),\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16)\n+            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8)\n+            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low8)\n-            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => unimplemented!(),\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n-            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg) => unimplemented!(),\n-            InlineAsmRegClass::Avr(_) => unimplemented!(),\n-            InlineAsmRegClass::Bpf(_) => unimplemented!(),\n-            InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => unimplemented!(),\n-            InlineAsmRegClass::Msp430(_) => unimplemented!(),\n-            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => unimplemented!(),\n-            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => unimplemented!(),\n-            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => unimplemented!(),\n-            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg_nonzero) => unimplemented!(),\n-            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => unimplemented!(),\n+            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4)\n+            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n+            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg) => \"t\",\n+            InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_upper) => \"d\",\n+            InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_pair) => \"r\",\n+            InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_iw) => \"w\",\n+            InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_ptr) => \"e\",\n+            InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => \"w\",\n+            InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => \"d\", // more specific than \"r\"\n+            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => \"f\",\n+            InlineAsmRegClass::Msp430(Msp430InlineAsmRegClass::reg) => \"r\",\n+            // https://github.com/gcc-mirror/gcc/blob/master/gcc/config/nvptx/nvptx.md -> look for\n+            // \"define_constraint\".\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => \"h\",\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => \"r\",\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => \"l\",\n+\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg_nonzero) => \"b\",\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::cr)\n             | InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::xer) => {\n                 unreachable!(\"clobber-only\")\n             },\n-            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => unimplemented!(),\n-            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => unimplemented!(),\n+            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => \"f\",\n+            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {\n+                unreachable!(\"clobber-only\")\n+            }\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd) => \"Q\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_byte) => \"q\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg)\n             | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg) => \"x\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => \"v\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => \"Yk\",\n-            InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => unimplemented!(),\n-            InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => unimplemented!(),\n             InlineAsmRegClass::X86(\n-                X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg | X86InlineAsmRegClass::tmm_reg,\n+                X86InlineAsmRegClass::kreg0\n+                | X86InlineAsmRegClass::x87_reg\n+                | X86InlineAsmRegClass::mmx_reg\n+                | X86InlineAsmRegClass::tmm_reg,\n             ) => unreachable!(\"clobber-only\"),\n             InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"GCC backend does not support SPIR-V\")\n             }\n-            InlineAsmRegClass::S390x(S390xInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::S390x(S390xInlineAsmRegClass::freg) => unimplemented!(),\n+            InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n+            InlineAsmRegClass::S390x(S390xInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::S390x(S390xInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::Err => unreachable!(),\n         }\n     };\n@@ -691,7 +706,10 @@ impl<'gcc, 'tcx> AsmMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n             && options.contains(InlineAsmOptions::ATT_SYNTAX);\n \n         // Build the template string\n-        let mut template_str = String::new();\n+        let mut template_str = \".pushsection .text\\n\".to_owned();\n+        if att_dialect {\n+            template_str.push_str(\".att_syntax\\n\");\n+        }\n         for piece in template {\n             match *piece {\n                 InlineAsmTemplatePiece::String(ref string) => {\n@@ -739,48 +757,51 @@ impl<'gcc, 'tcx> AsmMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n             }\n         }\n \n-        let template_str =\n-            if att_dialect {\n-                format!(\".att_syntax\\n\\t{}\\n\\t.intel_syntax noprefix\", template_str)\n-            }\n-            else {\n-                template_str\n-            };\n+        if att_dialect {\n+            template_str.push_str(\"\\n\\t.intel_syntax noprefix\");\n+        }\n         // NOTE: seems like gcc will put the asm in the wrong section, so set it to .text manually.\n-        let template_str = format!(\".pushsection .text\\n{}\\n.popsection\", template_str);\n+        template_str.push_str(\"\\n.popsection\");\n         self.context.add_top_level_asm(None, &template_str);\n     }\n }\n \n fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option<char>) -> Option<char> {\n+    // The modifiers can be retrieved from\n+    // https://gcc.gnu.org/onlinedocs/gcc/Modifiers.html#Modifiers\n     match reg {\n         InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::reg) => modifier,\n-        InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => modifier,\n         InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg)\n         | InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => {\n-            unimplemented!()\n+            if modifier == Some('v') { None } else { modifier }\n+        }\n+        InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n+            unreachable!(\"clobber-only\")\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)  => unimplemented!(),\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => None,\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => unimplemented!(),\n+        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => None,\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low16)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low8) => unimplemented!(),\n+        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low8) => Some('P'),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => {\n-            unimplemented!()\n+            if modifier.is_none() {\n+                Some('q')\n+            } else {\n+                modifier\n+            }\n         }\n-        InlineAsmRegClass::Avr(_) => unimplemented!(),\n-        InlineAsmRegClass::Bpf(_) => unimplemented!(),\n-        InlineAsmRegClass::Hexagon(_) => unimplemented!(),\n-        InlineAsmRegClass::Mips(_) => unimplemented!(),\n-        InlineAsmRegClass::Msp430(_) => unimplemented!(),\n-        InlineAsmRegClass::Nvptx(_) => unimplemented!(),\n-        InlineAsmRegClass::PowerPC(_) => unimplemented!(),\n+        InlineAsmRegClass::Hexagon(_) => None,\n+        InlineAsmRegClass::Mips(_) => None,\n+        InlineAsmRegClass::Nvptx(_) => None,\n+        InlineAsmRegClass::PowerPC(_) => None,\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => unimplemented!(),\n-        InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => unimplemented!(),\n+        | InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => None,\n+        InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {\n+            unreachable!(\"clobber-only\")\n+        }\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::reg)\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd) => match modifier {\n             None => if arch == InlineAsmArch::X86_64 { Some('q') } else { Some('k') },\n@@ -804,16 +825,29 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n             _ => unreachable!(),\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n-        InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => None,\n-        InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg | X86InlineAsmRegClass::tmm_reg) => {\n+        InlineAsmRegClass::X86(\n+            X86InlineAsmRegClass::x87_reg\n+            | X86InlineAsmRegClass::mmx_reg\n+            | X86InlineAsmRegClass::kreg0\n+            | X86InlineAsmRegClass::tmm_reg,\n+        ) => {\n             unreachable!(\"clobber-only\")\n         }\n-        InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => unimplemented!(),\n+        InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => None,\n+        InlineAsmRegClass::Bpf(_) => None,\n+        InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_pair)\n+        | InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_iw)\n+        | InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_ptr) => match modifier {\n+            Some('h') => Some('B'),\n+            Some('l') => Some('A'),\n+            _ => None,\n+        },\n+        InlineAsmRegClass::Avr(_) => None,\n+        InlineAsmRegClass::S390x(_) => None,\n+        InlineAsmRegClass::Msp430(_) => None,\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n-        },\n-        InlineAsmRegClass::S390x(S390xInlineAsmRegClass::reg) => unimplemented!(),\n-        InlineAsmRegClass::S390x(S390xInlineAsmRegClass::freg) => unimplemented!(),\n+        }\n         InlineAsmRegClass::Err => unreachable!(),\n     }\n }"}, {"sha": "9cfb8eb0d0783df27831cc1a433e156044f6cb6a", "filename": "test.sh", "status": "modified", "additions": 44, "deletions": 23, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/bfc184cd2c6baaba01f72bc11be2f0af3c21b236/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bfc184cd2c6baaba01f72bc11be2f0af3c21b236/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=bfc184cd2c6baaba01f72bc11be2f0af3c21b236", "patch": "@@ -75,6 +75,11 @@ while [[ $# -gt 0 ]]; do\n             shift\n             ;;\n \n+        \"--asm-tests\")\n+            funcs+=(asm_tests)\n+            shift\n+            ;;\n+\n         \"--extended-tests\")\n             funcs+=(extended_sysroot_tests)\n             shift\n@@ -197,6 +202,43 @@ function std_tests() {\n     $RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n }\n \n+function setup_rustc() {\n+    rust_toolchain=$(cat rust-toolchain | grep channel | sed 's/channel = \"\\(.*\\)\"/\\1/')\n+\n+    git clone https://github.com/rust-lang/rust.git || true\n+    cd rust\n+    git fetch\n+    git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(')\n+    export RUSTFLAGS=\n+\n+    rm config.toml || true\n+\n+    cat > config.toml <<EOF\n+[rust]\n+codegen-backends = []\n+deny-warnings = false\n+\n+[build]\n+cargo = \"$(which cargo)\"\n+local-rebuild = true\n+rustc = \"$HOME/.rustup/toolchains/$rust_toolchain-$TARGET_TRIPLE/bin/rustc\"\n+\n+[target.x86_64-unknown-linux-gnu]\n+llvm-filecheck = \"`which FileCheck-10 || which FileCheck-11 || which FileCheck-12 || which FileCheck-13 || which FileCheck-14`\"\n+EOF\n+\n+    rustc -V | cut -d' ' -f3 | tr -d '('\n+    git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(') src/test\n+}\n+\n+function asm_tests() {\n+    setup_rustc\n+\n+    echo \"[TEST] rustc test suite\"\n+    RUSTC_ARGS=\"-Zpanic-abort-tests -Csymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n+    COMPILETEST_FORCE_STAGE0=1 ./x.py test --run always --stage 0 src/test/assembly/asm --rustc-args \"$RUSTC_ARGS\"\n+}\n+\n # FIXME(antoyo): linker gives multiple definitions error on Linux\n #echo \"[BUILD] sysroot in release mode\"\n #./build_sysroot/build_sysroot.sh --release\n@@ -288,29 +330,7 @@ function test_rustc() {\n     echo\n     echo \"[TEST] rust-lang/rust\"\n \n-    rust_toolchain=$(cat rust-toolchain | grep channel | sed 's/channel = \"\\(.*\\)\"/\\1/')\n-\n-    git clone https://github.com/rust-lang/rust.git || true\n-    cd rust\n-    git fetch\n-    git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(')\n-    export RUSTFLAGS=\n-\n-    rm config.toml || true\n-\n-    cat > config.toml <<EOF\n-[rust]\n-codegen-backends = []\n-deny-warnings = false\n-\n-[build]\n-cargo = \"$(which cargo)\"\n-local-rebuild = true\n-rustc = \"$HOME/.rustup/toolchains/$rust_toolchain-$TARGET_TRIPLE/bin/rustc\"\n-EOF\n-\n-    rustc -V | cut -d' ' -f3 | tr -d '('\n-    git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(') src/test\n+    setup_rustc\n \n     for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" src/test/ui); do\n       rm $test\n@@ -380,6 +400,7 @@ function all() {\n     mini_tests\n     build_sysroot\n     std_tests\n+    asm_tests\n     test_libcore\n     extended_sysroot_tests\n     test_rustc"}]}