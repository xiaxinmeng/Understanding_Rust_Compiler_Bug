{"sha": "07201249f09ddf4ade1f02d8208b624b5d927212", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MjAxMjQ5ZjA5ZGRmNGFkZTFmMDJkODIwOGI2MjRiNWQ5MjcyMTI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-09-15T14:14:18Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-14T16:18:51Z"}, "message": "process nested obligations in autoderef\n\nThis is a hack-fix to #53843, but I am worried it might break things\nbecause it makes the \"inference pollution\" problem worse.\n\nFixes #53843 (but introduces a bug that someone might notice).", "tree": {"sha": "fde6f67e0f78c62fdd0266ac370d3738c2c93840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fde6f67e0f78c62fdd0266ac370d3738c2c93840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07201249f09ddf4ade1f02d8208b624b5d927212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07201249f09ddf4ade1f02d8208b624b5d927212", "html_url": "https://github.com/rust-lang/rust/commit/07201249f09ddf4ade1f02d8208b624b5d927212", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07201249f09ddf4ade1f02d8208b624b5d927212/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b07e0713b2d82417968db08cd0575734cdac0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b07e0713b2d82417968db08cd0575734cdac0d", "html_url": "https://github.com/rust-lang/rust/commit/f4b07e0713b2d82417968db08cd0575734cdac0d"}], "stats": {"total": 97, "additions": 80, "deletions": 17}, "files": [{"sha": "09c7bd679705a8c3e27e2c270677e90698ceb548", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/07201249f09ddf4ade1f02d8208b624b5d927212/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07201249f09ddf4ade1f02d8208b624b5d927212/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=07201249f09ddf4ade1f02d8208b624b5d927212", "patch": "@@ -61,6 +61,16 @@ pub struct FulfillmentContext<'tcx> {\n     // type-lives-for-region constraints, and because the type\n     // is well-formed, the constraints should hold.\n     register_region_obligations: bool,\n+    // Is it OK to register obligations into this infcx inside\n+    // an infcx snapshot?\n+    //\n+    // The \"primary fulfillment\" in many cases in typeck lives\n+    // outside of any snapshot, so any use of it inside a snapshot\n+    // will lead to trouble and therefore is checked against, but\n+    // other fulfillment contexts sometimes do live inside of\n+    // a snapshot (they don't *straddle* a snapshot, so there\n+    // is no trouble there).\n+    usable_in_snapshot: bool\n }\n \n #[derive(Clone, Debug)]\n@@ -74,14 +84,24 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n     pub fn new() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n-            register_region_obligations: true\n+            register_region_obligations: true,\n+            usable_in_snapshot: false,\n+        }\n+    }\n+\n+    pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {\n+        FulfillmentContext {\n+            predicates: ObligationForest::new(),\n+            register_region_obligations: true,\n+            usable_in_snapshot: true,\n         }\n     }\n \n     pub fn new_ignoring_regions() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n-            register_region_obligations: false\n+            register_region_obligations: false,\n+            usable_in_snapshot: false\n         }\n     }\n \n@@ -195,7 +215,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n \n         debug!(\"register_predicate_obligation(obligation={:?})\", obligation);\n \n-        assert!(!infcx.is_in_snapshot());\n+        assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);\n \n         self.predicates.register_obligation(PendingPredicateObligation {\n             obligation,"}, {"sha": "7a84634d2a3eea3eaa4a79dd72b5bc60d2129e38", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/07201249f09ddf4ade1f02d8208b624b5d927212/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07201249f09ddf4ade1f02d8208b624b5d927212/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=07201249f09ddf4ade1f02d8208b624b5d927212", "patch": "@@ -15,7 +15,7 @@ use super::method::MethodCallee;\n \n use rustc::infer::InferOk;\n use rustc::session::DiagnosticMessageId;\n-use rustc::traits;\n+use rustc::traits::{self, TraitEngine};\n use rustc::ty::{self, Ty, TraitRef};\n use rustc::ty::{ToPredicate, TypeFoldable};\n use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref};\n@@ -128,19 +128,28 @@ impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n-        let mut selcx = traits::SelectionContext::new(self.fcx);\n-        let normalized_ty = traits::normalize_projection_type(&mut selcx,\n-                                                              self.fcx.param_env,\n-                                                              ty::ProjectionTy::from_ref_and_name(\n-                                                                  tcx,\n-                                                                  trait_ref,\n-                                                                  Ident::from_str(\"Target\"),\n-                                                              ),\n-                                                              cause,\n-                                                              0,\n-                                                              &mut self.obligations);\n-\n-        debug!(\"overloaded_deref_ty({:?}) = {:?}\", ty, normalized_ty);\n+        let mut fulfillcx = traits::FulfillmentContext::new_in_snapshot();\n+        let normalized_ty = fulfillcx.normalize_projection_type(\n+            &self.fcx,\n+            self.fcx.param_env,\n+            ty::ProjectionTy::from_ref_and_name(\n+                tcx,\n+                trait_ref,\n+                Ident::from_str(\"Target\"),\n+            ),\n+            cause);\n+        if let Err(e) = fulfillcx.select_where_possible(&self.fcx) {\n+            // This shouldn't happen, except for evaluate/fulfill mismatches,\n+            // but that's not a reason for an ICE (`predicate_may_hold` is conservative\n+            // by design).\n+            debug!(\"overloaded_deref_ty: encountered errors {:?} while fulfilling\",\n+                   e);\n+            return None;\n+        }\n+        let obligations = fulfillcx.pending_obligations();\n+        debug!(\"overloaded_deref_ty({:?}) = ({:?}, {:?})\",\n+               ty, normalized_ty, obligations);\n+        self.obligations.extend(obligations);\n \n         Some(self.fcx.resolve_type_vars_if_possible(&normalized_ty))\n     }"}, {"sha": "4b15ecb3e542b1fdd26dba150c75e10dc60b78ed", "filename": "src/test/run-pass/issue-53843.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/07201249f09ddf4ade1f02d8208b624b5d927212/src%2Ftest%2Frun-pass%2Fissue-53843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07201249f09ddf4ade1f02d8208b624b5d927212/src%2Ftest%2Frun-pass%2Fissue-53843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-53843.rs?ref=07201249f09ddf4ade1f02d8208b624b5d927212", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+\n+pub struct Pin<P>(P);\n+\n+impl<P, T> Deref for Pin<P>\n+where\n+    P: Deref<Target=T>,\n+{\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.0\n+    }\n+}\n+\n+impl<P> Pin<P> {\n+    fn poll(self) {}\n+}\n+\n+fn main() {\n+    let mut unit = ();\n+    let pin = Pin(&mut unit);\n+    pin.poll();\n+}"}]}