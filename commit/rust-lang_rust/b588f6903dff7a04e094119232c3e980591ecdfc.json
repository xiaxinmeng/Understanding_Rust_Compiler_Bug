{"sha": "b588f6903dff7a04e094119232c3e980591ecdfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ODhmNjkwM2RmZjdhMDRlMDk0MTE5MjMyYzNlOTgwNTkxZWNkZmM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-25T20:14:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-25T20:14:51Z"}, "message": "Rollup merge of #33160 - euclio:rustdoc-unstable-deprecated, r=alexcrichton\n\nshow unstable status for deprecated items\n\nFixes #32374.", "tree": {"sha": "958fe13df85ca28ee50a26e86e726731b1169246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/958fe13df85ca28ee50a26e86e726731b1169246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b588f6903dff7a04e094119232c3e980591ecdfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b588f6903dff7a04e094119232c3e980591ecdfc", "html_url": "https://github.com/rust-lang/rust/commit/b588f6903dff7a04e094119232c3e980591ecdfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b588f6903dff7a04e094119232c3e980591ecdfc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "html_url": "https://github.com/rust-lang/rust/commit/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43"}, {"sha": "c7c34fdace12fb08e1c00f16fce58abe95835bf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c34fdace12fb08e1c00f16fce58abe95835bf8", "html_url": "https://github.com/rust-lang/rust/commit/c7c34fdace12fb08e1c00f16fce58abe95835bf8"}], "stats": {"total": 92, "additions": 63, "deletions": 29}, "files": [{"sha": "6b12846777080fb04b7b258f5b11deffd87fc976", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b588f6903dff7a04e094119232c3e980591ecdfc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b588f6903dff7a04e094119232c3e980591ecdfc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b588f6903dff7a04e094119232c3e980591ecdfc", "patch": "@@ -1640,8 +1640,8 @@ fn plain_summary_line(s: Option<&str>) -> String {\n }\n \n fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Result {\n-    if let Some(s) = short_stability(item, cx, true) {\n-        write!(w, \"<div class='stability'>{}</div>\", s)?;\n+    for stability in short_stability(item, cx, true) {\n+        write!(w, \"<div class='stability'>{}</div>\", stability)?;\n     }\n     if let Some(s) = item.doc_value() {\n         write!(w, \"<div class='docblock'>{}</div>\", Markdown(s))?;\n@@ -1761,8 +1761,15 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n             _ => {\n                 if myitem.name.is_none() { continue }\n-                let stab_docs = if let Some(s) = short_stability(myitem, cx, false) {\n-                    format!(\"[{}]\", s)\n+\n+                let stabilities = short_stability(myitem, cx, false);\n+\n+                let stab_docs = if !stabilities.is_empty() {\n+                    stabilities.iter()\n+                               .map(|s| format!(\"[{}]\", s))\n+                               .collect::<Vec<_>>()\n+                               .as_slice()\n+                               .join(\" \")\n                 } else {\n                     String::new()\n                 };\n@@ -1789,21 +1796,26 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     write!(w, \"</table>\")\n }\n \n-fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Option<String> {\n-    item.stability.as_ref().and_then(|stab| {\n+fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<String> {\n+    let mut stability = vec![];\n+\n+    if let Some(stab) = item.stability.as_ref() {\n         let reason = if show_reason && !stab.reason.is_empty() {\n             format!(\": {}\", stab.reason)\n         } else {\n             String::new()\n         };\n-        let text = if !stab.deprecated_since.is_empty() {\n+        if !stab.deprecated_since.is_empty() {\n             let since = if show_reason {\n                 format!(\" since {}\", Escape(&stab.deprecated_since))\n             } else {\n                 String::new()\n             };\n-            format!(\"Deprecated{}{}\", since, Markdown(&reason))\n-        } else if stab.level == stability::Unstable {\n+            let text = format!(\"Deprecated{}{}\", since, Markdown(&reason));\n+            stability.push(format!(\"<em class='stab deprecated'>{}</em>\", text))\n+        };\n+\n+        if stab.level == stability::Unstable {\n             let unstable_extra = if show_reason {\n                 match (!stab.feature.is_empty(), &cx.shared.issue_tracker_base_url, stab.issue) {\n                     (true, &Some(ref tracker_url), Some(issue_no)) if issue_no > 0 =>\n@@ -1819,29 +1831,26 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Optio\n             } else {\n                 String::new()\n             };\n-            format!(\"Unstable{}{}\", unstable_extra, Markdown(&reason))\n+            let text = format!(\"Unstable{}{}\", unstable_extra, Markdown(&reason));\n+            stability.push(format!(\"<em class='stab unstable'>{}</em>\", text))\n+        };\n+    } else if let Some(depr) = item.deprecation.as_ref() {\n+        let note = if show_reason && !depr.note.is_empty() {\n+            format!(\": {}\", depr.note)\n         } else {\n-            return None\n+            String::new()\n+        };\n+        let since = if show_reason && !depr.since.is_empty() {\n+            format!(\" since {}\", Escape(&depr.since))\n+        } else {\n+            String::new()\n         };\n-        Some(format!(\"<em class='stab {}'>{}</em>\",\n-                     item.stability_class(), text))\n-    }).or_else(|| {\n-        item.deprecation.as_ref().and_then(|depr| {\n-            let note = if show_reason && !depr.note.is_empty() {\n-                format!(\": {}\", depr.note)\n-            } else {\n-                String::new()\n-            };\n-            let since = if show_reason && !depr.since.is_empty() {\n-                format!(\" since {}\", Escape(&depr.since))\n-            } else {\n-                String::new()\n-            };\n \n-            let text = format!(\"Deprecated{}{}\", since, Markdown(&note));\n-            Some(format!(\"<em class='stab deprecated'>{}</em>\", text))\n-        })\n-    })\n+        let text = format!(\"Deprecated{}{}\", since, Markdown(&note));\n+        stability.push(format!(\"<em class='stab deprecated'>{}</em>\", text))\n+    }\n+\n+    stability\n }\n \n struct Initializer<'a>(&'a str);"}, {"sha": "cdb4094ffe051519d11404c7a3b2e2962f891ca1", "filename": "src/test/rustdoc/issue-32374.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b588f6903dff7a04e094119232c3e980591ecdfc/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b588f6903dff7a04e094119232c3e980591ecdfc/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32374.rs?ref=b588f6903dff7a04e094119232c3e980591ecdfc", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(staged_api)]\n+#![doc(issue_tracker_base_url = \"http://issue_url/\")]\n+\n+#![unstable(feature=\"test\", issue = \"32374\")]\n+\n+// @has issue_32374/index.html '//*[@class=\"docblock short\"]' \\\n+//      '[Deprecated] [Unstable]'\n+\n+// @has issue_32374/struct.T.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecated since 1.0.0: text'\n+// @has - '<code>test</code>'\n+// @has - '<a href=\"http://issue_url/32374\">#32374</a>'\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[unstable(feature = \"test\", issue = \"32374\")]\n+pub struct T;"}]}