{"sha": "19e3085481351cf9e0d1ef954a1b03c55c534f27", "node_id": "C_kwDOAAsO6NoAKDE5ZTMwODU0ODEzNTFjZjllMGQxZWY5NTRhMWIwM2M1NWM1MzRmMjc", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-12-08T11:41:42Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-12-08T12:17:13Z"}, "message": "Only shift `BoundVar`s that come from outside `TyLoweringContext`", "tree": {"sha": "1e7bcaf6734c2b2ab2af65468abea4826dcaa600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e7bcaf6734c2b2ab2af65468abea4826dcaa600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19e3085481351cf9e0d1ef954a1b03c55c534f27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmOR1ckACgkQ4laYqTBY\nYXFiVhAAiHGNACXcunNnkQE4oqy5B6jGMJW9sRFdvTWU7o7WoZMX1KDG2GafahU1\nf5v7ro8Oy8YN6Z60JXpD5BTM1ykUOmffzpQt1Y4Aui+fqhtabnwKEtxZKipL8iAA\ns7Jis9/SWe7zXCYpdgS5UA3SkaP/beOitVBmhOKRH9mmTPJLSZmlMbCn88Q/EemI\nGx/Y5Ns8JkZ/x9WggnjGJsGAyw9DNYY0cgFMtxz5JC0HEHDv41+HbfvihEMh4D4W\najIbeYTJq71MFe9O80knFYviJi5otCIRUMpwtUiql5UoBUVNfzL378N5WTQSOr7Q\nBMVspuWT/+eAYY6zajIpUQNhRz7H12T0R2luybi80rWdgIYn6ejiKhKEwIGjR4JZ\ncN5Nd4VK8M10PNuBaNOZmyLr/j7SQKenDRHhg9G8BeNx8novXtO4iztchj8whwpa\nQX+nKlDyVqnPCn6JAm5duoVmcGTXhVjf8qpjES24D25l0ZoYWQnWtm/WTYK7ypVv\nLRMsjz2nKxwyLPoilUmDxwEpb6veGrpU5ugQfO5ahri0tf07h/czO4YxeM1PJZbu\njBZ4K/NAGQzQDrcFPfNJ8iUCX2NntTh4EY7EJf3oUfTUY7hV4MlyWeG8BbeJehl/\nwpYm/HYeiBc1bUa3pQfTQTiaJLy4gw+E2HBj5Hc1+JsESB7KKRg=\n=7P8U\n-----END PGP SIGNATURE-----", "payload": "tree 1e7bcaf6734c2b2ab2af65468abea4826dcaa600\nparent 46e1486a90d76c6ff15a7a2baed7b15f54a2e42c\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1670499702 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1670501833 +0900\n\nOnly shift `BoundVar`s that come from outside `TyLoweringContext`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19e3085481351cf9e0d1ef954a1b03c55c534f27", "html_url": "https://github.com/rust-lang/rust/commit/19e3085481351cf9e0d1ef954a1b03c55c534f27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19e3085481351cf9e0d1ef954a1b03c55c534f27/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e1486a90d76c6ff15a7a2baed7b15f54a2e42c", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e1486a90d76c6ff15a7a2baed7b15f54a2e42c", "html_url": "https://github.com/rust-lang/rust/commit/46e1486a90d76c6ff15a7a2baed7b15f54a2e42c"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "e8466a7eda5cf73ff7d4955738b690b12ec77197", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/19e3085481351cf9e0d1ef954a1b03c55c534f27/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e3085481351cf9e0d1ef954a1b03c55c534f27/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=19e3085481351cf9e0d1ef954a1b03c55c534f27", "patch": "@@ -603,9 +603,8 @@ impl<'a> TyLoweringContext<'a> {\n     }\n \n     fn select_associated_type(&self, res: Option<TypeNs>, segment: PathSegment<'_>) -> Ty {\n-        let (def, res) = match (self.resolver.generic_def(), res) {\n-            (Some(def), Some(res)) => (def, res),\n-            _ => return TyKind::Error.intern(Interner),\n+        let Some((def, res)) = self.resolver.generic_def().zip(res) else {\n+            return TyKind::Error.intern(Interner);\n         };\n         let ty = named_associated_type_shorthand_candidates(\n             self.db,\n@@ -617,6 +616,21 @@ impl<'a> TyLoweringContext<'a> {\n                     return None;\n                 }\n \n+                let parent_subst = t.substitution.clone();\n+                let parent_subst = match self.type_param_mode {\n+                    ParamLoweringMode::Placeholder => {\n+                        // if we're lowering to placeholders, we have to put them in now.\n+                        let generics = generics(self.db.upcast(), def);\n+                        let s = generics.placeholder_subst(self.db);\n+                        s.apply(parent_subst, Interner)\n+                    }\n+                    ParamLoweringMode::Variable => {\n+                        // We need to shift in the bound vars, since\n+                        // `named_associated_type_shorthand_candidates` does not do that.\n+                        parent_subst.shifted_in_from(Interner, self.in_binders)\n+                    }\n+                };\n+\n                 // FIXME: `substs_from_path_segment()` pushes `TyKind::Error` for every parent\n                 // generic params. It's inefficient to splice the `Substitution`s, so we may want\n                 // that method to optionally take parent `Substitution` as we already know them at\n@@ -632,22 +646,9 @@ impl<'a> TyLoweringContext<'a> {\n \n                 let substs = Substitution::from_iter(\n                     Interner,\n-                    substs.iter(Interner).take(len_self).chain(t.substitution.iter(Interner)),\n+                    substs.iter(Interner).take(len_self).chain(parent_subst.iter(Interner)),\n                 );\n \n-                let substs = match self.type_param_mode {\n-                    ParamLoweringMode::Placeholder => {\n-                        // if we're lowering to placeholders, we have to put\n-                        // them in now\n-                        let generics = generics(self.db.upcast(), def);\n-                        let s = generics.placeholder_subst(self.db);\n-                        s.apply(substs, Interner)\n-                    }\n-                    ParamLoweringMode::Variable => substs,\n-                };\n-                // We need to shift in the bound vars, since\n-                // associated_type_shorthand_candidates does not do that\n-                let substs = substs.shifted_in_from(Interner, self.in_binders);\n                 Some(\n                     TyKind::Alias(AliasTy::Projection(ProjectionTy {\n                         associated_ty_id: to_assoc_type_id(associated_ty),"}, {"sha": "de6ae7fff8fbd01c88b051b4a40f8387d0641acf", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/19e3085481351cf9e0d1ef954a1b03c55c534f27/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e3085481351cf9e0d1ef954a1b03c55c534f27/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=19e3085481351cf9e0d1ef954a1b03c55c534f27", "patch": "@@ -1723,3 +1723,24 @@ fn bar() -> ControlFlow<(), ()> {\n \"#,\n     );\n }\n+\n+#[test]\n+fn assoc_type_shorthand_with_gats_in_binders() {\n+    // c.f. test `issue_4885()`\n+    check_no_mismatches(\n+        r#\"\n+trait Gats {\n+    type Assoc<T>;\n+}\n+trait Foo<T> {}\n+\n+struct Bar<'a, B: Gats, A> {\n+    field: &'a dyn Foo<B::Assoc<A>>,\n+}\n+\n+fn foo(b: Bar) {\n+    let _ = b.field;\n+}\n+\"#,\n+    );\n+}"}]}