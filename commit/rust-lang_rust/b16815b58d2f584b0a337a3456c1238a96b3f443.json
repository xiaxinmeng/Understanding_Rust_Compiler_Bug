{"sha": "b16815b58d2f584b0a337a3456c1238a96b3f443", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNjgxNWI1OGQyZjU4NGIwYTMzN2EzNDU2YzEyMzhhOTZiM2Y0NDM=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-10-13T18:02:38Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-11T01:58:55Z"}, "message": "Update tests with min capture information\n\nCo-authored-by: Chris Pardy <chrispardy36@gmail.com>\nCo-authored-by: Logan Mosier <logmosier@gmail.com>", "tree": {"sha": "64de0c3c5facdc57d4f1604d0778cdd37d17acc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64de0c3c5facdc57d4f1604d0778cdd37d17acc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b16815b58d2f584b0a337a3456c1238a96b3f443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b16815b58d2f584b0a337a3456c1238a96b3f443", "html_url": "https://github.com/rust-lang/rust/commit/b16815b58d2f584b0a337a3456c1238a96b3f443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b16815b58d2f584b0a337a3456c1238a96b3f443/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0c0d656d5ca2b17910ec7990691ae5dcd7c1e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0c0d656d5ca2b17910ec7990691ae5dcd7c1e4", "html_url": "https://github.com/rust-lang/rust/commit/8f0c0d656d5ca2b17910ec7990691ae5dcd7c1e4"}], "stats": {"total": 454, "additions": 454, "deletions": 0}, "files": [{"sha": "e0cd06f765e077e52e92d16a9a33e036df59b441", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.stdout", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -18,3 +18,30 @@ For closure=DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0}): ca\n         ),\n     },\n }\n+For closure=DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:3 ~ arrays_completely_captured[317d]::main),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: [i32; 5],\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:3 ~ arrays_completely_captured[317d]::main), local_id: 1 };`m`;DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0})),\n+                ),\n+                projections: [],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:3 ~ arrays_completely_captured[317d]::main),\n+                        local_id: 12,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(MutBorrow, '_#6r),\n+                ),\n+            },\n+        },\n+    ],\n+}"}, {"sha": "d378b12a235006b02553ab7da1ba0af83583bcb4", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.stdout", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -26,3 +26,38 @@ For closure=DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0}):\n         ),\n     },\n }\n+For closure=DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:6 ~ capture_disjoint_field_struct[317d]::main),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: Point,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:6 ~ capture_disjoint_field_struct[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0})),\n+                ),\n+                projections: [\n+                    Projection {\n+                        ty: i32,\n+                        kind: Field(\n+                            0,\n+                            0,\n+                        ),\n+                    },\n+                ],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:6 ~ capture_disjoint_field_struct[317d]::main),\n+                        local_id: 31,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(ImmBorrow, '_#35r),\n+                ),\n+            },\n+        },\n+    ],\n+}"}, {"sha": "9a080c28d4ebf7844691f938a206b9abe2138e50", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.stdout", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -26,3 +26,38 @@ For closure=DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0}):\n         ),\n     },\n }\n+For closure=DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:3 ~ capture_disjoint_field_tuple[317d]::main),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: (i32, i32),\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:3 ~ capture_disjoint_field_tuple[317d]::main), local_id: 1 };`t`;DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0})),\n+                ),\n+                projections: [\n+                    Projection {\n+                        ty: i32,\n+                        kind: Field(\n+                            0,\n+                            0,\n+                        ),\n+                    },\n+                ],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:3 ~ capture_disjoint_field_tuple[317d]::main),\n+                        local_id: 28,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(ImmBorrow, '_#35r),\n+                ),\n+            },\n+        },\n+    ],\n+}"}, {"sha": "69722f9d21ec243cf0fbe271f4561abfee109085", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stdout", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -18,3 +18,30 @@ For closure=DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closu\n         ),\n     },\n }\n+For closure=DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:3 ~ feature_gate_capture_disjoint_fields[317d]::main),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: std::string::String,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:3 ~ feature_gate_capture_disjoint_fields[317d]::main), local_id: 1 };`s`;DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0})),\n+                ),\n+                projections: [],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:3 ~ feature_gate_capture_disjoint_fields[317d]::main),\n+                        local_id: 52,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(ImmBorrow, '_#50r),\n+                ),\n+            },\n+        },\n+    ],\n+}"}, {"sha": "44fb88e1520c429d6cb1971f5e00f3958a324ba0", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.stdout", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -30,3 +30,42 @@ For closure=DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closu\n         ),\n     },\n }\n+For closure=DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:11 ~ filter_on_struct_member[317d]::{impl#1}::update),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: &mut Data,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:11 ~ filter_on_struct_member[317d]::{impl#1}::update), local_id: 1 };`self`;DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closure#0})),\n+                ),\n+                projections: [\n+                    Projection {\n+                        ty: Data,\n+                        kind: Deref,\n+                    },\n+                    Projection {\n+                        ty: Filter,\n+                        kind: Field(\n+                            0,\n+                            0,\n+                        ),\n+                    },\n+                ],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:11 ~ filter_on_struct_member[317d]::{impl#1}::update),\n+                        local_id: 13,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(ImmBorrow, '_#7r),\n+                ),\n+            },\n+        },\n+    ],\n+}"}, {"sha": "63a3669d0a76dcc35257839d2091c0ed3e7dffb3", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.stdout", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -26,3 +26,38 @@ For closure=DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0}): capture inf\n         ),\n     },\n }\n+For closure=DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:8 ~ multilevel_path_1[317d]::main),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: Wrapper,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:8 ~ multilevel_path_1[317d]::main), local_id: 1 };`w`;DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0})),\n+                ),\n+                projections: [\n+                    Projection {\n+                        ty: Point,\n+                        kind: Field(\n+                            0,\n+                            0,\n+                        ),\n+                    },\n+                ],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:8 ~ multilevel_path_1[317d]::main),\n+                        local_id: 20,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(ImmBorrow, '_#37r),\n+                ),\n+            },\n+        },\n+    ],\n+}"}, {"sha": "576d2c36b6f25b819a1fe5d3da03ba0d172817e3", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.stdout", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -33,3 +33,45 @@ For closure=DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0}): capture inf\n         ),\n     },\n }\n+For closure=DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:8 ~ multilevel_path_2[317d]::main),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: Wrapper,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:8 ~ multilevel_path_2[317d]::main), local_id: 1 };`w`;DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0})),\n+                ),\n+                projections: [\n+                    Projection {\n+                        ty: Point,\n+                        kind: Field(\n+                            0,\n+                            0,\n+                        ),\n+                    },\n+                    Projection {\n+                        ty: i32,\n+                        kind: Field(\n+                            0,\n+                            0,\n+                        ),\n+                    },\n+                ],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:8 ~ multilevel_path_2[317d]::main),\n+                        local_id: 35,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(ImmBorrow, '_#35r),\n+                ),\n+            },\n+        },\n+    ],\n+}"}, {"sha": "446419c75f5eb6f2fe9d7d0962954ff818564170", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.stdout", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -43,6 +43,66 @@ For closure=DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0}): c\n         ),\n     },\n }\n+For closure=DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:6 ~ nested_closure[317d]::main),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: Point,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0})),\n+                ),\n+                projections: [\n+                    Projection {\n+                        ty: i32,\n+                        kind: Field(\n+                            1,\n+                            0,\n+                        ),\n+                    },\n+                ],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:6 ~ nested_closure[317d]::main),\n+                        local_id: 70,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(MutBorrow, '_#109r),\n+                ),\n+            },\n+        },\n+    ],\n+    HirId {\n+        owner: DefId(0:6 ~ nested_closure[317d]::main),\n+        local_id: 5,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: i32,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 5 };`incr`;DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0})),\n+                ),\n+                projections: [],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:6 ~ nested_closure[317d]::main),\n+                        local_id: 72,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(ImmBorrow, '_#110r),\n+                ),\n+            },\n+        },\n+    ],\n+}\n For closure=DefId(0:7 ~ nested_closure[317d]::main::{closure#0}): Using new-style capture analysis\n For closure=DefId(0:7 ~ nested_closure[317d]::main::{closure#0}): capture information: {\n     Place {\n@@ -96,3 +156,66 @@ For closure=DefId(0:7 ~ nested_closure[317d]::main::{closure#0}): capture inform\n         ),\n     },\n }\n+For closure=DefId(0:7 ~ nested_closure[317d]::main::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:6 ~ nested_closure[317d]::main),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: Point,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ nested_closure[317d]::main::{closure#0})),\n+                ),\n+                projections: [\n+                    Projection {\n+                        ty: i32,\n+                        kind: Field(\n+                            0,\n+                            0,\n+                        ),\n+                    },\n+                ],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:6 ~ nested_closure[317d]::main),\n+                        local_id: 37,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(ImmBorrow, '_#114r),\n+                ),\n+            },\n+        },\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: Point,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ nested_closure[317d]::main::{closure#0})),\n+                ),\n+                projections: [\n+                    Projection {\n+                        ty: i32,\n+                        kind: Field(\n+                            1,\n+                            0,\n+                        ),\n+                    },\n+                ],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:6 ~ nested_closure[317d]::main),\n+                        local_id: 70,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(MutBorrow, '_#115r),\n+                ),\n+            },\n+        },\n+    ],\n+}"}, {"sha": "73f880c155afd905e25bd47fc94b2128099e3c19", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.stdout", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -26,3 +26,38 @@ For closure=DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0}): captu\n         ),\n     },\n }\n+For closure=DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:9 ~ path_with_array_access[317d]::main),\n+        local_id: 6,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: Pentagon,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:9 ~ path_with_array_access[317d]::main), local_id: 6 };`pent`;DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0})),\n+                ),\n+                projections: [\n+                    Projection {\n+                        ty: [Point; 5],\n+                        kind: Field(\n+                            0,\n+                            0,\n+                        ),\n+                    },\n+                ],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:9 ~ path_with_array_access[317d]::main),\n+                        local_id: 83,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(ImmBorrow, '_#34r),\n+                ),\n+            },\n+        },\n+    ],\n+}"}, {"sha": "c0421852d93d8580dba9081ff32a1183d20874cc", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.stdout", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -43,3 +43,30 @@ For closure=DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0}): cap\n         ),\n     },\n }\n+For closure=DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: Point,\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main), local_id: 1 };`p`;DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0})),\n+                ),\n+                projections: [],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main),\n+                        local_id: 15,\n+                    },\n+                ),\n+                capture_kind: ByRef(\n+                    UpvarBorrow(MutBorrow, '_#34r),\n+                ),\n+            },\n+        },\n+    ],\n+}"}, {"sha": "43c43015134ae927c092935e41c3880ccf36008d", "filename": "src/test/ui/closures/2229_closure_analysis/slice-pat.stdout", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b16815b58d2f584b0a337a3456c1238a96b3f443/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stdout?ref=b16815b58d2f584b0a337a3456c1238a96b3f443", "patch": "@@ -25,3 +25,32 @@ For closure=DefId(0:5 ~ slice_pat[317d]::main::{closure#0}): capture information\n         ),\n     },\n }\n+For closure=DefId(0:5 ~ slice_pat[317d]::main::{closure#0}): min_captures={\n+    HirId {\n+        owner: DefId(0:3 ~ slice_pat[317d]::main),\n+        local_id: 1,\n+    }: [\n+        CapturedPlace {\n+            place: Place {\n+                base_ty: [std::string::String; 5],\n+                base: Upvar(\n+                    UpvarId(HirId { owner: DefId(0:3 ~ slice_pat[317d]::main), local_id: 1 };`arr`;DefId(0:5 ~ slice_pat[317d]::main::{closure#0})),\n+                ),\n+                projections: [],\n+            },\n+            info: CaptureInfo {\n+                expr_id: Some(\n+                    HirId {\n+                        owner: DefId(0:3 ~ slice_pat[317d]::main),\n+                        local_id: 179,\n+                    },\n+                ),\n+                capture_kind: ByValue(\n+                    Some(\n+                        $DIR/slice-pat.rs:21:33: 21:36 (#0),\n+                    ),\n+                ),\n+            },\n+        },\n+    ],\n+}"}]}