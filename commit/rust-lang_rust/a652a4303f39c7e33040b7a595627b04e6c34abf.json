{"sha": "a652a4303f39c7e33040b7a595627b04e6c34abf", "node_id": "C_kwDOAAsO6NoAKGE2NTJhNDMwM2YzOWM3ZTMzMDQwYjdhNTk1NjI3YjA0ZTZjMzRhYmY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-10T08:22:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-10T08:22:29Z"}, "message": "Rollup merge of #97876 - yoshuawuyts:into-future-docs, r=JohnTitor,yaahc\n\nupdate docs for `std::future::IntoFuture`\n\nRef https://github.com/rust-lang/rust/issues/67644.\n\nThis updates the docs for `IntoFuture` providing a bit more guidance on how to use it. Thanks!", "tree": {"sha": "02ea97023fa29db8c5fc43eb518bc45628752a6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ea97023fa29db8c5fc43eb518bc45628752a6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a652a4303f39c7e33040b7a595627b04e6c34abf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiov9FCRBK7hj4Ov3rIwAAFRQIACWWjR/SugAbqvFPRXUr3MM7\nR+swrnG6DojnpOEG1AbX/XPii7sj3sYEMviJIjSj+8jHs2wNWVSEoAlIXA4CZr/k\n6ViByUwBf/C2G1IseuqE7/FA++wy3iT+egLqVdG0LcBTMoHObq0KKejHijmdA2Pc\nTcVYe4xYuv73GXv+ZY3Uebg+pGuo5l51yCqafy13xcLwnRguaNjsINfqGn5RIM0h\nR60FTZ2VUlDxu9AY8ummXoXmpm5RUf6B6Kxi0naFMgz5Pp0HcXrjeErBRBzBc++Q\n8s+dO5577R8ylQPkQPPsBpMbBwOZnv/ku6iDW1UjdpuhRO5Mg8f9aDr061t9ZG0=\n=NY5d\n-----END PGP SIGNATURE-----\n", "payload": "tree 02ea97023fa29db8c5fc43eb518bc45628752a6e\nparent 18404540d78b029f5bdc45f80e0a6995bef4c28f\nparent a4c455080cddec67086adfbb3b999bbcccfaffa9\nauthor Yuki Okushi <jtitor@2k36.org> 1654849349 +0900\ncommitter GitHub <noreply@github.com> 1654849349 +0900\n\nRollup merge of #97876 - yoshuawuyts:into-future-docs, r=JohnTitor,yaahc\n\nupdate docs for `std::future::IntoFuture`\n\nRef https://github.com/rust-lang/rust/issues/67644.\n\nThis updates the docs for `IntoFuture` providing a bit more guidance on how to use it. Thanks!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a652a4303f39c7e33040b7a595627b04e6c34abf", "html_url": "https://github.com/rust-lang/rust/commit/a652a4303f39c7e33040b7a595627b04e6c34abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a652a4303f39c7e33040b7a595627b04e6c34abf/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18404540d78b029f5bdc45f80e0a6995bef4c28f", "url": "https://api.github.com/repos/rust-lang/rust/commits/18404540d78b029f5bdc45f80e0a6995bef4c28f", "html_url": "https://github.com/rust-lang/rust/commit/18404540d78b029f5bdc45f80e0a6995bef4c28f"}, {"sha": "a4c455080cddec67086adfbb3b999bbcccfaffa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c455080cddec67086adfbb3b999bbcccfaffa9", "html_url": "https://github.com/rust-lang/rust/commit/a4c455080cddec67086adfbb3b999bbcccfaffa9"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "d22094130ad9a1cf0eca2686b847a94bdc65606a", "filename": "library/core/src/future/into_future.rs", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/a652a4303f39c7e33040b7a595627b04e6c34abf/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a652a4303f39c7e33040b7a595627b04e6c34abf/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs?ref=a652a4303f39c7e33040b7a595627b04e6c34abf", "patch": "@@ -1,6 +1,109 @@\n use crate::future::Future;\n \n /// Conversion into a `Future`.\n+///\n+/// By implementing `Intofuture` for a type, you define how it will be\n+/// converted to a future.\n+///\n+/// # `.await` desugaring\n+///\n+/// The `.await` keyword desugars into a call to `IntoFuture::into_future`\n+/// first before polling the future to completion. `IntoFuture` is implemented\n+/// for all `T: Future` which means the `into_future` method will be available\n+/// on all futures.\n+///\n+/// ```no_run\n+/// #![feature(into_future)]\n+///\n+/// use std::future::IntoFuture;\n+///\n+/// # async fn foo() {\n+/// let v = async { \"meow\" };\n+/// let mut fut = v.into_future();\n+/// assert_eq!(\"meow\", fut.await);\n+/// # }\n+/// ```\n+///\n+/// # Async builders\n+///\n+/// When implementing futures manually there will often be a choice between\n+/// implementing `Future` or `IntoFuture` for a type. Implementing `Future` is a\n+/// good choice in most cases. But implementing `IntoFuture` is most useful when\n+/// implementing \"async builder\" types, which allows the type to be modified\n+/// multiple times before being `.await`ed.\n+///\n+/// ```rust\n+/// #![feature(into_future)]\n+///\n+/// use std::future::{ready, Ready, IntoFuture};\n+///\n+/// /// Eventually multiply two numbers\n+/// pub struct Multiply {\n+///     num: u16,\n+///     factor: u16,\n+/// }\n+///\n+/// impl Multiply {\n+///     /// Construct a new instance of `Multiply`.\n+///     pub fn new(num: u16, factor: u16) -> Self {\n+///         Self { num, factor }\n+///     }\n+///\n+///     /// Set the number to multiply by the factor.\n+///     pub fn number(mut self, num: u16) -> Self {\n+///         self.num = num;\n+///         self\n+///     }\n+///\n+///     /// Set the factor to multiply the number with.\n+///     pub fn factor(mut self, factor: u16) -> Self {\n+///         self.factor = factor;\n+///         self\n+///     }\n+/// }\n+///\n+/// impl IntoFuture for Multiply {\n+///     type Output = u16;\n+///     type IntoFuture = Ready<Self::Output>;\n+///\n+///     fn into_future(self) -> Self::IntoFuture {\n+///         ready(self.num * self.factor)\n+///     }\n+/// }\n+///\n+/// // NOTE: Rust does not yet have an `async fn main` function, that functionality\n+/// // currently only exists in the ecosystem.\n+/// async fn run() {\n+///     let num = Multiply::new(0, 0)  // initialize the builder to number: 0, factor: 0\n+///         .number(2)                 // change the number to 2\n+///         .factor(2)                 // change the factor to 2\n+///         .await;                    // convert to future and .await\n+///\n+///     assert_eq!(num, 4);\n+/// }\n+/// ```\n+///\n+/// # Usage in trait bounds\n+///\n+/// Using `IntoFuture` in trait bounds allows a function to be generic over both\n+/// `Future` and `IntoFuture`. This is convenient for users of the function, so\n+/// when they are using it they don't have to make an extra call to\n+/// `IntoFuture::into_future` to obtain an instance of `Future`:\n+///\n+/// ```rust\n+/// #![feature(into_future)]\n+///\n+/// use std::future::IntoFuture;\n+///\n+/// /// Convert the output of a future to a string.\n+/// async fn fut_to_string<Fut>(fut: Fut) -> String\n+/// where\n+///     Fut: IntoFuture,\n+///     Fut::Output: std::fmt::Debug,\n+/// {\n+///     format!(\"{:?}\", fut.await)\n+/// }\n+/// ```\n #[unstable(feature = \"into_future\", issue = \"67644\")]\n pub trait IntoFuture {\n     /// The output that the future will produce on completion.\n@@ -12,6 +115,22 @@ pub trait IntoFuture {\n     type IntoFuture: Future<Output = Self::Output>;\n \n     /// Creates a future from a value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```no_run\n+    /// #![feature(into_future)]\n+    ///\n+    /// use std::future::IntoFuture;\n+    ///\n+    /// # async fn foo() {\n+    /// let v = async { \"meow\" };\n+    /// let mut fut = v.into_future();\n+    /// assert_eq!(\"meow\", fut.await);\n+    /// # }\n+    /// ```\n     #[unstable(feature = \"into_future\", issue = \"67644\")]\n     #[lang = \"into_future\"]\n     fn into_future(self) -> Self::IntoFuture;"}]}