{"sha": "1ffd043caf7598484a9f38c580aca91760a571f6", "node_id": "C_kwDOAAsO6NoAKDFmZmQwNDNjYWY3NTk4NDg0YTlmMzhjNTgwYWNhOTE3NjBhNTcxZjY", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-01-22T09:40:52Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-01-24T14:35:52Z"}, "message": "Add test stable hash uniqueness of adjacent field values", "tree": {"sha": "26a6c64357a1d1f7f9ebcb4df5b130c4bca10443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26a6c64357a1d1f7f9ebcb4df5b130c4bca10443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ffd043caf7598484a9f38c580aca91760a571f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEg8FrwI85f934CWFa28VT5UDC9hkFAmHuuUgACgkQ28VT5UDC\n9hnlEQv/RpTNmqW1x0gPOej0h9jMf296wbX18HBxCvUydUfXiErkFBI5Pgc2ce91\nwHQ76g5ZwcveoUuU9MMs8ftqMy0Duh1sXJCLWid5z7sRHtdRlv7otDm7jmsRrxmD\nM6brWSatFtojLdAGSJURR5Og0TMaEYOWY2M6JyqZ7oDbIA45SbXc0MNUW+WzUyYq\nQwr5DH3HHk/u1vAHLmZFMM4Gys7VaZyUnzi0Vytf2mK3CRgQeV4Gj99PCUPl4Kiu\nblNr9zpm41RSJDbiCDR2lLt4xz9CXyM3aw67RwcX/upu23+qbJy4KMg1oZp2QBcB\nThYpgc8cxobs1RozO9Dx2jScjg+hSq9CnDoCxbjtJ1JqRPJu+6/+S1k6rK4L3hsq\nSq90Lapqeh8+vsADufTa7SYAub+Pag1d6CWXdF1FP1zwkK2p5vwFinLsdjNjZ60A\nWN1u7KIupnBLpoLmEEOowhO3BPrRp3akh6Ul5+pAxSEdHkvx6sfkqTVWsfBEmPuX\n7PHQbqpd\n=/WBP\n-----END PGP SIGNATURE-----", "payload": "tree 26a6c64357a1d1f7f9ebcb4df5b130c4bca10443\nparent d2dc425721554348d4ed427f7eb89cdb49efefdb\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1642844452 +0100\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1643034952 +0100\n\nAdd test stable hash uniqueness of adjacent field values\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffd043caf7598484a9f38c580aca91760a571f6", "html_url": "https://github.com/rust-lang/rust/commit/1ffd043caf7598484a9f38c580aca91760a571f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ffd043caf7598484a9f38c580aca91760a571f6/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2dc425721554348d4ed427f7eb89cdb49efefdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2dc425721554348d4ed427f7eb89cdb49efefdb", "html_url": "https://github.com/rust-lang/rust/commit/d2dc425721554348d4ed427f7eb89cdb49efefdb"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "31190363eb61bb48875374b0a9f381df5cfc56b6", "filename": "compiler/rustc_data_structures/src/stable_hasher/tests.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1ffd043caf7598484a9f38c580aca91760a571f6/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffd043caf7598484a9f38c580aca91760a571f6/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs?ref=1ffd043caf7598484a9f38c580aca91760a571f6", "patch": "@@ -98,3 +98,45 @@ fn test_hash_bit_matrix() {\n     assert_ne!(a, b);\n     assert_ne!(hash(&a), hash(&b));\n }\n+\n+// Check that exchanging the value of two adjacent fields changes the hash.\n+#[test]\n+fn test_attribute_permutation() {\n+    macro_rules! test_type {\n+        ($ty: ty) => {{\n+            struct Foo {\n+                a: $ty,\n+                b: $ty,\n+            }\n+\n+            impl<CTX> HashStable<CTX> for Foo {\n+                fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+                    self.a.hash_stable(hcx, hasher);\n+                    self.b.hash_stable(hcx, hasher);\n+                }\n+            }\n+\n+            #[allow(overflowing_literals)]\n+            let mut item = Foo { a: 0xFF, b: 0xFF_FF };\n+            let hash_a = hash(&item);\n+            std::mem::swap(&mut item.a, &mut item.b);\n+            let hash_b = hash(&item);\n+            assert_ne!(\n+                hash_a,\n+                hash_b,\n+                \"The hash stayed the same after values were swapped for type `{}`!\",\n+                stringify!($ty)\n+            );\n+        }};\n+    }\n+\n+    test_type!(u16);\n+    test_type!(u32);\n+    test_type!(u64);\n+    test_type!(u128);\n+\n+    test_type!(i16);\n+    test_type!(i32);\n+    test_type!(i64);\n+    test_type!(i128);\n+}"}]}