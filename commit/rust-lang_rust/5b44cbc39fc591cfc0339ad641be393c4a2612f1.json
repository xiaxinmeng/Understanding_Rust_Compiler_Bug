{"sha": "5b44cbc39fc591cfc0339ad641be393c4a2612f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNDRjYmMzOWZjNTkxY2ZjMDMzOWFkNjQxYmUzOTNjNGEyNjEyZjE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-26T16:23:50Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-04T13:31:55Z"}, "message": "Cleanups to check code.", "tree": {"sha": "7f91e8aa55048224b74b88af2923142ddf6e5efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f91e8aa55048224b74b88af2923142ddf6e5efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b44cbc39fc591cfc0339ad641be393c4a2612f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b44cbc39fc591cfc0339ad641be393c4a2612f1", "html_url": "https://github.com/rust-lang/rust/commit/5b44cbc39fc591cfc0339ad641be393c4a2612f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b44cbc39fc591cfc0339ad641be393c4a2612f1/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3bf6e562ecab27844924af741412865babeed84", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3bf6e562ecab27844924af741412865babeed84", "html_url": "https://github.com/rust-lang/rust/commit/d3bf6e562ecab27844924af741412865babeed84"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "a542200bbbad3a74a7028d8a998c1dbb96e49404", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5b44cbc39fc591cfc0339ad641be393c4a2612f1/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b44cbc39fc591cfc0339ad641be393c4a2612f1/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=5b44cbc39fc591cfc0339ad641be393c4a2612f1", "patch": "@@ -13,23 +13,22 @@\n //! This file implements the various regression test suites that we execute on\n //! our CI.\n \n-extern crate build_helper;\n-\n use std::collections::HashSet;\n use std::env;\n+use std::iter;\n use std::fmt;\n use std::fs::{self, File};\n use std::path::{PathBuf, Path};\n use std::process::Command;\n use std::io::Read;\n \n-use build_helper::output;\n+use build_helper::{self, output};\n \n use {Build, Compiler, Mode};\n use dist;\n use util::{self, dylib_path, dylib_path_var, exe};\n \n-const ADB_TEST_DIR: &'static str = \"/data/tmp/work\";\n+const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n \n /// The two modes of the test runner; tests or benchmarks.\n #[derive(Copy, Clone)]\n@@ -99,7 +98,7 @@ pub fn linkcheck(build: &Build, host: &str) {\n /// This tool in `src/tools` will check out a few Rust projects and run `cargo\n /// test` to ensure that we don't regress the test suites there.\n pub fn cargotest(build: &Build, stage: u32, host: &str) {\n-    let ref compiler = Compiler::new(stage, host);\n+    let compiler = Compiler::new(stage, host);\n \n     // Note that this is a short, cryptic, and not scoped directory name. This\n     // is currently to minimize the length of path on Windows where we otherwise\n@@ -109,11 +108,11 @@ pub fn cargotest(build: &Build, stage: u32, host: &str) {\n \n     let _time = util::timeit();\n     let mut cmd = Command::new(build.tool(&Compiler::new(0, host), \"cargotest\"));\n-    build.prepare_tool_cmd(compiler, &mut cmd);\n+    build.prepare_tool_cmd(&compiler, &mut cmd);\n     try_run(build, cmd.arg(&build.cargo)\n                       .arg(&out_dir)\n-                      .env(\"RUSTC\", build.compiler_path(compiler))\n-                      .env(\"RUSTDOC\", build.rustdoc(compiler)));\n+                      .env(\"RUSTC\", build.compiler_path(&compiler))\n+                      .env(\"RUSTDOC\", build.rustdoc(&compiler)));\n }\n \n /// Runs `cargo test` for `cargo` packaged with Rust.\n@@ -124,9 +123,8 @@ pub fn cargo(build: &Build, stage: u32, host: &str) {\n     // and not RUSTC because the Cargo test suite has tests that will\n     // fail if rustc is not spelled `rustc`.\n     let path = build.sysroot(compiler).join(\"bin\");\n-    let old_path = ::std::env::var(\"PATH\").expect(\"\");\n-    let sep = if cfg!(windows) { \";\" } else {\":\" };\n-    let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n+    let old_path = env::var_os(\"PATH\").unwrap_or_default();\n+    let newpath = env::join_paths(iter::once(path).chain(env::split_paths(&old_path))).expect(\"\");\n \n     let mut cargo = build.cargo(compiler, Mode::Tool, host, \"test\");\n     cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n@@ -200,7 +198,7 @@ pub fn compiletest(build: &Build,\n     cmd.arg(\"--host\").arg(compiler.host);\n     cmd.arg(\"--llvm-filecheck\").arg(build.llvm_filecheck(&build.config.build));\n \n-    if let Some(nodejs) = build.config.nodejs.as_ref() {\n+    if let Some(ref nodejs) = build.config.nodejs {\n         cmd.arg(\"--nodejs\").arg(nodejs);\n     }\n \n@@ -520,16 +518,14 @@ fn krate_emscripten(build: &Build,\n                     compiler: &Compiler,\n                     target: &str,\n                     mode: Mode) {\n-    let mut tests = Vec::new();\n     let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n+    let tests = find_tests(&out_dir.join(\"deps\"), target);\n \n+    let nodejs = build.config.nodejs.as_ref().expect(\"nodejs not configured\");\n     for test in tests {\n-        let test_file_name = test.to_string_lossy().into_owned();\n-        println!(\"running {}\", test_file_name);\n-        let nodejs = build.config.nodejs.as_ref().expect(\"nodejs not configured\");\n+        println!(\"running {}\", test.display());\n         let mut cmd = Command::new(nodejs);\n-        cmd.arg(&test_file_name);\n+        cmd.arg(&test);\n         if build.config.quiet_tests {\n             cmd.arg(\"--quiet\");\n         }\n@@ -541,9 +537,8 @@ fn krate_remote(build: &Build,\n                 compiler: &Compiler,\n                 target: &str,\n                 mode: Mode) {\n-    let mut tests = Vec::new();\n     let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n+    let tests = find_tests(&out_dir.join(\"deps\"), target);\n \n     let tool = build.tool(&Compiler::new(0, &build.config.build),\n                           \"remote-test-client\");\n@@ -559,9 +554,8 @@ fn krate_remote(build: &Build,\n     }\n }\n \n-fn find_tests(dir: &Path,\n-              target: &str,\n-              dst: &mut Vec<PathBuf>) {\n+fn find_tests(dir: &Path, target: &str) -> Vec<PathBuf> {\n+    let mut dst = Vec::new();\n     for e in t!(dir.read_dir()).map(|e| t!(e)) {\n         let file_type = t!(e.file_type());\n         if !file_type.is_file() {\n@@ -576,6 +570,7 @@ fn find_tests(dir: &Path,\n             dst.push(e.path());\n         }\n     }\n+    dst\n }\n \n pub fn remote_copy_libs(build: &Build, compiler: &Compiler, target: &str) {"}]}