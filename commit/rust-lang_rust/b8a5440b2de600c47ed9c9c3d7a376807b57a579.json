{"sha": "b8a5440b2de600c47ed9c9c3d7a376807b57a579", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YTU0NDBiMmRlNjAwYzQ3ZWQ5YzljM2Q3YTM3NjgwN2I1N2E1Nzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-15T19:46:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-15T22:45:41Z"}, "message": "stdlib: Add an either module\n\nLike Haskell's, with left and right tags, various conversion functions", "tree": {"sha": "e47bed55e9dd20cf1bab5b50a8c6dc73e30fc931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e47bed55e9dd20cf1bab5b50a8c6dc73e30fc931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8a5440b2de600c47ed9c9c3d7a376807b57a579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a5440b2de600c47ed9c9c3d7a376807b57a579", "html_url": "https://github.com/rust-lang/rust/commit/b8a5440b2de600c47ed9c9c3d7a376807b57a579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8a5440b2de600c47ed9c9c3d7a376807b57a579/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95bdedf12d5f7e0e5bd2fc015e845449c3d1741d", "url": "https://api.github.com/repos/rust-lang/rust/commits/95bdedf12d5f7e0e5bd2fc015e845449c3d1741d", "html_url": "https://github.com/rust-lang/rust/commit/95bdedf12d5f7e0e5bd2fc015e845449c3d1741d"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "12ccbb2bbfbdc37f9901244a427b21f7e55525db", "filename": "src/lib/either.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b8a5440b2de600c47ed9c9c3d7a376807b57a579/src%2Flib%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a5440b2de600c47ed9c9c3d7a376807b57a579/src%2Flib%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Feither.rs?ref=b8a5440b2de600c47ed9c9c3d7a376807b57a579", "patch": "@@ -0,0 +1,64 @@\n+import option;\n+import option::some;\n+import option::none;\n+\n+tag t[T, U] {\n+    left(T);\n+    right(U);\n+}\n+\n+type operator[T, U] = fn(&T) -> U;\n+\n+fn either[T, U, V](&operator[T, V] f_left,\n+                   &operator[U, V] f_right,\n+                   &t[T, U] value) -> V {\n+    alt (value) {\n+        case (left(?l)) { f_left(l) }\n+        case (right(?r)) { f_right(r) }\n+    }\n+}\n+\n+fn lefts[T, U](&vec[t[T, U]] eithers) -> vec[T] {\n+    let vec[T] result = [];\n+    for (t[T, U] elt in eithers) {\n+        alt (elt) {\n+            case (left(?l)) { result += [l] }\n+            case (_) { /* fallthrough */ }\n+        }\n+    }\n+    ret result;\n+}\n+\n+fn rights[T, U](&vec[t[T, U]] eithers) -> vec[U] {\n+    let vec[U] result = [];\n+    for (t[T, U] elt in eithers) {\n+        alt (elt) {\n+            case (right(?r)) { result += [r] }\n+            case (_) { /* fallthrough */ }\n+        }\n+    }\n+    ret result;\n+}\n+\n+fn partition[T, U](&vec[t[T, U]] eithers) -> tup(vec[T], vec[U]) {\n+    let vec[T] lefts = [];\n+    let vec[U] rights = [];\n+    for (t[T, U] elt in eithers) {\n+        alt (elt) {\n+            case (left(?l)) { lefts += [l] }\n+            case (right(?r)) { rights += [r] }\n+        }\n+    }\n+    ret tup(lefts, rights);\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}, {"sha": "26d36257bd5492f7c490f2f1bfd96ca0610a8340", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8a5440b2de600c47ed9c9c3d7a376807b57a579/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b8a5440b2de600c47ed9c9c3d7a376807b57a579/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=b8a5440b2de600c47ed9c9c3d7a376807b57a579", "patch": "@@ -22,6 +22,7 @@ mod task;\n \n // Utility modules.\n \n+mod either;\n mod option;\n mod util;\n "}, {"sha": "0ece8be64e978bcd39987fc5a7169efa1cdce7b9", "filename": "src/test/run-pass/lib-either.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/b8a5440b2de600c47ed9c9c3d7a376807b57a579/src%2Ftest%2Frun-pass%2Flib-either.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a5440b2de600c47ed9c9c3d7a376807b57a579/src%2Ftest%2Frun-pass%2Flib-either.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-either.rs?ref=b8a5440b2de600c47ed9c9c3d7a376807b57a579", "patch": "@@ -0,0 +1,117 @@\n+// xfail-stage0\n+\n+use std;\n+import std::either::*;\n+import std::vec::len;\n+\n+fn test_either_left() {\n+  auto val = left(10);\n+  fn f_left(&int x) -> bool { x == 10 }\n+  fn f_right(&uint x) -> bool { false }\n+  assert (either(f_left, f_right, val));\n+}\n+\n+fn test_either_right() {\n+  auto val = right(10u);\n+  fn f_left(&int x) -> bool { false }\n+  fn f_right(&uint x) -> bool { x == 10u }\n+  assert (either(f_left, f_right, val));\n+}\n+\n+fn test_lefts() {\n+  auto input = [left(10),\n+                right(11),\n+                left(12),\n+                right(13),\n+                left(14)];\n+  auto result = lefts(input);\n+  assert (result == [10, 12, 14]);\n+}\n+\n+fn test_lefts_none() {\n+  let vec[t[int, int]] input = [right(10),\n+                                right(10)];\n+  auto result = lefts(input);\n+  assert (len(result) == 0u);\n+}\n+\n+fn test_lefts_empty() {\n+  let vec[t[int, int]] input = [];\n+  auto result = lefts(input);\n+  assert (len(result) == 0u);\n+}\n+\n+fn test_rights() {\n+  auto input = [left(10),\n+                right(11),\n+                left(12),\n+                right(13),\n+                left(14)];\n+  auto result = rights(input);\n+  assert (result == [11, 13]);\n+}\n+\n+fn test_rights_none() {\n+  let vec[t[int, int]] input = [left(10),\n+                                left(10)];\n+  auto result = rights(input);\n+  assert (len(result) == 0u);\n+}\n+\n+fn test_rights_empty() {\n+    let vec[t[int, int]] input = [];\n+    auto result = rights(input);\n+    assert (len(result) == 0u);\n+}\n+\n+fn test_partition() {\n+  auto input = [left(10),\n+                right(11),\n+                left(12),\n+                right(13),\n+                left(14)];\n+  auto result = partition(input);\n+  assert (result._0.(0) == 10);\n+  assert (result._0.(1) == 12);\n+  assert (result._0.(2) == 14);\n+  assert (result._1.(0) == 11);\n+  assert (result._1.(1) == 13);\n+}\n+\n+fn test_partition_no_lefts() {\n+  let vec[t[int, int]] input = [right(10),\n+                                right(11)];\n+  auto result = partition(input);\n+  assert (len(result._0) == 0u);\n+  assert (len(result._1) == 2u);\n+}\n+\n+fn test_partition_no_rights() {\n+  let vec[t[int, int]] input = [left(10),\n+                                left(11)];\n+  auto result = partition(input);\n+  assert (len(result._0) == 2u);\n+  assert (len(result._1) == 0u);\n+}\n+\n+fn test_partition_empty() {\n+  let vec[t[int, int]] input = [];\n+  auto result = partition(input);\n+  assert (len(result._0) == 0u);\n+  assert (len(result._1) == 0u);\n+}\n+\n+fn main() {\n+  test_either_left();\n+  test_either_right();\n+  test_lefts();\n+  test_lefts_none();\n+  test_lefts_empty();\n+  test_rights();\n+  test_rights_none();\n+  test_rights_empty();\n+  test_partition();\n+  test_partition_no_lefts();\n+  test_partition_no_rights();\n+  test_partition_empty();\n+}\n\\ No newline at end of file"}]}