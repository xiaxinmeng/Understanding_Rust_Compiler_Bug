{"sha": "9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliM2FhNTkxY2QwNjcyZTliN2JkZjNlNWFhYjYzMGNkMDlhNGQ1NDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-17T08:18:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-17T08:18:37Z"}, "message": "internal: switch some tests to minicore", "tree": {"sha": "49823cdc42e5bac3f6079fe6093eae07b9f68efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49823cdc42e5bac3f6079fe6093eae07b9f68efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546", "html_url": "https://github.com/rust-lang/rust/commit/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b4f5c0262bbdf7e9db81734eb9c82dd04eb82cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b4f5c0262bbdf7e9db81734eb9c82dd04eb82cb", "html_url": "https://github.com/rust-lang/rust/commit/7b4f5c0262bbdf7e9db81734eb9c82dd04eb82cb"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "a6ba3d734b5824ad657311616cb6bc0a48d3a638", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546", "patch": "@@ -434,7 +434,6 @@ fn get_callable(\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n-    use ide_db::helpers::FamousDefs;\n     use test_utils::extract_annotations;\n \n     use crate::{fixture, inlay_hints::InlayHintsConfig};\n@@ -487,8 +486,6 @@ mod tests {\n     }\n \n     fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n-        let ra_fixture =\n-            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n         let (analysis, file_id) = fixture::file(&ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n@@ -498,8 +495,6 @@ mod tests {\n     }\n \n     fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n-        let ra_fixture =\n-            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n         let (analysis, file_id) = fixture::file(&ra_fixture);\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n@@ -823,6 +818,7 @@ fn main() {\n     fn shorten_iterators_in_associated_params() {\n         check_types(\n             r#\"\n+//- minicore: iterator\n use core::iter;\n \n pub struct SomeIter<T> {}\n@@ -875,7 +871,7 @@ fn main() {\n     fn fn_hints() {\n         check_types(\n             r#\"\n-trait Sized {}\n+//- minicore: fn, sized\n \n fn foo() -> impl Fn() { loop {} }\n fn foo1() -> impl Fn(f64) { loop {} }\n@@ -1073,6 +1069,7 @@ fn main() {\n     fn complete_for_hint() {\n         check_types(\n             r#\"\n+//- minicore: iterator\n pub struct Vec<T> {}\n \n impl<T> Vec<T> {\n@@ -1129,6 +1126,7 @@ fn main() {\n     fn shorten_iterator_hints() {\n         check_types(\n             r#\"\n+//- minicore: iterator\n use core::iter;\n \n struct MyIter;\n@@ -1230,12 +1228,12 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 148..173,\n+                        range: 147..172,\n                         kind: ChainingHint,\n                         label: \"B\",\n                     },\n                     InlayHint {\n-                        range: 148..155,\n+                        range: 147..154,\n                         kind: ChainingHint,\n                         label: \"A\",\n                     },\n@@ -1290,12 +1288,12 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 144..191,\n+                        range: 143..190,\n                         kind: ChainingHint,\n                         label: \"C\",\n                     },\n                     InlayHint {\n-                        range: 144..180,\n+                        range: 143..179,\n                         kind: ChainingHint,\n                         label: \"B\",\n                     },\n@@ -1335,12 +1333,12 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 247..284,\n+                        range: 246..283,\n                         kind: ChainingHint,\n                         label: \"B<X<i32, bool>>\",\n                     },\n                     InlayHint {\n-                        range: 247..266,\n+                        range: 246..265,\n                         kind: ChainingHint,\n                         label: \"A<X<i32, bool>>\",\n                     },\n@@ -1359,6 +1357,7 @@ fn main() {\n                 max_length: None,\n             },\n             r#\"\n+//- minicore: iterator\n use core::iter;\n \n struct MyIter;\n@@ -1381,22 +1380,22 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 175..242,\n+                        range: 174..241,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n                     },\n                     InlayHint {\n-                        range: 175..225,\n+                        range: 174..224,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n                     },\n                     InlayHint {\n-                        range: 175..207,\n+                        range: 174..206,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n                     },\n                     InlayHint {\n-                        range: 175..190,\n+                        range: 174..189,\n                         kind: ChainingHint,\n                         label: \"&mut MyIter\",\n                     },"}, {"sha": "8d8f3b560c48bce4318fbecb48efab994ca57f50", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546", "patch": "@@ -154,7 +154,7 @@ impl Fixture {\n         let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n \n         let path = components[0].to_string();\n-        assert!(path.starts_with('/'));\n+        assert!(path.starts_with('/'), \"fixture path does not start with `/`: {:?}\", path);\n \n         let mut krate = None;\n         let mut deps = Vec::new();"}, {"sha": "1a0573d7a8655ee8315c61128c5ca2f32ec9d781", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546", "patch": "@@ -228,6 +228,28 @@ pub mod iter {\n     }\n     pub use self::adapters::Take;\n \n+    mod sources {\n+        mod repeat {\n+            pub fn repeat<T>(elt: T) -> Repeat<T> {\n+                loop {}\n+            }\n+\n+            pub struct Repeat<A> {\n+                element: A,\n+            }\n+\n+            impl<A> Iterator for Repeat<A> {\n+                type Item = A;\n+\n+                fn next(&mut self) -> Option<A> {\n+                    loop {}\n+                }\n+            }\n+        }\n+        pub use self::repeat::{repeat, Repeat};\n+    }\n+    pub use self::sources::{repeat, Repeat};\n+\n     mod traits {\n         mod iterator {\n             use super::super::Take;\n@@ -242,6 +264,18 @@ pub mod iter {\n                 fn take(self, n: usize) -> crate::iter::Take<Self> {\n                     loop {}\n                 }\n+                fn by_ref(&mut self) -> &mut Self\n+                where\n+                    Self: Sized,\n+                {\n+                    self\n+                }\n+            }\n+            impl<I: Iterator + ?Sized> Iterator for &mut I {\n+                type Item = I::Item;\n+                fn next(&mut self) -> Option<I::Item> {\n+                    (**self).next()\n+                }\n             }\n         }\n         pub use self::iterator::Iterator;"}]}