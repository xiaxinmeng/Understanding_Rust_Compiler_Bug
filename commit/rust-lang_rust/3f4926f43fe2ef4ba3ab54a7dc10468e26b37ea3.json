{"sha": "3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNDkyNmY0M2ZlMmVmNGJhM2FiNTRhN2RjMTA0NjhlMjZiMzdlYTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T08:02:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T08:02:28Z"}, "message": "Rustup to rustc 1.30.0-nightly (d5a448b3f 2018-08-13) and update Cargo.lock", "tree": {"sha": "20a771e2778674e39413aa78dc067986c43a0e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20a771e2778674e39413aa78dc067986c43a0e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3", "html_url": "https://github.com/rust-lang/rust/commit/3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6835385fbb2f052bf319aebd1fd86da588b3091", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6835385fbb2f052bf319aebd1fd86da588b3091", "html_url": "https://github.com/rust-lang/rust/commit/a6835385fbb2f052bf319aebd1fd86da588b3091"}], "stats": {"total": 404, "additions": 186, "deletions": 218}, "files": [{"sha": "63ef33a30cf606e740c62bda544d7ceaedd79ed8", "filename": "0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 165, "deletions": 209, "changes": 374, "blob_url": "https://github.com/rust-lang/rust/blob/3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3/0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3/0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0002-Disable-u128-and-i128-in-libcore.patch?ref=3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3", "patch": "@@ -1,6 +1,6 @@\n-From 601b4bf31350a620a9de8a50ad699852331fa17e Mon Sep 17 00:00:00 2001\n+From 78c557ab91915384c4de6b743fa67dedcb0263c9 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 19 Jul 2018 18:34:03 +0200\n+Date: Tue, 14 Aug 2018 09:59:32 +0200\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n@@ -14,26 +14,22 @@ Subject: [PATCH] Disable u128 and i128 in libcore\n  src/libcore/lib.rs           |  2 -\n  src/libcore/marker.rs        |  4 +-\n  src/libcore/mem.rs           |  2 -\n- src/libcore/num/i128.rs      | 17 ---------\n- src/libcore/num/mod.rs       | 87 +++++++++++++-------------------------------\n- src/libcore/num/u128.rs      | 16 --------\n+ src/libcore/num/mod.rs       | 92 +++++++++++++-------------------------------\n  src/libcore/num/wrapping.rs  | 14 +++----\n  src/libcore/ops/arith.rs     | 22 +++++------\n  src/libcore/ops/bit.rs       | 30 ++++++---------\n  src/libcore/tests/iter.rs    | 15 --------\n  src/libcore/tests/num/mod.rs | 18 ---------\n- src/libcore/time.rs          | 51 --------------------------\n- 19 files changed, 62 insertions(+), 257 deletions(-)\n- delete mode 100644 src/libcore/num/i128.rs\n- delete mode 100644 src/libcore/num/u128.rs\n+ src/libcore/time.rs          | 51 ------------------------\n+ 17 files changed, 62 insertions(+), 229 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n-index 3b15ba2b4a..de08ce0289 100644\n+index 3b15ba2..de08ce0 100644\n --- a/src/libcore/clone.rs\n +++ b/src/libcore/clone.rs\n @@ -172,8 +172,8 @@ mod impls {\n      }\n-\n+ \n      impl_clone! {\n -        usize u8 u16 u32 u64 u128\n -        isize i8 i16 i32 i64 i128\n@@ -43,57 +39,57 @@ index 3b15ba2b4a..de08ce0289 100644\n          bool char\n      }\n diff --git a/src/libcore/cmp.rs b/src/libcore/cmp.rs\n-index 3626a266ad..4106432a41 100644\n+index 58d6c4f..a6e6496 100644\n --- a/src/libcore/cmp.rs\n +++ b/src/libcore/cmp.rs\n-@@ -798,7 +798,7 @@ mod impls {\n+@@ -800,7 +800,7 @@ mod impls {\n      }\n-\n+ \n      partial_eq_impl! {\n -        bool char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64\n +        bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64\n      }\n-\n+ \n      macro_rules! eq_impl {\n-@@ -808,7 +808,7 @@ mod impls {\n+@@ -810,7 +810,7 @@ mod impls {\n          )*)\n      }\n-\n+ \n -    eq_impl! { () bool char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +    eq_impl! { () bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n      macro_rules! partial_ord_impl {\n          ($($t:ty)*) => ($(\n-@@ -897,7 +897,7 @@ mod impls {\n+@@ -899,7 +899,7 @@ mod impls {\n          }\n      }\n-\n+ \n -    ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +    ord_impl! { char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n      #[unstable(feature = \"never_type\", issue = \"35121\")]\n      impl PartialEq for ! {\n diff --git a/src/libcore/default.rs b/src/libcore/default.rs\n-index ab36e29b1e..1926719657 100644\n+index ab36e29..1926719 100644\n --- a/src/libcore/default.rs\n +++ b/src/libcore/default.rs\n @@ -145,14 +145,12 @@ default_impl! { u8, 0, \"Returns the default value of `0`\" }\n  default_impl! { u16, 0, \"Returns the default value of `0`\" }\n  default_impl! { u32, 0, \"Returns the default value of `0`\" }\n  default_impl! { u64, 0, \"Returns the default value of `0`\" }\n -default_impl! { u128, 0, \"Returns the default value of `0`\" }\n-\n+ \n  default_impl! { isize, 0, \"Returns the default value of `0`\" }\n  default_impl! { i8, 0, \"Returns the default value of `0`\" }\n  default_impl! { i16, 0, \"Returns the default value of `0`\" }\n  default_impl! { i32, 0, \"Returns the default value of `0`\" }\n  default_impl! { i64, 0, \"Returns the default value of `0`\" }\n -default_impl! { i128, 0, \"Returns the default value of `0`\" }\n-\n+ \n  default_impl! { f32, 0.0f32, \"Returns the default value of `0.0`\" }\n  default_impl! { f64, 0.0f64, \"Returns the default value of `0.0`\" }\n diff --git a/src/libcore/fmt/num.rs b/src/libcore/fmt/num.rs\n-index 51391fa50d..140255ea7e 100644\n+index 51391fa..140255e 100644\n --- a/src/libcore/fmt/num.rs\n +++ b/src/libcore/fmt/num.rs\n @@ -29,7 +29,6 @@ trait Int: PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n@@ -102,7 +98,7 @@ index 51391fa50d..140255ea7e 100644\n      fn to_u64(&self) -> u64;\n -    fn to_u128(&self) -> u128;\n  }\n-\n+ \n  macro_rules! doit {\n @@ -40,10 +39,9 @@ macro_rules! doit {\n          fn to_u16(&self) -> u16 { *self as u16 }\n@@ -113,27 +109,27 @@ index 51391fa50d..140255ea7e 100644\n  }\n -doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n +doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n-\n+ \n  /// A type that represents a specific radix\n  #[doc(hidden)]\n @@ -184,7 +182,6 @@ integer! { i8, u8 }\n  integer! { i16, u16 }\n  integer! { i32, u32 }\n  integer! { i64, u64 }\n -integer! { i128, u128 }\n-\n+ \n  const DEC_DIGITS_LUT: &'static[u8] =\n      b\"0001020304050607080910111213141516171819\\\n @@ -260,7 +257,6 @@ macro_rules! impl_Display {\n-\n+ \n  impl_Display!(i8, u8, i16, u16, i32, u32: to_u32);\n  impl_Display!(i64, u64: to_u64);\n -impl_Display!(i128, u128: to_u128);\n  #[cfg(target_pointer_width = \"16\")]\n  impl_Display!(isize, usize: to_u16);\n  #[cfg(target_pointer_width = \"32\")]\n diff --git a/src/libcore/hash/mod.rs b/src/libcore/hash/mod.rs\n-index e6f8dfffd6..2670d55537 100644\n+index e7907e0..84b700c 100644\n --- a/src/libcore/hash/mod.rs\n +++ b/src/libcore/hash/mod.rs\n @@ -306,12 +306,6 @@ pub trait Hasher {\n@@ -182,66 +178,66 @@ index e6f8dfffd6..2670d55537 100644\n      fn write_isize(&mut self, i: isize) {\n          (**self).write_isize(i)\n      }\n-@@ -577,8 +559,6 @@ mod impls {\n+@@ -587,8 +569,6 @@ mod impls {\n          (i32, write_i32),\n          (i64, write_i64),\n          (isize, write_isize),\n -        (u128, write_u128),\n -        (i128, write_i128),\n      }\n-\n+ \n      #[stable(feature = \"rust1\", since = \"1.0.0\")]\n diff --git a/src/libcore/iter/range.rs b/src/libcore/iter/range.rs\n-index 651c7a35d4..3708b8ea95 100644\n+index 651c7a3..3708b8e 100644\n --- a/src/libcore/iter/range.rs\n +++ b/src/libcore/iter/range.rs\n @@ -175,7 +175,6 @@ step_impl_signed!([i64: u64]);\n  // assume here that it is less than 64-bits.\n  #[cfg(not(target_pointer_width = \"64\"))]\n  step_impl_no_between!(u64 i64);\n -step_impl_no_between!(u128 i128);\n-\n+ \n  macro_rules! range_exact_iter_impl {\n      ($($t:ty)*) => ($(\n diff --git a/src/libcore/iter/traits.rs b/src/libcore/iter/traits.rs\n-index 4b2c1aa551..ec3991fa01 100644\n+index 4b2c1aa..ec3991f 100644\n --- a/src/libcore/iter/traits.rs\n +++ b/src/libcore/iter/traits.rs\n @@ -843,7 +843,7 @@ macro_rules! float_sum_product {\n      )*)\n  }\n-\n+ \n -integer_sum_product! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n +integer_sum_product! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n  float_sum_product! { f32 f64 }\n-\n+ \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index bdeb6ce426..3bec7a240c 100644\n+index c7618b9..31b33a2 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -146,14 +146,12 @@ mod uint_macros;\n+@@ -144,14 +144,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n -#[path = \"num/i128.rs\"]  pub mod i128;\n-\n+ \n  #[path = \"num/usize.rs\"] pub mod usize;\n  #[path = \"num/u8.rs\"]    pub mod u8;\n  #[path = \"num/u16.rs\"]   pub mod u16;\n  #[path = \"num/u32.rs\"]   pub mod u32;\n  #[path = \"num/u64.rs\"]   pub mod u64;\n -#[path = \"num/u128.rs\"]  pub mod u128;\n-\n+ \n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index 4f37b46258..2e8d514700 100644\n+index d18e167..ec2edc1 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n @@ -649,8 +649,8 @@ mod copy_impls {\n      }\n-\n+ \n      impl_copy! {\n -        usize u8 u16 u32 u64 u128\n -        isize i8 i16 i32 i64 i128\n@@ -251,7 +247,7 @@ index 4f37b46258..2e8d514700 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 8fb4e0d6a0..e9621d723d 100644\n+index 8a74e7c..642fffa 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n @@ -196,12 +196,10 @@ pub fn forget<T>(t: T) {\n@@ -267,31 +263,8 @@ index 8fb4e0d6a0..e9621d723d 100644\n  /// f32 | 4\n  /// f64 | 8\n  /// char | 4\n-diff --git a/src/libcore/num/i128.rs b/src/libcore/num/i128.rs\n-deleted file mode 100644\n-index 989376d1ac..0000000000\n---- a/src/libcore/num/i128.rs\n-+++ /dev/null\n-@@ -1,17 +0,0 @@\n--// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n--// file at the top-level directory of this distribution and at\n--// http://rust-lang.org/COPYRIGHT.\n--//\n--// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n--// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n--// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n--// option. This file may not be copied, modified, or distributed\n--// except according to those terms.\n--\n--//! The 128-bit signed integer type.\n--//!\n--//! *[See also the `i128` primitive type](../../std/primitive.i128.html).*\n--\n--#![stable(feature = \"i128\", since = \"1.26.0\")]\n--\n--int_module! { i128, #[stable(feature = \"i128\", since=\"1.26.0\")] }\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 0b8f8f0703..584d24130e 100644\n+index eb63966..eb06710 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n @@ -95,7 +95,6 @@ nonzero_integers! {\n@@ -301,59 +274,64 @@ index 0b8f8f0703..584d24130e 100644\n -    NonZeroU128(u128);\n      NonZeroUsize(usize);\n  }\n-\n-@@ -1954,12 +1953,6 @@ impl i64 {\n-     int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\" }\n+ \n+@@ -2025,15 +2024,6 @@ impl i64 {\n+          \"0x6a2c48091e6a2c48\" }\n  }\n-\n+ \n -#[lang = \"i128\"]\n -impl i128 {\n -    int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n--        170141183460469231731687303715884105727, \"\", \"\" }\n+-        170141183460469231731687303715884105727, \"\", \"\", 16,\n+-        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n+-        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\"\n+-    }\n -}\n -\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4100,11 +4093,6 @@ impl u64 {\n-     uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\" }\n+@@ -4157,13 +4147,6 @@ impl u64 {\n+         \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\" }\n  }\n-\n+ \n -#[lang = \"u128\"]\n -impl u128 {\n--    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\" }\n+-    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\", 16,\n+-        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n+-        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\" }\n -}\n -\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4183,7 +4171,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4244,7 +4227,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n -from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n +from_str_radix_int_impl! { isize i8 i16 i32 i64 usize u8 u16 u32 u64 }\n-\n+ \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4299,30 +4287,25 @@ macro_rules! rev {\n+@@ -4360,30 +4343,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n -try_from_upper_bounded!(u128, u64, u32, u16, u8);\n-\n+ \n  try_from_both_bounded!(i16, i8);\n  try_from_both_bounded!(i32, i16, i8);\n  try_from_both_bounded!(i64, i32, i16, i8);\n -try_from_both_bounded!(i128, i64, i32, i16, i8);\n-\n+ \n  // unsigned-to-signed\n  try_from_upper_bounded!(u8, i8);\n  try_from_upper_bounded!(u16, i8, i16);\n  try_from_upper_bounded!(u32, i8, i16, i32);\n  try_from_upper_bounded!(u64, i8, i16, i32, i64);\n -try_from_upper_bounded!(u128, i8, i16, i32, i64, i128);\n-\n+ \n  // signed-to-unsigned\n -try_from_lower_bounded!(i8, u8, u16, u32, u64, u128);\n -try_from_lower_bounded!(i16, u16, u32, u64, u128);\n@@ -368,111 +346,111 @@ index 0b8f8f0703..584d24130e 100644\n  try_from_both_bounded!(i32, u16, u8);\n  try_from_both_bounded!(i64, u32, u16, u8);\n -try_from_both_bounded!(i128, u64, u32, u16, u8);\n-\n+ \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4334,21 +4317,21 @@ mod ptr_try_from_impls {\n+@@ -4395,21 +4373,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n-\n+ \n      try_from_upper_bounded!(usize, u8);\n -    try_from_unbounded!(usize, u16, u32, u64, u128);\n +    try_from_unbounded!(usize, u16, u32, u64);\n      try_from_upper_bounded!(usize, i8, i16);\n -    try_from_unbounded!(usize, i32, i64, i128);\n +    try_from_unbounded!(usize, i32, i64);\n-\n+ \n      try_from_both_bounded!(isize, u8);\n -    try_from_lower_bounded!(isize, u16, u32, u64, u128);\n +    try_from_lower_bounded!(isize, u16, u32, u64);\n      try_from_both_bounded!(isize, i8);\n -    try_from_unbounded!(isize, i16, i32, i64, i128);\n +    try_from_unbounded!(isize, i16, i32, i64);\n-\n+ \n -    rev!(try_from_upper_bounded, usize, u32, u64, u128);\n +    rev!(try_from_upper_bounded, usize, u32, u64);\n      rev!(try_from_lower_bounded, usize, i8, i16);\n -    rev!(try_from_both_bounded, usize, i32, i64, i128);\n +    rev!(try_from_both_bounded, usize, i32, i64);\n-\n+ \n -    rev!(try_from_upper_bounded, isize, u16, u32, u64, u128);\n -    rev!(try_from_both_bounded, isize, i32, i64, i128);\n +    rev!(try_from_upper_bounded, isize, u16, u32, u64);\n +    rev!(try_from_both_bounded, isize, i32, i64);\n  }\n-\n+ \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4357,24 +4340,24 @@ mod ptr_try_from_impls {\n+@@ -4418,24 +4396,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n-\n+ \n      try_from_upper_bounded!(usize, u8, u16);\n -    try_from_unbounded!(usize, u32, u64, u128);\n +    try_from_unbounded!(usize, u32, u64);\n      try_from_upper_bounded!(usize, i8, i16, i32);\n -    try_from_unbounded!(usize, i64, i128);\n +    try_from_unbounded!(usize, i64);\n-\n+ \n      try_from_both_bounded!(isize, u8, u16);\n -    try_from_lower_bounded!(isize, u32, u64, u128);\n +    try_from_lower_bounded!(isize, u32, u64);\n      try_from_both_bounded!(isize, i8, i16);\n -    try_from_unbounded!(isize, i32, i64, i128);\n +    try_from_unbounded!(isize, i32, i64);\n-\n+ \n      rev!(try_from_unbounded, usize, u32);\n -    rev!(try_from_upper_bounded, usize, u64, u128);\n +    rev!(try_from_upper_bounded, usize, u64);\n      rev!(try_from_lower_bounded, usize, i8, i16, i32);\n -    rev!(try_from_both_bounded, usize, i64, i128);\n +    rev!(try_from_both_bounded, usize, i64);\n-\n+ \n      rev!(try_from_unbounded, isize, u16);\n -    rev!(try_from_upper_bounded, isize, u32, u64, u128);\n +    rev!(try_from_upper_bounded, isize, u32, u64);\n      rev!(try_from_unbounded, isize, i32);\n -    rev!(try_from_both_bounded, isize, i64, i128);\n +    rev!(try_from_both_bounded, isize, i64);\n  }\n-\n+ \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4383,24 +4366,20 @@ mod ptr_try_from_impls {\n+@@ -4444,24 +4422,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n-\n+ \n      try_from_upper_bounded!(usize, u8, u16, u32);\n -    try_from_unbounded!(usize, u64, u128);\n +    try_from_unbounded!(usize, u64);\n      try_from_upper_bounded!(usize, i8, i16, i32, i64);\n -    try_from_unbounded!(usize, i128);\n-\n+ \n      try_from_both_bounded!(isize, u8, u16, u32);\n -    try_from_lower_bounded!(isize, u64, u128);\n +    try_from_lower_bounded!(isize, u64);\n      try_from_both_bounded!(isize, i8, i16, i32);\n -    try_from_unbounded!(isize, i64, i128);\n +    try_from_unbounded!(isize, i64);\n-\n+ \n      rev!(try_from_unbounded, usize, u32, u64);\n -    rev!(try_from_upper_bounded, usize, u128);\n      rev!(try_from_lower_bounded, usize, i8, i16, i32, i64);\n -    rev!(try_from_both_bounded, usize, i128);\n-\n+ \n      rev!(try_from_unbounded, isize, u16, u32);\n -    rev!(try_from_upper_bounded, isize, u64, u128);\n +    rev!(try_from_upper_bounded, isize, u64);\n      rev!(try_from_unbounded, isize, i32, i64);\n -    rev!(try_from_both_bounded, isize, i128);\n  }\n-\n+ \n  #[doc(hidden)]\n-@@ -4435,7 +4414,7 @@ macro_rules! doit {\n+@@ -4496,7 +4470,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n -doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n +doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n-\n+ \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4603,52 +4582,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4664,52 +4638,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -484,7 +462,7 @@ index 0b8f8f0703..584d24130e 100644\n  impl_from_bool! { i64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n -impl_from_bool! { i128, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { isize, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n-\n+ \n  // Unsigned -> Unsigned\n  impl_from! { u8, u16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n  impl_from! { u8, u32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n@@ -497,7 +475,7 @@ index 0b8f8f0703..584d24130e 100644\n  impl_from! { u32, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n -impl_from! { u32, u128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n -impl_from! { u64, u128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n-\n+ \n  // Signed -> Signed\n  impl_from! { i8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n  impl_from! { i8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n@@ -510,7 +488,7 @@ index 0b8f8f0703..584d24130e 100644\n  impl_from! { i32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n -impl_from! { i32, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n -impl_from! { i64, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n-\n+ \n  // Unsigned -> Signed\n  impl_from! { u8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n  impl_from! { u8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n@@ -522,33 +500,11 @@ index 0b8f8f0703..584d24130e 100644\n  impl_from! { u32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n -impl_from! { u32, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n -impl_from! { u64, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n-\n+ \n  // The C99 standard defines bounds on INTPTR_MIN, INTPTR_MAX, and UINTPTR_MAX\n  // which imply that pointer-sized integers must be at least 16 bits:\n-diff --git a/src/libcore/num/u128.rs b/src/libcore/num/u128.rs\n-deleted file mode 100644\n-index e8c783a1bb..0000000000\n---- a/src/libcore/num/u128.rs\n-+++ /dev/null\n-@@ -1,16 +0,0 @@\n--// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n--// file at the top-level directory of this distribution and at\n--// http://rust-lang.org/COPYRIGHT.\n--//\n--// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n--// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n--// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n--// option. This file may not be copied, modified, or distributed\n--// except according to those terms.\n--\n--//! The 128-bit unsigned integer type.\n--//!\n--//! *[See also the `u128` primitive type](../../std/primitive.u128.html).*\n--\n--#![stable(feature = \"i128\", since = \"1.26.0\")]\n--uint_module! { u128, #[stable(feature = \"i128\", since=\"1.26.0\")] }\n diff --git a/src/libcore/num/wrapping.rs b/src/libcore/num/wrapping.rs\n-index 1c826c2fa7..0779e31572 100644\n+index 1c826c2..0779e31 100644\n --- a/src/libcore/num/wrapping.rs\n +++ b/src/libcore/num/wrapping.rs\n @@ -112,19 +112,17 @@ macro_rules! sh_impl_all {\n@@ -557,7 +513,7 @@ index 1c826c2fa7..0779e31572 100644\n          //sh_impl_unsigned! { $t, u64 }\n -        //sh_impl_unsigned! { $t, u128 }\n          sh_impl_unsigned! { $t, usize }\n-\n+ \n          //sh_impl_signed! { $t, i8 }\n          //sh_impl_signed! { $t, i16 }\n          //sh_impl_signed! { $t, i32 }\n@@ -566,46 +522,46 @@ index 1c826c2fa7..0779e31572 100644\n          //sh_impl_signed! { $t, isize }\n      )*)\n  }\n-\n+ \n -sh_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +sh_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-\n+ \n  // FIXME(30524): impl Op<T> for Wrapping<T>, impl OpAssign<T> for Wrapping<T>\n  macro_rules! wrapping_impl {\n @@ -323,7 +321,7 @@ macro_rules! wrapping_impl {\n      )*)\n  }\n-\n+ \n -wrapping_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +wrapping_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  macro_rules! wrapping_int_impl {\n      ($($t:ty)*) => ($(\n @@ -685,7 +683,7 @@ assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n      )*)\n  }\n-\n+ \n -wrapping_int_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +wrapping_int_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  macro_rules! wrapping_int_impl_signed {\n      ($($t:ty)*) => ($(\n @@ -814,7 +812,7 @@ assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n      )*)\n  }\n-\n+ \n -wrapping_int_impl_signed! { isize i8 i16 i32 i64 i128 }\n +wrapping_int_impl_signed! { isize i8 i16 i32 i64 }\n-\n+ \n  macro_rules! wrapping_int_impl_unsigned {\n      ($($t:ty)*) => ($(\n @@ -891,7 +889,7 @@ assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\n      )*)\n  }\n-\n+ \n -wrapping_int_impl_unsigned! { usize u8 u16 u32 u64 u128 }\n +wrapping_int_impl_unsigned! { usize u8 u16 u32 u64 }\n-\n+ \n  mod shift_max {\n      #![allow(non_upper_case_globals)]\n @@ -918,13 +916,11 @@ mod shift_max {\n@@ -614,7 +570,7 @@ index 1c826c2fa7..0779e31572 100644\n      pub const i64: u32 = (1 << 6) - 1;\n -    pub const i128: u32 = (1 << 7) - 1;\n      pub use self::platform::isize;\n-\n+ \n      pub const u8: u32 = i8;\n      pub const u16: u32 = i16;\n      pub const u32: u32 = i32;\n@@ -623,143 +579,143 @@ index 1c826c2fa7..0779e31572 100644\n      pub use self::platform::usize;\n  }\n diff --git a/src/libcore/ops/arith.rs b/src/libcore/ops/arith.rs\n-index a1bc5463f7..38742be1ce 100644\n+index a1bc546..38742be 100644\n --- a/src/libcore/ops/arith.rs\n +++ b/src/libcore/ops/arith.rs\n @@ -114,7 +114,7 @@ macro_rules! add_impl {\n      )*)\n  }\n-\n+ \n -add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The subtraction operator `-`.\n  ///\n @@ -212,7 +212,7 @@ macro_rules! sub_impl {\n      )*)\n  }\n-\n+ \n -sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The multiplication operator `*`.\n  ///\n @@ -332,7 +332,7 @@ macro_rules! mul_impl {\n      )*)\n  }\n-\n+ \n -mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The division operator `/`.\n  ///\n @@ -457,7 +457,7 @@ macro_rules! div_impl_integer {\n      )*)\n  }\n-\n+ \n -div_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +div_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  macro_rules! div_impl_float {\n      ($($t:ty)*) => ($(\n @@ -542,7 +542,7 @@ macro_rules! rem_impl_integer {\n      )*)\n  }\n-\n+ \n -rem_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +rem_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n-\n+ \n+ \n  macro_rules! rem_impl_float {\n @@ -641,7 +641,7 @@ macro_rules! neg_impl_unsigned {\n  }\n-\n+ \n  // neg_impl_unsigned! { usize u8 u16 u32 u64 }\n -neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n +neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The addition assignment operator `+=`.\n  ///\n @@ -697,7 +697,7 @@ macro_rules! add_assign_impl {\n      )+)\n  }\n-\n+ \n -add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The subtraction assignment operator `-=`.\n  ///\n @@ -753,7 +753,7 @@ macro_rules! sub_assign_impl {\n      )+)\n  }\n-\n+ \n -sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The multiplication assignment operator `*=`.\n  ///\n @@ -800,7 +800,7 @@ macro_rules! mul_assign_impl {\n      )+)\n  }\n-\n+ \n -mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The division assignment operator `/=`.\n  ///\n @@ -846,7 +846,7 @@ macro_rules! div_assign_impl {\n      )+)\n  }\n-\n+ \n -div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The remainder assignment operator `%=`.\n  ///\n @@ -896,4 +896,4 @@ macro_rules! rem_assign_impl {\n      )+)\n  }\n-\n+ \n -rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n diff --git a/src/libcore/ops/bit.rs b/src/libcore/ops/bit.rs\n-index 3900f365b0..66b7980a43 100644\n+index 3900f36..66b7980 100644\n --- a/src/libcore/ops/bit.rs\n +++ b/src/libcore/ops/bit.rs\n @@ -65,7 +65,7 @@ macro_rules! not_impl {\n      )*)\n  }\n-\n+ \n -not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The bitwise AND operator `&`.\n  ///\n @@ -149,7 +149,7 @@ macro_rules! bitand_impl {\n      )*)\n  }\n-\n+ \n -bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The bitwise OR operator `|`.\n  ///\n @@ -233,7 +233,7 @@ macro_rules! bitor_impl {\n      )*)\n  }\n-\n+ \n -bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The bitwise XOR operator `^`.\n  ///\n @@ -320,7 +320,7 @@ macro_rules! bitxor_impl {\n      )*)\n  }\n-\n+ \n -bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The left shift operator `<<`. Note that because this trait is implemented\n  /// for all integer types with multiple right-hand-side types, Rust's type\n @@ -417,19 +417,17 @@ macro_rules! shl_impl_all {\n@@ -768,7 +724,7 @@ index 3900f365b0..66b7980a43 100644\n          shl_impl! { $t, u64 }\n -        shl_impl! { $t, u128 }\n          shl_impl! { $t, usize }\n-\n+ \n          shl_impl! { $t, i8 }\n          shl_impl! { $t, i16 }\n          shl_impl! { $t, i32 }\n@@ -777,10 +733,10 @@ index 3900f365b0..66b7980a43 100644\n          shl_impl! { $t, isize }\n      )*)\n  }\n-\n+ \n -shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n +shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-\n+ \n  /// The right shift operator `>>`. Note that because this trait is implemented\n  /// for all integer types with multiple right-hand-side types, Rust's type\n @@ -526,19 +524,17 @@ macro_rules! shr_impl_all {\n@@ -789,7 +745,7 @@ index 3900f365b0..66b7980a43 100644\n          shr_impl! { $t, u64 }\n -        shr_impl! { $t, u128 }\n          shr_impl! { $t, usize }\n-\n+ \n          shr_impl! { $t, i8 }\n          shr_impl! { $t, i16 }\n          shr_impl! { $t, i32 }\n@@ -798,37 +754,37 @@ index 3900f365b0..66b7980a43 100644\n          shr_impl! { $t, isize }\n      )*)\n  }\n-\n+ \n -shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-\n+ \n  /// The bitwise AND assignment operator `&=`.\n  ///\n @@ -626,7 +622,7 @@ macro_rules! bitand_assign_impl {\n      )+)\n  }\n-\n+ \n -bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The bitwise OR assignment operator `|=`.\n  ///\n @@ -675,7 +671,7 @@ macro_rules! bitor_assign_impl {\n      )+)\n  }\n-\n+ \n -bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The bitwise XOR assignment operator `^=`.\n  ///\n @@ -724,7 +720,7 @@ macro_rules! bitxor_assign_impl {\n      )+)\n  }\n-\n+ \n -bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The left shift assignment operator `<<=`.\n  ///\n @@ -780,19 +776,17 @@ macro_rules! shl_assign_impl_all {\n@@ -837,7 +793,7 @@ index 3900f365b0..66b7980a43 100644\n          shl_assign_impl! { $t, u64 }\n -        shl_assign_impl! { $t, u128 }\n          shl_assign_impl! { $t, usize }\n-\n+ \n          shl_assign_impl! { $t, i8 }\n          shl_assign_impl! { $t, i16 }\n          shl_assign_impl! { $t, i32 }\n@@ -846,10 +802,10 @@ index 3900f365b0..66b7980a43 100644\n          shl_assign_impl! { $t, isize }\n      )*)\n  }\n-\n+ \n -shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-\n+ \n  /// The right shift assignment operator `>>=`.\n  ///\n @@ -848,16 +842,14 @@ macro_rules! shr_assign_impl_all {\n@@ -858,7 +814,7 @@ index 3900f365b0..66b7980a43 100644\n          shr_assign_impl! { $t, u64 }\n -        shr_assign_impl! { $t, u128 }\n          shr_assign_impl! { $t, usize }\n-\n+ \n          shr_assign_impl! { $t, i8 }\n          shr_assign_impl! { $t, i16 }\n          shr_assign_impl! { $t, i32 }\n@@ -867,11 +823,11 @@ index 3900f365b0..66b7980a43 100644\n          shr_assign_impl! { $t, isize }\n      )*)\n  }\n-\n+ \n -shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n diff --git a/src/libcore/tests/iter.rs b/src/libcore/tests/iter.rs\n-index 72b115f8b5..d542e10bb0 100644\n+index 72b115f..d542e10 100644\n --- a/src/libcore/tests/iter.rs\n +++ b/src/libcore/tests/iter.rs\n @@ -224,8 +224,6 @@ fn test_iterator_step_by_nth_overflow() {\n@@ -880,12 +836,12 @@ index 72b115f8b5..d542e10bb0 100644\n      type Bigger = u64;\n -    #[cfg(target_pointer_width = \"64\")]\n -    type Bigger = u128;\n-\n+ \n      #[derive(Clone)]\n      struct Test(Bigger);\n @@ -1878,19 +1876,6 @@ fn test_step_replace_signed() {\n  }\n-\n+ \n  #[test]\n -fn test_step_replace_no_between() {\n -    let mut x = 4u128;\n@@ -904,7 +860,7 @@ index 72b115f8b5..d542e10bb0 100644\n      let f = &|acc, x| i32::checked_add(2*acc, x);\n      assert_eq!((1..10).rev().try_fold(7, f), (1..10).try_rfold(7, f));\n diff --git a/src/libcore/tests/num/mod.rs b/src/libcore/tests/num/mod.rs\n-index ab96d3126b..bb5c1d06da 100644\n+index ab96d31..bb5c1d0 100644\n --- a/src/libcore/tests/num/mod.rs\n +++ b/src/libcore/tests/num/mod.rs\n @@ -196,12 +196,10 @@ test_impl_from! { test_boolu8, bool, u8 }\n@@ -917,7 +873,7 @@ index ab96d3126b..bb5c1d06da 100644\n  test_impl_from! { test_booli32, bool, i32 }\n  test_impl_from! { test_booli64, bool, i64 }\n -test_impl_from! { test_booli128, bool, i128 }\n-\n+ \n  // Signed -> Float\n  test_impl_from! { test_i8f32, i8, f32 }\n @@ -283,51 +281,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n@@ -929,57 +885,57 @@ index ab96d3126b..bb5c1d06da 100644\n  test_impl_try_from_always_ok! { test_try_u8i32, u8, i32 }\n  test_impl_try_from_always_ok! { test_try_u8i64, u8, i64 }\n -test_impl_try_from_always_ok! { test_try_u8i128, u8, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_u16u16, u16, u16 }\n  test_impl_try_from_always_ok! { test_try_u16u32, u16, u32 }\n  test_impl_try_from_always_ok! { test_try_u16u64, u16, u64 }\n -test_impl_try_from_always_ok! { test_try_u16u128, u16, u128 }\n  test_impl_try_from_always_ok! { test_try_u16i32, u16, i32 }\n  test_impl_try_from_always_ok! { test_try_u16i64, u16, i64 }\n -test_impl_try_from_always_ok! { test_try_u16i128, u16, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_u32u32, u32, u32 }\n  test_impl_try_from_always_ok! { test_try_u32u64, u32, u64 }\n -test_impl_try_from_always_ok! { test_try_u32u128, u32, u128 }\n  test_impl_try_from_always_ok! { test_try_u32i64, u32, i64 }\n -test_impl_try_from_always_ok! { test_try_u32i128, u32, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_u64u64, u64, u64 }\n -test_impl_try_from_always_ok! { test_try_u64u128, u64, u128 }\n -test_impl_try_from_always_ok! { test_try_u64i128, u64, i128 }\n -\n -test_impl_try_from_always_ok! { test_try_u128u128, u128, u128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_i8i8, i8, i8 }\n  test_impl_try_from_always_ok! { test_try_i8i16, i8, i16 }\n  test_impl_try_from_always_ok! { test_try_i8i32, i8, i32 }\n  test_impl_try_from_always_ok! { test_try_i8i64, i8, i64 }\n -test_impl_try_from_always_ok! { test_try_i8i128, i8, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_i16i16, i16, i16 }\n  test_impl_try_from_always_ok! { test_try_i16i32, i16, i32 }\n  test_impl_try_from_always_ok! { test_try_i16i64, i16, i64 }\n -test_impl_try_from_always_ok! { test_try_i16i128, i16, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_i32i32, i32, i32 }\n  test_impl_try_from_always_ok! { test_try_i32i64, i32, i64 }\n -test_impl_try_from_always_ok! { test_try_i32i128, i32, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_i64i64, i64, i64 }\n -test_impl_try_from_always_ok! { test_try_i64i128, i64, i128 }\n -\n -test_impl_try_from_always_ok! { test_try_i128i128, i128, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n  test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index 54973b7b77..1c07753e01 100644\n+index b589202..0f8a2ee 100644\n --- a/src/libcore/time.rs\n +++ b/src/libcore/time.rs\n @@ -268,57 +268,6 @@ impl Duration {\n      #[inline]\n      pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n-\n+ \n -    /// Returns the total number of whole milliseconds contained by this `Duration`.\n -    ///\n -    /// # Examples\n@@ -1034,6 +990,6 @@ index 54973b7b77..1c07753e01 100644\n      /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n      /// if overflow occurred.\n      ///\n---\n+-- \n 2.11.0\n "}, {"sha": "c41191ceb21ebfc8adb19c3549e0142e3c7335d9", "filename": "Cargo.lock", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3", "patch": "@@ -90,38 +90,48 @@ dependencies = [\n [[package]]\n name = \"cranelift\"\n version = \"0.18.1\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#3e01b4f35f02f757dab3d42fbf62b21fef88895f\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#78b7d344d24705888c865defb755c5c0ae2b516e\"\n dependencies = [\n  \"cranelift-codegen 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-frontend 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n ]\n \n+[[package]]\n+name = \"cranelift-bforest\"\n+version = \"0.18.1\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#78b7d344d24705888c865defb755c5c0ae2b516e\"\n+dependencies = [\n+ \"cranelift-entity 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n+]\n+\n [[package]]\n name = \"cranelift-codegen\"\n version = \"0.18.1\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#3e01b4f35f02f757dab3d42fbf62b21fef88895f\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#78b7d344d24705888c865defb755c5c0ae2b516e\"\n dependencies = [\n+ \"cranelift-bforest 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-codegen-meta 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-entity 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n version = \"0.18.1\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#3e01b4f35f02f757dab3d42fbf62b21fef88895f\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#78b7d344d24705888c865defb755c5c0ae2b516e\"\n \n [[package]]\n name = \"cranelift-entity\"\n version = \"0.18.1\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#3e01b4f35f02f757dab3d42fbf62b21fef88895f\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#78b7d344d24705888c865defb755c5c0ae2b516e\"\n \n [[package]]\n name = \"cranelift-faerie\"\n version = \"0.18.1\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#3e01b4f35f02f757dab3d42fbf62b21fef88895f\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#78b7d344d24705888c865defb755c5c0ae2b516e\"\n dependencies = [\n  \"cranelift-codegen 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-module 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n@@ -134,25 +144,26 @@ dependencies = [\n [[package]]\n name = \"cranelift-frontend\"\n version = \"0.18.1\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#3e01b4f35f02f757dab3d42fbf62b21fef88895f\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#78b7d344d24705888c865defb755c5c0ae2b516e\"\n dependencies = [\n  \"cranelift-codegen 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n ]\n \n [[package]]\n name = \"cranelift-module\"\n version = \"0.18.1\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#3e01b4f35f02f757dab3d42fbf62b21fef88895f\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#78b7d344d24705888c865defb755c5c0ae2b516e\"\n dependencies = [\n  \"cranelift-codegen 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-entity 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n version = \"0.18.1\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#3e01b4f35f02f757dab3d42fbf62b21fef88895f\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#78b7d344d24705888c865defb755c5c0ae2b516e\"\n dependencies = [\n  \"cranelift-codegen 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"raw-cpuid 5.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -162,7 +173,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-simplejit\"\n version = \"0.18.1\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#3e01b4f35f02f757dab3d42fbf62b21fef88895f\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#78b7d344d24705888c865defb755c5c0ae2b516e\"\n dependencies = [\n  \"cranelift-codegen 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-module 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n@@ -653,6 +664,7 @@ dependencies = [\n \"checksum cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c4e7bb64a8ebb0d856483e1e682ea3422f883c5f5615a90d51a2c82fe87fdd3\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\"\n \"checksum cranelift 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n+\"checksum cranelift-bforest 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum cranelift-codegen 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum cranelift-codegen-meta 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum cranelift-entity 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\""}]}