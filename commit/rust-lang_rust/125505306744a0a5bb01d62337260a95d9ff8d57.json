{"sha": "125505306744a0a5bb01d62337260a95d9ff8d57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNTUwNTMwNjc0NGEwYTViYjAxZDYyMzM3MjYwYTk1ZDlmZjhkNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-08T17:11:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-08T17:11:42Z"}, "message": "Auto merge of #83763 - alexcrichton:wasm-multivalue-abi, r=nagisa\n\nrustc: Add a new `wasm` ABI\n\nThis commit implements the idea of a new ABI for the WebAssembly target,\none called `\"wasm\"`. This ABI is entirely of my own invention\nand has no current precedent, but I think that the addition of this ABI\nmight help solve a number of issues with the WebAssembly targets.\n\nWhen `wasm32-unknown-unknown` was first added to Rust I naively\n\"implemented an abi\" for the target. I then went to write `wasm-bindgen`\nwhich accidentally relied on details of this ABI. Turns out the ABI\ndefinition didn't match C, which is causing issues for C/Rust interop.\nCurrently the compiler has a \"wasm32 bindgen compat\" ABI which is the\noriginal implementation I added, and it's purely there for, well,\n`wasm-bindgen`.\n\nAnother issue with the WebAssembly target is that it's not clear to me\nwhen and if the default C ABI will change to account for WebAssembly's\nmulti-value feature (a feature that allows functions to return multiple\nvalues). Even if this does happen, though, it seems like the C ABI will\nbe guided based on the performance of WebAssembly code and will likely\nnot match even what the current wasm-bindgen-compat ABI is today. This\nleaves a hole in Rust's expressivity in binding WebAssembly where given\na particular import type, Rust may not be able to import that signature\nwith an updated C ABI for multi-value.\n\nTo fix these issues I had the idea of a new ABI for WebAssembly, one\ncalled `wasm`. The definition of this ABI is \"what you write\nmaps straight to wasm\". The goal here is that whatever you write down in\nthe parameter list or in the return values goes straight into the\nfunction's signature in the WebAssembly file. This special ABI is for\nintentionally matching the ABI of an imported function from the\nenvironment or exporting a function with the right signature.\n\nWith the addition of a new ABI, this enables rustc to:\n\n* Eventually remove the \"wasm-bindgen compat hack\". Once this multivalue\n  ABI is stable wasm-bindgen can switch to using it everywhere.\n  Afterwards the wasm32-unknown-unknown target can have its default ABI\n  updated to match C.\n\n* Expose the ability to precisely match an ABI signature for a\n  WebAssembly function, regardless of what the C ABI that clang chooses\n  turns out to be.\n\n* Continue to evolve the definition of the default C ABI to match what\n  clang does on all targets, since the purpose of that ABI will be\n  explicitly matching C rather than generating particular function\n  imports/exports.\n\nNaturally this is implemented as an unstable feature initially, but it\nwould be nice for this to get stabilized (if it works) in the near-ish\nfuture to remove the wasm32-unknown-unknown incompatibility with the C\nABI. Doing this, however, requires the feature to be on stable because\nwasm-bindgen works with stable Rust.", "tree": {"sha": "d69a593aa527ecaad3f5e4a9f0b510bfc567df49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d69a593aa527ecaad3f5e4a9f0b510bfc567df49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/125505306744a0a5bb01d62337260a95d9ff8d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/125505306744a0a5bb01d62337260a95d9ff8d57", "html_url": "https://github.com/rust-lang/rust/commit/125505306744a0a5bb01d62337260a95d9ff8d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/125505306744a0a5bb01d62337260a95d9ff8d57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "010c2368fa33ef08df3080228498db8d2ba5a93b", "url": "https://api.github.com/repos/rust-lang/rust/commits/010c2368fa33ef08df3080228498db8d2ba5a93b", "html_url": "https://github.com/rust-lang/rust/commit/010c2368fa33ef08df3080228498db8d2ba5a93b"}, {"sha": "482a3d06c3d1f83761bf3c94e1bad4fac7d32db4", "url": "https://api.github.com/repos/rust-lang/rust/commits/482a3d06c3d1f83761bf3c94e1bad4fac7d32db4", "html_url": "https://github.com/rust-lang/rust/commit/482a3d06c3d1f83761bf3c94e1bad4fac7d32db4"}], "stats": {"total": 603, "additions": 405, "deletions": 198}, "files": [{"sha": "87c4bfae1af23627037a42dd2fac385fbffe74d9", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -196,6 +196,14 @@ impl<'a> PostExpansionVisitor<'a> {\n                     \"thiscall-unwind ABI is experimental and subject to change\"\n                 );\n             }\n+            \"wasm\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    wasm_abi,\n+                    span,\n+                    \"wasm ABI is experimental and subject to change\"\n+                );\n+            }\n             abi => self\n                 .sess\n                 .parse_sess"}, {"sha": "9e5e2b1039efecd301ac7413a413a36bdfa9022f", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_session::Session;\n+use rustc_target::spec::abi::Abi;\n use rustc_target::spec::{SanitizerSet, StackProbeType};\n \n use crate::attributes;\n@@ -293,7 +294,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     // The target doesn't care; the subtarget reads our attribute.\n     apply_tune_cpu_attr(cx, llfn);\n \n-    let function_features = codegen_fn_attrs\n+    let mut function_features = codegen_fn_attrs\n         .target_features\n         .iter()\n         .map(|f| {\n@@ -305,23 +306,10 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n             InstructionSetAttr::ArmT32 => \"+thumb-mode\".to_string(),\n         }))\n         .collect::<Vec<String>>();\n-    if !function_features.is_empty() {\n-        let mut global_features = llvm_util::llvm_global_features(cx.tcx.sess);\n-        global_features.extend(function_features.into_iter());\n-        let features = global_features.join(\",\");\n-        let val = CString::new(features).unwrap();\n-        llvm::AddFunctionAttrStringValue(\n-            llfn,\n-            llvm::AttributePlace::Function,\n-            cstr!(\"target-features\"),\n-            &val,\n-        );\n-    }\n \n-    // Note that currently the `wasm-import-module` doesn't do anything, but\n-    // eventually LLVM 7 should read this and ferry the appropriate import\n-    // module to the output file.\n     if cx.tcx.sess.target.is_like_wasm {\n+        // If this function is an import from the environment but the wasm\n+        // import has a specific module/name, apply them here.\n         if let Some(module) = wasm_import_module(cx.tcx, instance.def_id()) {\n             llvm::AddFunctionAttrStringValue(\n                 llfn,\n@@ -340,6 +328,30 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n                 &name,\n             );\n         }\n+\n+        // The `\"wasm\"` abi on wasm targets automatically enables the\n+        // `+multivalue` feature because the purpose of the wasm abi is to match\n+        // the WebAssembly specification, which has this feature. This won't be\n+        // needed when LLVM enables this `multivalue` feature by default.\n+        if !cx.tcx.is_closure(instance.def_id()) {\n+            let abi = cx.tcx.fn_sig(instance.def_id()).abi();\n+            if abi == Abi::Wasm {\n+                function_features.push(\"+multivalue\".to_string());\n+            }\n+        }\n+    }\n+\n+    if !function_features.is_empty() {\n+        let mut global_features = llvm_util::llvm_global_features(cx.tcx.sess);\n+        global_features.extend(function_features.into_iter());\n+        let features = global_features.join(\",\");\n+        let val = CString::new(features).unwrap();\n+        llvm::AddFunctionAttrStringValue(\n+            llfn,\n+            llvm::AttributePlace::Function,\n+            cstr!(\"target-features\"),\n+            &val,\n+        );\n     }\n }\n "}, {"sha": "1a91eb600a91bf0cbff52cd06e617a3f04f0af86", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -645,6 +645,9 @@ declare_features! (\n     /// Allows using `#[repr(align(...))]` on function items\n     (active, fn_align, \"1.53.0\", Some(82232), None),\n \n+    /// Allows `extern \"wasm\" fn`\n+    (active, wasm_abi, \"1.53.0\", Some(83788), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "c2e9dba6c8e8aacdc8ddb2418153cebf52f16f3a", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -2630,6 +2630,7 @@ fn fn_can_unwind(\n                 | AvrInterrupt\n                 | AvrNonBlockingInterrupt\n                 | CCmseNonSecureCall\n+                | Wasm\n                 | RustIntrinsic\n                 | PlatformIntrinsic\n                 | Unadjusted => false,\n@@ -2712,6 +2713,7 @@ where\n             AmdGpuKernel => Conv::AmdGpuKernel,\n             AvrInterrupt => Conv::AvrInterrupt,\n             AvrNonBlockingInterrupt => Conv::AvrNonBlockingInterrupt,\n+            Wasm => Conv::C,\n \n             // These API constants ought to be more specific...\n             Cdecl => Conv::C,"}, {"sha": "3a189e6b33dda521b612884d8f3e03a41e476472", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -609,6 +609,7 @@ fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, abi: Abi) -> bo\n                 | AvrInterrupt\n                 | AvrNonBlockingInterrupt\n                 | CCmseNonSecureCall\n+                | Wasm\n                 | RustIntrinsic\n                 | PlatformIntrinsic\n                 | Unadjusted => true,"}, {"sha": "ee1d206095e5d7b69efc73b85b7ae9ad0ba380ff", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -1295,6 +1295,7 @@ symbols! {\n         vreg,\n         vreg_low16,\n         warn,\n+        wasm_abi,\n         wasm_import_module,\n         wasm_target_feature,\n         while_let,"}, {"sha": "d9d7d467d92943956f0d3c3ab028caf08ffbcfda", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -18,9 +18,7 @@ mod riscv;\n mod s390x;\n mod sparc;\n mod sparc64;\n-mod wasm32;\n-mod wasm32_bindgen_compat;\n-mod wasm64;\n+mod wasm;\n mod x86;\n mod x86_64;\n mod x86_win64;\n@@ -648,12 +646,14 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"nvptx64\" => nvptx64::compute_abi_info(self),\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" | \"riscv64\" => riscv::compute_abi_info(cx, self),\n-            \"wasm32\" => match cx.target_spec().os.as_str() {\n-                \"emscripten\" | \"wasi\" => wasm32::compute_abi_info(cx, self),\n-                _ => wasm32_bindgen_compat::compute_abi_info(self),\n-            },\n-            \"asmjs\" => wasm32::compute_abi_info(cx, self),\n-            \"wasm64\" => wasm64::compute_abi_info(cx, self),\n+            \"wasm32\" | \"wasm64\" => {\n+                if cx.target_spec().adjust_abi(abi) == spec::abi::Abi::Wasm {\n+                    wasm::compute_wasm_abi_info(self)\n+                } else {\n+                    wasm::compute_c_abi_info(cx, self)\n+                }\n+            }\n+            \"asmjs\" => wasm::compute_c_abi_info(cx, self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)),\n         }\n "}, {"sha": "bf2c08bb1662d96df6957c349f636f35eb68dc84", "filename": "compiler/rustc_target/src/abi/call/wasm.rs", "status": "renamed", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -40,7 +40,8 @@ where\n     }\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n+/// The purpose of this ABI is to match the C ABI (aka clang) exactly.\n+pub fn compute_c_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n     C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n@@ -56,3 +57,27 @@ where\n         classify_arg(cx, arg);\n     }\n }\n+\n+/// The purpose of this ABI is for matching the WebAssembly standard. This\n+/// intentionally diverges from the C ABI and is specifically crafted to take\n+/// advantage of LLVM's support of multiple returns in WebAssembly.\n+pub fn compute_wasm_abi_info<Ty>(fn_abi: &mut FnAbi<'_, Ty>) {\n+    if !fn_abi.ret.is_ignore() {\n+        classify_ret(&mut fn_abi.ret);\n+    }\n+\n+    for arg in &mut fn_abi.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg(arg);\n+    }\n+\n+    fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n+        ret.extend_integer_width_to(32);\n+    }\n+\n+    fn classify_arg<Ty>(arg: &mut ArgAbi<'_, Ty>) {\n+        arg.extend_integer_width_to(32);\n+    }\n+}", "previous_filename": "compiler/rustc_target/src/abi/call/wasm32.rs"}, {"sha": "59571fd9d482106e950745a17d94da8f6187b3cb", "filename": "compiler/rustc_target/src/abi/call/wasm32_bindgen_compat.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/010c2368fa33ef08df3080228498db8d2ba5a93b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010c2368fa33ef08df3080228498db8d2ba5a93b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs?ref=010c2368fa33ef08df3080228498db8d2ba5a93b", "patch": "@@ -1,29 +0,0 @@\n-// This is not and has never been a correct C ABI for WebAssembly, but\n-// for a long time this was the C ABI that Rust used. wasm-bindgen\n-// depends on ABI details for this ABI and is incompatible with the\n-// correct C ABI, so this ABI is being kept around until wasm-bindgen\n-// can be fixed to work with the correct ABI. See #63649 for further\n-// discussion.\n-\n-use crate::abi::call::{ArgAbi, FnAbi};\n-\n-fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n-    ret.extend_integer_width_to(32);\n-}\n-\n-fn classify_arg<Ty>(arg: &mut ArgAbi<'_, Ty>) {\n-    arg.extend_integer_width_to(32);\n-}\n-\n-pub fn compute_abi_info<Ty>(fn_abi: &mut FnAbi<'_, Ty>) {\n-    if !fn_abi.ret.is_ignore() {\n-        classify_ret(&mut fn_abi.ret);\n-    }\n-\n-    for arg in &mut fn_abi.args {\n-        if arg.is_ignore() {\n-            continue;\n-        }\n-        classify_arg(arg);\n-    }\n-}"}, {"sha": "46d670d1689493e1153ee3acecdab6abf6ac8e92", "filename": "compiler/rustc_target/src/abi/call/wasm64.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/010c2368fa33ef08df3080228498db8d2ba5a93b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010c2368fa33ef08df3080228498db8d2ba5a93b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm64.rs?ref=010c2368fa33ef08df3080228498db8d2ba5a93b", "patch": "@@ -1,58 +0,0 @@\n-use crate::abi::call::{ArgAbi, FnAbi, Uniform};\n-use crate::abi::{HasDataLayout, LayoutOf, TyAndLayout, TyAndLayoutMethods};\n-\n-fn unwrap_trivial_aggregate<'a, Ty, C>(cx: &C, val: &mut ArgAbi<'a, Ty>) -> bool\n-where\n-    Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n-{\n-    if val.layout.is_aggregate() {\n-        if let Some(unit) = val.layout.homogeneous_aggregate(cx).ok().and_then(|ha| ha.unit()) {\n-            let size = val.layout.size;\n-            if unit.size == size {\n-                val.cast_to(Uniform { unit, total: size });\n-                return true;\n-            }\n-        }\n-    }\n-    false\n-}\n-\n-fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>)\n-where\n-    Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n-{\n-    ret.extend_integer_width_to(64);\n-    if ret.layout.is_aggregate() && !unwrap_trivial_aggregate(cx, ret) {\n-        ret.make_indirect();\n-    }\n-}\n-\n-fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n-where\n-    Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n-{\n-    arg.extend_integer_width_to(64);\n-    if arg.layout.is_aggregate() && !unwrap_trivial_aggregate(cx, arg) {\n-        arg.make_indirect_byval();\n-    }\n-}\n-\n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n-where\n-    Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n-{\n-    if !fn_abi.ret.is_ignore() {\n-        classify_ret(cx, &mut fn_abi.ret);\n-    }\n-\n-    for arg in &mut fn_abi.args {\n-        if arg.is_ignore() {\n-            continue;\n-        }\n-        classify_arg(cx, arg);\n-    }\n-}"}, {"sha": "a026a623f78663c4f78c33439540d7b1680597d7", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -34,6 +34,7 @@ pub enum Abi {\n     AvrInterrupt,\n     AvrNonBlockingInterrupt,\n     CCmseNonSecureCall,\n+    Wasm,\n \n     // Multiplatform / generic ABIs\n     System { unwind: bool },\n@@ -83,6 +84,7 @@ const AbiDatas: &[AbiData] = &[\n         generic: false,\n     },\n     AbiData { abi: Abi::CCmseNonSecureCall, name: \"C-cmse-nonsecure-call\", generic: false },\n+    AbiData { abi: Abi::Wasm, name: \"wasm\", generic: false },\n     // Cross-platform ABIs\n     AbiData { abi: Abi::System { unwind: false }, name: \"system\", generic: true },\n     AbiData { abi: Abi::System { unwind: true }, name: \"system-unwind\", generic: true },\n@@ -131,13 +133,14 @@ impl Abi {\n             AvrInterrupt => 18,\n             AvrNonBlockingInterrupt => 19,\n             CCmseNonSecureCall => 20,\n+            Wasm => 21,\n             // Cross-platform ABIs\n-            System { unwind: false } => 21,\n-            System { unwind: true } => 22,\n-            RustIntrinsic => 23,\n-            RustCall => 24,\n-            PlatformIntrinsic => 25,\n-            Unadjusted => 26,\n+            System { unwind: false } => 22,\n+            System { unwind: true } => 23,\n+            RustIntrinsic => 24,\n+            RustCall => 25,\n+            PlatformIntrinsic => 26,\n+            Unadjusted => 27,\n         };\n         debug_assert!(\n             AbiDatas"}, {"sha": "57b0a36e009eff7a67c7f893ba6c56b0786de501", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -1254,6 +1254,9 @@ pub struct TargetOptions {\n     /// enabled can generated on this target, but the necessary supporting libraries are not\n     /// distributed with the target, the sanitizer should still appear in this list for the target.\n     pub supported_sanitizers: SanitizerSet,\n+\n+    /// If present it's a default value to use for adjusting the C ABI.\n+    pub default_adjusted_cabi: Option<Abi>,\n }\n \n impl Default for TargetOptions {\n@@ -1357,6 +1360,7 @@ impl Default for TargetOptions {\n             has_thumb_interworking: false,\n             split_debuginfo: SplitDebuginfo::Off,\n             supported_sanitizers: SanitizerSet::empty(),\n+            default_adjusted_cabi: None,\n         }\n     }\n }\n@@ -1408,6 +1412,9 @@ impl Target {\n                     Abi::C { unwind: false }\n                 }\n             }\n+\n+            Abi::C { unwind } => self.default_adjusted_cabi.unwrap_or(Abi::C { unwind }),\n+\n             abi => abi,\n         }\n     }\n@@ -1742,6 +1749,16 @@ impl Target {\n                     }\n                 }\n             } );\n+            ($key_name:ident, Option<Abi>) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match lookup_abi(s) {\n+                        Some(abi) => base.$key_name = Some(abi),\n+                        _ => return Some(Err(format!(\"'{}' is not a valid value for abi\", s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n         }\n \n         if let Some(s) = obj.find(\"target-endian\").and_then(Json::as_string) {\n@@ -1841,6 +1858,7 @@ impl Target {\n         key!(has_thumb_interworking, bool);\n         key!(split_debuginfo, SplitDebuginfo)?;\n         key!(supported_sanitizers, SanitizerSet)?;\n+        key!(default_adjusted_cabi, Option<Abi>)?;\n \n         // NB: The old name is deprecated, but support for it is retained for\n         // compatibility.\n@@ -2081,6 +2099,10 @@ impl ToJson for Target {\n         target_option_val!(split_debuginfo);\n         target_option_val!(supported_sanitizers);\n \n+        if let Some(abi) = self.default_adjusted_cabi {\n+            d.insert(\"default-adjusted-cabi\".to_string(), Abi::name(abi).to_json());\n+        }\n+\n         if default.unsupported_abis != self.unsupported_abis {\n             d.insert(\n                 \"unsupported-abis\".to_string(),"}, {"sha": "834c4dbfc05f659a610b46870580898872417c02", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -12,11 +12,23 @@\n \n use super::wasm_base;\n use super::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::abi::Abi;\n \n pub fn target() -> Target {\n     let mut options = wasm_base::options();\n     options.os = \"unknown\".to_string();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n+\n+    // This is a default for backwards-compatibility with the original\n+    // definition of this target oh-so-long-ago. Once the \"wasm\" ABI is\n+    // stable and the wasm-bindgen project has switched to using it then there's\n+    // no need for this and it can be removed.\n+    //\n+    // Currently this is the reason that this target's ABI is mismatched with\n+    // clang's ABI. This means that, in the limit, you can't merge C and Rust\n+    // code on this target due to this ABI mismatch.\n+    options.default_adjusted_cabi = Some(Abi::Wasm);\n+\n     let clang_args = options.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n \n     // Make sure clang uses LLD as its linker and is configured appropriately"}, {"sha": "ad0e8e9f92808be5c61765834228032b95175dff", "filename": "src/ci/docker/host-x86_64/test-various/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -18,7 +18,7 @@ RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-ins\n   wget \\\n   patch\n \n-RUN curl -sL https://nodejs.org/dist/v14.4.0/node-v14.4.0-linux-x64.tar.xz | \\\n+RUN curl -sL https://nodejs.org/dist/v15.14.0/node-v15.14.0-linux-x64.tar.xz | \\\n   tar -xJ\n \n WORKDIR /build/\n@@ -31,7 +31,7 @@ RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS \\\n   --musl-root-x86_64=/usr/local/x86_64-linux-musl \\\n-  --set build.nodejs=/node-v14.4.0-linux-x64/bin/node \\\n+  --set build.nodejs=/node-v15.14.0-linux-x64/bin/node \\\n   --set rust.lld\n \n # Some run-make tests have assertions about code size, and enabling debug"}, {"sha": "61fc4e8f57fb82f98183498a184be97b14823a76", "filename": "src/test/run-make/wasm-abi/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Frun-make%2Fwasm-abi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Frun-make%2Fwasm-abi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-abi%2FMakefile?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -0,0 +1,7 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# only-wasm32-bare\n+\n+all:\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown\n+\t$(NODE) foo.js $(TMPDIR)/foo.wasm"}, {"sha": "9e9a65401af8165f259993471efaae9dcc8df86b", "filename": "src/test/run-make/wasm-abi/foo.js", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Frun-make%2Fwasm-abi%2Ffoo.js", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Frun-make%2Fwasm-abi%2Ffoo.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-abi%2Ffoo.js?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -0,0 +1,22 @@\n+const fs = require('fs');\n+const process = require('process');\n+const assert = require('assert');\n+const buffer = fs.readFileSync(process.argv[2]);\n+\n+const m = new WebAssembly.Module(buffer);\n+const i = new WebAssembly.Instance(m, {\n+  host: {\n+    two_i32: () => [100, 101],\n+    two_i64: () => [102n, 103n],\n+    two_f32: () => [104, 105],\n+    two_f64: () => [106, 107],\n+    mishmash: () => [108, 109, 110, 111n, 112, 113],\n+  }\n+});\n+\n+assert.deepEqual(i.exports.return_two_i32(), [1, 2])\n+assert.deepEqual(i.exports.return_two_i64(), [3, 4])\n+assert.deepEqual(i.exports.return_two_f32(), [5, 6])\n+assert.deepEqual(i.exports.return_two_f64(), [7, 8])\n+assert.deepEqual(i.exports.return_mishmash(), [9, 10, 11, 12, 13, 14])\n+i.exports.call_imports();"}, {"sha": "0678eb3ff51ae57b1aa1aed9cd506495d5c8fe42", "filename": "src/test/run-make/wasm-abi/foo.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Frun-make%2Fwasm-abi%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Frun-make%2Fwasm-abi%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-abi%2Ffoo.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -0,0 +1,87 @@\n+#![crate_type = \"cdylib\"]\n+#![deny(warnings)]\n+#![feature(wasm_abi)]\n+\n+#[repr(C)]\n+#[derive(PartialEq, Debug)]\n+pub struct TwoI32 {\n+    pub a: i32,\n+    pub b: i32,\n+}\n+\n+#[no_mangle]\n+pub extern \"wasm\" fn return_two_i32() -> TwoI32 {\n+    TwoI32 { a: 1, b: 2 }\n+}\n+\n+#[repr(C)]\n+#[derive(PartialEq, Debug)]\n+pub struct TwoI64 {\n+    pub a: i64,\n+    pub b: i64,\n+}\n+\n+#[no_mangle]\n+pub extern \"wasm\" fn return_two_i64() -> TwoI64 {\n+    TwoI64 { a: 3, b: 4 }\n+}\n+\n+#[repr(C)]\n+#[derive(PartialEq, Debug)]\n+pub struct TwoF32 {\n+    pub a: f32,\n+    pub b: f32,\n+}\n+\n+#[no_mangle]\n+pub extern \"wasm\" fn return_two_f32() -> TwoF32 {\n+    TwoF32 { a: 5., b: 6. }\n+}\n+\n+#[repr(C)]\n+#[derive(PartialEq, Debug)]\n+pub struct TwoF64 {\n+    pub a: f64,\n+    pub b: f64,\n+}\n+\n+#[no_mangle]\n+pub extern \"wasm\" fn return_two_f64() -> TwoF64 {\n+    TwoF64 { a: 7., b: 8. }\n+}\n+\n+#[repr(C)]\n+#[derive(PartialEq, Debug)]\n+pub struct Mishmash {\n+    pub a: f64,\n+    pub b: f32,\n+    pub c: i32,\n+    pub d: i64,\n+    pub e: TwoI32,\n+}\n+\n+#[no_mangle]\n+pub extern \"wasm\" fn return_mishmash() -> Mishmash {\n+    Mishmash { a: 9., b: 10., c: 11, d: 12, e: TwoI32 { a: 13, b: 14 } }\n+}\n+\n+#[link(wasm_import_module = \"host\")]\n+extern \"wasm\" {\n+    fn two_i32() -> TwoI32;\n+    fn two_i64() -> TwoI64;\n+    fn two_f32() -> TwoF32;\n+    fn two_f64() -> TwoF64;\n+    fn mishmash() -> Mishmash;\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn call_imports() {\n+    assert_eq!(two_i32(), TwoI32 { a: 100, b: 101 });\n+    assert_eq!(two_i64(), TwoI64 { a: 102, b: 103 });\n+    assert_eq!(two_f32(), TwoF32 { a: 104., b: 105. });\n+    assert_eq!(two_f64(), TwoF64 { a: 106., b: 107. });\n+    assert_eq!(\n+        mishmash(),\n+        Mishmash { a: 108., b: 109., c: 110, d: 111, e: TwoI32 { a: 112, b: 113 } }\n+    );\n+}"}, {"sha": "357dd25389ecbbed2969ac430dd4b2990f30ef13", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, C-unwind, cdecl, stdcall, stdcall-unwind, fastcall, vectorcall, thiscall, thiscall-unwind, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, C-unwind, cdecl, stdcall, stdcall-unwind, fastcall, vectorcall, thiscall, thiscall-unwind, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "49cf2e158edfc099b814c4a7a98e7b1efb2dccc3", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -10,9 +10,9 @@\n \n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n-//~^ ERROR intrinsic must be in\n+                                   //~^ ERROR intrinsic must be in\n extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n-//~^ ERROR intrinsic must be in\n+                                       //~^ ERROR intrinsic must be in\n extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n extern \"rust-call\" fn f4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n@@ -21,13 +21,14 @@ extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n extern \"thiscall\" fn f8() {} //~ ERROR thiscall is experimental and subject to change\n extern \"amdgpu-kernel\" fn f9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n extern \"efiapi\" fn f10() {} //~ ERROR efiapi ABI is experimental and subject to change\n+extern \"wasm\" fn f11() {} //~ ERROR wasm ABI is experimental and subject to change\n \n // Methods in trait definition\n trait Tr {\n     extern \"rust-intrinsic\" fn m1(); //~ ERROR intrinsics are subject to change\n-    //~^ ERROR intrinsic must be in\n+                                     //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n-    //~^ ERROR intrinsic must be in\n+                                         //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4(_: ()); //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n@@ -36,6 +37,7 @@ trait Tr {\n     extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn m9(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n     extern \"efiapi\" fn m10(); //~ ERROR efiapi ABI is experimental and subject to change\n+    extern \"wasm\" fn m11() {} //~ ERROR wasm ABI is experimental and subject to change\n \n     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn dm4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n@@ -45,16 +47,17 @@ trait Tr {\n     extern \"thiscall\" fn dm8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn dm9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n     extern \"efiapi\" fn dm10() {} //~ ERROR efiapi ABI is experimental and subject to change\n+    extern \"wasm\" fn dm11() {} //~ ERROR wasm ABI is experimental and subject to change\n }\n \n struct S;\n \n // Methods in trait impl\n impl Tr for S {\n     extern \"rust-intrinsic\" fn m1() {} //~ ERROR intrinsics are subject to change\n-    //~^ ERROR intrinsic must be in\n+                                       //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n-    //~^ ERROR intrinsic must be in\n+                                           //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n@@ -63,14 +66,15 @@ impl Tr for S {\n     extern \"thiscall\" fn m8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn m9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n     extern \"efiapi\" fn m10() {} //~ ERROR efiapi ABI is experimental and subject to change\n+    extern \"wasm\" fn m11() {} //~ ERROR wasm ABI is experimental and subject to change\n }\n \n // Methods in inherent impl\n impl S {\n     extern \"rust-intrinsic\" fn im1() {} //~ ERROR intrinsics are subject to change\n-    //~^ ERROR intrinsic must be in\n+                                        //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n-    //~^ ERROR intrinsic must be in\n+                                            //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn im4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental\n@@ -79,6 +83,7 @@ impl S {\n     extern \"thiscall\" fn im8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn im9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n     extern \"efiapi\" fn im10() {} //~ ERROR efiapi ABI is experimental and subject to change\n+    extern \"wasm\" fn im11() {} //~ ERROR wasm ABI is experimental and subject to change\n }\n \n // Function pointer types\n@@ -87,11 +92,12 @@ type A2 = extern \"platform-intrinsic\" fn(); //~ ERROR platform intrinsics are ex\n type A3 = extern \"vectorcall\" fn(); //~ ERROR vectorcall is experimental and subject to change\n type A4 = extern \"rust-call\" fn(_: ()); //~ ERROR rust-call ABI is subject to change\n type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is experimental\n-type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and subject to change\n+type A6 = extern \"ptx-kernel\" fn(); //~ ERROR PTX ABIs are experimental and subject to change\n type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n type A8 = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental and subject to change\n type A9 = extern \"amdgpu-kernel\" fn(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n type A10 = extern \"efiapi\" fn(); //~ ERROR efiapi ABI is experimental and subject to change\n+type A11 = extern \"wasm\" fn(); //~ ERROR wasm ABI is experimental and subject to change\n \n // Foreign modules\n extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n@@ -104,5 +110,6 @@ extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental\n extern \"thiscall\" {} //~ ERROR thiscall is experimental and subject to change\n extern \"amdgpu-kernel\" {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n extern \"efiapi\" {} //~ ERROR efiapi ABI is experimental and subject to change\n+extern \"wasm\" {} //~ ERROR wasm ABI is experimental and subject to change\n \n fn main() {}"}, {"sha": "078d21ad36f90f1a9cb6a630fb630e8f253e3eb0", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 129, "deletions": 66, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -85,16 +85,25 @@ LL | extern \"efiapi\" fn f10() {}\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:24:8\n+   |\n+LL | extern \"wasm\" fn f11() {}\n+   |        ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:27:12\n+  --> $DIR/feature-gate-abi.rs:28:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:29:12\n+  --> $DIR/feature-gate-abi.rs:30:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -103,15 +112,15 @@ LL |     extern \"platform-intrinsic\" fn m2();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:31:12\n+  --> $DIR/feature-gate-abi.rs:32:12\n    |\n LL |     extern \"vectorcall\" fn m3();\n    |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:32:12\n+  --> $DIR/feature-gate-abi.rs:33:12\n    |\n LL |     extern \"rust-call\" fn m4(_: ());\n    |            ^^^^^^^^^^^\n@@ -120,7 +129,7 @@ LL |     extern \"rust-call\" fn m4(_: ());\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:33:12\n+  --> $DIR/feature-gate-abi.rs:34:12\n    |\n LL |     extern \"msp430-interrupt\" fn m5();\n    |            ^^^^^^^^^^^^^^^^^^\n@@ -129,7 +138,7 @@ LL |     extern \"msp430-interrupt\" fn m5();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:34:12\n+  --> $DIR/feature-gate-abi.rs:35:12\n    |\n LL |     extern \"ptx-kernel\" fn m6();\n    |            ^^^^^^^^^^^^\n@@ -138,7 +147,7 @@ LL |     extern \"ptx-kernel\" fn m6();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:35:12\n+  --> $DIR/feature-gate-abi.rs:36:12\n    |\n LL |     extern \"x86-interrupt\" fn m7();\n    |            ^^^^^^^^^^^^^^^\n@@ -147,15 +156,15 @@ LL |     extern \"x86-interrupt\" fn m7();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:36:12\n+  --> $DIR/feature-gate-abi.rs:37:12\n    |\n LL |     extern \"thiscall\" fn m8();\n    |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:37:12\n+  --> $DIR/feature-gate-abi.rs:38:12\n    |\n LL |     extern \"amdgpu-kernel\" fn m9();\n    |            ^^^^^^^^^^^^^^^\n@@ -164,24 +173,33 @@ LL |     extern \"amdgpu-kernel\" fn m9();\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:38:12\n+  --> $DIR/feature-gate-abi.rs:39:12\n    |\n LL |     extern \"efiapi\" fn m10();\n    |            ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n-error[E0658]: vectorcall is experimental and subject to change\n+error[E0658]: wasm ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:40:12\n    |\n+LL |     extern \"wasm\" fn m11() {}\n+   |            ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n+error[E0658]: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:42:12\n+   |\n LL |     extern \"vectorcall\" fn dm3() {}\n    |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:41:12\n+  --> $DIR/feature-gate-abi.rs:43:12\n    |\n LL |     extern \"rust-call\" fn dm4(_: ()) {}\n    |            ^^^^^^^^^^^\n@@ -190,7 +208,7 @@ LL |     extern \"rust-call\" fn dm4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:42:12\n+  --> $DIR/feature-gate-abi.rs:44:12\n    |\n LL |     extern \"msp430-interrupt\" fn dm5() {}\n    |            ^^^^^^^^^^^^^^^^^^\n@@ -199,7 +217,7 @@ LL |     extern \"msp430-interrupt\" fn dm5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:43:12\n+  --> $DIR/feature-gate-abi.rs:45:12\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {}\n    |            ^^^^^^^^^^^^\n@@ -208,7 +226,7 @@ LL |     extern \"ptx-kernel\" fn dm6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:44:12\n+  --> $DIR/feature-gate-abi.rs:46:12\n    |\n LL |     extern \"x86-interrupt\" fn dm7() {}\n    |            ^^^^^^^^^^^^^^^\n@@ -217,15 +235,15 @@ LL |     extern \"x86-interrupt\" fn dm7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:45:12\n+  --> $DIR/feature-gate-abi.rs:47:12\n    |\n LL |     extern \"thiscall\" fn dm8() {}\n    |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:46:12\n+  --> $DIR/feature-gate-abi.rs:48:12\n    |\n LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    |            ^^^^^^^^^^^^^^^\n@@ -234,24 +252,33 @@ LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:47:12\n+  --> $DIR/feature-gate-abi.rs:49:12\n    |\n LL |     extern \"efiapi\" fn dm10() {}\n    |            ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:50:12\n+   |\n+LL |     extern \"wasm\" fn dm11() {}\n+   |            ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:54:12\n+  --> $DIR/feature-gate-abi.rs:57:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:56:12\n+  --> $DIR/feature-gate-abi.rs:59:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -260,15 +287,15 @@ LL |     extern \"platform-intrinsic\" fn m2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:58:12\n+  --> $DIR/feature-gate-abi.rs:61:12\n    |\n LL |     extern \"vectorcall\" fn m3() {}\n    |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:59:12\n+  --> $DIR/feature-gate-abi.rs:62:12\n    |\n LL |     extern \"rust-call\" fn m4(_: ()) {}\n    |            ^^^^^^^^^^^\n@@ -277,7 +304,7 @@ LL |     extern \"rust-call\" fn m4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:60:12\n+  --> $DIR/feature-gate-abi.rs:63:12\n    |\n LL |     extern \"msp430-interrupt\" fn m5() {}\n    |            ^^^^^^^^^^^^^^^^^^\n@@ -286,7 +313,7 @@ LL |     extern \"msp430-interrupt\" fn m5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:61:12\n+  --> $DIR/feature-gate-abi.rs:64:12\n    |\n LL |     extern \"ptx-kernel\" fn m6() {}\n    |            ^^^^^^^^^^^^\n@@ -295,7 +322,7 @@ LL |     extern \"ptx-kernel\" fn m6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:62:12\n+  --> $DIR/feature-gate-abi.rs:65:12\n    |\n LL |     extern \"x86-interrupt\" fn m7() {}\n    |            ^^^^^^^^^^^^^^^\n@@ -304,15 +331,15 @@ LL |     extern \"x86-interrupt\" fn m7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:63:12\n+  --> $DIR/feature-gate-abi.rs:66:12\n    |\n LL |     extern \"thiscall\" fn m8() {}\n    |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:64:12\n+  --> $DIR/feature-gate-abi.rs:67:12\n    |\n LL |     extern \"amdgpu-kernel\" fn m9() {}\n    |            ^^^^^^^^^^^^^^^\n@@ -321,24 +348,33 @@ LL |     extern \"amdgpu-kernel\" fn m9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:65:12\n+  --> $DIR/feature-gate-abi.rs:68:12\n    |\n LL |     extern \"efiapi\" fn m10() {}\n    |            ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:69:12\n+   |\n+LL |     extern \"wasm\" fn m11() {}\n+   |            ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:70:12\n+  --> $DIR/feature-gate-abi.rs:74:12\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:72:12\n+  --> $DIR/feature-gate-abi.rs:76:12\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -347,15 +383,15 @@ LL |     extern \"platform-intrinsic\" fn im2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:74:12\n+  --> $DIR/feature-gate-abi.rs:78:12\n    |\n LL |     extern \"vectorcall\" fn im3() {}\n    |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:75:12\n+  --> $DIR/feature-gate-abi.rs:79:12\n    |\n LL |     extern \"rust-call\" fn im4(_: ()) {}\n    |            ^^^^^^^^^^^\n@@ -364,7 +400,7 @@ LL |     extern \"rust-call\" fn im4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:76:12\n+  --> $DIR/feature-gate-abi.rs:80:12\n    |\n LL |     extern \"msp430-interrupt\" fn im5() {}\n    |            ^^^^^^^^^^^^^^^^^^\n@@ -373,7 +409,7 @@ LL |     extern \"msp430-interrupt\" fn im5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:77:12\n+  --> $DIR/feature-gate-abi.rs:81:12\n    |\n LL |     extern \"ptx-kernel\" fn im6() {}\n    |            ^^^^^^^^^^^^\n@@ -382,7 +418,7 @@ LL |     extern \"ptx-kernel\" fn im6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:78:12\n+  --> $DIR/feature-gate-abi.rs:82:12\n    |\n LL |     extern \"x86-interrupt\" fn im7() {}\n    |            ^^^^^^^^^^^^^^^\n@@ -391,15 +427,15 @@ LL |     extern \"x86-interrupt\" fn im7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:79:12\n+  --> $DIR/feature-gate-abi.rs:83:12\n    |\n LL |     extern \"thiscall\" fn im8() {}\n    |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:80:12\n+  --> $DIR/feature-gate-abi.rs:84:12\n    |\n LL |     extern \"amdgpu-kernel\" fn im9() {}\n    |            ^^^^^^^^^^^^^^^\n@@ -408,24 +444,33 @@ LL |     extern \"amdgpu-kernel\" fn im9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:81:12\n+  --> $DIR/feature-gate-abi.rs:85:12\n    |\n LL |     extern \"efiapi\" fn im10() {}\n    |            ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:86:12\n+   |\n+LL |     extern \"wasm\" fn im11() {}\n+   |            ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:85:18\n+  --> $DIR/feature-gate-abi.rs:90:18\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:86:18\n+  --> $DIR/feature-gate-abi.rs:91:18\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^^^^^\n@@ -434,15 +479,15 @@ LL | type A2 = extern \"platform-intrinsic\" fn();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:87:18\n+  --> $DIR/feature-gate-abi.rs:92:18\n    |\n LL | type A3 = extern \"vectorcall\" fn();\n    |                  ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:88:18\n+  --> $DIR/feature-gate-abi.rs:93:18\n    |\n LL | type A4 = extern \"rust-call\" fn(_: ());\n    |                  ^^^^^^^^^^^\n@@ -451,7 +496,7 @@ LL | type A4 = extern \"rust-call\" fn(_: ());\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:89:18\n+  --> $DIR/feature-gate-abi.rs:94:18\n    |\n LL | type A5 = extern \"msp430-interrupt\" fn();\n    |                  ^^^^^^^^^^^^^^^^^^\n@@ -460,16 +505,16 @@ LL | type A5 = extern \"msp430-interrupt\" fn();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:90:18\n+  --> $DIR/feature-gate-abi.rs:95:18\n    |\n-LL | type A6 = extern \"ptx-kernel\" fn ();\n+LL | type A6 = extern \"ptx-kernel\" fn();\n    |                  ^^^^^^^^^^^^\n    |\n    = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:91:18\n+  --> $DIR/feature-gate-abi.rs:96:18\n    |\n LL | type A7 = extern \"x86-interrupt\" fn();\n    |                  ^^^^^^^^^^^^^^^\n@@ -478,15 +523,15 @@ LL | type A7 = extern \"x86-interrupt\" fn();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:92:18\n+  --> $DIR/feature-gate-abi.rs:97:18\n    |\n LL | type A8 = extern \"thiscall\" fn();\n    |                  ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:93:18\n+  --> $DIR/feature-gate-abi.rs:98:18\n    |\n LL | type A9 = extern \"amdgpu-kernel\" fn();\n    |                  ^^^^^^^^^^^^^^^\n@@ -495,24 +540,33 @@ LL | type A9 = extern \"amdgpu-kernel\" fn();\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:94:19\n+  --> $DIR/feature-gate-abi.rs:99:19\n    |\n LL | type A10 = extern \"efiapi\" fn();\n    |                   ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:100:19\n+   |\n+LL | type A11 = extern \"wasm\" fn();\n+   |                   ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:97:8\n+  --> $DIR/feature-gate-abi.rs:103:8\n    |\n LL | extern \"rust-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:98:8\n+  --> $DIR/feature-gate-abi.rs:104:8\n    |\n LL | extern \"platform-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n@@ -521,15 +575,15 @@ LL | extern \"platform-intrinsic\" {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:99:8\n+  --> $DIR/feature-gate-abi.rs:105:8\n    |\n LL | extern \"vectorcall\" {}\n    |        ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:100:8\n+  --> $DIR/feature-gate-abi.rs:106:8\n    |\n LL | extern \"rust-call\" {}\n    |        ^^^^^^^^^^^\n@@ -538,7 +592,7 @@ LL | extern \"rust-call\" {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:101:8\n+  --> $DIR/feature-gate-abi.rs:107:8\n    |\n LL | extern \"msp430-interrupt\" {}\n    |        ^^^^^^^^^^^^^^^^^^\n@@ -547,7 +601,7 @@ LL | extern \"msp430-interrupt\" {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:102:8\n+  --> $DIR/feature-gate-abi.rs:108:8\n    |\n LL | extern \"ptx-kernel\" {}\n    |        ^^^^^^^^^^^^\n@@ -556,7 +610,7 @@ LL | extern \"ptx-kernel\" {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:103:8\n+  --> $DIR/feature-gate-abi.rs:109:8\n    |\n LL | extern \"x86-interrupt\" {}\n    |        ^^^^^^^^^^^^^^^\n@@ -565,15 +619,15 @@ LL | extern \"x86-interrupt\" {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:104:8\n+  --> $DIR/feature-gate-abi.rs:110:8\n    |\n LL | extern \"thiscall\" {}\n    |        ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:105:8\n+  --> $DIR/feature-gate-abi.rs:111:8\n    |\n LL | extern \"amdgpu-kernel\" {}\n    |        ^^^^^^^^^^^^^^^\n@@ -582,22 +636,31 @@ LL | extern \"amdgpu-kernel\" {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:106:8\n+  --> $DIR/feature-gate-abi.rs:112:8\n    |\n LL | extern \"efiapi\" {}\n    |        ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:113:8\n+   |\n+LL | extern \"wasm\" {}\n+   |        ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:27:32\n+  --> $DIR/feature-gate-abi.rs:28:32\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |                                ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:29:36\n+  --> $DIR/feature-gate-abi.rs:30:36\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |                                    ^^\n@@ -615,29 +678,29 @@ LL | extern \"platform-intrinsic\" fn f2() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:54:37\n+  --> $DIR/feature-gate-abi.rs:57:37\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:56:41\n+  --> $DIR/feature-gate-abi.rs:59:41\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |                                         ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:70:38\n+  --> $DIR/feature-gate-abi.rs:74:38\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |                                      ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:72:42\n+  --> $DIR/feature-gate-abi.rs:76:42\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |                                          ^^\n \n-error: aborting due to 76 previous errors\n+error: aborting due to 83 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "8c8de0763658e21274262f7ab3660ea08fadd309", "filename": "src/test/ui/feature-gates/feature-gate-wasm_abi.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.rs?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -0,0 +1,7 @@\n+extern \"wasm\" fn foo() {\n+    //~^ ERROR: wasm ABI is experimental and subject to change\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "c4113fd6af979c138ede020105e50d779a6e98f5", "filename": "src/test/ui/feature-gates/feature-gate-wasm_abi.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.stderr?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-wasm_abi.rs:1:8\n+   |\n+LL | extern \"wasm\" fn foo() {\n+   |        ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "5a29ce2221fc2c218b77664d36450fbf03e4201b", "filename": "src/test/ui/parser/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/125505306744a0a5bb01d62337260a95d9ff8d57/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr?ref=125505306744a0a5bb01d62337260a95d9ff8d57", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, C-unwind, cdecl, stdcall, stdcall-unwind, fastcall, vectorcall, thiscall, thiscall-unwind, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, C-unwind, cdecl, stdcall, stdcall-unwind, fastcall, vectorcall, thiscall, thiscall-unwind, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}]}