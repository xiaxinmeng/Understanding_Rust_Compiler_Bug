{"sha": "8912d659cdc9e1fd787136fe1b52a285f2fc2106", "node_id": "C_kwDOAAsO6NoAKDg5MTJkNjU5Y2RjOWUxZmQ3ODcxMzZmZTFiNTJhMjg1ZjJmYzIxMDY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-17T19:16:21Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-17T19:16:21Z"}, "message": "Remove hack testing for `cfg` attribute in `match_single_binding`", "tree": {"sha": "cfe0936d66c05628a4f49ea1fcc6400f634cd049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe0936d66c05628a4f49ea1fcc6400f634cd049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8912d659cdc9e1fd787136fe1b52a285f2fc2106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8912d659cdc9e1fd787136fe1b52a285f2fc2106", "html_url": "https://github.com/rust-lang/rust/commit/8912d659cdc9e1fd787136fe1b52a285f2fc2106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8912d659cdc9e1fd787136fe1b52a285f2fc2106/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce2d46cacc8b91f1d252d52cb38f397ee990435", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce2d46cacc8b91f1d252d52cb38f397ee990435", "html_url": "https://github.com/rust-lang/rust/commit/8ce2d46cacc8b91f1d252d52cb38f397ee990435"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "39fe54648fbc754c37f5fba926d8ba9d45a54f45", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8912d659cdc9e1fd787136fe1b52a285f2fc2106/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8912d659cdc9e1fd787136fe1b52a285f2fc2106/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=8912d659cdc9e1fd787136fe1b52a285f2fc2106", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::{indent_of, snippet_block, snippet_opt, snippet_with_applicability};\n+use clippy_utils::source::{indent_of, snippet_block, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::{get_parent_expr, is_refutable, peel_blocks};\n use rustc_errors::Applicability;\n@@ -14,23 +14,6 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n         return;\n     }\n \n-    // HACK:\n-    // This is a hack to deal with arms that are excluded by macros like `#[cfg]`. It is only used here\n-    // to prevent false positives as there is currently no better way to detect if code was excluded by\n-    // a macro. See PR #6435\n-    if_chain! {\n-        if let Some(match_snippet) = snippet_opt(cx, expr.span);\n-        if let Some(arm_snippet) = snippet_opt(cx, arms[0].span);\n-        if let Some(ex_snippet) = snippet_opt(cx, ex.span);\n-        let rest_snippet = match_snippet.replace(&arm_snippet, \"\").replace(&ex_snippet, \"\");\n-        if rest_snippet.contains(\"=>\");\n-        then {\n-            // The code it self contains another thick arrow \"=>\"\n-            // -> Either another arm or a comment\n-            return;\n-        }\n-    }\n-\n     let matched_vars = ex.span;\n     let bind_names = arms[0].pat.span;\n     let match_body = peel_blocks(arms[0].body);"}, {"sha": "b8dc8179f7d7d1c841a5df8475ebed31a52f0014", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8912d659cdc9e1fd787136fe1b52a285f2fc2106/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8912d659cdc9e1fd787136fe1b52a285f2fc2106/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=8912d659cdc9e1fd787136fe1b52a285f2fc2106", "patch": "@@ -106,10 +106,8 @@ fn main() {\n         0 => println!(\"Array index start\"),\n         _ => println!(\"Not an array index start\"),\n     }\n-    // False negative\n+\n+    // Lint\n     let x = 1;\n-    match x {\n-        // =>\n-        _ => println!(\"Not an array index start\"),\n-    }\n+    println!(\"Not an array index start\");\n }"}, {"sha": "fe63dcd63f2bb97d5fcd69f62f3b4d74f5a0c037", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8912d659cdc9e1fd787136fe1b52a285f2fc2106/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8912d659cdc9e1fd787136fe1b52a285f2fc2106/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=8912d659cdc9e1fd787136fe1b52a285f2fc2106", "patch": "@@ -118,7 +118,8 @@ fn main() {\n         0 => println!(\"Array index start\"),\n         _ => println!(\"Not an array index start\"),\n     }\n-    // False negative\n+\n+    // Lint\n     let x = 1;\n     match x {\n         // =>"}, {"sha": "d939291f53c40758821783da7bdbc38255ff8542", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8912d659cdc9e1fd787136fe1b52a285f2fc2106/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8912d659cdc9e1fd787136fe1b52a285f2fc2106/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=8912d659cdc9e1fd787136fe1b52a285f2fc2106", "patch": "@@ -167,5 +167,14 @@ LL +             unwrapped\n LL ~         })\n    |\n \n-error: aborting due to 11 previous errors\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:124:5\n+   |\n+LL | /     match x {\n+LL | |         // =>\n+LL | |         _ => println!(\"Not an array index start\"),\n+LL | |     }\n+   | |_____^ help: consider using the match body instead: `println!(\"Not an array index start\");`\n+\n+error: aborting due to 12 previous errors\n "}]}