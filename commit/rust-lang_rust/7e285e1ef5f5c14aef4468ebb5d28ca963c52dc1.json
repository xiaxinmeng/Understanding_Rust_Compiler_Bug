{"sha": "7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "node_id": "C_kwDOAAsO6NoAKDdlMjg1ZTFlZjVmNWMxNGFlZjQ0NjhlYmI1ZDI4Y2E5NjNjNTJkYzE", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T13:06:15Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T13:06:15Z"}, "message": "Run cargo fmt", "tree": {"sha": "a01ea7517220ab2af572425090e2ca285c9ee4f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a01ea7517220ab2af572425090e2ca285c9ee4f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "html_url": "https://github.com/rust-lang/rust/commit/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8318035726c9e2fc2bcb6055855969cb97512b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/8318035726c9e2fc2bcb6055855969cb97512b69", "html_url": "https://github.com/rust-lang/rust/commit/8318035726c9e2fc2bcb6055855969cb97512b69"}], "stats": {"total": 235, "additions": 190, "deletions": 45}, "files": [{"sha": "2f13a9fbf0e401790d4556e5c1bc80e56b19b5b0", "filename": "crates/hir-def/src/path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fhir-def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fhir-def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -188,7 +188,10 @@ impl<'a> PathSegments<'a> {\n }\n \n impl GenericArgs {\n-    pub(crate) fn from_ast(lower_ctx: &LowerCtx<'_>, node: ast::GenericArgList) -> Option<GenericArgs> {\n+    pub(crate) fn from_ast(\n+        lower_ctx: &LowerCtx<'_>,\n+        node: ast::GenericArgList,\n+    ) -> Option<GenericArgs> {\n         lower::lower_generic_args(lower_ctx, node)\n     }\n "}, {"sha": "b6f226dbfd20d238ff19338a20d07eab5a3b7008", "filename": "crates/hir-ty/src/autoderef.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -70,7 +70,10 @@ impl Iterator for Autoderef<'_, '_> {\n     }\n }\n \n-pub(crate) fn autoderef_step(table: &mut InferenceTable<'_>, ty: Ty) -> Option<(AutoderefKind, Ty)> {\n+pub(crate) fn autoderef_step(\n+    table: &mut InferenceTable<'_>,\n+    ty: Ty,\n+) -> Option<(AutoderefKind, Ty)> {\n     if let Some(derefed) = builtin_deref(&ty) {\n         Some((AutoderefKind::Builtin, table.resolve_ty_shallow(derefed)))\n     } else {"}, {"sha": "d2f9c2b8b1e1dae302ce60ec0d0b493cab9b0829", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -952,7 +952,11 @@ fn write_bounds_like_dyn_trait(\n     Ok(())\n }\n \n-fn fmt_trait_ref(tr: &TraitRef, f: &mut HirFormatter<'_>, use_as: bool) -> Result<(), HirDisplayError> {\n+fn fmt_trait_ref(\n+    tr: &TraitRef,\n+    f: &mut HirFormatter<'_>,\n+    use_as: bool,\n+) -> Result<(), HirDisplayError> {\n     if f.should_truncate() {\n         return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n     }"}, {"sha": "46eeea0e6fc4e8863e8128ae1291abeeff118d41", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -140,7 +140,12 @@ trait PatLike: Into<ExprOrPatId> + Copy {\n impl PatLike for ExprId {\n     type BindingMode = ();\n \n-    fn infer(this: &mut InferenceContext<'_>, id: Self, expected_ty: &Ty, _: Self::BindingMode) -> Ty {\n+    fn infer(\n+        this: &mut InferenceContext<'_>,\n+        id: Self,\n+        expected_ty: &Ty,\n+        _: Self::BindingMode,\n+    ) -> Ty {\n         this.infer_assignee_expr(id, expected_ty)\n     }\n }"}, {"sha": "0e29c52ade68347df124bc579b20d27c3a0ea243", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -289,7 +289,10 @@ impl HirDisplay for ConstParam {\n     }\n }\n \n-fn write_generic_params(def: GenericDefId, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n+fn write_generic_params(\n+    def: GenericDefId,\n+    f: &mut HirFormatter<'_>,\n+) -> Result<(), HirDisplayError> {\n     let params = f.db.generic_params(def);\n     if params.lifetimes.is_empty()\n         && params.type_or_consts.iter().all(|x| x.1.const_param().is_none())\n@@ -381,8 +384,9 @@ fn write_where_clause(def: GenericDefId, f: &mut HirFormatter<'_>) -> Result<(),\n         let prev_pred =\n             if pred_idx == 0 { None } else { Some(&params.where_predicates[pred_idx - 1]) };\n \n-        let new_predicate =\n-            |f: &mut HirFormatter<'_>| f.write_str(if pred_idx == 0 { \"\\n    \" } else { \",\\n    \" });\n+        let new_predicate = |f: &mut HirFormatter<'_>| {\n+            f.write_str(if pred_idx == 0 { \"\\n    \" } else { \",\\n    \" })\n+        };\n \n         match pred {\n             WherePredicate::TypeBound { target, .. } if is_unnamed_type_target(target) => {}"}, {"sha": "7f2a26ad06741fa6246fe240e2ee4d0d8537fdc9", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -85,7 +85,10 @@ pub(crate) fn add_missing_impl_members(acc: &mut Assists, ctx: &AssistContext<'_\n //     $0fn bar(&self) {}\n // }\n // ```\n-pub(crate) fn add_missing_default_members(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn add_missing_default_members(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n     add_missing_impl_members_inner(\n         acc,\n         ctx,"}, {"sha": "949cf3167a8a1d94e4c177bf49958a73beda21ea", "filename": "crates/ide-assists/src/handlers/auto_import.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -142,7 +142,9 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<\n     Some(())\n }\n \n-pub(super) fn find_importable_node(ctx: &AssistContext<'_>) -> Option<(ImportAssets, SyntaxElement)> {\n+pub(super) fn find_importable_node(\n+    ctx: &AssistContext<'_>,\n+) -> Option<(ImportAssets, SyntaxElement)> {\n     if let Some(path_under_caret) = ctx.find_node_at_offset_with_descend::<ast::Path>() {\n         ImportAssets::for_exact_path(&path_under_caret, &ctx.sema)\n             .zip(Some(path_under_caret.syntax().clone().into()))"}, {"sha": "2cf370c090743da3730e37a47fa9785496c6343e", "filename": "crates/ide-assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -32,7 +32,10 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //     }\n // }\n // ```\n-pub(crate) fn convert_iter_for_each_to_for(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn convert_iter_for_each_to_for(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n     let method = ctx.find_node_at_offset::<ast::MethodCallExpr>()?;\n \n     let closure = match method.arg_list()?.args().next()? {\n@@ -91,7 +94,10 @@ pub(crate) fn convert_iter_for_each_to_for(acc: &mut Assists, ctx: &AssistContex\n //     });\n // }\n // ```\n-pub(crate) fn convert_for_loop_with_for_each(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn convert_for_loop_with_for_each(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n     let for_loop = ctx.find_node_at_offset::<ast::ForExpr>()?;\n     let iterable = for_loop.iterable()?;\n     let pat = for_loop.pat()?;"}, {"sha": "52a55ead3af9629e518dd1ffb621af3738a1b7ec", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -1042,7 +1042,11 @@ fn generic_parents(parent: &SyntaxNode) -> Vec<GenericParent> {\n }\n \n /// checks if relevant var is used with `&mut` access inside body\n-fn has_exclusive_usages(ctx: &AssistContext<'_>, usages: &LocalUsages, body: &FunctionBody) -> bool {\n+fn has_exclusive_usages(\n+    ctx: &AssistContext<'_>,\n+    usages: &LocalUsages,\n+    body: &FunctionBody,\n+) -> bool {\n     usages\n         .iter()\n         .filter(|reference| body.contains_range(reference.range))"}, {"sha": "b19aa0f652aa71acbc5ee9e213ec6520fe241432", "filename": "crates/ide-assists/src/handlers/generate_enum_projection_method.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -36,7 +36,10 @@ use crate::{\n //     }\n // }\n // ```\n-pub(crate) fn generate_enum_try_into_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn generate_enum_try_into_method(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n     generate_enum_projection_method(\n         acc,\n         ctx,"}, {"sha": "507ea012babfc431fcd184f8eff266d9ca580fe2", "filename": "crates/ide-assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -20,7 +20,10 @@ use crate::{utils::generate_trait_impl_text, AssistContext, AssistId, AssistKind\n //     }\n // }\n // ```\n-pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn generate_from_impl_for_enum(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n     let enum_ = ast::Adt::Enum(variant.parent_enum());"}, {"sha": "176a3bf5803fcdddd52d2baa1f17ba78bbe95066", "filename": "crates/ide-assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -20,7 +20,10 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //     f(x)\n // }\n // ```\n-pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn move_bounds_to_where_clause(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n     let type_param_list = ctx.find_node_at_offset::<ast::GenericParamList>()?;\n \n     let mut type_params = type_param_list.type_or_const_params();"}, {"sha": "b8f1b36deb93cbbbed959f05c8fe1dc047ab5926", "filename": "crates/ide-assists/src/handlers/move_guard.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -91,7 +91,10 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext<'_>)\n //     }\n // }\n // ```\n-pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn move_arm_cond_to_match_guard(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n     let match_arm: MatchArm = ctx.find_node_at_offset::<MatchArm>()?;\n     let match_pat = match_arm.pat()?;\n     let arm_body = match_arm.expr()?;"}, {"sha": "a899c7a6457e0f798280aa6962d59c3d8af236bc", "filename": "crates/ide-assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -86,7 +86,10 @@ fn replace<T: AstNode + PartialEq>(\n     });\n }\n \n-fn compute_fields_ranks(path: &ast::Path, ctx: &AssistContext<'_>) -> Option<FxHashMap<String, usize>> {\n+fn compute_fields_ranks(\n+    path: &ast::Path,\n+    ctx: &AssistContext<'_>,\n+) -> Option<FxHashMap<String, usize>> {\n     let strukt = match ctx.sema.resolve_path(path) {\n         Some(hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Struct(it)))) => it,\n         _ => return None,"}, {"sha": "208c3e109ddeccb69242b83a171ef568503d37d9", "filename": "crates/ide-assists/src/handlers/reorder_impl_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl_items.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -93,7 +93,10 @@ pub(crate) fn reorder_impl_items(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n     )\n }\n \n-fn compute_item_ranks(path: &ast::Path, ctx: &AssistContext<'_>) -> Option<FxHashMap<String, usize>> {\n+fn compute_item_ranks(\n+    path: &ast::Path,\n+    ctx: &AssistContext<'_>,\n+) -> Option<FxHashMap<String, usize>> {\n     let td = trait_definition(path, &ctx.sema)?;\n \n     Some("}, {"sha": "38fccb33829a3aa7cf379b4fe6f5734e9f631114", "filename": "crates/ide-assists/src/handlers/replace_try_expr_with_match.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_try_expr_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_try_expr_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_try_expr_with_match.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -34,7 +34,10 @@ use crate::assist_context::{AssistContext, Assists};\n //     };\n // }\n // ```\n-pub(crate) fn replace_try_expr_with_match(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn replace_try_expr_with_match(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n     let qm_kw = ctx.find_token_syntax_at_offset(T![?])?;\n     let qm_kw_parent = qm_kw.parent().and_then(ast::TryExpr::cast)?;\n "}, {"sha": "149afcac9d4786e5bc38bf93b4cfdefb72c04021", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -144,7 +144,12 @@ impl Completions {\n         item.add_to(self);\n     }\n \n-    pub(crate) fn add_keyword_snippet(&mut self, ctx: &CompletionContext<'_>, kw: &str, snippet: &str) {\n+    pub(crate) fn add_keyword_snippet(\n+        &mut self,\n+        ctx: &CompletionContext<'_>,\n+        kw: &str,\n+        snippet: &str,\n+    ) {\n         let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n \n         match ctx.config.snippet_cap {\n@@ -348,7 +353,11 @@ impl Completions {\n         ));\n     }\n \n-    pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext<'_>, type_alias: hir::TypeAlias) {\n+    pub(crate) fn add_type_alias(\n+        &mut self,\n+        ctx: &CompletionContext<'_>,\n+        type_alias: hir::TypeAlias,\n+    ) {\n         let is_private_editable = match ctx.is_visible(&type_alias) {\n             Visible::Yes => false,\n             Visible::Editable => true,\n@@ -661,7 +670,11 @@ pub(super) fn complete_name_ref(\n     }\n }\n \n-fn complete_patterns(acc: &mut Completions, ctx: &CompletionContext<'_>, pattern_ctx: &PatternContext) {\n+fn complete_patterns(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext<'_>,\n+    pattern_ctx: &PatternContext,\n+) {\n     flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n     fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n     pattern::complete_pattern(acc, ctx, pattern_ctx);"}, {"sha": "a29417133e68b0c4db81fccd93a219cb96634df6", "filename": "crates/ide-completion/src/completions/attribute/repr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -5,7 +5,11 @@ use syntax::ast;\n \n use crate::{context::CompletionContext, item::CompletionItem, Completions};\n \n-pub(super) fn complete_repr(acc: &mut Completions, ctx: &CompletionContext<'_>, input: ast::TokenTree) {\n+pub(super) fn complete_repr(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext<'_>,\n+    input: ast::TokenTree,\n+) {\n     if let Some(existing_reprs) = super::parse_comma_sep_expr(input) {\n         for &ReprCompletion { label, snippet, lookup, collides } in REPR_COMPLETIONS {\n             let repr_already_annotated = existing_reprs"}, {"sha": "cf40ca489c009733174cb30083f1c3645aabbb72", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -8,7 +8,11 @@ use crate::{\n };\n \n /// Complete dot accesses, i.e. fields or methods.\n-pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext<'_>, dot_access: &DotAccess) {\n+pub(crate) fn complete_dot(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext<'_>,\n+    dot_access: &DotAccess,\n+) {\n     let receiver_ty = match dot_access {\n         DotAccess { receiver_ty: Some(receiver_ty), .. } => &receiver_ty.original,\n         _ => return,"}, {"sha": "870df63b7bf2a03a2d24b88573f35c96b8b11b8b", "filename": "crates/ide-completion/src/completions/field.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -30,7 +30,10 @@ pub(crate) fn complete_field_list_tuple_variant(\n     }\n }\n \n-pub(crate) fn complete_field_list_record_variant(acc: &mut Completions, ctx: &CompletionContext<'_>) {\n+pub(crate) fn complete_field_list_record_variant(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext<'_>,\n+) {\n     if ctx.qualifier_ctx.vis_node.is_none() {\n         let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n         add_keyword(\"pub(crate)\", \"pub(crate)\");"}, {"sha": "3f25b294e01802d99628dccc68dc2999fff7f8db", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -158,7 +158,10 @@ pub(crate) fn render_tuple_field(\n     item.build()\n }\n \n-pub(crate) fn render_type_inference(ty_string: String, ctx: &CompletionContext<'_>) -> CompletionItem {\n+pub(crate) fn render_type_inference(\n+    ty_string: String,\n+    ctx: &CompletionContext<'_>,\n+) -> CompletionItem {\n     let mut builder =\n         CompletionItem::new(CompletionItemKind::InferredType, ctx.source_range(), ty_string);\n     builder.set_relevance(CompletionRelevance { is_definite: true, ..Default::default() });"}, {"sha": "692a3157203086df6124551781f137183c9a9485", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -130,7 +130,10 @@ pub enum IdentClass {\n }\n \n impl IdentClass {\n-    pub fn classify_node(sema: &Semantics<'_, RootDatabase>, node: &SyntaxNode) -> Option<IdentClass> {\n+    pub fn classify_node(\n+        sema: &Semantics<'_, RootDatabase>,\n+        node: &SyntaxNode,\n+    ) -> Option<IdentClass> {\n         match_ast! {\n             match node {\n                 ast::Name(name) => NameClass::classify(sema, &name).map(IdentClass::NameClass),\n@@ -238,7 +241,10 @@ impl NameClass {\n         };\n         return Some(NameClass::Definition(definition));\n \n-        fn classify_item(sema: &Semantics<'_, RootDatabase>, item: ast::Item) -> Option<Definition> {\n+        fn classify_item(\n+            sema: &Semantics<'_, RootDatabase>,\n+            item: ast::Item,\n+        ) -> Option<Definition> {\n             let definition = match item {\n                 ast::Item::MacroRules(it) => {\n                     Definition::Macro(sema.to_def(&ast::Macro::MacroRules(it))?)"}, {"sha": "26ef86155e5343b750a3d993f8a004c8aa0abecb", "filename": "crates/ide-db/src/imports/import_assets.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -218,7 +218,10 @@ impl ImportAssets {\n     }\n \n     /// This may return non-absolute paths if a part of the returned path is already imported into scope.\n-    pub fn search_for_relative_paths(&self, sema: &Semantics<'_, RootDatabase>) -> Vec<LocatedImport> {\n+    pub fn search_for_relative_paths(\n+        &self,\n+        sema: &Semantics<'_, RootDatabase>,\n+    ) -> Vec<LocatedImport> {\n         let _p = profile::span(\"import_assets::search_for_relative_paths\");\n         self.search_for(sema, None)\n     }"}, {"sha": "bb466e43e752134c5030c7fffcb2685f9a5ff8b2", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -66,7 +66,11 @@ macro_rules! _bail {\n pub use _bail as bail;\n \n impl Definition {\n-    pub fn rename(&self, sema: &Semantics<'_, RootDatabase>, new_name: &str) -> Result<SourceChange> {\n+    pub fn rename(\n+        &self,\n+        sema: &Semantics<'_, RootDatabase>,\n+        new_name: &str,\n+    ) -> Result<SourceChange> {\n         match *self {\n             Definition::Module(module) => rename_mod(sema, module, new_name),\n             Definition::BuiltinType(_) => {"}, {"sha": "c626932f196ba7dbd60101fa3c70a55d4b68b819", "filename": "crates/ide-diagnostics/src/handlers/unlinked_file.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -18,7 +18,11 @@ use crate::{fix, Assist, Diagnostic, DiagnosticsContext, Severity};\n //\n // This diagnostic is shown for files that are not included in any crate, or files that are part of\n // crates rust-analyzer failed to discover. The file will not have IDE features available.\n-pub(crate) fn unlinked_file(ctx: &DiagnosticsContext<'_>, acc: &mut Vec<Diagnostic>, file_id: FileId) {\n+pub(crate) fn unlinked_file(\n+    ctx: &DiagnosticsContext<'_>,\n+    acc: &mut Vec<Diagnostic>,\n+    file_id: FileId,\n+) {\n     // Limit diagnostic to the first few characters in the file. This matches how VS Code\n     // renders it with the full span, but on other editors, and is less invasive.\n     let range = ctx.sema.db.parse(file_id).syntax_node().text_range();"}, {"sha": "5b6e016251b40b80709b36743ef34039c3e2678c", "filename": "crates/ide-ssr/src/from_comment.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-ssr%2Fsrc%2Ffrom_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-ssr%2Fsrc%2Ffrom_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2Fsrc%2Ffrom_comment.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -15,7 +15,10 @@ use crate::MatchFinder;\n /// Attempts to build an SSR MatchFinder from a comment at the given file\n /// range. If successful, returns the MatchFinder and a TextRange covering\n /// comment.\n-pub fn ssr_from_comment(db: &RootDatabase, frange: FileRange) -> Option<(MatchFinder<'_>, TextRange)> {\n+pub fn ssr_from_comment(\n+    db: &RootDatabase,\n+    frange: FileRange,\n+) -> Option<(MatchFinder<'_>, TextRange)> {\n     let comment = {\n         let file = db.parse(frange.file_id);\n         file.tree().syntax().token_at_offset(frange.range.start()).find_map(ast::Comment::cast)"}, {"sha": "afaaafd1fb49101d5d0dae4e8ab1a7d4c4623f45", "filename": "crates/ide-ssr/src/nester.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-ssr%2Fsrc%2Fnester.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide-ssr%2Fsrc%2Fnester.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2Fsrc%2Fnester.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -54,7 +54,11 @@ impl MatchCollector {\n }\n \n /// Attempts to add `m` as a sub-match of `existing`.\n-fn try_add_sub_match(m: Match, existing: &mut Match, sema: &hir::Semantics<'_, ide_db::RootDatabase>) {\n+fn try_add_sub_match(\n+    m: Match,\n+    existing: &mut Match,\n+    sema: &hir::Semantics<'_, ide_db::RootDatabase>,\n+) {\n     for p in existing.placeholder_values.values_mut() {\n         // Note, no need to check if p.range.file is equal to m.range.file, since we\n         // already know we're within `existing`."}, {"sha": "efa8551a00d5a858200e71cebac860176a761a8e", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -107,7 +107,10 @@ fn expand_macro_recur(\n     expand(sema, expanded, ast::MacroCall::cast, expand_macro_recur)\n }\n \n-fn expand_attr_macro_recur(sema: &Semantics<'_, RootDatabase>, item: &ast::Item) -> Option<SyntaxNode> {\n+fn expand_attr_macro_recur(\n+    sema: &Semantics<'_, RootDatabase>,\n+    item: &ast::Item,\n+) -> Option<SyntaxNode> {\n     let expanded = sema.expand_attr_macro(item)?.clone_for_update();\n     expand(sema, expanded, ast::Item::cast, expand_attr_macro_recur)\n }"}, {"sha": "04b51c839407b67a376e16efad230cf268f99448", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -90,7 +90,10 @@ fn impls_for_ty(sema: &Semantics<'_, RootDatabase>, ty: hir::Type) -> Vec<Naviga\n     Impl::all_for_type(sema.db, ty).into_iter().filter_map(|imp| imp.try_to_nav(sema.db)).collect()\n }\n \n-fn impls_for_trait(sema: &Semantics<'_, RootDatabase>, trait_: hir::Trait) -> Vec<NavigationTarget> {\n+fn impls_for_trait(\n+    sema: &Semantics<'_, RootDatabase>,\n+    trait_: hir::Trait,\n+) -> Vec<NavigationTarget> {\n     Impl::all_for_trait(sema.db, trait_)\n         .into_iter()\n         .filter_map(|imp| imp.try_to_nav(sema.db))"}, {"sha": "fe44856dcad2a9a0f8abc49d6ca980cbea49df78", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -201,7 +201,10 @@ fn find_definitions(\n     }\n }\n \n-fn rename_to_self(sema: &Semantics<'_, RootDatabase>, local: hir::Local) -> RenameResult<SourceChange> {\n+fn rename_to_self(\n+    sema: &Semantics<'_, RootDatabase>,\n+    local: hir::Local,\n+) -> RenameResult<SourceChange> {\n     if never!(local.is_self(sema.db)) {\n         bail!(\"rename_to_self invoked on self\");\n     }"}, {"sha": "bec770ed99f1661b71c8a9ce4f7b24a1dd1218fc", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -304,7 +304,10 @@ fn parent_test_module(sema: &Semantics<'_, RootDatabase>, fn_def: &ast::Fn) -> O\n     })\n }\n \n-pub(crate) fn runnable_fn(sema: &Semantics<'_, RootDatabase>, def: hir::Function) -> Option<Runnable> {\n+pub(crate) fn runnable_fn(\n+    sema: &Semantics<'_, RootDatabase>,\n+    def: hir::Function,\n+) -> Option<Runnable> {\n     let func = def.source(sema.db)?;\n     let name = def.name(sema.db).to_smol_str();\n \n@@ -340,7 +343,10 @@ pub(crate) fn runnable_fn(sema: &Semantics<'_, RootDatabase>, def: hir::Function\n     Some(Runnable { use_name_in_title: false, nav, kind, cfg })\n }\n \n-pub(crate) fn runnable_mod(sema: &Semantics<'_, RootDatabase>, def: hir::Module) -> Option<Runnable> {\n+pub(crate) fn runnable_mod(\n+    sema: &Semantics<'_, RootDatabase>,\n+    def: hir::Module,\n+) -> Option<Runnable> {\n     if !has_test_function_or_multiple_test_submodules(sema, &def) {\n         return None;\n     }\n@@ -353,7 +359,10 @@ pub(crate) fn runnable_mod(sema: &Semantics<'_, RootDatabase>, def: hir::Module)\n     Some(Runnable { use_name_in_title: false, nav, kind: RunnableKind::TestMod { path }, cfg })\n }\n \n-pub(crate) fn runnable_impl(sema: &Semantics<'_, RootDatabase>, def: &hir::Impl) -> Option<Runnable> {\n+pub(crate) fn runnable_impl(\n+    sema: &Semantics<'_, RootDatabase>,\n+    def: &hir::Impl,\n+) -> Option<Runnable> {\n     let attrs = def.attrs(sema.db);\n     if !has_runnable_doc_test(&attrs) {\n         return None;"}, {"sha": "fd3723ed454859719e8a9726019e5cd7e01d90ba", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -79,7 +79,11 @@ pub(super) fn name_like(\n     Some((highlight, binding_hash))\n }\n \n-fn punctuation(sema: &Semantics<'_, RootDatabase>, token: SyntaxToken, kind: SyntaxKind) -> Highlight {\n+fn punctuation(\n+    sema: &Semantics<'_, RootDatabase>,\n+    token: SyntaxToken,\n+    kind: SyntaxKind,\n+) -> Highlight {\n     let parent = token.parent();\n     let parent_kind = parent.as_ref().map_or(EOF, SyntaxNode::kind);\n     match (kind, parent_kind) {\n@@ -321,7 +325,11 @@ fn calc_binding_hash(name: &hir::Name, shadow_count: u32) -> u64 {\n     hash((name, shadow_count))\n }\n \n-fn highlight_def(sema: &Semantics<'_, RootDatabase>, krate: hir::Crate, def: Definition) -> Highlight {\n+fn highlight_def(\n+    sema: &Semantics<'_, RootDatabase>,\n+    krate: hir::Crate,\n+    def: Definition,\n+) -> Highlight {\n     let db = sema.db;\n     let mut h = match def {\n         Definition::Macro(m) => Highlight::new(HlTag::Symbol(m.kind(sema.db).into())),"}, {"sha": "e7402104eb83f7e8c0a358869072b64930893d73", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -19,7 +19,10 @@ pub(super) fn expr(p: &mut Parser<'_>) -> bool {\n     expr_bp(p, None, r, 1).is_some()\n }\n \n-pub(super) fn expr_stmt(p: &mut Parser<'_>, m: Option<Marker>) -> Option<(CompletedMarker, BlockLike)> {\n+pub(super) fn expr_stmt(\n+    p: &mut Parser<'_>,\n+    m: Option<Marker>,\n+) -> Option<(CompletedMarker, BlockLike)> {\n     let r = Restrictions { forbid_structs: false, prefer_stmt: true };\n     expr_bp(p, m, r, 1)\n }"}, {"sha": "99f42a2662348466bab1216267dc161299e9a8d0", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -60,7 +60,10 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n \n const EXPR_RECOVERY_SET: TokenSet = TokenSet::new(&[T![let]]);\n \n-pub(super) fn atom_expr(p: &mut Parser<'_>, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n+pub(super) fn atom_expr(\n+    p: &mut Parser<'_>,\n+    r: Restrictions,\n+) -> Option<(CompletedMarker, BlockLike)> {\n     if let Some(m) = literal(p) {\n         return Some((m, BlockLike::NotBlock));\n     }"}, {"sha": "f9efcef92a610129911e6381401b7d66ce4919a8", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=7e285e1ef5f5c14aef4468ebb5d28ca963c52dc1", "patch": "@@ -27,7 +27,10 @@ pub(super) fn expr_path(p: &mut Parser<'_>) {\n     path(p, Mode::Expr);\n }\n \n-pub(crate) fn type_path_for_qualifier(p: &mut Parser<'_>, qual: CompletedMarker) -> CompletedMarker {\n+pub(crate) fn type_path_for_qualifier(\n+    p: &mut Parser<'_>,\n+    qual: CompletedMarker,\n+) -> CompletedMarker {\n     path_for_qualifier(p, Mode::Type, qual)\n }\n \n@@ -45,7 +48,11 @@ fn path(p: &mut Parser<'_>, mode: Mode) {\n     path_for_qualifier(p, mode, qual);\n }\n \n-fn path_for_qualifier(p: &mut Parser<'_>, mode: Mode, mut qual: CompletedMarker) -> CompletedMarker {\n+fn path_for_qualifier(\n+    p: &mut Parser<'_>,\n+    mode: Mode,\n+    mut qual: CompletedMarker,\n+) -> CompletedMarker {\n     loop {\n         let use_tree = matches!(p.nth(2), T![*] | T!['{']);\n         if p.at(T![::]) && !use_tree {"}]}