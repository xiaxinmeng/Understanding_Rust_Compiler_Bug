{"sha": "14481f72102ba2abb5f314d5537fee90352981c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NDgxZjcyMTAyYmEyYWJiNWYzMTRkNTUzN2ZlZTkwMzUyOTgxYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-12T19:58:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-12T19:58:10Z"}, "message": "Auto merge of #41008 - sagebind:thread_id, r=alexcrichton\n\nDerive Hash for ThreadId + better example\n\nDerive `Hash` for `ThreadId` (see comments in #21507). Useful for making maps based on thread, e.g. `HashMap<ThreadId, ?>`. Also update example code for thread IDs to be more useful.", "tree": {"sha": "e0fc0e422b9fe5ede3464f83c86e3db541aebac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0fc0e422b9fe5ede3464f83c86e3db541aebac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14481f72102ba2abb5f314d5537fee90352981c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14481f72102ba2abb5f314d5537fee90352981c5", "html_url": "https://github.com/rust-lang/rust/commit/14481f72102ba2abb5f314d5537fee90352981c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14481f72102ba2abb5f314d5537fee90352981c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "910c4816fdee01a1299d11a5e85ebb4aceee6d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/910c4816fdee01a1299d11a5e85ebb4aceee6d1a", "html_url": "https://github.com/rust-lang/rust/commit/910c4816fdee01a1299d11a5e85ebb4aceee6d1a"}, {"sha": "cd14a323f42cf57695e713a4f4fd00fddc10efd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd14a323f42cf57695e713a4f4fd00fddc10efd5", "html_url": "https://github.com/rust-lang/rust/commit/cd14a323f42cf57695e713a4f4fd00fddc10efd5"}], "stats": {"total": 37, "additions": 13, "deletions": 24}, "files": [{"sha": "e37cc7e963e10bc5eae668929a4fe8db4747e851", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/14481f72102ba2abb5f314d5537fee90352981c5/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14481f72102ba2abb5f314d5537fee90352981c5/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=14481f72102ba2abb5f314d5537fee90352981c5", "patch": "@@ -652,8 +652,8 @@ pub fn park_timeout(dur: Duration) {\n /// A unique identifier for a running thread.\n ///\n /// A `ThreadId` is an opaque object that has a unique value for each thread\n-/// that creates one. `ThreadId`s do not correspond to a thread's system-\n-/// designated identifier.\n+/// that creates one. `ThreadId`s are not guaranteed to correspond to a thread's\n+/// system-designated identifier.\n ///\n /// # Examples\n ///\n@@ -662,17 +662,15 @@ pub fn park_timeout(dur: Duration) {\n ///\n /// use std::thread;\n ///\n-/// let handler = thread::Builder::new()\n-///     .spawn(|| {\n-///         let thread = thread::current();\n-///         let thread_id = thread.id();\n-///     })\n-///     .unwrap();\n+/// let other_thread = thread::spawn(|| {\n+///     thread::current().id()\n+/// });\n ///\n-/// handler.join().unwrap();\n+/// let other_thread_id = other_thread.join().unwrap();\n+/// assert!(thread::current().id() != other_thread_id);\n /// ```\n #[unstable(feature = \"thread_id\", issue = \"21507\")]\n-#[derive(Eq, PartialEq, Copy, Clone)]\n+#[derive(Eq, PartialEq, Clone, Copy, Hash, Debug)]\n pub struct ThreadId(u64);\n \n impl ThreadId {\n@@ -701,13 +699,6 @@ impl ThreadId {\n     }\n }\n \n-#[unstable(feature = \"thread_id\", issue = \"21507\")]\n-impl fmt::Debug for ThreadId {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(\"ThreadId { .. }\")\n-    }\n-}\n-\n ////////////////////////////////////////////////////////////////////////////////\n // Thread\n ////////////////////////////////////////////////////////////////////////////////\n@@ -795,14 +786,12 @@ impl Thread {\n     ///\n     /// use std::thread;\n     ///\n-    /// let handler = thread::Builder::new()\n-    ///     .spawn(|| {\n-    ///         let thread = thread::current();\n-    ///         println!(\"thread id: {:?}\", thread.id());\n-    ///     })\n-    ///     .unwrap();\n+    /// let other_thread = thread::spawn(|| {\n+    ///     thread::current().id()\n+    /// });\n     ///\n-    /// handler.join().unwrap();\n+    /// let other_thread_id = other_thread.join().unwrap();\n+    /// assert!(thread::current().id() != other_thread_id);\n     /// ```\n     #[unstable(feature = \"thread_id\", issue = \"21507\")]\n     pub fn id(&self) -> ThreadId {"}]}