{"sha": "459fb53f8d3f3d4a5c6145b9940a04979ee83e71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OWZiNTNmOGQzZjNkNGE1YzYxNDViOTk0MGEwNDk3OWVlODNlNzE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-10T20:21:28Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-10T20:21:40Z"}, "message": "Clean-up adding_lints.md", "tree": {"sha": "712fa438eb71f6f10c875fe4040682841a9d633d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/712fa438eb71f6f10c875fe4040682841a9d633d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459fb53f8d3f3d4a5c6145b9940a04979ee83e71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXmatGLoofN5+9u4rsJhshcDi2qEFAl5n9tQACgkQsJhshcDi\n2qHkDQ//eE5TUliorxdLGy4q6EpTRcIuKX1sCcF/5aBz1wv8tSlNp1lkTUHV7dIi\n4WrD3VN5sP7XghpJzLEmhFT5ZuyYMF7r0UEFRxhsqDyWLWbFgeHNqtdYmpZBRfEM\noVBxooD/eh4qm1Lkl9473J3vzlfIuKoDjhnesufXwdejVU/WmFrV0iZL0XtKWF0G\nQhXg8Yy1gZ6ghalFKH0qidI4BxovGVK8L5WuhvAjW90aJKesGGgoFzHzKFKrsxB3\nHKAWAni+VfwGEdxrDel0+EdR7mi/CY9m5zpANpI6wDvJbHzjPoGlgPNRpeGq+StI\nsxfnTRKyad3ADAbZ3v1GngVQyoRNeZoSfLOSGQnSKWXxQATRO8NRPAVphlradLi+\nsOmw+cRnyfhBOLwPk6ZuozXfLk273QM648j0bYvvk+aEUSyPbHyiNcOa1PaEWya3\nZD7pjECn7syTGTgOLgX4VKBI8t6OsWgDBxr202WgnmwU0mqk5pphH+WMUpOZ8UuP\nYFXC1sDfsqqU7WP4WnscJaR8dcTpnJ2vIEJvKLAR23iQllYHooEGTCH8hxOF8yKt\nXIDLZ1VggxxaIQymRw8Imjsl6jk9CNo/GFVFis1C4w/99Z7tnuNMu12eb9AdH65U\nH9EVTS2P1kBoHwYoSfON3BJqKWiuC02lgyXuNuwZOPO1ax6b1mc=\n=8SUP\n-----END PGP SIGNATURE-----", "payload": "tree 712fa438eb71f6f10c875fe4040682841a9d633d\nparent 8cdd75ca2965a5618c763eb751cf2dec5b4a66c2\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1583871688 +0900\ncommitter Yuki Okushi <huyuumi.dev@gmail.com> 1583871700 +0900\n\nClean-up adding_lints.md\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459fb53f8d3f3d4a5c6145b9940a04979ee83e71", "html_url": "https://github.com/rust-lang/rust/commit/459fb53f8d3f3d4a5c6145b9940a04979ee83e71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459fb53f8d3f3d4a5c6145b9940a04979ee83e71/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cdd75ca2965a5618c763eb751cf2dec5b4a66c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cdd75ca2965a5618c763eb751cf2dec5b4a66c2", "html_url": "https://github.com/rust-lang/rust/commit/8cdd75ca2965a5618c763eb751cf2dec5b4a66c2"}], "stats": {"total": 99, "additions": 49, "deletions": 50}, "files": [{"sha": "54034f664834dece95ead6cd714ca3c89fa9b4c4", "filename": "doc/adding_lints.md", "status": "modified", "additions": 49, "deletions": 50, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/459fb53f8d3f3d4a5c6145b9940a04979ee83e71/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/459fb53f8d3f3d4a5c6145b9940a04979ee83e71/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=459fb53f8d3f3d4a5c6145b9940a04979ee83e71", "patch": "@@ -1,4 +1,4 @@\n-## Adding a new lint\n+# Adding a new lint\n \n You are probably here because you want to add a new lint to Clippy. If this is\n the first time you're contributing to Clippy, this document guides you through\n@@ -25,14 +25,14 @@ because that's clearly a non-descriptive name.\n   - [PR Checklist](#pr-checklist)\n   - [Cheatsheet](#cheatsheet)\n \n-### Setup\n+## Setup\n \n When working on Clippy, you will need the current git master version of rustc,\n which can change rapidly. Make sure you're working near rust-clippy's master,\n and use the `setup-toolchain.sh` script to configure the appropriate toolchain\n for the Clippy directory.\n \n-### Getting Started\n+## Getting Started\n \n There is a bit of boilerplate code that needs to be set up when creating a new\n lint. Fortunately, you can use the clippy dev tools to handle this for you. We\n@@ -45,7 +45,7 @@ two files: `tests/ui/foo_functions.rs` and `clippy_lints/src/foo_functions.rs`,\n as well as run `cargo dev update_lints` to register the new lint. Next, we'll\n open up these files and add our lint!\n \n-### Testing\n+## Testing\n \n Let's write some tests first that we can execute while we iterate on our lint.\n \n@@ -88,12 +88,10 @@ fn main() {\n     let a = A;\n     a.foo();\n }\n-\n ```\n \n-Now we can run the test with `TESTNAME=foo_functions cargo uitest`.\n-Currently this test will fail. If you go through the output you will see that we\n-are told that `clippy::foo_functions` is an unknown lint, which is expected.\n+Now we can run the test with `TESTNAME=foo_functions cargo uitest`,\n+currently this test is meaningless though.\n \n While we are working on implementing our lint, we can keep running the UI\n test. That allows us to check if the output is turning into what we want.\n@@ -105,7 +103,7 @@ every time before running `tests/ui/update-all-references.sh`.\n Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit\n our lint, we need to commit the generated `.stderr` files, too.\n \n-### Rustfix tests\n+## Rustfix tests\n \n If the lint you are working on is making use of structured suggestions, the\n test file should include a `// run-rustfix` comment at the top. This will\n@@ -116,13 +114,13 @@ test file and compare that to the contents of a `.fixed` file.\n Use `tests/ui/update-all-references.sh` to automatically generate the\n `.fixed` file after running the tests.\n \n-### Edition 2018 tests\n+## Edition 2018 tests\n \n Some features require the 2018 edition to work (e.g. `async_await`), but\n compile-test tests run on the 2015 edition by default. To change this behavior\n-add `// compile-flags: --edition 2018` at the top of the test file.\n+add `// edition:2018` at the top of the test file (note that it's space-sensitive).\n \n-### Testing manually\n+## Testing manually\n \n Manually testing against an example file can be useful if you have added some\n `println!`s and the test suite output becomes unreadable. To try Clippy with\n@@ -131,7 +129,7 @@ clippy-driver -- -L ./target/debug input.rs` from the working copy root.\n \n With tests in place, let's have a look at implementing our lint now.\n \n-### Lint declaration\n+## Lint declaration\n \n Let's start by opening the new file created in the `clippy_lints` crate\n at `clippy_lints/src/foo_functions.rs`. That's the crate where all the\n@@ -140,7 +138,7 @@ lint code is. This file has already imported some initial things we will need:\n ```rust\n use rustc_lint::{EarlyLintPass, EarlyContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use syntax::ast::*;\n+use rustc_ast::ast::*;\n ```\n \n The next step is to update the lint declaration. Lints are declared using the\n@@ -167,8 +165,8 @@ declare_clippy_lint! {\n ```\n \n * The section of lines prefixed with `///` constitutes the lint documentation\n-  section. This is the default documentation style and will be displayed at\n-  https://rust-lang.github.io/rust-clippy/master/index.html.\n+  section. This is the default documentation style and will be displayed\n+  [like this][example_lint_page].\n * `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the [lint naming\n   guidelines][lint_naming] here when naming your lint. In short, the name should\n   state the thing that is being checked for and read well when used with\n@@ -199,14 +197,12 @@ automate everything. We will have to register our lint pass manually in the\n `register_plugins` function in `clippy_lints/src/lib.rs`:\n \n ```rust\n-store.register_early_pass(box foo_functions::FooFunctions);\n+store.register_early_pass(|| box foo_functions::FooFunctions);\n ```\n \n-This should fix the `unknown clippy lint: clippy::foo_functions` error that we\n-saw when we executed our tests the first time. The next decision we have to make\n-is which lint pass our lint is going to need.\n+[example lint page]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n \n-### Lint passes\n+## Lint passes\n \n Writing a lint that only checks for the name of a function means that we only\n have to deal with the AST and don't have to deal with the type system at all.\n@@ -224,7 +220,7 @@ Since we don't need type information for checking the function name, we used\n `--pass=early` when running the new lint automation and all the imports were\n added accordingly.\n \n-### Emitting a lint\n+## Emitting a lint\n \n With UI tests and the lint declaration in place, we can start working on the\n implementation of the lint logic.\n@@ -233,7 +229,7 @@ Let's start by implementing the `EarlyLintPass` for our `FooFunctions`:\n \n ```rust\n impl EarlyLintPass for FooFunctions {\n-    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n+    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {\n         // TODO: Emit lint here\n     }\n }\n@@ -255,7 +251,7 @@ automatically. This is how it looks:\n \n ```rust\n impl EarlyLintPass for FooFunctions {\n-    fn check_fn(&mut self, cx: &EarlyContext<'_>, _: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n+    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {\n         span_lint_and_help(\n             cx,\n             FOO_FUNCTIONS,\n@@ -269,20 +265,20 @@ impl EarlyLintPass for FooFunctions {\n \n Running our UI test should now produce output that contains the lint message.\n \n-### Adding the lint logic\n+## Adding the lint logic\n \n Writing the logic for your lint will most likely be different from our example,\n so this section is kept rather short.\n \n Using the [`check_fn`][check_fn] method gives us access to [`FnKind`][fn_kind]\n-that has two relevant variants for us `FnKind::ItemFn` and `FnKind::Method`.\n-Both provide access to the name of the function/method via an [`Ident`][ident].\n+that has the `FnKind::Fn` variant. It provides access to the name of the\n+function/method via an [`Ident`][ident].\n \n With that we can expand our `check_fn` method to:\n \n ```rust\n impl EarlyLintPass for FooFunctions {\n-    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n+    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {\n         if is_foo_fn(fn_kind) {\n             span_lint_and_help(\n                 cx,\n@@ -307,9 +303,11 @@ In our example, `is_foo_fn` looks like:\n \n fn is_foo_fn(fn_kind: FnKind<'_>) -> bool {\n     match fn_kind {\n-        FnKind::ItemFn(ident, ..) | FnKind::Method(ident, ..) => {\n-            ident.name == \"foo\"\n-        },\n+        FnKind::Fn(_, ident, ..) => {\n+            // check if `fn` name is `foo`\n+            ident.name.as_str() == \"foo\"\n+        }\n+        // ignore closures\n         FnKind::Closure(..) => false\n     }\n }\n@@ -325,13 +323,14 @@ implementation is not violating any Clippy lints itself.\n That should be it for the lint implementation. Running `cargo test` should now\n pass.\n \n-### Author lint\n+## Author lint\n \n If you have trouble implementing your lint, there is also the internal `author`\n lint to generate Clippy code that detects the offending pattern. It does not\n work for all of the Rust syntax, but can give a good starting point.\n \n-The quickest way to use it, is the [Rust playground: play.rust-lang.org][Play].\n+The quickest way to use it, is the\n+[Rust playground: play.rust-lang.org][author_example].\n Put the code you want to lint into the editor and add the `#[clippy::author]`\n attribute above the item. Then run Clippy via `Tools -> Clippy` and you should\n see the generated code in the output below.\n@@ -341,7 +340,7 @@ see the generated code in the output below.\n If the command was executed successfully, you can copy the code over to where\n you are implementing your lint.\n \n-### Documentation\n+## Documentation\n \n The final thing before submitting our PR is to add some documentation to our\n lint declaration.\n@@ -374,7 +373,7 @@ declare_clippy_lint! {\n Once your lint is merged, this documentation will show up in the [lint\n list][lint_list].\n \n-### Running rustfmt\n+## Running rustfmt\n \n [Rustfmt](https://github.com/rust-lang/rustfmt) is a tool for formatting Rust\n code according to style guidelines. Your code has to be formatted by `rustfmt`\n@@ -389,13 +388,13 @@ rustup component add rustfmt --toolchain=nightly\n Use `cargo dev fmt` to format the whole codebase. Make sure that `rustfmt` is\n installed for the nightly toolchain.\n \n-### Debugging\n+## Debugging\n \n-If you want to debug parts of your lint implementation, you can use the `dbg!`\n+If you want to debug parts of your lint implementation, you can use the [`dbg!`]\n macro anywhere in your code. Running the tests should then include the debug\n output in the `stdout` part.\n \n-### PR Checklist\n+## PR Checklist\n \n Before submitting your PR make sure you followed all of the basic requirements:\n \n@@ -408,7 +407,7 @@ Before submitting your PR make sure you followed all of the basic requirements:\n - [ ] Added lint documentation\n - [ ] Run `cargo dev fmt`\n \n-### Cheatsheet\n+## Cheatsheet\n \n Here are some pointers to things you are likely going to need for every lint:\n \n@@ -426,38 +425,38 @@ Here are some pointers to things you are likely going to need for every lint:\n For `EarlyLintPass` lints:\n \n * [`EarlyLintPass`][early_lint_pass]\n-* [`syntax::ast`][ast]\n+* [`rustc_ast::ast`][ast]\n \n For `LateLintPass` lints:\n \n * [`LateLintPass`][late_lint_pass]\n * [`Ty::TyKind`][ty]\n \n-\n While most of Clippy's lint utils are documented, most of rustc's internals lack\n documentation currently. This is unfortunate, but in most cases you can probably\n get away with copying things from existing similar lints. If you are stuck,\n-don't hesitate to ask on Discord, IRC or in the issue/PR.\n+don't hesitate to ask on [Discord] or in the issue/PR.\n \n [lint_list]: https://rust-lang.github.io/rust-clippy/master/index.html\n [lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n [category_level_mapping]: https://github.com/rust-lang/rust-clippy/blob/bd23cb89ec0ea63403a17d3fc5e50c88e38dd54f/clippy_lints/src/lib.rs#L43\n [declare_clippy_lint]: https://github.com/rust-lang/rust-clippy/blob/a71acac1da7eaf667ab90a1d65d10e5cc4b80191/clippy_lints/src/lib.rs#L39\n-[check_fn]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.EarlyLintPass.html#method.check_fn\n-[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.EarlyLintPass.html\n-[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.LateLintPass.html\n-[fn_kind]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/visit/enum.FnKind.html\n+[check_fn]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html#method.check_fn\n+[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n+[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n+[fn_kind]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/visit/enum.FnKind.html\n [diagnostics]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/diagnostics.rs\n [utils]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/mod.rs\n-[ident]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/source_map/symbol/struct.Ident.html\n+[ident]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/symbol/struct.Ident.html\n [span]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html\n [applicability]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/enum.Applicability.html\n [if_chain]: https://docs.rs/if_chain/*/if_chain/\n [ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/sty/index.html\n-[ast]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/index.html\n+[ast]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/index.html\n [from_expansion]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.from_expansion\n [in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/fn.in_external_macro.html\n-[play]: https://play.rust-lang.org\n-[author_example]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f093b986e80ad62f3b67a1f24f5e66e2\n+[author_example]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=9a12cb60e5c6ad4e3003ac6d5e63cf55\n [rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/\n [nightly_docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n+[Discord]: https://discord.gg/rust-lang\n+[`dbg`!]: https://doc.rust-lang.org/std/macro.dbg.html"}]}