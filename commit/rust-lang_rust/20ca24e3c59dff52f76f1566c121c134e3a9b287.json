{"sha": "20ca24e3c59dff52f76f1566c121c134e3a9b287", "node_id": "C_kwDOAAsO6NoAKDIwY2EyNGUzYzU5ZGZmNTJmNzZmMTU2NmMxMjFjMTM0ZTNhOWIyODc", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-03-02T07:48:31Z"}, "committer": {"name": "Jynn Nelson", "email": "jyn.nelson@redjack.com", "date": "2023-03-27T12:07:49Z"}, "message": "More config.toml.example cleanups\n\n- Link to more documentation\n- Move `changelog-seen` into the \"Global Settings\" section\n- Update incorrect comments on `llvm.link-shared` and\n  `rust.debug-assertions`\n- Use the correct default in the commented-out example more often\n- Clarify that `docs` and `compiler-docs` only control the default,\n  they're not a hard-off switch.\n- Document `-vvv` and `local-rebuild`\n- Minor improvements to doc-comments in config.toml.example\n\nThis also sets `download-rustc = false`; that was already the default,\nbut it will be helpful in case the default changes\n(https://jyn.dev/2023/01/12/Bootstrapping-Rust-in-2023.html).", "tree": {"sha": "92022392437aacb51dbfc77228ef6a1810f39e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92022392437aacb51dbfc77228ef6a1810f39e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ca24e3c59dff52f76f1566c121c134e3a9b287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ca24e3c59dff52f76f1566c121c134e3a9b287", "html_url": "https://github.com/rust-lang/rust/commit/20ca24e3c59dff52f76f1566c121c134e3a9b287", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ca24e3c59dff52f76f1566c121c134e3a9b287/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0600714ab1a4cb2d1a88cd0660b9f9a2c07309", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0600714ab1a4cb2d1a88cd0660b9f9a2c07309", "html_url": "https://github.com/rust-lang/rust/commit/7a0600714ab1a4cb2d1a88cd0660b9f9a2c07309"}], "stats": {"total": 175, "additions": 94, "deletions": 81}, "files": [{"sha": "5ef83760aed2d1ce6d7b5ce40c8a9868fc86ddc0", "filename": "config.example.toml", "status": "modified", "additions": 91, "deletions": 80, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/20ca24e3c59dff52f76f1566c121c134e3a9b287/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/20ca24e3c59dff52f76f1566c121c134e3a9b287/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=20ca24e3c59dff52f76f1566c121c134e3a9b287", "patch": "@@ -1,20 +1,14 @@\n # Sample TOML configuration file for building Rust.\n #\n-# To configure rustbuild, copy this file to the directory from which you will be\n-# running the build, and name it config.toml.\n+# To configure rustbuild, run `./configure` or `./x.py setup`.\n+# See https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#create-a-configtoml for more information.\n #\n # All options are commented out by default in this file, and they're commented\n # out with their default values. The build system by default looks for\n # `config.toml` in the current directory of a build for build configuration, but\n # a custom configuration file can also be specified with `--config` to the build\n # system.\n \n-# Keeps track of the last version of `x.py` used.\n-# If it does not match the version that is currently running,\n-# `x.py` will prompt you to update it and read the changelog.\n-# See `src/bootstrap/CHANGELOG.md` for more information.\n-changelog-seen = 2\n-\n # =============================================================================\n # Global Settings\n # =============================================================================\n@@ -25,6 +19,12 @@ changelog-seen = 2\n # Note that this has no default value (x.py uses the defaults in `config.toml.example`).\n #profile = <none>\n \n+# Keeps track of the last version of `x.py` used.\n+# If `changelog-seen` does not match the version that is currently running,\n+# `x.py` will prompt you to update it and to read the changelog.\n+# See `src/bootstrap/CHANGELOG.md` for more information.\n+changelog-seen = 2\n+\n # =============================================================================\n # Tweaking how LLVM is compiled\n # =============================================================================\n@@ -33,7 +33,7 @@ changelog-seen = 2\n # Whether to use Rust CI built LLVM instead of locally building it.\n #\n # Unless you're developing for a target where Rust CI doesn't build a compiler\n-# toolchain or changing LLVM locally, you probably want to set this to true.\n+# toolchain or changing LLVM locally, you probably want to leave this enabled.\n #\n # All tier 1 targets are currently supported; set this to `\"if-available\"` if\n # you are not sure whether you're on a tier 1 target.\n@@ -42,9 +42,7 @@ changelog-seen = 2\n #\n # Note that many of the LLVM options are not currently supported for\n # downloading. Currently only the \"assertions\" option can be toggled.\n-#\n-# Defaults to \"if-available\" when `channel = \"dev\"` and \"false\" otherwise.\n-#download-ci-llvm = \"if-available\"\n+#download-ci-llvm = if rust.channel == \"dev\" { \"if-available\" } else { false }\n \n # Indicates whether the LLVM build is a Release or Debug build\n #optimize = true\n@@ -59,6 +57,8 @@ changelog-seen = 2\n #release-debuginfo = false\n \n # Indicates whether the LLVM assertions are enabled or not\n+# NOTE: When assertions are disabled, bugs in the integration between rustc and LLVM can lead to\n+# unsoundness (segfaults, etc.) in the rustc process itself, not just in the generated code.\n #assertions = false\n \n # Indicates whether the LLVM testsuite is enabled in the build or not. Does\n@@ -70,10 +70,9 @@ changelog-seen = 2\n # Indicates whether the LLVM plugin is enabled or not\n #plugins = false\n \n-# Indicates whether ccache is used when building LLVM\n+# Indicates whether ccache is used when building LLVM. Set to `true` to use the first `ccache` in\n+# PATH, or set an absolute path to use a specific version.\n #ccache = false\n-# or alternatively ...\n-#ccache = \"/path/to/ccache\"\n \n # When true, link libstdc++ statically into the rustc_llvm.\n # This is useful if you don't want to use the dynamic version of that\n@@ -87,11 +86,8 @@ changelog-seen = 2\n # Note: this is NOT related to Rust compilation targets. However, as Rust is\n # dependent on LLVM for code generation, turning targets off here WILL lead to\n # the resulting rustc being unable to compile for the disabled architectures.\n-# Also worth pointing out is that, in case support for new targets are added to\n-# LLVM, enabling them here doesn't mean Rust is automatically gaining said\n-# support. You'll need to write a target specification at least, and most\n-# likely, teach rustc about the C ABI of the target. Get in touch with the\n-# Rust team and file an issue if you need assistance in porting!\n+#\n+# To add support for new targets, see https://rustc-dev-guide.rust-lang.org/building/new-target.html.\n #targets = \"AArch64;ARM;BPF;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86\"\n \n # LLVM experimental targets to build support for. These targets are specified in\n@@ -104,19 +100,18 @@ changelog-seen = 2\n # This can be useful when building LLVM with debug info, which significantly\n # increases the size of binaries and consequently the memory required by\n # each linker process.\n-# If absent or 0, linker invocations are treated like any other job and\n+# If set to 0, linker invocations are treated like any other job and\n # controlled by rustbuild's -j parameter.\n #link-jobs = 0\n \n-# When invoking `llvm-config` this configures whether the `--shared` argument is\n-# passed to prefer linking to shared libraries.\n-# NOTE: `thin-lto = true` requires this to be `true` and will give an error otherwise.\n-#link-shared = false\n+# Whether to build LLVM as a dynamically linked library (as opposed to statically linked).\n+# Under the hood, this passes `--shared` to llvm-config.\n+# NOTE: To avoid performing LTO multiple times, we suggest setting this to `true` when `thin-lto` is enabled.\n+#link-shared = llvm.thin-lto\n \n # When building llvm, this configures what is being appended to the version.\n-# The default is \"-rust-$version-$channel\", except for dev channel where rustc\n-# version number is omitted. To use LLVM version as is, provide an empty string.\n-#version-suffix = \"-rust-dev\"\n+# To use LLVM version as is, provide an empty string.\n+#version-suffix = if rust.channel == \"dev\" { \"-rust-dev\" } else { \"-rust-$version-$channel\" }\n \n # On MSVC you can compile LLVM with clang-cl, but the test suite doesn't pass\n # with clang-cl, so this is special in that it only compiles LLVM with clang-cl.\n@@ -178,47 +173,58 @@ changelog-seen = 2\n # The default stage to use for the `bench` subcommand\n #bench-stage = 2\n \n-# Build triple for the original snapshot compiler. This must be a compiler that\n-# nightlies are already produced for. The current platform must be able to run\n-# binaries of this build triple and the nightly will be used to bootstrap the\n-# first compiler.\n+# Build triple for the pre-compiled snapshot compiler. If `rustc` is set, this must match its host\n+# triple (see `rustc --version --verbose`; cross-compiling the rust build system itself is NOT\n+# supported). If `rustc` is unset, this must be a platform with pre-compiled host tools\n+# (https://doc.rust-lang.org/nightly/rustc/platform-support.html). The current platform must be\n+# able to run binaries of this build triple.\n #\n-# Defaults to platform where `x.py` is run.\n+# If `rustc` is present in path, this defaults to the host it was compiled for.\n+# Otherwise, `x.py` will try to infer it from the output of `uname`.\n+# If `uname` is not found in PATH, we assume this is `x86_64-pc-windows-msvc`.\n+# This may be changed in the future.\n #build = \"x86_64-unknown-linux-gnu\" (as an example)\n \n-# Which triples to produce a compiler toolchain for. Each of these triples will\n-# be bootstrapped from the build triple themselves.\n+# Which triples to produce a compiler toolchain for. Each of these triples will be bootstrapped from\n+# the build triple themselves. In other words, this is the list of triples for which to build a\n+# compiler that can RUN on that triple.\n #\n-# Defaults to just the build triple.\n-#host = [\"x86_64-unknown-linux-gnu\"] (as an example)\n+# Defaults to just the `build` triple.\n+#host = [build.build] (list of triples)\n \n-# Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of\n-# these triples will be bootstrapped from the build triple themselves.\n+# Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of these triples will\n+# be bootstrapped from the build triple themselves. In other words, this is the list of triples for\n+# which to build a library that can CROSS-COMPILE to that triple.\n #\n # Defaults to `host`. If you set this explicitly, you likely want to add all\n # host triples to this list as well in order for those host toolchains to be\n # able to compile programs for their native target.\n-#target = [\"x86_64-unknown-linux-gnu\"] (as an example)\n+#target = build.host (list of triples)\n \n-# Use this directory to store build artifacts.\n-# You can use \"$ROOT\" to indicate the root of the git repository.\n+# Use this directory to store build artifacts. Paths are relative to the current directory, not to\n+# the root of the repository.\n #build-dir = \"build\"\n \n # Instead of downloading the src/stage0.json version of Cargo specified, use\n # this Cargo binary instead to build all Rust code\n+# If you set this, you likely want to set `rustc` as well.\n #cargo = \"/path/to/cargo\"\n \n # Instead of downloading the src/stage0.json version of the compiler\n # specified, use this rustc binary instead as the stage0 snapshot compiler.\n+# If you set this, you likely want to set `cargo` as well.\n #rustc = \"/path/to/rustc\"\n \n-# Instead of download the src/stage0.json version of rustfmt specified,\n+# Instead of downloading the src/stage0.json version of rustfmt specified,\n # use this rustfmt binary instead as the stage0 snapshot rustfmt.\n #rustfmt = \"/path/to/rustfmt\"\n \n-# Flag to specify whether any documentation is built. If false, rustdoc and\n+# Whether to build documentation by default. If false, rustdoc and\n # friends will still be compiled but they will not be used to generate any\n # documentation.\n+#\n+# You can still build documentation when this is disabled by explicitly passing paths,\n+# e.g. `x doc library`.\n #docs = true\n \n # Flag to specify whether CSS, JavaScript, and HTML are minified when\n@@ -229,8 +235,8 @@ changelog-seen = 2\n # Flag to specify whether private items should be included in the library docs.\n #library-docs-private-items = false\n \n-# Indicate whether the compiler should be documented in addition to the standard\n-# library and facade crates.\n+# Indicate whether to build compiler documentation by default.\n+# You can still build documentation when this is disabled by explicitly passing a path: `x doc compiler`.\n #compiler-docs = false\n \n # Indicate whether git submodules are managed and updated automatically.\n@@ -247,14 +253,14 @@ changelog-seen = 2\n # Python interpreter to use for various tasks throughout the build, notably\n # rustdoc tests, the lldb python interpreter, and some dist bits and pieces.\n #\n-# Defaults to the Python interpreter used to execute x.py\n+# Defaults to the Python interpreter used to execute x.py.\n #python = \"python\"\n \n # The path to the REUSE executable to use. Note that REUSE is not required in\n # most cases, as our tooling relies on a cached (and shrinked) copy of the\n # REUSE output present in the git repository and in our source tarballs.\n #\n-# REUSE is only needed if your changes caused the overral licensing of the\n+# REUSE is only needed if your changes caused the overall licensing of the\n # repository to change, and the cached copy has to be regenerated.\n #\n # Defaults to the \"reuse\" command in the system path.\n@@ -264,14 +270,19 @@ changelog-seen = 2\n # set that all the Cargo.toml files create, instead of updating it.\n #locked-deps = false\n \n-# Indicate whether the vendored sources are used for Rust dependencies or not\n+# Indicate whether the vendored sources are used for Rust dependencies or not.\n+#\n+# Vendoring requires additional setup. We recommend using the pre-generated source tarballs if you\n+# want to use vendoring. See\n+# https://forge.rust-lang.org/infra/other-installation-methods.html#source-code.\n #vendor = false\n \n # Typically the build system will build the Rust compiler twice. The second\n # compiler, however, will simply use its own libraries to link against. If you\n # would rather to perform a full bootstrap, compiling the compiler three times,\n-# then you can set this option to true. You shouldn't ever need to set this\n-# option to true.\n+# then you can set this option to true.\n+#\n+# This is only useful for verifying that rustc generates reproducible builds.\n #full-bootstrap = false\n \n # Enable a build of the extended Rust tool set which is not only the compiler\n@@ -300,7 +311,7 @@ changelog-seen = 2\n #    \"rust-demangler\",  # if profiler = true\n #]\n \n-# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n+# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose, 3 == print environment variables on each rustc invocation\n #verbose = 0\n \n # Build the sanitizer runtimes\n@@ -320,11 +331,12 @@ changelog-seen = 2\n \n # Arguments passed to the `./configure` script, used during distcheck. You\n # probably won't fill this in but rather it's filled in by the `./configure`\n-# script.\n+# script. Useful for debugging.\n #configure-args = []\n \n # Indicates that a local rebuild is occurring instead of a full bootstrap,\n # essentially skipping stage0 as the local compiler is recompiling itself again.\n+# Useful for modifying only the stage2 compiler without having to pass `--keep-stage 0` each time.\n #local-rebuild = false\n \n # Print out how long each rustbuild step took (mostly intended for CI and\n@@ -354,10 +366,10 @@ changelog-seen = 2\n # =============================================================================\n [install]\n \n-# Instead of installing to /usr/local, install to this path instead.\n+# Where to install the generated toolchain. Must be an absolute path.\n #prefix = \"/usr/local\"\n \n-# Where to install system configuration files\n+# Where to install system configuration files.\n # If this is a relative path, it will get installed in `prefix` above\n #sysconfdir = \"/etc\"\n \n@@ -411,9 +423,10 @@ changelog-seen = 2\n #debug = false\n \n # Whether to download the stage 1 and 2 compilers from CI.\n-# This is mostly useful for tools; if you have changes to `compiler/` they will be ignored.\n+# This is mostly useful for tools; if you have changes to `compiler/` or `library/` they will be ignored.\n #\n-# You can set this to \"if-unchanged\" to only download if `compiler/` has not been modified.\n+# Set this to \"if-unchanged\" to only download if the compiler and standard library have not been modified.\n+# Set this to `true` to download unconditionally (useful if e.g. you are only changing doc-comments).\n #download-rustc = false\n \n # Number of codegen units to use for each compiler invocation. A value of 0\n@@ -429,10 +442,8 @@ changelog-seen = 2\n # See https://github.com/rust-lang/rust/issues/83600.\n #codegen-units-std = codegen-units\n \n-# Whether or not debug assertions are enabled for the compiler and standard\n-# library. Debug assertions control the maximum log level used by rustc. When\n-# enabled calls to `trace!` and `debug!` macros are preserved in the compiled\n-# binary, otherwise they are omitted.\n+# Whether or not debug assertions are enabled for the compiler and standard library.\n+# These can help find bugs at the cost of a small runtime slowdown.\n #\n # Defaults to rust.debug value\n #debug-assertions = rust.debug (boolean)\n@@ -444,13 +455,11 @@ changelog-seen = 2\n #debug-assertions-std = rust.debug-assertions (boolean)\n \n # Whether or not to leave debug! and trace! calls in the rust binary.\n-# Overrides the `debug-assertions` option, if defined.\n #\n # Defaults to rust.debug-assertions value\n #\n-# If you see a message from `tracing` saying\n-# `max_level_info` is enabled and means logging won't be shown,\n-# set this value to `true`.\n+# If you see a message from `tracing` saying \"some trace filter directives would enable traces that\n+# are disabled statically\" because `max_level_info` is enabled, set this value to `true`.\n #debug-logging = rust.debug-assertions (boolean)\n \n # Whether or not overflow checks are enabled for the compiler and standard\n@@ -477,18 +486,16 @@ changelog-seen = 2\n #\n # Note that debuginfo-level = 2 generates several gigabytes of debuginfo\n # and will slow down the linking process significantly.\n-#\n-# Defaults to 1 if debug is true\n-#debuginfo-level = 0\n+#debuginfo-level = if rust.debug { 1 } else { 0 }\n \n # Debuginfo level for the compiler.\n-#debuginfo-level-rustc = debuginfo-level\n+#debuginfo-level-rustc = rust.debuginfo-level\n \n # Debuginfo level for the standard library.\n-#debuginfo-level-std = debuginfo-level\n+#debuginfo-level-std = rust.debuginfo-level\n \n # Debuginfo level for the tools.\n-#debuginfo-level-tools = debuginfo-level\n+#debuginfo-level-tools = rust.debuginfo-level\n \n # Debuginfo level for the test suites run with compiletest.\n # FIXME(#61117): Some tests fail when this option is enabled.\n@@ -520,6 +527,7 @@ changelog-seen = 2\n \n # Build a multi-threaded rustc\n # FIXME(#75760): Some UI tests fail when this option is enabled.\n+# NOTE: This option is NOT SUPPORTED. See #48685.\n #parallel-compiler = false\n \n # The default linker that will be hard-coded into the generated\n@@ -546,7 +554,7 @@ changelog-seen = 2\n # upstream Rust you need to set this to \"\". However, note that if you are not\n # actually compatible -- for example if you've backported patches that change\n # behavior -- this may lead to miscompilations or other bugs.\n-#description = <none> (string)\n+#description = \"\"\n \n # The root location of the musl installation directory. The library directory\n # will also need to contain libunwind.a for an unwinding implementation. Note\n@@ -575,14 +583,16 @@ changelog-seen = 2\n \n # Flag indicating whether git info will be retrieved from .git automatically.\n # Having the git information can cause a lot of rebuilds during development.\n-# Note: If this attribute is not explicitly set (e.g. if left commented out) it\n-# will default to true if channel = \"dev\", but will default to false otherwise.\n-#ignore-git = if channel == \"dev\" { true } else { false }\n+#\n+# FIXME(#76720): this can causes bugs if different compilers reuse the same metadata cache.\n+#ignore-git = if rust.channel == \"dev\" { true } else { false }\n \n-# When creating source tarballs whether or not to create a source tarball.\n+# Whether to create a source tarball by default when running `x dist`.\n+#\n+# You can still build a source tarball when this is disabled by explicitly passing `x dist rustc-src`.\n #dist-src = true\n \n-# After building or testing extended tools (e.g. clippy and rustfmt), append the\n+# After building or testing an optional component (e.g. the nomicon or reference), append the\n # result (broken, compiling, testing) into this JSON file.\n #save-toolstates = <none> (path)\n \n@@ -624,11 +634,12 @@ changelog-seen = 2\n # will make code compile faster at the expense of lower runtime performance.\n #thin-lto-import-instr-limit = if incremental { 10 } else { LLVM default (currently 100) }\n \n-# Map debuginfo paths to `/rust/$sha/...`, generally only set for releases\n+# Map debuginfo paths to `/rust/$sha/...`.\n+# Useful for reproducible builds. Generally only set for releases\n #remap-debuginfo = false\n \n-# Link the compiler against `jemalloc`, where on Linux and OSX it should\n-# override the default allocator for rustc and LLVM.\n+# Link the compiler and LLVM against `jemalloc` instead of the default libc allocator.\n+# This option is only tested on Linux and OSX.\n #jemalloc = false\n \n # Run tests in various test suites with the \"nll compare mode\" in addition to"}, {"sha": "25d9e649f23c71b1e412ad6e5aaf666005a60245", "filename": "src/bootstrap/defaults/config.user.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20ca24e3c59dff52f76f1566c121c134e3a9b287/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml", "raw_url": "https://github.com/rust-lang/rust/raw/20ca24e3c59dff52f76f1566c121c134e3a9b287/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml?ref=20ca24e3c59dff52f76f1566c121c134e3a9b287", "patch": "@@ -8,9 +8,11 @@ doc-stage = 2\n # When compiling from source, you usually want all tools.\n extended = true\n \n+# Most users installing from source want to build all parts of the project from source.\n [llvm]\n-# Most users installing from source want to build all parts of the project from source, not just rustc itself.\n download-ci-llvm = false\n+[rust]\n+download-rustc = false\n \n [dist]\n # Use better compression when preparing tarballs."}]}