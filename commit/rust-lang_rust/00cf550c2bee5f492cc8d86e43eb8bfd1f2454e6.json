{"sha": "00cf550c2bee5f492cc8d86e43eb8bfd1f2454e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwY2Y1NTBjMmJlZTVmNDkyY2M4ZDg2ZTQzZWI4YmZkMWYyNDU0ZTY=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-08-26T14:30:54Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-08-30T03:16:06Z"}, "message": "Env use shorter intra-doc links in path\n\nvars() rather than vars function\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>\n\nUse [xxx()] rather than the [xxx] function\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>\n\nEnv text representation of function intra-doc link\n\nSuggested by @jyn514\n\nLink join_paths in env doc for parity\n\nChange xxx to env::xxx for lib env doc\n\nAdd link requsted by @jyn514\n\nFix doc build with same link\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>\n\nFix missing intra-doc link\n\nFix added whitespace in doc\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>\n\nAdd brackets for `join_paths`\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>\n\nUse unused link join_paths\n\nRemoved same link for join_paths\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>\n\nRemove unsed link join_paths", "tree": {"sha": "bebcf1a8bfd2e050d35c89729832a76e52c18112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bebcf1a8bfd2e050d35c89729832a76e52c18112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00cf550c2bee5f492cc8d86e43eb8bfd1f2454e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00cf550c2bee5f492cc8d86e43eb8bfd1f2454e6", "html_url": "https://github.com/rust-lang/rust/commit/00cf550c2bee5f492cc8d86e43eb8bfd1f2454e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00cf550c2bee5f492cc8d86e43eb8bfd1f2454e6/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced37a53d9a4d46c5d3137e1e8666897474bd7d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced37a53d9a4d46c5d3137e1e8666897474bd7d6", "html_url": "https://github.com/rust-lang/rust/commit/ced37a53d9a4d46c5d3137e1e8666897474bd7d6"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "da03a15142d647ae85114b3fdbe55639fde8dbb8", "filename": "library/std/src/env.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/00cf550c2bee5f492cc8d86e43eb8bfd1f2454e6/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cf550c2bee5f492cc8d86e43eb8bfd1f2454e6/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=00cf550c2bee5f492cc8d86e43eb8bfd1f2454e6", "patch": "@@ -65,21 +65,19 @@ pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This structure is created by the [`std::env::vars`] function. See its\n-/// documentation for more.\n+/// This structure is created by [`env::vars()`]. See its documentation for more.\n ///\n-/// [`std::env::vars`]: vars\n+/// [`env::vars()`]: vars\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Vars {\n     inner: VarsOs,\n }\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This structure is created by the [`std::env::vars_os`] function. See\n-/// its documentation for more.\n+/// This structure is created by [`env::vars_os()`]. See its documentation for more.\n ///\n-/// [`std::env::vars_os`]: vars_os\n+/// [`env::vars()`]: vars\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct VarsOs {\n     inner: os_imp::Env,\n@@ -95,10 +93,8 @@ pub struct VarsOs {\n /// # Panics\n ///\n /// While iterating, the returned iterator will panic if any key or value in the\n-/// environment is not valid unicode. If this is not desired, consider using the\n-/// [`env::vars_os`] function.\n-///\n-/// [`env::vars_os`]: vars_os\n+/// environment is not valid unicode. If this is not desired, consider using\n+/// [`env::vars_os()`].\n ///\n /// # Examples\n ///\n@@ -111,6 +107,8 @@ pub struct VarsOs {\n ///     println!(\"{}: {}\", key, value);\n /// }\n /// ```\n+///\n+/// [`env::vars_os()`]: vars_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars() -> Vars {\n     Vars { inner: vars_os() }\n@@ -242,9 +240,9 @@ fn _var_os(key: &OsStr) -> Option<OsString> {\n }\n \n /// The error type for operations interacting with environment variables.\n-/// Possibly returned from the [`env::var`] function.\n+/// Possibly returned from [`env::var()`].\n ///\n-/// [`env::var`]: var\n+/// [`env::var()`]: var\n #[derive(Debug, PartialEq, Eq, Clone)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub enum VarError {\n@@ -369,10 +367,10 @@ fn _remove_var(k: &OsStr) {\n ///\n /// The iterator element type is [`PathBuf`].\n ///\n-/// This structure is created by the [`std::env::split_paths`] function. See its\n+/// This structure is created by [`env::split_paths()`]. See its\n /// documentation for more.\n ///\n-/// [`std::env::split_paths`]: split_paths\n+/// [`env::split_paths()`]: split_paths\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> {\n     inner: os_imp::SplitPaths<'a>,\n@@ -423,9 +421,9 @@ impl fmt::Debug for SplitPaths<'_> {\n }\n \n /// The error type for operations on the `PATH` variable. Possibly returned from\n-/// the [`env::join_paths`] function.\n+/// [`env::join_paths()`].\n ///\n-/// [`env::join_paths`]: join_paths\n+/// [`env::join_paths()`]: join_paths\n #[derive(Debug)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct JoinPathsError {\n@@ -460,7 +458,8 @@ pub struct JoinPathsError {\n /// }\n /// ```\n ///\n-/// Joining a path containing a colon on a Unix-like platform results in an error:\n+/// Joining a path containing a colon on a Unix-like platform results in an\n+/// error:\n ///\n /// ```\n /// # if cfg!(unix) {\n@@ -472,8 +471,8 @@ pub struct JoinPathsError {\n /// # }\n /// ```\n ///\n-/// Using `env::join_paths` with [`env::split_paths`] to append an item to the `PATH` environment\n-/// variable:\n+/// Using `env::join_paths()` with [`env::split_paths()`] to append an item to\n+/// the `PATH` environment variable:\n ///\n /// ```\n /// use std::env;\n@@ -491,7 +490,7 @@ pub struct JoinPathsError {\n /// }\n /// ```\n ///\n-/// [`env::split_paths`]: split_paths\n+/// [`env::split_paths()`]: split_paths\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n where\n@@ -664,14 +663,14 @@ pub fn current_exe() -> io::Result<PathBuf> {\n /// An iterator over the arguments of a process, yielding a [`String`] value for\n /// each argument.\n ///\n-/// This struct is created by the [`std::env::args`] function. See its\n-/// documentation for more.\n+/// This struct is created by [`env::args()`]. See its documentation\n+/// for more.\n ///\n /// The first element is traditionally the path of the executable, but it can be\n /// set to arbitrary text, and may not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n-/// [`std::env::args`]: args\n+/// [`env::args()`]: args\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Args {\n     inner: ArgsOs,\n@@ -680,14 +679,14 @@ pub struct Args {\n /// An iterator over the arguments of a process, yielding an [`OsString`] value\n /// for each argument.\n ///\n-/// This struct is created by the [`std::env::args_os`] function. See its\n-/// documentation for more.\n+/// This struct is created by [`env::args_os()`]. See its documentation\n+/// for more.\n ///\n /// The first element is traditionally the path of the executable, but it can be\n /// set to arbitrary text, and may not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n-/// [`std::env::args_os`]: args_os\n+/// [`env::args_os()`]: args_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct ArgsOs {\n     inner: sys::args::Args,"}]}