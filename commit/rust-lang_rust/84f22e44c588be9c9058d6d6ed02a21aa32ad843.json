{"sha": "84f22e44c588be9c9058d6d6ed02a21aa32ad843", "node_id": "C_kwDOAAsO6NoAKDg0ZjIyZTQ0YzU4OGJlOWM5MDU4ZDZkNmVkMDJhMjFhYTMyYWQ4NDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-07T00:53:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-07T00:53:19Z"}, "message": "Auto merge of #106544 - matthiaskrgr:rollup-e9prjed, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #106287 (Add some docs to `bug`, `span_bug` and `delay_span_bug`)\n - #106341 (refactor: clean up `errors.rs` and `error_codes_check.rs`)\n - #106453 (Improve include macro documentation)\n - #106466 (Fix rustdoc source code rendering for `#[path = \"../path/to/mod.rs\"]` links)\n - #106528 (Tiny formatting fix)\n - #106534 (rustdoc-gui: Use new block syntax for define-function in goml scripts)\n - #106542 (Add default and latest stable edition to --edition in rustc (attempt 2))\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8f14167ff4ed4c11cdeb6053e8cc27338a22dc45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f14167ff4ed4c11cdeb6053e8cc27338a22dc45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f22e44c588be9c9058d6d6ed02a21aa32ad843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f22e44c588be9c9058d6d6ed02a21aa32ad843", "html_url": "https://github.com/rust-lang/rust/commit/84f22e44c588be9c9058d6d6ed02a21aa32ad843", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f22e44c588be9c9058d6d6ed02a21aa32ad843/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ac9572c48435b5342ad3550d6036bde835d37dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac9572c48435b5342ad3550d6036bde835d37dc", "html_url": "https://github.com/rust-lang/rust/commit/7ac9572c48435b5342ad3550d6036bde835d37dc"}, {"sha": "a1b3393f5feb93c1241452ada9bf39c4349471e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b3393f5feb93c1241452ada9bf39c4349471e7", "html_url": "https://github.com/rust-lang/rust/commit/a1b3393f5feb93c1241452ada9bf39c4349471e7"}], "stats": {"total": 2191, "additions": 1149, "deletions": 1042}, "files": [{"sha": "3891745b5008efaa8475462cdb2d21e050e29e84", "filename": "compiler/rustc_error_codes/src/error_codes/E0729.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0729.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0729.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0729.md?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -1,3 +1,5 @@\n+#### Note: this error code is no longer emitted by the compiler\n+\n Support for Non-Lexical Lifetimes (NLL) has been included in the Rust compiler\n since 1.31, and has been enabled on the 2015 edition since 1.36. The new borrow\n checker for NLL uncovered some bugs in the old borrow checker, which in some"}, {"sha": "621704335e432226e01e8f3ae5ae44873e0b98ad", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -978,6 +978,7 @@ impl Handler {\n         self.inner.borrow_mut().span_bug(span, msg)\n     }\n \n+    /// For documentation on this, see `Session::delay_span_bug`.\n     #[track_caller]\n     pub fn delay_span_bug(\n         &self,\n@@ -1529,6 +1530,7 @@ impl HandlerInner {\n         self.emit_diagnostic(diag.set_span(sp));\n     }\n \n+    /// For documentation on this, see `Session::delay_span_bug`.\n     #[track_caller]\n     fn delay_span_bug(\n         &mut self,"}, {"sha": "5ca4d260179ceff29f982033a0a3cb4e171e089d", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -1,3 +1,13 @@\n+/// A macro for triggering an ICE.\n+/// Calling `bug` instead of panicking will result in a nicer error message and should\n+/// therefore be prefered over `panic`/`unreachable` or others.\n+///\n+/// If you have a span available, you should use [`span_bug`] instead.\n+///\n+/// If the bug should only be emitted when compilation didn't fail, [`Session::delay_span_bug`] may be useful.\n+///\n+/// [`Session::delay_span_bug`]: rustc_session::Session::delay_span_bug\n+/// [`span_bug`]: crate::span_bug\n #[macro_export]\n macro_rules! bug {\n     () => ( $crate::bug!(\"impossible case reached\") );\n@@ -8,6 +18,14 @@ macro_rules! bug {\n     });\n }\n \n+/// A macro for triggering an ICE with a span.\n+/// Calling `span_bug!` instead of panicking will result in a nicer error message and point\n+/// at the code the compiler was compiling when it ICEd. This is the preferred way to trigger\n+/// ICEs.\n+///\n+/// If the bug should only be emitted when compilation didn't fail, [`Session::delay_span_bug`] may be useful.\n+///\n+/// [`Session::delay_span_bug`]: rustc_session::Session::delay_span_bug\n #[macro_export]\n macro_rules! span_bug {\n     ($span:expr, $msg:expr) => ({ $crate::util::bug::span_bug_fmt($span, ::std::format_args!($msg)) });"}, {"sha": "b73ae593905353a8d99c97dff746f4db9c375870", "filename": "compiler/rustc_middle/src/util/bug.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -35,8 +35,7 @@ fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n             (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n             (None, _) => panic_any(msg),\n         }\n-    });\n-    unreachable!();\n+    })\n }\n \n /// A query to trigger a `delay_span_bug`. Clearly, if one has a `tcx` one can already trigger a"}, {"sha": "9f436783ceda6f03fd89c208361f4f767c4e0e61", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -1503,12 +1503,13 @@ impl<'a> Parser<'a> {\n                 prior_type_ascription: self.last_type_ascription,\n             });\n             (lo.to(self.prev_token.span), ExprKind::MacCall(mac))\n-        } else if self.check(&token::OpenDelim(Delimiter::Brace)) &&\n-            let Some(expr) = self.maybe_parse_struct_expr(&qself, &path) {\n-                if qself.is_some() {\n-                    self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);\n-                }\n-                return expr;\n+        } else if self.check(&token::OpenDelim(Delimiter::Brace))\n+            && let Some(expr) = self.maybe_parse_struct_expr(&qself, &path)\n+        {\n+            if qself.is_some() {\n+                self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);\n+            }\n+            return expr;\n         } else {\n             (path.span, ExprKind::Path(qself, path))\n         };"}, {"sha": "1ccfc59f7a9d61e86b5b9f245cf0f8303f465e6b", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -35,6 +35,7 @@ use std::hash::Hash;\n use std::iter;\n use std::path::{Path, PathBuf};\n use std::str::{self, FromStr};\n+use std::sync::LazyLock;\n \n pub mod sigpipe;\n \n@@ -1322,7 +1323,12 @@ mod opt {\n         unstable(longer(a, b), move |opts| opts.optmulti(a, b, c, d))\n     }\n }\n-\n+static EDITION_STRING: LazyLock<String> = LazyLock::new(|| {\n+    format!(\n+        \"Specify which edition of the compiler to use when compiling code. \\\n+The default is {DEFAULT_EDITION} and the latest stable edition is {LATEST_STABLE_EDITION}.\"\n+    )\n+});\n /// Returns the \"short\" subset of the rustc command line options,\n /// including metadata for each option, such as whether the option is\n /// part of the stable long-term interface for rustc.\n@@ -1355,7 +1361,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n         opt::opt_s(\n             \"\",\n             \"edition\",\n-            \"Specify which edition of the compiler to use when compiling code.\",\n+            &*EDITION_STRING,\n             EDITION_NAME_LIST,\n         ),\n         opt::multi_s("}, {"sha": "1b2e8d9dc707bdd60673f4b2d859057899227588", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -590,7 +590,19 @@ impl Session {\n     pub fn warn(&self, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().warn(msg)\n     }\n-    /// Delay a span_bug() call until abort_if_errors()\n+\n+    /// Ensures that compilation cannot succeed.\n+    ///\n+    /// If this function has been called but no errors have been emitted and\n+    /// compilation succeeds, it will cause an internal compiler error (ICE).\n+    ///\n+    /// This can be used in code paths that should never run on successful compilations.\n+    /// For example, it can be used to create an [`ErrorGuaranteed`]\n+    /// (but you should prefer threading through the [`ErrorGuaranteed`] from an error emission directly).\n+    ///\n+    /// If no span is available, use [`DUMMY_SP`].\n+    ///\n+    /// [`DUMMY_SP`]: rustc_span::DUMMY_SP\n     #[track_caller]\n     pub fn delay_span_bug<S: Into<MultiSpan>>(\n         &self,"}, {"sha": "3b026bc0e0f381bd23b847f3c9ecd0fcf0ca315b", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -1315,22 +1315,41 @@ pub(crate) mod builtin {\n \n     /// Parses a file as an expression or an item according to the context.\n     ///\n-    /// The file is located relative to the current file (similarly to how\n-    /// modules are found). The provided path is interpreted in a platform-specific\n-    /// way at compile time. So, for instance, an invocation with a Windows path\n-    /// containing backslashes `\\` would not compile correctly on Unix.\n+    /// **Warning**: For multi-file Rust projects, the `include!` macro is probably not what you\n+    /// are looking for. Usually, multi-file Rust projects use\n+    /// [modules](https://doc.rust-lang.org/reference/items/modules.html). Multi-file projects and\n+    /// modules are explained in the Rust-by-Example book\n+    /// [here](https://doc.rust-lang.org/rust-by-example/mod/split.html) and the module system is\n+    /// explained in the Rust Book\n+    /// [here](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html).\n+    ///\n+    /// The included file is placed in the surrounding code\n+    /// [unhygienically](https://doc.rust-lang.org/reference/macros-by-example.html#hygiene). If\n+    /// the included file is parsed as an expression and variables or functions share names across\n+    /// both files, it could result in variables or functions being different from what the\n+    /// included file expected.\n+    ///\n+    /// The included file is located relative to the current file (similarly to how modules are\n+    /// found). The provided path is interpreted in a platform-specific way at compile time. So,\n+    /// for instance, an invocation with a Windows path containing backslashes `\\` would not\n+    /// compile correctly on Unix.\n     ///\n-    /// Using this macro is often a bad idea, because if the file is\n-    /// parsed as an expression, it is going to be placed in the\n-    /// surrounding code unhygienically. This could result in variables\n-    /// or functions being different from what the file expected if\n-    /// there are variables or functions that have the same name in\n-    /// the current file.\n+    /// # Uses\n+    ///\n+    /// The `include!` macro is primarily used for two purposes. It is used to include\n+    /// documentation that is written in a separate file and it is used to include [build artifacts\n+    /// usually as a result from the `build.rs`\n+    /// script](https://doc.rust-lang.org/cargo/reference/build-scripts.html#outputs-of-the-build-script).\n+    ///\n+    /// When using the `include` macro to include stretches of documentation, remember that the\n+    /// included file still needs to be a valid rust syntax. It is also possible to\n+    /// use the [`include_str`] macro as `#![doc = include_str!(\"...\")]` (at the module level) or\n+    /// `#[doc = include_str!(\"...\")]` (at the item level) to include documentation from a plain\n+    /// text or markdown file.\n     ///\n     /// # Examples\n     ///\n-    /// Assume there are two files in the same directory with the following\n-    /// contents:\n+    /// Assume there are two files in the same directory with the following contents:\n     ///\n     /// File 'monkeys.in':\n     ///"}, {"sha": "c39e9c5fbc9d6e0e02eeb4fe453d25ea3e11ff21", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -1 +1 @@\n-0.13.4\n\\ No newline at end of file\n+0.14.1\n\\ No newline at end of file"}, {"sha": "c8899ee62b5f9c7456c96eacc3eaa44600c5a6e8", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -309,7 +309,7 @@ impl<'tcx> Context<'tcx> {\n \n     pub(crate) fn href_from_span(&self, span: clean::Span, with_lines: bool) -> Option<String> {\n         let mut root = self.root_path();\n-        let mut path = String::new();\n+        let mut path: String;\n         let cnum = span.cnum(self.sess());\n \n         // We can safely ignore synthetic `SourceFile`s.\n@@ -340,10 +340,24 @@ impl<'tcx> Context<'tcx> {\n                 ExternalLocation::Unknown => return None,\n             };\n \n-            sources::clean_path(&src_root, file, false, |component| {\n-                path.push_str(&component.to_string_lossy());\n+            let href = RefCell::new(PathBuf::new());\n+            sources::clean_path(\n+                &src_root,\n+                file,\n+                |component| {\n+                    href.borrow_mut().push(component);\n+                },\n+                || {\n+                    href.borrow_mut().pop();\n+                },\n+            );\n+\n+            path = href.into_inner().to_string_lossy().to_string();\n+\n+            if let Some(c) = path.as_bytes().last() && *c != b'/' {\n                 path.push('/');\n-            });\n+            }\n+\n             let mut fname = file.file_name().expect(\"source has no filename\").to_os_string();\n             fname.push(\".html\");\n             path.push_str(&fname.to_string_lossy());"}, {"sha": "3ea4c4bea8828fbc4fbfdb8738b76b6501d9726a", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -1,8 +1,9 @@\n+use std::cell::RefCell;\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n use std::path::{Component, Path};\n-use std::rc::Rc;\n+use std::rc::{Rc, Weak};\n \n use itertools::Itertools;\n use rustc_data_structures::flock;\n@@ -184,23 +185,26 @@ pub(super) fn write_shared(\n \n     use std::ffi::OsString;\n \n-    #[derive(Debug)]\n+    #[derive(Debug, Default)]\n     struct Hierarchy {\n+        parent: Weak<Self>,\n         elem: OsString,\n-        children: FxHashMap<OsString, Hierarchy>,\n-        elems: FxHashSet<OsString>,\n+        children: RefCell<FxHashMap<OsString, Rc<Self>>>,\n+        elems: RefCell<FxHashSet<OsString>>,\n     }\n \n     impl Hierarchy {\n-        fn new(elem: OsString) -> Hierarchy {\n-            Hierarchy { elem, children: FxHashMap::default(), elems: FxHashSet::default() }\n+        fn with_parent(elem: OsString, parent: &Rc<Self>) -> Self {\n+            Self { elem, parent: Rc::downgrade(parent), ..Self::default() }\n         }\n \n         fn to_json_string(&self) -> String {\n-            let mut subs: Vec<&Hierarchy> = self.children.values().collect();\n+            let borrow = self.children.borrow();\n+            let mut subs: Vec<_> = borrow.values().collect();\n             subs.sort_unstable_by(|a, b| a.elem.cmp(&b.elem));\n             let mut files = self\n                 .elems\n+                .borrow()\n                 .iter()\n                 .map(|s| format!(\"\\\"{}\\\"\", s.to_str().expect(\"invalid osstring conversion\")))\n                 .collect::<Vec<_>>();\n@@ -220,36 +224,52 @@ pub(super) fn write_shared(\n                 files = files\n             )\n         }\n-    }\n \n-    if cx.include_sources {\n-        let mut hierarchy = Hierarchy::new(OsString::new());\n-        for source in cx\n-            .shared\n-            .local_sources\n-            .iter()\n-            .filter_map(|p| p.0.strip_prefix(&cx.shared.src_root).ok())\n-        {\n-            let mut h = &mut hierarchy;\n-            let mut elems = source\n+        fn add_path(self: &Rc<Self>, path: &Path) {\n+            let mut h = Rc::clone(&self);\n+            let mut elems = path\n                 .components()\n                 .filter_map(|s| match s {\n                     Component::Normal(s) => Some(s.to_owned()),\n+                    Component::ParentDir => Some(OsString::from(\"..\")),\n                     _ => None,\n                 })\n                 .peekable();\n             loop {\n                 let cur_elem = elems.next().expect(\"empty file path\");\n+                if cur_elem == \"..\" {\n+                    if let Some(parent) = h.parent.upgrade() {\n+                        h = parent;\n+                    }\n+                    continue;\n+                }\n                 if elems.peek().is_none() {\n-                    h.elems.insert(cur_elem);\n+                    h.elems.borrow_mut().insert(cur_elem);\n                     break;\n                 } else {\n-                    let e = cur_elem.clone();\n-                    h = h.children.entry(cur_elem.clone()).or_insert_with(|| Hierarchy::new(e));\n+                    let entry = Rc::clone(\n+                        h.children\n+                            .borrow_mut()\n+                            .entry(cur_elem.clone())\n+                            .or_insert_with(|| Rc::new(Self::with_parent(cur_elem, &h))),\n+                    );\n+                    h = entry;\n                 }\n             }\n         }\n+    }\n \n+    if cx.include_sources {\n+        let hierarchy = Rc::new(Hierarchy::default());\n+        for source in cx\n+            .shared\n+            .local_sources\n+            .iter()\n+            .filter_map(|p| p.0.strip_prefix(&cx.shared.src_root).ok())\n+        {\n+            hierarchy.add_path(source);\n+        }\n+        let hierarchy = Rc::try_unwrap(hierarchy).unwrap();\n         let dst = cx.dst.join(&format!(\"source-files{}.js\", cx.shared.resource_suffix));\n         let make_sources = || {\n             let (mut all_sources, _krates) ="}, {"sha": "799c497d13709a00d95c7fcf6a07dc2fc482f8c4", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 44, "deletions": 16, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::source_map::FileName;\n \n+use std::cell::RefCell;\n use std::ffi::OsStr;\n use std::fs;\n use std::path::{Component, Path, PathBuf};\n@@ -72,12 +73,22 @@ impl LocalSourcesCollector<'_, '_> {\n             return;\n         }\n \n-        let mut href = String::new();\n-        clean_path(self.src_root, &p, false, |component| {\n-            href.push_str(&component.to_string_lossy());\n-            href.push('/');\n-        });\n+        let href = RefCell::new(PathBuf::new());\n+        clean_path(\n+            &self.src_root,\n+            &p,\n+            |component| {\n+                href.borrow_mut().push(component);\n+            },\n+            || {\n+                href.borrow_mut().pop();\n+            },\n+        );\n \n+        let mut href = href.into_inner().to_string_lossy().to_string();\n+        if let Some(c) = href.as_bytes().last() && *c != b'/' {\n+            href.push('/');\n+        }\n         let mut src_fname = p.file_name().expect(\"source has no filename\").to_os_string();\n         src_fname.push(\".html\");\n         href.push_str(&src_fname.to_string_lossy());\n@@ -180,13 +191,28 @@ impl SourceCollector<'_, '_> {\n \n         let shared = Rc::clone(&self.cx.shared);\n         // Create the intermediate directories\n-        let mut cur = self.dst.clone();\n-        let mut root_path = String::from(\"../../\");\n-        clean_path(&shared.src_root, &p, false, |component| {\n-            cur.push(component);\n-            root_path.push_str(\"../\");\n-        });\n+        let cur = RefCell::new(PathBuf::new());\n+        let root_path = RefCell::new(PathBuf::new());\n+\n+        clean_path(\n+            &shared.src_root,\n+            &p,\n+            |component| {\n+                cur.borrow_mut().push(component);\n+                root_path.borrow_mut().push(\"..\");\n+            },\n+            || {\n+                cur.borrow_mut().pop();\n+                root_path.borrow_mut().pop();\n+            },\n+        );\n \n+        let root_path = PathBuf::from(\"../../\").join(root_path.into_inner());\n+        let mut root_path = root_path.to_string_lossy();\n+        if let Some(c) = root_path.as_bytes().last() && *c != b'/' {\n+            root_path += \"/\";\n+        }\n+        let mut cur = self.dst.join(cur.into_inner());\n         shared.ensure_dir(&cur)?;\n \n         let src_fname = p.file_name().expect(\"source has no filename\").to_os_string();\n@@ -232,24 +258,26 @@ impl SourceCollector<'_, '_> {\n /// Takes a path to a source file and cleans the path to it. This canonicalizes\n /// things like \"..\" to components which preserve the \"top down\" hierarchy of a\n /// static HTML tree. Each component in the cleaned path will be passed as an\n-/// argument to `f`. The very last component of the path (ie the file name) will\n-/// be passed to `f` if `keep_filename` is true, and ignored otherwise.\n-pub(crate) fn clean_path<F>(src_root: &Path, p: &Path, keep_filename: bool, mut f: F)\n+/// argument to `f`. The very last component of the path (ie the file name) is ignored.\n+/// If a `..` is encountered, the `parent` closure will be called to allow the callee to\n+/// handle it.\n+pub(crate) fn clean_path<F, P>(src_root: &Path, p: &Path, mut f: F, mut parent: P)\n where\n     F: FnMut(&OsStr),\n+    P: FnMut(),\n {\n     // make it relative, if possible\n     let p = p.strip_prefix(src_root).unwrap_or(p);\n \n     let mut iter = p.components().peekable();\n \n     while let Some(c) = iter.next() {\n-        if !keep_filename && iter.peek().is_none() {\n+        if iter.peek().is_none() {\n             break;\n         }\n \n         match c {\n-            Component::ParentDir => f(\"up\".as_ref()),\n+            Component::ParentDir => parent(),\n             Component::Normal(c) => f(c),\n             _ => continue,\n         }"}, {"sha": "c9b53a1a0f76c5b207c43377583f3bde26b310df", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -3,70 +3,72 @@\n define-function: (\n     \"check-colors\",\n     (theme, main_color, title_color, fqn_color, fqn_type_color, src_link_color, sidebar_link_color),\n-    [\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/staged_api/struct.Foo.html\"),\n+    block {\n+        goto: \"file://\" + |DOC_PATH| + \"/staged_api/struct.Foo.html\"\n         // This is needed to ensure that the text color is computed.\n-        (\"show-text\", true),\n+        show-text: true\n \n         // Setting the theme.\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n         // We reload the page so the local storage settings are being used.\n-        (\"reload\"),\n+        reload:\n \n-        (\"assert-css\", (\"#toggle-all-docs\", {\"color\": |main_color|})),\n-        (\"assert-css\", (\".fqn a:nth-of-type(1)\", {\"color\": |fqn_color|})),\n-        (\"assert-css\", (\".fqn a:nth-of-type(2)\", {\"color\": |fqn_type_color|})),\n-        (\"assert-css\", (\n+        assert-css: (\"#toggle-all-docs\", {\"color\": |main_color|})\n+        assert-css: (\".fqn a:nth-of-type(1)\", {\"color\": |fqn_color|})\n+        assert-css: (\".fqn a:nth-of-type(2)\", {\"color\": |fqn_type_color|})\n+        assert-css: (\n              \".rightside .srclink\",\n              {\"color\": |src_link_color|, \"text-decoration\": \"none solid \" + |src_link_color|},\n              ALL,\n-        )),\n-        (\n-            \"compare-elements-css\",\n-            (\".rightside .srclink\", \".rightside.srclink\", [\"color\", \"text-decoration\"]),\n-        ),\n-        (\n-            \"compare-elements-css\",\n-            (\".main-heading .srclink\", \".rightside.srclink\", [\"color\", \"text-decoration\"]),\n-        ),\n+        )\n+        compare-elements-css: (\n+            \".rightside .srclink\",\n+            \".rightside.srclink\",\n+            [\"color\", \"text-decoration\"],\n+        )\n+        compare-elements-css: (\n+            \".main-heading .srclink\",\n+            \".rightside.srclink\",\n+            [\"color\", \"text-decoration\"],\n+        )\n \n-        (\"move-cursor-to\", \".main-heading .srclink\"),\n-        (\"assert-css\", (\n+        move-cursor-to: \".main-heading .srclink\"\n+        assert-css: (\n              \".main-heading .srclink\",\n              {\"color\": |src_link_color|, \"text-decoration\": \"underline solid \" + |src_link_color|},\n-        )),\n-        (\"move-cursor-to\", \".impl-items .rightside .srclink\"),\n-        (\"assert-css\", (\n+        )\n+        move-cursor-to: \".impl-items .rightside .srclink\"\n+        assert-css: (\n              \".impl-items .rightside .srclink\",\n              {\"color\": |src_link_color|, \"text-decoration\": \"none solid \" + |src_link_color|},\n-        )),\n-        (\"move-cursor-to\", \".impl-items .rightside.srclink\"),\n-        (\"assert-css\", (\n+        )\n+        move-cursor-to: \".impl-items .rightside.srclink\"\n+        assert-css: (\n              \".impl-items .rightside.srclink\",\n              {\"color\": |src_link_color|, \"text-decoration\": \"none solid \" + |src_link_color|},\n-        )),\n+        )\n \n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"),\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n         // Since we changed page, we need to set the theme again.\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n         // We reload the page so the local storage settings are being used.\n-        (\"reload\"),\n+        reload:\n \n-        (\"assert-css\", (\"#top-doc-prose-title\", {\"color\": |title_color|})),\n+        assert-css: (\"#top-doc-prose-title\", {\"color\": |title_color|})\n \n-        (\"assert-css\", (\".sidebar a\", {\"color\": |sidebar_link_color|})),\n-        (\"assert-css\", (\"h1.fqn a\", {\"color\": |title_color|})),\n+        assert-css: (\".sidebar a\", {\"color\": |sidebar_link_color|})\n+        assert-css: (\"h1.fqn a\", {\"color\": |title_color|})\n \n         // We move the cursor over the \"Implementations\" title so the anchor is displayed.\n-        (\"move-cursor-to\", \"h2#implementations\"),\n-        (\"assert-css\", (\"h2#implementations a.anchor\", {\"color\": |main_color|})),\n+        move-cursor-to: \"h2#implementations\"\n+        assert-css: (\"h2#implementations a.anchor\", {\"color\": |main_color|})\n \n         // Same thing with the impl block title.\n-        (\"move-cursor-to\", \"#impl-HeavilyDocumentedStruct\"),\n-        (\"assert-css\", (\"#impl-HeavilyDocumentedStruct a.anchor\", {\"color\": |main_color|})),\n+        move-cursor-to: \"#impl-HeavilyDocumentedStruct\"\n+        assert-css: (\"#impl-HeavilyDocumentedStruct a.anchor\", {\"color\": |main_color|})\n \n-        (\"assert-css\", (\"#title-for-struct-impl-item-doc\", {\"margin-left\": \"0px\"})),\n-    ],\n+        assert-css: (\"#title-for-struct-impl-item-doc\", {\"margin-left\": \"0px\"})\n+    },\n )\n \n call-function: ("}, {"sha": "cb550a4573a6f6c309fc66c45d807881324a29bc", "filename": "src/test/rustdoc-gui/code-color.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -9,14 +9,14 @@ show-text: true\n define-function: (\n     \"check-colors\",\n     (theme, doc_code_color, doc_inline_code_color),\n-    [\n+    block {\n         // Set the theme.\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n         // We reload the page so the local storage settings are being used.\n-        (\"reload\"),\n-        (\"assert-css\", (\".docblock pre > code\", {\"color\": |doc_code_color|}, ALL)),\n-        (\"assert-css\", (\".docblock > p > code\", {\"color\": |doc_inline_code_color|}, ALL)),\n-    ],\n+        reload:\n+        assert-css: (\".docblock pre > code\", {\"color\": |doc_code_color|}, ALL)\n+        assert-css: (\".docblock > p > code\", {\"color\": |doc_inline_code_color|}, ALL)\n+    },\n )\n \n call-function: (\"check-colors\", (\"ayu\", \"rgb(230, 225, 207)\", \"rgb(255, 180, 84)\"))"}, {"sha": "a3ef4e77b542421cfc302c1826d9d9f501cf618e", "filename": "src/test/rustdoc-gui/codeblock-tooltip.goml", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -5,32 +5,32 @@ show-text: true\n define-function: (\n     \"check-colors\",\n     (theme, background, color, border),\n-    [\n+    block {\n         // Setting the theme.\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n \n         // compile_fail block\n-        (\"assert-css\", (\n+        assert-css: (\n             \".docblock .example-wrap.compile_fail .tooltip\",\n             {\"color\": \"rgba(255, 0, 0, 0.5)\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.compile_fail\",\n             {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"},\n-        )),\n+        )\n \n-        (\"move-cursor-to\", \".docblock .example-wrap.compile_fail .tooltip\"),\n+        move-cursor-to: \".docblock .example-wrap.compile_fail .tooltip\"\n \n-        (\"assert-css\", (\n+        assert-css: (\n             \".docblock .example-wrap.compile_fail .tooltip\",\n             {\"color\": \"rgb(255, 0, 0)\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.compile_fail\",\n             {\"border-left\": \"2px solid rgb(255, 0, 0)\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.compile_fail .tooltip::after\",\n             {\n                 \"content\": '\"This example deliberately fails to compile\"',\n@@ -39,37 +39,37 @@ define-function: (\n                 \"color\": |color|,\n                 \"border\": \"1px solid \" + |border|,\n             },\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.compile_fail .tooltip::before\",\n             {\n                 \"border-width\": \"5px\",\n                 \"border-style\": \"solid\",\n                 \"border-color\": \"rgba(0, 0, 0, 0) \" + |background| + \" rgba(0, 0, 0, 0) rgba(0, 0, 0, 0)\",\n             },\n-        )),\n+        )\n \n         // should_panic block\n-        (\"assert-css\", (\n+        assert-css: (\n             \".docblock .example-wrap.should_panic .tooltip\",\n             {\"color\": \"rgba(255, 0, 0, 0.5)\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.should_panic\",\n             {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"},\n-        )),\n+        )\n \n-        (\"move-cursor-to\", \".docblock .example-wrap.should_panic .tooltip\"),\n+        move-cursor-to: \".docblock .example-wrap.should_panic .tooltip\"\n \n-        (\"assert-css\", (\n+        assert-css: (\n             \".docblock .example-wrap.should_panic .tooltip\",\n             {\"color\": \"rgb(255, 0, 0)\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.should_panic\",\n             {\"border-left\": \"2px solid rgb(255, 0, 0)\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.should_panic .tooltip::after\",\n             {\n                 \"content\": '\"This example panics\"',\n@@ -78,37 +78,37 @@ define-function: (\n                 \"color\": |color|,\n                 \"border\": \"1px solid \" + |border|,\n             },\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.should_panic .tooltip::before\",\n             {\n                 \"border-width\": \"5px\",\n                 \"border-style\": \"solid\",\n                 \"border-color\": \"rgba(0, 0, 0, 0) \" + |background| + \" rgba(0, 0, 0, 0) rgba(0, 0, 0, 0)\",\n             },\n-        )),\n+        )\n \n         // ignore block\n-        (\"assert-css\", (\n+        assert-css: (\n             \".docblock .example-wrap.ignore .tooltip\",\n             {\"color\": \"rgba(255, 142, 0, 0.6)\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.ignore\",\n             {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"},\n-        )),\n+        )\n \n-        (\"move-cursor-to\", \".docblock .example-wrap.ignore .tooltip\"),\n+        move-cursor-to: \".docblock .example-wrap.ignore .tooltip\"\n \n-        (\"assert-css\", (\n+        assert-css: (\n             \".docblock .example-wrap.ignore .tooltip\",\n             {\"color\": \"rgb(255, 142, 0)\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.ignore\",\n             {\"border-left\": \"2px solid rgb(255, 142, 0)\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.ignore .tooltip::after\",\n             {\n                 \"content\": '\"This example is not tested\"',\n@@ -117,16 +117,16 @@ define-function: (\n                 \"color\": |color|,\n                 \"border\": \"1px solid \" + |border|,\n             },\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".docblock .example-wrap.ignore .tooltip::before\",\n             {\n                 \"border-width\": \"5px\",\n                 \"border-style\": \"solid\",\n                 \"border-color\": \"rgba(0, 0, 0, 0) \" + |background| + \" rgba(0, 0, 0, 0) rgba(0, 0, 0, 0)\",\n             },\n-        )),\n-    ],\n+        )\n+    },\n )\n \n call-function: (\"check-colors\", {"}, {"sha": "69bcf5339ef2cda8231dd7aebcbe12500dee78ae", "filename": "src/test/rustdoc-gui/docblock-code-block-line-number.goml", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -11,19 +11,19 @@ assert-false: \"pre.example-line-numbers\"\n define-function: (\n     \"check-colors\",\n     (theme, color),\n-    [\n+    block {\n         // We now set the setting to show the line numbers on code examples.\n-        (\"local-storage\", {\n+        local-storage: {\n             \"rustdoc-theme\": |theme|,\n             \"rustdoc-use-system-theme\": \"false\",\n             \"rustdoc-line-numbers\": \"true\"\n-        }),\n+        }\n         // We reload to make the line numbers appear and change theme.\n-        (\"reload\"),\n+        reload:\n         // We wait for them to be added into the DOM by the JS...\n-        (\"wait-for\", \"pre.example-line-numbers\"),\n+        wait-for: \"pre.example-line-numbers\"\n         // If the test didn't fail, it means that it was found!\n-        (\"assert-css\", (\n+        assert-css: (\n             \"pre.example-line-numbers\",\n             {\n                 \"color\": |color|,\n@@ -32,8 +32,8 @@ define-function: (\n                 \"text-align\": \"right\",\n             },\n             ALL,\n-        )),\n-    ],\n+        )\n+    },\n )\n call-function: (\"check-colors\", {\n     \"theme\": \"ayu\","}, {"sha": "3dcb8abd41598887020e270a71a2ce012c59ecd5", "filename": "src/test/rustdoc-gui/docblock-table.goml", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fdocblock-table.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fdocblock-table.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-table.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -7,32 +7,32 @@ compare-elements-css: (\".impl-items .docblock table td\", \".top-doc .docblock tab\n define-function: (\n     \"check-colors\",\n     (theme, border_color, zebra_stripe_color),\n-    [\n-        (\"local-storage\", {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": |theme|}),\n-        (\"reload\"),\n-        (\"assert-css\", (\".top-doc .docblock table tbody tr:nth-child(1)\", {\n+    block {\n+        local-storage: {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": |theme|}\n+        reload:\n+        assert-css: (\".top-doc .docblock table tbody tr:nth-child(1)\", {\n             \"background-color\": \"rgba(0, 0, 0, 0)\",\n-        })),\n-        (\"assert-css\", (\".top-doc .docblock table tbody tr:nth-child(2)\", {\n+        })\n+        assert-css: (\".top-doc .docblock table tbody tr:nth-child(2)\", {\n             \"background-color\": |zebra_stripe_color|,\n-        })),\n-        (\"assert-css\", (\".top-doc .docblock table tbody tr:nth-child(3)\", {\n+        })\n+        assert-css: (\".top-doc .docblock table tbody tr:nth-child(3)\", {\n             \"background-color\": \"rgba(0, 0, 0, 0)\",\n-        })),\n-        (\"assert-css\", (\".top-doc .docblock table tbody tr:nth-child(4)\", {\n+        })\n+        assert-css: (\".top-doc .docblock table tbody tr:nth-child(4)\", {\n             \"background-color\": |zebra_stripe_color|,\n-        })),\n-        (\"assert-css\", (\".top-doc .docblock table td\", {\n+        })\n+        assert-css: (\".top-doc .docblock table td\", {\n             \"border-style\": \"solid\",\n             \"border-width\": \"1px\",\n             \"border-color\": |border_color|,\n-        })),\n-        (\"assert-css\", (\".top-doc .docblock table th\", {\n+        })\n+        assert-css: (\".top-doc .docblock table th\", {\n             \"border-style\": \"solid\",\n             \"border-width\": \"1px\",\n             \"border-color\": |border_color|,\n-        })),\n-    ]\n+        })\n+    }\n )\n \n call-function: (\"check-colors\", {"}, {"sha": "92cf050a514ff24c9dd92bdb2f3abaac67da360c", "filename": "src/test/rustdoc-gui/headers-color.goml", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -3,39 +3,39 @@\n define-function: (\n     \"check-colors\",\n     (theme, color, code_header_color, focus_background_color, headings_color),\n-    [\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"),\n+    block {\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n         // This is needed so that the text color is computed.\n-        (\"show-text\", true),\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"assert-css\", (\n+        show-text: true\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        assert-css: (\n             \".impl\",\n             {\"color\": |color|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n             ALL,\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".impl .code-header\",\n             {\"color\": |code_header_color|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n             ALL,\n-        )),\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#impl-Foo\"),\n-        (\"assert-css\", (\n+        )\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#impl-Foo\"\n+        assert-css: (\n             \"#impl-Foo\",\n             {\"color\": |color|, \"background-color\": |focus_background_color|},\n-        )),\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#method.must_use\"),\n-        (\"assert-css\", (\n+        )\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#method.must_use\"\n+        assert-css: (\n             \"#method\\.must_use\",\n             {\"color\": |color|, \"background-color\": |focus_background_color|},\n             ALL,\n-        )),\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"),\n-        (\"assert-css\", (\".small-section-header a\", {\"color\": |color|}, ALL)),\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"),\n+        )\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+        assert-css: (\".small-section-header a\", {\"color\": |color|}, ALL)\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n         // We select headings (h2, h3, h...).\n-        (\"assert-css\", (\".docblock > :not(p) > a\", {\"color\": |headings_color|}, ALL)),\n-    ],\n+        assert-css: (\".docblock > :not(p) > a\", {\"color\": |headings_color|}, ALL)\n+    },\n )\n \n call-function: ("}, {"sha": "45b3fee26e413dc054a6ded9605a9f9b32434afd", "filename": "src/test/rustdoc-gui/headings.goml", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheadings.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -157,38 +157,38 @@ goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n define-function: (\n     \"check-colors\",\n     (theme, heading_color, small_heading_color, heading_border_color),\n-    [\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"assert-css\", (\n+    block {\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        assert-css: (\n             \".top-doc .docblock h2\",\n             {\"color\": |heading_color|, \"border-bottom\": \"1px solid \" + |heading_border_color|},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".top-doc .docblock h3\",\n             {\"color\": |heading_color|, \"border-bottom\": \"1px solid \" + |heading_border_color|},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".top-doc .docblock h4\",\n             {\"color\": |heading_color|, \"border-bottom\": \"1px solid \" + |heading_border_color|},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".top-doc .docblock h5\",\n             {\"color\": |small_heading_color|, \"border-bottom-width\": \"0px\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \"#implementations-list .docblock h4\",\n             {\"color\": |heading_color|, \"border-bottom-width\": \"0px\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \"#implementations-list .docblock h5\",\n             {\"color\": |small_heading_color|, \"border-bottom-width\": \"0px\"},\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \"#implementations-list .docblock h6\",\n             {\"color\": |small_heading_color|, \"border-bottom-width\": \"0px\"},\n-        )),\n-    ],\n+        )\n+    },\n )\n call-function: (\n     \"check-colors\",\n@@ -221,11 +221,11 @@ call-function: (\n define-function: (\n     \"check-since-color\",\n     (theme),\n-    [\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|}),\n-        (\"reload\"),\n-        (\"assert-css\", (\".since\", {\"color\": \"rgb(128, 128, 128)\"}, ALL)),\n-    ],\n+    block {\n+        local-storage: {\"rustdoc-theme\": |theme|}\n+        reload:\n+        assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"}, ALL)\n+    },\n )\n \n goto: \"file://\" + |DOC_PATH| + \"/staged_api/struct.Foo.html\""}, {"sha": "5f4c1ba2f8536d83f59281e0feaa92f3d5f454d5", "filename": "src/test/rustdoc-gui/help-page.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -18,17 +18,17 @@ show-text: true\n define-function: (\n     \"check-colors\",\n     (theme, color, background, box_shadow),\n-    [\n+    block {\n         // Setting the theme.\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n         // We reload the page so the local storage settings are being used.\n-        (\"reload\"),\n-        (\"assert-css\", (\"#help kbd\", {\n+        reload:\n+        assert-css: (\"#help kbd\", {\n             \"color\": |color|,\n             \"background-color\": |background|,\n             \"box-shadow\": |box_shadow| + \" 0px -1px 0px 0px inset\",\n-        }, ALL)),\n-    ],\n+        }, ALL)\n+    },\n )\n \n call-function: (\"check-colors\", {"}, {"sha": "b182150a577d56616b2d11414c39af4a744e33ad", "filename": "src/test/rustdoc-gui/highlight-colors.goml", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fhighlight-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fhighlight-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhighlight-colors.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -21,24 +21,24 @@ define-function: (\n         comment,\n         doc_comment,\n     ),\n-    [\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"assert-css\", (\"pre.rust .kw\", {\"color\": |kw|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .kw-2\", {\"color\": |kw2|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .prelude-ty\", {\"color\": |prelude_ty|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .prelude-val\", {\"color\": |prelude_val|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .lifetime\", {\"color\": |lifetime|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .number\", {\"color\": |number|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .string\", {\"color\": |string|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .bool-val\", {\"color\": |bool_val|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .self\", {\"color\": |self|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .attr\", {\"color\": |attr|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .macro\", {\"color\": |macro|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .question-mark\", {\"color\": |question_mark|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .comment\", {\"color\": |comment|}, ALL)),\n-        (\"assert-css\", (\"pre.rust .doccomment\", {\"color\": |doc_comment|}, ALL)),\n-    ],\n+    block {\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        assert-css: (\"pre.rust .kw\", {\"color\": |kw|}, ALL)\n+        assert-css: (\"pre.rust .kw-2\", {\"color\": |kw2|}, ALL)\n+        assert-css: (\"pre.rust .prelude-ty\", {\"color\": |prelude_ty|}, ALL)\n+        assert-css: (\"pre.rust .prelude-val\", {\"color\": |prelude_val|}, ALL)\n+        assert-css: (\"pre.rust .lifetime\", {\"color\": |lifetime|}, ALL)\n+        assert-css: (\"pre.rust .number\", {\"color\": |number|}, ALL)\n+        assert-css: (\"pre.rust .string\", {\"color\": |string|}, ALL)\n+        assert-css: (\"pre.rust .bool-val\", {\"color\": |bool_val|}, ALL)\n+        assert-css: (\"pre.rust .self\", {\"color\": |self|}, ALL)\n+        assert-css: (\"pre.rust .attr\", {\"color\": |attr|}, ALL)\n+        assert-css: (\"pre.rust .macro\", {\"color\": |macro|}, ALL)\n+        assert-css: (\"pre.rust .question-mark\", {\"color\": |question_mark|}, ALL)\n+        assert-css: (\"pre.rust .comment\", {\"color\": |comment|}, ALL)\n+        assert-css: (\"pre.rust .doccomment\", {\"color\": |doc_comment|}, ALL)\n+    },\n )\n \n call-function: (\"check-colors\", {"}, {"sha": "c58e3eb7c237f5ea5dcb5e5e392034eb33171330", "filename": "src/test/rustdoc-gui/item-decl-colors.goml", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fitem-decl-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fitem-decl-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-decl-colors.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -17,22 +17,23 @@ define-function: (\n         fn_color,\n         assoc_type_color,\n     ),\n-    [\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.WithGenerics.html\"),\n-        (\"show-text\", true),\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"assert-css\", (\".item-decl .code-attribute\", {\"color\": |attr_color|}, ALL)),\n-        (\"assert-css\", (\".item-decl .trait\", {\"color\": |trait_color|}, ALL)),\n+    block {\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.WithGenerics.html\"\n+        show-text: true\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        assert-css: (\".item-decl .code-attribute\", {\"color\": |attr_color|}, ALL)\n+        assert-css: (\".item-decl .trait\", {\"color\": |trait_color|}, ALL)\n         // We need to add `code` here because otherwise it would select the parent too.\n-        (\"assert-css\", (\".item-decl code .struct\", {\"color\": |struct_color|}, ALL)),\n-        (\"assert-css\", (\".item-decl .enum\", {\"color\": |enum_color|}, ALL)),\n-        (\"assert-css\", (\".item-decl .primitive\", {\"color\": |primitive_color|}, ALL)),\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/trait.TraitWithoutGenerics.html\"),\n-        (\"assert-css\", (\".item-decl .constant\", {\"color\": |constant_color|}, ALL)),\n-        (\"assert-css\", (\".item-decl .fn\", {\"color\": |fn_color|}, ALL)),\n-        (\"assert-css\", (\".item-decl .associatedtype\", {\"color\": |assoc_type_color|}, ALL)),\n-    ],\n+        assert-css: (\".item-decl code .struct\", {\"color\": |struct_color|}, ALL)\n+        assert-css: (\".item-decl .enum\", {\"color\": |enum_color|}, ALL)\n+        assert-css: (\".item-decl .primitive\", {\"color\": |primitive_color|}, ALL)\n+\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/trait.TraitWithoutGenerics.html\"\n+        assert-css: (\".item-decl .constant\", {\"color\": |constant_color|}, ALL)\n+        assert-css: (\".item-decl .fn\", {\"color\": |fn_color|}, ALL)\n+        assert-css: (\".item-decl .associatedtype\", {\"color\": |assoc_type_color|}, ALL)\n+    },\n )\n \n call-function: ("}, {"sha": "8ee3ccf4a211897251aceeee96807847dc257bb3", "filename": "src/test/rustdoc-gui/jump-to-def-background.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -4,17 +4,17 @@ goto: \"file://\" + |DOC_PATH| + \"/src/link_to_definition/lib.rs.html\"\n define-function: (\n     \"check-background-color\",\n     (theme, background_color),\n-    [\n+    block {\n         // Set the theme.\n-        (\"local-storage\", { \"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\" }),\n+        local-storage: { \"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\" }\n         // We reload the page so the local storage settings are being used.\n-        (\"reload\"),\n-        (\"assert-css\", (\n+        reload:\n+        assert-css: (\n             \"body.source .example-wrap pre.rust a\",\n             {\"background-color\": |background_color|},\n             ALL,\n-        )),\n-    ],\n+        )\n+    },\n )\n \n call-function: (\"check-background-color\", (\"ayu\", \"rgb(51, 51, 51)\"))"}, {"sha": "14f7d99351a646364d9ba5cdf9e58324fc6cd940", "filename": "src/test/rustdoc-gui/links-color.goml", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -8,38 +8,38 @@ define-function: (\n     \"check-colors\",\n     (theme, mod, macro, struct, enum, trait, fn, type, union, keyword,\n      sidebar, sidebar_current, sidebar_current_background),\n-    [\n-        (\"local-storage\", {\n+    block {\n+        local-storage: {\n             \"rustdoc-theme\": |theme|,\n             \"rustdoc-use-system-theme\": \"false\",\n-        }),\n-        (\"reload\"),\n+        }\n+        reload:\n         // Checking results colors.\n-        (\"assert-css\", (\".item-table .mod\", {\"color\": |mod|}, ALL)),\n-        (\"assert-css\", (\".item-table .macro\", {\"color\": |macro|}, ALL)),\n-        (\"assert-css\", (\".item-table .struct\", {\"color\": |struct|}, ALL)),\n-        (\"assert-css\", (\".item-table .enum\", {\"color\": |enum|}, ALL)),\n-        (\"assert-css\", (\".item-table .trait\", {\"color\": |trait|}, ALL)),\n-        (\"assert-css\", (\".item-table .fn\", {\"color\": |fn|}, ALL)),\n-        (\"assert-css\", (\".item-table .type\", {\"color\": |type|}, ALL)),\n-        (\"assert-css\", (\".item-table .union\", {\"color\": |union|}, ALL)),\n-        (\"assert-css\", (\".item-table .keyword\", {\"color\": |keyword|}, ALL)),\n+        assert-css: (\".item-table .mod\", {\"color\": |mod|}, ALL)\n+        assert-css: (\".item-table .macro\", {\"color\": |macro|}, ALL)\n+        assert-css: (\".item-table .struct\", {\"color\": |struct|}, ALL)\n+        assert-css: (\".item-table .enum\", {\"color\": |enum|}, ALL)\n+        assert-css: (\".item-table .trait\", {\"color\": |trait|}, ALL)\n+        assert-css: (\".item-table .fn\", {\"color\": |fn|}, ALL)\n+        assert-css: (\".item-table .type\", {\"color\": |type|}, ALL)\n+        assert-css: (\".item-table .union\", {\"color\": |union|}, ALL)\n+        assert-css: (\".item-table .keyword\", {\"color\": |keyword|}, ALL)\n         // Checking sidebar elements.\n-        (\"assert-css\", (\n+        assert-css: (\n             \".sidebar-elems a:not(.current)\",\n             {\"color\": |sidebar|, \"background-color\": \"rgba(0, 0, 0, 0)\", \"font-weight\": \"400\"},\n             ALL,\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".sidebar-elems a.current\",\n             {\n                 \"color\": |sidebar_current|,\n                 \"background-color\": |sidebar_current_background|,\n                 \"font-weight\": \"500\",\n             },\n             ALL,\n-        )),\n-    ],\n+        )\n+    },\n )\n \n call-function: ("}, {"sha": "b4fa7d0dbf0e2a69ec820ba0675d6af5f9106dd6", "filename": "src/test/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -123,40 +123,40 @@ assert-count: (\"//*[@class='notable popover']\", 0)\n define-function: (\n     \"check-colors\",\n     (theme, header_color, content_color, type_color, trait_color),\n-    [\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.NotableStructWithLongName.html\"),\n+    block {\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.NotableStructWithLongName.html\"\n         // This is needed to ensure that the text color is computed.\n-        (\"show-text\", true),\n+        show-text: true\n \n         // Setting the theme.\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n         // We reload the page so the local storage settings are being used.\n-        (\"reload\"),\n+        reload:\n \n-        (\"move-cursor-to\", \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"),\n-        (\"assert-count\", (\".notable.popover\", 1)),\n+        move-cursor-to: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+        assert-count: (\".notable.popover\", 1)\n \n-        (\"assert-css\", (\n+        assert-css: (\n              \".notable.popover h3\",\n              {\"color\": |header_color|},\n              ALL,\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n              \".notable.popover pre\",\n              {\"color\": |content_color|},\n              ALL,\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n              \".notable.popover pre a.struct\",\n              {\"color\": |type_color|},\n              ALL,\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n              \".notable.popover pre a.trait\",\n              {\"color\": |trait_color|},\n              ALL,\n-        )),\n-    ]\n+        )\n+    },\n )\n \n call-function: ("}, {"sha": "8dcb62c10aaac9a4ab80f0f3efffab03a59d2cc3", "filename": "src/test/rustdoc-gui/run-on-hover.goml", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Frun-on-hover.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Frun-on-hover.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Frun-on-hover.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -8,27 +8,27 @@ show-text: true\n define-function: (\n     \"check-run-button\",\n     (theme, color, background, hover_color, hover_background),\n-    [\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"assert-css\", (\".test-arrow\", {\"visibility\": \"hidden\"})),\n-        (\"move-cursor-to\", \".example-wrap\"),\n-        (\"assert-css\", (\".test-arrow\", {\n+    block {\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        assert-css: (\".test-arrow\", {\"visibility\": \"hidden\"})\n+        move-cursor-to: \".example-wrap\"\n+        assert-css: (\".test-arrow\", {\n             \"visibility\": \"visible\",\n             \"color\": |color|,\n             \"background-color\": |background|,\n             \"font-size\": \"22px\",\n             \"border-radius\": \"5px\",\n-        })),\n-        (\"move-cursor-to\", \".test-arrow\"),\n-        (\"assert-css\", (\".test-arrow:hover\", {\n+        })\n+        move-cursor-to: \".test-arrow\"\n+        assert-css: (\".test-arrow:hover\", {\n             \"visibility\": \"visible\",\n             \"color\": |hover_color|,\n             \"background-color\": |hover_background|,\n             \"font-size\": \"22px\",\n             \"border-radius\": \"5px\",\n-        })),\n-    ],\n+        })\n+    },\n )\n \n call-function: (\"check-run-button\", {"}, {"sha": "e94dc9a964ddde18e940a830c3a09a3e99f117d1", "filename": "src/test/rustdoc-gui/rust-logo.goml", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -4,29 +4,29 @@ goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n define-function: (\n     \"check-logo\",\n     (theme, filter),\n-    [\n+    block {\n         // Going to the doc page.\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"),\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n         // Changing theme.\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"assert-css\", (\".rust-logo\", {\"filter\": |filter|})),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        assert-css: (\".rust-logo\", {\"filter\": |filter|})\n         // Going to the source code page.\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"),\n+        goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n         // Changing theme (since it's local files, the local storage works by folder).\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"assert-css\", (\".rust-logo\", {\"filter\": |filter|})),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        assert-css: (\".rust-logo\", {\"filter\": |filter|})\n         // Now we check that the non-rust logos don't have a CSS filter set.\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/huge_logo/index.html\"),\n+        goto: \"file://\" + |DOC_PATH| + \"/huge_logo/index.html\"\n         // Changing theme on the new page (again...).\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n         // Check there is no rust logo\n-        (\"assert-false\", \".rust-logo\"),\n+        assert-false: \".rust-logo\"\n         // Check there is no filter.\n-        (\"assert-css\", (\".sidebar .logo-container img\", {\"filter\": \"none\"})),\n-    ],\n+        assert-css: (\".sidebar .logo-container img\", {\"filter\": \"none\"})\n+    },\n )\n \n call-function: ("}, {"sha": "40f31b2771b258f4d995510d45fc40836c4b2262", "filename": "src/test/rustdoc-gui/scrape-examples-color.goml", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-color.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -6,29 +6,29 @@ define-function: (\n     \"check-colors\",\n     (theme, highlight, highlight_focus, help_border, help_color, help_hover_border,\n      help_hover_color),\n-    [\n-        (\"local-storage\", { \"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\", }),\n-        (\"reload\"),\n-        (\"wait-for\", \".more-examples-toggle\"),\n-        (\"assert-css\", (\".scraped-example .example-wrap .rust span.highlight:not(.focus)\", {\n+    block {\n+        local-storage: { \"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\", }\n+        reload:\n+        wait-for: \".more-examples-toggle\"\n+        assert-css: (\".scraped-example .example-wrap .rust span.highlight:not(.focus)\", {\n             \"background-color\": |highlight|,\n-        }, ALL)),\n-        (\"assert-css\", (\".scraped-example .example-wrap .rust span.highlight.focus\", {\n+        }, ALL)\n+        assert-css: (\".scraped-example .example-wrap .rust span.highlight.focus\", {\n             \"background-color\": |highlight_focus|,\n-        }, ALL)),\n+        }, ALL)\n \n-        (\"assert-css\", (\".scraped-example-list .scrape-help\", {\n+        assert-css: (\".scraped-example-list .scrape-help\", {\n             \"border-color\": |help_border|,\n             \"color\": |help_color|,\n-        })),\n-        (\"move-cursor-to\", \".scraped-example-list .scrape-help\"),\n-        (\"assert-css\", (\".scraped-example-list .scrape-help:hover\", {\n+        })\n+        move-cursor-to: \".scraped-example-list .scrape-help\"\n+        assert-css: (\".scraped-example-list .scrape-help:hover\", {\n             \"border-color\": |help_hover_border|,\n             \"color\": |help_hover_color|,\n-        })),\n+        })\n         // Moving the cursor to another item to not break next runs.\n-        (\"move-cursor-to\", \".search-input\"),\n-    ]\n+        move-cursor-to: \".search-input\"\n+    }\n )\n \n call-function: (\"check-colors\", {"}, {"sha": "2d5df6a5d25e0d7efdaff29f7d7f2704e1f2f222", "filename": "src/test/rustdoc-gui/scrape-examples-toggle.goml", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-toggle.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-toggle.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-toggle.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -6,24 +6,24 @@ show-text: true\n define-function: (\n     \"check-color\",\n     (theme, toggle_line_color, toggle_line_hover_color),\n-    [\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n+    block {\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n \n         // Clicking \"More examples...\" will open additional examples\n-        (\"assert-attribute-false\", (\".more-examples-toggle\", {\"open\": \"\"})),\n-        (\"click\", \".more-examples-toggle\"),\n-        (\"assert-attribute\", (\".more-examples-toggle\", {\"open\": \"\"})),\n+        assert-attribute-false: (\".more-examples-toggle\", {\"open\": \"\"})\n+        click: \".more-examples-toggle\"\n+        assert-attribute: (\".more-examples-toggle\", {\"open\": \"\"})\n \n-        (\"assert-css\", (\".toggle-line-inner\", {\"background-color\": |toggle_line_color|}, ALL)),\n-        (\"move-cursor-to\", \".toggle-line\"),\n-        (\"assert-css\", (\n+        assert-css: (\".toggle-line-inner\", {\"background-color\": |toggle_line_color|}, ALL)\n+        move-cursor-to: \".toggle-line\"\n+        assert-css: (\n             \".toggle-line:hover .toggle-line-inner\",\n             {\"background-color\": |toggle_line_hover_color|},\n-        )),\n+        )\n         // Moving cursor away from the toggle line to prevent disrupting next test.\n-        (\"move-cursor-to\", \".search-input\"),\n-    ],\n+        move-cursor-to: \".search-input\"\n+    },\n )\n \n call-function: (\"check-color\", {"}, {"sha": "b76a44fa992e636a1532c9d550bab4419b2ffb79", "filename": "src/test/rustdoc-gui/search-no-result.goml", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsearch-no-result.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsearch-no-result.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-no-result.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -5,18 +5,18 @@ show-text: true\n define-function: (\n     \"check-no-result\",\n     (theme, link, link_hover),\n-    [\n+    block {\n         // Changing theme.\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"wait-for\", \"#results\"),\n-        (\"assert\", \".search-failed.active\"),\n-        (\"assert-css\", (\"#results a\", {\"color\": |link|}, ALL)),\n-        (\"move-cursor-to\", \"#results a\"),\n-        (\"assert-css\", (\"#results a:hover\", {\"color\": |link_hover|})),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        wait-for: \"#results\"\n+        assert: \".search-failed.active\"\n+        assert-css: (\"#results a\", {\"color\": |link|}, ALL)\n+        move-cursor-to: \"#results a\"\n+        assert-css: (\"#results a:hover\", {\"color\": |link_hover|})\n         // Moving the cursor to some other place to not create issues with next function run.\n-        (\"move-cursor-to\", \".search-input\"),\n-    ]\n+        move-cursor-to: \".search-input\"\n+    },\n )\n \n call-function: (\"check-no-result\", {"}, {"sha": "d6d54ec4bee9bee2aa5be69ddb3a6d286511285d", "filename": "src/test/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 35, "deletions": 56, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -3,53 +3,32 @@\n define-function: (\n     \"check-result-color\",\n     (result_kind, color, hover_color),\n-    [\n-        (\n-            \"assert-css\",\n-            (\".result-\" + |result_kind| + \" .\" + |result_kind|, {\"color\": |color|}, ALL),\n-        ),\n-        (\n-            \"assert-css\",\n-            (\n-                \".result-\" + |result_kind|,\n-                {\"color\": |entry_color|, \"background-color\": |background_color|},\n-            ),\n-        ),\n-        (\n-            \"move-cursor-to\",\n+    block {\n+        assert-css: (\".result-\" + |result_kind| + \" .\" + |result_kind|, {\"color\": |color|}, ALL)\n+        assert-css: (\n             \".result-\" + |result_kind|,\n-        ),\n-        (\n-            \"assert-css\",\n-            (\n-                \".result-\" + |result_kind| + \":hover\",\n-                {\"color\": |hover_entry_color|, \"background-color\": |hover_background_color|},\n-            ),\n-        ),\n-        (\n-            \"assert-css\",\n-            (\".result-\" + |result_kind| + \":hover .\" + |result_kind|, {\"color\": |hover_color|}),\n-        ),\n-        (\n-            \"move-cursor-to\",\n-            \".search-input\",\n-        ),\n-        (\n-            \"focus\",\n-            \".result-\" + |result_kind|,\n-        ),\n-        (\n-            \"assert-css\",\n-            (\n-                \".result-\" + |result_kind| + \":focus\",\n-                {\"color\": |hover_entry_color|, \"background-color\": |hover_background_color|},\n-            ),\n-        ),\n-        (\n-            \"assert-css\",\n-            (\".result-\" + |result_kind| + \":focus .\" + |result_kind|, {\"color\": |hover_color|}),\n-        ),\n-    ],\n+            {\"color\": |entry_color|, \"background-color\": |background_color|},\n+        )\n+        move-cursor-to: \".result-\" + |result_kind|\n+        assert-css: (\n+            \".result-\" + |result_kind| + \":hover\",\n+            {\"color\": |hover_entry_color|, \"background-color\": |hover_background_color|},\n+        )\n+        assert-css: (\n+            \".result-\" + |result_kind| + \":hover .\" + |result_kind|,\n+            {\"color\": |hover_color|},\n+        )\n+        move-cursor-to: \".search-input\"\n+        focus: \".result-\" + |result_kind|\n+        assert-css: (\n+            \".result-\" + |result_kind| + \":focus\",\n+            {\"color\": |hover_entry_color|, \"background-color\": |hover_background_color|},\n+        )\n+        assert-css: (\n+            \".result-\" + |result_kind| + \":focus .\" + |result_kind|,\n+            {\"color\": |hover_color|},\n+        )\n+    },\n )\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html?search=coo\"\n@@ -389,20 +368,20 @@ show-text: true\n define-function: (\n     \"check-alias\",\n     (theme, alias, grey),\n-    [\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"write\", (\".search-input\", \"thisisanalias\")),\n+    block {\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        write: (\".search-input\", \"thisisanalias\")\n         // To be SURE that the search will be run.\n-        (\"press-key\", 'Enter'),\n+        press-key: 'Enter'\n         // Waiting for the search results to appear...\n-        (\"wait-for\", \"#search-tabs\"),\n+        wait-for: \"#search-tabs\"\n         // Checking that the colors for the alias element are the ones expected.\n-        (\"assert-css\", (\".result-name > .alias\", {\"color\": |alias|})),\n-        (\"assert-css\", (\".result-name > .alias > .grey\", {\"color\": |grey|})),\n+        assert-css: (\".result-name > .alias\", {\"color\": |alias|})\n+        assert-css: (\".result-name > .alias > .grey\", {\"color\": |grey|})\n         // Leave the search results to prevent reloading with an already filled search input.\n-        (\"press-key\", \"Escape\"),\n-    ],\n+        press-key: \"Escape\"\n+    },\n )\n \n call-function: (\"check-alias\", {"}, {"sha": "43e608228d8e32d3159b0108d27b8e44f8b2be92", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -42,17 +42,17 @@ show-text: true\n define-function: (\n     \"check-filter\",\n     (theme, border, filter, hover_border, hover_filter),\n-    [\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"wait-for\", \"#crate-search\"),\n-        (\"assert-css\", (\"#crate-search\", {\"border\": \"1px solid \" + |border|})),\n-        (\"assert-css\", (\"#crate-search-div::after\", {\"filter\": |filter|})),\n-        (\"move-cursor-to\", \"#crate-search\"),\n-        (\"assert-css\", (\"#crate-search\", {\"border\": \"1px solid \" + |hover_border|})),\n-        (\"assert-css\", (\"#crate-search-div::after\", {\"filter\": |hover_filter|})),\n-        (\"move-cursor-to\", \".search-input\"),\n-    ],\n+    block {\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        wait-for: \"#crate-search\"\n+        assert-css: (\"#crate-search\", {\"border\": \"1px solid \" + |border|})\n+        assert-css: (\"#crate-search-div::after\", {\"filter\": |filter|})\n+        move-cursor-to: \"#crate-search\"\n+        assert-css: (\"#crate-search\", {\"border\": \"1px solid \" + |hover_border|})\n+        assert-css: (\"#crate-search-div::after\", {\"filter\": |hover_filter|})\n+        move-cursor-to: \".search-input\"\n+    },\n )\n \n call-function: (\"check-filter\", {"}, {"sha": "36958f7004446e2dfe67145ab15e9ba871daa329", "filename": "src/test/rustdoc-gui/search-tab.goml", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsearch-tab.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsearch-tab.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-tab.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -7,35 +7,35 @@ define-function: (\n     (theme, background, background_selected, background_hover, border_bottom,\n      border_bottom_selected, border_bottom_hover, border_top, border_top_selected,\n      border_top_hover),\n-    [\n+    block {\n         // Setting the theme.\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n \n         // These two commands are used to be sure the search will be run.\n-        (\"focus\", \".search-input\"),\n-        (\"press-key\", \"Enter\"),\n+        focus: \".search-input\"\n+        press-key: \"Enter\"\n \n-        (\"wait-for\", \"#search-tabs\"),\n-        (\"assert-css\", (\"#search-tabs > button:not(.selected)\", {\n+        wait-for: \"#search-tabs\"\n+        assert-css: (\"#search-tabs > button:not(.selected)\", {\n             \"background-color\": |background|,\n             \"border-bottom\": |border_bottom|,\n             \"border-top\": |border_top|,\n-        })),\n-        (\"assert-css\", (\"#search-tabs > button.selected\", {\n+        })\n+        assert-css: (\"#search-tabs > button.selected\", {\n             \"background-color\": |background_selected|,\n             \"border-bottom\": |border_bottom_selected|,\n             \"border-top\": |border_top_selected|,\n-        })),\n-        (\"move-cursor-to\", \"#search-tabs > button:not(.selected)\"),\n-        (\"assert-css\", (\"#search-tabs > button:not(.selected):hover\", {\n+        })\n+        move-cursor-to: \"#search-tabs > button:not(.selected)\"\n+        assert-css: (\"#search-tabs > button:not(.selected):hover\", {\n             \"background-color\": |background_hover|,\n             \"border-bottom\": |border_bottom_hover|,\n             \"border-top\": |border_top_hover|,\n-        })),\n+        })\n         // To prevent disrupting next run of this function.\n-        (\"move-cursor-to\", \".search-input\"),\n-    ],\n+        move-cursor-to: \".search-input\"\n+    },\n )\n \n call-function: (\"check-colors\", {"}, {"sha": "1d5fdb7a48fc71e42c04b99a2daf1381c2fdec21", "filename": "src/test/rustdoc-gui/sidebar-links-color.goml", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsidebar-links-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsidebar-links-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-links-color.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -12,80 +12,80 @@ define-function: (\n         trait_hover_background, fn, fn_hover, fn_hover_background, type, type_hover,\n         type_hover_background, keyword, keyword_hover, keyword_hover_background,\n     ),\n-    [\n-        (\"local-storage\", { \"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\" }),\n-        (\"reload\"),\n+    block {\n+        local-storage: { \"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\" }\n+        reload:\n         // Struct\n-        (\"assert-css\", (\n+        assert-css: (\n             \".sidebar .block.struct a:not(.current)\",\n             {\"color\": |struct|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-        )),\n-        (\"move-cursor-to\", \".sidebar .block.struct a:not(.current)\"),\n-        (\"assert-css\", (\n+        )\n+        move-cursor-to: \".sidebar .block.struct a:not(.current)\"\n+        assert-css: (\n             \".sidebar .block.struct a:hover\",\n             {\"color\": |struct_hover|, \"background-color\": |struct_hover_background|},\n-        )),\n+        )\n         // Enum\n-        (\"assert-css\", (\n+        assert-css: (\n             \".sidebar .block.enum a\",\n             {\"color\": |enum|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-        )),\n-        (\"move-cursor-to\", \".sidebar .block.enum a\"),\n-        (\"assert-css\", (\n+        )\n+        move-cursor-to: \".sidebar .block.enum a\"\n+        assert-css: (\n             \".sidebar .block.enum a:hover\",\n             {\"color\": |enum_hover|, \"background-color\": |enum_hover_background|},\n-        )),\n+        )\n         // Union\n-        (\"assert-css\", (\n+        assert-css: (\n             \".sidebar .block.union a\",\n             {\"color\": |union|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-        )),\n-        (\"move-cursor-to\", \".sidebar .block.union a\"),\n-        (\"assert-css\", (\n+        )\n+        move-cursor-to: \".sidebar .block.union a\"\n+        assert-css: (\n             \".sidebar .block.union a:hover\",\n             {\"color\": |union_hover|, \"background-color\": |union_hover_background|},\n-        )),\n+        )\n         // Trait\n-        (\"assert-css\", (\n+        assert-css: (\n             \".sidebar .block.trait a\",\n             {\"color\": |trait|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-        )),\n-        (\"move-cursor-to\", \".sidebar .block.trait a\"),\n-        (\"assert-css\", (\n+        )\n+        move-cursor-to: \".sidebar .block.trait a\"\n+        assert-css: (\n             \".sidebar .block.trait a:hover\",\n             {\"color\": |trait_hover|, \"background-color\": |trait_hover_background|},\n-        )),\n+        )\n         // Function\n-        (\"assert-css\", (\n+        assert-css: (\n             \".sidebar .block.fn a\",\n             {\"color\": |fn|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-        )),\n-        (\"move-cursor-to\", \".sidebar .block.fn a\"),\n-        (\"assert-css\", (\n+        )\n+        move-cursor-to: \".sidebar .block.fn a\"\n+        assert-css: (\n             \".sidebar .block.fn a:hover\",\n             {\"color\": |fn_hover|, \"background-color\": |fn_hover_background|},\n-        )),\n+        )\n         // Type definition\n-        (\"assert-css\", (\n+        assert-css: (\n             \".sidebar .block.type a\",\n             {\"color\": |type|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-        )),\n-        (\"move-cursor-to\", \".sidebar .block.type a\"),\n-        (\"assert-css\", (\n+        )\n+        move-cursor-to: \".sidebar .block.type a\"\n+        assert-css: (\n             \".sidebar .block.type a:hover\",\n             {\"color\": |type_hover|, \"background-color\": |type_hover_background|},\n-        )),\n+        )\n         // Keyword\n-        (\"assert-css\", (\n+        assert-css: (\n             \".sidebar .block.keyword a\",\n             {\"color\": |keyword|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-        )),\n-        (\"move-cursor-to\", \".sidebar .block.keyword a\"),\n-        (\"assert-css\", (\n+        )\n+        move-cursor-to: \".sidebar .block.keyword a\"\n+        assert-css: (\n             \".sidebar .block.keyword a:hover\",\n             {\"color\": |keyword_hover|, \"background-color\": |keyword_hover_background|},\n-        )),\n-    ]\n+        )\n+    }\n )\n \n call-function: ("}, {"sha": "d5f4b619629e3caada7fb31ee5f032b70f1e3e8c", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -58,17 +58,17 @@ show-text: true\n define-function: (\n     \"check-colors\",\n     (theme, color, background),\n-    [\n-        (\"local-storage\", {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": |theme|}),\n-        (\"reload\"),\n+    block {\n+        local-storage: {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": |theme|}\n+        reload:\n \n         // Open the sidebar menu.\n-        (\"click\", \".sidebar-menu-toggle\"),\n-        (\"assert-css\", (\".sidebar\", {\n+        click: \".sidebar-menu-toggle\"\n+        assert-css: (\".sidebar\", {\n             \"background-color\": |background|,\n             \"color\": |color|,\n-        })),\n-    ],\n+        })\n+    },\n )\n \n call-function: (\"check-colors\", {"}, {"sha": "d74d9420389f04b39031ac77e993bacc83e6fb56", "filename": "src/test/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -35,88 +35,88 @@ define-function: (\n         theme, color, color_hover, background, background_hover, background_toggle,\n         background_toggle_hover,\n     ),\n-    [\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"wait-for-css\", (\"#src-sidebar-toggle\", {\"visibility\": \"visible\"})),\n-        (\"assert-css\", (\n+    block {\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        wait-for-css: (\"#src-sidebar-toggle\", {\"visibility\": \"visible\"})\n+        assert-css: (\n             \"#source-sidebar details[open] > .files a.selected\",\n             {\"color\": |color_hover|, \"background-color\": |background|},\n-        )),\n+        )\n \n         // Without hover or focus.\n-        (\"assert-css\", (\"#src-sidebar-toggle > button\", {\"background-color\": |background_toggle|})),\n+        assert-css: (\"#src-sidebar-toggle > button\", {\"background-color\": |background_toggle|})\n         // With focus.\n-        (\"focus\", \"#src-sidebar-toggle > button\"),\n-        (\"assert-css\", (\n+        focus: \"#src-sidebar-toggle > button\"\n+        assert-css: (\n             \"#src-sidebar-toggle > button:focus\",\n             {\"background-color\": |background_toggle_hover|},\n-        )),\n-        (\"focus\", \".search-input\"),\n+        )\n+        focus: \".search-input\"\n         // With hover.\n-        (\"move-cursor-to\", \"#src-sidebar-toggle > button\"),\n-        (\"assert-css\", (\n+        move-cursor-to: \"#src-sidebar-toggle > button\"\n+        assert-css: (\n             \"#src-sidebar-toggle > button:hover\",\n             {\"background-color\": |background_toggle_hover|},\n-        )),\n+        )\n \n         // Without hover or focus.\n-        (\"assert-css\", (\n+        assert-css: (\n             \"#source-sidebar details[open] > .files a:not(.selected)\",\n             {\"color\": |color|, \"background-color\": |background_toggle|},\n-        )),\n+        )\n         // With focus.\n-        (\"focus\", \"#source-sidebar details[open] > .files a:not(.selected)\"),\n-        (\"wait-for-css\", (\n+        focus: \"#source-sidebar details[open] > .files a:not(.selected)\"\n+        wait-for-css: (\n             \"#source-sidebar details[open] > .files a:not(.selected):focus\",\n             {\"color\": |color_hover|, \"background-color\": |background_hover|},\n-        )),\n-        (\"focus\", \".search-input\"),\n+        )\n+        focus: \".search-input\"\n         // With hover.\n-        (\"move-cursor-to\", \"#source-sidebar details[open] > .files a:not(.selected)\"),\n-        (\"assert-css\", (\n+        move-cursor-to: \"#source-sidebar details[open] > .files a:not(.selected)\"\n+        assert-css: (\n             \"#source-sidebar details[open] > .files a:not(.selected):hover\",\n             {\"color\": |color_hover|, \"background-color\": |background_hover|},\n-        )),\n+        )\n \n         // Without hover or focus.\n-        (\"assert-css\", (\n+        assert-css: (\n             \"#source-sidebar .dir-entry summary\",\n             {\"color\": |color|, \"background-color\": |background_toggle|},\n-        )),\n+        )\n         // With focus.\n-        (\"focus\", \"#source-sidebar .dir-entry summary\"),\n-        (\"wait-for-css\", (\n+        focus: \"#source-sidebar .dir-entry summary\"\n+        wait-for-css: (\n             \"#source-sidebar .dir-entry summary:focus\",\n             {\"color\": |color_hover|, \"background-color\": |background_hover|},\n-        )),\n-        (\"focus\", \".search-input\"),\n+        )\n+        focus: \".search-input\"\n         // With hover.\n-        (\"move-cursor-to\", \"#source-sidebar .dir-entry summary\"),\n-        (\"assert-css\", (\n+        move-cursor-to: \"#source-sidebar .dir-entry summary\"\n+        assert-css: (\n             \"#source-sidebar .dir-entry summary:hover\",\n             {\"color\": |color_hover|, \"background-color\": |background_hover|},\n-        )),\n+        )\n \n         // Without hover or focus.\n-        (\"assert-css\", (\n+        assert-css: (\n             \"#source-sidebar details[open] > .folders > details > summary\",\n             {\"color\": |color|, \"background-color\": |background_toggle|},\n-        )),\n+        )\n         // With focus.\n-        (\"focus\", \"#source-sidebar details[open] > .folders > details > summary\"),\n-        (\"wait-for-css\", (\n+        focus: \"#source-sidebar details[open] > .folders > details > summary\"\n+        wait-for-css: (\n             \"#source-sidebar details[open] > .folders > details > summary:focus\",\n             {\"color\": |color_hover|, \"background-color\": |background_hover|},\n-        )),\n-        (\"focus\", \".search-input\"),\n+        )\n+        focus: \".search-input\"\n         // With hover.\n-        (\"move-cursor-to\", \"#source-sidebar details[open] > .folders > details > summary\"),\n-        (\"assert-css\", (\n+        move-cursor-to: \"#source-sidebar details[open] > .folders > details > summary\"\n+        assert-css: (\n             \"#source-sidebar details[open] > .folders > details > summary:hover\",\n             {\"color\": |color_hover|, \"background-color\": |background_hover|},\n-        )),\n-    ],\n+        )\n+    },\n )\n \n call-function: (\"check-colors\", {"}, {"sha": "3ee83d6f475acaa3bea3ce5efd027ece79859149", "filename": "src/test/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -7,43 +7,43 @@ show-text: true\n define-function: (\n     \"check-colors\",\n     (theme, color, background_color),\n-    [\n-        (\"local-storage\", {\n+    block {\n+        local-storage: {\n             \"rustdoc-theme\": |theme|,\n             \"rustdoc-use-system-theme\": \"false\",\n-        }),\n-        (\"reload\"),\n+        }\n+        reload:\n         // Checking results colors.\n-        (\"assert-css\", (\".source .sidebar\", {\n-        \t\"color\": |color|,\n-        \t\"background-color\": |background_color|\n-        }, ALL)),\n-    ],\n+        assert-css: (\".source .sidebar\", {\n+            \"color\": |color|,\n+            \"background-color\": |background_color|\n+        }, ALL)\n+    },\n )\n \n call-function: (\n-\t\"check-colors\",\n-\t{\n-\t\t\"theme\": \"ayu\",\n-\t\t\"color\": \"rgb(197, 197, 197)\",\n-\t\t\"background_color\": \"rgb(20, 25, 31)\",\n-\t}\n+    \"check-colors\",\n+    {\n+        \"theme\": \"ayu\",\n+        \"color\": \"rgb(197, 197, 197)\",\n+        \"background_color\": \"rgb(20, 25, 31)\",\n+    }\n )\n call-function: (\n-\t\"check-colors\",\n-\t{\n-\t\t\"theme\": \"dark\",\n-\t\t\"color\": \"rgb(221, 221, 221)\",\n-\t\t\"background_color\": \"rgb(80, 80, 80)\",\n-\t}\n+    \"check-colors\",\n+    {\n+        \"theme\": \"dark\",\n+        \"color\": \"rgb(221, 221, 221)\",\n+        \"background_color\": \"rgb(80, 80, 80)\",\n+    }\n )\n call-function: (\n-\t\"check-colors\",\n-\t{\n-\t\t\"theme\": \"light\",\n-\t\t\"color\": \"rgb(0, 0, 0)\",\n-\t\t\"background_color\": \"rgb(245, 245, 245)\",\n-\t}\n+    \"check-colors\",\n+    {\n+        \"theme\": \"light\",\n+        \"color\": \"rgb(0, 0, 0)\",\n+        \"background_color\": \"rgb(245, 245, 245)\",\n+    }\n )\n \n // Next, desktop mode layout."}, {"sha": "9db7f59695bb2be4b6573b6e19154b5f9e1322fb", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -7,43 +7,43 @@ show-text: true\n define-function: (\n     \"check-colors\",\n     (theme, color, background_color),\n-    [\n-        (\"local-storage\", {\n+    block {\n+        local-storage: {\n             \"rustdoc-theme\": |theme|,\n             \"rustdoc-use-system-theme\": \"false\",\n-        }),\n-        (\"reload\"),\n+        }\n+        reload:\n         // Checking results colors.\n-        (\"assert-css\", (\".sidebar\", {\n-        \t\"color\": |color|,\n-        \t\"background-color\": |background_color|\n-        }, ALL)),\n-    ],\n+        assert-css: (\".sidebar\", {\n+            \"color\": |color|,\n+            \"background-color\": |background_color|\n+        }, ALL)\n+    },\n )\n \n call-function: (\n-\t\"check-colors\",\n-\t{\n-\t\t\"theme\": \"ayu\",\n-\t\t\"color\": \"rgb(197, 197, 197)\",\n-\t\t\"background_color\": \"rgb(20, 25, 31)\",\n-\t}\n+    \"check-colors\",\n+    {\n+        \"theme\": \"ayu\",\n+        \"color\": \"rgb(197, 197, 197)\",\n+        \"background_color\": \"rgb(20, 25, 31)\",\n+    }\n )\n call-function: (\n-\t\"check-colors\",\n-\t{\n-\t\t\"theme\": \"dark\",\n-\t\t\"color\": \"rgb(221, 221, 221)\",\n-\t\t\"background_color\": \"rgb(80, 80, 80)\",\n-\t}\n+    \"check-colors\",\n+    {\n+        \"theme\": \"dark\",\n+        \"color\": \"rgb(221, 221, 221)\",\n+        \"background_color\": \"rgb(80, 80, 80)\",\n+    }\n )\n call-function: (\n-\t\"check-colors\",\n-\t{\n-\t\t\"theme\": \"light\",\n-\t\t\"color\": \"rgb(0, 0, 0)\",\n-\t\t\"background_color\": \"rgb(245, 245, 245)\",\n-\t}\n+    \"check-colors\",\n+    {\n+        \"theme\": \"light\",\n+        \"color\": \"rgb(0, 0, 0)\",\n+        \"background_color\": \"rgb(245, 245, 245)\",\n+    }\n )\n \n local-storage: {\"rustdoc-theme\": \"light\"}"}, {"sha": "7c35119e6959dc4830c4e527253244bd023d651e", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -22,20 +22,20 @@ assert-attribute-false: (\".src-line-numbers > a:nth-child(7)\", {\"class\": \"line-h\n define-function: (\n     \"check-colors\",\n     (theme, color, background_color, highlight_color, highlight_background_color),\n-    [\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"assert-css\", (\n+    block {\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        assert-css: (\n             \".src-line-numbers > a:not(.line-highlighted)\",\n             {\"color\": |color|, \"background-color\": |background_color|},\n             ALL,\n-        )),\n-        (\"assert-css\", (\n+        )\n+        assert-css: (\n             \".src-line-numbers > a.line-highlighted\",\n             {\"color\": |highlight_color|, \"background-color\": |highlight_background_color|},\n             ALL,\n-        )),\n-    ],\n+        )\n+    },\n )\n \n call-function: (\"check-colors\", {\n@@ -124,28 +124,28 @@ store-property: (\n define-function: (\n     \"check-sidebar-dir-entry\",\n     (x, y),\n-    [\n-        (\"assert\", \"details:first-of-type.dir-entry[open] > summary::marker\"),\n-        (\"assert-css\", (\"#source-sidebar > details:first-of-type.dir-entry\", {\"padding-left\": \"4px\"})),\n+    block {\n+        assert: \"details:first-of-type.dir-entry[open] > summary::marker\"\n+        assert-css: (\"#source-sidebar > details:first-of-type.dir-entry\", {\"padding-left\": \"4px\"})\n         // This check ensures that the summary is only one line.\n-       (\"assert-property\", (\n+        assert-property: (\n             \"#source-sidebar > details:first-of-type.dir-entry[open] > summary\",\n             {\"offsetHeight\": |link_height|}\n-        )),\n-        (\"assert-position\", (\n+        )\n+        assert-position: (\n             \"#source-sidebar > details:first-of-type.dir-entry[open] > summary\",\n             {\"x\": |x|, \"y\": |y|}\n-        )),\n-        (\"assert-property\", (\n+        )\n+        assert-property: (\n             \"#source-sidebar > details:first-of-type.dir-entry[open] > .files > a\",\n             {\"offsetHeight\": |link_height|}\n-        )),\n-        (\"assert-position\", (\n+        )\n+        assert-position: (\n             \"#source-sidebar > details:first-of-type.dir-entry[open] > .files > a\",\n             // left margin\n             {\"x\": |x| + 27, \"y\": |y| + |link_height|}\n-        )),\n-    ]\n+        )\n+    }\n )\n store-property: (\n     source_sidebar_title_height,"}, {"sha": "50ba1ba62dbfae4f6b1fa6f9ff3d0600586412d5", "filename": "src/test/rustdoc-gui/stab-badge.goml", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fstab-badge.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Fstab-badge.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fstab-badge.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -2,40 +2,40 @@\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n show-text: true\n define-function: (\n-\t\"check-badge\",\n-\t(theme, background, color),\n-\t[\n-        (\"local-storage\", {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": |theme|}),\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"),\n-\t\t(\"assert\", (\".docblock .stab\")),\n-\t\t(\"assert\", (\".item-table .stab\")),\n-\t\t(\"assert-css\", (\".stab\", {\n-\t\t\t\"border-radius\": \"3px\",\n-\t\t\t\"color\": |color|,\n-\t\t\t\"background-color\": |background|,\n-\t\t})),\n-        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/fn.replaced_function.html\"),\n-\t\t(\"assert\", (\".item-info .stab\")),\n-\t\t(\"assert-css\", (\".stab\", {\n-\t\t\t\"border-radius\": \"3px\",\n-\t\t\t\"color\": |color|,\n-\t\t\t\"background-color\": |background|,\n-\t\t})),\n-\t]\n+    \"check-badge\",\n+    (theme, background, color),\n+    block {\n+        local-storage: {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": |theme|}\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+        assert: \".docblock .stab\"\n+        assert: \".item-table .stab\"\n+        assert-css: (\".stab\", {\n+            \"border-radius\": \"3px\",\n+            \"color\": |color|,\n+            \"background-color\": |background|,\n+        })\n+        goto: \"file://\" + |DOC_PATH| + \"/test_docs/fn.replaced_function.html\"\n+        assert: (\".item-info .stab\")\n+        assert-css: (\".stab\", {\n+            \"border-radius\": \"3px\",\n+            \"color\": |color|,\n+            \"background-color\": |background|,\n+        })\n+    },\n )\n \n call-function: (\"check-badge\", {\n-\t\"theme\": \"ayu\",\n-\t\"color\": \"rgb(197, 197, 197)\",\n-\t\"background\": \"rgb(49, 69, 89)\",\n+    \"theme\": \"ayu\",\n+    \"color\": \"rgb(197, 197, 197)\",\n+    \"background\": \"rgb(49, 69, 89)\",\n })\n call-function: (\"check-badge\", {\n-\t\"theme\": \"dark\",\n-\t\"color\": \"rgb(221, 221, 221)\",\n-\t\"background\": \"rgb(49, 69, 89)\",\n+    \"theme\": \"dark\",\n+    \"color\": \"rgb(221, 221, 221)\",\n+    \"background\": \"rgb(49, 69, 89)\",\n })\n call-function: (\"check-badge\", {\n-\t\"theme\": \"light\",\n-\t\"color\": \"rgb(0, 0, 0)\",\n-\t\"background\": \"rgb(255, 245, 214)\",\n+    \"theme\": \"light\",\n+    \"color\": \"rgb(0, 0, 0)\",\n+    \"background\": \"rgb(255, 245, 214)\",\n })"}, {"sha": "ca393ee58917dd0a950f3e3ad0593b1fd536913d", "filename": "src/test/rustdoc-gui/target.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Ftarget.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Ftarget.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftarget.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -8,14 +8,14 @@ assert: \"#method\\.a_method:target\"\n define-function: (\n     \"check-style\",\n     (theme, background, border),\n-    [\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n-        (\"reload\"),\n-        (\"assert-css\", (\"#method\\.a_method:target\", {\n+    block {\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n+        reload:\n+        assert-css: (\"#method\\.a_method:target\", {\n             \"background-color\": |background|,\n             \"border-right\": \"3px solid \" + |border|,\n-        })),\n-    ],\n+        })\n+    },\n )\n \n call-function: (\"check-style\", {"}, {"sha": "89ce78e3aab4b6274081590cd29ab47dd1adf0c1", "filename": "src/test/rustdoc-gui/toggle-docs.goml", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -50,24 +50,24 @@ show-text: true\n define-function: (\n     \"check-color\",\n     (theme, filter),\n-    [\n+    block {\n         // Setting the theme.\n-\t(\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n         // We reload the page so the local storage settings are being used.\n-        (\"reload\"),\n+        reload:\n \n-        (\"assert-css\", (\"details.rustdoc-toggle > summary::before\", {\n+        assert-css: (\"details.rustdoc-toggle > summary::before\", {\n             \"opacity\": \"0.5\",\n             \"filter\": |filter|,\n-        }, ALL)),\n-        (\"move-cursor-to\", \"details.rustdoc-toggle summary\"),\n-        (\"assert-css\", (\"details.rustdoc-toggle > summary:hover::before\", {\n+        }, ALL)\n+        move-cursor-to: \"details.rustdoc-toggle summary\"\n+        assert-css: (\"details.rustdoc-toggle > summary:hover::before\", {\n             \"opacity\": \"1\",\n             \"filter\": |filter|,\n-        })),\n+        })\n         // moving the cursor somewhere else to not mess with next function calls.\n-        (\"move-cursor-to\", \".search-input\"),\n-    ]\n+        move-cursor-to: \".search-input\"\n+    },\n )\n \n call-function: (\"check-color\", {\"theme\": \"ayu\", \"filter\": \"invert(1)\"})"}, {"sha": "d3a672ddde6e491250e4022c1c7a1a5ee3be4bbc", "filename": "src/test/rustdoc-gui/unsafe-fn.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Funsafe-fn.goml", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc-gui%2Funsafe-fn.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Funsafe-fn.goml?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -14,13 +14,13 @@ define-function: (\n     // `theme` is the theme being tested.\n     // `color` is the expected color of the `<sup>` element.\n     (theme, color),\n-    [\n+    block {\n         // Set the theme.\n-        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n         // We reload the page so the local storage settings are being used.\n-        (\"reload\"),\n-        (\"assert-css\", (\".item-left sup\", {\"color\": |color|})),\n-    ],\n+        reload:\n+        assert-css: (\".item-left sup\", {\"color\": |color|})\n+    },\n )\n \n call-function: (\"sup-check\", (\"dark\", \"rgb(221, 221, 221)\"))"}, {"sha": "7a6c733d464ce9d38b3b78306c3cd5628ab5793d", "filename": "src/test/rustdoc/src-links.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc%2Fsrc-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc%2Fsrc-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -7,6 +7,11 @@\n #[path = \"src-links/mod.rs\"]\n pub mod qux;\n \n+// @has src/foo/src-links.rs.html\n+// @has foo/fizz/index.html '//a/@href' '../src/foo/src-links/fizz.rs.html'\n+#[path = \"src-links/../src-links/fizz.rs\"]\n+pub mod fizz;\n+\n // @has foo/bar/index.html '//a/@href' '../../src/foo/src-links.rs.html'\n pub mod bar {\n "}, {"sha": "d2b76b1cec859d42d3855d69371d37100a76fcb5", "filename": "src/test/rustdoc/src-links/fizz.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc%2Fsrc-links%2Ffizz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftest%2Frustdoc%2Fsrc-links%2Ffizz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links%2Ffizz.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -0,0 +1 @@\n+pub struct Buzz;"}, {"sha": "fdc9d789905905004581216b1dd5dc08b9fdfdc2", "filename": "src/tools/tidy/src/error_codes.rs", "status": "added", "additions": 381, "deletions": 0, "changes": 381, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -0,0 +1,381 @@\n+//! Tidy check to ensure error codes are properly documented and tested.\n+//!\n+//! Overview of check:\n+//!\n+//! 1. We create a list of error codes used by the compiler. Error codes are extracted from `compiler/rustc_error_codes/src/error_codes.rs`.\n+//!\n+//! 2. We check that the error code has a long-form explanation in `compiler/rustc_error_codes/src/error_codes/`.\n+//!   - The explanation is expected to contain a `doctest` that fails with the correct error code. (`EXEMPT_FROM_DOCTEST` *currently* bypasses this check)\n+//!   - Note that other stylistic conventions for markdown files are checked in the `style.rs` tidy check.\n+//!\n+//! 3. We check that the error code has a UI test in `src/test/ui/error-codes/`.\n+//!   - We ensure that there is both a `Exxxx.rs` file and a corresponding `Exxxx.stderr` file.\n+//!   - We also ensure that the error code is used in the tests.\n+//!   - *Currently*, it is possible to opt-out of this check with the `EXEMPTED_FROM_TEST` constant.\n+//!\n+//! 4. We check that the error code is actually emitted by the compiler.\n+//!   - This is done by searching `compiler/` with a regex.\n+//!\n+//! This tidy check was merged and refactored from two others. See #PR_NUM for information about linting changes that occurred during this refactor.\n+\n+use std::{ffi::OsStr, fs, path::Path};\n+\n+use regex::Regex;\n+\n+use crate::walk::{filter_dirs, walk, walk_many};\n+\n+const ERROR_CODES_PATH: &str = \"compiler/rustc_error_codes/src/error_codes.rs\";\n+const ERROR_DOCS_PATH: &str = \"compiler/rustc_error_codes/src/error_codes/\";\n+const ERROR_TESTS_PATH: &str = \"src/test/ui/error-codes/\";\n+\n+// Error codes that (for some reason) can't have a doctest in their explanation. Error codes are still expected to provide a code example, even if untested.\n+const IGNORE_DOCTEST_CHECK: &[&str] = &[\"E0464\", \"E0570\", \"E0601\", \"E0602\"];\n+\n+// Error codes that don't yet have a UI test. This list will eventually be removed.\n+const IGNORE_UI_TEST_CHECK: &[&str] = &[\n+    \"E0313\", \"E0461\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\",\n+    \"E0729\", \"E0789\",\n+];\n+\n+macro_rules! verbose_print {\n+    ($verbose:expr, $($fmt:tt)*) => {\n+        if $verbose {\n+            println!(\"{}\", format_args!($($fmt)*));\n+        }\n+    };\n+}\n+\n+pub fn check(root_path: &Path, search_paths: &[&Path], verbose: bool, bad: &mut bool) {\n+    let mut errors = Vec::new();\n+\n+    // Stage 1: create list\n+    let error_codes = extract_error_codes(root_path, &mut errors, verbose);\n+    println!(\"Found {} error codes\", error_codes.len());\n+    println!(\"Highest error code: `{}`\", error_codes.iter().max().unwrap());\n+\n+    // Stage 2: check list has docs\n+    let no_longer_emitted = check_error_codes_docs(root_path, &error_codes, &mut errors, verbose);\n+\n+    // Stage 3: check list has UI tests\n+    check_error_codes_tests(root_path, &error_codes, &mut errors, verbose);\n+\n+    // Stage 4: check list is emitted by compiler\n+    check_error_codes_used(search_paths, &error_codes, &mut errors, &no_longer_emitted, verbose);\n+\n+    // Print any errors.\n+    for error in errors {\n+        tidy_error!(bad, \"{}\", error);\n+    }\n+}\n+\n+/// Stage 1: Parses a list of error codes from `error_codes.rs`.\n+fn extract_error_codes(root_path: &Path, errors: &mut Vec<String>, verbose: bool) -> Vec<String> {\n+    let path = root_path.join(Path::new(ERROR_CODES_PATH));\n+    let file =\n+        fs::read_to_string(&path).unwrap_or_else(|e| panic!(\"failed to read `{path:?}`: {e}\"));\n+\n+    let mut error_codes = Vec::new();\n+    let mut reached_undocumented_codes = false;\n+\n+    for line in file.lines() {\n+        let line = line.trim();\n+\n+        if !reached_undocumented_codes && line.starts_with('E') {\n+            let split_line = line.split_once(':');\n+\n+            // Extract the error code from the line, emitting a fatal error if it is not in a correct format.\n+            let err_code = if let Some(err_code) = split_line {\n+                err_code.0.to_owned()\n+            } else {\n+                errors.push(format!(\n+                    \"Expected a line with the format `Exxxx: include_str!(\\\"..\\\")`, but got \\\"{}\\\" \\\n+                    without a `:` delimiter\",\n+                    line,\n+                ));\n+                continue;\n+            };\n+\n+            // If this is a duplicate of another error code, emit a fatal error.\n+            if error_codes.contains(&err_code) {\n+                errors.push(format!(\"Found duplicate error code: `{}`\", err_code));\n+                continue;\n+            }\n+\n+            // Ensure that the line references the correct markdown file.\n+            let expected_filename = format!(\" include_str!(\\\"./error_codes/{}.md\\\"),\", err_code);\n+            if expected_filename != split_line.unwrap().1 {\n+                errors.push(format!(\n+                    \"Error code `{}` expected to reference docs with `{}` but instead found `{}` in \\\n+                    `compiler/rustc_error_codes/src/error_codes.rs`\",\n+                    err_code,\n+                    expected_filename,\n+                    split_line.unwrap().1,\n+                ));\n+                continue;\n+            }\n+\n+            error_codes.push(err_code);\n+        } else if reached_undocumented_codes && line.starts_with('E') {\n+            let err_code = match line.split_once(',') {\n+                None => line,\n+                Some((err_code, _)) => err_code,\n+            }\n+            .to_string();\n+\n+            verbose_print!(verbose, \"warning: Error code `{}` is undocumented.\", err_code);\n+\n+            if error_codes.contains(&err_code) {\n+                errors.push(format!(\"Found duplicate error code: `{}`\", err_code));\n+            }\n+\n+            error_codes.push(err_code);\n+        } else if line == \";\" {\n+            // Once we reach the undocumented error codes, adapt to different syntax.\n+            reached_undocumented_codes = true;\n+        }\n+    }\n+\n+    error_codes\n+}\n+\n+/// Stage 2: Checks that long-form error code explanations exist and have doctests.\n+fn check_error_codes_docs(\n+    root_path: &Path,\n+    error_codes: &[String],\n+    errors: &mut Vec<String>,\n+    verbose: bool,\n+) -> Vec<String> {\n+    let docs_path = root_path.join(Path::new(ERROR_DOCS_PATH));\n+\n+    let mut no_longer_emitted_codes = Vec::new();\n+\n+    walk(&docs_path, &mut |_| false, &mut |entry, contents| {\n+        let path = entry.path();\n+\n+        // Error if the file isn't markdown.\n+        if path.extension() != Some(OsStr::new(\"md\")) {\n+            errors.push(format!(\n+                \"Found unexpected non-markdown file in error code docs directory: {}\",\n+                path.display()\n+            ));\n+            return;\n+        }\n+\n+        // Make sure that the file is referenced in `error_codes.rs`\n+        let filename = path.file_name().unwrap().to_str().unwrap().split_once('.');\n+        let err_code = filename.unwrap().0; // `unwrap` is ok because we know the filename is in the correct format.\n+\n+        if error_codes.iter().all(|e| e != err_code) {\n+            errors.push(format!(\n+                \"Found valid file `{}` in error code docs directory without corresponding \\\n+                entry in `error_code.rs`\",\n+                path.display()\n+            ));\n+            return;\n+        }\n+\n+        let (found_code_example, found_proper_doctest, emit_ignore_warning, emit_no_longer_warning) =\n+            check_explanation_has_doctest(&contents, &err_code);\n+        if emit_ignore_warning {\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code `{err_code}` uses the ignore header. This should not be used, add the error code to the \\\n+                `IGNORE_DOCTEST_CHECK` constant instead.\"\n+            );\n+        }\n+        if emit_no_longer_warning {\n+            no_longer_emitted_codes.push(err_code.to_owned());\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code `{err_code}` is no longer emitted and should be removed entirely.\"\n+            );\n+        }\n+        if !found_code_example {\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code `{err_code}` doesn't have a code example, all error codes are expected to have one \\\n+                (even if untested).\"\n+            );\n+        }\n+\n+        let test_ignored = IGNORE_DOCTEST_CHECK.contains(&&err_code);\n+\n+        // Check that the explanation has a doctest, and if it shouldn't, that it doesn't\n+        if !found_proper_doctest && !test_ignored {\n+            errors.push(format!(\n+                \"`{}` doesn't use its own error code in compile_fail example\",\n+                path.display(),\n+            ));\n+        } else if found_proper_doctest && test_ignored {\n+            errors.push(format!(\n+                \"`{}` has a compile_fail doctest with its own error code, it shouldn't \\\n+                be listed in `IGNORE_DOCTEST_CHECK`\",\n+                path.display(),\n+            ));\n+        }\n+    });\n+\n+    no_longer_emitted_codes\n+}\n+\n+/// This function returns a tuple indicating whether the provided explanation:\n+/// a) has a code example, tested or not.\n+/// b) has a valid doctest\n+fn check_explanation_has_doctest(explanation: &str, err_code: &str) -> (bool, bool, bool, bool) {\n+    let mut found_code_example = false;\n+    let mut found_proper_doctest = false;\n+\n+    let mut emit_ignore_warning = false;\n+    let mut emit_no_longer_warning = false;\n+\n+    for line in explanation.lines() {\n+        let line = line.trim();\n+\n+        if line.starts_with(\"```\") {\n+            found_code_example = true;\n+\n+            // Check for the `rustdoc` doctest headers.\n+            if line.contains(\"compile_fail\") && line.contains(err_code) {\n+                found_proper_doctest = true;\n+            }\n+\n+            if line.contains(\"ignore\") {\n+                emit_ignore_warning = true;\n+                found_proper_doctest = true;\n+            }\n+        } else if line\n+            .starts_with(\"#### Note: this error code is no longer emitted by the compiler\")\n+        {\n+            emit_no_longer_warning = true;\n+            found_code_example = true;\n+            found_proper_doctest = true;\n+        }\n+    }\n+\n+    (found_code_example, found_proper_doctest, emit_ignore_warning, emit_no_longer_warning)\n+}\n+\n+// Stage 3: Checks that each error code has a UI test in the correct directory\n+fn check_error_codes_tests(\n+    root_path: &Path,\n+    error_codes: &[String],\n+    errors: &mut Vec<String>,\n+    verbose: bool,\n+) {\n+    let tests_path = root_path.join(Path::new(ERROR_TESTS_PATH));\n+\n+    for code in error_codes {\n+        let test_path = tests_path.join(format!(\"{}.stderr\", code));\n+\n+        if !test_path.exists() && !IGNORE_UI_TEST_CHECK.contains(&code.as_str()) {\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code `{code}` needs to have at least one UI test in the `src/test/ui/error-codes/` directory`!\"\n+            );\n+            continue;\n+        }\n+        if IGNORE_UI_TEST_CHECK.contains(&code.as_str()) {\n+            if test_path.exists() {\n+                errors.push(format!(\n+                    \"Error code `{code}` has a UI test in `src/test/ui/error-codes/{code}.rs`, it shouldn't be listed in `EXEMPTED_FROM_TEST`!\"\n+                ));\n+            }\n+            continue;\n+        }\n+\n+        let file = match fs::read_to_string(&test_path) {\n+            Ok(file) => file,\n+            Err(err) => {\n+                verbose_print!(\n+                    verbose,\n+                    \"warning: Failed to read UI test file (`{}`) for `{code}` but the file exists. The test is assumed to work:\\n{err}\",\n+                    test_path.display()\n+                );\n+                continue;\n+            }\n+        };\n+\n+        let mut found_code = false;\n+\n+        for line in file.lines() {\n+            let s = line.trim();\n+            // Assuming the line starts with `error[E`, we can substring the error code out.\n+            if s.starts_with(\"error[E\") {\n+                if &s[6..11] == code {\n+                    found_code = true;\n+                    break;\n+                }\n+            };\n+        }\n+\n+        if !found_code {\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code {code}`` has a UI test file, but doesn't contain its own error code!\"\n+            );\n+        }\n+    }\n+}\n+\n+/// Stage 4: Search `compiler/` and ensure that every error code is actually used by the compiler and that no undocumented error codes exist.\n+fn check_error_codes_used(\n+    search_paths: &[&Path],\n+    error_codes: &[String],\n+    errors: &mut Vec<String>,\n+    no_longer_emitted: &[String],\n+    verbose: bool,\n+) {\n+    // We want error codes which match the following cases:\n+    //\n+    // * foo(a, E0111, a)\n+    // * foo(a, E0111)\n+    // * foo(E0111, a)\n+    // * #[error = \"E0111\"]\n+    let regex = Regex::new(r#\"[(,\"\\s](E\\d{4})[,)\"]\"#).unwrap();\n+\n+    let mut found_codes = Vec::new();\n+\n+    walk_many(search_paths, &mut filter_dirs, &mut |entry, contents| {\n+        let path = entry.path();\n+\n+        // Return early if we aren't looking at a source file.\n+        if path.extension() != Some(OsStr::new(\"rs\")) {\n+            return;\n+        }\n+\n+        for line in contents.lines() {\n+            // We want to avoid parsing error codes in comments.\n+            if line.trim_start().starts_with(\"//\") {\n+                continue;\n+            }\n+\n+            for cap in regex.captures_iter(line) {\n+                if let Some(error_code) = cap.get(1) {\n+                    let error_code = error_code.as_str().to_owned();\n+\n+                    if !error_codes.contains(&error_code) {\n+                        // This error code isn't properly defined, we must error.\n+                        errors.push(format!(\"Error code `{}` is used in the compiler but not defined and documented in `compiler/rustc_error_codes/src/error_codes.rs`.\", error_code));\n+                        continue;\n+                    }\n+\n+                    // This error code can now be marked as used.\n+                    found_codes.push(error_code);\n+                }\n+            }\n+        }\n+    });\n+\n+    for code in error_codes {\n+        if !found_codes.contains(code) && !no_longer_emitted.contains(code) {\n+            errors.push(format!(\"Error code `{code}` exists, but is not emitted by the compiler!\"))\n+        }\n+\n+        if found_codes.contains(code) && no_longer_emitted.contains(code) {\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code `{code}` is used when it's marked as \\\"no longer emitted\\\"\"\n+            );\n+        }\n+    }\n+}"}, {"sha": "3f060e437aca7ac72a0c3404da445637c81afad6", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "removed", "additions": 0, "deletions": 305, "changes": 305, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -1,305 +0,0 @@\n-//! Checks that all error codes have at least one test to prevent having error\n-//! codes that are silently not thrown by the compiler anymore.\n-\n-use crate::walk::{filter_dirs, walk};\n-use std::collections::{HashMap, HashSet};\n-use std::ffi::OsStr;\n-use std::fs::read_to_string;\n-use std::path::Path;\n-\n-use regex::Regex;\n-\n-// A few of those error codes can't be tested but all the others can and *should* be tested!\n-const EXEMPTED_FROM_TEST: &[&str] = &[\n-    \"E0313\", \"E0461\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n-    \"E0789\",\n-];\n-\n-// Some error codes don't have any tests apparently...\n-const IGNORE_EXPLANATION_CHECK: &[&str] = &[\"E0464\", \"E0570\", \"E0601\", \"E0602\", \"E0729\"];\n-\n-// If the file path contains any of these, we don't want to try to extract error codes from it.\n-//\n-// We need to declare each path in the windows version (with backslash).\n-const PATHS_TO_IGNORE_FOR_EXTRACTION: &[&str] =\n-    &[\"src/test/\", \"src\\\\test\\\\\", \"src/doc/\", \"src\\\\doc\\\\\", \"src/tools/\", \"src\\\\tools\\\\\"];\n-\n-#[derive(Default, Debug)]\n-struct ErrorCodeStatus {\n-    has_test: bool,\n-    has_explanation: bool,\n-    is_used: bool,\n-}\n-\n-fn check_error_code_explanation(\n-    f: &str,\n-    error_codes: &mut HashMap<String, ErrorCodeStatus>,\n-    err_code: String,\n-) -> bool {\n-    let mut invalid_compile_fail_format = false;\n-    let mut found_error_code = false;\n-\n-    for line in f.lines() {\n-        let s = line.trim();\n-        if s.starts_with(\"```\") {\n-            if s.contains(\"compile_fail\") && s.contains('E') {\n-                if !found_error_code {\n-                    error_codes.get_mut(&err_code).map(|x| x.has_test = true);\n-                    found_error_code = true;\n-                }\n-            } else if s.contains(\"compile-fail\") {\n-                invalid_compile_fail_format = true;\n-            }\n-        } else if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n-            if !found_error_code {\n-                error_codes.get_mut(&err_code).map(|x| x.has_test = true);\n-                found_error_code = true;\n-            }\n-        }\n-    }\n-    invalid_compile_fail_format\n-}\n-\n-fn check_if_error_code_is_test_in_explanation(f: &str, err_code: &str) -> bool {\n-    let mut ignore_found = false;\n-\n-    for line in f.lines() {\n-        let s = line.trim();\n-        if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n-            return true;\n-        }\n-        if s.starts_with(\"```\") {\n-            if s.contains(\"compile_fail\") && s.contains(err_code) {\n-                return true;\n-            } else if s.contains(\"ignore\") {\n-                // It's very likely that we can't actually make it fail compilation...\n-                ignore_found = true;\n-            }\n-        }\n-    }\n-    ignore_found\n-}\n-\n-fn extract_error_codes(\n-    f: &str,\n-    error_codes: &mut HashMap<String, ErrorCodeStatus>,\n-    path: &Path,\n-    errors: &mut Vec<String>,\n-) {\n-    let mut reached_no_explanation = false;\n-\n-    for line in f.lines() {\n-        let s = line.trim();\n-        if !reached_no_explanation && s.starts_with('E') && s.contains(\"include_str!(\\\"\") {\n-            let err_code = s\n-                .split_once(':')\n-                .expect(\n-                    format!(\n-                        \"Expected a line with the format `E0xxx: include_str!(\\\"..\\\")`, but got {} \\\n-                         without a `:` delimiter\",\n-                        s,\n-                    )\n-                    .as_str(),\n-                )\n-                .0\n-                .to_owned();\n-            error_codes.entry(err_code.clone()).or_default().has_explanation = true;\n-\n-            // Now we extract the tests from the markdown file!\n-            let md_file_name = match s.split_once(\"include_str!(\\\"\") {\n-                None => continue,\n-                Some((_, md)) => match md.split_once(\"\\\")\") {\n-                    None => continue,\n-                    Some((file_name, _)) => file_name,\n-                },\n-            };\n-\n-            let Some(parent) = path.parent() else {\n-                continue;\n-            };\n-\n-            let path = parent\n-                .join(md_file_name)\n-                .canonicalize()\n-                .expect(\"failed to canonicalize error explanation file path\");\n-\n-            match read_to_string(&path) {\n-                Ok(content) => {\n-                    let has_test = check_if_error_code_is_test_in_explanation(&content, &err_code);\n-                    if !has_test && !IGNORE_EXPLANATION_CHECK.contains(&err_code.as_str()) {\n-                        errors.push(format!(\n-                            \"`{}` doesn't use its own error code in compile_fail example\",\n-                            path.display(),\n-                        ));\n-                    } else if has_test && IGNORE_EXPLANATION_CHECK.contains(&err_code.as_str()) {\n-                        errors.push(format!(\n-                            \"`{}` has a compile_fail example with its own error code, it shouldn't \\\n-                             be listed in IGNORE_EXPLANATION_CHECK!\",\n-                            path.display(),\n-                        ));\n-                    }\n-                    if check_error_code_explanation(&content, error_codes, err_code) {\n-                        errors.push(format!(\n-                            \"`{}` uses invalid tag `compile-fail` instead of `compile_fail`\",\n-                            path.display(),\n-                        ));\n-                    }\n-                }\n-                Err(e) => {\n-                    eprintln!(\"Couldn't read `{}`: {}\", path.display(), e);\n-                }\n-            }\n-        } else if reached_no_explanation && s.starts_with('E') {\n-            let err_code = match s.split_once(',') {\n-                None => s,\n-                Some((err_code, _)) => err_code,\n-            }\n-            .to_string();\n-            if !error_codes.contains_key(&err_code) {\n-                // this check should *never* fail!\n-                error_codes.insert(err_code, ErrorCodeStatus::default());\n-            }\n-        } else if s == \";\" {\n-            reached_no_explanation = true;\n-        }\n-    }\n-}\n-\n-fn extract_error_codes_from_tests(f: &str, error_codes: &mut HashMap<String, ErrorCodeStatus>) {\n-    for line in f.lines() {\n-        let s = line.trim();\n-        if s.starts_with(\"error[E\") || s.starts_with(\"warning[E\") {\n-            let err_code = match s.split_once(']') {\n-                None => continue,\n-                Some((err_code, _)) => match err_code.split_once('[') {\n-                    None => continue,\n-                    Some((_, err_code)) => err_code,\n-                },\n-            };\n-            error_codes.entry(err_code.to_owned()).or_default().has_test = true;\n-        }\n-    }\n-}\n-\n-fn extract_error_codes_from_source(\n-    f: &str,\n-    error_codes: &mut HashMap<String, ErrorCodeStatus>,\n-    regex: &Regex,\n-) {\n-    for line in f.lines() {\n-        if line.trim_start().starts_with(\"//\") {\n-            continue;\n-        }\n-        for cap in regex.captures_iter(line) {\n-            if let Some(error_code) = cap.get(1) {\n-                error_codes.entry(error_code.as_str().to_owned()).or_default().is_used = true;\n-            }\n-        }\n-    }\n-}\n-\n-pub fn check(paths: &[&Path], bad: &mut bool) {\n-    let mut errors = Vec::new();\n-    let mut found_explanations = 0;\n-    let mut found_tests = 0;\n-    let mut error_codes: HashMap<String, ErrorCodeStatus> = HashMap::new();\n-    let mut explanations: HashSet<String> = HashSet::new();\n-    // We want error codes which match the following cases:\n-    //\n-    // * foo(a, E0111, a)\n-    // * foo(a, E0111)\n-    // * foo(E0111, a)\n-    // * #[error = \"E0111\"]\n-    let regex = Regex::new(r#\"[(,\"\\s](E\\d{4})[,)\"]\"#).unwrap();\n-\n-    for path in paths {\n-        walk(path, &mut filter_dirs, &mut |entry, contents| {\n-            let file_name = entry.file_name();\n-            let entry_path = entry.path();\n-\n-            if file_name == \"error_codes.rs\" {\n-                extract_error_codes(contents, &mut error_codes, entry.path(), &mut errors);\n-                found_explanations += 1;\n-            } else if entry_path.extension() == Some(OsStr::new(\"stderr\")) {\n-                extract_error_codes_from_tests(contents, &mut error_codes);\n-                found_tests += 1;\n-            } else if entry_path.extension() == Some(OsStr::new(\"rs\")) {\n-                let path = entry.path().to_string_lossy();\n-                if PATHS_TO_IGNORE_FOR_EXTRACTION.iter().all(|c| !path.contains(c)) {\n-                    extract_error_codes_from_source(contents, &mut error_codes, &regex);\n-                }\n-            } else if entry_path\n-                .parent()\n-                .and_then(|p| p.file_name())\n-                .map(|p| p == \"error_codes\")\n-                .unwrap_or(false)\n-                && entry_path.extension() == Some(OsStr::new(\"md\"))\n-            {\n-                explanations.insert(file_name.to_str().unwrap().replace(\".md\", \"\"));\n-            }\n-        });\n-    }\n-    if found_explanations == 0 {\n-        tidy_error!(bad, \"No error code explanation was tested!\");\n-    }\n-    if found_tests == 0 {\n-        tidy_error!(bad, \"No error code was found in compilation errors!\");\n-    }\n-    if explanations.is_empty() {\n-        tidy_error!(bad, \"No error code explanation was found!\");\n-    }\n-    if errors.is_empty() {\n-        for (err_code, error_status) in &error_codes {\n-            if !error_status.has_test && !EXEMPTED_FROM_TEST.contains(&err_code.as_str()) {\n-                errors.push(format!(\"Error code {err_code} needs to have at least one UI test!\"));\n-            } else if error_status.has_test && EXEMPTED_FROM_TEST.contains(&err_code.as_str()) {\n-                errors.push(format!(\n-                    \"Error code {} has a UI test, it shouldn't be listed into EXEMPTED_FROM_TEST!\",\n-                    err_code\n-                ));\n-            }\n-            if !error_status.is_used && !error_status.has_explanation {\n-                errors.push(format!(\n-                    \"Error code {} isn't used and doesn't have an error explanation, it should be \\\n-                     commented in error_codes.rs file\",\n-                    err_code\n-                ));\n-            }\n-        }\n-    }\n-    if errors.is_empty() {\n-        // Checking if local constants need to be cleaned.\n-        for err_code in EXEMPTED_FROM_TEST {\n-            match error_codes.get(err_code.to_owned()) {\n-                Some(status) => {\n-                    if status.has_test {\n-                        errors.push(format!(\n-                            \"{} error code has a test and therefore should be \\\n-                            removed from the `EXEMPTED_FROM_TEST` constant\",\n-                            err_code\n-                        ));\n-                    }\n-                }\n-                None => errors.push(format!(\n-                    \"{} error code isn't used anymore and therefore should be removed \\\n-                        from `EXEMPTED_FROM_TEST` constant\",\n-                    err_code\n-                )),\n-            }\n-        }\n-    }\n-    if errors.is_empty() {\n-        for explanation in explanations {\n-            if !error_codes.contains_key(&explanation) {\n-                errors.push(format!(\n-                    \"{} error code explanation should be listed in `error_codes.rs`\",\n-                    explanation\n-                ));\n-            }\n-        }\n-    }\n-    errors.sort();\n-    for err in &errors {\n-        tidy_error!(bad, \"{err}\");\n-    }\n-}"}, {"sha": "fe5fd72b91a49946337ed8bdda075d9b41733dae", "filename": "src/tools/tidy/src/errors.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -1,77 +0,0 @@\n-//! Tidy check to verify the validity of long error diagnostic codes.\n-//!\n-//! This ensures that error codes are used at most once and also prints out some\n-//! statistics about the error codes.\n-\n-use crate::walk::{filter_dirs, walk};\n-use std::collections::HashMap;\n-use std::path::Path;\n-\n-pub fn check(path: &Path, bad: &mut bool) {\n-    let mut map: HashMap<_, Vec<_>> = HashMap::new();\n-    walk(\n-        path,\n-        &mut |path| filter_dirs(path) || path.ends_with(\"src/test\"),\n-        &mut |entry, contents| {\n-            let file = entry.path();\n-            let filename = file.file_name().unwrap().to_string_lossy();\n-            if filename != \"error_codes.rs\" {\n-                return;\n-            }\n-\n-            // In the `register_long_diagnostics!` macro, entries look like this:\n-            //\n-            // ```\n-            // EXXXX: r##\"\n-            // <Long diagnostic message>\n-            // \"##,\n-            // ```\n-            //\n-            // and these long messages often have error codes themselves inside\n-            // them, but we don't want to report duplicates in these cases. This\n-            // variable keeps track of whether we're currently inside one of these\n-            // long diagnostic messages.\n-            let mut inside_long_diag = false;\n-            for (num, line) in contents.lines().enumerate() {\n-                if inside_long_diag {\n-                    inside_long_diag = !line.contains(\"\\\"##\");\n-                    continue;\n-                }\n-\n-                let mut search = line;\n-                while let Some(i) = search.find('E') {\n-                    search = &search[i + 1..];\n-                    let code = if search.len() > 4 { search[..4].parse::<u32>() } else { continue };\n-                    let code = match code {\n-                        Ok(n) => n,\n-                        Err(..) => continue,\n-                    };\n-                    map.entry(code).or_default().push((file.to_owned(), num + 1, line.to_owned()));\n-                    break;\n-                }\n-\n-                inside_long_diag = line.contains(\"r##\\\"\");\n-            }\n-        },\n-    );\n-\n-    let mut max = 0;\n-    for (&code, entries) in map.iter() {\n-        if code > max {\n-            max = code;\n-        }\n-        if entries.len() == 1 {\n-            continue;\n-        }\n-\n-        tidy_error!(bad, \"duplicate error code: {}\", code);\n-        for &(ref file, line_num, ref line) in entries.iter() {\n-            tidy_error!(bad, \"{}:{}: {}\", file.display(), line_num, line);\n-        }\n-    }\n-\n-    if !*bad {\n-        println!(\"* {} error codes\", map.len());\n-        println!(\"* highest error code: E{:04}\", max);\n-    }\n-}"}, {"sha": "15c641d748c8e414ba62e728eaa2b7a7106ea163", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -56,8 +56,7 @@ pub mod bins;\n pub mod debug_artifacts;\n pub mod deps;\n pub mod edition;\n-pub mod error_codes_check;\n-pub mod errors;\n+pub mod error_codes;\n pub mod extdeps;\n pub mod features;\n pub mod mir_opt_tests;"}, {"sha": "a5685ba7c942c31980d59c4d0348f32f88e966ec", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f22e44c588be9c9058d6d6ed02a21aa32ad843/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=84f22e44c588be9c9058d6d6ed02a21aa32ad843", "patch": "@@ -27,6 +27,7 @@ fn main() {\n     let src_path = root_path.join(\"src\");\n     let library_path = root_path.join(\"library\");\n     let compiler_path = root_path.join(\"compiler\");\n+    let librustdoc_path = src_path.join(\"librustdoc\");\n \n     let args: Vec<String> = env::args().skip(1).collect();\n \n@@ -79,8 +80,7 @@ fn main() {\n         check!(mir_opt_tests, &src_path, bless);\n \n         // Checks that only make sense for the compiler.\n-        check!(errors, &compiler_path);\n-        check!(error_codes_check, &[&src_path, &compiler_path]);\n+        check!(error_codes, &root_path, &[&compiler_path, &librustdoc_path], verbose);\n \n         // Checks that only make sense for the std libs.\n         check!(pal, &library_path);"}]}