{"sha": "1d794e859028a71d182daf2fa5826aeeeab2876b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNzk0ZTg1OTAyOGE3MWQxODJkYWYyZmE1ODI2YWVlZWFiMjg3NmI=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-05-05T17:29:04Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-05-05T17:30:52Z"}, "message": "Fix column conversion for supplementary plane characters", "tree": {"sha": "981d21ae4344d21df71a549f61973dbe927bb3dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/981d21ae4344d21df71a549f61973dbe927bb3dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d794e859028a71d182daf2fa5826aeeeab2876b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d794e859028a71d182daf2fa5826aeeeab2876b", "html_url": "https://github.com/rust-lang/rust/commit/1d794e859028a71d182daf2fa5826aeeeab2876b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d794e859028a71d182daf2fa5826aeeeab2876b/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ec1b63f813e45f26668c2d6d803ec72c3c75738", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec1b63f813e45f26668c2d6d803ec72c3c75738", "html_url": "https://github.com/rust-lang/rust/commit/7ec1b63f813e45f26668c2d6d803ec72c3c75738"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "c7c744fce1ef8db144f1d07ab1bd6cb03b99539d", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1d794e859028a71d182daf2fa5826aeeeab2876b/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d794e859028a71d182daf2fa5826aeeeab2876b/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=1d794e859028a71d182daf2fa5826aeeeab2876b", "patch": "@@ -31,9 +31,19 @@ pub(crate) struct Utf16Char {\n }\n \n impl Utf16Char {\n+    /// Returns the length in 8-bit UTF-8 code units.\n     fn len(&self) -> TextSize {\n         self.end - self.start\n     }\n+\n+    /// Returns the length in 16-bit UTF-16 code units.\n+    fn len_utf16(&self) -> usize {\n+        if self.len() == TextSize::from(4) {\n+            2\n+        } else {\n+            1\n+        }\n+    }\n }\n \n impl LineIndex {\n@@ -110,7 +120,7 @@ impl LineIndex {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n             for c in utf16_chars {\n                 if c.end <= col {\n-                    res -= usize::from(c.len()) - 1;\n+                    res -= usize::from(c.len()) - c.len_utf16();\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n                     // so we don't need to take them into account\n@@ -125,7 +135,7 @@ impl LineIndex {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n             for c in utf16_chars {\n                 if col > u32::from(c.start) {\n-                    col += u32::from(c.len()) - 1;\n+                    col += u32::from(c.len()) - c.len_utf16() as u32;\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n                     // so we don't need to take them into account\n@@ -204,6 +214,9 @@ const C: char = '\u30e1';\n \n         // UTF-16 to UTF-8\n         assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(21));\n+\n+        let col_index = LineIndex::new(\"a\ud801\udc0fb\");\n+        assert_eq!(col_index.utf16_to_utf8_col(0, 3), TextSize::from(5));\n     }\n \n     #[test]"}]}