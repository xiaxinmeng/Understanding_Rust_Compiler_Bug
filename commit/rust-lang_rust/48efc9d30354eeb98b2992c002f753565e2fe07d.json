{"sha": "48efc9d30354eeb98b2992c002f753565e2fe07d", "node_id": "C_kwDOAAsO6NoAKDQ4ZWZjOWQzMDM1NGVlYjk4YjI5OTJjMDAyZjc1MzU2NWUyZmUwN2Q", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2022-10-29T22:45:13Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2022-10-29T22:45:13Z"}, "message": "Add `Convert match to let-else` assist", "tree": {"sha": "c83c9ec766c36b1b3865d610228d2733fc3f45fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83c9ec766c36b1b3865d610228d2733fc3f45fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48efc9d30354eeb98b2992c002f753565e2fe07d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48efc9d30354eeb98b2992c002f753565e2fe07d", "html_url": "https://github.com/rust-lang/rust/commit/48efc9d30354eeb98b2992c002f753565e2fe07d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48efc9d30354eeb98b2992c002f753565e2fe07d/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "319611b7382fc4c84170519dade68f4f558a44b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/319611b7382fc4c84170519dade68f4f558a44b1", "html_url": "https://github.com/rust-lang/rust/commit/319611b7382fc4c84170519dade68f4f558a44b1"}], "stats": {"total": 402, "additions": 402, "deletions": 0}, "files": [{"sha": "928016daab9f561dadc591a16d7c8f1fcecbdcea", "filename": "crates/ide-assists/src/handlers/convert_match_to_let_else.rs", "status": "added", "additions": 400, "deletions": 0, "changes": 400, "blob_url": "https://github.com/rust-lang/rust/blob/48efc9d30354eeb98b2992c002f753565e2fe07d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_match_to_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efc9d30354eeb98b2992c002f753565e2fe07d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_match_to_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_match_to_let_else.rs?ref=48efc9d30354eeb98b2992c002f753565e2fe07d", "patch": "@@ -0,0 +1,400 @@\n+use ide_db::defs::{Definition, NameRefClass};\n+use syntax::{\n+    ast::{self, HasName},\n+    ted, AstNode, SyntaxNode,\n+};\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: convert_match_to_let_else\n+//\n+// Converts let statement with match initializer to let-else statement.\n+//\n+// ```\n+// fn foo(opt: Option<()>) {\n+//     let val = $0match opt {\n+//         Some(it) => it,\n+//         None => return,\n+//     };\n+// }\n+// ```\n+// ->\n+// ```\n+// fn foo(opt: Option<()>) {\n+//     let Some(val) = opt else { return };\n+// }\n+// ```\n+pub(crate) fn convert_match_to_let_else(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let let_stmt: ast::LetStmt = ctx.find_node_at_offset()?;\n+    let binding = find_binding(let_stmt.pat()?)?;\n+\n+    let initializer = match let_stmt.initializer() {\n+        Some(ast::Expr::MatchExpr(it)) => it,\n+        _ => return None,\n+    };\n+    let initializer_expr = initializer.expr()?;\n+\n+    let (extracting_arm, diverging_arm) = match find_arms(ctx, &initializer) {\n+        Some(it) => it,\n+        None => return None,\n+    };\n+    if extracting_arm.guard().is_some() {\n+        cov_mark::hit!(extracting_arm_has_guard);\n+        return None;\n+    }\n+\n+    let diverging_arm_expr = diverging_arm.expr()?;\n+    let extracting_arm_pat = extracting_arm.pat()?;\n+    let extracted_variable = find_extracted_variable(ctx, &extracting_arm)?;\n+\n+    acc.add(\n+        AssistId(\"convert_match_to_let_else\", AssistKind::RefactorRewrite),\n+        \"Convert match to let-else\",\n+        let_stmt.syntax().text_range(),\n+        |builder| {\n+            let extracting_arm_pat = rename_variable(&extracting_arm_pat, extracted_variable, binding);\n+            builder.replace(\n+                let_stmt.syntax().text_range(),\n+                format!(\"let {extracting_arm_pat} = {initializer_expr} else {{ {diverging_arm_expr} }};\")\n+            )\n+        },\n+    )\n+}\n+\n+// Given a pattern, find the name introduced to the surrounding scope.\n+fn find_binding(pat: ast::Pat) -> Option<ast::IdentPat> {\n+    if let ast::Pat::IdentPat(ident) = pat {\n+        Some(ident)\n+    } else {\n+        None\n+    }\n+}\n+\n+// Given a match expression, find extracting and diverging arms.\n+fn find_arms(\n+    ctx: &AssistContext<'_>,\n+    match_expr: &ast::MatchExpr,\n+) -> Option<(ast::MatchArm, ast::MatchArm)> {\n+    let arms = match_expr.match_arm_list()?.arms().collect::<Vec<_>>();\n+    if arms.len() != 2 {\n+        return None;\n+    }\n+\n+    let mut extracting = None;\n+    let mut diverging = None;\n+    for arm in arms {\n+        if ctx.sema.is_diverging_match_arm(&arm)? {\n+            diverging = Some(arm);\n+        } else {\n+            extracting = Some(arm);\n+        }\n+    }\n+\n+    match (extracting, diverging) {\n+        (Some(extracting), Some(diverging)) => Some((extracting, diverging)),\n+        _ => {\n+            cov_mark::hit!(non_diverging_match);\n+            None\n+        }\n+    }\n+}\n+\n+// Given an extracting arm, find the extracted variable.\n+fn find_extracted_variable(ctx: &AssistContext<'_>, arm: &ast::MatchArm) -> Option<ast::Name> {\n+    match arm.expr()? {\n+        ast::Expr::PathExpr(path) => {\n+            let name_ref = path.syntax().descendants().find_map(ast::NameRef::cast)?;\n+            match NameRefClass::classify(&ctx.sema, &name_ref)? {\n+                NameRefClass::Definition(Definition::Local(local)) => {\n+                    let source = local.source(ctx.db()).value.left()?;\n+                    Some(source.name()?)\n+                }\n+                _ => None,\n+            }\n+        }\n+        _ => {\n+            cov_mark::hit!(extracting_arm_is_not_an_identity_expr);\n+            return None;\n+        }\n+    }\n+}\n+\n+// Rename `extracted` with `binding` in `pat`.\n+fn rename_variable(pat: &ast::Pat, extracted: ast::Name, binding: ast::IdentPat) -> SyntaxNode {\n+    let syntax = pat.syntax().clone_for_update();\n+    let extracted_syntax = syntax.covering_element(extracted.syntax().text_range());\n+\n+    // If `extracted` variable is a record field, we should rename it to `binding`,\n+    // otherwise we just need to replace `extracted` with `binding`.\n+\n+    if let Some(record_pat_field) = extracted_syntax.ancestors().find_map(ast::RecordPatField::cast)\n+    {\n+        if let Some(name_ref) = record_pat_field.field_name() {\n+            ted::replace(\n+                record_pat_field.syntax(),\n+                ast::make::record_pat_field(ast::make::name_ref(&name_ref.text()), binding.into())\n+                    .syntax()\n+                    .clone_for_update(),\n+            );\n+        }\n+    } else {\n+        ted::replace(extracted_syntax, binding.syntax().clone_for_update());\n+    }\n+\n+    syntax\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn should_not_be_applicable_for_non_diverging_match() {\n+        cov_mark::check!(non_diverging_match);\n+        check_assist_not_applicable(\n+            convert_match_to_let_else,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    let val = $0match opt {\n+        Some(it) => it,\n+        None => (),\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn should_not_be_applicable_if_extracting_arm_is_not_an_identity_expr() {\n+        cov_mark::check_count!(extracting_arm_is_not_an_identity_expr, 2);\n+        check_assist_not_applicable(\n+            convert_match_to_let_else,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    let val = $0match opt {\n+        Some(it) => it + 1,\n+        None => return,\n+    };\n+}\n+\"#,\n+        );\n+\n+        check_assist_not_applicable(\n+            convert_match_to_let_else,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    let val = $0match opt {\n+        Some(it) => {\n+            let _ = 1 + 1;\n+            it\n+        },\n+        None => return,\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn should_not_be_applicable_if_extracting_arm_has_guard() {\n+        cov_mark::check!(extracting_arm_has_guard);\n+        check_assist_not_applicable(\n+            convert_match_to_let_else,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    let val = $0match opt {\n+        Some(it) if 2 > 1 => it,\n+        None => return,\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn basic_pattern() {\n+        check_assist(\n+            convert_match_to_let_else,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    let val = $0match opt {\n+        Some(it) => it,\n+        None => return,\n+    };\n+}\n+    \"#,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    let Some(val) = opt else { return };\n+}\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn keeps_modifiers() {\n+        check_assist(\n+            convert_match_to_let_else,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    let ref mut val = $0match opt {\n+        Some(it) => it,\n+        None => return,\n+    };\n+}\n+    \"#,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    let Some(ref mut val) = opt else { return };\n+}\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn nested_pattern() {\n+        check_assist(\n+            convert_match_to_let_else,\n+            r#\"\n+fn foo(opt: Option<Result<()>>) {\n+    let val = $0match opt {\n+        Some(Ok(it)) => it,\n+        _ => return,\n+    };\n+}\n+    \"#,\n+            r#\"\n+fn foo(opt: Option<Result<()>>) {\n+    let Some(Ok(val)) = opt else { return };\n+}\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn works_with_any_diverging_block() {\n+        check_assist(\n+            convert_match_to_let_else,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    loop {\n+        let val = $0match opt {\n+            Some(it) => it,\n+            None => break,\n+        };\n+    }\n+}\n+    \"#,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    loop {\n+        let Some(val) = opt else { break };\n+    }\n+}\n+    \"#,\n+        );\n+\n+        check_assist(\n+            convert_match_to_let_else,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    loop {\n+        let val = $0match opt {\n+            Some(it) => it,\n+            None => continue,\n+        };\n+    }\n+}\n+    \"#,\n+            r#\"\n+fn foo(opt: Option<()>) {\n+    loop {\n+        let Some(val) = opt else { continue };\n+    }\n+}\n+    \"#,\n+        );\n+\n+        check_assist(\n+            convert_match_to_let_else,\n+            r#\"\n+fn panic() -> ! {}\n+\n+fn foo(opt: Option<()>) {\n+    loop {\n+        let val = $0match opt {\n+            Some(it) => it,\n+            None => panic(),\n+        };\n+    }\n+}\n+    \"#,\n+            r#\"\n+fn panic() -> ! {}\n+\n+fn foo(opt: Option<()>) {\n+    loop {\n+        let Some(val) = opt else { panic() };\n+    }\n+}\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_pattern() {\n+        check_assist(\n+            convert_match_to_let_else,\n+            r#\"\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn foo(opt: Option<Point>) {\n+    let val = $0match opt {\n+        Some(Point { x: 0, y }) => y,\n+        _ => return,\n+    };\n+}\n+    \"#,\n+            r#\"\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn foo(opt: Option<Point>) {\n+    let Some(Point { x: 0, y: val }) = opt else { return };\n+}\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn renames_whole_binding() {\n+        check_assist(\n+            convert_match_to_let_else,\n+            r#\"\n+fn foo(opt: Option<i32>) -> Option<i32> {\n+    let val = $0match opt {\n+        it @ Some(42) => it,\n+        _ => return None,\n+    };\n+    val\n+}\n+    \"#,\n+            r#\"\n+fn foo(opt: Option<i32>) -> Option<i32> {\n+    let val @ Some(42) = opt else { return None };\n+    val\n+}\n+    \"#,\n+        );\n+    }\n+}"}, {"sha": "387cc631428250e9fa82ee9afe72a9a8608849f0", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48efc9d30354eeb98b2992c002f753565e2fe07d/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48efc9d30354eeb98b2992c002f753565e2fe07d/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=48efc9d30354eeb98b2992c002f753565e2fe07d", "patch": "@@ -120,6 +120,7 @@ mod handlers {\n     mod convert_into_to_from;\n     mod convert_iter_for_each_to_for;\n     mod convert_let_else_to_match;\n+    mod convert_match_to_let_else;\n     mod convert_tuple_struct_to_named_struct;\n     mod convert_named_struct_to_tuple_struct;\n     mod convert_to_guarded_return;\n@@ -220,6 +221,7 @@ mod handlers {\n             convert_iter_for_each_to_for::convert_for_loop_with_for_each,\n             convert_let_else_to_match::convert_let_else_to_match,\n             convert_named_struct_to_tuple_struct::convert_named_struct_to_tuple_struct,\n+            convert_match_to_let_else::convert_match_to_let_else,\n             convert_to_guarded_return::convert_to_guarded_return,\n             convert_tuple_struct_to_named_struct::convert_tuple_struct_to_named_struct,\n             convert_two_arm_bool_match_to_matches_macro::convert_two_arm_bool_match_to_matches_macro,"}]}