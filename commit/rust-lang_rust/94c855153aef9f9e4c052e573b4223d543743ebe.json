{"sha": "94c855153aef9f9e4c052e573b4223d543743ebe", "node_id": "C_kwDOAAsO6NoAKDk0Yzg1NTE1M2FlZjlmOWU0YzA1MmU1NzNiNDIyM2Q1NDM3NDNlYmU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-27T13:24:20Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-27T13:25:48Z"}, "message": "Remove unused std::sys_common::thread_local_key::Key.", "tree": {"sha": "531c56cef5117d9a7163d0a6c3c20ee0b4041079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/531c56cef5117d9a7163d0a6c3c20ee0b4041079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c855153aef9f9e4c052e573b4223d543743ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c855153aef9f9e4c052e573b4223d543743ebe", "html_url": "https://github.com/rust-lang/rust/commit/94c855153aef9f9e4c052e573b4223d543743ebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c855153aef9f9e4c052e573b4223d543743ebe/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ce22733b973355573efd1e6294e585460e90e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce22733b973355573efd1e6294e585460e90e17", "html_url": "https://github.com/rust-lang/rust/commit/6ce22733b973355573efd1e6294e585460e90e17"}], "stats": {"total": 61, "additions": 0, "deletions": 61}, "files": [{"sha": "204834984a227b7acf1218b6182b19e87eb05be7", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/94c855153aef9f9e4c052e573b4223d543743ebe/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c855153aef9f9e4c052e573b4223d543743ebe/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=94c855153aef9f9e4c052e573b4223d543743ebe", "patch": "@@ -87,31 +87,6 @@ pub struct StaticKey {\n     dtor: Option<unsafe extern \"C\" fn(*mut u8)>,\n }\n \n-/// A type for a safely managed OS-based TLS slot.\n-///\n-/// This type allocates an OS TLS key when it is initialized and will deallocate\n-/// the key when it falls out of scope. When compared with `StaticKey`, this\n-/// type is entirely safe to use.\n-///\n-/// Implementations will likely, however, contain unsafe code as this type only\n-/// operates on `*mut u8`, a raw pointer.\n-///\n-/// # Examples\n-///\n-/// ```ignore (cannot-doctest-private-modules)\n-/// use tls::os::Key;\n-///\n-/// let key = Key::new(None);\n-/// assert!(key.get().is_null());\n-/// key.set(1 as *mut u8);\n-/// assert!(!key.get().is_null());\n-///\n-/// drop(key); // deallocate this TLS slot.\n-/// ```\n-pub struct Key {\n-    key: imp::Key,\n-}\n-\n /// Constant initialization value for static TLS keys.\n ///\n /// This value specifies no destructor by default.\n@@ -194,39 +169,3 @@ impl StaticKey {\n         }\n     }\n }\n-\n-impl Key {\n-    /// Creates a new managed OS TLS key.\n-    ///\n-    /// This key will be deallocated when the key falls out of scope.\n-    ///\n-    /// The argument provided is an optionally-specified destructor for the\n-    /// value of this TLS key. When a thread exits and the value for this key\n-    /// is non-null the destructor will be invoked. The TLS value will be reset\n-    /// to null before the destructor is invoked.\n-    ///\n-    /// Note that the destructor will not be run when the `Key` goes out of\n-    /// scope.\n-    #[inline]\n-    pub fn new(dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> Key {\n-        Key { key: unsafe { imp::create(dtor) } }\n-    }\n-\n-    /// See StaticKey::get\n-    #[inline]\n-    pub fn get(&self) -> *mut u8 {\n-        unsafe { imp::get(self.key) }\n-    }\n-\n-    /// See StaticKey::set\n-    #[inline]\n-    pub fn set(&self, val: *mut u8) {\n-        unsafe { imp::set(self.key, val) }\n-    }\n-}\n-\n-impl Drop for Key {\n-    fn drop(&mut self) {\n-        unsafe { imp::destroy(self.key) }\n-    }\n-}"}]}