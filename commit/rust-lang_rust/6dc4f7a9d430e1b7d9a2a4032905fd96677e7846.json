{"sha": "6dc4f7a9d430e1b7d9a2a4032905fd96677e7846", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYzRmN2E5ZDQzMGUxYjdkOWEyYTQwMzI5MDVmZDk2Njc3ZTc4NDY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-23T20:05:06Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-23T20:25:30Z"}, "message": "Don't unnecessarily override attrs for Module\n\nThey were never changed from the default, which you can get with\n`tcx.get_attrs()`.", "tree": {"sha": "062ad95f48b569862eda1003c12f39e2f05134a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/062ad95f48b569862eda1003c12f39e2f05134a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846", "html_url": "https://github.com/rust-lang/rust/commit/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ffea60dd5a2260004cc4f487401ae7c7db1aa0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffea60dd5a2260004cc4f487401ae7c7db1aa0e", "html_url": "https://github.com/rust-lang/rust/commit/3ffea60dd5a2260004cc4f487401ae7c7db1aa0e"}], "stats": {"total": 17, "additions": 3, "deletions": 14}, "files": [{"sha": "6982e16da875882a9b9839a66b8c93b1e5aa8fd8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6dc4f7a9d430e1b7d9a2a4032905fd96677e7846", "patch": "@@ -218,11 +218,6 @@ impl Clean<ExternalCrate> for CrateNum {\n \n impl Clean<Item> for doctree::Module<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        // maintain a stack of mod ids, for doc comment path resolution\n-        // but we also need to resolve the module's own docs based on whether its docs were written\n-        // inside or outside the module, so check for that\n-        let attrs = self.attrs.clean(cx);\n-\n         let mut items: Vec<Item> = vec![];\n         items.extend(self.imports.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.foreigns.iter().map(|x| x.clean(cx)));\n@@ -251,7 +246,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             ModuleItem(Module { is_crate: self.is_crate, items }),\n             cx,\n         );\n-        Item { attrs, source: span.clean(cx), ..what_rustc_thinks }\n+        Item { source: span.clean(cx), ..what_rustc_thinks }\n     }\n }\n "}, {"sha": "bc9f1cf8806ab47a10b3cc03492b222870e220c9", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=6dc4f7a9d430e1b7d9a2a4032905fd96677e7846", "patch": "@@ -9,7 +9,6 @@ use rustc_hir as hir;\n \n crate struct Module<'hir> {\n     crate name: Option<Symbol>,\n-    crate attrs: &'hir [ast::Attribute],\n     crate where_outer: Span,\n     crate where_inner: Span,\n     crate imports: Vec<Import<'hir>>,\n@@ -23,13 +22,12 @@ crate struct Module<'hir> {\n }\n \n impl Module<'hir> {\n-    crate fn new(name: Option<Symbol>, attrs: &'hir [ast::Attribute]) -> Module<'hir> {\n+    crate fn new(name: Option<Symbol>) -> Module<'hir> {\n         Module {\n             name,\n             id: hir::CRATE_HIR_ID,\n             where_outer: rustc_span::DUMMY_SP,\n             where_inner: rustc_span::DUMMY_SP,\n-            attrs,\n             imports: Vec::new(),\n             mods: Vec::new(),\n             items: Vec::new(),"}, {"sha": "3c0aeaad43e5da5322b73755d323c5ae1e5d9e48", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=6dc4f7a9d430e1b7d9a2a4032905fd96677e7846", "patch": "@@ -1,7 +1,6 @@\n //! The Rust AST Visitor. Extracts useful information and massages it into a form\n //! usable for `clean`.\n \n-use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -64,7 +63,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     crate fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(\n             krate.item.span,\n-            krate.item.attrs,\n             &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item.module,\n@@ -82,13 +80,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_mod_contents(\n         &mut self,\n         span: Span,\n-        attrs: &'tcx [ast::Attribute],\n         vis: &'tcx hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Option<Symbol>,\n     ) -> Module<'tcx> {\n-        let mut om = Module::new(name, attrs);\n+        let mut om = Module::new(name);\n         om.where_outer = span;\n         om.where_inner = m.inner;\n         om.id = id;\n@@ -292,7 +289,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             hir::ItemKind::Mod(ref m) => {\n                 om.mods.push(self.visit_mod_contents(\n                     item.span,\n-                    &item.attrs,\n                     &item.vis,\n                     item.hir_id,\n                     m,"}]}