{"sha": "dbe27199b844aea507de8052da7b1e8f60543e70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZTI3MTk5Yjg0NGFlYTUwN2RlODA1MmRhN2IxZThmNjA1NDNlNzA=", "commit": {"author": {"name": "Dave Herman", "email": "dherman@mozilla.com", "date": "2010-10-21T18:39:53Z"}, "committer": {"name": "Dave Herman", "email": "dherman@mozilla.com", "date": "2010-10-21T18:39:53Z"}, "message": "line length police; moved comp.util.bits to std.bitv", "tree": {"sha": "1438eafecd076a6748aaa6f325e91b58a83887c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1438eafecd076a6748aaa6f325e91b58a83887c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbe27199b844aea507de8052da7b1e8f60543e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe27199b844aea507de8052da7b1e8f60543e70", "html_url": "https://github.com/rust-lang/rust/commit/dbe27199b844aea507de8052da7b1e8f60543e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbe27199b844aea507de8052da7b1e8f60543e70/comments", "author": null, "committer": null, "parents": [{"sha": "194f38fdff2b2067413b6eabf3d6da57fbba2dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/194f38fdff2b2067413b6eabf3d6da57fbba2dc1", "html_url": "https://github.com/rust-lang/rust/commit/194f38fdff2b2067413b6eabf3d6da57fbba2dc1"}], "stats": {"total": 303, "additions": 300, "deletions": 3}, "files": [{"sha": "cce0d38fc37b67cdced5ba4a7d4e911185d6086e", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe27199b844aea507de8052da7b1e8f60543e70/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dbe27199b844aea507de8052da7b1e8f60543e70/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=dbe27199b844aea507de8052da7b1e8f60543e70", "patch": "@@ -28,7 +28,6 @@ mod driver {\n \n mod util {\n     mod common;\n-    mod bits;\n }\n \n auth driver.rustc.main = state;"}, {"sha": "9ae3a2cef25f7993afb1ea8a06501c63261f4a22", "filename": "src/lib/bitv.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe27199b844aea507de8052da7b1e8f60543e70/src%2Flib%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe27199b844aea507de8052da7b1e8f60543e70/src%2Flib%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbitv.rs?ref=dbe27199b844aea507de8052da7b1e8f60543e70", "patch": "@@ -25,8 +25,8 @@ fn create(uint nbits, bool init) -> t {\n         elt = 0u;\n     }\n \n-    ret rec(storage = _vec.init_elt[mutable uint](elt, nbits / uint_bits() + 1u),\n-            nbits = nbits);\n+    auto storage = _vec.init_elt[mutable uint](elt, nbits / uint_bits() + 1u);\n+    ret rec(storage = storage, nbits = nbits);\n }\n \n fn process(&fn(uint, uint) -> uint op, &t v0, &t v1) -> bool {", "previous_filename": "src/comp/util/bits.rs"}, {"sha": "16cfbb7530dd42a3ef3af31be60d8f5d3bb2f30c", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe27199b844aea507de8052da7b1e8f60543e70/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dbe27199b844aea507de8052da7b1e8f60543e70/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=dbe27199b844aea507de8052da7b1e8f60543e70", "patch": "@@ -53,6 +53,7 @@ mod deque;\n mod list;\n mod rand;\n mod dbg;\n+mod bitv;\n \n // Local Variables:\n // mode: rust;"}, {"sha": "162e8b13293f34a24ae5d86051c9246215cc9310", "filename": "src/test/run-pass/lib-bitv.rs", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/rust-lang/rust/blob/dbe27199b844aea507de8052da7b1e8f60543e70/src%2Ftest%2Frun-pass%2Flib-bitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe27199b844aea507de8052da7b1e8f60543e70/src%2Ftest%2Frun-pass%2Flib-bitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-bitv.rs?ref=dbe27199b844aea507de8052da7b1e8f60543e70", "patch": "@@ -0,0 +1,297 @@\n+use std;\n+import std._vec;\n+import std.bitv;\n+\n+fn test_0_elements() {\n+  auto act;\n+  auto exp;\n+\n+  act = bitv.create(0u, false);\n+  exp = _vec.init_elt[uint](0u, 0u);\n+  // FIXME: why can't I write vec[uint]()?\n+  check (bitv.eq_vec(act, exp));\n+}\n+\n+fn test_1_element() {\n+  auto act;\n+\n+  act = bitv.create(1u, false);\n+  check (bitv.eq_vec(act, vec(0u)));\n+\n+  act = bitv.create(1u, true);\n+  check (bitv.eq_vec(act, vec(1u)));\n+}\n+\n+fn test_10_elements() {\n+  auto act;\n+\n+  // all 0\n+  act = bitv.create(10u, false);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u)));\n+\n+  // all 1\n+  act = bitv.create(10u, true);\n+  check (bitv.eq_vec(act, vec(1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u)));\n+\n+  // mixed\n+  act = bitv.create(10u, false);\n+  bitv.set(act, 0u, true);\n+  bitv.set(act, 1u, true);\n+  bitv.set(act, 2u, true);\n+  bitv.set(act, 3u, true);\n+  bitv.set(act, 4u, true);\n+  check (bitv.eq_vec(act, vec(1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u)));\n+\n+  // mixed\n+  act = bitv.create(10u, false);\n+  bitv.set(act, 5u, true);\n+  bitv.set(act, 6u, true);\n+  bitv.set(act, 7u, true);\n+  bitv.set(act, 8u, true);\n+  bitv.set(act, 9u, true);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u)));\n+\n+  // mixed\n+  act = bitv.create(10u, false);\n+  bitv.set(act, 0u, true);\n+  bitv.set(act, 3u, true);\n+  bitv.set(act, 6u, true);\n+  bitv.set(act, 9u, true);\n+  check (bitv.eq_vec(act, vec(1u, 0u, 0u, 1u, 0u, 0u, 1u, 0u, 0u, 1u)));\n+}\n+\n+fn test_31_elements() {\n+  auto act;\n+\n+  // all 0\n+  act = bitv.create(31u, false);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u)));\n+\n+  // all 1\n+  act = bitv.create(31u, true);\n+  check (bitv.eq_vec(act, vec(1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u)));\n+\n+  // mixed\n+  act = bitv.create(31u, false);\n+  bitv.set(act, 0u, true);\n+  bitv.set(act, 1u, true);\n+  bitv.set(act, 2u, true);\n+  bitv.set(act, 3u, true);\n+  bitv.set(act, 4u, true);\n+  bitv.set(act, 5u, true);\n+  bitv.set(act, 6u, true);\n+  bitv.set(act, 7u, true);\n+  check (bitv.eq_vec(act, vec(1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u)));\n+\n+  // mixed\n+  act = bitv.create(31u, false);\n+  bitv.set(act, 16u, true);\n+  bitv.set(act, 17u, true);\n+  bitv.set(act, 18u, true);\n+  bitv.set(act, 19u, true);\n+  bitv.set(act, 20u, true);\n+  bitv.set(act, 21u, true);\n+  bitv.set(act, 22u, true);\n+  bitv.set(act, 23u, true);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u)));\n+\n+  // mixed\n+  act = bitv.create(31u, false);\n+  bitv.set(act, 24u, true);\n+  bitv.set(act, 25u, true);\n+  bitv.set(act, 26u, true);\n+  bitv.set(act, 27u, true);\n+  bitv.set(act, 28u, true);\n+  bitv.set(act, 29u, true);\n+  bitv.set(act, 30u, true);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u)));\n+\n+  // mixed\n+  act = bitv.create(31u, false);\n+  bitv.set(act, 3u, true);\n+  bitv.set(act, 17u, true);\n+  bitv.set(act, 30u, true);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 1u)));\n+}\n+\n+fn test_32_elements() {\n+  auto act;\n+\n+  // all 0\n+  act = bitv.create(32u, false);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u)));\n+\n+  // all 1\n+  act = bitv.create(32u, true);\n+  check (bitv.eq_vec(act, vec(1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u)));\n+\n+  // mixed\n+  act = bitv.create(32u, false);\n+  bitv.set(act, 0u, true);\n+  bitv.set(act, 1u, true);\n+  bitv.set(act, 2u, true);\n+  bitv.set(act, 3u, true);\n+  bitv.set(act, 4u, true);\n+  bitv.set(act, 5u, true);\n+  bitv.set(act, 6u, true);\n+  bitv.set(act, 7u, true);\n+  check (bitv.eq_vec(act, vec(1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u)));\n+\n+  // mixed\n+  act = bitv.create(32u, false);\n+  bitv.set(act, 16u, true);\n+  bitv.set(act, 17u, true);\n+  bitv.set(act, 18u, true);\n+  bitv.set(act, 19u, true);\n+  bitv.set(act, 20u, true);\n+  bitv.set(act, 21u, true);\n+  bitv.set(act, 22u, true);\n+  bitv.set(act, 23u, true);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u)));\n+\n+  // mixed\n+  act = bitv.create(32u, false);\n+  bitv.set(act, 24u, true);\n+  bitv.set(act, 25u, true);\n+  bitv.set(act, 26u, true);\n+  bitv.set(act, 27u, true);\n+  bitv.set(act, 28u, true);\n+  bitv.set(act, 29u, true);\n+  bitv.set(act, 30u, true);\n+  bitv.set(act, 31u, true);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u)));\n+\n+  // mixed\n+  act = bitv.create(32u, false);\n+  bitv.set(act, 3u, true);\n+  bitv.set(act, 17u, true);\n+  bitv.set(act, 30u, true);\n+  bitv.set(act, 31u, true);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u)));\n+}\n+\n+fn test_33_elements() {\n+  auto act;\n+\n+  // all 0\n+  act = bitv.create(33u, false);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u)));\n+\n+  // all 1\n+  act = bitv.create(33u, true);\n+  check (bitv.eq_vec(act, vec(1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              1u)));\n+\n+  // mixed\n+  act = bitv.create(33u, false);\n+  bitv.set(act, 0u, true);\n+  bitv.set(act, 1u, true);\n+  bitv.set(act, 2u, true);\n+  bitv.set(act, 3u, true);\n+  bitv.set(act, 4u, true);\n+  bitv.set(act, 5u, true);\n+  bitv.set(act, 6u, true);\n+  bitv.set(act, 7u, true);\n+  check (bitv.eq_vec(act, vec(1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u)));\n+\n+  // mixed\n+  act = bitv.create(33u, false);\n+  bitv.set(act, 16u, true);\n+  bitv.set(act, 17u, true);\n+  bitv.set(act, 18u, true);\n+  bitv.set(act, 19u, true);\n+  bitv.set(act, 20u, true);\n+  bitv.set(act, 21u, true);\n+  bitv.set(act, 22u, true);\n+  bitv.set(act, 23u, true);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u)));\n+\n+  // mixed\n+  act = bitv.create(33u, false);\n+  bitv.set(act, 24u, true);\n+  bitv.set(act, 25u, true);\n+  bitv.set(act, 26u, true);\n+  bitv.set(act, 27u, true);\n+  bitv.set(act, 28u, true);\n+  bitv.set(act, 29u, true);\n+  bitv.set(act, 30u, true);\n+  bitv.set(act, 31u, true);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                              0u)));\n+\n+  // mixed\n+  act = bitv.create(33u, false);\n+  bitv.set(act, 3u, true);\n+  bitv.set(act, 17u, true);\n+  bitv.set(act, 30u, true);\n+  bitv.set(act, 31u, true);\n+  bitv.set(act, 32u, true);\n+  check (bitv.eq_vec(act, vec(0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                              0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n+                              1u)));\n+}\n+\n+fn main() {\n+  test_0_elements();\n+  test_1_element();\n+  test_10_elements();\n+  test_31_elements();\n+  test_32_elements();\n+  test_33_elements();\n+}"}]}