{"sha": "08ca2360c4e817acab717dfb7e5a93d5af35cc06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Y2EyMzYwYzRlODE3YWNhYjcxN2RmYjdlNWE5M2Q1YWYzNWNjMDY=", "commit": {"author": {"name": "jack-t", "email": "jackmaverick1@gmail.com", "date": "2019-10-04T05:56:57Z"}, "committer": {"name": "jack-t", "email": "jackmaverick1@gmail.com", "date": "2019-10-29T18:11:12Z"}, "message": "Add lint for unnecessary parens around types", "tree": {"sha": "60c77a2ca3cf9241561b0b9f717ae9b2cb6cc0cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c77a2ca3cf9241561b0b9f717ae9b2cb6cc0cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08ca2360c4e817acab717dfb7e5a93d5af35cc06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08ca2360c4e817acab717dfb7e5a93d5af35cc06", "html_url": "https://github.com/rust-lang/rust/commit/08ca2360c4e817acab717dfb7e5a93d5af35cc06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08ca2360c4e817acab717dfb7e5a93d5af35cc06/comments", "author": {"login": "jack-t", "id": 1216435, "node_id": "MDQ6VXNlcjEyMTY0MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1216435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jack-t", "html_url": "https://github.com/jack-t", "followers_url": "https://api.github.com/users/jack-t/followers", "following_url": "https://api.github.com/users/jack-t/following{/other_user}", "gists_url": "https://api.github.com/users/jack-t/gists{/gist_id}", "starred_url": "https://api.github.com/users/jack-t/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jack-t/subscriptions", "organizations_url": "https://api.github.com/users/jack-t/orgs", "repos_url": "https://api.github.com/users/jack-t/repos", "events_url": "https://api.github.com/users/jack-t/events{/privacy}", "received_events_url": "https://api.github.com/users/jack-t/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jack-t", "id": 1216435, "node_id": "MDQ6VXNlcjEyMTY0MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1216435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jack-t", "html_url": "https://github.com/jack-t", "followers_url": "https://api.github.com/users/jack-t/followers", "following_url": "https://api.github.com/users/jack-t/following{/other_user}", "gists_url": "https://api.github.com/users/jack-t/gists{/gist_id}", "starred_url": "https://api.github.com/users/jack-t/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jack-t/subscriptions", "organizations_url": "https://api.github.com/users/jack-t/orgs", "repos_url": "https://api.github.com/users/jack-t/repos", "events_url": "https://api.github.com/users/jack-t/events{/privacy}", "received_events_url": "https://api.github.com/users/jack-t/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032a53a06ce293571e51bbe621a5c480e8a28e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/032a53a06ce293571e51bbe621a5c480e8a28e95", "html_url": "https://github.com/rust-lang/rust/commit/032a53a06ce293571e51bbe621a5c480e8a28e95"}], "stats": {"total": 92, "additions": 65, "deletions": 27}, "files": [{"sha": "f4751e591bf3ce65984531014a7df239a0a133eb", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         &self,\n         arg: &'tcx hir::Ty,\n         br: &ty::BoundRegion,\n-    ) -> Option<(&'tcx hir::Ty)> {\n+    ) -> Option<&'tcx hir::Ty> {\n         let mut nested_visitor = FindNestedTypeVisitor {\n             tcx: self.tcx(),\n             bound_region: *br,"}, {"sha": "0213eb4f2a2a4027f281f067ea6fbe8a601a1331", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -1046,14 +1046,14 @@ unsafe impl<O, T: ?Sized> CloneStableAddress for OwningRef<O, T>\n     where O: CloneStableAddress {}\n \n unsafe impl<O, T: ?Sized> Send for OwningRef<O, T>\n-    where O: Send, for<'a> (&'a T): Send {}\n+    where O: Send, for<'a> &'a T: Send {}\n unsafe impl<O, T: ?Sized> Sync for OwningRef<O, T>\n-    where O: Sync, for<'a> (&'a T): Sync {}\n+    where O: Sync, for<'a> &'a T: Sync {}\n \n unsafe impl<O, T: ?Sized> Send for OwningRefMut<O, T>\n-    where O: Send, for<'a> (&'a mut T): Send {}\n+    where O: Send, for<'a> &'a mut T: Send {}\n unsafe impl<O, T: ?Sized> Sync for OwningRefMut<O, T>\n-    where O: Sync, for<'a> (&'a mut T): Sync {}\n+    where O: Sync, for<'a> &'a mut T: Sync {}\n \n impl Debug for dyn Erased {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "7a168baacaf8152314bef6c89f6b078abd22deac", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -603,6 +603,25 @@ impl EarlyLintPass for UnusedParens {\n     fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {\n         self.check_unused_parens_pat(cx, &arm.pat, false, false);\n     }\n+\n+    fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n+        if let &ast::TyKind::Paren(ref r) = &ty.kind {\n+            match &r.kind {\n+                &ast::TyKind::TraitObject(..) => {}\n+                &ast::TyKind::ImplTrait(_, ref bounds) if bounds.len() > 1 => {}\n+                _ => {\n+                    let pattern_text = if let Ok(snippet) = cx.sess().source_map()\n+                        .span_to_snippet(ty.span) {\n+                            snippet\n+                        } else {\n+                            pprust::ty_to_string(ty)\n+                        };\n+\n+                    Self::remove_outer_parens(cx, ty.span, &pattern_text, \"type\", (false, false));\n+                }\n+            }\n+        }\n+    }\n }\n \n declare_lint! {"}, {"sha": "1be1fcef61b6e4024ff2cf4af9780dca59cb02bd", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -29,7 +29,7 @@ pub(super) struct Prefixes<'cx, 'tcx> {\n     body: &'cx Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     kind: PrefixSet,\n-    next: Option<(PlaceRef<'cx, 'tcx>)>,\n+    next: Option<PlaceRef<'cx, 'tcx>>,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]"}, {"sha": "941c81eaff2645c5b9022279d065fbefcb0dee14", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -1818,7 +1818,7 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     type Item = &'a K;\n \n     #[inline]\n-    fn next(&mut self) -> Option<(&'a K)> {\n+    fn next(&mut self) -> Option<&'a K> {\n         self.inner.next().map(|(k, _)| k)\n     }\n     #[inline]\n@@ -1841,7 +1841,7 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n     type Item = &'a V;\n \n     #[inline]\n-    fn next(&mut self) -> Option<(&'a V)> {\n+    fn next(&mut self) -> Option<&'a V> {\n         self.inner.next().map(|(_, v)| v)\n     }\n     #[inline]\n@@ -1864,7 +1864,7 @@ impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n     type Item = &'a mut V;\n \n     #[inline]\n-    fn next(&mut self) -> Option<(&'a mut V)> {\n+    fn next(&mut self) -> Option<&'a mut V> {\n         self.inner.next().map(|(_, v)| v)\n     }\n     #[inline]"}, {"sha": "adbd05ed8c1757593995a802f856518ad7ae3d6e", "filename": "src/test/ui/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falignment-gep-tup-like-1.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -28,7 +28,7 @@ fn f<A:Clone + 'static>(a: A, b: u16) -> Box<dyn Invokable<A>+'static> {\n     box Invoker {\n         a: a,\n         b: b,\n-    } as (Box<dyn Invokable<A>+'static>)\n+    } as Box<dyn Invokable<A>+'static>\n }\n \n pub fn main() {"}, {"sha": "feb0cb30ccaccf49f057db73e9f492e52e538db7", "filename": "src/test/ui/as-precedence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Fas-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Fas-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fas-precedence.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#[allow(unused_parens)]\n fn main() {\n     assert_eq!(3 as usize * 3, 9);\n     assert_eq!(3 as (usize) * 3, 9);"}, {"sha": "4d6edf4ecb0f330522ce374a08209a48c3a10210", "filename": "src/test/ui/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclose-over-big-then-small-data.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -30,7 +30,7 @@ fn f<A:Clone + 'static>(a: A, b: u16) -> Box<dyn Invokable<A>+'static> {\n     box Invoker {\n         a: a,\n         b: b,\n-    } as (Box<dyn Invokable<A>+'static>)\n+    } as Box<dyn Invokable<A>+'static>\n }\n \n pub fn main() {"}, {"sha": "87ba488b5aef2459f3df3d79e0456112cdf5ea3c", "filename": "src/test/ui/functions-closures/closure-to-fn-coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-to-fn-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-to-fn-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-to-fn-coercion.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -10,7 +10,7 @@ const BAR: [fn(&mut u32); 5] = [\n     |v: &mut u32| *v += 3,\n     |v: &mut u32| *v += 4,\n ];\n-fn func_specific() -> (fn() -> u32) {\n+fn func_specific() -> fn() -> u32 {\n     || return 42\n }\n "}, {"sha": "9f42b855a870d7b4e44abb0e86f4e23c3a6ef5a7", "filename": "src/test/ui/lint/lint-unnecessary-parens.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -13,6 +13,18 @@ fn bar(y: bool) -> X {\n     return (X { y }); //~ ERROR unnecessary parentheses around `return` value\n }\n \n+fn unused_parens_around_return_type() -> (u32) { //~ ERROR unnecessary parentheses around type\n+    panic!()\n+}\n+\n+trait Trait {\n+    fn test(&self);\n+}\n+\n+fn passes_unused_parens_lint() -> &'static (dyn Trait) {\n+    panic!()\n+}\n+\n fn main() {\n     foo();\n     bar((true)); //~ ERROR unnecessary parentheses around function argument"}, {"sha": "adc1069b64d62b98d3144f40d9419ba94047af6a", "filename": "src/test/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -16,73 +16,79 @@ error: unnecessary parentheses around `return` value\n LL |     return (X { y });\n    |            ^^^^^^^^^ help: remove these parentheses\n \n+error: unnecessary parentheses around type\n+  --> $DIR/lint-unnecessary-parens.rs:16:42\n+   |\n+LL | fn unused_parens_around_return_type() -> (u32) {\n+   |                                          ^^^^^ help: remove these parentheses\n+\n error: unnecessary parentheses around function argument\n-  --> $DIR/lint-unnecessary-parens.rs:18:9\n+  --> $DIR/lint-unnecessary-parens.rs:30:9\n    |\n LL |     bar((true));\n    |         ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `if` condition\n-  --> $DIR/lint-unnecessary-parens.rs:20:8\n+  --> $DIR/lint-unnecessary-parens.rs:32:8\n    |\n LL |     if (true) {}\n    |        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `while` condition\n-  --> $DIR/lint-unnecessary-parens.rs:21:11\n+  --> $DIR/lint-unnecessary-parens.rs:33:11\n    |\n LL |     while (true) {}\n    |           ^^^^^^ help: remove these parentheses\n \n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/lint-unnecessary-parens.rs:21:5\n+  --> $DIR/lint-unnecessary-parens.rs:33:5\n    |\n LL |     while (true) {}\n    |     ^^^^^^^^^^^^ help: use `loop`\n    |\n    = note: `#[warn(while_true)]` on by default\n \n error: unnecessary parentheses around `match` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:23:11\n+  --> $DIR/lint-unnecessary-parens.rs:35:11\n    |\n LL |     match (true) {\n    |           ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:26:16\n+  --> $DIR/lint-unnecessary-parens.rs:38:16\n    |\n LL |     if let 1 = (1) {}\n    |                ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:27:19\n+  --> $DIR/lint-unnecessary-parens.rs:39:19\n    |\n LL |     while let 1 = (2) {}\n    |                   ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around method argument\n-  --> $DIR/lint-unnecessary-parens.rs:41:24\n+  --> $DIR/lint-unnecessary-parens.rs:53:24\n    |\n LL |     X { y: false }.foo((true));\n    |                        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:43:18\n+  --> $DIR/lint-unnecessary-parens.rs:55:18\n    |\n LL |     let mut _a = (0);\n    |                  ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:44:10\n+  --> $DIR/lint-unnecessary-parens.rs:56:10\n    |\n LL |     _a = (0);\n    |          ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:45:11\n+  --> $DIR/lint-unnecessary-parens.rs:57:11\n    |\n LL |     _a += (1);\n    |           ^^^ help: remove these parentheses\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "0f26a975a370f30963a4078afc7f8e51433fbfcf", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.fixed?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -15,7 +15,7 @@ fn october<'b, T>(s: &'b T) -> &'b T {\n     s\n }\n \n-fn november<'a>(s: &'a str) -> (&'a str) {\n+fn november<'a>(s: &'a str) -> &'a str {\n     //~^ ERROR lifetime parameter `'b` never used\n     //~| HELP elide the unused lifetime\n     s"}, {"sha": "7f9504fe5a90a5f3156c779a9caa141b5254f6df", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.rs?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -15,7 +15,7 @@ fn october<'a, 'b, T>(s: &'b T) -> &'b T {\n     s\n }\n \n-fn november<'a, 'b>(s: &'a str) -> (&'a str) {\n+fn november<'a, 'b>(s: &'a str) -> &'a str {\n     //~^ ERROR lifetime parameter `'b` never used\n     //~| HELP elide the unused lifetime\n     s"}, {"sha": "b9c3bd89748fff17879ba018a07cb0bbd2b0e8a3", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ca2360c4e817acab717dfb7e5a93d5af35cc06/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.stderr?ref=08ca2360c4e817acab717dfb7e5a93d5af35cc06", "patch": "@@ -21,7 +21,7 @@ LL | fn october<'a, 'b, T>(s: &'b T) -> &'b T {\n error: lifetime parameter `'b` never used\n   --> $DIR/zero-uses-in-fn.rs:18:17\n    |\n-LL | fn november<'a, 'b>(s: &'a str) -> (&'a str) {\n+LL | fn november<'a, 'b>(s: &'a str) -> &'a str {\n    |               --^^\n    |               |\n    |               help: elide the unused lifetime"}]}