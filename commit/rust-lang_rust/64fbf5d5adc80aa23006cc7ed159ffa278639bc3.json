{"sha": "64fbf5d5adc80aa23006cc7ed159ffa278639bc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZmJmNWQ1YWRjODBhYTIzMDA2Y2M3ZWQxNTlmZmEyNzg2MzliYzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-31T08:31:24Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:15Z"}, "message": "Compute the ParamEnv only once and use it to call tcx.const_eval", "tree": {"sha": "20e6aa30fbfd07f5cb0b4902656d258ecc9c0793", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e6aa30fbfd07f5cb0b4902656d258ecc9c0793"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64fbf5d5adc80aa23006cc7ed159ffa278639bc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53cACgkQpp+NIls6\n19mISQ//ftf7Ql8ME1K3/rtjzM3Dznwht10TRjmeWD7GrkKdXJneCU8+Bna800aT\nPVNRtMMqxfnoEwcvYsssrvom1ZElBfk6ZSaBpFjQot4HwcC2AeIwkCRIcBmu9dmL\nqsQDCGBSUPribAVAFvmLd72hEDN1xcDZKyudlJ8FNB3ej9xfnjfFOOrnwkWFUWRM\nss/kmBHNjbXgAS8L9MvxhtGMzcK2TkHMd7DzGNnxyJVI/oFXPj+s/DwVc5dnGSGj\nvfdUk6j7dmh4IhDkjsA3xXonfy3ZiC/eu3JF6/qheRrx9WUZlrA+AGUmMQv1eAez\nIsuy8A7KW6GINdeZ2FesfEkbx3rswdjsBvaGvUaccMCG3g3wAmTkBpiy+8QDtGfR\n9jdItVH/yIL9ZM/JzmKS/CPGH6kB3udPR7znZI6Gb3u3zVOPOyhuXSbmJ8mOR6dE\nwFG4cfMBV2TjkpwgAPi2vO0l+6eCR9V4jcoyv/CYSa8V21qep457DDxcvbUQjcNJ\nkiW+sLbCenfUdrIVQpv4ugSDAujhfyZNNRFwWvq4A+9468I3rDXF6eZLxtO4N6AI\nCS5Sb3dM4RwNizHs19jYMWl4qgmr9bxt8941R3asMCEh7ytRzAsnDW43EO1csmKt\nySFk6eKR25Bar5HGWWMRvdALb0krk9fJWVgpjGsNMt0nUYMSbTE=\n=zuP5\n-----END PGP SIGNATURE-----", "payload": "tree 20e6aa30fbfd07f5cb0b4902656d258ecc9c0793\nparent a678044c77e8b341daae3fc7b2f7c74e45cf2c01\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517387484 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494455 +0100\n\nCompute the ParamEnv only once and use it to call tcx.const_eval\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64fbf5d5adc80aa23006cc7ed159ffa278639bc3", "html_url": "https://github.com/rust-lang/rust/commit/64fbf5d5adc80aa23006cc7ed159ffa278639bc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64fbf5d5adc80aa23006cc7ed159ffa278639bc3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a678044c77e8b341daae3fc7b2f7c74e45cf2c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/a678044c77e8b341daae3fc7b2f7c74e45cf2c01", "html_url": "https://github.com/rust-lang/rust/commit/a678044c77e8b341daae3fc7b2f7c74e45cf2c01"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "b141106aa60f551785a0d9b89426a0087c0b78c8", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64fbf5d5adc80aa23006cc7ed159ffa278639bc3/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fbf5d5adc80aa23006cc7ed159ffa278639bc3/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=64fbf5d5adc80aa23006cc7ed159ffa278639bc3", "patch": "@@ -61,7 +61,7 @@ pub fn eval_body_with_mir<'a, 'mir, 'tcx>(\n     mir: &'mir mir::Mir<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> Option<(Value, Pointer, Ty<'tcx>)> {\n-    let (res, ecx) = eval_body_and_ecx(tcx, cid, Some(mir), param_env);\n+    let (res, ecx, _) = eval_body_and_ecx(tcx, cid, Some(mir), param_env);\n     match res {\n         Ok(val) => Some(val),\n         Err(mut err) => {\n@@ -76,7 +76,7 @@ pub fn eval_body<'a, 'tcx>(\n     cid: GlobalId<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> Option<(Value, Pointer, Ty<'tcx>)> {\n-    let (res, ecx) = eval_body_and_ecx(tcx, cid, None, param_env);\n+    let (res, ecx, _) = eval_body_and_ecx(tcx, cid, None, param_env);\n     match res {\n         Ok(val) => Some(val),\n         Err(mut err) => {\n@@ -91,9 +91,12 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n     cid: GlobalId<'tcx>,\n     mir: Option<&'mir mir::Mir<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n-) -> (EvalResult<'tcx, (Value, Pointer, Ty<'tcx>)>, EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator>) {\n+) -> (EvalResult<'tcx, (Value, Pointer, Ty<'tcx>)>, EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator>, Span) {\n     debug!(\"eval_body: {:?}, {:?}\", cid, param_env);\n     let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, ());\n+    // we start out with the best span we have\n+    // and try improving it down the road when more information is available\n+    let mut span = tcx.def_span(cid.instance.def_id());\n     let res = (|| {\n         let mut mir = match mir {\n             Some(mir) => mir,\n@@ -102,6 +105,7 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n         if let Some(index) = cid.promoted {\n             mir = &mir.promoted[index];\n         }\n+        span = mir.span;\n         let layout = ecx.layout_of(mir.return_ty().subst(tcx, cid.instance.substs))?;\n         let alloc = tcx.interpret_interner.get_cached(cid.instance.def_id());\n         let alloc = match alloc {\n@@ -120,8 +124,7 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n                 if tcx.is_static(cid.instance.def_id()).is_some() {\n                     tcx.interpret_interner.cache(cid.instance.def_id(), ptr.alloc_id);\n                 }\n-                let span = tcx.def_span(cid.instance.def_id());\n-                let internally_mutable = !layout.ty.is_freeze(tcx, param_env, span);\n+                let internally_mutable = !layout.ty.is_freeze(tcx, param_env, mir.span);\n                 let mutability = tcx.is_static(cid.instance.def_id());\n                 let mutability = if mutability == Some(hir::Mutability::MutMutable) || internally_mutable {\n                     Mutability::Mutable\n@@ -152,7 +155,7 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n         };\n         Ok((value, ptr, layout.ty))\n     })();\n-    (res, ecx)\n+    (res, ecx, span)\n }\n \n pub struct CompileTimeEvaluator;\n@@ -499,7 +502,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         }\n     };\n \n-    let (res, ecx) = eval_body_and_ecx(tcx, cid, None, key.param_env);\n+    let (res, ecx, span) = eval_body_and_ecx(tcx, cid, None, key.param_env);\n     res.map(|(miri_value, _, miri_ty)| {\n         tcx.mk_const(ty::Const {\n             val: ConstVal::Value(miri_value),\n@@ -509,7 +512,6 @@ pub fn const_eval_provider<'a, 'tcx>(\n         if tcx.is_static(def_id).is_some() {\n             ecx.report(&mut err, true, None);\n         }\n-        let span = ecx.frame().span;\n         ConstEvalErr {\n             kind: err.into(),\n             span,"}, {"sha": "d3ab494139a502b3a01eb514c3667c5ea2bfa056", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/64fbf5d5adc80aa23006cc7ed159ffa278639bc3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fbf5d5adc80aa23006cc7ed159ffa278639bc3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=64fbf5d5adc80aa23006cc7ed159ffa278639bc3", "patch": "@@ -21,11 +21,12 @@ use rustc::ty::layout::LayoutOf;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{TyCtxt, self, Instance};\n use rustc::mir::interpret::{Value, PrimVal, GlobalId};\n-use interpret::{eval_body_with_mir, eval_body, mk_borrowck_eval_cx, unary_op, ValTy};\n+use interpret::{eval_body_with_mir, mk_borrowck_eval_cx, unary_op, ValTy};\n use transform::{MirPass, MirSource};\n use syntax::codemap::Span;\n use rustc::ty::subst::Substs;\n use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc::ty::ParamEnv;\n \n pub struct ConstProp;\n \n@@ -56,6 +57,7 @@ struct ConstPropagator<'b, 'a, 'tcx:'a+'b> {\n     source: MirSource,\n     places: IndexVec<Local, Option<Const<'tcx>>>,\n     can_const_prop: IndexVec<Local, bool>,\n+    param_env: ParamEnv<'tcx>,\n }\n \n impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n@@ -64,35 +66,48 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         source: MirSource,\n     ) -> ConstPropagator<'b, 'a, 'tcx> {\n+        let param_env = tcx.param_env(source.def_id);\n         ConstPropagator {\n             mir,\n             tcx,\n             source,\n+            param_env,\n             can_const_prop: CanConstProp::check(mir),\n             places: IndexVec::from_elem(None, &mir.local_decls),\n         }\n     }\n \n+    fn const_eval(&self, cid: GlobalId<'tcx>, span: Span) -> Option<Const<'tcx>> {\n+        let value = match self.tcx.const_eval(self.param_env.and(cid)) {\n+            Ok(val) => val,\n+            // FIXME: report some errors\n+            Err(_) => return None,\n+        };\n+        let val = match value.val {\n+            ConstVal::Value(v) => v,\n+            _ => bug!(\"eval produced: {:?}\", value),\n+        };\n+        let val = (val, value.ty, span);\n+        trace!(\"evaluated {:?} to {:?}\", cid, val);\n+        Some(val)\n+    }\n+\n     fn eval_constant(&mut self, c: &Constant<'tcx>) -> Option<Const<'tcx>> {\n         match c.literal {\n             Literal::Value { value } => match value.val {\n                 ConstVal::Value(v) => Some((v, value.ty, c.span)),\n                 ConstVal::Unevaluated(did, substs) => {\n-                    let param_env = self.tcx.param_env(self.source.def_id);\n                     let instance = Instance::resolve(\n                         self.tcx,\n-                        param_env,\n+                        self.param_env,\n                         did,\n                         substs,\n                     )?;\n                     let cid = GlobalId {\n                         instance,\n                         promoted: None,\n                     };\n-                    let (value, _, ty) = eval_body(self.tcx, cid, param_env)?;\n-                    let val = (value, ty, c.span);\n-                    trace!(\"evaluated {:?} to {:?}\", c, val);\n-                    Some(val)\n+                    self.const_eval(cid, c.span)\n                 },\n             },\n             // evaluate the promoted and replace the constant with the evaluated result\n@@ -108,8 +123,9 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                     instance,\n                     promoted: Some(index),\n                 };\n-                let param_env = self.tcx.param_env(self.source.def_id);\n-                let (value, _, ty) = eval_body_with_mir(self.tcx, cid, self.mir, param_env)?;\n+                // cannot use `const_eval` here, because that would require having the MIR\n+                // for the current function available, but we're producing said MIR right now\n+                let (value, _, ty) = eval_body_with_mir(self.tcx, cid, self.mir, self.param_env)?;\n                 let val = (value, ty, c.span);\n                 trace!(\"evaluated {:?} to {:?}\", c, val);\n                 Some(val)"}]}