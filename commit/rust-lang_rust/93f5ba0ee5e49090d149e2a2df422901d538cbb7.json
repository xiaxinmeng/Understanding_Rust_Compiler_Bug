{"sha": "93f5ba0ee5e49090d149e2a2df422901d538cbb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZjViYTBlZTVlNDkwOTBkMTQ5ZTJhMmRmNDIyOTAxZDUzOGNiYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-23T22:26:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-23T22:26:11Z"}, "message": "Auto merge of #59084 - estebank:diagnostic-spans, r=davidtwco\n\nTweak some diagnostic spans", "tree": {"sha": "7e10d0cf3aca3f1162d1003b58902084a874d2f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e10d0cf3aca3f1162d1003b58902084a874d2f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93f5ba0ee5e49090d149e2a2df422901d538cbb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93f5ba0ee5e49090d149e2a2df422901d538cbb7", "html_url": "https://github.com/rust-lang/rust/commit/93f5ba0ee5e49090d149e2a2df422901d538cbb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93f5ba0ee5e49090d149e2a2df422901d538cbb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0633c55d2030969d91b57142b8582c53101e6339", "url": "https://api.github.com/repos/rust-lang/rust/commits/0633c55d2030969d91b57142b8582c53101e6339", "html_url": "https://github.com/rust-lang/rust/commit/0633c55d2030969d91b57142b8582c53101e6339"}, {"sha": "59f0f2edc16131aa5ac199e1a348ceddebef1636", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f0f2edc16131aa5ac199e1a348ceddebef1636", "html_url": "https://github.com/rust-lang/rust/commit/59f0f2edc16131aa5ac199e1a348ceddebef1636"}], "stats": {"total": 1042, "additions": 496, "deletions": 546}, "files": [{"sha": "fc04c7672db68757380b368122ad5aac323db927", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -100,6 +100,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n         message: &str,\n         lint_root: hir::HirId,\n+        span: Option<Span>,\n     ) -> ErrorHandled {\n         let lint = self.struct_generic(\n             tcx,\n@@ -108,6 +109,18 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         );\n         match lint {\n             Ok(mut lint) => {\n+                if let Some(span) = span {\n+                    let primary_spans = lint.span.primary_spans().to_vec();\n+                    // point at the actual error as the primary span\n+                    lint.replace_span_with(span);\n+                    // point to the `const` statement as a secondary span\n+                    // they don't have any label\n+                    for sp in primary_spans {\n+                        if sp != span {\n+                            lint.span_label(sp, \"\");\n+                        }\n+                    }\n+                }\n                 lint.emit();\n                 ErrorHandled::Reported\n             },"}, {"sha": "fc1fd960c4acea3397b140fcab6b9d340366cf58", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -366,7 +366,7 @@ impl Diagnostic {\n                 }],\n             }],\n             msg: msg.to_owned(),\n-            style: SuggestionStyle::HideCodeInline,\n+            style: SuggestionStyle::HideCodeAlways,\n             applicability,\n         });\n         self"}, {"sha": "e0665127c0fb012e76bd224d4cbaef0b8925270e", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -74,9 +74,10 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for Collector<'a, 'tcx> {\n                         \"dylib\" => cstore::NativeUnknown,\n                         \"framework\" => cstore::NativeFramework,\n                         k => {\n-                            struct_span_err!(self.tcx.sess, m.span, E0458,\n+                            struct_span_err!(self.tcx.sess, item.span(), E0458,\n                                       \"unknown kind: `{}`\", k)\n-                                .span_label(item.span(), \"unknown kind\").emit();\n+                                .span_label(item.span(), \"unknown kind\")\n+                                .span_label(m.span, \"\").emit();\n                             cstore::NativeUnknown\n                         }\n                     };"}, {"sha": "08ede2f5e80a47288ad50f8746b82bffa67b529e", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -668,6 +668,7 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n                         tcx.at(tcx.def_span(def_id)),\n                         \"any use of this value will cause an error\",\n                         hir_id,\n+                        Some(err.span),\n                     )\n                 },\n                 // promoting runtime code is only allowed to error if it references broken constants\n@@ -684,6 +685,7 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n                             tcx.at(span),\n                             \"reaching this expression at runtime will panic or abort\",\n                             tcx.hir().as_local_hir_id(def_id).unwrap(),\n+                            Some(err.span),\n                         )\n                     }\n                 // anything else (array lengths, enum initializers, constant patterns) are reported"}, {"sha": "33672a2b7745c8c276263604795aecaeabd447e2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -237,6 +237,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                             self.ecx.tcx,\n                             \"this expression will panic at runtime\",\n                             lint_root,\n+                            None,\n                         );\n                     }\n                 }"}, {"sha": "38ca5f0b6640a85e992383d78d1806cb3463c8ef", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -4932,7 +4932,7 @@ impl<'a> Resolver<'a> {\n             Some((directive, _, true)) if should_remove_import && !directive.is_glob() => {\n                 // Simple case - remove the entire import. Due to the above match arm, this can\n                 // only be a single use so just remove it entirely.\n-                err.span_suggestion(\n+                err.tool_only_span_suggestion(\n                     directive.use_span_with_attributes,\n                     \"remove unnecessary import\",\n                     String::new(),\n@@ -5112,7 +5112,7 @@ impl<'a> Resolver<'a> {\n                         // extra for the comma.\n                         span.lo().0 - (prev_comma.as_bytes().len() as u32) - 1\n                     ));\n-                    err.span_suggestion(\n+                    err.tool_only_span_suggestion(\n                         span, message, String::new(), Applicability::MaybeIncorrect,\n                     );\n                     return;"}, {"sha": "7b530c69a88820aea6503e2dbf18d4b95e621b7a", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -69,13 +69,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         error: MethodError<'tcx>,\n         args: Option<&'gcx [hir::Expr]>,\n     ) {\n+        let orig_span = span;\n+        let mut span = span;\n         // Avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n             return;\n         }\n \n-        let report_candidates = |err: &mut DiagnosticBuilder<'_>,\n-                                 mut sources: Vec<CandidateSource>| {\n+        let report_candidates = |\n+            span: Span,\n+            err: &mut DiagnosticBuilder<'_>,\n+            mut sources: Vec<CandidateSource>,\n+        | {\n             sources.sort();\n             sources.dedup();\n             // Dynamic limit to avoid hiding just one candidate, which is silly.\n@@ -293,9 +298,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         err.emit();\n                         return;\n                     } else {\n+                        span = item_name.span;\n                         let mut err = struct_span_err!(\n                             tcx.sess,\n-                            item_name.span,\n+                            span,\n                             E0599,\n                             \"no {} named `{}` found for type `{}` in the current scope\",\n                             item_kind,\n@@ -305,7 +311,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         if let Some(suggestion) = suggestion {\n                             // enum variant\n                             err.span_suggestion(\n-                                item_name.span,\n+                                span,\n                                 \"did you mean\",\n                                 suggestion.to_string(),\n                                 Applicability::MaybeIncorrect,\n@@ -392,7 +398,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 } else {\n                     err.span_label(span, format!(\"{} not found in `{}`\", item_kind, ty_str));\n-                    self.tcx.sess.trait_methods_not_found.borrow_mut().insert(span);\n+                    self.tcx.sess.trait_methods_not_found.borrow_mut().insert(orig_span);\n                 }\n \n                 if self.is_fn_ty(&rcvr_ty, span) {\n@@ -434,9 +440,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                           self.ty_to_string(actual), item_name));\n                     }\n \n-                    report_candidates(&mut err, static_sources);\n+                    report_candidates(span, &mut err, static_sources);\n                 } else if static_sources.len() > 1 {\n-                    report_candidates(&mut err, static_sources);\n+                    report_candidates(span, &mut err, static_sources);\n                 }\n \n                 if !unsatisfied_predicates.is_empty() {\n@@ -481,7 +487,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                \"multiple applicable items in scope\");\n                 err.span_label(span, format!(\"multiple `{}` found\", item_name));\n \n-                report_candidates(&mut err, sources);\n+                report_candidates(span, &mut err, sources);\n                 err.emit();\n             }\n "}, {"sha": "99260314054168a668e2cae42039b24c5d0df539", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -5598,8 +5598,14 @@ impl<'a> Parser<'a> {\n \n         if !negative_bounds.is_empty() || was_negative {\n             let plural = negative_bounds.len() > 1;\n-            let mut err = self.struct_span_err(negative_bounds,\n-                                               \"negative trait bounds are not supported\");\n+            let last_span = negative_bounds.last().map(|sp| *sp);\n+            let mut err = self.struct_span_err(\n+                negative_bounds,\n+                \"negative trait bounds are not supported\",\n+            );\n+            if let Some(sp) = last_span {\n+                err.span_label(sp, \"negative trait bounds are not supported\");\n+            }\n             if let Some(bound_list) = colon_span {\n                 let bound_list = bound_list.to(self.prev_span);\n                 let mut new_bound_list = String::new();\n@@ -5612,11 +5618,12 @@ impl<'a> Parser<'a> {\n                     }\n                     new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n                 }\n-                err.span_suggestion_short(bound_list,\n-                                        &format!(\"remove the trait bound{}\",\n-                                                if plural { \"s\" } else { \"\" }),\n-                                        new_bound_list,\n-                                        Applicability::MachineApplicable);\n+                err.span_suggestion_hidden(\n+                    bound_list,\n+                    &format!(\"remove the trait bound{}\", if plural { \"s\" } else { \"\" }),\n+                    new_bound_list,\n+                    Applicability::MachineApplicable,\n+                );\n             }\n             err.emit();\n         }"}, {"sha": "78d456d6c2e0e6450d81b893664ad3765c35e4e6", "filename": "src/test/ui/array_const_index-0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/array_const_index-0.rs:2:1\n+  --> $DIR/array_const_index-0.rs:2:16\n    |\n LL | const B: i32 = (&A)[1];\n-   | ^^^^^^^^^^^^^^^-------^\n+   | ---------------^^^^^^^-\n    |                |\n    |                index out of bounds: the len is 0 but the index is 1\n    |"}, {"sha": "3e7360f935bb9cfdd6efda212cecda356aa5ba1b", "filename": "src/test/ui/array_const_index-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/array_const_index-1.rs:2:1\n+  --> $DIR/array_const_index-1.rs:2:16\n    |\n LL | const B: i32 = A[1];\n-   | ^^^^^^^^^^^^^^^----^\n+   | ---------------^^^^-\n    |                |\n    |                index out of bounds: the len is 0 but the index is 1\n    |"}, {"sha": "d96cf67b875784d5b354cdc1551595ebdf4b3934", "filename": "src/test/ui/associated-const/associated-const-no-item.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no associated item named `ID` found for type `i32` in the current\n   --> $DIR/associated-const-no-item.rs:5:23\n    |\n LL | const X: i32 = <i32>::ID;\n-   |                -------^^\n-   |                |\n-   |                associated item not found in `i32`\n+   |                       ^^ associated item not found in `i32`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `ID`, perhaps you need to implement it:"}, {"sha": "a77f5f9f4383fb2f94b9b0d3caee0a9591d01a2a", "filename": "src/test/ui/bad/bad-extern-link-attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -11,10 +11,10 @@ LL | #[link(name = \"\")]\n    | ^^^^^^^^^^^^^^^^^^ empty name given\n \n error[E0458]: unknown kind: `bar`\n-  --> $DIR/bad-extern-link-attrs.rs:4:1\n+  --> $DIR/bad-extern-link-attrs.rs:4:22\n    |\n LL | #[link(name = \"foo\", kind = \"bar\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^------------^^\n+   | ---------------------^^^^^^^^^^^^--\n    |                      |\n    |                      unknown kind\n "}, {"sha": "0bf0d4b14ee91c375168221afc602649705aa3df", "filename": "src/test/ui/bogus-tag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fbogus-tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fbogus-tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -5,7 +5,7 @@ LL | enum Color { Rgb(isize, isize, isize), Rgba(isize, isize, isize, isize), }\n    | ---------- variant `Hsl` not found here\n ...\n LL |         Color::Hsl(h, s, l) => { println!(\"hsl\"); }\n-   |         -------^^^--------- variant not found in `Color`\n+   |                ^^^ variant not found in `Color`\n \n error: aborting due to previous error\n "}, {"sha": "9b0ef94a5b8c3660aef8a7daff287660d5c3af6a", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:3:1\n+  --> $DIR/const-err-early.rs:3:19\n    |\n LL | pub const A: i8 = -std::i8::MIN;\n-   | ^^^^^^^^^^^^^^^^^^-------------^\n+   | ------------------^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to negate with overflow\n    |\n@@ -13,34 +13,34 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:4:1\n+  --> $DIR/const-err-early.rs:4:19\n    |\n LL | pub const B: u8 = 200u8 + 200u8;\n-   | ^^^^^^^^^^^^^^^^^^-------------^\n+   | ------------------^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to add with overflow\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:5:1\n+  --> $DIR/const-err-early.rs:5:19\n    |\n LL | pub const C: u8 = 200u8 * 4;\n-   | ^^^^^^^^^^^^^^^^^^---------^\n+   | ------------------^^^^^^^^^-\n    |                   |\n    |                   attempt to multiply with overflow\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:6:1\n+  --> $DIR/const-err-early.rs:6:19\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n-   | ^^^^^^^^^^^^^^^^^^-----------------^\n+   | ------------------^^^^^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to subtract with overflow\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:7:1\n+  --> $DIR/const-err-early.rs:7:19\n    |\n LL | pub const E: u8 = [5u8][1];\n-   | ^^^^^^^^^^^^^^^^^^--------^\n+   | ------------------^^^^^^^^-\n    |                   |\n    |                   index out of bounds: the len is 1 but the index is 1\n "}, {"sha": "c647f13fc7520f83c73cb9f31ae4be969a51790e", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:3:1\n+  --> $DIR/const-err-multi.rs:3:19\n    |\n LL | pub const A: i8 = -std::i8::MIN;\n-   | ^^^^^^^^^^^^^^^^^^-------------^\n+   | ------------------^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to negate with overflow\n    |\n@@ -13,26 +13,26 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:5:1\n+  --> $DIR/const-err-multi.rs:5:19\n    |\n LL | pub const B: i8 = A;\n-   | ^^^^^^^^^^^^^^^^^^-^\n+   | ------------------^-\n    |                   |\n    |                   referenced constant has errors\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:7:1\n+  --> $DIR/const-err-multi.rs:7:19\n    |\n LL | pub const C: u8 = A as u8;\n-   | ^^^^^^^^^^^^^^^^^^-------^\n+   | ------------------^^^^^^^-\n    |                   |\n    |                   referenced constant has errors\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:9:1\n+  --> $DIR/const-err-multi.rs:9:19\n    |\n LL | pub const D: i8 = 50 - A;\n-   | ^^^^^^^^^^^^^^^^^^------^\n+   | ------------------^^^^^^-\n    |                   |\n    |                   referenced constant has errors\n "}, {"sha": "0ee9ecdef451dc9cbbc9046b337674e9e25f2c9e", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n-  --> $DIR/const-err.rs:10:1\n+  --> $DIR/const-err.rs:10:17\n    |\n LL | const FOO: u8 = [5u8][1];\n-   | ^^^^^^^^^^^^^^^^--------^\n+   | ----------------^^^^^^^^-\n    |                 |\n    |                 index out of bounds: the len is 1 but the index is 1\n    |"}, {"sha": "7f94d849c006c4610a292893af44d1a250ece4b3", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n-  --> $DIR/conditional_array_execution.rs:5:1\n+  --> $DIR/conditional_array_execution.rs:5:19\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------------------^^^^^---------------------------\n    |                   |\n    |                   attempt to subtract with overflow\n    |"}, {"sha": "a0dbcc88cea8a9da000689a7804cfee57da5159d", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -11,43 +11,51 @@ use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n-const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+const VALS_I8: (i8,) =\n     (\n      i8::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n+const VALS_I16: (i16,) =\n     (\n      i16::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n+const VALS_I32: (i32,) =\n     (\n      i32::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n+const VALS_I64: (i64,) =\n     (\n      i64::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n+const VALS_U8: (u8,) =\n     (\n      u8::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U16: (u16,) = (\n      u16::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U32: (u32,) = (\n      u32::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n+const VALS_U64: (u64,) =\n     (\n      u64::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "419b3d52dbff1b4139d9c662d51d1d44c57991eb", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,12 +1,12 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:14:1\n+  --> $DIR/const-eval-overflow2.rs:16:6\n    |\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN - 1,\n-   | |      ----------- attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n    |\n note: lint level defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n@@ -15,72 +15,72 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:19:1\n+  --> $DIR/const-eval-overflow2.rs:22:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:24:1\n+  --> $DIR/const-eval-overflow2.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:29:1\n+  --> $DIR/const-eval-overflow2.rs:34:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:34:1\n+  --> $DIR/const-eval-overflow2.rs:40:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MIN - 1,\n-   | |      ----------- attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:39:1\n+  --> $DIR/const-eval-overflow2.rs:45:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:43:1\n+  --> $DIR/const-eval-overflow2.rs:50:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:47:1\n+  --> $DIR/const-eval-overflow2.rs:56:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: aborting due to 8 previous errors\n "}, {"sha": "da883671a60a3c6cbaebe860ab5da8100d7c8ac7", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -11,43 +11,51 @@ use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n-const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+const VALS_I8: (i8,) =\n     (\n      i8::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n+const VALS_I16: (i16,) =\n     (\n      i16::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n+const VALS_I32: (i32,) =\n     (\n      i32::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n+const VALS_I64: (i64,) =\n     (\n      i64::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n+const VALS_U8: (u8,) =\n     (\n      u8::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U16: (u16,) = (\n      u16::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U32: (u32,) = (\n      u32::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n+const VALS_U64: (u64,) =\n     (\n      u64::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "2cfd34c9fc3c7661f8ac68b4ef5e2e2fc6818532", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,12 +1,12 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:14:1\n+  --> $DIR/const-eval-overflow2b.rs:16:6\n    |\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MAX + 1,\n-   | |      ----------- attempt to add with overflow\n+   | |      ^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n    |\n note: lint level defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n@@ -15,72 +15,72 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:19:1\n+  --> $DIR/const-eval-overflow2b.rs:22:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:24:1\n+  --> $DIR/const-eval-overflow2b.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:29:1\n+  --> $DIR/const-eval-overflow2b.rs:34:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:34:1\n+  --> $DIR/const-eval-overflow2b.rs:40:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX + 1,\n-   | |      ----------- attempt to add with overflow\n+   | |      ^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:39:1\n+  --> $DIR/const-eval-overflow2b.rs:45:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:43:1\n+  --> $DIR/const-eval-overflow2b.rs:50:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:47:1\n+  --> $DIR/const-eval-overflow2b.rs:56:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: aborting due to 8 previous errors\n "}, {"sha": "e87344405a103f5cf7bfa75ea19edbd8190639f1", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -11,43 +11,51 @@ use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n-const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+const VALS_I8: (i8,) =\n     (\n      i8::MIN * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n+const VALS_I16: (i16,) =\n     (\n      i16::MIN * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n+const VALS_I32: (i32,) =\n     (\n      i32::MIN * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n+const VALS_I64: (i64,) =\n     (\n      i64::MIN * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n+const VALS_U8: (u8,) =\n     (\n      u8::MAX * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U16: (u16,) = (\n      u16::MAX * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U32: (u32,) = (\n      u32::MAX * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n+const VALS_U64: (u64,) =\n     (\n      u64::MAX * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "5e63286c594d95165e49934dc8e1d99525a8a35a", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,12 +1,12 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:14:1\n+  --> $DIR/const-eval-overflow2c.rs:16:6\n    |\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN * 2,\n-   | |      ----------- attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n    |\n note: lint level defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n@@ -15,72 +15,72 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:19:1\n+  --> $DIR/const-eval-overflow2c.rs:22:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:24:1\n+  --> $DIR/const-eval-overflow2c.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:29:1\n+  --> $DIR/const-eval-overflow2c.rs:34:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:34:1\n+  --> $DIR/const-eval-overflow2c.rs:40:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX * 2,\n-   | |      ----------- attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:39:1\n+  --> $DIR/const-eval-overflow2c.rs:45:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:43:1\n+  --> $DIR/const-eval-overflow2c.rs:50:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:47:1\n+  --> $DIR/const-eval-overflow2c.rs:56:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: aborting due to 8 previous errors\n "}, {"sha": "284b06984a31c09505e43295b84c92f33348202a", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -7,28 +7,28 @@ LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:27:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:27:43\n    |\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n    |\n    = note: #[deny(const_err)] on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:30:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:30:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:33:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:33:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -49,26 +49,26 @@ LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.u\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:42:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:42:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:45:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:45:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:48:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:48:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -89,10 +89,10 @@ LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.i\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:57:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:57:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -105,42 +105,42 @@ LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.flo\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:63:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:63:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------------^^^\n+   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:66:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:66:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:69:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:69:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n+   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:72:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:72:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:75:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:75:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -153,34 +153,34 @@ LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 }\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:81:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:81:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:84:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:84:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------^^^\n+   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:87:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:87:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:90:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:90:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -193,18 +193,18 @@ LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:96:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:96:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:99:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:99:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -217,18 +217,18 @@ LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:105:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:105:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:108:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:108:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n "}, {"sha": "12c7e3d34ab9e14b0cc409929f1c0952057671ff", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,29 +1,29 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:4:1\n+  --> $DIR/const_panic.rs:4:19\n    |\n LL | pub const Z: () = panic!(\"cheese\");\n-   | ^^^^^^^^^^^^^^^^^^----------------^\n+   | ------------------^^^^^^^^^^^^^^^^-\n    |                   |\n    |                   the evaluated program panicked at 'cheese', $DIR/const_panic.rs:4:19\n    |\n    = note: #[deny(const_err)] on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:7:1\n+  --> $DIR/const_panic.rs:7:19\n    |\n LL | pub const Y: () = unreachable!();\n-   | ^^^^^^^^^^^^^^^^^^--------------^\n+   | ------------------^^^^^^^^^^^^^^-\n    |                   |\n    |                   the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:7:19\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:10:1\n+  --> $DIR/const_panic.rs:10:19\n    |\n LL | pub const X: () = unimplemented!();\n-   | ^^^^^^^^^^^^^^^^^^----------------^\n+   | ------------------^^^^^^^^^^^^^^^^-\n    |                   |\n    |                   the evaluated program panicked at 'not yet implemented', $DIR/const_panic.rs:10:19\n    |"}, {"sha": "9dddac49c92b80baf322dbcd2ff6322d09acaa30", "filename": "src/test/ui/consts/const-eval/const_panic_libcore.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,29 +1,29 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore.rs:5:1\n+  --> $DIR/const_panic_libcore.rs:5:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n-   | ^^^^^^^^^^^^^^----------------^\n+   | --------------^^^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore.rs:5:15\n    |\n    = note: #[deny(const_err)] on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore.rs:8:1\n+  --> $DIR/const_panic_libcore.rs:8:15\n    |\n LL | const Y: () = unreachable!();\n-   | ^^^^^^^^^^^^^^--------------^\n+   | --------------^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore.rs:8:15\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore.rs:11:1\n+  --> $DIR/const_panic_libcore.rs:11:15\n    |\n LL | const X: () = unimplemented!();\n-   | ^^^^^^^^^^^^^^----------------^\n+   | --------------^^^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'not yet implemented', $DIR/const_panic_libcore.rs:11:15\n    |"}, {"sha": "df04a03681127189606f0755e640362a047df49f", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,29 +1,29 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_main.rs:9:1\n+  --> $DIR/const_panic_libcore_main.rs:9:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n-   | ^^^^^^^^^^^^^^----------------^\n+   | --------------^^^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_main.rs:9:15\n    |\n    = note: #[deny(const_err)] on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_main.rs:12:1\n+  --> $DIR/const_panic_libcore_main.rs:12:15\n    |\n LL | const Y: () = unreachable!();\n-   | ^^^^^^^^^^^^^^--------------^\n+   | --------------^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_main.rs:12:15\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_main.rs:15:1\n+  --> $DIR/const_panic_libcore_main.rs:15:15\n    |\n LL | const X: () = unimplemented!();\n-   | ^^^^^^^^^^^^^^----------------^\n+   | --------------^^^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'not yet implemented', $DIR/const_panic_libcore_main.rs:15:15\n    |"}, {"sha": "0d4c0b98879cc4008ba4a79a193345ae026cdcd5", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,34 +1,34 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:6:1\n+  --> $DIR/const_raw_ptr_ops.rs:6:26\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | -------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n    |\n    = note: #[deny(const_err)] on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:12:1\n+  --> $DIR/const_raw_ptr_ops.rs:12:28\n    |\n LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------^^^\n+   | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                            |\n    |                            \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:16:1\n+  --> $DIR/const_raw_ptr_ops.rs:16:26\n    |\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------^^^\n+   | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          a memory access tried to interpret some bytes as a pointer\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:17:1\n+  --> $DIR/const_raw_ptr_ops.rs:17:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------^^^\n+   | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          a memory access tried to interpret some bytes as a pointer\n "}, {"sha": "478e453fe0834f2a0e3d47d77fb34601bcf8bfc9", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:8:5\n+  --> $DIR/issue-43197.rs:8:20\n    |\n LL |     const X: u32 = 0-1;\n-   |     ^^^^^^^^^^^^^^^---^\n+   |     ---------------^^^-\n    |                    |\n    |                    attempt to subtract with overflow\n    |\n@@ -13,10 +13,10 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:10:5\n+  --> $DIR/issue-43197.rs:10:24\n    |\n LL |     const Y: u32 = foo(0-1);\n-   |     ^^^^^^^^^^^^^^^^^^^---^^\n+   |     -------------------^^^--\n    |                        |\n    |                        attempt to subtract with overflow\n "}, {"sha": "5a59a8b2dffcd2c6459d9817af8c1890295491c3", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/issue-49296.rs:18:1\n+  --> $DIR/issue-49296.rs:18:16\n    |\n LL | const X: u64 = *wat(42);\n-   | ^^^^^^^^^^^^^^^--------^\n+   | ---------------^^^^^^^^-\n    |                |\n    |                dangling pointer was dereferenced\n    |"}, {"sha": "da560046c547c246764bbf5e4aef0ae8ccdbd6e2", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/issue-50814-2.rs:12:5\n+  --> $DIR/issue-50814-2.rs:12:24\n    |\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n-   |     ^^^^^^^^^^^^^^^^^^^-----------------^\n+   |     -------------------^^^^^^^^^^^^^^^^^-\n    |                        |\n    |                        index out of bounds: the len is 3 but the index is 42\n    |"}, {"sha": "bc9443b26f5fd9489f859431722986143f4868c3", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/issue-50814.rs:13:5\n+  --> $DIR/issue-50814.rs:13:21\n    |\n LL |     const MAX: u8 = A::MAX + B::MAX;\n-   |     ^^^^^^^^^^^^^^^^---------------^\n+   |     ----------------^^^^^^^^^^^^^^^-\n    |                     |\n    |                     attempt to add with overflow\n    |"}, {"sha": "bd262b69da81a73feb2e6671bdfa59cf3eb7f306", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n-  --> $DIR/pub_const_err.rs:6:1\n+  --> $DIR/pub_const_err.rs:6:20\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   | ^^^^^^^^^^^^^^^^^^^-----^\n+   | -------------------^^^^^-\n    |                    |\n    |                    attempt to subtract with overflow\n    |"}, {"sha": "866d1753edb955dc1e9ed4c699cb67f43d5e718a", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n-  --> $DIR/pub_const_err_bin.rs:4:1\n+  --> $DIR/pub_const_err_bin.rs:4:20\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   | ^^^^^^^^^^^^^^^^^^^-----^\n+   | -------------------^^^^^-\n    |                    |\n    |                    attempt to subtract with overflow\n    |"}, {"sha": "603efe449f143160fe88f5f52c2cd391c2589dd2", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,10 +1,10 @@\n warning: due to multiple output types requested, the explicitly specified output file name will be adapted for each output type\n \n error: any use of this value will cause an error\n-  --> $DIR/unused-broken-const.rs:5:1\n+  --> $DIR/unused-broken-const.rs:5:18\n    |\n LL | const FOO: i32 = [][0];\n-   | ^^^^^^^^^^^^^^^^^-----^\n+   | -----------------^^^^^-\n    |                  |\n    |                  index out of bounds: the len is 0 but the index is 0\n    |"}, {"sha": "0fa82008711c9ad1befc144ad7e657705197aff5", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,322 +1,322 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:14:1\n+  --> $DIR/const-int-unchecked.rs:14:29\n    |\n LL | const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             Overflowing shift by 8 in unchecked_shl\n    |\n    = note: #[deny(const_err)] on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:16:1\n+  --> $DIR/const-int-unchecked.rs:16:31\n    |\n LL | const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 16 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:18:1\n+  --> $DIR/const-int-unchecked.rs:18:31\n    |\n LL | const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 32 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:20:1\n+  --> $DIR/const-int-unchecked.rs:20:31\n    |\n LL | const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 64 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:22:1\n+  --> $DIR/const-int-unchecked.rs:22:33\n    |\n LL | const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 128 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:27:1\n+  --> $DIR/const-int-unchecked.rs:27:29\n    |\n LL | const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             Overflowing shift by 8 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:29:1\n+  --> $DIR/const-int-unchecked.rs:29:31\n    |\n LL | const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 16 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:31:1\n+  --> $DIR/const-int-unchecked.rs:31:31\n    |\n LL | const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 32 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:33:1\n+  --> $DIR/const-int-unchecked.rs:33:31\n    |\n LL | const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 64 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:35:1\n+  --> $DIR/const-int-unchecked.rs:35:33\n    |\n LL | const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 128 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:40:1\n+  --> $DIR/const-int-unchecked.rs:40:33\n    |\n LL | const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 255 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:42:1\n+  --> $DIR/const-int-unchecked.rs:42:35\n    |\n LL | const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 65535 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:44:1\n+  --> $DIR/const-int-unchecked.rs:44:35\n    |\n LL | const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 4294967295 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:46:1\n+  --> $DIR/const-int-unchecked.rs:46:35\n    |\n LL | const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 18446744073709551615 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:48:1\n+  --> $DIR/const-int-unchecked.rs:48:37\n    |\n LL | const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n    |                                     Overflowing shift by 340282366920938463463374607431768211455 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:54:1\n+  --> $DIR/const-int-unchecked.rs:54:40\n    |\n LL | const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n    |                                        Overflowing shift by 250 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:56:1\n+  --> $DIR/const-int-unchecked.rs:56:42\n    |\n LL | const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 65523 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:58:1\n+  --> $DIR/const-int-unchecked.rs:58:42\n    |\n LL | const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 4294967271 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:60:1\n+  --> $DIR/const-int-unchecked.rs:60:42\n    |\n LL | const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 18446744073709551586 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:62:1\n+  --> $DIR/const-int-unchecked.rs:62:44\n    |\n LL | const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n    |                                            Overflowing shift by 340282366920938463463374607431768211363 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:69:1\n+  --> $DIR/const-int-unchecked.rs:69:29\n    |\n LL | const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             Overflowing shift by 8 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:71:1\n+  --> $DIR/const-int-unchecked.rs:71:31\n    |\n LL | const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 16 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:73:1\n+  --> $DIR/const-int-unchecked.rs:73:31\n    |\n LL | const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 32 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:75:1\n+  --> $DIR/const-int-unchecked.rs:75:31\n    |\n LL | const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 64 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:77:1\n+  --> $DIR/const-int-unchecked.rs:77:33\n    |\n LL | const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 128 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:82:1\n+  --> $DIR/const-int-unchecked.rs:82:29\n    |\n LL | const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             Overflowing shift by 8 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:84:1\n+  --> $DIR/const-int-unchecked.rs:84:31\n    |\n LL | const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 16 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:86:1\n+  --> $DIR/const-int-unchecked.rs:86:31\n    |\n LL | const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 32 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:88:1\n+  --> $DIR/const-int-unchecked.rs:88:31\n    |\n LL | const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 64 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:90:1\n+  --> $DIR/const-int-unchecked.rs:90:33\n    |\n LL | const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 128 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:95:1\n+  --> $DIR/const-int-unchecked.rs:95:33\n    |\n LL | const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 255 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:97:1\n+  --> $DIR/const-int-unchecked.rs:97:35\n    |\n LL | const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 65535 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:99:1\n+  --> $DIR/const-int-unchecked.rs:99:35\n    |\n LL | const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 4294967295 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:101:1\n+  --> $DIR/const-int-unchecked.rs:101:35\n    |\n LL | const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 18446744073709551615 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:103:1\n+  --> $DIR/const-int-unchecked.rs:103:37\n    |\n LL | const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n    |                                     Overflowing shift by 340282366920938463463374607431768211455 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:109:1\n+  --> $DIR/const-int-unchecked.rs:109:40\n    |\n LL | const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n    |                                        Overflowing shift by 250 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:111:1\n+  --> $DIR/const-int-unchecked.rs:111:42\n    |\n LL | const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 65523 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:113:1\n+  --> $DIR/const-int-unchecked.rs:113:42\n    |\n LL | const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 4294967271 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:115:1\n+  --> $DIR/const-int-unchecked.rs:115:42\n    |\n LL | const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 18446744073709551586 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:117:1\n+  --> $DIR/const-int-unchecked.rs:117:44\n    |\n LL | const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n    |                                            Overflowing shift by 340282366920938463463374607431768211363 in unchecked_shr\n "}, {"sha": "ef4fa126dca329389991af9f342f2fd102f08374", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-len-underflow-separate-spans.rs:7:1\n+  --> $DIR/const-len-underflow-separate-spans.rs:7:20\n    |\n LL | const LEN: usize = ONE - TWO;\n-   | ^^^^^^^^^^^^^^^^^^^---------^\n+   | -------------------^^^^^^^^^-\n    |                    |\n    |                    attempt to subtract with overflow\n    |"}, {"sha": "c90cdbcb26970487f013f293faa7ffe282989966", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-slice-oob.rs:4:1\n+  --> $DIR/const-slice-oob.rs:4:18\n    |\n LL | const BAR: u32 = FOO[5];\n-   | ^^^^^^^^^^^^^^^^^------^\n+   | -----------------^^^^^^-\n    |                  |\n    |                  index out of bounds: the len is 3 but the index is 5\n    |"}, {"sha": "59b865437a2e0f724c7b3505e009d71b225c40dc", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -41,41 +41,31 @@ error[E0599]: no associated item named `AssocItem` found for type `[u8]` in the\n   --> $DIR/bad-assoc-pat.rs:3:15\n    |\n LL |         [u8]::AssocItem => {}\n-   |         ------^^^^^^^^^\n-   |         |\n-   |         associated item not found in `[u8]`\n+   |               ^^^^^^^^^ associated item not found in `[u8]`\n \n error[E0599]: no associated item named `AssocItem` found for type `(u8, u8)` in the current scope\n   --> $DIR/bad-assoc-pat.rs:6:19\n    |\n LL |         (u8, u8)::AssocItem => {}\n-   |         ----------^^^^^^^^^\n-   |         |\n-   |         associated item not found in `(u8, u8)`\n+   |                   ^^^^^^^^^ associated item not found in `(u8, u8)`\n \n error[E0599]: no associated item named `AssocItem` found for type `_` in the current scope\n   --> $DIR/bad-assoc-pat.rs:9:12\n    |\n LL |         _::AssocItem => {}\n-   |         ---^^^^^^^^^\n-   |         |\n-   |         associated item not found in `_`\n+   |            ^^^^^^^^^ associated item not found in `_`\n \n error[E0599]: no associated item named `AssocItem` found for type `(u8,)` in the current scope\n   --> $DIR/bad-assoc-pat.rs:14:17\n    |\n LL |         &(u8,)::AssocItem => {}\n-   |          -------^^^^^^^^^\n-   |          |\n-   |          associated item not found in `(u8,)`\n+   |                 ^^^^^^^^^ associated item not found in `(u8,)`\n \n error[E0599]: no associated item named `AssocItem` found for type `u8` in the current scope\n   --> $DIR/bad-assoc-pat.rs:21:24\n    |\n LL |     ($ty: ty) => ($ty::AssocItem)\n-   |                   -----^^^^^^^^^\n-   |                   |\n-   |                   associated item not found in `u8`\n+   |                        ^^^^^^^^^ associated item not found in `u8`\n ...\n LL |         pat!(u8) => {}\n    |         -------- in this macro invocation\n@@ -84,9 +74,7 @@ error[E0599]: no associated item named `AssocItem` found for type `u8` in the cu\n   --> $DIR/bad-assoc-pat.rs:32:16\n    |\n LL |         ty!()::AssocItem => {}\n-   |         -------^^^^^^^^^\n-   |         |\n-   |         associated item not found in `u8`\n+   |                ^^^^^^^^^ associated item not found in `u8`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "5189ffa62d1ba23446eb46c849f4fa2af97a3699", "filename": "src/test/ui/dont-suggest-private-trait-method.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -5,9 +5,7 @@ LL | struct T;\n    | --------- function or associated item `new` not found for this\n ...\n LL |     T::new();\n-   |     ---^^^\n-   |     |\n-   |     function or associated item not found in `T`\n+   |        ^^^ function or associated item not found in `T`\n \n error: aborting due to previous error\n "}, {"sha": "a2f30d82ec38bda4562bb147d4cdad340fa67f7e", "filename": "src/test/ui/double-type-import.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fdouble-type-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fdouble-type-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-type-import.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -4,10 +4,7 @@ error[E0252]: the name `X` is defined multiple times\n LL |     pub use self::bar::X;\n    |             ------------ previous import of the type `X` here\n LL |     use self::bar::X;\n-   |     ----^^^^^^^^^^^^-\n-   |     |   |\n-   |     |   `X` reimported here\n-   |     help: remove unnecessary import\n+   |         ^^^^^^^^^^^^ `X` reimported here\n    |\n    = note: `X` must be defined only once in the type namespace of this module\n "}, {"sha": "57c8c1c85dd414d840deaa4281ff7b337d2a4b5f", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -50,19 +50,19 @@ error[E0599]: no variant named `Empty3` found for type `empty_struct::XE` in the\n   --> $DIR/empty-struct-braces-expr.rs:22:19\n    |\n LL |     let xe3 = XE::Empty3;\n-   |               ----^^^^^^\n-   |               |   |\n-   |               |   help: did you mean: `XEmpty3`\n-   |               variant not found in `empty_struct::XE`\n+   |                   ^^^^^^\n+   |                   |\n+   |                   variant not found in `empty_struct::XE`\n+   |                   help: did you mean: `XEmpty3`\n \n error[E0599]: no variant named `Empty3` found for type `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:23:19\n    |\n LL |     let xe3 = XE::Empty3();\n-   |               ----^^^^^^\n-   |               |   |\n-   |               |   help: did you mean: `XEmpty3`\n-   |               variant not found in `empty_struct::XE`\n+   |                   ^^^^^^\n+   |                   |\n+   |                   variant not found in `empty_struct::XE`\n+   |                   help: did you mean: `XEmpty3`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "4b7f1fa82c26c23987e7402685663e9628b698c8", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/E0396-fixed.rs:5:1\n+  --> $DIR/E0396-fixed.rs:5:28\n    |\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^---------^^^\n+   | ---------------------------^^^^^^^^^---\n    |                            |\n    |                            a memory access tried to interpret some bytes as a pointer\n    |"}, {"sha": "d8e4a802959a04cfd915e9148b60d809b8f9d132", "filename": "src/test/ui/error-codes/E0430.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Ferror-codes%2FE0430.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Ferror-codes%2FE0430.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0430.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -10,10 +10,8 @@ error[E0252]: the name `fmt` is defined multiple times\n   --> $DIR/E0430.rs:1:22\n    |\n LL | use std::fmt::{self, self};\n-   |                ------^^^^\n-   |                |   | |\n-   |                |   | `fmt` reimported here\n-   |                |   help: remove unnecessary import\n+   |                ----  ^^^^ `fmt` reimported here\n+   |                |\n    |                previous import of the module `fmt` here\n    |\n    = note: `fmt` must be defined only once in the type namespace of this module"}, {"sha": "154e0b121797d4e9ef07ba8aa4ab3098223e8180", "filename": "src/test/ui/error-codes/E0458.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,8 +1,8 @@\n error[E0458]: unknown kind: `wonderful_unicorn`\n-  --> $DIR/E0458.rs:1:1\n+  --> $DIR/E0458.rs:1:8\n    |\n LL | #[link(kind = \"wonderful_unicorn\")] extern {}\n-   | ^^^^^^^--------------------------^^\n+   | -------^^^^^^^^^^^^^^^^^^^^^^^^^^--\n    |        |\n    |        unknown kind\n "}, {"sha": "89bfccf2fbc56f1cdd5d798b57f16adc904c61c1", "filename": "src/test/ui/error-codes/E0599.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Ferror-codes%2FE0599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Ferror-codes%2FE0599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0599.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo;\n    | ----------- associated item `NotEvenReal` not found for this\n ...\n LL |     || if let Foo::NotEvenReal() = Foo {};\n-   |               -----^^^^^^^^^^^-- associated item not found in `Foo`\n+   |                    ^^^^^^^^^^^ associated item not found in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "cc897b2b6b7e97ba2bebd88b39585c95f5b7c8f0", "filename": "src/test/ui/imports/duplicate.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -4,10 +4,7 @@ error[E0252]: the name `foo` is defined multiple times\n LL |     use a::foo;\n    |         ------ previous import of the value `foo` here\n LL |     use a::foo;\n-   |     ----^^^^^^-\n-   |     |   |\n-   |     |   `foo` reimported here\n-   |     help: remove unnecessary import\n+   |         ^^^^^^ `foo` reimported here\n    |\n    = note: `foo` must be defined only once in the value namespace of this module\n "}, {"sha": "a14ab7d85e851c19fd163caf455cbad7d5429e0a", "filename": "src/test/ui/invalid/invalid-path-in-const.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Finvalid%2Finvalid-path-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Finvalid%2Finvalid-path-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-path-in-const.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no associated item named `DOESNOTEXIST` found for type `u32` in th\n   --> $DIR/invalid-path-in-const.rs:2:23\n    |\n LL |     fn f(a: [u8; u32::DOESNOTEXIST]) {}\n-   |                  -----^^^^^^^^^^^^\n-   |                  |\n-   |                  associated item not found in `u32`\n+   |                       ^^^^^^^^^^^^ associated item not found in `u32`\n \n error: aborting due to previous error\n "}, {"sha": "23b1474bde70428e6145852cd466b60b7ea291e4", "filename": "src/test/ui/issues/issue-22933-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -5,9 +5,7 @@ LL | enum Delicious {\n    | -------------- variant `PIE` not found here\n ...\n LL |     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n-   |                                            -----------^^^\n-   |                                            |\n-   |                                            variant not found in `Delicious`\n+   |                                                       ^^^ variant not found in `Delicious`\n \n error: aborting due to previous error\n "}, {"sha": "b1afda6d1511405f3da5fbdb47798c864772a93a", "filename": "src/test/ui/issues/issue-22933-3.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no associated item named `MIN` found for type `u8` in the current\n   --> $DIR/issue-22933-3.rs:1:22\n    |\n LL | const FOO: [u32; u8::MIN as usize] = [];\n-   |                  ----^^^\n-   |                  |\n-   |                  associated item not found in `u8`\n+   |                      ^^^ associated item not found in `u8`\n \n error: aborting due to previous error\n "}, {"sha": "75dba883608e99bf4673893005d6f3946992e3c7", "filename": "src/test/ui/issues/issue-23173.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -5,9 +5,7 @@ LL | enum Token { LeftParen, RightParen, Plus, Minus, /* etc */ }\n    | ---------- variant `Homura` not found here\n ...\n LL |     use_token(&Token::Homura);\n-   |                -------^^^^^^\n-   |                |\n-   |                variant not found in `Token`\n+   |                       ^^^^^^ variant not found in `Token`\n \n error[E0599]: no function or associated item named `method` found for type `Struct` in the current scope\n   --> $DIR/issue-23173.rs:11:13\n@@ -16,9 +14,7 @@ LL | struct Struct {\n    | ------------- function or associated item `method` not found for this\n ...\n LL |     Struct::method();\n-   |     --------^^^^^^\n-   |     |\n-   |     function or associated item not found in `Struct`\n+   |             ^^^^^^ function or associated item not found in `Struct`\n \n error[E0599]: no function or associated item named `method` found for type `Struct` in the current scope\n   --> $DIR/issue-23173.rs:13:13\n@@ -27,9 +23,7 @@ LL | struct Struct {\n    | ------------- function or associated item `method` not found for this\n ...\n LL |     Struct::method;\n-   |     --------^^^^^^\n-   |     |\n-   |     function or associated item not found in `Struct`\n+   |             ^^^^^^ function or associated item not found in `Struct`\n \n error[E0599]: no associated item named `Assoc` found for type `Struct` in the current scope\n   --> $DIR/issue-23173.rs:15:13\n@@ -38,9 +32,7 @@ LL | struct Struct {\n    | ------------- associated item `Assoc` not found for this\n ...\n LL |     Struct::Assoc;\n-   |     --------^^^^^\n-   |     |\n-   |     associated item not found in `Struct`\n+   |             ^^^^^ associated item not found in `Struct`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "2a982422cab9c8399e949c37f6902900bb980a5c", "filename": "src/test/ui/issues/issue-23217.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -4,10 +4,10 @@ error[E0599]: no variant named `A` found for type `SomeEnum` in the current scop\n LL | pub enum SomeEnum {\n    | ----------------- variant `A` not found here\n LL |     B = SomeEnum::A,\n-   |         ----------^\n-   |         |         |\n-   |         |         help: did you mean: `B`\n-   |         variant not found in `SomeEnum`\n+   |                   ^\n+   |                   |\n+   |                   variant not found in `SomeEnum`\n+   |                   help: did you mean: `B`\n \n error: aborting due to previous error\n "}, {"sha": "e2b925ec5a70587a8871285612b2c1ac5c49c91e", "filename": "src/test/ui/issues/issue-26886.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-26886.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-26886.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26886.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -4,10 +4,7 @@ error[E0252]: the name `Arc` is defined multiple times\n LL | use std::sync::{self, Arc};\n    |                       --- previous import of the type `Arc` here\n LL | use std::sync::Arc;\n-   | ----^^^^^^^^^^^^^^-\n-   | |   |\n-   | |   `Arc` reimported here\n-   | help: remove unnecessary import\n+   |     ^^^^^^^^^^^^^^ `Arc` reimported here\n    |\n    = note: `Arc` must be defined only once in the type namespace of this module\n \n@@ -18,10 +15,7 @@ LL | use std::sync::{self, Arc};\n    |                 ---- previous import of the module `sync` here\n ...\n LL | use std::sync;\n-   | ----^^^^^^^^^-\n-   | |   |\n-   | |   `sync` reimported here\n-   | help: remove unnecessary import\n+   |     ^^^^^^^^^ `sync` reimported here\n    |\n    = note: `sync` must be defined only once in the type namespace of this module\n "}, {"sha": "fcd98b111cfc56f81965104262c9d2f5d02a74e0", "filename": "src/test/ui/issues/issue-28344.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -8,10 +8,10 @@ error[E0599]: no function or associated item named `bitor` found for type `dyn s\n   --> $DIR/issue-28344.rs:4:25\n    |\n LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n-   |                 --------^^^^^\n-   |                 |\n-   |                 function or associated item not found in `dyn std::ops::BitXor<_>`\n-   |                 help: did you mean: `bitxor`\n+   |                         ^^^^^\n+   |                         |\n+   |                         function or associated item not found in `dyn std::ops::BitXor<_>`\n+   |                         help: did you mean: `bitxor`\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::BitXor`) must be specified\n   --> $DIR/issue-28344.rs:8:13\n@@ -23,10 +23,10 @@ error[E0599]: no function or associated item named `bitor` found for type `dyn s\n   --> $DIR/issue-28344.rs:8:21\n    |\n LL |     let g = BitXor::bitor;\n-   |             --------^^^^^\n-   |             |\n-   |             function or associated item not found in `dyn std::ops::BitXor<_>`\n-   |             help: did you mean: `bitxor`\n+   |                     ^^^^^\n+   |                     |\n+   |                     function or associated item not found in `dyn std::ops::BitXor<_>`\n+   |                     help: did you mean: `bitxor`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d19c4af2df7c96ec5292f600eccf68e97ad19f03", "filename": "src/test/ui/issues/issue-28586.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-28586.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-28586.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28586.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no associated item named `BYTES` found for type `usize` in the cur\n   --> $DIR/issue-28586.rs:4:26\n    |\n LL | impl Foo for [u8; usize::BYTES] {}\n-   |                   -------^^^^^\n-   |                   |\n-   |                   associated item not found in `usize`\n+   |                          ^^^^^ associated item not found in `usize`\n \n error: aborting due to previous error\n "}, {"sha": "4781f7abe8116432870eed508caa932024837337", "filename": "src/test/ui/issues/issue-28971.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -5,10 +5,10 @@ LL | enum Foo {\n    | -------- variant `Baz` not found here\n ...\n LL |             Foo::Baz(..) => (),\n-   |             -----^^^----\n-   |             |    |\n-   |             |    help: did you mean: `Bar`\n-   |             variant not found in `Foo`\n+   |                  ^^^\n+   |                  |\n+   |                  variant not found in `Foo`\n+   |                  help: did you mean: `Bar`\n \n error: aborting due to previous error\n "}, {"sha": "32bbd4d03d6d7558037430a0e45371abb527d482", "filename": "src/test/ui/issues/issue-30123.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no function or associated item named `new_undirected` found for ty\n   --> $DIR/issue-30123.rs:7:33\n    |\n LL |     let ug = Graph::<i32, i32>::new_undirected();\n-   |              -------------------^^^^^^^^^^^^^^\n-   |              |\n-   |              function or associated item not found in `issue_30123_aux::Graph<i32, i32>`\n+   |                                 ^^^^^^^^^^^^^^ function or associated item not found in `issue_30123_aux::Graph<i32, i32>`\n \n error: aborting due to previous error\n "}, {"sha": "603d42ca35e0b2598b1d52bf26096d0b4a7271b1", "filename": "src/test/ui/issues/issue-38919.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-38919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-38919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38919.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no associated item named `Item` found for type `T` in the current\n   --> $DIR/issue-38919.rs:2:8\n    |\n LL |     T::Item;\n-   |     ---^^^^\n-   |     |\n-   |     associated item not found in `T`\n+   |        ^^^^ associated item not found in `T`\n \n error: aborting due to previous error\n "}, {"sha": "aded0c2de45e43b7a521aabf2b1a1523761e1fe2", "filename": "src/test/ui/issues/issue-39559.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no function or associated item named `dim` found for type `D` in t\n   --> $DIR/issue-39559.rs:14:21\n    |\n LL |     entries: [T; D::dim()],\n-   |                  ---^^^\n-   |                  |\n-   |                  function or associated item not found in `D`\n+   |                     ^^^ function or associated item not found in `D`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `dim`, perhaps you need to implement it:"}, {"sha": "576da4bcd31c821c7653525b1cc8b90703330930", "filename": "src/test/ui/issues/issue-3973.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-3973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-3973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3973.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -14,9 +14,7 @@ LL | struct Point {\n    | ------------ function or associated item `new` not found for this\n ...\n LL |     let p = Point::new(0.0, 0.0);\n-   |             -------^^^\n-   |             |\n-   |             function or associated item not found in `Point`\n+   |                    ^^^ function or associated item not found in `Point`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "763bb9ae0ea9c8853677538c72fba0d98f8541e4", "filename": "src/test/ui/issues/issue-42880.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-42880.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-42880.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42880.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no associated item named `String` found for type `std::string::Str\n   --> $DIR/issue-42880.rs:4:22\n    |\n LL |     let f = |&Value::String(_)| ();\n-   |               -------^^^^^^--- associated item not found in `std::string::String`\n+   |                      ^^^^^^ associated item not found in `std::string::String`\n \n error: aborting due to previous error\n "}, {"sha": "378fbe6d5c430e394f0a699bdfdb55499c7c7bee", "filename": "src/test/ui/issues/issue-43105.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -5,10 +5,10 @@ LL | const NUM: u8 = xyz();\n    |                 ^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/issue-43105.rs:3:1\n+  --> $DIR/issue-43105.rs:3:17\n    |\n LL | const NUM: u8 = xyz();\n-   | ^^^^^^^^^^^^^^^^-----^\n+   | ----------------^^^^^-\n    |                 |\n    |                 calling non-const function `xyz`\n    |"}, {"sha": "656b011bc3be80f465bb42d20f38a4bfb92e98b4", "filename": "src/test/ui/issues/issue-45829/import-twice.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,10 +2,8 @@ error[E0252]: the name `A` is defined multiple times\n   --> $DIR/import-twice.rs:6:14\n    |\n LL | use foo::{A, A};\n-   |           ---^\n-   |           || |\n-   |           || `A` reimported here\n-   |           |help: remove unnecessary import\n+   |           -  ^ `A` reimported here\n+   |           |\n    |           previous import of the type `A` here\n    |\n    = note: `A` must be defined only once in the type namespace of this module"}, {"sha": "9173c02bcd8661dbe5dfaa101760a5bcedcd40dc", "filename": "src/test/ui/issues/issue-52891.stderr", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-52891.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-52891.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52891.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -4,10 +4,7 @@ error[E0252]: the name `a` is defined multiple times\n LL | use issue_52891::a;\n    |     -------------- previous import of the module `a` here\n LL | use issue_52891::a;\n-   | ----^^^^^^^^^^^^^^-\n-   | |   |\n-   | |   `a` reimported here\n-   | help: remove unnecessary import\n+   |     ^^^^^^^^^^^^^^ `a` reimported here\n    |\n    = note: `a` must be defined only once in the type namespace of this module\n \n@@ -46,10 +43,7 @@ LL | use issue_52891::a;\n    |     -------------- previous import of the module `a` here\n ...\n LL | use issue_52891::{f, g, a};\n-   |                       --^\n-   |                       | |\n-   |                       | `a` reimported here\n-   |                       help: remove unnecessary import\n+   |                         ^ `a` reimported here\n    |\n    = note: `a` must be defined only once in the type namespace of this module\n \n@@ -84,16 +78,11 @@ LL |     a,\n error[E0252]: the name `a` is defined multiple times\n   --> $DIR/issue-52891.rs:26:5\n    |\n-LL |   use issue_52891::a;\n-   |       -------------- previous import of the module `a` here\n+LL | use issue_52891::a;\n+   |     -------------- previous import of the module `a` here\n ...\n-LL |       m,\n-   |  ______-\n-LL | |     a};\n-   | |     ^\n-   | |     |\n-   | |_____`a` reimported here\n-   |       help: remove unnecessary import\n+LL |     a};\n+   |     ^ `a` reimported here\n    |\n    = note: `a` must be defined only once in the type namespace of this module\n \n@@ -129,10 +118,7 @@ error[E0252]: the name `n` is defined multiple times\n   --> $DIR/issue-52891.rs:36:5\n    |\n LL | use issue_52891::n;\n-   | -------------------\n-   | |   |\n-   | |   previous import of the module `n` here\n-   | help: remove unnecessary import\n+   |     -------------- previous import of the module `n` here\n LL | #[macro_use]\n LL | use issue_52891::n;\n    |     ^^^^^^^^^^^^^^ `n` reimported here"}, {"sha": "2e713cc0ab508cacc862c7caa4c700a3698f95e1", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no function or associated item named `make_g` found for type `for<\n   --> $DIR/issue-57362-2.rs:22:25\n    |\n LL |     let x = <fn (&())>::make_g();\n-   |             ------------^^^^^^\n-   |             |\n-   |             function or associated item not found in `for<'r> fn(&'r ())`\n+   |                         ^^^^^^ function or associated item not found in `for<'r> fn(&'r ())`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `make_g`, perhaps you need to implement it:"}, {"sha": "07f2a046b2dbbbcab2639babcc243fca79a0779f", "filename": "src/test/ui/issues/issue-58734.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no function or associated item named `nonexistent` found for type\n   --> $DIR/issue-58734.rs:20:12\n    |\n LL |     Trait::nonexistent(());\n-   |     -------^^^^^^^^^^^\n-   |     |\n-   |     function or associated item not found in `dyn Trait`\n+   |            ^^^^^^^^^^^ function or associated item not found in `dyn Trait`\n \n error: aborting due to previous error\n "}, {"sha": "56e87215a800cb4d3b0db1d579ecf0a35693c683", "filename": "src/test/ui/issues/issue-58857.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,7 +2,8 @@ error: negative trait bounds are not supported\n   --> $DIR/issue-58857.rs:4:7\n    |\n LL | impl<A: !Valid> Conj<A>{}\n-   |       ^^^^^^^^ help: remove the trait bound\n+   |       ^^^^^^^^ negative trait bounds are not supported\n+   = help: remove the trait bound\n \n error: aborting due to previous error\n "}, {"sha": "bbeab405e293502d17a567c5514c3c8ca86de98e", "filename": "src/test/ui/issues/issue-7950.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-7950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fissues%2Fissue-7950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7950.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -5,9 +5,7 @@ LL | struct Foo;\n    | ----------- function or associated item `bar` not found for this\n ...\n LL |     Foo::bar();\n-   |     -----^^^\n-   |     |\n-   |     function or associated item not found in `Foo`\n+   |          ^^^ function or associated item not found in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "859eb04749f23107d88c01ad9d0ed935232fde02", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -12,9 +12,7 @@ error[E0599]: no function or associated item named `f` found for type `Foo` in t\n   --> $DIR/lexical-scopes.rs:10:10\n    |\n LL |     Foo::f();\n-   |     -----^\n-   |     |\n-   |     function or associated item not found in `Foo`\n+   |          ^ function or associated item not found in `Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2aaa3b5b1ea502a521a12036a25315e68e8c8486", "filename": "src/test/ui/parser/issue-33418.fixed", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fparser%2Fissue-33418.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fparser%2Fissue-33418.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33418.fixed?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,10 +1,15 @@\n // run-rustfix\n \n-trait Tr {} //~ ERROR negative trait bounds are not supported\n-trait Tr2: SuperA {} //~ ERROR negative trait bounds are not supported\n-trait Tr3: SuperB {} //~ ERROR negative trait bounds are not supported\n+trait Tr {}\n+//~^ ERROR negative trait bounds are not supported\n+trait Tr2: SuperA {}\n+//~^ ERROR negative trait bounds are not supported\n+trait Tr3: SuperB {}\n+//~^ ERROR negative trait bounds are not supported\n trait Tr4: SuperB + SuperD {}\n+//~^ ERROR negative trait bounds are not supported\n trait Tr5 {}\n+//~^ ERROR negative trait bounds are not supported\n \n trait SuperA {}\n trait SuperB {}"}, {"sha": "5533152092719f9a417a0e8ad2b547c496ed8372", "filename": "src/test/ui/parser/issue-33418.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fparser%2Fissue-33418.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fparser%2Fissue-33418.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33418.rs?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,12 +1,17 @@\n // run-rustfix\n \n-trait Tr: !SuperA {} //~ ERROR negative trait bounds are not supported\n-trait Tr2: SuperA + !SuperB {} //~ ERROR negative trait bounds are not supported\n-trait Tr3: !SuperA + SuperB {} //~ ERROR negative trait bounds are not supported\n-trait Tr4: !SuperA + SuperB //~ ERROR negative trait bounds are not supported\n+trait Tr: !SuperA {}\n+//~^ ERROR negative trait bounds are not supported\n+trait Tr2: SuperA + !SuperB {}\n+//~^ ERROR negative trait bounds are not supported\n+trait Tr3: !SuperA + SuperB {}\n+//~^ ERROR negative trait bounds are not supported\n+trait Tr4: !SuperA + SuperB\n     + !SuperC + SuperD {}\n-trait Tr5: !SuperA //~ ERROR negative trait bounds are not supported\n+//~^ ERROR negative trait bounds are not supported\n+trait Tr5: !SuperA\n     + !SuperB {}\n+//~^ ERROR negative trait bounds are not supported\n \n trait SuperA {}\n trait SuperB {}"}, {"sha": "660d9fd30c82efbe94639059614ab1a7a7357c09", "filename": "src/test/ui/parser/issue-33418.stderr", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fparser%2Fissue-33418.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fparser%2Fissue-33418.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33418.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,41 +2,40 @@ error: negative trait bounds are not supported\n   --> $DIR/issue-33418.rs:3:9\n    |\n LL | trait Tr: !SuperA {}\n-   |         ^^^^^^^^^ help: remove the trait bound\n+   |         ^^^^^^^^^ negative trait bounds are not supported\n+   = help: remove the trait bound\n \n error: negative trait bounds are not supported\n-  --> $DIR/issue-33418.rs:4:19\n+  --> $DIR/issue-33418.rs:5:19\n    |\n LL | trait Tr2: SuperA + !SuperB {}\n-   |          ---------^^^^^^^^^\n-   |          |\n-   |          help: remove the trait bound\n+   |                   ^^^^^^^^^ negative trait bounds are not supported\n+   = help: remove the trait bound\n \n error: negative trait bounds are not supported\n-  --> $DIR/issue-33418.rs:5:10\n+  --> $DIR/issue-33418.rs:7:10\n    |\n LL | trait Tr3: !SuperA + SuperB {}\n-   |          ^^^^^^^^^---------\n-   |          |\n-   |          help: remove the trait bound\n+   |          ^^^^^^^^^ negative trait bounds are not supported\n+   = help: remove the trait bound\n \n error: negative trait bounds are not supported\n-  --> $DIR/issue-33418.rs:6:10\n+  --> $DIR/issue-33418.rs:9:10\n    |\n-LL |   trait Tr4: !SuperA + SuperB\n-   |  __________-^^^^^^^^\n-LL | |     + !SuperC + SuperD {}\n-   | |_____^^^^^^^^^________- help: remove the trait bounds\n+LL | trait Tr4: !SuperA + SuperB\n+   |          ^^^^^^^^^\n+LL |     + !SuperC + SuperD {}\n+   |     ^^^^^^^^^ negative trait bounds are not supported\n+   = help: remove the trait bounds\n \n error: negative trait bounds are not supported\n-  --> $DIR/issue-33418.rs:8:10\n+  --> $DIR/issue-33418.rs:12:10\n    |\n-LL |   trait Tr5: !SuperA\n-   |  __________-^^^^^^^^\n-LL | |     + !SuperB {}\n-   | |     ^^^^^^^^-\n-   | |_____________|\n-   |               help: remove the trait bounds\n+LL | trait Tr5: !SuperA\n+   |          ^^^^^^^^^\n+LL |     + !SuperB {}\n+   |     ^^^^^^^^^ negative trait bounds are not supported\n+   = help: remove the trait bounds\n \n error: aborting due to 5 previous errors\n "}, {"sha": "08057e163496dd633147ee3d5922ebe8f63760f9", "filename": "src/test/ui/proc-macro/shadow.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -1,14 +1,11 @@\n error[E0259]: the name `derive_a` is defined multiple times\n   --> $DIR/shadow.rs:6:1\n    |\n-LL |   extern crate derive_a;\n-   |   ---------------------- previous import of the extern crate `derive_a` here\n-LL | / #[macro_use]\n-LL | | extern crate derive_a;\n-   | | ^^^^^^^^^^^^^^^^^^^^^-\n-   | |_|____________________|\n-   |   |                    help: remove unnecessary import\n-   |   `derive_a` reimported here\n+LL | extern crate derive_a;\n+   | ---------------------- previous import of the extern crate `derive_a` here\n+LL | #[macro_use]\n+LL | extern crate derive_a;\n+   | ^^^^^^^^^^^^^^^^^^^^^^ `derive_a` reimported here\n    |\n    = note: `derive_a` must be defined only once in the type namespace of this module\n "}, {"sha": "8df68ad3229edcaa21dd3e0ff12acbe2fa03764f", "filename": "src/test/ui/resolve/resolve-conflict-import-vs-import.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -4,10 +4,7 @@ error[E0252]: the name `transmute` is defined multiple times\n LL | use std::mem::transmute;\n    |     ------------------- previous import of the value `transmute` here\n LL | use std::mem::transmute;\n-   | ----^^^^^^^^^^^^^^^^^^^-\n-   | |   |\n-   | |   `transmute` reimported here\n-   | help: remove unnecessary import\n+   |     ^^^^^^^^^^^^^^^^^^^ `transmute` reimported here\n    |\n    = note: `transmute` must be defined only once in the value namespace of this module\n "}, {"sha": "c672acee040b605fdd107f33f591e2ce7818be07", "filename": "src/test/ui/rfc-2005-default-binding-mode/no-double-error.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fno-double-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fno-double-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fno-double-error.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no associated item named `XXX` found for type `u32` in the current\n   --> $DIR/no-double-error.rs:8:14\n    |\n LL |         u32::XXX => { }\n-   |         -----^^^\n-   |         |\n-   |         associated item not found in `u32`\n+   |              ^^^ associated item not found in `u32`\n \n error: aborting due to previous error\n "}, {"sha": "a81181228dfdaf88b934abb300d3dbc15a08ae24", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -30,9 +30,7 @@ error[E0599]: no function or associated item named `from_str` found for type `u3\n   --> $DIR/trait-import-suggestions.rs:30:18\n    |\n LL |     let y = u32::from_str(\"33\");\n-   |             -----^^^^^^^^\n-   |             |\n-   |             function or associated item not found in `u32`\n+   |                  ^^^^^^^^ function or associated item not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope, perhaps add a `use` for it:"}, {"sha": "3bf5309ee7d0ca7b341c6789acdef2929be0468b", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -39,9 +39,7 @@ LL | struct S;\n    | --------- function or associated item `a` not found for this\n ...\n LL |     S::a(&S);\n-   |     ---^\n-   |     |\n-   |     function or associated item not found in `S`\n+   |        ^ function or associated item not found in `S`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `a`, perhaps you need to implement it:\n@@ -54,9 +52,7 @@ LL | struct S;\n    | --------- function or associated item `b` not found for this\n ...\n LL |     S::b(&S);\n-   |     ---^\n-   |     |\n-   |     function or associated item not found in `S`\n+   |        ^ function or associated item not found in `S`\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n@@ -77,9 +73,7 @@ LL | struct S;\n    | --------- associated item `A` not found for this\n ...\n LL |     S::A;\n-   |     ---^\n-   |     |\n-   |     associated item not found in `S`\n+   |        ^ associated item not found in `S`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `A`, perhaps you need to implement it:\n@@ -92,9 +86,7 @@ LL | struct S;\n    | --------- associated item `B` not found for this\n ...\n LL |     S::B;\n-   |     ---^\n-   |     |\n-   |     associated item not found in `S`\n+   |        ^ associated item not found in `S`\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope, perhaps add a `use` for it:"}, {"sha": "900c729721104b7ec98c7b34d97c820089d731bd", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -190,17 +190,13 @@ error[E0599]: no associated item named `NN` found for type `<u8 as Tr>::Y` in th\n   --> $DIR/ufcs-partially-resolved.rs:38:20\n    |\n LL |     <u8 as Tr>::Y::NN;\n-   |     ---------------^^\n-   |     |\n-   |     associated item not found in `<u8 as Tr>::Y`\n+   |                    ^^ associated item not found in `<u8 as Tr>::Y`\n \n error[E0599]: no associated item named `N` found for type `<u8 as Dr>::X` in the current scope\n   --> $DIR/ufcs-partially-resolved.rs:55:20\n    |\n LL |     <u8 as Dr>::X::N;\n-   |     ---------------^\n-   |     |\n-   |     associated item not found in `<u8 as Dr>::X`\n+   |                    ^ associated item not found in `<u8 as Dr>::X`\n \n error: aborting due to 32 previous errors\n "}, {"sha": "28333228a29baccd46f54bdc8b816421e3a2cdba", "filename": "src/test/ui/unresolved/unresolved-extern-mod-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Funresolved%2Funresolved-extern-mod-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Funresolved%2Funresolved-extern-mod-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-extern-mod-suggestion.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -4,10 +4,7 @@ error[E0254]: the name `core` is defined multiple times\n LL | extern crate core;\n    | ------------------ previous import of the extern crate `core` here\n LL | use core;\n-   | ----^^^^-\n-   | |   |\n-   | |   `core` reimported here\n-   | help: remove unnecessary import\n+   |     ^^^^ `core` reimported here\n    |\n    = note: `core` must be defined only once in the type namespace of this module\n "}, {"sha": "f894cd36a4f90b41003ea0bdff20a2ece5ee3122", "filename": "src/test/ui/unspecified-self-in-trait-ref.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -2,33 +2,25 @@ error[E0599]: no function or associated item named `lol` found for type `dyn Foo\n   --> $DIR/unspecified-self-in-trait-ref.rs:10:18\n    |\n LL |     let a = Foo::lol();\n-   |             -----^^^\n-   |             |\n-   |             function or associated item not found in `dyn Foo<_>`\n+   |                  ^^^ function or associated item not found in `dyn Foo<_>`\n \n error[E0599]: no function or associated item named `lol` found for type `dyn Foo<_>` in the current scope\n   --> $DIR/unspecified-self-in-trait-ref.rs:12:23\n    |\n LL |     let b = Foo::<_>::lol();\n-   |             ----------^^^\n-   |             |\n-   |             function or associated item not found in `dyn Foo<_>`\n+   |                       ^^^ function or associated item not found in `dyn Foo<_>`\n \n error[E0599]: no function or associated item named `lol` found for type `dyn Bar<_, _>` in the current scope\n   --> $DIR/unspecified-self-in-trait-ref.rs:14:18\n    |\n LL |     let c = Bar::lol();\n-   |             -----^^^\n-   |             |\n-   |             function or associated item not found in `dyn Bar<_, _>`\n+   |                  ^^^ function or associated item not found in `dyn Bar<_, _>`\n \n error[E0599]: no function or associated item named `lol` found for type `dyn Bar<usize, _>` in the current scope\n   --> $DIR/unspecified-self-in-trait-ref.rs:16:30\n    |\n LL |     let d = Bar::<usize, _>::lol();\n-   |             -----------------^^^\n-   |             |\n-   |             function or associated item not found in `dyn Bar<usize, _>`\n+   |                              ^^^ function or associated item not found in `dyn Bar<usize, _>`\n \n error[E0393]: the type parameter `A` must be explicitly specified\n   --> $DIR/unspecified-self-in-trait-ref.rs:18:13"}, {"sha": "b09001a9bcd45b8f4458689a10af81616c90fb40", "filename": "src/test/ui/use/use-paths-as-items.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fuse%2Fuse-paths-as-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f5ba0ee5e49090d149e2a2df422901d538cbb7/src%2Ftest%2Fui%2Fuse%2Fuse-paths-as-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-paths-as-items.stderr?ref=93f5ba0ee5e49090d149e2a2df422901d538cbb7", "patch": "@@ -4,10 +4,7 @@ error[E0252]: the name `mem` is defined multiple times\n LL | use std::{mem, ptr};\n    |           --- previous import of the module `mem` here\n LL | use std::mem;\n-   | ----^^^^^^^^-\n-   | |   |\n-   | |   `mem` reimported here\n-   | help: remove unnecessary import\n+   |     ^^^^^^^^ `mem` reimported here\n    |\n    = note: `mem` must be defined only once in the type namespace of this module\n "}]}