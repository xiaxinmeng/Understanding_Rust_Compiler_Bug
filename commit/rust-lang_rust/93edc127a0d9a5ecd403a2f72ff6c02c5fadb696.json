{"sha": "93edc127a0d9a5ecd403a2f72ff6c02c5fadb696", "node_id": "C_kwDOAAsO6NoAKDkzZWRjMTI3YTBkOWE1ZWNkNDAzYTJmNzJmZjZjMDJjNWZhZGI2OTY", "commit": {"author": {"name": "koka", "email": "koka.code@gmail.com", "date": "2022-11-12T11:31:25Z"}, "committer": {"name": "koka", "email": "koka.code@gmail.com", "date": "2022-11-12T11:31:25Z"}, "message": "Avoid lint to unsized mutable reference", "tree": {"sha": "bffc18d9eb61dcad760f6e978533d5c0be9450b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bffc18d9eb61dcad760f6e978533d5c0be9450b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93edc127a0d9a5ecd403a2f72ff6c02c5fadb696", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTeiB5r8ReBHCJcHiKlkXpAaXd0zQUCY2+EPgAKCRClkXpAaXd0\nzUuqAP9YgB6xmmVN5kAJtbGaMvALfyh/ds2+QneXa8Z72uydiAD/THQ9BiebSYc6\n0xFeOkqsEuoaxCNh+OUuVmHHpDwSegU=\n=IMCP\n-----END PGP SIGNATURE-----", "payload": "tree bffc18d9eb61dcad760f6e978533d5c0be9450b6\nparent cad0d3d6da87b6e34a973a6dd6b34cfedeab3ea6\nauthor koka <koka.code@gmail.com> 1668252685 +0900\ncommitter koka <koka.code@gmail.com> 1668252685 +0900\n\nAvoid lint to unsized mutable reference\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93edc127a0d9a5ecd403a2f72ff6c02c5fadb696", "html_url": "https://github.com/rust-lang/rust/commit/93edc127a0d9a5ecd403a2f72ff6c02c5fadb696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93edc127a0d9a5ecd403a2f72ff6c02c5fadb696/comments", "author": {"login": "koka831", "id": 14945055, "node_id": "MDQ6VXNlcjE0OTQ1MDU1", "avatar_url": "https://avatars.githubusercontent.com/u/14945055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koka831", "html_url": "https://github.com/koka831", "followers_url": "https://api.github.com/users/koka831/followers", "following_url": "https://api.github.com/users/koka831/following{/other_user}", "gists_url": "https://api.github.com/users/koka831/gists{/gist_id}", "starred_url": "https://api.github.com/users/koka831/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koka831/subscriptions", "organizations_url": "https://api.github.com/users/koka831/orgs", "repos_url": "https://api.github.com/users/koka831/repos", "events_url": "https://api.github.com/users/koka831/events{/privacy}", "received_events_url": "https://api.github.com/users/koka831/received_events", "type": "User", "site_admin": false}, "committer": {"login": "koka831", "id": 14945055, "node_id": "MDQ6VXNlcjE0OTQ1MDU1", "avatar_url": "https://avatars.githubusercontent.com/u/14945055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koka831", "html_url": "https://github.com/koka831", "followers_url": "https://api.github.com/users/koka831/followers", "following_url": "https://api.github.com/users/koka831/following{/other_user}", "gists_url": "https://api.github.com/users/koka831/gists{/gist_id}", "starred_url": "https://api.github.com/users/koka831/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koka831/subscriptions", "organizations_url": "https://api.github.com/users/koka831/orgs", "repos_url": "https://api.github.com/users/koka831/repos", "events_url": "https://api.github.com/users/koka831/events{/privacy}", "received_events_url": "https://api.github.com/users/koka831/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cad0d3d6da87b6e34a973a6dd6b34cfedeab3ea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad0d3d6da87b6e34a973a6dd6b34cfedeab3ea6", "html_url": "https://github.com/rust-lang/rust/commit/cad0d3d6da87b6e34a973a6dd6b34cfedeab3ea6"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "ae17327fd2a63db53d6096ca515b8fe1081bae3d", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93edc127a0d9a5ecd403a2f72ff6c02c5fadb696/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93edc127a0d9a5ecd403a2f72ff6c02c5fadb696/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=93edc127a0d9a5ecd403a2f72ff6c02c5fadb696", "patch": "@@ -68,13 +68,15 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n                     expr.span,\n                     \"generally you want to avoid `&mut &mut _` if possible\",\n                 );\n-            } else if let ty::Ref(_, _, hir::Mutability::Mut) = self.cx.typeck_results().expr_ty(e).kind() {\n-                span_lint(\n-                    self.cx,\n-                    MUT_MUT,\n-                    expr.span,\n-                    \"this expression mutably borrows a mutable reference. Consider reborrowing\",\n-                );\n+            } else if let ty::Ref(_, ty, hir::Mutability::Mut) = self.cx.typeck_results().expr_ty(e).kind() {\n+                if ty.peel_refs().is_sized(self.cx.tcx.at(expr.span), self.cx.param_env) {\n+                    span_lint(\n+                        self.cx,\n+                        MUT_MUT,\n+                        expr.span,\n+                        \"this expression mutably borrows a mutable reference. Consider reborrowing\",\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "ee3a856566cc1d40cb000c91e3da40819978d918", "filename": "tests/ui/mut_mut.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93edc127a0d9a5ecd403a2f72ff6c02c5fadb696/tests%2Fui%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93edc127a0d9a5ecd403a2f72ff6c02c5fadb696/tests%2Fui%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.rs?ref=93edc127a0d9a5ecd403a2f72ff6c02c5fadb696", "patch": "@@ -57,3 +57,20 @@ fn issue6922() {\n     // do not lint from an external macro\n     mut_mut!();\n }\n+\n+mod issue9035 {\n+    use std::fmt::Display;\n+\n+    struct Foo<'a> {\n+        inner: &'a mut dyn Display,\n+    }\n+\n+    impl Foo<'_> {\n+        fn foo(&mut self) {\n+            let hlp = &mut self.inner;\n+            bar(hlp);\n+        }\n+    }\n+\n+    fn bar(_: &mut impl Display) {}\n+}"}]}