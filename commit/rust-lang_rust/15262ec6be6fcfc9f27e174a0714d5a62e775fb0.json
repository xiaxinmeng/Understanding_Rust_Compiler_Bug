{"sha": "15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MjYyZWM2YmU2ZmNmYzlmMjdlMTc0YTA3MTRkNWE2MmU3NzVmYjA=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2020-01-03T19:26:05Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2020-04-26T11:23:39Z"}, "message": "Add Read/Write::can_read/write_vectored\n\nWhen working with an arbitrary reader or writer, code that uses vectored\noperations may end up being slower than code that copies into a single\nbuffer when the underlying reader or writer doesn't actually support\nvectored operations. These new methods allow you to ask the reader or\nwiter up front if vectored operations are efficiently supported.\n\nCurrently, you have to use some heuristics to guess by e.g. checking if\nthe read or write only accessed the first buffer. Hyper is one concrete\nexample of a library that has to do this dynamically:\nhttps://github.com/hyperium/hyper/blob/0eaf304644a396895a4ce1f0146e596640bb666a/src/proto/h1/io.rs#L582-L594", "tree": {"sha": "a962ae80ff3cbdb331c76426c200cdec0d82219c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a962ae80ff3cbdb331c76426c200cdec0d82219c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "html_url": "https://github.com/rust-lang/rust/commit/15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019ab732ce63a117cbb446db1488916c5c0bd2a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/019ab732ce63a117cbb446db1488916c5c0bd2a7", "html_url": "https://github.com/rust-lang/rust/commit/019ab732ce63a117cbb446db1488916c5c0bd2a7"}], "stats": {"total": 556, "additions": 556, "deletions": 0}, "files": [{"sha": "cc2d79ee0843a4cde6dc622588f940e643bb0501", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -659,6 +659,11 @@ impl Read for File {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        self.inner.can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -674,6 +679,11 @@ impl Write for File {\n         self.inner.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.inner.can_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.flush()\n     }\n@@ -694,6 +704,11 @@ impl Read for &File {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        self.inner.can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -709,6 +724,11 @@ impl Write for &File {\n         self.inner.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.inner.can_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.flush()\n     }"}, {"sha": "cabeaf4ae774cab3b207d83716bc1c02606a7a3a", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -292,6 +292,10 @@ impl<R: Read> Read for BufReader<R> {\n         Ok(nread)\n     }\n \n+    fn can_read_vectored(&self) -> bool {\n+        self.inner.can_read_vectored()\n+    }\n+\n     // we can't skip unconditionally because of the large buffer case in read.\n     unsafe fn initializer(&self) -> Initializer {\n         self.inner.initializer()\n@@ -680,6 +684,10 @@ impl<W: Write> Write for BufWriter<W> {\n         }\n     }\n \n+    fn can_write_vectored(&self) -> bool {\n+        self.get_ref().can_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         self.flush_buf().and_then(|()| self.get_mut().flush())\n     }"}, {"sha": "859431ea0efd92ddbc4a30d62da3a0c5a82ea291", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -266,6 +266,10 @@ where\n         Ok(nread)\n     }\n \n+    fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n         let n = buf.len();\n         Read::read_exact(&mut self.fill_buf()?, buf)?;\n@@ -372,6 +376,11 @@ impl Write for Cursor<&mut [u8]> {\n         slice_write_vectored(&mut self.pos, self.inner, bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n@@ -388,6 +397,11 @@ impl Write for Cursor<&mut Vec<u8>> {\n         vec_write_vectored(&mut self.pos, self.inner, bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n@@ -404,6 +418,11 @@ impl Write for Cursor<Vec<u8>> {\n         vec_write_vectored(&mut self.pos, &mut self.inner, bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n@@ -422,6 +441,11 @@ impl Write for Cursor<Box<[u8]>> {\n         slice_write_vectored(&mut self.pos, &mut self.inner, bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())"}, {"sha": "1fb9f12dd90c31240606978b845b0b8d19511551", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -20,6 +20,11 @@ impl<R: Read + ?Sized> Read for &mut R {\n         (**self).read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        (**self).can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         (**self).initializer()\n@@ -52,6 +57,11 @@ impl<W: Write + ?Sized> Write for &mut W {\n         (**self).write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        (**self).can_write_vectored()\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         (**self).flush()\n@@ -109,6 +119,11 @@ impl<R: Read + ?Sized> Read for Box<R> {\n         (**self).read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        (**self).can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         (**self).initializer()\n@@ -141,6 +156,11 @@ impl<W: Write + ?Sized> Write for Box<W> {\n         (**self).write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        (**self).can_write_vectored()\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         (**self).flush()\n@@ -240,6 +260,11 @@ impl Read for &[u8] {\n         Ok(nread)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -316,6 +341,11 @@ impl Write for &mut [u8] {\n         Ok(nwritten)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn write_all(&mut self, data: &[u8]) -> io::Result<()> {\n         if self.write(data)? == data.len() {\n@@ -351,6 +381,11 @@ impl Write for Vec<u8> {\n         Ok(len)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.extend_from_slice(buf);"}, {"sha": "c6229fb39e0ddfb91a43b44cf48aa1655644fbdd", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -580,6 +580,19 @@ pub trait Read {\n         default_read_vectored(|b| self.read(b), bufs)\n     }\n \n+    /// Determines if this `Read`er has an efficient `read_vectored`\n+    /// implementation.\n+    ///\n+    /// If a `Read`er does not override the default `read_vectored`\n+    /// implementation, code using it may want to avoid the method all together\n+    /// and coalesce writes into a single buffer for higher performance.\n+    ///\n+    /// The default implementation returns `false`.\n+    #[unstable(feature = \"can_vector\", issue = \"none\")]\n+    fn can_read_vectored(&self) -> bool {\n+        false\n+    }\n+\n     /// Determines if this `Read`er can work with buffers of uninitialized\n     /// memory.\n     ///\n@@ -1304,6 +1317,19 @@ pub trait Write {\n         default_write_vectored(|b| self.write(b), bufs)\n     }\n \n+    /// Determines if this `Write`er has an efficient `write_vectored`\n+    /// implementation.\n+    ///\n+    /// If a `Write`er does not override the default `write_vectored`\n+    /// implementation, code using it may want to avoid the method all together\n+    /// and coalesce writes into a single buffer for higher performance.\n+    ///\n+    /// The default implementation returns `false`.\n+    #[unstable(feature = \"can_vector\", issue = \"none\")]\n+    fn can_write_vectored(&self) -> bool {\n+        false\n+    }\n+\n     /// Flush this output stream, ensuring that all intermediately buffered\n     /// contents reach their destination.\n     ///"}, {"sha": "fd5a1291785ae805648eaf1c8b183b16c4e1810a", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -87,6 +87,11 @@ impl Read for StdinRaw {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        self.0.can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -101,6 +106,11 @@ impl Write for StdoutRaw {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         self.0.flush()\n     }\n@@ -114,6 +124,11 @@ impl Write for StderrRaw {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         self.0.flush()\n     }\n@@ -140,6 +155,14 @@ impl<W: io::Write> io::Write for Maybe<W> {\n         }\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        match self {\n+            Maybe::Real(w) => w.can_write_vectored(),\n+            Maybe::Fake => true,\n+        }\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         match *self {\n             Maybe::Real(ref mut w) => handle_ebadf(w.flush(), ()),\n@@ -162,6 +185,14 @@ impl<R: io::Read> io::Read for Maybe<R> {\n             Maybe::Fake => Ok(0),\n         }\n     }\n+\n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        match self {\n+            Maybe::Real(w) => w.can_read_vectored(),\n+            Maybe::Fake => true,\n+        }\n+    }\n }\n \n fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n@@ -352,6 +383,10 @@ impl Read for Stdin {\n         self.lock().read_vectored(bufs)\n     }\n     #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        self.lock().can_read_vectored()\n+    }\n+    #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n     }\n@@ -376,6 +411,11 @@ impl Read for StdinLock<'_> {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        self.inner.can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -543,6 +583,10 @@ impl Write for Stdout {\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.lock().write_vectored(bufs)\n     }\n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.lock().can_write_vectored()\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.lock().flush()\n     }\n@@ -561,6 +605,10 @@ impl Write for StdoutLock<'_> {\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.borrow_mut().write_vectored(bufs)\n     }\n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.inner.borrow_mut().can_write_vectored()\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }\n@@ -709,6 +757,10 @@ impl Write for Stderr {\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.lock().write_vectored(bufs)\n     }\n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.lock().can_write_vectored()\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.lock().flush()\n     }\n@@ -727,6 +779,10 @@ impl Write for StderrLock<'_> {\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.borrow_mut().write_vectored(bufs)\n     }\n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.inner.borrow_mut().can_write_vectored()\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }"}, {"sha": "01947cd8b891e5bd0e256f0ef9d697d3a609c11d", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -179,6 +179,11 @@ impl Read for Repeat {\n         Ok(nwritten)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -235,6 +240,11 @@ impl Write for Sink {\n         Ok(total_len)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())"}, {"sha": "ac07af5e278fbe902425aeaab38e12799cebf8bb", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -243,6 +243,7 @@\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n #![feature(cfg_accessible)]\n+#![feature(can_vector)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]"}, {"sha": "86955a79759399036c0a37bf17c13acb6339be84", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -576,6 +576,11 @@ impl Read for TcpStream {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        self.0.can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -591,6 +596,11 @@ impl Write for TcpStream {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -605,6 +615,11 @@ impl Read for &TcpStream {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        self.0.can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -620,6 +635,11 @@ impl Write for &TcpStream {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "2d22eb4ceafe4a6f27bc078a40174428abbd1210", "filename": "src/libstd/process.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -245,6 +245,10 @@ impl Write for ChildStdin {\n         self.inner.write_vectored(bufs)\n     }\n \n+    fn can_write_vectored(&self) -> bool {\n+        self.inner.can_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -300,6 +304,11 @@ impl Read for ChildStdout {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        self.inner.can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -356,6 +365,11 @@ impl Read for ChildStderr {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        self.inner.can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()"}, {"sha": "e34483447e9d666a4f45ef7237f7f4f62be038eb", "filename": "src/libstd/sys/cloudabi/shims/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -202,6 +202,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn can_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -210,6 +214,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn can_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "22195661a2ea8a0bdac1221b16b5a667c06388c5", "filename": "src/libstd/sys/cloudabi/shims/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -47,6 +47,10 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n+    pub fn can_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -55,6 +59,10 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n+    pub fn can_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         match self.0 {}\n     }"}, {"sha": "eed8d1fdd56d60c8698e58d21c4d370bd3bdc95e", "filename": "src/libstd/sys/cloudabi/shims/pipe.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -12,6 +12,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn can_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -20,6 +24,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn can_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "8d9a359f94b57f0a478ecfe05b2797ccfc75fe30", "filename": "src/libstd/sys/hermit/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -301,6 +301,11 @@ impl File {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        false\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n@@ -309,6 +314,11 @@ impl File {\n         crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        false\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "a8a82dba62ed680bff296393e8a78bfcbef91da2", "filename": "src/libstd/sys/hermit/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -99,6 +99,11 @@ impl TcpStream {\n         Ok(size)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write(&self, buffer: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(buffer)])\n     }\n@@ -114,6 +119,11 @@ impl TcpStream {\n         Ok(size)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         Err(io::Error::new(ErrorKind::Other, \"peer_addr isn't supported\"))\n     }"}, {"sha": "eed8d1fdd56d60c8698e58d21c4d370bd3bdc95e", "filename": "src/libstd/sys/hermit/pipe.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fhermit%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fhermit%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fpipe.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -12,6 +12,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn can_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -20,6 +24,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn can_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "ba72775e145588d2859edfcdf3d36470032ba3ec", "filename": "src/libstd/sys/hermit/stdio.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -20,6 +20,11 @@ impl Stdin {\n         //    .read(data)\n         Ok(0)\n     }\n+\n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n }\n \n impl Stdout {\n@@ -51,6 +56,11 @@ impl Stdout {\n         }\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -85,6 +95,11 @@ impl Stderr {\n         }\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "6cc7adde4d11072f4d892df2834e35eb10df2f30", "filename": "src/libstd/sys/sgx/fd.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -34,6 +34,11 @@ impl FileDesc {\n         usercalls::read(self.fd, bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         usercalls::write(self.fd, &[IoSlice::new(buf)])\n     }\n@@ -42,6 +47,11 @@ impl FileDesc {\n         usercalls::write(self.fd, bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         usercalls::flush(self.fd)\n     }"}, {"sha": "e34483447e9d666a4f45ef7237f7f4f62be038eb", "filename": "src/libstd/sys/sgx/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -202,6 +202,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn can_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -210,6 +214,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn can_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "12a9a1289dfa4618c8b8297761e6016cf7ae3542", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -149,6 +149,11 @@ impl TcpStream {\n         self.inner.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        self.inner.inner.can_read_vectored()\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.inner.write(buf)\n     }\n@@ -157,6 +162,11 @@ impl TcpStream {\n         self.inner.inner.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        self.inner.inner.can_write_vectored()\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         addr_to_sockaddr(&self.peer_addr)\n     }"}, {"sha": "eed8d1fdd56d60c8698e58d21c4d370bd3bdc95e", "filename": "src/libstd/sys/sgx/pipe.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -12,6 +12,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn can_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -20,6 +24,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn can_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "60ec73d9de23d5e8c3a66809be2fced309889b3f", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -613,6 +613,11 @@ impl io::Read for UnixStream {\n         io::Read::read_vectored(&mut &*self, bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        io::Read::can_read_vectored(&&*self)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -629,6 +634,11 @@ impl<'a> io::Read for &'a UnixStream {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        self.0.can_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -645,6 +655,11 @@ impl io::Write for UnixStream {\n         io::Write::write_vectored(&mut &*self, bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        io::Write::can_write_vectored(&&*self)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         io::Write::flush(&mut &*self)\n     }\n@@ -660,6 +675,11 @@ impl<'a> io::Write for &'a UnixStream {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "7083785f426f068bcdf6a4e8cd5716347e065624", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -64,6 +64,11 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         let mut me = self;\n         (&mut me).read_to_end(buf)\n@@ -116,6 +121,11 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         #[cfg(target_os = \"android\")]\n         use super::android::cvt_pwrite64;"}, {"sha": "1e8bbd4325b0397193604cb4c57da827e707df77", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -828,6 +828,11 @@ impl File {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        self.0.can_read_vectored()\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.0.read_at(buf, offset)\n     }\n@@ -840,6 +845,11 @@ impl File {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.0.write_at(buf, offset)\n     }"}, {"sha": "8510e56af37f4de95ce736b5c60328d23344485d", "filename": "src/libstd/sys/unix/l4re.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -55,6 +55,10 @@ pub mod net {\n             unimpl!();\n         }\n \n+        pub fn can_read_vectored(&self) -> bool {\n+            unimpl!();\n+        }\n+\n         pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n             unimpl!();\n         }\n@@ -75,6 +79,10 @@ pub mod net {\n             unimpl!();\n         }\n \n+        pub fn can_write_vectored(&self) -> bool {\n+            unimpl!();\n+        }\n+\n         pub fn set_timeout(&self, _: Option<Duration>, _: libc::c_int) -> io::Result<()> {\n             unimpl!();\n         }\n@@ -171,6 +179,10 @@ pub mod net {\n             unimpl!();\n         }\n \n+        pub fn can_read_vectored(&self) -> bool {\n+            unimpl!();\n+        }\n+\n         pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n             unimpl!();\n         }\n@@ -179,6 +191,10 @@ pub mod net {\n             unimpl!();\n         }\n \n+        pub fn can_write_vectored(&self) -> bool {\n+            unimpl!();\n+        }\n+\n         pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n             unimpl!();\n         }"}, {"sha": "ed97ddf333f026eea5d4a65befa2f4f1407b1263", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -226,6 +226,11 @@ impl Socket {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        self.0.can_read_vectored()\n+    }\n+\n     fn recv_from_with_flags(\n         &self,\n         buf: &mut [u8],\n@@ -263,6 +268,11 @@ impl Socket {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     pub fn set_timeout(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()> {\n         let timeout = match dur {\n             Some(dur) => {"}, {"sha": "d8ac36df9ec1d8bf13871a4ad5d80f0fad820e63", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -64,6 +64,11 @@ impl AnonPipe {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        self.0.can_read_vectored()\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n@@ -72,6 +77,11 @@ impl AnonPipe {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     pub fn fd(&self) -> &FileDesc {\n         &self.0\n     }"}, {"sha": "4026dd4e4978c4bc3ceae00a2ccf67eecab15ae2", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -20,6 +20,11 @@ impl io::Read for Stdin {\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(FileDesc::new(libc::STDIN_FILENO)).read_vectored(bufs)\n     }\n+\n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n }\n \n impl Stdout {\n@@ -37,6 +42,11 @@ impl io::Write for Stdout {\n         ManuallyDrop::new(FileDesc::new(libc::STDOUT_FILENO)).write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -57,6 +67,11 @@ impl io::Write for Stderr {\n         ManuallyDrop::new(FileDesc::new(libc::STDERR_FILENO)).write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "0593db650477b2ef68ca4e5fed6c4bec9d06fc0e", "filename": "src/libstd/sys/vxworks/fd.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -54,6 +54,11 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n+    #[inline]\n+    fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         let mut me = self;\n         (&mut me).read_to_end(buf)\n@@ -99,6 +104,11 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         unsafe fn cvt_pwrite(\n             fd: c_int,"}, {"sha": "449431f23d9b2c2fe2aa94ef94fbc9f32395e3ee", "filename": "src/libstd/sys/vxworks/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -351,6 +351,11 @@ impl File {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        self.0.can_read_vectored()\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.0.read_at(buf, offset)\n     }\n@@ -363,6 +368,11 @@ impl File {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.0.write_at(buf, offset)\n     }"}, {"sha": "455bbf3683f4697624c5ec1d2598303a3eb9788e", "filename": "src/libstd/sys/vxworks/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -163,6 +163,11 @@ impl Socket {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        self.0.can_read_vectored()\n+    }\n+\n     fn recv_from_with_flags(\n         &self,\n         buf: &mut [u8],\n@@ -200,6 +205,11 @@ impl Socket {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     pub fn set_timeout(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()> {\n         let timeout = match dur {\n             Some(dur) => {"}, {"sha": "eb99eba9888059cba1c6964d44d7f2e07ebcffd6", "filename": "src/libstd/sys/vxworks/pipe.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -24,10 +24,16 @@ impl AnonPipe {\n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.0.read(buf)\n     }\n+\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        self.0.can_read_vectored()\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n@@ -36,6 +42,11 @@ impl AnonPipe {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        self.0.can_write_vectored()\n+    }\n+\n     pub fn fd(&self) -> &FileDesc {\n         &self.0\n     }"}, {"sha": "eaf8d3e0ae859a78a3e654a1a2a5ffe8a021375d", "filename": "src/libstd/sys/wasi/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -399,6 +399,11 @@ impl File {\n         self.fd.read(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(buf)])\n     }\n@@ -407,6 +412,11 @@ impl File {\n         self.fd.write(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "ac4f55f5f86ac2e3a3d6577d9f5ddf994230855e", "filename": "src/libstd/sys/wasi/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -48,6 +48,10 @@ impl TcpStream {\n         unsupported()\n     }\n \n+    pub fn can_read_vectored(&self) -> bool {\n+        unsupported()\n+    }\n+\n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         unsupported()\n     }\n@@ -56,6 +60,10 @@ impl TcpStream {\n         unsupported()\n     }\n \n+    pub fn can_write_vectored(&self) -> bool {\n+        unsupported()\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         unsupported()\n     }"}, {"sha": "eed8d1fdd56d60c8698e58d21c4d370bd3bdc95e", "filename": "src/libstd/sys/wasi/pipe.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -12,6 +12,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn can_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -20,6 +24,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn can_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "01b041141a77f51d4739b92491058e1236312d47", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -19,6 +19,11 @@ impl Stdin {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).read(data)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn as_raw_fd(&self) -> u32 {\n         0\n     }\n@@ -37,6 +42,11 @@ impl Stdout {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -59,6 +69,11 @@ impl Stderr {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "e34483447e9d666a4f45ef7237f7f4f62be038eb", "filename": "src/libstd/sys/wasm/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -202,6 +202,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn can_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -210,6 +214,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn can_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "b9c54f4612e63afbccf5f5eee3c0ba02795a492e", "filename": "src/libstd/sys/wasm/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -44,6 +44,10 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n+    pub fn can_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -52,6 +56,10 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n+    pub fn can_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         match self.0 {}\n     }"}, {"sha": "70134439290bce016e3958569770dac34d6df920", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -409,6 +409,11 @@ impl File {\n         self.handle.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        self.handle.can_read_vectored()\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.handle.read_at(buf, offset)\n     }\n@@ -421,6 +426,11 @@ impl File {\n         self.handle.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        self.handle.can_write_vectored()\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.handle.write_at(buf, offset)\n     }"}, {"sha": "15a8af71d7f8369bd743f08595685627cef9c608", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -92,6 +92,11 @@ impl RawHandle {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        false\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         let mut read = 0;\n         let len = cmp::min(buf.len(), <c::DWORD>::max_value() as usize) as c::DWORD;\n@@ -171,6 +176,11 @@ impl RawHandle {\n         crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        false\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         let mut written = 0;\n         let len = cmp::min(buf.len(), <c::DWORD>::max_value() as usize) as c::DWORD;"}, {"sha": "1b4411e38aa8b7f285729fed3212413a02740e59", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -266,6 +266,11 @@ impl Socket {\n         }\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.recv_with_flags(buf, c::MSG_PEEK)\n     }\n@@ -324,6 +329,11 @@ impl Socket {\n         Ok(nwritten as usize)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn set_timeout(&self, dur: Option<Duration>, kind: c_int) -> io::Result<()> {\n         let timeout = match dur {\n             Some(dur) => {"}, {"sha": "f6358cf9efd92107d20c983eb43f5bae1a338d04", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -182,13 +182,23 @@ impl AnonPipe {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        self.inner.can_read_vectored()\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n \n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n+\n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        self.inner.can_write_vectored()\n+    }\n }\n \n pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) -> io::Result<()> {"}, {"sha": "bfa93cb4e2c4f9a89e3c70d988e09310007ed3fd", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15262ec6be6fcfc9f27e174a0714d5a62e775fb0/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=15262ec6be6fcfc9f27e174a0714d5a62e775fb0", "patch": "@@ -265,6 +265,11 @@ impl TcpStream {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_read_vectored(&self) -> bool {\n+        self.inner.can_read_vectored()\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;\n         let ret = cvt(unsafe {\n@@ -277,6 +282,11 @@ impl TcpStream {\n         self.inner.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn can_write_vectored(&self) -> bool {\n+        self.inner.can_write_vectored()\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         sockname(|buf, len| unsafe { c::getpeername(*self.inner.as_inner(), buf, len) })\n     }"}]}