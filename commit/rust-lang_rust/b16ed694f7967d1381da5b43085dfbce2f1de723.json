{"sha": "b16ed694f7967d1381da5b43085dfbce2f1de723", "node_id": "C_kwDOAAsO6NoAKGIxNmVkNjk0Zjc5NjdkMTM4MWRhNWI0MzA4NWRmYmNlMmYxZGU3MjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-12T07:13:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-12T07:13:26Z"}, "message": "Rollup merge of #108797 - thomcc:sourcemap_include_binary_file, r=compiler-errors\n\nAllow binary files to go through the `FileLoader`\n\nI'd like for `include_bytes!` to go through the `FileLoader` in an out-of-tree `rustc_driver` wrapper, and I can't find a reason it's not already done. It seems like most folks providing a custom `FileLoader` would want this too, so I added it.\n\nI can solve my problem in other ways if there's a strong reason not to do it, but it seems simple and harmless.", "tree": {"sha": "a66e3c0b83c47e661cbacf72499023dc260def18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a66e3c0b83c47e661cbacf72499023dc260def18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b16ed694f7967d1381da5b43085dfbce2f1de723", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDXuWCRBK7hj4Ov3rIwAAOlMIAKBtplG+dfoej8lGL/TMTUih\nppGoKIYwaafMTtqvfhZzIruvyWgHjKjS/A/+Q3oyTLSXNVNm4yJdtSIDHPUcncx4\n6cZ8NlCgwCAioPDFS5W0ulIQZDQLNCJTS+FxvBJ4yX/JJgEk6jP5v1J96b3vxBR8\nSMPETYb12mbHWxQ/cNQrxHAbBCyilgbd+ipIIHRF4YOROARLKplBAqGNsd8pmEVM\nEtHXdmcWTiKF39nE+3uWg4ZWaj7ChkdEfeMpKQFOn/e6SywirBR7bUO6xsx9WjGB\nGkijSiCM9O0xJi2qc9mooNDsRuS/nbJinqE5U4Ze4J7IOu9fDeR8YCXqz/ht9jY=\n=N1UE\n-----END PGP SIGNATURE-----\n", "payload": "tree a66e3c0b83c47e661cbacf72499023dc260def18\nparent 9668ae5eb8b169557a12d85e4088274780ef7d48\nparent 63396b30cf6e4f9148c7af8a21727b4d2109b632\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678605206 +0100\ncommitter GitHub <noreply@github.com> 1678605206 +0100\n\nRollup merge of #108797 - thomcc:sourcemap_include_binary_file, r=compiler-errors\n\nAllow binary files to go through the `FileLoader`\n\nI'd like for `include_bytes!` to go through the `FileLoader` in an out-of-tree `rustc_driver` wrapper, and I can't find a reason it's not already done. It seems like most folks providing a custom `FileLoader` would want this too, so I added it.\n\nI can solve my problem in other ways if there's a strong reason not to do it, but it seems simple and harmless.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b16ed694f7967d1381da5b43085dfbce2f1de723", "html_url": "https://github.com/rust-lang/rust/commit/b16ed694f7967d1381da5b43085dfbce2f1de723", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b16ed694f7967d1381da5b43085dfbce2f1de723/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9668ae5eb8b169557a12d85e4088274780ef7d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/9668ae5eb8b169557a12d85e4088274780ef7d48", "html_url": "https://github.com/rust-lang/rust/commit/9668ae5eb8b169557a12d85e4088274780ef7d48"}, {"sha": "63396b30cf6e4f9148c7af8a21727b4d2109b632", "url": "https://api.github.com/repos/rust-lang/rust/commits/63396b30cf6e4f9148c7af8a21727b4d2109b632", "html_url": "https://github.com/rust-lang/rust/commit/63396b30cf6e4f9148c7af8a21727b4d2109b632"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "a1cb810a4293bbc7e0e6d2fd9701d0ebe6f00688", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b16ed694f7967d1381da5b43085dfbce2f1de723/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16ed694f7967d1381da5b43085dfbce2f1de723/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=b16ed694f7967d1381da5b43085dfbce2f1de723", "patch": "@@ -100,6 +100,9 @@ pub trait FileLoader {\n \n     /// Read the contents of a UTF-8 file into memory.\n     fn read_file(&self, path: &Path) -> io::Result<String>;\n+\n+    /// Read the contents of a potentially non-UTF-8 file into memory.\n+    fn read_binary_file(&self, path: &Path) -> io::Result<Vec<u8>>;\n }\n \n /// A FileLoader that uses std::fs to load real files.\n@@ -113,6 +116,10 @@ impl FileLoader for RealFileLoader {\n     fn read_file(&self, path: &Path) -> io::Result<String> {\n         fs::read_to_string(path)\n     }\n+\n+    fn read_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {\n+        fs::read(path)\n+    }\n }\n \n /// This is a [SourceFile] identifier that is used to correlate source files between\n@@ -220,9 +227,7 @@ impl SourceMap {\n     /// Unlike `load_file`, guarantees that no normalization like BOM-removal\n     /// takes place.\n     pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {\n-        // Ideally, this should use `self.file_loader`, but it can't\n-        // deal with binary files yet.\n-        let bytes = fs::read(path)?;\n+        let bytes = self.file_loader.read_binary_file(path)?;\n \n         // We need to add file to the `SourceMap`, so that it is present\n         // in dep-info. There's also an edge case that file might be both"}]}