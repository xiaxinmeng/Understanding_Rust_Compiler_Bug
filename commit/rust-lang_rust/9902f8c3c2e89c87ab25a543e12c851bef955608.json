{"sha": "9902f8c3c2e89c87ab25a543e12c851bef955608", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MDJmOGMzYzJlODljODdhYjI1YTU0M2UxMmM4NTFiZWY5NTU2MDg=", "commit": {"author": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-02-23T10:41:34Z"}, "committer": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-03-05T10:43:44Z"}, "message": "fixes rust-lang#52482", "tree": {"sha": "1a9d5d6d968e1fe19e17ca6bb5b8329988ad98f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a9d5d6d968e1fe19e17ca6bb5b8329988ad98f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9902f8c3c2e89c87ab25a543e12c851bef955608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9902f8c3c2e89c87ab25a543e12c851bef955608", "html_url": "https://github.com/rust-lang/rust/commit/9902f8c3c2e89c87ab25a543e12c851bef955608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9902f8c3c2e89c87ab25a543e12c851bef955608/comments", "author": null, "committer": null, "parents": [{"sha": "f0be45738dd3524f9487f3cf358ef014b12c4061", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0be45738dd3524f9487f3cf358ef014b12c4061", "html_url": "https://github.com/rust-lang/rust/commit/f0be45738dd3524f9487f3cf358ef014b12c4061"}], "stats": {"total": 79, "additions": 32, "deletions": 47}, "files": [{"sha": "621a596118371407d961059ca636d921e27b0c3c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9902f8c3c2e89c87ab25a543e12c851bef955608/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9902f8c3c2e89c87ab25a543e12c851bef955608/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9902f8c3c2e89c87ab25a543e12c851bef955608", "patch": "@@ -40,7 +40,7 @@ use crate::ty::steal::Steal;\n use crate::ty::subst::{UserSubsts, UnpackedKind};\n use crate::ty::{BoundVar, BindingMode};\n use crate::ty::CanonicalPolyFnSig;\n-use crate::util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap};\n+use crate::util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap, ItemLocalSet};\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n use errors::DiagnosticBuilder;\n use rustc_data_structures::interner::HashInterner;\n@@ -409,9 +409,9 @@ pub struct TypeckTables<'tcx> {\n     /// MIR construction and hence is not serialized to metadata.\n     fru_field_types: ItemLocalMap<Vec<Ty<'tcx>>>,\n \n-    /// Maps a cast expression to its kind. This is keyed on the\n-    /// *from* expression of the cast, not the cast itself.\n-    cast_kinds: ItemLocalMap<ty::cast::CastKind>,\n+    /// For every coercion cast we add the HIR node ID of the cast\n+    /// expression to this set.\n+    coercion_casts: ItemLocalSet,\n \n     /// Set of trait imports actually used in the method resolution.\n     /// This is used for warning unused imports. During type\n@@ -456,7 +456,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             closure_kind_origins: Default::default(),\n             liberated_fn_sigs: Default::default(),\n             fru_field_types: Default::default(),\n-            cast_kinds: Default::default(),\n+            coercion_casts: Default::default(),\n             used_trait_imports: Lrc::new(Default::default()),\n             tainted_by_errors: false,\n             free_region_map: Default::default(),\n@@ -718,19 +718,19 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n-    pub fn cast_kinds(&self) -> LocalTableInContext<'_, ty::cast::CastKind> {\n-        LocalTableInContext {\n-            local_id_root: self.local_id_root,\n-            data: &self.cast_kinds\n-        }\n+    pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {\n+        validate_hir_id_for_typeck_tables(self.local_id_root, hir_id, true);\n+        self.coercion_casts.contains(&hir_id.local_id)\n     }\n \n-    pub fn cast_kinds_mut(&mut self) -> LocalTableInContextMut<'_, ty::cast::CastKind> {\n-        LocalTableInContextMut {\n-            local_id_root: self.local_id_root,\n-            data: &mut self.cast_kinds\n-        }\n+    pub fn set_coercion_cast(&mut self, id: ItemLocalId) {\n+        self.coercion_casts.insert(id);\n+    }\n+\n+    pub fn coercion_casts(&self) -> &ItemLocalSet {\n+        &self.coercion_casts\n     }\n+\n }\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n@@ -753,7 +753,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             ref liberated_fn_sigs,\n             ref fru_field_types,\n \n-            ref cast_kinds,\n+            ref coercion_casts,\n \n             ref used_trait_imports,\n             tainted_by_errors,\n@@ -798,7 +798,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             closure_kind_origins.hash_stable(hcx, hasher);\n             liberated_fn_sigs.hash_stable(hcx, hasher);\n             fru_field_types.hash_stable(hcx, hasher);\n-            cast_kinds.hash_stable(hcx, hasher);\n+            coercion_casts.hash_stable(hcx, hasher);\n             used_trait_imports.hash_stable(hcx, hasher);\n             tainted_by_errors.hash_stable(hcx, hasher);\n             free_region_map.hash_stable(hcx, hasher);"}, {"sha": "ff5f3018acc08f1c0af116e28a23a1bc21db08b7", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9902f8c3c2e89c87ab25a543e12c851bef955608/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9902f8c3c2e89c87ab25a543e12c851bef955608/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=9902f8c3c2e89c87ab25a543e12c851bef955608", "patch": "@@ -8,7 +8,6 @@ use rustc::hir::def::{Def, CtorKind};\n use rustc::mir::interpret::{GlobalId, ErrorHandled};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n-use rustc::ty::cast::CastKind as TyCastKind;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::hir;\n use rustc::hir::def_id::LocalDefId;\n@@ -656,11 +655,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n             // Check to see if this cast is a \"coercion cast\", where the cast is actually done\n             // using a coercion (or is a no-op).\n-            let cast = if let Some(&TyCastKind::CoercionCast) =\n-                cx.tables()\n-                .cast_kinds()\n-                .get(source.hir_id)\n-            {\n+            let cast = if cx.tables().is_coercion_cast(source.hir_id) {\n                 // Convert the lexpr to a vexpr.\n                 ExprKind::Use { source: source.to_ref() }\n             } else {"}, {"sha": "b0dd72030cc51c547dd691f2eb52fe637333af64", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9902f8c3c2e89c87ab25a543e12c851bef955608/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9902f8c3c2e89c87ab25a543e12c851bef955608/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=9902f8c3c2e89c87ab25a543e12c851bef955608", "patch": "@@ -14,7 +14,7 @@\n // - It's not possible to take the address of a static item with unsafe interior. This is enforced\n // by borrowck::gather_loans\n \n-use rustc::ty::cast::CastKind;\n+use rustc::ty::cast::CastTy;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n@@ -319,15 +319,12 @@ fn check_expr_kind<'a, 'tcx>(\n         hir::ExprKind::Cast(ref from, _) => {\n             let expr_promotability = v.check_expr(from);\n             debug!(\"Checking const cast(id={})\", from.hir_id);\n-            match v.tables.cast_kinds().get(from.hir_id) {\n-                None => {\n-                    v.tcx.sess.delay_span_bug(e.span, \"no kind for cast\");\n-                    NotPromotable\n-                },\n-                Some(&CastKind::PtrAddrCast) | Some(&CastKind::FnPtrAddrCast) => {\n-                    NotPromotable\n-                }\n-                _ => expr_promotability\n+            let cast_in = CastTy::from_ty(v.tables.expr_ty(from));\n+            let cast_out = CastTy::from_ty(v.tables.expr_ty(e));\n+            match (cast_in, cast_out) {\n+                (Some(CastTy::FnPtr), Some(CastTy::Int(_))) |\n+                (Some(CastTy::Ptr(_)), Some(CastTy::Int(_))) => NotPromotable,\n+                (_, _) => expr_promotability\n             }\n         }\n         hir::ExprKind::Path(ref qpath) => {"}, {"sha": "cad9e73bd2ac99b01d49c21019fde19e44070975", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9902f8c3c2e89c87ab25a543e12c851bef955608/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9902f8c3c2e89c87ab25a543e12c851bef955608/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=9902f8c3c2e89c87ab25a543e12c851bef955608", "patch": "@@ -428,13 +428,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n         } else if self.try_coercion_cast(fcx) {\n             self.trivial_cast_lint(fcx);\n             debug!(\" -> CoercionCast\");\n-            fcx.tables.borrow_mut().cast_kinds_mut().insert(self.expr.hir_id,\n-                                                            CastKind::CoercionCast);\n+            fcx.tables.borrow_mut().set_coercion_cast(self.expr.hir_id.local_id);\n+\n         } else {\n             match self.do_check(fcx) {\n                 Ok(k) => {\n                     debug!(\" -> {:?}\", k);\n-                    fcx.tables.borrow_mut().cast_kinds_mut().insert(self.expr.hir_id, k);\n                 }\n                 Err(e) => self.report_cast_error(fcx, e),\n             };"}, {"sha": "73eadf6f275dd387ceec41de6e19bcee64827422", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9902f8c3c2e89c87ab25a543e12c851bef955608/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9902f8c3c2e89c87ab25a543e12c851bef955608/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=9902f8c3c2e89c87ab25a543e12c851bef955608", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_liberated_fn_sigs();\n         wbcx.visit_fru_field_types();\n         wbcx.visit_opaque_types(body.value.span);\n-        wbcx.visit_cast_types();\n+        wbcx.visit_coercion_casts();\n         wbcx.visit_free_region_map();\n         wbcx.visit_user_provided_tys();\n         wbcx.visit_user_provided_sigs();\n@@ -355,19 +355,13 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_cast_types(&mut self) {\n+    fn visit_coercion_casts(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n-        let fcx_cast_kinds = fcx_tables.cast_kinds();\n+        let fcx_coercion_casts = fcx_tables.coercion_casts();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n-        let mut self_cast_kinds = self.tables.cast_kinds_mut();\n-        let common_local_id_root = fcx_tables.local_id_root.unwrap();\n \n-        for (&local_id, &cast_kind) in fcx_cast_kinds.iter() {\n-            let hir_id = hir::HirId {\n-                owner: common_local_id_root.index,\n-                local_id,\n-            };\n-            self_cast_kinds.insert(hir_id, cast_kind);\n+        for local_id in fcx_coercion_casts {\n+            self.tables.set_coercion_cast(*local_id);\n         }\n     }\n "}]}