{"sha": "1d33717583c34bb09fcef236884774ae082cc1fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMzM3MTc1ODNjMzRiYjA5ZmNlZjIzNjg4NDc3NGFlMDgyY2MxZmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-25T04:30:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-25T04:30:43Z"}, "message": "improve or-pattern type consistency diagnostics", "tree": {"sha": "b2c584b8436f4e9f9aa50379383d3a3707e079f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2c584b8436f4e9f9aa50379383d3a3707e079f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d33717583c34bb09fcef236884774ae082cc1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d33717583c34bb09fcef236884774ae082cc1fd", "html_url": "https://github.com/rust-lang/rust/commit/1d33717583c34bb09fcef236884774ae082cc1fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d33717583c34bb09fcef236884774ae082cc1fd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e58496c371d70d8e6343e1ab82e13177328fe7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58496c371d70d8e6343e1ab82e13177328fe7c6", "html_url": "https://github.com/rust-lang/rust/commit/e58496c371d70d8e6343e1ab82e13177328fe7c6"}], "stats": {"total": 228, "additions": 170, "deletions": 58}, "files": [{"sha": "a003c7c365dda437e63b643f8dd58b9dc12ed97c", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=1d33717583c34bb09fcef236884774ae082cc1fd", "patch": "@@ -542,8 +542,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // If there are multiple arms, make sure they all agree on\n         // what the type of the binding `x` ought to be.\n         if var_id != pat.hir_id {\n-            let vt = self.local_ty(pat.span, var_id).decl_ty;\n-            self.demand_eqtype_pat(pat.span, vt, local_ty, ti);\n+            self.check_binding_alt_eq_ty(pat.span, var_id, local_ty, ti);\n         }\n \n         if let Some(p) = sub {\n@@ -553,6 +552,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         local_ty\n     }\n \n+    fn check_binding_alt_eq_ty(&self, span: Span, var_id: HirId, ty: Ty<'tcx>, ti: TopInfo<'tcx>) {\n+        let var_ty = self.local_ty(span, var_id).decl_ty;\n+        if let Some(mut err) = self.demand_eqtype_pat_diag(span, var_ty, ty, ti) {\n+            let hir = self.tcx.hir();\n+            let var_ty = self.resolve_vars_with_obligations(var_ty);\n+            let msg = format!(\"first introduced with type `{}` here\", var_ty);\n+            err.span_label(hir.span(var_id), msg);\n+            let in_arm = hir.parent_iter(var_id).any(|(_, n)| matches!(n, hir::Node::Arm(..)));\n+            let pre = if in_arm { \"in the same arm, \" } else { \"\" };\n+            err.note(&format!(\"{}a binding must have the same type in all alternatives\", pre));\n+            err.emit();\n+        }\n+    }\n+\n     fn borrow_pat_suggestion(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "f5c8b02ae27223c02a5ff9cae43db644e1e7b167", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=1d33717583c34bb09fcef236884774ae082cc1fd", "patch": "@@ -12,7 +12,11 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this expression has type `({integer}, {integer})`\n LL |         (0, ref y) | (y, 0) => {}\n-   |                       ^ expected `&{integer}`, found integer\n+   |             -----     ^ expected `&{integer}`, found integer\n+   |             |\n+   |             first introduced with type `&{integer}` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error: aborting due to 2 previous errors\n "}, {"sha": "97933ca12294400a83a5a697be987a29af544d8a", "filename": "src/test/ui/or-patterns/already-bound-name.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr?ref=1d33717583c34bb09fcef236884774ae082cc1fd", "patch": "@@ -86,12 +86,14 @@ error[E0308]: mismatched types\n   --> $DIR/already-bound-name.rs:32:31\n    |\n LL |     let B(A(a, _) | B(a)) | A(a, A(a, _) | B(a)) = B(B(1));\n-   |                               ^                    ------- this expression has type `E<E<{integer}>>`\n-   |                               |\n-   |                               expected integer, found enum `E`\n+   |             -                 ^                    ------- this expression has type `E<E<{integer}>>`\n+   |             |                 |\n+   |             |                 expected integer, found enum `E`\n+   |             first introduced with type `{integer}` here\n    |\n    = note: expected type `{integer}`\n               found type `E<{integer}>`\n+   = note: a binding must have the same type in all alternatives\n \n error: aborting due to 15 previous errors\n "}, {"sha": "8c01e00bae3530598cdd5e1a1b5fc3fdb13c1ad6", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=1d33717583c34bb09fcef236884774ae082cc1fd", "patch": "@@ -52,23 +52,27 @@ error[E0308]: mismatched types\n   --> $DIR/inconsistent-modes.rs:11:25\n    |\n LL |     let Ok(ref a) | Err(ref mut a): Result<&u8, &mut u8> = Ok(&0);\n-   |                         ^^^^^^^^^   -------------------- expected due to this\n-   |                         |\n-   |                         types differ in mutability\n+   |            -----        ^^^^^^^^^   -------------------- expected due to this\n+   |            |            |\n+   |            |            types differ in mutability\n+   |            first introduced with type `&&u8` here\n    |\n    = note: expected type `&&u8`\n               found type `&mut &mut u8`\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/inconsistent-modes.rs:14:31\n    |\n LL |     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n-   |                               ^^^^^^^^^            ----------- this expression has type `std::result::Result<({integer}, &{integer}), (_, _)>`\n-   |                               |\n-   |                               types differ in mutability\n+   |             -----             ^^^^^^^^^            ----------- this expression has type `std::result::Result<({integer}, &{integer}), (_, _)>`\n+   |             |                 |\n+   |             |                 types differ in mutability\n+   |             first introduced with type `&{integer}` here\n    |\n    = note: expected type `&{integer}`\n               found type `&mut _`\n+   = note: a binding must have the same type in all alternatives\n \n error: aborting due to 9 previous errors\n "}, {"sha": "d5e029d668d4796a6b2cb7f9b54a176bbaf25801", "filename": "src/test/ui/or-patterns/or-patterns-binding-type-mismatch.stderr", "status": "modified", "additions": 116, "deletions": 42, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr?ref=1d33717583c34bb09fcef236884774ae082cc1fd", "patch": "@@ -4,179 +4,253 @@ error[E0308]: mismatched types\n LL |     match Blah::A(1, 1, 2) {\n    |           ---------------- this expression has type `main::Blah`\n LL |         Blah::A(_, x, y) | Blah::B(x, y) => {}\n-   |                                       ^ expected `usize`, found `isize`\n+   |                       -               ^ expected `usize`, found `isize`\n+   |                       |\n+   |                       first introduced with type `usize` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:17:44\n    |\n LL |     match Some(Blah::A(1, 1, 2)) {\n    |           ---------------------- this expression has type `std::option::Option<main::Blah>`\n LL |         Some(Blah::A(_, x, y) | Blah::B(x, y)) => {}\n-   |                                            ^ expected `usize`, found `isize`\n+   |                            -               ^ expected `usize`, found `isize`\n+   |                            |\n+   |                            first introduced with type `usize` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:21:19\n    |\n LL |     match (0u8, 1u16) {\n    |           ----------- this expression has type `(u8, u16)`\n LL |         (x, y) | (y, x) => {}\n-   |                   ^ expected `u16`, found `u8`\n+   |             -     ^ expected `u16`, found `u8`\n+   |             |\n+   |             first introduced with type `u16` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:21:22\n    |\n LL |     match (0u8, 1u16) {\n    |           ----------- this expression has type `(u8, u16)`\n LL |         (x, y) | (y, x) => {}\n-   |                      ^ expected `u8`, found `u16`\n+   |          -           ^ expected `u8`, found `u16`\n+   |          |\n+   |          first introduced with type `u8` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:26:41\n    |\n LL |     match Some((0u8, Some((1u16, 2u32)))) {\n    |           ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n-   |                                         ^ expected `u16`, found `u8`\n+   |                        -                ^ expected `u16`, found `u8`\n+   |                        |\n+   |                        first introduced with type `u16` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:26:50\n    |\n LL |     match Some((0u8, Some((1u16, 2u32)))) {\n    |           ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n-   |                                                  ^ expected `u8`, found `u16`\n+   |               -                                  ^ expected `u8`, found `u16`\n+   |               |\n+   |               first introduced with type `u8` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:26:59\n    |\n LL |     match Some((0u8, Some((1u16, 2u32)))) {\n    |           ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n-   |                                                           ^ expected `u32`, found `u16`\n+   |                           -                               ^ expected `u32`, found `u16`\n+   |                           |\n+   |                           first introduced with type `u32` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:26:62\n    |\n LL |     match Some((0u8, Some((1u16, 2u32)))) {\n    |           ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n-   |                                                              ^ expected `u8`, found `u32`\n+   |               - first introduced with type `u8` here         ^ expected `u8`, found `u32`\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:34:42\n    |\n LL |     if let Blah::A(_, x, y) | Blah::B(x, y) = Blah::A(1, 1, 2) {\n-   |                                          ^    ---------------- this expression has type `main::Blah`\n-   |                                          |\n-   |                                          expected `usize`, found `isize`\n+   |                          -               ^    ---------------- this expression has type `main::Blah`\n+   |                          |               |\n+   |                          |               expected `usize`, found `isize`\n+   |                          first introduced with type `usize` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:38:47\n    |\n LL |     if let Some(Blah::A(_, x, y) | Blah::B(x, y)) = Some(Blah::A(1, 1, 2)) {\n-   |                                               ^     ---------------------- this expression has type `std::option::Option<main::Blah>`\n-   |                                               |\n-   |                                               expected `usize`, found `isize`\n+   |                               -               ^     ---------------------- this expression has type `std::option::Option<main::Blah>`\n+   |                               |               |\n+   |                               |               expected `usize`, found `isize`\n+   |                               first introduced with type `usize` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:42:22\n    |\n LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n-   |                      ^       ----------- this expression has type `(u8, u16)`\n-   |                      |\n-   |                      expected `u16`, found `u8`\n+   |                -     ^       ----------- this expression has type `(u8, u16)`\n+   |                |     |\n+   |                |     expected `u16`, found `u8`\n+   |                first introduced with type `u16` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:42:25\n    |\n LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n-   |                         ^    ----------- this expression has type `(u8, u16)`\n-   |                         |\n-   |                         expected `u8`, found `u16`\n+   |             -           ^    ----------- this expression has type `(u8, u16)`\n+   |             |           |\n+   |             |           expected `u8`, found `u16`\n+   |             first introduced with type `u8` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:44\n    |\n LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n-   |                                            ^ expected `u16`, found `u8`\n+   |                           -                ^ expected `u16`, found `u8`\n+   |                           |\n+   |                           first introduced with type `u16` here\n ...\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:53\n    |\n LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n-   |                                                     ^ expected `u8`, found `u16`\n+   |                  -                                  ^ expected `u8`, found `u16`\n+   |                  |\n+   |                  first introduced with type `u8` here\n ...\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:62\n    |\n LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n-   |                                                              ^ expected `u32`, found `u16`\n+   |                              -                               ^ expected `u32`, found `u16`\n+   |                              |\n+   |                              first introduced with type `u32` here\n ...\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:65\n    |\n LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n-   |                                                                 ^ expected `u8`, found `u32`\n+   |                  - first introduced with type `u8` here         ^ expected `u8`, found `u32`\n ...\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:55:39\n    |\n LL |     let Blah::A(_, x, y) | Blah::B(x, y) = Blah::A(1, 1, 2);\n-   |                                       ^    ---------------- this expression has type `main::Blah`\n-   |                                       |\n-   |                                       expected `usize`, found `isize`\n+   |                       -               ^    ---------------- this expression has type `main::Blah`\n+   |                       |               |\n+   |                       |               expected `usize`, found `isize`\n+   |                       first introduced with type `usize` here\n+   |\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:58:19\n    |\n LL |     let (x, y) | (y, x) = (0u8, 1u16);\n-   |                   ^       ----------- this expression has type `(u8, u16)`\n-   |                   |\n-   |                   expected `u16`, found `u8`\n+   |             -     ^       ----------- this expression has type `(u8, u16)`\n+   |             |     |\n+   |             |     expected `u16`, found `u8`\n+   |             first introduced with type `u16` here\n+   |\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:58:22\n    |\n LL |     let (x, y) | (y, x) = (0u8, 1u16);\n-   |                      ^    ----------- this expression has type `(u8, u16)`\n-   |                      |\n-   |                      expected `u8`, found `u16`\n+   |          -           ^    ----------- this expression has type `(u8, u16)`\n+   |          |           |\n+   |          |           expected `u8`, found `u16`\n+   |          first introduced with type `u8` here\n+   |\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:62:42\n    |\n LL |     fn f1((Blah::A(_, x, y) | Blah::B(x, y)): Blah) {}\n-   |                                          ^    ---- expected due to this\n-   |                                          |\n-   |                                          expected `usize`, found `isize`\n+   |                          -               ^    ---- expected due to this\n+   |                          |               |\n+   |                          |               expected `usize`, found `isize`\n+   |                          first introduced with type `usize` here\n+   |\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:65:22\n    |\n LL |     fn f2(((x, y) | (y, x)): (u8, u16)) {}\n-   |                      ^       --------- expected due to this\n-   |                      |\n-   |                      expected `u16`, found `u8`\n+   |                -     ^       --------- expected due to this\n+   |                |     |\n+   |                |     expected `u16`, found `u8`\n+   |                first introduced with type `u16` here\n+   |\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:65:25\n    |\n LL |     fn f2(((x, y) | (y, x)): (u8, u16)) {}\n-   |                         ^    --------- expected due to this\n-   |                         |\n-   |                         expected `u8`, found `u16`\n+   |             -           ^    --------- expected due to this\n+   |             |           |\n+   |             |           expected `u8`, found `u16`\n+   |             first introduced with type `u8` here\n+   |\n+   = note: a binding must have the same type in all alternatives\n \n error: aborting due to 22 previous errors\n "}, {"sha": "749ed131b204eacf85fee158e7fcd1e91041c45e", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr?ref=1d33717583c34bb09fcef236884774ae082cc1fd", "patch": "@@ -26,26 +26,37 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this expression has type `Opts`\n LL |       Opts::A(ref i) | Opts::B(i) => {}\n-   |                                ^ expected `&isize`, found `isize`\n+   |               -----            ^ expected `&isize`, found `isize`\n+   |               |\n+   |               first introduced with type `&isize` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:16:32\n    |\n LL |     match x {\n    |           - this expression has type `Opts`\n LL |       Opts::A(ref i) | Opts::B(i) => {}\n-   |                                ^ expected `&isize`, found `isize`\n+   |               -----            ^ expected `&isize`, found `isize`\n+   |               |\n+   |               first introduced with type `&isize` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:25:36\n    |\n LL |     match x {\n    |           - this expression has type `Opts`\n LL |       Opts::A(ref mut i) | Opts::B(ref i) => {}\n-   |                                    ^^^^^ types differ in mutability\n+   |               ---------            ^^^^^ types differ in mutability\n+   |               |\n+   |               first introduced with type `&mut isize` here\n    |\n    = note: expected type `&mut isize`\n               found type `&isize`\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error: aborting due to 6 previous errors\n "}, {"sha": "1d3079c90baf657693c3d4b68f4fc32f69378dc5", "filename": "src/test/ui/resolve/resolve-inconsistent-names.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d33717583c34bb09fcef236884774ae082cc1fd/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr?ref=1d33717583c34bb09fcef236884774ae082cc1fd", "patch": "@@ -89,7 +89,11 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this expression has type `(E, E)`\n LL |         (A, B) | (ref B, c) | (c, A) => ()\n-   |                   ^^^^^ expected enum `E`, found `&E`\n+   |             -     ^^^^^ expected enum `E`, found `&E`\n+   |             |\n+   |             first introduced with type `E` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n \n error: aborting due to 9 previous errors\n "}]}