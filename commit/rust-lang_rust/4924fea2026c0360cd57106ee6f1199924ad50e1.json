{"sha": "4924fea2026c0360cd57106ee6f1199924ad50e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MjRmZWEyMDI2YzAzNjBjZDU3MTA2ZWU2ZjExOTk5MjRhZDUwZTE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-09T09:26:38Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-09T12:29:46Z"}, "message": "Rollup merge of #50511 - Manishearth:must-use, r=QuietMisdreavus\n\nAdd some explanations for #[must_use]\n\n`#[must_use]` can be given a string argument which is shown whilst warning for things.\n\nWe should add a string argument to most of the user-exposed ones.\n\nI added these for everything but the operators, mostly because I'm not sure what to write there or if we need anything there.", "tree": {"sha": "1a6ea1fe9ae65414a279c97bbd289c141e59ffed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a6ea1fe9ae65414a279c97bbd289c141e59ffed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4924fea2026c0360cd57106ee6f1199924ad50e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlry6boACgkQ/vbIBR0O\nATxh8w/6A1nXEFKi9njOy40xzS61XZzRVux7qgCYnKshu91GYZWMXdbIEuM0Nz75\nqibYTH5eoxIK5TOrkj2QgaWkjjc3Yj4cHnkOaS7CuY05pT9InXmiFrjGd6YaJ2TA\nHn8KIMveNmCA+9Jxv5orYUDE2ZCVA70Stv0sDCG/yEt5yQK9SNiUFavgM7vw83j5\ncm9tt6Ux5zYUiQ+1FZQpHonR1iGHNzJSQFVKgamhXn7GShqLUyZuKxDrO8ZKdAVK\niXN5gIlpStW9eB1ZqVZ8DnzrCyecIbpr+lRT9gWFQBT3t7dFD3Ak/mjZYonTpOiA\n96kjZVZtRbyrE4PQVwUOQQFvWBJuKUfSgAzCdru1vih+FMO4QGaxaJWtufYk84Yl\ne/B3kOPDwdkSLxzItNbMT6Q06idIYfXqhCbrGxyE/iXkCIxfCbjuauT1mAIi+9eF\n8Q4+MsQQg45dN6tYfRHHt4wDrYcwe9wncV8qaBROAM+tOOrIMq/HksKYZwhgrAFh\n9DTuRQR/3rTWPvsTLF2sdKA0CkCETB2dk26LPL0InZ3i0wOX23Tx9yRIU3zoxtxU\nSIl+qQyp514/yQUk4rUvp+A0obcAiIMtM+deqeo3nhGLGzv9JYubuxwUxAUDJwMR\nknyzbdx9vKrg9JBYvKXFzLR3mLAQOfH8UcIpowVj0waQuD5hqZY=\n=i4/6\n-----END PGP SIGNATURE-----", "payload": "tree 1a6ea1fe9ae65414a279c97bbd289c141e59ffed\nparent 4c3ab33f3a94b7ce21a28658d403e27a81ef042d\nparent a72a0801bdab22d7c0167f67d1148276ea874d2e\nauthor kennytm <kennytm@gmail.com> 1525857998 +0800\ncommitter kennytm <kennytm@gmail.com> 1525868986 +0800\n\nRollup merge of #50511 - Manishearth:must-use, r=QuietMisdreavus\n\nAdd some explanations for #[must_use]\n\n`#[must_use]` can be given a string argument which is shown whilst warning for things.\n\nWe should add a string argument to most of the user-exposed ones.\n\nI added these for everything but the operators, mostly because I'm not sure what to write there or if we need anything there.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4924fea2026c0360cd57106ee6f1199924ad50e1", "html_url": "https://github.com/rust-lang/rust/commit/4924fea2026c0360cd57106ee6f1199924ad50e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4924fea2026c0360cd57106ee6f1199924ad50e1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c3ab33f3a94b7ce21a28658d403e27a81ef042d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3ab33f3a94b7ce21a28658d403e27a81ef042d", "html_url": "https://github.com/rust-lang/rust/commit/4c3ab33f3a94b7ce21a28658d403e27a81ef042d"}, {"sha": "a72a0801bdab22d7c0167f67d1148276ea874d2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a72a0801bdab22d7c0167f67d1148276ea874d2e", "html_url": "https://github.com/rust-lang/rust/commit/a72a0801bdab22d7c0167f67d1148276ea874d2e"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "9e693c89be90d06662a408250b896225968dda0e", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=4924fea2026c0360cd57106ee6f1199924ad50e1", "patch": "@@ -207,7 +207,8 @@ impl str {\n     /// let s = \"this is old\";\n     /// assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n     /// ```\n-    #[must_use]\n+    #[must_use = \"this returns the replaced string as a new allocation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String {\n@@ -247,7 +248,8 @@ impl str {\n     /// let s = \"this is old\";\n     /// assert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n     /// ```\n-    #[must_use]\n+    #[must_use = \"this returns the replaced string as a new allocation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"str_replacen\", since = \"1.16.0\")]\n     pub fn replacen<'a, P: Pattern<'a>>(&'a self, pat: P, to: &str, count: usize) -> String {\n         // Hope to reduce the times of re-allocation"}, {"sha": "e8ea2e743da93c92cf645b0d23c1723129498b5c", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=4924fea2026c0360cd57106ee6f1199924ad50e1", "patch": "@@ -84,7 +84,7 @@ impl<'a> fmt::Write for PadAdapter<'a> {\n /// // prints \"Foo { bar: 10, baz: \"Hello World\" }\"\n /// println!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() });\n /// ```\n-#[must_use]\n+#[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugStruct<'a, 'b: 'a> {\n@@ -181,7 +181,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n /// // prints \"Foo(10, \"Hello World\")\"\n /// println!(\"{:?}\", Foo(10, \"Hello World\".to_string()));\n /// ```\n-#[must_use]\n+#[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugTuple<'a, 'b: 'a> {\n@@ -319,7 +319,7 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n /// // prints \"{10, 11}\"\n /// println!(\"{:?}\", Foo(vec![10, 11]));\n /// ```\n-#[must_use]\n+#[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugSet<'a, 'b: 'a> {\n@@ -390,7 +390,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n /// // prints \"[10, 11]\"\n /// println!(\"{:?}\", Foo(vec![10, 11]));\n /// ```\n-#[must_use]\n+#[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugList<'a, 'b: 'a> {\n@@ -461,7 +461,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n /// // prints \"{\"A\": 10, \"B\": 11}\"\n /// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n /// ```\n-#[must_use]\n+#[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugMap<'a, 'b: 'a> {"}, {"sha": "e0cc669d0350a05b6c696b7645e1163f69fae318", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=4924fea2026c0360cd57106ee6f1199924ad50e1", "patch": "@@ -251,7 +251,7 @@ use ops;\n /// [`Ok`]: enum.Result.html#variant.Ok\n /// [`Err`]: enum.Result.html#variant.Err\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n-#[must_use]\n+#[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Result<T, E> {\n     /// Contains the success value"}, {"sha": "f3503b0b3a6a768b4cb10a568e2da6d936ee162a", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=4924fea2026c0360cd57106ee6f1199924ad50e1", "patch": "@@ -150,7 +150,7 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// [`lock`]: struct.Mutex.html#method.lock\n /// [`try_lock`]: struct.Mutex.html#method.try_lock\n /// [`Mutex`]: struct.Mutex.html\n-#[must_use]\n+#[must_use = \"if unused the Mutex will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct MutexGuard<'a, T: ?Sized + 'a> {\n     // funny underscores due to how Deref/DerefMut currently work (they"}, {"sha": "e3db60cff8474767167eb02e5e6bb56c20f73ae2", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=4924fea2026c0360cd57106ee6f1199924ad50e1", "patch": "@@ -94,7 +94,7 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// [`read`]: struct.RwLock.html#method.read\n /// [`try_read`]: struct.RwLock.html#method.try_read\n /// [`RwLock`]: struct.RwLock.html\n-#[must_use]\n+#[must_use = \"if unused the RwLock will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n     __lock: &'a RwLock<T>,\n@@ -115,7 +115,7 @@ unsafe impl<'a, T: ?Sized + Sync> Sync for RwLockReadGuard<'a, T> {}\n /// [`write`]: struct.RwLock.html#method.write\n /// [`try_write`]: struct.RwLock.html#method.try_write\n /// [`RwLock`]: struct.RwLock.html\n-#[must_use]\n+#[must_use = \"if unused the RwLock will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n     __lock: &'a RwLock<T>,"}, {"sha": "022056f8a8a700fd9c41c45006f4472ef4c0252e", "filename": "src/libstd/sys_common/remutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Flibstd%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4924fea2026c0360cd57106ee6f1199924ad50e1/src%2Flibstd%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fremutex.rs?ref=4924fea2026c0360cd57106ee6f1199924ad50e1", "patch": "@@ -41,7 +41,7 @@ unsafe impl<T: Send> Sync for ReentrantMutex<T> {}\n /// because implementation of the trait would violate Rust\u2019s reference aliasing\n /// rules. Use interior mutability (usually `RefCell`) in order to mutate the\n /// guarded data.\n-#[must_use]\n+#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]\n pub struct ReentrantMutexGuard<'a, T: 'a> {\n     // funny underscores due to how Deref currently works (it disregards field\n     // privacy)."}]}