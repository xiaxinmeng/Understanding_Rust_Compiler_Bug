{"sha": "ddc0147d536b26a980c0446f86cda0e40378ea32", "node_id": "C_kwDOAAsO6NoAKGRkYzAxNDdkNTM2YjI2YTk4MGMwNDQ2Zjg2Y2RhMGU0MDM3OGVhMzI", "commit": {"author": {"name": "Alex Veber", "email": "alexveber@gmail.com", "date": "2022-12-27T06:13:38Z"}, "committer": {"name": "Alex Veber", "email": "alexveber@gmail.com", "date": "2023-01-03T06:33:27Z"}, "message": "Fix diagnostic code", "tree": {"sha": "71fa75ed7a62e6a97f64fff6bda14f601170ee40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71fa75ed7a62e6a97f64fff6bda14f601170ee40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddc0147d536b26a980c0446f86cda0e40378ea32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc0147d536b26a980c0446f86cda0e40378ea32", "html_url": "https://github.com/rust-lang/rust/commit/ddc0147d536b26a980c0446f86cda0e40378ea32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddc0147d536b26a980c0446f86cda0e40378ea32/comments", "author": {"login": "veber-alex", "id": 29788806, "node_id": "MDQ6VXNlcjI5Nzg4ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/29788806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veber-alex", "html_url": "https://github.com/veber-alex", "followers_url": "https://api.github.com/users/veber-alex/followers", "following_url": "https://api.github.com/users/veber-alex/following{/other_user}", "gists_url": "https://api.github.com/users/veber-alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/veber-alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veber-alex/subscriptions", "organizations_url": "https://api.github.com/users/veber-alex/orgs", "repos_url": "https://api.github.com/users/veber-alex/repos", "events_url": "https://api.github.com/users/veber-alex/events{/privacy}", "received_events_url": "https://api.github.com/users/veber-alex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "veber-alex", "id": 29788806, "node_id": "MDQ6VXNlcjI5Nzg4ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/29788806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veber-alex", "html_url": "https://github.com/veber-alex", "followers_url": "https://api.github.com/users/veber-alex/followers", "following_url": "https://api.github.com/users/veber-alex/following{/other_user}", "gists_url": "https://api.github.com/users/veber-alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/veber-alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veber-alex/subscriptions", "organizations_url": "https://api.github.com/users/veber-alex/orgs", "repos_url": "https://api.github.com/users/veber-alex/repos", "events_url": "https://api.github.com/users/veber-alex/events{/privacy}", "received_events_url": "https://api.github.com/users/veber-alex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74ae2dd3039cd80fc77e4ed0c0a206be6660dd9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/74ae2dd3039cd80fc77e4ed0c0a206be6660dd9a", "html_url": "https://github.com/rust-lang/rust/commit/74ae2dd3039cd80fc77e4ed0c0a206be6660dd9a"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "91532b3e96a8e8f9788d7221c87b45cb87d5ffe7", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ddc0147d536b26a980c0446f86cda0e40378ea32/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/ddc0147d536b26a980c0446f86cda0e40378ea32/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=ddc0147d536b26a980c0446f86cda0e40378ea32", "patch": "@@ -411,6 +411,11 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.diagnostics.useRustcErrorCode\": {\n+                    \"markdownDescription\": \"Whether to use the rustc error code.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"$generated-start\": {},\n                 \"rust-analyzer.assist.emitMustUse\": {\n                     \"markdownDescription\": \"Whether to insert #[must_use] when generating `as_` methods\\nfor enum variants.\","}, {"sha": "1470c1f581d41af3f3d547c1008a31a0535004d8", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddc0147d536b26a980c0446f86cda0e40378ea32/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ddc0147d536b26a980c0446f86cda0e40378ea32/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=ddc0147d536b26a980c0446f86cda0e40378ea32", "patch": "@@ -106,6 +106,7 @@ export async function createClient(\n                 next: lc.HandleDiagnosticsSignature\n             ) {\n                 const preview = config.previewRustcOutput;\n+                const errorCode = config.useRustcErrorCode;\n                 diagnostics.forEach((diag, idx) => {\n                     // Abuse the fact that VSCode leaks the LSP diagnostics data field through the\n                     // Diagnostic class, if they ever break this we are out of luck and have to go\n@@ -119,19 +120,28 @@ export async function createClient(\n                         ?.rendered;\n                     if (rendered) {\n                         if (preview) {\n-                            const index = rendered.match(/^(note|help):/m)?.index || 0;\n+                            const index =\n+                                rendered.match(/^(note|help):/m)?.index || rendered.length;\n                             diag.message = rendered\n                                 .substring(0, index)\n                                 .replace(/^ -->[^\\n]+\\n/m, \"\");\n                         }\n+                        let value;\n+                        if (errorCode) {\n+                            if (typeof diag.code === \"string\" || typeof diag.code === \"number\") {\n+                                value = diag.code;\n+                            } else {\n+                                value = diag.code?.value;\n+                            }\n+                        }\n                         diag.code = {\n                             target: vscode.Uri.from({\n                                 scheme: \"rust-analyzer-diagnostics-view\",\n                                 path: \"/diagnostic message\",\n                                 fragment: uri.toString(),\n                                 query: idx.toString(),\n                             }),\n-                            value: \"Click for full compiler diagnostic\",\n+                            value: value ?? \"Click for full compiler diagnostic\",\n                         };\n                     }\n                 });"}, {"sha": "eb4f965291fe59bfb907fcef06d912bdfa96b372", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddc0147d536b26a980c0446f86cda0e40378ea32/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ddc0147d536b26a980c0446f86cda0e40378ea32/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=ddc0147d536b26a980c0446f86cda0e40378ea32", "patch": "@@ -241,6 +241,10 @@ export class Config {\n     get previewRustcOutput() {\n         return this.get<boolean>(\"diagnostics.previewRustcOutput\");\n     }\n+\n+    get useRustcErrorCode() {\n+        return this.get<boolean>(\"diagnostics.useRustcErrorCode\");\n+    }\n }\n \n const VarRegex = new RegExp(/\\$\\{(.+?)\\}/g);"}]}