{"sha": "5a70d88af5ff96897b7ddfd01d13e039a86c775c", "node_id": "C_kwDOAAsO6NoAKDVhNzBkODhhZjVmZjk2ODk3YjdkZGZkMDFkMTNlMDM5YTg2Yzc3NWM", "commit": {"author": {"name": "DevAccentor", "email": "dev.accentor@gmail.com", "date": "2022-06-05T09:01:54Z"}, "committer": {"name": "DevAccentor", "email": "dev.accentor@gmail.com", "date": "2022-06-05T09:01:54Z"}, "message": "add vec.capacity() to slow_vec_initialization", "tree": {"sha": "d4e95256ad146fe55fbfcceae068b1525e4085ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4e95256ad146fe55fbfcceae068b1525e4085ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a70d88af5ff96897b7ddfd01d13e039a86c775c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a70d88af5ff96897b7ddfd01d13e039a86c775c", "html_url": "https://github.com/rust-lang/rust/commit/5a70d88af5ff96897b7ddfd01d13e039a86c775c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a70d88af5ff96897b7ddfd01d13e039a86c775c/comments", "author": {"login": "DevAccentor", "id": 106545343, "node_id": "U_kgDOBlnAvw", "avatar_url": "https://avatars.githubusercontent.com/u/106545343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevAccentor", "html_url": "https://github.com/DevAccentor", "followers_url": "https://api.github.com/users/DevAccentor/followers", "following_url": "https://api.github.com/users/DevAccentor/following{/other_user}", "gists_url": "https://api.github.com/users/DevAccentor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevAccentor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevAccentor/subscriptions", "organizations_url": "https://api.github.com/users/DevAccentor/orgs", "repos_url": "https://api.github.com/users/DevAccentor/repos", "events_url": "https://api.github.com/users/DevAccentor/events{/privacy}", "received_events_url": "https://api.github.com/users/DevAccentor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevAccentor", "id": 106545343, "node_id": "U_kgDOBlnAvw", "avatar_url": "https://avatars.githubusercontent.com/u/106545343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevAccentor", "html_url": "https://github.com/DevAccentor", "followers_url": "https://api.github.com/users/DevAccentor/followers", "following_url": "https://api.github.com/users/DevAccentor/following{/other_user}", "gists_url": "https://api.github.com/users/DevAccentor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevAccentor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevAccentor/subscriptions", "organizations_url": "https://api.github.com/users/DevAccentor/orgs", "repos_url": "https://api.github.com/users/DevAccentor/repos", "events_url": "https://api.github.com/users/DevAccentor/events{/privacy}", "received_events_url": "https://api.github.com/users/DevAccentor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542d474d382373369f7d93128efd888546caf7d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/542d474d382373369f7d93128efd888546caf7d4", "html_url": "https://github.com/rust-lang/rust/commit/542d474d382373369f7d93128efd888546caf7d4"}], "stats": {"total": 73, "additions": 49, "deletions": 24}, "files": [{"sha": "e5b30937d16b4b613a83412c3cd3223d8f724d78", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5a70d88af5ff96897b7ddfd01d13e039a86c775c/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a70d88af5ff96897b7ddfd01d13e039a86c775c/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=5a70d88af5ff96897b7ddfd01d13e039a86c775c", "patch": "@@ -28,6 +28,9 @@ declare_clippy_lint! {\n     /// let mut vec1 = Vec::with_capacity(len);\n     /// vec1.resize(len, 0);\n     ///\n+    /// let mut vec1 = Vec::with_capacity(len);\n+    /// vec1.resize(vec1.capacity(), 0);\n+    ///\n     /// let mut vec2 = Vec::with_capacity(len);\n     /// vec2.extend(repeat(0).take(len));\n     ///\n@@ -210,23 +213,20 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n \n     /// Checks if the given expression is resizing a vector with 0\n     fn search_slow_resize_filling(&mut self, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if self.initialization_found;\n-            if let ExprKind::MethodCall(path, [self_arg, len_arg, fill_arg], _) = expr.kind;\n-            if path_to_local_id(self_arg, self.vec_alloc.local_id);\n-            if path.ident.name == sym!(resize);\n-\n+        if self.initialization_found\n+            && let ExprKind::MethodCall(path, [self_arg, len_arg, fill_arg], _) = expr.kind\n+            && path_to_local_id(self_arg, self.vec_alloc.local_id)\n+            && path.ident.name == sym!(resize)\n             // Check that is filled with 0\n-            if let ExprKind::Lit(ref lit) = fill_arg.kind;\n-            if let LitKind::Int(0, _) = lit.node;\n-\n-            // Check that len expression is equals to `with_capacity` expression\n-            if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr);\n-\n-            then {\n-                self.slow_expression = Some(InitializationType::Resize(expr));\n+            && let ExprKind::Lit(ref lit) = fill_arg.kind\n+            && let LitKind::Int(0, _) = lit.node {\n+                // Check that len expression is equals to `with_capacity` expression\n+                if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr) {\n+                    self.slow_expression = Some(InitializationType::Resize(expr));\n+                } else if let ExprKind::MethodCall(path, _, _) = len_arg.kind && path.ident.as_str() == \"capacity\" {\n+                    self.slow_expression = Some(InitializationType::Resize(expr));\n+                }\n             }\n-        }\n     }\n \n     /// Returns `true` if give expression is `repeat(0).take(...)`\n@@ -239,12 +239,15 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n             if let Some(repeat_expr) = take_args.get(0);\n             if self.is_repeat_zero(repeat_expr);\n \n-            // Check that len expression is equals to `with_capacity` expression\n             if let Some(len_arg) = take_args.get(1);\n-            if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr);\n \n             then {\n-                return true;\n+                // Check that len expression is equals to `with_capacity` expression\n+                if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr) {\n+                    return true;\n+                } else if let ExprKind::MethodCall(path, _, _) = len_arg.kind && path.ident.as_str() == \"capacity\" {\n+                    return true;\n+                }\n             }\n         }\n "}, {"sha": "16be9f6d203aa3d332fc2af2964f60e1f580473a", "filename": "tests/ui/slow_vector_initialization.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a70d88af5ff96897b7ddfd01d13e039a86c775c/tests%2Fui%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a70d88af5ff96897b7ddfd01d13e039a86c775c/tests%2Fui%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslow_vector_initialization.rs?ref=5a70d88af5ff96897b7ddfd01d13e039a86c775c", "patch": "@@ -19,6 +19,9 @@ fn extend_vector() {\n     // Extend with mismatching expression should not be warned\n     let mut vec3 = Vec::with_capacity(24322);\n     vec3.extend(repeat(0).take(2));\n+\n+    let mut vec4 = Vec::with_capacity(len);\n+    vec4.extend(repeat(0).take(vec4.capacity()));\n }\n \n fn mixed_extend_resize_vector() {\n@@ -48,6 +51,9 @@ fn resize_vector() {\n     let mut vec3 = Vec::with_capacity(len - 10);\n     vec3.resize(len - 10, 0);\n \n+    let mut vec4 = Vec::with_capacity(len);\n+    vec4.resize(vec4.capacity(), 0);\n+\n     // Reinitialization should be warned\n     vec1 = Vec::with_capacity(10);\n     vec1.resize(10, 0);"}, {"sha": "cb3ce3e95a7aff623bcd938760801b6ab3328707", "filename": "tests/ui/slow_vector_initialization.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a70d88af5ff96897b7ddfd01d13e039a86c775c/tests%2Fui%2Fslow_vector_initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a70d88af5ff96897b7ddfd01d13e039a86c775c/tests%2Fui%2Fslow_vector_initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslow_vector_initialization.stderr?ref=5a70d88af5ff96897b7ddfd01d13e039a86c775c", "patch": "@@ -17,44 +17,60 @@ LL |     vec2.extend(repeat(0).take(len - 10));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:31:5\n+  --> $DIR/slow_vector_initialization.rs:24:5\n+   |\n+LL |     let mut vec4 = Vec::with_capacity(len);\n+   |                    ----------------------- help: consider replace allocation with: `vec![0; len]`\n+LL |     vec4.extend(repeat(0).take(vec4.capacity()));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: slow zero-filling initialization\n+  --> $DIR/slow_vector_initialization.rs:34:5\n    |\n LL |     let mut resized_vec = Vec::with_capacity(30);\n    |                           ---------------------- help: consider replace allocation with: `vec![0; 30]`\n LL |     resized_vec.resize(30, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:34:5\n+  --> $DIR/slow_vector_initialization.rs:37:5\n    |\n LL |     let mut extend_vec = Vec::with_capacity(30);\n    |                          ---------------------- help: consider replace allocation with: `vec![0; 30]`\n LL |     extend_vec.extend(repeat(0).take(30));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:41:5\n+  --> $DIR/slow_vector_initialization.rs:44:5\n    |\n LL |     let mut vec1 = Vec::with_capacity(len);\n    |                    ----------------------- help: consider replace allocation with: `vec![0; len]`\n LL |     vec1.resize(len, 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:49:5\n+  --> $DIR/slow_vector_initialization.rs:52:5\n    |\n LL |     let mut vec3 = Vec::with_capacity(len - 10);\n    |                    ---------------------------- help: consider replace allocation with: `vec![0; len - 10]`\n LL |     vec3.resize(len - 10, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:53:5\n+  --> $DIR/slow_vector_initialization.rs:55:5\n+   |\n+LL |     let mut vec4 = Vec::with_capacity(len);\n+   |                    ----------------------- help: consider replace allocation with: `vec![0; len]`\n+LL |     vec4.resize(vec4.capacity(), 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: slow zero-filling initialization\n+  --> $DIR/slow_vector_initialization.rs:59:5\n    |\n LL |     vec1 = Vec::with_capacity(10);\n    |            ---------------------- help: consider replace allocation with: `vec![0; 10]`\n LL |     vec1.resize(10, 0);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n "}]}