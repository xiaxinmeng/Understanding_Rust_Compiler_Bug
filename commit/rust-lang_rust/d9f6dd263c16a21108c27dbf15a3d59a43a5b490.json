{"sha": "d9f6dd263c16a21108c27dbf15a3d59a43a5b490", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZjZkZDI2M2MxNmEyMTEwOGMyN2RiZjE1YTNkNTlhNDNhNWI0OTA=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-23T04:13:29Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-06-25T04:11:34Z"}, "message": "Set #[no_drop_flag] on Rc<T> and AtomicOption. Add Test", "tree": {"sha": "58dea37de1998986a2481a4da676dba89b98ab74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58dea37de1998986a2481a4da676dba89b98ab74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9f6dd263c16a21108c27dbf15a3d59a43a5b490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f6dd263c16a21108c27dbf15a3d59a43a5b490", "html_url": "https://github.com/rust-lang/rust/commit/d9f6dd263c16a21108c27dbf15a3d59a43a5b490", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9f6dd263c16a21108c27dbf15a3d59a43a5b490/comments", "author": null, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cca08a21a33b60f9a27a4bab119b5ec8261be56", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cca08a21a33b60f9a27a4bab119b5ec8261be56", "html_url": "https://github.com/rust-lang/rust/commit/0cca08a21a33b60f9a27a4bab119b5ec8261be56"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "555cceb5b44b98e58c3dda52d40aab671e34dccf", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d9f6dd263c16a21108c27dbf15a3d59a43a5b490/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f6dd263c16a21108c27dbf15a3d59a43a5b490/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=d9f6dd263c16a21108c27dbf15a3d59a43a5b490", "patch": "@@ -70,10 +70,12 @@ impl<T> Rc<T> {\n impl<T> Drop for Rc<T> {\n     fn finalize(&self) {\n         unsafe {\n-            (*self.ptr).count -= 1;\n-            if (*self.ptr).count == 0 {\n-                ptr::replace_ptr(self.ptr, intrinsics::uninit());\n-                free(self.ptr as *c_void)\n+            if self.ptr.is_not_null() {\n+                (*self.ptr).count -= 1;\n+                if (*self.ptr).count == 0 {\n+                    ptr::replace_ptr(self.ptr, intrinsics::uninit());\n+                    free(self.ptr as *c_void)\n+                }\n             }\n         }\n     }\n@@ -220,10 +222,12 @@ impl<T> RcMut<T> {\n impl<T> Drop for RcMut<T> {\n     fn finalize(&self) {\n         unsafe {\n-            (*self.ptr).count -= 1;\n-            if (*self.ptr).count == 0 {\n-                ptr::replace_ptr(self.ptr, uninit());\n-                free(self.ptr as *c_void)\n+            if self.ptr.is_not_null() {\n+                (*self.ptr).count -= 1;\n+                if (*self.ptr).count == 0 {\n+                    ptr::replace_ptr(self.ptr, uninit());\n+                    free(self.ptr as *c_void)\n+                }\n             }\n         }\n     }"}, {"sha": "d5a2ed7dbd0b0eade509a50696dd89ee72b80ec8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9f6dd263c16a21108c27dbf15a3d59a43a5b490/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f6dd263c16a21108c27dbf15a3d59a43a5b490/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d9f6dd263c16a21108c27dbf15a3d59a43a5b490", "patch": "@@ -3883,7 +3883,7 @@ impl DtorKind {\n pub fn ty_dtor(cx: ctxt, struct_id: def_id) -> DtorKind {\n     match cx.destructor_for_type.find(&struct_id) {\n         Some(&method_def_id) => {\n-            let flag = has_attr(cx, struct_id, \"no_drop_flag\");\n+            let flag = !has_attr(cx, struct_id, \"no_drop_flag\");\n \n             TraitDtor(method_def_id, flag)\n         }"}, {"sha": "7a3a5f51d3562441a89219fc26a056c00e5a8ff7", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9f6dd263c16a21108c27dbf15a3d59a43a5b490/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f6dd263c16a21108c27dbf15a3d59a43a5b490/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=d9f6dd263c16a21108c27dbf15a3d59a43a5b490", "patch": "@@ -62,6 +62,7 @@ pub struct AtomicPtr<T> {\n /**\n  * An owned atomic pointer. Ensures that only a single reference to the data is held at any time.\n  */\n+#[no_drop_flag]\n pub struct AtomicOption<T> {\n     priv p: *mut c_void\n }"}, {"sha": "e6f05970cced78ffaa53190298c915cd144d92e1", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d9f6dd263c16a21108c27dbf15a3d59a43a5b490/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f6dd263c16a21108c27dbf15a3d59a43a5b490/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=d9f6dd263c16a21108c27dbf15a3d59a43a5b490", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::sys::size_of;\n+\n+#[no_drop_flag]\n+struct Test<T> {\n+    a: T\n+}\n+\n+#[unsafe_destructor]\n+impl<T> Drop for Test<T> {\n+    fn finalize(&self) { }\n+}\n+\n+fn main() {\n+    assert_eq!(size_of::<int>(), size_of::<Test<int>>());\n+}"}]}