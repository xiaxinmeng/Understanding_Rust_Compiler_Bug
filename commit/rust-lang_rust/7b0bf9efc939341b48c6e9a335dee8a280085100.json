{"sha": "7b0bf9efc939341b48c6e9a335dee8a280085100", "node_id": "C_kwDOAAsO6NoAKDdiMGJmOWVmYzkzOTM0MWI0OGM2ZTlhMzM1ZGVlOGEyODAwODUxMDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-23T03:31:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-23T03:31:20Z"}, "message": "Auto merge of #95223 - Dylan-DPC:rollup-idpb7ka, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #91608 (Fold aarch64 feature +fp into +neon)\n - #92955 (add perf side effect docs to `Iterator::cloned()`)\n - #94713 (Add u16::is_utf16_surrogate)\n - #95212 (Replace `this.clone()` with `this.create_snapshot_for_diagnostic()`)\n - #95219 (Modernize `alloc-no-oom-handling` test)\n - #95222 (interpret/validity: improve clarity)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8daa45d4c70bfbd9213d6a04908ff8eb43f130df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8daa45d4c70bfbd9213d6a04908ff8eb43f130df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b0bf9efc939341b48c6e9a335dee8a280085100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0bf9efc939341b48c6e9a335dee8a280085100", "html_url": "https://github.com/rust-lang/rust/commit/7b0bf9efc939341b48c6e9a335dee8a280085100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b0bf9efc939341b48c6e9a335dee8a280085100/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b50739b4978936750a0c8de404ff184e49114f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b50739b4978936750a0c8de404ff184e49114f9", "html_url": "https://github.com/rust-lang/rust/commit/2b50739b4978936750a0c8de404ff184e49114f9"}, {"sha": "2f24923ab3f38e33a2ad98618852e0089d63ba7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f24923ab3f38e33a2ad98618852e0089d63ba7d", "html_url": "https://github.com/rust-lang/rust/commit/2f24923ab3f38e33a2ad98618852e0089d63ba7d"}], "stats": {"total": 227, "additions": 206, "deletions": 21}, "files": [{"sha": "abcdb81c0e2e6cf454363ee84bc42e2d21320c5c", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -187,7 +187,6 @@ pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]\n         (\"x86\", \"avx512vaes\") => smallvec![\"vaes\"],\n         (\"x86\", \"avx512gfni\") => smallvec![\"gfni\"],\n         (\"x86\", \"avx512vpclmulqdq\") => smallvec![\"vpclmulqdq\"],\n-        (\"aarch64\", \"fp\") => smallvec![\"fp-armv8\"],\n         (\"aarch64\", \"rcpc2\") => smallvec![\"rcpc-immo\"],\n         (\"aarch64\", \"dpb\") => smallvec![\"ccpp\"],\n         (\"aarch64\", \"dpb2\") => smallvec![\"ccdp\"],\n@@ -230,6 +229,8 @@ pub fn check_tied_features(\n     None\n }\n \n+// Used to generate cfg variables and apply features\n+// Must express features in the way Rust understands them\n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n     let target_machine = create_informational_target_machine(sess);\n     let mut features: Vec<Symbol> =\n@@ -239,13 +240,14 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n                 if sess.is_nightly_build() || gate.is_none() { Some(feature) } else { None }\n             })\n             .filter(|feature| {\n+                // check that all features in a given smallvec are enabled\n                 for llvm_feature in to_llvm_features(sess, feature) {\n                     let cstr = SmallCStr::new(llvm_feature);\n-                    if unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n-                        return true;\n+                    if !unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n+                        return false;\n                     }\n                 }\n-                false\n+                true\n             })\n             .map(|feature| Symbol::intern(feature))\n             .collect();"}, {"sha": "ba1e1862227a81a5b3e41af686a7a668d8ef30af", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -43,10 +43,8 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    // FEAT_AdvSimd\n+    // FEAT_AdvSimd & FEAT_FP\n     (\"neon\", None),\n-    // FEAT_FP\n-    (\"fp\", None),\n     // FEAT_FP16\n     (\"fp16\", None),\n     // FEAT_SVE\n@@ -143,7 +141,6 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n ];\n \n const AARCH64_TIED_FEATURES: &[&[&str]] = &[\n-    &[\"fp\", \"neon\"],   // Silicon always has both, so avoid needless complications\n     &[\"paca\", \"pacg\"], // Together these represent `pauth` in LLVM\n ];\n "}, {"sha": "8bdafa876238601cb511ebd34bbb7ae81a1fec65", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -432,9 +432,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         if let Some(ref mut ref_tracking) = self.ref_tracking {\n             // Proceed recursively even for ZST, no reason to skip them!\n             // `!` is a ZST and we want to validate it.\n-            // Skip validation entirely for some external statics\n             if let Ok((alloc_id, _offset, _ptr)) = self.ecx.memory.ptr_try_get_alloc(place.ptr) {\n-                // not a ZST\n+                // Special handling for pointers to statics (irrespective of their type).\n                 let alloc_kind = self.ecx.tcx.get_global_alloc(alloc_id);\n                 if let Some(GlobalAlloc::Static(did)) = alloc_kind {\n                     assert!(!self.ecx.tcx.is_thread_local_static(did));\n@@ -469,7 +468,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // We need to clone the path anyway, make sure it gets created\n                 // with enough space for the additional `Deref`.\n                 let mut new_path = Vec::with_capacity(path.len() + 1);\n-                new_path.clone_from(path);\n+                new_path.extend(path);\n                 new_path.push(PathElem::Deref);\n                 new_path\n             });"}, {"sha": "d625080dee4fdc9088e3f37329bcc80f433bc41e", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -118,7 +118,7 @@ impl<'a> Parser<'a> {\n                         Some(this.parse_ty_param(attrs)?)\n                     } else if this.token.can_begin_type() {\n                         // Trying to write an associated type bound? (#26271)\n-                        let snapshot = this.clone();\n+                        let snapshot = this.create_snapshot_for_diagnostic();\n                         match this.parse_ty_where_predicate() {\n                             Ok(where_predicate) => {\n                                 this.struct_span_err(\n@@ -133,7 +133,7 @@ impl<'a> Parser<'a> {\n                             Err(err) => {\n                                 err.cancel();\n                                 // FIXME - maybe we should overwrite 'self' outside of `collect_tokens`?\n-                                *this = snapshot;\n+                                this.restore_snapshot(snapshot);\n                                 return Ok((None, TrailingToken::None));\n                             }\n                         }"}, {"sha": "fba8cc6ef8b4aa4d516ee91ea556457996846742", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -64,7 +64,7 @@ impl AArch64InlineAsmRegClass {\n         match self {\n             Self::reg => types! { _: I8, I16, I32, I64, F32, F64; },\n             Self::vreg | Self::vreg_low16 => types! {\n-                fp: I8, I16, I32, I64, F32, F64,\n+                neon: I8, I16, I32, I64, F32, F64,\n                     VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2), VecF64(1),\n                     VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4), VecF64(2);\n             },"}, {"sha": "794c9c13cc3b832914537d768d44e2608746b350", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -91,7 +91,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n             None => self.iter.next()?,\n         };\n \n-        if u < 0xD800 || 0xDFFF < u {\n+        if !u.is_utf16_surrogate() {\n             // SAFETY: not a surrogate\n             Some(Ok(unsafe { from_u32_unchecked(u as u32) }))\n         } else if u >= 0xDC00 {\n@@ -125,7 +125,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n             // buf is empty, no additional elements from it.\n             None => (0, 0),\n             // `u` is a non surrogate, so it's always an additional character.\n-            Some(u) if u < 0xD800 || 0xDFFF < u => (1, 1),\n+            Some(u) if !u.is_utf16_surrogate() => (1, 1),\n             // `u` is a leading surrogate (it can never be a trailing surrogate and\n             // it's a surrogate due to the previous branch) and `self.iter` is empty.\n             //"}, {"sha": "53fbe4cbc42f53fca6dd42ccfa1c59b53c29522f", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -3189,6 +3189,10 @@ pub trait Iterator {\n     /// This is useful when you have an iterator over `&T`, but you need an\n     /// iterator over `T`.\n     ///\n+    /// There is no guarantee whatsoever about the `clone` method actually\n+    /// being called *or* optimized away. So code should not depend on\n+    /// either.\n+    ///\n     /// [`clone`]: Clone::clone\n     ///\n     /// # Examples\n@@ -3206,6 +3210,18 @@ pub trait Iterator {\n     /// assert_eq!(v_cloned, vec![1, 2, 3]);\n     /// assert_eq!(v_map, vec![1, 2, 3]);\n     /// ```\n+    ///\n+    /// To get the best performance, try to clone late:\n+    ///\n+    /// ```\n+    /// let a = [vec![0_u8, 1, 2], vec![3, 4], vec![23]];\n+    /// // don't do this:\n+    /// let slower: Vec<_> = a.iter().cloned().filter(|s| s.len() == 1).collect();\n+    /// assert_eq!(&[vec![23]], &slower[..]);\n+    /// // instead call `cloned` late\n+    /// let faster: Vec<_> = a.iter().filter(|s| s.len() == 1).cloned().collect();\n+    /// assert_eq!(&[vec![23]], &faster[..]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cloned<'a, T: 'a>(self) -> Cloned<Self>\n     where"}, {"sha": "1a85e2ef7b6073da9f43566667a03d8bb5ee78c6", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -93,7 +93,7 @@\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n //\n-// Library features for const fns:\n+// Library features:\n #![feature(const_align_offset)]\n #![feature(const_align_of_val)]\n #![feature(const_alloc_layout)]\n@@ -146,6 +146,8 @@\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]\n #![feature(str_internals)]\n+#![feature(utf16_extra)]\n+#![feature(utf16_extra_const)]\n #![feature(variant_count)]\n #![feature(const_array_from_ref)]\n #![feature(const_slice_from_ref)]"}, {"sha": "dca8ffa4e2c89388cc6e72f340512f1b6d648839", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -820,6 +820,31 @@ impl u16 {\n     uint_impl! { u16, u16, i16, NonZeroU16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n     widening_impl! { u16, u32, 16, unsigned }\n+\n+    /// Checks if the value is a Unicode surrogate code point, which are disallowed values for [`char`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(utf16_extra)]\n+    ///\n+    /// let low_non_surrogate = 0xA000u16;\n+    /// let low_surrogate = 0xD800u16;\n+    /// let high_surrogate = 0xDC00u16;\n+    /// let high_non_surrogate = 0xE000u16;\n+    ///\n+    /// assert!(!low_non_surrogate.is_utf16_surrogate());\n+    /// assert!(low_surrogate.is_utf16_surrogate());\n+    /// assert!(high_surrogate.is_utf16_surrogate());\n+    /// assert!(!high_non_surrogate.is_utf16_surrogate());\n+    /// ```\n+    #[must_use]\n+    #[unstable(feature = \"utf16_extra\", issue = \"94919\")]\n+    #[rustc_const_unstable(feature = \"utf16_extra_const\", issue = \"94919\")]\n+    #[inline]\n+    pub const fn is_utf16_surrogate(self) -> bool {\n+        matches!(self, 0xD800..=0xDFFF)\n+    }\n }\n \n #[lang = \"u32\"]"}, {"sha": "a57a52d9bb04ef37507ea360c11ee46da4068871", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -29,7 +29,6 @@ fn aarch64_linux() {\n     println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n     println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n     println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n-    println!(\"fp: {}\", is_aarch64_feature_detected!(\"fp\"));\n     println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n     println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n     println!(\"crc: {}\", is_aarch64_feature_detected!(\"crc\"));"}, {"sha": "6e25eb7e459454516a0411e31716a57850764316", "filename": "src/test/run-make-fulldeps/alloc-no-oom-handling/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Frun-make-fulldeps%2Falloc-no-oom-handling%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Frun-make-fulldeps%2Falloc-no-oom-handling%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Falloc-no-oom-handling%2FMakefile?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -1,4 +1,4 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) --edition=2018 --crate-type=rlib ../../../../library/alloc/src/lib.rs --cfg feature=\\\"external_crate\\\" --cfg no_global_oom_handling\n+\t$(RUSTC) --edition=2021 --crate-type=rlib ../../../../library/alloc/src/lib.rs --cfg no_global_oom_handling"}, {"sha": "e9c974a01373282bd3aacf99d0a1f2cca5717d66", "filename": "src/test/run-make-fulldeps/simd-ffi/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -41,7 +41,7 @@ define MK_TARGETS\n # now.\n $(1): simd.rs\n \t$$(RUSTC) --target=$(1) --emit=llvm-ir,asm simd.rs \\\n-                -C target-feature='+fp,+neon,+sse2' -C extra-filename=-$(1)\n+                -C target-feature='+neon,+sse2' -C extra-filename=-$(1)\n endef\n \n $(foreach targetxxx,$(TARGETS),$(eval $(call MK_TARGETS,$(targetxxx))))"}, {"sha": "1a3141019161d38291079031f1f7a3b001d3ec58", "filename": "src/test/ui/asm/aarch64/bad-reg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -1,5 +1,5 @@\n // only-aarch64\n-// compile-flags: -C target-feature=+fp\n+// compile-flags: -C target-feature=+neon\n \n #![feature(asm_const, asm_sym)]\n "}, {"sha": "3878806fd0270a5a13600e9ceb6d1988bfc98083", "filename": "src/test/ui/target-feature/aarch64-neon-works.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Fui%2Ftarget-feature%2Faarch64-neon-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Fui%2Ftarget-feature%2Faarch64-neon-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Faarch64-neon-works.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -0,0 +1,23 @@\n+// only-aarch64\n+// run-pass\n+#![allow(dead_code)]\n+use std::arch::*;\n+use std::arch::aarch64::*;\n+\n+// Smoke test to verify aarch64 code that enables NEON compiles.\n+fn main() {\n+    let _zero = if is_aarch64_feature_detected!(\"neon\") {\n+        unsafe {\n+            let zeros = zero_vector();\n+            vgetq_lane_u8::<1>(zeros)\n+        }\n+    } else {\n+        0\n+    };\n+}\n+\n+\n+#[target_feature(enable = \"neon\")]\n+unsafe fn zero_vector() -> uint8x16_t {\n+    vmovq_n_u8(0)\n+}"}, {"sha": "5fbd5e8a28d94efc9c2c60aba55b5e0be657769c", "filename": "src/test/ui/target-feature/feature-hierarchy.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Fui%2Ftarget-feature%2Ffeature-hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Fui%2Ftarget-feature%2Ffeature-hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ffeature-hierarchy.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -0,0 +1,58 @@\n+// revisions: aarch64-neon aarch64-sve2\n+// [aarch64-neon] compile-flags: -Ctarget-feature=+neon --target=aarch64-unknown-linux-gnu\n+// [aarch64-neon] needs-llvm-components: aarch64\n+// [aarch64-sve2] compile-flags: -Ctarget-feature=-neon,+sve2 --target=aarch64-unknown-linux-gnu\n+// [aarch64-sve2] needs-llvm-components: aarch64\n+// build-pass\n+#![no_core]\n+#![crate_type = \"rlib\"]\n+#![feature(intrinsics, rustc_attrs, no_core, lang_items, staged_api)]\n+#![stable(feature = \"test\", since = \"1.0.0\")]\n+\n+// Tests vetting \"feature hierarchies\" in the cases where we impose them.\n+\n+// Supporting minimal rust core code\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+impl Copy for bool {}\n+\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"test\", since = \"1.0.0\")]\n+    fn unreachable() -> !;\n+}\n+\n+#[rustc_builtin_macro]\n+macro_rules! cfg {\n+    ($($cfg:tt)*) => {};\n+}\n+\n+// Test code\n+const fn do_or_die(cond: bool) {\n+    if cond {\n+    } else {\n+        unsafe { unreachable() }\n+    }\n+}\n+\n+macro_rules! assert {\n+    ($x:expr $(,)?) => {\n+        const _: () = do_or_die($x);\n+    };\n+}\n+\n+\n+#[cfg(aarch64_neon)]\n+fn check_neon_not_sve2() {\n+    // This checks that a normal aarch64 target doesn't suddenly jump up the feature hierarchy.\n+    assert!(cfg!(target_feature = \"neon\"));\n+    assert!(cfg!(not(target_feature = \"sve2\")));\n+}\n+\n+#[cfg(aarch64_sve2)]\n+fn check_sve2_includes_neon() {\n+    // This checks that aarch64's sve2 includes neon\n+    assert!(cfg!(target_feature = \"neon\"));\n+    assert!(cfg!(target_feature = \"sve2\"));\n+}"}, {"sha": "5a71b2166c3ae2fa44fa243391dc334dd69b64c9", "filename": "src/test/ui/target-feature/no-llvm-leaks.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Fui%2Ftarget-feature%2Fno-llvm-leaks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0bf9efc939341b48c6e9a335dee8a280085100/src%2Ftest%2Fui%2Ftarget-feature%2Fno-llvm-leaks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fno-llvm-leaks.rs?ref=7b0bf9efc939341b48c6e9a335dee8a280085100", "patch": "@@ -0,0 +1,64 @@\n+// revisions: aarch64 x86-64\n+// [aarch64] compile-flags: -Ctarget-feature=+neon,+fp16,+fhm --target=aarch64-unknown-linux-gnu\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86-64] compile-flags: -Ctarget-feature=+sse4.2,+rdrand --target=x86_64-unknown-linux-gnu\n+// [x86-64] needs-llvm-components: x86\n+// build-pass\n+#![no_core]\n+#![crate_type = \"rlib\"]\n+#![feature(intrinsics, rustc_attrs, no_core, lang_items, staged_api)]\n+#![stable(feature = \"test\", since = \"1.0.0\")]\n+\n+// Supporting minimal rust core code\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+impl Copy for bool {}\n+\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"test\", since = \"1.0.0\")]\n+    fn unreachable() -> !;\n+}\n+\n+#[rustc_builtin_macro]\n+macro_rules! cfg {\n+    ($($cfg:tt)*) => {};\n+}\n+\n+// Test code\n+const fn do_or_die(cond: bool) {\n+    if cond {\n+    } else {\n+        unsafe { unreachable() }\n+    }\n+}\n+\n+macro_rules! assert {\n+    ($x:expr $(,)?) => {\n+        const _: () = do_or_die($x);\n+    };\n+}\n+\n+\n+#[cfg(target_arch = \"aarch64\")]\n+fn check_aarch64() {\n+    // This checks that the rustc feature name is used, not the LLVM feature.\n+    assert!(cfg!(target_feature = \"neon\"));\n+    assert!(cfg!(not(target_feature = \"fp-armv8\")));\n+    assert!(cfg!(target_feature = \"fhm\"));\n+    assert!(cfg!(not(target_feature = \"fp16fml\")));\n+    assert!(cfg!(target_feature = \"fp16\"));\n+    assert!(cfg!(not(target_feature = \"fullfp16\")));\n+}\n+\n+#[cfg(target_arch = \"x86_64\")]\n+fn check_x86_64() {\n+    // This checks that the rustc feature name is used, not the LLVM feature.\n+    assert!(cfg!(target_feature = \"rdrand\"));\n+    assert!(cfg!(not(target_feature = \"rdrnd\")));\n+\n+    // Likewise: We enable LLVM's crc32 feature with SSE4.2, but Rust says it's just SSE4.2\n+    assert!(cfg!(target_feature = \"sse4.2\"));\n+    assert!(cfg!(not(target_feature = \"crc32\")));\n+}"}]}