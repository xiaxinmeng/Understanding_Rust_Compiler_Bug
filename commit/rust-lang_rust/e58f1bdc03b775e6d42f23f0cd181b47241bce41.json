{"sha": "e58f1bdc03b775e6d42f23f0cd181b47241bce41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OGYxYmRjMDNiNzc1ZTZkNDJmMjNmMGNkMTgxYjQ3MjQxYmNlNDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-06T02:17:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-06T02:50:23Z"}, "message": "Normalize predicates during method winnowing.\n\nFixes #20604.\nFixes #20378.", "tree": {"sha": "cd9a118258e50dd193d6f1e257ecf5e972856c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd9a118258e50dd193d6f1e257ecf5e972856c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58f1bdc03b775e6d42f23f0cd181b47241bce41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58f1bdc03b775e6d42f23f0cd181b47241bce41", "html_url": "https://github.com/rust-lang/rust/commit/e58f1bdc03b775e6d42f23f0cd181b47241bce41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58f1bdc03b775e6d42f23f0cd181b47241bce41/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8", "html_url": "https://github.com/rust-lang/rust/commit/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8"}], "stats": {"total": 87, "additions": 76, "deletions": 11}, "files": [{"sha": "115711ae92b297f75360699e7c29198173370d81", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e58f1bdc03b775e6d42f23f0cd181b47241bce41/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58f1bdc03b775e6d42f23f0cd181b47241bce41/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e58f1bdc03b775e6d42f23f0cd181b47241bce41", "patch": "@@ -807,26 +807,26 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             match probe.kind {\n                 InherentImplCandidate(impl_def_id, ref substs) |\n                 ExtensionImplCandidate(impl_def_id, _, ref substs, _) => {\n+                    let selcx = &mut traits::SelectionContext::new(self.infcx(), self.fcx);\n+                    let cause = traits::ObligationCause::misc(self.span, self.fcx.body_id);\n+\n                     // Check whether the impl imposes obligations we have to worry about.\n                     let impl_generics = ty::lookup_item_type(self.tcx(), impl_def_id).generics;\n                     let impl_bounds = impl_generics.to_bounds(self.tcx(), substs);\n-                    // FIXME(#20378) assoc type normalization here?\n-\n-                    // Erase any late-bound regions bound in the impl\n-                    // which appear in the bounds.\n-                    let impl_bounds = self.erase_late_bound_regions(&ty::Binder(impl_bounds));\n+                    let traits::Normalized { value: impl_bounds,\n+                                             obligations: norm_obligations } =\n+                        traits::normalize(selcx, cause.clone(), &impl_bounds);\n \n                     // Convert the bounds into obligations.\n                     let obligations =\n-                        traits::predicates_for_generics(\n-                            self.tcx(),\n-                            traits::ObligationCause::misc(self.span, self.fcx.body_id),\n-                            &impl_bounds);\n+                        traits::predicates_for_generics(self.tcx(),\n+                                                        cause.clone(),\n+                                                        &impl_bounds);\n                     debug!(\"impl_obligations={}\", obligations.repr(self.tcx()));\n \n                     // Evaluate those obligations to see if they might possibly hold.\n-                    let mut selcx = traits::SelectionContext::new(self.infcx(), self.fcx);\n-                    obligations.all(|o| selcx.evaluate_obligation(o))\n+                    obligations.all(|o| selcx.evaluate_obligation(o)) &&\n+                        norm_obligations.iter().all(|o| selcx.evaluate_obligation(o))\n                 }\n \n                 ObjectCandidate(..) |"}, {"sha": "73489948da5dee533eca22d7ada0e4347e80c758", "filename": "src/test/run-pass/method-normalize-bounds-issue-20604.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e58f1bdc03b775e6d42f23f0cd181b47241bce41/src%2Ftest%2Frun-pass%2Fmethod-normalize-bounds-issue-20604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58f1bdc03b775e6d42f23f0cd181b47241bce41/src%2Ftest%2Frun-pass%2Fmethod-normalize-bounds-issue-20604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-normalize-bounds-issue-20604.rs?ref=e58f1bdc03b775e6d42f23f0cd181b47241bce41", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we handle projection types which wind up important for\n+// resolving methods. This test was reduced from a larger example; the\n+// call to `foo()` at the end was failing to resolve because the\n+// winnowing stage of method resolution failed to handle an associated\n+// type projection.\n+\n+#![feature(associated_types)]\n+\n+trait Hasher {\n+    type Output;\n+    fn finish(&self) -> Self::Output;\n+}\n+\n+trait Hash<H: Hasher> {\n+    fn hash(&self, h: &mut H);\n+}\n+\n+trait HashState {\n+    type Wut: Hasher;\n+    fn hasher(&self) -> Self::Wut;\n+}\n+\n+struct SipHasher;\n+impl Hasher for SipHasher {\n+    type Output = u64;\n+    fn finish(&self) -> u64 { 4 }\n+}\n+\n+impl Hash<SipHasher> for int {\n+    fn hash(&self, h: &mut SipHasher) {}\n+}\n+\n+struct SipState;\n+impl HashState for SipState {\n+    type Wut = SipHasher;\n+    fn hasher(&self) -> SipHasher { SipHasher }\n+}\n+\n+struct Map<S> {\n+    s: S,\n+}\n+\n+impl<S> Map<S>\n+    where S: HashState,\n+          <S as HashState>::Wut: Hasher<Output=u64>,\n+{\n+    fn foo<K>(&self, k: K) where K: Hash< <S as HashState>::Wut> {}\n+}\n+\n+fn foo<K: Hash<SipHasher>>(map: &Map<SipState>) {\n+    map.foo(22);\n+}\n+\n+fn main() {}\n+"}]}