{"sha": "8d6d0e71a66355a9e2da366d22c7a4e355718fdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNmQwZTcxYTY2MzU1YTllMmRhMzY2ZDIyYzdhNGUzNTU3MThmZGY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-24T22:44:51Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-24T22:44:51Z"}, "message": "Format librustc_feature\n\nUse #[rustfmt::skip] on the tidy-parsed macro invocations", "tree": {"sha": "558187a61216c6e86efa56eeb7ee0676bf0ae23d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/558187a61216c6e86efa56eeb7ee0676bf0ae23d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d6d0e71a66355a9e2da366d22c7a4e355718fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6d0e71a66355a9e2da366d22c7a4e355718fdf", "html_url": "https://github.com/rust-lang/rust/commit/8d6d0e71a66355a9e2da366d22c7a4e355718fdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6891388e661c2bbf965a330ff73bf8c08a7dbf7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6891388e661c2bbf965a330ff73bf8c08a7dbf7d", "html_url": "https://github.com/rust-lang/rust/commit/6891388e661c2bbf965a330ff73bf8c08a7dbf7d"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "73f8cc1ff68c68bbbbfe6216f4b0f00626701672", "filename": "rustfmt.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=8d6d0e71a66355a9e2da366d22c7a4e355718fdf", "patch": "@@ -10,10 +10,6 @@ ignore = [\n     # (and generally rustfmt can move around comments in UI-testing incompatible ways)\n     \"src/test\",\n \n-    # tidy issues (line length, etc.)\n-    # to be fixed shortly\n-    \"src/librustc_feature\",\n-\n     # do not format submodules\n     \"src/doc/book\",\n     \"src/doc/edition-guide\","}, {"sha": "144a3faaba50a2aadf6721db201558df1905e3e5", "filename": "src/librustc_feature/accepted.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/src%2Flibrustc_feature%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/src%2Flibrustc_feature%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Faccepted.rs?ref=8d6d0e71a66355a9e2da366d22c7a4e355718fdf", "patch": "@@ -1,6 +1,6 @@\n //! List of the accepted feature gates.\n \n-use super::{State, Feature};\n+use super::{Feature, State};\n use syntax_pos::symbol::sym;\n \n macro_rules! declare_features {\n@@ -23,6 +23,7 @@ macro_rules! declare_features {\n     }\n }\n \n+#[rustfmt::skip]\n declare_features! (\n     // -------------------------------------------------------------------------\n     // feature-group-start: for testing purposes"}, {"sha": "708e48fe6add172bb271a8f65f3bd467c86f48fc", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=8d6d0e71a66355a9e2da366d22c7a4e355718fdf", "patch": "@@ -1,18 +1,18 @@\n //! List of the active feature gates.\n \n-use super::{State, Feature};\n+use super::{Feature, State};\n \n use syntax_pos::edition::Edition;\n+use syntax_pos::symbol::{sym, Symbol};\n use syntax_pos::Span;\n-use syntax_pos::symbol::{Symbol, sym};\n \n macro_rules! set {\n     ($field: ident) => {{\n         fn f(features: &mut Features, _: Span) {\n             features.$field = true;\n         }\n         f as fn(&mut Features, Span)\n-    }}\n+    }};\n }\n \n macro_rules! declare_features {\n@@ -72,7 +72,7 @@ impl Feature {\n     pub fn set(&self, features: &mut Features, span: Span) {\n         match self.state {\n             State::Active { set } => set(features, span),\n-            _ => panic!(\"called `set` on feature `{}` which is not `active`\", self.name)\n+            _ => panic!(\"called `set` on feature `{}` which is not `active`\", self.name),\n         }\n     }\n }\n@@ -91,6 +91,7 @@ impl Feature {\n // N.B., `tools/tidy/src/features.rs` parses this information directly out of the\n // source, so take care when modifying it.\n \n+#[rustfmt::skip]\n declare_features! (\n     // -------------------------------------------------------------------------\n     // feature-group-start: internal feature gates"}, {"sha": "5ae87d9712da8fcc53221f330dca31f8b4bc2f15", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=8d6d0e71a66355a9e2da366d22c7a4e355718fdf", "patch": "@@ -1,20 +1,20 @@\n //! Built-in attributes and `cfg` flag gating.\n \n-use AttributeType::*;\n use AttributeGate::*;\n+use AttributeType::*;\n \n use crate::{Features, Stability};\n \n-use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::symbol::{Symbol, sym};\n use lazy_static::lazy_static;\n+use rustc_data_structures::fx::FxHashMap;\n+use syntax_pos::symbol::{sym, Symbol};\n \n type GateFn = fn(&Features) -> bool;\n \n macro_rules! cfg_fn {\n     ($field: ident) => {\n-        (|features| { features.$field }) as GateFn\n-    }\n+        (|features| features.$field) as GateFn\n+    };\n }\n \n pub type GatedCfg = (Symbol, Symbol, GateFn);\n@@ -66,9 +66,10 @@ pub enum AttributeGate {\n impl std::fmt::Debug for AttributeGate {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         match *self {\n-            Self::Gated(ref stab, name, expl, _) =>\n-                write!(fmt, \"Gated({:?}, {}, {})\", stab, name, expl),\n-            Self::Ungated => write!(fmt, \"Ungated\")\n+            Self::Gated(ref stab, name, expl, _) => {\n+                write!(fmt, \"Gated({:?}, {}, {})\", stab, name, expl)\n+            }\n+            Self::Ungated => write!(fmt, \"Ungated\"),\n         }\n     }\n }\n@@ -135,22 +136,31 @@ macro_rules! gated {\n macro_rules! rustc_attr {\n     (TEST, $attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n         rustc_attr!(\n-            $attr, $typ, $tpl,\n-            concat!(\"the `#[\", stringify!($attr), \"]` attribute is just used for rustc unit tests \\\n+            $attr,\n+            $typ,\n+            $tpl,\n+            concat!(\n+                \"the `#[\",\n+                stringify!($attr),\n+                \"]` attribute is just used for rustc unit tests \\\n                 and will never be stable\",\n             ),\n         )\n     };\n     ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n-        (sym::$attr, $typ, $tpl,\n-         Gated(Stability::Unstable, sym::rustc_attrs, $msg, cfg_fn!(rustc_attrs)))\n+        (\n+            sym::$attr,\n+            $typ,\n+            $tpl,\n+            Gated(Stability::Unstable, sym::rustc_attrs, $msg, cfg_fn!(rustc_attrs)),\n+        )\n     };\n }\n \n macro_rules! experimental {\n     ($attr:ident) => {\n         concat!(\"the `#[\", stringify!($attr), \"]` attribute is an experimental feature\")\n-    }\n+    };\n }\n \n const IMPL_DETAIL: &str = \"internal implementation detail\";\n@@ -159,6 +169,7 @@ const INTERNAL_UNSTABLE: &str = \"this is an internal attribute that will never b\n pub type BuiltinAttribute = (Symbol, AttributeType, AttributeTemplate, AttributeGate);\n \n /// Attributes that have a special meaning to rustc or rustdoc.\n+#[rustfmt::skip]\n pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n     // Stable attributes:"}, {"sha": "b85feee040ceb87d8c4fd37789dd1bca4598c426", "filename": "src/librustc_feature/lib.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/src%2Flibrustc_feature%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/src%2Flibrustc_feature%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Flib.rs?ref=8d6d0e71a66355a9e2da366d22c7a4e355718fdf", "patch": "@@ -11,13 +11,13 @@\n //! symbol to the `accepted` or `removed` modules respectively.\n \n mod accepted;\n-mod removed;\n mod active;\n mod builtin_attrs;\n+mod removed;\n \n use std::fmt;\n use std::num::NonZeroU32;\n-use syntax_pos::{Span, edition::Edition, symbol::Symbol};\n+use syntax_pos::{edition::Edition, symbol::Symbol, Span};\n \n #[derive(Clone, Copy)]\n pub enum State {\n@@ -43,7 +43,7 @@ pub struct Feature {\n     pub state: State,\n     pub name: Symbol,\n     pub since: &'static str,\n-    issue: Option<u32>,  // FIXME: once #58732 is done make this an Option<NonZeroU32>\n+    issue: Option<u32>, // FIXME: once #58732 is done make this an Option<NonZeroU32>\n     pub edition: Option<Edition>,\n     description: &'static str,\n }\n@@ -72,7 +72,7 @@ pub enum UnstableFeatures {\n     /// during the build that feature-related lints are set to warn or above\n     /// because the build turns on warnings-as-errors and uses lots of unstable\n     /// features. As a result, this is always required for building Rust itself.\n-    Cheat\n+    Cheat,\n }\n \n impl UnstableFeatures {\n@@ -84,7 +84,7 @@ impl UnstableFeatures {\n         match (disable_unstable_features, bootstrap) {\n             (_, true) => UnstableFeatures::Cheat,\n             (true, _) => UnstableFeatures::Disallow,\n-            (false, _) => UnstableFeatures::Allow\n+            (false, _) => UnstableFeatures::Allow,\n         }\n     }\n \n@@ -117,7 +117,7 @@ fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {\n \n pub enum GateIssue {\n     Language,\n-    Library(Option<NonZeroU32>)\n+    Library(Option<NonZeroU32>),\n }\n \n pub fn find_feature_issue(feature: Symbol, issue: GateIssue) -> Option<NonZeroU32> {\n@@ -128,10 +128,9 @@ pub fn find_feature_issue(feature: Symbol, issue: GateIssue) -> Option<NonZeroU3\n }\n \n pub use accepted::ACCEPTED_FEATURES;\n-pub use active::{ACTIVE_FEATURES, Features, INCOMPLETE_FEATURES};\n-pub use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n+pub use active::{Features, ACTIVE_FEATURES, INCOMPLETE_FEATURES};\n pub use builtin_attrs::{\n-    AttributeGate, AttributeTemplate, AttributeType, find_gated_cfg, GatedCfg,\n-    BuiltinAttribute, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n-    deprecated_attributes, is_builtin_attr_name,\n+    deprecated_attributes, find_gated_cfg, is_builtin_attr_name, AttributeGate, AttributeTemplate,\n+    AttributeType, BuiltinAttribute, GatedCfg, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n };\n+pub use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};"}, {"sha": "5512e1247aa3a9a1fad8a5fbde61cbc48ecd492b", "filename": "src/librustc_feature/removed.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/src%2Flibrustc_feature%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d0e71a66355a9e2da366d22c7a4e355718fdf/src%2Flibrustc_feature%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fremoved.rs?ref=8d6d0e71a66355a9e2da366d22c7a4e355718fdf", "patch": "@@ -1,6 +1,6 @@\n //! List of the removed feature gates.\n \n-use super::{State, Feature};\n+use super::{Feature, State};\n use syntax_pos::symbol::sym;\n \n macro_rules! declare_features {\n@@ -41,6 +41,7 @@ macro_rules! declare_features {\n     };\n }\n \n+#[rustfmt::skip]\n declare_features! (\n     // -------------------------------------------------------------------------\n     // feature-group-start: removed features\n@@ -111,6 +112,7 @@ declare_features! (\n     // -------------------------------------------------------------------------\n );\n \n+#[rustfmt::skip]\n declare_features! (\n     (stable_removed, no_stack_check, \"1.0.0\", None, None),\n );"}]}