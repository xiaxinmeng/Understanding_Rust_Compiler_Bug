{"sha": "b504a18563a3a35c91ecb6ebc539aa94856f7f93", "node_id": "C_kwDOAAsO6NoAKGI1MDRhMTg1NjNhM2EzNWM5MWVjYjZlYmM1MzlhYTk0ODU2ZjdmOTM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-30T13:40:38Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-12T17:00:13Z"}, "message": "implement rustfmt formatting for `for<>` closure binders", "tree": {"sha": "b0d32fb5e9d2c4feb48f2b15c121b0f5706bf388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0d32fb5e9d2c4feb48f2b15c121b0f5706bf388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b504a18563a3a35c91ecb6ebc539aa94856f7f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b504a18563a3a35c91ecb6ebc539aa94856f7f93", "html_url": "https://github.com/rust-lang/rust/commit/b504a18563a3a35c91ecb6ebc539aa94856f7f93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b504a18563a3a35c91ecb6ebc539aa94856f7f93/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2923b40076ee53c0ad8e5afcbe641fe1a0ce52c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2923b40076ee53c0ad8e5afcbe641fe1a0ce52c", "html_url": "https://github.com/rust-lang/rust/commit/d2923b40076ee53c0ad8e5afcbe641fe1a0ce52c"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "88a6bebb68c84157ecd08400e7b116483bae8518", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b504a18563a3a35c91ecb6ebc539aa94856f7f93/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b504a18563a3a35c91ecb6ebc539aa94856f7f93/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=b504a18563a3a35c91ecb6ebc539aa94856f7f93", "patch": "@@ -11,6 +11,7 @@ use crate::overflow::OverflowableItem;\n use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::Shape;\n use crate::source_map::SpanUtils;\n+use crate::types::rewrite_lifetime_param;\n use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n \n // This module is pretty messy because of the rules around closures and blocks:\n@@ -24,6 +25,7 @@ use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n //     can change whether it is treated as an expression or statement.\n \n pub(crate) fn rewrite_closure(\n+    binder: &ast::ClosureBinder,\n     capture: ast::CaptureBy,\n     is_async: &ast::Async,\n     movability: ast::Movability,\n@@ -36,7 +38,7 @@ pub(crate) fn rewrite_closure(\n     debug!(\"rewrite_closure {:?}\", body);\n \n     let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-        capture, is_async, movability, fn_decl, body, span, context, shape,\n+        binder, capture, is_async, movability, fn_decl, body, span, context, shape,\n     )?;\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n@@ -227,6 +229,7 @@ fn rewrite_closure_block(\n \n // Return type is (prefix, extra_offset)\n fn rewrite_closure_fn_decl(\n+    binder: &ast::ClosureBinder,\n     capture: ast::CaptureBy,\n     asyncness: &ast::Async,\n     movability: ast::Movability,\n@@ -236,6 +239,17 @@ fn rewrite_closure_fn_decl(\n     context: &RewriteContext<'_>,\n     shape: Shape,\n ) -> Option<(String, usize)> {\n+    let binder = match binder {\n+        ast::ClosureBinder::For { generic_params, .. } if generic_params.is_empty() => {\n+            \"for<> \".to_owned()\n+        }\n+        ast::ClosureBinder::For { generic_params, .. } => {\n+            let lifetime_str = rewrite_lifetime_param(context, shape, generic_params)?;\n+            format!(\"for<{lifetime_str}> \")\n+        }\n+        ast::ClosureBinder::NotPresent => \"\".to_owned(),\n+    };\n+\n     let immovable = if movability == ast::Movability::Static {\n         \"static \"\n     } else {\n@@ -250,7 +264,7 @@ fn rewrite_closure_fn_decl(\n     // 4 = \"|| {\".len(), which is overconservative when the closure consists of\n     // a single expression.\n     let nested_shape = shape\n-        .shrink_left(immovable.len() + is_async.len() + mover.len())?\n+        .shrink_left(binder.len() + immovable.len() + is_async.len() + mover.len())?\n         .sub_width(4)?;\n \n     // 1 = |\n@@ -288,7 +302,7 @@ fn rewrite_closure_fn_decl(\n         .tactic(tactic)\n         .preserve_newline(true);\n     let list_str = write_list(&item_vec, &fmt)?;\n-    let mut prefix = format!(\"{}{}{}|{}|\", immovable, is_async, mover, list_str);\n+    let mut prefix = format!(\"{}{}{}{}|{}|\", binder, immovable, is_async, mover, list_str);\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -312,8 +326,15 @@ pub(crate) fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(capture, ref is_async, movability, ref fn_decl, ref body, _) =\n-        expr.kind\n+    if let ast::ExprKind::Closure(\n+        ref binder,\n+        capture,\n+        ref is_async,\n+        movability,\n+        ref fn_decl,\n+        ref body,\n+        _,\n+    ) = expr.kind\n     {\n         let body = match body.kind {\n             ast::ExprKind::Block(ref block, _)\n@@ -326,7 +347,7 @@ pub(crate) fn rewrite_last_closure(\n             _ => body,\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-            capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n         )?;\n         // If the closure goes multi line before its body, do not overflow the closure.\n         if prefix.contains('\\n') {"}, {"sha": "a7b73ba78c59ef97286e9643e7efc490d9953c0a", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b504a18563a3a35c91ecb6ebc539aa94856f7f93/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b504a18563a3a35c91ecb6ebc539aa94856f7f93/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=b504a18563a3a35c91ecb6ebc539aa94856f7f93", "patch": "@@ -203,11 +203,17 @@ pub(crate) fn format_expr(\n                 Some(\"yield\".to_string())\n             }\n         }\n-        ast::ExprKind::Closure(capture, ref is_async, movability, ref fn_decl, ref body, _) => {\n-            closures::rewrite_closure(\n-                capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n-            )\n-        }\n+        ast::ExprKind::Closure(\n+            ref binder,\n+            capture,\n+            ref is_async,\n+            movability,\n+            ref fn_decl,\n+            ref body,\n+            _,\n+        ) => closures::rewrite_closure(\n+            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+        ),\n         ast::ExprKind::Try(..)\n         | ast::ExprKind::Field(..)\n         | ast::ExprKind::MethodCall(..)"}, {"sha": "2627886db109d7fc5aa0547f394a6b5f2d9c0a8b", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b504a18563a3a35c91ecb6ebc539aa94856f7f93/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b504a18563a3a35c91ecb6ebc539aa94856f7f93/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=b504a18563a3a35c91ecb6ebc539aa94856f7f93", "patch": "@@ -1067,7 +1067,7 @@ pub(crate) fn can_be_overflowed_type(\n }\n \n /// Returns `None` if there is no `LifetimeDef` in the given generic parameters.\n-fn rewrite_lifetime_param(\n+pub(crate) fn rewrite_lifetime_param(\n     context: &RewriteContext<'_>,\n     shape: Shape,\n     generic_params: &[ast::GenericParam],"}, {"sha": "cd852855602e867ad5027be306810cdb69adb3cd", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b504a18563a3a35c91ecb6ebc539aa94856f7f93/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b504a18563a3a35c91ecb6ebc539aa94856f7f93/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=b504a18563a3a35c91ecb6ebc539aa94856f7f93", "patch": "@@ -479,7 +479,7 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Binary(_, _, ref expr)\n         | ast::ExprKind::Index(_, ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Closure(_, _, _, _, ref expr, _)\n+        | ast::ExprKind::Closure(_, _, _, _, _, ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Yield(Some(ref expr)) => is_block_expr(context, expr, repr),\n         // This can only be a string lit"}]}