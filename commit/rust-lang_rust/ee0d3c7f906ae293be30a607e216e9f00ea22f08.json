{"sha": "ee0d3c7f906ae293be30a607e216e9f00ea22f08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMGQzYzdmOTA2YWUyOTNiZTMwYTYwN2UyMTZlOWYwMGVhMjJmMDg=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-07T17:56:17Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-11T16:08:23Z"}, "message": "Rename `TyKind::Def` to `OpaqueDef`", "tree": {"sha": "b14f45ffa52fb7ec75a97409e9117b02a31075c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b14f45ffa52fb7ec75a97409e9117b02a31075c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee0d3c7f906ae293be30a607e216e9f00ea22f08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0d3c7f906ae293be30a607e216e9f00ea22f08", "html_url": "https://github.com/rust-lang/rust/commit/ee0d3c7f906ae293be30a607e216e9f00ea22f08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee0d3c7f906ae293be30a607e216e9f00ea22f08/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c04d8672dcf4ece3b835ea256115f98586781cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c04d8672dcf4ece3b835ea256115f98586781cb", "html_url": "https://github.com/rust-lang/rust/commit/6c04d8672dcf4ece3b835ea256115f98586781cb"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "7d335fc608a7f313d3af9441ca6ec56552e55071", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -1400,7 +1400,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 lctx.generate_opaque_type(opaque_ty_node_id, opaque_ty_item, span, opaque_ty_span);\n \n             // `impl Trait` now just becomes `Foo<'a, 'b, ..>`.\n-            hir::TyKind::Def(hir::ItemId { id: opaque_ty_id }, lifetimes)\n+            hir::TyKind::OpaqueDef(hir::ItemId { id: opaque_ty_id }, lifetimes)\n         })\n     }\n "}, {"sha": "6facaf400a7314442c9f71d123a31930fd99bd7f", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -2046,12 +2046,12 @@ pub enum TyKind<'hir> {\n     ///\n     /// Type parameters may be stored in each `PathSegment`.\n     Path(QPath<'hir>),\n-    /// A type definition itself. This is currently only used for the `type Foo = impl Trait`\n-    /// item that `impl Trait` in return position desugars to.\n+    /// A opaque type definition itself. This is currently only used for the\n+    /// `opaque type Foo: Trait` item that `impl Trait` in desugars to.\n     ///\n-    /// The generic argument list contains the lifetimes (and in the future possibly parameters)\n-    /// that are actually bound on the `impl Trait`.\n-    Def(ItemId, &'hir [GenericArg<'hir>]),\n+    /// The generic argument list contains the lifetimes (and in the future\n+    /// possibly parameters) that are actually bound on the `impl Trait`.\n+    OpaqueDef(ItemId, &'hir [GenericArg<'hir>]),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n     TraitObject(&'hir [PolyTraitRef<'hir>], Lifetime),"}, {"sha": "a8e7f5e2952126fe02a89c0a5097ce1a45aebdf6", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -690,7 +690,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n         TyKind::Path(ref qpath) => {\n             visitor.visit_qpath(qpath, typ.hir_id, typ.span);\n         }\n-        TyKind::Def(item_id, lifetimes) => {\n+        TyKind::OpaqueDef(item_id, lifetimes) => {\n             visitor.visit_nested_item(item_id);\n             walk_list!(visitor, visit_generic_arg, lifetimes);\n         }"}, {"sha": "7c795ae5f6432a4962d9452f8656663f4fa662ae", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -407,7 +407,7 @@ impl<'a> State<'a> {\n                     &f.param_names[..],\n                 );\n             }\n-            hir::TyKind::Def(..) => self.s.word(\"/*impl Trait*/\"),\n+            hir::TyKind::OpaqueDef(..) => self.s.word(\"/*impl Trait*/\"),\n             hir::TyKind::Path(ref qpath) => self.print_qpath(qpath, false),\n             hir::TyKind::TraitObject(bounds, ref lifetime) => {\n                 let mut first = true;"}, {"sha": "a56401ebb90f089ecaecfe29bb2d18ff5f7c8b23", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -84,7 +84,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 rustc_hir::intravisit::walk_ty(&mut v, ty);\n \n                 debug!(\"try_report_named_anon_conflict: ret ty {:?}\", ty);\n-                if sub == &ty::ReStatic && (matches!(ty.kind, TyKind::Def(_, _)) || v.0.len() == 1)\n+                if sub == &ty::ReStatic\n+                    && (matches!(ty.kind, TyKind::OpaqueDef(_, _)) || v.0.len() == 1)\n                 {\n                     debug!(\"try_report_named_anon_conflict: impl Trait + 'static\");\n                     // This is an `impl Trait` or `dyn Trait` return that evaluates de need of"}, {"sha": "e5daf88c81e2e0b4e01683631a8593fadf05bd3a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -1102,7 +1102,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n             hir::ItemKind::TyAlias(ref ty, ref generics) => (&*ty, generics),\n             _ => return,\n         };\n-        if let hir::TyKind::Def(..) = ty.kind {\n+        if let hir::TyKind::OpaqueDef(..) = ty.kind {\n             // Bounds are respected for `type X = impl Trait`\n             return;\n         }"}, {"sha": "503fbb64db83dbbd6267e1e5871ef02b59dd5d3c", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -304,7 +304,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n-        if let TyKind::Def(item_id, _) = ty.kind {\n+        if let TyKind::OpaqueDef(item_id, _) = ty.kind {\n             let item = self.tcx.hir().expect_item(item_id.id);\n             intravisit::walk_item(self, item);\n         }"}, {"sha": "0af49075c6758456b62e854dc75b9b570972c01c", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -400,9 +400,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.with(scope, |_, this| intravisit::walk_item(this, item));\n             }\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy { .. }) => {\n-                // Opaque types are visited when we visit the `TyKind::Def`, so\n-                // that they have the lifetimes from their parent opaque_ty in\n-                // scope.\n+                // Opaque types are visited when we visit the\n+                // `TyKind::OpaqueDef`, so that they have the lifetimes from\n+                // their parent opaque_ty in scope.\n             }\n             hir::ItemKind::TyAlias(_, ref generics)\n             | hir::ItemKind::Enum(_, ref generics)\n@@ -557,7 +557,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 };\n                 self.with(scope, |_, this| this.visit_ty(&mt.ty));\n             }\n-            hir::TyKind::Def(item_id, lifetimes) => {\n+            hir::TyKind::OpaqueDef(item_id, lifetimes) => {\n                 // Resolve the lifetimes in the bounds to the lifetime defs in the generics.\n                 // `fn foo<'a>() -> impl MyTrait<'a> { ... }` desugars to\n                 // `type MyAnonTy<'b> = impl MyTrait<'b>;`"}, {"sha": "3c418f13dca1581b6313e3b5bcf4ca0eddd09df1", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -1379,7 +1379,7 @@ impl<'l, 'tcx> Visitor<'tcx> for DumpVisitor<'l, 'tcx> {\n                     v.visit_expr(&map.body(anon_const.body).value)\n                 });\n             }\n-            hir::TyKind::Def(item_id, _) => {\n+            hir::TyKind::OpaqueDef(item_id, _) => {\n                 let item = self.tcx.hir().item(item_id.id);\n                 self.nest_tables(self.tcx.hir().local_def_id(item_id.id), |v| v.visit_item(item));\n             }"}, {"sha": "cd2a5deeb2d727c6448a747a0eabc4bdaeb64702", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -324,7 +324,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 let text = format!(\"[{}; {}]\", nested_ty.text, expr);\n                 Ok(replace_text(nested_ty, text))\n             }\n-            hir::TyKind::Def(item_id, _) => {\n+            hir::TyKind::OpaqueDef(item_id, _) => {\n                 let item = scx.tcx.hir().item(item_id.id);\n                 item.make(offset, Some(item_id.id), scx)\n             }"}, {"sha": "ecbb5f81b0360e8f9cdccf4b549c9096186f5f11", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -2838,7 +2838,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let opt_self_ty = maybe_qself.as_ref().map(|qself| self.ast_ty_to_ty(qself));\n                 self.res_to_ty(opt_self_ty, path, false)\n             }\n-            hir::TyKind::Def(item_id, ref lifetimes) => {\n+            hir::TyKind::OpaqueDef(item_id, ref lifetimes) => {\n                 let opaque_ty = tcx.hir().expect_item(item_id.id);\n                 let def_id = tcx.hir().local_def_id(item_id.id).to_def_id();\n "}, {"sha": "ef04f41afdcc4a0ac1575cc6f09135e00d2630a7", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -1494,7 +1494,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let mut is_object_safe = false;\n         if let hir::FnRetTy::Return(ty) = fn_output {\n             // Get the return type.\n-            if let hir::TyKind::Def(..) = ty.kind {\n+            if let hir::TyKind::OpaqueDef(..) = ty.kind {\n                 let ty = AstConv::ast_ty_to_ty(fcx, ty);\n                 // Get the `impl Trait`'s `DefId`.\n                 if let ty::Opaque(def_id, _) = ty.kind {"}, {"sha": "1d59d749634ee1cae5ac8913cf7ba5c8f6bdf596", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -1417,7 +1417,7 @@ fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n         Slice(ty) | Array(ty, _) => is_suggestable_infer_ty(ty),\n         Tup(tys) => tys.iter().any(is_suggestable_infer_ty),\n         Ptr(mut_ty) | Rptr(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n-        Def(_, generic_args) => are_suggestable_generic_args(generic_args),\n+        OpaqueDef(_, generic_args) => are_suggestable_generic_args(generic_args),\n         Path(hir::QPath::TypeRelative(ty, segment)) => {\n             is_suggestable_infer_ty(ty) || are_suggestable_generic_args(segment.generic_args().args)\n         }"}, {"sha": "adb2ae9a5d660766984c58170ac41f3b73596132", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0d3c7f906ae293be30a607e216e9f00ea22f08/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ee0d3c7f906ae293be30a607e216e9f00ea22f08", "patch": "@@ -1351,7 +1351,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 Array(box ty.clean(cx), length)\n             }\n             TyKind::Tup(ref tys) => Tuple(tys.clean(cx)),\n-            TyKind::Def(item_id, _) => {\n+            TyKind::OpaqueDef(item_id, _) => {\n                 let item = cx.tcx.hir().expect_item(item_id.id);\n                 if let hir::ItemKind::OpaqueTy(ref ty) = item.kind {\n                     ImplTrait(ty.bounds.clean(cx))"}]}