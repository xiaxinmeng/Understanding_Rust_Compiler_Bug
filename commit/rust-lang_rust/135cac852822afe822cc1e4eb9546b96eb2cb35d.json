{"sha": "135cac852822afe822cc1e4eb9546b96eb2cb35d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNWNhYzg1MjgyMmFmZTgyMmNjMWU0ZWI5NTQ2Yjk2ZWIyY2IzNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-19T08:22:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-19T08:22:58Z"}, "message": "Auto merge of #21099 - sanxiyn:opt-return-ty, r=alexcrichton\n\nThis avoids having ast::Ty nodes which have no counterpart in the source.", "tree": {"sha": "cc6382f0c7d92c7755151887657ad80a53dd8694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc6382f0c7d92c7755151887657ad80a53dd8694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/135cac852822afe822cc1e4eb9546b96eb2cb35d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/135cac852822afe822cc1e4eb9546b96eb2cb35d", "html_url": "https://github.com/rust-lang/rust/commit/135cac852822afe822cc1e4eb9546b96eb2cb35d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/135cac852822afe822cc1e4eb9546b96eb2cb35d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd8a43c668ba93d29e9671c0c8dc6b67428bf492", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8a43c668ba93d29e9671c0c8dc6b67428bf492", "html_url": "https://github.com/rust-lang/rust/commit/bd8a43c668ba93d29e9671c0c8dc6b67428bf492"}, {"sha": "3f0cc8011aef3f530663302d525bd2d8cb493db5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0cc8011aef3f530663302d525bd2d8cb493db5", "html_url": "https://github.com/rust-lang/rust/commit/3f0cc8011aef3f530663302d525bd2d8cb493db5"}], "stats": {"total": 161, "additions": 76, "deletions": 85}, "files": [{"sha": "1b9d6ec6c33b694162c4451075d24838b7e2f9fb", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -1177,6 +1177,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n             ast::Return(ref ret_ty) => ast::Return(\n                 self.rebuild_arg_ty_or_output(&**ret_ty, lifetime, anon_nums, region_names)\n             ),\n+            ast::DefaultReturn(span) => ast::DefaultReturn(span),\n             ast::NoReturn(span) => ast::NoReturn(span)\n         }\n     }"}, {"sha": "ea66b97bbf968e30d5186f7026f68720f9acfc82", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -1450,18 +1450,15 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         let mut signature = Vec::with_capacity(fn_decl.inputs.len() + 1);\n \n         // Return type -- llvm::DIBuilder wants this at index 0\n-        match fn_decl.output {\n-            ast::Return(ref ret_ty) if ret_ty.node == ast::TyTup(vec![]) =>\n-                signature.push(ptr::null_mut()),\n-            _ => {\n-                assert_type_for_node_id(cx, fn_ast_id, error_reporting_span);\n-\n-                let return_type = ty::node_id_to_type(cx.tcx(), fn_ast_id);\n-                let return_type = monomorphize::apply_param_substs(cx.tcx(),\n-                                                                   param_substs,\n-                                                                   &return_type);\n-                signature.push(type_metadata(cx, return_type, codemap::DUMMY_SP));\n-            }\n+        assert_type_for_node_id(cx, fn_ast_id, error_reporting_span);\n+        let return_type = ty::node_id_to_type(cx.tcx(), fn_ast_id);\n+        let return_type = monomorphize::apply_param_substs(cx.tcx(),\n+                                                           param_substs,\n+                                                           &return_type);\n+        if ty::type_is_nil(return_type) {\n+            signature.push(ptr::null_mut())\n+        } else {\n+            signature.push(type_metadata(cx, return_type, codemap::DUMMY_SP));\n         }\n \n         // Arguments types"}, {"sha": "c989d2311be36217597e0cdaaa676be229c094f2", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -445,9 +445,8 @@ fn gate_simd_ffi(tcx: &ty::ctxt, decl: &ast::FnDecl, ty: &ty::BareFnTy) {\n         for (input, ty) in decl.inputs.iter().zip(sig.inputs.iter()) {\n             check(&*input.ty, *ty)\n         }\n-        match decl.output {\n-            ast::NoReturn(_) => {}\n-            ast::Return(ref ty) => check(&**ty, sig.output.unwrap())\n+        if let ast::Return(ref ty) = decl.output {\n+            check(&**ty, sig.output.unwrap())\n         }\n     }\n }"}, {"sha": "c2b34acc6c8cc30f47dcac7a8da8967b9d72a4a8", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -1359,7 +1359,8 @@ fn ty_of_method_or_bare_fn<'a, 'tcx>(this: &AstConv<'tcx>,\n                                                               implied_output_region,\n                                                               lifetimes_for_params,\n                                                               &**output)),\n-        ast::NoReturn(_) => ty::FnDiverging\n+        ast::DefaultReturn(..) => ty::FnConverging(ty::mk_nil(this.tcx())),\n+        ast::NoReturn(..) => ty::FnDiverging\n     };\n \n     (ty::BareFnTy {\n@@ -1486,14 +1487,21 @@ pub fn ty_of_closure<'tcx>(\n \n     let expected_ret_ty = expected_sig.map(|e| e.output);\n \n+    let is_infer = match decl.output {\n+        ast::Return(ref output) if output.node == ast::TyInfer => true,\n+        ast::DefaultReturn(..) => true,\n+        _ => false\n+    };\n+\n     let output_ty = match decl.output {\n-        ast::Return(ref output) if output.node == ast::TyInfer && expected_ret_ty.is_some() =>\n+        _ if is_infer && expected_ret_ty.is_some() =>\n             expected_ret_ty.unwrap(),\n-        ast::Return(ref output) if output.node == ast::TyInfer =>\n-            ty::FnConverging(this.ty_infer(output.span)),\n+        _ if is_infer =>\n+            ty::FnConverging(this.ty_infer(decl.output.span())),\n         ast::Return(ref output) =>\n             ty::FnConverging(ast_ty_to_ty(this, &rb, &**output)),\n-        ast::NoReturn(_) => ty::FnDiverging\n+        ast::DefaultReturn(..) => unreachable!(),\n+        ast::NoReturn(..) => ty::FnDiverging\n     };\n \n     debug!(\"ty_of_closure: input_tys={}\", input_tys.repr(this.tcx()));"}, {"sha": "25ba7ccdbc4d93f92f07fad03fff836fbca9025e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -1488,7 +1488,9 @@ fn ty_of_foreign_fn_decl<'a, 'tcx>(ccx: &CollectCtxt<'a, 'tcx>,\n     let output = match decl.output {\n         ast::Return(ref ty) =>\n             ty::FnConverging(ast_ty_to_ty(ccx, &rb, &**ty)),\n-        ast::NoReturn(_) =>\n+        ast::DefaultReturn(..) =>\n+            ty::FnConverging(ty::mk_nil(ccx.tcx)),\n+        ast::NoReturn(..) =>\n             ty::FnDiverging\n     };\n "}, {"sha": "7342c9f3e81de583f25e03391cc8a7cc1cc52b33", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -1141,14 +1141,16 @@ impl Clean<Argument> for ast::Arg {\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n pub enum FunctionRetTy {\n     Return(Type),\n+    DefaultReturn,\n     NoReturn\n }\n \n impl Clean<FunctionRetTy> for ast::FunctionRetTy {\n     fn clean(&self, cx: &DocContext) -> FunctionRetTy {\n         match *self {\n             ast::Return(ref typ) => Return(typ.clean(cx)),\n-            ast::NoReturn(_) => NoReturn\n+            ast::DefaultReturn(..) => DefaultReturn,\n+            ast::NoReturn(..) => NoReturn\n         }\n     }\n }"}, {"sha": "57b8d666c95b722db8ca3a027d758975e1cfdfc8", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -557,6 +557,7 @@ impl fmt::String for clean::FunctionRetTy {\n         match *self {\n             clean::Return(clean::Tuple(ref tys)) if tys.is_empty() => Ok(()),\n             clean::Return(ref ty) => write!(f, \" -&gt; {}\", ty),\n+            clean::DefaultReturn => Ok(()),\n             clean::NoReturn => write!(f, \" -&gt; !\")\n         }\n     }"}, {"sha": "fcf80410da240abc47f15246aa708ed4f5c546f8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -1390,6 +1390,10 @@ pub enum FunctionRetTy {\n     /// Functions with return type ! that always\n     /// raise an error or exit (i.e. never return to the caller)\n     NoReturn(Span),\n+    /// Return type is not specified. Functions default to () and\n+    /// closures default to inference. Span points to where return\n+    /// type would be inserted.\n+    DefaultReturn(Span),\n     /// Everything else\n     Return(P<Ty>),\n }\n@@ -1398,6 +1402,7 @@ impl FunctionRetTy {\n     pub fn span(&self) -> Span {\n         match *self {\n             NoReturn(span) => span,\n+            DefaultReturn(span) => span,\n             Return(ref ty) => ty.span\n         }\n     }"}, {"sha": "f484650ad5b06dfd90fc2e2de05636dd786e9f78", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -726,6 +726,7 @@ pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> {\n         inputs: inputs.move_map(|x| fld.fold_arg(x)),\n         output: match output {\n             Return(ty) => Return(fld.fold_ty(ty)),\n+            DefaultReturn(span) => DefaultReturn(span),\n             NoReturn(span) => NoReturn(span)\n         },\n         variadic: variadic\n@@ -1189,14 +1190,7 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: P<ForeignItem>, folder: &mut T) ->\n         attrs: attrs.move_map(|x| folder.fold_attribute(x)),\n         node: match node {\n             ForeignItemFn(fdec, generics) => {\n-                ForeignItemFn(fdec.map(|FnDecl {inputs, output, variadic}| FnDecl {\n-                    inputs: inputs.move_map(|a| folder.fold_arg(a)),\n-                    output: match output {\n-                        Return(ty) => Return(folder.fold_ty(ty)),\n-                        NoReturn(span) => NoReturn(span)\n-                    },\n-                    variadic: variadic\n-                }), folder.fold_generics(generics))\n+                ForeignItemFn(folder.fold_fn_decl(fdec), folder.fold_generics(generics))\n             }\n             ForeignItemStatic(t, m) => {\n                 ForeignItemStatic(folder.fold_ty(t), m)"}, {"sha": "90e236dfde35bdc4a91cd596f004b24a1ec31a88", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -1066,9 +1066,7 @@ mod test {\n                                     }),\n                                         id: ast::DUMMY_NODE_ID\n                                     }),\n-                                output: ast::Return(P(ast::Ty{id: ast::DUMMY_NODE_ID,\n-                                                  node: ast::TyTup(vec![]),\n-                                                  span:sp(15,15)})), // not sure\n+                                output: ast::DefaultReturn(sp(15, 15)),\n                                 variadic: false\n                             }),\n                                     ast::Unsafety::Normal,"}, {"sha": "b2f6938f513e58726aa33c68a9084da57c60b221", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -19,7 +19,8 @@ use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, BiLt, BiGt, Block};\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n use ast::{Crate, CrateConfig, Decl, DeclItem};\n-use ast::{DeclLocal, DefaultBlock, UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n+use ast::{DeclLocal, DefaultBlock, DefaultReturn};\n+use ast::{UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n use ast::{ExprBreak, ExprCall, ExprCast};\n@@ -1426,11 +1427,7 @@ impl<'a> Parser<'a> {\n             }\n         } else {\n             let pos = self.span.lo;\n-            Return(P(Ty {\n-                id: ast::DUMMY_NODE_ID,\n-                node: TyTup(vec![]),\n-                span: mk_sp(pos, pos),\n-            }))\n+            DefaultReturn(mk_sp(pos, pos))\n         }\n     }\n \n@@ -4550,15 +4547,7 @@ impl<'a> Parser<'a> {\n                 (optional_unboxed_closure_kind, args)\n             }\n         };\n-        let output = if self.check(&token::RArrow) {\n-            self.parse_ret_ty()\n-        } else {\n-            Return(P(Ty {\n-                id: ast::DUMMY_NODE_ID,\n-                node: TyInfer,\n-                span: self.span,\n-            }))\n-        };\n+        let output = self.parse_ret_ty();\n \n         (P(FnDecl {\n             inputs: inputs_captures,\n@@ -4575,15 +4564,7 @@ impl<'a> Parser<'a> {\n                                      seq_sep_trailing_allowed(token::Comma),\n                                      |p| p.parse_fn_block_arg());\n \n-        let output = if self.check(&token::RArrow) {\n-            self.parse_ret_ty()\n-        } else {\n-            Return(P(Ty {\n-                id: ast::DUMMY_NODE_ID,\n-                node: TyInfer,\n-                span: self.span,\n-            }))\n-        };\n+        let output = self.parse_ret_ty();\n \n         P(FnDecl {\n             inputs: inputs,"}, {"sha": "b59e770c6ba519520331a4b79c238d91c57ef3bb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -2351,10 +2351,8 @@ impl<'a> State<'a> {\n         try!(self.print_fn_args(decl, None));\n         try!(word(&mut self.s, \"|\"));\n \n-        if let ast::Return(ref ty) = decl.output {\n-            if ty.node == ast::TyInfer {\n-                return self.maybe_print_comment(ty.span.lo);\n-            }\n+        if let ast::DefaultReturn(..) = decl.output {\n+            return Ok(());\n         }\n \n         try!(self.space_if_not_bol());\n@@ -2364,6 +2362,7 @@ impl<'a> State<'a> {\n                 try!(self.print_type(&**ty));\n                 self.maybe_print_comment(ty.span.lo)\n             }\n+            ast::DefaultReturn(..) => unreachable!(),\n             ast::NoReturn(span) => {\n                 try!(self.word_nbsp(\"!\"));\n                 self.maybe_print_comment(span.lo)\n@@ -2385,10 +2384,8 @@ impl<'a> State<'a> {\n         try!(self.print_fn_args(decl, None));\n         try!(word(&mut self.s, \")\"));\n \n-        if let ast::Return(ref ty) = decl.output {\n-            if ty.node == ast::TyInfer {\n-                return self.maybe_print_comment(ty.span.lo);\n-            }\n+        if let ast::DefaultReturn(..) = decl.output {\n+            return Ok(());\n         }\n \n         try!(self.space_if_not_bol());\n@@ -2398,6 +2395,7 @@ impl<'a> State<'a> {\n                 try!(self.print_type(&**ty));\n                 self.maybe_print_comment(ty.span.lo)\n             }\n+            ast::DefaultReturn(..) => unreachable!(),\n             ast::NoReturn(span) => {\n                 try!(self.word_nbsp(\"!\"));\n                 self.maybe_print_comment(span.lo)\n@@ -2684,13 +2682,8 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_output(&mut self, decl: &ast::FnDecl) -> IoResult<()> {\n-        if let ast::Return(ref ty) = decl.output {\n-            match ty.node {\n-                ast::TyTup(ref tys) if tys.is_empty() => {\n-                    return self.maybe_print_comment(ty.span.lo);\n-                }\n-                _ => ()\n-            }\n+        if let ast::DefaultReturn(..) = decl.output {\n+            return Ok(());\n         }\n \n         try!(self.space_if_not_bol());\n@@ -2699,6 +2692,7 @@ impl<'a> State<'a> {\n         match decl.output {\n             ast::NoReturn(_) =>\n                 try!(self.word_nbsp(\"!\")),\n+            ast::DefaultReturn(..) => unreachable!(),\n             ast::Return(ref ty) =>\n                 try!(self.print_type(&**ty))\n         }\n@@ -3071,9 +3065,7 @@ mod test {\n \n         let decl = ast::FnDecl {\n             inputs: Vec::new(),\n-            output: ast::Return(P(ast::Ty {id: 0,\n-                               node: ast::TyTup(vec![]),\n-                               span: codemap::DUMMY_SP})),\n+            output: ast::DefaultReturn(codemap::DUMMY_SP),\n             variadic: false\n         };\n         let generics = ast_util::empty_generics();"}, {"sha": "5f869d5093feca6303ca863e0d9fbf238e18b2bb", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -297,11 +297,8 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n         match &i.node {\n           &ast::ItemFn(ref decl, _, _, ref generics, _) => {\n             let no_output = match decl.output {\n-                ast::Return(ref ret_ty) => match ret_ty.node {\n-                    ast::TyTup(ref tys) if tys.is_empty() => true,\n-                    _ => false,\n-                },\n-                ast::NoReturn(_) => false\n+                ast::DefaultReturn(..) => true,\n+                _ => false\n             };\n             if decl.inputs.is_empty()\n                    && no_output\n@@ -336,11 +333,8 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n             ast::ItemFn(ref decl, _, _, ref generics, _) => {\n                 let input_cnt = decl.inputs.len();\n                 let no_output = match decl.output {\n-                    ast::Return(ref ret_ty) => match ret_ty.node {\n-                        ast::TyTup(ref tys) if tys.is_empty() => true,\n-                        _ => false,\n-                    },\n-                    ast::NoReturn(_) => false\n+                    ast::DefaultReturn(..) => true,\n+                    _ => false\n                 };\n                 let tparm_cnt = generics.ty_params.len();\n                 // NB: inadequate check, but we're running"}, {"sha": "8a223296e5467a73af8dfa8bf1d776619decc5b0", "filename": "src/test/pretty/fn-return.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Ftest%2Fpretty%2Ffn-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135cac852822afe822cc1e4eb9546b96eb2cb35d/src%2Ftest%2Fpretty%2Ffn-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-return.rs?ref=135cac852822afe822cc1e4eb9546b96eb2cb35d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact\n+\n+// Check that `fn f() -> () { }` does not print as `fn f() { }`.\n+\n+fn f() -> () { }\n+\n+fn main() { }"}]}