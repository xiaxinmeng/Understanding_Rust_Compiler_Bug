{"sha": "e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyODIwZWEwNmNlZWIxOWNlZGI4YWMzOGE0ZjFiN2I2YWJiMWZjZmQ=", "commit": {"author": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2017-08-27T16:51:05Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2017-09-12T00:46:01Z"}, "message": "Sync with upstream syscall library", "tree": {"sha": "56860ee5915eb0ef8775a918c391b953341850fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56860ee5915eb0ef8775a918c391b953341850fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd", "html_url": "https://github.com/rust-lang/rust/commit/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd/comments", "author": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba374fb21b63751ac10a09dbf269fd5067d4eb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba374fb21b63751ac10a09dbf269fd5067d4eb8", "html_url": "https://github.com/rust-lang/rust/commit/eba374fb21b63751ac10a09dbf269fd5067d4eb8"}], "stats": {"total": 158, "additions": 146, "deletions": 12}, "files": [{"sha": "b0ff69dd6345c5983ae493a36deb70cb14d1debe", "filename": "src/libstd/sys/redox/syscall/call.rs", "status": "modified", "additions": 51, "deletions": 12, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs?ref=e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd", "patch": "@@ -9,11 +9,17 @@\n // except according to those terms.\n \n use super::arch::*;\n-use super::data::{Stat, StatVfs, TimeSpec};\n+use super::data::{SigAction, Stat, StatVfs, TimeSpec};\n use super::error::Result;\n use super::number::*;\n \n-use core::mem;\n+use core::{mem, ptr};\n+\n+// Signal restorer\n+extern \"C\" fn restorer() -> ! {\n+    sigreturn().unwrap();\n+    unreachable!();\n+}\n \n /// Set the end of the process's heap\n ///\n@@ -43,12 +49,12 @@ pub unsafe fn brk(addr: usize) -> Result<usize> {\n /// * `EIO` - an I/O error occurred\n /// * `ENOENT` - `path` does not exit\n /// * `ENOTDIR` - `path` is not a directory\n-pub fn chdir(path: &str) -> Result<usize> {\n-    unsafe { syscall2(SYS_CHDIR, path.as_ptr() as usize, path.len()) }\n+pub fn chdir<T: AsRef<[u8]>>(path: T) -> Result<usize> {\n+    unsafe { syscall2(SYS_CHDIR, path.as_ref().as_ptr() as usize, path.as_ref().len()) }\n }\n \n-pub fn chmod(path: &str, mode: usize) -> Result<usize> {\n-    unsafe { syscall3(SYS_CHMOD, path.as_ptr() as usize, path.len(), mode) }\n+pub fn chmod<T: AsRef<[u8]>>(path: T, mode: usize) -> Result<usize> {\n+    unsafe { syscall3(SYS_CHMOD, path.as_ref().as_ptr() as usize, path.as_ref().len(), mode) }\n }\n \n /// Produce a fork of the current process, or a new process thread\n@@ -132,6 +138,11 @@ pub fn ftruncate(fd: usize, len: usize) -> Result<usize> {\n     unsafe { syscall2(SYS_FTRUNCATE, fd, len) }\n }\n \n+// Change modify and/or access times\n+pub fn futimens(fd: usize, times: &[TimeSpec]) -> Result<usize> {\n+    unsafe { syscall3(SYS_FUTIMENS, fd, times.as_ptr() as usize, times.len() * mem::size_of::<TimeSpec>()) }\n+}\n+\n /// Fast userspace mutex\n pub unsafe fn futex(addr: *mut i32, op: usize, val: i32, val2: usize, addr2: *mut i32)\n                     -> Result<usize> {\n@@ -173,6 +184,16 @@ pub fn getpid() -> Result<usize> {\n     unsafe { syscall0(SYS_GETPID) }\n }\n \n+/// Get the process group ID\n+pub fn getpgid(pid: usize) -> Result<usize> {\n+    unsafe { syscall1(SYS_GETPGID, pid) }\n+}\n+\n+/// Get the parent process ID\n+pub fn getppid() -> Result<usize> {\n+    unsafe { syscall0(SYS_GETPPID) }\n+}\n+\n /// Get the current user ID\n pub fn getuid() -> Result<usize> {\n     unsafe { syscall0(SYS_GETUID) }\n@@ -210,8 +231,8 @@ pub fn nanosleep(req: &TimeSpec, rem: &mut TimeSpec) -> Result<usize> {\n }\n \n /// Open a file\n-pub fn open(path: &str, flags: usize) -> Result<usize> {\n-    unsafe { syscall3(SYS_OPEN, path.as_ptr() as usize, path.len(), flags) }\n+pub fn open<T: AsRef<[u8]>>(path: T, flags: usize) -> Result<usize> {\n+    unsafe { syscall3(SYS_OPEN, path.as_ref().as_ptr() as usize, path.as_ref().len(), flags) }\n }\n \n /// Allocate pages, linearly in physical memory\n@@ -245,8 +266,13 @@ pub fn read(fd: usize, buf: &mut [u8]) -> Result<usize> {\n }\n \n /// Remove a directory\n-pub fn rmdir(path: &str) -> Result<usize> {\n-    unsafe { syscall2(SYS_RMDIR, path.as_ptr() as usize, path.len()) }\n+pub fn rmdir<T: AsRef<[u8]>>(path: T) -> Result<usize> {\n+    unsafe { syscall2(SYS_RMDIR, path.as_ref().as_ptr() as usize, path.as_ref().len()) }\n+}\n+\n+/// Set the process group ID\n+pub fn setpgid(pid: usize, pgid: usize) -> Result<usize> {\n+    unsafe { syscall2(SYS_SETPGID, pid, pgid) }\n }\n \n /// Set the current process group IDs\n@@ -264,9 +290,22 @@ pub fn setreuid(ruid: usize, euid: usize) -> Result<usize> {\n     unsafe { syscall2(SYS_SETREUID, ruid, euid) }\n }\n \n+/// Set up a signal handler\n+pub fn sigaction(sig: usize, act: Option<&SigAction>, oldact: Option<&mut SigAction>) -> Result<usize> {\n+    unsafe { syscall4(SYS_SIGACTION, sig,\n+                      act.map(|x| x as *const _).unwrap_or_else(ptr::null) as usize,\n+                      oldact.map(|x| x as *mut _).unwrap_or_else(ptr::null_mut) as usize,\n+                      restorer as usize) }\n+}\n+\n+// Return from signal handler\n+pub fn sigreturn() -> Result<usize> {\n+    unsafe { syscall0(SYS_SIGRETURN) }\n+}\n+\n /// Remove a file\n-pub fn unlink(path: &str) -> Result<usize> {\n-    unsafe { syscall2(SYS_UNLINK, path.as_ptr() as usize, path.len()) }\n+pub fn unlink<T: AsRef<[u8]>>(path: T) -> Result<usize> {\n+    unsafe { syscall2(SYS_UNLINK, path.as_ref().as_ptr() as usize, path.as_ref().len()) }\n }\n \n /// Convert a virtual address to a physical one"}, {"sha": "3566d85d9b4512ef5754aa8de5b7378f282fc3cd", "filename": "src/libstd/sys/redox/syscall/data.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs?ref=e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd", "patch": "@@ -11,6 +11,78 @@\n use core::ops::{Deref, DerefMut};\n use core::{mem, slice};\n \n+#[derive(Copy, Clone, Debug, Default)]\n+pub struct Event {\n+    pub id: usize,\n+    pub flags: usize,\n+    pub data: usize\n+}\n+\n+impl Deref for Event {\n+    type Target = [u8];\n+    fn deref(&self) -> &[u8] {\n+        unsafe {\n+            slice::from_raw_parts(self as *const Event as *const u8, mem::size_of::<Event>()) as &[u8]\n+        }\n+    }\n+}\n+\n+impl DerefMut for Event {\n+    fn deref_mut(&mut self) -> &mut [u8] {\n+        unsafe {\n+            slice::from_raw_parts_mut(self as *mut Event as *mut u8, mem::size_of::<Event>()) as &mut [u8]\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, Default)]\n+#[repr(C)]\n+pub struct Packet {\n+    pub id: u64,\n+    pub pid: usize,\n+    pub uid: u32,\n+    pub gid: u32,\n+    pub a: usize,\n+    pub b: usize,\n+    pub c: usize,\n+    pub d: usize\n+}\n+\n+impl Deref for Packet {\n+    type Target = [u8];\n+    fn deref(&self) -> &[u8] {\n+        unsafe {\n+            slice::from_raw_parts(self as *const Packet as *const u8, mem::size_of::<Packet>()) as &[u8]\n+        }\n+    }\n+}\n+\n+impl DerefMut for Packet {\n+    fn deref_mut(&mut self) -> &mut [u8] {\n+        unsafe {\n+            slice::from_raw_parts_mut(self as *mut Packet as *mut u8, mem::size_of::<Packet>()) as &mut [u8]\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+#[repr(C)]\n+pub struct SigAction {\n+    pub sa_handler: extern \"C\" fn(usize),\n+    pub sa_mask: [u64; 2],\n+    pub sa_flags: usize,\n+}\n+\n+impl Default for SigAction {\n+    fn default() -> Self {\n+        Self {\n+            sa_handler: unsafe { mem::transmute(0usize) },\n+            sa_mask: [0; 2],\n+            sa_flags: 0,\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, Default)]\n #[repr(C)]\n pub struct Stat {"}, {"sha": "0f61b9fa77b5297c364e241766815ae9f382d39f", "filename": "src/libstd/sys/redox/syscall/flag.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fflag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fflag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fflag.rs?ref=e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd", "patch": "@@ -11,7 +11,9 @@\n pub const CLONE_VM: usize = 0x100;\n pub const CLONE_FS: usize = 0x200;\n pub const CLONE_FILES: usize = 0x400;\n+pub const CLONE_SIGHAND: usize = 0x800;\n pub const CLONE_VFORK: usize = 0x4000;\n+pub const CLONE_THREAD: usize = 0x10000;\n \n pub const CLOCK_REALTIME: usize = 1;\n pub const CLOCK_MONOTONIC: usize = 4;\n@@ -20,6 +22,7 @@ pub const EVENT_NONE: usize = 0;\n pub const EVENT_READ: usize = 1;\n pub const EVENT_WRITE: usize = 2;\n \n+pub const F_DUPFD: usize = 0;\n pub const F_GETFD: usize = 1;\n pub const F_SETFD: usize = 2;\n pub const F_GETFL: usize = 3;\n@@ -36,6 +39,8 @@ pub const MODE_TYPE: u16 = 0xF000;\n pub const MODE_DIR: u16 = 0x4000;\n pub const MODE_FILE: u16 = 0x8000;\n pub const MODE_SYMLINK: u16 = 0xA000;\n+pub const MODE_FIFO: u16 = 0x1000;\n+pub const MODE_CHR: u16 = 0x2000;\n \n pub const MODE_PERM: u16 = 0x0FFF;\n pub const MODE_SETUID: u16 = 0o4000;\n@@ -96,4 +101,16 @@ pub const SIGIO: usize =    29;\n pub const SIGPWR: usize =   30;\n pub const SIGSYS: usize =   31;\n \n+pub const SIG_DFL: usize = 0;\n+pub const SIG_IGN: usize = 1;\n+\n+pub const SA_NOCLDSTOP: usize = 0x00000001;\n+pub const SA_NOCLDWAIT: usize = 0x00000002;\n+pub const SA_SIGINFO: usize =   0x00000004;\n+pub const SA_RESTORER: usize =  0x04000000;\n+pub const SA_ONSTACK: usize =   0x08000000;\n+pub const SA_RESTART: usize =   0x10000000;\n+pub const SA_NODEFER: usize =   0x40000000;\n+pub const SA_RESETHAND: usize = 0x80000000;\n+\n pub const WNOHANG: usize = 1;"}, {"sha": "07db91647ff68367bb8a3d1b825a34fa3dd54966", "filename": "src/libstd/sys/redox/syscall/number.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fnumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fnumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fnumber.rs?ref=e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd", "patch": "@@ -41,6 +41,7 @@ pub const SYS_FSTAT: usize =    SYS_CLASS_FILE | SYS_ARG_MSLICE | 28;\n pub const SYS_FSTATVFS: usize = SYS_CLASS_FILE | SYS_ARG_MSLICE | 100;\n pub const SYS_FSYNC: usize =    SYS_CLASS_FILE | 118;\n pub const SYS_FTRUNCATE: usize =SYS_CLASS_FILE | 93;\n+pub const SYS_FUTIMENS: usize = SYS_CLASS_FILE | SYS_ARG_SLICE | 320;\n \n pub const SYS_BRK: usize =      45;\n pub const SYS_CHDIR: usize =    12;\n@@ -56,6 +57,8 @@ pub const SYS_GETEUID: usize =  201;\n pub const SYS_GETGID: usize =   200;\n pub const SYS_GETNS: usize =    950;\n pub const SYS_GETPID: usize =   20;\n+pub const SYS_GETPGID: usize =  132;\n+pub const SYS_GETPPID: usize =  64;\n pub const SYS_GETUID: usize =   199;\n pub const SYS_IOPL: usize =     110;\n pub const SYS_KILL: usize =     37;\n@@ -67,8 +70,11 @@ pub const SYS_PHYSMAP: usize =  947;\n pub const SYS_PHYSUNMAP: usize =948;\n pub const SYS_VIRTTOPHYS: usize=949;\n pub const SYS_PIPE2: usize =    331;\n+pub const SYS_SETPGID: usize =  57;\n pub const SYS_SETREGID: usize = 204;\n pub const SYS_SETRENS: usize =  952;\n pub const SYS_SETREUID: usize = 203;\n+pub const SYS_SIGACTION: usize =67;\n+pub const SYS_SIGRETURN: usize =119;\n pub const SYS_WAITPID: usize =  7;\n pub const SYS_YIELD: usize =    158;"}]}