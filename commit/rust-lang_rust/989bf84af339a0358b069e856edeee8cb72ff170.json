{"sha": "989bf84af339a0358b069e856edeee8cb72ff170", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OWJmODRhZjMzOWEwMzU4YjA2OWU4NTZlZGVlZThjYjcyZmYxNzA=", "commit": {"author": {"name": "Bart\u0142omiej Kuras", "email": "bartlomiej.kuras@o2.pl", "date": "2019-12-09T16:38:24Z"}, "committer": {"name": "Bart\u0142omiej Kuras", "email": "bartlomiej.kuras@o2.pl", "date": "2019-12-09T20:16:48Z"}, "message": "Added ExactSizeIterator bound to return types\n\nThis reverts commit d97379a96e594820b9e865ae56cb8d753bf6b06a.", "tree": {"sha": "3488e71233d6a3eb53cb9ca5b3806b52b315360f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3488e71233d6a3eb53cb9ca5b3806b52b315360f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989bf84af339a0358b069e856edeee8cb72ff170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989bf84af339a0358b069e856edeee8cb72ff170", "html_url": "https://github.com/rust-lang/rust/commit/989bf84af339a0358b069e856edeee8cb72ff170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989bf84af339a0358b069e856edeee8cb72ff170/comments", "author": null, "committer": null, "parents": [{"sha": "d97379a96e594820b9e865ae56cb8d753bf6b06a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d97379a96e594820b9e865ae56cb8d753bf6b06a", "html_url": "https://github.com/rust-lang/rust/commit/d97379a96e594820b9e865ae56cb8d753bf6b06a"}], "stats": {"total": 84, "additions": 31, "deletions": 53}, "files": [{"sha": "39d7ea922bceda50770772869345adc83364b440", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -1274,7 +1274,7 @@ impl Build {\n         t!(fs::remove_dir_all(dir))\n     }\n \n-    fn read_dir(&self, dir: &Path) -> impl Iterator<Item=fs::DirEntry> + ExactSizeIterator {\n+    fn read_dir(&self, dir: &Path) -> impl Iterator<Item=fs::DirEntry> {\n         let iter = match fs::read_dir(dir) {\n             Ok(v) => v,\n             Err(_) if self.config.dry_run => return vec![].into_iter(),"}, {"sha": "825e98cedb9e07eda7f4f5cb01a8860bdd2694aa", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -574,7 +574,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         unsubstituted_region_constraints: &'a [QueryOutlivesConstraint<'tcx>],\n         result_subst: &'a CanonicalVarValues<'tcx>,\n-    ) -> impl Iterator<Item = PredicateObligation<'tcx>> + ExactSizeIterator + 'a + Captures<'tcx> {\n+    ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a + Captures<'tcx> {\n         unsubstituted_region_constraints\n             .iter()\n             .map(move |constraint| {"}, {"sha": "fd8ccce6833522d3368e16704133f4ce220effc0", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -11,7 +11,7 @@ pub struct FreeRegionMap<'tcx> {\n }\n \n impl<'tcx> FreeRegionMap<'tcx> {\n-    pub fn elements(&self) -> impl Iterator<Item=&Region<'tcx>> + ExactSizeIterator {\n+    pub fn elements(&self) -> impl Iterator<Item=&Region<'tcx>> {\n         self.relation.elements()\n     }\n "}, {"sha": "792034875fb69c19e58a14088d5b4589f1578f7e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -284,7 +284,7 @@ impl<'tcx> Body<'tcx> {\n     #[inline]\n     pub fn args_iter(&self) -> impl Iterator<Item = Local> + ExactSizeIterator {\n         let arg_count = self.arg_count;\n-        (1..arg_count+1).map(Local::new)\n+        (1..arg_count + 1).map(Local::new)\n     }\n \n     /// Returns an iterator over all user-defined variables and compiler-generated temporaries (all"}, {"sha": "b8ddf6078bda6e1d20aabb978a6529afeadeed96", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -414,9 +414,7 @@ impl<'tcx> Node {\n     }\n \n     /// Iterate over the items defined directly by the given (impl or trait) node.\n-    pub fn items(&self, tcx: TyCtxt<'tcx>)\n-        -> impl Iterator<Item = ty::AssocItem> + ExactSizeIterator + Clone + 'tcx\n-    {\n+    pub fn items(&self, tcx: TyCtxt<'tcx>) -> ty::AssocItemsIterator<'tcx> {\n         tcx.associated_items(self.def_id())\n     }\n "}, {"sha": "c9a934e9ebd8490ff86cbfb73096bf596cf1501e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -2376,7 +2376,7 @@ impl<'tcx> AdtDef {\n     pub fn discriminants(\n         &'tcx self,\n         tcx: TyCtxt<'tcx>,\n-    ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + ExactSizeIterator + Captures<'tcx> {\n+    ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'tcx> {\n         let repr_type = self.repr.discr_type();\n         let initial = repr_type.initial_discriminant(tcx);\n         let mut prev_discr = None::<Discr<'tcx>>;\n@@ -2740,9 +2740,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns an iterator of the `DefId`s for all body-owners in this\n     /// crate. If you would prefer to iterate over the bodies\n     /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n-    pub fn body_owners(self)\n-        -> impl Iterator<Item = DefId> + ExactSizeIterator + Captures<'tcx> + 'tcx\n-    {\n+    pub fn body_owners(self) -> impl Iterator<Item = DefId> + Captures<'tcx> + 'tcx {\n         self.hir().krate()\n                   .body_ids\n                   .iter()\n@@ -3118,12 +3116,6 @@ impl Iterator for AssocItemsIterator<'_> {\n     }\n }\n \n-impl ExactSizeIterator for AssocItemsIterator<'_> {\n-    fn len(&self) -> usize {\n-        self.def_ids.len() - self.next_index\n-    }\n-}\n-\n fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> AssocItem {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let parent_id = tcx.hir().get_parent_item(id);"}, {"sha": "6cb0d1e9946b597ce41724b53c6ca9d3f5fe96b6", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -345,7 +345,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         self,\n         def_id: DefId,\n         tcx: TyCtxt<'_>,\n-    ) -> impl Iterator<Item = Ty<'tcx>> + ExactSizeIterator + 'tcx {\n+    ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         let SplitClosureSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n         upvar_kinds.iter().map(|t| {\n             if let GenericArgKind::Type(ty) = t.unpack() {\n@@ -433,7 +433,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         self,\n         def_id: DefId,\n         tcx: TyCtxt<'_>,\n-    ) -> impl Iterator<Item = Ty<'tcx>> + ExactSizeIterator + 'tcx {\n+    ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         let SplitGeneratorSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n         upvar_kinds.iter().map(|t| {\n             if let GenericArgKind::Type(ty) = t.unpack() {\n@@ -551,7 +551,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         self,\n         def_id: DefId,\n         tcx: TyCtxt<'tcx>,\n-    ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + ExactSizeIterator + Captures<'tcx>> {\n+    ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {\n         let layout = tcx.generator_layout(def_id);\n         layout.variant_fields.iter().map(move |variant| {\n             variant.iter().map(move |field| {\n@@ -563,9 +563,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     /// This is the types of the fields of a generator which are not stored in a\n     /// variant.\n     #[inline]\n-    pub fn prefix_tys(self, def_id: DefId, tcx: TyCtxt<'tcx>)\n-        -> impl Iterator<Item = Ty<'tcx>> + ExactSizeIterator\n-    {\n+    pub fn prefix_tys(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> impl Iterator<Item = Ty<'tcx>> {\n         self.upvar_tys(def_id, tcx)\n     }\n }\n@@ -582,7 +580,7 @@ impl<'tcx> UpvarSubsts<'tcx> {\n         self,\n         def_id: DefId,\n         tcx: TyCtxt<'tcx>,\n-    ) -> impl Iterator<Item = Ty<'tcx>> + ExactSizeIterator + 'tcx {\n+    ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         let upvar_kinds = match self {\n             UpvarSubsts::Closure(substs) => substs.as_closure().split(def_id, tcx).upvar_kinds,\n             UpvarSubsts::Generator(substs) => substs.as_generator().split(def_id, tcx).upvar_kinds,"}, {"sha": "9fdcea6df88c59a7a865a68d7d38051661be5a3a", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -186,18 +186,14 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n \n     // # Iterating over nodes, edges\n \n-    pub fn enumerated_nodes(&self)\n-        -> impl Iterator<Item = (NodeIndex, &Node<N>)> + ExactSizeIterator\n-    {\n+    pub fn enumerated_nodes(&self) -> impl Iterator<Item = (NodeIndex, &Node<N>)> {\n         self.nodes\n             .iter()\n             .enumerate()\n             .map(|(idx, n)| (NodeIndex(idx), n))\n     }\n \n-    pub fn enumerated_edges(&self)\n-        -> impl Iterator<Item = (EdgeIndex, &Edge<E>)> + ExactSizeIterator\n-    {\n+    pub fn enumerated_edges(&self) -> impl Iterator<Item = (EdgeIndex, &Edge<E>)> {\n         self.edges\n             .iter()\n             .enumerate()"}, {"sha": "a3926c15551728c996aff3b75d3a1abd0eb3093a", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -60,7 +60,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n         self.edges.is_empty()\n     }\n \n-    pub fn elements(&self) -> impl Iterator<Item=&T> + ExactSizeIterator {\n+    pub fn elements(&self) -> impl Iterator<Item=&T> {\n         self.elements.iter()\n     }\n "}, {"sha": "ea156a94ea17be34cf88a0249688d2d1057f0220", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -449,7 +449,7 @@ impl DirtyCleanVisitor<'tcx> {\n         &self,\n         labels: &'l Labels,\n         def_id: DefId\n-    ) -> impl Iterator<Item = DepNode> + ExactSizeIterator + 'l {\n+    ) -> impl Iterator<Item = DepNode> + 'l {\n         let def_path_hash = self.tcx.def_path_hash(def_id);\n         labels\n             .iter()"}, {"sha": "9ed5ef5a539a1bc01fd771e7c04df41e868c6196", "filename": "src/librustc_index/bit_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_index%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_index%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fbit_set.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -748,7 +748,7 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n         }\n     }\n \n-    pub fn rows(&self) -> impl Iterator<Item = R> + ExactSizeIterator {\n+    pub fn rows(&self) -> impl Iterator<Item = R> {\n         (0..self.num_rows).map(R::new)\n     }\n \n@@ -975,7 +975,7 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n         self.ensure_row(row).insert_all();\n     }\n \n-    pub fn rows(&self) -> impl Iterator<Item = R> + ExactSizeIterator {\n+    pub fn rows(&self) -> impl Iterator<Item = R> {\n         self.rows.indices()\n     }\n "}, {"sha": "6e80b48a6856016dadab3a7eb46bb2add06f0d6c", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -633,16 +633,14 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn drain<'a, R: RangeBounds<usize>>(&'a mut self, range: R)\n-        -> impl Iterator<Item=T> + ExactSizeIterator + 'a\n-    {\n+    pub fn drain<'a, R: RangeBounds<usize>>(\n+        &'a mut self, range: R) -> impl Iterator<Item=T> + 'a {\n         self.raw.drain(range)\n     }\n \n     #[inline]\n-    pub fn drain_enumerated<'a, R: RangeBounds<usize>>(&'a mut self, range: R)\n-        -> impl Iterator<Item=(I, T)> + ExactSizeIterator + 'a\n-    {\n+    pub fn drain_enumerated<'a, R: RangeBounds<usize>>(\n+        &'a mut self, range: R) -> impl Iterator<Item=(I, T)> + 'a {\n         self.raw.drain(range).enumerate().map(IntoIdx { _marker: PhantomData })\n     }\n "}, {"sha": "9e94317b87e5493789b563d5d9ad9dd0ffa0a85c", "filename": "src/librustc_mir/borrow_check/location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -53,7 +53,7 @@ impl LocationTable {\n         }\n     }\n \n-    crate fn all_points(&self) -> impl Iterator<Item = LocationIndex> + ExactSizeIterator {\n+    crate fn all_points(&self) -> impl Iterator<Item = LocationIndex> {\n         (0..self.num_points).map(LocationIndex::new)\n     }\n "}, {"sha": "75213d30982f9a833e936d28cec1537e32a1d611", "filename": "src/librustc_mir/borrow_check/nll/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmember_constraints.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -155,7 +155,7 @@ where\n {\n     crate fn all_indices(\n         &self,\n-    ) -> impl Iterator<Item = NllMemberConstraintIndex> + ExactSizeIterator {\n+    ) -> impl Iterator<Item = NllMemberConstraintIndex> {\n         self.constraints.indices()\n     }\n "}, {"sha": "85031d6210a4d2202bbc4dab2c2d66affd5753f6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -422,7 +422,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Returns an iterator over all the region indices.\n-    pub fn regions(&self) -> impl Iterator<Item = RegionVid> + ExactSizeIterator {\n+    pub fn regions(&self) -> impl Iterator<Item = RegionVid> {\n         self.definitions.indices()\n     }\n "}, {"sha": "b4414c514c5325d81d6e22af4f3a0cc24bb51e0b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -162,7 +162,7 @@ impl<N: Idx> LivenessValues<N> {\n     }\n \n     /// Iterate through each region that has a value in this set.\n-    crate fn rows(&self) -> impl Iterator<Item=N> + ExactSizeIterator {\n+    crate fn rows(&self) -> impl Iterator<Item=N> {\n         self.points.rows()\n     }\n "}, {"sha": "9ad15fca0017dc0c309d22a9a50365866b633e5c", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -107,9 +107,7 @@ impl<'tcx> DefiningTy<'tcx> {\n     /// not a closure or generator, there are no upvars, and hence it\n     /// will be an empty list. The order of types in this list will\n     /// match up with the upvar order in the HIR, typesystem, and MIR.\n-    pub fn upvar_tys(self, tcx: TyCtxt<'tcx>)\n-        -> impl Iterator<Item = Ty<'tcx>> + ExactSizeIterator + 'tcx\n-    {\n+    pub fn upvar_tys(self, tcx: TyCtxt<'tcx>) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         match self {\n             DefiningTy::Closure(def_id, substs) => Either::Left(\n                 substs.as_closure().upvar_tys(def_id, tcx)\n@@ -269,7 +267,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n \n     /// Returns an iterator over all the RegionVids corresponding to\n     /// universally quantified free regions.\n-    pub fn universal_regions(&self) -> impl Iterator<Item = RegionVid> + ExactSizeIterator {\n+    pub fn universal_regions(&self) -> impl Iterator<Item = RegionVid> {\n         (FIRST_GLOBAL_INDEX..self.num_universals).map(RegionVid::new)\n     }\n \n@@ -295,7 +293,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// Gets an iterator over all the early-bound regions that have names.\n     pub fn named_universal_regions<'s>(\n         &'s self,\n-    ) -> impl Iterator<Item = (ty::Region<'tcx>, ty::RegionVid)> + ExactSizeIterator + 's {\n+    ) -> impl Iterator<Item = (ty::Region<'tcx>, ty::RegionVid)> + 's {\n         self.indices.indices.iter().map(|(&r, &v)| (r, v))\n     }\n "}, {"sha": "37a9381271a8cd6bcee2459257ed8fcc53252ad3", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -396,7 +396,7 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n         PatStack::from_slice(&self.0[1..])\n     }\n \n-    fn iter(&self) -> impl Iterator<Item = &Pat<'tcx>> + ExactSizeIterator {\n+    fn iter(&self) -> impl Iterator<Item = &Pat<'tcx>> {\n         self.0.iter().map(|p| *p)\n     }\n "}, {"sha": "ac781819cc35e7e652a28dda3bc60f7ffb0a2515", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989bf84af339a0358b069e856edeee8cb72ff170/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=989bf84af339a0358b069e856edeee8cb72ff170", "patch": "@@ -723,9 +723,7 @@ impl FieldPlacement {\n \n     /// Gets source indices of the fields by increasing offsets.\n     #[inline]\n-    pub fn index_by_increasing_offset<'a>(&'a self)\n-        -> impl Iterator<Item=usize> + ExactSizeIterator + 'a\n-    {\n+    pub fn index_by_increasing_offset<'a>(&'a self) -> impl Iterator<Item=usize>+'a {\n         let mut inverse_small = [0u8; 64];\n         let mut inverse_big = vec![];\n         let use_small = self.count() <= inverse_small.len();"}]}