{"sha": "cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNjc0ODc0OWE0NTRlMDdhM2Y3ZjcyYzc5YmM2MmMyZjVkNmI5ZTQ=", "commit": {"author": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-02-06T15:44:57Z"}, "committer": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-02-06T15:44:57Z"}, "message": "Revert \"Fixed for loop problem, corrected all occurences that got linted\"\n\nThis reverts commit 6626295fbc747d04f1a8d14f19ee48c789b90e50.", "tree": {"sha": "d0fc0eae7f9601eed9c3735032f9ddef216b95fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0fc0eae7f9601eed9c3735032f9ddef216b95fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "html_url": "https://github.com/rust-lang/rust/commit/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/comments", "author": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6626295fbc747d04f1a8d14f19ee48c789b90e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/6626295fbc747d04f1a8d14f19ee48c789b90e50", "html_url": "https://github.com/rust-lang/rust/commit/6626295fbc747d04f1a8d14f19ee48c789b90e50"}], "stats": {"total": 297, "additions": 148, "deletions": 149}, "files": [{"sha": "aa431f0596cca9c12ac22d5a7f35d173a64e445c", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnConstants {\n                 &format!(\"`assert!(false, {})` should probably be replaced\", panic_message),\n                 None,\n                 &format!(\"use `panic!({})` or `unreachable!({})`\", panic_message, panic_message),\n-            );\n+            )\n         };\n \n         if let Some(debug_assert_span) = is_expn_of(e.span, \"debug_assert\") {"}, {"sha": "652d1fa16b6dedc30635d8d7b0bdb14d51cfb963", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -277,7 +277,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if is_relevant_item(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs);\n+            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n         }\n         match item.kind {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n@@ -353,13 +353,13 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if is_relevant_impl(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs);\n+            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         if is_relevant_trait(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs);\n+            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n         }\n     }\n }"}, {"sha": "a4ee54076ee98fc74b41f5fe67aa7d21e5dfcfed", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -115,9 +115,9 @@ impl<'tcx> LateLintPass<'tcx> for BitMask {\n         if let ExprKind::Binary(cmp, left, right) = &e.kind {\n             if cmp.node.is_comparison() {\n                 if let Some(cmp_opt) = fetch_int_literal(cx, right) {\n-                    check_compare(cx, left, cmp.node, cmp_opt, e.span);\n+                    check_compare(cx, left, cmp.node, cmp_opt, e.span)\n                 } else if let Some(cmp_val) = fetch_int_literal(cx, left) {\n-                    check_compare(cx, right, invert_cmp(cmp.node), cmp_val, e.span);\n+                    check_compare(cx, right, invert_cmp(cmp.node), cmp_val, e.span)\n                 }\n             }\n         }\n@@ -171,7 +171,7 @@ fn check_compare(cx: &LateContext<'_>, bit_op: &Expr<'_>, cmp_op: BinOpKind, cmp\n         }\n         fetch_int_literal(cx, right)\n             .or_else(|| fetch_int_literal(cx, left))\n-            .map_or((), |mask| check_bit_mask(cx, op.node, cmp_op, mask, cmp_value, span));\n+            .map_or((), |mask| check_bit_mask(cx, op.node, cmp_op, mask, cmp_value, span))\n     }\n }\n "}, {"sha": "90bb0bd555f274169d6144f7b5adb56385a422bb", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for NonminimalBool {\n         _: Span,\n         _: HirId,\n     ) {\n-        NonminimalBoolVisitor { cx }.visit_body(body);\n+        NonminimalBoolVisitor { cx }.visit_body(body)\n     }\n }\n \n@@ -184,7 +184,7 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                 Term(n) => {\n                     let terminal = self.terminals[n as usize];\n                     if let Some(str) = simplify_not(self.cx, terminal) {\n-                        self.output.push_str(&str);\n+                        self.output.push_str(&str)\n                     } else {\n                         self.output.push('!');\n                         let snip = snippet_opt(self.cx, terminal.span)?;\n@@ -452,7 +452,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n         }\n         match &e.kind {\n             ExprKind::Binary(binop, _, _) if binop.node == BinOpKind::Or || binop.node == BinOpKind::And => {\n-                self.bool_expr(e);\n+                self.bool_expr(e)\n             },\n             ExprKind::Unary(UnOp::UnNot, inner) => {\n                 if self.cx.typeck_results().node_types()[inner.hir_id].is_bool() {"}, {"sha": "93ccc76d0c9cdf829ed63b09cae07f21ad6c073d", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -92,7 +92,7 @@ declare_lint_pass!(CollapsibleIf => [COLLAPSIBLE_IF, COLLAPSIBLE_ELSE_IF]);\n impl EarlyLintPass for CollapsibleIf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n         if !expr.span.from_expansion() {\n-            check_if(cx, expr);\n+            check_if(cx, expr)\n         }\n     }\n }"}, {"sha": "90d31dece13113ae9d2c64711211df9b1c67553a", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -118,7 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for ComparisonChain {\n             \"`if` chain can be rewritten with `match`\",\n             None,\n             \"Consider rewriting the `if` chain to use `cmp` and `match`.\",\n-        );\n+        )\n     }\n }\n "}, {"sha": "6308f6e2e7e9d6d8c825620ad644386dad8b5b6f", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                                         vec![(left.span, lsnip), (right.span, rsnip)],\n                                     );\n                                 },\n-                            );\n+                            )\n                         } else if lcpy\n                             && !rcpy\n                             && implements_trait(cx, lty, trait_id, &[cx.typeck_results().expr_ty(right).into()])\n@@ -175,7 +175,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                                         Applicability::MaybeIncorrect, // FIXME #2597\n                                     );\n                                 },\n-                            );\n+                            )\n                         } else if !lcpy\n                             && rcpy\n                             && implements_trait(cx, cx.typeck_results().expr_ty(left), trait_id, &[rty.into()])\n@@ -194,7 +194,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                                         Applicability::MaybeIncorrect, // FIXME #2597\n                                     );\n                                 },\n-                            );\n+                            )\n                         }\n                     },\n                     // &foo == bar\n@@ -218,7 +218,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                                         Applicability::MaybeIncorrect, // FIXME #2597\n                                     );\n                                 },\n-                            );\n+                            )\n                         }\n                     },\n                     // foo == &bar\n@@ -236,7 +236,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                                     rsnip,\n                                     Applicability::MaybeIncorrect, // FIXME #2597\n                                 );\n-                            });\n+                            })\n                         }\n                     },\n                     _ => {},"}, {"sha": "1a722d39f730bb1cb293920cd610fbe9b8f329b7", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n         match expr.kind {\n             ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args, _) => {\n                 for arg in args {\n-                    check_closure(cx, arg);\n+                    check_closure(cx, arg)\n                 }\n             },\n             _ => (),"}, {"sha": "bc2b2904698c7f7b360f8c3707fc4f5b0cb15100", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n                 self.visit_expr(e);\n                 for arm in arms {\n                     if let Some(Guard::If(if_expr)) = arm.guard {\n-                        self.visit_expr(if_expr);\n+                        self.visit_expr(if_expr)\n                     }\n                     // make sure top level arm expressions aren't linted\n                     self.maybe_walk_expr(&*arm.body);"}, {"sha": "8795425461033d2da785dcab99add48a63a6b396", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -270,7 +270,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                     _,\n                 )\n                 | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _, _) => {\n-                    self.check_arg_number(cx, decl, span.with_hi(decl.output.span().hi()));\n+                    self.check_arg_number(cx, decl, span.with_hi(decl.output.span().hi()))\n                 },\n                 _ => {},\n             }\n@@ -434,7 +434,7 @@ impl<'tcx> Functions {\n                 TOO_MANY_LINES,\n                 span,\n                 &format!(\"this function has too many lines ({}/{})\", line_count, self.max_lines),\n-            );\n+            )\n         }\n     }\n \n@@ -707,7 +707,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                 }\n             },\n             Assign(ref target, ..) | AssignOp(_, ref target, _) | AddrOf(_, hir::Mutability::Mut, ref target) => {\n-                self.mutates_static |= is_mutated_static(self.cx, target);\n+                self.mutates_static |= is_mutated_static(self.cx, target)\n             },\n             _ => {},\n         }"}, {"sha": "7208e66ff7be15193646225bdd719176dd483ed4", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                                         ));\n                                     }\n                                 }\n-                            });\n+                            })\n                         },\n                     );\n                 }"}, {"sha": "129abd7d89749342e89da0f41d695ed2732fecbf", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for InfiniteIter {\n                 return;\n             },\n         };\n-        span_lint(cx, lint, expr.span, msg);\n+        span_lint(cx, lint, expr.span, msg)\n     }\n }\n "}, {"sha": "ea26c84cde16a93260f18c9f73c90e0d29c81991", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -85,8 +85,8 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n                             |diag| {\n                                 diag.span_note(*initial_span, \"first implementation here\");\n                             },\n-                        );\n-                    });\n+                        )\n+                    })\n                 }\n             }\n         }"}, {"sha": "e95caf6a35f900915920278e03abc2489bd4750d", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -256,9 +256,9 @@ fn check_cmp(cx: &LateContext<'_>, span: Span, method: &Expr<'_>, lit: &Expr<'_>\n             }\n         }\n \n-        check_len(cx, span, method_path.ident.name, args, &lit.node, op, compare_to);\n+        check_len(cx, span, method_path.ident.name, args, &lit.node, op, compare_to)\n     } else {\n-        check_empty_expr(cx, span, method, lit, op);\n+        check_empty_expr(cx, span, method, lit, op)\n     }\n }\n "}, {"sha": "6a5a77f8690a9be9b17c526c23e884cd1be6fa77", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         None,\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n-                    );\n+                    )\n                 } else if implements_drop {\n                     span_lint_and_help(\n                         cx,\n@@ -153,7 +153,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         None,\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n-                    );\n+                    )\n                 } else if is_must_use_ty(cx, cx.typeck_results().expr_ty(init)) {\n                     span_lint_and_help(\n                         cx,\n@@ -162,7 +162,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"non-binding let on an expression with `#[must_use]` type\",\n                         None,\n                         \"consider explicitly using expression value\"\n-                    );\n+                    )\n                 } else if is_must_use_func_call(cx, init) {\n                     span_lint_and_help(\n                         cx,\n@@ -171,7 +171,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"non-binding let on a result of a `#[must_use]` function\",\n                         None,\n                         \"consider explicitly using function result\"\n-                    );\n+                    )\n                 }\n             }\n         }"}, {"sha": "e84c8b4e5b3e0317e7006e84abd689f1dca56d4b", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -205,7 +205,7 @@ fn could_use_elision<'tcx>(\n         output_visitor.visit_ty(ty);\n     }\n     for lt in named_generics {\n-        input_visitor.visit_generic_param(lt);\n+        input_visitor.visit_generic_param(lt)\n     }\n \n     if input_visitor.abort() || output_visitor.abort() {\n@@ -460,7 +460,7 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n         // `'b` in `'a: 'b` is useless unless used elsewhere in\n         // a non-lifetime bound\n         if let GenericParamKind::Type { .. } = param.kind {\n-            walk_generic_param(self, param);\n+            walk_generic_param(self, param)\n         }\n     }\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "87a957a9bd241728bd01fbaedaf06f08ee5836a7", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -229,7 +229,7 @@ impl EarlyLintPass for LiteralDigitGrouping {\n         }\n \n         if let ExprKind::Lit(ref lit) = expr.kind {\n-            self.check_lit(cx, lit);\n+            self.check_lit(cx, lit)\n         }\n     }\n }\n@@ -292,7 +292,7 @@ impl LiteralDigitGrouping {\n                         }\n                     };\n                     if should_warn {\n-                        warning_type.display(num_lit.format(), cx, lit.span);\n+                        warning_type.display(num_lit.format(), cx, lit.span)\n                     }\n                 }\n             }\n@@ -422,7 +422,7 @@ impl EarlyLintPass for DecimalLiteralRepresentation {\n         }\n \n         if let ExprKind::Lit(ref lit) = expr.kind {\n-            self.check_lit(cx, lit);\n+            self.check_lit(cx, lit)\n         }\n     }\n }\n@@ -444,7 +444,7 @@ impl DecimalLiteralRepresentation {\n                 let hex = format!(\"{:#X}\", val);\n                 let num_lit = NumericLiteral::new(&hex, num_lit.suffix, false);\n                 let _ = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n-                    warning_type.display(num_lit.format(), cx, lit.span);\n+                    warning_type.display(num_lit.format(), cx, lit.span)\n                 });\n             }\n         }"}, {"sha": "663c2df23e22bd77ea0cfe1b3cdfbe0b3f3756ae", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -1426,7 +1426,7 @@ fn detect_same_item_push<'tcx>(\n                 \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n                 item_str, vec_str, item_str\n             ),\n-        );\n+        )\n     }\n \n     if !matches!(pat.kind, PatKind::Wild) {\n@@ -1714,7 +1714,7 @@ fn lint_iter_method(cx: &LateContext<'_>, args: &[Expr<'_>], arg: &Expr<'_>, met\n         \"to write this more concisely, try\",\n         format!(\"&{}{}\", muta, object),\n         applicability,\n-    );\n+    )\n }\n \n fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr: &Expr<'_>) {\n@@ -1753,7 +1753,7 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr:\n                         },\n                     );\n                     if TyS::same_type(receiver_ty_adjusted, ref_receiver_ty) {\n-                        lint_iter_method(cx, args, arg, method_name);\n+                        lint_iter_method(cx, args, arg, method_name)\n                     }\n                 }\n             } else if method_name == \"next\" && match_trait_method(cx, arg, &paths::ITERATOR) {\n@@ -2075,10 +2075,10 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n         if let ty::BorrowKind::MutBorrow = bk {\n             if let PlaceBase::Local(id) = cmt.place.base {\n                 if Some(id) == self.hir_id_low {\n-                    self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id));\n+                    self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id))\n                 }\n                 if Some(id) == self.hir_id_high {\n-                    self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id));\n+                    self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id))\n                 }\n             }\n         }\n@@ -2087,10 +2087,10 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n     fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId) {\n         if let PlaceBase::Local(id) = cmt.place.base {\n             if Some(id) == self.hir_id_low {\n-                self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id));\n+                self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id))\n             }\n             if Some(id) == self.hir_id_high {\n-                self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id));\n+                self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id))\n             }\n         }\n     }\n@@ -2543,10 +2543,10 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                         }\n                     },\n                     ExprKind::Assign(ref lhs, _, _) if lhs.hir_id == expr.hir_id => {\n-                        *state = IncrementVisitorVarState::DontWarn;\n+                        *state = IncrementVisitorVarState::DontWarn\n                     },\n                     ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mut => {\n-                        *state = IncrementVisitorVarState::DontWarn;\n+                        *state = IncrementVisitorVarState::DontWarn\n                     },\n                     _ => (),\n                 }\n@@ -2670,7 +2670,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                         }\n                     },\n                     ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mut => {\n-                        self.state = InitializeVisitorState::DontWarn;\n+                        self.state = InitializeVisitorState::DontWarn\n                     },\n                     _ => (),\n                 }\n@@ -2815,7 +2815,7 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n                 return;\n             }\n         }\n-        walk_pat(self, pat);\n+        walk_pat(self, pat)\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "bb52888883af5a90c1e366d7a688d8b2b77a186e", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -206,9 +206,9 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         let mut suggestions = vec![];\n         for ((root, span), path) in used {\n             if path.len() == 1 {\n-                suggestions.push((span, format!(\"{}::{}\", root, path[0])));\n+                suggestions.push((span, format!(\"{}::{}\", root, path[0])))\n             } else {\n-                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \"))));\n+                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \"))))\n             }\n         }\n \n@@ -225,7 +225,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                     \"remove the attribute and import the macro directly, try\",\n                     help,\n                     Applicability::MaybeIncorrect,\n-                );\n+                )\n             }\n         }\n     }"}, {"sha": "42a92104a4919f28d259e18e940f1b90a36aaff8", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n                                           kind_word,\n                                           snippet(cx, pattern.span, \"..\")))]\n                             .into_iter().chain(strippings.into_iter().map(|span| (span, \"<stripped>\".into()))),\n-                        );\n+                        )\n                     });\n                 }\n             }"}, {"sha": "1818836d5d5e836afa476aeb5da4564bf2278192", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -122,7 +122,7 @@ fn lint_needless_cloning(cx: &LateContext<'_>, root: Span, receiver: Span) {\n         \"remove the `map` call\",\n         String::new(),\n         Applicability::MachineApplicable,\n-    );\n+    )\n }\n \n fn lint(cx: &LateContext<'_>, replace: Span, root: Span, copied: bool) {\n@@ -139,7 +139,7 @@ fn lint(cx: &LateContext<'_>, replace: Span, root: Span, copied: bool) {\n                 snippet_with_applicability(cx, root, \"..\", &mut applicability)\n             ),\n             applicability,\n-        );\n+        )\n     } else {\n         span_lint_and_sugg(\n             cx,\n@@ -152,6 +152,6 @@ fn lint(cx: &LateContext<'_>, replace: Span, root: Span, copied: bool) {\n                 snippet_with_applicability(cx, root, \"..\", &mut applicability)\n             ),\n             applicability,\n-        );\n+        )\n     }\n }"}, {"sha": "ba7b9bd04248d3d2713fa597f421e80e2e00c0ea", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -1046,7 +1046,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 \"try this\",\n                 suggestion[0].clone(),\n                 Applicability::MaybeIncorrect,\n-            );\n+            )\n         };\n \n         span_lint_and_sugg(\n@@ -1057,7 +1057,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n             \"try this\",\n             suggestion.join(\" | \"),\n             Applicability::MaybeIncorrect,\n-        );\n+        )\n     }\n }\n \n@@ -1156,7 +1156,7 @@ fn check_match_as_ref(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], exp\n                     cast,\n                 ),\n                 applicability,\n-            );\n+            )\n         }\n     }\n }"}, {"sha": "540a1484a8558292a92ad7ea0222eabce8892d26", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -151,7 +151,7 @@ pub(crate) trait BindInsteadOfMap {\n                             .into_iter()\n                             .map(|(span1, span2)| (span1, snippet(cx, span2, \"_\").into())),\n                     ),\n-                );\n+                )\n             });\n         }\n         can_sugg"}, {"sha": "a17c5996293e93370c0ad6c2e0f4dd79f609ce28", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -1582,10 +1582,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"flatten\", \"map\"] => lint_map_flatten(cx, expr, arg_lists[1]),\n             [\"is_some\", \"find\"] => lint_search_is_some(cx, expr, \"find\", arg_lists[1], arg_lists[0], method_spans[1]),\n             [\"is_some\", \"position\"] => {\n-                lint_search_is_some(cx, expr, \"position\", arg_lists[1], arg_lists[0], method_spans[1]);\n+                lint_search_is_some(cx, expr, \"position\", arg_lists[1], arg_lists[0], method_spans[1])\n             },\n             [\"is_some\", \"rposition\"] => {\n-                lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1]);\n+                lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n             },\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n@@ -1601,17 +1601,17 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"count\", \"map\"] => lint_suspicious_map(cx, expr),\n             [\"assume_init\"] => lint_maybe_uninit(cx, &arg_lists[0][0], expr),\n             [\"unwrap_or\", arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\")] => {\n-                manual_saturating_arithmetic::lint(cx, expr, &arg_lists, &arith[\"checked_\".len()..]);\n+                manual_saturating_arithmetic::lint(cx, expr, &arg_lists, &arith[\"checked_\".len()..])\n             },\n             [\"add\" | \"offset\" | \"sub\" | \"wrapping_offset\" | \"wrapping_add\" | \"wrapping_sub\"] => {\n-                check_pointer_offset(cx, expr, arg_lists[0]);\n+                check_pointer_offset(cx, expr, arg_lists[0])\n             },\n             [\"is_file\", ..] => lint_filetype_is_file(cx, expr, arg_lists[0]),\n             [\"map\", \"as_ref\"] => {\n-                lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], false, self.msrv.as_ref());\n+                lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], false, self.msrv.as_ref())\n             },\n             [\"map\", \"as_mut\"] => {\n-                lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], true, self.msrv.as_ref());\n+                lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], true, self.msrv.as_ref())\n             },\n             [\"unwrap_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"unwrap_or\"),\n             [\"get_or_insert_with\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"get_or_insert\"),\n@@ -2446,16 +2446,16 @@ fn lint_unnecessary_fold(cx: &LateContext<'_>, expr: &hir::Expr<'_>, fold_args:\n     if let hir::ExprKind::Lit(ref lit) = fold_args[1].kind {\n         match lit.node {\n             ast::LitKind::Bool(false) => {\n-                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Or, \"any\", true);\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Or, \"any\", true)\n             },\n             ast::LitKind::Bool(true) => {\n-                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::And, \"all\", true);\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::And, \"all\", true)\n             },\n             ast::LitKind::Int(0, _) => {\n-                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Add, \"sum\", false);\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Add, \"sum\", false)\n             },\n             ast::LitKind::Int(1, _) => {\n-                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Mul, \"product\", false);\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Mul, \"product\", false)\n             },\n             _ => (),\n         }"}, {"sha": "3f0b765df1561dc9543984506ea475dca498299a", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n-                check_arguments(cx, arguments, method_type, &path.ident.as_str(), \"method\");\n+                check_arguments(cx, arguments, method_type, &path.ident.as_str(), \"method\")\n             },\n             _ => (),\n         }"}, {"sha": "76417aa7ed09d39682788314a61b2213c05ec0b9", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n             _ if !self.found => self.expr_span = Some(expr.span),\n             _ => return,\n         }\n-        walk_expr(self, expr);\n+        walk_expr(self, expr)\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "7687962bdd9bf1bfffe8cd772fd164421ed7a204", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -120,7 +120,7 @@ impl EarlyLintPass for NeedlessArbitrarySelfType {\n         match &p.ty.kind {\n             TyKind::Path(None, path) => {\n                 if let PatKind::Ident(BindingMode::ByValue(mutbl), _, _) = p.pat.kind {\n-                    check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl);\n+                    check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl)\n                 }\n             },\n             TyKind::Rptr(lifetime, mut_ty) => {"}, {"sha": "d795f12645794e2a2f6de2389e62737e8b8ae919", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n                 }\n \n                 if parent_node_is_if_expr(&e, &cx) {\n-                    snip = snip.blockify();\n+                    snip = snip.blockify()\n                 }\n \n                 span_lint_and_sugg(\n@@ -142,15 +142,15 @@ impl<'tcx> LateLintPass<'tcx> for BoolComparison {\n                         |h: Sugg<'_>| !h,\n                         \"equality checks against false can be replaced by a negation\",\n                     ));\n-                    check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal);\n+                    check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal)\n                 },\n                 BinOpKind::Ne => {\n                     let true_case = Some((\n                         |h: Sugg<'_>| !h,\n                         \"inequality checks against true can be replaced by a negation\",\n                     ));\n                     let false_case = Some((|h| h, \"inequality checks against false are unnecessary\"));\n-                    check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal);\n+                    check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal)\n                 },\n                 BinOpKind::Lt => check_comparison(\n                     cx,\n@@ -249,22 +249,22 @@ fn check_comparison<'a, 'tcx>(\n                             snippet_with_applicability(cx, expression_info.right_span, \"..\", &mut applicability)\n                         ),\n                         applicability,\n-                    );\n+                    )\n                 }\n             }\n \n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n                 (Bool(true), Other) => left_true.map_or((), |(h, m)| {\n-                    suggest_bool_comparison(cx, e, right_side, applicability, m, h);\n+                    suggest_bool_comparison(cx, e, right_side, applicability, m, h)\n                 }),\n                 (Other, Bool(true)) => right_true.map_or((), |(h, m)| {\n-                    suggest_bool_comparison(cx, e, left_side, applicability, m, h);\n+                    suggest_bool_comparison(cx, e, left_side, applicability, m, h)\n                 }),\n                 (Bool(false), Other) => left_false.map_or((), |(h, m)| {\n-                    suggest_bool_comparison(cx, e, right_side, applicability, m, h);\n+                    suggest_bool_comparison(cx, e, right_side, applicability, m, h)\n                 }),\n                 (Other, Bool(false)) => right_false.map_or((), |(h, m)| {\n-                    suggest_bool_comparison(cx, e, left_side, applicability, m, h);\n+                    suggest_bool_comparison(cx, e, left_side, applicability, m, h)\n                 }),\n                 (Other, Other) => no_literal.map_or((), |(h, m)| {\n                     let left_side = Sugg::hir_with_applicability(cx, left_side, \"..\", &mut applicability);\n@@ -277,7 +277,7 @@ fn check_comparison<'a, 'tcx>(\n                         \"try simplifying it as shown\",\n                         h(left_side, right_side).to_string(),\n                         applicability,\n-                    );\n+                    )\n                 }),\n                 _ => (),\n             }"}, {"sha": "4fb899125e8ad9f0612149d10b97ecf360bc778c", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n                         types produces code that is hard to read and refactor, please \\\n                         consider using the `partial_cmp` method instead, to make it \\\n                         clear that the two values could be incomparable\"\n-                    );\n+                    )\n                 }\n             }\n         }"}, {"sha": "73a99a3a2f870a3f7351ee1a3da2cc6828ad121b", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -125,7 +125,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `create` is called more than once\",\n                     );\n                 } else {\n-                    create = true;\n+                    create = true\n                 }\n                 create_arg = create_arg || (arg == Argument::True);\n             },\n@@ -138,7 +138,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `append` is called more than once\",\n                     );\n                 } else {\n-                    append = true;\n+                    append = true\n                 }\n                 append_arg = append_arg || (arg == Argument::True);\n             },\n@@ -151,7 +151,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `truncate` is called more than once\",\n                     );\n                 } else {\n-                    truncate = true;\n+                    truncate = true\n                 }\n                 truncate_arg = truncate_arg || (arg == Argument::True);\n             },\n@@ -164,7 +164,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `read` is called more than once\",\n                     );\n                 } else {\n-                    read = true;\n+                    read = true\n                 }\n                 read_arg = read_arg || (arg == Argument::True);\n             },\n@@ -177,7 +177,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `write` is called more than once\",\n                     );\n                 } else {\n-                    write = true;\n+                    write = true\n                 }\n                 write_arg = write_arg || (arg == Argument::True);\n             },"}, {"sha": "6c480d48c7561245a0ab0150e49edcf1a5803f1b", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -88,7 +88,7 @@ impl QuestionMark {\n                         \"replace it with\",\n                         replacement_str,\n                         applicability,\n-                    );\n+                    )\n                 }\n             }\n         }"}, {"sha": "f398b3fff25a328ec6b5d94c249a9e78de88fef5", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -56,7 +56,7 @@ impl<'ast> ast_visit::Visitor<'ast> for ReturnVisitor {\n             self.found_return = true;\n         }\n \n-        ast_visit::walk_expr(self, ex);\n+        ast_visit::walk_expr(self, ex)\n     }\n }\n "}, {"sha": "acd9047ace617459d3c7d5e54265d2b86573d14e", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n                                 Applicability::MachineApplicable,\n                             );\n                         },\n-                    );\n+                    )\n                 }\n             }\n         }"}, {"sha": "e438f92b136ac453745d0f35cbfb85f52cf024da", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n                 } else {\n                     RetReplacement::Empty\n                 };\n-                check_final_expr(cx, &body.value, Some(body.value.span), replacement);\n+                check_final_expr(cx, &body.value, Some(body.value.span), replacement)\n             },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n                 if let ExprKind::Block(ref block, _) = body.value.kind {\n@@ -239,7 +239,7 @@ fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Spa\n                 if let Some(snippet) = snippet_opt(cx, inner_span) {\n                     diag.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n                 }\n-            });\n+            })\n         },\n         None => match replacement {\n             RetReplacement::Empty => {"}, {"sha": "22cd10ced189ff149a7c87f421f126ef898ac1f3", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{in_macro, span_lint_and_sugg, sugg};\n+use crate::utils::{in_macro, span_lint_and_then, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Block, ExprKind};\n+use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -42,25 +42,31 @@ impl LateLintPass<'_> for SemicolonIfNothingReturned {\n             if let Some(expr) = block.expr;\n             let t_expr = cx.typeck_results().expr_ty(expr);\n             if t_expr.is_unit();\n-            if let Ok(snippet) = cx.tcx.sess.source_map().span_to_snippet(expr.span.source_callsite());\n-            if !snippet.ends_with('}');\n             then {\n-                // filter out the desugared `for` loop\n-                if let ExprKind::DropTemps(..) = &expr.kind {\n-                    return;\n+                match expr.kind {\n+                    ExprKind::Loop(..) | \n+                    ExprKind::Match(..) | \n+                    ExprKind::Block(..) | \n+                    ExprKind::If(..) if !in_macro(expr.span) => return,\n+                   _ => (),\n                 }\n \n                 let sugg = sugg::Sugg::hir(cx, &expr, \"..\");\n                 let suggestion = format!(\"{0};\", sugg);\n-                span_lint_and_sugg(\n+                span_lint_and_then(\n                     cx,\n                     SEMICOLON_IF_NOTHING_RETURNED,\n                     expr.span,\n-                    \"Consider adding a `;` to the last statement for consistent formatting\",\n-                    \"add a `;` here\",\n-                    suggestion,\n-                    Applicability::MaybeIncorrect,\n-                );\n+                    \"add `;` to terminate block\",\n+                    | diag | {\n+                        diag.span_suggestion(\n+                            expr.span,\n+                            \"add `;`\",\n+                            suggestion,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                )\n             }\n         }\n     }"}, {"sha": "d5b1767e945b9ea4a81b4b9a07d5ed70d56c0cb1", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -118,7 +118,7 @@ fn check_fn<'tcx>(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'_>, body: &'tcx Bo\n     let mut bindings = Vec::with_capacity(decl.inputs.len());\n     for arg in iter_input_pats(decl, body) {\n         if let PatKind::Binding(.., ident, _) = arg.pat.kind {\n-            bindings.push((ident.name, ident.span));\n+            bindings.push((ident.name, ident.span))\n         }\n     }\n     check_expr(cx, &body.value, &mut bindings);\n@@ -154,7 +154,7 @@ fn check_local<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>, bindings: &\n         ..\n     } = *local;\n     if let Some(ref t) = *ty {\n-        check_ty(cx, t, bindings);\n+        check_ty(cx, t, bindings)\n     }\n     if let Some(ref o) = *init {\n         check_expr(cx, o, bindings);\n@@ -330,7 +330,7 @@ fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut\n         // ExprKind::MethodCall\n         ExprKind::Array(v) | ExprKind::Tup(v) => {\n             for e in v {\n-                check_expr(cx, e, bindings);\n+                check_expr(cx, e, bindings)\n             }\n         },\n         ExprKind::If(ref cond, ref then, ref otherwise) => {\n@@ -371,11 +371,11 @@ fn check_ty<'tcx>(cx: &LateContext<'tcx>, ty: &'tcx Ty<'_>, bindings: &mut Vec<(\n             check_expr(cx, &cx.tcx.hir().body(anon_const.body).value, bindings);\n         },\n         TyKind::Ptr(MutTy { ty: ref mty, .. }) | TyKind::Rptr(_, MutTy { ty: ref mty, .. }) => {\n-            check_ty(cx, mty, bindings);\n+            check_ty(cx, mty, bindings)\n         },\n         TyKind::Tup(tup) => {\n             for t in tup {\n-                check_ty(cx, t, bindings);\n+                check_ty(cx, t, bindings)\n             }\n         },\n         TyKind::Typeof(ref anon_const) => check_expr(cx, &cx.tcx.hir().body(anon_const.body).value, bindings),"}, {"sha": "96f6881556cf380682e482615632a82aebc16243", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n     fn visit_block(&mut self, block: &'tcx Block<'_>) {\n         if self.initialization_found {\n             if let Some(ref s) = block.stmts.get(0) {\n-                self.visit_stmt(s);\n+                self.visit_stmt(s)\n             }\n \n             self.initialization_found = false;"}, {"sha": "cccd24ccf9401eaca5085f88601deb18f0dc9189", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -265,7 +265,7 @@ fn emit_suggestion(cx: &EarlyContext<'_>, span: Span, sugg: String, applicabilit\n         \"I think you meant\",\n         sugg,\n         applicability,\n-    );\n+    )\n }\n \n fn ident_swap_sugg(\n@@ -476,7 +476,7 @@ impl Add for IdentLocation {\n \n impl AddAssign for IdentLocation {\n     fn add_assign(&mut self, other: Self) {\n-        *self = *self + other;\n+        *self = *self + other\n     }\n }\n \n@@ -507,7 +507,7 @@ impl Add for IdentDifference {\n \n impl AddAssign for IdentDifference {\n     fn add_assign(&mut self, other: Self) {\n-        *self = *self + other;\n+        *self = *self + other\n     }\n }\n "}, {"sha": "d977cea4da50b6427653d07a59af1ade1686b46e", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -463,7 +463,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                                     Applicability::Unspecified,\n                                 );\n                             },\n-                        );\n+                        )\n                     },\n                     (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) => {\n                         if_chain! {\n@@ -519,7 +519,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                                                 Applicability::Unspecified,\n                                             );\n                                         },\n-                                    );\n+                                    )\n                                 }\n                             }\n                         }\n@@ -552,7 +552,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                                     Applicability::Unspecified,\n                                 );\n                             },\n-                        );\n+                        )\n                     },\n                     (ty::Int(_) | ty::Uint(_), ty::Float(_)) if !const_context => span_lint_and_then(\n                         cx,"}, {"sha": "1b0f1e309aa2c304a680c18cb43bc5f8ae9c7f7a", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -630,7 +630,7 @@ impl Types {\n             TyKind::Rptr(ref lt, ref mut_ty) => self.check_ty_rptr(cx, hir_ty, is_local, lt, mut_ty),\n             // recurse\n             TyKind::Slice(ref ty) | TyKind::Array(ref ty, _) | TyKind::Ptr(MutTy { ref ty, .. }) => {\n-                self.check_ty(cx, ty, is_local);\n+                self.check_ty(cx, ty, is_local)\n             },\n             TyKind::Tup(tys) => {\n                 for ty in tys {\n@@ -2436,7 +2436,7 @@ fn upcast_comparison_bounds_err<'tcx>(\n                 },\n                 Rel::Eq | Rel::Ne => unreachable!(),\n             } {\n-                err_upcast_comparison(cx, span, lhs, true);\n+                err_upcast_comparison(cx, span, lhs, true)\n             } else if match rel {\n                 Rel::Lt => {\n                     if invert {\n@@ -2454,7 +2454,7 @@ fn upcast_comparison_bounds_err<'tcx>(\n                 },\n                 Rel::Eq | Rel::Ne => unreachable!(),\n             } {\n-                err_upcast_comparison(cx, span, lhs, false);\n+                err_upcast_comparison(cx, span, lhs, false)\n             }\n         }\n     }"}, {"sha": "93d59cc7fcd178bf42c1fae30b8626206e29fa82", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -69,7 +69,7 @@ impl LateLintPass<'_> for Unicode {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n         if let ExprKind::Lit(ref lit) = expr.kind {\n             if let LitKind::Str(_, _) = lit.node {\n-                check_str(cx, lit.span, expr.hir_id);\n+                check_str(cx, lit.span, expr.hir_id)\n             }\n         }\n     }\n@@ -80,7 +80,7 @@ fn escape<T: Iterator<Item = char>>(s: T) -> String {\n     for c in s {\n         if c as u32 > 0x7F {\n             for d in c.escape_unicode() {\n-                result.push(d);\n+                result.push(d)\n             }\n         } else {\n             result.push(c);"}, {"sha": "5349c4f7eb8a78251c51bd412f3171afdb46dd1a", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -94,7 +94,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnusedSelfVisitor<'a, 'tcx> {\n             return;\n         }\n         if let Res::Local(hir_id) = &path.res {\n-            self.uses_self = self.self_hir_id == hir_id;\n+            self.uses_self = self.self_hir_id == hir_id\n         }\n         walk_path(self, path);\n     }"}, {"sha": "61e7031716a9d8098f1fd9288700c699b75d3309", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -69,7 +69,7 @@ fn check_ident(cx: &EarlyContext<'_>, ident: &Ident) {\n             \"consider making the acronym lowercase, except the initial letter\",\n             corrected,\n             Applicability::MaybeIncorrect,\n-        );\n+        )\n     }\n }\n "}, {"sha": "72d1ca7392913f77040ef91ef531418c14e91640", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SemanticUseSelfVisitor<'a, 'tcx> {\n             }\n         }\n \n-        walk_ty(self, hir_ty);\n+        walk_ty(self, hir_ty)\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "8d28421d70d707fdec87dcbf03a059f5d63ada2c", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -115,7 +115,7 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n     for attr in get_attr(sess, attrs, name) {\n         if let Some(ref value) = attr.value_str() {\n             if let Ok(value) = FromStr::from_str(&value.as_str()) {\n-                f(value);\n+                f(value)\n             } else {\n                 sess.span_err(attr.span, \"not a number\");\n             }"}, {"sha": "ca60d335262b3bda975431d92c0f7ecc987dde10", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -293,7 +293,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     LitKind::Str(ref text, _) => {\n                         let str_pat = self.next(\"s\");\n                         println!(\"    if let LitKind::Str(ref {}, _) = {}.node;\", str_pat, lit_pat);\n-                        println!(\"    if {}.as_str() == {:?}\", str_pat, &*text.as_str());\n+                        println!(\"    if {}.as_str() == {:?}\", str_pat, &*text.as_str())\n                     },\n                 }\n             },"}, {"sha": "269be217c2d875bf3db450a39940705666154459", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -211,7 +211,7 @@ pub fn multispan_sugg<I>(diag: &mut DiagnosticBuilder<'_>, help_msg: &str, sugg:\n where\n     I: IntoIterator<Item = (Span, String)>,\n {\n-    multispan_sugg_with_applicability(diag, help_msg, Applicability::Unspecified, sugg);\n+    multispan_sugg_with_applicability(diag, help_msg, Applicability::Unspecified, sugg)\n }\n \n pub fn multispan_sugg_with_applicability<I>("}, {"sha": "cf93ee0a7a5c61375503fc65438a372e60a270b4", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -464,7 +464,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n                     return None;\n                 }\n                 matched.push(&**args); // build up `matched` backwards\n-                current = &args[0]; // go to parent expression\n+                current = &args[0] // go to parent expression\n             } else {\n                 return None;\n             }"}, {"sha": "03678db575f0daceef3b58445d55d80c0172b6fd", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -656,7 +656,7 @@ impl<T: LintContext> DiagnosticBuilderExt<T> for rustc_errors::DiagnosticBuilder\n \n             if let Some(non_whitespace_offset) = non_whitespace_offset {\n                 remove_span = remove_span\n-                    .with_hi(remove_span.hi() + BytePos(non_whitespace_offset.try_into().expect(\"offset too large\")));\n+                    .with_hi(remove_span.hi() + BytePos(non_whitespace_offset.try_into().expect(\"offset too large\")))\n             }\n         }\n "}, {"sha": "fc0db7f64ec9550dbc0dc830c6fb5c833a2a6a24", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> MutVarsDelegate {\n                 //FIXME: This causes false negatives. We can't get the `NodeId` from\n                 //`Categorization::Upvar(_)`. So we search for any `Upvar`s in the\n                 //`while`-body, not just the ones in the condition.\n-                self.skip = true;\n+                self.skip = true\n             },\n             _ => {},\n         }\n@@ -72,12 +72,12 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n-            self.update(&cmt);\n+            self.update(&cmt)\n         }\n     }\n \n     fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n-        self.update(&cmt);\n+        self.update(&cmt)\n     }\n }\n "}, {"sha": "ebf69df31ca41e3702b00a1a91461b980ede5e72", "filename": "clippy_lints/src/utils/visitors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -87,7 +87,7 @@ where\n         }\n \n         fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'_>) {\n-            intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt);\n+            intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt)\n         }\n \n         fn visit_expr(&mut self, expr: &'hir hir::Expr<'_>) {"}, {"sha": "32574d9d6c9a821fcf0f5db89339ba81e4829908", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for VerboseFileReads {\n                 \"use of `File::read_to_string`\",\n                 None,\n                 \"consider using `fs::read_to_string` instead\",\n-            );\n+            )\n         }\n     }\n }"}, {"sha": "e40fdca6a99478608f116af92c6db07af8daeed4", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -298,7 +298,7 @@ impl EarlyLintPass for Write {\n                                 Applicability::MachineApplicable,\n                             );\n                         },\n-                    );\n+                    )\n                 }\n             }\n         } else if mac.path == sym!(writeln) {"}, {"sha": "2c07cc9df40d6a138cf1222b134888bd943f3255", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -46,10 +46,3 @@ fn foobar(x: i32) {\n         y = x + 1;\n     }\n }\n-\n-fn loop_test(x: i32) {\n-    let y: i32;\n-    for &ext in &[\"stdout\", \"stderr\", \"fixed\"] {\n-        println!(\"{}\", ext);\n-    }\n-}"}, {"sha": "6026320f4b47d9703528ab973f86f89352440af1", "filename": "tests/ui/semicolon_if_nothing_returned.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "patch": "@@ -1,4 +1,4 @@\n-error: Consider adding a `;` to the last statement for consistent formatting\n+error: add `;` to terminate block\n   --> $DIR/semicolon_if_nothing_returned.rs:8:5\n    |\n LL |     println!(\"Hello\")\n@@ -7,17 +7,17 @@ LL |     println!(\"Hello\")\n    = note: `-D clippy::semicolon-if-nothing-returned` implied by `-D warnings`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: Consider adding a `;` to the last statement for consistent formatting\n+error: add `;` to terminate block\n   --> $DIR/semicolon_if_nothing_returned.rs:12:5\n    |\n LL |     get_unit()\n-   |     ^^^^^^^^^^ help: add a `;` here: `get_unit();`\n+   |     ^^^^^^^^^^ help: add `;`: `get_unit();`\n \n-error: Consider adding a `;` to the last statement for consistent formatting\n+error: add `;` to terminate block\n   --> $DIR/semicolon_if_nothing_returned.rs:17:5\n    |\n LL |     y = x + 1\n-   |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n+   |     ^^^^^^^^^ help: add `;`: `y = x + 1;`\n \n error: aborting due to 3 previous errors\n "}]}