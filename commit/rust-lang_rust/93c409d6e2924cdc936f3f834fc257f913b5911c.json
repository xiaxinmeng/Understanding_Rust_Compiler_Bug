{"sha": "93c409d6e2924cdc936f3f834fc257f913b5911c", "node_id": "C_kwDOAAsO6NoAKDkzYzQwOWQ2ZTI5MjRjZGM5MzZmM2Y4MzRmYzI1N2Y5MTNiNTkxMWM", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-12-20T12:49:10Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-05T10:39:03Z"}, "message": "Add tracking issue number for local_key_cell_methods.", "tree": {"sha": "2caaa9ff9d705ea2d6b4170ebef04079c9583c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2caaa9ff9d705ea2d6b4170ebef04079c9583c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93c409d6e2924cdc936f3f834fc257f913b5911c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93c409d6e2924cdc936f3f834fc257f913b5911c", "html_url": "https://github.com/rust-lang/rust/commit/93c409d6e2924cdc936f3f834fc257f913b5911c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93c409d6e2924cdc936f3f834fc257f913b5911c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88a693c4f44b3e267fec108a5572f1e534d4e795", "url": "https://api.github.com/repos/rust-lang/rust/commits/88a693c4f44b3e267fec108a5572f1e534d4e795", "html_url": "https://github.com/rust-lang/rust/commit/88a693c4f44b3e267fec108a5572f1e534d4e795"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "3e94c3d277d59df7c99019ef82fedc731046402d", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/93c409d6e2924cdc936f3f834fc257f913b5911c/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c409d6e2924cdc936f3f834fc257f913b5911c/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=93c409d6e2924cdc936f3f834fc257f913b5911c", "patch": "@@ -482,7 +482,7 @@ impl<T: 'static> LocalKey<Cell<T>> {\n     ///\n     /// assert_eq!(X.get(), 123);\n     /// ```\n-    #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n+    #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn set(&'static self, value: T) {\n         self.initialize_with(Cell::new(value), |init, cell| {\n             if let Some(init) = init {\n@@ -513,7 +513,7 @@ impl<T: 'static> LocalKey<Cell<T>> {\n     ///\n     /// assert_eq!(X.get(), 1);\n     /// ```\n-    #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n+    #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn get(&'static self) -> T\n     where\n         T: Copy,\n@@ -544,7 +544,7 @@ impl<T: 'static> LocalKey<Cell<T>> {\n     /// assert_eq!(X.take(), Some(1));\n     /// assert_eq!(X.take(), None);\n     /// ```\n-    #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n+    #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn take(&'static self) -> T\n     where\n         T: Default,\n@@ -575,7 +575,7 @@ impl<T: 'static> LocalKey<Cell<T>> {\n     /// assert_eq!(X.replace(2), 1);\n     /// assert_eq!(X.replace(3), 2);\n     /// ```\n-    #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n+    #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn replace(&'static self, value: T) -> T {\n         self.with(|cell| cell.replace(value))\n     }\n@@ -606,7 +606,7 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///\n     /// X.with_borrow(|v| assert!(v.is_empty()));\n     /// ```\n-    #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n+    #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn with_borrow<F, R>(&'static self, f: F) -> R\n     where\n         F: FnOnce(&T) -> R,\n@@ -640,7 +640,7 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///\n     /// X.with_borrow(|v| assert_eq!(*v, vec![1]));\n     /// ```\n-    #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n+    #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn with_borrow_mut<F, R>(&'static self, f: F) -> R\n     where\n         F: FnOnce(&mut T) -> R,\n@@ -675,7 +675,7 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///\n     /// X.with_borrow(|v| assert_eq!(*v, vec![1, 2, 3]));\n     /// ```\n-    #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n+    #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn set(&'static self, value: T) {\n         self.initialize_with(RefCell::new(value), |init, cell| {\n             if let Some(init) = init {\n@@ -714,7 +714,7 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///\n     /// X.with_borrow(|v| assert!(v.is_empty()));\n     /// ```\n-    #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n+    #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn take(&'static self) -> T\n     where\n         T: Default,\n@@ -746,7 +746,7 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///\n     /// X.with_borrow(|v| assert_eq!(*v, vec![1, 2, 3]));\n     /// ```\n-    #[unstable(feature = \"local_key_cell_methods\", issue = \"none\")]\n+    #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn replace(&'static self, value: T) -> T {\n         self.with(|cell| cell.replace(value))\n     }"}]}