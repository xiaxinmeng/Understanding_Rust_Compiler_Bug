{"sha": "8c6067c24e181aa388619ca0f39100e5c9a1f509", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNjA2N2MyNGUxODFhYTM4ODYxOWNhMGYzOTEwMGU1YzlhMWY1MDk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-01-21T14:54:58Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-01-21T23:10:40Z"}, "message": "Store filestem in a pre-formatted form", "tree": {"sha": "24efb19563f244f8823e88362dda98f07c8159c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24efb19563f244f8823e88362dda98f07c8159c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c6067c24e181aa388619ca0f39100e5c9a1f509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6067c24e181aa388619ca0f39100e5c9a1f509", "html_url": "https://github.com/rust-lang/rust/commit/8c6067c24e181aa388619ca0f39100e5c9a1f509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c6067c24e181aa388619ca0f39100e5c9a1f509/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1bb7e16e0d0ad4e568df14eceedc5b0dd484214", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1bb7e16e0d0ad4e568df14eceedc5b0dd484214", "html_url": "https://github.com/rust-lang/rust/commit/d1bb7e16e0d0ad4e568df14eceedc5b0dd484214"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "81e8e47445859ba894e1587a198ce3dd8b75ea6d", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c6067c24e181aa388619ca0f39100e5c9a1f509/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6067c24e181aa388619ca0f39100e5c9a1f509/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=8c6067c24e181aa388619ca0f39100e5c9a1f509", "patch": "@@ -447,9 +447,8 @@ impl Input {\n #[derive(Clone, Hash)]\n pub struct OutputFilenames {\n     pub out_directory: PathBuf,\n-    out_filestem: String,\n+    filestem: String,\n     pub single_output_file: Option<PathBuf>,\n-    extra: String,\n     pub outputs: OutputTypes,\n }\n \n@@ -465,7 +464,12 @@ impl OutputFilenames {\n         extra: String,\n         outputs: OutputTypes,\n     ) -> Self {\n-        OutputFilenames { out_directory, out_filestem, single_output_file, extra, outputs }\n+        OutputFilenames {\n+            out_directory,\n+            single_output_file,\n+            outputs,\n+            filestem: format!(\"{}{}\", out_filestem, extra),\n+        }\n     }\n \n     pub fn path(&self, flavor: OutputType) -> PathBuf {\n@@ -487,7 +491,7 @@ impl OutputFilenames {\n     /// Like temp_path, but also supports things where there is no corresponding\n     /// OutputType, like noopt-bitcode or lto-bitcode.\n     pub fn temp_path_ext(&self, ext: &str, codegen_unit_name: Option<&str>) -> PathBuf {\n-        let base = self.out_directory.join(&self.filestem());\n+        let base = self.out_directory.join(&self.filestem);\n \n         let mut extension = String::new();\n \n@@ -505,16 +509,11 @@ impl OutputFilenames {\n             extension.push_str(ext);\n         }\n \n-        let path = base.with_extension(&extension[..]);\n-        path\n+        base.with_extension(extension)\n     }\n \n     pub fn with_extension(&self, extension: &str) -> PathBuf {\n-        self.out_directory.join(&self.filestem()).with_extension(extension)\n-    }\n-\n-    pub fn filestem(&self) -> String {\n-        format!(\"{}{}\", self.out_filestem, self.extra)\n+        self.out_directory.join(&self.filestem).with_extension(extension)\n     }\n }\n "}]}