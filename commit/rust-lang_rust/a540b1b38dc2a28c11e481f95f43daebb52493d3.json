{"sha": "a540b1b38dc2a28c11e481f95f43daebb52493d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NDBiMWIzOGRjMmEyOGMxMWU0ODFmOTVmNDNkYWViYjUyNDkzZDM=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-03-31T08:24:59Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-06-20T06:54:32Z"}, "message": "Add ClashingExternDecl test case.", "tree": {"sha": "a7612916832fd1ed318f4315361cc90a5f9a4d9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7612916832fd1ed318f4315361cc90a5f9a4d9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a540b1b38dc2a28c11e481f95f43daebb52493d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a540b1b38dc2a28c11e481f95f43daebb52493d3", "html_url": "https://github.com/rust-lang/rust/commit/a540b1b38dc2a28c11e481f95f43daebb52493d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a540b1b38dc2a28c11e481f95f43daebb52493d3/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033013cab3a861224fd55f494c8be1cb0349eb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/033013cab3a861224fd55f494c8be1cb0349eb49", "html_url": "https://github.com/rust-lang/rust/commit/033013cab3a861224fd55f494c8be1cb0349eb49"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "b2caebc6fee0e7c697f68e2897611c194fd693e5", "filename": "src/test/ui/lint/auxiliary/external_extern_fn.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a540b1b38dc2a28c11e481f95f43daebb52493d3/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fexternal_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a540b1b38dc2a28c11e481f95f43daebb52493d3/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fexternal_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fexternal_extern_fn.rs?ref=a540b1b38dc2a28c11e481f95f43daebb52493d3", "patch": "@@ -0,0 +1,3 @@\n+extern {\n+    pub fn extern_fn(x: u8);\n+}"}, {"sha": "32f3a78f4e98001f420b01b274594dfae6386d2d", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/a540b1b38dc2a28c11e481f95f43daebb52493d3/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a540b1b38dc2a28c11e481f95f43daebb52493d3/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=a540b1b38dc2a28c11e481f95f43daebb52493d3", "patch": "@@ -0,0 +1,159 @@\n+// check-pass\n+// aux-build:external_extern_fn.rs\n+#![crate_type = \"lib\"]\n+#![warn(clashing_extern_decl)]\n+\n+extern crate external_extern_fn;\n+\n+extern {\n+    fn clash(x: u8);\n+    fn no_clash(x: u8);\n+}\n+\n+fn redeclared_different_signature() {\n+    extern {\n+        fn clash(x: u64); //~ WARN `clash` redeclared with a different signature\n+    }\n+\n+    unsafe {\n+        clash(123);\n+        no_clash(123);\n+    }\n+}\n+\n+fn redeclared_same_signature() {\n+    extern {\n+        fn no_clash(x: u8);\n+    }\n+    unsafe {\n+        no_clash(123);\n+    }\n+}\n+\n+extern {\n+    fn extern_fn(x: u64);\n+}\n+\n+fn extern_clash() {\n+    extern {\n+        fn extern_fn(x: u32); //~ WARN `extern_fn` redeclared with a different signature\n+    }\n+    unsafe {\n+        extern_fn(123);\n+    }\n+}\n+\n+fn extern_no_clash() {\n+    unsafe {\n+        external_extern_fn::extern_fn(123);\n+        crate::extern_fn(123);\n+    }\n+}\n+extern {\n+    fn some_other_new_name(x: i16);\n+\n+    #[link_name = \"extern_link_name\"]\n+    fn some_new_name(x: i16);\n+\n+    #[link_name = \"link_name_same\"]\n+    fn both_names_different(x: i16);\n+}\n+\n+fn link_name_clash() {\n+    extern {\n+        fn extern_link_name(x: u32);\n+        //~^ WARN `extern_link_name` redeclared with a different signature\n+\n+        #[link_name = \"some_other_new_name\"]\n+        //~^ WARN `some_other_extern_link_name` redeclares `some_other_new_name` with a different\n+        fn some_other_extern_link_name(x: u32);\n+\n+        #[link_name = \"link_name_same\"]\n+        //~^ WARN `other_both_names_different` redeclares `link_name_same` with a different\n+        fn other_both_names_different(x: u32);\n+    }\n+}\n+\n+mod a {\n+    extern {\n+        fn different_mod(x: u8);\n+    }\n+}\n+mod b {\n+    extern {\n+        fn different_mod(x: u64); //~ WARN `different_mod` redeclared with a different signature\n+    }\n+}\n+\n+extern {\n+    fn variadic_decl(x: u8, ...);\n+}\n+\n+fn variadic_clash() {\n+    extern {\n+        fn variadic_decl(x: u8); //~ WARN `variadic_decl` redeclared with a different signature\n+    }\n+}\n+\n+#[no_mangle]\n+fn no_mangle_name(x: u8) { }\n+\n+extern {\n+    #[link_name = \"unique_link_name\"]\n+    fn link_name_specified(x: u8);\n+}\n+\n+fn tricky_no_clash() {\n+    extern {\n+        // Shouldn't warn, because the declaration above actually declares a different symbol (and\n+        // Rust's name resolution rules around shadowing will handle this gracefully).\n+        fn link_name_specified() -> u32;\n+\n+        // The case of a no_mangle name colliding with an extern decl (see #28179) is related but\n+        // shouldn't be reported by ClashingExternDecl, because this is an example of unmangled\n+        // name clash causing bad behaviour in functions with a defined body.\n+        fn no_mangle_name() -> u32;\n+    }\n+}\n+\n+mod banana {\n+    mod one {\n+        #[repr(C)] struct Banana { weight: u32, length: u16 }\n+        extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n+    }\n+\n+    mod two {\n+        #[repr(C)] struct Banana { weight: u32, length: u16 } // note: distinct type\n+        // This should not trigger the lint because two::Banana is structurally equivalent to\n+        // one::Banana.\n+        extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n+    }\n+\n+    mod three {\n+        // This _should_ trigger the lint, because repr(packed) should generate a struct that has a\n+        // different layout.\n+        #[repr(packed)] struct Banana { weight: u32, length: u16 }\n+        #[allow(improper_ctypes)]\n+        extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n+        //~^ WARN `weigh_banana` redeclared with a different signature\n+    }\n+}\n+\n+mod sameish_members {\n+    mod a {\n+        #[repr(C)]\n+        struct Point { x: i16, y: i16 }\n+\n+        extern \"C\" { fn draw_point(p: Point); }\n+    }\n+    mod b {\n+        #[repr(C)]\n+        struct Point { coordinates: [i16; 2] }\n+\n+        // It's possible we are overconservative for this case, as accessing the elements of the\n+        // coordinates array might end up correctly accessing `.x` and `.y`. However, this may not\n+        // always be the case, for every architecture and situation. This is also a really odd\n+        // thing to do anyway.\n+        extern \"C\" { fn draw_point(p: Point); } //~ WARN `draw_point` redeclared with a different\n+    }\n+}"}]}