{"sha": "22953f52faa3afb24c7024c0373a4895d9c5859b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyOTUzZjUyZmFhM2FmYjI0YzcwMjRjMDM3M2E0ODk1ZDljNTg1OWI=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-05-24T01:50:33Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-27T02:42:33Z"}, "message": "Added filter_map.", "tree": {"sha": "377892aeca9087b4f445744472c4698f10c085b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377892aeca9087b4f445744472c4698f10c085b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22953f52faa3afb24c7024c0373a4895d9c5859b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22953f52faa3afb24c7024c0373a4895d9c5859b", "html_url": "https://github.com/rust-lang/rust/commit/22953f52faa3afb24c7024c0373a4895d9c5859b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22953f52faa3afb24c7024c0373a4895d9c5859b/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2bb98001e5946c35952f3e1cd0b8cfbe3915cc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2bb98001e5946c35952f3e1cd0b8cfbe3915cc1", "html_url": "https://github.com/rust-lang/rust/commit/e2bb98001e5946c35952f3e1cd0b8cfbe3915cc1"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "801894bd0cdd73b384bbe9ad94fb8d54c1e3f5c2", "filename": "src/lib/vec.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22953f52faa3afb24c7024c0373a4895d9c5859b/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22953f52faa3afb24c7024c0373a4895d9c5859b/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=22953f52faa3afb24c7024c0373a4895d9c5859b", "patch": "@@ -220,12 +220,24 @@ fn grow_init_fn_set[T](&array[T] v, uint index, fn()->T init_fn, &T val) {\n     v.(index) = val;\n }\n \n-fn map[T, U](&option::operator[T,U] f, &array[T] v) -> vec[U] {\n-    let vec[U] u = alloc[U](len[T](v));\n+\n+fn map[T, U](&fn(&T) -> U f, &array[T] v) -> vec[U] {\n+    let vec[U] res = alloc[U](len[T](v));\n     for (T ve in v) {\n-        u += [f(ve)];\n+        res += [f(ve)];\n     }\n-    ret u;\n+    ret res;\n+}\n+\n+fn filter_map[T, U](&fn(&T) -> option::t[U] f, &array[T] v) -> vec[U] {\n+    let vec[U] res = []; //TODO does this work these days?\n+    for(T ve in v) {\n+        alt(f(ve)) {\n+            case (some[U](?elt)) { res += [elt]; }\n+            case (none[U]) {}\n+        }\n+    }\n+    ret res;\n }\n \n fn map2[T,U,V](&operator2[T,U,V] f, &array[T] v0, &array[U] v1) -> vec[V] {"}, {"sha": "fb0b0d9a0a94ccb24c80706585f06f17c514c5f8", "filename": "src/test/run-pass/lib-vec.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/22953f52faa3afb24c7024c0373a4895d9c5859b/src%2Ftest%2Frun-pass%2Flib-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22953f52faa3afb24c7024c0373a4895d9c5859b/src%2Ftest%2Frun-pass%2Flib-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-vec.rs?ref=22953f52faa3afb24c7024c0373a4895d9c5859b", "patch": "@@ -56,11 +56,35 @@ fn test_map2() {\n   }\n }\n \n+fn test_filter_map() {\n+  fn halve(&int i) -> std::option::t[int] { \n+    if(i % 2 == 0) { \n+      ret std::option::some[int](i / 2);\n+    } else {\n+      ret std::option::none[int];\n+    }\n+  }\n+  fn halve_for_sure(&int i) -> int { ret i/2; }\n+  \n+  let vec[int] all_even = [0, 2, 8, 6];\n+  let vec[int] all_odd1 = [1, 7, 3];\n+  let vec[int] all_odd2 = [];\n+  let vec[int] mix = [9, 2, 6, 7, 1, 0, 0, 3];\n+  let vec[int] mix_dest = [1, 3, 0, 0];\n+  \n+  assert(std::vec::filter_map(halve, all_even) ==\n+         std::vec::map(halve_for_sure, all_even));\n+  assert(std::vec::filter_map(halve, all_odd1) == std::vec::empty[int]());\n+  assert(std::vec::filter_map(halve, all_odd2) == std::vec::empty[int]());\n+  assert(std::vec::filter_map(halve, mix) == mix_dest);\n+}\n+\n fn main() {\n   test_init_elt();\n   test_init_fn();\n   test_slice();\n   test_map();\n   test_map2();\n+  test_filter_map();\n }\n "}]}