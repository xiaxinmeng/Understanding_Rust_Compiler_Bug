{"sha": "f6cb96ef07ac6197dac5be16adbe2b7950c82d99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2Y2I5NmVmMDdhYzYxOTdkYWM1YmUxNmFkYmUyYjc5NTBjODJkOTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-01-21T21:34:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-01-21T21:34:44Z"}, "message": "Make exhaustive_enums only warn on exported items", "tree": {"sha": "f7e4eb526b94fa190a0c14d4dd4eee0d9d1ad352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7e4eb526b94fa190a0c14d4dd4eee0d9d1ad352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6cb96ef07ac6197dac5be16adbe2b7950c82d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cb96ef07ac6197dac5be16adbe2b7950c82d99", "html_url": "https://github.com/rust-lang/rust/commit/f6cb96ef07ac6197dac5be16adbe2b7950c82d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6cb96ef07ac6197dac5be16adbe2b7950c82d99/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc93188805ac20fbccd7bd616a6b114680e9303a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc93188805ac20fbccd7bd616a6b114680e9303a", "html_url": "https://github.com/rust-lang/rust/commit/dc93188805ac20fbccd7bd616a6b114680e9303a"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "2e1c0728d2c3b9e789442cfb50193e7d2e8d05f5", "filename": "clippy_lints/src/exhaustive_enums.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb96ef07ac6197dac5be16adbe2b7950c82d99/clippy_lints%2Fsrc%2Fexhaustive_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb96ef07ac6197dac5be16adbe2b7950c82d99/clippy_lints%2Fsrc%2Fexhaustive_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_enums.rs?ref=f6cb96ef07ac6197dac5be16adbe2b7950c82d99", "patch": "@@ -7,7 +7,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns on any `enum`s that are not tagged `#[non_exhaustive]`\n+    /// **What it does:** Warns on any exported `enum`s that are not tagged `#[non_exhaustive]`\n     ///\n     /// **Why is this bad?** Exhaustive enums are typically fine, but a project which does\n     /// not wish to make a stability commitment around enums may wish to disable them by default.\n@@ -40,6 +40,7 @@ impl LateLintPass<'_> for ExhaustiveEnums {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if_chain! {\n             if let ItemKind::Enum(..) = item.kind;\n+            if cx.access_levels.is_exported(item.hir_id);\n             if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n                 if let Some(snippet) = snippet_opt(cx, item.span) {"}, {"sha": "71c4a251e3b38e99e044f5835ec67638a665453f", "filename": "tests/ui/exhaustive_enums.fixed", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb96ef07ac6197dac5be16adbe2b7950c82d99/tests%2Fui%2Fexhaustive_enums.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb96ef07ac6197dac5be16adbe2b7950c82d99/tests%2Fui%2Fexhaustive_enums.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_enums.fixed?ref=f6cb96ef07ac6197dac5be16adbe2b7950c82d99", "patch": "@@ -8,15 +8,33 @@ fn main() {\n }\n \n #[non_exhaustive]\n-enum Exhaustive {\n+pub enum Exhaustive {\n     Foo,\n     Bar,\n     Baz,\n     Quux(String),\n }\n \n+// no warning, already non_exhaustive\n #[non_exhaustive]\n-enum NonExhaustive {\n+pub enum NonExhaustive {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Quux(String),\n+}\n+\n+// no warning, private\n+enum ExhaustivePrivate {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Quux(String),\n+}\n+\n+// no warning, private\n+#[non_exhaustive]\n+enum NonExhaustivePrivate {\n     Foo,\n     Bar,\n     Baz,"}, {"sha": "45af6851dd1a81b492df9c04710c8638bedfce9c", "filename": "tests/ui/exhaustive_enums.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb96ef07ac6197dac5be16adbe2b7950c82d99/tests%2Fui%2Fexhaustive_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb96ef07ac6197dac5be16adbe2b7950c82d99/tests%2Fui%2Fexhaustive_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_enums.rs?ref=f6cb96ef07ac6197dac5be16adbe2b7950c82d99", "patch": "@@ -7,15 +7,33 @@ fn main() {\n     // nop\n }\n \n-enum Exhaustive {\n+pub enum Exhaustive {\n     Foo,\n     Bar,\n     Baz,\n     Quux(String),\n }\n \n+// no warning, already non_exhaustive\n #[non_exhaustive]\n-enum NonExhaustive {\n+pub enum NonExhaustive {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Quux(String),\n+}\n+\n+// no warning, private\n+enum ExhaustivePrivate {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Quux(String),\n+}\n+\n+// no warning, private\n+#[non_exhaustive]\n+enum NonExhaustivePrivate {\n     Foo,\n     Bar,\n     Baz,"}, {"sha": "280c40b00aa31e69ffe26ab3d0c1067be7939533", "filename": "tests/ui/exhaustive_enums.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb96ef07ac6197dac5be16adbe2b7950c82d99/tests%2Fui%2Fexhaustive_enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb96ef07ac6197dac5be16adbe2b7950c82d99/tests%2Fui%2Fexhaustive_enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_enums.stderr?ref=f6cb96ef07ac6197dac5be16adbe2b7950c82d99", "patch": "@@ -1,7 +1,7 @@\n error: enums should not be exhaustive\n   --> $DIR/exhaustive_enums.rs:10:1\n    |\n-LL | / enum Exhaustive {\n+LL | / pub enum Exhaustive {\n LL | |     Foo,\n LL | |     Bar,\n LL | |     Baz,\n@@ -17,7 +17,7 @@ LL | #![deny(clippy::exhaustive_enums)]\n help: try adding #[non_exhaustive]\n    |\n LL | #[non_exhaustive]\n-LL | enum Exhaustive {\n+LL | pub enum Exhaustive {\n LL |     Foo,\n LL |     Bar,\n LL |     Baz,"}]}