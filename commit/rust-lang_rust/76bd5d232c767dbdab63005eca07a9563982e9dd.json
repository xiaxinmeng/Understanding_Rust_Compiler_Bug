{"sha": "76bd5d232c767dbdab63005eca07a9563982e9dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YmQ1ZDIzMmM3NjdkYmRhYjYzMDA1ZWNhMDdhOTU2Mzk4MmU5ZGQ=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-12T23:01:32Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-13T19:10:40Z"}, "message": "Refactor diagnostic item methods", "tree": {"sha": "7c429833696b8844dcea2cfcd60c8ab54732362b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c429833696b8844dcea2cfcd60c8ab54732362b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76bd5d232c767dbdab63005eca07a9563982e9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76bd5d232c767dbdab63005eca07a9563982e9dd", "html_url": "https://github.com/rust-lang/rust/commit/76bd5d232c767dbdab63005eca07a9563982e9dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76bd5d232c767dbdab63005eca07a9563982e9dd/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9728b80ce38a1ab94d90d125726d5503e6ab3bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9728b80ce38a1ab94d90d125726d5503e6ab3bb", "html_url": "https://github.com/rust-lang/rust/commit/e9728b80ce38a1ab94d90d125726d5503e6ab3bb"}], "stats": {"total": 98, "additions": 53, "deletions": 45}, "files": [{"sha": "ec60bffe95555fe0e256c47383519aa76b91f32f", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=76bd5d232c767dbdab63005eca07a9563982e9dd", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n-use clippy_utils::{in_macro, match_def_path, meets_msrv, paths};\n-use clippy_utils::{is_diagnostic_assoc_item, is_lang_ctor};\n+use clippy_utils::{in_macro, is_diag_trait_item, is_lang_ctor, match_def_path, meets_msrv, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n@@ -211,17 +210,17 @@ fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<\n         sym::BinaryHeap,\n     ];\n \n-    if std_types_symbols\n-        .iter()\n-        .any(|symbol| is_diagnostic_assoc_item(cx, def_id, *symbol))\n-    {\n-        if let QPath::TypeRelative(_, method) = path {\n-            if method.ident.name == sym::new {\n-                return true;\n+    if let QPath::TypeRelative(_, method) = path {\n+        if method.ident.name == sym::new {\n+            if let Some(impl_did) = cx.tcx.impl_of_method(def_id) {\n+                if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n+                    return std_types_symbols\n+                        .iter()\n+                        .any(|&symbol| cx.tcx.is_diagnostic_item(symbol, adt.did));\n+                }\n             }\n         }\n     }\n-\n     false\n }\n \n@@ -231,7 +230,7 @@ fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<\n         if !in_external_macro(cx.tcx.sess, expr_span);\n         if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n         if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-        if is_diagnostic_assoc_item(cx, repl_def_id, sym::Default)\n+        if is_diag_trait_item(cx, repl_def_id, sym::Default)\n             || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n \n         then {"}, {"sha": "81c42de145f6c704f7333c6a6618e8c73427e3c6", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=76bd5d232c767dbdab63005eca07a9563982e9dd", "patch": "@@ -1,28 +1,36 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::{is_diag_item_method, is_diag_trait_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::ExprKind;\n use rustc_lint::LateContext;\n use rustc_middle::ty::TyS;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::{sym, Span};\n \n use super::IMPLICIT_CLONE;\n-use clippy_utils::is_diagnostic_assoc_item;\n \n-pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, trait_diagnostic: Symbol) {\n+pub fn check(cx: &LateContext<'_>, method_name: &str, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, span: Span) {\n     if_chain! {\n-        if let ExprKind::MethodCall(method_path, _, [arg], _) = &expr.kind;\n+        if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+        if match method_name {\n+            \"to_os_string\" => is_diag_item_method(cx, method_def_id, sym::OsStr),\n+            \"to_owned\" => is_diag_trait_item(cx, method_def_id, sym::ToOwned),\n+            \"to_path_buf\" => is_diag_item_method(cx, method_def_id, sym::Path),\n+            \"to_vec\" => cx.tcx.impl_of_method(method_def_id)\n+                .map(|impl_did| Some(impl_did) == cx.tcx.lang_items().slice_alloc_impl())\n+                == Some(true),\n+            _ => false,\n+        };\n         let return_type = cx.typeck_results().expr_ty(expr);\n-        let input_type = cx.typeck_results().expr_ty(arg).peel_refs();\n-        if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+        let input_type = cx.typeck_results().expr_ty(recv).peel_refs();\n         if let Some(ty_name) = input_type.ty_adt_def().map(|adt_def| cx.tcx.item_name(adt_def.did));\n         if TyS::same_type(return_type, input_type);\n-        if is_diagnostic_assoc_item(cx, expr_def_id, trait_diagnostic);\n         then {\n             span_lint_and_sugg(\n-                cx,IMPLICIT_CLONE,method_path.ident.span,\n-                &format!(\"implicitly cloning a `{}` by calling `{}` on its dereferenced type\", ty_name, method_path.ident.name),\n+                cx,\n+                IMPLICIT_CLONE,\n+                span,\n+                &format!(\"implicitly cloning a `{}` by calling `{}` on its dereferenced type\", ty_name, method_name),\n                 \"consider using\",\n                 \"clone\".to_string(),\n                 Applicability::MachineApplicable"}, {"sha": "b2faaef0786d8440f29d4000676005c3fed0f777", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=76bd5d232c767dbdab63005eca07a9563982e9dd", "patch": "@@ -1987,10 +1987,9 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 }\n             },\n             (\"step_by\", [arg]) => iterator_step_by_zero::check(cx, expr, arg),\n-            (\"to_os_string\", []) => implicit_clone::check(cx, expr, sym::OsStr),\n-            (\"to_owned\", []) => implicit_clone::check(cx, expr, sym::ToOwned),\n-            (\"to_path_buf\", []) => implicit_clone::check(cx, expr, sym::Path),\n-            (\"to_vec\", []) => implicit_clone::check(cx, expr, sym::slice),\n+            (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n+                implicit_clone::check(cx, name, expr, recv, span);\n+            },\n             (\"unwrap\", []) => match method_call!(recv) {\n                 Some((\"get\", [recv, get_arg], _)) => get_unwrap::check(cx, expr, recv, get_arg, false),\n                 Some((\"get_mut\", [recv, get_arg], _)) => get_unwrap::check(cx, expr, recv, get_arg, true),"}, {"sha": "d156c1d5bf47fac784021160f5956ccd02233796", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=76bd5d232c767dbdab63005eca07a9563982e9dd", "patch": "@@ -20,7 +20,7 @@ use rustc_span::symbol::sym;\n use crate::consts::{constant, Constant};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::{\n-    get_item_name, get_parent_expr, higher, in_constant, is_diagnostic_assoc_item, is_integer_const, iter_input_pats,\n+    get_item_name, get_parent_expr, higher, in_constant, is_diag_trait_item, is_integer_const, iter_input_pats,\n     last_path_segment, match_qpath, unsext, SpanlessEq,\n };\n \n@@ -555,8 +555,8 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n         ExprKind::MethodCall(.., args, _) if args.len() == 1 => {\n             if_chain!(\n                 if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-                if is_diagnostic_assoc_item(cx, expr_def_id, sym::ToString)\n-                    || is_diagnostic_assoc_item(cx, expr_def_id, sym::ToOwned);\n+                if is_diag_trait_item(cx, expr_def_id, sym::ToString)\n+                    || is_diag_trait_item(cx, expr_def_id, sym::ToOwned);\n                 then {\n                     (cx.typeck_results().expr_ty(&args[0]), snippet(cx, args[0].span, \"..\"))\n                 } else {"}, {"sha": "4fb297ac6c6990771cc9ef935f76b2225901ed60", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=76bd5d232c767dbdab63005eca07a9563982e9dd", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{is_diagnostic_assoc_item, match_def_path, path_to_local_id, paths};\n+use clippy_utils::{is_diag_trait_item, match_def_path, path_to_local_id, paths};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -95,7 +95,7 @@ impl LateLintPass<'_> for ToStringInDisplay {\n             if let ExprKind::MethodCall(path, _, args, _) = expr.kind;\n             if path.ident.name == sym!(to_string);\n             if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-            if is_diagnostic_assoc_item(cx, expr_def_id, sym::ToString);\n+            if is_diag_trait_item(cx, expr_def_id, sym::ToString);\n             if path_to_local_id(&args[0], self_hir_id);\n             then {\n                 span_lint("}, {"sha": "ec140463a8a7e070da64f65972185eee69b26aac", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bd5d232c767dbdab63005eca07a9563982e9dd/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=76bd5d232c767dbdab63005eca07a9563982e9dd", "patch": "@@ -293,27 +293,29 @@ pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str])\n     trt_id.map_or(false, |trt_id| match_def_path(cx, trt_id, path))\n }\n \n-/// Checks if the method call given in `def_id` belongs to a trait or other container with a given\n-/// diagnostic item\n-pub fn is_diagnostic_assoc_item(cx: &LateContext<'_>, def_id: DefId, diag_item: Symbol) -> bool {\n-    cx.tcx\n-        .opt_associated_item(def_id)\n-        .and_then(|associated_item| match associated_item.container {\n-            rustc_ty::TraitContainer(assoc_def_id) => Some(assoc_def_id),\n-            rustc_ty::ImplContainer(assoc_def_id) => match cx.tcx.type_of(assoc_def_id).kind() {\n-                rustc_ty::Adt(adt, _) => Some(adt.did),\n-                rustc_ty::Slice(_) => cx.tcx.get_diagnostic_item(sym::slice), // this isn't perfect but it works\n-                _ => None,\n-            },\n-        })\n-        .map_or(false, |assoc_def_id| cx.tcx.is_diagnostic_item(diag_item, assoc_def_id))\n+/// Checks if a method is defined in an impl of a diagnostic item\n+pub fn is_diag_item_method(cx: &LateContext<'_>, def_id: DefId, diag_item: Symbol) -> bool {\n+    if let Some(impl_did) = cx.tcx.impl_of_method(def_id) {\n+        if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n+            return cx.tcx.is_diagnostic_item(diag_item, adt.did);\n+        }\n+    }\n+    false\n+}\n+\n+/// Checks if a method is in a diagnostic item trait\n+pub fn is_diag_trait_item(cx: &LateContext<'_>, def_id: DefId, diag_item: Symbol) -> bool {\n+    if let Some(trait_did) = cx.tcx.trait_of_item(def_id) {\n+        return cx.tcx.is_diagnostic_item(diag_item, trait_did);\n+    }\n+    false\n }\n \n /// Checks if the method call given in `expr` belongs to the given trait.\n pub fn is_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, diag_item: Symbol) -> bool {\n     cx.typeck_results()\n         .type_dependent_def_id(expr.hir_id)\n-        .map_or(false, |did| is_diagnostic_assoc_item(cx, did, diag_item))\n+        .map_or(false, |did| is_diag_trait_item(cx, did, diag_item))\n }\n \n /// Checks if an expression references a variable of the given name."}]}