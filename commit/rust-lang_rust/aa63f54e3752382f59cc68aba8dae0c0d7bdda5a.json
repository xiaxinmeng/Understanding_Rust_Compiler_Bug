{"sha": "aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNjNmNTRlMzc1MjM4MmY1OWNjNjhhYmE4ZGFlMGMwZDdiZGRhNWE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-05-07T19:35:19Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-05-07T19:35:19Z"}, "message": "Rollup merge of #33438 - birkenfeld:dup-words, r=steveklabnik\n\nFix some some duplicate words.", "tree": {"sha": "fdc974713887db2abee0347b0971e66ed1a9ed52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdc974713887db2abee0347b0971e66ed1a9ed52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "html_url": "https://github.com/rust-lang/rust/commit/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce94053800c192f2d9c7126dc26297cbbfc73ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce94053800c192f2d9c7126dc26297cbbfc73ff", "html_url": "https://github.com/rust-lang/rust/commit/1ce94053800c192f2d9c7126dc26297cbbfc73ff"}, {"sha": "26eb2bef2591ddb4cdf45d256cdcfa7c7353b0fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/26eb2bef2591ddb4cdf45d256cdcfa7c7353b0fc", "html_url": "https://github.com/rust-lang/rust/commit/26eb2bef2591ddb4cdf45d256cdcfa7c7353b0fc"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "4558e6f049432dff4b0cdd8e690deeae4adb7603", "filename": "src/bootstrap/build/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Fbootstrap%2Fbuild%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Fbootstrap%2Fbuild%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fjob.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -54,7 +54,7 @@ pub unsafe fn setup() {\n \n     // Indicate that when all handles to the job object are gone that all\n     // process in the object should be killed. Note that this includes our\n-    // entire process tree by default because we've added ourselves and and our\n+    // entire process tree by default because we've added ourselves and our\n     // children will reside in the job by default.\n     let mut info = mem::zeroed::<JOBOBJECT_EXTENDED_LIMIT_INFORMATION>();\n     info.BasicLimitInformation.LimitFlags = JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE;"}, {"sha": "1a2c1b9a09528850d7e15ef3ac6a0039e545501f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -1355,7 +1355,7 @@ pub mod nightly_options {\n                     early_error(ErrorOutputType::default(), &msg);\n                 }\n                 OptionStability::UnstableButNotReally => {\n-                    let msg = format!(\"the option `{}` is is unstable and should \\\n+                    let msg = format!(\"the option `{}` is unstable and should \\\n                                        only be used on the nightly compiler, but \\\n                                        it is currently accepted for backwards \\\n                                        compatibility; this will soon change, \\"}, {"sha": "7fb13f49cb4a5986419caa0868a56f027de9fd21", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -40,7 +40,7 @@ use std::rc::Rc;\n pub enum ProjectionMode {\n     /// FIXME (#32205)\n     /// At coherence-checking time, we're still constructing the\n-    /// specialization graph, and thus we only project project\n+    /// specialization graph, and thus we only project\n     /// non-`default` associated types that are defined directly in\n     /// the applicable impl. (This behavior should be improved over\n     /// time, to allow for successful projections modulo cycles"}, {"sha": "f194afaa8176286bfee8e30778704fb1e287abc6", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -176,7 +176,7 @@ impl<'tcx> TraitDef<'tcx> {\n     /// Records a trait-to-implementation mapping for a non-local impl.\n     ///\n     /// The `parent_impl` is the immediately-less-specialized impl, or the\n-    /// trait's def ID if the impl is is not a specialization -- information that\n+    /// trait's def ID if the impl is not a specialization -- information that\n     /// should be pulled from the metadata.\n     pub fn record_remote_impl(&self,\n                               tcx: &TyCtxt<'tcx>,"}, {"sha": "e362e295b414a7136cfc2e364066691cb1c07f34", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -272,7 +272,7 @@ impl<'a,'tcx> WfPredicates<'a,'tcx> {\n     /// into `self.out`.\n     fn compute_projection(&mut self, data: ty::ProjectionTy<'tcx>) {\n         // A projection is well-formed if (a) the trait ref itself is\n-        // WF WF and (b) the trait-ref holds.  (It may also be\n+        // WF and (b) the trait-ref holds.  (It may also be\n         // normalizable and be WF that way.)\n \n         self.compute_trait_ref(&data.trait_ref);"}, {"sha": "7c5ce371ee919776caefdf37bff79f6bed993e01", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -1327,7 +1327,7 @@ fn generate_filter_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n     //          %ret = call i32 @the_real_filter_function(%ehptrs, %arg)\n     //          ret i32 %ret\n     //\n-    // The recoverfp intrinsic is used to recover the frame frame pointer of the\n+    // The recoverfp intrinsic is used to recover the frame pointer of the\n     // `rust_try_fn` function, which is then in turn passed to the\n     // `localrecover` intrinsic (pairing with the `localescape` intrinsic\n     // mentioned above). Putting all this together means that we now have a"}, {"sha": "019241982502e3bb46e8285ff47b595233fa527f", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -371,7 +371,7 @@ impl Ipv6Addr {\n     }\n \n     /// Returns true if this is an address reserved for documentation\n-    /// This is defined to be 2001:db8::/32 in RFC RFC 3849\n+    /// This is defined to be 2001:db8::/32 in RFC 3849.\n     pub fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }"}, {"sha": "0500480add22fed74304440c748ac4c78cb0fadc", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -147,7 +147,7 @@ impl Command {\n         let new_key = pair_to_key(key, val, &mut self.saw_nul);\n         let (map, envp) = self.init_env_map();\n \n-        // If `key` is already present then we we just update `envp` in place\n+        // If `key` is already present then we just update `envp` in place\n         // (and store the owned value), but if it's not there we override the\n         // trailing NULL pointer, add a new NULL pointer, and store where we\n         // were located."}, {"sha": "546bb235a5f501c4b67f68d2482bf1a899d361ae", "filename": "src/test/codegen-units/item-collection/cross-crate-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -27,7 +27,7 @@ fn main() {\n     //~ TRANS_ITEM fn cgu_extern_closures::inlined_fn_generic[0]::{{closure}}[0]<i32>\n     let _ = cgu_extern_closures::inlined_fn_generic(3, 4, 5i32);\n \n-    // Nothing should be generated for this call, we just link to the instance instance\n+    // Nothing should be generated for this call, we just link to the instance\n     // in the extern crate.\n     let _ = cgu_extern_closures::non_inlined_fn(6, 7);\n }"}, {"sha": "ade742863a9da456fa1c3ace1ffc13571af27030", "filename": "src/test/run-pass/regions-lub-ref-ref-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Ftest%2Frun-pass%2Fregions-lub-ref-ref-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Ftest%2Frun-pass%2Fregions-lub-ref-ref-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-lub-ref-ref-rc.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Test a corner case of LUB coercion. In this case, one arm of the\n-// match requires a deref coercion and other other doesn't, and there\n+// match requires a deref coercion and the other doesn't, and there\n // is an extra `&` on the `rc`. We want to be sure that the lifetime\n // assigned to this `&rc` value is not `'a` but something smaller.  In\n // other words, the type from `rc` is `&'a Rc<String>` and the type"}, {"sha": "a7c8c01fab8503febe4d85a50eb74e0d2ccbf4c8", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa63f54e3752382f59cc68aba8dae0c0d7bdda5a/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=aa63f54e3752382f59cc68aba8dae0c0d7bdda5a", "patch": "@@ -110,7 +110,7 @@ fn walk(cache: &mut Cache,\n             if let Some(pretty_path) = pretty_path {\n                 let entry = cache.get_mut(&pretty_path).unwrap();\n                 // we don't need the source anymore,\n-                // so drop to to reduce memory-usage\n+                // so drop to reduce memory-usage\n                 entry.source = String::new();\n             }\n         }"}]}