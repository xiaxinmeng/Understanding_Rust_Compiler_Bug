{"sha": "80b81adc63c4797cac217a586fb4054697a2c70e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYjgxYWRjNjNjNDc5N2NhYzIxN2E1ODZmYjQwNTQ2OTdhMmM3MGU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-08-26T09:26:03Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-08-26T13:29:27Z"}, "message": "switch stage0.txt to stage0.json and add a tool to generate it", "tree": {"sha": "7938dba080aee2baf2e493b1ae774be9f54a18fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7938dba080aee2baf2e493b1ae774be9f54a18fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80b81adc63c4797cac217a586fb4054697a2c70e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmEnlzcACgkQzXazX3c0\ndp4u9BAAnj027cr003MptGDtDS4D+dS39TrLJSrbQNSF3nCvTc/7N4fibUhXjy8y\neEpQXg7T+Dr5XHDCulv3whcr6OX+BpDmUksIWsYACavljdUnm74CTakqJzbxmxXY\n/kzBmWOUvI0lFjviUpOpPvvGZ4ATwPfwfDiMA7uvrjN89drxunHnBS6bznzmlnEE\n2iLsGxLNvya9dpZp8/jFy3+cNf3vAu1HNMzIHC7Iw6xWVbqO6BHqNVSvVu/gp0Uh\nYgmuPwXu+YMC3dQtLYL8hzW0aLtXkDpWhlaVe5iXt0ykKZSQyhKCGuIqcqaJ3S9O\nYi2mxMfWs3jKBj1WdwsLkDmm0YCpyeah98546S0G3jtsnpE/PAbrpUPYZKj2SaIF\n/Etf2FVZKYd6EWKM+y265FXxv1MP52aCVgGnhe5Ez7EDn0RuQ0tgVdlV96sY9rlg\npGv0EgY+0r00Toa41lal6witGbWkEPNVFm9dVGFmgIAziUn6FDR/tIHsIrtyXgKl\nLD6ZQZHDfuwahMqRklQb4rgXyfSSH1ZPsTDB/k1eejhY3SIsx4FZNaXuDUwIu0KC\nMgjJazgOViID8ZuZeTtG/Bb/ZufFwpwH8+oEW+Gz7d8azse/VwEMofpV9+thog/T\np0/hPZND479QEVBKxvgdBscl3pwbrdbScNsvAxGQ63yDWuyRxE4=\n=eJQO\n-----END PGP SIGNATURE-----", "payload": "tree 7938dba080aee2baf2e493b1ae774be9f54a18fc\nparent 33fdb797f59421c7bbecaa4588ed5d7a31a9494a\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1629969963 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1629984567 +0200\n\nswitch stage0.txt to stage0.json and add a tool to generate it\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80b81adc63c4797cac217a586fb4054697a2c70e", "html_url": "https://github.com/rust-lang/rust/commit/80b81adc63c4797cac217a586fb4054697a2c70e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80b81adc63c4797cac217a586fb4054697a2c70e/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33fdb797f59421c7bbecaa4588ed5d7a31a9494a", "url": "https://api.github.com/repos/rust-lang/rust/commits/33fdb797f59421c7bbecaa4588ed5d7a31a9494a", "html_url": "https://github.com/rust-lang/rust/commit/33fdb797f59421c7bbecaa4588ed5d7a31a9494a"}], "stats": {"total": 380, "additions": 263, "deletions": 117}, "files": [{"sha": "21b6e41dba32d0f29838958d09a860b8ea5b2485", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -220,6 +220,17 @@ dependencies = [\n name = \"build_helper\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"bump-stage0\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"anyhow\",\n+ \"curl\",\n+ \"serde\",\n+ \"serde_json\",\n+ \"toml\",\n+]\n+\n [[package]]\n name = \"byte-tools\"\n version = \"0.3.1\""}, {"sha": "3822da2ccd5e4694756480493eb2ff55afcce26e", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -35,6 +35,7 @@ members = [\n   \"src/tools/expand-yaml-anchors\",\n   \"src/tools/jsondocck\",\n   \"src/tools/html-checker\",\n+  \"src/tools/bump-stage0\",\n ]\n \n exclude = ["}, {"sha": "3160f6c57d8f19150c304da3656bcff307cd3a65", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 34, "deletions": 42, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -4,6 +4,7 @@\n import datetime\n import distutils.version\n import hashlib\n+import json\n import os\n import re\n import shutil\n@@ -176,15 +177,6 @@ def require(cmd, exit=True):\n         sys.exit(1)\n \n \n-def stage0_data(rust_root):\n-    \"\"\"Build a dictionary from stage0.txt\"\"\"\n-    nightlies = os.path.join(rust_root, \"src/stage0.txt\")\n-    with open(nightlies, 'r') as nightlies:\n-        lines = [line.rstrip() for line in nightlies\n-                 if not line.startswith(\"#\")]\n-        return dict([line.split(\": \", 1) for line in lines if line])\n-\n-\n def format_build_time(duration):\n     \"\"\"Return a nicer format for build time\n \n@@ -371,13 +363,21 @@ def output(filepath):\n     os.rename(tmp, filepath)\n \n \n+class Stage0Toolchain:\n+    def __init__(self, stage0_payload):\n+        self.date = stage0_payload[\"date\"]\n+        self.version = stage0_payload[\"version\"]\n+\n+    def channel(self):\n+        return self.version + \"-\" + self.date\n+\n+\n class RustBuild(object):\n     \"\"\"Provide all the methods required to build Rust\"\"\"\n     def __init__(self):\n-        self.date = ''\n+        self.stage0_compiler = None\n+        self.stage0_rustfmt = None\n         self._download_url = ''\n-        self.rustc_channel = ''\n-        self.rustfmt_channel = ''\n         self.build = ''\n         self.build_dir = ''\n         self.clean = False\n@@ -401,11 +401,10 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n         will move all the content to the right place.\n         \"\"\"\n         if rustc_channel is None:\n-            rustc_channel = self.rustc_channel\n-        rustfmt_channel = self.rustfmt_channel\n+            rustc_channel = self.stage0_compiler.version\n         bin_root = self.bin_root(stage0)\n \n-        key = self.date\n+        key = self.stage0_compiler.date\n         if not stage0:\n             key += str(self.rustc_commit)\n         if self.rustc(stage0).startswith(bin_root) and \\\n@@ -444,19 +443,23 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n \n         if self.rustfmt() and self.rustfmt().startswith(bin_root) and (\n             not os.path.exists(self.rustfmt())\n-            or self.program_out_of_date(self.rustfmt_stamp(), self.rustfmt_channel)\n+            or self.program_out_of_date(\n+                self.rustfmt_stamp(),\n+                \"\" if self.stage0_rustfmt is None else self.stage0_rustfmt.channel()\n+            )\n         ):\n-            if rustfmt_channel:\n+            if self.stage0_rustfmt is not None:\n                 tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n-                [channel, date] = rustfmt_channel.split('-', 1)\n-                filename = \"rustfmt-{}-{}{}\".format(channel, self.build, tarball_suffix)\n+                filename = \"rustfmt-{}-{}{}\".format(\n+                    self.stage0_rustfmt.version, self.build, tarball_suffix,\n+                )\n                 self._download_component_helper(\n-                    filename, \"rustfmt-preview\", tarball_suffix, key=date\n+                    filename, \"rustfmt-preview\", tarball_suffix, key=self.stage0_rustfmt.date\n                 )\n                 self.fix_bin_or_dylib(\"{}/bin/rustfmt\".format(bin_root))\n                 self.fix_bin_or_dylib(\"{}/bin/cargo-fmt\".format(bin_root))\n                 with output(self.rustfmt_stamp()) as rustfmt_stamp:\n-                    rustfmt_stamp.write(self.rustfmt_channel)\n+                    rustfmt_stamp.write(self.stage0_rustfmt.channel())\n \n         # Avoid downloading LLVM twice (once for stage0 and once for the master rustc)\n         if self.downloading_llvm() and stage0:\n@@ -517,7 +520,7 @@ def _download_component_helper(\n     ):\n         if key is None:\n             if stage0:\n-                key = self.date\n+                key = self.stage0_compiler.date\n             else:\n                 key = self.rustc_commit\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n@@ -815,7 +818,7 @@ def rustc(self, stage0):\n \n     def rustfmt(self):\n         \"\"\"Return config path for rustfmt\"\"\"\n-        if not self.rustfmt_channel:\n+        if self.stage0_rustfmt is None:\n             return None\n         return self.program_config('rustfmt')\n \n@@ -1039,19 +1042,12 @@ def update_submodules(self):\n             self.update_submodule(module[0], module[1], recorded_submodules)\n         print(\"Submodules updated in %.2f seconds\" % (time() - start_time))\n \n-    def set_normal_environment(self):\n+    def set_dist_environment(self, url):\n         \"\"\"Set download URL for normal environment\"\"\"\n         if 'RUSTUP_DIST_SERVER' in os.environ:\n             self._download_url = os.environ['RUSTUP_DIST_SERVER']\n         else:\n-            self._download_url = 'https://static.rust-lang.org'\n-\n-    def set_dev_environment(self):\n-        \"\"\"Set download URL for development environment\"\"\"\n-        if 'RUSTUP_DEV_DIST_SERVER' in os.environ:\n-            self._download_url = os.environ['RUSTUP_DEV_DIST_SERVER']\n-        else:\n-            self._download_url = 'https://dev-static.rust-lang.org'\n+            self._download_url = url\n \n     def check_vendored_status(self):\n         \"\"\"Check that vendoring is configured properly\"\"\"\n@@ -1160,17 +1156,13 @@ def bootstrap(help_triggered):\n     build_dir = build.get_toml('build-dir', 'build') or 'build'\n     build.build_dir = os.path.abspath(build_dir.replace(\"$ROOT\", build.rust_root))\n \n-    data = stage0_data(build.rust_root)\n-    build.date = data['date']\n-    build.rustc_channel = data['rustc']\n+    with open(os.path.join(build.rust_root, \"src\", \"stage0.json\")) as f:\n+        data = json.load(f)\n+    build.stage0_compiler = Stage0Toolchain(data[\"compiler\"])\n+    if data.get(\"rustfmt\") is not None:\n+        build.stage0_rustfmt = Stage0Toolchain(data[\"rustfmt\"])\n \n-    if \"rustfmt\" in data:\n-        build.rustfmt_channel = data['rustfmt']\n-\n-    if 'dev' in data:\n-        build.set_dev_environment()\n-    else:\n-        build.set_normal_environment()\n+    build.set_dist_environment(data[\"dist_server\"])\n \n     build.build = args.build or build.build_triple()\n     build.update_submodules()"}, {"sha": "c91fd60da2f9daadaa94b894b4d6c65477f336a5", "filename": "src/bootstrap/bootstrap_test.py", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Fbootstrap_test.py", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Fbootstrap_test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap_test.py?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -13,25 +13,6 @@\n import bootstrap\n \n \n-class Stage0DataTestCase(unittest.TestCase):\n-    \"\"\"Test Case for stage0_data\"\"\"\n-    def setUp(self):\n-        self.rust_root = tempfile.mkdtemp()\n-        os.mkdir(os.path.join(self.rust_root, \"src\"))\n-        with open(os.path.join(self.rust_root, \"src\",\n-                               \"stage0.txt\"), \"w\") as stage0:\n-            stage0.write(\"#ignore\\n\\ndate: 2017-06-15\\nrustc: beta\\ncargo: beta\\nrustfmt: beta\")\n-\n-    def tearDown(self):\n-        rmtree(self.rust_root)\n-\n-    def test_stage0_data(self):\n-        \"\"\"Extract data from stage0.txt\"\"\"\n-        expected = {\"date\": \"2017-06-15\", \"rustc\": \"beta\", \"cargo\": \"beta\", \"rustfmt\": \"beta\"}\n-        data = bootstrap.stage0_data(self.rust_root)\n-        self.assertDictEqual(data, expected)\n-\n-\n class VerifyTestCase(unittest.TestCase):\n     \"\"\"Test Case for verify\"\"\"\n     def setUp(self):\n@@ -99,7 +80,6 @@ def test_same_dates(self):\n     TEST_LOADER = unittest.TestLoader()\n     SUITE.addTest(doctest.DocTestSuite(bootstrap))\n     SUITE.addTests([\n-        TEST_LOADER.loadTestsFromTestCase(Stage0DataTestCase),\n         TEST_LOADER.loadTestsFromTestCase(VerifyTestCase),\n         TEST_LOADER.loadTestsFromTestCase(ProgramOutOfDate)])\n "}, {"sha": "0a6ed2f49b7877dcc19549b8571ed592509ffbfc", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -523,7 +523,7 @@ impl<'a> Builder<'a> {\n                 install::Src,\n                 install::Rustc\n             ),\n-            Kind::Run => describe!(run::ExpandYamlAnchors, run::BuildManifest),\n+            Kind::Run => describe!(run::ExpandYamlAnchors, run::BuildManifest, run::BumpStage0),\n         }\n     }\n "}, {"sha": "a4735d54be03828f1d91c37a3c507c85f4cefc00", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -31,7 +31,7 @@\n //! When you execute `x.py build`, the steps executed are:\n //!\n //! * First, the python script is run. This will automatically download the\n-//!   stage0 rustc and cargo according to `src/stage0.txt`, or use the cached\n+//!   stage0 rustc and cargo according to `src/stage0.json`, or use the cached\n //!   versions if they're available. These are then used to compile rustbuild\n //!   itself (using Cargo). Finally, control is then transferred to rustbuild.\n //!"}, {"sha": "11b393857e74c281b3dd4fb14f2366d8b3103d2d", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -82,3 +82,24 @@ impl Step for BuildManifest {\n         builder.run(&mut cmd);\n     }\n }\n+\n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct BumpStage0;\n+\n+impl Step for BumpStage0 {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/bump-stage0\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(BumpStage0);\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let mut cmd = builder.tool_cmd(Tool::BumpStage0);\n+        builder.run(&mut cmd);\n+    }\n+}"}, {"sha": "d7db2cef24f2be27323779d047afcd1a99e9617c", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -15,7 +15,7 @@ use std::fs;\n use std::path::PathBuf;\n use std::process::Command;\n \n-use build_helper::{output, t};\n+use build_helper::output;\n \n use crate::cache::INTERNER;\n use crate::config::Target;\n@@ -227,14 +227,4 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n     if let Some(ref s) = build.config.ccache {\n         cmd_finder.must_have(s);\n     }\n-\n-    if build.config.channel == \"stable\" {\n-        let stage0 = t!(fs::read_to_string(build.src.join(\"src/stage0.txt\")));\n-        if stage0.contains(\"\\ndev:\") {\n-            panic!(\n-                \"bootstrapping from a dev compiler in a stable release, but \\\n-                    should only be bootstrapping from a released compiler!\"\n-            );\n-        }\n-    }\n }"}, {"sha": "c035894638538a9b7576f4f705914bb72671607c", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -377,6 +377,7 @@ bootstrap_tool!(\n     LintDocs, \"src/tools/lint-docs\", \"lint-docs\";\n     JsonDocCk, \"src/tools/jsondocck\", \"jsondocck\";\n     HtmlChecker, \"src/tools/html-checker\", \"html-checker\";\n+    BumpStage0, \"src/tools/bump-stage0\", \"bump-stage0\";\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]"}, {"sha": "3cd97243152eba058c44644ccafc2820619a11b7", "filename": "src/stage0.json", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -0,0 +1,12 @@\n+{\n+  \"__comment\": \"Generated by `./x.py run src/tools/bump-stage0`. Run that command again to update the bootstrap compiler.\",\n+  \"dist_server\": \"https://static.rust-lang.org\",\n+  \"compiler\": {\n+    \"date\": \"2021-08-22\",\n+    \"version\": \"beta\"\n+  },\n+  \"rustfmt\": {\n+    \"date\": \"2021-08-26\",\n+    \"version\": \"nightly\"\n+  }\n+}"}, {"sha": "6b1507e36503688eaea1fff9cdf869a3670c2706", "filename": "src/stage0.txt", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/33fdb797f59421c7bbecaa4588ed5d7a31a9494a/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/33fdb797f59421c7bbecaa4588ed5d7a31a9494a/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=33fdb797f59421c7bbecaa4588ed5d7a31a9494a", "patch": "@@ -1,42 +0,0 @@\n-# This file describes the stage0 compiler that's used to then bootstrap the Rust\n-# compiler itself.\n-#\n-# Currently Rust always bootstraps from the previous stable release, and in our\n-# train model this means that the master branch bootstraps from beta, beta\n-# bootstraps from current stable, and stable bootstraps from the previous stable\n-# release.\n-#\n-# If you're looking at this file on the master branch, you'll likely see that\n-# rustc is configured to `beta`, whereas if you're looking at a source tarball\n-# for a stable release you'll likely see `1.x.0` for rustc, with the previous\n-# stable release's version number. `date` is the date where the release we're\n-# bootstrapping off was released.\n-\n-date: 2021-07-29\n-rustc: beta\n-\n-# We use a nightly rustfmt to format the source because it solves some\n-# bootstrapping issues with use of new syntax in this repo. If you're looking at\n-# the beta/stable branch, this key should be omitted, as we don't want to depend\n-# on rustfmt from nightly there.\n-rustfmt: nightly-2021-03-25\n-\n-# When making a stable release the process currently looks like:\n-#\n-#   1. Produce stable build, upload it to dev-static\n-#   2. Produce a beta build from the previous stable build, upload to static\n-#   3. Produce a nightly build from previous beta, upload to static\n-#   4. Upload stable build to static, publish full release\n-#\n-# This means that there's a small window of time (a few days) where artifacts\n-# are downloaded from dev-static.rust-lang.org instead of static.rust-lang.org.\n-# In order to ease this transition we have an extra key which is in the\n-# configuration file below. When uncommented this will instruct the bootstrap.py\n-# script to download from dev-static.rust-lang.org.\n-#\n-# This key is typically commented out at all times. If you're looking at a\n-# stable release tarball it should *definitely* be commented out. If you're\n-# looking at a beta source tarball and it's uncommented we'll shortly comment it\n-# out.\n-\n-#dev: 1"}, {"sha": "c94331e98e84ec889e541b776c5c7d537d3fe70b", "filename": "src/tools/bump-stage0/Cargo.toml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Ftools%2Fbump-stage0%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Ftools%2Fbump-stage0%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2FCargo.toml?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -0,0 +1,13 @@\n+[package]\n+name = \"bump-stage0\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]\n+anyhow = \"1.0.34\"\n+curl = \"0.4.38\"\n+serde = { version = \"1.0.125\", features = [\"derive\"] }\n+serde_json = \"1.0.59\"\n+toml = \"0.5.7\""}, {"sha": "2c673ecccda6e0ce30b9ee1d8f8ee4d1890c99a8", "filename": "src/tools/bump-stage0/src/main.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b81adc63c4797cac217a586fb4054697a2c70e/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs?ref=80b81adc63c4797cac217a586fb4054697a2c70e", "patch": "@@ -0,0 +1,167 @@\n+use anyhow::Error;\n+use curl::easy::Easy;\n+use std::collections::HashMap;\n+use std::convert::TryInto;\n+\n+const DIST_SERVER: &str = \"https://static.rust-lang.org\";\n+\n+struct Tool {\n+    channel: Channel,\n+    version: [u16; 3],\n+}\n+\n+impl Tool {\n+    fn new() -> Result<Self, Error> {\n+        let channel = match std::fs::read_to_string(\"src/ci/channel\")?.trim() {\n+            \"stable\" => Channel::Stable,\n+            \"beta\" => Channel::Beta,\n+            \"nightly\" => Channel::Nightly,\n+            other => anyhow::bail!(\"unsupported channel: {}\", other),\n+        };\n+\n+        // Split \"1.42.0\" into [1, 42, 0]\n+        let version = std::fs::read_to_string(\"src/version\")?\n+            .trim()\n+            .split('.')\n+            .map(|val| val.parse())\n+            .collect::<Result<Vec<_>, _>>()?\n+            .try_into()\n+            .map_err(|_| anyhow::anyhow!(\"failed to parse version\"))?;\n+\n+        Ok(Self { channel, version })\n+    }\n+\n+    fn update_json(self) -> Result<(), Error> {\n+        std::fs::write(\n+            \"src/stage0.json\",\n+            format!(\n+                \"{}\\n\",\n+                serde_json::to_string_pretty(&Stage0 {\n+                    comment: \"Generated by `./x.py run src/tools/bump-stage0`. \\\n+                              Run that command again to update the bootstrap compiler.\",\n+                    dist_server: DIST_SERVER.into(),\n+                    compiler: self.detect_compiler()?,\n+                    rustfmt: self.detect_rustfmt()?,\n+                })?\n+            )\n+        )?;\n+        Ok(())\n+    }\n+\n+    // Currently Rust always bootstraps from the previous stable release, and in our train model\n+    // this means that the master branch bootstraps from beta, beta bootstraps from current stable,\n+    // and stable bootstraps from the previous stable release.\n+    //\n+    // On the master branch the compiler version is configured to `beta` whereas if you're looking\n+    // at the beta or stable channel you'll likely see `1.x.0` as the version, with the previous\n+    // release's version number.\n+    fn detect_compiler(&self) -> Result<Stage0Toolchain, Error> {\n+        let channel = match self.channel {\n+            Channel::Stable | Channel::Beta => {\n+                // The 1.XX manifest points to the latest point release of that minor release.\n+                format!(\"{}.{}\", self.version[0], self.version[1] - 1)\n+            }\n+            Channel::Nightly => \"beta\".to_string(),\n+        };\n+\n+        let manifest = fetch_manifest(&channel)?;\n+        Ok(Stage0Toolchain {\n+            date: manifest.date,\n+            version: if self.channel == Channel::Nightly {\n+                \"beta\".to_string()\n+            } else {\n+                // The version field is like \"1.42.0 (abcdef1234 1970-01-01)\"\n+                manifest.pkg[\"rust\"]\n+                    .version\n+                    .split_once(' ')\n+                    .expect(\"invalid version field\")\n+                    .0\n+                    .to_string()\n+            },\n+        })\n+    }\n+\n+    /// We use a nightly rustfmt to format the source because it solves some bootstrapping issues\n+    /// with use of new syntax in this repo. For the beta/stable channels rustfmt is not provided,\n+    /// as we don't want to depend on rustfmt from nightly there.\n+    fn detect_rustfmt(&self) -> Result<Option<Stage0Toolchain>, Error> {\n+        if self.channel != Channel::Nightly {\n+            return Ok(None);\n+        }\n+\n+        let manifest = fetch_manifest(\"nightly\")?;\n+        Ok(Some(Stage0Toolchain { date: manifest.date, version: \"nightly\".into() }))\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let tool = Tool::new()?;\n+    tool.update_json()?;\n+    Ok(())\n+}\n+\n+fn fetch_manifest(channel: &str) -> Result<Manifest, Error> {\n+    Ok(toml::from_slice(&http_get(&format!(\n+        \"{}/dist/channel-rust-{}.toml\",\n+        DIST_SERVER, channel\n+    ))?)?)\n+}\n+\n+fn http_get(url: &str) -> Result<Vec<u8>, Error> {\n+    let mut data = Vec::new();\n+    let mut handle = Easy::new();\n+    handle.fail_on_error(true)?;\n+    handle.url(url)?;\n+    {\n+        let mut transfer = handle.transfer();\n+        transfer.write_function(|new_data| {\n+            data.extend_from_slice(new_data);\n+            Ok(new_data.len())\n+        })?;\n+        transfer.perform()?;\n+    }\n+    Ok(data)\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+enum Channel {\n+    Stable,\n+    Beta,\n+    Nightly,\n+}\n+\n+#[derive(Debug, serde::Serialize)]\n+struct Stage0 {\n+    #[serde(rename = \"__comment\")]\n+    comment: &'static str,\n+    dist_server: String,\n+    compiler: Stage0Toolchain,\n+    rustfmt: Option<Stage0Toolchain>,\n+}\n+\n+#[derive(Debug, serde::Serialize)]\n+struct Stage0Toolchain {\n+    date: String,\n+    version: String,\n+}\n+\n+#[derive(Debug, serde::Deserialize)]\n+struct Manifest {\n+    date: String,\n+    pkg: HashMap<String, ManifestPackage>,\n+}\n+\n+#[derive(Debug, serde::Deserialize)]\n+struct ManifestPackage {\n+    version: String,\n+    target: HashMap<String, ManifestTargetPackage>,\n+}\n+\n+#[derive(Debug, serde::Deserialize)]\n+struct ManifestTargetPackage {\n+    available: bool,\n+    url: Option<String>,\n+    hash: Option<String>,\n+    xz_url: Option<String>,\n+    xz_hash: Option<String>,\n+}"}]}