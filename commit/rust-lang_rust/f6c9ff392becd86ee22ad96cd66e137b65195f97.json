{"sha": "f6c9ff392becd86ee22ad96cd66e137b65195f97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YzlmZjM5MmJlY2Q4NmVlMjJhZDk2Y2Q2NmUxMzdiNjUxOTVmOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T09:15:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T09:15:59Z"}, "message": "auto merge of #9481 : jbclements/rust/minor-cleanup, r=cmr\n\nSmall stuff... might as well get it into the tree. One new test case, some issue # cleanup, remove some unused imports.", "tree": {"sha": "86226fccf2e6fdb527e5075edfaf607090748d9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86226fccf2e6fdb527e5075edfaf607090748d9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6c9ff392becd86ee22ad96cd66e137b65195f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c9ff392becd86ee22ad96cd66e137b65195f97", "html_url": "https://github.com/rust-lang/rust/commit/f6c9ff392becd86ee22ad96cd66e137b65195f97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6c9ff392becd86ee22ad96cd66e137b65195f97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45311846145a39e6b5755a0740d53ac4ea3183a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/45311846145a39e6b5755a0740d53ac4ea3183a4", "html_url": "https://github.com/rust-lang/rust/commit/45311846145a39e6b5755a0740d53ac4ea3183a4"}, {"sha": "0269850cc22a9b09f08584d312001afd8887e89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0269850cc22a9b09f08584d312001afd8887e89b", "html_url": "https://github.com/rust-lang/rust/commit/0269850cc22a9b09f08584d312001afd8887e89b"}], "stats": {"total": 80, "additions": 62, "deletions": 18}, "files": [{"sha": "9e23501a13bffbcd2d4d4eae1d9f21f1cf936436", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6c9ff392becd86ee22ad96cd66e137b65195f97/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c9ff392becd86ee22ad96cd66e137b65195f97/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=f6c9ff392becd86ee22ad96cd66e137b65195f97", "patch": "@@ -740,7 +740,7 @@ pub fn new_mark(m:Mrk, tail:SyntaxContext) -> SyntaxContext {\n }\n \n // Extend a syntax context with a given mark and table\n-// FIXME #4536 : currently pub to allow testing\n+// FIXME #8215 : currently pub to allow testing\n pub fn new_mark_internal(m:Mrk, tail:SyntaxContext,table:&mut SCTable)\n     -> SyntaxContext {\n     let key = (tail,m);\n@@ -769,7 +769,7 @@ pub fn new_rename(id:Ident, to:Name, tail:SyntaxContext) -> SyntaxContext {\n }\n \n // Extend a syntax context with a given rename and sctable\n-// FIXME #4536 : currently pub to allow testing\n+// FIXME #8215 : currently pub to allow testing\n pub fn new_rename_internal(id:Ident, to:Name, tail:SyntaxContext, table: &mut SCTable)\n     -> SyntaxContext {\n     let key = (tail,id,to);\n@@ -792,7 +792,7 @@ pub fn new_rename_internal(id:Ident, to:Name, tail:SyntaxContext, table: &mut SC\n \n /// Make a fresh syntax context table with EmptyCtxt in slot zero\n /// and IllegalCtxt in slot one.\n-// FIXME #4536 : currently pub to allow testing\n+// FIXME #8215 : currently pub to allow testing\n pub fn new_sctable_internal() -> SCTable {\n     SCTable {\n         table: ~[EmptyCtxt,IllegalCtxt],\n@@ -834,7 +834,7 @@ pub fn mtwt_resolve(id : Ident) -> Name {\n     resolve_internal(id, get_sctable(), get_resolve_table())\n }\n \n-// FIXME #4536: must be pub for testing\n+// FIXME #8215: must be pub for testing\n pub type ResolveTable = HashMap<(Name,SyntaxContext),Name>;\n \n // okay, I admit, putting this in TLS is not so nice:\n@@ -853,7 +853,7 @@ pub fn get_resolve_table() -> @mut ResolveTable {\n \n // Resolve a syntax object to a name, per MTWT.\n // adding memoization to possibly resolve 500+ seconds in resolve for librustc (!)\n-// FIXME #4536 : currently pub to allow testing\n+// FIXME #8215 : currently pub to allow testing\n pub fn resolve_internal(id : Ident,\n                         table : &mut SCTable,\n                         resolve_table : &mut ResolveTable) -> Name {"}, {"sha": "64f30803ca73450a4079a17715befd8e255b12c7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6c9ff392becd86ee22ad96cd66e137b65195f97/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c9ff392becd86ee22ad96cd66e137b65195f97/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f6c9ff392becd86ee22ad96cd66e137b65195f97", "patch": "@@ -1640,9 +1640,10 @@ mod test {\n                   macro_rules! user(($x:ident) => ({letty!($x); $x}))\n                   fn main() -> int {user!(z)}\",\n                  ~[~[0]], false),\n-                // FIXME #8062: this test exposes a *potential* bug; our system does\n-                // not behave exactly like MTWT, but I haven't thought of a way that\n-                // this could cause a bug in Rust, yet.\n+                // no longer a fixme #8062: this test exposes a *potential* bug; our system does\n+                // not behave exactly like MTWT, but a conversation with Matthew Flatt\n+                // suggests that this can only occur in the presence of local-expand, which\n+                // we have no plans to support.\n                 // (\"fn main() {let hrcoo = 19; macro_rules! getx(()=>(hrcoo)); getx!();}\",\n                 // ~[~[0]], true)\n                 // FIXME #6994: the next string exposes the bug referred to in issue 6994, so I'm\n@@ -1655,6 +1656,7 @@ mod test {\n                 //   fn a(){g!(z)}\"\n                 // create a really evil test case where a $x appears inside a binding of $x\n                 // but *shouldnt* bind because it was inserted by a different macro....\n+                // can't write this test case until we have macro-generating macros.\n             ];\n         for (idx,s) in tests.iter().enumerate() {\n             run_renaming_test(s,idx);"}, {"sha": "09adcc66ea535e955d666e6166852f7d4a990d6e", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c9ff392becd86ee22ad96cd66e137b65195f97/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c9ff392becd86ee22ad96cd66e137b65195f97/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=f6c9ff392becd86ee22ad96cd66e137b65195f97", "patch": "@@ -875,7 +875,6 @@ fn consume_whitespace(rdr: @mut StringReader) {\n mod test {\n     use super::*;\n \n-    use ast;\n     use codemap::{BytePos, CodeMap, Span};\n     use diagnostic;\n     use parse::token;"}, {"sha": "37f2f8345cd17af3ef9af8318d92296c3e09091a", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f6c9ff392becd86ee22ad96cd66e137b65195f97/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c9ff392becd86ee22ad96cd66e137b65195f97/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f6c9ff392becd86ee22ad96cd66e137b65195f97", "patch": "@@ -324,17 +324,10 @@ mod test {\n     use abi;\n     use parse::parser::Parser;\n     use parse::token::{str_to_ident};\n-    use util::parser_testing::{string_to_tts_and_sess, string_to_parser};\n+    use util::parser_testing::{string_to_tts, string_to_parser};\n     use util::parser_testing::{string_to_expr, string_to_item};\n     use util::parser_testing::string_to_stmt;\n \n-    // map a string to tts, return the tt without its parsesess\n-    fn string_to_tts_only(source_str : @str) -> ~[ast::token_tree] {\n-        let (tts,_ps) = string_to_tts_and_sess(source_str);\n-        tts\n-    }\n-\n-\n     #[cfg(test)] fn to_json_str<E : Encodable<extra::json::Encoder>>(val: @E) -> ~str {\n         do io::with_str_writer |writer| {\n             let mut encoder = extra::json::Encoder(writer);\n@@ -395,8 +388,53 @@ mod test {\n         string_to_expr(@\"::abc::def::return\");\n     }\n \n+    // check the token-tree-ization of macros\n+    #[test] fn string_to_tts_macro () {\n+        let tts = string_to_tts(@\"macro_rules! zip (($a)=>($a))\");\n+        match tts {\n+            [ast::tt_tok(_,_),\n+             ast::tt_tok(_,token::NOT),\n+             ast::tt_tok(_,_),\n+             ast::tt_delim(delim_elts)] =>\n+                match *delim_elts {\n+                [ast::tt_tok(_,token::LPAREN),\n+                 ast::tt_delim(first_set),\n+                 ast::tt_tok(_,token::FAT_ARROW),\n+                 ast::tt_delim(second_set),\n+                 ast::tt_tok(_,token::RPAREN)] =>\n+                    match *first_set {\n+                    [ast::tt_tok(_,token::LPAREN),\n+                     ast::tt_tok(_,token::DOLLAR),\n+                     ast::tt_tok(_,_),\n+                     ast::tt_tok(_,token::RPAREN)] =>\n+                        match *second_set {\n+                        [ast::tt_tok(_,token::LPAREN),\n+                         ast::tt_tok(_,token::DOLLAR),\n+                         ast::tt_tok(_,_),\n+                         ast::tt_tok(_,token::RPAREN)] =>\n+                            assert_eq!(\"correct\",\"correct\"),\n+                        _ => assert_eq!(\"wrong 4\",\"correct\")\n+                    },\n+                    _ => {\n+                        error!(\"failing value 3: %?\",first_set);\n+                        assert_eq!(\"wrong 3\",\"correct\")\n+                    }\n+                },\n+                _ => {\n+                    error!(\"failing value 2: %?\",delim_elts);\n+                    assert_eq!(\"wrong\",\"correct\");\n+                }\n+\n+            },\n+            _ => {\n+                error!(\"failing value: %?\",tts);\n+                assert_eq!(\"wrong 1\",\"correct\");\n+            }\n+        }\n+    }\n+\n     #[test] fn string_to_tts_1 () {\n-        let (tts,_ps) = string_to_tts_and_sess(@\"fn a (b : int) { b; }\");\n+        let tts = string_to_tts(@\"fn a (b : int) { b; }\");\n         assert_eq!(to_json_str(@tts),\n         ~\"[\\\n     {\\"}, {"sha": "74447b5dae124a089afe28c61b23759ecae749ea", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6c9ff392becd86ee22ad96cd66e137b65195f97/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c9ff392becd86ee22ad96cd66e137b65195f97/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f6c9ff392becd86ee22ad96cd66e137b65195f97", "patch": "@@ -2035,6 +2035,11 @@ impl Parser {\n \n     // parse a single token tree from the input.\n     pub fn parse_token_tree(&self) -> token_tree {\n+        // FIXME #6994: currently, this is too eager. It\n+        // parses token trees but also identifies tt_seq's\n+        // and tt_nonterminals; it's too early to know yet\n+        // whether something will be a nonterminal or a seq\n+        // yet.\n         maybe_whole!(deref self, nt_tt);\n \n         // this is the fall-through for the 'match' below."}]}