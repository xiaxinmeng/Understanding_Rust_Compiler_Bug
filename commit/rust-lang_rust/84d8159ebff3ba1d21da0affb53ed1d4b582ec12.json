{"sha": "84d8159ebff3ba1d21da0affb53ed1d4b582ec12", "node_id": "C_kwDOAAsO6NoAKDg0ZDgxNTllYmZmM2JhMWQyMWRhMGFmZmI1M2VkMWQ0YjU4MmVjMTI", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2023-05-03T23:42:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-03T23:42:47Z"}, "message": "Rollup merge of #97594 - WaffleLapkin:array_tuple_conv, r=ChrisDenton\n\nImplement tuple<->array convertions via `From`\n\nThis PR adds the following impls that convert between homogeneous tuples and arrays of the corresponding lengths:\n```rust\nimpl<T> From<[T; 1]> for (T,) { ... }\nimpl<T> From<[T; 2]> for (T, T) { ... }\n/* ... */\nimpl<T> From<[T; 12]> for (T, T, T, T, T, T, T, T, T, T, T, T) { ... }\n\nimpl<T> From<(T,)> for [T; 1] { ... }\nimpl<T> From<(T, T)> for [T; 2] { ... }\n/* ... */\nimpl<T> From<(T, T, T, T, T, T, T, T, T, T, T, T)> for [T; 12] { ... }\n```\n\nIMO these are quite uncontroversial but note that they are, just like any other trait impls, insta-stable.", "tree": {"sha": "8b76f3ee0b6e3efdc43eb94a4bca4741101e8a0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b76f3ee0b6e3efdc43eb94a4bca4741101e8a0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84d8159ebff3ba1d21da0affb53ed1d4b582ec12", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkUvF3CRBK7hj4Ov3rIwAA9a8IAIkKt7vwkkvSXat/T45TGgEt\nX4cFPMKkT0wNPAlPikJK+MxjSueangfNpjDyx5kpuaJT+9qRmeM/JoT/xbd22y07\nMWHgUNHmw8Tla1G4+jLQs01gmY2lR/Uz1rYqmI65T4xpZnaFM6zi5jG5tSNxotCw\nvHINKGWgXYjOjDtUGou1hYRolFgh64EzxvNWppalngT924ndZNKGutSwtO+wmB/f\nVHJYDsa5RRfA+gWF/QEkaryx+wILuWcKoC7wRu32swwILB1Nh6KqEPh/8UjIq/8q\nFAZVLcuo+Ze0kamqTQJP8bleNHf+zpL0M/JdQtCQc8eZttBO4NZaM/lRWKfBktk=\n=GDFp\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b76f3ee0b6e3efdc43eb94a4bca4741101e8a0c\nparent 473f916d836cc662c5bdbb0d40af9fb4678fab9e\nparent de105164ea8733b2cab14cf8920f859a17574715\nauthor Manish Goregaokar <manishsmail@gmail.com> 1683157367 -0700\ncommitter GitHub <noreply@github.com> 1683157367 -0700\n\nRollup merge of #97594 - WaffleLapkin:array_tuple_conv, r=ChrisDenton\n\nImplement tuple<->array convertions via `From`\n\nThis PR adds the following impls that convert between homogeneous tuples and arrays of the corresponding lengths:\n```rust\nimpl<T> From<[T; 1]> for (T,) { ... }\nimpl<T> From<[T; 2]> for (T, T) { ... }\n/* ... */\nimpl<T> From<[T; 12]> for (T, T, T, T, T, T, T, T, T, T, T, T) { ... }\n\nimpl<T> From<(T,)> for [T; 1] { ... }\nimpl<T> From<(T, T)> for [T; 2] { ... }\n/* ... */\nimpl<T> From<(T, T, T, T, T, T, T, T, T, T, T, T)> for [T; 12] { ... }\n```\n\nIMO these are quite uncontroversial but note that they are, just like any other trait impls, insta-stable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84d8159ebff3ba1d21da0affb53ed1d4b582ec12", "html_url": "https://github.com/rust-lang/rust/commit/84d8159ebff3ba1d21da0affb53ed1d4b582ec12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "473f916d836cc662c5bdbb0d40af9fb4678fab9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/473f916d836cc662c5bdbb0d40af9fb4678fab9e", "html_url": "https://github.com/rust-lang/rust/commit/473f916d836cc662c5bdbb0d40af9fb4678fab9e"}, {"sha": "de105164ea8733b2cab14cf8920f859a17574715", "url": "https://api.github.com/repos/rust-lang/rust/commits/de105164ea8733b2cab14cf8920f859a17574715", "html_url": "https://github.com/rust-lang/rust/commit/de105164ea8733b2cab14cf8920f859a17574715"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "e06ccb5b2870ca3fa67ba0d1d95bc3b3c6cff26b", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=84d8159ebff3ba1d21da0affb53ed1d4b582ec12", "patch": "@@ -610,6 +610,9 @@ mod prim_pointer {}\n /// if the element type allows it. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n+/// Arrays of sizes from 1 to 12 (inclusive) implement [`From<Tuple>`], where `Tuple`\n+/// is a homogenous [prim@tuple] of appropriate length.\n+///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n ///\n@@ -672,6 +675,13 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n+/// Arrays can be created from homogenous tuples of appropriate length:\n+///\n+/// ```\n+/// let tuple: (u32, u32, u32) = (1, 2, 3);\n+/// let array: [u32; 3] = tuple.into();\n+/// ```\n+///\n /// # Editions\n ///\n /// Prior to Rust 1.53, arrays did not implement [`IntoIterator`] by value, so the method call\n@@ -774,6 +784,7 @@ mod prim_pointer {}\n /// [`Borrow`]: borrow::Borrow\n /// [`BorrowMut`]: borrow::BorrowMut\n /// [slice pattern]: ../reference/patterns.html#slice-patterns\n+/// [`From<Tuple>`]: convert::From\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n@@ -1000,7 +1011,9 @@ mod prim_str {}\n /// * [`Debug`]\n /// * [`Default`]\n /// * [`Hash`]\n+/// * [`From<[T; N]>`][from]\n ///\n+/// [from]: convert::From\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash\n ///\n@@ -1051,6 +1064,13 @@ mod prim_str {}\n /// assert_eq!(y, 5);\n /// ```\n ///\n+/// Homogenous tuples can be created from arrays of appropriate length:\n+///\n+/// ```\n+/// let array: [u32; 3] = [1, 2, 3];\n+/// let tuple: (u32, u32, u32) = array.into();\n+/// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_tuple {}\n "}, {"sha": "c46c49547f6d43e377cf243a069a34ac27e0aae6", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=84d8159ebff3ba1d21da0affb53ed1d4b582ec12", "patch": "@@ -100,6 +100,26 @@ macro_rules! tuple_impls {\n                 }\n             }\n         }\n+\n+        #[stable(feature = \"array_tuple_conv\", since = \"1.63.0\")]\n+        impl<T> From<[T; ${count(T)}]> for ($(${ignore(T)} T,)+) {\n+            #[inline]\n+            #[allow(non_snake_case)]\n+            fn from(array: [T; ${count(T)}]) -> Self {\n+                let [$($T,)+] = array;\n+                ($($T,)+)\n+            }\n+        }\n+\n+        #[stable(feature = \"array_tuple_conv\", since = \"1.63.0\")]\n+        impl<T> From<($(${ignore(T)} T,)+)> for [T; ${count(T)}] {\n+            #[inline]\n+            #[allow(non_snake_case)]\n+            fn from(tuple: ($(${ignore(T)} T,)+)) -> Self {\n+                let ($($T,)+) = tuple;\n+                [$($T,)+]\n+            }\n+        }\n     }\n }\n "}, {"sha": "e06ccb5b2870ca3fa67ba0d1d95bc3b3c6cff26b", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=84d8159ebff3ba1d21da0affb53ed1d4b582ec12", "patch": "@@ -610,6 +610,9 @@ mod prim_pointer {}\n /// if the element type allows it. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n+/// Arrays of sizes from 1 to 12 (inclusive) implement [`From<Tuple>`], where `Tuple`\n+/// is a homogenous [prim@tuple] of appropriate length.\n+///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n ///\n@@ -672,6 +675,13 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n+/// Arrays can be created from homogenous tuples of appropriate length:\n+///\n+/// ```\n+/// let tuple: (u32, u32, u32) = (1, 2, 3);\n+/// let array: [u32; 3] = tuple.into();\n+/// ```\n+///\n /// # Editions\n ///\n /// Prior to Rust 1.53, arrays did not implement [`IntoIterator`] by value, so the method call\n@@ -774,6 +784,7 @@ mod prim_pointer {}\n /// [`Borrow`]: borrow::Borrow\n /// [`BorrowMut`]: borrow::BorrowMut\n /// [slice pattern]: ../reference/patterns.html#slice-patterns\n+/// [`From<Tuple>`]: convert::From\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n@@ -1000,7 +1011,9 @@ mod prim_str {}\n /// * [`Debug`]\n /// * [`Default`]\n /// * [`Hash`]\n+/// * [`From<[T; N]>`][from]\n ///\n+/// [from]: convert::From\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash\n ///\n@@ -1051,6 +1064,13 @@ mod prim_str {}\n /// assert_eq!(y, 5);\n /// ```\n ///\n+/// Homogenous tuples can be created from arrays of appropriate length:\n+///\n+/// ```\n+/// let array: [u32; 3] = [1, 2, 3];\n+/// let tuple: (u32, u32, u32) = array.into();\n+/// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_tuple {}\n "}, {"sha": "a4ba5da4d8724582dd2ae7cbfd0e6092881a9dd5", "filename": "tests/ui/issues/issue-32709.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/tests%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/tests%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-32709.stderr?ref=84d8159ebff3ba1d21da0affb53ed1d4b582ec12", "patch": "@@ -7,9 +7,16 @@ LL |     Err(5)?;\n    |           ^ the trait `From<{integer}>` is not implemented for `()`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = help: the following other types implement trait `FromResidual<R>`:\n-             <Result<T, F> as FromResidual<Result<Infallible, E>>>\n-             <Result<T, F> as FromResidual<Yeet<E>>>\n+   = help: the following other types implement trait `From<T>`:\n+             <(T, T) as From<[T; 2]>>\n+             <(T, T, T) as From<[T; 3]>>\n+             <(T, T, T, T) as From<[T; 4]>>\n+             <(T, T, T, T, T) as From<[T; 5]>>\n+             <(T, T, T, T, T, T) as From<[T; 6]>>\n+             <(T, T, T, T, T, T, T) as From<[T; 7]>>\n+             <(T, T, T, T, T, T, T, T) as From<[T; 8]>>\n+             <(T, T, T, T, T, T, T, T, T) as From<[T; 9]>>\n+           and 4 others\n    = note: required for `Result<i32, ()>` to implement `FromResidual<Result<Infallible, {integer}>>`\n \n error: aborting due to previous error"}, {"sha": "ea57992b48326232c6f431f48c073f0bbafefbaa", "filename": "tests/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/tests%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84d8159ebff3ba1d21da0affb53ed1d4b582ec12/tests%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=84d8159ebff3ba1d21da0affb53ed1d4b582ec12", "patch": "@@ -6,8 +6,14 @@ LL |     let _: &[i8] = data.into();\n    |\n    = help: the following other types implement trait `From<T>`:\n              <&'input [u8] as From<gimli::read::endian_slice::EndianSlice<'input, Endian>>>\n-             <[T; LANES] as From<Simd<T, LANES>>>\n-             <[bool; LANES] as From<Mask<T, LANES>>>\n+             <[T; 10] as From<(T, T, T, T, T, T, T, T, T, T)>>\n+             <[T; 11] as From<(T, T, T, T, T, T, T, T, T, T, T)>>\n+             <[T; 12] as From<(T, T, T, T, T, T, T, T, T, T, T, T)>>\n+             <[T; 1] as From<(T,)>>\n+             <[T; 2] as From<(T, T)>>\n+             <[T; 3] as From<(T, T, T)>>\n+             <[T; 4] as From<(T, T, T, T)>>\n+           and 7 others\n    = note: required for `&[u8]` to implement `Into<&[i8]>`\n \n error: aborting due to previous error"}]}