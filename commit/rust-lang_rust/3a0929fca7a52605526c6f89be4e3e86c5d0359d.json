{"sha": "3a0929fca7a52605526c6f89be4e3e86c5d0359d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMDkyOWZjYTdhNTI2MDU1MjZjNmY4OWJlNGUzZTg2YzVkMDM1OWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T09:02:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T09:02:54Z"}, "message": "Decouple", "tree": {"sha": "4917786a1df597ab44016a2f5c0a8eae67b852b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4917786a1df597ab44016a2f5c0a8eae67b852b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a0929fca7a52605526c6f89be4e3e86c5d0359d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0929fca7a52605526c6f89be4e3e86c5d0359d", "html_url": "https://github.com/rust-lang/rust/commit/3a0929fca7a52605526c6f89be4e3e86c5d0359d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a0929fca7a52605526c6f89be4e3e86c5d0359d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a306531e6aa7995145dc041166f68ea950aca1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a306531e6aa7995145dc041166f68ea950aca1a8", "html_url": "https://github.com/rust-lang/rust/commit/a306531e6aa7995145dc041166f68ea950aca1a8"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "a5bfef91f6dec0d9185f6d1dfd70214e9439043b", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a0929fca7a52605526c6f89be4e3e86c5d0359d/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0929fca7a52605526c6f89be4e3e86c5d0359d/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=3a0929fca7a52605526c6f89be4e3e86c5d0359d", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::{GenericDefId, LocalStructFieldId, TraitId, VariantId};\n+use hir_def::{GenericDefId, ImplId, LocalStructFieldId, TraitId, VariantId};\n use ra_arena::map::ArenaMap;\n use ra_db::{salsa, CrateId};\n \n@@ -13,7 +13,7 @@ use crate::{\n         CallableDef, FnSig, GenericPredicate, InferenceResult, Substs, Ty, TyDefId, TypeCtor,\n         ValueTyDefId,\n     },\n-    DefWithBody, ImplBlock,\n+    DefWithBody,\n };\n \n pub use hir_def::db::{\n@@ -63,7 +63,7 @@ pub trait HirDatabase: DefDatabase {\n     fn impls_in_crate(&self, krate: CrateId) -> Arc<CrateImplBlocks>;\n \n     #[salsa::invoke(crate::ty::traits::impls_for_trait_query)]\n-    fn impls_for_trait(&self, krate: CrateId, trait_: TraitId) -> Arc<[ImplBlock]>;\n+    fn impls_for_trait(&self, krate: CrateId, trait_: TraitId) -> Arc<[ImplId]>;\n \n     /// This provides the Chalk trait solver instance. Because Chalk always\n     /// works from a specific crate, this query is keyed on the crate; and"}, {"sha": "cf45ede7ce4f87d7764efabbef1712415b566446", "filename": "crates/ra_hir/src/ty/infer/coerce.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a0929fca7a52605526c6f89be4e3e86c5d0359d/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0929fca7a52605526c6f89be4e3e86c5d0359d/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs?ref=3a0929fca7a52605526c6f89be4e3e86c5d0359d", "patch": "@@ -4,13 +4,17 @@\n //!\n //! See: https://doc.rust-lang.org/nomicon/coercions.html\n \n-use hir_def::{lang_item::LangItemTarget, resolver::Resolver, AdtId};\n+use hir_def::{\n+    lang_item::LangItemTarget,\n+    resolver::{HasResolver, Resolver},\n+    AdtId,\n+};\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n use crate::{\n     db::HirDatabase,\n-    ty::{autoderef, Substs, Ty, TypeCtor, TypeWalk},\n+    ty::{autoderef, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n     Mutability,\n };\n \n@@ -57,9 +61,18 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         impls\n             .iter()\n-            .filter_map(|impl_block| {\n+            .filter_map(|&impl_id| {\n+                let impl_data = db.impl_data(impl_id);\n+                let resolver = impl_id.resolver(db);\n+                let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n+\n                 // `CoerseUnsized` has one generic parameter for the target type.\n-                let trait_ref = impl_block.target_trait_ref(db)?;\n+                let trait_ref = TraitRef::from_hir(\n+                    db,\n+                    &resolver,\n+                    impl_data.target_trait.as_ref()?,\n+                    Some(target_ty),\n+                )?;\n                 let cur_from_ty = trait_ref.substs.0.get(0)?;\n                 let cur_to_ty = trait_ref.substs.0.get(1)?;\n "}, {"sha": "93cb32869767075a01ead049f7c6288dc8a98224", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a0929fca7a52605526c6f89be4e3e86c5d0359d/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0929fca7a52605526c6f89be4e3e86c5d0359d/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=3a0929fca7a52605526c6f89be4e3e86c5d0359d", "patch": "@@ -2,7 +2,7 @@\n use std::sync::{Arc, Mutex};\n \n use chalk_ir::{cast::Cast, family::ChalkIr};\n-use hir_def::{expr::ExprId, DefWithBodyId, TraitId, TypeAliasId};\n+use hir_def::{expr::ExprId, DefWithBodyId, ImplId, TraitId, TypeAliasId};\n use log::debug;\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n@@ -79,7 +79,7 @@ pub(crate) fn impls_for_trait_query(\n     db: &impl HirDatabase,\n     krate: CrateId,\n     trait_: TraitId,\n-) -> Arc<[ImplBlock]> {\n+) -> Arc<[ImplId]> {\n     let mut impls = FxHashSet::default();\n     // We call the query recursively here. On the one hand, this means we can\n     // reuse results from queries for different crates; on the other hand, this\n@@ -90,7 +90,7 @@ pub(crate) fn impls_for_trait_query(\n         impls.extend(db.impls_for_trait(dep.crate_id, trait_).iter());\n     }\n     let crate_impl_blocks = db.impls_in_crate(krate);\n-    impls.extend(crate_impl_blocks.lookup_impl_blocks_for_trait(trait_).map(ImplBlock::from));\n+    impls.extend(crate_impl_blocks.lookup_impl_blocks_for_trait(trait_));\n     impls.into_iter().collect()\n }\n "}, {"sha": "7b2e530a2cb005dfbe5ec8e568ba4b594e7299c2", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0929fca7a52605526c6f89be4e3e86c5d0359d/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0929fca7a52605526c6f89be4e3e86c5d0359d/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=3a0929fca7a52605526c6f89be4e3e86c5d0359d", "patch": "@@ -453,7 +453,7 @@ where\n             .impls_for_trait(self.krate, trait_.into())\n             .iter()\n             .copied()\n-            .map(Impl::ImplBlock)\n+            .map(|it| Impl::ImplBlock(it.into()))\n             .map(|impl_| impl_.to_chalk(self.db))\n             .collect();\n "}]}