{"sha": "13d9f6a2640815aa1fa2a299e0ab364cd292cbfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZDlmNmEyNjQwODE1YWExZmEyYTI5OWUwYWIzNjRjZDI5MmNiZmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-18T20:08:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-18T20:08:54Z"}, "message": "rustc: Split out type variable fixups from unification", "tree": {"sha": "56d2387bcfa2c8597215c0a29c468c3423ac76a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d2387bcfa2c8597215c0a29c468c3423ac76a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d9f6a2640815aa1fa2a299e0ab364cd292cbfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d9f6a2640815aa1fa2a299e0ab364cd292cbfa", "html_url": "https://github.com/rust-lang/rust/commit/13d9f6a2640815aa1fa2a299e0ab364cd292cbfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d9f6a2640815aa1fa2a299e0ab364cd292cbfa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96516e9ca263574fa58c2f0a48348fa0d876be10", "url": "https://api.github.com/repos/rust-lang/rust/commits/96516e9ca263574fa58c2f0a48348fa0d876be10", "html_url": "https://github.com/rust-lang/rust/commit/96516e9ca263574fa58c2f0a48348fa0d876be10"}], "stats": {"total": 77, "additions": 40, "deletions": 37}, "files": [{"sha": "6b2ee1441bbabc9de515e82dfbeec193a942a3ec", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 26, "deletions": 36, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/13d9f6a2640815aa1fa2a299e0ab364cd292cbfa/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d9f6a2640815aa1fa2a299e0ab364cd292cbfa/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=13d9f6a2640815aa1fa2a299e0ab364cd292cbfa", "patch": "@@ -1869,14 +1869,14 @@ mod unify {\n                             hashmap[int,uint] var_ids,\n                             mutable vec[mutable vec[t]] types);\n \n-    fn mk_var_bindings() -> var_bindings {\n+    fn mk_var_bindings() -> @var_bindings {\n         let vec[mutable vec[t]] types = [mutable];\n-        ret rec(sets=ufind::make(),\n-                var_ids=common::new_int_hash[uint](),\n-                mutable types=types);\n+        ret @rec(sets=ufind::make(),\n+                 var_ids=common::new_int_hash[uint](),\n+                 mutable types=types);\n     }\n \n-    type ctxt = rec(var_bindings var_bindings,\n+    type ctxt = rec(@var_bindings var_bindings,\n                     unify_handler handler,\n                     ty_ctxt tcx);\n \n@@ -2519,17 +2519,19 @@ mod unify {\n     }\n \n     // Performs type binding substitution.\n-    fn substitute(&@ctxt cx, &vec[t] set_types, &t typ) -> t {\n-        if (!type_contains_vars(cx.tcx, typ)) {\n+    fn substitute(&ty_ctxt tcx, &@var_bindings var_bindings,\n+                  &vec[t] set_types, &t typ) -> t {\n+        if (!type_contains_vars(tcx, typ)) {\n             ret typ;\n         }\n \n-        fn substituter(@ctxt cx, vec[t] types, t typ) -> t {\n-            alt (struct(cx.tcx, typ)) {\n+        fn substituter(ty_ctxt tcx, @var_bindings var_bindings, vec[t] types,\n+                       t typ) -> t {\n+            alt (struct(tcx, typ)) {\n                 case (ty_var(?id)) {\n-                    alt (cx.var_bindings.var_ids.find(id)) {\n+                    alt (var_bindings.var_ids.find(id)) {\n                         case (some[uint](?n)) {\n-                            auto root = ufind::find(cx.var_bindings.sets, n);\n+                            auto root = ufind::find(var_bindings.sets, n);\n                             ret types.(root);\n                         }\n                         case (none[uint]) { ret typ; }\n@@ -2539,24 +2541,24 @@ mod unify {\n             }\n         }\n \n-        auto f = bind substituter(cx, set_types, _);\n-        ret fold_ty(cx.tcx, f, typ);\n+        auto f = bind substituter(tcx, var_bindings, set_types, _);\n+        ret fold_ty(tcx, f, typ);\n     }\n \n-    fn unify_sets(&@ctxt cx) -> vec[t] {\n+    fn unify_sets(&@var_bindings var_bindings) -> vec[t] {\n         let vec[t] throwaway = [];\n         let vec[mutable vec[t]] set_types = [mutable throwaway];\n         vec::pop[vec[t]](set_types);   // FIXME: botch\n \n-        for (ufind::node node in cx.var_bindings.sets.nodes) {\n+        for (ufind::node node in var_bindings.sets.nodes) {\n             let vec[t] v = [];\n             set_types += [mutable v];\n         }\n \n         auto i = 0u;\n         while (i < vec::len[vec[t]](set_types)) {\n-            auto root = ufind::find(cx.var_bindings.sets, i);\n-            set_types.(root) += cx.var_bindings.types.(i);\n+            auto root = ufind::find(var_bindings.sets, i);\n+            set_types.(root) += var_bindings.types.(i);\n             i += 1u;\n         }\n \n@@ -2576,27 +2578,15 @@ mod unify {\n     fn unify(&t expected,\n              &t actual,\n              &unify_handler handler,\n+             &@var_bindings var_bindings,\n              &ty_ctxt tcx) -> result {\n-        auto cx = @rec(var_bindings=mk_var_bindings(),\n-                       handler=handler,\n-                       tcx=tcx);\n-\n-        auto ures = unify_step(cx, expected, actual);\n-        alt (ures) {\n-        case (ures_ok(?typ)) {\n-            // Fast path: if there are no local variables, don't perform\n-            // substitutions.\n-            if (vec::len(cx.var_bindings.sets.nodes) == 0u) {\n-                ret ures_ok(typ);\n-            }\n+        auto cx = @rec(var_bindings=var_bindings, handler=handler, tcx=tcx);\n+        ret unify_step(cx, expected, actual);\n+    }\n \n-            auto set_types = unify_sets(cx);\n-            auto t2 = substitute(cx, set_types, typ);\n-            ret ures_ok(t2);\n-        }\n-        case (_) { ret ures; }\n-        }\n-        fail;   // not reached\n+    fn fixup(&ty_ctxt tcx, &@var_bindings var_bindings, t typ) -> t {\n+        auto set_types = unify_sets(var_bindings);\n+        ret substitute(tcx, var_bindings, set_types, typ);\n     }\n }\n "}, {"sha": "3bc0364a6841f8fb11caf4230fa401d181b71ca7", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13d9f6a2640815aa1fa2a299e0ab364cd292cbfa/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d9f6a2640815aa1fa2a299e0ab364cd292cbfa/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=13d9f6a2640815aa1fa2a299e0ab364cd292cbfa", "patch": "@@ -934,8 +934,21 @@ mod unify {\n \n \n         auto handler = unify_handler(fcx, param_substs);\n+\n+        auto var_bindings = ty::unify::mk_var_bindings();\n         auto result = ty::unify::unify(expected, actual, handler,\n-                                       fcx.ccx.tcx);\n+                                       var_bindings, fcx.ccx.tcx);\n+\n+        alt (result) {\n+            case (ures_ok(?rty)) {\n+                if (ty::type_contains_vars(fcx.ccx.tcx, rty)) {\n+                    result = ures_ok(ty::unify::fixup(fcx.ccx.tcx,\n+                                                      var_bindings, rty));\n+                }\n+            }\n+            case (_) { /* nothing */ }\n+        }\n+\n         fcx.ccx.unify_cache.insert(cache_key, result);\n         ret result;\n     }"}]}