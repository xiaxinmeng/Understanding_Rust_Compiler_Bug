{"sha": "8c74eb77902dc5c4fdf853e9159dd5fadd00601d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNzRlYjc3OTAyZGM1YzRmZGY4NTNlOTE1OWRkNWZhZGQwMDYwMWQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-03T07:21:58Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-03T10:15:07Z"}, "message": "Move path parsing earlier.\n\nIt's a hot enough path that moving it slightly earlier gives a tiny but\neasy speedup.", "tree": {"sha": "8f2ad13b73d82eb16b6f9bf882568c7a229551a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2ad13b73d82eb16b6f9bf882568c7a229551a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c74eb77902dc5c4fdf853e9159dd5fadd00601d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c74eb77902dc5c4fdf853e9159dd5fadd00601d", "html_url": "https://github.com/rust-lang/rust/commit/8c74eb77902dc5c4fdf853e9159dd5fadd00601d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c74eb77902dc5c4fdf853e9159dd5fadd00601d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8", "html_url": "https://github.com/rust-lang/rust/commit/dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "e502a08f4b253a879fa46a583b424fb2f3e716ef", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8c74eb77902dc5c4fdf853e9159dd5fadd00601d/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74eb77902dc5c4fdf853e9159dd5fadd00601d/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=8c74eb77902dc5c4fdf853e9159dd5fadd00601d", "patch": "@@ -889,6 +889,36 @@ impl<'a> Parser<'a> {\n                     hi = path.span;\n                     return Ok(self.mk_expr(lo.to(hi), ExprKind::Path(Some(qself), path), attrs));\n                 }\n+                if self.token.is_path_start() {\n+                    let path = self.parse_path(PathStyle::Expr)?;\n+\n+                    // `!`, as an operator, is prefix, so we know this isn't that\n+                    if self.eat(&token::Not) {\n+                        // MACRO INVOCATION expression\n+                        let (delim, tts) = self.expect_delimited_token_tree()?;\n+                        hi = self.prev_span;\n+                        ex = ExprKind::Mac(Mac {\n+                            path,\n+                            tts,\n+                            delim,\n+                            span: lo.to(hi),\n+                            prior_type_ascription: self.last_type_ascription,\n+                        });\n+                    } else if self.check(&token::OpenDelim(token::Brace)) {\n+                        if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n+                            return expr;\n+                        } else {\n+                            hi = path.span;\n+                            ex = ExprKind::Path(None, path);\n+                        }\n+                    } else {\n+                        hi = path.span;\n+                        ex = ExprKind::Path(None, path);\n+                    }\n+\n+                    let expr = self.mk_expr(lo.to(hi), ex, attrs);\n+                    return self.maybe_recover_from_bad_qpath(expr, true);\n+                }\n                 if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n                     return self.parse_lambda_expr(attrs);\n                 }\n@@ -1007,32 +1037,6 @@ impl<'a> Parser<'a> {\n                     let (await_hi, e_kind) = self.parse_incorrect_await_syntax(lo, self.prev_span)?;\n                     hi = await_hi;\n                     ex = e_kind;\n-                } else if self.token.is_path_start() {\n-                    let path = self.parse_path(PathStyle::Expr)?;\n-\n-                    // `!`, as an operator, is prefix, so we know this isn't that\n-                    if self.eat(&token::Not) {\n-                        // MACRO INVOCATION expression\n-                        let (delim, tts) = self.expect_delimited_token_tree()?;\n-                        hi = self.prev_span;\n-                        ex = ExprKind::Mac(Mac {\n-                            path,\n-                            tts,\n-                            delim,\n-                            span: lo.to(hi),\n-                            prior_type_ascription: self.last_type_ascription,\n-                        });\n-                    } else if self.check(&token::OpenDelim(token::Brace)) {\n-                        if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n-                            return expr;\n-                        } else {\n-                            hi = path.span;\n-                            ex = ExprKind::Path(None, path);\n-                        }\n-                    } else {\n-                        hi = path.span;\n-                        ex = ExprKind::Path(None, path);\n-                    }\n                 } else {\n                     if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {\n                         // Don't complain about bare semicolons after unclosed braces"}]}