{"sha": "341805288e8a055162bef64055a7962ecffbf103", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MTgwNTI4OGU4YTA1NTE2MmJlZjY0MDU1YTc5NjJlY2ZmYmYxMDM=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2016-11-03T23:20:11Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2016-11-30T10:09:29Z"}, "message": "Move small-copy optimization into copy_from_slice\n\nUltimately copy_from_slice is being a bottleneck, not io::Cursor::read.\nIt might be worthwhile to move the check here, so more places can\nbenefit from it.", "tree": {"sha": "191dd0cfdcf9725d05c20c976b27008f811df2e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/191dd0cfdcf9725d05c20c976b27008f811df2e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/341805288e8a055162bef64055a7962ecffbf103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/341805288e8a055162bef64055a7962ecffbf103", "html_url": "https://github.com/rust-lang/rust/commit/341805288e8a055162bef64055a7962ecffbf103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/341805288e8a055162bef64055a7962ecffbf103/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd7fade0a9c1c8762d2fba7c65c1b82e8d369711", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd7fade0a9c1c8762d2fba7c65c1b82e8d369711", "html_url": "https://github.com/rust-lang/rust/commit/cd7fade0a9c1c8762d2fba7c65c1b82e8d369711"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "b238623eabaa7752de5c40a27a3174d9d37ed37d", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/341805288e8a055162bef64055a7962ecffbf103/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341805288e8a055162bef64055a7962ecffbf103/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=341805288e8a055162bef64055a7962ecffbf103", "patch": "@@ -515,9 +515,19 @@ impl<T> SliceExt for [T] {\n     fn copy_from_slice(&mut self, src: &[T]) where T: Copy {\n         assert!(self.len() == src.len(),\n                 \"destination and source slices have different lengths\");\n-        unsafe {\n-            ptr::copy_nonoverlapping(\n-                src.as_ptr(), self.as_mut_ptr(), self.len());\n+        // First check if the amount of elements we want to copy is small:\n+        // `copy_nonoverlapping` will do a memcopy, which involves an indirect\n+        // function call when `memcpy` is in the dynamically-linked libc. For\n+        // small elements (such as a single byte or pointer), the overhead is\n+        // significant. If the element is big then the assignment is a memcopy\n+        // anyway.\n+        if self.len() == 1 {\n+            self[0] = src[0];\n+        } else {\n+            unsafe {\n+                ptr::copy_nonoverlapping(\n+                    src.as_ptr(), self.as_mut_ptr(), self.len());\n+            }\n         }\n     }\n "}, {"sha": "1b5023380a7833c9adc13422817cb75d2b0098fb", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/341805288e8a055162bef64055a7962ecffbf103/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341805288e8a055162bef64055a7962ecffbf103/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=341805288e8a055162bef64055a7962ecffbf103", "patch": "@@ -219,21 +219,9 @@ impl<T> io::Seek for Cursor<T> where T: AsRef<[u8]> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Read for Cursor<T> where T: AsRef<[u8]> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        // First check if the amount of bytes we want to read is small: the read\n-        // in the else branch will end up calling `<&[u8] as Read>::read()`,\n-        // which will copy the buffer using a memcopy. If we only want to read a\n-        // single byte, then the overhead of the function call is significant.\n-        let num_read = {\n-            let mut inner_buf = self.fill_buf()?;\n-            if buf.len() == 1 && inner_buf.len() > 0 {\n-                buf[0] = inner_buf[0];\n-                1\n-            } else {\n-                Read::read(&mut inner_buf, buf)?\n-            }\n-        };\n-        self.pos += num_read as u64;\n-        Ok(num_read)\n+        let n = Read::read(&mut self.fill_buf()?, buf)?;\n+        self.pos += n as u64;\n+        Ok(n)\n     }\n }\n "}]}