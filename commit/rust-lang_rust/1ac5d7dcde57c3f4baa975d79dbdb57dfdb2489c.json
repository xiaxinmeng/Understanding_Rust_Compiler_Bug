{"sha": "1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c", "node_id": "C_kwDOAAsO6NoAKDFhYzVkN2RjZGU1N2MzZjRiYWE5NzVkNzlkYmRiNTdkZmRiMjQ4OWM", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-11-10T18:55:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-11-10T19:07:43Z"}, "message": "std: Tweak expansion of thread-local const\n\nThis commit tweaks the expansion of `thread_local!` when combined with a\n`const { ... }` value to help ensure that the rules which apply to\n`const { ... }` blocks will be the same as when they're stabilized.\nPreviously with this invocation:\n\n    thread_local!(static NAME: Type = const { init_expr });\n\nthis would generate (on supporting platforms):\n\n    #[thread_local]\n    static NAME: Type = init_expr;\n\ninstead the macro now expands to:\n\n    const INIT_EXPR: Type = init_expr;\n    #[thread_local]\n    static NAME: Type = INIT_EXPR;\n\nwith the hope that because `init_expr` is defined as a `const` item then\nit's not accidentally allowing more behavior than if it were put into a\n`static`. For example on the stabilization issue [this example][ex] now\ngives the same error both ways.\n\n[ex]: https://github.com/rust-lang/rust/issues/84223#issuecomment-953384298", "tree": {"sha": "eae37e304a8d3f072dd69823d59c2601447e858c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae37e304a8d3f072dd69823d59c2601447e858c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c", "html_url": "https://github.com/rust-lang/rust/commit/1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68ca579406f2fa9ec62710e4a4d5d3e07a168d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ca579406f2fa9ec62710e4a4d5d3e07a168d3c", "html_url": "https://github.com/rust-lang/rust/commit/68ca579406f2fa9ec62710e4a4d5d3e07a168d3c"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b27db8761769427c985d12f29f994a2026ee2728", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=1ac5d7dcde57c3f4baa975d79dbdb57dfdb2489c", "patch": "@@ -165,6 +165,7 @@ macro_rules! __thread_local_inner {\n         #[cfg_attr(not(windows), inline)] // see comments below\n         unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n             const _REQUIRE_UNSTABLE: () = $crate::thread::require_unstable_const_init_thread_local();\n+            const INIT_EXPR: $t = $init;\n \n             // wasm without atomics maps directly to `static mut`, and dtors\n             // aren't implemented because thread dtors aren't really a thing\n@@ -174,7 +175,7 @@ macro_rules! __thread_local_inner {\n             // block.\n             #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n             {\n-                static mut VAL: $t = $init;\n+                static mut VAL: $t = INIT_EXPR;\n                 Some(&VAL)\n             }\n \n@@ -184,18 +185,17 @@ macro_rules! __thread_local_inner {\n                 not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\n             ))]\n             {\n+                #[thread_local]\n+                static mut VAL: $t = INIT_EXPR;\n+\n                 // If a dtor isn't needed we can do something \"very raw\" and\n                 // just get going.\n                 if !$crate::mem::needs_drop::<$t>() {\n-                    #[thread_local]\n-                    static mut VAL: $t = $init;\n                     unsafe {\n                         return Some(&VAL)\n                     }\n                 }\n \n-                #[thread_local]\n-                static mut VAL: $t = $init;\n                 // 0 == dtor not registered\n                 // 1 == dtor registered, dtor not run\n                 // 2 == dtor registered and is running or has run\n@@ -242,7 +242,7 @@ macro_rules! __thread_local_inner {\n             ))]\n             {\n                 #[inline]\n-                const fn __init() -> $t { $init }\n+                const fn __init() -> $t { INIT_EXPR }\n                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n                     $crate::thread::__OsLocalKeyInner::new();\n                 #[allow(unused_unsafe)]"}]}