{"sha": "5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViY2Y5ZjRmMTE5YjgxMDljNmM2NDJkY2ZlYjYzZmIzOWMyNjk1MGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-24T12:29:57Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-24T14:36:43Z"}, "message": "Slightly more uniform treatment of struct and variant constructors", "tree": {"sha": "e2672ad513173d8ad73ee42754b3d178936331ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2672ad513173d8ad73ee42754b3d178936331ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "html_url": "https://github.com/rust-lang/rust/commit/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f5a8dcdb95b07234d323cad8492bef96f2bee1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5a8dcdb95b07234d323cad8492bef96f2bee1b", "html_url": "https://github.com/rust-lang/rust/commit/7f5a8dcdb95b07234d323cad8492bef96f2bee1b"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "6567d9e8c7a9d2ff9840edac4bb5feaf30e00b8f", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "patch": "@@ -37,13 +37,11 @@ pub enum NonMacroAttrKind {\n pub enum Def {\n     // Type namespace\n     Mod(DefId),\n-    /// `DefId` refers to `NodeId` of the struct. `Def::VariantCtor` represents the constructor of\n-    /// a struct.\n+    /// `DefId` refers to the struct itself, `Def::Ctor` refers to its constructor if it exists.\n     Struct(DefId),\n     Union(DefId),\n     Enum(DefId),\n-    /// `DefId` refers to the `NodeId` of the variant. `Def::VariantCtor` represents the\n-    /// constructor of an enum variant.\n+    /// `DefId` refers to the variant itself, `Def::Ctor` refers to its constructor if it exists.\n     Variant(DefId),\n     Trait(DefId),\n     /// `existential type Foo: Bar;`\n@@ -65,7 +63,7 @@ pub enum Def {\n     Const(DefId),\n     ConstParam(DefId),\n     Static(DefId, bool /* is_mutbl */),\n-    /// `DefId` refers to `NodeId` of the struct or enum variant's constructor.\n+    /// `DefId` refers to the struct or enum variant's constructor.\n     Ctor(hir::CtorOf, DefId, CtorKind),\n     SelfCtor(DefId /* impl */),  // `DefId` refers to the impl\n     Method(DefId),"}, {"sha": "3ab3ae0c537bb0732a21b54c99d2b26c4afa3581", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "patch": "@@ -2322,8 +2322,8 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     pub fn variant_of_def(&self, def: Def) -> &VariantDef {\n         match def {\n             Def::Variant(vid) => self.variant_with_id(vid),\n-            Def::Ctor(hir::CtorOf::Variant, cid, ..) => self.variant_with_ctor_id(cid),\n-            Def::Struct(..) | Def::Ctor(..) | Def::Union(..) |\n+            Def::Ctor(_, cid, ..) => self.variant_with_ctor_id(cid),\n+            Def::Struct(..) | Def::Union(..) |\n             Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) |\n             Def::SelfCtor(..) => self.non_enum_variant(),\n             _ => bug!(\"unexpected def {:?} in variant_of_def\", def)"}, {"sha": "27dba512dfb58363c24c33ceeeb4f735a9143a6c", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "patch": "@@ -261,10 +261,8 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     // Tuple-like ADTs are represented as ExprKind::Call. We convert them here.\n                     expr_ty.ty_adt_def().and_then(|adt_def| {\n                         match path.def {\n-                            Def::Ctor(hir::CtorOf::Variant, variant_ctor_id, CtorKind::Fn) => {\n-                                Some((adt_def, adt_def.variant_index_with_ctor_id(variant_ctor_id)))\n-                            }\n-                            Def::Ctor(hir::CtorOf::Struct, _, CtorKind::Fn) |\n+                            Def::Ctor(_, ctor_id, CtorKind::Fn) =>\n+                                Some((adt_def, adt_def.variant_index_with_ctor_id(ctor_id))),\n                             Def::SelfCtor(..) => Some((adt_def, VariantIdx::new(0))),\n                             _ => None,\n                         }"}, {"sha": "dbd323821949db6a3f3a4535c0c3af3d50bdef1c", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "patch": "@@ -2,7 +2,7 @@ use std::cmp::Reverse;\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use log::debug;\n-use rustc::hir::{self, def::*};\n+use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def::Namespace::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::session::config::nightly_options;\n@@ -417,7 +417,7 @@ impl<'a> Resolver<'a> {\n             }\n             (Def::Union(..), _) |\n             (Def::Variant(..), _) |\n-            (Def::Ctor(hir::CtorOf::Variant, _, CtorKind::Fictive), _) if ns == ValueNS => {\n+            (Def::Ctor(_, _, CtorKind::Fictive), _) if ns == ValueNS => {\n                 err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n                                              path_str));\n             }"}, {"sha": "5f46a5a165213470d68f15b2f1f9c6fb22d07348", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "patch": "@@ -807,13 +807,13 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 report_unexpected_variant_def(tcx, &def, pat.span, qpath);\n                 return tcx.types.err;\n             }\n-            Def::Ctor(hir::CtorOf::Variant, _, CtorKind::Fictive) |\n-            Def::Ctor(hir::CtorOf::Variant, _, CtorKind::Fn) => {\n+            Def::Ctor(_, _, CtorKind::Fictive) |\n+            Def::Ctor(_, _, CtorKind::Fn) => {\n                 report_unexpected_variant_def(tcx, &def, pat.span, qpath);\n                 return tcx.types.err;\n             }\n-            Def::Ctor(_, _, CtorKind::Const) | Def::SelfCtor(..) | Def::Const(..) |\n-            Def::AssociatedConst(..) => {} // OK\n+            Def::Ctor(_, _, CtorKind::Const) | Def::SelfCtor(..) |\n+            Def::Const(..) | Def::AssociatedConst(..) => {} // OK\n             _ => bug!(\"unexpected pattern definition: {:?}\", def)\n         }\n "}, {"sha": "e842be0d7e1a5b72efa28eefe8d4d283f1dde5e5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "patch": "@@ -4238,7 +4238,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         self.set_tainted_by_errors();\n                         tcx.types.err\n                     }\n-                    Def::Ctor(hir::CtorOf::Variant, _, CtorKind::Fictive) => {\n+                    Def::Ctor(_, _, CtorKind::Fictive) => {\n                         report_unexpected_variant_def(tcx, &def, expr.span, qpath);\n                         tcx.types.err\n                     }"}]}