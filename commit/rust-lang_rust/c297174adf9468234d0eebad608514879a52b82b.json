{"sha": "c297174adf9468234d0eebad608514879a52b82b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOTcxNzRhZGY5NDY4MjM0ZDBlZWJhZDYwODUxNDg3OWE1MmI4MmI=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-26T08:07:00Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-27T05:16:02Z"}, "message": "export `derefs_to_slice` from methods module", "tree": {"sha": "0bcc084caf8b64e95f7a6e5b1604a0ac6cd096a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bcc084caf8b64e95f7a6e5b1604a0ac6cd096a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c297174adf9468234d0eebad608514879a52b82b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c297174adf9468234d0eebad608514879a52b82b", "html_url": "https://github.com/rust-lang/rust/commit/c297174adf9468234d0eebad608514879a52b82b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c297174adf9468234d0eebad608514879a52b82b/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77907e6dab42dd0acc23c0cf1d540d2aa3e32bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/77907e6dab42dd0acc23c0cf1d540d2aa3e32bb8", "html_url": "https://github.com/rust-lang/rust/commit/77907e6dab42dd0acc23c0cf1d540d2aa3e32bb8"}], "stats": {"total": 97, "additions": 48, "deletions": 49}, "files": [{"sha": "1b99bacc3f1c2c9f70b059afcfa1b6303059c617", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c297174adf9468234d0eebad608514879a52b82b/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297174adf9468234d0eebad608514879a52b82b/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=c297174adf9468234d0eebad608514879a52b82b", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    derefs_to_slice, is_type_diagnostic_item, match_type, paths, snippet_with_applicability, span_lint_and_sugg,\n-};\n+use crate::methods::derefs_to_slice;\n+use crate::utils::{is_type_diagnostic_item, match_type, paths, snippet_with_applicability, span_lint_and_sugg};\n \n use rustc_errors::Applicability;\n use rustc_hir::Expr;"}, {"sha": "30830fb0af6516bc975ff975fe5d85cd42b729d0", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c297174adf9468234d0eebad608514879a52b82b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297174adf9468234d0eebad608514879a52b82b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c297174adf9468234d0eebad608514879a52b82b", "patch": "@@ -33,12 +33,12 @@ use crate::consts::{constant, Constant};\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    contains_return, contains_ty, derefs_to_slice, get_parent_expr, get_trait_def_id, has_iter_method, higher,\n-    implements_trait, in_macro, is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n-    match_def_path, match_qpath, match_trait_method, match_type, meets_msrv, method_calls, method_chain_args,\n-    path_to_local_id, paths, remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability,\n-    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, strip_pat_refs,\n-    sugg, walk_ptrs_ty_depth, SpanlessEq,\n+    contains_return, contains_ty, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n+    in_macro, is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path,\n+    match_qpath, match_trait_method, match_type, meets_msrv, method_calls, method_chain_args, path_to_local_id, paths,\n+    remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite,\n+    span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, strip_pat_refs, sugg, walk_ptrs_ty_depth,\n+    SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -2803,6 +2803,46 @@ fn lint_iter_skip_next(cx: &LateContext<'_>, expr: &hir::Expr<'_>, skip_args: &[\n     }\n }\n \n+pub(crate) fn derefs_to_slice<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Option<&'tcx hir::Expr<'tcx>> {\n+    fn may_slice<'a>(cx: &LateContext<'a>, ty: Ty<'a>) -> bool {\n+        match ty.kind() {\n+            ty::Slice(_) => true,\n+            ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n+            ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::vec_type),\n+            ty::Array(_, size) => size\n+                .try_eval_usize(cx.tcx, cx.param_env)\n+                .map_or(false, |size| size < 32),\n+            ty::Ref(_, inner, _) => may_slice(cx, inner),\n+            _ => false,\n+        }\n+    }\n+\n+    if let hir::ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind {\n+        if path.ident.name == sym::iter && may_slice(cx, cx.typeck_results().expr_ty(&args[0])) {\n+            Some(&args[0])\n+        } else {\n+            None\n+        }\n+    } else {\n+        match ty.kind() {\n+            ty::Slice(_) => Some(expr),\n+            ty::Adt(def, _) if def.is_box() && may_slice(cx, ty.boxed_ty()) => Some(expr),\n+            ty::Ref(_, inner, _) => {\n+                if may_slice(cx, inner) {\n+                    Some(expr)\n+                } else {\n+                    None\n+                }\n+            },\n+            _ => None,\n+        }\n+    }\n+}\n+\n /// lint use of `unwrap()` for `Option`s and `Result`s\n fn lint_unwrap(cx: &LateContext<'_>, expr: &hir::Expr<'_>, unwrap_args: &[hir::Expr<'_>]) {\n     let obj_ty = cx.typeck_results().expr_ty(&unwrap_args[0]).peel_refs();"}, {"sha": "2380ea4c7bfaec4a63c548cad390b9d3621c843c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c297174adf9468234d0eebad608514879a52b82b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297174adf9468234d0eebad608514879a52b82b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=c297174adf9468234d0eebad608514879a52b82b", "patch": "@@ -1802,46 +1802,6 @@ pub fn is_some_ctor(cx: &LateContext<'_>, res: Res) -> bool {\n     false\n }\n \n-pub fn derefs_to_slice<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'tcx>,\n-    ty: Ty<'tcx>,\n-) -> Option<&'tcx hir::Expr<'tcx>> {\n-    fn may_slice<'a>(cx: &LateContext<'a>, ty: Ty<'a>) -> bool {\n-        match ty.kind() {\n-            ty::Slice(_) => true,\n-            ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n-            ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::vec_type),\n-            ty::Array(_, size) => size\n-                .try_eval_usize(cx.tcx, cx.param_env)\n-                .map_or(false, |size| size < 32),\n-            ty::Ref(_, inner, _) => may_slice(cx, inner),\n-            _ => false,\n-        }\n-    }\n-\n-    if let hir::ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind {\n-        if path.ident.name == sym::iter && may_slice(cx, cx.typeck_results().expr_ty(&args[0])) {\n-            Some(&args[0])\n-        } else {\n-            None\n-        }\n-    } else {\n-        match ty.kind() {\n-            ty::Slice(_) => Some(expr),\n-            ty::Adt(def, _) if def.is_box() && may_slice(cx, ty.boxed_ty()) => Some(expr),\n-            ty::Ref(_, inner, _) => {\n-                if may_slice(cx, inner) {\n-                    Some(expr)\n-                } else {\n-                    None\n-                }\n-            },\n-            _ => None,\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod test {\n     use super::{reindent_multiline, without_block_comments};"}]}