{"url": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/318", "id": 602218552, "node_id": "MDExOlB1bGxSZXF1ZXN0NjAyMjE4NTUy", "html_url": "https://github.com/Rust-GCC/gccrs/pull/318", "diff_url": "https://github.com/Rust-GCC/gccrs/pull/318.diff", "patch_url": "https://github.com/Rust-GCC/gccrs/pull/318.patch", "issue_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/318", "number": 318, "state": "closed", "locked": false, "title": "Proof of concept 2: First-class s-expression, inline visitors, and polymorphic values", "user": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "body": "Here I present three pieces of \"experimental technology\" that may be useful for the project. I took the idea from various sources and implemented them from scratch. Maybe some of these can make it into the codebase? I'd love to hear your thoughts and suggestions.\r\n\r\n# First-class s-expression\r\n\r\nTaking inspiration from [nlohmann's excellent JSON library](https://github.com/nlohmann/json), this new design stores an s-expression using an intermediate data structure. This enables the use of braces to construct compound expressions. Further more, custom conversion can be implemented via functions instead of methods, so no more polluting the class interface:)\r\n\r\nExample:\r\n\r\n```c++\r\n// use sexp() as a conversion function\r\nauto e1 = sexp(\"hello\");\r\n\r\n// serialize by calling to_string()\r\nauto s1 = e1.to_string(); // \"hello\"\r\n\r\n// use brace initializer lists to create compound expressions\r\n// supported datatypes are strings, integers, and floats\r\nauto e2 = sexp{e1, 123, {\"inner\", \"expression\"}};\r\nauto s2 = e2.to_string(); // \"(hello 123 (inner expression))\r\n\r\n// define conversion function for custom types\r\nstruct MyArray {\r\n    std::vector<std::string> items;\r\n};\r\n\r\nsexp to_sexp(const MyArray& arr) {\r\n    return sexp{\"MyArray\", {\"item_count\", items.size}, {\"items\", items}};\r\n}\r\n```\r\n\r\nThis design also plays nicely with visitor patterns. A custom conversion function only needs to be defined for the base type, either implemented as you normally would with visitor patterns, or with inline visitors(see below).\r\n\r\n# Inline visitors\r\n\r\nA lot of my complaints about visitors are due to their verbosity--for every operation on an ADT, you have to write an \"Resolver\" class. [Inline visitors](https://members.accu.org/index.php/articles/2021) make operations on ADTs much more lightweight.\r\n\r\nExample:\r\n\r\n```c++\r\n// The usual setup. Skip to main() for the interesting part.\r\nclass BaseVisitor {\r\n  public:\r\n    virtual void visit(DerivedA& a) = 0;\r\n    virtual void visit(DerivedB& b) = 0;\r\n}\r\n\r\nclass Base {\r\n  public:\r\n    virtual ~Base() = default;\r\n\r\n    virtual accept_vis(BaseVisitor& vis) = 0;\r\n};\r\n\r\nclass DerivedA : public Base {\r\n  public:\r\n    int some_operation() { return 42; }\r\n\r\n    virtual void accept_vis(BaseVisitor& vis) override { vis.visit(*this); }\r\n}\r\n\r\nclass DerivedB : public Base {\r\n  public:\r\n    int some_other_operation() { return 13; }\r\n\r\n    virtual void accept_vis(BaseVisitor& vis) override { vis.visit(*this); }\r\n}\r\n\r\nint main() {\r\n    Base *obj = new DerivedA();\r\n\r\n    // define an inline visitor\r\n    // can use captured variables to return results\r\n    int ret;\r\n    auto vis = begin_visitor<BaseVisitor>()\r\n                 .on<DerivedA>([&ret](DerivedA& a) {\r\n                     ret = a.some_operation();\r\n                 })\r\n                 .on<DerivedB>([&ret](DerivedB& b) {\r\n                     ret = b.some_other_operation();\r\n                 })\r\n                 .end_visitor();\r\n\r\n    // apply the visitor as usual\r\n    obj->accept_vis(vis);\r\n}\r\n```\r\n\r\n# Polymorphic values\r\n\r\nAs a compiler project we're mostly concerned with tree-like ADTs, such as AST and HIR. To implement the visitor pattern, we store sub-trees using pointers, instead of composing values directly. On the other hand, we would like these data to be copy-able. Unfortunately, that means implementing copy constructors and `clone()` methods for every single data class. It is a mess.\r\n\r\nWouldn't it be nice if pointers could copy their underlying value automatically? That's what [polymorphic values](https://github.com/jbcoe/polymorphic_value) accomplish. It's a wrapper around `std::unique_ptr` that implements deep copying for you.\r\n\r\nExample:\r\n\r\n```c++\r\nclass Base {\r\n  public:\r\n    virtual ~Base() = default;\r\n    virtual std::string get_content() = 0;\r\n};\r\n\r\nclass Derived : public Base {\r\n  private:\r\n    std::string _content;\r\n  public:\r\n    Derived(const std::string& content) : _content(content) {}\r\n\r\n    virtual std::string get_content() override { return _content; }\r\n};\r\n\r\nint main() {\r\n    // create a polymorphic value\r\n    poly<Base> obj = make_poly<DerivedA>(\"Hello\");\r\n    obj->get_content(); // \"Hello\"\r\n\r\n    // copy a polymorphic value\r\n    auto obj2 = obj; // calls Derived's copy constructor\r\n    obj2->get_content(); // \"Hello\"\r\n\r\n    // you can put poly inside structs or containers, and it just works\r\n    auto arr = std::vector<poly<Base>>{obj, obj2}; // call copy constructor twice\r\n}\r\n```\r\n\r\n---\r\n\r\nWith these experiments done, I'll get back to the usual bug fixing and house keeping. I'll also be preparing for my GSoC proposal--probably on the topic of HIR dump.", "created_at": "2021-03-28T10:18:27Z", "updated_at": "2021-05-04T05:17:27Z", "closed_at": "2021-05-04T05:17:26Z", "merged_at": null, "merge_commit_sha": "36b85df655f874014ca7d05dd1f2eca970370f3b", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 61372777, "node_id": "MDU6TGFiZWw2MTM3Mjc3Nw==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 2029815872, "node_id": "MDU6TGFiZWwyMDI5ODE1ODcy", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/WIP", "name": "WIP", "color": "f9d0c4", "default": false, "description": ""}, {"id": 2029873897, "node_id": "MDU6TGFiZWwyMDI5ODczODk3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/plan", "name": "plan", "color": "42ed5c", "default": false, "description": ""}, {"id": 2642482874, "node_id": "MDU6TGFiZWwyNjQyNDgyODc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/cleanup", "name": "cleanup", "color": "E22959", "default": false, "description": ""}], "milestone": null, "draft": true, "commits_url": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/318/commits", "review_comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/318/comments", "review_comment_url": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/318/comments", "statuses_url": "https://api.github.com/repos/Rust-GCC/gccrs/statuses/23b8364b9004b9ab56e672b0e7c3ccce0c461b52", "head": {"label": "YizhePKU:sexp-2", "ref": "sexp-2", "sha": "23b8364b9004b9ab56e672b0e7c3ccce0c461b52", "user": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "repo": null}, "base": {"label": "Rust-GCC:master", "ref": "master", "sha": "cf10b0258810aaa4d4241af2ee28e7469e12cb89", "user": {"login": "Rust-GCC", "id": 74917047, "node_id": "MDEyOk9yZ2FuaXphdGlvbjc0OTE3MDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/74917047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rust-GCC", "html_url": "https://github.com/Rust-GCC", "followers_url": "https://api.github.com/users/Rust-GCC/followers", "following_url": "https://api.github.com/users/Rust-GCC/following{/other_user}", "gists_url": "https://api.github.com/users/Rust-GCC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rust-GCC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rust-GCC/subscriptions", "organizations_url": "https://api.github.com/users/Rust-GCC/orgs", "repos_url": "https://api.github.com/users/Rust-GCC/repos", "events_url": "https://api.github.com/users/Rust-GCC/events{/privacy}", "received_events_url": "https://api.github.com/users/Rust-GCC/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 13653100, "node_id": "MDEwOlJlcG9zaXRvcnkxMzY1MzEwMA==", "name": "gccrs", "full_name": "Rust-GCC/gccrs", "private": false, "owner": {"login": "Rust-GCC", "id": 74917047, "node_id": "MDEyOk9yZ2FuaXphdGlvbjc0OTE3MDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/74917047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rust-GCC", "html_url": "https://github.com/Rust-GCC", "followers_url": "https://api.github.com/users/Rust-GCC/followers", "following_url": "https://api.github.com/users/Rust-GCC/following{/other_user}", "gists_url": "https://api.github.com/users/Rust-GCC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rust-GCC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rust-GCC/subscriptions", "organizations_url": "https://api.github.com/users/Rust-GCC/orgs", "repos_url": "https://api.github.com/users/Rust-GCC/repos", "events_url": "https://api.github.com/users/Rust-GCC/events{/privacy}", "received_events_url": "https://api.github.com/users/Rust-GCC/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/Rust-GCC/gccrs", "description": "GCC Front-End for Rust", "fork": false, "url": "https://api.github.com/repos/Rust-GCC/gccrs", "forks_url": "https://api.github.com/repos/Rust-GCC/gccrs/forks", "keys_url": "https://api.github.com/repos/Rust-GCC/gccrs/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/Rust-GCC/gccrs/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/Rust-GCC/gccrs/teams", "hooks_url": "https://api.github.com/repos/Rust-GCC/gccrs/hooks", "issue_events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/events{/number}", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/events", "assignees_url": "https://api.github.com/repos/Rust-GCC/gccrs/assignees{/user}", "branches_url": "https://api.github.com/repos/Rust-GCC/gccrs/branches{/branch}", "tags_url": "https://api.github.com/repos/Rust-GCC/gccrs/tags", "blobs_url": "https://api.github.com/repos/Rust-GCC/gccrs/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/Rust-GCC/gccrs/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/Rust-GCC/gccrs/git/refs{/sha}", "trees_url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/Rust-GCC/gccrs/statuses/{sha}", "languages_url": "https://api.github.com/repos/Rust-GCC/gccrs/languages", "stargazers_url": "https://api.github.com/repos/Rust-GCC/gccrs/stargazers", "contributors_url": "https://api.github.com/repos/Rust-GCC/gccrs/contributors", "subscribers_url": "https://api.github.com/repos/Rust-GCC/gccrs/subscribers", "subscription_url": "https://api.github.com/repos/Rust-GCC/gccrs/subscription", "commits_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits{/sha}", "git_commits_url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits{/sha}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/comments{/number}", "issue_comment_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/comments{/number}", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/{+path}", "compare_url": "https://api.github.com/repos/Rust-GCC/gccrs/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/Rust-GCC/gccrs/merges", "archive_url": "https://api.github.com/repos/Rust-GCC/gccrs/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/Rust-GCC/gccrs/downloads", "issues_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues{/number}", "pulls_url": "https://api.github.com/repos/Rust-GCC/gccrs/pulls{/number}", "milestones_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones{/number}", "notifications_url": "https://api.github.com/repos/Rust-GCC/gccrs/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/labels{/name}", "releases_url": "https://api.github.com/repos/Rust-GCC/gccrs/releases{/id}", "deployments_url": "https://api.github.com/repos/Rust-GCC/gccrs/deployments", "created_at": "2013-10-17T15:30:28Z", "updated_at": "2023-06-20T09:08:24Z", "pushed_at": "2023-06-20T21:29:48Z", "git_url": "git://github.com/Rust-GCC/gccrs.git", "ssh_url": "git@github.com:Rust-GCC/gccrs.git", "clone_url": "https://github.com/Rust-GCC/gccrs.git", "svn_url": "https://github.com/Rust-GCC/gccrs", "homepage": "https://rust-gcc.github.io/", "size": 1252381, "stargazers_count": 2035, "watchers_count": 2035, "language": null, "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "has_discussions": true, "forks_count": 127, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 300, "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "gcc", "gcc-rust", "hacktoberfest", "rust", "rust-lang"], "visibility": "public", "forks": 127, "open_issues": 300, "watchers": 2035, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/318"}, "html": {"href": "https://github.com/Rust-GCC/gccrs/pull/318"}, "issue": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/issues/318"}, "comments": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/issues/318/comments"}, "review_comments": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/318/comments"}, "review_comment": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/318/commits"}, "statuses": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/statuses/23b8364b9004b9ab56e672b0e7c3ccce0c461b52"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 12, "review_comments": 7, "maintainer_can_modify": false, "commits": 5, "additions": 405, "deletions": 0, "changed_files": 4}