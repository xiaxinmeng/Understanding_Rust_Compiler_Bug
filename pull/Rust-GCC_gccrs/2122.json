{"url": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/2122", "id": 1312515323, "node_id": "PR_kwDOANBUbM5OO2T7", "html_url": "https://github.com/Rust-GCC/gccrs/pull/2122", "diff_url": "https://github.com/Rust-GCC/gccrs/pull/2122.diff", "patch_url": "https://github.com/Rust-GCC/gccrs/pull/2122.patch", "issue_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2122", "number": 2122, "state": "closed", "locked": false, "title": "Fix Bad formatting in AST expanded dump with associated types", "user": {"login": "ArberSephirotheca", "id": 19250266, "node_id": "MDQ6VXNlcjE5MjUwMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/19250266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArberSephirotheca", "html_url": "https://github.com/ArberSephirotheca", "followers_url": "https://api.github.com/users/ArberSephirotheca/followers", "following_url": "https://api.github.com/users/ArberSephirotheca/following{/other_user}", "gists_url": "https://api.github.com/users/ArberSephirotheca/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArberSephirotheca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArberSephirotheca/subscriptions", "organizations_url": "https://api.github.com/users/ArberSephirotheca/orgs", "repos_url": "https://api.github.com/users/ArberSephirotheca/repos", "events_url": "https://api.github.com/users/ArberSephirotheca/events{/privacy}", "received_events_url": "https://api.github.com/users/ArberSephirotheca/received_events", "type": "User", "site_admin": false}, "body": "gcc/rust/ChangeLog:\r\n\r\n        * ast/rust-ast-dump.cc: implement visit() function for QualifiedPathInType.\r\n                                Fixed bad formatting of type alias in ast dump.\r\n\r\nFixes #2023 \r\n\r\nOutput of AST expanded dump when running the code the linked issue:\r\n```\r\nmacro_rules! forward_ref_binop{\r\n\t(impl $imp:ident , $method:ident for $t:ty , $u:ty) => \r\n\t\t{ forward_ref_binop ! ( impl $ imp , $ method for $ t , $ u , # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] ) ; }\r\n\t;\r\n\t(impl $imp:ident , $method:ident for $t:ty , $u:ty , # [$attr:meta]) => \r\n\t\t{ # [ $ attr ] impl < a > $ imp < $ u > for & a $ t { type Output = < $ t as $ imp < $ u >> :: Output ; # [ inline ] fn $ method ( self , other : $ u ) -> < $ t as $ imp < $ u >> :: Output { $ imp :: $ method ( * self , other ) } } # [ $ attr ] impl < a > $ imp < & a $ u > for $ t { type Output = < $ t as $ imp < $ u >> :: Output ; # [ inline ] fn $ method ( self , other : & a $ u ) -> < $ t as $ imp < $ u >> :: Output { $ imp :: $ method ( self , * other ) } } # [ $ attr ] impl < a , b > $ imp < & a $ u > for & b $ t { type Output = < $ t as $ imp < $ u >> :: Output ; # [ inline ] fn $ method ( self , other : & a $ u ) -> < $ t as $ imp < $ u >> :: Output { $ imp :: $ method ( * self , * other ) } } }\r\n\t;\r\n}\r\n\r\n#[lang = \"add\"]\r\npub trait Add{\r\n\t\ttype Output;\r\n\r\n\tfn add(self, rhs: RHS) -> Self::Output;\r\n\r\n}\r\n\r\nmacro_rules! add_impl{\r\n\t($($t:ty)*) => \r\n\t\t( $ ( # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] impl Add for $ t { type Output = $ t ; fn add ( self , other : $ t ) -> $ t { self + other } } forward_ref_binop ! { impl Add , add for $ t , $ t } ) * )\r\n\t;\r\n}\r\n\r\nimpl Add for usize {\r\n\ttype Output = usize;\r\n\tfn add(self, other: usize) -> usize {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<usize> for &'a usize {\r\n\ttype Output = <usize as Add<usize>>::Output;\r\n\tfn add(self, other: usize) -> <usize as Add<usize>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a usize> for usize {\r\n\ttype Output = <usize as Add<usize>>::Output;\r\n\tfn add(self, other: &'a usize) -> <usize as Add<usize>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a usize> for &'b usize {\r\n\ttype Output = <usize as Add<usize>>::Output;\r\n\tfn add(self, other: &'a usize) -> <usize as Add<usize>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for u8 {\r\n\ttype Output = u8;\r\n\tfn add(self, other: u8) -> u8 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<u8> for &'a u8 {\r\n\ttype Output = <u8 as Add<u8>>::Output;\r\n\tfn add(self, other: u8) -> <u8 as Add<u8>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a u8> for u8 {\r\n\ttype Output = <u8 as Add<u8>>::Output;\r\n\tfn add(self, other: &'a u8) -> <u8 as Add<u8>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a u8> for &'b u8 {\r\n\ttype Output = <u8 as Add<u8>>::Output;\r\n\tfn add(self, other: &'a u8) -> <u8 as Add<u8>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for u16 {\r\n\ttype Output = u16;\r\n\tfn add(self, other: u16) -> u16 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<u16> for &'a u16 {\r\n\ttype Output = <u16 as Add<u16>>::Output;\r\n\tfn add(self, other: u16) -> <u16 as Add<u16>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a u16> for u16 {\r\n\ttype Output = <u16 as Add<u16>>::Output;\r\n\tfn add(self, other: &'a u16) -> <u16 as Add<u16>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a u16> for &'b u16 {\r\n\ttype Output = <u16 as Add<u16>>::Output;\r\n\tfn add(self, other: &'a u16) -> <u16 as Add<u16>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for u32 {\r\n\ttype Output = u32;\r\n\tfn add(self, other: u32) -> u32 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<u32> for &'a u32 {\r\n\ttype Output = <u32 as Add<u32>>::Output;\r\n\tfn add(self, other: u32) -> <u32 as Add<u32>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a u32> for u32 {\r\n\ttype Output = <u32 as Add<u32>>::Output;\r\n\tfn add(self, other: &'a u32) -> <u32 as Add<u32>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a u32> for &'b u32 {\r\n\ttype Output = <u32 as Add<u32>>::Output;\r\n\tfn add(self, other: &'a u32) -> <u32 as Add<u32>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for u64 {\r\n\ttype Output = u64;\r\n\tfn add(self, other: u64) -> u64 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<u64> for &'a u64 {\r\n\ttype Output = <u64 as Add<u64>>::Output;\r\n\tfn add(self, other: u64) -> <u64 as Add<u64>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a u64> for u64 {\r\n\ttype Output = <u64 as Add<u64>>::Output;\r\n\tfn add(self, other: &'a u64) -> <u64 as Add<u64>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a u64> for &'b u64 {\r\n\ttype Output = <u64 as Add<u64>>::Output;\r\n\tfn add(self, other: &'a u64) -> <u64 as Add<u64>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for u128 {\r\n\ttype Output = u128;\r\n\tfn add(self, other: u128) -> u128 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<u128> for &'a u128 {\r\n\ttype Output = <u128 as Add<u128>>::Output;\r\n\tfn add(self, other: u128) -> <u128 as Add<u128>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a u128> for u128 {\r\n\ttype Output = <u128 as Add<u128>>::Output;\r\n\tfn add(self, other: &'a u128) -> <u128 as Add<u128>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a u128> for &'b u128 {\r\n\ttype Output = <u128 as Add<u128>>::Output;\r\n\tfn add(self, other: &'a u128) -> <u128 as Add<u128>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for isize {\r\n\ttype Output = isize;\r\n\tfn add(self, other: isize) -> isize {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<isize> for &'a isize {\r\n\ttype Output = <isize as Add<isize>>::Output;\r\n\tfn add(self, other: isize) -> <isize as Add<isize>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a isize> for isize {\r\n\ttype Output = <isize as Add<isize>>::Output;\r\n\tfn add(self, other: &'a isize) -> <isize as Add<isize>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a isize> for &'b isize {\r\n\ttype Output = <isize as Add<isize>>::Output;\r\n\tfn add(self, other: &'a isize) -> <isize as Add<isize>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for i8 {\r\n\ttype Output = i8;\r\n\tfn add(self, other: i8) -> i8 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<i8> for &'a i8 {\r\n\ttype Output = <i8 as Add<i8>>::Output;\r\n\tfn add(self, other: i8) -> <i8 as Add<i8>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a i8> for i8 {\r\n\ttype Output = <i8 as Add<i8>>::Output;\r\n\tfn add(self, other: &'a i8) -> <i8 as Add<i8>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a i8> for &'b i8 {\r\n\ttype Output = <i8 as Add<i8>>::Output;\r\n\tfn add(self, other: &'a i8) -> <i8 as Add<i8>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for i16 {\r\n\ttype Output = i16;\r\n\tfn add(self, other: i16) -> i16 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<i16> for &'a i16 {\r\n\ttype Output = <i16 as Add<i16>>::Output;\r\n\tfn add(self, other: i16) -> <i16 as Add<i16>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a i16> for i16 {\r\n\ttype Output = <i16 as Add<i16>>::Output;\r\n\tfn add(self, other: &'a i16) -> <i16 as Add<i16>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a i16> for &'b i16 {\r\n\ttype Output = <i16 as Add<i16>>::Output;\r\n\tfn add(self, other: &'a i16) -> <i16 as Add<i16>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for i32 {\r\n\ttype Output = i32;\r\n\tfn add(self, other: i32) -> i32 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<i32> for &'a i32 {\r\n\ttype Output = <i32 as Add<i32>>::Output;\r\n\tfn add(self, other: i32) -> <i32 as Add<i32>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a i32> for i32 {\r\n\ttype Output = <i32 as Add<i32>>::Output;\r\n\tfn add(self, other: &'a i32) -> <i32 as Add<i32>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a i32> for &'b i32 {\r\n\ttype Output = <i32 as Add<i32>>::Output;\r\n\tfn add(self, other: &'a i32) -> <i32 as Add<i32>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for i64 {\r\n\ttype Output = i64;\r\n\tfn add(self, other: i64) -> i64 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<i64> for &'a i64 {\r\n\ttype Output = <i64 as Add<i64>>::Output;\r\n\tfn add(self, other: i64) -> <i64 as Add<i64>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a i64> for i64 {\r\n\ttype Output = <i64 as Add<i64>>::Output;\r\n\tfn add(self, other: &'a i64) -> <i64 as Add<i64>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a i64> for &'b i64 {\r\n\ttype Output = <i64 as Add<i64>>::Output;\r\n\tfn add(self, other: &'a i64) -> <i64 as Add<i64>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for i128 {\r\n\ttype Output = i128;\r\n\tfn add(self, other: i128) -> i128 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<i128> for &'a i128 {\r\n\ttype Output = <i128 as Add<i128>>::Output;\r\n\tfn add(self, other: i128) -> <i128 as Add<i128>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a i128> for i128 {\r\n\ttype Output = <i128 as Add<i128>>::Output;\r\n\tfn add(self, other: &'a i128) -> <i128 as Add<i128>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a i128> for &'b i128 {\r\n\ttype Output = <i128 as Add<i128>>::Output;\r\n\tfn add(self, other: &'a i128) -> <i128 as Add<i128>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for f32 {\r\n\ttype Output = f32;\r\n\tfn add(self, other: f32) -> f32 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<f32> for &'a f32 {\r\n\ttype Output = <f32 as Add<f32>>::Output;\r\n\tfn add(self, other: f32) -> <f32 as Add<f32>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a f32> for f32 {\r\n\ttype Output = <f32 as Add<f32>>::Output;\r\n\tfn add(self, other: &'a f32) -> <f32 as Add<f32>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a f32> for &'b f32 {\r\n\ttype Output = <f32 as Add<f32>>::Output;\r\n\tfn add(self, other: &'a f32) -> <f32 as Add<f32>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add for f64 {\r\n\ttype Output = f64;\r\n\tfn add(self, other: f64) -> f64 {\r\n\t\tself + other /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<f64> for &'a f64 {\r\n\ttype Output = <f64 as Add<f64>>::Output;\r\n\tfn add(self, other: f64) -> <f64 as Add<f64>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\tother,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a f64> for f64 {\r\n\ttype Output = <f64 as Add<f64>>::Output;\r\n\tfn add(self, other: &'a f64) -> <f64 as Add<f64>>::Output {\r\n\t\tAdd::add(\r\n\t\t\tself,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nimpl Add<&'a f64> for &'b f64 {\r\n\ttype Output = <f64 as Add<f64>>::Output;\r\n\tfn add(self, other: &'a f64) -> <f64 as Add<f64>>::Output {\r\n\t\tAdd::add(\r\n\t\t\t*self,\r\n\t\t\t*other,\r\n\t\t) /* tail expr */\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n```", "created_at": "2023-04-13T13:28:05Z", "updated_at": "2023-04-20T08:37:59Z", "closed_at": "2023-04-20T08:37:58Z", "merged_at": "2023-04-20T08:37:58Z", "merge_commit_sha": "3013c408b0d34cd9e2f3906132f6b5ff26cd5966", "assignee": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 61372777, "node_id": "MDU6TGFiZWw2MTM3Mjc3Nw==", "url": "https://api.github.com/repos/Rust-GCC/gccrs/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "milestone": {"url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/21", "html_url": "https://github.com/Rust-GCC/gccrs/milestone/21", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones/21/labels", "id": 9278268, "node_id": "MI_kwDOANBUbM4AjZM8", "number": 21, "title": "AST Pipeline for libcore 1.49 Complete", "description": "This targets multiple parts of libcore 1.49:\r\n\r\n1. Macro expansion\r\n2. Builtin macro declarations\r\n3. Proper name resolution\r\n4. Proper handling of import statements", "creator": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "open_issues": 51, "closed_issues": 67, "state": "open", "created_at": "2023-04-13T08:16:15Z", "updated_at": "2023-06-20T09:03:23Z", "due_on": "2023-07-01T07:00:00Z", "closed_at": null}, "draft": false, "commits_url": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/2122/commits", "review_comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/2122/comments", "review_comment_url": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2122/comments", "statuses_url": "https://api.github.com/repos/Rust-GCC/gccrs/statuses/e8e84345a9d376a2d9424bb011886f1667ed251c", "head": {"label": "ArberSephirotheca:ast_dump_associated_type", "ref": "ast_dump_associated_type", "sha": "e8e84345a9d376a2d9424bb011886f1667ed251c", "user": {"login": "ArberSephirotheca", "id": 19250266, "node_id": "MDQ6VXNlcjE5MjUwMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/19250266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArberSephirotheca", "html_url": "https://github.com/ArberSephirotheca", "followers_url": "https://api.github.com/users/ArberSephirotheca/followers", "following_url": "https://api.github.com/users/ArberSephirotheca/following{/other_user}", "gists_url": "https://api.github.com/users/ArberSephirotheca/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArberSephirotheca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArberSephirotheca/subscriptions", "organizations_url": "https://api.github.com/users/ArberSephirotheca/orgs", "repos_url": "https://api.github.com/users/ArberSephirotheca/repos", "events_url": "https://api.github.com/users/ArberSephirotheca/events{/privacy}", "received_events_url": "https://api.github.com/users/ArberSephirotheca/received_events", "type": "User", "site_admin": false}, "repo": {"id": 596665448, "node_id": "R_kgDOI5BkaA", "name": "gccrs", "full_name": "ArberSephirotheca/gccrs", "private": false, "owner": {"login": "ArberSephirotheca", "id": 19250266, "node_id": "MDQ6VXNlcjE5MjUwMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/19250266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArberSephirotheca", "html_url": "https://github.com/ArberSephirotheca", "followers_url": "https://api.github.com/users/ArberSephirotheca/followers", "following_url": "https://api.github.com/users/ArberSephirotheca/following{/other_user}", "gists_url": "https://api.github.com/users/ArberSephirotheca/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArberSephirotheca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArberSephirotheca/subscriptions", "organizations_url": "https://api.github.com/users/ArberSephirotheca/orgs", "repos_url": "https://api.github.com/users/ArberSephirotheca/repos", "events_url": "https://api.github.com/users/ArberSephirotheca/events{/privacy}", "received_events_url": "https://api.github.com/users/ArberSephirotheca/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ArberSephirotheca/gccrs", "description": "GCC Front-End for Rust", "fork": true, "url": "https://api.github.com/repos/ArberSephirotheca/gccrs", "forks_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/forks", "keys_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/teams", "hooks_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/hooks", "issue_events_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/issues/events{/number}", "events_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/events", "assignees_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/assignees{/user}", "branches_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/branches{/branch}", "tags_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/tags", "blobs_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/statuses/{sha}", "languages_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/languages", "stargazers_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/stargazers", "contributors_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/contributors", "subscribers_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/subscribers", "subscription_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/subscription", "commits_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/contents/{+path}", "compare_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/merges", "archive_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/downloads", "issues_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/issues{/number}", "pulls_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/pulls{/number}", "milestones_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/milestones{/number}", "notifications_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/labels{/name}", "releases_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/releases{/id}", "deployments_url": "https://api.github.com/repos/ArberSephirotheca/gccrs/deployments", "created_at": "2023-02-02T17:16:28Z", "updated_at": "2023-02-02T17:16:24Z", "pushed_at": "2023-04-19T17:34:32Z", "git_url": "git://github.com/ArberSephirotheca/gccrs.git", "ssh_url": "git@github.com:ArberSephirotheca/gccrs.git", "clone_url": "https://github.com/ArberSephirotheca/gccrs.git", "svn_url": "https://github.com/ArberSephirotheca/gccrs", "homepage": "https://rust-gcc.github.io/", "size": 1244074, "stargazers_count": 0, "watchers_count": 0, "language": null, "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "has_discussions": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "Rust-GCC:master", "ref": "master", "sha": "74b4d6ddf6758addd3b93985aa56382fa00c43e1", "user": {"login": "Rust-GCC", "id": 74917047, "node_id": "MDEyOk9yZ2FuaXphdGlvbjc0OTE3MDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/74917047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rust-GCC", "html_url": "https://github.com/Rust-GCC", "followers_url": "https://api.github.com/users/Rust-GCC/followers", "following_url": "https://api.github.com/users/Rust-GCC/following{/other_user}", "gists_url": "https://api.github.com/users/Rust-GCC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rust-GCC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rust-GCC/subscriptions", "organizations_url": "https://api.github.com/users/Rust-GCC/orgs", "repos_url": "https://api.github.com/users/Rust-GCC/repos", "events_url": "https://api.github.com/users/Rust-GCC/events{/privacy}", "received_events_url": "https://api.github.com/users/Rust-GCC/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 13653100, "node_id": "MDEwOlJlcG9zaXRvcnkxMzY1MzEwMA==", "name": "gccrs", "full_name": "Rust-GCC/gccrs", "private": false, "owner": {"login": "Rust-GCC", "id": 74917047, "node_id": "MDEyOk9yZ2FuaXphdGlvbjc0OTE3MDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/74917047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rust-GCC", "html_url": "https://github.com/Rust-GCC", "followers_url": "https://api.github.com/users/Rust-GCC/followers", "following_url": "https://api.github.com/users/Rust-GCC/following{/other_user}", "gists_url": "https://api.github.com/users/Rust-GCC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rust-GCC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rust-GCC/subscriptions", "organizations_url": "https://api.github.com/users/Rust-GCC/orgs", "repos_url": "https://api.github.com/users/Rust-GCC/repos", "events_url": "https://api.github.com/users/Rust-GCC/events{/privacy}", "received_events_url": "https://api.github.com/users/Rust-GCC/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/Rust-GCC/gccrs", "description": "GCC Front-End for Rust", "fork": false, "url": "https://api.github.com/repos/Rust-GCC/gccrs", "forks_url": "https://api.github.com/repos/Rust-GCC/gccrs/forks", "keys_url": "https://api.github.com/repos/Rust-GCC/gccrs/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/Rust-GCC/gccrs/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/Rust-GCC/gccrs/teams", "hooks_url": "https://api.github.com/repos/Rust-GCC/gccrs/hooks", "issue_events_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/events{/number}", "events_url": "https://api.github.com/repos/Rust-GCC/gccrs/events", "assignees_url": "https://api.github.com/repos/Rust-GCC/gccrs/assignees{/user}", "branches_url": "https://api.github.com/repos/Rust-GCC/gccrs/branches{/branch}", "tags_url": "https://api.github.com/repos/Rust-GCC/gccrs/tags", "blobs_url": "https://api.github.com/repos/Rust-GCC/gccrs/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/Rust-GCC/gccrs/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/Rust-GCC/gccrs/git/refs{/sha}", "trees_url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/Rust-GCC/gccrs/statuses/{sha}", "languages_url": "https://api.github.com/repos/Rust-GCC/gccrs/languages", "stargazers_url": "https://api.github.com/repos/Rust-GCC/gccrs/stargazers", "contributors_url": "https://api.github.com/repos/Rust-GCC/gccrs/contributors", "subscribers_url": "https://api.github.com/repos/Rust-GCC/gccrs/subscribers", "subscription_url": "https://api.github.com/repos/Rust-GCC/gccrs/subscription", "commits_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits{/sha}", "git_commits_url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits{/sha}", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/comments{/number}", "issue_comment_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues/comments{/number}", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/{+path}", "compare_url": "https://api.github.com/repos/Rust-GCC/gccrs/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/Rust-GCC/gccrs/merges", "archive_url": "https://api.github.com/repos/Rust-GCC/gccrs/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/Rust-GCC/gccrs/downloads", "issues_url": "https://api.github.com/repos/Rust-GCC/gccrs/issues{/number}", "pulls_url": "https://api.github.com/repos/Rust-GCC/gccrs/pulls{/number}", "milestones_url": "https://api.github.com/repos/Rust-GCC/gccrs/milestones{/number}", "notifications_url": "https://api.github.com/repos/Rust-GCC/gccrs/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/Rust-GCC/gccrs/labels{/name}", "releases_url": "https://api.github.com/repos/Rust-GCC/gccrs/releases{/id}", "deployments_url": "https://api.github.com/repos/Rust-GCC/gccrs/deployments", "created_at": "2013-10-17T15:30:28Z", "updated_at": "2023-06-20T09:08:24Z", "pushed_at": "2023-06-20T21:29:48Z", "git_url": "git://github.com/Rust-GCC/gccrs.git", "ssh_url": "git@github.com:Rust-GCC/gccrs.git", "clone_url": "https://github.com/Rust-GCC/gccrs.git", "svn_url": "https://github.com/Rust-GCC/gccrs", "homepage": "https://rust-gcc.github.io/", "size": 1252381, "stargazers_count": 2035, "watchers_count": 2035, "language": null, "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "has_discussions": true, "forks_count": 127, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 300, "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "gcc", "gcc-rust", "hacktoberfest", "rust", "rust-lang"], "visibility": "public", "forks": 127, "open_issues": 300, "watchers": 2035, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/2122"}, "html": {"href": "https://github.com/Rust-GCC/gccrs/pull/2122"}, "issue": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2122"}, "comments": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/issues/2122/comments"}, "review_comments": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/2122/comments"}, "review_comment": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/pulls/2122/commits"}, "statuses": {"href": "https://api.github.com/repos/Rust-GCC/gccrs/statuses/e8e84345a9d376a2d9424bb011886f1667ed251c"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "comments": 1, "review_comments": 4, "maintainer_can_modify": false, "commits": 1, "additions": 15, "deletions": 3, "changed_files": 1}