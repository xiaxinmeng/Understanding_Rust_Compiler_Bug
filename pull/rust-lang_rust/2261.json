{"url": "https://api.github.com/repos/rust-lang/rust/pulls/2261", "id": 1204984, "node_id": "MDExOlB1bGxSZXF1ZXN0MTIwNDk4NA==", "html_url": "https://github.com/rust-lang/rust/pull/2261", "diff_url": "https://github.com/rust-lang/rust/pull/2261.diff", "patch_url": "https://github.com/rust-lang/rust/pull/2261.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/2261", "number": 2261, "state": "closed", "locked": false, "title": "std::uv::global_loop and std::timer", "user": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "body": "At a high-level, this pull request contains:\n- fleshing out the `std::uv::hl` module (provides stuff needed to run a \"high-level\", rust-managed loop with hooks for user-supplied logic/environment\n- adding the `std::uv::global_loop` module, which provides a single, process-wide event loop leverage the types and functions built out in `std::uv::hl`\n- adding the `std::timer` module, which uses `std::uv::global_loop` to provide a high-level interface to the libuv `uv_timer_*` API.\n### std::uv::hl\n\nA set of functions and types to interact safely with a libuv, primarily from rust code. The test and functions in the test module provide a pretty good overview of how to do work it (including the bare minimum to roll-your-own `high_level_loop`)\n### std::uv::global_loop\n\nAs mentioned above, this is the process-wide event loop that (presumably) stdlib developers can use to expose high-level functionality to libuv.\n\nThere are two, full implementations that are present at this time: \n- The `get_single_task_gl` function (exported but hidden in docs) provides a libuv loop that consumes a single task/single-threaded-scheduler. This was my original implementation and, while (ostensibly) lighter-weighter in message/task traffic, it most likely has some race conditions.\n- The `get_monitor_task_gl` function (also exported but hidden in docs) gives access to a libuv loop that's implemented over two tasks (each running in their own single-threaded scheduler). This is the implementation that is wired up to `uv::global_loop::get()`, which is the only fn from this module that appears in the docs\n\nI want to work on the single-task global loop a bit more and, eventually, set up some profiling between the two versions (to test under load). But for now we're shipping what (should) be a race-free version.\n\nNOTE: Do _not_ use both of the above functions within the scope of a single-process lifetime (always use one or the other, but not both). Using just `std::uv::global_loop::get` should (obviously) be your first choice 99.999999% of the time.\n\nIf we're satisfied, relatively speaking, with the perf of the `get_monitor_task_gl()` impl I'll just drop the `get_single_task_loop` impl.\n### std::timer\n\nProvides a few useful functions that use libuv's timer API. Currently only three exported functions:\n- `timer::delayed_send` - send a msg after the provided timeout\n- `timer::sleep` - block the task this is called in for the specified time period\n- `timer::recv_timeout` - block on recv for up to the specified timeout. If a msg is recv'd on the provided port before the timeout expires, we return `some(T)`, otherwise if the timeout period passes without a msg on the provided port, we return `none`.\n\nInterestingly, it seems like `timer::delayed_send` is the primitive upon which you can build everything else in the module, AFAIK.\n\nI also wanted to add a more tradition timer interface that just takes a cb and calls it repeatedly in a new task until it returns false, but didn't get around to it. \n\nThe implementation, here, is the first non-infrastructure/proof-of-concept use of `std::uv::*`. hooray!\n### still unresolved\n- The management of libuv structs' lifetime, stored on the rust stack, is ackward and does not map cleanly to the C/C++ memery (of course!). So I've been trying to work on abstractions to provide some sort of safety net around this. We also have to integrate the `high_level_loop`'s internal reference counting scheme (that sits atop the libuv refcount scheme). I think I have something in mind (a resource, stored in a shared box, that will tie the struct value to a given task.. with some automated setup/teardown), but it's not quite ironed out yet (and places its own burden on the user). For now, we have the `uv::hl::ref`, `uv::hl::unref` and `uv::hl::unref_and_close` fns. Any code that uses libuv structs, on the stack should make sure to:\n  - `ref` at or before the time you make a `uv_init_*` call with the ptr to the struct value.\n  - `unref` and `uv_close` before the task containing the struct exits. This is not always straightforward and requires some thoughtful synchronization via ports/msgs that I'm still working. The tests in `hl`, `global_loop` and the impl in `std::timer` should different examples/approaches for doing this safely. It's an ongoing thing.\n- Should this move into `core`? Probably want to let it prove itself, first.\n### up next\n- Iron-out remaining rough edges in the API and implementation\n- work on getting profiling set up for the loop in general, as well as specific parts of the API.\n- The low-level plumbing is in place for IPv4 TCP/IP, so I'll move towards flushing that out in a high-level API build around port/chan data passing (this work is blocked, on 32bit linux at least, pending #2064)\n- Work towards high-level HTTP client and server scenarios leveraging a high-level TCP/IP API.\n- Bind more of the libuv API's surface, in general, to rust (in `std::uv::ll`) and write tests\n- More tests, better docs\n", "created_at": "2012-04-20T18:19:44Z", "updated_at": "2014-06-25T22:28:30Z", "closed_at": "2012-04-20T22:24:49Z", "merged_at": null, "merge_commit_sha": "37047ccff3ae34787f20bdf2798944d1852710ba", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/2261/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/2261/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/2261/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/7d1e2aedd1b3d132c7e83398d3438bd3b247f5bd", "head": {"label": "olsonjeffery:uv_global_loop", "ref": "uv_global_loop", "sha": "7d1e2aedd1b3d132c7e83398d3438bd3b247f5bd", "user": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "repo": null}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "37b054973083ed4201a2ba73be6bdd39daf13cf6", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-19T06:07:21Z", "pushed_at": "2023-06-19T06:22:45Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 919635, "stargazers_count": 82734, "watchers_count": 82734, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10953, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9628, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10953, "open_issues": 9628, "watchers": 82734, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/2261"}, "html": {"href": "https://github.com/rust-lang/rust/pull/2261"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/2261"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/2261/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/2261/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/2261/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/7d1e2aedd1b3d132c7e83398d3438bd3b247f5bd"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": false, "rebaseable": false, "mergeable_state": "dirty", "merged_by": null, "comments": 2, "review_comments": 0, "maintainer_can_modify": false, "commits": 25, "additions": 1906, "deletions": 1345, "changed_files": 11}