{"url": "https://api.github.com/repos/rust-lang/rust/pulls/72981", "id": 427870475, "node_id": "MDExOlB1bGxSZXF1ZXN0NDI3ODcwNDc1", "html_url": "https://github.com/rust-lang/rust/pull/72981", "diff_url": "https://github.com/rust-lang/rust/pull/72981.diff", "patch_url": "https://github.com/rust-lang/rust/pull/72981.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/72981", "number": 72981, "state": "closed", "locked": false, "title": "Stabilize the backtrace feature.", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "body": "## Stabilization Report\r\n\r\nThis is a proposal to stabilize the `backtrace` feature in libstd. It would make these additional APIs available on stable:\r\n\r\n```rust\r\npub mod backtrace {\r\n    pub struct Backtrace {\r\n    }\r\n\r\n    enum BacktraceStatus {\r\n        Unsupported,\r\n        Disabled,\r\n        Captured,\r\n    }\r\n\r\n    impl Backtrace {\r\n        pub fn capture() -> Backtrace { }\r\n\r\n        pub fn force_capture() -> Backtrace { }\r\n\r\n        pub fn disabled() -> Backtrace { }\r\n\r\n        pub fn status(&self) -> BacktraceState { }\r\n    }\r\n\r\n    impl Display for Backtrace { }\r\n    impl Debug for Backtrace { }\r\n}\r\n\r\npub mod error {\r\n    pub trait Error {\r\n        fn backtrace(&self) -> Option<&Backtrace> {\r\n            None\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe behavior of the backtrace type, especially as it connects to certain environment variables, is better documented in the module documentation: https://doc.rust-lang.org/std/backtrace/index.html\r\n\r\nThe internal details of how backtraces are captured and represented are platform specific and unspecified. A platform may not support backtraces at all. Libstd's backtrace type will do its best to report a backtrace to the caller of `Backtrace::capture` and `Backtrace::force_capture`.\r\n\r\n### Background and Motivation\r\n\r\nThis API was proposed as part of RFC 2504, which was merged in August 2018. The API was based on experience with the failure crate, released November 2017, and motivated by a longstanding user request for a standardized way to access backtraces, especially in connection with errors that have been raised. This API was implemented actually in September 2019.\r\n\r\nIn late 2019, many users began migrating from the `failure` crate to crates based on `std::error::Error`, because most of the API changes proposed in RFC 2504 had been stabilized, and new crates similar to failure but based on std Error had been implemented, most notably thiserror and anyhow by dtolnay. In early 2020, the failure crate was deprecated, and users were recommended to use anyhow and thiserror instead.\r\n\r\n*However*, on stable, the user experience of anyhow and thiserror is not equivalent to the user experience of failure, because the backtrace component of RFC 2504 has not been stabilized. Some users have been left in the frustrating and confusing experience of watching the ecosystem move around them to a solution that does not have feature parity for them, because they were depending on the backtrace feature of failure. They are forced to either migrate from stable to nightly or manage compatibility issues with the rest of the ecosystem while staying on failure.\r\n\r\nEven the anyhow crate only has meaningful backtraces with the backtrace feature of the crate turned on, which in turn depends on the backtrace feature of std.\r\n\r\n### Unresolved questions from RFC\r\n\r\nOne unresolved question was left over from the RFC regarding the API of `capture`: some proposed that rather than have backtraces which return a non-`Captured` status, the capture API return an Option. This was discussed at length on the RFC, and the RFC was ultimately merged with an unresolved question to confirm that the current design worked well. There has since been no discussion of that aspect of the RFC.\r\n\r\nTwo aspects complicate the idea of having a backtrace's non-pressence indicated with an option:\r\n\r\n- A backtrace can be absent for two reasons: the backtrace is disabled or the platform does not support backtraces. An Option could not represent that, requiring a new enum type, or a result and a new error type.\r\n- Use cases like `Error::backtrace` introduce a third reason a backtrace wouldn't be present: the concrete implementation did not try to capture a backtrace.\r\n\r\nCombined we would be looking at an API like `fn backtrace(&self) -> Option<&Result<Backtrace, BacktraceError>>`, which becomes very unwieldy. For users who need to interrogate a backtrace's materiality, the `BacktraceStatus` provides a means of determining if the backtrace they've captured is not meaningful and why.\r\n\r\n### Issues raised during implementation period\r\n\r\n#### Fmt representation #65280\r\n\r\nChanges were made to the representation of the backtrace type, removing the header from the display representation & providing a debug implementation which is consistent with other Debug implementations.\r\n\r\nHowever, #65280 also proposes providing a means of limiting the backtrace using something like the precision syntax. This has not been implemented. I propose that this is a desirable feature, but it is strictly add-on and it should not be a blocker on stabilizing backtrace.\r\n\r\n#### Backtrace and Error in core\r\n\r\nThe main issue raised during implementation was the relationship of `Error::backtrace` and `Error` not being in core. The `Error` trait is already not in core for another reason: an inherent method on `dyn Error` requires the `Box` type, which is not in core, but stabilizing `Error::backtrace` would add a second dependence on a non-core type.\r\n\r\nIt is desirable for the `Error` trait to be available from core, and therefore users have expressed concern about adding a new dependency on a non-core type. However, this stabilization would not present any new challenge that could not be resolved as easily as the existing challenges:\r\n\r\n1. In order to add Error to core, we would need some \"hook\" that makes the non-core methods on Error not available in core, without breaking coherence. Such a \"hook\" could also be imagined for making the backtrace method not available in core.\r\n2. Alternatively (and probably better) we could make the backtrace type available in core, but its backtrace functionality disabled without std, with some hook to provide the platform-specific functionality that std fulfills, similar to global allocators, panic handlers, etc.\r\n3. Finally, we could do the *proper* thing and merge std and core into one library, instead of piling up an increasing tower of hacks to work aroud the misdesigned core/std split.\r\n\r\nBecause the existing issue with Error would already require a language-level change to allow std to add an inherent method to `dyn Error`, which multiple team members (me included) have expressed concern about doing, this does not seem to me to present a substantial increase in the amount of work needed to make Error available in core.\r\n\r\n#### RFC 2895 and \"generic member access\"\r\n\r\nFinally, there is the idea that RFC 2895 could supercede the Error::backtrace method. RFC 2895 provides an API for essentially a specialized dynamically dispatched \"generic member\" that errors could have, which is core-compatible. Such an API could then be used to provide the backtrace, or any other dynamically dispatched type, that an error could contain.\r\n\r\nHowever, this RFC is not merged or in FCP, and is still in the early phases of design. We have already soft-regressed users, who have been relying on an existing API that has been in design for several years. Blocking the resolution of those users' problems on an RFC in early design stages would not be prudent.\r\n\r\nThe basic motivation of RFC 2895 is that it allows errors to provide many different kinds of contexts, not just a backtrace, and in a way which is open ended and extensible. This may be a desirable property for the std error trait, and RFC 2895 may eventually be merged, stabilized, etc. However, I would contend that even in such a case, preferential treatment for backtraces is still desirable. Backtraces are a standard feature provided not only in Rust but in many language ecosystems, which users have come to expect. Providing a first-class method for getting the backtrace, called backtrace, even if it delegates to a more generic \"request for context\" method in the long term, makes sense for the optimal user experience.\r\n\r\n### Future work\r\n\r\nOther than the future work on the error trait discussed above, there is future work to be done on the backtrace type. In particular, the backtrace type currently provides no method of analysis other than debug and display printing the backtrace. It would be beneficial to provide a platform agnostic, standard API for iterating over the frames of the backtrace and the members of the frames in the long term. Such an API would justify a separate RFC.", "created_at": "2020-06-04T14:16:58Z", "updated_at": "2022-08-10T17:42:41Z", "closed_at": "2022-08-10T17:42:41Z", "merged_at": null, "merge_commit_sha": "5eb5362441cb4341d2121bbfbd3d31cb2adf71e8", "assignee": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 223796632, "node_id": "MDU6TGFiZWwyMjM3OTY2MzI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/relnotes", "name": "relnotes", "color": "fad8c7", "default": false, "description": "Marks issues that should be documented in the release notes of the next release."}, {"id": 762300676, "node_id": "MDU6TGFiZWw3NjIzMDA2NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-blocked", "name": "S-blocked", "color": "d3dddd", "default": false, "description": "Status: marked as blocked \u274c on something else such as an RFC or other implementation work."}, {"id": 2359545530, "node_id": "MDU6TGFiZWwyMzU5NTQ1NTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/PG-error-handling", "name": "PG-error-handling", "color": "c2e0c6", "default": false, "description": "Project Group: Error handling (https://github.com/rust-lang/project-error-handling)"}], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/72981/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/72981/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72981/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/2307537fe5be8cffd93188d2ea3066902935e463", "head": {"label": "withoutboats:stabilize-backtrace", "ref": "stabilize-backtrace", "sha": "2307537fe5be8cffd93188d2ea3066902935e463", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "repo": {"id": 40693116, "node_id": "MDEwOlJlcG9zaXRvcnk0MDY5MzExNg==", "name": "rust", "full_name": "withoutboats/rust", "private": false, "owner": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/withoutboats/rust", "description": "A safe, concurrent, practical language.", "fork": true, "url": "https://api.github.com/repos/withoutboats/rust", "forks_url": "https://api.github.com/repos/withoutboats/rust/forks", "keys_url": "https://api.github.com/repos/withoutboats/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/withoutboats/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/withoutboats/rust/teams", "hooks_url": "https://api.github.com/repos/withoutboats/rust/hooks", "issue_events_url": "https://api.github.com/repos/withoutboats/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/withoutboats/rust/events", "assignees_url": "https://api.github.com/repos/withoutboats/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/withoutboats/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/withoutboats/rust/tags", "blobs_url": "https://api.github.com/repos/withoutboats/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/withoutboats/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/withoutboats/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/withoutboats/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/withoutboats/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/withoutboats/rust/languages", "stargazers_url": "https://api.github.com/repos/withoutboats/rust/stargazers", "contributors_url": "https://api.github.com/repos/withoutboats/rust/contributors", "subscribers_url": "https://api.github.com/repos/withoutboats/rust/subscribers", "subscription_url": "https://api.github.com/repos/withoutboats/rust/subscription", "commits_url": "https://api.github.com/repos/withoutboats/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/withoutboats/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/withoutboats/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/withoutboats/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/withoutboats/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/withoutboats/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/withoutboats/rust/merges", "archive_url": "https://api.github.com/repos/withoutboats/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/withoutboats/rust/downloads", "issues_url": "https://api.github.com/repos/withoutboats/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/withoutboats/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/withoutboats/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/withoutboats/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/withoutboats/rust/labels{/name}", "releases_url": "https://api.github.com/repos/withoutboats/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/withoutboats/rust/deployments", "created_at": "2015-08-14T03:04:58Z", "updated_at": "2018-03-15T23:17:09Z", "pushed_at": "2021-01-13T09:38:19Z", "git_url": "git://github.com/withoutboats/rust.git", "ssh_url": "git@github.com:withoutboats/rust.git", "clone_url": "https://github.com/withoutboats/rust.git", "svn_url": "https://github.com/withoutboats/rust", "homepage": "http://www.rust-lang.org", "size": 581920, "stargazers_count": 1, "watchers_count": 1, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 0, "open_issues": 0, "watchers": 1, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-20T06:32:42Z", "pushed_at": "2023-06-20T06:29:14Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 930628, "stargazers_count": 82766, "watchers_count": 82766, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10963, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9622, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10963, "open_issues": 9622, "watchers": 82766, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/72981"}, "html": {"href": "https://github.com/rust-lang/rust/pull/72981"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/72981"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/72981/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/72981/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/72981/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/2307537fe5be8cffd93188d2ea3066902935e463"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": false, "rebaseable": false, "mergeable_state": "dirty", "merged_by": null, "comments": 93, "review_comments": 2, "maintainer_can_modify": false, "commits": 5, "additions": 14, "deletions": 12, "changed_files": 5}