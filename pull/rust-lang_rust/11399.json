{"url": "https://api.github.com/repos/rust-lang/rust/pulls/11399", "id": 11312834, "node_id": "MDExOlB1bGxSZXF1ZXN0MTEzMTI4MzQ=", "html_url": "https://github.com/rust-lang/rust/pull/11399", "diff_url": "https://github.com/rust-lang/rust/pull/11399.diff", "patch_url": "https://github.com/rust-lang/rust/pull/11399.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/11399", "number": 11399, "state": "closed", "locked": false, "title": "Add garbage collector to std::gc", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "body": "Not ready for merging.\n## Summary\n\nTracing non-generational task-local GC, with stop-the-task non-incremental collections. The GC stores nothing inline in any values, and so doesn't need a header and a change of representation of generic types (like `@` does).\n\nIncludes two new modules `std::{libvec, uniq}` for examples of library defined versions of `~[]` and `~` respectively, which use the rooting API defined in `std::gc` to properly hold references to GC pointers (unlike `~`, `@`, `~[]` and `@[]`). (These modules are mostly demonstrations, not necessarily designed for landing.)\n\n**Note**: when looking over this code, keep in mind I have pretty much no idea what I'm doing, so if something seems stupid, unconventional or silly; it almost certainly is.\n## Details\n\nThis adds a `#[managed]` annotation and an intrinsic `reachable_new_managed::<T>() -> bool` (cf. the old `owns_managed` intrinsic, renamed to `owns_at_managed` in this PR). The intrinsic is _designed_ to check whether a type contains any `#[managed]` annotated types, so that the library types can avoid touching the GC if they aren't storing GC'd pointers\n\nThe GC is conservative on the stack: when checking for GC'd references on the stack, it will scan every word and any bitpattern that matches the pointer to the start of a GC'd pointer or one of the other pointer types will be considered a valid region.\n\nIt does support finalisers, which are just run on the memory when a pointer is determined to be unused; so `Gc<T>` uses this to run the destructor of `T` (if it has one).\n\nThe rooting API mentioned above is simply a function `register_root_changes<T>(removals: &[*T], additions: &[(*T, uint, TraceFunc)])` which lets us indicate that certain regions are no longer possibly rooting `Gc`s, and add regions `(*T, uint, TraceFunc) == (start pointer, metadata, function to start tracing)` that possibly are rooting `Gc`s. The trick with this API that stops us having to scan everything is being generic: it knows the type `T` a pointer contains and statically if a certain type `T` can contain `#[managed]` types via the intrinsic. So if `T` can't contain managed pointers, there's no need to register it with the GC, so all one needs to do to make things GC safe is (unconditionally) pass a pointer of the appropriate to the relevant memory regions and the `std::gc` library will automatically figure out (by calling the intrinsic) if it actually needs to register those regions. In particular, this means that programs that never use any GC'd types can have the GC code removed, because nothing will call it. (`register_root_changes` will be inlined and reduce to a no-op for non-managed types.) \n\nThe metadata mentioned above is arbitrary (not examined by the GC) and can be set with `update_metadata`, this is essentially just designed to allow storing the length of vectors for tracing.\n\nThere are a few commits which act as an example for this API: I add the library vector type from strcat's rust-core, and then make the appropriate adjustments to make it GC safe (5 calls to `register_root_changes`), and also add an equivalent to `~`, `std::uniq::Uniq<T>` which is similarly GC-safe.\n\nUnfortunately to support tracing, these types (`Uniq` and `Vec`) require a `Trace` bound on their contents, which is unfortunate, as they _should_ be allowed to store non-tracable types if those types don't contain any `Gc<T>` pointers.\n## Problems\n- [x] _Done: lang items to register/deregister ~ allocations as appropriate_ On that note... The **largest problem** with this PR is `~`, `@`, `~[]` and `@[]` do not act as roots. That is, having a pile of `Gc` pointers such that the only reference to them is a `~[Gc<int>]` will cause them to be considered unreachable and be garbage collected. As such, I've marked any method that could demonstrate a symptom of this problem (the various `.borrow`s) as `unsafe`. It's probably possible to do something with lang-items to get them to work... but, personally having them as library types seems simpler (look at how simple it was to add GC support to the two new modules: adding support to `Rc` would be as easy as it was to add to `Uniq` too.)\n- [ ] similarly, global variables are not considered (seems like this shouldn't be supported by default: the user can call `register_root_changes` themselves to register one if they must)\n- [x] _Done: scanned conservatively for now_ --- task-local storage is not considered\n- [ ] The GC is _slow_ (about ~~20x~~ ~~6.5x~~ ~~5x~~ 4x slower than straight malloc for a microbenchmark of just doing a lot of allocations) and memory hungry. Reasons:\n  - _Done: allocations less than 1 MB are (fairly basically) cached and reused giving a 50% performance boost_ --- every allocation is a call to malloc, and every unreachable pointer is actually `free`d (I'm working on caching unused allocations now)\n  - `std::trie` is slow, and I'm using it wrong, and it's possibly not the best data structure.\n    - _Done: caching_ --- the GC actually spends most of it's time in trie methods like `insert` and `remove`, if allocations were cached and not removed from the `trie` this would help a lot\n    - it breaks a `uint` into chunks of 4 bits from the most significant bit, and most `malloc`'d pointers agree on their first 30 bits, so we spend a lot of time just traversing that with no ability to distinguish between keys (very hard to fix, since the only way to get the correct order is to traverse in this manner; requires a path-compressing trie)\n    - it could just do with some general optimisation (possibly with some `unsafe`)\n  - it has to do a `Local::borrow(None::<Task>)` twice on every allocation (to retrieve and return the GC, see below) (although `perf` indicates the _vast_ majority of the time is spent in collection)\n- [x] _Done: some restricted & careful unsafe code_ --- It has to actually remove the task-local GC from the task struct during allocation and collection (so that we can unborrow the `Task` because that would be far worse than what I'm about to describe), which means that any finalisers that need to call into the GC (like those that need to unregister roots) will crash, in particular, a type like `Gc<Vec<Gc<T>>>` will fail because the `Vec` destructor calls `register_root_changes`.\n- [ ] `fail!`-ing finalisers aren't considered at all, and also cause failure. (Both of these can hit the double-unwinding and cause an abort.)\n- [ ] finalisers are memory unsafe w.r.t. to cyclic objects, but I'm not 100% sure this is a problem: we already restrict destructors and require `#[unsafe_destructor]` so it's the users \"fault\" if they crash due to this\n- [ ] it requires more instrumentation & statistics\n- [ ] the GC could be generational, but isn't currently. There is a pseudo-API designed to (in theory) support this, defined on `Gc` (all are `Gc<T> -> &T`):\n  - `borrow` for only `Freeze` types, that does not have any write barriers\n  - `borrow_write_barrier`, the general borrow that does have a write barrier; although in theory the write barrier could be elided when `owns_new_managed::<T>` is false (since any writes couldn't add/change references to `Gc` pointers)\n  - `borrow_no_write_barrier`; same as `.borrow`, but implemented for all `T` and `unsafe`, designed for when someone is definitely sure they're going to be reading only, or are not going to be changing any `Gc` references.\n- [ ] not enough in-source tests (easy enough to fix)\n- [ ] The added modules `std::{uniq, libvec}` have no documentation or tests (since they're just designed to exhibit the rooting API)\n- [ ] The tracing API means `Uniq` and `Vec` are less flexible that desirable (which flows downstream to any generic users of them) because they require a `Trace` bound to be able to register a handle to run when discovered by a conservative scan. Possible solutions:\n  -  having separate non-trace constructors (and non-trace `.push` and `.pop` for `Vec`!) but this would then require similar contortions downstream; \n  - some sort of explicit `TraceOrNonManaged` bound (which would also require downstream generic to have that bound)\n  - have the compiler enforce that `Gc` can only go into `Trace` types (a little like `transmute` requires types of the same size)\n  - have the compiler generate trace glue like drop glue, etc., and then retrieve this for tracing (would require a `call_trace_glue` intrinisic, but then we'd have to have some way to get the appropriate types and information into it).\n- [ ] doesn't support interior pointers \n\nBecause of this list (mainly the memory-unsafety problem with `~` etc not acting as roots), I've marked `std::gc::Gc` as `#[experimental]`.\n", "created_at": "2014-01-08T06:30:32Z", "updated_at": "2015-02-07T05:50:34Z", "closed_at": "2014-02-02T09:48:28Z", "merged_at": null, "merge_commit_sha": "ad5883a15bc2536d2d59a7b4a7346f41fb9a087f", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/11399/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/11399/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/11399/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/166890978e0176ac77668d0d2c4b3e347f23356a", "head": {"label": "huonw:managed", "ref": "managed", "sha": "166890978e0176ac77668d0d2c4b3e347f23356a", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "repo": {"id": 7084229, "node_id": "MDEwOlJlcG9zaXRvcnk3MDg0MjI5", "name": "rust", "full_name": "huonw/rust", "private": false, "owner": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/huonw/rust", "description": "a safe, concurrent, practical language", "fork": true, "url": "https://api.github.com/repos/huonw/rust", "forks_url": "https://api.github.com/repos/huonw/rust/forks", "keys_url": "https://api.github.com/repos/huonw/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/huonw/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/huonw/rust/teams", "hooks_url": "https://api.github.com/repos/huonw/rust/hooks", "issue_events_url": "https://api.github.com/repos/huonw/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/huonw/rust/events", "assignees_url": "https://api.github.com/repos/huonw/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/huonw/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/huonw/rust/tags", "blobs_url": "https://api.github.com/repos/huonw/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/huonw/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/huonw/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/huonw/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/huonw/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/huonw/rust/languages", "stargazers_url": "https://api.github.com/repos/huonw/rust/stargazers", "contributors_url": "https://api.github.com/repos/huonw/rust/contributors", "subscribers_url": "https://api.github.com/repos/huonw/rust/subscribers", "subscription_url": "https://api.github.com/repos/huonw/rust/subscription", "commits_url": "https://api.github.com/repos/huonw/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/huonw/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/huonw/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/huonw/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/huonw/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/huonw/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/huonw/rust/merges", "archive_url": "https://api.github.com/repos/huonw/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/huonw/rust/downloads", "issues_url": "https://api.github.com/repos/huonw/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/huonw/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/huonw/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/huonw/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/huonw/rust/labels{/name}", "releases_url": "https://api.github.com/repos/huonw/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/huonw/rust/deployments", "created_at": "2012-12-09T22:12:58Z", "updated_at": "2014-06-27T06:46:37Z", "pushed_at": "2019-01-15T00:54:51Z", "git_url": "git://github.com/huonw/rust.git", "ssh_url": "git@github.com:huonw/rust.git", "clone_url": "https://github.com/huonw/rust.git", "svn_url": "https://github.com/huonw/rust", "homepage": "http://www.rust-lang.org", "size": 272685, "stargazers_count": 0, "watchers_count": 0, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 1, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 1, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "b0280ac5385433bd663e825e24f6990a816a5f40", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-19T10:22:09Z", "pushed_at": "2023-06-19T11:44:16Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 920473, "stargazers_count": 82742, "watchers_count": 82742, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10956, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9630, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10956, "open_issues": 9630, "watchers": 82742, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/11399"}, "html": {"href": "https://github.com/rust-lang/rust/pull/11399"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/11399"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/11399/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/11399/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/11399/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/166890978e0176ac77668d0d2c4b3e347f23356a"}}, "author_association": "MEMBER", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": false, "rebaseable": false, "mergeable_state": "dirty", "merged_by": null, "comments": 76, "review_comments": 2, "maintainer_can_modify": false, "commits": 21, "additions": 1772, "deletions": 251, "changed_files": 27}