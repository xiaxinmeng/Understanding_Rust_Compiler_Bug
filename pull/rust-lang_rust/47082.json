{"url": "https://api.github.com/repos/rust-lang/rust/pulls/47082", "id": 160603184, "node_id": "MDExOlB1bGxSZXF1ZXN0MTYwNjAzMTg0", "html_url": "https://github.com/rust-lang/rust/pull/47082", "diff_url": "https://github.com/rust-lang/rust/pull/47082.diff", "patch_url": "https://github.com/rust-lang/rust/pull/47082.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/47082", "number": 47082, "state": "closed", "locked": false, "title": "Add UnboundedIterator Trait", "user": {"login": "oberien", "id": 4820508, "node_id": "MDQ6VXNlcjQ4MjA1MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4820508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oberien", "html_url": "https://github.com/oberien", "followers_url": "https://api.github.com/users/oberien/followers", "following_url": "https://api.github.com/users/oberien/following{/other_user}", "gists_url": "https://api.github.com/users/oberien/gists{/gist_id}", "starred_url": "https://api.github.com/users/oberien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oberien/subscriptions", "organizations_url": "https://api.github.com/users/oberien/orgs", "repos_url": "https://api.github.com/users/oberien/repos", "events_url": "https://api.github.com/users/oberien/events{/privacy}", "received_events_url": "https://api.github.com/users/oberien/received_events", "type": "User", "site_admin": false}, "body": "[The `TrustedLen` PR](https://github.com/rust-lang/rust/pull/37306) ([tracking issue](https://github.com/rust-lang/rust/issues/37572)) is an effort to improve the performance of `FromIterator` / `Extend` code using specialization when working with iterators reporting a correct `size_hint` (i.e. are marked with the `TrustedLen` trait).  Unfortunately, it does not work for infinite iterators, which a fixed number of elements are `take`n from. Instead, currently calling e.g. `.take(n).collect::<Vec<_>>()` on an unbounded iterator produces [a loop adding one element at a time to the vector with capacity checks on each iteraton](https://godbolt.org/g/pPrnrH). The optimized implementation of `vec!`, which should be used here as well, just uses `calloc` as we'd expect when creating a zeroed vector.\r\nUsing any number different from zero results in the same loop with the iterator approach. The macro produces partially unrolled asm with SIMD instructions instead.\r\n\r\nThis PR introduces the unsafe `UnboundedIterator` trait, which marks infinite iterators. This marker is used for optimizations.\r\n\r\nIts contract is described as the following:\r\n\r\n```\r\nAn iterator that will never return None.\r\n\r\nAny iterator implementing this trait will either continue to return\r\nvalues infinitely, or diverge.\r\nAdditionally, its .size_hint must return (usize::MAX, None).\r\n\r\n# Safety\r\n\r\nThis trait must only be implemented when the contract is upheld.\r\n```\r\n\r\n## Improvements\r\n\r\n* `TrustedLen` is implemented whenever `.take(n)` is called on an `UnboundedIterator`. This optimizes cases similar to `repeat(x).take(n).collect()`.\r\n* Calling `.fuse()` on an `UnboundedIterator` becomes a noop.\r\n* Calling `.cycle()` on an `UnboundedIterator` becomes a noop.\r\n\r\n## Possible Future Improvements (TBD)\r\n\r\n* Calling a consumer function on an unbounded iterator can produce a compile warning, as it most likely indicates a bug in the code. More on this in Unresolved Questions.\r\n* With this PR, `repeat(0).take(n).collect::<Vec<_>>` allocates the size on the heap and uses memset to set the values to 0. This could be optimized to use `__rustc_alloc_zeroed` just as `vec![0; n]` is optimized to do.\r\n* Another marker trait can be introduced, which marks iterators that return at least one value (first `.next()` call will return `Some`). (One problem here is code like `let iter = _; iter.next(); iter.cycle()`, as any call to `.next()` invalidates the property). This can be used for further improvements to `Cycle` as it can be an `UnboundedIterator` if the underlying iterator returns at least one value (currently it's only unbounded if the inner iterator is unbounded). Additionally, FlatMap with an outer iterator producing at least one element and an unbounded inner iterator can be unbounded as well.\r\n* In an intermediate representation inside the rust compiler it should be possible to elide all `None`-branches from code handling return values of `.next()` calls on unbounded iterators. For now, I wasn't able to find a case where llvm wasn't able to do this already with static linking. With dynamic libraries, though, this is a possible optimization (if we trust the library file).\r\n\r\n## Unbounded Iterator Implementers\r\n\r\n* \"Generators\": `Repeat`, `RangeFrom`\r\n* Simple: `Rev`, `Fuse`, `Map`, `Inspect`, `Zip`, `Enumerate`, `Peekable`, `Cloned`, `Box`\r\n* With specialization for `size_hint`: `Filter`, `SkipWhile`, `FilterMap`, `StepBy`, `FlatMap`, `Skip`\r\n* `Cycle`: If the inner iterator is unbounded, `T` is in theory not required to be `Clone`. Unfortunately, removing it from the `UnboundedIterator` implementation results in `conflicting implementation` in the specialization trait implementation.\r\n* `Chain`: In theory, a `Chain` with the first, second or both iterators being unbounded can be an `UnboundedIterator`. Unfortunately, afaik it's not possible to express this right now. [I tried some auto trait hackery](https://play.rust-lang.org/?gist=2930b00ec6172710d3beb4f3ceb63f2b&version=nightly), but ran into #46813 . Thus, currently it's only implemented if the first one is unbounded.\r\n\r\n## Alternatives\r\n\r\n* Introduce `size_hint2` on `Iterator` returning more information than `size_hint`, which can also indicate unbounded iterators. This will be a large public change, which will probably require an RFC first. Additionally, static analyses e.g. to warn on calling consumers on unbounded iterators might become harder. Optimizations would happen inside each function, which will match on the return value of `size_hint2` instead of specialization, increasing the cyclomatic complexity of these functions.\r\n* Instead of using an unsafe marker trait, a safe trait could be used with `fn next(&mut self) -> Self::Item`, which expresses the contract of `UnboundedIterator` in the type system.\r\n\r\n## Implementation Notes / Questions\r\n\r\nAs this is my first contribution to Rust, I'd like to evaluate on some of my design decisions and ask some questions. Also I'd highly appreciate any feedback on my code.\r\n\r\n* Which feature gate should I use when implementing `UnboundedIterator` for `StepBy`, `iterator_step_by` or `unbounded_iter`? I decided to go with the former, as that was also done by `FusedIterator`.\r\n* Is it currently possible to express the three possible combinations of trait bounds for `Chain` as described in Unbounded Iterator Implementers?\r\n* Can the implementation of `UnboundedIterator` on `Cycle` remove the `Clone` trait bound as mentioned in Unbounded Iterator Implementers?\r\n* Currently, to make `.fuse()` into a noop, I use `FusedIterator` as supertrait: `trait UnboundedIterator: FusedIterator`. While this results in the desired optimization, I'd rather like to express it using `impl<I: UnboundedIterator> FusedIterator for I`. Unfortunately, that conflicts with `impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}`.\r\nAdditionally, making `FusedIterator` a supertrait of `UnboundedIterator` requires `Chain<A, B>` to have both A fused and B fused due to the implementation of `FusedIterator` for `Chain`. Is there a better way to express that any `UnboundedIterator` is also a `FusedIterator`, which passes the compiler?\r\n* I used a new specialization trait for structs requiring specialization of their `size_hint` method instead of directly specializing `Iterator` and `UnboundedIterator` because it currently breaks type inference: https://github.com/rust-lang/rust/issues/36262#issuecomment-353197822\r\n\r\n## Unresolved Questions\r\n\r\n1. Introducing `UnboundedIterator` allows us to detect some possibly infinite loops, namely calling consumer functions on them. For example `repeat(0).count()` will result in an infinite loop. I'd suggest that a compile warning should be produced in these cases. In most cases, this is a bug. And in the few cases where this is intended behaviour, `#[allow(...)]` can be used. Consuming methods are `count`, `last`, `fold`, `all`, `max`, `min`, `max_by_key`, `max_by`, `min_by_key`, `min_by`, `sum` and `product`. The functions `collect` and `partition` might fit here as well, but their contract does not actually state that they consume all elements. So there can be an implementation of `FromIterator` which only consumes a finite number of elements. Nonetheless, usually this points to a bug, so I think calling these two methods should still produce a warning.\r\nWhen discussing this in the Rust discord guild I got mixed feedback, which is why I'm adding this as part of the Unresolved Questions. What do you think about this?\r\nAlso, in which layer would this change be done? As far as I understand, adding a new warning requires a new lint. Would it be possible to add this similar to `#[deprecated]` as an annotation which is added to the default implementations of these functions on `UnboundedIterator`?\r\n1. Should `TrustedLen` be implemented for `UnboundedIterator`s? Any `UnboundedIterator` does follow the contract, but does that implementation actually add anything useful?\r\n1. Should every implementation of `UnboundedIterator` specialize the underlying struct's `size_hint` method to ensure returning `(usize::MAX, None)`? Currently types that don't need specialization do return this with their current implementation. But maybe with a later PR this might change. Specializing all of them better ensures the contract in case of changes not keeping in mind the `UnboundedIterator` contract.\r\n1. Currently there is the constraint of `size_hint` needing to return `(usize::MAX, None)` for `UnboundedIterator` implementers. This is both because `Take` has a `size_hint` implementation, which works correctly if the underlying iterator returns these values, and because it makes sense. Should this constrait be removed and `Take` specialized instead?", "created_at": "2017-12-30T22:28:55Z", "updated_at": "2018-02-01T20:31:59Z", "closed_at": "2018-02-01T20:31:59Z", "merged_at": null, "merge_commit_sha": "ec08cd5668a4427a2f262d8e51a5f6bafe6266d2", "assignee": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 583426710, "node_id": "MDU6TGFiZWw1ODM0MjY3MTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-waiting-on-review", "name": "S-waiting-on-review", "color": "d3dddd", "default": false, "description": "Status: Awaiting review from the assignee but also interested parties."}], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/47082/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/47082/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47082/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/c88f74ac72a030d8955d62dceeb90e6b0fcc6331", "head": {"label": "oberien:master", "ref": "master", "sha": "c88f74ac72a030d8955d62dceeb90e6b0fcc6331", "user": {"login": "oberien", "id": 4820508, "node_id": "MDQ6VXNlcjQ4MjA1MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4820508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oberien", "html_url": "https://github.com/oberien", "followers_url": "https://api.github.com/users/oberien/followers", "following_url": "https://api.github.com/users/oberien/following{/other_user}", "gists_url": "https://api.github.com/users/oberien/gists{/gist_id}", "starred_url": "https://api.github.com/users/oberien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oberien/subscriptions", "organizations_url": "https://api.github.com/users/oberien/orgs", "repos_url": "https://api.github.com/users/oberien/repos", "events_url": "https://api.github.com/users/oberien/events{/privacy}", "received_events_url": "https://api.github.com/users/oberien/received_events", "type": "User", "site_admin": false}, "repo": {"id": 92219460, "node_id": "MDEwOlJlcG9zaXRvcnk5MjIxOTQ2MA==", "name": "rust", "full_name": "oberien/rust", "private": false, "owner": {"login": "oberien", "id": 4820508, "node_id": "MDQ6VXNlcjQ4MjA1MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4820508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oberien", "html_url": "https://github.com/oberien", "followers_url": "https://api.github.com/users/oberien/followers", "following_url": "https://api.github.com/users/oberien/following{/other_user}", "gists_url": "https://api.github.com/users/oberien/gists{/gist_id}", "starred_url": "https://api.github.com/users/oberien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oberien/subscriptions", "organizations_url": "https://api.github.com/users/oberien/orgs", "repos_url": "https://api.github.com/users/oberien/repos", "events_url": "https://api.github.com/users/oberien/events{/privacy}", "received_events_url": "https://api.github.com/users/oberien/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/oberien/rust", "description": "A safe, concurrent, practical language.", "fork": true, "url": "https://api.github.com/repos/oberien/rust", "forks_url": "https://api.github.com/repos/oberien/rust/forks", "keys_url": "https://api.github.com/repos/oberien/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/oberien/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/oberien/rust/teams", "hooks_url": "https://api.github.com/repos/oberien/rust/hooks", "issue_events_url": "https://api.github.com/repos/oberien/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/oberien/rust/events", "assignees_url": "https://api.github.com/repos/oberien/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/oberien/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/oberien/rust/tags", "blobs_url": "https://api.github.com/repos/oberien/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/oberien/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/oberien/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/oberien/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/oberien/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/oberien/rust/languages", "stargazers_url": "https://api.github.com/repos/oberien/rust/stargazers", "contributors_url": "https://api.github.com/repos/oberien/rust/contributors", "subscribers_url": "https://api.github.com/repos/oberien/rust/subscribers", "subscription_url": "https://api.github.com/repos/oberien/rust/subscription", "commits_url": "https://api.github.com/repos/oberien/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/oberien/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/oberien/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/oberien/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/oberien/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/oberien/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/oberien/rust/merges", "archive_url": "https://api.github.com/repos/oberien/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/oberien/rust/downloads", "issues_url": "https://api.github.com/repos/oberien/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/oberien/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/oberien/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/oberien/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/oberien/rust/labels{/name}", "releases_url": "https://api.github.com/repos/oberien/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/oberien/rust/deployments", "created_at": "2017-05-23T20:55:00Z", "updated_at": "2020-10-17T09:17:53Z", "pushed_at": "2022-05-21T18:29:45Z", "git_url": "git://github.com/oberien/rust.git", "ssh_url": "git@github.com:oberien/rust.git", "clone_url": "https://github.com/oberien/rust.git", "svn_url": "https://github.com/oberien/rust", "homepage": "https://www.rust-lang.org", "size": 565317, "stargazers_count": 0, "watchers_count": 0, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 1, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 1, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "3f916bd3029262e2270dfbafb9ab045927499abd", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-20T03:06:09Z", "pushed_at": "2023-06-20T03:24:22Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 930398, "stargazers_count": 82761, "watchers_count": 82761, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10963, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9625, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10963, "open_issues": 9625, "watchers": 82761, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/47082"}, "html": {"href": "https://github.com/rust-lang/rust/pull/47082"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/47082"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/47082/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/47082/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/47082/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/c88f74ac72a030d8955d62dceeb90e6b0fcc6331"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 24, "review_comments": 0, "maintainer_can_modify": false, "commits": 8, "additions": 550, "deletions": 37, "changed_files": 8}