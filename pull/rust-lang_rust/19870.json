{"url": "https://api.github.com/repos/rust-lang/rust/pulls/19870", "id": 26055333, "node_id": "MDExOlB1bGxSZXF1ZXN0MjYwNTUzMzM=", "html_url": "https://github.com/rust-lang/rust/pull/19870", "diff_url": "https://github.com/rust-lang/rust/pull/19870.diff", "patch_url": "https://github.com/rust-lang/rust/pull/19870.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/19870", "number": 19870, "state": "closed", "locked": false, "title": "Multi-line errors", "user": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "body": "#### Updated 1/12/2014\n\nI updated the multi-line testcase to current but didn't modify the others. The spew code was broke by the `matches!` macro no longer working and I'm not interested in fixing the testcase.\n\nI additionally added one testcase below.\n\nErrors will in general look similar to below if the error is either `mismatched types` or a few other types. The rest are ignored.\n\n---\n#### Extra testcase:\n\n``` rust\npub trait Foo {\n    type A;\n    fn boo(&self) -> <Self as Foo>::A;\n}\n\nstruct Bar;\n\nimpl Foo for i32 {\n    type A = u32;\n    fn boo(&self) -> u32 {\n        42\n    }\n}\n\nfn foo1<I: Foo<A=Bar>>(x: I) {\n    let _: Bar = x.boo();\n}\n\nfn foo2<I: Foo>(x: I) {\n    let _: Bar = x.boo();\n}\n\n\npub fn baz(x: &Foo<A=Bar>) {\n    let _: Bar = x.boo();\n}\n\n\npub fn main() {\n    let a = 42i32;\n    foo1(a);\n    baz(&a);\n}\n```\n#### Multi-line output:\n\n``` cmd\n$ ./rustc test3.rs\ntest3.rs:20:18: 20:25 error: mismatched types:\n expected `Bar`,\n    found `<I as Foo>::A`\n(expected struct `Bar`,\n    found associated type)\ntest3.rs:20     let _: Bar = x.boo();\n                             ^~~~~~~\ntest3.rs:31:5: 31:9 error: type mismatch resolving `<i32 as Foo>::A == Bar`:\n expected u32,\n    found struct `Bar`\ntest3.rs:31     foo1(a);\n                ^~~~\ntest3.rs:31:5: 31:9 note: required by `foo1`\ntest3.rs:31     foo1(a);\n                ^~~~\ntest3.rs:32:9: 32:11 error: type mismatch resolving `<i32 as Foo>::A == Bar`:\n expected u32,\n    found struct `Bar`\ntest3.rs:32     baz(&a);\n                    ^~\ntest3.rs:32:9: 32:11 note: required for the cast to the object type `Foo`\ntest3.rs:32     baz(&a);\n                    ^~\nerror: aborting due to 3 previous errors\n```\n\n---\n\nThis is a continuation of #19203 which I apparently broke by force pushing after it was closed. I'm attempting to add multi-line errors where they are largely beneficial - to help differentiate different types in compiler messages. As before, this is still a simple fix.\n#### Testcase:\n\n``` rust\nstruct S;\n\nfn test() -> Option<i32> {\n    let s: S;\n\n    s\n}\n\nfn test2() -> Option<i32> {\n    Ok(7) // Should be Some(7)\n}\n\nimpl Iterator for S {\n    type Item = i32;\n    fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n}\n\nfn main(){ \n    test();\n    test2();\n\n}\n```\n\n---\n#### Single-line playpen errors:\n\n``` cmd\n<anon>:6:5: 6:6 error: mismatched types: expected `core::option::Option<int>`, found `S` (expected enum core::option::Option, found struct S)\n<anon>:6     s\n             ^\n<anon>:10:5: 10:10 error: mismatched types: expected `core::option::Option<int>`, found `core::result::Result<_, _>` (expected enum core::option::Option, found enum core::result::Result)\n<anon>:10     Ok(7) // Should be Some(7)\n              ^~~~~\n<anon>:14:5: 14:55 error: method `next` has an incompatible type for trait: expected enum core::option::Option, found enum core::result::Result [E0053]\n<anon>:14     fn next(&mut self) -> Result<uint, uint> { Ok(7) }\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to 3 previous errors\nplaypen: application terminated with error code 101\n```\n\n---\n#### Multi-line errors:\n\n``` cmd\n$ ./rustc test.rs\ntest.rs:6:5: 6:6 error: mismatched types:\n expected `core::option::Option<i32>`,\n    found `S`\n(expected enum `core::option::Option`,\n    found struct `S`)\ntest.rs:6     s\n              ^\ntest.rs:10:5: 10:10 error: mismatched types:\n expected `core::option::Option<i32>`,\n    found `core::result::Result<_, _>`\n(expected enum `core::option::Option`,\n    found enum `core::result::Result`)\ntest.rs:10     Ok(7) // Should be Some(7)\n               ^~~~~\ntest.rs:15:5: 15:53 error: method `next` has an incompatible type for trait: expected enum `core::option::Option`, found enum `core::result::Result` [E0053]\ntest.rs:15     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to 3 previous errors\n```\n\n---\n#### Positive notes\n- Vim worked fine with it: https://github.com/rust-lang/rust/pull/19203#issuecomment-66861668\n- `make check` didn't find any errors\n- Fixed _backtick_ placement suggested by @p1start at https://github.com/rust-lang/rust/pull/19203#issuecomment-64062052\n#### Negative notes\n- Didn't check Emacs support but also wasn't provided a testcase...\n- Needs to be tested with macro errors but I don't have a good testcase yet\n- I would like to move the `E[0053]` earlier (see https://github.com/rust-lang/rust/issues/19464#issuecomment-65334301) but I don't know how\n- It might be better to indent the types slightly like so (but I don't know how):\n\n``` cmd\ntest.rs:6:5: 6:6 error: mismatched types:\n          expected `core::option::Option<int>`,\n             found `S`\n         (expected enum `core::option::Option`,\n             found struct `S`)\ntest.rs:6     s\n```\n- Deep whitespace indentation may be a bad idea because early wrapping will cause misalignment between lines\n#### Other\n- I thought that compiler flags or something else (environment variables maybe) might be required because of comments against it but now that seems too much of a burden for users and for too little gain.\n- There was concern that it will make large quantities of errors difficult to distinguish but I don't find that an issue. They both look awful and multi-line errors makes the types easier to understand.\n\n---\n#### Single lined spew:\n\n``` cmd\n$ rustc test2.rs \ntest2.rs:161:9: 170:10 error: method `next` has an incompatible type for trait: expected enum core::option::Option, found enum core::result::Result [E0053]\ntest2.rs:161         fn next(&mut self) -> Result<&'a str, int> {\ntest2.rs:162             self.curr = self.next;\ntest2.rs:163             \ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\ntest2.rs:165                 self.next = if self.all.char_at(self.next) == '(' { close }\ntest2.rs:166                 else { open }\n             ...\ntest2.rs:164:21: 164:31 error: mismatched types: expected `core::result::Result<uint, int>`, found `core::option::Option<_>` (expected enum core::result::Result, found enum core::option::Option)\ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\n                                 ^~~~~~~~~~\ntest2.rs:164:33: 164:44 error: mismatched types: expected `core::result::Result<uint, int>`, found `core::option::Option<_>` (expected enum core::result::Result, found enum core::option::Option)\ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\n                                             ^~~~~~~~~~~\ntest2.rs:169:40: 169:76 error: mismatched types: expected `core::result::Result<&'a str, int>`, found `core::option::Option<&str>` (expected enum core::result::Result, found enum core::option::Option)\ntest2.rs:169             if self.curr != self.len { Some(self.all[self.curr..self.next]) } else { None }\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ntest2.rs:169:86: 169:90 error: mismatched types: expected `core::result::Result<&'a str, int>`, found `core::option::Option<_>` (expected enum core::result::Result, found enum core::option::Option)\ntest2.rs:169             if self.curr != self.len { Some(self.all[self.curr..self.next]) } else { None }\n                                                                                                  ^~~~\ntest2.rs:205:14: 205:18 error: mismatched types: expected `core::result::Result<uint, int>`, found `core::option::Option<uint>` (expected enum core::result::Result, found enum core::option::Option)\ntest2.rs:205             (open, close)\n                          ^~~~\ntest2.rs:205:20: 205:25 error: mismatched types: expected `core::result::Result<uint, int>`, found `core::option::Option<uint>` (expected enum core::result::Result, found enum core::option::Option)\ntest2.rs:205             (open, close)\n                                ^~~~~\ntest2.rs:210:21: 210:31 error: mismatched types: expected `core::result::Result<uint, int>`, found `core::option::Option<_>` (expected enum core::result::Result, found enum core::option::Option)\ntest2.rs:210             if let (Some(open), _) = Parens::find_parens(self.all, 0) {\n                                 ^~~~~~~~~~\ntest2.rs:210:13: 212:28 error: mismatched types: expected `core::option::Option<&'a int>`, found `core::option::Option<&str>` (expected int, found str)\ntest2.rs:210             if let (Some(open), _) = Parens::find_parens(self.all, 0) {\ntest2.rs:211                 Some(self.all[0..open])\ntest2.rs:212             } else { None }\ntest2.rs:299:48: 299:58 error: mismatched types: expected `Box<translate::Entity>`, found `collections::vec::Vec<_>` (expected box, found struct collections::vec::Vec)\ntest2.rs:299         pub fn new() -> Entity { Entity::Group(Vec::new()) }\n                                                            ^~~~~~~~~~\ntest2.rs:359:51: 359:58 error: type `&mut Box<translate::Entity>` does not implement any method in scope named `push`\ntest2.rs:359                 Entity::Group(ref mut vec) => vec.push(e),\n                                                               ^~~~~~~\ntest2.rs:366:51: 366:85 error: type `&mut Box<translate::Entity>` does not implement any method in scope named `push`\ntest2.rs:366                 Entity::Group(ref mut vec) => vec.push(Entity::Inner(s.to_string())),\n                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to 12 previous errors\n```\n\n---\n#### Multi-line spew:\n\n``` cmd\n$ ./rustc test2.rs \ntest2.rs:161:9: 170:10 error: method `next` has an incompatible type for trait:\n expected enum `core::option::Option`,\n    found enum `core::result::Result` [E0053]\ntest2.rs:161         fn next(&mut self) -> Result<&'a str, int> {\ntest2.rs:162             self.curr = self.next;\ntest2.rs:163             \ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\ntest2.rs:165                 self.next = if self.all.char_at(self.next) == '(' { close }\ntest2.rs:166                 else { open }\n             ...\ntest2.rs:164:21: 164:31 error: mismatched types:\n expected `core::result::Result<uint, int>`,\n    found `core::option::Option<_>`\n(expected enum `core::result::Result`,\n    found enum `core::option::Option`)\ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\n                                 ^~~~~~~~~~\ntest2.rs:164:33: 164:44 error: mismatched types:\n expected `core::result::Result<uint, int>`,\n    found `core::option::Option<_>`\n(expected enum `core::result::Result`,\n    found enum `core::option::Option`)\ntest2.rs:164             if let (Some(open), Some(close)) = Parens::find_parens(self.all, self.next) {\n                                             ^~~~~~~~~~~\ntest2.rs:169:40: 169:76 error: mismatched types:\n expected `core::result::Result<&'a str, int>`,\n    found `core::option::Option<&str>`\n(expected enum `core::result::Result`,\n    found enum `core::option::Option`)\ntest2.rs:169             if self.curr != self.len { Some(self.all[self.curr..self.next]) } else { None }\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ntest2.rs:169:86: 169:90 error: mismatched types:\n expected `core::result::Result<&'a str, int>`,\n    found `core::option::Option<_>`\n(expected enum `core::result::Result`,\n    found enum `core::option::Option`)\ntest2.rs:169             if self.curr != self.len { Some(self.all[self.curr..self.next]) } else { None }\n                                                                                                  ^~~~\ntest2.rs:205:14: 205:18 error: mismatched types:\n expected `core::result::Result<uint, int>`,\n    found `core::option::Option<uint>`\n(expected enum `core::result::Result`,\n    found enum `core::option::Option`)\ntest2.rs:205             (open, close)\n                          ^~~~\ntest2.rs:205:20: 205:25 error: mismatched types:\n expected `core::result::Result<uint, int>`,\n    found `core::option::Option<uint>`\n(expected enum `core::result::Result`,\n    found enum `core::option::Option`)\ntest2.rs:205             (open, close)\n                                ^~~~~\ntest2.rs:210:21: 210:31 error: mismatched types:\n expected `core::result::Result<uint, int>`,\n    found `core::option::Option<_>`\n(expected enum `core::result::Result`,\n    found enum `core::option::Option`)\ntest2.rs:210             if let (Some(open), _) = Parens::find_parens(self.all, 0) {\n                                 ^~~~~~~~~~\ntest2.rs:210:13: 212:28 error: mismatched types:\n expected `core::option::Option<&'a int>`,\n    found `core::option::Option<&str>`\n(expected int,\n    found str)\ntest2.rs:210             if let (Some(open), _) = Parens::find_parens(self.all, 0) {\ntest2.rs:211                 Some(self.all[0..open])\ntest2.rs:212             } else { None }\ntest2.rs:229:57: 229:96 error: the trait `core::ops::Fn<(char,), bool>` is not implemented for the type `|char| -> bool`\ntest2.rs:229                                              .map(|s| s.trim_chars(|c: char| c.is_whitespace()))\n                                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ntest2.rs:238:46: 239:75 error: type `core::str::CharSplits<'_, |char| -> bool>` does not implement any method in scope named `filter_map`\ntest2.rs:238                                             .filter_map(|s| if !s.is_empty() { Some(s.trim_chars('\\'')) }\ntest2.rs:239                                                             else { None })\ntest2.rs:237:46: 237:91 error: the trait `core::ops::Fn<(char,), bool>` is not implemented for the type `|char| -> bool`\ntest2.rs:237                 let vec: Vec<&str> = value[].split(|c: char| matches!(c, '(' | ')' | ','))\n                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ntest2.rs:238:65: 238:77 error: the type of this value must be known in this context\ntest2.rs:238                                             .filter_map(|s| if !s.is_empty() { Some(s.trim_chars('\\'')) }\n                                                                             ^~~~~~~~~~~~\ntest2.rs:299:48: 299:58 error: mismatched types:\n expected `Box<translate::Entity>`,\n    found `collections::vec::Vec<_>`\n(expected box,\n    found struct `collections::vec::Vec`)\ntest2.rs:299         pub fn new() -> Entity { Entity::Group(Vec::new()) }\n                                                            ^~~~~~~~~~\ntest2.rs:321:36: 322:65 error: type `core::str::CharSplits<'_, |char| -> bool>` does not implement any method in scope named `filter_map`\ntest2.rs:321                                   .filter_map(|s| if !s.is_empty() { Some(s.trim_chars('\\'')) }\ntest2.rs:322                                                   else { None })\ntest2.rs:320:36: 320:81 error: the trait `core::ops::Fn<(char,), bool>` is not implemented for the type `|char| -> bool`\ntest2.rs:320             let vec: Vec<&str> = s.split(|c: char| matches!(c, '(' | ')' | ','))\n                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ntest2.rs:321:55: 321:67 error: the type of this value must be known in this context\ntest2.rs:321                                   .filter_map(|s| if !s.is_empty() { Some(s.trim_chars('\\'')) }\n                                                                   ^~~~~~~~~~~~\ntest2.rs:359:51: 359:58 error: type `&mut Box<translate::Entity>` does not implement any method in scope named `push`\ntest2.rs:359                 Entity::Group(ref mut vec) => vec.push(e),\n                                                               ^~~~~~~\ntest2.rs:366:51: 366:85 error: type `&mut Box<translate::Entity>` does not implement any method in scope named `push`\ntest2.rs:366                 Entity::Group(ref mut vec) => vec.push(Entity::Inner(s.to_string())),\n                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to 24 previous errors\n```\n\nCloses #18946 #19464\ncc @P1start @jakub- @tomjakubowski @kballard @chris-morgan\n", "created_at": "2014-12-15T09:15:14Z", "updated_at": "2015-01-12T15:17:18Z", "closed_at": "2015-01-12T11:00:32Z", "merged_at": "2015-01-12T11:00:32Z", "merge_commit_sha": "c8aa947b7edea695dfd2fc9a6501ecce4667bbfa", "assignee": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/19870/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/19870/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19870/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/7b82a93be3798d9345cd459e251bcc571cf60a79", "head": {"label": "mdinger:align_error", "ref": "align_error", "sha": "7b82a93be3798d9345cd459e251bcc571cf60a79", "user": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "repo": {"id": 18922377, "node_id": "MDEwOlJlcG9zaXRvcnkxODkyMjM3Nw==", "name": "rust", "full_name": "mdinger/rust", "private": false, "owner": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/mdinger/rust", "description": "a safe, concurrent, practical language", "fork": true, "url": "https://api.github.com/repos/mdinger/rust", "forks_url": "https://api.github.com/repos/mdinger/rust/forks", "keys_url": "https://api.github.com/repos/mdinger/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/mdinger/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/mdinger/rust/teams", "hooks_url": "https://api.github.com/repos/mdinger/rust/hooks", "issue_events_url": "https://api.github.com/repos/mdinger/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/mdinger/rust/events", "assignees_url": "https://api.github.com/repos/mdinger/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/mdinger/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/mdinger/rust/tags", "blobs_url": "https://api.github.com/repos/mdinger/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/mdinger/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/mdinger/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/mdinger/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/mdinger/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/mdinger/rust/languages", "stargazers_url": "https://api.github.com/repos/mdinger/rust/stargazers", "contributors_url": "https://api.github.com/repos/mdinger/rust/contributors", "subscribers_url": "https://api.github.com/repos/mdinger/rust/subscribers", "subscription_url": "https://api.github.com/repos/mdinger/rust/subscription", "commits_url": "https://api.github.com/repos/mdinger/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/mdinger/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/mdinger/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/mdinger/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/mdinger/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/mdinger/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/mdinger/rust/merges", "archive_url": "https://api.github.com/repos/mdinger/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/mdinger/rust/downloads", "issues_url": "https://api.github.com/repos/mdinger/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/mdinger/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/mdinger/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/mdinger/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/mdinger/rust/labels{/name}", "releases_url": "https://api.github.com/repos/mdinger/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/mdinger/rust/deployments", "created_at": "2014-04-18T18:55:17Z", "updated_at": "2015-04-05T00:32:51Z", "pushed_at": "2015-11-13T21:06:15Z", "git_url": "git://github.com/mdinger/rust.git", "ssh_url": "git@github.com:mdinger/rust.git", "clone_url": "https://github.com/mdinger/rust.git", "svn_url": "https://github.com/mdinger/rust", "homepage": "http://www.rust-lang.org", "size": 325908, "stargazers_count": 0, "watchers_count": 0, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "has_discussions": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "0aec4db1c09574da2f30e3844de6d252d79d4939", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-20T02:32:08Z", "pushed_at": "2023-06-20T02:02:30Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 930398, "stargazers_count": 82760, "watchers_count": 82760, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10961, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9626, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10961, "open_issues": 9626, "watchers": 82760, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/19870"}, "html": {"href": "https://github.com/rust-lang/rust/pull/19870"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/19870"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/19870/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/19870/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/19870/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/7b82a93be3798d9345cd459e251bcc571cf60a79"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "comments": 30, "review_comments": 28, "maintainer_can_modify": false, "commits": 3, "additions": 1048, "deletions": 225, "changed_files": 99}