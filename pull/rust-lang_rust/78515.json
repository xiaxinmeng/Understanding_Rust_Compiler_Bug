{"url": "https://api.github.com/repos/rust-lang/rust/pulls/78515", "id": 512002241, "node_id": "MDExOlB1bGxSZXF1ZXN0NTEyMDAyMjQx", "html_url": "https://github.com/rust-lang/rust/pull/78515", "diff_url": "https://github.com/rust-lang/rust/pull/78515.diff", "patch_url": "https://github.com/rust-lang/rust/pull/78515.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/78515", "number": 78515, "state": "closed", "locked": false, "title": "Switchable buffering for Stdout", "user": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "body": "# Summary\r\n\r\nThis PR adds \"switchable\" buffering to Stdout. Instead of being unconditionally line-buffered, stdout can now be put in one of 3 modes: line buffering, which is the current behavior; block buffering, which mirrors `BufWriter`; and unbuffered, which (with one small exception, see **Design Notes**) forwards all writes directly to the underlying device.\r\n\r\n~~This PR additionally contains some proposed implementation updates to `BufWriter`, with a focus on reducing total device `write` calls in the average case. These updates are based on [lessons learned](https://github.com/rust-lang/rust/pull/72808#discussion_r475911543) from the design of `LineWriterShim`, as well as some discussions with @workingjubilee on this topic. This could be considered \"out of scope\" for this PR, so at the discretion of the reviewers I'm happy to move it to a separate PR, but I was \"in the neighborhood\", so to speak. See **Design Notes** for details about these changes.~~ Moved to #78551\r\n\r\nThis PR moves us another step closer to #60673, which calls for `stdout` to use block buffering when appropriate (ie, when stdout is a not a tty). This PR does *not* change any current startup behavior; `stdout` is still unconditionally line buffered by default. Instead, this PR creates only an implementation of switchable buffering (which lives in the `SwitchWriter` type), which future PRs (probably individual ones for different platforms) can use to select an appropriate startup default for their launch environment.\r\n\r\n## Side note on terminology\r\n\r\nThroughout this proposal I'll be referring to writers flushing / buffers being flushed; unless I specify otherwise, I always mean that the data is being flushed *one level*, to the wrapped `io::Write` writer. \"Full\" flushing (ie, forwarding all the way though the stack to the underlying sink) is assumed to only happen on an explicit user call to `flush`.\r\n\r\n# Design notes\r\n\r\n## `SwitchWriter`\r\n\r\nThe core of this PR is the `SwitchWriter` type. It's fairly simple; it has a current mode, and delegates all write operations to its `BufWriter` as follows:\r\n\r\n- In block buffered mode, it forwards directly to the `BufWriter`.\r\n- In line buffered mode, it creates a `LineWriterShim` (a wrapper around `&mut BufWriter`, implementing line buffering logic) and forwards to it. Treatment of existing buffered data is entirely deferred to `LineWriterShim`.\r\n- In unbuffered mode, it ensures the `BufWriter` is flushed, then forwards directly to the `io::Write` contained by the `BufWriter`.\r\n    - A small exception: because `write_fmt` tends to be a lot of very short writes, it is buffered into the `BufWriter` and immediately flushed. The write still completes immediately, but we assume in practice that a caller of `write_fmt` on an unbuffered `SwitchWriter` doesn't care if *every* individual write that entails is forwarded directly to the writer, as much as they care that the write is forwarded *immediately*.\r\n\r\nChanging the buffering mode never performs any synchronous i/o operations; it only changes the behavior of subsequent writes. The treatment of buffered content during a mode shift is left deliberately unspecified; in practice it's treated by whatever the behavior of the current mode is. For instance, when switching from block buffering to line buffering, any previously buffered content will (usually) remain buffered until a new line is written by the user. `SwitchWriter` does not retroactively scan the buffer for newlines to flush after such a mode switch. Conversely, it's possible (though unlikely) for partial writes from the underlying device to cause lines in line buffering mode to be buffered without being flushed.  `LineWriter` is designed to retry these writes ASAP (on subsequent write calls), but switching to block buffered mode will cause this content to remain buffered. It is assumed that, in cases where precision is needed, the user would `flush` *before* switching modes.\r\n\r\nStrictly speaking, it isn't necessary for the fulfillment of #60673 for `stdout` to be *switchable*, only that the mode is set based on some environmental factors at startup. In practice, however, this means that the *implementation* needs to be able to switch over the current mode, so it's a trivial addition to make it further switchable at runtime. This has the side benefit of making it easy to break #60673 into different parts; without this public interface, the PR fails the \"unused code\" checks, and would require an implementation of `isatty` to be added immediately. Because this new API is unstable, I figure we can always remove it after #60673 is complete if we find it isn't justifying its inclusion. \r\n\r\n## `stdout` interface changes\r\n\r\nThis change adds `buffer_mode` and `set_buffer_mode` to `StdoutLock`, which cause the buffering mode to be globally switched. There's not much else to talk about here. Currently `SwitchWriter` is *not* exported publicly (though it could be someday), so this API is the only way right now for any of this behavior to be accessed.\r\n\r\n# Follow up items\r\n\r\nThe functional aspects of this PR are complete, but there are still several open tasks that need to be completed. Some are code related (write comprehensive tests & docs), which others are publishing related (this PR adds new public methods to `StdoutLock`, which need to be discussed and approved).\r\n\r\n## Tasks\r\n\r\n- [ ] `SwitchWriter` tests\r\n- [ ] `stdout` switching tests\r\n   - Is `stdout` tested specifically as a write target? I see tests for panic consistency / recovery, and extensive tests for `BufWriter`, `LineWriter`, etc., but didn't immediately see tests for \"writing to stdout\".\r\n- [ ] Comprehensive documentation of new public API\r\n- [ ] Comprehensive documentation of `SwitchWriter`; even though it's not exported publicly, we still want it to be documented for developers reading it.\r\n\r\n## Open questions\r\n\r\nWhile I've made assumptions about these, and described my rationale as much as possible above, I wanted to call out the specific things that I wanted to be sure are addressed in review.\r\n\r\n- [x] Should stdout be made runtime switchable by standard library clients at all?\r\n    - Emphatically yes.\r\n    - [ ] If so, approve my naming scheme, or come up with a preferable one.\r\n    - [ ] if so, do we like the trivial get/set interface, or is another design warrented?\r\n    - [ ] Should the buffer switching interface be available on `Stdout`, as well as `StdoutLock`?\r\n- [ ] Do we like these buffer mode choices? I was torn about whether to expose unbuffered, or just stick to Block / Line buffering. We need an unbuffered mode internally (for stdout cleanup at program shutdown) but we don't necessarily have to expose it.\r\n\r\n# Next steps\r\n\r\nAssuming this PR gets merged (or, at least, the `SwitchWriter` part), the only remaining step is to actually create an interface for the platform to report its preferred stdout configuration based on the startup environment. This would be nearly identical to the way `stdout_raw` or `is_ebadf` are handled today: a standard interface is implemented in the various `sys` crates and consumed via a uniform interface in `io`. My envisioned interface looks like:\r\n\r\n```rust\r\n/// Get the stdout buffering mode based on the startup\r\n/// environment. For instance, on unix platforms, this will\r\n/// enable line-buffering if stdout is a tty and block-buffering\r\n/// otherwise. Also returns the default buffer size.\r\nfn get_default_stdout_mode() -> (BufferMode, usize) { ... }\r\n```\r\n\r\nThis will, of course, be discussed in more detail in that future PR.\r\n", "created_at": "2020-10-29T04:23:48Z", "updated_at": "2022-12-16T23:25:16Z", "closed_at": "2022-08-26T22:03:20Z", "merged_at": null, "merge_commit_sha": "a0dc85db6c488721ed04166fa216df8cdb0f8c1c", "assignee": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 583436937, "node_id": "MDU6TGFiZWw1ODM0MzY5Mzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-waiting-on-author", "name": "S-waiting-on-author", "color": "d3dddd", "default": false, "description": "Status: This is awaiting some action (such as code changes or more information) from the author."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/78515/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/78515/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78515/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/a69dca8e6ef7d368a74c0fbee2780cc31b6f37c0", "head": {"label": "Lucretiel:stdout-switchable-buffering", "ref": "stdout-switchable-buffering", "sha": "a69dca8e6ef7d368a74c0fbee2780cc31b6f37c0", "user": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "repo": {"id": 140640565, "node_id": "MDEwOlJlcG9zaXRvcnkxNDA2NDA1NjU=", "name": "rust", "full_name": "Lucretiel/rust", "private": false, "owner": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/Lucretiel/rust", "description": "A safe, concurrent, practical language.", "fork": true, "url": "https://api.github.com/repos/Lucretiel/rust", "forks_url": "https://api.github.com/repos/Lucretiel/rust/forks", "keys_url": "https://api.github.com/repos/Lucretiel/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/Lucretiel/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/Lucretiel/rust/teams", "hooks_url": "https://api.github.com/repos/Lucretiel/rust/hooks", "issue_events_url": "https://api.github.com/repos/Lucretiel/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/Lucretiel/rust/events", "assignees_url": "https://api.github.com/repos/Lucretiel/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/Lucretiel/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/Lucretiel/rust/tags", "blobs_url": "https://api.github.com/repos/Lucretiel/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/Lucretiel/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/Lucretiel/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/Lucretiel/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/Lucretiel/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/Lucretiel/rust/languages", "stargazers_url": "https://api.github.com/repos/Lucretiel/rust/stargazers", "contributors_url": "https://api.github.com/repos/Lucretiel/rust/contributors", "subscribers_url": "https://api.github.com/repos/Lucretiel/rust/subscribers", "subscription_url": "https://api.github.com/repos/Lucretiel/rust/subscription", "commits_url": "https://api.github.com/repos/Lucretiel/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/Lucretiel/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/Lucretiel/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/Lucretiel/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/Lucretiel/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/Lucretiel/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/Lucretiel/rust/merges", "archive_url": "https://api.github.com/repos/Lucretiel/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/Lucretiel/rust/downloads", "issues_url": "https://api.github.com/repos/Lucretiel/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/Lucretiel/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/Lucretiel/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/Lucretiel/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/Lucretiel/rust/labels{/name}", "releases_url": "https://api.github.com/repos/Lucretiel/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/Lucretiel/rust/deployments", "created_at": "2018-07-12T00:25:59Z", "updated_at": "2021-12-05T03:32:33Z", "pushed_at": "2023-05-08T21:37:36Z", "git_url": "git://github.com/Lucretiel/rust.git", "ssh_url": "git@github.com:Lucretiel/rust.git", "clone_url": "https://github.com/Lucretiel/rust.git", "svn_url": "https://github.com/Lucretiel/rust", "homepage": "https://www.rust-lang.org", "size": 858500, "stargazers_count": 0, "watchers_count": 0, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "0cd939e36c0696aad44a213566c9b152f0437020", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-20T15:07:00Z", "pushed_at": "2023-06-20T15:01:15Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 931034, "stargazers_count": 82776, "watchers_count": 82776, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10967, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9635, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10967, "open_issues": 9635, "watchers": 82776, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/78515"}, "html": {"href": "https://github.com/rust-lang/rust/pull/78515"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/78515"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/78515/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/78515/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/78515/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/a69dca8e6ef7d368a74c0fbee2780cc31b6f37c0"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": false, "rebaseable": false, "mergeable_state": "dirty", "merged_by": null, "comments": 47, "review_comments": 37, "maintainer_can_modify": false, "commits": 1, "additions": 185, "deletions": 18, "changed_files": 10}