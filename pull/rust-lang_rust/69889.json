{"url": "https://api.github.com/repos/rust-lang/rust/pulls/69889", "id": 386117172, "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg2MTE3MTcy", "html_url": "https://github.com/rust-lang/rust/pull/69889", "diff_url": "https://github.com/rust-lang/rust/pull/69889.diff", "patch_url": "https://github.com/rust-lang/rust/pull/69889.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/69889", "number": 69889, "state": "closed", "locked": false, "title": "Overhaul of the `AllocRef` trait to match allocator-wg's latest consens", "user": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "body": "This is a major overhaul of the `AllocRef` trait. This PR is split into three parts: \r\n1. Rewrite of `AllocRef`\r\n2. Adjustments for `Box` and `RawVec`\r\n3. Split of `core::alloc` into multiple, private submodules\r\n\r\n#### The new `AllocRef` trait:\r\n\r\n- `AllocRef` was changed to only have four methods: `alloc`/`dealloc` as required methods and `grow`/`shrink` as provided methods. Growing and shrinking are mostly combined into `realloc` (like in C) but are actually 2 very different operations.\r\n- Every allocating method (`alloc`, `grow`, `shrink`) now return a pointer and the actual allocation size like in the previously removed `_excess`-API to support \"overallocating\".\r\n- Two new enumerations where introduced to change the behavior of allocationg:\r\n\r\n<details>\r\n  <summary> Click here for a code outline </summary>\r\n\r\n*(slightly stripped)*\r\n\r\n```rust\r\n/// A desired initial state for allocated memory.\r\npub enum AllocInit {\r\n    /// The new memory is not initialized to any particular value.\r\n    ///\r\n    /// Remember that reading uninitialized memory is Undefined Behavior.\r\n    Uninitialized,\r\n    /// The new memory is guaranteed to be zeroed.\r\n    Zeroed,\r\n}\r\n\r\n/// A reallocation constraint.\r\npub enum ReallocPlacement {\r\n    /// The new address of the memory can be any valid location.\r\n    ///\r\n    /// If the allocation _does_ move, it's the responsibility of the allocator\r\n    /// to also move the data from the previous location to the new location.\r\n    Unspecified,\r\n    /// The address of the new memory must not change.\r\n    ///\r\n    /// If the allocation would have to be moved to a new location to fit, the\r\n    /// reallocation request will fail.\r\n    InPlace,\r\n}\r\n\r\n/// An implementation of `AllocRef` can allocate, grow, shrink, and deallocate arbitrary blocks of\r\n/// data described via `Layout`.\r\n///\r\n/// `AllocRef` is designed to be implemented on ZSTs, references, or smart pointers because having\r\n/// an allocator like `MyAlloc([u8; N])` cannot be moved, without updating the pointers to the\r\n/// allocated memory.\r\n///\r\n/// Unlike `GlobalAlloc`, zero-sized allocations are allowed in `AllocRef`. If an underlying\r\n/// allocator does not support this (like jemalloc) or return a null pointer (such as\r\n/// `libc::malloc`), this case must be caught. `Layout::dangling()` then can be used to create\r\n/// an aligned `NonNull<u8>`.\r\n///\r\n///\r\n/// ### Currently allocated memory\r\n///\r\n/// Some of the methods require that a memory block be *currently allocated* via an allocator. This\r\n/// means that:\r\n///\r\n/// * the starting address for that memory block was previously returned by `alloc`, `grow`, or\r\n///   `shrink`, and\r\n/// * the memory block has not been subsequently deallocated, where blocks are either deallocated\r\n///   directly by being passed to `dealloc` or were changed by being passed to `grow` or\r\n///   `shrink` that returns `Ok`. If `grow` or `shrink` have returned `Err`, the passed pointer\r\n///   remains valid.\r\n///\r\n/// ### Memory fitting\r\n///\r\n/// Some of the methods require that a layout *fit* a memory block. What it means for a layout to\r\n/// \"fit\" a memory block means (or equivalently, for a memory block to \"fit\" a layout) is that the\r\n/// following conditions must hold:\r\n///\r\n/// * The block's starting address must be aligned to `layout.align()`, and\r\n/// * The block's size must fall in the range `use_min ..= use_max`, where:\r\n///    - `use_min` is [`layout.size()`], and\r\n///    - `use_max` is the allocation size that was returned.\r\n///\r\n/// ### Notes\r\n///\r\n///  * the size of the layout most recently used to allocate the block is guaranteed to be in the\r\n///    range `use_min ..= use_max`,\r\n///  * if a layout `k` fits a memory block (denoted by `ptr`) currently allocated via an allocator\r\n///    `a`, then it is legal to use that layout to deallocate it, i.e.,\r\n///    `a.dealloc(ptr, k);`, and\r\n///  * if an allocator does not support overallocating, it is fine to simply return\r\n///    `layout.size()` as the allocated size, such as `use_min == use_max`.\r\n///\r\n/// # Safety\r\n///\r\n/// * Pointers returned from an allocator must point to valid memory and retain their validity until\r\n///   the instance and all of its clones are dropped,\r\n/// * cloning or moving the allocator must not invalidate pointers returned from this allocator.\r\n///   A cloned allocator must behave like the same allocator, and\r\n/// * any pointer to a memory block which is *currently allocated* may be passed to any other\r\n///   method of the allocator.\r\npub unsafe trait AllocRef {\r\n    /// On success, returns a pointer meeting the size and alignment guarantees of `layout` and the\r\n    /// actual size of the allocated block, which is greater than or equal to `layout.size()`.\r\n    ///\r\n    /// If this method returns an `Ok(addr)`, then the `addr` returned will be non-null address\r\n    /// pointing to a block of storage suitable for holding an instance of `layout`.\r\n    ///\r\n    /// The returned block of storage is initialized like specified by `init`.\r\n    ///\r\n    /// # Errors\r\n    ///\r\n    /// Returning `Err` indicates that either memory is exhausted or `layout` does not meet\r\n    /// allocator's size or alignment constraints.\r\n    fn alloc(&mut self, layout: Layout, init: AllocInit) -> Result<(NonNull<u8>, usize), AllocErr>;\r\n\r\n    /// Deallocate the memory referenced by `ptr`.\r\n    ///\r\n    /// # Safety\r\n    ///\r\n    /// * `ptr` must denote a block of memory *currently allocated* via this allocator,\r\n    /// * `layout` must *fit* that block of memory, and\r\n    /// * the alignment of the `layout` must match the alignment used to allocate that block of\r\n    ///   memory.\r\n    unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout);\r\n\r\n    /// Returns a pointer and the actual size of the allocated block. The pointer is suitable for\r\n    /// holding data described by a new layout with `layout`\u2019s alignment and a size given by\r\n    /// `new_size`. To accomplish this, the allocator may extend the allocation referenced by `ptr`\r\n    /// to fit the new layout.\r\n    ///\r\n    /// If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\r\n    /// transferred to this allocator. The memory may or may not have been freed, and should be\r\n    /// considered unusable (unless of course it was transferred back to the caller again via the\r\n    /// return value of this method).\r\n    ///\r\n    /// If this method returns `Err`, then ownership of the memory block has not been transferred to\r\n    /// this allocator, and the contents of the memory block are unaltered.\r\n    ///\r\n    /// The behavior on how the allocator tries to shrink the memory can be specified by\r\n    /// `placement`. The returned block of storage is initialized like specified by `init`.\r\n    ///\r\n    /// # Safety\r\n    ///\r\n    /// * `ptr` must be *currently allocated* via this allocator,\r\n    /// * `layout` must *fit* the `ptr`. (The `new_size` argument need not fit it.)\r\n    /// * `new_size` must be greater than or equal to `layout.size()`\r\n    /// * `new_size`, when rounded up to the nearest multiple of `layout.align()`, must not overflow\r\n    ///   (i.e., the rounded value must be less than `usize::MAX`).\r\n    ///\r\n    /// # Errors\r\n    ///\r\n    /// Returns `Err` only if the new layout does not meet the allocator's size and alignment\r\n    /// constraints of the allocator, or if growing otherwise fails.\r\n    unsafe fn grow(\r\n        &mut self,\r\n        ptr: NonNull<u8>,\r\n        layout: Layout,\r\n        new_size: usize,\r\n        placement: ReallocPlacement,\r\n        init: AllocInit,\r\n    ) -> Result<(NonNull<u8>, usize), AllocErr> { ... }\r\n\r\n    /// Returns a pointer and the actual size of the allocated block. The pointer is suitable for\r\n    /// holding data described by a new layout with `layout`\u2019s alignment and a size given by\r\n    /// `new_size`. To accomplish this, the allocator may shrink the allocation referenced by `ptr`\r\n    /// to fit the new layout.\r\n    ///\r\n    /// The behavior on how the allocator tries to shrink the memory can be specified by\r\n    /// `placement`.\r\n    ///\r\n    /// If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\r\n    /// transferred to this allocator. The memory may or may not have been freed, and should be\r\n    /// considered unusable (unless of course it was transferred back to the caller again via the\r\n    /// return value of this method).\r\n    ///\r\n    /// If this method returns `Err`, then ownership of the memory block has not been transferred to\r\n    /// this allocator, and the contents of the memory block are unaltered.\r\n    ///\r\n    /// # Safety\r\n    ///\r\n    /// * `ptr` must be *currently allocated* via this allocator,\r\n    /// * `layout` must *fit* the `ptr`. (The `new_size` argument need not fit it.)\r\n    /// * `new_size` must be smaller than or equal to `layout.size()`\r\n    ///\r\n    /// # Errors\r\n    ///\r\n    /// Returns `Err` only if the new layout does not meet the allocator's size and alignment\r\n    /// constraints of the allocator, or if shrinking otherwise fails.\r\n    unsafe fn shrink(\r\n        &mut self,\r\n        ptr: NonNull<u8>,\r\n        layout: Layout,\r\n        new_size: usize,\r\n        placement: ReallocPlacement,\r\n    ) -> Result<(NonNull<u8>, usize), AllocErr> { ... }\r\n}\r\n```\r\n</details>\r\n\r\n### Guide for reviewing\r\n\r\nThere are four commits in this PR:\r\n\r\n- [Rewrite `AllocRef` to only use `alloc`,`dealloc`,`grow`, and `shrink` (split view)](https://github.com/rust-lang/rust/commit/3ff908dd22800d860fb71965b2c0b323d6b87839?diff=split) introduces the rewritten `AllocRef` trait and only makes small adjustments to let `std` compile.\r\n- [Adjust `Box` to use ZST aware `AllocRef`](https://github.com/rust-lang/rust/commit/4c590fb7fe805add76d4a52a8a4cce665f2be0d3) is only a pretty small change to adjust `Box` to use all features of `AllocRef`\r\n- [Adjust `RawVec` to use ZST aware `AllocRef` (split view)](https://github.com/rust-lang/rust/commit/72d3e830efbc93c0e7e2901f79c0e014db38f4fc?diff=split) is roughly the same as #69824.\r\n- [Split `core::alloc` module](https://github.com/rust-lang/rust/commit/a6d5b67b2315255e06c23e9eac18101bbdd3a5bc) splits `core::alloc` private in submodules but in comparison to #69863 it renames `core/alloc.rs` to `core/alloc/layout.rs` so other PRs modifying `Layout` should not be affected.\r\n\r\nAny further commits will probably fixes and small adjustments only. I will only force-push to rebase to keep things clean.\r\n\r\n---\r\n\r\n- fixes rust-lang/wg-allocators#38\r\n- fixes rust-lang/wg-allocators#41\r\n- fixes rust-lang/wg-allocators#44\r\n- closes #69824\r\n- closes #69863\r\n\r\nr? @Amanieu \r\n\r\ncc @Lokathor @Wodann", "created_at": "2020-03-10T12:56:44Z", "updated_at": "2020-03-24T20:12:54Z", "closed_at": "2020-03-18T15:04:13Z", "merged_at": null, "merge_commit_sha": "b0533117dca2f4b8b7e7b1757fdcce605ff4e568", "assignee": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 583426710, "node_id": "MDU6TGFiZWw1ODM0MjY3MTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-waiting-on-review", "name": "S-waiting-on-review", "color": "d3dddd", "default": false, "description": "Status: Awaiting review from the assignee but also interested parties."}], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/69889/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/69889/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69889/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/0e2ee306599a74698865f77d651cf0681715fdde", "head": {"label": "TimDiekmann:alloc-overhaul", "ref": "alloc-overhaul", "sha": "0e2ee306599a74698865f77d651cf0681715fdde", "user": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "repo": {"id": 235697594, "node_id": "MDEwOlJlcG9zaXRvcnkyMzU2OTc1OTQ=", "name": "rust", "full_name": "TimDiekmann/rust", "private": false, "owner": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/TimDiekmann/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": true, "url": "https://api.github.com/repos/TimDiekmann/rust", "forks_url": "https://api.github.com/repos/TimDiekmann/rust/forks", "keys_url": "https://api.github.com/repos/TimDiekmann/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/TimDiekmann/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/TimDiekmann/rust/teams", "hooks_url": "https://api.github.com/repos/TimDiekmann/rust/hooks", "issue_events_url": "https://api.github.com/repos/TimDiekmann/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/TimDiekmann/rust/events", "assignees_url": "https://api.github.com/repos/TimDiekmann/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/TimDiekmann/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/TimDiekmann/rust/tags", "blobs_url": "https://api.github.com/repos/TimDiekmann/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/TimDiekmann/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/TimDiekmann/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/TimDiekmann/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/TimDiekmann/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/TimDiekmann/rust/languages", "stargazers_url": "https://api.github.com/repos/TimDiekmann/rust/stargazers", "contributors_url": "https://api.github.com/repos/TimDiekmann/rust/contributors", "subscribers_url": "https://api.github.com/repos/TimDiekmann/rust/subscribers", "subscription_url": "https://api.github.com/repos/TimDiekmann/rust/subscription", "commits_url": "https://api.github.com/repos/TimDiekmann/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/TimDiekmann/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/TimDiekmann/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/TimDiekmann/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/TimDiekmann/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/TimDiekmann/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/TimDiekmann/rust/merges", "archive_url": "https://api.github.com/repos/TimDiekmann/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/TimDiekmann/rust/downloads", "issues_url": "https://api.github.com/repos/TimDiekmann/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/TimDiekmann/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/TimDiekmann/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/TimDiekmann/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/TimDiekmann/rust/labels{/name}", "releases_url": "https://api.github.com/repos/TimDiekmann/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/TimDiekmann/rust/deployments", "created_at": "2020-01-23T00:45:20Z", "updated_at": "2020-11-28T11:10:45Z", "pushed_at": "2021-05-25T13:26:59Z", "git_url": "git://github.com/TimDiekmann/rust.git", "ssh_url": "git@github.com:TimDiekmann/rust.git", "clone_url": "https://github.com/TimDiekmann/rust.git", "svn_url": "https://github.com/TimDiekmann/rust", "homepage": "https://www.rust-lang.org", "size": 639460, "stargazers_count": 0, "watchers_count": 0, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "f509b26a7730d721ef87423a72b3fdf8724b4afa", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-20T03:06:09Z", "pushed_at": "2023-06-20T04:27:20Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 930404, "stargazers_count": 82761, "watchers_count": 82761, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10963, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9629, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10963, "open_issues": 9629, "watchers": 82761, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/69889"}, "html": {"href": "https://github.com/rust-lang/rust/pull/69889"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/69889"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/69889/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/69889/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/69889/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/0e2ee306599a74698865f77d651cf0681715fdde"}}, "author_association": "MEMBER", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 43, "review_comments": 66, "maintainer_can_modify": false, "commits": 1, "additions": 1408, "deletions": 1509, "changed_files": 19}