{"url": "https://api.github.com/repos/rust-lang/rust/pulls/105586", "id": 1160099359, "node_id": "PR_kwDOAAsO6M5FJbYf", "html_url": "https://github.com/rust-lang/rust/pull/105586", "diff_url": "https://github.com/rust-lang/rust/pull/105586.diff", "patch_url": "https://github.com/rust-lang/rust/pull/105586.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/105586", "number": 105586, "state": "open", "locked": false, "title": "Experimental feature gate proposal `crabi`", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "body": "# Summary\r\n\r\nThis experimental feature gate proposal proposes developing a new ABI,\r\n`extern \"crabi\"`, and a new in-memory representation, `repr(crabi)`, for\r\ninteroperability across high-level programming languages that have safe data\r\ntypes.\r\n\r\nThis will use the feature gate `crabi`, which will be marked as experimental\r\nuntil a subsequent RFC provides a precise definition of crABI.\r\n\r\nThis work was previously discussed under the names \"safe ABI\" and \"interop\r\nABI\", but was renamed to \"crabi\" to avoid misleadingly broad implications of\r\n\"safe\" or \"interop\".\r\n\r\n# Motivation\r\n\r\nToday, developers building projects incorporating multiple languages, or\r\ncalling a library written in one language from another, often have to use the C\r\nABI as a lowest-common-denominator for cross-language function calls. As a\r\nresult, such cross-language calls use unsafe C representations, even for types\r\nthat both languages understand. For instance, passing a string from Rust to\r\nanother high-level language will typically use an unsafe C `char *`, even if\r\nboth languages have a safe type for counted UTF-8 strings.\r\n\r\nFor popular pairs of languages, developers sometimes create higher-level\r\nbinding layers for combining those languages. However, the creation of such\r\nbinding layers requires one-off effort between every pair of programming\r\nlanguages. Such binding layers also add work and overhead to the project for\r\neach pair of languages, and may not play well together when using more than one\r\nin the same project.\r\n\r\nFurthermore, higher-level data types such as `Option` and `Result` currently\r\nrequire translation into C-ABI-compatible types, which discourages the use of\r\nsuch types in cross-language interfaces, and encourages the use of more complex\r\nand less safe encodings (e.g. manually encoding `Option` via an invalid value\r\nof a parameter).\r\n\r\nFinally, *system* libraries and other shared libraries typically use the C ABI\r\nas well. Software making a Linux `.so`, Windows DLL, or macOS `dylib`, will\r\ntypically expose a C-compatible ABI, and cannot easily provide a higher-level\r\nsafe ABI without shipping language-specific high-level bindings.\r\n\r\ncrABI will define a standard way to make calls across high-level languages,\r\npassing high-level data types, without dropping to the lowest common\r\ndenominator of C. crABI will work with any language providing a C-compatible\r\nFFI (including C itself), and languages can also add specific higher-level\r\nnative support for crABI.\r\n\r\ncrABI aims to be a reasonable default for compiled libraries in both static and\r\ndynamic form, including system libraries.\r\n\r\n# Requirements\r\n\r\nThe crABI experiment will include a new ABI, `extern \"crabi\"`, and a new\r\nin-memory representation, `repr(crabi)`.\r\n\r\nThe crABI support for Rust will be a strict superset of the C ABI support for\r\nRust. This ensures that, for functionality not yet supported by crABI, users\r\nstill have the option of using their own translations to the raw C ABI, while\r\nstill using crABI for what it *does* support.\r\n\r\ncrABI will be defined via \"lowering\" to the C ABI: crABI will define how to\r\npass or return types not supported by C, by defining how to translate them to\r\ntypes and structures supported by C. This allows any language with C FFI\r\nsupport to also call functions using crABI, without requiring special language\r\nsupport. However, languages may still wish to add higher-level support for\r\ncrABI, to avoid having to write a translation layer for their own native types.\r\n\r\nTo the extent crABI supports passing ownership (e.g. strings), it must also\r\nspecify how to reclaim the associated memory. (However, future support for\r\nobjects or traits may require invoking a destructor instead.)\r\n\r\ncrABI could define a symbol naming scheme, to allow identifying symbols that\r\nuse crABI. However, crABI must be compatible with languages that only support C\r\nFFI and do not have native crABI support, and which must thus reference the\r\nsymbol via its name; therefore, crABI should not have a complex or non-obvious\r\nmangling scheme.\r\n\r\ncrABI should include a versioning scheme, to allow for future compatible\r\nextensibility. crABI version 1 will handle many simple cases of widespread\r\ninterest. More complex cases, such as trait objects, or arbitrary objects with\r\nmethods, will get deferred to future versions. The versioning scheme will allow\r\nfor both compatible and incompatible changes; changes to crABI will strive to\r\nremain compatible with previous versions when not using functionality\r\nunsupported by those previous versions.\r\n\r\nRust will support defining functions using crABI, and calling\r\ncrABI functions defined elsewhere. Rust will support compiling both\r\nstatic and dynamic libraries that export crABI symbols.\r\n\r\nRust should also support passing around function pointers to functions that use\r\ncrABI.\r\n\r\n## Non-requirements\r\n\r\ncrABI does not aim to support the full richness of Rust's type system, or that\r\nof other languages. It aims to support common cases more safely and simply.\r\n\r\nIn particular, while crABI will over time support an increasing subset of Rust\r\nfeatures, and specific types from the standard library will become available as\r\nthe necessary features to support them do, crABI does not aim to support the\r\n*entire* Rust standard library.\r\n\r\ncrABI will not aim to support complex lifetime handling, or to fully solve\r\nproblems related to describing pointer lifetimes across different languages.\r\ncrABI *may* provide limited support for some subsets of this, such as \"this\r\npointer is only valid for the duration of this call and must not be retained\",\r\nor \"this pointer transfers ownership to the callee, and the caller must not\r\nretain it\".\r\n\r\ncrABI (at least in the first version) will not provide an interface description\r\nlanguage (IDL), in either source or compiled form; function symbols using crABI\r\nwill not provide function signature information in compiled objects. A future\r\nversion of crABI may generate and provide machine-readable interface\r\ndescriptions.\r\n\r\ncrABI does not aim to provide \"translations\" between the most native\r\nrepresentations of different languages. For instance, though different\r\nlanguages may store strings in different fashions, crABI string types will have\r\na specific representation in memory and a specific lowering to C function\r\nparameters/results. Languages whose native string representation does not match\r\ncrABI string representation may need to translate, or may need to treat the\r\ncrABI string object as a distinct data type and provide distinct mechanisms for\r\nworking with it. (By contrast, WebAssembly Interface Types (WIT) aims to\r\nprovide such translations in an efficient fashion, by generating translation\r\ncode as needed between formats.)\r\n\r\ncrABI cannot support arbitrary compile-time generic functions; generics will\r\nrequire the use of opaque objects, trait objects, or similar. A future version\r\ncould support exporting specific instantiations of generics. (However, crABI\r\nwill support *enough* of generics to allow types like `Option<u64>` or\r\n`Result<u64, ConcreteError>` or `[u8; 16]` or `[u8]` to work, such as by\r\nsupporting their use with *concrete* types as long as no generic parameters\r\nremain unbound in the final function signature.)\r\n\r\ncrABI cannot prevent callers from passing parameters that violate the\r\nspecification, and does not claim to. More generally, crABI does not provide\r\nsandboxing or similar functionality that would be required to interoperate with\r\nuntrusted code.\r\n\r\nThe initial version of crABI will likely not attempt to standardize destructors\r\nor memory reclamation, though future versions may. Users of crABI will still\r\nneed to provide and use `xyz_free` functions to delegate object destruction and\r\nreclamation back to the code that provided the object.\r\n\r\n# Potential functionality\r\n\r\nThis section includes some potential examples of types crABI could support.\r\nSome of these will appear in the first version of crABI; many will get deferred\r\nto a future version.\r\n\r\n- Tuples, of arbitrary size.\r\n- The \"unit\" type `()`.\r\n- enums, including enum variants containing fields.\r\n    - More specifically, `Option` and `Result`.\r\n- Counted UTF-8 strings, (with no guarantee of a NUL terminator).\r\n- A Unicode scalar value (Rust `char`).\r\n- Filesystem paths, or other operating-system strings.\r\n- Arrays, with a compile-time-known size.\r\n- Counted slices.\r\n- Ranges\r\n- Owned pointers to any supported type (e.g. `Box`), as well as owned pointers\r\n  to types that can't be passed by value.\r\n- References, with a limited degree of lifetime support.\r\n  - `&str`\r\n- Closures, with a limited degree of lifetime support.\r\n- Futures, with a limited degree of lifetime support. This would in particular\r\n  support `extern \"crabi\" async fn`.\r\n- \"noreturn\" functions, as expressed in Rust via `-> !`.\r\n- Opaque objects with crABI methods, without exposing representation. (This\r\n  would allow passing objects like `Vec` or `HashMap` or `HashSet`, without\r\n  constraining the internals. This would also allow interoperating across\r\n  versions of Rust.)\r\n  - An opaque error container, for use with `Result`.\r\n- Trait objects with crABI methods. (This may use the same mechanism as\r\n  objects.)\r\n\r\n# Open questions\r\n\r\n- Niches: should we support cases like `Option<bool>` without a separate\r\n  discriminant, or should we (for simplicity) always pass a separate\r\n  discriminant? Likely the latter. However, what about things like `Option<&T>`\r\n  and `Option<NonZeroU32>`, for which Rust guarantees the representation of\r\n  `None`? Those work with the C ABI, and they have to work with crABI, but can\r\n  we make them work with crABI *using the same encoding of `None`*?\r\n- What subset of lifetimes can, and should, we support? We can't enforce them\r\n  cross-language, but they may be useful as an advisory/documentation\r\n  mechanism. Or we could leave them out entirely.\r\n- To what extent should crABI make *any* attempt to specify things that can't\r\n  be enforced, rather than ignoring semantics entirely and *only* specifying\r\n  how types get passed?\r\n- How can we make it easy to support data structures without having to do\r\n  translation from `repr(Rust)` to `repr(crabi)` and have parallel structures?\r\n  Can we make that less painful to express, and ideally mostly free at runtime?\r\n  - Related: how can we handle tuples? Do we need a way to express\r\n    `repr(crabi)` tuples? How can we do that conveniently?\r\n- Should we provide support for extensible enums, such that we don't assume the\r\n  discriminant matches one of the known variants? Would doing so make using\r\n  enums less ergonomic? Could we address that with language changes?\r\n- For handling objects, could we avoid having to pass in-memory function\r\n  pointers via a vtable, and instead reference specific symbols? This wouldn't\r\n  work for generics, though. Can we do any better than a vtable?\r\n- For ranges, should we provide a concrete range type or types, or should we\r\n  defer that and handle ranges as opaque objects or traits?\r\n- Do we get any value out of supporting `()`, other than completeness? Passing\r\n  `()` by value should just be ignored as if it weren't specified. Do we want\r\n  people using pointers to `()`, and do those have any advantage over pointers\r\n  to void?\r\n- Should we do anything special about `i128` and `u128`, or should we just push\r\n  for getting those supported correctly in `extern \"C\"`?\r\n- For generics, such as `Option<u64>` or `Result<u32, ConcreteError>` or\r\n  `[u8; 16]`, does the rule \"all generic parameters must be bound to concrete\r\n  types in the function signature\" suffice, or do we need a more complex rule\r\n  than that?\r\n- Unwinding: The default `extern \"crabi\"` should not support unwind, and most\r\n  languages don't tend to have support for unwinding through C-ABI functions,\r\n  but should we have a `crabi-unwind` variant? Would doing so provide value?\r\n\r\n# Prior art\r\n\r\nSome potential sources of inspiration:\r\n\r\n- WebAssembly Interface Types\r\n- The `abi_stable` crate (which aims for Rust-to-Rust stability, not\r\n  cross-language interoperation, but it still serves as a useful reference)\r\n- `stabby`\r\n- UniFFI\r\n- Diplomat\r\n- Swift's stable ABI\r\n- C++'s various ABIs (and the history of its ABI changes). crABI should not\r\n  strive to be a superset of any C++ ABI, though.\r\n- Many, many interface description languages (IDLs).\r\n- The x86-64 psABI. While we're not specifying the lowering all the way to\r\n  specific architectures, we can still learn from how it handles various types.\r\n\r\n# Rationale and alternatives\r\n\r\nRather than being defined via lowering to the C ABI, crABI could directly\r\ndefine how to pass parameters on underlying architectures, such as which\r\nregisters to use for which parameters and how to pass or return specific types.\r\nThis would have the advantage of allowing improvements over the C ABI. However,\r\nthis would have multiple substantial disadvantages, such as requiring dedicated\r\nsupport in every programming language (rather than leveraging C FFI support),\r\nand requiring definition for every target architecture. Instead, this proposal\r\nsuggests making such improvements at the C ABI level, such as by defining\r\nextensions for passing or returning specific types in a more efficient fashion.\r\n\r\ncrABI could exclude portions of the C ABI considered unsafe, such as raw\r\npointers. This would make crABI *not* a strict superset of the C ABI. This\r\nwould make it difficult to handle functionality that crABI does not yet\r\nsupport, while simultaneously using crABI for functionality it *does* support.\r\nFor instance, a program may wish to pass both an enum parameter and a raw\r\npointer parameter. Leaving out this functionality might encourage people to\r\navoid crABI or to define some functions via crABI and some via C ABI.\r\n\r\n\"crABI\" serves as a neutral name identifying this ABI and its functionality.\r\n(Thanks to @m-ou-se for the name \"crABI\".)\r\nThis work previously went under the name \"safe ABI\", but given that the ABI\r\ndoes *not* exclude portions of the C ABI considered unsafe, a name like \"safe\"\r\nwould be a misnomer. This work also previously went under the names \"interop\"\r\nand \"interoperable ABI\"; however, the names `interop` and \"interoperable ABI\"\r\nare not particularly identifying, unambiguous, easy to talk about, or other\r\nproperties of a good name. In addition, \"interop\"/\"interoperable\" can imply a\r\ngreater breadth than the initial version of crABI aspires to, such as including\r\nan IDL.\r\n\r\ncrABI does not officially stand for anything. Insert your favorite backronym.\r\n\r\n# Future work\r\n\r\n- Debug/trace tools, such as debugger support or `ltrace` support, to decode\r\n  crABI structures and types.\r\n- Adding native crABI support to various languages.\r\n- Shipping C header files defining structures for crABI.", "created_at": "2022-12-12T06:05:55Z", "updated_at": "2023-05-23T13:39:51Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "b8a33fca17df0e1ee47c014ab5a0c7b4f1d6107e", "assignee": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 583436937, "node_id": "MDU6TGFiZWw1ODM0MzY5Mzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-waiting-on-author", "name": "S-waiting-on-author", "color": "d3dddd", "default": false, "description": "Status: This is awaiting some action (such as code changes or more information) from the author."}], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/105586/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/105586/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105586/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/e2dcc66854e080cbd6be2dd4e1983f4200c100d7", "head": {"label": "joshtriplett:abi-experimental-feature-gate", "ref": "abi-experimental-feature-gate", "sha": "e2dcc66854e080cbd6be2dd4e1983f4200c100d7", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "repo": {"id": 34588019, "node_id": "MDEwOlJlcG9zaXRvcnkzNDU4ODAxOQ==", "name": "rust", "full_name": "joshtriplett/rust", "private": false, "owner": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/joshtriplett/rust", "description": "a safe, concurrent, practical language", "fork": true, "url": "https://api.github.com/repos/joshtriplett/rust", "forks_url": "https://api.github.com/repos/joshtriplett/rust/forks", "keys_url": "https://api.github.com/repos/joshtriplett/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/joshtriplett/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/joshtriplett/rust/teams", "hooks_url": "https://api.github.com/repos/joshtriplett/rust/hooks", "issue_events_url": "https://api.github.com/repos/joshtriplett/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/joshtriplett/rust/events", "assignees_url": "https://api.github.com/repos/joshtriplett/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/joshtriplett/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/joshtriplett/rust/tags", "blobs_url": "https://api.github.com/repos/joshtriplett/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/joshtriplett/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/joshtriplett/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/joshtriplett/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/joshtriplett/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/joshtriplett/rust/languages", "stargazers_url": "https://api.github.com/repos/joshtriplett/rust/stargazers", "contributors_url": "https://api.github.com/repos/joshtriplett/rust/contributors", "subscribers_url": "https://api.github.com/repos/joshtriplett/rust/subscribers", "subscription_url": "https://api.github.com/repos/joshtriplett/rust/subscription", "commits_url": "https://api.github.com/repos/joshtriplett/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/joshtriplett/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/joshtriplett/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/joshtriplett/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/joshtriplett/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/joshtriplett/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/joshtriplett/rust/merges", "archive_url": "https://api.github.com/repos/joshtriplett/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/joshtriplett/rust/downloads", "issues_url": "https://api.github.com/repos/joshtriplett/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/joshtriplett/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/joshtriplett/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/joshtriplett/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/joshtriplett/rust/labels{/name}", "releases_url": "https://api.github.com/repos/joshtriplett/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/joshtriplett/rust/deployments", "created_at": "2015-04-25T22:06:08Z", "updated_at": "2021-09-27T19:46:48Z", "pushed_at": "2023-05-11T07:15:31Z", "git_url": "git://github.com/joshtriplett/rust.git", "ssh_url": "git@github.com:joshtriplett/rust.git", "clone_url": "https://github.com/joshtriplett/rust.git", "svn_url": "https://github.com/joshtriplett/rust", "homepage": "http://www.rust-lang.org", "size": 890754, "stargazers_count": 1, "watchers_count": 1, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 1, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 1, "open_issues": 0, "watchers": 1, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "9a767b6b9e1e53c3cfc25103ed7c88d77ee65d5d", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-20T10:12:00Z", "pushed_at": "2023-06-20T10:11:57Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 930869, "stargazers_count": 82769, "watchers_count": 82769, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10964, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9625, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10964, "open_issues": 9625, "watchers": 82769, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/105586"}, "html": {"href": "https://github.com/rust-lang/rust/pull/105586"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/105586"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/105586/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/105586/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/105586/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/e2dcc66854e080cbd6be2dd4e1983f4200c100d7"}}, "author_association": "MEMBER", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": true, "rebaseable": true, "mergeable_state": "blocked", "merged_by": null, "comments": 86, "review_comments": 0, "maintainer_can_modify": true, "commits": 1, "additions": 50, "deletions": 0, "changed_files": 9}