{"url": "https://api.github.com/repos/rust-lang/rust/pulls/69659", "id": 382715258, "node_id": "MDExOlB1bGxSZXF1ZXN0MzgyNzE1MjU4", "html_url": "https://github.com/rust-lang/rust/pull/69659", "diff_url": "https://github.com/rust-lang/rust/pull/69659.diff", "patch_url": "https://github.com/rust-lang/rust/pull/69659.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/69659", "number": 69659, "state": "closed", "locked": false, "title": "Rework the std::iter::Step trait", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "body": "Previous attempts: #43127 #62886 #68807  \r\nTracking issue: #42168\r\n\r\nThis PR reworks the `Step` trait to be phrased in terms of the *successor* and *predecessor* operations. With this, `Step` hopefully has a consistent identity that can have a path towards stabilization. The proposed trait:\r\n\r\n```rust\r\n/// Objects that have a notion of *successor* and *predecessor* operations.\r\n///\r\n/// The *successor* operation moves towards values that compare greater.\r\n/// The *predecessor* operation moves towards values that compare lesser.\r\n///\r\n/// # Safety\r\n///\r\n/// This trait is `unsafe` because its implementation must be correct for\r\n/// the safety of `unsafe trait TrustedLen` implementations, and the results\r\n/// of using this trait can otherwise be trusted by `unsafe` code to be correct\r\n/// and fulful the listed obligations.\r\npub unsafe trait Step: Clone + PartialOrd + Sized {\r\n    /// Returns the number of *successor* steps required to get from `start` to `end`.\r\n    ///\r\n    /// Returns `None` if the number of steps would overflow `usize`\r\n    /// (or is infinite, or if `end` would never be reached).\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a`, `b`, and `n`:\r\n    ///\r\n    /// * `steps_between(&a, &b) == Some(n)` if and only if `Step::forward(&a, n) == Some(b)`\r\n    /// * `steps_between(&a, &b) == Some(n)` if and only if `Step::backward(&a, n) == Some(a)`\r\n    /// * `steps_between(&a, &b) == Some(n)` only if `a <= b`\r\n    ///   * Corollary: `steps_between(&a, &b) == Some(0)` if and only if `a == b`\r\n    ///   * Note that `a <= b` does _not_ imply `steps_between(&a, &b) != None`;\r\n    ///     this is the case wheen it would require more than `usize::MAX` steps to get to `b`\r\n    /// * `steps_between(&a, &b) == None` if `a > b`\r\n    fn steps_between(start: &Self, end: &Self) -> Option<usize>;\r\n\r\n    /// Returns the value that would be obtained by taking the *successor*\r\n    /// of `self` `count` times.\r\n    ///\r\n    /// If this would overflow the range of values supported by `Self`, returns `None`.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a`, `n`, and `m`:\r\n    /// \r\n    /// * `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, m).and_then(|x| Step::forward_checked(x, n))`\r\n    /// \r\n    /// For any `a`, `n`, and `m` where `n + m` does not overflow:\r\n    ///\r\n    /// * `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, n + m)`\r\n    ///\r\n    /// For any `a` and `n`:\r\n    ///\r\n    /// * `Step::forward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::forward_checked(&x, 1))`\r\n    ///   * Corollary: `Step::forward_checked(&a, 0) == Some(a)`\r\n    fn forward_checked(start: Self, count: usize) -> Option<Self>;\r\n\r\n    /// Returns the value that would be obtained by taking the *successor*\r\n    /// of `self` `count` times.\r\n    ///\r\n    /// If this would overflow the range of values supported by `Self`,\r\n    /// this function is allowed to panic, wrap, or saturate.\r\n    /// The suggested behavior is to panic when debug assertions are enabled,\r\n    /// and to wrap or saturate otherwise.\r\n    ///\r\n    /// Unsafe code should not rely on the correctness of behavior after overflow.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a`, `n`, and `m`, where no overflow occurs:\r\n    ///\r\n    /// * `Step::forward(Step::forward(a, n), m) == Step::forward(a, n + m)`\r\n    ///\r\n    /// For any `a` and `n`, where no overflow occurs:\r\n    ///\r\n    /// * `Step::forward_checked(a, n) == Some(Step::forward(a, n))`\r\n    /// * `Step::forward(a, n) == (0..n).fold(a, |x, _| Step::forward(x, 1))`\r\n    ///   * Corollary: `Step::forward(a, 0) == a`\r\n    /// * `Step::forward(a, n) >= a`\r\n    /// * `Step::backward(Step::forward(a, n), n) == a`\r\n    fn forward(start: Self, count: usize) -> Self {\r\n        Step::forward_checked(start, count).expect(\"overflow in `Step::forward`\")\r\n    }\r\n\r\n    /// Returns the value that would be obtained by taking the *successor*\r\n    /// of `self` `count` times.\r\n    ///\r\n    /// # Safety\r\n    ///\r\n    /// It is undefined behavior for this operation to overflow the\r\n    /// range of values supported by `Self`. If you cannot guarantee that this\r\n    /// will not overflow, use `forward` or `forward_checked` instead.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a`:\r\n    ///\r\n    /// * if there exists `b` such that `b > a`, it is safe to call `Step::forward_unchecked(a, 1)`\r\n    /// * if there exists `b`, `n` such that `steps_between(&a, &b) == Some(n)`,\r\n    ///   it is safe to call `Step::forward_unchecked(a, m)` for any `m <= n`.\r\n    ///\r\n    /// For any `a` and `n`, where no overflow occurs:\r\n    ///\r\n    /// * `Step::forward_unchecked(a, n)` is equivalent to `Step::forward(a, n)`\r\n    #[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\", issue = \"none\")]\r\n    unsafe fn forward_unchecked(start: Self, count: usize) -> Self {\r\n        Step::forward(start, count)\r\n    }\r\n\r\n    /// Returns the value that would be obtained by taking the *successor*\r\n    /// of `self` `count` times.\r\n    ///\r\n    /// If this would overflow the range of values supported by `Self`, returns `None`.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a`, `n`, and `m`:\r\n    ///\r\n    /// * `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == n.checked_add(m).and_then(|x| Step::backward_checked(a, x))`\r\n    /// * `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == try { Step::backward_checked(a, n.checked_add(m)?) }`\r\n    ///\r\n    /// For any `a` and `n`:\r\n    ///\r\n    /// * `Step::backward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::backward_checked(&x, 1))`\r\n    ///   * Corollary: `Step::backward_checked(&a, 0) == Some(a)`\r\n    fn backward_checked(start: Self, count: usize) -> Option<Self>;\r\n\r\n    /// Returns the value that would be obtained by taking the *predecessor*\r\n    /// of `self` `count` times.\r\n    ///\r\n    /// If this would overflow the range of values supported by `Self`,\r\n    /// this function is allowed to panic, wrap, or saturate.\r\n    /// The suggested behavior is to panic when debug assertions are enabled,\r\n    /// and to wrap or saturate otherwise.\r\n    ///\r\n    /// Unsafe code should not rely on the correctness of behavior after overflow.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a`, `n`, and `m`, where no overflow occurs:\r\n    ///\r\n    /// * `Step::backward(Step::backward(a, n), m) == Step::backward(a, n + m)`\r\n    ///\r\n    /// For any `a` and `n`, where no overflow occurs:\r\n    ///\r\n    /// * `Step::backward_checked(a, n) == Some(Step::backward(a, n))`\r\n    /// * `Step::backward(a, n) == (0..n).fold(a, |x, _| Step::backward(x, 1))`\r\n    ///   * Corollary: `Step::backward(a, 0) == a`\r\n    /// * `Step::backward(a, n) <= a`\r\n    /// * `Step::forward(Step::backward(a, n), n) == a`\r\n    fn backward(start: Self, count: usize) -> Self {\r\n        Step::backward_checked(start, count).expect(\"overflow in `Step::backward`\")\r\n    }\r\n\r\n    /// Returns the value that would be obtained by taking the *predecessor*\r\n    /// of `self` `count` times.\r\n    ///\r\n    /// # Safety\r\n    ///\r\n    /// It is undefined behavior for this operation to overflow the\r\n    /// range of values supported by `Self`. If you cannot guarantee that this\r\n    /// will not overflow, use `backward` or `backward_checked` instead.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a`:\r\n    ///\r\n    /// * if there exists `b` such that `b < a`, it is safe to call `Step::backward_unchecked(a, 1)`\r\n    /// * if there exists `b`, `n` such that `steps_between(&b, &a) == Some(n)`,\r\n    ///   it is safe to call `Step::backward_unchecked(a, m)` for any `m <= n`.\r\n    ///\r\n    /// For any `a` and `n`, where no overflow occurs:\r\n    ///\r\n    /// * `Step::backward_unchecked(a, n)` is equivalent to `Step::backward(a, n)`\r\n    #[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\", issue = \"none\")]\r\n    unsafe fn backward_unchecked(start: Self, count: usize) -> Self {\r\n        Step::backward(start, count)\r\n    }\r\n}\r\n```\r\n\r\nNote that all of these are associated functions and not callable via method syntax; the calling syntax is always `Step::forward(start, n)`. This version of the trait additionally changes the stepping functions to talk their arguments by value.\r\n\r\nAs opposed to previous attempts which provided a \"step by one\" method directly, this version of the trait only exposes \"step by n\". There are a few reasons for this:\r\n\r\n- `Range*`, the primary consumer of `Step`, assumes that the \"step by n\" operation is cheap. If a single step function is provided, it will be a lot more enticing to implement \"step by n\" as n repeated calls to \"step by one\". While this is not strictly incorrect, this behavior would be surprising for anyone used to using `Range<{primitive integer}>`.\r\n- With a trivial default impl, this can be easily added backwards-compatibly later.\r\n- The debug-wrapping \"step by n\" needs to exist for `RangeFrom` to be consistent between \"step by n\" and \"step by one\" operation. (Note: the behavior is not changed by this PR, but making the behavior consistent is made tenable by this PR.)\r\n\r\nThree \"kinds\" of step are provided: `_checked`, which returns an `Option` indicating attempted overflow; (unsuffixed), which provides \"safe overflow\" behavior (is allowed to panic, wrap, or saturate, depending on what is most convenient for a given type); and `_unchecked`, which is a version which assumes overflow does not happen.\r\n\r\nReview is appreciated to check that:\r\n\r\n- The invariants as described on the `Step` functions are enough to specify the \"common sense\" consistency for successor/predecessor.\r\n- Implementation of `Step` functions is correct in the face of overflow and the edges of representable integers.\r\n- Added tests of `Step` functions are asserting the correct behavior (and not just the implemented behavior).", "created_at": "2020-03-03T02:51:51Z", "updated_at": "2020-05-15T16:11:04Z", "closed_at": "2020-05-15T14:49:06Z", "merged_at": "2020-05-15T14:49:06Z", "merge_commit_sha": "ed084b0b8341c974769a0328f61851b0e1fc17fa", "assignee": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 583437191, "node_id": "MDU6TGFiZWw1ODM0MzcxOTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-waiting-on-bors", "name": "S-waiting-on-bors", "color": "d3dddd", "default": false, "description": "Status: Waiting on bors to run and complete tests. Bors will change the label on completion."}, {"id": 1223998418, "node_id": "MDU6TGFiZWwxMjIzOTk4NDE4", "url": "https://api.github.com/repos/rust-lang/rust/labels/merged-by-bors", "name": "merged-by-bors", "color": "dae4e4", "default": false, "description": "This PR was explicitly merged by bors"}], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/69659/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/69659/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69659/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/d53068e3ea607ba757eeb496376fc955c5a85055", "head": {"label": "CAD97:step-rework-take-3", "ref": "step-rework-take-3", "sha": "d53068e3ea607ba757eeb496376fc955c5a85055", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "repo": {"id": 115163816, "node_id": "MDEwOlJlcG9zaXRvcnkxMTUxNjM4MTY=", "name": "rust", "full_name": "CAD97/rust", "private": false, "owner": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/CAD97/rust", "description": "A safe, concurrent, practical language.", "fork": true, "url": "https://api.github.com/repos/CAD97/rust", "forks_url": "https://api.github.com/repos/CAD97/rust/forks", "keys_url": "https://api.github.com/repos/CAD97/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/CAD97/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/CAD97/rust/teams", "hooks_url": "https://api.github.com/repos/CAD97/rust/hooks", "issue_events_url": "https://api.github.com/repos/CAD97/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/CAD97/rust/events", "assignees_url": "https://api.github.com/repos/CAD97/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/CAD97/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/CAD97/rust/tags", "blobs_url": "https://api.github.com/repos/CAD97/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/CAD97/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/CAD97/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/CAD97/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/CAD97/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/CAD97/rust/languages", "stargazers_url": "https://api.github.com/repos/CAD97/rust/stargazers", "contributors_url": "https://api.github.com/repos/CAD97/rust/contributors", "subscribers_url": "https://api.github.com/repos/CAD97/rust/subscribers", "subscription_url": "https://api.github.com/repos/CAD97/rust/subscription", "commits_url": "https://api.github.com/repos/CAD97/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/CAD97/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/CAD97/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/CAD97/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/CAD97/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/CAD97/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/CAD97/rust/merges", "archive_url": "https://api.github.com/repos/CAD97/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/CAD97/rust/downloads", "issues_url": "https://api.github.com/repos/CAD97/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/CAD97/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/CAD97/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/CAD97/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/CAD97/rust/labels{/name}", "releases_url": "https://api.github.com/repos/CAD97/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/CAD97/rust/deployments", "created_at": "2017-12-23T02:05:51Z", "updated_at": "2022-08-28T23:40:51Z", "pushed_at": "2023-05-12T11:48:17Z", "git_url": "git://github.com/CAD97/rust.git", "ssh_url": "git@github.com:CAD97/rust.git", "clone_url": "https://github.com/CAD97/rust.git", "svn_url": "https://github.com/CAD97/rust", "homepage": "https://www.rust-lang.org", "size": 831674, "stargazers_count": 0, "watchers_count": 0, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "75e1463c52aaea25bd32ed53c73797357e561cce", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-20T03:06:09Z", "pushed_at": "2023-06-20T03:24:22Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 930398, "stargazers_count": 82761, "watchers_count": 82761, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10963, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9626, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10963, "open_issues": 9626, "watchers": 82761, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/69659"}, "html": {"href": "https://github.com/rust-lang/rust/pull/69659"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/69659"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/69659/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/69659/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/69659/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/d53068e3ea607ba757eeb496376fc955c5a85055"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "comments": 42, "review_comments": 30, "maintainer_can_modify": false, "commits": 6, "additions": 620, "deletions": 246, "changed_files": 6}