{"url": "https://api.github.com/repos/rust-lang/rust/pulls/59777", "id": 268120696, "node_id": "MDExOlB1bGxSZXF1ZXN0MjY4MTIwNjk2", "html_url": "https://github.com/rust-lang/rust/pull/59777", "diff_url": "https://github.com/rust-lang/rust/pull/59777.diff", "patch_url": "https://github.com/rust-lang/rust/pull/59777.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/59777", "number": 59777, "state": "closed", "locked": false, "title": "-Z call-metadata: add call metadata to LLVM IR", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "body": "This PR implements eRFC rust-lang/rust#59412 in spirit but there are some\r\ndifferences between the implementation and the original proposal.\r\n\r\n## What\r\n\r\nHere's a summary of *what* the `-Z call-metadata` feature does:\r\n\r\n1. Each function that:\r\n\r\n- may be used as a function pointer,\r\n- it's a method of a trait that may be dispatched dynamically,\r\n- or may be called by trait object drop glue\r\n\r\nreceives a *single* `!rust` metadata node when translated into LLVM IR (turns\r\nout you can't attach several `!rust` metadata nodes as I originally thought).\r\nThe node describes in which of those categories the function falls into (it may\r\nbelong to more than one category).\r\n\r\nAs an example consider this piece of code:\r\n\r\n``` rust\r\nfn foo() -> i32 {\r\n    0\r\n}\r\n\r\ntrait Bar<T> {\r\n    fn bar(&self) -> T;\r\n}\r\n\r\nstruct Baz;\r\n\r\nimpl Bar<bool> for Baz {\r\n    fn bar(&self) -> bool {\r\n        true\r\n    }\r\n}\r\n\r\nimpl Bar<i32> for Baz {\r\n    fn bar(&self) -> i32 {\r\n        0\r\n    }\r\n}\r\n\r\nstruct Quux;\r\n\r\nimpl Bar<i32> for Quux {\r\n    fn bar(&self) -> i32 {\r\n        1\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let x: fn() -> i32 = foo;\r\n    x();\r\n    let y: fn(&Baz) -> bool = Baz::bar;\r\n\r\n    let z: Box<dyn Bar<bool>> = Box::new(Baz);\r\n    let a = z.bar();\r\n    drop(z);\r\n    let mut w: &dyn Bar<i32> = &Quux;\r\n    w = &Baz;\r\n    let b = w.bar();\r\n}\r\n```\r\n\r\nUsing the `-Z call-metadata` flag produces the following (unoptimized) IR:\r\n\r\n> NOTE mangled names and debug metadata have been omitted to keep the IR short\r\n\r\n``` llvm\r\n; core::ptr::real_drop_in_place\r\ndefine internal void @_(%Baz* nonnull align 1) unnamed_addr #4 !rust !180 {\r\n  ; ..\r\n}\r\n\r\n; core::ptr::real_drop_in_place\r\ndefine internal void @_(%Quux* nonnull align 1) unnamed_addr #4 !rust !190 {\r\n  ; ..\r\n}\r\n\r\n; hello::foo\r\ndefine internal i32 @_() unnamed_addr #4 !rust !363 {\r\n  ; ..\r\n}\r\n\r\n; <hello::Baz as hello::Bar<bool>>::bar\r\ndefine internal zeroext i1 @_(%Baz* noalias nonnull readonly align 1) unnamed_addr #4 !rust !370 {\r\n  ; ..\r\n}\r\n\r\n; <hello::Baz as hello::Bar<i32>>::bar\r\ndefine internal i32 @_(%Baz* noalias nonnull readonly align 1) unnamed_addr #4 !rust !377 {\r\n  ; ..\r\n}\r\n\r\n; <hello::Quux as hello::Bar<i32>>::bar\r\ndefine internal i32 @_(%Quux* noalias nonnull readonly align 1) unnamed_addr #4 !rust !377 {\r\n  ; ..\r\n}\r\n\r\n!180 = !{!\"drop\", !\"Bar<i32>\", !\"Bar<bool>\"}\r\n!190 = !{!\"drop\", !\"Bar<i32>\"}\r\n!363 = !{!\"fn\", !\"fn() -> i32\"}\r\n!370 = !{!\"dyn\", !\"Bar<bool>\", !\"bar\", !\"fn\", !\"fn(&Baz) -> bool\"}\r\n!377 = !{!\"dyn\", !\"Bar<i32>\", !\"bar\"}\r\n```\r\n\r\nFunctions that may be called via a function pointer receive metadata of the\r\nform: `!\"fn\" !\"fn() -> i32\"`, where the second node is the signature of the\r\nfunction. Example: `!363`\r\n\r\nTrait methods that may be called via dynamic dispatch receive metadata of the\r\nform: `!\"dyn\" !\"Bar<bool>\" !\"bar\"`, where the second node is a concrete trait\r\nand the third node is the name of the method. Example: `!377`\r\n\r\nNote that a single function can receive both `\"fn\"` and `\"dyn\"` metadata as\r\nit's the case of `<Baz as Bar<i32>::bar` in the example above (`!370`).\r\n\r\nDestructors that may be invoked by trait object drop glue receive metadata of\r\nthe form: `!\"drop\" !\"Bar<i32>\"`, where the second node is a concrete trait.\r\nExample: `!180`\r\n\r\nA single destructor may be invoked by different trait objects (because a type\r\ncan implement several traits); in that case the \"drop\" metadata will contain\r\none node for each trait, as it's the case of `Baz`'s destructor in the above\r\nexample (`!190`).\r\n\r\n2. Indirect function calls will receive metadata at call site if they belong to\r\n   any of these groups:\r\n\r\n- Function pointer calls,\r\n- Dynamic dispatch, or\r\n- Trait object drop glue\r\n\r\nUsing our previous example, this is the part of the IR that shows the call site\r\nmetadata added by the `-Z call-metadata` flag:\r\n\r\n``` llvm\r\n; hello::main\r\ndefine internal void @() unnamed_addr #0 {\r\n  ; ..\r\n\r\n  ; `x()`\r\n  %1 = call i32 %0(), !rust !363\r\n\r\n  ; ..\r\n\r\n  ; `let a = z.bar();`\r\n  %14 = invoke zeroext i1 %13({}* align 1 %8)\r\n          to label %bb4 unwind label %cleanup, !db!rust !430\r\n\r\n  ; ..\r\n\r\n  ; `let b = w.bar();`\r\n  %37 = invoke i32 %36({}* align 1 %31)\r\n          to label %bb6 unwind label %cleanup, !rust !377\r\n\r\n  ; ..\r\n\r\n  ; `drop(z)`\r\n  call void @_ZN4core3ptr18real_drop_in_place17h9dde6f5cdf273fbdE(..) #26\r\n\r\n  ; ..\r\n}\r\n\r\n; this is `Box<dyn Bar<bool>>`'s destructor\r\n; core::ptr::real_drop_in_place\r\ndefine internal void @_ZN4core3ptr18real_drop_in_place17h9dde6f5cdf273fbdE(..) {\r\n  ; ..\r\n\r\n  ; `drop_in_place::<dyn Bar<bool>>(_)`\r\n  invoke void %8({}* align 1 %3)\r\n          to label %bb3 unwind label %cleanup, !rust !211\r\n\r\n  ; ..\r\n}\r\n\r\n!211 = !{!\"drop\", !\"Bar<bool>\"}\r\n!363 = !{!\"fn\", !\"fn() -> i32\"}\r\n!377 = !{!\"dyn\", !\"Bar<i32>\", !\"bar\"}\r\n!430 = !{!\"dyn\", !\"Bar<bool>\", !\"bar\"}\r\n```\r\n\r\nA function invocation may only belong to a single category. The syntax used for\r\ncall site metadata is as follows:\r\n\r\n- `!\"fn\" \"fn() -> i32\"` for function pointer calls. The second node is the\r\n  signature of the function being invoked. Example: `!363`\r\n\r\n- `!\"dyn\" !\"Bar<bool>\" !\"bar\"` for dynamic dispatch. The second node is a\r\n  concrete trait and the third node is the name of the method being dispatched.\r\n  Examples: `!377` and `!430`\r\n\r\n- `!\"drop\"` !\"Bar<bool>\" for drop glue. The second node is a concrete trait. In\r\n  the case of call site \"drop\" metadata only a single trait will listed. Example: `!211`\r\n\r\n## How\r\n\r\nAnd here's a high level description of *how* the flag is implemented.\r\n\r\nIn the MIR monomorphize collector pass we take note of:\r\n\r\n- Functions converted into function pointers. These occur in two places: in\r\n  non-const context (e.g. `let x: fn() = foo`), and in const-context (`static X:\r\n  fn() = foo`). These hit two different code paths in the compiler (while\r\n  walking the MIR of functions and when looking into MIR values of static variables) but in\r\n  both cases we keep track of which `Instance`s (`rustc` type used to track\r\n  concrete functions) get converted into a function pointer in a `FxHashSet`.\r\n\r\n- Traits that can get converted into trait objects. Again these occur in two\r\n  places: non-const context (e.g. `let x: &dyn Foo = &Bar`) and in const-context\r\n  (`static X: &'static dyn Foo = &Bar`). As in the previous bullet these hit two\r\n  different code paths in the compiler but in both cases we keep track of *all\r\n  methods (`Instance`s) that belong to these traits* in a `FxHashSet`.\r\n\r\n- Drop glue of trait objects. While performing bullet 2 we also note down the\r\n  types that implement traits that get converted into trait objects. In this\r\n  case we store in the information in a `FxHashMap` that goes from the\r\n  *implementer* destructor (the `Instance` e.g. `real_drop_inplace(&mut Bar)`)\r\n  to the set of concrete traits (`ExistentialTraitRef`s) implemented by the\r\n  implementer type (only the ones that get converted into trait objects).\r\n\r\n(Now I realize that for the second bullet it would use less memory to keep\r\na set of `ExistentialTraitRef`s (traits) instead of a set of `Instance`s (trait\r\nmethods)).\r\n\r\nThen in the LLVM codegen pass:\r\n\r\n- When declaring functions (lowering them to `define` items in LLVM IR) we\r\n  attach \"define\"-level metadata if the function (`Instance`) is in one of the\r\n  sets / maps we previously collected. The functions get either \"drop\"\r\n  metadata, a mixture of \"dyn\" and \"fn\" metadata or no `!rust` metadata.\r\n\r\n- When lowering function invocations to `call` / `invoke` instructions we look up\r\n  the callee (`Instance`) in the sets / maps we previously collected and if\r\n  there's a match we add either \"fn\", \"dyn\" or \"drop\" metadata.\r\n\r\n## TODO / questions\r\n\r\nThis doesn't fully work cross crate. Call site metadata is always complete, even\r\nif the function being invoked comes from a different crate; and in the case of\r\nLTO, invocations in functions defined in dependencies will also get call site\r\nmetadata. The \"define\"-level metadata, however, is incomplete; only functions\r\ndefined (or monomorphize) in the top crate get this kind of metadata.\r\n\r\nTo get complete \"define\"-level metadata I think we would have to store the call\r\nmetadata (\"is this function converted into function pointer?\", \"is this trait\r\nconverted into a trait object?\", etc.) in the rlib metadata (like we do for\r\ntypes and traits). However, that would mean either (a) *always* building and\r\nstoring the call metadata, which would impact everyone's compile times and\r\nincrease rlib size, or (b) only storing the metadata when the `-Z call-metadata`\r\nflag is used, which would worsen end-users' experience as they would need to\r\nrecompile `core` / `std` to get full information. If we do (b) we could compile\r\nthe `std` facade with `-Z call-metadata` so end users don't need to recompile it\r\nthemselves (which requires a tool like Xargo).\r\n\r\nMy gut feeling (and hope) is that always building and storing the extra maps /\r\nsets won't have much impact on compile time given that it's the existing MIR\r\npass plus a few extra trait lookups and map/set insertions per indirect function\r\ncall. So perhaps we can always build and store the call metadata?\r\n\r\nr? @eddyb or @oli-obk ", "created_at": "2019-04-07T16:46:37Z", "updated_at": "2019-05-02T14:39:23Z", "closed_at": "2019-05-02T14:39:23Z", "merged_at": null, "merge_commit_sha": "744a6ae0e23a8e14add5498d6d8740d3ae575be5", "assignee": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 583426710, "node_id": "MDU6TGFiZWw1ODM0MjY3MTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-waiting-on-review", "name": "S-waiting-on-review", "color": "d3dddd", "default": false, "description": "Status: Awaiting review from the assignee but also interested parties."}], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/59777/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/59777/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59777/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/a0a254435acbcdf416bb71335aa02304a289eeec", "head": {"label": "japaric:call-metadata", "ref": "call-metadata", "sha": "a0a254435acbcdf416bb71335aa02304a289eeec", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "repo": {"id": 17873870, "node_id": "MDEwOlJlcG9zaXRvcnkxNzg3Mzg3MA==", "name": "rust", "full_name": "japaric/rust", "private": false, "owner": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/japaric/rust", "description": "a safe, concurrent, practical language", "fork": true, "url": "https://api.github.com/repos/japaric/rust", "forks_url": "https://api.github.com/repos/japaric/rust/forks", "keys_url": "https://api.github.com/repos/japaric/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/japaric/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/japaric/rust/teams", "hooks_url": "https://api.github.com/repos/japaric/rust/hooks", "issue_events_url": "https://api.github.com/repos/japaric/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/japaric/rust/events", "assignees_url": "https://api.github.com/repos/japaric/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/japaric/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/japaric/rust/tags", "blobs_url": "https://api.github.com/repos/japaric/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/japaric/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/japaric/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/japaric/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/japaric/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/japaric/rust/languages", "stargazers_url": "https://api.github.com/repos/japaric/rust/stargazers", "contributors_url": "https://api.github.com/repos/japaric/rust/contributors", "subscribers_url": "https://api.github.com/repos/japaric/rust/subscribers", "subscription_url": "https://api.github.com/repos/japaric/rust/subscription", "commits_url": "https://api.github.com/repos/japaric/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/japaric/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/japaric/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/japaric/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/japaric/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/japaric/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/japaric/rust/merges", "archive_url": "https://api.github.com/repos/japaric/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/japaric/rust/downloads", "issues_url": "https://api.github.com/repos/japaric/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/japaric/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/japaric/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/japaric/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/japaric/rust/labels{/name}", "releases_url": "https://api.github.com/repos/japaric/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/japaric/rust/deployments", "created_at": "2014-03-18T16:51:45Z", "updated_at": "2020-01-15T15:08:04Z", "pushed_at": "2022-06-27T10:37:14Z", "git_url": "git://github.com/japaric/rust.git", "ssh_url": "git@github.com:japaric/rust.git", "clone_url": "https://github.com/japaric/rust.git", "svn_url": "https://github.com/japaric/rust", "homepage": "http://www.rust-lang.org", "size": 837392, "stargazers_count": 0, "watchers_count": 0, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "has_discussions": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "a7cef0bf0810d04da3101fe079a0625d2756744a", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-19T07:42:33Z", "pushed_at": "2023-06-19T07:31:20Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 919635, "stargazers_count": 82737, "watchers_count": 82737, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10954, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9628, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10954, "open_issues": 9628, "watchers": 82737, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/59777"}, "html": {"href": "https://github.com/rust-lang/rust/pull/59777"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/59777"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/59777/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/59777/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/59777/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/a0a254435acbcdf416bb71335aa02304a289eeec"}}, "author_association": "MEMBER", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": false, "rebaseable": false, "mergeable_state": "dirty", "merged_by": null, "comments": 10, "review_comments": 6, "maintainer_can_modify": false, "commits": 7, "additions": 937, "deletions": 99, "changed_files": 30}