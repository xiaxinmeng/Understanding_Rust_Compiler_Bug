{"url": "https://api.github.com/repos/rust-lang/rust/pulls/69171", "id": 375572066, "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTcyMDY2", "html_url": "https://github.com/rust-lang/rust/pull/69171", "diff_url": "https://github.com/rust-lang/rust/pull/69171.diff", "patch_url": "https://github.com/rust-lang/rust/pull/69171.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/69171", "number": 69171, "state": "closed", "locked": false, "title": "Implement new asm! syntax from RFC 2850", "user": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "body": "This PR implements the new `asm!` syntax proposed in https://github.com/rust-lang/rfcs/pull/2850.\r\n\r\n# Design\r\n\r\nA large part of this PR revolves around taking an `asm!` macro invocation and plumbing it through all of the compiler layers down to LLVM codegen. Throughout the various stages, an `InlineAsm` generally consists of 3 components:\r\n\r\n- The template string, which is stored as an array of `InlineAsmTemplatePiece`. Each piece represents either a literal or a placeholder for an operand (just like format strings).\r\n```rust\r\npub enum InlineAsmTemplatePiece {\r\n    String(String),\r\n    Placeholder { operand_idx: usize, modifier: Option<char>, span: Span },\r\n}\r\n```\r\n\r\n- The list of operands to the `asm!` (`in`, `[late]out`, `in[late]out`, `sym`, `const`). These are represented differently at each stage of lowering, but follow a common pattern:\r\n  - `in`, `out` and `inout` all have an associated register class (`reg`) or explicit register (`\"eax\"`).\r\n  - `inout` has 2 forms: one with a single expression that is both read from and written to, and one with two separate expressions for the input and output parts.\r\n  - `out` and `inout` have a `late` flag (`lateout` / `inlateout`) to indicate that the register allocator is allowed to reuse an input register for this output.\r\n  - `out` and the split variant of `inout` allow `_` to be specified for an output, which means that the output is discarded. This is used to allocate scratch registers for assembly code.\r\n  - `sym` is a bit special since it only accepts a path expression, which must point to a `static` or a `fn`.\r\n\r\n- The options set at the end of the `asm!` macro. The only one that is particularly of interest to rustc is `NORETURN` which makes `asm!` return `!` instead of `()`.\r\n```rust\r\nbitflags::bitflags! {\r\n    pub struct InlineAsmOptions: u8 {\r\n        const PURE = 1 << 0;\r\n        const NOMEM = 1 << 1;\r\n        const READONLY = 1 << 2;\r\n        const PRESERVES_FLAGS = 1 << 3;\r\n        const NORETURN = 1 << 4;\r\n        const NOSTACK = 1 << 5;\r\n    }\r\n}\r\n```\r\n\r\n## AST\r\n\r\n`InlineAsm` is represented as an expression in the AST:\r\n\r\n```rust\r\npub struct InlineAsm {\r\n    pub template: Vec<InlineAsmTemplatePiece>,\r\n    pub operands: Vec<(InlineAsmOperand, Span)>,\r\n    pub options: InlineAsmOptions,\r\n}\r\n\r\npub enum InlineAsmRegOrRegClass {\r\n    Reg(Symbol),\r\n    RegClass(Symbol),\r\n}\r\n\r\npub enum InlineAsmOperand {\r\n    In {\r\n        reg: InlineAsmRegOrRegClass,\r\n        expr: P<Expr>,\r\n    },\r\n    Out {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        expr: Option<P<Expr>>,\r\n    },\r\n    InOut {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        expr: P<Expr>,\r\n    },\r\n    SplitInOut {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        in_expr: P<Expr>,\r\n        out_expr: Option<P<Expr>>,\r\n    },\r\n    Const {\r\n        expr: P<Expr>,\r\n    },\r\n    Sym {\r\n        expr: P<Expr>,\r\n    },\r\n}\r\n```\r\n\r\nThe `asm!` macro is implemented in librustc_builtin_macros and outputs an `InlineAsm` AST node. The template string is parsed using libfmt_macros, positional and named operands are resolved to explicit operand indicies. Since target information is not available to macro invocations, validation of the registers and register classes is deferred to AST lowering.\r\n\r\n## HIR\r\n\r\n`InlineAsm` is represented as an expression in the HIR:\r\n\r\n```rust\r\npub struct InlineAsm<'hir> {\r\n    pub template: &'hir [InlineAsmTemplatePiece],\r\n    pub operands: &'hir [InlineAsmOperand<'hir>],\r\n    pub options: InlineAsmOptions,\r\n}\r\n\r\npub enum InlineAsmRegOrRegClass {\r\n    Reg(InlineAsmReg),\r\n    RegClass(InlineAsmRegClass),\r\n}\r\n\r\npub enum InlineAsmOperand<'hir> {\r\n    In {\r\n        reg: InlineAsmRegOrRegClass,\r\n        expr: Expr<'hir>,\r\n    },\r\n    Out {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        expr: Option<Expr<'hir>>,\r\n    },\r\n    InOut {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        expr: Expr<'hir>,\r\n    },\r\n    SplitInOut {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        in_expr: Expr<'hir>,\r\n        out_expr: Option<Expr<'hir>>,\r\n    },\r\n    Const {\r\n        expr: Expr<'hir>,\r\n    },\r\n    Sym {\r\n        expr: Expr<'hir>,\r\n    },\r\n}\r\n```\r\n\r\nAST lowering is where `InlineAsmRegOrRegClass` is converted from `Symbol`s to an actual register or register class. If any modifiers are specified for a template string placeholder, these are validated against the set allowed for that operand type. Finally, explicit registers for inputs and outputs are checked for conflicts (same register used for different operands).\r\n\r\n## Type checking\r\n\r\nEach register class has a whitelist of types that it may be used with. After the types of all operands have been determined, the `intrinsicck` pass will check that these types are in the whitelist. It also checks that split `inout` operands have compatible types and that `const` operands are integers or floats. Suggestions are emitted where needed if a template modifier should be used for an operand based on the type that was passed into it.\r\n\r\n## HAIR\r\n\r\n`InlineAsm` is represented as an expression in the HAIR:\r\n\r\n```rust\r\ncrate enum ExprKind<'tcx> {\r\n    // [..]\r\n    InlineAsm {\r\n        template: &'tcx [InlineAsmTemplatePiece],\r\n        operands: Vec<InlineAsmOperand<'tcx>>,\r\n        options: InlineAsmOptions,\r\n    },\r\n}\r\ncrate enum InlineAsmOperand<'tcx> {\r\n    In {\r\n        reg: InlineAsmRegOrRegClass,\r\n        expr: ExprRef<'tcx>,\r\n    },\r\n    Out {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        expr: Option<ExprRef<'tcx>>,\r\n    },\r\n    InOut {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        expr: ExprRef<'tcx>,\r\n    },\r\n    SplitInOut {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        in_expr: ExprRef<'tcx>,\r\n        out_expr: Option<ExprRef<'tcx>>,\r\n    },\r\n    Const {\r\n        expr: ExprRef<'tcx>,\r\n    },\r\n    SymFn {\r\n        expr: ExprRef<'tcx>,\r\n    },\r\n    SymStatic {\r\n        expr: ExprRef<'tcx>,\r\n    },\r\n}\r\n```\r\n\r\nThe only significant change compared to HIR is that `Sym` has been lowered to either a `SymFn` whose `expr` is a `Literal` ZST of the `fn`, or a `SymStatic` whose `expr` is a `StaticRef`.\r\n\r\n## MIR\r\n\r\n`InlineAsm` is represented as a `Terminator` in the MIR:\r\n\r\n```rust\r\npub enum TerminatorKind<'tcx> {\r\n    // [..]\r\n\r\n    /// Block ends with an inline assembly block. This is a terminator since\r\n    /// inline assembly is allowed to diverge.\r\n    InlineAsm {\r\n        /// The template for the inline assembly, with placeholders.\r\n        template: &'tcx [InlineAsmTemplatePiece],\r\n\r\n        /// The operands for the inline assembly, as `Operand`s or `Place`s.\r\n        operands: Vec<InlineAsmOperand<'tcx>>,\r\n\r\n        /// Miscellaneous options for the inline assembly.\r\n        options: InlineAsmOptions,\r\n\r\n        /// Destination block after the inline assembly returns, unless it is\r\n        /// diverging (InlineAsmOptions::NORETURN).\r\n        destination: Option<BasicBlock>,\r\n    },\r\n}\r\n\r\npub enum InlineAsmOperand<'tcx> {\r\n    In {\r\n        reg: InlineAsmRegOrRegClass,\r\n        value: Operand<'tcx>,\r\n    },\r\n    Out {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        place: Option<Place<'tcx>>,\r\n    },\r\n    InOut {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        in_value: Operand<'tcx>,\r\n        out_place: Option<Place<'tcx>>,\r\n    },\r\n    Const {\r\n        value: Operand<'tcx>,\r\n    },\r\n    SymFn {\r\n        value: Box<Constant<'tcx>>,\r\n    },\r\n    SymStatic {\r\n        value: Box<Constant<'tcx>>,\r\n    },\r\n}\r\n```\r\n\r\nAs part of HAIR lowering, `InOut` and `SplitInOut` operands are lowered to a split form with a separate `in_value` and `out_place`.\r\n\r\nSemantically, the `InlineAsm` terminator is similar to the `Call` terminator except that it has multiple output places where a `Call` only has a single return place output.\r\n\r\nThe constant promotion pass is used to ensure that `const` operands are actually constants (using the same logic as `#[rustc_args_required_const]`).\r\n\r\n## Codegen\r\n\r\nOperands are lowered one more time before being passed to LLVM codegen:\r\n\r\n```rust\r\npub enum InlineAsmOperandRef<'tcx, B: BackendTypes + ?Sized> {\r\n    In {\r\n        reg: InlineAsmRegOrRegClass,\r\n        value: OperandRef<'tcx, B::Value>,\r\n    },\r\n    Out {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        place: Option<PlaceRef<'tcx, B::Value>>,\r\n    },\r\n    InOut {\r\n        reg: InlineAsmRegOrRegClass,\r\n        late: bool,\r\n        in_value: OperandRef<'tcx, B::Value>,\r\n        out_place: Option<PlaceRef<'tcx, B::Value>>,\r\n    },\r\n    Const {\r\n        string: String,\r\n    },\r\n    SymFn {\r\n        instance: Instance<'tcx>,\r\n    },\r\n    SymStatic {\r\n        def_id: DefId,\r\n    },\r\n}\r\n```\r\n\r\nThe operands are lowered to LLVM operands and constraint codes as follow:\r\n- `out` and the output part of `inout` operands are added first, as required by LLVM. Late output operands have a `=` prefix added to their constraint code, non-late output operands have a `=&` prefix added to their constraint code.\r\n- `in` operands are added normally.\r\n- `inout` operands are tied to the matching output operand.\r\n- `sym` operands are passed as function pointers or pointers, using the `\"s\"` constraint.\r\n- `const` operands are formatted to a string and directly inserted in the template string.\r\n\r\nThe template string is converted to LLVM form:\r\n- `$` characters are escaped as `$$`.\r\n- `const` operands are converted to strings and inserted directly.\r\n- Placeholders are formatted as `${X:M}` where `X` is the operand index and `M` is the modifier character. Modifiers are converted from the Rust form to the LLVM form.\r\n\r\nThe various options are converted to clobber constraints or LLVM attributes, refer to the [RFC](https://github.com/Amanieu/rfcs/blob/inline-asm/text/0000-inline-asm.md#mapping-to-llvm-ir) for more details.\r\n\r\nNote that LLVM is sometimes rather picky about what types it accepts for certain constraint codes so we sometimes need to insert conversions to/from a supported type. See the target-specific ISelLowering.cpp files in LLVM for details.\r\n\r\n# Adding support for new architectures\r\n\r\nAdding inline assembly support to an architecture is mostly a matter of defining the registers and register classes for that architecture. All the definitions for register classes are located in `src/librustc_target/asm/`.\r\n\r\nAdditionally you will need to implement lowering of these register classes to LLVM constraint codes in `src/librustc_codegen_llvm/asm.rs`.", "created_at": "2020-02-14T21:02:49Z", "updated_at": "2020-05-21T08:49:49Z", "closed_at": "2020-05-19T21:57:03Z", "merged_at": "2020-05-19T21:57:03Z", "merge_commit_sha": "3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "assignee": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 583437191, "node_id": "MDU6TGFiZWw1ODM0MzcxOTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-waiting-on-bors", "name": "S-waiting-on-bors", "color": "d3dddd", "default": false, "description": "Status: Waiting on bors to run and complete tests. Bors will change the label on completion."}, {"id": 1223998418, "node_id": "MDU6TGFiZWwxMjIzOTk4NDE4", "url": "https://api.github.com/repos/rust-lang/rust/labels/merged-by-bors", "name": "merged-by-bors", "color": "dae4e4", "default": false, "description": "This PR was explicitly merged by bors"}], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/69171/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/69171/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69171/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/1cfdc7ed0c97a082ca7e638d4114590d03a059a9", "head": {"label": "Amanieu:new-asm", "ref": "new-asm", "sha": "1cfdc7ed0c97a082ca7e638d4114590d03a059a9", "user": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "repo": {"id": 45469588, "node_id": "MDEwOlJlcG9zaXRvcnk0NTQ2OTU4OA==", "name": "rust", "full_name": "Amanieu/rust", "private": false, "owner": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/Amanieu/rust", "description": "A safe, concurrent, practical language.", "fork": true, "url": "https://api.github.com/repos/Amanieu/rust", "forks_url": "https://api.github.com/repos/Amanieu/rust/forks", "keys_url": "https://api.github.com/repos/Amanieu/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/Amanieu/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/Amanieu/rust/teams", "hooks_url": "https://api.github.com/repos/Amanieu/rust/hooks", "issue_events_url": "https://api.github.com/repos/Amanieu/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/Amanieu/rust/events", "assignees_url": "https://api.github.com/repos/Amanieu/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/Amanieu/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/Amanieu/rust/tags", "blobs_url": "https://api.github.com/repos/Amanieu/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/Amanieu/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/Amanieu/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/Amanieu/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/Amanieu/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/Amanieu/rust/languages", "stargazers_url": "https://api.github.com/repos/Amanieu/rust/stargazers", "contributors_url": "https://api.github.com/repos/Amanieu/rust/contributors", "subscribers_url": "https://api.github.com/repos/Amanieu/rust/subscribers", "subscription_url": "https://api.github.com/repos/Amanieu/rust/subscription", "commits_url": "https://api.github.com/repos/Amanieu/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/Amanieu/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/Amanieu/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/Amanieu/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/Amanieu/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/Amanieu/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/Amanieu/rust/merges", "archive_url": "https://api.github.com/repos/Amanieu/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/Amanieu/rust/downloads", "issues_url": "https://api.github.com/repos/Amanieu/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/Amanieu/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/Amanieu/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/Amanieu/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/Amanieu/rust/labels{/name}", "releases_url": "https://api.github.com/repos/Amanieu/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/Amanieu/rust/deployments", "created_at": "2015-11-03T13:52:04Z", "updated_at": "2022-01-03T20:38:12Z", "pushed_at": "2023-06-19T23:50:31Z", "git_url": "git://github.com/Amanieu/rust.git", "ssh_url": "git@github.com:Amanieu/rust.git", "clone_url": "https://github.com/Amanieu/rust.git", "svn_url": "https://github.com/Amanieu/rust", "homepage": "http://www.rust-lang.org", "size": 917137, "stargazers_count": 0, "watchers_count": 0, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "d4bf05693c2c16e299f1adc279b54c37a8edef27", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-20T03:06:09Z", "pushed_at": "2023-06-20T03:24:22Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 930398, "stargazers_count": 82761, "watchers_count": 82761, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10963, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9625, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10963, "open_issues": 9625, "watchers": 82761, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/69171"}, "html": {"href": "https://github.com/rust-lang/rust/pull/69171"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/69171"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/69171/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/69171/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/69171/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/1cfdc7ed0c97a082ca7e638d4114590d03a059a9"}}, "author_association": "MEMBER", "auto_merge": null, "active_lock_reason": null, "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "comments": 69, "review_comments": 50, "maintainer_can_modify": false, "commits": 36, "additions": 9285, "deletions": 279, "changed_files": 140}