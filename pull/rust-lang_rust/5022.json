{"url": "https://api.github.com/repos/rust-lang/rust/pulls/5022", "id": 4201533, "node_id": "MDExOlB1bGxSZXF1ZXN0NDIwMTUzMw==", "html_url": "https://github.com/rust-lang/rust/pull/5022", "diff_url": "https://github.com/rust-lang/rust/pull/5022.diff", "patch_url": "https://github.com/rust-lang/rust/pull/5022.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/5022", "number": 5022, "state": "closed", "locked": false, "title": "A new scheduler prototype", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "body": "This is a prototype task scheduler, written in Rust, that is driven by an abstract event loop, along with the beginnings of an I/O interface for translating asynchronous I/O to synchronous I/O via scheduler context switches. It is part of issue #4419.\n\nIt is not ready to merge, but this is an opportunity to review and discuss.\n\nWhile I am primarily interested in proving the integration of I/O with the scheduler, this is also written with a number of other goals in mind:\n- Replacing C++ code with Rust\n- Clean up stack management (#2044, #4479, #4480)\n- Supporting the work stealing algorithm (#3095)\n- Do much less synchronization in some scheduling scenarios (particularly involving I/O, but also possibly spawning, sending, etc.).\n- Simplifying the lifecycle and multithreading complexity of runtime types\n\nWhat is implemented:\n- Context switching operations (scheduler->task, task->scheduler, task->task, blocking)\n- An opaque event loop and I/O abstraction using objects\n- Safer uv bindings that build on std::uv::ll\n- Very simple TCP reads and writes\n\nUnimplemented:\n- Anything related to multithreading\n- Much I/O, including dealing with any cases where a task isn't available to respond to an I/O event\n- Platforms other than x864_64 and unix\n## Scheduler design\n\nI am trying to use ownership to make the relationships between scheduler types clear, and as a result this scheduler is structured quite differently than the current one.\n\nThe core idea here is that tasks are owned, and code that owns a task is free to schedule it. During the lifetime of a task ownership transfers between schedulers and objects on which the task is blocked. The state of a task (blocked vs. running vs. dead, etc.) is encoded in its ownership.\n\nFor comparison, in the existing scheduler, the task is (basically) owned by a scheduler, but is atomically reference counted so other entities (like pipes that a task is blocked on) occasionally hold pointers to a task. The resulting task lifecycle is quite complicated, and I think unnecessarily so.\n\nI believe this model works with pipes very well, though I don't have a complete understanding of pipes yet.\n\nYou'll notice this code is still written as a very big [test case](https://github.com/brson/rust/blob/newsched/src/test/run-pass/newrt.rs), for ease of development.\n\nThe most important submodules:\n- [rt::sched](https://github.com/brson/rust/blob/newsched/src/test/run-pass/newrt_sched.rs) - The core of the scheduler, containing both `Scheduler` and `Task`\n- [rt::uv](https://github.com/brson/rust/blob/newsched/src/test/run-pass/newrt_uv.rs) - libuv bindings that build on uv::ll\n- [rt::io](https://github.com/brson/rust/blob/newsched/src/test/run-pass/newrt_io.rs) - The runtime's abstract I/O interface, implemented for a specific event loop\n- [rt::uvio](https://github.com/brson/rust/blob/newsched/src/test/run-pass/newrt_uvio.rs) - The implementation of `io` for libuv\n\nIn this iteration, `Scheduler` is very simple, mostly providing a few context switching primitive operations, and I like that, so I'll probably break it into multiple types, one as currently written, another dealing with scheduler policy and multithreading. In regards to multithreading, Schedulers are intended to be implemented as actors, mostly dealing with single-threaded state, then occasionally communicating with other schedulers through messages (the current implementation relies more on shared state, locks and signals).\n\n`rt::io` is the runtime's internal, abstract I/O interface. It is used entirely as opaque ~objects and is intended to support yet other, user-facing I/O modules. The I/O interface here should be considered a proof-of-concept, as a real design will require a lot of consideration.\n## Measurements\n\nI've only done one very [simple measurement](https://gist.github.com/brson/4974294), comparing pure TCP read performance between node 0.6 and this scheduler. They indicate this code is about on par with node. I take that as a good sign, though you might expect us to beat node with their dynamic language overhead and the various extra abstractions in their libraries compared to this simple Rust code. perf indicates we spend about 50% time in the kernel, then the usual suspects: `upcall_call_shim_on_c_stack`, `pthread_getspecific`, `malloc` - things that can be tackled in increments.\n\n_Note: The Rust code used a much smaller buffer than node likely is. Adjusting the buffer size to 64K reduces the userspace time significantly._\n## Concerns\n### ~objects don't work\n\nI don't actually remember if I tested them or not, but AIUI they don't work correctly, so I've inserted some placeholder typedefs to try to make the code look like it's using objects when it is not. Hopefully it won't be too hard to do the conversion. Until ~objects works uv needs to live in core.\n### Allocation\n\nThere are a lot of small allocations here, particularly in the uv bindings, which rely heavily on owned closures, but also in the `io` interface that uses objects. Because it is much more pleasant to just use closures everywhere than figure out exactly how to thread data around without allocating, I think this tradeoff is good in the short term. The particularly bad allocations can be optimized as needed. The ~object allocations are considerably harder to eliminate.\n### What happens when I/O types are sent?\n\nWe talked about this in the meeting last week and it's a big problem. I think now that I/O types (those defined in `rt::io` and that form the basis for any I/O API's) must be sendable, the reason being that one-connection per task is going to be the right way to do networking, at least for the near future. The basic server will `listen`, `accept` then capture the connection in a new task.\n\nSo, assuming that I/O types are sendable, there is going to be a lot of complexity in making those I/O types ensure that the task they are _currently_ associated with is running on the correct scheduler. Importantly, task pinning is not sufficient, since the I/O types are bound to a specific _scheduler_ not _task_. Nor will it be sufficient to simply fail if an I/O type migrates to the wrong scheduler, because we have no way to prevent it from happening accidentally (that I can see). It's going to be ugly, and could involve polluting our nice single-threaded I/O paths with some concessions to memory synchronization.\n### Selecting\n\nRelated to the above point about one connection per task, we need to be able to make `select` work with various I/O requests, particularly for reading and listening. Not only that, they have to be able to select on both pipes and I/O types simultaneously (so that I can both listen for incoming connections as well as a signal to _stop_ listening for incoming connections). I have no idea yet how to do this, nor do I even know how pipes implements this currently.\n### Adapting work stealing to non-strict parallel computations\n\nThe work stealing algorithm described in 'Scheduling Multithreaded Computations by Work Stealing' is for 'strict' computations (fork/join style), which is not what we have. We can do something add-hoc to add randomness but I'd rather\nhave something known to work. I do think the work stealing approach makes a lot of sense for us, especially now where we have I/O callbacks that need to be scheduled with high-priority (so cold CPU-bound tasks get stolen to schedulers not doing I/O).\n### Fairness and I/O timeouts\n\nRight now we have a model that does not enforce any sort of time accounting. I kind of like this for performance and simplicity, but it means we can mix CPU bound and I/O bound tasks on a single scheduler without ever yielding to do I/O. I suspect with this merging of I/O and the scheduler we are going to end up wanting some utility functions for setting up groups of schedulers specifically for I/O or specifically for processing.\n## Next\n\nThe immediate goal, pending feedback, will be to get this patch into core. Beyond that there are a number of parallel development paths, primarily I/O design, multithreading and integration.\n### Begin working on user-facing I/O library (#4248)\n\nThis just barely scratches the surface of I/O. Designing an I/O library is itself a huge effort. I think I would like to approach this top down, figure out how we want a synchronous I/O library to be designed, then how to connect it to uv through `rt::io`.\n\nWhen doing this design it's important to consider Rust's unique constraints, in particular the relationship of pipes and the scheduler to I/O. Pipes and I/O readers/writers share a lot in common and need to interoperate in various ways (particularly with `select`). We also need to consider this in the context of the existing `core::io` - what is or isn't working there.\n\nI'm no expert on I/O libraries so I think I'd like to hash this out on the mailing lists, perhaps in conjunction with a survey of other languages' I/O.\n### Multithreading\n- Create a parallel deque (#4877)\n- Port pipes to this scheduler (#5018)\n- Encapsulate scheduling 'policy' in one place (SchedulerPolicy) - so we can experiment easily\n- Teach schedulers to communicate and steal work\n### Integration\n- Fix ~object and convert code to use it\n- Rewrite net::ip to not use uv (#4956)\n- Move uv to core or its own crate (#5019)\n- Context switching for remaining platforms (#5020)\n- `start` lang item (#3406) - so we can start running test cases on this scheduler\n- Bindings for win32 TLS - this only has pthread bindings\n- Stack growth and stack switching - this time stack logic goes into `rt::stack` and not into the task itself. Start by adapting the current scheme to the new scheduler, but consider potential upcoming changes to the FFI.\n- Logging (#5021) - Figure out how to make logging work in global, scheduler, and task context, in the old runtime or in this runtime. Optional complete redesign (#3309).\n- Add the local heap - It can start as just a wrapper for `memory_region`.\n\nI want to hold off on adding linked failure because I think the current design is too complex still, and the implementation imposes some undesirable constraints on the scheduler.\n", "created_at": "2013-02-19T01:13:38Z", "updated_at": "2014-06-12T21:35:10Z", "closed_at": "2013-03-07T01:00:35Z", "merged_at": null, "merge_commit_sha": null, "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/5022/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/5022/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/5022/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/5e41a97f0bbfa24697cad384840b613b23f6730a", "head": {"label": "brson:newsched", "ref": "newsched", "sha": "5e41a97f0bbfa24697cad384840b613b23f6730a", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "repo": {"id": 779820, "node_id": "MDEwOlJlcG9zaXRvcnk3Nzk4MjA=", "name": "rust", "full_name": "brson/rust", "private": false, "owner": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/brson/rust", "description": "pursuing the trifecta", "fork": true, "url": "https://api.github.com/repos/brson/rust", "forks_url": "https://api.github.com/repos/brson/rust/forks", "keys_url": "https://api.github.com/repos/brson/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/brson/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/brson/rust/teams", "hooks_url": "https://api.github.com/repos/brson/rust/hooks", "issue_events_url": "https://api.github.com/repos/brson/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/brson/rust/events", "assignees_url": "https://api.github.com/repos/brson/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/brson/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/brson/rust/tags", "blobs_url": "https://api.github.com/repos/brson/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/brson/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/brson/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/brson/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/brson/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/brson/rust/languages", "stargazers_url": "https://api.github.com/repos/brson/rust/stargazers", "contributors_url": "https://api.github.com/repos/brson/rust/contributors", "subscribers_url": "https://api.github.com/repos/brson/rust/subscribers", "subscription_url": "https://api.github.com/repos/brson/rust/subscription", "commits_url": "https://api.github.com/repos/brson/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/brson/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/brson/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/brson/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/brson/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/brson/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/brson/rust/merges", "archive_url": "https://api.github.com/repos/brson/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/brson/rust/downloads", "issues_url": "https://api.github.com/repos/brson/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/brson/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/brson/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/brson/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/brson/rust/labels{/name}", "releases_url": "https://api.github.com/repos/brson/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/brson/rust/deployments", "created_at": "2010-07-16T23:45:53Z", "updated_at": "2020-04-07T19:12:42Z", "pushed_at": "2022-05-03T00:22:02Z", "git_url": "git://github.com/brson/rust.git", "ssh_url": "git@github.com:brson/rust.git", "clone_url": "https://github.com/brson/rust.git", "svn_url": "https://github.com/brson/rust", "homepage": "http://www.rust-lang.org", "size": 745173, "stargazers_count": 9, "watchers_count": 9, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "has_discussions": false, "forks_count": 4, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 4, "open_issues": 0, "watchers": 9, "default_branch": "master"}}, "base": {"label": "rust-lang:incoming", "ref": "incoming", "sha": "6351515d98d4d79500eac021bd573fbbd586bb24", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-19T07:04:40Z", "pushed_at": "2023-06-19T07:31:20Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 919635, "stargazers_count": 82736, "watchers_count": 82736, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10954, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9627, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10954, "open_issues": 9627, "watchers": 82736, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/5022"}, "html": {"href": "https://github.com/rust-lang/rust/pull/5022"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/5022"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/5022/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/5022/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/5022/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/5e41a97f0bbfa24697cad384840b613b23f6730a"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": false, "rebaseable": false, "mergeable_state": "dirty", "merged_by": null, "comments": 1, "review_comments": 0, "maintainer_can_modify": false, "commits": 4, "additions": 2283, "deletions": 42, "changed_files": 19}