{"url": "https://api.github.com/repos/rust-lang/rust/pulls/79135", "id": 522394419, "node_id": "MDExOlB1bGxSZXF1ZXN0NTIyMzk0NDE5", "html_url": "https://github.com/rust-lang/rust/pull/79135", "diff_url": "https://github.com/rust-lang/rust/pull/79135.diff", "patch_url": "https://github.com/rust-lang/rust/pull/79135.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/79135", "number": 79135, "state": "closed", "locked": false, "title": "stabilize `#![feature(min_const_generics)]` in 1.51", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "body": "*A new Kind*\r\n*A Sort long Prophesized*\r\n*Once Fragile, now Eternal*\r\n\r\n# Stabilization report\r\n\r\nThis is the stabilization report for `#![feature(min_const_generics)]` (tracking issue #74878), a subset of `#![feature(const_generics)]` (tracking issue #44580), based on rust-lang/rfcs#2000.\r\n\r\nThe [version target](https://forge.rust-lang.org/#current-release-versions) is ~~1.50 (2020-12-31 => beta, 2021-02-11 => stable)~~ 1.51 (2021-02-11 => beta, 2021-03-25 => stable).\r\n\r\nThis report is a collaborative effort of @varkor, @shepmaster and @lcnr.\r\n\r\n## Summary\r\n\r\nIt is currently possible to parameterize functions, type aliases, types, traits and implementations by types and lifetimes.\r\nWith `#![feature(min_const_generics)]`, it becomes possible, in addition, to parameterize these by constants.\r\n\r\nThis is done using the syntax `const IDENT: Type` in the parameter listing. Unlike full const generics, `min_const_generics` is limited to parameterization by integers, and constants of type `char` or `bool`.\r\n\r\nWe already use `#![feature(min_const_generics)]` on stable to implement many common traits for arrays. See [the documentation](https://doc.rust-lang.org/nightly/std/primitive.array.html) for specific examples.\r\n\r\nGeneric const arguments, for now, are not permitted to involve computations depending on generic parameters. This means that const parameters may only be instantiated using either:\r\n\r\n1. const expressions that do not depend on any generic parameters, e.g. `{ foo() + 1 }`, where `foo` is a `const fn`\r\n1. standalone const parameters, e.g. `{N}`\r\n\r\n### Example\r\n\r\n```rust\r\n#![feature(min_const_generics)]\r\n\r\ntrait Foo<const N: usize> {\r\n    fn method<const M: usize>(&mut self, arr: [[u8; M]; N]);\r\n}\r\n\r\nstruct Bar<T, const N: usize> {\r\n    inner: [T; N],\r\n}\r\n\r\nimpl<const N: usize> Foo<N> for Bar<u8, N> {\r\n    fn method<const M: usize>(&mut self, arr: [[u8; M]; N]) {\r\n        for (elem, s) in self.inner.iter_mut().zip(arr.iter()) {\r\n            for &x in s {\r\n                *elem &= x;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfn function<const N: u16>() -> u16 {\r\n    // Const parameters can be used freely inside of functions.\r\n    (N + 1) / 2 * N\r\n}\r\n\r\nfn main() {\r\n    let mut bar = Bar { inner: [0xff; 3] };\r\n    // This infers the value of `M` from the type of the function argument.\r\n    bar.method([[0b11_00, 0b01_00], [0b00_11, 0b00_01], [0b11_00, 0b00_11]]);\r\n    assert_eq!(bar.inner, [0b01_00, 0b00_01, 0b00_00]);\r\n\r\n    // You can also explicitly specify the value of `N`.\r\n    assert_eq!(function::<17>(), 153);\r\n}\r\n```\r\n\r\n## Motivation\r\n\r\nRust has the built-in array type, which is parametric over a constant. Without const generics, this type can be quite cumbersome to use as it is not possible to generically implement a trait for arrays of different lengths. For example, this meant that, for a long time, the standard library only contained trait implementations for arrays up to a length of 32. This restriction has since been lifted through the use of const generics.\r\n\r\nConst parameters allow users to naturally specify variants of a generic type which are more naturally parameterized by values, rather than by types. For example, using const generics, many of the uses of the crate [typenum](https://crates.io/crates/typenum) may now be replaced with const parameters, improving compilation time as well as code readability and diagnostics.\r\n\r\nThe subset described by `min_const_generics` is self-contained, but extensive enough to help with the most frequent issues: implementing traits for arrays and using arbitrarily-sized arrays inside of other types. Furthermore, it extends naturally to full `const_generics` once the remaining design and implementation questions have been resolved.\r\n\r\n## In-depth feature description\r\n\r\n### Declaring const parameters\r\n\r\n*Const parameters* are allowed in all places where types and lifetimes are supported. They use the syntax `const IDENT: Type`. Currently, const parameters must be declared after lifetime and type parameters. Their scope is equal to the scope of other generic parameters. They live in the value namespace.\r\n\r\n`Type` must be one of `u8`, `u16`, `u32`, `u64`, `u128`, `usize`, `i8`, `i16`, `i32`, `i64`, `i128`, `isize`, `char` and `bool`. This restriction is implemented in two places:\r\n\r\n1. during name resolution, where we forbid generic parameters\r\n1. during well-formedness checking, where we only allow the types listed above\r\n\r\nThe updated syntax of parameter listings is:\r\n\r\n```\r\nGenericParams:\r\n    (OuterAttr* LifetimeParam),* (OuterAttr* TypeParam),* (OuterAttr* ConstParam),*\r\n\r\nOuterAttr: '#[' ... ']'\r\nLifetimeParam: ...\r\nTypeParam: ...\r\nConstParam: 'const' IDENT ':' Type\r\n```\r\n\r\nUnlike type and lifetime parameters, const parameters of types can be used without being mentioned inside of a parameterized type because const parameters do not have issues concerning variance. This means that the following types are allowed:\r\n\r\n```rust\r\nstruct Foo<const N: usize>;\r\nenum Bar<const M: usize> { A, B }\r\n```\r\n\r\n### Const arguments\r\n\r\nConst parameters are instantiated using *const arguments*. Any concrete const expression or const parameter as a standalone argument can be used. When applying an expression as const parameter, most expressions must be contained within a block, with two exceptions:\r\n\r\n1. literals and single-segment path expressions\r\n1. array lengths\r\n\r\nThis syntactic restriction is necessary to avoid ambiguity, or requiring infinite lookahead when parsing an expression as a generic argument.\r\n\r\nIn the cases where a generic argument could be resolved as either a type or const argument, we always interpret it as a type. This causes the following test to fail:\r\n\r\n```rust\r\ntype N = u32;\r\nstruct Foo<const N: usize>;\r\nfn foo<const N: usize>() -> Foo<N> { todo!() } // ERR\r\n```\r\n\r\nTo circumvent this, the user may wrap the const parameter with braces, at which point it is unambiguously accepted.\r\n\r\n```rust\r\ntype N = u32;\r\nstruct Foo<const N: usize>;\r\nfn bar<const N: usize>() -> Foo<{ N }> { todo!() } // ok\r\n```\r\n\r\nOperations depending on generic parameters are **not** allowed, which is enforced during well-formedness checking. Allowing generic unevaluated constants would require a way to check if they would always evaluate successfully to prevent errors that are not caught at declaration time. This ability forms part of `#![feature(const_evaluatable_checked)]`, which is not yet being stabilised.\r\n\r\nSince we are not yet stabilizing `#![feature(lazy_normalization_consts)]`, we must not supply the parent generics to anonymous constants except for repeat expressions. Doing so can cause cycle errors for arrays used in `where`-bounds. Not supplying the parent generics can however lead to ICEs occurring before well-formedness checking when trying to use a generic parameter. See #56445 for details.\r\n\r\nSince we expect cases like this to occur more frequently once `min_const_generics` is stabilized, we have chosen to forbid generic parameters in anonymous constants during name resolution. While this changes the ICE in the situation above to an ordinary error, this is theoretically a breaking change, as early-bound lifetimes were previously permitted in repeat expressions but now are disallowed, causing the following snippet to break:\r\n\r\n```rust\r\nfn late_bound<'a>() {\r\n    let _ = [0; {\r\n        let _: &'a (); // ICE ==> ERR\r\n        3\r\n    }];\r\n}\r\n\r\nfn early_bound<'a>() where &'a (): Sized {\r\n    let _ = [0; {\r\n        let _: &'a (); // ok ==> ERR\r\n        3\r\n    }];\r\n}\r\n```\r\n\r\n### Using const parameters\r\n\r\nConst parameters can be used almost everywhere ordinary constants are allowed, except that they may not be used in the construction of consts, statics, functions, or types inside a function body and are subject to the generic argument restrictions mentioned above.\r\n\r\nExpressions containing const parameters are eligible for promotion:\r\n\r\n```rust\r\nfn test<const N: usize>() -> &'static usize {\r\n    &(3 + N)\r\n}\r\n```\r\n\r\n### Symbol mangling\r\n\r\nSee the [Rust symbol name mangling RFC](https://rust-lang.github.io/rfcs/2603-rust-symbol-name-mangling-v0.html) for an overview. Generic const parameters take the form `K[type][value]` when the value is known, or `Kp` where the value is not known, where:\r\n- `[type]` is any integral type, `bool`, or `char`.\r\n- `[value]` is the unsigned hex value for integers, preceded by `n` when negative; is `0` or `1` for `bool`; is the hex value for `char`.\r\n\r\n### Exhaustiveness checking\r\n\r\nWe do not check the exhaustiveness of impls, meaning that the following example does **not** compile:\r\n\r\n```rust\r\nstruct Foo<const B: bool>;\r\ntrait Bar {}\r\nimpl Bar for Foo<true> {}\r\nimpl Bar for Foo<false> {}\r\n\r\nfn needs_bar(_: impl Bar) {}\r\nfn generic<const B: bool>() {\r\n    let v = Foo::<B>;\r\n    needs_bar(v);\r\n}\r\n```\r\n\r\n### Type inference\r\n\r\nThe value of const parameters can be inferred during typeck. One interesting case is the length of generic arrays, which can also be inferred from patterns (implemented in #70562). Practical usage of this can be seen in #76825.\r\n\r\n### Equality of constants\r\n\r\n`#![feature(min_const_generics)]` only permits generic parameters to be used as standalone generic arguments. We compare two parameters to be equal if they are literally the same generic parameter.\r\n\r\n### Associated constants\r\n\r\nAssociated constants can use const parameters without restriction, see https://github.com/rust-lang/rust/pull/79135#issuecomment-748299774 for more details.\r\n\r\n## Future work\r\n\r\nAs this is a limited subset of rust-lang/rfcs#2000, there are quite a few extensions we will be looking into next.\r\n\r\n### Lazy normalization of constants\r\n\r\nStabilizing `#![feature(lazy_normalization_consts)]` (tracking issue #72219) will remove some special cases that are currently necessary for `min_const_generics`, and unblocks operations on const parameters.\r\n\r\n### Relaxing ordering requirements between const and type parameters\r\n\r\nWe currently restrict the order of generic parameters so that types must come before consts. We could relax this, as is currently done with `const_generics`. Without this it is not possible to use both type defaults and const parameters at the same time.\r\n\r\nUnrestricting the order will require us to improve some diagnostics that expect there to be a strict order between type and const parameters.\r\n\r\n### Allowing more parameter types\r\n\r\nWe would like to support const parameters of more types, especially`&str` and user-defined types. Both are blocked on [valtrees]. There are also open questions regarding the design of `structural_match` concerning the latter. Supporting generic const parameter types such as `struct Foo<T, const N: T>` will be a lot harder and is unlikely to be implemented in the near future.\r\n\r\n### Default values of const parameters\r\n\r\nWe do not yet support default values for const parameters. There is work in progress to enable this on nightly (see https://github.com/rust-lang/rust/pull/75384).\r\n\r\n### Generic const operations\r\n\r\nWith `#![feature(min_const_generics)]`, only concrete const expressions and parameters as standalone arguments are allowed in types and repeat expressions. However, supporting generic const operations, such as `N + 1` or `std::mem::size_of::<T>()` is highly desirable. This feature is in early development under `#![feature(const_evaluatable_checked)]`.\r\n\r\n## Implementation history\r\n\r\nMany people have contributed to the design and implementation of const generics over the last three years. See https://github.com/rust-lang/rust/issues/44580#issuecomment-728913127 for a summary. Once again thank you to everybody who helped out here!\r\n\r\n[valtrees]: https://github.com/rust-lang/rust/issues/72396\r\n\r\n---\r\n\r\nr? @varkor\r\n", "created_at": "2020-11-17T13:02:27Z", "updated_at": "2021-08-26T09:52:28Z", "closed_at": "2020-12-27T09:55:59Z", "merged_at": "2020-12-27T09:55:59Z", "merge_commit_sha": "1d517afcd0929450ded8f644fa8e8da3776db68b", "assignee": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 223796632, "node_id": "MDU6TGFiZWwyMjM3OTY2MzI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/relnotes", "name": "relnotes", "color": "fad8c7", "default": false, "description": "Marks issues that should be documented in the release notes of the next release."}, {"id": 583437191, "node_id": "MDU6TGFiZWw1ODM0MzcxOTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-waiting-on-bors", "name": "S-waiting-on-bors", "color": "d3dddd", "default": false, "description": "Status: Waiting on bors to run and complete tests. Bors will change the label on completion."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}, {"id": 1223998418, "node_id": "MDU6TGFiZWwxMjIzOTk4NDE4", "url": "https://api.github.com/repos/rust-lang/rust/labels/merged-by-bors", "name": "merged-by-bors", "color": "dae4e4", "default": false, "description": "This PR was explicitly merged by bors"}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 2237029335, "node_id": "MDU6TGFiZWwyMjM3MDI5MzM1", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-min_const_generics", "name": "F-min_const_generics", "color": "f9c0cc", "default": false, "description": "Minimal const generics MVP"}], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/79", "html_url": "https://github.com/rust-lang/rust/milestone/79", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/79/labels", "id": 6245796, "node_id": "MDk6TWlsZXN0b25lNjI0NTc5Ng==", "number": 79, "title": "1.51.0", "description": null, "creator": {"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}, "open_issues": 2, "closed_issues": 722, "state": "closed", "created_at": "2020-12-26T00:11:27Z", "updated_at": "2022-11-23T17:13:02Z", "due_on": null, "closed_at": "2021-03-26T15:17:22Z"}, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/79135/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/79135/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/79135/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/c4ba60a191bccd2f2568572efb76e0e37e88dd21", "head": {"label": "lcnr:the-paleogenesis-of-generic-germination", "ref": "the-paleogenesis-of-generic-germination", "sha": "c4ba60a191bccd2f2568572efb76e0e37e88dd21", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "repo": {"id": 163883472, "node_id": "MDEwOlJlcG9zaXRvcnkxNjM4ODM0NzI=", "name": "rust", "full_name": "lcnr/rust", "private": false, "owner": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/lcnr/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": true, "url": "https://api.github.com/repos/lcnr/rust", "forks_url": "https://api.github.com/repos/lcnr/rust/forks", "keys_url": "https://api.github.com/repos/lcnr/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/lcnr/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/lcnr/rust/teams", "hooks_url": "https://api.github.com/repos/lcnr/rust/hooks", "issue_events_url": "https://api.github.com/repos/lcnr/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/lcnr/rust/events", "assignees_url": "https://api.github.com/repos/lcnr/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/lcnr/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/lcnr/rust/tags", "blobs_url": "https://api.github.com/repos/lcnr/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/lcnr/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/lcnr/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/lcnr/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/lcnr/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/lcnr/rust/languages", "stargazers_url": "https://api.github.com/repos/lcnr/rust/stargazers", "contributors_url": "https://api.github.com/repos/lcnr/rust/contributors", "subscribers_url": "https://api.github.com/repos/lcnr/rust/subscribers", "subscription_url": "https://api.github.com/repos/lcnr/rust/subscription", "commits_url": "https://api.github.com/repos/lcnr/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/lcnr/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/lcnr/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/lcnr/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/lcnr/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/lcnr/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/lcnr/rust/merges", "archive_url": "https://api.github.com/repos/lcnr/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/lcnr/rust/downloads", "issues_url": "https://api.github.com/repos/lcnr/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/lcnr/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/lcnr/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/lcnr/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/lcnr/rust/labels{/name}", "releases_url": "https://api.github.com/repos/lcnr/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/lcnr/rust/deployments", "created_at": "2019-01-02T19:55:53Z", "updated_at": "2021-11-20T17:03:10Z", "pushed_at": "2023-06-20T13:50:48Z", "git_url": "git://github.com/lcnr/rust.git", "ssh_url": "git@github.com:lcnr/rust.git", "clone_url": "https://github.com/lcnr/rust.git", "svn_url": "https://github.com/lcnr/rust", "homepage": "https://www.rust-lang.org", "size": 925518, "stargazers_count": 0, "watchers_count": 0, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 1, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 0, "open_issues": 1, "watchers": 0, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "30a42735a0ff678172f66f63aca746096a717293", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-20T15:22:35Z", "pushed_at": "2023-06-20T15:21:17Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 931034, "stargazers_count": 82778, "watchers_count": 82778, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10968, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9635, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10968, "open_issues": 9635, "watchers": 82778, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/79135"}, "html": {"href": "https://github.com/rust-lang/rust/pull/79135"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/79135"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/79135/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/79135/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/79135/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/c4ba60a191bccd2f2568572efb76e0e37e88dd21"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": true, "mergeable": false, "rebaseable": false, "mergeable_state": "dirty", "merged_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "comments": 36, "review_comments": 3, "maintainer_can_modify": false, "commits": 4, "additions": 699, "deletions": 1118, "changed_files": 478}