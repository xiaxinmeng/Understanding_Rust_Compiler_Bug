{"url": "https://api.github.com/repos/rust-lang/rust/pulls/31605", "id": 59189763, "node_id": "MDExOlB1bGxSZXF1ZXN0NTkxODk3NjM=", "html_url": "https://github.com/rust-lang/rust/pull/31605", "diff_url": "https://github.com/rust-lang/rust/pull/31605.diff", "patch_url": "https://github.com/rust-lang/rust/pull/31605.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/31605", "number": 31605, "state": "closed", "locked": false, "title": "[WIP] Sanitizers support.", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "body": "I was recently working on support for thread sanitizer and leak sanitizer in\nrustc. This is still work in progress, so all kinds of comments, suggestions\nand help is welcomed.\n\nLeak sanitizer intercepts malloc and friends, records allocations (including\nprogram backtrace at allocation time) and at program exit reports all leaks (in\natexit callback). Enabling it basically requires linking in lsan runtime\nlibrary when building final executable.\n\nSupporting thread sanitizer is a little bit more complicated. Thread sanitizer\ncombines function interception with additional LLVM pass that instruments\natomic intrinsics, memory intrinsics (memcpy, ...), and memory operations,\nreplacing them with calls to tsan runtime. Full instrumentation is performed\nonly for functions with LLVM SanitizeThread attribute.\n\nAddress sanitizer and memory sanitizers are also included, but I am yet to\nanalze how clang and llvm supports them, so this could be quite broken on\nanything but trivial programs.\n\nCurrent state and things that are still left to be done:\n- Makefile support is missing. Sanitiers runtime libraries are built only when\n  using rustbuild.\n- compiletest support is missing. It is not possible to skip execution of\n  sanitizers tests when running on unsupported platform or if sanitizers have\n  not been built at all. This blocked me from including tests dedicated for\n  sanitizers.\n- Sanitizers intercept calls to standard memory allocation routines, so it does\n  not work with liballoc_jemalloc (i.e., sanitizer is not aware of allocations\n  done through jemalloc). I tried to alleviate this problem by making\n  liballoc_system default allocator when used with sanitizers.\n- Thread sanitizer does not support unwinding. In particular it emits\n  additional call on function entry and function exit to maintain so called\n  shadow stack. During unwinding exit callback function is not called which\n  leaves shadow stack inconsistent, or could even lead to shadow stack\n  overflow. Though, it seems that it could be supported in future:\n  https://github.com/google/sanitizers/issues/485.\n- Thread sanitizer does not support standalone memory fences which are used in\n  current Arc implementation, and reports false positives. See following for\n  more details:\n  https://groups.google.com/d/topic/thread-sanitizer/B4i9EMQ4BQE/discussion\n  https://groups.google.com/d/topic/thread-sanitizer/dZ3QiQE49ns/discussion\n  Replacing fences in Arc by AcqRel on fetch_sub is one possible workaround\n  (this is for example implementation used in boost:\n  sp_counted_base_std_atomic.hpp, sp_counted_base_clang.hpp).\n- To work correctly everything that goes into final executable should be\n  compiled with the same sanitizer flags. Unfortunately it is quite easy to get\n  this wrong.\n\nTwo small examples how this works. First leak sanitizer:\n\n```\n$ cat l.rs \nfn main() {\n    let mut v =  Vec::new();\n    for i in 1..10 { v.push(i); }\n    std::mem::forget(v);\n}\n$ rustc l.rs -C sanitize=leak -g\n$ ./l \n\n=================================================================\n==25162==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 64 byte(s) in 1 object(s) allocated from:\n    #0 0x55c831f200f9 in realloc /home/tm/dev/rust-sanitize/src/compiler-rt/lib/lsan/lsan_interceptors.cc:83\n    #1 0x55c831f3c882 in heap::reallocate::h821891df4ae7e3e2cea /home/tm/dev/rust-sanitize/src/liballoc/heap.rs:79\n    #2 0x55c831f3c6de in raw_vec::RawVec$LT$T$GT$::double::h15624233122824710853 /home/tm/dev/rust-sanitize/src/liballoc/raw_vec.rs:225\n    #3 0x55c831f3c48d in vec::Vec$LT$T$GT$::push::h5050575373468619909 /home/tm/dev/rust-sanitize/src/libcollections/vec.rs:662\n    #4 0x55c831f3b977 in main::h20f3bbfa5731dcbceaa /home/tm/dev/rust-sanitize/l.rs:3\n    #5 0x55c831f42a49 in fnfn /home/tm/dev/rust-sanitize/src/libstd/panic.rs:260\n    #6 0x55c831f42a49 in sys_common::unwind::try::try_fn::h6538920744052587894 /home/tm/dev/rust-sanitize/src/libstd/sys/common/unwind/mod.rs:127\n    #7 0x55c831f403cb in __rust_try (/home/tm/dev/rust-sanitize/l+0x293cb)\n    #8 0x55c831f3c9d9 in main (/home/tm/dev/rust-sanitize/l+0x259d9)\n\nSUMMARY: LeakSanitizer: 64 byte(s) leaked in 1 allocation(s).\n```\n\nAnd thread sanitizer:\n\n```\n$ cat r.rs \nuse std::thread;\n\nstatic mut A : isize = 0;\n\nfn main() {\n    let t1 = thread::spawn(|| unsafe {\n        A = 1;\n    });\n    let t2 = thread::spawn(|| unsafe {\n        A = 2;\n    });\n\n    t1.join().unwrap();\n    t2.join().unwrap();\n}\n\n$ rustc r.rs -C sanitize=thread -g\n$ ./r \n==================\nWARNING: ThreadSanitizer: data race (pid=25023)\n  Write of size 8 at 0x0000014b4428 by thread T2:\n    #0 main::_$u7b$$u7b$closure$u7d$$u7d$::closure.4792 /home/tm/dev/rust-sanitize/r.rs:10 (r+0x00000048d946)\n    #1 std::thread::Builder::spawn::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::closure.4788 /home/tm/dev/rust-sanitize/src/libstd/thread/mod.rs:277 (r+0x00000048d69e)\n    #2 sys_common::unwind::try::try_fn::h9274523788145261467 /home/tm/dev/rust-sanitize/src/libstd/sys/common/unwind/mod.rs:127 (r+0x00000048d65a)\n    #3 __rust_try <null> (r+0x0000004937bb)\n    #4 std::thread::Builder::spawn::_$u7b$$u7b$closure$u7d$$u7d$::closure.4785 /home/tm/dev/rust-sanitize/src/libstd/thread/mod.rs:277 (r+0x00000048d41c)\n    #5 boxed::F.FnBox$LT$A$GT$::call_box::h16235982475798004568 /home/tm/dev/rust-sanitize/src/liballoc/boxed.rs:541 (r+0x00000048dc18)\n    #6 sys::thread::Thread::new::thread_start::he0c01c02f3160f11sWx <null> (r+0x00000049539f)\n\n  Previous write of size 8 at 0x0000014b4428 by thread T1:\n    #0 main::_$u7b$$u7b$closure$u7d$$u7d$::closure.4752 /home/tm/dev/rust-sanitize/r.rs:7 (r+0x00000048c2e6)\n    #1 std::thread::Builder::spawn::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::closure.4656 /home/tm/dev/rust-sanitize/src/libstd/thread/mod.rs:277 (r+0x00000048c03e)\n    #2 sys_common::unwind::try::try_fn::h17278694213563056245 /home/tm/dev/rust-sanitize/src/libstd/sys/common/unwind/mod.rs:127 (r+0x00000048bffa)\n    #3 __rust_try <null> (r+0x0000004937bb)\n    #4 std::thread::Builder::spawn::_$u7b$$u7b$closure$u7d$$u7d$::closure.4628 /home/tm/dev/rust-sanitize/src/libstd/thread/mod.rs:277 (r+0x00000048bdbc)\n    #5 boxed::F.FnBox$LT$A$GT$::call_box::h2072261010643383919 /home/tm/dev/rust-sanitize/src/liballoc/boxed.rs:541 (r+0x00000048c6d8)\n    #6 sys::thread::Thread::new::thread_start::he0c01c02f3160f11sWx <null> (r+0x00000049539f)\n\n  Location is global 'A::h8f386a2750644a91faa' of size 8 at 0x0000014b4428 (r+0x0000014b4428)\n\n  Thread T2 (tid=25026, running) created by main thread at:\n    #0 pthread_create /home/tm/dev/rust-sanitize/src/compiler-rt/lib/tsan/rtl/tsan_interceptors.cc:885 (r+0x00000040e5c6)\n    #1 sys::thread::Thread::new::hd809cc2c968844a5ZOx /home/tm/dev/rust-sanitize/src/libstd/sys/unix/thread.rs:62 (r+0x0000004915f2)\n    #2 thread::spawn::h12587892448715582896 /home/tm/dev/rust-sanitize/src/libstd/thread/mod.rs:317 (r+0x00000048c8e4)\n    #3 main::hec4c6925d3037a95iaa /home/tm/dev/rust-sanitize/r.rs:9 (r+0x000000487d2d)\n    #4 fnfn /home/tm/dev/rust-sanitize/src/libstd/panic.rs:260 (r+0x0000004960f9)\n    #5 sys_common::unwind::try::try_fn::h6538920744052587894 /home/tm/dev/rust-sanitize/src/libstd/sys/common/unwind/mod.rs:127 (r+0x0000004960f9)\n    #6 __libc_start_main <null> (libc.so.6+0x00000002086f)\n\n  Thread T1 (tid=25025, finished) created by main thread at:\n    #0 pthread_create /home/tm/dev/rust-sanitize/src/compiler-rt/lib/tsan/rtl/tsan_interceptors.cc:885 (r+0x00000040e5c6)\n    #1 sys::thread::Thread::new::hd809cc2c968844a5ZOx /home/tm/dev/rust-sanitize/src/libstd/sys/unix/thread.rs:62 (r+0x0000004915f2)\n    #2 thread::spawn::h8606048922863295027 /home/tm/dev/rust-sanitize/src/libstd/thread/mod.rs:317 (r+0x000000487eb4)\n    #3 main::hec4c6925d3037a95iaa /home/tm/dev/rust-sanitize/r.rs:6 (r+0x000000487d24)\n    #4 fnfn /home/tm/dev/rust-sanitize/src/libstd/panic.rs:260 (r+0x0000004960f9)\n    #5 sys_common::unwind::try::try_fn::h6538920744052587894 /home/tm/dev/rust-sanitize/src/libstd/sys/common/unwind/mod.rs:127 (r+0x0000004960f9)\n    #6 __libc_start_main <null> (libc.so.6+0x00000002086f)\n\nSUMMARY: ThreadSanitizer: data race /home/tm/dev/rust-sanitize/r.rs:10 in main::_$u7b$$u7b$closure$u7d$$u7d$::closure.4792\n==================\nThreadSanitizer: reported 1 warnings\n```\n", "created_at": "2016-02-12T15:45:11Z", "updated_at": "2016-03-10T23:29:30Z", "closed_at": "2016-03-10T23:29:30Z", "merged_at": null, "merge_commit_sha": "3a5c05ba7261a37fb43a3cf71c8ab6d7387359c3", "assignee": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/31605/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/31605/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/31605/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/1b0de5b6a08d4001db3db1f3dd65493728ff254a", "head": {"label": null, "ref": "sanitize", "sha": "1b0de5b6a08d4001db3db1f3dd65493728ff254a", "user": null, "repo": null}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "004c4b4b7d581f54365bc621a23106e970120f99", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-19T07:04:40Z", "pushed_at": "2023-06-19T07:31:20Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 919635, "stargazers_count": 82736, "watchers_count": 82736, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10954, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9627, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10954, "open_issues": 9627, "watchers": 82736, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/31605"}, "html": {"href": "https://github.com/rust-lang/rust/pull/31605"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/31605"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/31605/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/31605/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/31605/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/1b0de5b6a08d4001db3db1f3dd65493728ff254a"}}, "author_association": "NONE", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": false, "rebaseable": false, "mergeable_state": "dirty", "merged_by": null, "comments": 18, "review_comments": 7, "maintainer_can_modify": false, "commits": 3, "additions": 201, "deletions": 24, "changed_files": 10}