{"url": "https://api.github.com/repos/rust-lang/rust/pulls/62886", "id": 300088887, "node_id": "MDExOlB1bGxSZXF1ZXN0MzAwMDg4ODg3", "html_url": "https://github.com/rust-lang/rust/pull/62886", "diff_url": "https://github.com/rust-lang/rust/pull/62886.diff", "patch_url": "https://github.com/rust-lang/rust/pull/62886.patch", "issue_url": "https://api.github.com/repos/rust-lang/rust/issues/62886", "number": 62886, "state": "closed", "locked": false, "title": "Redesign the std::iter::Step trait", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "body": "CC #42168, @SimonSapin @scottmcm. Revival of #43127.\r\n\r\nThe trait is now:\r\n\r\n```rust\r\n/// Objects that have a notion of *successor* and *predecessor*.\r\n/// \r\n/// The *successor* operation moves towards values that compare greater.\r\n/// The *predecessor* operation moves towards values that compare lesser.\r\n///\r\n/// # Safety\r\n///\r\n/// This trait is `unsafe` because its implementation must be correct for\r\n/// the safety of `unsafe trait TrustedLen` implementations, and the results\r\n/// of using this trait can be otherwise trusted by `unsafe` code.\r\n#[unstable(feature = \"step_trait\",\r\n           reason = \"recently redesigned\",\r\n           issue = \"42168\")]\r\npub unsafe trait Step: Clone + PartialOrd + Sized {\r\n    /// Returns the number of *successor* steps needed to get from `start` to `end`.\r\n    ///\r\n    /// Returns `None` if that number would overflow `usize`\r\n    /// (or is infinite, or if `end` would never be reached).\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a`, `b`, and `n`:\r\n    ///\r\n    /// * `steps_between(&a, &b) == Some(n)` if and only if `a.forward(n) == Some(b)`\r\n    /// * `steps_between(&a, &b) == Some(n)` if and only if `b.backward(n) == Some(a)`\r\n    /// * `steps_between(&a, &b) == Some(n)` only if `a <= b`\r\n    ///   * Corrolary: `steps_between(&a, &b) == Some(0)` if and only if `a == b`\r\n    ///   * Note that `a <= b` does _not_ imply `steps_between(&a, &b) != None`;\r\n    ///     this is the case when it would take more than `usize::MAX` steps to get to `b`\r\n    /// * `steps_between(&a, &b) == None` if `a > b`\r\n    fn steps_between(start: &Self, end: &Self) -> Option<usize>;\r\n\r\n    /// Returns the value that would be obtained by taking the *successor*\r\n    /// of `self` `count` times.\r\n    ///\r\n    /// Returns `None` if this would overflow the range of values supported by `Self`.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a`, `n`, and `m` where `n + m` does not overflow:\r\n    ///\r\n    /// * `a.forward(n).and_then(|x| x.forward(m)) == a.forward(n + m)`\r\n    /// * `a.forward(n)` equals `Step::successor` applied to `a` `n` times\r\n    ///   * Corollary: `a.forward(0) == Some(a)`\r\n    /// * `a.forward(n).unwrap() >= a`\r\n    fn forward(&self, count: usize) -> Option<Self>;\r\n\r\n    /// Returns the *successor* of `self`.\r\n    ///\r\n    /// If this would overflow the range of values supported by `Self`,\r\n    /// this method is allowed to panic or wrap. Suggested behavior is\r\n    /// to panic when debug assertions are enabled, and wrap otherwise.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a` where `a.successor()` does not overflow:\r\n    ///\r\n    /// * `a == a.successor().predecessor()`\r\n    /// * `a.successor() == a.forward(1).unwrap()`\r\n    /// * `a.successor() >= a`\r\n    #[inline]\r\n    #[unstable(feature = \"step_trait_ext\",\r\n               reason = \"recently added\",\r\n               issue = \"42168\")]\r\n    fn successor(&self) -> Self { self.forward(1).expect(\"overflow in `Step::successor`\") }\r\n\r\n    /// Returns the *successor* of `self`.\r\n    ///\r\n    /// If this would overflow the range of values supported by `Self`,\r\n    /// this method is defined to return the input value instead.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a` where `a.successor()` does not overflow:\r\n    ///\r\n    /// * `a == a.successor().predecessor()`\r\n    /// * `a.successor() == a.forward(1).unwrap()`\r\n    /// * `a.successor() >= a`\r\n    /// \r\n    /// For any `a` where `a.successor()` does overflow:\r\n    /// \r\n    /// * `a.successor() == a`\r\n    #[inline]\r\n    #[unstable(feature = \"step_trait_ext\",\r\n               reason = \"recently added\",\r\n               issue = \"42168\")]\r\n    fn successor_saturating(&self) -> Self {\r\n        self.forward(1).unwrap_or_else(|| self.clone())\r\n    }\r\n\r\n    /// Returns the *successor* of `self` without overflow.\r\n    /// \r\n    /// # Safety\r\n    /// \r\n    /// It is undefined behavior if this operation exceeds the range of\r\n    /// values supported by `Self`. If you cannot guarantee that this\r\n    /// will not overflow, use `forward` or `successor` instead.\r\n    /// \r\n    /// For any `a`, if there exists `b` such that `b > a`,\r\n    /// it is safe to call `a.successor_unchecked()`.\r\n    #[inline]\r\n    #[unstable(feature = \"unchecked_math\",\r\n               reason = \"super niche optimization path\",\r\n               issue = \"0\")]\r\n    unsafe fn successor_unchecked(&self) -> Self { self.successor() }\r\n\r\n    /// Returns the value that would be obtained by taking the *predecessor*\r\n    /// of `self` `count` times.\r\n    ///\r\n    /// Returns `None` if this would underflow the range of values supported by `Self`.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a`, `n`, and `m` where `n + m` does not overflow:\r\n    ///\r\n    /// * `a.backward(n).and_then(|x| x.backward(m)) == a.backward(n + m)`\r\n    /// * `a.backward(n)` equals `Step::predecessor` applied to `a` `n` times\r\n    ///   * Corollary: `a.backward(0) == Some(a)`\r\n    /// * `a.backward(n).unwrap() <= a`\r\n    fn backward(&self, count: usize) -> Option<Self>;\r\n\r\n    /// Returns the *predecessor* of `self`.\r\n    ///\r\n    /// If this would underflow the range of values supported by `Self`,\r\n    /// this method is allowed to panic or wrap. Suggested behavior is\r\n    /// to panic when debug assertions are enabled, and wrap otherwise.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a` where `a.predecessor()` does not underflow:\r\n    ///\r\n    /// * `a == a.predecessor().successor()`\r\n    /// * `a.predecessor() == a.backward(1).unwrap()`\r\n    /// * `a.predecessor() <= a`\r\n    #[inline]\r\n    #[unstable(feature = \"step_trait_ext\",\r\n               reason = \"recently added\",\r\n               issue = \"42168\")]\r\n    fn predecessor(&self) -> Self { self.backward(1).expect(\"underflow in `Step::predecessor`\") }\r\n\r\n    /// Returns the *predecessor* of `self`.\r\n    ///\r\n    /// If this would underflow the range of values supported by `Self`,\r\n    /// this method is defined to return the input value instead.\r\n    ///\r\n    /// # Invariants\r\n    ///\r\n    /// For any `a` where `a.predecessor()` does not underflow:\r\n    ///\r\n    /// * `a == a.predecessor().successor()`\r\n    /// * `a.predecessor() == a.backward(1).unwrap()`\r\n    /// * `a.predecessor() <= a`\r\n    /// \r\n    /// For any `a` where `a.predecessor()` does underflow:\r\n    /// \r\n    /// * `a.predecessor() == a`\r\n    #[inline]\r\n    #[unstable(feature = \"step_trait_ext\",\r\n               reason = \"recently added\",\r\n               issue = \"42168\")]\r\n    fn predecessor_saturating(&self) -> Self {\r\n        self.backward(1).unwrap_or_else(|| self.clone())\r\n    }\r\n\r\n    /// Returns the *predecessor* of `self` without underflow.\r\n    /// \r\n    /// # Safety\r\n    /// \r\n    /// It is undefined behavior if this operation exceeds the range of\r\n    /// values supported by `Self`. If you cannot guarantee that this\r\n    /// will not underflow, use `backward` or `predecessor` instead.\r\n    /// \r\n    /// For any `a`, if there exists `b` such that `b < a`,\r\n    /// it is safe to call `a.successor_unchecked()`.\r\n    #[inline]\r\n    #[unstable(feature = \"unchecked_math\",\r\n               reason = \"super niche optimization path\",\r\n               issue = \"0\")]\r\n    unsafe fn predecessor_unchecked(&self) -> Self { self.predecessor() }\r\n}\r\n```\r\n\r\nMost of the work is taken from @SimonSapin's PR, just updated to current. Again, arithmetic and overflow handling with multiple integer types of different widths and signedness is tricky, careful review would be appreciated. I had to change a few of Simon's tests to get them to pass.\r\n\r\nThis could use a perf test to see how it impacts performance. Hopefully, due to the fact that this version of the redesign really just is removing `replace_one`/`replace_zero` and renaming the other functions to fit the description as successor/predecessor rather than add/sub, it shouldn't impact much. This also makes the potential impl to make `RangeInclusive<char>` finally work much more straightforward.\r\n\r\nThis breaks with published chalk 0.9.0, as it implements `Step`. chalk master no longer implements the trait.", "created_at": "2019-07-23T00:47:39Z", "updated_at": "2020-02-03T18:37:56Z", "closed_at": "2020-02-03T18:37:55Z", "merged_at": null, "merge_commit_sha": "56c300b47d7fa8ec721031ec7b9bcafcf16307b8", "assignee": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 762300676, "node_id": "MDU6TGFiZWw3NjIzMDA2NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-blocked", "name": "S-blocked", "color": "d3dddd", "default": false, "description": "Status: marked as blocked \u274c on something else such as an RFC or other implementation work."}], "milestone": null, "draft": false, "commits_url": "https://api.github.com/repos/rust-lang/rust/pulls/62886/commits", "review_comments_url": "https://api.github.com/repos/rust-lang/rust/pulls/62886/comments", "review_comment_url": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62886/comments", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/a550faccd0b7d949ebf96ede9c039218a0d4dbcd", "head": {"label": "CAD97:master", "ref": "master", "sha": "a550faccd0b7d949ebf96ede9c039218a0d4dbcd", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "repo": {"id": 115163816, "node_id": "MDEwOlJlcG9zaXRvcnkxMTUxNjM4MTY=", "name": "rust", "full_name": "CAD97/rust", "private": false, "owner": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/CAD97/rust", "description": "A safe, concurrent, practical language.", "fork": true, "url": "https://api.github.com/repos/CAD97/rust", "forks_url": "https://api.github.com/repos/CAD97/rust/forks", "keys_url": "https://api.github.com/repos/CAD97/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/CAD97/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/CAD97/rust/teams", "hooks_url": "https://api.github.com/repos/CAD97/rust/hooks", "issue_events_url": "https://api.github.com/repos/CAD97/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/CAD97/rust/events", "assignees_url": "https://api.github.com/repos/CAD97/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/CAD97/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/CAD97/rust/tags", "blobs_url": "https://api.github.com/repos/CAD97/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/CAD97/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/CAD97/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/CAD97/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/CAD97/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/CAD97/rust/languages", "stargazers_url": "https://api.github.com/repos/CAD97/rust/stargazers", "contributors_url": "https://api.github.com/repos/CAD97/rust/contributors", "subscribers_url": "https://api.github.com/repos/CAD97/rust/subscribers", "subscription_url": "https://api.github.com/repos/CAD97/rust/subscription", "commits_url": "https://api.github.com/repos/CAD97/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/CAD97/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/CAD97/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/CAD97/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/CAD97/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/CAD97/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/CAD97/rust/merges", "archive_url": "https://api.github.com/repos/CAD97/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/CAD97/rust/downloads", "issues_url": "https://api.github.com/repos/CAD97/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/CAD97/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/CAD97/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/CAD97/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/CAD97/rust/labels{/name}", "releases_url": "https://api.github.com/repos/CAD97/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/CAD97/rust/deployments", "created_at": "2017-12-23T02:05:51Z", "updated_at": "2022-08-28T23:40:51Z", "pushed_at": "2023-05-12T11:48:17Z", "git_url": "git://github.com/CAD97/rust.git", "ssh_url": "git@github.com:CAD97/rust.git", "clone_url": "https://github.com/CAD97/rust.git", "svn_url": "https://github.com/CAD97/rust", "homepage": "https://www.rust-lang.org", "size": 831674, "stargazers_count": 0, "watchers_count": 0, "language": "Rust", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": [], "visibility": "public", "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "rust-lang:master", "ref": "master", "sha": "91642e3ac0120c8e9cdd5f3c85ad03f3bf1b8b69", "user": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 724712, "node_id": "MDEwOlJlcG9zaXRvcnk3MjQ3MTI=", "name": "rust", "full_name": "rust-lang/rust", "private": false, "owner": {"login": "rust-lang", "id": 5430905, "node_id": "MDEyOk9yZ2FuaXphdGlvbjU0MzA5MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5430905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rust-lang", "html_url": "https://github.com/rust-lang", "followers_url": "https://api.github.com/users/rust-lang/followers", "following_url": "https://api.github.com/users/rust-lang/following{/other_user}", "gists_url": "https://api.github.com/users/rust-lang/gists{/gist_id}", "starred_url": "https://api.github.com/users/rust-lang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rust-lang/subscriptions", "organizations_url": "https://api.github.com/users/rust-lang/orgs", "repos_url": "https://api.github.com/users/rust-lang/repos", "events_url": "https://api.github.com/users/rust-lang/events{/privacy}", "received_events_url": "https://api.github.com/users/rust-lang/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/rust-lang/rust", "description": "Empowering everyone to build reliable and efficient software.", "fork": false, "url": "https://api.github.com/repos/rust-lang/rust", "forks_url": "https://api.github.com/repos/rust-lang/rust/forks", "keys_url": "https://api.github.com/repos/rust-lang/rust/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/rust-lang/rust/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/rust-lang/rust/teams", "hooks_url": "https://api.github.com/repos/rust-lang/rust/hooks", "issue_events_url": "https://api.github.com/repos/rust-lang/rust/issues/events{/number}", "events_url": "https://api.github.com/repos/rust-lang/rust/events", "assignees_url": "https://api.github.com/repos/rust-lang/rust/assignees{/user}", "branches_url": "https://api.github.com/repos/rust-lang/rust/branches{/branch}", "tags_url": "https://api.github.com/repos/rust-lang/rust/tags", "blobs_url": "https://api.github.com/repos/rust-lang/rust/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/rust-lang/rust/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/rust-lang/rust/git/refs{/sha}", "trees_url": "https://api.github.com/repos/rust-lang/rust/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/rust-lang/rust/statuses/{sha}", "languages_url": "https://api.github.com/repos/rust-lang/rust/languages", "stargazers_url": "https://api.github.com/repos/rust-lang/rust/stargazers", "contributors_url": "https://api.github.com/repos/rust-lang/rust/contributors", "subscribers_url": "https://api.github.com/repos/rust-lang/rust/subscribers", "subscription_url": "https://api.github.com/repos/rust-lang/rust/subscription", "commits_url": "https://api.github.com/repos/rust-lang/rust/commits{/sha}", "git_commits_url": "https://api.github.com/repos/rust-lang/rust/git/commits{/sha}", "comments_url": "https://api.github.com/repos/rust-lang/rust/comments{/number}", "issue_comment_url": "https://api.github.com/repos/rust-lang/rust/issues/comments{/number}", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/{+path}", "compare_url": "https://api.github.com/repos/rust-lang/rust/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/rust-lang/rust/merges", "archive_url": "https://api.github.com/repos/rust-lang/rust/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/rust-lang/rust/downloads", "issues_url": "https://api.github.com/repos/rust-lang/rust/issues{/number}", "pulls_url": "https://api.github.com/repos/rust-lang/rust/pulls{/number}", "milestones_url": "https://api.github.com/repos/rust-lang/rust/milestones{/number}", "notifications_url": "https://api.github.com/repos/rust-lang/rust/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/rust-lang/rust/labels{/name}", "releases_url": "https://api.github.com/repos/rust-lang/rust/releases{/id}", "deployments_url": "https://api.github.com/repos/rust-lang/rust/deployments", "created_at": "2010-06-16T20:39:03Z", "updated_at": "2023-06-19T10:22:09Z", "pushed_at": "2023-06-19T11:44:46Z", "git_url": "git://github.com/rust-lang/rust.git", "ssh_url": "git@github.com:rust-lang/rust.git", "clone_url": "https://github.com/rust-lang/rust.git", "svn_url": "https://github.com/rust-lang/rust", "homepage": "https://www.rust-lang.org", "size": 920473, "stargazers_count": 82742, "watchers_count": 82742, "language": "Rust", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "has_discussions": false, "forks_count": 10956, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 9630, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "allow_forking": true, "is_template": false, "web_commit_signoff_required": false, "topics": ["compiler", "hacktoberfest", "language", "rust"], "visibility": "public", "forks": 10956, "open_issues": 9630, "watchers": 82742, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/62886"}, "html": {"href": "https://github.com/rust-lang/rust/pull/62886"}, "issue": {"href": "https://api.github.com/repos/rust-lang/rust/issues/62886"}, "comments": {"href": "https://api.github.com/repos/rust-lang/rust/issues/62886/comments"}, "review_comments": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/62886/comments"}, "review_comment": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/rust-lang/rust/pulls/62886/commits"}, "statuses": {"href": "https://api.github.com/repos/rust-lang/rust/statuses/a550faccd0b7d949ebf96ede9c039218a0d4dbcd"}}, "author_association": "CONTRIBUTOR", "auto_merge": null, "active_lock_reason": null, "merged": false, "mergeable": false, "rebaseable": false, "mergeable_state": "dirty", "merged_by": null, "comments": 40, "review_comments": 19, "maintainer_can_modify": false, "commits": 1, "additions": 622, "deletions": 234, "changed_files": 5}