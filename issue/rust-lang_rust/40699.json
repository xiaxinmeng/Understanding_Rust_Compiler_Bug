{"url": "https://api.github.com/repos/rust-lang/rust/issues/40699", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40699/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40699/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40699/events", "html_url": "https://github.com/rust-lang/rust/issues/40699", "id": 215710859, "node_id": "MDU6SXNzdWUyMTU3MTA4NTk=", "number": 40699, "title": "Unhelpful lifetime error on .clone() refers to &&T, could suggest adding Clone", "user": {"login": "kw217", "id": 587036, "node_id": "MDQ6VXNlcjU4NzAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/587036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kw217", "html_url": "https://github.com/kw217", "followers_url": "https://api.github.com/users/kw217/followers", "following_url": "https://api.github.com/users/kw217/following{/other_user}", "gists_url": "https://api.github.com/users/kw217/gists{/gist_id}", "starred_url": "https://api.github.com/users/kw217/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kw217/subscriptions", "organizations_url": "https://api.github.com/users/kw217/orgs", "repos_url": "https://api.github.com/users/kw217/repos", "events_url": "https://api.github.com/users/kw217/events{/privacy}", "received_events_url": "https://api.github.com/users/kw217/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-21T11:46:02Z", "updated_at": "2023-06-05T06:19:52Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "In code that works with boxed closures (e.g., futures code), it is common to clone an argument so that it can be moved into the closure. If the argument is passed by reference, clone() will clone the value if there is a Clone implementation, otherwise it will pointlessly clone the reference.\r\n\r\nIf the Clone implementation is not present, rustc reports E0495 quite unhelpfully.\r\n\r\nPlease could rustc spot this and suggest adding a Clone implementation? I think the signature is an invocation of `clone()` at `&T` when the type compatibility being checked is `&&T`.\r\n\r\nExample:\r\n\r\n```rust\r\n// Uncomment the derive to make this compile.\r\n//#[derive(Clone)]\r\nstruct Foo(String);\r\n\r\nfn bar(p: &Foo) -> Box<Fn() -> ()> {\r\n    let p = p.clone();\r\n    let f = move || baz(&p);\r\n    Box::new(f)\r\n}\r\n\r\nfn baz(_: &Foo) {}\r\n\r\npub fn main() {\r\n    let foo = Foo(\"foo\".to_string());\r\n    let closure = bar(&foo);\r\n    closure()\r\n}\r\n```\r\n\r\nError message:\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\r\n --> doubleref.rs:5:15\r\n  |\r\n5 |     let p = p.clone();\r\n  |               ^^^^^\r\n  |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 4:35...\r\n --> doubleref.rs:4:36\r\n  |\r\n4 |   fn bar(p: &Foo) -> Box<Fn() -> ()> {\r\n  |  ____________________________________^ starting here...\r\n5 | |     let p = p.clone();\r\n6 | |     let f = move || baz(&p);\r\n7 | |     Box::new(f)\r\n8 | | }\r\n  | |_^ ...ending here\r\nnote: ...so that types are compatible (expected &&Foo, found &&Foo)\r\n --> doubleref.rs:5:15\r\n  |\r\n5 |     let p = p.clone();\r\n  |               ^^^^^\r\n  = note: but, the lifetime must be valid for the static lifetime...\r\nnote: ...so that the type `[closure@doubleref.rs:6:13: 6:28 p:&Foo]` will meet its required lifetime bounds\r\n --> doubleref.rs:7:5\r\n  |\r\n7 |     Box::new(f)\r\n  |     ^^^^^^^^^^^\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40699/timeline", "performed_via_github_app": null, "state_reason": null}