{"url": "https://api.github.com/repos/rust-lang/rust/issues/41060", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41060/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41060/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41060/events", "html_url": "https://github.com/rust-lang/rust/issues/41060", "id": 219273502, "node_id": "MDU6SXNzdWUyMTkyNzM1MDI=", "number": 41060, "title": "Type inference of integer literals: inconsistency with the reference", "user": {"login": "jaystrictor", "id": 4204810, "node_id": "MDQ6VXNlcjQyMDQ4MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4204810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaystrictor", "html_url": "https://github.com/jaystrictor", "followers_url": "https://api.github.com/users/jaystrictor/followers", "following_url": "https://api.github.com/users/jaystrictor/following{/other_user}", "gists_url": "https://api.github.com/users/jaystrictor/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaystrictor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaystrictor/subscriptions", "organizations_url": "https://api.github.com/users/jaystrictor/orgs", "repos_url": "https://api.github.com/users/jaystrictor/repos", "events_url": "https://api.github.com/users/jaystrictor/events{/privacy}", "received_events_url": "https://api.github.com/users/jaystrictor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-04T14:40:14Z", "updated_at": "2017-08-30T22:06:34Z", "closed_at": "2017-08-30T22:06:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [reference](https://doc.rust-lang.org/nightly/reference/tokens.html#integer-literals) currently says the following for integer literals\r\n\r\n> The type of an unsuffixed integer literal is determined by type inference:\r\n[...]\r\nIf the program context under-constrains the type, it defaults to the signed 32-bit integer `i32`.\r\n\r\nThis does however not work for some inherent methods of signed integer types:\r\n```rust\r\ntrait A {\r\n    fn what_type(&self);\r\n}\r\n\r\n\r\nimpl A for i16 {\r\n    fn what_type(&self) {\r\n        println!(\"i16\");\r\n    }\r\n}\r\n\r\nimpl A for i32 {\r\n    fn what_type(&self)  {\r\n        println!(\"i32\");\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let z = 1;\r\n    z.what_type();\r\n    //z.is_positive(); // <- uncomment this line\r\n}\r\n```\r\n\r\nAs you can see, `z` is under-constrained in this case. The compiler does the right thing and defaults to type `i32`, so calling the trait method `what_type()` works.\r\n\r\nIf you uncomment the inherent method call to `is_positive()`, `z` still is under-constrained in pretty much the same way as before, however, the compiler fails to default to `i32` and instead prints\r\n```\r\nerror: no method named `is_positive` found for type `{integer}` in the current scope\r\n```\r\n---\r\n\r\nAlso note that the reference says\r\n> If an integer type can be uniquely determined from the surrounding program context, the unsuffixed integer literal has that type.\r\n\r\nBut the following example show that the order of statements is important:\r\n\r\n```rust\r\nfn one() { // compiles\r\n    let a = 0;\r\n    take_some(a);\r\n    a.is_positive();\r\n}\r\n\r\nfn two() { // does not compile\r\n    let a = 0;\r\n    a.is_positive();\r\n    take_some(a);\r\n}\r\n\r\nfn take_some(var: i32) {\r\n    // do nothing\r\n}\r\n```\r\n---\r\n\r\nI think floating-point literals have the same issue, but I haven't checked.\r\n\r\nIssue #39255 and issue #40985 may be related.", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41060/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41060/timeline", "performed_via_github_app": null, "state_reason": "completed"}