{"url": "https://api.github.com/repos/rust-lang/rust/issues/36588", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36588/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36588/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36588/events", "html_url": "https://github.com/rust-lang/rust/issues/36588", "id": 177918721, "node_id": "MDU6SXNzdWUxNzc5MTg3MjE=", "number": 36588, "title": "Add traits w/ auto-deriving for soundly serializing/inspecting/transforming rustc types.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 13242248, "node_id": "MDU6TGFiZWwxMzI0MjI0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-metadata", "name": "A-metadata", "color": "f7e101", "default": false, "description": "Area: crate metadata"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-19T22:49:58Z", "updated_at": "2020-05-21T15:22:09Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, we're limited to the general-purpose `Eq`, `Ord`, `Hash`, `Encodable` and `Decodable` traits, even though the compiler often has more unconventional desires, involving contexts and custom behaviors.\n\nThere are several special-purpose traits already in the compiler, such as AST/HIR `Folder`/`Visitor` and the two-in-one `TypeFoldable` (which also does visiting).\n\nAlso, #36551 adds a specialization mechanism in the bundled `rustc_serialize` to work around the fact that `Encodable` and `Decodable` have their methods be generic over the encoder/decoder instead of the trait, but this abuses the yet-unclosed lifetime soundness hole in specialization (#31844):\n\n``` rust\nimpl<'a, 'tcx> SpecializedDecoder<Ty<'tcx>> for DecodeContext<'a, 'tcx> {...}\n```\n\nThat `impl` requires that the `'tcx` of the decoded `Ty` match the `'tcx` of the decoder, but this _cannot_ be enforced through specialization as the lifetime relationships do not exist before monomorphization.\n\nA better solution would involve custom traits that can dispatch over the decoder w/o specialization, i.e.:\n\n``` rust\nimpl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Ty<'tcx> {...}\n```\n\nTo make all of this ergonomic, auto-deriving is necessary, and I believe macros 1.1 (perhaps helped by a permanent switch to rustbuild) can make it happen.\n\nLast but not least, it may be possible to generalize encoding/decoding and visiting/folding/relating into a single (or a pair of) abstraction(s), but I'd have to leave that to someone who understands tree folding, transducers, and perhaps Haskell lenses, although there's no guarantee they map nicely to Rust.\n\ncc @rust-lang/compiler \n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36588/timeline", "performed_via_github_app": null, "state_reason": null}