{"url": "https://api.github.com/repos/rust-lang/rust/issues/91854", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91854/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91854/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91854/events", "html_url": "https://github.com/rust-lang/rust/issues/91854", "id": 1078186340, "node_id": "I_kwDOAAsO6M5AQ9Fk", "number": 91854, "title": "Lifetime in associated type and method taking `&'a self` creates strange borrow issues", "user": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-12-13T07:42:47Z", "updated_at": "2021-12-21T07:08:03Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\nstruct Item<'a, T: Trait<'a>>(T::AssociatedType);\r\n\r\ntrait Trait<'a> {\r\n    type AssociatedType: 'a;\r\n}\r\n\r\nstruct TraitImpl;\r\n\r\nimpl<'a> Trait<'a> for TraitImpl {\r\n    type AssociatedType = &'a ();\r\n}\r\n\r\nimpl<'a, T: Trait<'a>> Item<'a, T> {\r\n    fn bug(&'a self) {}\r\n}\r\n\r\nfn test<'a>() -> Item<'a, TraitImpl> {\r\n    let item = Item(&());\r\n\r\n    let _ = item.bug();\r\n\r\n    item\r\n}\r\n```\r\n\r\nProduces the following error message:\r\n```\r\nerror[E0515]: cannot return value referencing local variable `item`\r\n  --> src/lib.rs:22:5\r\n   |\r\n20 |     let _ = item.bug();\r\n   |             ---------- `item` is borrowed here\r\n21 | \r\n22 |     item\r\n   |     ^^^^ returns a value referencing data owned by the current function\r\n\r\nerror[E0505]: cannot move out of `item` because it is borrowed\r\n  --> src/lib.rs:22:5\r\n   |\r\n17 | fn test<'a>() -> Item<'a, TraitImpl> {\r\n   |         -- lifetime `'a` defined here\r\n...\r\n20 |     let _ = item.bug();\r\n   |             ---------- borrow of `item` occurs here\r\n21 | \r\n22 |     item\r\n   |     ^^^^\r\n   |     |\r\n   |     move out of `item` occurs here\r\n   |     returning this value requires that `item` is borrowed for `'a`\r\n\r\nSome errors have detailed explanations: E0505, E0515.\r\nFor more information about an error, try `rustc --explain E0505`.\r\n```\r\n\r\nThere are many ways to fix this. Changing `&'a self` to `&self` for example, or removing the associated type. This really is just a minimal example to reproduce the issue, not a real world program. I considered this a bug in Rust because, as far as I know, this should work. The error message to me looks like `item` borrows a local copy of itself, but why the error vanishes when I don't use an associated type is a mystery to me, as is the rest of it.\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\ncargo 1.57.0 (b2e52d7ca 2021-10-21)\r\nrelease: 1.57.0\r\ncommit-hash: b2e52d7cab0a286ee9fcc0c17510b1e72fcb53eb\r\ncommit-date: 2021-10-21\r\nhost: x86_64-apple-darwin\r\nlibgit2: 1.3.0 (sys:0.13.23 vendored)\r\nlibcurl: 7.77.0 (sys:0.4.49+curl-7.79.1 system ssl:(SecureTransport) LibreSSL/2.8.3)\r\nos: Mac OS 12.0.1 [64-bit]\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91854/timeline", "performed_via_github_app": null, "state_reason": null}