{"url": "https://api.github.com/repos/rust-lang/rust/issues/97353", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97353/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97353/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97353/events", "html_url": "https://github.com/rust-lang/rust/issues/97353", "id": 1246489647, "node_id": "I_kwDOAAsO6M5KS-wv", "number": 97353, "title": "rust sorting algorithm", "user": {"login": "mmajass", "id": 14048690, "node_id": "MDQ6VXNlcjE0MDQ4Njkw", "avatar_url": "https://avatars.githubusercontent.com/u/14048690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmajass", "html_url": "https://github.com/mmajass", "followers_url": "https://api.github.com/users/mmajass/followers", "following_url": "https://api.github.com/users/mmajass/following{/other_user}", "gists_url": "https://api.github.com/users/mmajass/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmajass/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmajass/subscriptions", "organizations_url": "https://api.github.com/users/mmajass/orgs", "repos_url": "https://api.github.com/users/mmajass/repos", "events_url": "https://api.github.com/users/mmajass/events{/privacy}", "received_events_url": "https://api.github.com/users/mmajass/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-05-24T12:39:46Z", "updated_at": "2022-05-25T00:00:57Z", "closed_at": "2022-05-25T00:00:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I cannot figure out if I am mistaken or if rust built-in sort() with randomly unsorted Vec with the length of higher than 20 (inspired by timsort) is in some cases around 2x slower than a naive implementation of quicksort using the first element as the pivot?\r\n\r\nfor example this input:\r\n\r\n```\r\n    let mut rng = rand::thread_rng();\r\n    let range = Uniform::new(-30000, 30000);\r\n    let mut unsorted: Vec<i32> = (0..1000).map(|_| rng.sample(&range)).collect();\r\n```\r\n\r\nwith the supplied sort:\r\n\r\n```\r\npub fn system_sort(input: &mut Vec<i32>, _start: usize, _len: usize) {\r\n    input.sort();\r\n}\r\n```\r\n\r\nwill take an average of 20.154 us to run:\r\n\r\n> system_sort/2           time:   [20.112 us 20.154 us 20.202 us]                           \r\nFound 12 outliers among 100 measurements (12.00%)\r\n  5 (5.00%) high mild\r\n  7 (7.00%) high severe\r\n\r\nBut using the same input with a naive implementation of quicksort using first element as pivot:\r\n\r\n```\r\nfn partition(input: &mut Vec<i32>, start: usize, len: usize) -> usize {\r\n    //use first element as pivot\r\n    let pivot= input[start];\r\n\r\n    //low index points to partitioned section\r\n    let mut index_l = start + 1;\r\n    for index in start + 1..len {\r\n        //if element is lower than pivot, swap\r\n        if input[index] < pivot {\r\n            let temp = input[index];\r\n            input[index] = input[index_l];\r\n            input[index_l] = temp;\r\n            index_l += 1;\r\n        }\r\n    }\r\n    //swap pivot to correct position\r\n    input[start] = input[index_l - 1];\r\n    input[index_l - 1] = pivot;\r\n\r\n    index_l - 1\r\n}\r\n\r\npub fn quick_sort(input: &mut Vec<i32>, start: usize, len: usize) {\r\n    if start < len {\r\n        //get pivot position\r\n        let pivot_position = partition(input, start, len);\r\n        //sorting lower section\r\n        quick_sort(input, start, pivot_position);\r\n        //sorting higher section\r\n        quick_sort(input, pivot_position + 1, len);\r\n\r\n    }\r\n} \r\n```\r\n\r\nwill take an average of  9.6085 us to run:\r\n\r\n> quick_sort/2            time:   [9.4894 us 9.6085 us 9.7560 us]                          \r\nFound 18 outliers among 100 measurements (18.00%)\r\n  8 (8.00%) high mild\r\n  10 (10.00%) high severe\r\n\r\n\r\nI am aware that trying to sort sorted Vec instead of unsorted Vec will make a huge difference in favor of timsort. Is this the reason why timsort is preferred? Also, to my surprise, rust merge_sort uses unsafe internally.\r\n\r\n\r\n\r\n\r\n\r\n[quicksort.rs.txt](https://github.com/rust-lang/rust/files/8762626/quicksort.rs.txt)\r\n\r\n", "closed_by": {"login": "mmajass", "id": 14048690, "node_id": "MDQ6VXNlcjE0MDQ4Njkw", "avatar_url": "https://avatars.githubusercontent.com/u/14048690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmajass", "html_url": "https://github.com/mmajass", "followers_url": "https://api.github.com/users/mmajass/followers", "following_url": "https://api.github.com/users/mmajass/following{/other_user}", "gists_url": "https://api.github.com/users/mmajass/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmajass/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmajass/subscriptions", "organizations_url": "https://api.github.com/users/mmajass/orgs", "repos_url": "https://api.github.com/users/mmajass/repos", "events_url": "https://api.github.com/users/mmajass/events{/privacy}", "received_events_url": "https://api.github.com/users/mmajass/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97353/timeline", "performed_via_github_app": null, "state_reason": "completed"}