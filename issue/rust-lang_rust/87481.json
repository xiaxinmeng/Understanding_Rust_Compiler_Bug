{"url": "https://api.github.com/repos/rust-lang/rust/issues/87481", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87481/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87481/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87481/events", "html_url": "https://github.com/rust-lang/rust/issues/87481", "id": 952943083, "node_id": "MDU6SXNzdWU5NTI5NDMwODM=", "number": 87481, "title": "short backtraces do not always work on Windows without debug info", "user": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 266005765, "node_id": "MDU6TGFiZWwyNjYwMDU3NjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-msvc", "name": "O-windows-msvc", "color": "6e6ec0", "default": false, "description": "Toolchain: MSVC, Operating system: Windows"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2021-07-26T14:05:59Z", "updated_at": "2021-07-27T17:32:32Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Ever since #75048, `RUST_BACKTRACE=1` does not show a backtrace in some situations when compiling with x86_64-pc-windows-msvc.  Some examples:\r\n\r\n## Basic main\r\n\r\n```rust\r\nfn main() {\r\n    panic!(\"test\");\r\n}\r\n```\r\n\r\n`RUST_BACKTRACE=1 cargo run --release`\r\n\r\nOn windows shows:\r\n\r\n```\r\nthread 'main' panicked at 'test', src\\main.rs:2:5\r\nstack backtrace:\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nOn other platforms, this shows:\r\n\r\n```\r\nthread 'main' panicked at 'test', src/main.rs:2:5\r\nstack backtrace:\r\n   0: std::panicking::begin_panic\r\n   1: foo::main\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nHm, OK, maybe there's just something weird about `main` on Windows, let's panic from some function:\r\n\r\n```rust\r\nfn main() {\r\n    abc();\r\n}\r\n\r\n#[inline(never)]\r\nfn abc() {\r\n    panic!(\"test\");\r\n}\r\n```\r\n\r\nExact same results.  I wonder what `RUST_BACKTRACE=full` shows:\r\n\r\n```\r\nthread 'main' panicked at 'foo', src\\main.rs:7:5\r\nstack backtrace:\r\n   0:     0x7ff732d4681e - std::backtrace_rs::backtrace::dbghelp::trace\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\..\\..\\backtrace\\src\\backtrace\\dbghelp.rs:98\r\n   1:     0x7ff732d4681e - std::backtrace_rs::backtrace::trace_unsynchronized\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\..\\..\\backtrace\\src\\backtrace\\mod.rs:66\r\n   2:     0x7ff732d4681e - std::sys_common::backtrace::_print_fmt\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\sys_common\\backtrace.rs:67\r\n   3:     0x7ff732d4681e - std::sys_common::backtrace::_print::{{impl}}::fmt\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\sys_common\\backtrace.rs:46\r\n   4:     0x7ff732d5390c - core::fmt::write\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\core\\src\\fmt\\mod.rs:1094\r\n   5:     0x7ff732d44dd8 - std::io::Write::write_fmt<std::sys::windows::stdio::Stderr>\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\io\\mod.rs:1584\r\n   6:     0x7ff732d48ea2 - std::sys_common::backtrace::_print\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\sys_common\\backtrace.rs:49\r\n   7:     0x7ff732d48ea2 - std::sys_common::backtrace::print\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\sys_common\\backtrace.rs:36\r\n   8:     0x7ff732d48ea2 - std::panicking::default_hook::{{closure}}\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panicking.rs:208\r\n   9:     0x7ff732d48983 - std::panicking::default_hook\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panicking.rs:225\r\n  10:     0x7ff732d49543 - std::panicking::rust_panic_with_hook\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panicking.rs:591\r\n  11:     0x7ff732d41124 - std::sys_common::backtrace::__rust_begin_short_backtrace::he53d89a2ce3594a8\r\n  12:     0x7ff732d410df - std::sys_common::backtrace::__rust_end_short_backtrace::h5e068a7cabcc7307\r\n  13:     0x7ff732d579fd - std::panicking::begin_panic::h790bdae65623f4e6\r\n  14:     0x7ff732d4115c - std::sys_common::backtrace::__rust_begin_short_backtrace::he53d89a2ce3594a8\r\n  15:     0x7ff732d41139 - std::sys_common::backtrace::__rust_begin_short_backtrace::he53d89a2ce3594a8\r\n  16:     0x7ff732d410f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::he53d89a2ce3594a8\r\n  17:     0x7ff732d4100c - std::rt::lang_start::{{closure}}::h27aee23826ad69ca\r\n  18:     0x7ff732d496e7 - core::ops::function::impls::{{impl}}::call_once\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\library\\core\\src\\ops\\function.rs:280\r\n  19:     0x7ff732d496e7 - std::panicking::try::do_call\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panicking.rs:379\r\n  20:     0x7ff732d496e7 - std::panicking::try\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panicking.rs:343\r\n  21:     0x7ff732d496e7 - std::panic::catch_unwind\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panic.rs:431\r\n  22:     0x7ff732d496e7 - std::rt::lang_start_internal\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\rt.rs:34\r\n  23:     0x7ff732d41187 - main\r\n  24:     0x7ff732d56f08 - invoke_main\r\n                               at d:\\A01\\_work\\6\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl:78\r\n  25:     0x7ff732d56f08 - __scrt_common_main_seh\r\n                               at d:\\A01\\_work\\6\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl:288\r\n  26:     0x7ffdb4837034 - BaseThreadInitThunk\r\n  27:     0x7ffdb4c82651 - RtlUserThreadStart\r\n```\r\n\r\nThere's a lot of weird `__rust_begin_short_backtrace` frames in there, and no sign of my `abc` function.  Running with debuginfo:\r\n\r\n`CARGO_PROFILE_RELEASE_DEBUG=1 RUST_BACKTRACE=1 cargo run --release`\r\n\r\n```\r\nthread 'main' panicked at 'foo', src\\main.rs:7:5\r\nstack backtrace:\r\n   0:     0x7ff6b37067fe - std::backtrace_rs::backtrace::dbghelp::trace\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\..\\..\\backtrace\\src\\backtrace\\dbghelp.rs:98\r\n   1:     0x7ff6b37067fe - std::backtrace_rs::backtrace::trace_unsynchronized\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\..\\..\\backtrace\\src\\backtrace\\mod.rs:66\r\n   2:     0x7ff6b37067fe - std::sys_common::backtrace::_print_fmt\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\sys_common\\backtrace.rs:67\r\n   3:     0x7ff6b37067fe - std::sys_common::backtrace::_print::{{impl}}::fmt\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\sys_common\\backtrace.rs:46\r\n   4:     0x7ff6b37138ec - core::fmt::write\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\core\\src\\fmt\\mod.rs:1094\r\n   5:     0x7ff6b3704db8 - std::io::Write::write_fmt<std::sys::windows::stdio::Stderr>\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\io\\mod.rs:1584\r\n   6:     0x7ff6b3708e82 - std::sys_common::backtrace::_print\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\sys_common\\backtrace.rs:49\r\n   7:     0x7ff6b3708e82 - std::sys_common::backtrace::print\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\sys_common\\backtrace.rs:36\r\n   8:     0x7ff6b3708e82 - std::panicking::default_hook::{{closure}}\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panicking.rs:208\r\n   9:     0x7ff6b3708963 - std::panicking::default_hook\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panicking.rs:225\r\n  10:     0x7ff6b3709523 - std::panicking::rust_panic_with_hook\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panicking.rs:591\r\n  11:     0x7ff6b3701094 - std::panicking::begin_panic::{{closure}}<str>\r\n                               at C:\\Users\\eric\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\std\\src\\panicking.rs:520\r\n  12:     0x7ff6b370104f - std::sys_common::backtrace::__rust_end_short_backtrace<closure-0,!>\r\n                               at C:\\Users\\eric\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\std\\src\\sys_common\\backtrace.rs:\r\n141\r\n  13:     0x7ff6b37179dd - std::panicking::begin_panic<str>\r\n                               at C:\\Users\\eric\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\std\\src\\panicking.rs:519\r\n  14:     0x7ff6b37010dc - z2::abc\r\n                               at D:\\Temp\\z2\\src\\main.rs:7\r\n  15:     0x7ff6b37010b9 - z2::main\r\n                               at D:\\Temp\\z2\\src\\main.rs:2\r\n  16:     0x7ff6b3701066 - core::ops::function::FnOnce::call_once\r\n                               at C:\\Users\\eric\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\core\\src\\ops\\function.rs:227\r\n  17:     0x7ff6b3701066 - std::sys_common::backtrace::__rust_begin_short_backtrace<fn(),tuple<>>\r\n                               at C:\\Users\\eric\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\std\\src\\sys_common\\backtrace.rs:\r\n125\r\n  18:     0x7ff6b370100c - std::rt::lang_start::{{closure}}<tuple<>>\r\n                               at C:\\Users\\eric\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\std\\src\\rt.rs:49\r\n  19:     0x7ff6b37096c7 - core::ops::function::impls::{{impl}}::call_once\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\library\\core\\src\\ops\\function.rs:280\r\n  20:     0x7ff6b37096c7 - std::panicking::try::do_call\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panicking.rs:379\r\n  21:     0x7ff6b37096c7 - std::panicking::try\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panicking.rs:343\r\n  22:     0x7ff6b37096c7 - std::panic::catch_unwind\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\panic.rs:431\r\n  23:     0x7ff6b37096c7 - std::rt::lang_start_internal\r\n                               at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\\/library\\std\\src\\rt.rs:34\r\n  24:     0x7ff6b3701107 - main\r\n  25:     0x7ff6b3716ee8 - invoke_main\r\n                               at d:\\A01\\_work\\6\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl:78\r\n  26:     0x7ff6b3716ee8 - __scrt_common_main_seh\r\n                               at d:\\A01\\_work\\6\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl:288\r\n  27:     0x7ffdb4837034 - BaseThreadInitThunk\r\n  28:     0x7ffdb4c82651 - RtlUserThreadStart\r\n```\r\n\r\nWell at least with debuginfo the frames look much more reasonable.\r\n\r\n## rustc treat-err-as-bug\r\n\r\nTrying to get a backtrace from rustc:\r\n\r\n```rust\r\n// Some bogus code to trigger a compiler error.\r\nabc\r\n```\r\n\r\n`RUSTFLAGS=\"-Ztreat-err-as-bug\" RUST_BACKTRACE=1 cargo build`\r\n\r\nresults in:\r\n\r\n```\r\nthread 'rustc' panicked at 'aborting due to `-Z treat-err-as-bug=1`', compiler\\rustc_errors\\src\\lib.rs:1038:27\r\nstack backtrace:\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nHmm, no frames at all.  Here's what `full` looks like:\r\n\r\n```\r\nthread 'rustc' panicked at 'aborting due to `-Z treat-err-as-bug=1`', compiler\\rustc_errors\\src\\lib.rs:1038:27\r\nstack backtrace:\r\n   0:     0x7ffd571c73cf - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h6ba2a9241bb86732\r\n   1:     0x7ffd571eff7a - core::fmt::write::ha9fdc24e2055a123\r\n   2:     0x7ffd571ba948 - <std::io::IoSlice as core::fmt::Debug>::fmt::h2f7de836a9fea840\r\n   3:     0x7ffd571cb106 - std::panicking::take_hook::h880a3a97a8692ac2\r\n   4:     0x7ffd571cabe9 - std::panicking::take_hook::h880a3a97a8692ac2\r\n   5:     0x7ffd193546d5 - <sha2::sha512::Sha512Trunc224 as std::io::Write>::flush::hee6b95fd494feb4c\r\n   6:     0x7ffd571cba00 - std::panicking::rust_panic_with_hook::hf71bb7c83433b29f\r\n   7:     0x7ffd1d5adc04 - <rustc_errors::lock::acquire_global_lock::Guard as core::ops::drop::Drop>::drop::h4f8f15aa7cec4dfd\r\n   8:     0x7ffd1d5adb9f - <rustc_errors::lock::acquire_global_lock::Guard as core::ops::drop::Drop>::drop::h4f8f15aa7cec4dfd\r\n   9:     0x7ffd1d86afbd - rustc_query_system::query::job::report_cycle::h6ad95b2abe0c2755\r\n  10:     0x7ffd1d5e2d97 - rustc_errors::HandlerInner::emit_diagnostic::heb8a31dc5e552518\r\n  11:     0x7ffd1d5a6d9d - rustc_errors::diagnostic_builder::DiagnosticBuilder::emit::he0557bac758754fe\r\n  12:     0x7ffd1948b8c5 - rustc_interface::queries::Queries::parse::h62446bebd0215358\r\n  13:     0x7ffd193a9fe1 - <rustc_middle::ty::SymbolName as core::fmt::Debug>::fmt::h1888c009faa2f58c\r\n  14:     0x7ffd1937234d - rustc_driver::pretty::print_after_hir_lowering::h982e6ec8534626ef\r\n  15:     0x7ffd193ac7e9 - <rustc_middle::ty::SymbolName as core::fmt::Debug>::fmt::h1888c009faa2f58c\r\n  16:     0x7ffd1937c9ba - <rustc_middle::ty::SymbolName as core::fmt::Debug>::fmt::h1888c009faa2f58c\r\n  17:     0x7ffd19372f5f - rustc_driver::pretty::print_after_hir_lowering::h982e6ec8534626ef\r\n  18:     0x7ffd193d0f9d - <rustc_driver::args::Error as core::fmt::Debug>::fmt::hac2312e292f84c23\r\n  19:     0x7ffd571d92dc - std::sys::windows::thread::Thread::new::hd7a080f67ca1d43d\r\n  20:     0x7ffdb4837034 - BaseThreadInitThunk\r\n  21:     0x7ffdb4c82651 - RtlUserThreadStart\r\n```\r\n\r\nNotice the complete absence of `__rust_begin_short_backtrace`.\r\n\r\n## Larger example\r\n\r\nWhat's strange is that it works sometimes. I figured I'd try a larger example. I put a panic inside cargo itself, and got this:\r\n\r\n```\r\nthread 'main' panicked at 'test', src/cargo\\ops\\cargo_compile.rs:861:5\r\nstack backtrace:\r\n   0: std::panicking::begin_panic\r\n   1: cargo::ops::cargo_compile::create_bcx\r\n   2: cargo::ops::cargo_compile::compile_ws\r\n   3: cargo::ops::cargo_compile::compile\r\n   4: cargo::commands::check::exec\r\n   5: cargo::cli::main\r\n   6: cargo::commands::owner::exec\r\n```\r\n\r\nWell that's weird!  The short backtrace seems to work fine there.\r\n\r\n## Expected behavior\r\n\r\nIn general, I would expect it to work like it does on other platforms.\r\n\r\n## Meta\r\n\r\nThe short backtraces start with nightly-2020-08-09.  In versions prior to that, RUST_BACKTRACE=1 just shows the full backtrace (with all the \"noisy\" frames).  Tested up to nightly-2021-07-26.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87481/timeline", "performed_via_github_app": null, "state_reason": null}