{"url": "https://api.github.com/repos/rust-lang/rust/issues/52393", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52393/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52393/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52393/events", "html_url": "https://github.com/rust-lang/rust/issues/52393", "id": 341282328, "node_id": "MDU6SXNzdWUzNDEyODIzMjg=", "number": 52393, "title": "Custom derive: can't use const as attribute value", "user": {"login": "srijs", "id": 2677165, "node_id": "MDQ6VXNlcjI2NzcxNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2677165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srijs", "html_url": "https://github.com/srijs", "followers_url": "https://api.github.com/users/srijs/followers", "following_url": "https://api.github.com/users/srijs/following{/other_user}", "gists_url": "https://api.github.com/users/srijs/gists{/gist_id}", "starred_url": "https://api.github.com/users/srijs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srijs/subscriptions", "organizations_url": "https://api.github.com/users/srijs/orgs", "repos_url": "https://api.github.com/users/srijs/repos", "events_url": "https://api.github.com/users/srijs/events{/privacy}", "received_events_url": "https://api.github.com/users/srijs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234948, "node_id": "MDU6TGFiZWwyMzQ5NDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-attributes", "name": "A-attributes", "color": "f7e101", "default": false, "description": "Area: #[attributes(..)]"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-15T00:55:46Z", "updated_at": "2022-06-30T21:45:48Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using serde to implement deserialization for a custom protocol. To keep the code dry, I've pulled all relevant strings into constants, but that creates a problem when trying to use the constants as attributes values in serde's derive macro.\r\n\r\nHere's a playground with a minimal example to reproduce the problem: http://play.rust-lang.org/?gist=47230ae9671b24b312bef9540e520ddf&version=stable&mode=debug&edition=2015\r\n\r\nThe check that seems to produce the error is part of `libsyntax`: https://github.com/rust-lang/rust/blob/0db03e635a5e38ebc7635637b870b8fbcc8a7e46/src/libsyntax/parse/attr.rs#L261-L263\r\n\r\nWith my very basic knowledge of the rust compiler, I can see two potential ways this could be made possible:\r\n\r\n1) Run derive macros after the constants have been expanded. This would be transparent to the macros (they could treat the expanded constants as literals), however this might be a no-go due to the way that the passes are ordered within rustc?\r\n\r\n2) Relax the check in `libsyntax` (and possibly other places) to allow for identifiers to be valid attribute values on the syntax level, so that custom derive macros could use the identifier as part of their code gen (this wouldn't work for all macros, but at least for serde it looks like it'd be good enough).\r\n\r\nIf possible, could you give an indication as to whether this is something that you'd like in the compiler (in which case I'd be interested in working on a PR or RFC for it), or whether you think this is either impossible or undesirable for any reason?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52393/reactions", "total_count": 31, "+1": 31, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52393/timeline", "performed_via_github_app": null, "state_reason": null}