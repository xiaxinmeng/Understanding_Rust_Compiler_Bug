{"url": "https://api.github.com/repos/rust-lang/rust/issues/83517", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83517/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83517/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83517/events", "html_url": "https://github.com/rust-lang/rust/issues/83517", "id": 842117773, "node_id": "MDU6SXNzdWU4NDIxMTc3NzM=", "number": 83517, "title": "Riscv64gc-unknown-none-elf target with ilp64d ABI does not handle variadic float point arguments", "user": {"login": "DieracDelta", "id": 13730968, "node_id": "MDQ6VXNlcjEzNzMwOTY4", "avatar_url": "https://avatars.githubusercontent.com/u/13730968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DieracDelta", "html_url": "https://github.com/DieracDelta", "followers_url": "https://api.github.com/users/DieracDelta/followers", "following_url": "https://api.github.com/users/DieracDelta/following{/other_user}", "gists_url": "https://api.github.com/users/DieracDelta/gists{/gist_id}", "starred_url": "https://api.github.com/users/DieracDelta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DieracDelta/subscriptions", "organizations_url": "https://api.github.com/users/DieracDelta/orgs", "repos_url": "https://api.github.com/users/DieracDelta/repos", "events_url": "https://api.github.com/users/DieracDelta/events{/privacy}", "received_events_url": "https://api.github.com/users/DieracDelta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1210355734, "node_id": "MDU6TGFiZWwxMjEwMzU1NzM0", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-riscv", "name": "O-riscv", "color": "6e6ec0", "default": false, "description": "Target: RISC-V architecture"}, {"id": 2139259423, "node_id": "MDU6TGFiZWwyMTM5MjU5NDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-floating-point", "name": "A-floating-point", "color": "f7e101", "default": false, "description": "Area: Floating point numbers and arithmetic"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-03-26T16:20:04Z", "updated_at": "2021-03-27T15:09:01Z", "closed_at": "2021-03-27T15:09:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've got a rust library that links to a c library. The c library has one function that is variadic in its arguments.\r\n\r\nI use the rust FFI to indicate that this function exists:\r\n\r\n```rust\r\n#[no_mangle]\r\nextern \"C\" {\r\n    fn example_fn(a: i8, ...) -> f64;\r\n}\r\n```\r\n\r\nWhen I call this function from the panic handler with two arguments: \r\n\r\n```rust\r\n#[panic_handler]\r\nfn my_panic(_info: &core::panic::PanicInfo) -> ! {\r\n        let a: f64 = 9.876543;\r\n        loop {\r\n            unsafe {\r\n                example_fn(5, a);\r\n            }\r\n        }\r\n}\r\n```\r\n\r\nI expect the second argument (as it is a float) to be loaded into a floating point register before calling `example_fn`. This is not what happens based on the objdump (`objdump -Sd $lib.a`):\r\n\r\n```\r\n#[panic_handler]                                                                                                                                              \r\nfn my_panic(_info: &core::panic::PanicInfo) -> ! {                                                                                                            \r\n   0:   7179                    addi    sp,sp,-48                                                                                                             \r\n   2:   f406                    sd      ra,40(sp)                                                                                                             \r\n   4:   e42a                    sd      a0,8(sp)                                                                                                              \r\n   6:   01009537                lui     a0,0x1009                                                                                                             \r\n   a:   f035051b                addiw   a0,a0,-253                                                                                                            \r\n   e:   0536                    slli    a0,a0,0xd                                                                                                             \r\n  10:   51f50513                addi    a0,a0,1311 # 100951f <rust_begin_unwind+0x100951f>                                                                    \r\n  14:   0536                    slli    a0,a0,0xd                                                                                                             \r\n  16:   7d150513                addi    a0,a0,2001                                                                                                            \r\n  1a:   0532                    slli    a0,a0,0xc                                                                                                             \r\n  1c:   35150513                addi    a0,a0,849                                                                                                             \r\n        let a: f64 = 9.876543;                                                                                                                                \r\n  20:   e82a                    sd      a0,16(sp)                                                                                                             \r\n        loop {                                                                                                                                                \r\n  22:   a009                    j       24 <rust_begin_unwind+0x24>                                                                                           \r\n  24:   01009537                lui     a0,0x1009                                                                                                             \r\n  28:   f035051b                addiw   a0,a0,-253                                                                                                            \r\n  2c:   0536                    slli    a0,a0,0xd                                                                                                             \r\n  2e:   51f50513                addi    a0,a0,1311 # 100951f <rust_begin_unwind+0x100951f>                                                                    \r\n  32:   0536                    slli    a0,a0,0xd                                                                                                             \r\n  34:   7d150513                addi    a0,a0,2001                                                                                                            \r\n  38:   0532                    slli    a0,a0,0xc                                                                                                             \r\n  3a:   35150593                addi    a1,a0,849                                                                                                             \r\n  3e:   4515                    li      a0,5                                                                                                                  \r\n            unsafe {                                                                                                                                          \r\n                example_fn(5, a);                                                                                                                             \r\n  40:   00000097                auipc   ra,0x0                                                                                                                \r\n  44:   000080e7                jalr    ra # 40 <rust_begin_unwind+0x40>                                                                                      \r\n  48:   b02a                    fsd     fa0,32(sp)                                                                                                            \r\n  4a:   7502                    ld      a0,32(sp)                                                                                                             \r\n  4c:   ec2a                    sd      a0,24(sp)                                                                                                             \r\n  4e:   a009                    j       50 <rust_begin_unwind+0x50>                                                                                           \r\n        loop {                                                                                                                                                \r\n  50:   bfd1                    j       24 <rust_begin_unwind+0x24>       \r\n```\r\n\r\nTo the best of my knowledge the assembly is not loading arguments into floating point registers before calling `example_fn`. The key points of interest:\r\n- line 20: sd a0,16(sp); stores the float at 16 + sp.\r\n- line 3a (and couple preceding lines):  Recalculates the float and stores it in a1. This is the incorrect spot. I believe this should be stored in fa0, since it is floating point.\r\n- line 3e: loads in 5 to a0.\r\n- lines 40,44: makes function call.\r\n\r\nI believe that this is happening because floating point computations are not handled when variadic arguments are used, as seen [here](https://github.com/rust-lang/rust/blob/e423058751a2b098d3e469a8e6df1b7a8bbd67b6/compiler/rustc_target/src/abi/call/riscv.rs#L218). Unfortunately I don't know enough about rustc to understand what the logic should look like when the arguments are variadic. Guidance would be appreciated.\r\n\r\n### Meta\r\nI'm on rust nightly head. Example repo demonstrating the problem is [here](https://github.com/DieracDelta/riscvgcABI/).\r\n\r\n", "closed_by": {"login": "DieracDelta", "id": 13730968, "node_id": "MDQ6VXNlcjEzNzMwOTY4", "avatar_url": "https://avatars.githubusercontent.com/u/13730968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DieracDelta", "html_url": "https://github.com/DieracDelta", "followers_url": "https://api.github.com/users/DieracDelta/followers", "following_url": "https://api.github.com/users/DieracDelta/following{/other_user}", "gists_url": "https://api.github.com/users/DieracDelta/gists{/gist_id}", "starred_url": "https://api.github.com/users/DieracDelta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DieracDelta/subscriptions", "organizations_url": "https://api.github.com/users/DieracDelta/orgs", "repos_url": "https://api.github.com/users/DieracDelta/repos", "events_url": "https://api.github.com/users/DieracDelta/events{/privacy}", "received_events_url": "https://api.github.com/users/DieracDelta/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83517/timeline", "performed_via_github_app": null, "state_reason": "completed"}