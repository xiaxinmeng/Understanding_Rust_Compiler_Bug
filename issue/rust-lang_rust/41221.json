{"url": "https://api.github.com/repos/rust-lang/rust/issues/41221", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41221/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41221/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41221/events", "html_url": "https://github.com/rust-lang/rust/issues/41221", "id": 221012049, "node_id": "MDU6SXNzdWUyMjEwMTIwNDk=", "number": 41221, "title": "Inconsistency in trait item resolution between `Box<Trait>` and `impl Trait`", "user": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-04-11T16:40:53Z", "updated_at": "2023-04-05T17:33:39Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider this example:\r\n```rust\r\n#![feature(conservative_impl_trait)]\r\n\r\n// use m::Tr;\r\n\r\nmod m {\r\n    pub trait Tr {\r\n        fn method(&self) {}\r\n    }\r\n    impl Tr for u8 {}\r\n    \r\n    pub fn dynamic_tr() -> Box<Tr> { Box::new(0) }\r\n    pub fn static_tr() -> impl Tr { 0u8 }\r\n}\r\n\r\nfn main() {\r\n    m::dynamic_tr().method(); // OK\r\n    m::static_tr().method(); // ERROR: no method named `method` found for type `impl m::Tr` in the current scope\r\n}\r\n```\r\n\r\nHere we are trying to call methods of traits that are not in scope.\r\nTypically such methods are not resolved, but there's an exception - trait objects.\r\nTrait objects are magic - when you call a method of `Trait` on a value of type `Trait` then `Trait` is automatically considered in scope (or maybe this method is treated as inherent, I haven't looked how exactly the implementation works). This is the reason why `m::dynamic_tr().method()` works. Even if this is a special case, it's a reasonable special case - if you have a value of type `Trait` in hands, you typically want to call some trait methods on it and it would be a nuisance to require `Trait` imported in scope for this.\r\nI don't know what RFC or PR introduced these exact rules, but the fact is that they are used in practice.\r\n\r\nAll the logic above is applicable to `impl Trait`, but this special case doesn't apply to it and `m::static_tr().method()` reports an \"unresolved method\" error.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41221/timeline", "performed_via_github_app": null, "state_reason": null}