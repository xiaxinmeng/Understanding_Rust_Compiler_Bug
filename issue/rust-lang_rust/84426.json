{"url": "https://api.github.com/repos/rust-lang/rust/issues/84426", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84426/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84426/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84426/events", "html_url": "https://github.com/rust-lang/rust/issues/84426", "id": 864714860, "node_id": "MDU6SXNzdWU4NjQ3MTQ4NjA=", "number": 84426, "title": "Inefficient array initialization when moving data into an Option", "user": {"login": "jordens", "id": 1338946, "node_id": "MDQ6VXNlcjEzMzg5NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1338946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jordens", "html_url": "https://github.com/jordens", "followers_url": "https://api.github.com/users/jordens/followers", "following_url": "https://api.github.com/users/jordens/following{/other_user}", "gists_url": "https://api.github.com/users/jordens/gists{/gist_id}", "starred_url": "https://api.github.com/users/jordens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jordens/subscriptions", "organizations_url": "https://api.github.com/users/jordens/orgs", "repos_url": "https://api.github.com/users/jordens/repos", "events_url": "https://api.github.com/users/jordens/events{/privacy}", "received_events_url": "https://api.github.com/users/jordens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-04-22T09:00:43Z", "updated_at": "2023-03-07T05:33:19Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\n#![no_std]\r\n\r\nfn edit(d: &mut [u8]) {\r\n    d[40] = 1;\r\n    d[80] = 1;\r\n    d[120] = 1;\r\n    d[160] = 1;\r\n}\r\n\r\n// Returning the array is fine\r\npub fn array_good() -> [u8; 200] {\r\n    let mut d = [0u8; 200];\r\n    edit(&mut d);\r\n    d\r\n}\r\n\r\n// Setting the bytes within the option is also fine\r\npub fn option_good() -> Option<[u8; 200]> {\r\n    let mut o = Some([0u8; 200]);\r\n    if let Some(ref mut d) = o {\r\n        edit(d);\r\n    }\r\n    o\r\n}\r\n\r\n// When returning an initialized array in an Option,\r\n// the initialization gets split into multiple separate memset/memclr calls,\r\n// just to optimize away a few redundant byte clears.\r\npub fn option_bad() -> Option<[u8; 200]> {\r\n    Some(array_good())\r\n}\r\n```\r\n\r\nOn godbolt: https://godbolt.org/z/e8z3ornos\r\n\r\nI expected to see this happen: In all three cases I expect roughly similar code with a single call to `memclr` followed by four stores.\r\n\r\nInstead, this happened: The first implementation splits the initialization into five different calls to `memclr`. This is unnecessary and inefficient.\r\n\r\n```asm\r\nexample::array_good:\r\n        push    {r4, r6, r7, lr}\r\n        add     r7, sp, #8\r\n        movs    r1, #200\r\n        mov     r4, r0\r\n        bl      __aeabi_memclr\r\n        movs    r0, #1\r\n        strb.w  r0, [r4, #160]\r\n        strb.w  r0, [r4, #120]\r\n        strb.w  r0, [r4, #80]\r\n        strb.w  r0, [r4, #40]\r\n        pop     {r4, r6, r7, pc}\r\n\r\nexample::option_good:\r\n        push    {r4, r6, r7, lr}\r\n        add     r7, sp, #8\r\n        mov     r4, r0\r\n        adds    r0, #1\r\n        movs    r1, #200\r\n        bl      __aeabi_memclr\r\n        movs    r0, #1\r\n        strb.w  r0, [r4, #161]\r\n        strb.w  r0, [r4, #121]\r\n        strb.w  r0, [r4, #81]\r\n        strb.w  r0, [r4, #41]\r\n        strb    r0, [r4]\r\n        pop     {r4, r6, r7, pc}\r\n\r\nexample::option_bad:\r\n        push    {r4, r6, r7, lr}\r\n        add     r7, sp, #8\r\n        mov     r4, r0\r\n        adds    r0, #1\r\n        movs    r1, #40\r\n        bl      __aeabi_memclr\r\n        add.w   r0, r4, #42\r\n        movs    r1, #39\r\n        bl      __aeabi_memclr\r\n        add.w   r0, r4, #82\r\n        movs    r1, #39\r\n        bl      __aeabi_memclr\r\n        add.w   r0, r4, #122\r\n        movs    r1, #39\r\n        bl      __aeabi_memclr\r\n        add.w   r0, r4, #162\r\n        movs    r1, #39\r\n        bl      __aeabi_memclr\r\n        movs    r0, #1\r\n        strb.w  r0, [r4, #161]\r\n        strb.w  r0, [r4, #121]\r\n        strb.w  r0, [r4, #81]\r\n        strb.w  r0, [r4, #41]\r\n        strb    r0, [r4]\r\n        pop     {r4, r6, r7, pc}\r\n```\r\n\r\nThe behavior is not target specific. The behavior is the same on x86, for larger arrays and initialized segments it will also call `memset`.\r\n\r\n`-C opt-level=1` doesn't inline and thus suppresses the issue.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.53.0-nightly (b84932674 2021-04-21)\r\n```\r\n\r\nThis behavior is present between 1.45.0 and current nightly. Before 1.45.0 all three implementations split the initialization.\r\n\r\nI noticed this when looking at https://github.com/rust-lang/rust/pull/83022#issuecomment-824167676", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84426/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84426/timeline", "performed_via_github_app": null, "state_reason": null}