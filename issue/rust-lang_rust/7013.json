{"url": "https://api.github.com/repos/rust-lang/rust/issues/7013", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/7013/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/7013/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/7013/events", "html_url": "https://github.com/rust-lang/rust/issues/7013", "id": 15303740, "node_id": "MDU6SXNzdWUxNTMwMzc0MA==", "number": 7013, "title": "Unsoundness: ~Trait is considered Const, but shouldn't be", "user": {"login": "bill-myers", "id": 4647491, "node_id": "MDQ6VXNlcjQ2NDc0OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4647491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bill-myers", "html_url": "https://github.com/bill-myers", "followers_url": "https://api.github.com/users/bill-myers/followers", "following_url": "https://api.github.com/users/bill-myers/following{/other_user}", "gists_url": "https://api.github.com/users/bill-myers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bill-myers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bill-myers/subscriptions", "organizations_url": "https://api.github.com/users/bill-myers/orgs", "repos_url": "https://api.github.com/users/bill-myers/repos", "events_url": "https://api.github.com/users/bill-myers/events{/privacy}", "received_events_url": "https://api.github.com/users/bill-myers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-06-08T11:24:20Z", "updated_at": "2013-08-22T04:41:30Z", "closed_at": "2013-08-22T04:41:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems that in Rust ~Trait are Const but that seems wrong, because the implementation of Trait can contain non-Const structs, such as those annotated \"mutable\", like RcMut.\n\nThis seems allows to create an RcMut pointing to itself, like this.\n\n``` rust\nextern mod std;\nuse std::rc::*;\n\ntrait Foo\n{\n    fn set(&mut self, v: RcMut<A>);\n}\n\nstruct B\n{\n    v: Option<RcMut<A>>\n}\n\nimpl Foo for B\n{\n    fn set(&mut self, v: RcMut<A>)\n    {\n        self.v = Some(v);\n    }\n}\n\nstruct A\n{\n    v: ~Foo,\n}\n\nfn main()\n{\n    let a = A {v: ~B{v: None} as ~Foo};\n    let v = rc_mut_from_const(a);\n    let w = v.clone();\n    v.with_mut_borrow(|p| {p.v.set(w.clone());})\n}\n```\n", "closed_by": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/7013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/7013/timeline", "performed_via_github_app": null, "state_reason": "completed"}