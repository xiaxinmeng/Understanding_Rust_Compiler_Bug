{"url": "https://api.github.com/repos/rust-lang/rust/issues/47980", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47980/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47980/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47980/events", "html_url": "https://github.com/rust-lang/rust/issues/47980", "id": 294103199, "node_id": "MDU6SXNzdWUyOTQxMDMxOTk=", "number": 47980, "title": "`const` function arguments for intrinstrics/simd", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-02-03T11:12:38Z", "updated_at": "2018-02-04T19:32:46Z", "closed_at": "2018-02-04T19:32:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "> Thist issue lifts https://github.com/rust-lang-nursery/stdsimd/issues/248 into rust-lang/rust\r\n\r\n## Problem \r\n\r\nMany intrinsics, in particular, many SIMD intrinsics, work only on immediate-mode registers. We can currently implement them in the compiler directly, handling constant function arguments in the implementation. \r\n\r\nThis doesn't allow users to easily build abstractions on top of these intrinsics because they can't do what the compiler can do. Abstractions can, however, be built (I show what the `stdsimd` crate does below).\r\n\r\nCurrently, for many intrinsics, we don't do this in the compiler, but in libraries, like the `stdsimd` crate (check out, for example, [_mm_i32gather_epi32](https://github.com/rust-lang-nursery/stdsimd/blob/ee046e0419e4d5e8f742b138313eeefd603326b5/coresimd/src/x86/i586/avx2.rs#L766)).\r\n\r\nIn the `stdsimd` crate, new contributors typically clash against our workarounds for dealing with these intrinsics pretty early on, often in their first pull-request (e.g. see https://github.com/rust-lang-nursery/stdsimd/pull/311). \r\n\r\nThe API of these intrinsics in the `stdsimd` crate uses run-time values\r\n\r\n```rust\r\nfn foo(x: u8, imm8: u8) { ... }\r\n```\r\n\r\nand then it uses `constify_xxx!` macros like [`constify_imm8!`](https://github.com/rust-lang-nursery/stdsimd/blob/master/coresimd/src/x86/macros.rs#L3)  to map these run-time values into compile-time constants:\r\n\r\n```rust\r\nfn foo(x: u8, imm8: u8) { \r\n    macro_rules! call {\r\n      ($imm8:expr) => (foo_intrinsic(x, $imm8))\r\n    }\r\n    constify_imm8!(imm8, call)\r\n}\r\n```\r\n\r\nThese `constify` macros just match against every possible run-time value, and call a function with a constant:\r\n\r\n```rust\r\nmacro_rules! constify_imm8 {\r\n    ($imm8:expr, $expand:ident) => {\r\n        #[allow(overflowing_literals)]\r\n        match ($imm8) & 0b1111_1111 {\r\n            0 => $expand!(0),\r\n            1 => $expand!(1),\r\n            2 => $expand!(2),\r\n            ...\r\n           254 => $expand!(254),\r\n            _ => $expand!(255),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe status quo does not scale, neither for those wanting to write higher-level wrappers over the `stdsimd` crate, nor for some of the intrinsics that require huge match arms (e.g. `bextri` is currently disabled because `constify_imm16!` makes the compile-times of the `stdsimd` crate explode from 1-3 minutes to ~30 minutes).\r\n\r\n# Ideal solution\r\n\r\nI would like to be able to specify that a function argument must be const:\r\n\r\n```rust\r\n/// This function takes a run-time argument `x` \r\n/// and a constant argument `y`.\r\nfn foo(x: u8, const y: u8) { ... }\r\n```\r\n\r\nThis is what the Intel spec tries to specify when it uses `const int`. It fails because in C `const` does not mean the same thing as in Rust, but this makes it an opportunity: Rust could follow the C spec better than C does.\r\n\r\n# Alternatives\r\n\r\nWe could just implement these intrinsics in rustc. There are [many many](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=const%252520int&expand=263,225,225,226,234) of them, but this can be done. Rustc actually already does this for many intrinsics, and errors of arguments not being constants are already reported. \r\n\r\nThe main issues I see with this is that \r\n\r\n* users can't do this in their own libraries\r\n* the function types do not express that the arguments must be constants which is confusing for users going through the documentation (this is mitigated by good compiler errors though)\r\n\r\nMoving these intrinsics into the compiler would allow us to stabilize simd without having to wait for `const` function arguments or equivalent language features.", "closed_by": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47980/timeline", "performed_via_github_app": null, "state_reason": "completed"}