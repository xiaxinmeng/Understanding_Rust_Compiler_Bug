{"url": "https://api.github.com/repos/rust-lang/rust/issues/80306", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80306/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80306/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80306/events", "html_url": "https://github.com/rust-lang/rust/issues/80306", "id": 773254849, "node_id": "MDU6SXNzdWU3NzMyNTQ4NDk=", "number": 80306, "title": "Documentation of wrapping_add/-_sub/-_offset need clarification...", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-12-22T21:07:58Z", "updated_at": "2020-12-29T03:01:39Z", "closed_at": "2020-12-29T03:01:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "...about whether pointer arithmetic is allowed to - temporarily - leave the bounds of an object, then go back into bounds and afterwards dereference the pointer.\r\n\r\nThe question is if code like this:\r\n```rust\r\nfn foo(x: &u8) {\r\n    let mut x = x as *const u8;\r\n    x = x.wrapping_add(42);\r\n    x = x.wrapping_sub(42);\r\n    let _val = unsafe { *x };\r\n    // use _val\r\n}\r\n```\r\nis sound or unsound.\r\n\r\nThe current documentation says:\r\n> The resulting pointer does not need to be in bounds, but it is potentially hazardous to dereference (which requires `unsafe`).\r\n>\r\n> In particular, the resulting pointer remains attached to the same allocated object that `self` points to. It may not be used to access a different allocated object. Note that in Rust, every (stack-allocated) variable is considered a separate allocated object.\r\n>\r\n> Compared to `add` / `sub` / `offset`, this method basically delays the requirement of staying within the same allocated object: `add` / `sub` / `offset` is immediate Undefined Behavior when crossing object boundaries; `wrapping_add` / `wrapping_sub` / `wrapping_offset` produces a pointer but still leads to Undefined Behavior if that pointer is dereferenced. `add` / `sub` / `offset` can be optimized better and is thus preferable in performance-sensitive code.\r\n\r\nSo it specifies that the resulting pointer \u201cremains attached to the same allocated object that `self` points to\u201d, which suggests that after going back into bounds, dereferencing should be safe again.\r\n\r\nIt also says \u201cthis method basically delays the requirement of staying within the same allocated object; \u201d which sounds like, _staying_ within the same allocated object is still a requirement, which could be interpreted as that whenever any intermediate value did not stay within bounds, that intermediate value has some delayed violation of requirements attached to it that triggers UB once the final (back in bounds) pointer is dereferenced.\r\n\r\nThe following comparison, \u201c`add` / `sub` / `offset` is immediate Undefined Behavior when _crossing_ object boundaries; `wrapping_add` / `wrapping_sub` / `wrapping_offset` produces a pointer but still leads to Undefined Behavior if that pointer is dereferenced\u201d can easily be interpreted as confirming this interpretation, since object boundaries _are crossed_ (twice, first going out of the object, then going back in) and the pointer is dereference afterwards (right after the second crossing of object boundaries).\r\n\r\nAfter I was addressing this [on IRLO](https://internals.rust-lang.org/t/pointers-are-complicated-ii-or-we-need-better-language-specs/13562/29?u=steffahn), @RalfJung gave the answer\r\n> It is explicitly intended to be allowed to leave the object and then go back inbounds. Looks like we need to clarify the docs.\r\n\r\n@rustbot modify labels: T-doc, T-libs, T-lang, C-enhancement\r\n_Feel free to remove a `T-` label if this doesn\u2019t seem relevant for that team._", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80306/timeline", "performed_via_github_app": null, "state_reason": "completed"}