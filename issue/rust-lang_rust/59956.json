{"url": "https://api.github.com/repos/rust-lang/rust/issues/59956", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59956/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59956/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59956/events", "html_url": "https://github.com/rust-lang/rust/issues/59956", "id": 432953740, "node_id": "MDU6SXNzdWU0MzI5NTM3NDA=", "number": 59956, "title": "ICE  Type parameter `I/#1` (I/1) out of range when substituting", "user": {"login": "DutchGhost", "id": 25501014, "node_id": "MDQ6VXNlcjI1NTAxMDE0", "avatar_url": "https://avatars.githubusercontent.com/u/25501014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DutchGhost", "html_url": "https://github.com/DutchGhost", "followers_url": "https://api.github.com/users/DutchGhost/followers", "following_url": "https://api.github.com/users/DutchGhost/following{/other_user}", "gists_url": "https://api.github.com/users/DutchGhost/gists{/gist_id}", "starred_url": "https://api.github.com/users/DutchGhost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DutchGhost/subscriptions", "organizations_url": "https://api.github.com/users/DutchGhost/orgs", "repos_url": "https://api.github.com/users/DutchGhost/repos", "events_url": "https://api.github.com/users/DutchGhost/events{/privacy}", "received_events_url": "https://api.github.com/users/DutchGhost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-14T09:56:29Z", "updated_at": "2019-10-14T16:11:22Z", "closed_at": "2019-10-14T16:11:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code ICE's on stable, beta and nightly, on both editions:\r\n```Rust\r\nuse std::marker::PhantomData;\r\n\r\nstruct Invariant<'id, I = Self> {\r\n    lifetime: PhantomData<*mut &'id I>,\r\n}\r\n\r\ntrait Contract<'s> {\r\n    type Item: for<'r> Contract<'r>;\r\n}\r\n\r\nimpl <'a, 'b> Contract<'b> for Invariant<'a> {\r\n    type Item = Invariant<'b>;\r\n}\r\n```\r\n\r\n<details>\r\n<summary>Backtrace:</summary>\r\n\r\n```\r\n\r\nerror: internal compiler error: src/librustc/ty/subst.rs:480: Type parameter `I/#1` (I/1) out of range when substituting (root type=Some(Invariant<'id, I>)) substs=[ReEarlyBound(0, 'a)]\r\n  --> src/lib.rs:11:32\r\n   |\r\n11 | impl <'a, 'b> Contract<'b> for Invariant<'a> {\r\n   |                                ^^^^^^^^^^^^^\r\n\r\nthread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:558:9\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39\r\n   1: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:70\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/sys_common/backtrace.rs:58\r\n             at src/libstd/panicking.rs:200\r\n   3: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:215\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:482\r\n   6: std::panicking::begin_panic\r\n   7: rustc_errors::Handler::span_bug\r\n   8: rustc::util::bug::opt_span_bug_fmt::{{closure}}\r\n   9: rustc::ty::context::tls::with_opt::{{closure}}\r\n  10: rustc::ty::context::tls::with_context_opt\r\n  11: rustc::ty::context::tls::with_opt\r\n  12: rustc::util::bug::opt_span_bug_fmt\r\n  13: rustc::util::bug::span_bug_fmt\r\n  14: <rustc::ty::subst::SubstFolder<'a, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  15: <smallvec::SmallVec<A> as core::iter::traits::collect::FromIterator<<A as smallvec::Array>::Item>>::from_iter\r\n  16: rustc::ty::fold::TypeFoldable::fold_with\r\n  17: rustc::ty::structural_impls::<impl rustc::ty::fold::TypeFoldable<'tcx> for &'tcx rustc::ty::TyS<'tcx>>::super_fold_with\r\n  18: <rustc::ty::subst::SubstFolder<'a, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  19: <(dyn rustc_typeck::astconv::AstConv<'gcx, 'tcx> + 'o)>::create_substs_for_ast_path::{{closure}}\r\n  20: <(dyn rustc_typeck::astconv::AstConv<'gcx, 'tcx> + 'o)>::create_substs_for_ast_path\r\n  21: rustc::hir::PathSegment::with_generic_args\r\n  22: <(dyn rustc_typeck::astconv::AstConv<'gcx, 'tcx> + 'o)>::ast_path_substs_for_ty\r\n  23: <(dyn rustc_typeck::astconv::AstConv<'gcx, 'tcx> + 'o)>::def_to_ty\r\n  24: <(dyn rustc_typeck::astconv::AstConv<'gcx, 'tcx> + 'o)>::ast_ty_to_ty\r\n  25: rustc_typeck::collect::type_of\r\n  26: rustc::ty::query::__query_compute::type_of\r\n  27: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::type_of<'tcx>>::compute\r\n  28: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  29: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  30: <rustc_typeck::collect::CollectItemTypesVisitor<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_item\r\n  31: rustc::hir::map::Map::visit_item_likes_in_module\r\n  32: rustc_typeck::collect::collect_mod_item_types\r\n  33: rustc::ty::query::__query_compute::collect_mod_item_types\r\n  34: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::collect_mod_item_types<'tcx>>::compute\r\n  35: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  36: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  37: rustc_typeck::collect::collect_item_types\r\n  38: rustc::util::common::time\r\n  39: rustc_typeck::check_crate\r\n  40: <std::thread::local::LocalKey<T>>::with\r\n  41: rustc::ty::context::TyCtxt::create_and_enter\r\n  42: rustc_driver::driver::compile_input\r\n  43: rustc_driver::run_compiler_with_pool\r\n  44: <scoped_tls::ScopedKey<T>>::set\r\n  45: rustc_driver::run_compiler\r\n  46: syntax::with_globals\r\n  47: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:87\r\n  48: <F as alloc::boxed::FnBox<A>>::call_box\r\n  49: std::sys::unix::thread::Thread::new::thread_start\r\n             at /rustc/91856ed52c58aa5ba66a015354d1cc69e9779bdf/src/liballoc/boxed.rs:759\r\n             at src/libstd/sys_common/thread.rs:14\r\n             at src/libstd/sys/unix/thread.rs:81\r\n  50: start_thread\r\n  51: __clone\r\nquery stack during panic:\r\nerror[E0391]: cycle detected when processing `<impl at src/lib.rs:11:1: 13:2>`\r\n  --> src/lib.rs:11:1\r\n   |\r\n11 | impl <'a, 'b> Contract<'b> for Invariant<'a> {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: ...which again requires processing `<impl at src/lib.rs:11:1: 13:2>`, completing the cycle\r\nnote: cycle used when collecting item types in top-level module\r\n  --> src/lib.rs:1:1\r\n   |\r\n1  | / use std::marker::PhantomData;\r\n2  | |\r\n3  | | struct Invariant<'id, I = Self> {\r\n4  | |     lifetime: PhantomData<*mut &'id I>,\r\n...  |\r\n12 | |     type Item = Invariant<'b>;\r\n13 | | }\r\n   | |_^\r\n\r\nerror[E0391]: cycle detected when processing `<impl at src/lib.rs:11:1: 13:2>`\r\n  --> src/lib.rs:11:1\r\n   |\r\n11 | impl <'a, 'b> Contract<'b> for Invariant<'a> {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: ...which requires processing `<impl at src/lib.rs:11:1: 13:2>`...\r\n  --> src/lib.rs:11:1\r\n   |\r\n11 | impl <'a, 'b> Contract<'b> for Invariant<'a> {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: ...which again requires processing `<impl at src/lib.rs:11:1: 13:2>`, completing the cycle\r\nnote: cycle used when collecting item types in top-level module\r\n  --> src/lib.rs:1:1\r\n   |\r\n1  | / use std::marker::PhantomData;\r\n2  | |\r\n3  | | struct Invariant<'id, I = Self> {\r\n4  | |     lifetime: PhantomData<*mut &'id I>,\r\n...  |\r\n12 | |     type Item = Invariant<'b>;\r\n13 | | }\r\n   | |_^\r\n\r\n#0 [type_of] processing `<[type error] as Contract<'b>>`\r\n#1 [collect_mod_item_types] collecting item types in top-level module\r\nend of query stack\r\nerror: aborting due to 3 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0391`.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.34.0 (91856ed52 2019-04-10) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C codegen-units=1 -C debuginfo=2 --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n\r\n```\r\n</details>\r\n", "closed_by": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59956/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59956/timeline", "performed_via_github_app": null, "state_reason": "completed"}