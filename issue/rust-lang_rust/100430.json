{"url": "https://api.github.com/repos/rust-lang/rust/issues/100430", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100430/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100430/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100430/events", "html_url": "https://github.com/rust-lang/rust/issues/100430", "id": 1336554644, "node_id": "I_kwDOAAsO6M5PqjSU", "number": 100430, "title": "`impl` blocks of recursive types causes lifetime coercion errors to be incorrect", "user": {"login": "cdmistman", "id": 23486351, "node_id": "MDQ6VXNlcjIzNDg2MzUx", "avatar_url": "https://avatars.githubusercontent.com/u/23486351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdmistman", "html_url": "https://github.com/cdmistman", "followers_url": "https://api.github.com/users/cdmistman/followers", "following_url": "https://api.github.com/users/cdmistman/following{/other_user}", "gists_url": "https://api.github.com/users/cdmistman/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdmistman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdmistman/subscriptions", "organizations_url": "https://api.github.com/users/cdmistman/orgs", "repos_url": "https://api.github.com/users/cdmistman/repos", "events_url": "https://api.github.com/users/cdmistman/events{/privacy}", "received_events_url": "https://api.github.com/users/cdmistman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-08-11T22:20:29Z", "updated_at": "2022-08-11T22:20:29Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org --> <https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=e2b94b7c2f548a0bcd9cc3f63263644a>\r\n\r\n```rust\r\npub struct CowFoo<'outer> {\r\n    pub outer: Option<Cow<'outer, CowFoo<'outer>>>,\r\n}\r\n\r\nimpl<'outer> Clone for CowFoo<'outer> {\r\n    fn clone(&self) -> Self {\r\n        todo!()\r\n    }\r\n}\r\n\r\n// commenting out this `impl` block shows the correct error\r\nimpl<'me> CowFoo<'me> {\r\n    pub fn new<'outer: 'me>(other: Option<&'outer CowFoo<'outer>>) -> Self {\r\n        let other: Option<&'me CowFoo<'me>> = other;\r\n        Self {\r\n            outer: other.map(Cow::Borrowed)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:28:20\r\n   |\r\n26 | impl<'me> CowFoo<'me> {\r\n   |      --- lifetime `'me` defined here\r\n27 |     pub fn new<'outer: 'me>(other: Option<&'outer CowFoo<'outer>>) -> Self {\r\n   |                ------ lifetime `'outer` defined here\r\n28 |         let other: Option<&'me CowFoo<'me>> = other;\r\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'me` must outlive `'outer`\r\n   |\r\n   = help: consider adding the following bound: `'me: 'outer`\r\n   = note: requirement occurs because of the type `CowFoo<'_>`, which makes the generic argument `'_` invariant\r\n   = note: the struct `CowFoo<'outer>` is invariant over the parameter `'outer`\r\n   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like:\r\n\r\n```\r\nerror[[E0391]](https://doc.rust-lang.org/stable/error-index.html#E0391): cycle detected when computing layout of `CowFoo`\r\n   |\r\n   = note: ...which requires computing layout of `core::option::Option<alloc::borrow::Cow<CowFoo>>`...\r\n   = note: ...which requires computing layout of `alloc::borrow::Cow<CowFoo>`...\r\n   = note: ...which requires computing layout of `<CowFoo as alloc::borrow::ToOwned>::Owned`...\r\n   = note: ...which again requires computing layout of `CowFoo`, completing the cycle\r\nnote: cycle used when elaborating drops for `<impl at src/lib.rs:19:1: 23:2>::clone`\r\n  --> src/lib.rs:20:5\r\n   |\r\n20 |     fn clone(&self) -> Self {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nFor more information about this error, try `rustc --explain E0391`.\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\nIn the playground link, I include a compiling version of the above code, but instead of `Cow` I use a reference to the recursive type. Indeed, the same exact lifetime coercion is used in the compiling example, indicating that the lifetime coercion is valid. However, the inclusion of `Cow` in the field `outer`'s type triggers the lifetime coercion error, which is wrong - the lifetime coercion *is* valid, but the recursive type isn't.\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100430/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100430/timeline", "performed_via_github_app": null, "state_reason": null}