{"url": "https://api.github.com/repos/rust-lang/rust/issues/84054", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84054/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84054/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84054/events", "html_url": "https://github.com/rust-lang/rust/issues/84054", "id": 855039644, "node_id": "MDU6SXNzdWU4NTUwMzk2NDQ=", "number": 84054, "title": "[ER] After Vec::resize LLVM seems to lose slice length knowledge", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-04-10T10:52:20Z", "updated_at": "2023-04-05T17:35:25Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Trying to persuade LLVM to avoid slice bound tests is fun. As usual perhaps I'm missing something. This is an example situation:\r\n\r\n```rust\r\npub fn foo1(data: &mut Vec<u32>, new_len: usize) {\r\n    data.resize(new_len, 0);\r\n    let data = &mut data[.. new_len];\r\n}\r\n```\r\nLLVM leaves a bound test in foo1:\r\n```asm\r\n.LBB2_10:\r\n    lea     rdx, [rip + .L__unnamed_1]\r\n    mov     rdi, r14\r\n    mov     rsi, rbx\r\n    call    qword ptr [rip + core::slice::index::slice_end_index_len_fail@GOTPCREL]\r\n    ud2\r\n```\r\nAdding one assume allows LLVM to remove that slice_end_index_len_fail:\r\n```rust\r\n#![feature(core_intrinsics)]\r\nuse std::intrinsics::assume;\r\npub fn foo1b(data: &mut Vec<u32>, new_len: usize) {\r\n    data.resize(new_len, 0);\r\n    unsafe { assume(data.len() == new_len); }\r\n    let data = &mut data[.. new_len];\r\n}\r\n```\r\nSo foo1b suggest us to add an assume at the end of (inside) the Vec::resize method.\r\n\r\nUnfortunately it seems that assume isn't enough to allow LLVM to remove an array bound test in a very basic loop (and this prevents the vectorization of the increment of the slice items):\r\n```rust\r\n#![feature(core_intrinsics)]\r\nuse std::intrinsics::assume;\r\npub fn foo2(data: &mut Vec<u32>, new_len: usize) {\r\n    data.resize(new_len, 0);\r\n    unsafe { assume(data.len() == new_len); }\r\n    let mut i = 0;\r\n    while i < new_len {\r\n        data[i] += 1;\r\n        i += 1;\r\n    }\r\n}\r\n```\r\nApparently beside adding the assume you also need to slice \"data\" before the loop:\r\n```rust\r\n#![feature(core_intrinsics)]\r\nuse std::intrinsics::assume;\r\npub fn foo2b(data: &mut Vec<u32>, new_len: usize) {\r\n    data.resize(new_len, 0);\r\n    unsafe { assume(data.len() == new_len); }\r\n    let data = &mut data[.. new_len];\r\n    let mut i = 0;\r\n    while i < new_len {\r\n        data[i] += 1;\r\n        i += 1;\r\n    }\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84054/timeline", "performed_via_github_app": null, "state_reason": null}