{"url": "https://api.github.com/repos/rust-lang/rust/issues/69268", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69268/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69268/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69268/events", "html_url": "https://github.com/rust-lang/rust/issues/69268", "id": 567117644, "node_id": "MDU6SXNzdWU1NjcxMTc2NDQ=", "number": 69268, "title": "Yield reference in generator with GAT", "user": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 679846574, "node_id": "MDU6TGFiZWw2Nzk4NDY1NzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-generators", "name": "A-generators", "color": "f7e101", "default": false, "description": "Area: Generators"}, {"id": 1472513502, "node_id": "MDU6TGFiZWwxNDcyNTEzNTAy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generators", "name": "F-generators", "color": "f9c0cc", "default": false, "description": "`#![feature(generators)]`"}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 3307663436, "node_id": "MDU6TGFiZWwzMzA3NjYzNDM2", "url": "https://api.github.com/repos/rust-lang/rust/labels/GATs-triaged", "name": "GATs-triaged", "color": "e88000", "default": false, "description": "Issues using the `generic_associated_types` feature that have been triaged"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-18T19:45:42Z", "updated_at": "2021-10-16T05:16:17Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since https://github.com/rust-lang/rust/pull/67160 has been merged in December, having a GAT with lifetimes should be possible (See the `StreamingIterator` example in that PR).\r\n\r\nThe current trait-defition of a generator is the following:\r\n\r\n```rust\r\npub trait Generator<R = ()> {\r\n    type Yield;\r\n    type Return;\r\n    fn resume(\r\n        self: Pin<&mut Self>, \r\n        arg: R\r\n    ) -> GeneratorState<Self::Yield, Self::Return>;\r\n}\r\n```\r\n\r\nThe issue here is that the `Yield` can't be parameterized with a lifetime, so yielding a reference from a generator is not possible in its current state.\r\n\r\nBy using a GAT for the `Yield` AT, it would be possible to return a local reference.\r\n\r\nI also don't see why the resume argument type could not have been expressed with a GAT, so at the end we would use the following trait definition for a generator:\r\n\r\n```rust\r\npub trait Generator {\r\n    type Resume<'a>;\r\n    type Yield<'a>;\r\n    type Return;\r\n\r\n    fn resume<'a, 'b>(\r\n        self: Pin<&'a mut Self>, \r\n        arg: Self::Resume<'b>\r\n    ) -> GeneratorState<Self::Yield<'a>, Self::Return>;\r\n}\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69268/reactions", "total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69268/timeline", "performed_via_github_app": null, "state_reason": null}