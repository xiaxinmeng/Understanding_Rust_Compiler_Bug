{"url": "https://api.github.com/repos/rust-lang/rust/issues/19499", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19499/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19499/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19499/events", "html_url": "https://github.com/rust-lang/rust/issues/19499", "id": 50846166, "node_id": "MDU6SXNzdWU1MDg0NjE2Ng==", "number": 19499, "title": "Type inference failure after switching to unboxed closure", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-12-03T14:47:13Z", "updated_at": "2015-01-28T02:22:16Z", "closed_at": "2015-01-28T02:22:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### STR\n\n``` rust\n#![feature(unboxed_closures)]\n\ntrait IteratorExt2<A> {\n    fn inspect2<F>(self, f: F) -> Inspect<A, Self, F> where F: FnMut(&A);\n}\n\nstruct Inspect<A, I, F> where I: Iterator<A>, F: FnMut(&A) {\n    iter: I,\n    f: F,\n}\n\nfn main() {\n    let xs = [1u, 2, 3, 4];\n    // Trigger\n    let mut n = 0;  // Err\n    //let mut n = 0u;  // Ok\n\n    let ys = xs.iter()\n               .map(|&x| x)\n               .inspect2(|_| n += 1)\n                //~^ error: unable to infer enough type information about `closure`; type annotations required\n               //.inspect2(|&mut: _| n += 1)  // This doesn't work either (same error as above)\n               .collect::<Vec<uint>>();\n\n    // NOTE: This constrains `n` to be `uint`\n    assert_eq!(n, xs.len());\n    assert_eq!(xs[], ys[]);\n}\n\nimpl<A, I> IteratorExt2<A> for I where I: Iterator<A> {\n    fn inspect2<F>(self, f: F) -> Inspect<A, I, F> where F: FnMut(&A) {\n        Inspect {\n            iter: self,\n            f: f,\n        }\n    }\n}\n\nimpl<A, I, F> Inspect<A, I, F> where I: Iterator<A>, F: FnMut(&A) {\n    #[inline]\n    fn do_inspect(&mut self, elt: Option<A>) -> Option<A> {\n        match elt {\n            Some(ref a) => (self.f)(a),\n            None => ()\n        }\n\n        elt\n    }\n}\n\nimpl<A, I, F> Iterator<A> for Inspect<A, I, F> where I: Iterator<A>, F: FnMut(&A) {\n    fn next(&mut self) -> Option<A> {\n        let next = self.iter.next();\n        self.do_inspect(next)\n    }\n\n    fn size_hint(&self) -> (uint, Option<uint>) {\n        self.iter.size_hint()\n    }\n}\n```\n### Version\n#19449 on top of 21ba1d5\n\nThe code under main is actually a test (see `test_inspect` in `libcoretest/iter.rs`) that was passing with the boxed version of `Inspect`, but after moving `Inspect` to unboxed closures (as seen above) compiling that test now errors due to a type inference failure.\n\nTo fix the compilation `n` had to be type annotated: `let mut n = 0u`, however this shouldn't be necessary because `assert_eq!(n, xs.len())` should already force `n` to be `uint`.\n\nTL;DR This should compile because it has enough type information, but for some reason it doesn't.\n\ncc @nikomatsakis \n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19499/timeline", "performed_via_github_app": null, "state_reason": "completed"}