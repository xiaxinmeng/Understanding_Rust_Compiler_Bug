{"url": "https://api.github.com/repos/rust-lang/rust/issues/57641", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57641/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57641/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57641/events", "html_url": "https://github.com/rust-lang/rust/issues/57641", "id": 399515436, "node_id": "MDU6SXNzdWUzOTk1MTU0MzY=", "number": 57641, "title": "Borrow #run idea from JAI", "user": {"login": "ckaran", "id": 12038467, "node_id": "MDQ6VXNlcjEyMDM4NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/12038467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckaran", "html_url": "https://github.com/ckaran", "followers_url": "https://api.github.com/users/ckaran/followers", "following_url": "https://api.github.com/users/ckaran/following{/other_user}", "gists_url": "https://api.github.com/users/ckaran/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckaran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckaran/subscriptions", "organizations_url": "https://api.github.com/users/ckaran/orgs", "repos_url": "https://api.github.com/users/ckaran/repos", "events_url": "https://api.github.com/users/ckaran/events{/privacy}", "received_events_url": "https://api.github.com/users/ckaran/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1089771154, "node_id": "MDU6TGFiZWwxMDg5NzcxMTU0", "url": "https://api.github.com/repos/rust-lang/rust/labels/needs-rfc", "name": "needs-rfc", "color": "fceb9f", "default": false, "description": "This change is large or controversial enough that it should have an (e-)RFC accepted before doing it"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-15T20:09:51Z", "updated_at": "2019-01-17T15:56:04Z", "closed_at": "2019-01-16T08:53:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been trying to figure out macros in Rust, including some of the tracking issues for Macros 2.0, and have come to the conclusion that JAI's `#run` mechanism may be the better way to go (see https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md, and search for `#run`).\r\n\r\nThe basic idea is that the compiler has an interpreter for the language built into itself.  Whenever you reach some code marked with `#run`, the compiler executes the code immediately as a part of the compilation process.  My thought is that this may be a good way to deal with macros.  The process would be something like the following:\r\n\r\n- The compiler defines a fake crate that is implicitly in scope whenever `#run` is encountered.  This crate provides the communications link between the `#run` interpreted code and the compiler.\r\n- When the compiler encounters `#run`, it starts up a MIRI interpreter instance which takes over.  The code has access to the current state of the compiler (including the abstract syntax tree, etc.) via the fake crate's features.  The code can mutate the compiler's state (including the AST) via the crate.\r\n- When the execution finishes, compilation goes on using the compiler's newly mutated state.  If nothing was mutated via the crate, then the entire `#run` is a no-op.\r\n- MIRI interpretation is recursive; if another `#run` is encountered before the first `#run` is finished, then a new MIRI interpreter instance is spun up, and the steps above follow suit.  This might be used in cases where you have a `vec!()` within the interpreted code.\r\n\r\n# Advantages to this approach\r\n\r\n- We can get rid of the macro mini-language entirely; everything is in plain old rust.  \r\n- Full power of rust.  In theory, you could `#run` your entire program (although probably more slowly than if it were compiled).\r\n\r\n# Issues I can think off off-hand:\r\n\r\n- Depending on how the compiler was written, this may or may not be possible.  I'm still learning rust, and don't have enough experience to know if this is a good or bad idea.\r\n- Compilation might hang; it's pretty easy to write bad code that just hangs, or effectively does a DOS attack against the computer its being compiled on, etc.\r\n- It's _yet another_ macro-like system to keep track of.  Thanks to rust's stability guarantees, nothing that is in stable can be removed or changed until Rust 2.0 (and probably not until after that).  \r\n\r\nThe only real issue that I see is the middle one; it is a security issue.  However, it would have limited effect as it we're talking about compile-time execution, which means on a developer's machine rather than across numerous machines on the internet.  \r\n\r\nThoughts, critique, comments?", "closed_by": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57641/timeline", "performed_via_github_app": null, "state_reason": "completed"}