{"url": "https://api.github.com/repos/rust-lang/rust/issues/81862", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81862/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81862/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81862/events", "html_url": "https://github.com/rust-lang/rust/issues/81862", "id": 803068350, "node_id": "MDU6SXNzdWU4MDMwNjgzNTA=", "number": 81862, "title": "GAT: elided lifetimes in paths errors with `error[E0107]: missing generics for associated type`", "user": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-02-07T21:45:54Z", "updated_at": "2021-05-11T19:29:56Z", "closed_at": "2021-05-11T19:29:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_associated_types)]\r\n\r\ntrait StreamingIterator {\r\n    type Item<'a>;\r\n    fn next(&mut self) -> Option<Self::Item>;\r\n}\r\n```\r\n\r\nExpectation from the [rfc](https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md#using-an-associated-type-constructor-to-construct-a-type): \r\n> Lastly, lifetimes can be elided in associated type constructors in the same manner that they can be elided in other type constructors. \r\n\r\nInstead, this happened:\r\n\r\n```\r\nerror[E0107]: missing generics for associated type `StreamingIterator::Item`\r\n --> src/main.rs:6:40\r\n  |\r\n6 |     fn next(&mut self) -> Option<Self::Item>;\r\n  |                                        ^^^^ expected 1 lifetime argument\r\n  |\r\nnote: associated type defined here, with 1 lifetime parameter: `'a`\r\n --> src/main.rs:5:10\r\n  |\r\n5 |     type Item<'a>;\r\n  |          ^^^^ --\r\nhelp: use angle brackets to add missing lifetime argument\r\n  |\r\n6 |     fn next(&mut self) -> Option<Self::Item<'a>>;\r\n  |                                            ^^^^\r\n  ```\r\n\r\nIf we follow the diagnostic and change it to\r\n```rust\r\nfn next(&mut self) -> Option<Self::Item<'a>>;\r\n```\r\n\r\nIt will error with the following:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0261]: use of undeclared lifetime name `'a`\r\n --> src/main.rs:6:45\r\n  |\r\n6 |     fn next(&mut self) -> Option<Self::Item<'a>>;\r\n  |                                             ^^ undeclared lifetime\r\n  |\r\n  = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\r\nhelp: consider introducing lifetime `'a` here\r\n  |\r\n4 | trait StreamingIterator<'a> {\r\n  |                        ^^^^\r\nhelp: consider introducing lifetime `'a` here\r\n  |\r\n6 |     fn next<'a>(&mut self) -> Option<Self::Item<'a>>;\r\n  |            ^^^^\r\n  ```\r\n\r\nIf we follow only the suggestion of `fn next<'a>(&mut self) -> Option<Self::Item<'a>>` or instead enable the in-band lifetime feature, then it will compile.\r\n\r\nAn alternative to the compiler suggestions would be to use a placeholder lifetime,\r\n\r\n```rust\r\nfn next(&mut self) -> Option<Self::Item<'_>>;\r\n```\r\n\r\nwhich is the preferred style over elided lifetimes in paths today.\r\n\r\n- Should eliding lifetimes in paths still be expected to work?\r\n- If not, could the initial diagnostic be improved?\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.52.0-nightly (a73c2e555 2021-02-06)\r\nbinary: rustc\r\ncommit-hash: a73c2e555c26ef0c8b98c91c97a7d24b7017267f\r\ncommit-date: 2021-02-06\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.52.0-nightly\r\nLLVM version: 11.0.1\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81862/timeline", "performed_via_github_app": null, "state_reason": "completed"}