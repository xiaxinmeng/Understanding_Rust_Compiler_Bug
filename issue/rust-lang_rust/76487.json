{"url": "https://api.github.com/repos/rust-lang/rust/issues/76487", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/76487/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/76487/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/76487/events", "html_url": "https://github.com/rust-lang/rust/issues/76487", "id": 696093727, "node_id": "MDU6SXNzdWU2OTYwOTM3Mjc=", "number": 76487, "title": "fs::Metadata::is_dir() and is_file() should be deprecated", "user": {"login": "marcospb19", "id": 38900226, "node_id": "MDQ6VXNlcjM4OTAwMjI2", "avatar_url": "https://avatars.githubusercontent.com/u/38900226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcospb19", "html_url": "https://github.com/marcospb19", "followers_url": "https://api.github.com/users/marcospb19/followers", "following_url": "https://api.github.com/users/marcospb19/following{/other_user}", "gists_url": "https://api.github.com/users/marcospb19/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcospb19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcospb19/subscriptions", "organizations_url": "https://api.github.com/users/marcospb19/orgs", "repos_url": "https://api.github.com/users/marcospb19/repos", "events_url": "https://api.github.com/users/marcospb19/events{/privacy}", "received_events_url": "https://api.github.com/users/marcospb19/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-09-08T18:39:49Z", "updated_at": "2022-01-13T20:41:51Z", "closed_at": "2022-01-13T20:41:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Resume\r\nI'm personally confused about the existence of\r\n\r\n`fs::Metadata::is_dir()` and\r\n`fs::Metadata::is_file()`\r\n\r\nAt the same time that we DON'T have a\r\n`fs::Metadata::is_symlink()`\r\n\r\nIt doesn't make a lot of sense\r\n\r\n## Context before we go:\r\n`fs::Metadata::file_type()` returns a `fs::FileType`\r\n\r\n`fs::FileType` just contains 3 functions, 2 of them can be accessed by `fs::Metadata`, they are `is_dir()` and `is_file()` (yes, same names!).\r\n\r\nBut, keep in mind that they are all mutually exclusive, that is, a file can never be of _directory type_ and _file type_, or _file type_ and _symlink type_.\r\n\r\n## Problems (I'm confused about this O.o)\r\nConsidering that we got the metadata from a file:\r\n```rust\r\nlet metadata = fs::symlink_metadata(\"file\").unwrap();\r\n```\r\n\r\nIf we want to know if the file is a symbolic link, we have 2 ways:\r\n\r\n1. Without acessing `.file_type()`:\r\n```rust\r\nlet is_symlink: bool = !(metadata.is_dir() || metadata.is_file()); // This is wrong, see conversation below\r\n```\r\n\r\n2. Getting the `fs::FileType`:\r\n```rust\r\nmetadata.is_symlink();\r\n```\r\n\r\nSo, if the information is already accessible without `file_type()`, why isn't a `is_symlink()` function at `fs::Metadata` just like `is_dir()` and `is_file()`?\r\n\r\nIs some other reason that I'm not aware of?\r\n\r\n## Conclusion and proposals (need more discussion)\r\nThere's no point on having functions in `fs::Metadata` that are **exactly** equal to what is available getting `fs::FileType` by calling `file_type()`.\r\n\r\nI originally wanted to propose the removal of `is_dir()` and `is_file()` from `fs::Metadata`, but maybe this would make getting the file_type a little too long, so here are my proposals to fix it sanely.\r\n\r\nRanked by the solutions I personally find the better for the language (please add comments into the debate):\r\n\r\n1. Deprecate `is_dir()` and `is_file()` from `fs::Metadata`, and add `fs::file_type` that returns directly the `fs::FileType`.\r\n2. Just deprecate `is_dir()` and `is_file()` from `fs::Metadata`.\r\n3. Add another redundant function, `fs::Metadata::is_symlink()`, to help like `is_file()` and `is_dir()` have been doing since `1.1.0` (we're at `1.4.8` at the time of this writing).\r\n", "closed_by": {"login": "marcospb19", "id": 38900226, "node_id": "MDQ6VXNlcjM4OTAwMjI2", "avatar_url": "https://avatars.githubusercontent.com/u/38900226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcospb19", "html_url": "https://github.com/marcospb19", "followers_url": "https://api.github.com/users/marcospb19/followers", "following_url": "https://api.github.com/users/marcospb19/following{/other_user}", "gists_url": "https://api.github.com/users/marcospb19/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcospb19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcospb19/subscriptions", "organizations_url": "https://api.github.com/users/marcospb19/orgs", "repos_url": "https://api.github.com/users/marcospb19/repos", "events_url": "https://api.github.com/users/marcospb19/events{/privacy}", "received_events_url": "https://api.github.com/users/marcospb19/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/76487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/76487/timeline", "performed_via_github_app": null, "state_reason": "completed"}