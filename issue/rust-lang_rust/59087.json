{"url": "https://api.github.com/repos/rust-lang/rust/issues/59087", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59087/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59087/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59087/events", "html_url": "https://github.com/rust-lang/rust/issues/59087", "id": 419310052, "node_id": "MDU6SXNzdWU0MTkzMTAwNTI=", "number": 59087, "title": "Generator size: borrowed variables are assumed live across following yield points", "user": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 679846574, "node_id": "MDU6TGFiZWw2Nzk4NDY1NzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-generators", "name": "A-generators", "color": "f7e101", "default": false, "description": "Area: Generators"}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2019-03-11T06:16:26Z", "updated_at": "2020-03-21T13:36:35Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Maybe a duplicate of #52924, but maybe also something else.\r\n\r\nI observed that the sizes of `Future`s generated by async fns can grow exponentially.\r\nThe following code shows an async fn, which produces a 1kB future. Each layering in another async fn doubles it's size:\r\n\r\n```rust\r\n#![feature(async_await)]\r\n\r\nasync fn i_am_1kb() -> bool\r\n{\r\n    let x: [u8; 1*1024] = [0; 1*1024];\r\n    async{}.await;\r\n    let _sum: u8 = x.iter().sum();\r\n    true\r\n}\r\n\r\nfn main() {\r\n    let fut1 = i_am_1kb();\r\n    dbg!(std::mem::size_of_val(&fut1));\r\n\r\n    let composed_1 = async {\r\n        let inner = i_am_1kb();\r\n        inner.await;\r\n    };\r\n    dbg!(std::mem::size_of_val(&composed_1));\r\n\r\n    let composed_2 = async {\r\n        let inner = i_am_1kb();\r\n        dbg!(std::mem::size_of_val(&inner));\r\n        inner.await;\r\n    };\r\n    dbg!(std::mem::size_of_val(&composed_2));\r\n\r\n    let composed_3 = async {\r\n        let inner = async {\r\n            let inner = async {\r\n                i_am_1kb().await;\r\n            };\r\n            dbg!(std::mem::size_of_val(&inner));\r\n            inner.await;\r\n        };\r\n        dbg!(std::mem::size_of_val(&inner));\r\n        inner.await;\r\n    };\r\n    dbg!(std::mem::size_of_val(&composed_3));\r\n}\r\n```\r\n\r\nOutput:\r\n```\r\n[src/main.rs:16] std::mem::size_of_val(&fut1) = 1032\r\n[src/main.rs:22] std::mem::size_of_val(&composed_1) = 1036\r\n[src/main.rs:29] std::mem::size_of_val(&composed_2) = 2072\r\n[src/main.rs:44] std::mem::size_of_val(&composed_3) = 4168\r\n```\r\n\r\nIt doesn't matter whether the statement between the future generation and `await!` references the future or not. A simply `println(\"\")` will have the same effect.\r\nOnly if the future is directly awaited (as in `composed_1`) the size will stay constant.\r\n\r\ncc @cramertj , @nikomatsakis , @Nemo157 ", "closed_by": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59087/timeline", "performed_via_github_app": null, "state_reason": null}