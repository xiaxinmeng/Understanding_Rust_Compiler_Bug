{"url": "https://api.github.com/repos/rust-lang/rust/issues/67007", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67007/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67007/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67007/events", "html_url": "https://github.com/rust-lang/rust/issues/67007", "id": 532375774, "node_id": "MDU6SXNzdWU1MzIzNzU3NzQ=", "number": 67007, "title": "#[feature(nll)] produces unintelligible error message in corner case with invariance", "user": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 867465998, "node_id": "MDU6TGFiZWw4Njc0NjU5OTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-diagnostics", "name": "NLL-diagnostics", "color": "f799ea", "default": false, "description": "Working torwads the \"diagnostic parity\" goal"}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-04T01:16:29Z", "updated_at": "2021-10-06T23:12:44Z", "closed_at": "2021-10-06T23:12:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "While working on a diagnostics improvement for the compiler, I came across an essentially unreadable error. The following (minimized) code:\r\n\r\n```rust\r\n#![feature(nll)] \r\n\r\n// Covariant over 'a, invariant over 'tcx\r\nstruct FnCtxt<'a, 'tcx: 'a>(&'a (), *mut &'tcx ());\r\n\r\nimpl<'a, 'tcx> FnCtxt<'a, 'tcx> {\r\n    fn use_it(&self, _: &'tcx ()) {}\r\n}\r\n\r\nstruct Consumer<'tcx>(&'tcx ());\r\n\r\nimpl<'tcx> Consumer<'tcx> {\r\n    fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\r\n        let other = self.use_fcx(fcx);\r\n        fcx.use_it(other);\r\n    }\r\n    \r\n    fn use_fcx<'a>(&self, _: &FnCtxt<'a, 'tcx>) -> &'a () {\r\n        &()\r\n    }\r\n}\r\n```\r\n\r\nproduces this error:\r\n\r\n```rust\r\nerror[E0521]: borrowed data escapes outside of function\r\n  --> src/lib.rs:14:21\r\n   |\r\n13 |     fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\r\n   |                       -----  --- `fcx` is a reference that is only valid in the function body\r\n   |                       |\r\n   |                       `self` is declared here, outside of the function body\r\n14 |         let other = self.use_fcx(fcx);\r\n   |                     ^^^^^^^^^^^^^^^^^ `fcx` escapes the function body here\r\n   |\r\n   = help: consider adding the following bound: `'a: 'tcx`\r\n```\r\n\r\nThere are several problems with this error message:\r\n\r\n1. The span is very unhelpful. Commenting out the call to `fcx.use_it(other);` causes this code to compile (I think due to the fact that the lifetime of `other` is no longer required to outlive `tcx`). However, the error message points to a completely different line, which is not really the source of the problem.\r\n2. The 'escapes outside of function' terminology is very misleading. In general, there's nothing wrong with passing a reference to another function. The problem is that that by passing `fcx` to `use_fcx`, we (indirectly) end up constraining `a`.\r\n3. The only place where the error message refers to any lifetimes is in the suggestion to add `'a: 'tcx`. Without reading the hint, you might not even realize that the named lifetimes are involved in any way.\r\n4. The error depends on the invariance of the `'tcx` lifetime (caused by the raw pointer, which is invariant over the pointee type). I discovered this through blind luck, as I've seen variance-related errors before. If someone has never even heard of variance, it would be virtually impossible for them to discover this - the invariance of a lifetime may be caused by the lifetime being passed to a deeply nested invariant type.\r\n\r\nRemoving `#![feature(nll)]` makes the error marginally better:\r\n\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in function call due to conflicting requirements\r\n  --> src/lib.rs:14:26\r\n   |\r\n14 |         let other = self.use_fcx(fcx);\r\n   |                          ^^^^^^^\r\n   |\r\nnote: first, the lifetime cannot outlive the lifetime `'a` as defined on the method body at 13:19...\r\n  --> src/lib.rs:13:19\r\n   |\r\n13 |     fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\r\n   |                   ^^\r\nnote: ...but the lifetime must also be valid for the lifetime `'tcx` as defined on the impl at 12:6...\r\n  --> src/lib.rs:12:6\r\n   |\r\n12 | impl<'tcx> Consumer<'tcx> {\r\n   |      ^^^^\r\n   = note: ...so that the expression is assignable:\r\n           expected &FnCtxt<'_, '_>\r\n              found &FnCtxt<'a, 'tcx>\r\n```\r\n\r\nHere, we at least know that `'a` and `'tcx` are involved. However, the span is still bad - there's no indication that the call to `fcx.use_it(other)` is involved at all. The note 'so that the expression is assignable' also lacks a span entirely, making it difficult to tell what it actually means.\r\n\r\nFor some reason, removing the `'tcx: 'a` requirement from the `FnCtxt` definition (e.g. changing it to just `'tcx`) results in a better span with `#![feature(nll)]`:\r\n\r\n```\r\nerror[E0521]: borrowed data escapes outside of function\r\n  --> src/lib.rs:15:9\r\n   |\r\n13 |     fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\r\n   |                       -----  --- `fcx` is a reference that is only valid in the function body\r\n   |                       |\r\n   |                       `self` is declared here, outside of the function body\r\n14 |         let other = self.use_fcx(fcx);\r\n15 |         fcx.use_it(other);\r\n   |         ^^^^^^^^^^^^^^^^^ `fcx` escapes the function body here\r\n   |\r\n   = help: consider adding the following bound: `'a: 'tcx`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nbut the error is unchanged when `#![feature(nll)]` is not enabled.\r\n\r\ncc https://github.com/rust-lang/rust/issues/62953", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67007/timeline", "performed_via_github_app": null, "state_reason": "completed"}