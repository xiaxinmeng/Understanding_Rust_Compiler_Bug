{"url": "https://api.github.com/repos/rust-lang/rust/issues/43731", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43731/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43731/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43731/events", "html_url": "https://github.com/rust-lang/rust/issues/43731", "id": 248615229, "node_id": "MDU6SXNzdWUyNDg2MTUyMjk=", "number": 43731, "title": "Can show operands at runtime when 'attempt to multiply with overflow' panic ?", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 657353545, "node_id": "MDU6TGFiZWw2NTczNTM1NDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-accepted", "name": "C-feature-accepted", "color": "f5f1fd", "default": false, "description": "Category: A feature request that has been accepted pending implementation."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-08T06:42:20Z", "updated_at": "2019-01-20T02:09:01Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to show the two operands at runtime when this panic occurs ?\r\nthread 'main' panicked at 'attempt to multiply with overflow', src/main.rs:7\r\nSo maybe we can see `2*122` in the panic message?\r\n\r\n[example code](https://play.rust-lang.org/?gist=3d3739913cd5cbbff6159d1b9687427f&version=stable)\r\n\r\n[code with backtrace](https://play.rust-lang.org/?gist=50435a8845bd16bd4bf3a4995ddaff81&version=nightly)\r\n<details><summary>output</summary>\r\n\r\n```rust\r\n  Compiling playground v0.0.1 (file:///playground)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.62 secs\r\n     Running `target/debug/playground`\r\nthread 'main' panicked at 'attempt to multiply with overflow', src/main.rs:9:20\r\nstack backtrace:\r\n   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace\r\n             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::_print\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:71\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:60\r\n             at /checkout/src/libstd/panicking.rs:380\r\n   3: std::panicking::default_hook\r\n             at /checkout/src/libstd/panicking.rs:396\r\n   4: std::panicking::rust_panic_with_hook\r\n             at /checkout/src/libstd/panicking.rs:610\r\n   5: std::panicking::begin_panic\r\n             at /checkout/src/libstd/panicking.rs:571\r\n   6: std::panicking::begin_panic_fmt\r\n             at /checkout/src/libstd/panicking.rs:521\r\n   7: rust_begin_unwind\r\n             at /checkout/src/libstd/panicking.rs:497\r\n   8: core::panicking::panic_fmt\r\n             at /checkout/src/libcore/panicking.rs:71\r\n   9: core::panicking::panic\r\n             at /checkout/src/libcore/panicking.rs:51\r\n  10: playground::main\r\n             at src/main.rs:9\r\n  11: __rust_maybe_catch_panic\r\n             at /checkout/src/libpanic_unwind/lib.rs:98\r\n  12: std::rt::lang_start\r\n             at /checkout/src/libstd/panicking.rs:458\r\n             at /checkout/src/libstd/panic.rs:361\r\n             at /checkout/src/libstd/rt.rs:61\r\n  13: main\r\n  14: __libc_start_main\r\n  15: _start\r\n```\r\n</details>\r\n\r\n\r\n----------\r\n\r\n**EDIT:** what I tried and had no effect whatsoever:\r\n```patch\r\ndiff --git a/src/librustc_const_math/int.rs b/src/librustc_const_math/int.rs\r\nindex 65471416e8..1c05352aec 100644\r\n--- a/src/librustc_const_math/int.rs\r\n+++ b/src/librustc_const_math/int.rs\r\n@@ -329,7 +329,10 @@ impl ::std::fmt::Display for ConstInt {\r\n macro_rules! overflowing {\r\n     ($e:expr, $err:expr) => {{\r\n         if $e.1 {\r\n-            return Err(Overflow($err));\r\n+            return {\r\n+                eprintln!(\"!!!moo3:{:?}!{:?}!\",$e,$err);\r\n+                Err(Overflow($err))\r\n+            }\r\n         } else {\r\n             $e.0\r\n         }\r\n@@ -341,6 +344,7 @@ macro_rules! impl_binop {\r\n         impl ::std::ops::$op for ConstInt {\r\n             type Output = Result<Self, ConstMathErr>;\r\n             fn $func(self, rhs: Self) -> Result<Self, ConstMathErr> {\r\n+                eprintln!(\"!!!moo4:{:?}!{:?}!\",self,rhs);\r\n                 match (self, rhs) {\r\n                     (I8(a), I8(b)) => a.$checked_func(b).map(I8),\r\n                     (I16(a), I16(b)) => a.$checked_func(b).map(I16),\r\n@@ -428,7 +432,10 @@ fn check_division(\r\n         (Usize(_), Usize(Us32(0))) => Err(zerr),\r\n         (Usize(_), Usize(Us64(0))) => Err(zerr),\r\n \r\n-        (I8(::std::i8::MIN), I8(-1)) => Err(Overflow(op)),\r\n+        (I8(::std::i8::MIN), I8(-1)) => {\r\n+            eprintln!(\"!!!moo2{:?}!\",op);\r\n+            Err(Overflow(op))\r\n+        },\r\n         (I16(::std::i16::MIN), I16(-1)) => Err(Overflow(op)),\r\n         (I32(::std::i32::MIN), I32(-1)) => Err(Overflow(op)),\r\n         (I64(::std::i64::MIN), I64(-1)) => Err(Overflow(op)),\r\ndiff --git a/src/librustc_mir/build/expr/as_rvalue.rs b/src/librustc_mir/build/expr/as_rvalue.rs\r\nindex 2512291f1a..f8fd8315c5 100644\r\n--- a/src/librustc_mir/build/expr/as_rvalue.rs\r\n+++ b/src/librustc_mir/build/expr/as_rvalue.rs\r\n@@ -285,6 +285,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\r\n                     bug!(\"MIR build_binary_op: {:?} is not checkable\", op)\r\n                 }\r\n             });\r\n+            eprintln!(\"!!!moo{:?}!\",err);\r\n \r\n             block = self.assert(block, Operand::Consume(of), false,\r\n                                 AssertMessage::Math(err), span);\r\n\r\ndiff --git a/src/librustc_trans/mir/constant.rs b/src/librustc_trans/mir/constant.rs\r\nindex 53469689bc..783aea003d 100644\r\n--- a/src/librustc_trans/mir/constant.rs\r\n+++ b/src/librustc_trans/mir/constant.rs\r\n@@ -932,6 +932,7 @@ pub fn const_scalar_checked_binop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\r\n                 bug!(\"Operator `{:?}` is not a checkable operator\", op)\r\n             }\r\n         };\r\n+        eprintln!(\"!!!moo5:{:?}!\", result);\r\n \r\n         let of = match result {\r\n             Ok(_) => false,\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43731/timeline", "performed_via_github_app": null, "state_reason": null}