{"url": "https://api.github.com/repos/rust-lang/rust/issues/91420", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91420/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91420/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91420/events", "html_url": "https://github.com/rust-lang/rust/issues/91420", "id": 1068401451, "node_id": "I_kwDOAAsO6M4_roMr", "number": 91420, "title": "[ER] Warn against impls that don't need to take mutable &self", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-12-01T13:21:20Z", "updated_at": "2021-12-26T23:10:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The Rust compiler gives a very useful warning for variables that don't need to be mutable. This is more than just tidyness, such little things could sometimes reveal a bug nearby:\r\n\r\n```rust\r\nfn main() {\r\n    let mut x: u32 = 10;\r\n    println!(\"{}\", x + 20);\r\n}\r\n\r\n\r\nwarning: variable does not need to be mutable\r\n --> ...\\test.rs:2:9\r\n  |\r\n2 |     let mut x: u32 = 10;\r\n  |         ----^\r\n  |         |\r\n  |         help: remove this `mut`\r\n  |\r\n  = note: `#[warn(unused_mut)]` on by default\r\n```\r\n\r\nSo I'd like rustc to give a similar warning for impls:\r\n\r\n```rust\r\nstruct Foo { x: u32, y: u32 }\r\n\r\nimpl Foo {\r\n    fn bar(&mut self) -> u32 {\r\n        self.x\r\n    }\r\n\r\n    fn spam(&mut self) -> u32 {\r\n        self.bar() + self.y\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut f = Foo { x: 0, y: 1 };\r\n    println!(\"{}\", f.spam());\r\n}\r\n```\r\n\r\nHere I'd like rustc to give two warnings here, that explain that both bar() and spam() don't need to take self as mutable.\r\n\r\nCurrently to solve this problem I just replace all \"&mut self\" with \"&self\" and restore the ones that cause compilation errors. Sometimes this needs to be iterated because like in the example spam() can't be &self unless first bar() becomes &self. But this method is brutal and it's the job of the compiler.\r\n\r\nNote that currently rustc gives those warnings for value self:\r\n\r\n```rust\r\n#[derive(Copy, Clone)]\r\nstruct Foo { x: u32, y: u32 }\r\n\r\nimpl Foo {\r\n    fn bar(mut self) -> u32 {\r\n        self.x\r\n    }\r\n\r\n    fn spam(mut self) -> u32 {\r\n        self.bar() + self.y\r\n    }\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91420/timeline", "performed_via_github_app": null, "state_reason": null}