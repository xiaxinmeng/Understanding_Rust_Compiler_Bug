{"url": "https://api.github.com/repos/rust-lang/rust/issues/97747", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97747/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97747/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97747/events", "html_url": "https://github.com/rust-lang/rust/issues/97747", "id": 1260928540, "node_id": "I_kwDOAAsO6M5LKD4c", "number": 97747, "title": "Macro typos generating exponentially growing token streams cause rustc to take exponentially long", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1168029555, "node_id": "MDU6TGFiZWwxMTY4MDI5NTU1", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-hang", "name": "I-hang", "color": "e10c02", "default": false, "description": "Issue: The compiler never terminates, due to infinite loops, deadlock, livelock, etc."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-06-05T00:57:53Z", "updated_at": "2022-06-05T01:04:07Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![recursion_limit=\"32\"]\r\nmacro_rules! m { ($($args:tt)*) => { m! { $($args)* $($args)* } } }\r\nm! { test }\r\n```\r\n\r\n**I expected to see this happen:** compilation would terminate after a reasonable amount of time.\r\n\r\n**Instead, this happened:** process aborted with a stack overflow after six minutes of pegging a single core.\r\n\r\n([The actual code which ran into this issue.](https://twitter.com/CAD97_/status/1532913123006590977?s=20&t=1DbdSrb0SVclkQz5NAHiBg) Above is a minimal reproducer.)\r\n\r\nI did some additional timing. On my AMD Ryzen 7 3700X 8-Core Processor, I got the following timings:\r\n\r\nrecursion limit | time to compilation failure\r\n------- | -------\r\n24 | 4 seconds\r\n25 | 8 seconds\r\n26 | 16 seconds\r\n27 | 32 seconds\r\n\r\nThe suggested mitigation would be to keep track of token lengths of streams to catch degenerate macros like the above. Ideally this should track the *deep* length, but tracking shallow length (not including the length of nested token trees) should still catch unbounded growth like this, just a bit slower. If we assume the average token length is eight bytes, 2<sup>27</sup> tokens is a GiB of expanded code.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.63.0-nightly (a6b8c6954 2022-06-03)\r\nbinary: rustc\r\ncommit-hash: a6b8c6954829669a5c4fa320c3e6132edf04fcfc\r\ncommit-date: 2022-06-03\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.63.0-nightly\r\nLLVM version: 14.0.4\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97747/timeline", "performed_via_github_app": null, "state_reason": null}