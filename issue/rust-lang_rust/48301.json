{"url": "https://api.github.com/repos/rust-lang/rust/issues/48301", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48301/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48301/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48301/events", "html_url": "https://github.com/rust-lang/rust/issues/48301", "id": 298020309, "node_id": "MDU6SXNzdWUyOTgwMjAzMDk=", "number": 48301, "title": "`rustc` output hygiene wrt. stderr/stdout", "user": {"login": "sanmai-NL", "id": 3374183, "node_id": "MDQ6VXNlcjMzNzQxODM=", "avatar_url": "https://avatars.githubusercontent.com/u/3374183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanmai-NL", "html_url": "https://github.com/sanmai-NL", "followers_url": "https://api.github.com/users/sanmai-NL/followers", "following_url": "https://api.github.com/users/sanmai-NL/following{/other_user}", "gists_url": "https://api.github.com/users/sanmai-NL/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanmai-NL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanmai-NL/subscriptions", "organizations_url": "https://api.github.com/users/sanmai-NL/orgs", "repos_url": "https://api.github.com/users/sanmai-NL/repos", "events_url": "https://api.github.com/users/sanmai-NL/events{/privacy}", "received_events_url": "https://api.github.com/users/sanmai-NL/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-17T17:15:47Z", "updated_at": "2018-02-20T14:10:51Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "`rustc` sometimes emits exclusively human-readable output on stdout. Moreover, it sometimes produces machine-readable output on stderr. It should be the other way around, and at least output writing should be principled.\r\n\r\nWhen compiling a bin target `helloworld`:\r\n\r\nOn stdout:\r\n```\r\nbin: helloworld\r\n```\r\nThis would interfere in parsing JSON messages (`--error-format json`), for example from Clippy. If only they weren\u2019t mistakenly written on stderr, too ... It seems very simple to fix such little slip-ups, but I couldn\u2019t track down the offending code for this instance.\r\n\r\nAnother sample of the same issue, from a different angle:\r\n```sh\r\nrustc --error-format json\r\n```\r\n\r\nPrints on std*err*:\r\n```\r\n{\"message\":\"no input filename given\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: no input filename given\\n\\n\"}\r\n```\r\n\r\nI propose, first, that we decide to guarantee that all JSON will ever be printed on stdout exclusively, and all the rest on stderr exclusively. Second, to implement this by making the appropriate fixes across `rustc`, Cargo and Clippy.\r\n\r\n# Meta\r\n\r\nrustc 1.25.0-nightly (3ec5a99aa 2018-02-14)\r\n\r\nRelated #36516", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48301/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48301/timeline", "performed_via_github_app": null, "state_reason": null}