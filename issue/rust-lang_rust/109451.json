{"url": "https://api.github.com/repos/rust-lang/rust/issues/109451", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109451/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109451/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109451/events", "html_url": "https://github.com/rust-lang/rust/issues/109451", "id": 1634375162, "node_id": "I_kwDOAAsO6M5hapX6", "number": 109451, "title": "Uplift `clippy::clone_double_ref` to `rustc`", "user": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "open", "locked": false, "assignee": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2023-03-21T17:11:35Z", "updated_at": "2023-03-30T00:54:56Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In #109429, a snippet of code involves cloning references outputted a confusing compiler error:\r\n\r\n```rust\r\nuse std::collections::hash_map::DefaultHasher;\r\nuse std::collections::HashMap;\r\nuse std::hash::BuildHasher;\r\nuse std::hash::Hash;\r\n\r\npub struct Hash128_1;\r\n\r\nimpl BuildHasher for Hash128_1 {\r\n    type Hasher = DefaultHasher;\r\n    fn build_hasher(&self) -> DefaultHasher { DefaultHasher::default() }\r\n}\r\n\r\n#[allow(unused)]\r\npub fn hashmap_copy<T, U>(\r\n    map: &HashMap<T, U, Hash128_1>,\r\n) where T: Hash + Clone, U: Clone\r\n{\r\n    let mut copy: Vec<U> = map.clone().into_values().collect();\r\n}\r\n\r\npub fn make_map() -> HashMap<String, i64, Hash128_1>\r\n{\r\n    HashMap::with_hasher(Hash128_1)\r\n}\r\n```\r\n\r\n\r\n```\r\nerror[E0507]: cannot move out of a shared reference\r\n  --> src/lib.rs:19:28\r\n   |\r\n19 |     let mut copy: Vec<U> = map.clone().into_values().collect();\r\n   |                            ^^^^^^^^^^^^-------------\r\n   |                            |           |\r\n   |                            |           value moved due to this method call\r\n   |                            move occurs because value has type `HashMap<T, U, Hash128_1>`, which does not implement the `Copy` trait\r\n   |\r\nnote: `HashMap::<K, V, S>::into_values` takes ownership of the receiver `self`, which moves value\r\n```\r\n\r\nChanging the diagnostic to provide help when we are trying to use a function that takes `self` after a `.clone()` call is nontrivial, since this is MIR borrowck and to my knowledge it is hard to know if it comes from the return value of a `.clone()` call.\r\n\r\nIdeally we should have an error/warning like the one from clippy:\r\n\r\n```\r\nerror: using `clone` on a double-reference; this will copy the reference of type `&HashMap<T, U, Hash128_1>` instead of cloning the inner type\r\n  --> src/lib.rs:19:28\r\n   |\r\n19 |     let mut copy: Vec<U> = map.clone().into_values().collect();\r\n   |                            ^^^^^^^^^^^\r\n```\r\n\r\nI think there are other ways this can be confusing, so uplifting can help with many issues related to this and not just the example I linked.\r\n\r\n----\r\n\r\ncc @rust-lang/lang: would uplifting be a good idea? I'd be willing to work on this if this gets approval.\r\n\r\n@rustbot label +A-lint +T-compiler +T-lang +D-newcomer-roadblock", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109451/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109451/timeline", "performed_via_github_app": null, "state_reason": null}