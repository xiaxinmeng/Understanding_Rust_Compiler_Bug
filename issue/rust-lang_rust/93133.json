{"url": "https://api.github.com/repos/rust-lang/rust/issues/93133", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93133/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93133/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93133/events", "html_url": "https://github.com/rust-lang/rust/issues/93133", "id": 1109787206, "node_id": "I_kwDOAAsO6M5CJgJG", "number": 93133, "title": "Windows: Reduce raciness of `spawn()`  vs. `SetCurrentDirectory`", "user": {"login": "briansmith", "id": 16816, "node_id": "MDQ6VXNlcjE2ODE2", "avatar_url": "https://avatars.githubusercontent.com/u/16816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briansmith", "html_url": "https://github.com/briansmith", "followers_url": "https://api.github.com/users/briansmith/followers", "following_url": "https://api.github.com/users/briansmith/following{/other_user}", "gists_url": "https://api.github.com/users/briansmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/briansmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briansmith/subscriptions", "organizations_url": "https://api.github.com/users/briansmith/orgs", "repos_url": "https://api.github.com/users/briansmith/repos", "events_url": "https://api.github.com/users/briansmith/events{/privacy}", "received_events_url": "https://api.github.com/users/briansmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-01-20T21:33:29Z", "updated_at": "2022-01-20T21:54:09Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I was inspecting `resolve_exe()` specifically looking for racy coding patterns.\r\n\r\nThe code currently contains this:\r\n```rust\r\n    if !path::is_file_name(exe_path) {\r\n        if has_exe_suffix {\r\n            // The application name is a path to a `.exe` file.\r\n            // Let `CreateProcessW` figure out if it exists or not.\r\n            return Ok(exe_path.into());\r\n        }\r\n        let mut path = PathBuf::from(exe_path);\r\n\r\n        // Append `.exe` if not already there.\r\n        path = path::append_suffix(path, EXE_SUFFIX.as_ref());\r\n        if path.try_exists().unwrap_or(false) {\r\n            return Ok(path);\r\n        } else {\r\n            // It's ok to use `set_extension` here because the intent is to\r\n            // remove the extension that was just added.\r\n            path.set_extension(\"\");\r\n            return Ok(path);\r\n        }\r\n```\r\nConsider what happens when we pass a relative path containing a path separator, e.g. \"target/something\". This code will check if the file `target/something.exe` exists, relative to the current working directory and if so, return `\"target/something.exe\"`.\r\n\r\nThis function is used by the implementation of `spawn()`. Roughly, spawn looks like this:\r\n\r\n```rust\r\nlet program = resolve_exe(&self.program, || env::var_os(\"PATH\"), child_paths)?;\r\n...\r\nlet (dirp, _data) = make_dirp(self.cwd.as_ref())?;\r\n...\r\nlet program = to_u16s(&program)?;\r\nunsafe {\r\n    cvt(c::CreateProcessW(\r\n        program.as_ptr(),\r\n        ...\r\n        dirp, // lpCurrentDirectory\r\n        &mut pi,\r\n    ))\r\n}?;\r\n```\r\n\r\nIn theory the current working directory could change at any time. To minimize the effect that would have on `spawn()`, it seems like it could instead be written like this:\r\n\r\n```rust\r\nlet cwd = self.cwd.as_ref();\r\nlet program = resolve_exe(cwd, &self.program, || env::var_os(\"PATH\"), child_paths)?;\r\n...\r\nlet (dirp, _data) = make_dirp(cwd)?;\r\n...\r\nlet program = to_u16s(&program)?;\r\nunsafe {\r\n    cvt(c::CreateProcessW(\r\n        program.as_ptr(),\r\n        ...\r\n        dirp, // lpCurrentDirectory\r\n        &mut pi,\r\n    ))\r\n}?;\r\n```\r\nAnd then change `resolve_exe` so that it always returns an absolute path, where it always resolves any relative paths relative to the value of the `cwd` parameter passed in.\r\n\r\n`spawn()` and `SetCurrentDirectory` would still be racy, but at least all the path resolution within `spawn` would be internally consistent with respect to the current directory at a point in time.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93133/timeline", "performed_via_github_app": null, "state_reason": null}