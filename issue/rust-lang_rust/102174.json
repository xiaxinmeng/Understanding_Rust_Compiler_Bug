{"url": "https://api.github.com/repos/rust-lang/rust/issues/102174", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102174/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102174/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102174/events", "html_url": "https://github.com/rust-lang/rust/issues/102174", "id": 1383407584, "node_id": "I_kwDOAAsO6M5SdR_g", "number": 102174, "title": "extern \"C\" functions don't generate the same IR definitions as clang on x86, causing problems with cross-language LTO", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2413861294, "node_id": "MDU6TGFiZWwyNDEzODYxMjk0", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-untriaged", "name": "regression-untriaged", "color": "e4008a", "default": false, "description": "Untriaged performance or correctness regression."}, {"id": 4288196623, "node_id": "LA_kwDOAAsO6M7_mLAP", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-abi", "name": "A-abi", "color": "f7e101", "default": false, "description": "Area: Concerning the \"application binary interface\" between functions."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2022-09-23T07:34:02Z", "updated_at": "2022-10-20T13:05:45Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After https://github.com/llvm/llvm-project/commit/6c8adc505471542be38bd71d1000062daa46d7bc, inlining in cross-language LTO happens in cases where it didn't happen before, including cases where things go very bad (more details in https://bugzilla.mozilla.org/show_bug.cgi?id=1789779#c7)\r\n\r\nIt seems to boil down to LLVM not liking that rust defines its `extern \"C\"` functions in significantly different ways than clang does for the C/C++ code that calls it. For example:\r\n```rust\r\n// rustc --emit=llvm-ir foo.rs --crate-type=lib --target=i686-unknown-linux-gnu\r\n#[repr(C)]\r\npub struct Foo(pub u32);\r\n\r\n#[no_mangle]\r\npub unsafe extern \"C\" fn foo(foo: Foo) -> u32 {\r\n    foo.0\r\n}\r\n```\r\nThe caller:\r\n```C\r\n// clang -o - -S foo.c -emit-llvm --target=i686-unknown-linux-gnu\r\nstruct Foo { int a; };\r\n\r\nextern int foo(struct Foo f);\r\n\r\nint var(struct Foo f) {\r\n    return foo(f);\r\n}\r\n```\r\nRust defines the function as:\r\n```\r\nFoo = type { i32 }\r\n\r\n; Function Attrs: nonlazybind uwtable\r\ndefine i32 @foo(%Foo* byval(%Foo) %foo) unnamed_addr #0 {\r\n```\r\nwhile the caller C code does this:\r\n```\r\n%struct.Foo = type { i32 }\r\n(...)\r\ndeclare i32 @foo(i32) #1\r\n```\r\n\r\nThe equivalent C code:\r\n```C\r\n// clang -o - -S foo.c -emit-llvm --target=i686-unknown-linux-gnu\r\nstruct Foo { int a; };\r\n\r\nint foo(Foo foo) {\r\n    return foo.a;\r\n}\r\n```\r\ndefines the function as:\r\n```\r\n%struct.Foo = type { i32 }\r\n\r\n; Function Attrs: noinline nounwind optnone uwtable\r\ndefine dso_local i32 @foo(i32 %0) #0 {\r\n```\r\n\r\n(Ironically, rustc transforms a non-`extern \"C\"` version of the function to the same declaration as clang's)\r\n\r\nArguably, there's an underlying LLVM bug not being able to handle this case, which /could/ be considered fine, but I'm not sure it's supposed to be.\r\n\r\nIt's worth noting that rustc does not use a byval for e.g. x86_64-unknown-linux-gnu.\r\n\r\nCc: @nikic ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102174/timeline", "performed_via_github_app": null, "state_reason": null}