{"url": "https://api.github.com/repos/rust-lang/rust/issues/52976", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52976/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52976/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52976/events", "html_url": "https://github.com/rust-lang/rust/issues/52976", "id": 346989492, "node_id": "MDU6SXNzdWUzNDY5ODk0OTI=", "number": 52976, "title": "#[repr(transparent)] for Box<T>?", "user": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 39, "created_at": "2018-08-02T12:27:03Z", "updated_at": "2019-12-23T17:28:10Z", "closed_at": "2019-12-23T17:28:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/rust-lang/rust/issues/43036 added `#[repr(transparent)]` with one of the goals being safe FFI interaction for newtypes, and added that attribute to bunch of built-in types such as `NonZero`, `Waker`, `Unique` etc.\r\n\r\nOne use-case that could be really helpful for FFI though is adding it to `Box<T>`. I haven't found any previous discussions on pros and cons of doing so, so apologies if this is way off and there are obvious reasons why it can't be such, but as far as I can tell, this is not a breaking change neither from API nor from memory representation perspective.\r\n\r\nLooking from definition, `Box` is just a wrapper around `Unique` which is already `#[repr(transparent)]` and wraps `NonNull` which is also `#[repr(transparent)]` which, in turn, wraps raw pointer which is FFI-safe.\r\n\r\nAdding this attribute to `Box` would make it transparent wrapper all the way down around a raw pointer, and so would allow to do FFI interactions by simply leaking `Box` as return type in allocator functions and accepting it as-is in deallocator function without manual `into_raw` and `from_raw` conversions.\r\n\r\nAside from ergonomics improvement (allocation / deallocation is pretty common operation in `cdylib`s), this would also allow code to be more self-documenting as just from looking at rustdoc you would be able to tell which pointers are owned and will be allocated or consumed by Rust side.\r\n\r\nCounter-argument might be that one can implement custom transparent `CBox` on top of `NonNull`, but this involves reimplementing many APIs and guarantees `Box` already provides e.g. `Unique` is not exposed at the moment, and then you also have various standard traits that \"just work\" with `Box`, so if it would be possible to avoid reimplementing all of that with no obvious downsides, it might be still useful to shared library authors.", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52976/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52976/timeline", "performed_via_github_app": null, "state_reason": "completed"}