{"url": "https://api.github.com/repos/rust-lang/rust/issues/95360", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95360/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95360/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95360/events", "html_url": "https://github.com/rust-lang/rust/issues/95360", "id": 1182407062, "node_id": "I_kwDOAAsO6M5GehmW", "number": 95360, "title": "Tracking Issue for feature(generator_clone)", "user": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 3537211959, "node_id": "LA_kwDOAAsO6M7S1ZI3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-impl-incomplete", "name": "S-tracking-impl-incomplete", "color": "4682b4", "default": false, "description": ""}, {"id": 3998010275, "node_id": "LA_kwDOAAsO6M7uTMuj", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generator_clone", "name": "F-generator_clone", "color": "f9c0cc", "default": false, "description": "`#![feature(generator_clone)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-27T07:24:02Z", "updated_at": "2022-09-11T20:15:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is the tracking issue for `#[feature(generator_clone)]`.\r\n\r\nThis feature extends [RFC #2132](https://github.com/rust-lang/rfcs/pull/2132) to allow non-`static` generators to implement `Clone`/`Copy` if all their captured variables and all local variables which are held across a yield implement `Clone`/`Copy`. For instance, we can now write code like this:\r\n\r\n```rust\r\nlet mut gen0 = || {\r\n    yield 0u32;\r\n    yield 1u32;\r\n};\r\nassert_eq!(GeneratorState::Yielded(0u32), Generator::resume(Pin::new(&mut gen0), ()));\r\n\r\n// Clone a started generator in its current state.\r\nlet mut gen1 = gen0.clone();\r\n\r\n// Both the original and the clone now yield 1.\r\nassert_eq!(GeneratorState::Yielded(1u32), Generator::resume(Pin::new(&mut gen0), ()));\r\nassert_eq!(GeneratorState::Yielded(1u32), Generator::resume(Pin::new(&mut gen1), ()));\r\n```\r\n\r\nThis also works if the generator captures `Clone` data:\r\n\r\n```rust\r\nlet data = vec![\"first\", \"second\"];\r\nlet mut gen0 = move || {\r\n    yield data[0];\r\n    yield data[1];\r\n};\r\nassert_eq!(GeneratorState::Yielded(\"first\"), Generator::resume(Pin::new(&mut gen0), ()));\r\n\r\nlet mut gen1 = gen0.clone();\r\nassert_eq!(GeneratorState::Yielded(\"second\"), Generator::resume(Pin::new(&mut gen0), ()));\r\nassert_eq!(GeneratorState::Yielded(\"second\"), Generator::resume(Pin::new(&mut gen1), ()));\r\n```\r\n\r\nBut not if the generator is `static` or contains non-clonable state.\r\n\r\n```rust\r\nlet gen0 = static || {\r\n    yield 0u32;\r\n    yield 1u32;\r\n};\r\n\r\n// ERROR: the trait bound `[static generator@...]: Clone` is not satisfied.\r\nlet gen1 = gen0.clone();\r\n```\r\n\r\n```rust\r\nstruct NonClone;\r\n\r\nlet gen0 = || {\r\n    // NOTE: has type `NonClone` which does not implement `Clone`.\r\n    let non_clone = NonClone;\r\n    yield 0u32;\r\n    drop(non_clone);\r\n}\r\n\r\n// ERROR: the trait bound `NonClone: Clone` is not satisified in `[generator@...]`\r\nlet gen1 = gen0.clone();\r\n```\r\n\r\nSince this feature does not allow `static` generators to be cloned it does not apply to anonymous futures created using `async` blocks/functions (since these are desugared to `static` generators). Allowing these futures to be clonable is an extension worth considering but is outside the scope of this feature.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n\r\n- [x] Implement the RFC\r\n- [ ] Adjust documentation\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\nNone\r\n\r\n### Implementation history\r\n\r\n* [Initial PR.](https://github.com/rust-lang/rust/pull/95137) => [Revived](https://github.com/rust-lang/rust/pull/101673)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95360/reactions", "total_count": 5, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95360/timeline", "performed_via_github_app": null, "state_reason": null}