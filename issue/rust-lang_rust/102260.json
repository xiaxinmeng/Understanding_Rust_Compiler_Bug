{"url": "https://api.github.com/repos/rust-lang/rust/issues/102260", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102260/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102260/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102260/events", "html_url": "https://github.com/rust-lang/rust/issues/102260", "id": 1384982124, "node_id": "I_kwDOAAsO6M5SjSZs", "number": 102260, "title": "Sealed Windows `FileTypeExt` extensible trait broke `FileTypeExt` in wasi-common", "user": {"login": "pinkforest", "id": 36498018, "node_id": "MDQ6VXNlcjM2NDk4MDE4", "avatar_url": "https://avatars.githubusercontent.com/u/36498018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinkforest", "html_url": "https://github.com/pinkforest", "followers_url": "https://api.github.com/users/pinkforest/followers", "following_url": "https://api.github.com/users/pinkforest/following{/other_user}", "gists_url": "https://api.github.com/users/pinkforest/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinkforest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinkforest/subscriptions", "organizations_url": "https://api.github.com/users/pinkforest/orgs", "repos_url": "https://api.github.com/users/pinkforest/repos", "events_url": "https://api.github.com/users/pinkforest/events{/privacy}", "received_events_url": "https://api.github.com/users/pinkforest/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-25T11:07:04Z", "updated_at": "2022-09-25T16:22:22Z", "closed_at": "2022-09-25T16:22:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "EDIT: So Sealing happened via 2nd commit on: https://github.com/rust-lang/rust/issues/98583 - which I had originally traced down here but didn't have PR ref\r\n\r\n## Unknowns / TODO\r\n\r\nNote: I can't find `windows_file_type_ext` feature from unstable book or it's tracking issue ?\r\n\r\nSo the Sealed trait was designed to prevent people rolling own trait impl's ?\r\n\r\nI suspect that cap-primitives *may* need to deal with the Sealed trait instead of rolling own trait / impl like it's done now ?\r\n\r\nBut I think that may be troublematic.. going by guessing what was intended in `cap-primitives`\r\n\r\nDon't know yet enough about the `sealed` feature (yet) as it doesn't seem to have much docs around and I need to dig deeper on this.\r\n\r\n## Issue\r\n\r\nOn Windows builds that rely on wasi-common on which we rely on at lunatic:\r\n```\r\nwasi-common v0.40.0\r\n\u251c\u2500\u2500 cap-std v0.25.2\r\n    \u251c\u2500\u2500 cap-primitives v0.25.2\r\n```\r\n\r\nWe now get via `cap-primitives` this in 1.66.0-nightly (4a1467723 2022-09-23):\r\n```\r\n    error[E0277]: the trait bound file_type::FileType: std::sealed::Sealed is not satisfied\r\n    <snip>\r\n        |\r\n    134 | impl std::os::windows::fs::FileTypeExt for FileType {\r\n        |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait std::sealed::Sealed is not implemented for file_type::FileType\r\n        |\r\n    <snip>\r\n    error: could not compile cap-primitives due to previous error\r\n    warning: build failed, waiting for other jobs to finish...\r\n    error: failed to compile lunatic-runtime v0.10.0, intermediate artifacts can be found at <snip>\r\n\r\n```\r\n\r\nNow this was probably very intentional but \r\n\r\n## Sealed\r\n\r\nSo Sealed acts as some kind of guard for the ecosystem not to mess with it ?\r\n\r\n```rust\r\nmod sealed {\r\n    /// This trait being unreachable from outside the crate\r\n    /// prevents outside implementations of our extension traits.\r\n    /// This allows adding more trait methods in the future.\r\n    #[unstable(feature = \"sealed\", issue = \"none\")]\r\n    pub trait Sealed {}\r\n}\r\n```\r\n\r\n## Related earlier changes\r\n\r\nI see the below changes re: stabilisation related to feature `windows_file_type_ext`\r\n\r\ncommits a4cb0b90c049 and e374c911af9a\r\n\r\n```\r\nlibrary/std/src/os/windows/fs.rs      2022-06-27 09:57:56 -0700  10) use crate::sealed::Sealed;\r\nlibrary/std/src/os/windows/fs.rs      2022-06-27 09:41:12 -0700 506) #[stable(feature = \"windows_file_type_ext\", since = \"1.64.0\")]\r\nlibrary/std/src/os/windows/fs.rs      2022-06-27 09:57:56 -0700 507) pub trait FileTypeExt: Sealed {\r\n```\r\n\r\n## wasi/cap-primitives Related\r\n\r\nThis works okay in OSX, Linux but Windows builds are now broken with this where the error comes from:\r\n\r\ncap-primitives/src/fs/file_type.rs - https://docs.rs/cap-primitives/latest/src/cap_primitives/fs/file_type.rs.html#125-147\r\n```rust\r\n/// Windows-specific extensions for [`FileType`].                                                                                                                                         \r\n///                                                                                                                                                                                       \r\n/// This corresponds to [`std::os::windows::fs::FileTypeExt`].                                                                                                                            \r\n#[cfg(all(windows, windows_file_type_ext))]\r\npub trait FileTypeExt {\r\n    /// Returns `true` if this file type is a symbolic link that is also a directory.                                                                                                     \r\n    fn is_symlink_dir(&self) -> bool;\r\n    /// Returns `true` if this file type is a symbolic link that is also a file.                                                                                                          \r\n    fn is_symlink_file(&self) -> bool;\r\n}\r\n\r\n#[cfg(all(windows, windows_file_type_ext))]\r\nimpl FileTypeExt for FileType {\r\n    #[inline]\r\n    fn is_symlink_dir(&self) -> bool {\r\n\tself.0 == Inner::Ext(ImplFileTypeExt::symlink_dir())\r\n    }\r\n\r\n    #[inline]\r\n    fn is_symlink_file(&self) -> bool {\r\n\tself.0 == Inner::Ext(ImplFileTypeExt::symlink_file())\r\n    }\r\n}\r\n```\r\n\r\ngit b\r\n```\r\n0a96e089bade library/std/src/sys/windows/ext/fs.rs (Prabakaran Kumaresshan 2020-08-16 22:28:45 +0530 503) /// Windows-specific extensions to [`fs::FileType`].\r\n182d99cfd1a5 src/libstd/sys/windows/ext/fs.rs      (Dylan MacKenzie        2018-04-09 17:44:28 -0700 504) ///\r\n182d99cfd1a5 src/libstd/sys/windows/ext/fs.rs      (Dylan MacKenzie        2018-04-09 17:44:28 -0700 505) /// On Windows, a symbolic link knows whether it is a file or directory.\r\ne374c911af9a library/std/src/os/windows/fs.rs      (Josh Triplett          2022-06-27 09:41:12 -0700 506) #[stable(feature = \"windows_file_type_ext\", since = \"1.64.0\")]\r\na4cb0b90c049 library/std/src/os/windows/fs.rs      (Josh Triplett          2022-06-27 09:57:56 -0700 507) pub trait FileTypeExt: Sealed {\r\n99ed06eb8864 src/libstd/sys/windows/ext/fs.rs      (Alexander Regueiro     2019-02-09 22:16:58 +0000 508)     /// Returns `true` if this file type is a symbolic link that is also a directory.\r\ne374c911af9a library/std/src/os/windows/fs.rs      (Josh Triplett          2022-06-27 09:41:12 -0700 509)     #[stable(feature = \"windows_file_type_ext\", since = \"1.64.0\")]\r\n9269e83b37e8 src/libstd/sys/windows/ext/fs.rs      (Peter Atashian         2018-02-11 13:40:46 -0500 510)     fn is_symlink_dir(&self) -> bool;\r\n99ed06eb8864 src/libstd/sys/windows/ext/fs.rs      (Alexander Regueiro     2019-02-09 22:16:58 +0000 511)     /// Returns `true` if this file type is a symbolic link that is also a file.\r\ne374c911af9a library/std/src/os/windows/fs.rs      (Josh Triplett          2022-06-27 09:41:12 -0700 512)     #[stable(feature = \"windows_file_type_ext\", since = \"1.64.0\")]\r\n9269e83b37e8 src/libstd/sys/windows/ext/fs.rs      (Peter Atashian         2018-02-11 13:40:46 -0500 513)     fn is_symlink_file(&self) -> bool;\r\n9269e83b37e8 src/libstd/sys/windows/ext/fs.rs      (Peter Atashian         2018-02-11 13:40:46 -0500 514) }\r\n9269e83b37e8 src/libstd/sys/windows/ext/fs.rs      (Peter Atashian         2018-02-11 13:40:46 -0500 515) \r\na4cb0b90c049 library/std/src/os/windows/fs.rs      (Josh Triplett          2022-06-27 09:57:56 -0700 516) #[stable(feature = \"windows_file_type_ext\", since = \"1.64.0\")]\r\na4cb0b90c049 library/std/src/os/windows/fs.rs      (Josh Triplett          2022-06-27 09:57:56 -0700 517) impl Sealed for fs::FileType {}\r\na4cb0b90c049 library/std/src/os/windows/fs.rs      (Josh Triplett          2022-06-27 09:57:56 -0700 518) \r\ne374c911af9a library/std/src/os/windows/fs.rs      (Josh Triplett          2022-06-27 09:41:12 -0700 519) #[stable(feature = \"windows_file_type_ext\", since = \"1.64.0\")]\r\n9269e83b37e8 src/libstd/sys/windows/ext/fs.rs      (Peter Atashian         2018-02-11 13:40:46 -0500 520) impl FileTypeExt for fs::FileType {\r\nc34fbfaad38c src/libstd/sys/windows/ext/fs.rs      (David Tolnay           2019-11-27 10:28:39 -0800 521)     fn is_symlink_dir(&self) -> bool {\r\nc34fbfaad38c src/libstd/sys/windows/ext/fs.rs      (David Tolnay           2019-11-27 10:28:39 -0800 522)         self.as_inner().is_symlink_dir()\r\nc34fbfaad38c src/libstd/sys/windows/ext/fs.rs      (David Tolnay           2019-11-27 10:28:39 -0800 523)     }\r\nc34fbfaad38c src/libstd/sys/windows/ext/fs.rs      (David Tolnay           2019-11-27 10:28:39 -0800 524)     fn is_symlink_file(&self) -> bool {\r\nc34fbfaad38c src/libstd/sys/windows/ext/fs.rs      (David Tolnay           2019-11-27 10:28:39 -0800 525)         self.as_inner().is_symlink_file()\r\nc34fbfaad38c src/libstd/sys/windows/ext/fs.rs      (David Tolnay           2019-11-27 10:28:39 -0800 526)     }\r\n9269e83b37e8 src/libstd/sys/windows/ext/fs.rs      (Peter Atashian         2018-02-11 13:40:46 -0500 527) }\r\n```\r\n\r\n## Refs\r\n\r\nhttps://docs.rs/cap-primitives/latest/src/cap_primitives/fs/file_type.rs.html#125-147\r\nhttps://github.com/bytecodealliance/cap-std\r\nhttps://doc.rust-lang.org/std/os/windows/fs/trait.FileTypeExt.html\r\nhttps://stdrs.dev/nightly/x86_64-unknown-linux-gnu/std/sealed/trait.Sealed.html\r\nhttps://stdrs.dev/nightly/x86_64-unknown-linux-gnu/std/sealed/trait.Sealed.html\r\nhttps://github.com/lunatic-solutions/lunatic/issues/136", "closed_by": {"login": "pinkforest", "id": 36498018, "node_id": "MDQ6VXNlcjM2NDk4MDE4", "avatar_url": "https://avatars.githubusercontent.com/u/36498018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinkforest", "html_url": "https://github.com/pinkforest", "followers_url": "https://api.github.com/users/pinkforest/followers", "following_url": "https://api.github.com/users/pinkforest/following{/other_user}", "gists_url": "https://api.github.com/users/pinkforest/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinkforest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinkforest/subscriptions", "organizations_url": "https://api.github.com/users/pinkforest/orgs", "repos_url": "https://api.github.com/users/pinkforest/repos", "events_url": "https://api.github.com/users/pinkforest/events{/privacy}", "received_events_url": "https://api.github.com/users/pinkforest/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102260/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}