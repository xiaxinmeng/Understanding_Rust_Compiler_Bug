{"url": "https://api.github.com/repos/rust-lang/rust/issues/39185", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39185/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39185/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39185/events", "html_url": "https://github.com/rust-lang/rust/issues/39185", "id": 201911299, "node_id": "MDU6SXNzdWUyMDE5MTEyOTk=", "number": 39185, "title": "process_unix::do_exec should reset the signal mask to its value on startup, not clear it", "user": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-19T16:37:58Z", "updated_at": "2017-07-26T19:25:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Unix implementation of `process::spawn` (specifically, `do_exec` in `sys/unix/process/process_unix.rs`) contains logic to restore the signal mask to the default in child processes...\r\n\r\n```rust\r\n            // Reset signal handling so the child process starts in a\r\n            // standardized state. libstd ignores SIGPIPE, and signal-handling\r\n            // libraries often set a mask. Child processes inherit ignored\r\n            // signals and the signal mask from their parent, but most\r\n            // UNIX programs do not reset these things on their own, so we\r\n            // need to clean things up now to avoid confusing the program\r\n            // we're about to run.\r\n            let mut set: libc::sigset_t = mem::uninitialized();\r\n            t!(cvt(libc::sigemptyset(&mut set)));\r\n            t!(cvt(libc::pthread_sigmask(libc::SIG_SETMASK, &set,\r\n                                         ptr::null_mut())));\r\n            let ret = sys::signal(libc::SIGPIPE, libc::SIG_DFL);\r\n            if ret == libc::SIG_ERR {\r\n                return io::Error::last_os_error()\r\n            }\r\n```\r\n\r\nCompletely clearing the signal mask here is subtly wrong.  It should instead be restored to _whatever it was when the parent process started up_. Certain standard shell utilities \u2014 the best-known is `nohup` \u2014 deliberately start a process with some signals already masked, and expect that those settings will be inherited by any further subprocesses.\r\n\r\nFor the same reason, the handler for `SIGPIPE` should be reset not to `SIG_DFL`, but to whichever of `SIG_DFL` or `SIG_IGN` it was before libstd ignored it.\r\n\r\n(In order to make it possible to _implement_ such utilities in Rust, the ideal resolution here would involve adding `mask_signals` and `ignore_signals` knobs to `unix::process::CommandExt`, and document that the _defaults_ for these are whatever was observed on process startup.  But I don't see a clean way to do that without a lot more support for signals in general in libstd, maybe more than is properly in scope.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39185/timeline", "performed_via_github_app": null, "state_reason": null}