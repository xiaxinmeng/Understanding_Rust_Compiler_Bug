{"url": "https://api.github.com/repos/rust-lang/rust/issues/9411", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9411/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9411/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9411/events", "html_url": "https://github.com/rust-lang/rust/issues/9411", "id": 19879994, "node_id": "MDU6SXNzdWUxOTg3OTk5NA==", "number": 9411, "title": "RFC: Syntax for raw string literals", "user": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235777, "node_id": "MDU6TGFiZWwyMzU3Nzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-grammar", "name": "A-grammar", "color": "f7e101", "default": false, "description": "Area: The grammar of Rust"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 44, "created_at": "2013-09-22T21:40:16Z", "updated_at": "2019-05-03T08:45:27Z", "closed_at": "2013-10-08T16:15:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A raw string literal is a string literal that does not interpret any embedded sequence, meaning no backslash-escapes. A lot of languages (certainly most that I've used) support some syntax for raw string literals. They're useful for embedding any string that wants to have a bunch of backslashes in it (typically because the function the string is passed to wants to interpret them itself), such as regular expressions. Unfortunately, Rust does not have a raw string literal syntax.\n\nThere's been [a discussion](https://mail.mozilla.org/pipermail/rust-dev/2013-September/005635.html) on the mailing list for the past few days about this. I will try to put a quick summary here.\n\nThere's two questions at stake. The first is, should Rust have a raw string literal syntax? The second is, if so, what particular syntax should be used? I think the answer to the first is definitely Yes. It's useful enough, and has enough overwhelming precedence in other languages, that we should add it. The question of concrete syntax is the harder one.\n\nThe syntaxes that have been proposed so far, along with their Pros and Cons:\n1. C++11 syntax, e.g. `R\"delim(raw text)delim\"`.\n   \n   Pros:\n   - Reasonably straightforward\n   - Can embed any character sequence\n   \n   Cons:\n   - Syntax is slightly complicated (editorial note: I think any syntax that's flexible enough to contain any character is going to be considered slightly complicated).\n2. Python syntax, e.g. `r\"foo\"`\n   \n   Pros:\n   - Simple syntax\n   \n   Cons:\n   - Can't embed any character sequence.\n   - Python's implementation has really wacky handling of backslash escapes in conjunction with the quote character. Even reproducing that behavior does not allow for embedding any sequence, as `r\"foo\\\"\"` evaluates to the string `foo\\\"` (with the literal backslash).\n3. D syntax, e.g. `r\"raw text\"`, ``raw text``, or `q\"(raw text)\"`/`q\"delim\\nraw text\\ndelim\"`\n   \n   Pros:\n   - Can embed any character sequence (with the third variant)\n   \n   Cons:\n   - The first two forms aren't flexible enough, and the third form is a bit confusing. The delimiter behaves differently depending on whether it's a \"nesting\" delimiter (one of ([&lt;{), another token, or an identifier.\n4. C#/SQL/something else, using a simple raw string syntax such as `r\"text\"` where doubling up the quote inserts a single quote, as in `r\"foo\"\"bar\"`\n   \n   Pros:\n   - Simple syntax\n   \n   Cons:\n   - Does not reproduce verbatim every character found in the source sequence, which makes it slightly harder/more confusing to read, and more annoying to do things like pasting a raw string into your source file (e.g. raw HTML).\n5. Perl quote-like operators, e.g. `q{text}`. Unfortunately, most viable delimiters will result in an ambiguous parse.\n6. Ruby quote-like operators, e.g. `%q{text}`. Unfortunately, this also is ambiguous (with the % token).\n7. Lua syntax, e.g. `[=[text]=]`\n   \n   Pros:\n   - Simple syntax\n   - Can embed any character sequence\n   \n   Cons:\n   - Syntax looks decidedly non-string-like\n   - Custom delimiters are limited to sequences of =\n   - Alex Chrichton opined that seeing `println!([[Hello, {}!]], \"world\")` in an introduction to Rust would be awfully confusing (see previous point about being non-string-like).\n8. Go syntax, e.g. ``raw text``. This is one of the variants of D strings as well\n   \n   Pros:\n   - Simple syntax\n   \n   Cons:\n   - Cannot embed any character sequence (notably, cannot embed backtick)\n   - It's difficult or impossible to embed backticks in a markdown code sequence, which will make it awkward to use raw strings in markdown editors. May also be confusing with the usage of `foo` in doc comments.\n9. A new syntax using ASCII Control characters STX and ETX\n   \n   Pros:\n   - I don't think there are any\n   \n   Cons:\n   - Can't type the keys on any keyboard\n   - Text editors probably won't render the characters correctly either\n   - Can't technically embed any character sequence, because ETX cannot be embedded, but in fairness it can embed any _printable_ sequence.\n10. A syntax proposed over IRC is ``delim\"raw text\"delim``.\n    \n    Pros:\n    - Can embed any character\n    \n    Cons:\n    - Unusual syntax with no precedent in other languages. Functionally identical to C++11 syntax.\n    - Hard to type in Markdown editors\n\nSome form of Heredoc syntax was also suggested, but heredocs are really primarily concerned with embedding multiline input, not raw input. They also have issues around dealing with indentation and the first/last newline.\n\nDuring this discussion, only two Rust team members (that I'm aware of) chimed in. Alex Chricton raised issues with the Lua syntax, and threw out the suggestion of Go's syntax, though only as something to consider rather than a recommendation. Felix Klock expressed a preference for C++11 syntax, and more generally stated that he wants a syntax with user-delimited sequences. There was also at least one community member in favor of C++11 syntax.\n\nMy own preference at this point is for C++11 syntax as well. At the very least, something similar to C++11 syntax, that shares all of its properties, but there seems to be no value in inventing a new syntax when there's precedent in C++11.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9411/timeline", "performed_via_github_app": null, "state_reason": "completed"}