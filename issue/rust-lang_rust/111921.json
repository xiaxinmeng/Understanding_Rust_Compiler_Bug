{"url": "https://api.github.com/repos/rust-lang/rust/issues/111921", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111921/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111921/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111921/events", "html_url": "https://github.com/rust-lang/rust/issues/111921", "id": 1724675370, "node_id": "I_kwDOAAsO6M5mzHUq", "number": 111921, "title": "Stdlib contains a static initializer on Linux, without any way to opt out", "user": {"login": "danakj", "id": 342377, "node_id": "MDQ6VXNlcjM0MjM3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/342377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danakj", "html_url": "https://github.com/danakj", "followers_url": "https://api.github.com/users/danakj/followers", "following_url": "https://api.github.com/users/danakj/following{/other_user}", "gists_url": "https://api.github.com/users/danakj/gists{/gist_id}", "starred_url": "https://api.github.com/users/danakj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danakj/subscriptions", "organizations_url": "https://api.github.com/users/danakj/orgs", "repos_url": "https://api.github.com/users/danakj/repos", "events_url": "https://api.github.com/users/danakj/events{/privacy}", "received_events_url": "https://api.github.com/users/danakj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 123110, "node_id": "MDU6TGFiZWwxMjMxMTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-linux", "name": "O-linux", "color": "6e6ec0", "default": false, "description": "Operating system: Linux"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2023-05-24T20:15:31Z", "updated_at": "2023-06-01T20:06:31Z", "closed_at": "2023-06-01T20:06:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Rust stdlib has [a single static initializer](https://github.com/rust-lang/rust/blob/b08148f6a76010ea3d4e91d61245aa7aac59e4b4/library/std/src/sys/unix/args.rs#L107-L127) on the cfg `#[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]`.\r\n\r\nIn general the stdlib is already avoiding static initializers, and this one is added to support interaction with glibc from inside a cdylib. Typically, args::init() is called during startup which initializes the std::env::args() data structures. But in a cdylib, there\u2019s no startup call that gets through, whereas glibc will call the function pointer in this static initializer.\r\n\r\nWe would like to provide a mechanism to remove this static initializer, and accept that std::env::args() will be empty as a result inside a cdylib. Since Chromium (as in chrome.exe) does not use argument parsing in Rust, we are fine with the result being, and prefer, that the argument/environment are empty on Linux with glibc with the static initializer being removed if we have Rust code in a cdylib.\r\n\r\nWhile this particular static initializer is not hugely problematic, it is a much better engineering position to work from if there are none at all.\r\n\r\nChromium bug: https://bugs.chromium.org/p/chromium/issues/detail?id=1445935\r\n\r\n# Static Initializers are a problem\r\n\r\nStatic initialization is known to be a problem, due to the [Static Initialization Order Fiasco](https://en.cppreference.com/w/cpp/language/siof). They also have a measurable negative impact on startup speed, even on modern computers. The Chromium project [bans static initializers](https://chromium.googlesource.com/chromium/src/+/master/docs/static_initializers.md) to avoid these problems.\r\n\r\nMany software shops try to avoid static initializers. The Google C++ Style guide [tries to ban them](https://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables) but hedges a little.\r\n\r\nLLVM provides link-time mechanisms to override a symbol and remove static initializers, such as with [`__llvm_pgo_register_write_atexit()` in compiler-rt](https://github.com/llvm/llvm-project/commit/775c178a90d8859a5da939d738fad248fde6edcd).\r\n\r\n# Removing the Static Initializer\r\n\r\nWe propose to add a feature `explicit-init-args-with-glibc` which defaults off, and gate the static initializer\u2019s presence on this feature.\r\n\r\nAs well, when the feature is enabled, allow the [`args::imp::init()`](https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/library/std/src/sys/unix/args.rs#L99-L105) function to call really_init() directly. Basically, this feature disables the \u201clinux + gnu\u201d cfg check.\r\n\r\nWhen this feature is enabled and the stdlib is linked statically into a Rust executable or Rust dylib, the init() path will be properly called, explicitly.\r\n\r\nWhen statically linked into a C executable or a C shared-library, the init() path [is already not called](https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/library/std/src/rt.rs#L71-L107). When the feature is enabled, it will also not be called in Rust cdylibs, and the `std::env::args()` will not be available.\r\n\r\n# Alternatives\r\n\r\nA colleague suggested we could change the cfg guard in sys/unix/args.rs to be a single check like `#[cfg(use-glibc-static-initializer)]` and then have the `build.rs` file add that cfg flag when on Linux/GNU and the `explicit-init-args-with-glibc` feature is not enabled. This moves the combination of these things to a single place in `build.rs` at the cost of adding a layer of abstraction.\r\n\r\n# Proposed Change\r\n\r\nPR is here: https://github.com/rust-lang/rust/pull/111920", "closed_by": {"login": "danakj", "id": 342377, "node_id": "MDQ6VXNlcjM0MjM3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/342377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danakj", "html_url": "https://github.com/danakj", "followers_url": "https://api.github.com/users/danakj/followers", "following_url": "https://api.github.com/users/danakj/following{/other_user}", "gists_url": "https://api.github.com/users/danakj/gists{/gist_id}", "starred_url": "https://api.github.com/users/danakj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danakj/subscriptions", "organizations_url": "https://api.github.com/users/danakj/orgs", "repos_url": "https://api.github.com/users/danakj/repos", "events_url": "https://api.github.com/users/danakj/events{/privacy}", "received_events_url": "https://api.github.com/users/danakj/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111921/timeline", "performed_via_github_app": null, "state_reason": "completed"}