{"url": "https://api.github.com/repos/rust-lang/rust/issues/100859", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100859/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100859/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100859/events", "html_url": "https://github.com/rust-lang/rust/issues/100859", "id": 1345618032, "node_id": "I_kwDOAAsO6M5QNIBw", "number": 100859, "title": "abuse of DT_GNU_HASH descriptor", "user": {"login": "jreiser", "id": 21363917, "node_id": "MDQ6VXNlcjIxMzYzOTE3", "avatar_url": "https://avatars.githubusercontent.com/u/21363917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreiser", "html_url": "https://github.com/jreiser", "followers_url": "https://api.github.com/users/jreiser/followers", "following_url": "https://api.github.com/users/jreiser/following{/other_user}", "gists_url": "https://api.github.com/users/jreiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreiser/subscriptions", "organizations_url": "https://api.github.com/users/jreiser/orgs", "repos_url": "https://api.github.com/users/jreiser/repos", "events_url": "https://api.github.com/users/jreiser/events{/privacy}", "received_events_url": "https://api.github.com/users/jreiser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-08-21T22:57:57Z", "updated_at": "2022-08-22T09:36:16Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Some executable Rust programs in ELF file format for Linux, often involving the **musl** low-level library, use undocumented \"features\" of the DT_GNU_HASH descriptor for run-time symbol information in an ELF file.  The DT_GNU_HASH descriptor itself is undocumented by GNU binutils, so the \"corner case\" usage by Rust compounds the problem of deterioration of software environment by not agreeing or communicating intended meaning, and proliferation of inconsistent private interpretations.  This GitHub Issue documents problematic occurrences that I have seen, and requests that Rust contribute to creating the documentation of DT_GNU_HASH, including explanation of \"corner cases\" seen so far.\r\n\r\nThe cases appeared when users of UPX (https://github.com/upx/upx) reported that UPX did not understand various Rust-compiled binary executable programs.  UPX wants to understand compiled binary executables in order to compress and de-compress them, and a program's use of specific global symbols can affect UPX; so UPX must lookup those symbols, which are expected to be encoded using DT_HASH and/or DT_GNU_HASH descriptor.  The specific DT_GNU_HASH descriptors used by Rust+musl have presented unusual encodings.\r\n\r\n1. https://github.com/upx/upx/issues/568  DT_GNU_HASH descriptor with no symbol information `(0 == nbucket)`, in a dynamically-linked executable main program that does contain global symbols.  How should this be interpreted?  Is it an attempt to save space, and force a fall-back to linear search of DT_SYMTAB?  If so, then why not save even more space by omitting DT_GNU_HASH entirely?\r\n2. https://github.com/upx/upx/issues/525  An earlier case of DT_GNU_HASH descriptor with no symbol information, but encoded as `(1==n_bucket  && 0==buckets[0] &&  1==n_bitmask && 0==bitmask[0])`.  Save even more space by omitting DT_GNU_HASH entirely.\r\n3. https://github.com/upx/upx/issues/476  First-seen case of DT_GNU_HASH descriptor with no symbol information `(0==nbucket)`, in a statically-linked main program with no symbols.  Save even more space by omitting DT_GNU_HASH entirely.\r\n4. https://github.com/upx/upx/issues/369  `hash_array[j]` is not present if `bucket[k]` is zero for all `k > j`.  So the tail of a complete `hash_array[]` (which should have `nbucket` entries, just like `buckets[]`) would overlap the following table (typically DT_SYMTAB).\r\n\r\nThe `(0==nbuckets)` cases suggest that the input to UPX might have been compromised by malware clobbering the first word of DT_GNU_HASH (and then using the remaining original space as payload for malware); else why was the trivially-shorter encoding of \"no DT_GNU_HASH at all\" not used?  The last case (`hash_array[]` truncated by the start of DT_SYMTAB) also casts doubt on the integrity of the file.  These optimizations for reducing space could well be blessed, _if documented and explained_.  Please lend your weight to getting DT_GNU_HASH documented and annotated.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100859/timeline", "performed_via_github_app": null, "state_reason": null}