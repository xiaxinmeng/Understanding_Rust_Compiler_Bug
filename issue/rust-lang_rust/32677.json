{"url": "https://api.github.com/repos/rust-lang/rust/issues/32677", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32677/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32677/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32677/events", "html_url": "https://github.com/rust-lang/rust/issues/32677", "id": 145344333, "node_id": "MDU6SXNzdWUxNDUzNDQzMzM=", "number": 32677, "title": "Lint for types where cleanup before drop is desirable", "user": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-04-02T06:51:12Z", "updated_at": "2019-09-01T14:15:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`BufWriter.drop` is broken.\n\n`BufWriter` flushes data on `drop` and ignores the result. It is incorrect for two reasons:\n- you must not ignore write errors. For example, when filesystem is full, write fails. Currently last write error is quietly ignored. This code demonstrates the problem: http://is.gd/ZdgbF9\n- `drop` may indefinitly hang, for example, if `BufWrtiter` underlying stream is socket, and nobody reads on the other side\n\nGenerally, I think any `drop` must only release resources, do not do anything blocking or failing.\n\nThe similar issue was only partially fixed in #30888.\n\nWe (together with @cfallin) propose a solution:\n## Proposed solution\n\nAdd another function to `BufWriter` (and probably to `Write` trait): `cancel`. User of `BufWriter` _must_ explicitly call either `flush` or `cancel` prior to drop.\n\n`struct BufWriter` gets `unfinished` flag instead of `panicked`.\n\n`BufWriter.write` unconditionally sets `unfinished = true`.\n\n`BufWriter.flush` or `BufWriter.cancel` unconditionally set `unfinished = false`.\n\nAnd finally, `BufWriter.drop` becomes an assertion:\n\n```\nimpl Drop for BufWriter {\n    fn drop(&mut self) {\n        // check `flush` or `cancel` is explicitly called\n        // but it is OK to discard buffer on panic\n        assert!(!self.unfinished || std::thread::panicking());\n    }\n}\n```\n\nThat change is backward incompatible, however, it is not _that_ bad: developer will likely get panic on first program run, and can quickly fix the code.\n\nChange could be transitional: no-op `cancel` function could be added in rust version current+1 and assertion added in rust version current+2.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32677/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32677/timeline", "performed_via_github_app": null, "state_reason": null}