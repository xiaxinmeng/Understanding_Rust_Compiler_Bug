{"url": "https://api.github.com/repos/rust-lang/rust/issues/110845", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110845/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110845/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110845/events", "html_url": "https://github.com/rust-lang/rust/issues/110845", "id": 1684764113, "node_id": "I_kwDOAAsO6M5ka3XR", "number": 110845, "title": "ICE while re-compiling trait-heavy inferences.", "user": {"login": "AlterionX", "id": 6303968, "node_id": "MDQ6VXNlcjYzMDM5Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/6303968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlterionX", "html_url": "https://github.com/AlterionX", "followers_url": "https://api.github.com/users/AlterionX/followers", "following_url": "https://api.github.com/users/AlterionX/following{/other_user}", "gists_url": "https://api.github.com/users/AlterionX/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlterionX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlterionX/subscriptions", "organizations_url": "https://api.github.com/users/AlterionX/orgs", "repos_url": "https://api.github.com/users/AlterionX/repos", "events_url": "https://api.github.com/users/AlterionX/events{/privacy}", "received_events_url": "https://api.github.com/users/AlterionX/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-04-26T10:40:38Z", "updated_at": "2023-04-26T10:44:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n-->\r\n\r\n### Code\r\n\r\nThe code is, uh, quite expansive if not complex. I copied the probably relevant traits below, but I don't have the time to narrow it down right now.\r\n\r\nI also can't reproduce it on demand, so I think it has to do with incremental compilation. This does happen whenever I adjust the types implementing the following traits.\r\n\r\n```Rust\r\npub struct P {}\r\nimpl FocusedProcessor<A> for P {}\r\nimpl FocusedProcessor<B> for P {}\r\n\r\nfn p() -> impl FullyCapableProcessor {\r\n    P{}\r\n}\r\n```\r\n\r\n```Rust\r\nimpl Request for A {}\r\nimpl Request for B {}\r\npub trait FullyCapableProcessor: Processor<A> + Processor<B> {} // And so on.\r\nimpl <P> FullyCapableProcessor for P where P: Processor<A> + Processor<B> {} // Matching above\r\n```\r\n\r\n```Rust\r\n//! Contains the basic trait that will need to be implemented.\r\n//!\r\n//! The usual way to implement `Processor` for a request is to:\r\n//! - Implement `Contextual`.\r\n//! - Implement `FocusedProcessor` for each request.\r\n//! - Return the struct as a `request::FullyCapableProcessor` to verify that all requests are\r\n//!   handled.\r\n\r\nuse std::{fmt::Debug, any::type_name_of_val};\r\n\r\nuse async_trait::async_trait;\r\nuse dbt::id::{DiscordUserId, DiscordChannelId};\r\nuse tracing::Instrument;\r\n\r\npub trait Contextual {\r\n    type Value<'a>: tracing::Value where Self: 'a;\r\n\r\n    fn ui<'a>(&'a self) -> &'a str;\r\n    fn ui_context(&self) -> Self::Value<'_>;\r\n}\r\n\r\n#[async_trait]\r\npub trait FocusedProcessor<Req: Request + Send + Debug + Sized> {\r\n    async fn process_only(&self, req: Req) -> Req::Output where Req: 'async_trait;\r\n}\r\n\r\n// TODO Consider removing Debug bound.\r\n#[async_trait]\r\npub trait Processor<Req: Request + Send + Debug + Sized>: Sized + Sync {\r\n    /// Processes a request with logging. Delegates to FocusedProcessor.\r\n    async fn process(&self, req: Req) -> Req::Output\r\n        where Req: 'async_trait;\r\n}\r\n\r\n#[async_trait]\r\nimpl <Req: Sized + Send + Debug + Request, P: Sized + Sync + FocusedProcessor<Req> + Contextual> Processor<Req> for P {\r\n    /// Processes a request with logging. Delegates to process_request.\r\n    async fn process(&self, req: Req) -> Req::Output\r\n        where Req: 'async_trait\r\n    {\r\n        let req_name = type_name_of_val(&req);\r\n        log::info!(\"REQUEST-STARTED req={req_name}\");\r\n        let start = chrono::Utc::now();\r\n        let output = self.process_only(req)\r\n            .instrument(tracing::span!(\r\n                tracing::Level::INFO,\r\n                \"REQUEST\",\r\n                ui = self.ui(),\r\n                context = self.ui_context(),\r\n            ))\r\n            .await;\r\n        let end = chrono::Utc::now();\r\n        output.log(req_name);\r\n        let diff = end - start;\r\n        let diff_ns = diff.num_nanoseconds().unwrap_or(-1);\r\n        let diff_ms = diff.num_milliseconds();\r\n        log::info!(\"REQUEST-TIMING req={req_name} duration={diff_ns}ns human={diff_ms}ms\");\r\n        output\r\n    }\r\n}\r\n\r\n#[async_trait]\r\npub trait Request {\r\n    type Output: CompletionLoggable;\r\n}\r\n\r\npub trait CompletionLoggable: Sized {\r\n    /// Once execution returns a value of this type, runs this.\r\n    ///\r\n    /// This function should only log.\r\n    fn log(&self, req_name: &'static str) {\r\n        log::info!(\"REQUEST-COMPLETE req={req_name}\");\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n(pulled from further down)\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.71.0-nightly (fec9adcdb 2023-04-21)\r\nx86_64-unknown-linux-gnu\r\n```\r\n\r\n(Yeah, not up to date, but I've seen it pop up. That plus not being really regularly reproducible kind of makes it hard to updated and see the same error again.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110845/timeline", "performed_via_github_app": null, "state_reason": null}