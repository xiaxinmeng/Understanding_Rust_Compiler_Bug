{"url": "https://api.github.com/repos/rust-lang/rust/issues/4499", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/4499/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/4499/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/4499/events", "html_url": "https://github.com/rust-lang/rust/issues/4499", "id": 9989435, "node_id": "MDU6SXNzdWU5OTg5NDM1", "number": 4499, "title": "What are semantics of empty enums that have been artificially fabricated?", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2013-01-15T18:32:19Z", "updated_at": "2014-04-01T11:47:58Z", "closed_at": "2014-04-01T11:46:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Updated bug report follows (see bottom for original bug report)\n\nThis bug appears to have been filed in error but then spawned a very interesting conversation.\n\nThe question centers around how empty enums (e.g. `enum Foo { }`, which has _zero_ variants) which in principle cannot safely exist, interact with our casting operations (namely safe `as` and unsafe`cast::transmute`).\n\nHere is an some code that I wrote that summarizes the various scenarios that were described in the comments.  Most of the scenarios do not compile (which is good).  The fifth, sixth, and seventh all compile; their runtime behaviors vary, but most are acceptable.  The _only_ questionable thing @pnkfelix can see here is the behavior for the seventh example, `cfg ex7`.\nCode:\n\n``` rust\n#[allow(dead_code)];\nuse std::cast;\nenum Foo { }\nstruct Bar;\n\n#[cfg(ex1)]\nfn main() {\n    let i = Foo as int;\n    println!(\"i: {:?}\", i);\n}\n\n#[cfg(ex2)]\nfn main() {\n    fn f(f: Foo) -> int { f as int }\n}\n\n#[cfg(ex3)]\nfn main() {\n    let i : Foo = unsafe { cast::transmute(3) };\n    println!(\"i: {:?}\", i);\n}\n\n#[cfg(ex4)]\nfn main() {\n    let b : Bar = Bar;\n    let i : Foo = b as Foo;\n    println!(\"b: {:?}\", b);\n    println!(\"i: {:?}\", i);\n}\n\n#[cfg(ex5)]\nfn main() {\n    let b : Bar = Bar;\n    let i : Foo = unsafe { cast::transmute(b) };\n    println!(\"b: {:?}\", b);\n    println!(\"i: {:?}\", i);\n}\n\n#[cfg(ex6)]\nfn main() {\n    let b : Bar = Bar;\n    let i : Foo = unsafe { cast::transmute(b) };\n    println!(\"b: {:?}\", b);\n    match i {\n    }\n}\n\n#[cfg(ex7)]\nfn main() {\n    let b : Bar = Bar;\n    let i : Foo = unsafe { cast::transmute(b) };\n    println!(\"b: {:?}\", b);\n    match i {\n        _ => { println!(\"The impossible!\"); }\n    }\n}\n```\n\nTranscript of compile (+ runs when compilable):\n\n```\n% rustc --cfg ex1 /tmp/ee.rs && ./ee\n/tmp/ee.rs:8:13: 8:16 error: unresolved name `Foo`.\n/tmp/ee.rs:8     let i = Foo as int;\n                         ^~~\nerror: aborting due to previous error\n% rustc --cfg ex2 /tmp/ee.rs && ./ee\n/tmp/ee.rs:14:27: 14:35 error: non-scalar cast: `Foo` as `int`\n/tmp/ee.rs:14     fn f(f: Foo) -> int { f as int }\n                                        ^~~~~~~~\nerror: aborting due to previous error\n% rustc --cfg ex3 /tmp/ee.rs && ./ee\n/tmp/ee.rs:1:1: 1:1 error: transmute called on types with different sizes: int (64 bits) to Foo (0 bits)\n/tmp/ee.rs:1 #[allow(dead_code)];\n             ^\n% rustc --cfg ex4 /tmp/ee.rs && ./ee\n/tmp/ee.rs:26:19: 26:27 error: non-scalar cast: `Bar` as `Foo`\n/tmp/ee.rs:26     let i : Foo = b as Foo;\n                                ^~~~~~~~\nerror: aborting due to previous error\n% rustc --cfg ex5 /tmp/ee.rs && ./ee\nb: Bar\ntask '<main>' failed at 'enum value matched no variant', /Users/fklock/Dev/Mozilla/rust.git/src/libstd/repr.rs:559\n% rustc --cfg ex6 /tmp/ee.rs && ./ee\nb: Bar\ntask '<main>' failed at 'scrutinizing value that can't exist', /tmp/ee.rs:44\n% rustc --cfg ex7 /tmp/ee.rs && ./ee\nb: Bar\nThe impossible!\n% \n```\n## Original bug report follows:\n\nSomething like this works:\n\n```\nenum Foo { }\n\nlet i = Foo as int;\n```\n\nDoesn't make any sense.\n", "closed_by": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/4499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/4499/timeline", "performed_via_github_app": null, "state_reason": "completed"}