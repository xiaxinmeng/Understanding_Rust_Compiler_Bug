{"url": "https://api.github.com/repos/rust-lang/rust/issues/59725", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59725/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59725/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59725/events", "html_url": "https://github.com/rust-lang/rust/issues/59725", "id": 429783131, "node_id": "MDU6SXNzdWU0Mjk3ODMxMzE=", "number": 59725, "title": "[Stabilization] Future APIs", "user": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 923282386, "node_id": "MDU6TGFiZWw5MjMyODIzODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/finished-final-comment-period", "name": "finished-final-comment-period", "color": "f9e189", "default": false, "description": "The final comment period is finished for this PR / Issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 68, "created_at": "2019-04-05T14:26:51Z", "updated_at": "2019-05-03T06:21:34Z", "closed_at": "2019-05-03T06:21:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature name: futures_api\r\nStabilization target: 1.36.0\r\nTracking issue: #59113\r\nRelated RFCs:\r\n* rust-lang/rfcs#2592 Futures API\r\n* rust-lang/rfcs#2394 async/await\r\n* (closed) rust-lang/rfcs#2395 Futures API\r\n* (closed) rust-lang/rfcs#2418 Futures API\r\n\r\n**I propose that we stabilize the `futures_api` feature, making the Future trait available on stable Rust.** This is an important step in stabilizing the async/await feature and providing a stable, ergonomic, zero-cost abstraction for async IO in Rust.\r\n\r\nThe futures API was first introduced as a part of the std library prior to 1.0. It was removed from std shortly after 1.0, and was developed outside of std in an external crate called futures, first released in 2016. Since that time, the API has undergone significant evolution.\r\n\r\nAll the APIs being stabilized are exposed through both core and std.\r\n\r\n## The `future` Module\r\n\r\nWe shall stabilize these items in the future module:\r\n\r\n* The `std::future` module itself\r\n* The `std::future::Future` trait and both of its associated items (`Output` and `poll`)\r\n\r\nWe do not stabilize the other items in this module, which are implementation details of async/await as it currently exists that are not intended to be stabilized.\r\n\r\n## The `task` Module\r\n\r\nWe shall stabilize these items in the task module:\r\n\r\n* The `std::task` module itself\r\n* The `std::task::Poll` enum\r\n* The `std::task::Waker` struct and all three of its methods (wake, wake_by_ref, will_wake, and new_unchecked). new_unchecked shall be **renamed** to from_raw.\r\n* The `std::task::RawWaker` type and its method `new`\r\n* The `std::task::RawWakerVTable` type and its method `new` (see #59919)\r\n* The `std::task::Context` type and its methods `from_waker` and `waker`\r\n\r\n## Notice: Late Changes to the API\r\n\r\nWe have decided to merge the future-proofing changes proposed in #59119 to leave room for some potential extensions to the API after stabilization. See further discussion on that issue.\r\n\r\n## Notes on Futures\r\n\r\n### The poll-based model\r\n\r\nUnlike other languages, the Future API in Rust uses a poll based execution model. This follows a back and forth cycle involving an executor (which is responsible for executing futures) and a reactor (which is responsible for managing IO events):\r\n\r\n* **Poll:** The executor polls a spawned future until it returns. It passes in a waker; waking that waker will cause the executor to poll this future again. If the future encounters IO, it gives the waker to the reactor and returns pending.\r\n* **Wake:** Once there is more progress to be made by polling the future, the reactor calls the wake method on the waker it has registered. This causes the future to be polled again by the executor, continuing the cycle.\r\n\r\nEventually, the future returns ready instead of pending, indicating that the future has completed.\r\n\r\n### Pinning\r\n\r\nThe Future trait takes self by `Pin<&mut Self>`. This is based on the pinning APIs stabilized in 1.33. This contract allows implementers to assume that once a future is being polled, it will not be moved again. The primary benefit of this is that async items can have borrows across await points, desugared into self-referential fields of the anonymous future type.\r\n\r\n## Changes proposed in this stabilization report\r\n\r\n* `Waker::new_unchecked` is renamed to `Waker::from_raw`\r\n\r\nstd has unsafe constructors following both names, from_raw is more specific than new_unchecked (its a constructor taking the \"raw\" type which is possibly invalid, asserting that this instance is valid).\r\n\r\n* `Waker::wake` takes self by value and new `Waker::wake_by_ref` takes self by reference\r\n\r\nThe most common waker implementation is to be an arc of the task which re-enqueues itself when the waker is woken; to implement this by reference, you must clone the arc and put it on the queue. But most uses of wake drop the waker as soon as they call wake. This results in an unnecessary atomic reference increment and decrement; instead we now provide by a by-value and by-reference implementation, so users can use the form most optimal for their situation.\r\n\r\n## Moderation note\r\n\r\nThe futures APIs have been discussed at enormous length over the past 3 years. Every aspect of the API has been debated, reviewed and considered by the relevant teams and the Rust community as a whole. When posting to this thread, please make a good faith effort to review the history and see if your concern or proposal has been posted before, and how and why it was resolved.", "closed_by": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59725/reactions", "total_count": 348, "+1": 74, "-1": 0, "laugh": 0, "hooray": 156, "confused": 0, "heart": 77, "rocket": 41, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59725/timeline", "performed_via_github_app": null, "state_reason": "completed"}