{"url": "https://api.github.com/repos/rust-lang/rust/issues/80638", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80638/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80638/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80638/events", "html_url": "https://github.com/rust-lang/rust/issues/80638", "id": 777571944, "node_id": "MDU6SXNzdWU3Nzc1NzE5NDQ=", "number": 80638, "title": "Confusing diagnostics resulting from a function with the bound `T: FnOnce() -> T` that takes `T` and returns `T`", "user": {"login": "PatchMixolydic", "id": 8634700, "node_id": "MDQ6VXNlcjg2MzQ3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8634700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PatchMixolydic", "html_url": "https://github.com/PatchMixolydic", "followers_url": "https://api.github.com/users/PatchMixolydic/followers", "following_url": "https://api.github.com/users/PatchMixolydic/following{/other_user}", "gists_url": "https://api.github.com/users/PatchMixolydic/gists{/gist_id}", "starred_url": "https://api.github.com/users/PatchMixolydic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PatchMixolydic/subscriptions", "organizations_url": "https://api.github.com/users/PatchMixolydic/orgs", "repos_url": "https://api.github.com/users/PatchMixolydic/repos", "events_url": "https://api.github.com/users/PatchMixolydic/events{/privacy}", "received_events_url": "https://api.github.com/users/PatchMixolydic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-01-03T04:36:59Z", "updated_at": "2021-02-23T02:47:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=4c66b2f455d1d8e600ba92650cb8a772)):\r\n\r\n```rust\r\nfn closure_ret_closure<T: FnOnce() -> T>(f: T) -> T {\r\n    f()\r\n}\r\n\r\nfn main() {\r\n    closure_ret_closure(|| 4);\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\n\r\nEither a diagnostic proclaiming that the type parameter for `closure_ret_closure` is recursive or a diagnostic that clearly states that `|| 4` does not return `FnOnce() -> FnOnce() -> FnOnce() -> ...`.\r\n\r\nInstead, this happened:\r\n\r\nTwo seemingly conflicting diagnostics are emitted:\r\n```\r\nerror[E0277]: expected a `FnOnce<()>` closure, found `{integer}`\r\n --> src/main.rs:6:5\r\n  |\r\n1 | fn closure_ret_closure<T: FnOnce() -> T>(f: T) -> T {\r\n  |                           ------------- required by this bound in `closure_ret_closure`\r\n...\r\n6 |     closure_ret_closure(|| 4);\r\n  |     ^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<()>` closure, found `{integer}`\r\n  |\r\n  = help: the trait `FnOnce<()>` is not implemented for `{integer}`\r\n  = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\r\n\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:6:25\r\n  |\r\n6 |     closure_ret_closure(|| 4);\r\n  |                         ^^^^ expected integer, found closure\r\n  |\r\n  = note: expected type `{integer}`\r\n          found closure `[closure@src/main.rs:6:25: 6:29]`\r\n```\r\n\r\nThe first diagnostic claims that `{integer}`, the type of the value returned by the closure, is not a `FnOnce() -> ...`. It is not immediately clear that this is in reference to the return type, so the user may believe the value in question is the parameter.\r\n\r\nThe second diagnostic claims that it expects the parameter to be of type `{integer}`. This is quite strange, because the previous diagnostic just told us that `T: FnOnce() -> FnOnce() -> ...`, and `{integer}` does not fit that requirement.\r\n\r\nWhat may be happening is that since the result of calling `|| 4` is of type `{integer}`, the compiler believes `T` must be `{integer}`. Since `{integer}` does not implement `FnOnce() -> {integer}`, it doesn't fit the bounds on `T`, generating the first diagnostic. Then, the compiler sees that `|| 4` is not a valid argument to `closure_ret_closure`, since `f: T` and for this monomorphization, `T` = `{integer}`.\r\n\r\nEven writing out the logic behind this error is quite confusing, so it would be helpful to improve these diagnostics in case a user accidentally stumbles upon them. I'm not entirely sure how to accomplish this, but making it clearer that the first diagnostic (E0277) is referring to the return type might help.\r\n\r\nUnfortunately, I'm not sure if anything can be done regarding the rather strange `T: FnOnce() -> T` bound, since it's quite possible to implement a type that *can* satisfy `T: FnOnce() -> T` on nightly. This compiles and runs successfully ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=8b7e341a0adc90c36f310cf4d5c4daf0)):\r\n```rust\r\n#![feature(fn_traits)]\r\n#![feature(unboxed_closures)]\r\n\r\nstruct Foo;\r\n\r\nimpl FnOnce<()> for Foo {\r\n    type Output = Self;\r\n\r\n    extern \"rust-call\" fn call_once(self, _: ()) -> Self::Output {\r\n        self\r\n    }\r\n}\r\n\r\nfn closure_ret_closure<T: FnOnce() -> T>(f: T) -> T {\r\n    f()\r\n}\r\n\r\nfn main() {\r\n    closure_ret_closure(Foo);\r\n}\r\n```\r\n\r\nSince (as far as I know) `FnOnce` can only be implemented on nightly, we may be able to get away with making trait bounds like `T: FnOnce() -> T` a deny-by-default lint, or at least warn-by-default. I'm not certain if this would be entirely feasible/possible with the current trait system, however, since that would be equivalent to linting against this:\r\n\r\n```rust\r\ntrait Foo {\r\n    type Bar;\r\n}\r\n\r\nfn baz<T: Foo<Bar = T>>(_: T) { unimplemented!() }\r\n```\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.48.0 (7eac88abb 2020-11-16)\r\nbinary: rustc\r\ncommit-hash: 7eac88abb2e57e752f3302f02be5f3ce3d7adfb4\r\ncommit-date: 2020-11-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.48.0\r\nLLVM version: 11.0\r\n```\r\n\r\n`rustc +nightly --version --verbose`:\r\n```\r\nrustc 1.51.0-nightly (257becbfe 2020-12-27)\r\nbinary: rustc\r\ncommit-hash: 257becbfe4987d1f7b12af5a8dd5ed96697cd2e8\r\ncommit-date: 2020-12-27\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.51.0-nightly\r\n```\r\n\r\n@rustbot modify labels: +A-diagnostics +A-traits +C-enhancement +D-confusing +T-compiler", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80638/timeline", "performed_via_github_app": null, "state_reason": null}