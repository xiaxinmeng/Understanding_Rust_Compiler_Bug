{"url": "https://api.github.com/repos/rust-lang/rust/issues/58531", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58531/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58531/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58531/events", "html_url": "https://github.com/rust-lang/rust/issues/58531", "id": 411162115, "node_id": "MDU6SXNzdWU0MTExNjIxMTU=", "number": 58531, "title": "Diagnostic for `dyn Self` could be more specific", "user": {"login": "wchargin", "id": 4317806, "node_id": "MDQ6VXNlcjQzMTc4MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/4317806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wchargin", "html_url": "https://github.com/wchargin", "followers_url": "https://api.github.com/users/wchargin/followers", "following_url": "https://api.github.com/users/wchargin/following{/other_user}", "gists_url": "https://api.github.com/users/wchargin/gists{/gist_id}", "starred_url": "https://api.github.com/users/wchargin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wchargin/subscriptions", "organizations_url": "https://api.github.com/users/wchargin/orgs", "repos_url": "https://api.github.com/users/wchargin/repos", "events_url": "https://api.github.com/users/wchargin/events{/privacy}", "received_events_url": "https://api.github.com/users/wchargin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-17T08:26:05Z", "updated_at": "2020-06-11T17:36:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Code ([play]):\r\n\r\n```rust\r\ntrait S {\r\n    fn f() -> dyn Self;\r\n}\r\n```\r\n\r\n[play]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6f2a1b502460a961d6e5f33abace4dcd\r\n\r\nCurrent diagnostic (1.34.0-nightly 2019-02-15 eac09088e1a8fc8a2930):\r\n\r\n```\r\nerror[E0411]: expected trait, found self type `Self`\r\n --> src/lib.rs:2:19\r\n  |\r\n2 |     fn f() -> dyn Self;\r\n  |                   ^^^^ `Self` is only available in impls, traits, and type definitions\r\n```\r\n\r\n@Moongoodboy-K on IRC points out that it might be more helpful for the\r\ndiagnostic to say something like,\r\n\r\n> expected trait, found concrete type `Self`\r\n>\r\n> (help: `Self` refers to the concrete type implementing this trait)\r\n\r\n(For context: while I\u2019ve since learned that this code is pretty far from\r\nvalid, the intent was to find a way to use `Self`-types while preserving\r\nobject-safety. My intuition was that it should suffice to return the\r\nreceiver\u2019s vtable from the function, which suggested to me the syntax\r\n`dyn Self`. Using simply `fn f() -> dyn S` is object-safe but loses the\r\nself-typing, which might matter if given something like `dyn S + Send`.)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58531/reactions", "total_count": 3, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58531/timeline", "performed_via_github_app": null, "state_reason": null}