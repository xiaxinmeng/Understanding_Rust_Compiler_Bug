{"url": "https://api.github.com/repos/rust-lang/rust/issues/44454", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44454/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44454/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44454/events", "html_url": "https://github.com/rust-lang/rust/issues/44454", "id": 256435333, "node_id": "MDU6SXNzdWUyNTY0MzUzMzM=", "number": 44454, "title": "unsoundness relating to WF requirements on trait object types", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-09-09T12:14:13Z", "updated_at": "2022-12-11T11:42:13Z", "closed_at": "2022-12-11T11:42:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "So @scalexm pointed me at this [curious example](https://play.rust-lang.org/?gist=d68b1c79fa99bf17a18afb3f4649ca77&version=undefined):\n\n```rust\ntrait Animal<X>: 'static { }\n\nfn foo<Y, X>() where Y: Animal<X> + ?Sized {\n    // `Y` implements `Animal<X>` so `Y` is 'static.\n    baz::<Y>()\n}\n\nfn bar<'a>(arg: &'a i32) {\n    foo::<Animal<&'a i32>, &'a i32>()\n    \n    // If you uncomment this line, you will get an error.\n    //baz::<Animal<&'a i32>>()\n}\n\nfn baz<T: 'static + ?Sized>() {\n}\n\nfn main() {\n    let a = 5;\n    bar(&a);\n}\n```\n\nThere's a lot going on here, but the key point is that, in the call to `foo::<Animal<&'a i32>, &'a i32>`, we assume that `Animal<&'a i32>: Animal<&'a i32>`. This is *reasonable*, since it's a trait object type -- however, it is a malformed trait object type, and hence one where no impl could ever exist (i.e., we could never make an instance of this type). Interestingly, we are not smart enough to extend this to the case where the `'static` bound is applied *directly* (hence the commented out call to `baz::<Animal<&'a i32>>`.\n\nAt the very least, this is inconsistent behavior, but I *feel* like there is an unsoundness lurking here. What makes me nervous is that we say that a projection type `<P0 as Trait<P1...Pn>>::Foo` outlives `'a` if `Pi: 'a` for all `i`. I am worried that you could use an impl like this:\n\n```rust\ntrait Projector { type Foo; }\n\nimpl<X> Projector for Animal<X> {\n  type Foo = X;\n}\n```\n\nto prove then that `<Animal<&'a i32> as Projector>::Foo` outlives `'static` (say). I have not yet quite managed to weaponize this, but I got [pretty close](https://play.rust-lang.org/?gist=e236ed5a041ad6864fc1e5e401d9bd36&version=stable) -- that's a gist in which we invoke a function `is_static<U: 'static>(u: U)` where `U` will be of type `&'a i32` when monomophized. If rustc were as smart as chalk, I suspect we could easily craft a transmute of some kind to `&'static i32`. There may be a way to do it within current rustc too.\n\nI'm not sure what's the best fix here. I *suspect* we should require that trait object types meet the WF requirements declared on the trait; and yet, I think the reason we did not is because we don't know the `Self` type, which means we can't fully validate that. =) This also feels a mite inconsistent with implied bounds. (Perhaps most likely is that we could tweak the WF rules for trait objects to specifically target lifetime bounds, but I have to think about that, feels .. hacky?)\n\nWe could tweak the notion of what type parameters are *constrained* -- or at least which may appear in a projection. e.g., we could disallow that impl of `Projector` for `Animal<X>`, because `X` would not be considered \"sufficiently\" constrained to appear in `type Foo = ...`. Backwards incompatible, obviously, and feels unfortunate.\n\n---\n\nThis causes [actual unsoundness](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=21ac29bdd059c4ba91e23c52d267f4b4), as discovered by @scalexm in https://github.com/rust-lang/rust/issues/44454#issuecomment-328283082;\n\n```rust\nuse std::any::Any;\n\ntrait Animal<X>: 'static { }\n\ntrait Projector {\n  type Foo;\n}\n\nimpl<X> Projector for dyn Animal<X> {\n  type Foo = X;\n}\n\nfn make_static<'a, T>(t: &'a T) -> &'static T {\n    let x: <dyn Animal<&'a T> as Projector>::Foo = t;\n    let any = generic::<dyn Animal<&'a T>, &'a T>(x);\n    any.downcast_ref::<&'static T>().unwrap()\n}\n\nfn generic<T: Projector + Animal<U> + ?Sized, U>(x: <T as Projector>::Foo)\n    -> Box<dyn Any>\n{\n    make_static_any(x)\n}\n\nfn make_static_any<U: 'static>(u: U) -> Box<dyn Any> {\n    Box::new(u)\n}\n\nfn main() {\n    let a = make_static(&\"salut\".to_string());\n    println!(\"{}\", *a);\n}\n```\n\ncc @arielb1 @aturon \n\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"oli-obk\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44454/timeline", "performed_via_github_app": null, "state_reason": "completed"}