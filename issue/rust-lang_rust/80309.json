{"url": "https://api.github.com/repos/rust-lang/rust/issues/80309", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/80309/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/80309/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/80309/events", "html_url": "https://github.com/rust-lang/rust/issues/80309", "id": 773262598, "node_id": "MDU6SXNzdWU3NzMyNjI1OTg=", "number": 80309, "title": "Miscompilation when using wrapping_sub/wrapping_add on pointer.", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2020-12-22T21:24:54Z", "updated_at": "2022-02-06T08:34:47Z", "closed_at": "2022-02-06T08:34:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "[Relevant comment on IRLO](https://internals.rust-lang.org/t/pointers-are-complicated-ii-or-we-need-better-language-specs/13562/25?u=steffahn). The following code leads to `illegal instruction` in release mode. (It works fine, printing `42` in debug mode.)\r\n\r\n```rust\r\npub unsafe fn foo(x: *const i8) -> i8 {\r\n    *x.wrapping_sub(x as _).wrapping_add(x as _)\r\n}\r\n\r\nfn main() {\r\n    let x = 42;\r\n    println!(\"{}\", unsafe {foo(&x)});\r\n}\r\n```\r\nApparently, leaving the object `x` with a `wrapping_sup`, then going back into the object with `wrapping_add` and dereferencing the resulting pointer is supposed to be safe (although there is still an open issue (#80306) about properly documenting that this is safe).\r\n\r\nAs discussed in the linked IRLO thread, what\u2019s probably happening here is that LLVM realizes that the first `x.wrapping_sub(x as _)` evaluates to the null pointer, and then considers the code equivalent to something like `*std::ptr::null().wrapping_add(x as _)` which is then detected as UB (dereferencing some integer offset of the null pointer), hence the illegal instruction.\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=3fcc0c74aa07be2f1b3420dd63b28f77))\r\n\r\nErrors:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\n    Finished release [optimized] target(s) in 1.03s\r\n     Running `target/release/playground`\r\ntimeout: the monitored command dumped core\r\n/playground/tools/entrypoint.sh: line 11:     7 Illegal instruction     timeout --signal=KILL ${timeout} \"$@\"\r\n\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/80309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/80309/timeline", "performed_via_github_app": null, "state_reason": "completed"}