{"url": "https://api.github.com/repos/rust-lang/rust/issues/42226", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42226/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42226/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42226/events", "html_url": "https://github.com/rust-lang/rust/issues/42226", "id": 231450991, "node_id": "MDU6SXNzdWUyMzE0NTA5OTE=", "number": 42226, "title": "Unclear errors with type annotations on functions instead of their traits", "user": {"login": "Susurrus", "id": 206363, "node_id": "MDQ6VXNlcjIwNjM2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/206363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Susurrus", "html_url": "https://github.com/Susurrus", "followers_url": "https://api.github.com/users/Susurrus/followers", "following_url": "https://api.github.com/users/Susurrus/following{/other_user}", "gists_url": "https://api.github.com/users/Susurrus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Susurrus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Susurrus/subscriptions", "organizations_url": "https://api.github.com/users/Susurrus/orgs", "repos_url": "https://api.github.com/users/Susurrus/repos", "events_url": "https://api.github.com/users/Susurrus/events{/privacy}", "received_events_url": "https://api.github.com/users/Susurrus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "closed", "locked": false, "assignee": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-05-25T20:31:55Z", "updated_at": "2021-01-19T02:54:58Z", "closed_at": "2021-01-19T02:54:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A common problem I run into is that I add type annotations to `into` where it should really be on the `Into` trait instead. The error messages given for this are not helpful because they don't suggest adding type annotations to the Trait and then using UFCS instead of method syntax.\r\n\r\nSo what happens is that I write my code thinking `rustc` can figure out the types, but it fails. A rough example is as follows ([on play.rust-lang.org](https://is.gd/nwt9iC)):\r\n```rust\r\nstruct Y {}\r\n\r\nimpl Y {\r\n    pub fn new() -> Self {\r\n        Y{}\r\n    }\r\n}\r\n\r\nimpl Into<u32> for Y {\r\n    fn into(self) -> u32 {\r\n        0u32\r\n    }\r\n}\r\n\r\nfn some_func(d: u32) {}\r\n\r\nfn main() {\r\n    let y = Y::new();\r\n    let x = y.into() * 512u32;\r\n    some_func(x)\r\n}\r\n```\r\n\r\nSo I think that `rustc` could infer all the types here, but it fails with:\r\n```\r\nerror[E0283]: type annotations required: cannot resolve `Y: std::convert::Into<_>`\r\n  --> <anon>:20:15\r\n   |\r\n20 |     let x = y.into() * 512u32;\r\n   |               ^^^^\r\n```\r\n\r\nOkay, that's fine, I can add some type annotations then. Now I only frequently work with type annotations on functions, so forgetting that the type annotation for `Into` is on the trait and not the function, I replace the `let x...` line above with `let x = y.into::<u32>() * 512u32;` ([on play.rust-lang.org](https://is.gd/2ezOVm)) and get the following error:\r\n```\r\nerror[E0035]: does not take type parameters\r\n  --> <anon>:20:15\r\n   |\r\n20 |     let x = y.into::<u32>() * 512u32;\r\n   |               ^^^^ called with unneeded type parameters\r\n```\r\n\r\nAnother thing I end up trying is to explicitly specify the type of `x` by changing the `let x...` line to `let x: u32 = y.into() * 512u32;`, but you get the same initial error (E0283).\r\n\r\nSo a correct solution to this problem is to add the type annotations to `Into` like so `let x = Into::<u32>::into(y) * 512u32;`\r\n\r\nSo my proposal here is twofold: 1) allow type inference to work for this example (which is quite reminiscent of code that I write) and 2) improve both E0283 and E0035.\r\n\r\nFor point 2, I think it would be possible to detect this exact situation and specify the correct solution.If the compiler sees type annotations on a function that doesn't have any, check the trait it's from and see if the trait itself takes type parameters. You could ignore the number of parameters specified to make this simpler and change E0035 to have help text at the bottom like:\r\n```\r\nerror[E0035]: `into()` does not take type parameters\r\n  --> <anon>:20:15\r\n   |\r\n20 |     let x = y.into::<u32>() * 512u32;\r\n   |               ^^^^ called with unneeded type parameters\r\n   |\r\n   = help: Did you mean to specify type parameters to the trait `Into` instead?\r\n           Possibly try instead `Into::<u32>::into(y)`\r\n```\r\n\r\nSomething similar can be done for E0283. I don't know if there's a way that the compiler could tell if a type annotation on the output would work or if it has to be an input type annotation on the right-hand side, but I think defaulting to specifying the type directly would be the right solution anyways. Again I think the heuristic should be if there is a function that doesn't have a type annotation but its trait does then it should add help text to the error similar to that for E0035:\r\n```\r\nerror[E0283]: type annotations required: cannot resolve `Y: std::convert::Into<_>`\r\n  --> <anon>:20:15\r\n   |\r\n20 |     let x = y.into() * 512u32;\r\n   |               ^^^^\r\n   |\r\n   = help: Specify the type for `y.into()` like `Into::<XXX>::into(y)`, substituting the desired\r\n           type for XXX.\r\n```\r\n\r\nNote: These examples were run on `rustc 1.17.0 (56124baa9 2017-04-24)`\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"sasurau4\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42226/reactions", "total_count": 14, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 14, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42226/timeline", "performed_via_github_app": null, "state_reason": "completed"}