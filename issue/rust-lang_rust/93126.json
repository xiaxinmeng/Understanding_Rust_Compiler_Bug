{"url": "https://api.github.com/repos/rust-lang/rust/issues/93126", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93126/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93126/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93126/events", "html_url": "https://github.com/rust-lang/rust/issues/93126", "id": 1109708292, "node_id": "I_kwDOAAsO6M5CJM4E", "number": 93126, "title": "Is  `std::fs::copy` racy and/or under-specified in how it sets file permissions?", "user": {"login": "briansmith", "id": 16816, "node_id": "MDQ6VXNlcjE2ODE2", "avatar_url": "https://avatars.githubusercontent.com/u/16816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briansmith", "html_url": "https://github.com/briansmith", "followers_url": "https://api.github.com/users/briansmith/followers", "following_url": "https://api.github.com/users/briansmith/following{/other_user}", "gists_url": "https://api.github.com/users/briansmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/briansmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briansmith/subscriptions", "organizations_url": "https://api.github.com/users/briansmith/orgs", "repos_url": "https://api.github.com/users/briansmith/repos", "events_url": "https://api.github.com/users/briansmith/events{/privacy}", "received_events_url": "https://api.github.com/users/briansmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-01-20T19:56:02Z", "updated_at": "2023-04-26T16:05:37Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The documentation for `std::fs::copy` says \"This function will also copy the permission bits of the original file to the destination file.\"\r\n\r\nI do think the function adheres to that contract. But, is that contract strong enough? \r\n\r\nConsider a file that is isn't readable by the group or world that is passed to `std::fs::copy`. My expectation is that the copied file would never have group or world file permissions different from the source file. However, currently, between the time `fs::File::create` is called and the time `writer.set_permissions` is called, the destination file may have group/world permissions different than (and in particular, potentially more liberal than) the source file's permissions.\r\n\r\nFurther, what if, for some reason, the `set_permissions` call fails, or the process is killed before then? Then with the current code we'd be left with a group-/world-readable file. \r\n\r\nIt seems like instead, when we create the file, we should use a syscall that ensures the file is created with the source file's permissions. \r\n\r\nIf the file is read-only for the current user, then maybe we need to add the user write permission during creation, and then remove it when we're done writing? If we do this, then we should document that the file may be left writable if errors occur or the process crashes.\r\n\r\nAt a minimum, the documentation needs to be updated to consider these cases.\r\n\r\n```\r\npub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\r\n    let mut reader = fs::File::open(from)?;\r\n    let metadata = reader.metadata()?;\r\n\r\n    if !metadata.is_file() {\r\n        return Err(NOT_FILE_ERROR);\r\n    }\r\n\r\n    let mut writer = fs::File::create(to)?;\r\n    let perm = metadata.permissions();\r\n\r\n    let ret = io::copy(&mut reader, &mut writer)?;\r\n    writer.set_permissions(perm)?;\r\n    Ok(ret)\r\n}\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93126/timeline", "performed_via_github_app": null, "state_reason": null}