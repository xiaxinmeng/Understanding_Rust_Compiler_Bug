{"url": "https://api.github.com/repos/rust-lang/rust/issues/38597", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38597/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38597/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38597/events", "html_url": "https://github.com/rust-lang/rust/issues/38597", "id": 197479733, "node_id": "MDU6SXNzdWUxOTc0Nzk3MzM=", "number": 38597, "title": "ToOwned trait bound not accepted for u8", "user": {"login": "nyarly", "id": 127548, "node_id": "MDQ6VXNlcjEyNzU0OA==", "avatar_url": "https://avatars.githubusercontent.com/u/127548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyarly", "html_url": "https://github.com/nyarly", "followers_url": "https://api.github.com/users/nyarly/followers", "following_url": "https://api.github.com/users/nyarly/following{/other_user}", "gists_url": "https://api.github.com/users/nyarly/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyarly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyarly/subscriptions", "organizations_url": "https://api.github.com/users/nyarly/orgs", "repos_url": "https://api.github.com/users/nyarly/repos", "events_url": "https://api.github.com/users/nyarly/events{/privacy}", "received_events_url": "https://api.github.com/users/nyarly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-12-24T22:33:20Z", "updated_at": "2016-12-25T07:41:27Z", "closed_at": "2016-12-25T07:41:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "While `to_owned()` called on a reference to a `u8` returns a `u8`, a trait bound function doesn't accept `u8`/`&u8` as type parameters\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::collections::btree_map::BTreeMap;\r\nuse std::fmt::Debug;\r\nuse std::borrow::Borrow;\r\n\r\n#[derive(Clone, Debug)]\r\npub struct Counts<T> {\r\n    counts: BTreeMap<T, u32>,\r\n    total: u32,\r\n}\r\n\r\nimpl<T: Ord + Clone + Debug> Counts<T> {\r\n    pub fn new<L, R>(list: L) -> Counts<T>\r\n        where L: IntoIterator<Item = R>,\r\n              R: ToOwned<Owned = T> + Sized,\r\n              T: Borrow<R>\r\n    {\r\n        let mut fc = BTreeMap::new();\r\n        let mut count = 0;\r\n        for it in list {\r\n            let entry = fc.entry(it.to_owned()).or_insert(0);\r\n            *entry += 1;\r\n            count += 1\r\n        }\r\n\r\n        Counts {\r\n            counts: fc,\r\n            total: count,\r\n        }\r\n    }\r\n}\r\n\r\n// Actual problem:\r\nfn main() {\r\n    let r = &b'h';\r\n    let _: u8 = r.to_owned();\r\n    let line: Vec<u8> = vec![b'h', b'i', b'!'];\r\n    let counts = Counts::<u8>::new::<_, &u8>(&line);\r\n}\r\n```\r\n\r\n(Sorry for the length... not sure what more I can cut and still have it fail.)\r\n\r\nI expected to see this happen: In the above snippet, I'd expect to be able to treat `&line` as a `&[u8]`, and therefore `IntoIterator<Item=&u8>`, therefore `R` is `&u8` which should be `ToOwned<Owned=u8>` and so `T` is `u8`. \r\n\r\nInstead, passing a `&Vec<u8>` will only work to produce a `Count<&u8>` (elsewhere, Counts has a method which accepts `Fn(T,T)->T`, used like `|x,y| x ^ y` so `&u8` isn't acceptable.) Alternatively, I and `Counts::new(line.clone())` but that seems like it does a double copy; this is okay for my use case, but in general it's confusing.\r\n\r\n## Meta\r\n\r\nThis behavior was exhibited today by the Rust Playground.", "closed_by": {"login": "nyarly", "id": 127548, "node_id": "MDQ6VXNlcjEyNzU0OA==", "avatar_url": "https://avatars.githubusercontent.com/u/127548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyarly", "html_url": "https://github.com/nyarly", "followers_url": "https://api.github.com/users/nyarly/followers", "following_url": "https://api.github.com/users/nyarly/following{/other_user}", "gists_url": "https://api.github.com/users/nyarly/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyarly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyarly/subscriptions", "organizations_url": "https://api.github.com/users/nyarly/orgs", "repos_url": "https://api.github.com/users/nyarly/repos", "events_url": "https://api.github.com/users/nyarly/events{/privacy}", "received_events_url": "https://api.github.com/users/nyarly/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38597/timeline", "performed_via_github_app": null, "state_reason": "completed"}