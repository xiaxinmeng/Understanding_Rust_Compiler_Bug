{"url": "https://api.github.com/repos/rust-lang/rust/issues/92122", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92122/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92122/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92122/events", "html_url": "https://github.com/rust-lang/rust/issues/92122", "id": 1084742078, "node_id": "I_kwDOAAsO6M5Ap9m-", "number": 92122, "title": "Tracking issue for thread local Cell methods", "user": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-12-20T12:35:34Z", "updated_at": "2023-03-31T21:30:03Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Feature gate: `#![feature(local_key_cell_methods)]`\r\n\r\nThis is a tracking issue for thread local Cell methods: [RFC 3184](https://github.com/rust-lang/rfcs/pull/3184).\r\n\r\n### Public API\r\n\r\n```rust\r\nimpl<T: 'static> LocalKey<Cell<T>> {\r\n    pub fn set(&'static self, value: T);\r\n    pub fn get(&'static self) -> T where T: Copy;\r\n    pub fn take(&'static self) -> T where T: Default;\r\n    pub fn replace(&'static self, value: T) -> T;\r\n}\r\n\r\nimpl<T: 'static> LocalKey<RefCell<T>> {\r\n    pub fn with_borrow<F, R>(&'static self, f: F) -> R where F: FnOnce(&T) -> R;\r\n    pub fn with_borrow_mut<F, R>(&'static self, f: F) -> R where F: FnOnce(&mut T) -> R;\r\n    pub fn set(&'static self, value: T);\r\n    pub fn take(&'static self) -> T where T: Default;\r\n    pub fn replace(&'static self, value: T) -> T;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] RFC: https://github.com/rust-lang/rfcs/pull/3184\r\n- [x] Implementation: #92123\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- Is the behavior of `set()` (to skip the default initialization) the right behavior?\r\n- Are there any other types commonly used as thread locals for which we should do something similar?\r\n  - Do we also want anything for `UnsafeCell`? Maybe `LocalKey<UnsafeCell<T>>::get()` to get the `*mut T`, just like `UnsafeCell<T>::get()`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92122/reactions", "total_count": 11, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 11, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92122/timeline", "performed_via_github_app": null, "state_reason": null}