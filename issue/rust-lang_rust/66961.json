{"url": "https://api.github.com/repos/rust-lang/rust/issues/66961", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66961/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66961/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66961/events", "html_url": "https://github.com/rust-lang/rust/issues/66961", "id": 531153447, "node_id": "MDU6SXNzdWU1MzExNTM0NDc=", "number": 66961, "title": "Do not store LLVM bitcode in RLIBs by default", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-12-02T14:11:51Z", "updated_at": "2020-04-22T22:50:56Z", "closed_at": "2020-04-22T22:50:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@nnethercote asked me to write up a more detailed plan for getting rid of LLVM bitcode in RLIBs, so here goes:\r\n\r\n## Current situation\r\n\r\n- We store LLVM bitcode in every RLIB and Rust dylib so that `rustc` can \r\n  perform cross-crate LTO.\r\n- This has quite a bit of a cost in terms of compile times and file sizes (See here).\r\n- Cross-crate LTO is a niche use case and the current approach makes that costlier \r\n  than necessary too (because then machine code is duplicated)\r\n- When doing xLTO the shortcomings of the current implementation become \r\n  especially obvious because then we have two basically identical LLVM bitcode\r\n  files for each module (modulo compression). \r\n- Embedding bitcode also causes the incremental compilation cache to be much\r\n  bigger because we have to keep object files *and* bitcode files in the cache.\r\n\r\n\r\n## Proposed Solution\r\n\r\nThe proposed solution is to follow Clang's model: When compiling for cross-crate\r\nLTO, no machine code is generated and the `.o` file is actually LLVM bitcode. \r\nThere are special [\"fat\" object files][fat-obj] that contain regular machine code and \r\nadditionally, in a special section, uncompressed LLVM bitcode. These fat objects\r\nwould mainly be used for the standard library.\r\n\r\nThe consequences of this approach are:\r\n\r\n- Code compiled by the user (i.e. everything except `libstd`) would only be either\r\n  machine code or LLVM bitcode.\r\n- When compiling an RLIB `rustc` needs to know if it is intended to be used for\r\n  LTO or not. Thus Cargo needs to invoke `rustc` differently.\r\n- We save quite a bit of space and time in the common case. \r\n- Because the \"fat\" object files are a standard LLVM thing, `libstd` can partake\r\n  in LTO steps performed by the LLVM linker plugin. \r\n\r\n\r\n## Open questions\r\n\r\n- Do we need to keep things backwards compatible by defaulting to \"fat\" object files? If the new default is to not store LLVM bitcode in RLIBs, then non-cargo build systems would start to silently not do LTO. \r\n    - My preference would be to make no-bitcode the new default, but make the compiler emit a warning if wants to do LTO but encounters rlibs without bitcode.\r\n- Should rustc be able to transparently handle bitcode-only RLIBs in the non-LTO case? \r\n    - My preference would be yes. Possibly also add a warning that that is unexpected?\r\n- LLVM's WASM implementation [doesn't seem to support](https://github.com/llvm/llvm-project/blob/d62026e2dde1d27c7d1c702f11b0464e1d470d4f/llvm/lib/Object/WasmObjectFile.cpp#L1455) \"fat\" object files. I don't know if this is a fundamental restriction. I guess WASM projects are actually more likely to use LTO than regular projects. If WASM doesn't support custom sections, then we could also keep the current setup of having LLVM bitcode in a separate file in the RLIB archive. Maybe @alexcrichton or @fitzgen know more about WASM object files?\r\n\r\n## Steps to get there\r\n\r\nThat actually depends on how we resolve the open questions above. \r\n\r\ncc  #66598\r\n\r\n[fat-obj]: https://llvm.org/docs/BitCodeFormat.html#native-object-file-wrapper-format", "closed_by": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66961/reactions", "total_count": 13, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 7, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66961/timeline", "performed_via_github_app": null, "state_reason": "completed"}