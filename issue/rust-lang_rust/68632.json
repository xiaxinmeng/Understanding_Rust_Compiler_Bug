{"url": "https://api.github.com/repos/rust-lang/rust/issues/68632", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68632/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68632/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68632/events", "html_url": "https://github.com/rust-lang/rust/issues/68632", "id": 556715335, "node_id": "MDU6SXNzdWU1NTY3MTUzMzU=", "number": 68632, "title": "Strange perforamnce drops with const literals in closures", "user": {"login": "idkravitz", "id": 200144, "node_id": "MDQ6VXNlcjIwMDE0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/200144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/idkravitz", "html_url": "https://github.com/idkravitz", "followers_url": "https://api.github.com/users/idkravitz/followers", "following_url": "https://api.github.com/users/idkravitz/following{/other_user}", "gists_url": "https://api.github.com/users/idkravitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/idkravitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/idkravitz/subscriptions", "organizations_url": "https://api.github.com/users/idkravitz/orgs", "repos_url": "https://api.github.com/users/idkravitz/repos", "events_url": "https://api.github.com/users/idkravitz/events{/privacy}", "received_events_url": "https://api.github.com/users/idkravitz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2020-01-29T08:41:29Z", "updated_at": "2020-01-30T13:13:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I asked about it on [user.rust-lang.org](https://users.rust-lang.org/t/seems-that-optimizer-has-issues-with-closures/37598) and one user suggested that it may be a bug in optimizer indeed. So I should state that the things below are reproducable both in nightly and stable latest rust on x86_64-pc-windows-msvc triplet and x86_64-unknown-linux-gnu (tested inside WSL).\r\n\r\nSo our test subject would be the following snippet, that solves Max subarray problem\r\n```rust\r\npub fn max_subarray_bad(arr: &[i32]) -> (usize, usize, i32)\r\n{\r\n    let prefixes = arr\r\n        .iter()\r\n        .enumerate()\r\n        .scan((0, 0), |s, (i, v)| {\r\n            if s.1 > 0 {\r\n                s.1 = s.1 + *v;\r\n            } else {\r\n                *s = (i, *v);\r\n            }\r\n            Some(*s)\r\n        });\r\n    let (right_idx, (left_idx, sum)) = prefixes\r\n        .enumerate()\r\n        .max_by_key(|&(_, (_, sum))| sum)\r\n        .unwrap();\r\n    \r\n    (left_idx, right_idx + 1, sum)\r\n}\r\n```\r\n\r\nIf we benchmark it with **criterion** crate with this benchmark code:\r\n```rust\r\nuse criterion::{black_box, criterion_group, criterion_main, Criterion};\r\n\r\nfn benchmark_linear(c: &mut Criterion) {\r\n    const N: usize = 1000000;\r\n    c.bench_function(&format!(\"max_subarray([..]) N = {}\", N), |b| {\r\n        b.iter(|| max_subarray::max_subarray_bad(black_box(&vec![0; N])))\r\n    });\r\n}\r\n\r\ncriterion_group!(benches, benchmark_linear);\r\ncriterion_main!(benches);\r\n```\r\nThen the output of `cargo bench` on my machine would be\r\n\r\n    Benchmarking max_subarray([..]) N = 1000000: Warming up for 3.0000 s\r\n    Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 16.6s or reduce sample count to 30.\r\n    max_subarray([..]) N = 1000000\r\n                            time:   [3.2324 ms 3.2700 ms 3.3141 ms]\r\n    Found 10 outliers among 100 measurements (10.00%)\r\n      6 (6.00%) high mild\r\n      4 (4.00%) high severe\r\n\r\n         Running target\\release\\deps\\scratch-b68a42551ab01289.exe\r\n\r\nBut with the slight change of moving out 0 in expression `s.1 > 0` in let binding outside of the closure can make a great difference. So the function is now this:\r\n```rust\r\npub fn max_subarray_bad(arr: &[i32]) -> (usize, usize, i32)\r\n{\r\n    let zro = 0;\r\n    let prefixes = arr\r\n        .iter()\r\n        .enumerate()\r\n        .scan((0, 0), |s, (i, v)| {\r\n            if s.1 > zro {\r\n                s.1 = s.1 + *v;\r\n            } else {\r\n                *s = (i, *v);\r\n            }\r\n            Some(*s)\r\n        });\r\n    let (right_idx, (left_idx, sum)) = prefixes\r\n        .enumerate()\r\n        .max_by_key(|&(_, (_, sum))| sum)\r\n        .unwrap();\r\n    \r\n    (left_idx, right_idx + 1, sum)\r\n}\r\n```\r\nBut `cargo bench` output indicates almost 20% performance gain!\r\n\r\n    Benchmarking max_subarray([..]) N = 1000000: Warming up for 3.0000 s\r\n    Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 12.9s or reduce sample count to 40.\r\n    max_subarray([..]) N = 1000000\r\n                            time:   [2.5705 ms 2.5806 ms 2.5913 ms]\r\n                            change: [-20.260% -19.668% -19.124%] (p = 0.00 < 0.05)\r\n                            Performance has improved.\r\n    Found 4 outliers among 100 measurements (4.00%)\r\n      3 (3.00%) high mild\r\n      1 (1.00%) high severe\r\n\r\n         Running target\\release\\deps\\scratch-b68a42551ab01289.exe\r\n\r\nYou can check that changing function back and forth with replacing 0 and zro in that expression indeed results in 20% performance change.\r\n\r\nBy the way, if we change `let zro = 0` into `const zro: i32 = 0` it results in performance drop too.\r\n\r\nIt looks like a bug in optimizer for me. Could someone verify it?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68632/timeline", "performed_via_github_app": null, "state_reason": null}