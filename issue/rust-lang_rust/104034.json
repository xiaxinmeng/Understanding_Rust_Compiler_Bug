{"url": "https://api.github.com/repos/rust-lang/rust/issues/104034", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104034/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104034/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104034/events", "html_url": "https://github.com/rust-lang/rust/issues/104034", "id": 1437233710, "node_id": "I_kwDOAAsO6M5VqnIu", "number": 104034, "title": "`#[feature(exhaustive_patterns)]` thinks irrefutable pattern is refutable when enum contains struct with private fields.", "user": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472513132, "node_id": "MDU6TGFiZWwxNDcyNTEzMTMy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-never_type", "name": "F-never_type", "color": "f9c0cc", "default": false, "description": "`#![feature(never_type)]`"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1976249438, "node_id": "MDU6TGFiZWwxOTc2MjQ5NDM4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-exhaustiveness-checking", "name": "A-exhaustiveness-checking", "color": "f7e101", "default": false, "description": "Relating to exhaustiveness / usefulness checking of patterns"}, {"id": 3921861239, "node_id": "LA_kwDOAAsO6M7pwtp3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-bug-has-test", "name": "S-bug-has-test", "color": "862eff", "default": false, "description": "A `known-bug` test has been added for this bug."}, {"id": 4767933102, "node_id": "LA_kwDOAAsO6M8AAAABHDDirg", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-exhaustive_patterns", "name": "F-exhaustive_patterns", "color": "f9c0cc", "default": false, "description": "`#![feature(exhaustive_patterns)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-11-06T00:18:44Z", "updated_at": "2023-05-25T08:41:51Z", "closed_at": "2023-05-25T08:41:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code compiles on nightly ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=55ac489a6a9fcd1189f52d4d2c254e94)):\r\n\r\n```rust\r\n#![feature(exhaustive_patterns, never_type)]\r\n\r\nenum Either<A, B> {\r\n    A(A),\r\n    B(Wrapper<B>),\r\n}\r\n\r\nstruct Wrapper<T>(T);\r\n\r\nfn foo() -> Either<(), !> {\r\n    Either::A(())\r\n}\r\n\r\nfn main() {\r\n    let Either::A(()) = foo();\r\n}\r\n```\r\n\r\nBut if the wrapper type is moved into a module to make the field private, then it does not: ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=81d51fa51530ad29918e0d6e078c3070)):\r\n\r\n```rust\r\n#![feature(exhaustive_patterns, never_type)]\r\n\r\nmod inner {\r\n    pub struct Wrapper<T>(T);\r\n}\r\n\r\nenum Either<A, B> {\r\n    A(A),\r\n    B(inner::Wrapper<B>),\r\n}\r\n\r\nfn foo() -> Either<(), !> {\r\n    Either::A(())\r\n}\r\n\r\nfn main() {\r\n    let Either::A(()) = foo();\r\n}\r\n```\r\n\r\n```\r\nerror[E0005]: refutable pattern in local binding: `Either::B(_)` not covered\r\n  --> src/main.rs:17:9\r\n   |\r\n17 |     let Either::A(()) = foo();\r\n   |         ^^^^^^^^^^^^^ pattern `Either::B(_)` not covered\r\n   |\r\n   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\r\nnote: `Either<(), !>` defined here\r\n  --> src/main.rs:9:5\r\n   |\r\n7  | enum Either<A, B> {\r\n   |      ------\r\n8  |     A(A),\r\n9  |     B(inner::Wrapper<B>),\r\n   |     ^ not covered\r\n   = note: the matched value is of type `Either<(), !>`\r\nhelp: you might want to use `if let` to ignore the variant that isn't matched\r\n   |\r\n17 |     if let Either::A(()) = foo() { todo!() }\r\n   |     ++                           ~~~~~~~~~~~\r\n```\r\n\r\nMaking the field `pub` makes it compile again.\r\n\r\nIs this expected? I suppose I could understand if it is; the private fields could change to make `Wrapper<!>` actually be constructable and therefore make the pattern refutable. But if that's the case, then I think the compiler should point this out, like `note: the pattern is currently irrefutable, but the type contains private fields which may change in the future to make the pattern refutable`.\r\n\r\nIf indeed this is expected, is there any way for me as a library author to somehow convince the compiler that I will never change the fields to make the type constructable? I want users of my library to be able to elide match arms when I give them an `Either<A, !>`.\r\n\r\n@rustbot label +T-compiler +F-never_type +D-confusing +requires-nightly +S-bug-has-mcve\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104034/timeline", "performed_via_github_app": null, "state_reason": "completed"}