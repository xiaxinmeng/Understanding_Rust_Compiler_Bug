{"url": "https://api.github.com/repos/rust-lang/rust/issues/4632", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/4632/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/4632/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/4632/events", "html_url": "https://github.com/rust-lang/rust/issues/4632", "id": 10311925, "node_id": "MDU6SXNzdWUxMDMxMTkyNQ==", "number": 4632, "title": "A \"Removed Features FAQ\" for historical reference", "user": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-01-25T14:06:51Z", "updated_at": "2013-05-02T18:01:41Z", "closed_at": "2013-05-02T18:01:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Inspired by a question on Reddit (http://www.reddit.com/r/rust/comments/178t57/intimidation_factor_vs_target_audience/c83br4f). Basically all it needs to contain is a list of removed features, with a reason for the removal of each. In addition to being fascinating, it would be a good resource for other would-be language designers. Here's what I came up with off the top of my head (pasted from the Reddit thread):\n- Typestate (because nobody used it)\n- Structural records (in favor of nominal records (structs), but I'm not sure of the exact reason)\n- Argument modes (frustrating to use, impossible to learn, horrifying to look at; replaced with borrowed pointers)\n- Classes (because the day after they finished implementing them they realized you could get the same effect from combining impls and structs)\n- Ternary operator (because `if` is already an expression)\n- Resources (in favor of `drop {}` blocks within struct definitions, which were then themselves removed in favor of the `Drop` trait)\n- Explicit move, first via the `<-` operator and then via the `move` keyword (now owned types always move unless you explicitly copy them (and even the `copy` keyword will soon be gone in favor of a compiler-generated `.copy()` method)\n- Long-style closure expressions (in favor of the shorter `|| {}` syntax)\n- Old-style operator overloading (in favor of the overloading traits in `core::ops`)\n- `comm`-style primitives (replaced with `pipe`-style primitives, which are way faster, more basic, and can be used to implement `comm`-style if you really want it)\n- Module-wide `export` declarations (now you denote visibility on the item itself)\n- Mandatory integer-literal and float-literal type suffixes (they were a pain to use, and are now inferred if you leave them off)\n- `do-while` loops (rarely used, trivial to emulate)\n- `fn foo() unsafe {` (which was different from `unsafe fn() foo`, and can be approximated by `fn foo() { unsafe {`)\n- Guaranteed tail recursion via the `be` keyword (requires changing the calling convention, which is a performance cost that they just can't afford)\n- The `bind` keyword (rarely used, syntax was unintuitive, and not difficult to emulate via closures)\n- `note` statements (not actually sure why they were removed, I'm not sure if they were ever even implemented)\n- (WIP) The `static` keyword (any method definition without a `self` argument is static)\n- (WIP) The `log`, `fail`, and `assert` keywords (these can all be done as macros).\n- (WIP) The concepts of both `const` and `pure` (likely obviated by the new INHTWAMA work)\n- (Possibly) field-level mutability (in favor of object-wide \"inherited\" mutability)\n", "closed_by": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/4632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/4632/timeline", "performed_via_github_app": null, "state_reason": "completed"}