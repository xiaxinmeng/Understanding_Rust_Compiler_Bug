{"url": "https://api.github.com/repos/rust-lang/rust/issues/18352", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/18352/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/18352/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/18352/events", "html_url": "https://github.com/rust-lang/rust/issues/18352", "id": 46851999, "node_id": "MDU6SXNzdWU0Njg1MTk5OQ==", "number": 18352, "title": "Invalid error message about lifetimes when pattern matching with constants", "user": {"login": "netvl", "id": 280456, "node_id": "MDQ6VXNlcjI4MDQ1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/280456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netvl", "html_url": "https://github.com/netvl", "followers_url": "https://api.github.com/users/netvl/followers", "following_url": "https://api.github.com/users/netvl/following{/other_user}", "gists_url": "https://api.github.com/users/netvl/gists{/gist_id}", "starred_url": "https://api.github.com/users/netvl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netvl/subscriptions", "organizations_url": "https://api.github.com/users/netvl/orgs", "repos_url": "https://api.github.com/users/netvl/repos", "events_url": "https://api.github.com/users/netvl/events{/privacy}", "received_events_url": "https://api.github.com/users/netvl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-26T19:30:29Z", "updated_at": "2014-10-28T01:16:11Z", "closed_at": "2014-10-28T01:16:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On the latest nightly (previously it worked fine) Rust fails to compile this code:\n\n``` rust\npub struct Namespace(pub HashMap<Option<String>, String>);\n\nimpl Namespace {\n...\n    pub fn is_essentially_empty(&self) -> bool {\n        let Namespace(ref hm) = *self;\n        for (k, v) in hm.iter() {\n            match (k.as_ref().map(|k| k.as_slice()), v.as_slice()) {\n                (None, NS_EMPTY_URI) |\n                (Some(NS_XMLNS_PREFIX), NS_XMLNS_URI) |\n                (Some(NS_XML_PREFIX), NS_XML_URI) => {},\n                _ => return false\n            }\n        }\n        true\n    }\n...\n}\n```\n\nIt emits this error message:\n\n```\n   Compiling rust-xml v0.1.0 (file:///home/dpx-infinity/dev/lang/rust/projects/rust-xml)\nsrc/namespace.rs:41:23: 41:29 error: cannot infer an appropriate lifetime for pattern due to conflicting requirements\nsrc/namespace.rs:41         let Namespace(ref hm) = *self;\n                                          ^~~~~~\nsrc/namespace.rs:43:54: 43:55 note: first, the lifetime cannot outlive the expression at 43:53...\nsrc/namespace.rs:43             match (k.as_ref().map(|k| k.as_slice()), v.as_slice()) {\n                                                                         ^\nsrc/namespace.rs:43:54: 43:55 note: ...so that pointer is not dereferenced outside its lifetime\nsrc/namespace.rs:43             match (k.as_ref().map(|k| k.as_slice()), v.as_slice()) {\n                                                                         ^\nsrc/namespace.rs:42:23: 42:25 note: but, the lifetime must be valid for the expression at 42:22...\nsrc/namespace.rs:42         for (k, v) in hm.iter() {\n                                          ^~\nsrc/namespace.rs:42:23: 42:25 note: ...so that pointer is not dereferenced outside its lifetime\nsrc/namespace.rs:42         for (k, v) in hm.iter() {\n                                          ^~\n```\n\nI managed to strip it down to this example:\n\n``` rust\nconst X: &'static str = \"12345\";\n\npub fn test(s: String) -> bool {\n    match s.as_slice() {\n        X => true,\n        _ => false\n    }\n}\n```\n\nIt fails to compile with this error:\n\n```\n/tmp/rs/lifetimes/src/lib.rs:18:11: 18:12 error: `s` does not live long enough\n/tmp/rs/lifetimes/src/lib.rs:18     match s.as_slice() {\n                                          ^\nnote: reference must be valid for the static lifetime...\n/tmp/rs/lifetimes/src/lib.rs:17:32: 22:2 note: ...but borrowed value is only valid for the block at 17:31\n/tmp/rs/lifetimes/src/lib.rs:17 pub fn test(s: String) -> bool {\n/tmp/rs/lifetimes/src/lib.rs:18     match s.as_slice() {\n/tmp/rs/lifetimes/src/lib.rs:19         X => true,\n/tmp/rs/lifetimes/src/lib.rs:20         _ => false\n/tmp/rs/lifetimes/src/lib.rs:21     }\n/tmp/rs/lifetimes/src/lib.rs:22 }\n```\n\nIf `X =>` is replaced with `\"12345\" =>`, then it compiles fine, so the error seems to be related to matching on `const`s.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/18352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/18352/timeline", "performed_via_github_app": null, "state_reason": "completed"}