{"url": "https://api.github.com/repos/rust-lang/rust/issues/46406", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46406/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46406/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46406/events", "html_url": "https://github.com/rust-lang/rust/issues/46406", "id": 278193606, "node_id": "MDU6SXNzdWUyNzgxOTM2MDY=", "number": 46406, "title": "Consider adding Box::uninitialized function", "user": {"login": "malbarbo", "id": 1678126, "node_id": "MDQ6VXNlcjE2NzgxMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1678126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malbarbo", "html_url": "https://github.com/malbarbo", "followers_url": "https://api.github.com/users/malbarbo/followers", "following_url": "https://api.github.com/users/malbarbo/following{/other_user}", "gists_url": "https://api.github.com/users/malbarbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/malbarbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malbarbo/subscriptions", "organizations_url": "https://api.github.com/users/malbarbo/orgs", "repos_url": "https://api.github.com/users/malbarbo/repos", "events_url": "https://api.github.com/users/malbarbo/events{/privacy}", "received_events_url": "https://api.github.com/users/malbarbo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-30T16:54:00Z", "updated_at": "2019-12-10T15:47:31Z", "closed_at": "2019-12-10T15:47:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The reasons for such a function are the same as for [`std::mem::uninitialized`](https://doc.rust-lang.org/stable/std/mem/fn.uninitialized.html). I saw somewhere a discussion about deprecating `std::mem::uninitialized`, but I cannot remember where. If this is the case, how to avoid the cost of initializing a huge structure in the heap that will be initialized again in a ffi function call (without writing c code)?\r\n\r\nAlso, it would be great to have `Box::uninitialized_from_value` that take a reference to a value and return a uninitialized boxed value that could store a copy of the original value. This function is useful to implement clone for structures containing unsized types. For example:\r\n\r\n```rust\r\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\r\nstruct A<T: ?Sized> {\r\n    a: u8,\r\n    b: T,\r\n}\r\n\r\n#[derive(Debug, Eq, PartialEq)]\r\nstruct X {\r\n    inner: Box<A<[u32]>>,\r\n}\r\n\r\nimpl Clone for X {\r\n    fn clone(&self) -> X {\r\n        unsafe {\r\n            let mut inner = Box::uninitialized_from_value(&*self.inner);\r\n            inner.a = self.inner.a;\r\n            inner.b.copy_from_slice(&self.inner.b);            \r\n            X { inner: inner }\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let x = X {\r\n        inner: Box::new(A {\r\n            a: 10,\r\n            b: [1, 2, 3, 4, 5],\r\n        }),\r\n    };\r\n    let y = x.clone();\r\n    assert_eq!(x, y);\r\n}\r\n```\r\n\r\nIf instead of `[u32]`, we had a generic `[T]` we would had to be very careful in the clone implementation, but it would be possible do to so using the stable compiler. The issue is that without `Box::uninitialized_from_value` I think it would be impossible to create an efficient implementation for `X::clone` (generic over the array item) without using `std:heap` and the nightly compiler.\r\n\r\nHere is a possible implementation (I'm not sure it is correct):\r\n\r\n```rust\r\n#![feature(allocator_api)]\r\n\r\nuse std::ptr;\r\nuse std::heap::{Alloc, Heap, Layout};\r\nuse std::mem;\r\n\r\ntrait Uninitialized<T: ?Sized> {\r\n    unsafe fn uninitialized_from_value(value: &T) -> Self;\r\n}\r\n\r\nimpl<T: ?Sized> Uninitialized<T> for Box<T> {\r\n    unsafe fn uninitialized_from_value(value: &T) -> Self {\r\n        let layout = Layout::for_value(value);\r\n        let ptr = Heap.alloc(layout).unwrap_or_else(|e| Heap.oom(e));\r\n        // Initialize b with value so b has the right DST extra field if T is ?Sized\r\n        let mut b: Box<T> = mem::transmute(value);\r\n        // Change the pointer to the newly allocated memory\r\n        ptr::write(&mut b as *mut _ as *mut *mut u8, ptr);\r\n        b\r\n    }\r\n}\r\n```\r\n\r\nThis code is based on [`Rc::allocate_for_ptr`](https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src/liballoc/rc.rs#L660) (which is similar to `Arc::allocate_for_ptr`). `Box::uninitialized_from_value` could be used in `Rc::allocate_for_ptr`, which indicates that there are uses cases for such a function.", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46406/timeline", "performed_via_github_app": null, "state_reason": "completed"}