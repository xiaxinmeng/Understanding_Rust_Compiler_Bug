{"url": "https://api.github.com/repos/rust-lang/rust/issues/112778", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/112778/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/112778/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/112778/events", "html_url": "https://github.com/rust-lang/rust/issues/112778", "id": 1762476500, "node_id": "I_kwDOAAsO6M5pDUHU", "number": 112778, "title": "E0207 if a type parameter occurs in an implementing type or associated type, if it also occurs in a regular type argument", "user": {"login": "Jakobeha", "id": 32147996, "node_id": "MDQ6VXNlcjMyMTQ3OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/32147996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jakobeha", "html_url": "https://github.com/Jakobeha", "followers_url": "https://api.github.com/users/Jakobeha/followers", "following_url": "https://api.github.com/users/Jakobeha/following{/other_user}", "gists_url": "https://api.github.com/users/Jakobeha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jakobeha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jakobeha/subscriptions", "organizations_url": "https://api.github.com/users/Jakobeha/orgs", "repos_url": "https://api.github.com/users/Jakobeha/repos", "events_url": "https://api.github.com/users/Jakobeha/events{/privacy}", "received_events_url": "https://api.github.com/users/Jakobeha/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-06-18T21:57:54Z", "updated_at": "2023-06-18T23:32:31Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Code\r\n\r\n```Rust\r\ntrait SomeTrait<A> {\r\n    \r\n}\r\n\r\ntrait AnotherTrait<B> {\r\n    type Assoc;\r\n}\r\n\r\nimpl<A, B, C> SomeTrait<A> for C where C: AnotherTrait<B, Assoc=B> {}\r\n```\r\n\r\n\r\n### Current output\r\n\r\n```Shell\r\nerror[E0207]: the type parameter `B` is not constrained by the impl trait, self type, or predicates\r\n --> src/lib.rs:9:9\r\n  |\r\n9 | impl<A, B, C> SomeTrait<A> for C where C: AnotherTrait<B, Assoc=B> {}\r\n  |         ^ unconstrained type parameter\r\n\r\nFor more information about this error, try `rustc --explain E0207`.\r\n```\r\n\r\n\r\n### Desired output\r\n\r\n```Shell\r\nEither nothing, or explain why the parameter is still \"unconstrained\" or otherwise can't occur as a type argument, when it only occurs in an implementing type or associated type\r\n```\r\n\r\n\r\n### Rationale and extra context\r\n\r\nThis may actually be a bug and not a diagnostic issue, if the above code should be accepted by the rust compiler.\r\n\r\nRegardless, the information at https://doc.rust-lang.org/error_codes/E0207.html contradicts the above error, because `B` is in the implementing type or associated type bound.\r\n\r\n### Other cases\r\n\r\nAlso rejected if `B` is in the implementing type:\r\n\r\n```rust\r\ntrait SomeTrait<A> {\r\n    \r\n}\r\n\r\ntrait AnotherTrait<B> {\r\n    type Assoc;\r\n}\r\n\r\nstruct Struct<B>(std::marker::PhantomData<B>);\r\n\r\nimpl<A, B, C> SomeTrait<A> for C where Struct<B>: AnotherTrait<B> {}\r\n```\r\n\r\nRejected if the type parameter occurs inside of another type which is an argument to `AnotherTrait`:\r\n\r\n```rust\r\ntrait SomeTrait<A> {\r\n    \r\n}\r\n\r\ntrait AnotherTrait<B> {\r\n    type Assoc;\r\n}\r\n\r\nstruct Struct<B>(std::marker::PhantomData<B>);\r\n\r\nimpl<A, B, C> SomeTrait<A> for C where C: AnotherTrait<Struct<B>, Assoc=B> {}\r\n```\r\n\r\n*Accepted* if `B` in the implemented trait:\r\n\r\n```rust\r\ntrait SomeTrait<A, B> {\r\n    \r\n}\r\n\r\ntrait AnotherTrait<B> {\r\n    type Assoc;\r\n}\r\n\r\nimpl<A, B, C> SomeTrait<A, B> for C where C: AnotherTrait<B, Assoc=B> {}\r\n```\r\n\r\nAccepted (notice `AnotherTrait`'s argument is `A` instead of `B`):\r\n\r\n```rust\r\ntrait SomeTrait<A> {\r\n    \r\n}\r\n\r\ntrait AnotherTrait<B> {\r\n    type Assoc;\r\n}\r\n\r\nimpl<A, B, C> SomeTrait<A> for C where C: AnotherTrait<A, Assoc=B> {}\r\n```\r\n\r\n### Anything else?\r\n\r\n[Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=1d155c4350075a67a5b654b75f42dd4f)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/112778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/112778/timeline", "performed_via_github_app": null, "state_reason": null}