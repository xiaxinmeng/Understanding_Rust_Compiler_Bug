{"url": "https://api.github.com/repos/rust-lang/rust/issues/61973", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/61973/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/61973/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/61973/events", "html_url": "https://github.com/rust-lang/rust/issues/61973", "id": 458244923, "node_id": "MDU6SXNzdWU0NTgyNDQ5MjM=", "number": 61973, "title": "Trying to create a trait object with associated functions should have a better explanation", "user": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-19T21:58:55Z", "updated_at": "2019-09-08T23:46:20Z", "closed_at": "2019-09-08T23:46:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When trying to use associated functions and trait objects we get the following type of errors:\r\n\r\n```\r\nerror[E0038]: the trait `content::database::utils::CodeNormalizer` cannot be made into an object\r\n   --> src/content/database/utils.rs:175:16\r\n    |\r\n175 | const SYSTEMS: &[Box<&dyn CodeNormalizer>] = &[\r\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `content::database::utils::CodeNormalizer` cannot be made into an object\r\n    |\r\n    = note: method `normalize` has no receiver\r\n    = note: method `get_name` has no receiver\r\n```\r\n\r\nThere are two possible cases for _intent_:\r\n - we're trying to do something that Rust doesn't allow, which is having associated functions that don't take `self` in a trait object\r\n - we have zero-sized structs that implement a given trait to carry a bunch of functionality\r\n\r\nIn the former case, the explanation leaves a lot to be desired: what is a `receiver`? Why are we calling it a `method` when it's really a `function` in this case? Maybe we forgot to have `self` as the first argument? Should we be suggesting adding it? Why aren't we pointing at the trait fn definition nor the impl?\r\n\r\nFor the second case, I believe if we can detect it it'd be great, because we could customize the help text to suggest adding `&self` in a confident manner, as we wouldn't have to care about lifetime issues.", "closed_by": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/61973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/61973/timeline", "performed_via_github_app": null, "state_reason": "completed"}