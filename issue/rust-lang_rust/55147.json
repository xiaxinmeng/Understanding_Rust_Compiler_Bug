{"url": "https://api.github.com/repos/rust-lang/rust/issues/55147", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55147/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55147/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55147/events", "html_url": "https://github.com/rust-lang/rust/issues/55147", "id": 371046254, "node_id": "MDU6SXNzdWUzNzEwNDYyNTQ=", "number": 55147, "title": "Failure to elide bound checks for multiple slice writes by index after length check that can't overflow", "user": {"login": "hsivonen", "id": 478856, "node_id": "MDQ6VXNlcjQ3ODg1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/478856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hsivonen", "html_url": "https://github.com/hsivonen", "followers_url": "https://api.github.com/users/hsivonen/followers", "following_url": "https://api.github.com/users/hsivonen/following{/other_user}", "gists_url": "https://api.github.com/users/hsivonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/hsivonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hsivonen/subscriptions", "organizations_url": "https://api.github.com/users/hsivonen/orgs", "repos_url": "https://api.github.com/users/hsivonen/repos", "events_url": "https://api.github.com/users/hsivonen/events{/privacy}", "received_events_url": "https://api.github.com/users/hsivonen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-17T12:24:47Z", "updated_at": "2019-04-13T13:55:56Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "[Nightly Rust Godbolt link](https://rust.godbolt.org/z/KPcGjj).\r\n\r\nThese two functions should logically compile to the same code but don't:\r\n```rust\r\npub fn unchecked(dst: &mut [u8], offset: usize) {\r\n    let mut i = offset;\r\n    if i.checked_add(4).unwrap() <= dst.len() {\r\n        unsafe {\r\n            *(dst.get_unchecked_mut(i)) = 1;\r\n            i += 1;\r\n            *(dst.get_unchecked_mut(i)) = 2;\r\n            i += 1;\r\n            *(dst.get_unchecked_mut(i)) = 3;\r\n            i += 1;\r\n            *(dst.get_unchecked_mut(i)) = 4;\r\n        }\r\n    }\r\n}\r\n\r\npub fn checked(dst: &mut [u8], offset: usize) {\r\n    let mut i = offset;\r\n    if i.checked_add(4).unwrap() <= dst.len() {\r\n        dst[i] = 1;\r\n        i += 1;\r\n        dst[i] = 2;\r\n        i += 1;\r\n        dst[i] = 3;\r\n        i += 1;\r\n        dst[i] = 4;\r\n    } \r\n}\r\n```\r\n\r\nThe output is:\r\n\r\n```asm\r\nexample::unchecked:\r\n        push    rax\r\n        mov     rax, rdx\r\n        add     rax, 4\r\n        jb      .LBB0_4\r\n        cmp     rax, rsi\r\n        ja      .LBB0_3\r\n        mov     dword ptr [rdi + rdx], 67305985\r\n.LBB0_3:\r\n        pop     rax\r\n        ret\r\n.LBB0_4:\r\n        lea     rdi, [rip + .L__unnamed_1]\r\n        call    qword ptr [rip + _ZN4core9panicking5panic17hd62333a8bd86ba63E@GOTPCREL]\r\n        ud2\r\n\r\nexample::checked:\r\n        push    rax\r\n        mov     rcx, rdx\r\n        add     rcx, 4\r\n        jb      .LBB1_14\r\n        mov     rax, rsi\r\n        cmp     rcx, rsi\r\n        ja      .LBB1_7\r\n        cmp     rdx, rax\r\n        jae     .LBB1_8\r\n        mov     byte ptr [rdi + rdx], 1\r\n        lea     rsi, [rdx + 1]\r\n        cmp     rsi, rax\r\n        jae     .LBB1_11\r\n        mov     byte ptr [rdi + rdx + 1], 2\r\n        lea     rsi, [rdx + 2]\r\n        cmp     rsi, rax\r\n        jae     .LBB1_12\r\n        mov     byte ptr [rdi + rdx + 2], 3\r\n        add     rdx, 3\r\n        cmp     rdx, rax\r\n        jae     .LBB1_13\r\n        mov     byte ptr [rdi + rdx], 4\r\n.LBB1_7:\r\n        pop     rax\r\n        ret\r\n.LBB1_14:\r\n        lea     rdi, [rip + .L__unnamed_1]\r\n        call    qword ptr [rip + _ZN4core9panicking5panic17hd62333a8bd86ba63E@GOTPCREL]\r\n        ud2\r\n.LBB1_8:\r\n        lea     rdi, [rip + .L__unnamed_2]\r\n        mov     rsi, rdx\r\n        mov     rdx, rax\r\n        call    qword ptr [rip + _ZN4core9panicking18panic_bounds_check17h8f5d51613726af8dE@GOTPCREL]\r\n        ud2\r\n.LBB1_11:\r\n        lea     rdi, [rip + .L__unnamed_3]\r\n        mov     rdx, rax\r\n        call    qword ptr [rip + _ZN4core9panicking18panic_bounds_check17h8f5d51613726af8dE@GOTPCREL]\r\n        ud2\r\n.LBB1_12:\r\n        lea     rdi, [rip + .L__unnamed_4]\r\n        mov     rdx, rax\r\n        call    qword ptr [rip + _ZN4core9panicking18panic_bounds_check17h8f5d51613726af8dE@GOTPCREL]\r\n        ud2\r\n.LBB1_13:\r\n        lea     rdi, [rip + .L__unnamed_5]\r\n        mov     rsi, rdx\r\n        mov     rdx, rax\r\n        call    qword ptr [rip + _ZN4core9panicking18panic_bounds_check17h8f5d51613726af8dE@GOTPCREL]\r\n        ud2\r\n\r\n.L__unnamed_6:\r\n        .ascii  \"called `Option::unwrap()` on a `None` value\"\r\n\r\n.L__unnamed_7:\r\n        .ascii  \"libcore/option.rs\"\r\n\r\n.L__unnamed_1:\r\n        .quad   .L__unnamed_6\r\n        .asciz  \"+\\000\\000\\000\\000\\000\\000\"\r\n        .quad   .L__unnamed_7\r\n        .asciz  \"\\021\\000\\000\\000\\000\\000\\000\\000c\\001\\000\\000\\025\\000\\000\"\r\n\r\nstr.0:\r\n        .ascii  \"/tmp/compiler-explorer-compiler118917-56-2jgk8f.vziuf/example.rs\"\r\n\r\n.L__unnamed_2:\r\n        .quad   str.0\r\n        .quad   64\r\n        .long   19\r\n        .long   9\r\n\r\n.L__unnamed_3:\r\n        .quad   str.0\r\n        .quad   64\r\n        .long   21\r\n        .long   9\r\n\r\n.L__unnamed_4:\r\n        .quad   str.0\r\n        .quad   64\r\n        .long   23\r\n        .long   9\r\n\r\n.L__unnamed_5:\r\n        .quad   str.0\r\n        .quad   64\r\n        .long   25\r\n        .long   9\r\n```\r\n\r\nThat is, the safe function emits bound checks for each write via slice subscript despite there being enough information to decide that the bound checks cannot fail.\r\n\r\nIn `encoding_rs` the use of `unsafe` as seen in the first function is necessary for the UTF-16 to UTF-8 encoder to be competitive with C++.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55147/timeline", "performed_via_github_app": null, "state_reason": null}