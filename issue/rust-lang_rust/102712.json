{"url": "https://api.github.com/repos/rust-lang/rust/issues/102712", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102712/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102712/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102712/events", "html_url": "https://github.com/rust-lang/rust/issues/102712", "id": 1398004370, "node_id": "I_kwDOAAsO6M5TU9qS", "number": 102712, "title": "Valgrind triggered on correct rust code - Potential miscompilation", "user": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-10-05T15:39:33Z", "updated_at": "2022-10-14T16:19:13Z", "closed_at": "2022-10-14T16:19:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following source code:\r\n<details>\r\n  <summary>main.rs</summary>\r\n\r\n```rust\r\n#![feature(core_intrinsics, ptr_internals, strict_provenance, pointer_is_aligned)]\r\nuse core::intrinsics::discriminant_value;\r\nuse core::{alloc::Layout, ffi::c_int, hint::black_box, mem, ptr};\r\nuse std::{hint::unreachable_unchecked, ptr::NonNull};\r\npub struct Vec<T> {\r\n    ptr: NonNull<T>,\r\n    cap: usize,\r\n    len: usize,\r\n}\r\n\r\nimpl<T> Vec<T> {\r\n    pub fn with_cap(cap: usize) -> Self {\r\n        let layout = Layout::array::<T>(cap).unwrap();\r\n        if usize::BITS < 64 && layout.size() > isize::MAX as usize {\r\n            unimplemented!();\r\n        }\r\n        let ptr = unsafe { std::alloc::alloc(layout) };\r\n        Self {\r\n            ptr: NonNull::new(ptr).unwrap().cast(),\r\n            cap,\r\n            len: 0,\r\n        }\r\n    }\r\n    pub fn from_slice(s: &[T]) -> Self {\r\n        let mut vec = Self::with_cap(s.len());\r\n        unsafe { ptr::copy_nonoverlapping(s.as_ptr(), vec.ptr.as_mut(), s.len()) };\r\n        vec.len = s.len();\r\n        vec\r\n    }\r\n    pub fn as_slice(&self) -> &[T] {\r\n        let data = self.as_ptr();\r\n        let len = self.len;\r\n        if is_aligned_and_not_null(data)\r\n            && crate::mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize\r\n        {\r\n            panic!();\r\n        }\r\n        unsafe { &*ptr::slice_from_raw_parts(data, len) }\r\n    }\r\n    pub fn as_ptr(&self) -> *const T {\r\n        self.ptr.as_ptr()\r\n    }\r\n}\r\n\r\nimpl<T> PartialEq for Vec<T> {\r\n    fn eq(&self, other: &Self) -> bool {\r\n        let s = self.as_slice();\r\n        let o = other.as_slice();\r\n\r\n        if s.len() != o.len() {\r\n            return false;\r\n        }\r\n        extern \"C\" {\r\n            fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> c_int;\r\n        }\r\n        unsafe {\r\n            let size = mem::size_of_val(self);\r\n            memcmp(s.as_ptr() as *const u8, o.as_ptr() as *const u8, size) == 0\r\n        }\r\n    }\r\n}\r\n\r\nstruct String {\r\n    vec: Vec<u8>,\r\n}\r\n\r\nimpl String {\r\n    fn from_str(s: &str) -> String {\r\n        let bytes = s.as_bytes();\r\n        String {\r\n            vec: Vec::from_slice(bytes),\r\n        }\r\n    }\r\n}\r\n\r\nimpl PartialEq for String {\r\n    fn eq(&self, other: &String) -> bool {\r\n        self.vec == other.vec\r\n    }\r\n}\r\n\r\nenum Name {\r\n    Long(String),\r\n    Short(char),\r\n}\r\n\r\nimpl PartialEq for Name {\r\n    fn eq(&self, other: &Name) -> bool {\r\n        let self_tag = discriminant_value(self);\r\n        let other_tag = discriminant_value(other);\r\n        self_tag == other_tag\r\n            && match (self, other) {\r\n                (Name::Long(self_0), Name::Long(other_0)) => self_0 == other_0,\r\n                (Name::Short(self_0), Name::Short(other_0)) => self_0 == other_0,\r\n                _ => unsafe { unreachable_unchecked() },\r\n            }\r\n    }\r\n}\r\n\r\nimpl Name {\r\n    fn from_str(nm: &str) -> Name {\r\n        if nm.len() == 1 {\r\n            Name::Short(nm.as_bytes()[0] as char)\r\n        } else {\r\n            Name::Long(String::from_str(nm))\r\n        }\r\n    }\r\n}\r\n\r\n#[inline(never)]\r\nfn find_opt(names: &[Name], nm: &Name) -> Option<usize> {\r\n    // Search main options.\r\n    let mut pos = None;\r\n    for (i, name) in names.iter().enumerate() {\r\n        if name == nm {\r\n            pos = Some(i);\r\n            break;\r\n        }\r\n    }\r\n    pos\r\n}\r\n\r\nfn main() {\r\n    let names = [Name::from_str(\"h\")];\r\n    let nm = \"h\";\r\n    let name = Name::from_str(nm);\r\n\r\n    black_box(find_opt(&names, &name));\r\n}\r\npub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\r\n    !ptr.is_null() && ptr.is_aligned()\r\n}\r\n```\r\n\r\n</details>\r\n\r\nCompiled with `cargo +nightly run --release`\r\nThis works the same with the libstd's`String` but with debug assertions enabled (so that alignment checks will be executed)\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.64.0 (a55dd71d5 2022-09-19)\r\nbinary: rustc\r\ncommit-hash: a55dd71d5fb0ec5a6a3a9e8c27b2127ba491ce52\r\ncommit-date: 2022-09-19\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.64.0\r\nLLVM version: 14.0.6\r\n```\r\n\r\n<details><summary>Valgrind Output</summary>\r\n<p>\r\n\r\n```\r\n\u276f valgrind --track-origins=yes target/release/wat \r\n==420467== Memcheck, a memory error detector\r\n==420467== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.\r\n==420467== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\r\n==420467== Command: target/release/wat\r\n==420467== \r\n==420467== Conditional jump or move depends on uninitialised value(s)\r\n==420467==    at 0x10FC0F: saturating_mul (main.rs:34)\r\n==420467==    by 0x10FC0F: as_slice<u8> (main.rs:34)\r\n==420467==    by 0x10FC0F: eq<u8> (main.rs:48)\r\n==420467==    by 0x10FC0F: eq (main.rs:78)\r\n==420467==    by 0x10FC0F: eq<wat::String, wat::String> (main.rs:93)\r\n==420467==    by 0x10FC0F: eq (main.rs:93)\r\n==420467==    by 0x10FC0F: eq<wat::Name, wat::Name> (main.rs:115)\r\n==420467==    by 0x10FC0F: wat::find_opt (main.rs:115)\r\n==420467==    by 0x10FCD4: wat::main (main.rs:128)\r\n==420467==    by 0x10FD32: call_once<fn(), ()> (function.rs:251)\r\n==420467==    by 0x10FD32: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:122)\r\n==420467==    by 0x10FBC8: std::rt::lang_start::{{closure}} (rt.rs:166)\r\n==420467==    by 0x1223BE: call_once<(), (dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (function.rs:286)\r\n==420467==    by 0x1223BE: do_call<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panicking.rs:464)\r\n==420467==    by 0x1223BE: try<i32, &(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (panicking.rs:428)\r\n==420467==    by 0x1223BE: catch_unwind<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panic.rs:137)\r\n==420467==    by 0x1223BE: {closure#2} (rt.rs:148)\r\n==420467==    by 0x1223BE: do_call<std::rt::lang_start_internal::{closure_env#2}, isize> (panicking.rs:464)\r\n==420467==    by 0x1223BE: try<isize, std::rt::lang_start_internal::{closure_env#2}> (panicking.rs:428)\r\n==420467==    by 0x1223BE: catch_unwind<std::rt::lang_start_internal::{closure_env#2}, isize> (panic.rs:137)\r\n==420467==    by 0x1223BE: std::rt::lang_start_internal (rt.rs:148)\r\n==420467==    by 0x10FD1E: main (in /tmp/wat/target/release/wat)\r\n==420467==  Uninitialised value was created by a stack allocation\r\n==420467==    at 0x10FCA0: wat::main (main.rs:123)\r\n==420467== \r\n==420467== \r\n==420467== HEAP SUMMARY:\r\n==420467==     in use at exit: 0 bytes in 0 blocks\r\n==420467==   total heap usage: 10 allocs, 10 frees, 2,157 bytes allocated\r\n==420467== \r\n==420467== All heap blocks were freed -- no leaks are possible\r\n==420467== \r\n==420467== For lists of detected and suppressed errors, rerun with: -s\r\n==420467== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\r\n```\r\n</p>\r\n</details>\r\n\r\n@tavianator checked the assembly and it seems like there is a branch branching over uninitialized data: https://github.com/RalfJung/cargo-careful/issues/4#issuecomment-1273669667\r\n\r\n(Moved from: https://github.com/RalfJung/cargo-careful/issues/4)", "closed_by": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102712/timeline", "performed_via_github_app": null, "state_reason": "completed"}