{"url": "https://api.github.com/repos/rust-lang/rust/issues/107326", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107326/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107326/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107326/events", "html_url": "https://github.com/rust-lang/rust/issues/107326", "id": 1558125725, "node_id": "I_kwDOAAsO6M5c3xyd", "number": 107326, "title": "Miscompilation with pointer address rountrip through address 0", "user": {"login": "lukas-code", "id": 26522220, "node_id": "MDQ6VXNlcjI2NTIyMjIw", "avatar_url": "https://avatars.githubusercontent.com/u/26522220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukas-code", "html_url": "https://github.com/lukas-code", "followers_url": "https://api.github.com/users/lukas-code/followers", "following_url": "https://api.github.com/users/lukas-code/following{/other_user}", "gists_url": "https://api.github.com/users/lukas-code/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukas-code/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukas-code/subscriptions", "organizations_url": "https://api.github.com/users/lukas-code/orgs", "repos_url": "https://api.github.com/users/lukas-code/repos", "events_url": "https://api.github.com/users/lukas-code/events{/privacy}", "received_events_url": "https://api.github.com/users/lukas-code/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 3983786342, "node_id": "LA_kwDOAAsO6M7tc8Fm", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-strict-provenance", "name": "A-strict-provenance", "color": "f7e101", "default": false, "description": "Area: Strict provenance for raw pointers"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2023-01-26T13:14:31Z", "updated_at": "2023-04-05T17:32:57Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[playground](https://play.rust-lang.org/?version=stable&mode=release&edition=2021&gist=ff8b0a35cfd4d40cf1695e6db5980533)\r\n```rust\r\n// SAFETY: The pointer must be null.\r\npub unsafe fn assert_null(ptr: *mut u8) -> *mut u8 {\r\n    if !ptr.is_null() {\r\n        // SAFETY: The caller guarantees that the pointer is null.\r\n        unsafe { core::hint::unreachable_unchecked() }\r\n    }\r\n    ptr\r\n}\r\n\r\npub fn bad(r: &mut u8) -> u8 {\r\n    let ptr: *mut u8 = r;\r\n    let addr = ptr as usize;\r\n    let null = ptr.wrapping_sub(addr);\r\n    \r\n    // SAFETY: `ptr - ptr == null`\r\n    let definitely_null = unsafe { assert_null(null) };\r\n    let ptr2 = definitely_null.wrapping_add(addr);\r\n\r\n    // SAFETY: `ptr2` has the same address and provenance as `ptr`\r\n    // and `ptr` was derived from a safe reference\r\n    unsafe { *ptr2 }\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", bad(&mut 42));\r\n}\r\n```\r\n\r\nThe program gets optimized into `ud2`.\r\n\r\n## original example:\r\n\r\nI tried [this code](https://play.rust-lang.org/?version=nightly&mode=release&edition=2021&gist=3a070749caf32fd2ca3f372db999706c):\r\n\r\n```rust\r\n#![feature(strict_provenance)]\r\n\r\npub fn bad(r: &mut u8) -> bool {\r\n    let ptr: *mut u8 = r;\r\n\r\n    let addr = ptr.expose_addr();\r\n    let null_with_provenance = core::ptr::from_exposed_addr_mut::<u8>(0);\r\n    let ptr2 = null_with_provenance.wrapping_add(addr);\r\n\r\n    let val_before = unsafe { *ptr };\r\n    unsafe { *ptr2 = 2; }\r\n    let val_after = unsafe { *ptr };\r\n    return val_before == val_after;\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", bad(&mut 1));\r\n}\r\n```\r\n\r\nI expected to see this happen: The program always prints `false`.\r\n\r\nInstead, this happened: The program prints `true` if optimizations are enabled.\r\n\r\nThe [documentation of `from_exposed_addr_mut`](https://doc.rust-lang.org/nightly/core/ptr/fn.from_exposed_addr_mut.html) says that the function will \"guess\" the correct provenance if able, so I expected it to guess `ptr.with_addr(0)` here.\r\n\r\nMiri does not detect undefined behavior in the program.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nplayground nightly (2023-01-25 c18a5e8a5b1afb0d7a58)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107326/timeline", "performed_via_github_app": null, "state_reason": null}