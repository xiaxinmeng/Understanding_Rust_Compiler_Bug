{"url": "https://api.github.com/repos/rust-lang/rust/issues/92961", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92961/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92961/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92961/events", "html_url": "https://github.com/rust-lang/rust/issues/92961", "id": 1104969410, "node_id": "I_kwDOAAsO6M5B3H7C", "number": 92961, "title": "False positive cycle detection with `generic_const_exprs`", "user": {"login": "Buzzec", "id": 9203573, "node_id": "MDQ6VXNlcjkyMDM1NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9203573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Buzzec", "html_url": "https://github.com/Buzzec", "followers_url": "https://api.github.com/users/Buzzec/followers", "following_url": "https://api.github.com/users/Buzzec/following{/other_user}", "gists_url": "https://api.github.com/users/Buzzec/gists{/gist_id}", "starred_url": "https://api.github.com/users/Buzzec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Buzzec/subscriptions", "organizations_url": "https://api.github.com/users/Buzzec/orgs", "repos_url": "https://api.github.com/users/Buzzec/repos", "events_url": "https://api.github.com/users/Buzzec/events{/privacy}", "received_events_url": "https://api.github.com/users/Buzzec/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}, {"id": 5226739262, "node_id": "LA_kwDOAAsO6M8AAAABN4m2Pg", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-incomplete-features", "name": "requires-incomplete-features", "color": "76dcde", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-16T06:23:02Z", "updated_at": "2023-03-04T23:32:58Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![feature(generic_const_exprs)]\r\n\r\nuse core::marker::PhantomData;\r\n\r\ntrait Cool{\r\n    const SIZE: usize;\r\n    // Function does not have to have default to cause error, but non-overrided default does not error\r\n    fn test(array: [u8; Self::SIZE]){}\r\n    fn okay(){}\r\n}\r\n\r\nstruct WithWhere<T>(PhantomData<T>);\r\n// Causes error\r\nimpl<T> Cool for WithWhere<T> where T: Cool, [(); T::SIZE]:{\r\n    const SIZE: usize = T::SIZE + 1;\r\n    fn test(array: [u8; Self::SIZE]){}\r\n}\r\n\r\nstruct NonDependantSize<T>(PhantomData<T>);\r\n// Causes error\r\nimpl<T> Cool for NonDependantSize<T> where T: Cool, [(); T::SIZE]:{\r\n    const SIZE: usize = 2;\r\n    fn test(array: [u8; Self::SIZE]){}\r\n}\r\n\r\nstruct WithNonDependantWhere;\r\n// Causes error\r\nimpl Cool for WithNonDependantWhere where [(); Self::SIZE]:{\r\n    const SIZE: usize = 2;\r\n    fn test(array: [u8; Self::SIZE]){}\r\n}\r\n\r\nstruct NoWhere<T>(PhantomData<T>);\r\n// No Error\r\nimpl<T> Cool for NoWhere<T> where T: Cool{\r\n    const SIZE: usize = T::SIZE + 1;\r\n    fn test(array: [u8; Self::SIZE]){}\r\n} \r\n\r\nstruct NoFunctionOverride<T>(PhantomData<T>);\r\n// No Error\r\nimpl<T> Cool for NoFunctionOverride<T> where T: Cool, [(); T::SIZE]:{\r\n    const SIZE: usize = 3;\r\n    fn okay(){}\r\n} \r\n```\r\n[Playground Link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=292873be78119de9537d605722dd912f)\r\n\r\nI expected to see this happen: There to be no cycle error added with the extra where item.\r\n\r\nInstead, this happened: A cycle error was emitted when adding a where clause bound that is not dependent\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.60.0-nightly (ec4bcaac4 2022-01-15)\r\nbinary: rustc\r\ncommit-hash: ec4bcaac450279b029f3480b8b8f1b82ab36a5eb\r\ncommit-date: 2022-01-15\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.60.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\nwarning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\r\n --> src/lib.rs:1:12\r\n  |\r\n1 | #![feature(generic_const_exprs)]\r\n  |            ^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(incomplete_features)]` on by default\r\n  = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\r\n\r\nerror[E0391]: cycle detected when building an abstract representation for <impl at src/lib.rs:14:1: 17:2>::test::{constant#0}\r\n  --> src/lib.rs:16:25\r\n   |\r\n16 |     fn test(array: [u8; Self::SIZE]){}\r\n   |                         ^^^^^^^^^^\r\n   |\r\nnote: ...which requires building THIR for `<impl at src/lib.rs:14:1: 17:2>::test::{constant#0}`...\r\n  --> src/lib.rs:16:25\r\n   |\r\n16 |     fn test(array: [u8; Self::SIZE]){}\r\n   |                         ^^^^^^^^^^\r\nnote: ...which requires type-checking `<impl at src/lib.rs:14:1: 17:2>::test::{constant#0}`...\r\n  --> src/lib.rs:16:25\r\n   |\r\n16 |     fn test(array: [u8; Self::SIZE]){}\r\n   |                         ^^^^^^^^^^\r\n   = note: ...which requires evaluating trait selection obligation `WithWhere<T>: Cool`...\r\n   = note: ...which again requires building an abstract representation for <impl at src/lib.rs:14:1: 17:2>::test::{constant#0}, completing the cycle\r\nnote: cycle used when checking that `<impl at src/lib.rs:14:1: 17:2>::test` is well-formed\r\n  --> src/lib.rs:16:5\r\n   |\r\n16 |     fn test(array: [u8; Self::SIZE]){}\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0391]: cycle detected when building an abstract representation for <impl at src/lib.rs:21:1: 24:2>::test::{constant#0}\r\n  --> src/lib.rs:23:25\r\n   |\r\n23 |     fn test(array: [u8; Self::SIZE]){}\r\n   |                         ^^^^^^^^^^\r\n   |\r\nnote: ...which requires building THIR for `<impl at src/lib.rs:21:1: 24:2>::test::{constant#0}`...\r\n  --> src/lib.rs:23:25\r\n   |\r\n23 |     fn test(array: [u8; Self::SIZE]){}\r\n   |                         ^^^^^^^^^^\r\nnote: ...which requires type-checking `<impl at src/lib.rs:21:1: 24:2>::test::{constant#0}`...\r\n  --> src/lib.rs:23:25\r\n   |\r\n23 |     fn test(array: [u8; Self::SIZE]){}\r\n   |                         ^^^^^^^^^^\r\n   = note: ...which requires evaluating trait selection obligation `NonDependantSize<T>: Cool`...\r\n   = note: ...which again requires building an abstract representation for <impl at src/lib.rs:21:1: 24:2>::test::{constant#0}, completing the cycle\r\nnote: cycle used when checking that `<impl at src/lib.rs:21:1: 24:2>::test` is well-formed\r\n  --> src/lib.rs:23:5\r\n   |\r\n23 |     fn test(array: [u8; Self::SIZE]){}\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0391]: cycle detected when building an abstract representation for <impl at src/lib.rs:28:1: 31:2>::{constant#0}\r\n  --> src/lib.rs:28:48\r\n   |\r\n28 | impl Cool for WithNonDependantWhere where [(); Self::SIZE]:{\r\n   |                                                ^^^^^^^^^^\r\n   |\r\nnote: ...which requires building THIR for `<impl at src/lib.rs:28:1: 31:2>::{constant#0}`...\r\n  --> src/lib.rs:28:48\r\n   |\r\n28 | impl Cool for WithNonDependantWhere where [(); Self::SIZE]:{\r\n   |                                                ^^^^^^^^^^\r\nnote: ...which requires type-checking `<impl at src/lib.rs:28:1: 31:2>::{constant#0}`...\r\n  --> src/lib.rs:28:48\r\n   |\r\n28 | impl Cool for WithNonDependantWhere where [(); Self::SIZE]:{\r\n   |                                                ^^^^^^^^^^\r\n   = note: ...which requires evaluating trait selection obligation `WithNonDependantWhere: Cool`...\r\n   = note: ...which again requires building an abstract representation for <impl at src/lib.rs:28:1: 31:2>::{constant#0}, completing the cycle\r\nnote: cycle used when checking that `<impl at src/lib.rs:28:1: 31:2>` is well-formed\r\n  --> src/lib.rs:28:1\r\n   |\r\n28 | impl Cool for WithNonDependantWhere where [(); Self::SIZE]:{\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nFor more information about this error, try `rustc --explain E0391`.\r\nwarning: `playground` (lib) generated 1 warning\r\nerror: could not compile `playground` due to 3 previous errors; 1 warning emitted\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92961/timeline", "performed_via_github_app": null, "state_reason": null}