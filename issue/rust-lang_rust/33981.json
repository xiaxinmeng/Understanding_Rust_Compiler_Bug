{"url": "https://api.github.com/repos/rust-lang/rust/issues/33981", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33981/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33981/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33981/events", "html_url": "https://github.com/rust-lang/rust/issues/33981", "id": 157683278, "node_id": "MDU6SXNzdWUxNTc2ODMyNzg=", "number": 33981, "title": "Confusing error message due to elided lifetimes on traits (?)", "user": {"login": "waywardmonkeys", "id": 178582, "node_id": "MDQ6VXNlcjE3ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/178582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/waywardmonkeys", "html_url": "https://github.com/waywardmonkeys", "followers_url": "https://api.github.com/users/waywardmonkeys/followers", "following_url": "https://api.github.com/users/waywardmonkeys/following{/other_user}", "gists_url": "https://api.github.com/users/waywardmonkeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/waywardmonkeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/waywardmonkeys/subscriptions", "organizations_url": "https://api.github.com/users/waywardmonkeys/orgs", "repos_url": "https://api.github.com/users/waywardmonkeys/repos", "events_url": "https://api.github.com/users/waywardmonkeys/events{/privacy}", "received_events_url": "https://api.github.com/users/waywardmonkeys/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-05-31T14:18:43Z", "updated_at": "2017-01-30T19:35:04Z", "closed_at": "2017-01-30T19:35:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I compile this code:\n\n``` rust\nuse std::fmt;\n\npub struct Arg<'a, T: 'a + fmt::Display + ?Sized> {\n    name: &'a str,\n    value: &'a T,\n    prev: Option<&'a Args<'a>>,\n}\n\npub fn arg<'a, T: 'a + fmt::Display + ?Sized>(name: &'a str, value: &'a T) -> Arg<'a, T> {\n    Arg {\n        name: name,\n        value: value,\n        prev: None,\n    }\n}\n\npub trait Args<'a> {\n    fn arg<T: 'a + fmt::Display + ?Sized>(&'a self, name: &'a str, value: &'a T) -> Arg<'a, T>\n        where Self: Sized\n    {\n        Arg {\n            name: name,\n            value: value,\n            prev: Some(self),\n        }\n    }\n\n    fn fmt_value(&self, f: &mut fmt::Formatter) -> fmt::Result;\n\n    fn get(&'a self, name: &str) -> Option<&'a Args<'a>>;\n}\n\nimpl<'a, T> Args<'a> for Arg<'a, T>\n    where T: std::fmt::Display\n{\n    fn fmt_value(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        self.value.fmt(f)\n    }\n\n    fn get(&'a self, name: &str) -> Option<&'a Args<'a>> {\n        if self.name == name {\n            Some(self)\n        } else if let Some(prev) = self.prev {\n            prev.get(name)\n        } else {\n            None\n        }\n    }\n}\n\nimpl<'a> fmt::Display for Args<'a> {\n    /// Forward `fmt::Display` to the underlying value.\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        self.fmt_value(f)\n    }\n}\n\nfn dbg<'d>(args: &Args<'d>) {\n  println!(\"Help! {}\", args);\n}\n\nfn main() {\n  dbg(&arg(\"name\", &\"John\").arg(\"city\", &\"Philadelphia\"));\n}\n```\n\nThe errors that I get aren't obviously related to the actual / underlying problem (to me at least):\n\n```\nuse std::fmt;\npub struct Arg<'a, T: 'a + fmt::Display + ?Sized> {\n    name: &'a str,\n    value: &'a T,\n    prev: Option<&'a Args<'a>>,\n}\npub fn arg<'a, T: 'a + fmt::Display + ?Sized>(name: &'a str, value: &'a T) -> Arg<'a, T> {\n    Arg {\n        name: name,\n        value: value,\n        prev: None,\n    }\n}\npub trait Args<'a> {\n    fn arg<T: 'a + fmt::Display + ?Sized>(&'a self, name: &'a str, value: &'a T) -> Arg<'a, T>\n        where Self: Sized\n    {\n        Arg {\n            name: name,\n            value: value,\n            prev: Some(self),\n        }\n<std macros>:3:11: 3:36 error: cannot infer an appropriate lifetime due to conflicting requirements [E0495]\n<std macros>:3 print ! ( concat ! ( $ fmt , \"\\n\" ) , $ ( $ arg ) * ) ) ;\n                         ^~~~~~~~~~~~~~~~~~~~~~~~~\n<std macros>:2:25: 2:56 note: in this expansion of format_args!\n<std macros>:3:1: 3:54 note: in this expansion of print! (defined in <std macros>)\n<anon>:59:3: 59:30 note: in this expansion of println! (defined in <std macros>)\n<anon>:59:24: 59:28 note: first, the lifetime cannot outlive the expression at 59:23...\n<anon>:59   println!(\"Help! {}\", args);\n                                 ^~~~\n<std macros>:2:25: 2:56 note: in this expansion of format_args!\n<std macros>:3:1: 3:54 note: in this expansion of print! (defined in <std macros>)\n<anon>:59:3: 59:30 note: in this expansion of println! (defined in <std macros>)\n<anon>:59:24: 59:28 note: ...so that auto-reference is valid at the time of borrow\n<anon>:59   println!(\"Help! {}\", args);\n                                 ^~~~\n<std macros>:2:25: 2:56 note: in this expansion of format_args!\n<std macros>:3:1: 3:54 note: in this expansion of print! (defined in <std macros>)\n<anon>:59:3: 59:30 note: in this expansion of println! (defined in <std macros>)\n<std macros>:3:11: 3:36 note: but, the lifetime must be valid for the match at 3:10...\n<std macros>:3 print ! ( concat ! ( $ fmt , \"\\n\" ) , $ ( $ arg ) * ) ) ;\n                         ^~~~~~~~~~~~~~~~~~~~~~~~~\n<std macros>:2:25: 2:56 note: in this expansion of format_args!\n<std macros>:3:1: 3:54 note: in this expansion of print! (defined in <std macros>)\n<anon>:59:3: 59:30 note: in this expansion of println! (defined in <std macros>)\n<anon>:1:1: 1:1 note: ...so that variable is valid at time of its declaration\n<anon>:1 use std::fmt;\n         ^\n<std macros>:2:25: 2:56 note: in this expansion of format_args!\n<std macros>:3:1: 3:54 note: in this expansion of print! (defined in <std macros>)\n<anon>:59:3: 59:30 note: in this expansion of println! (defined in <std macros>)\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\nCompilation failed.\n```\n\nThe fix as described by @kimundi on IRC:\n\n> <kimundi> brucem: found the issue\n> <kimundi> `impl<'a> fmt::Display for Args<'a> {`\n> <kimundi> this implements for trait object `Args`\n> <kimundi> BUT!, trait objects have a lifetime bound for the type behind them, and if it is elided it defaults to `'static`\n> <kimundi> so you actually had\n> <kimundi> `impl<'a> fmt::Display for Args<'a> + 'static {`\n> <kimundi> In other words, the `fmt::Display` impl is only applicable if the type `Args<'a>` has a `'static` bound\n> <kimundi> `fn dbg(args: &(Args+'static)) {` would have also fixed it, but then the call to `dbg()` would complain\n> <kimundi> The real fix is `impl<'a, 'b> fmt::Display for Args<'a> + 'b {`\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33981/timeline", "performed_via_github_app": null, "state_reason": "completed"}