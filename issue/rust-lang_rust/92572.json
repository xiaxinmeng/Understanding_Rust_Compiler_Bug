{"url": "https://api.github.com/repos/rust-lang/rust/issues/92572", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92572/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92572/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92572/events", "html_url": "https://github.com/rust-lang/rust/issues/92572", "id": 1093996696, "node_id": "I_kwDOAAsO6M5BNRCY", "number": 92572, "title": "Internal Compiler Error", "user": {"login": "alexeygrant", "id": 10379605, "node_id": "MDQ6VXNlcjEwMzc5NjA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeygrant", "html_url": "https://github.com/alexeygrant", "followers_url": "https://api.github.com/users/alexeygrant/followers", "following_url": "https://api.github.com/users/alexeygrant/following{/other_user}", "gists_url": "https://api.github.com/users/alexeygrant/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeygrant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeygrant/subscriptions", "organizations_url": "https://api.github.com/users/alexeygrant/orgs", "repos_url": "https://api.github.com/users/alexeygrant/repos", "events_url": "https://api.github.com/users/alexeygrant/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeygrant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-05T05:29:30Z", "updated_at": "2022-08-05T14:24:15Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\nuse chrono::{Local, Timelike, Utc};\r\nuse tokio_postgres::{NoTls, Row};\r\nuse tokio::time::Duration;\r\nuse tokio_postgres::types::ToSql;\r\n\r\ntype GenericError = Box<dyn std::error::Error>;\r\n\r\n\r\nasync fn get_temperature(config: &Configuration) -> Result<f32, GenericError>{\r\n    let esp32_host = format!(\"http://{}/temperature\", config.controller_ip_address).to_string();\r\n    let resp = reqwest::get(esp32_host)\r\n        .await?\r\n        .text()\r\n        .await?;\r\n    let value = resp.parse::<f32>().unwrap();\r\n    return Ok(value);\r\n}\r\n\r\n\r\nasync fn manage_ac(on: bool) -> Result<(), GenericError>{\r\n    log_ac_command(if on { \"turn_on\" } else { \"turn_off\"}, \"\").await?;\r\n    return Ok(());\r\n}\r\n\r\nasync fn postgres_command(sql: &str, params: &[&(dyn ToSql + Sync)] ) -> Result<u64, Box<dyn std::error::Error>> {\r\n    let dev_postgress = \"host=localhost user=user password=password dbname=dbname\";\r\n    let (client, connection) = tokio_postgres::connect(dev_postgress, NoTls).await?;\r\n    tokio::spawn(async move {\r\n        if let Err(e) = connection.await {\r\n            log_message(format!(\"connection error: {}\", e).as_str());\r\n        }\r\n    });\r\n    let result = client.execute( sql, params).await?;\r\n    log_message(format!(\"Command Result: {}\", result).as_str());\r\n    Ok(result)\r\n}\r\n\r\nasync fn postgres_query(sql: &str, params: &[&(dyn ToSql + Sync)] ) -> Result<Vec<Row>, Box<dyn std::error::Error>> {\r\n    let dev_postgress = \"host=localhost user=user password=password dbname=xxx\";\r\n    let (client, connection) = tokio_postgres::connect(dev_postgress, NoTls).await?;\r\n    tokio::spawn(async move {\r\n        if let Err(e) = connection.await {\r\n            log_message(format!(\"connection error: {}\", e).as_str());\r\n        }\r\n    });\r\n    let result = client.query( sql, params).await?;\r\n    log_message(format!(\"Query [{}] was successful\", sql).as_str());\r\n    Ok(result)\r\n}\r\n\r\nasync fn log_temperature(temperature: f32) -> Result<(), Box<dyn std::error::Error>>{\r\n    let insert = \"INSERT INTO temperature(timestamp, value) VALUES($1, $2)\";\r\n    let timestamp = Local::now();\r\n    let result = postgres_command(insert, &[&timestamp, &temperature]).await?;\r\n    log_message(format!(\"Temperature Log Result: {}\", result).as_str());\r\n    Ok(())\r\n}\r\n\r\nstruct Configuration {\r\n    active_hours_utc: (u32, u32),\r\n    controller_ip_address: String,\r\n    loop_interval_seconds: Duration,\r\n    target_temperature: f32,\r\n}\r\n\r\nasync fn read_config_value_as_string(name: &str) -> Result<String, Box<dyn std::error::Error>>{\r\n    let sql = \"SELECT value FROM configuration where name = '$1'\";\r\n    let rows = postgres_query(sql, &[&name]).await?;\r\n    Ok(rows[0].get(0))\r\n}\r\n\r\nasync fn read_config() -> Result<Configuration, Box<dyn std::error::Error>> {\r\n\r\n    let target_temp_str = read_config_value_as_string(\"target_temperature\").await?;\r\n    let loop_interval_str  = read_config_value_as_string(\"loop_interval_seconds\").await?;\r\n    let controller_ip  = read_config_value_as_string(\"controller_ip_address\").await?;\r\n    let config = Configuration {\r\n        active_hours_utc : (20, 11),\r\n        target_temperature : target_temp_str.parse().unwrap(),\r\n        loop_interval_seconds: Duration::from_secs(loop_interval_str.parse().unwrap()),\r\n        controller_ip_address: controller_ip.parse().unwrap()\r\n    };\r\n    Ok(config)\r\n}\r\n\r\nasync fn log_ac_command(command: &str, state: &str) -> Result<(), Box<dyn std::error::Error>>{\r\n    let insert = \"INSERT INTO ac_management(timestamp, command, state) VALUES($1, $2, $3)\";\r\n    let timestamp = Local::now();\r\n    let result = postgres_command(insert, &[&timestamp, &command, &state]).await?;\r\n    log_message(format!(\"Temperature Log Result: {}\", result).as_str());\r\n    Ok(())\r\n}\r\n\r\nfn log_message(message: &str) -> () {\r\n    let timestamp = Local::now();\r\n    println!(\"{} {:?}\", timestamp.format(\"%Y-%m-%d %H:%M:%S%.3f %:z\"), message);\r\n}\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\r\n    let config = read_config().await?;\r\n    let target_temp = config.target_temperature;\r\n    let mut ac_is_on = false;\r\n    let mut last_read = -1.0;\r\n    // exit(0);\r\n    loop {\r\n        let temperature = get_temperature(&config).await;\r\n        match temperature {\r\n            Ok(t) => {\r\n                last_read = t;\r\n                log_message(format!(\"The temperature is {}\", t).as_str());\r\n                let result = log_temperature(t).await;\r\n                match result {\r\n                    Ok(()) => {\r\n                        log_message(format!(\"Successful write to DB\").as_str());\r\n                    }\r\n                    Err(err) => log_message(format!(\"Error writing to DB: {}\", err).as_str())\r\n                }\r\n            }\r\n            Err(err) => {\r\n                log_message(format!(\"Temperature retrieval error: {}\", err).as_str());\r\n            }\r\n        }\r\n        let current_hour = Utc::now().hour();\r\n        let (start_hour, stop_hour) =  config.active_hours_utc;\r\n\r\n        let app_is_active = current_hour >= start_hour\r\n            && (start_hour <= stop_hour && current_hour < stop_hour)\r\n            || (start_hour > stop_hour && current_hour < stop_hour);\r\n        if !app_is_active && ac_is_on {\r\n            match manage_ac(false).await {\r\n                Ok(()) => {\r\n                    ac_is_on = false;\r\n                    log_message(\"AC was turned off because the application is deactivated\");\r\n                }\r\n                Err(err) => {\r\n                    log_message(format!(\"Error occurred when turning AC off: {}\", err).as_str());\r\n                }\r\n            }\r\n\r\n        }\r\n        if app_is_active {\r\n            if last_read < target_temp && ac_is_on {\r\n                match manage_ac(false).await {\r\n                    Ok(()) => {\r\n                        ac_is_on = false;\r\n                        log_message(format!(\"AC was turned off because temperature went down to {}\", last_read).as_str());\r\n                    }\r\n                    Err(err) => {\r\n                        log_message(format!(\"Error occurred when turning AC off: {}\", err).as_str());\r\n                    }\r\n                }\r\n\r\n            } else if last_read > target_temp + 2.0 && !ac_is_on {\r\n                match manage_ac(true).await {\r\n                    Ok(()) => {\r\n                        ac_is_on = true;\r\n                        log_message(format!(\"AC was turned on because temperature went up to {}\", last_read).as_str());\r\n                    }\r\n                    Err(err) => {\r\n                        log_message(format!( \"Error occurred when turning AC on: {}\", err).as_str());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        tokio::time::sleep(config.loop_interval_seconds).await;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.57.0 (f1edd0429 2021-11-29)\r\nbinary: rustc\r\ncommit-hash: f1edd0429582dd29cccacaf50fd134b05593bd9c\r\ncommit-date: 2021-11-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.57.0\r\nLLVM version: 13.0.0\r\n\r\n```\r\n\r\n### Error output\r\n\r\n```\r\n   Compiling stats_collector v0.1.0 (/home/al/work/smart/master/stats_collector)\r\nthread 'rustc' panicked at 'attempted to read from stolen value: rustc_middle::mir::Body', compiler/rustc_mir_transform/src/check_unsafety.rs:445:36\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.57.0 (f1edd0429 2021-11-29) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [unsafety_check_result] unsafety-checking `manage_ac`\r\n#1 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: could not compile `stats_collector`\r\n\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92572/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92572/timeline", "performed_via_github_app": null, "state_reason": null}