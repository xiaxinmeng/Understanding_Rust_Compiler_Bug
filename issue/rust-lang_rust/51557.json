{"url": "https://api.github.com/repos/rust-lang/rust/issues/51557", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51557/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51557/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51557/events", "html_url": "https://github.com/rust-lang/rust/issues/51557", "id": 332498810, "node_id": "MDU6SXNzdWUzMzI0OTg4MTA=", "number": 51557, "title": "Ironing out StepBy<Range>'s performance issues", "user": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-14T17:40:49Z", "updated_at": "2023-05-20T15:24:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The behaviour of `<Range<_> as Iterator>::nth` has a slight mismatch with `StepBy` (or `Step` depending on your viewpoint) as [@scottmcm has found out](https://github.com/rust-lang/rust/issues/27741#issuecomment-385237631), resulting in sub-optimal performance.\r\nOn every iteration, the range has to first step forwards `n-1` times to get the next element and then advance again by 1.\r\n\r\nI'm hoping we can improve `step_by` into a 100% zero-cost abstraction.\r\n\r\nIt seems like the performance issue is specific to `StepBy<Range>`. I'm thinking therefore that we could specialize `Iterator for StepBy<Range<I>>` such that it would use @scottmcm's suggested semantics. Like this:\r\n\r\n```rust\r\nimpl<I> Iterator for StepBy<Range<I>>\r\nwhere\r\n    I: Step\r\n{\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        self.first = false;\r\n        if let Some(mut n) = self.start.add_usize(self.step+1) {\r\n            if n < self.end {\r\n                std::mem::swap(&mut self.start, &mut n);\r\n                return Some(n);\r\n            }\r\n        }\r\n\r\n        self.start = self.end.clone();\r\n        None\r\n    }\r\n}\r\n```\r\n\r\nThat also avoids the branch on a regular `next()`. I haven't looked at the other methods but that boolean in `StepBy` could possibly become superfluous. During construction of the `StepBy` adapter, the `size` in `.step_by(size)` is decremented and this specialization has to counter-add 1 every time but that should be optimized away if inlined.\r\n\r\nIf someone were to depend on side-effects in `Step::add_usize` (when the trait is stabilized), this pre-stepping would become weird. Same thing with a hypothetical `next_and_skip_ahead()`.\r\n\r\n@scottmcm what do you think of this?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51557/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51557/timeline", "performed_via_github_app": null, "state_reason": null}