{"url": "https://api.github.com/repos/rust-lang/rust/issues/92415", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92415/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92415/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92415/events", "html_url": "https://github.com/rust-lang/rust/issues/92415", "id": 1090723521, "node_id": "I_kwDOAAsO6M5BAx7B", "number": 92415, "title": "Implementation of trait is not general enough when boxing future returning `<T as Foo<'a>>::Foo`", "user": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259720434, "node_id": "MDU6TGFiZWwxMjU5NzIwNDM0", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Polish", "name": "AsyncAwait-Polish", "color": "d4c5f9", "default": false, "description": "Async-await issues that are part of the \"polish\" area"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-12-29T20:02:37Z", "updated_at": "2022-01-10T16:41:01Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Reproduction:\r\n```rust\r\nuse std::any::Any;\r\nuse std::future::Future;\r\n\r\ntrait Foo<'a>: Sized {\r\n    type Error;\r\n    fn foo(x: &'a str) -> Result<Self, Self::Error>;\r\n}\r\n\r\nimpl<'a> Foo<'a> for &'a str {\r\n    type Error = ();\r\n\r\n    fn foo(x: &'a str) -> Result<Self, Self::Error> {\r\n        Ok(x)\r\n    }\r\n}\r\n\r\nasync fn get_foo<'a, T>(x: &'a str) -> Result<T, <T as Foo<'a>>::Error>\r\nwhere\r\n    T: Foo<'a>,\r\n{\r\n    Foo::foo(x)\r\n}\r\n\r\nfn bar<'a>(x: &'a str) -> Box<dyn Future<Output = Result<&'a str, ()>> + Send + 'a> {\r\n    Box::new(async move { get_foo(x).await })\r\n}\r\n```\r\n\r\nOutput on stable and nightly:\r\n```\r\nerror: implementation of `Foo` is not general enough\r\n  --> src/lib.rs:25:5\r\n   |\r\n25 |     Box::new(async move { get_foo(x).await })\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\r\n   |\r\n   = note: `Foo<'1>` would have to be implemented for the type `&'0 str`, for any two lifetimes `'0` and `'1`...\r\n   = note: ...but `Foo<'2>` is actually implemented for the type `&'2 str`, for some specific lifetime `'2\r\n```\r\n\r\nInterestingly, the code compiles without the `+ Send`. It also compiles without the async move block. This may be related to #61949.\r\n\r\n@rustbot label +A-async-await", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92415/timeline", "performed_via_github_app": null, "state_reason": null}