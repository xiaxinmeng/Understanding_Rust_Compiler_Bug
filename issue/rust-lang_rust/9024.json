{"url": "https://api.github.com/repos/rust-lang/rust/issues/9024", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9024/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9024/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9024/events", "html_url": "https://github.com/rust-lang/rust/issues/9024", "id": 19112082, "node_id": "MDU6SXNzdWUxOTExMjA4Mg==", "number": 9024, "title": "LLVM fails to eliminate bounds checking for fixed-size arrays", "user": {"login": "zeux", "id": 1106629, "node_id": "MDQ6VXNlcjExMDY2Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1106629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeux", "html_url": "https://github.com/zeux", "followers_url": "https://api.github.com/users/zeux/followers", "following_url": "https://api.github.com/users/zeux/following{/other_user}", "gists_url": "https://api.github.com/users/zeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeux/subscriptions", "organizations_url": "https://api.github.com/users/zeux/orgs", "repos_url": "https://api.github.com/users/zeux/repos", "events_url": "https://api.github.com/users/zeux/events{/privacy}", "received_events_url": "https://api.github.com/users/zeux/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-09-06T15:35:27Z", "updated_at": "2014-03-02T18:06:16Z", "closed_at": "2014-03-02T18:06:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following code:\n\n```\nfn add(a: [f32, ..3], b: [f32, ..3]) -> [f32, ..3] {\n    let mut s: [f32, ..3] = [0.0, ..3];\n    for i in range(0, 3) {\n        s[i] = a[i] + b[i];\n    }\n    s\n}\n```\n\nThis function results in the following LLVM assembly when compiled with --opt-level 3:\n\n```\ndefine void @_ZN3bar16_d2fb2ba5dc6ea744v0.0E([3 x float]* nocapture, { i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone, [3 x float]* nocapture readonly, [3 x float]* nocapture readonly) #1 {\n\"function top level\":\n  %s = alloca [3 x float], align 4\n  %4 = bitcast [3 x float]* %s to i8*\n  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 12, i32 4, i1 false)\n  br label %match_else\n\nmatch_else:                                       ; preds = %\"function top level\", %next6\n  %.sroa.013.0.load1922 = phi i64 [ 0, %\"function top level\" ], [ %8, %next6 ]\n  %5 = shl i64 %.sroa.013.0.load1922, 2\n  %6 = icmp ugt i64 %5, 11\n  br i1 %6, label %cond, label %next6\n\nmatch_case:                                       ; preds = %next6\n  %7 = bitcast [3 x float]* %0 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %4, i64 12, i32 4, i1 false)\n  ret void\n\ncond:                                             ; preds = %match_else\n  tail call void @\"_ZN8unstable4lang17fail_bounds_check17_7112ff25e39642a211v0.8$x2dpreE\"({ i64, %tydesc*, i8*, i8*, i8 }* undef, i8* getelementptr inbounds ([8 x i8]* @str998, i64 0, i64 0), i64 5, i64 %.sroa.013.0.load1922, i64 3)\n  unreachable\n\nnext6:                                            ; preds = %match_else\n  %8 = add i64 %.sroa.013.0.load1922, 1\n  %9 = getelementptr inbounds [3 x float]* %3, i64 0, i64 %.sroa.013.0.load1922\n  %10 = getelementptr inbounds [3 x float]* %2, i64 0, i64 %.sroa.013.0.load1922\n  %11 = load float* %9, align 4\n  %12 = load float* %10, align 4\n  %13 = fadd float %11, %12\n  %14 = getelementptr inbounds [3 x float]* %s, i64 0, i64 %.sroa.013.0.load1922\n  store float %13, float* %14, align 4\n  %15 = icmp slt i64 %8, 3\n  br i1 %15, label %match_else, label %match_case\n}\n```\n\nWhat's weird is that llvm opt (from LLVM 3.2) can optimize this just fine, maybe an optimization regression or we're lacking some optimization passes.\n\nAlso on an unrelated (?) note Mul can overflow:\n\n```\nlet x = [0i32, ..16]; x[1u << 63]\n```\n\nThe address computation overflows as well, yielding x[0] as a result.\n", "closed_by": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9024/timeline", "performed_via_github_app": null, "state_reason": "completed"}