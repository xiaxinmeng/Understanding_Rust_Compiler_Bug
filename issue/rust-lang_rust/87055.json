{"url": "https://api.github.com/repos/rust-lang/rust/issues/87055", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87055/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87055/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87055/events", "html_url": "https://github.com/rust-lang/rust/issues/87055", "id": 941382096, "node_id": "MDU6SXNzdWU5NDEzODIwOTY=", "number": 87055, "title": "Unable to optimize out branches in drop function in unwind landing pad", "user": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2021-07-11T06:12:43Z", "updated_at": "2023-04-05T17:35:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In [this code](https://godbolt.org/z/4Wrsb4z5f):\r\n```rust\r\npub fn foo(g: fn()) {\r\n    let _var: Option<Box<i32>> = None;\r\n    g();\r\n}\r\n```\r\n\r\nAssembly:\r\n```asm\r\ncore::ptr::drop_in_place<core::option::Option<alloc::boxed::Box<i32>>>:\r\n        mov     rdi, qword ptr [rdi]\r\n        test    rdi, rdi\r\n        je      .LBB0_1\r\n        mov     esi, 4\r\n        mov     edx, 4\r\n        jmp     qword ptr [rip + __rust_dealloc@GOTPCREL]\r\n.LBB0_1:\r\n        ret\r\n\r\nexample::foo:\r\n        push    rbx\r\n        sub     rsp, 16\r\n        mov     qword ptr [rsp + 8], 0\r\n        call    rdi\r\n        add     rsp, 16\r\n        pop     rbx\r\n        ret\r\n        mov     rbx, rax\r\n        lea     rdi, [rsp + 8]\r\n        call    core::ptr::drop_in_place<core::option::Option<alloc::boxed::Box<i32>>>\r\n        mov     rdi, rbx\r\n        call    _Unwind_Resume@PLT\r\n        ud2\r\n\r\nDW.ref.rust_eh_personality:\r\n        .quad   rust_eh_personality\r\n```\r\n\r\n`_var` is known to be `None` so the deallocation is optimized away in the normal flow. But in landing pad for unwinding, it still generates a branch to check if `_var` is null. But it's a local variable which is not able to be modified in anywhere else and should be known to be null.\r\n\r\nI'm expecting the `drop` of `_var` should be completely elided so that `g()` can be a tail call.\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87055/timeline", "performed_via_github_app": null, "state_reason": null}