{"url": "https://api.github.com/repos/rust-lang/rust/issues/55209", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55209/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55209/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55209/events", "html_url": "https://github.com/rust-lang/rust/issues/55209", "id": 372043394, "node_id": "MDU6SXNzdWUzNzIwNDMzOTQ=", "number": 55209, "title": "`BTreeMap` use of `EMPTY_ROOT_NODE` causes MIRI failure.", "user": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-19T17:14:31Z", "updated_at": "2018-10-19T17:17:55Z", "closed_at": "2018-10-19T17:17:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[In liballoc/collections/btree/node.rs](https://github.com/rust-lang/rust/blob/master/src/liballoc/collections/btree/node.rs#L110-L119) the constant `EMPTY_ROOT_NODE` is defined as a `LeafNode<(), ()>`. A comment explains that while the key/value can be set to `()` and `()`, this constant can be used in any `BTreeMap` of any key/value type. The reason being that this is only used as a placeholder in an empty tree, and the rest of the source ensures that neither the `keys` nor `vals` field are ever accessed.\r\n\r\nHowever, [`LeafNode::as_leaf`](https://github.com/rust-lang/rust/blob/master/src/liballoc/collections/btree/node.rs#L385-L389) casts this pointer to a `&LeafNode<K, V>`. As promised, the invalid fields are never accessed, but my understanding is that the *mere existence of the returned reference constitutes UB* because we have an &-pointer to an invalid object.\r\n\r\nI don't believe the current compiler will exploit this in any way to actually produce unexpected behaviour (and I can't really think of how it would), but the problem can be seen in MIRI with the following program:\r\n\r\n```rust\r\nuse std::collections::BTreeMap;\r\n\r\nfn main() {\r\n    let mut map = BTreeMap::<u8, u8>::new();\r\n    let _ = map.entry(10);\r\n}\r\n```\r\nwhich produces the following output under `cargo miri`:\r\n```\r\nerror[E0080]: constant evaluation error: type validation failed: encountered dangling (not entirely in bounds) reference\r\n    --> /home/apoelstra/.rustup/toolchains/nightly-2018-10-19-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/ptr.rs:2912:9\r\n     |\r\n2912 |         &*self.as_ptr()\r\n     |         ^^^^^^^^^^^^^^^ type validation failed: encountered dangling (not entirely in bounds) reference\r\n     |\r\nnote: inside call to `<std::ptr::NonNull<T>><alloc::collections::btree::node::LeafNode<u8, u8>>::as_ref`\r\n    --> /home/apoelstra/.rustup/toolchains/nightly-2018-10-19-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/collections/btree/node.rs:387:13\r\n     |\r\n387  |             self.node.as_ref()\r\n     |             ^^^^^^^^^^^^^^^^^^\r\nnote: inside call to `<alloc::collections::btree::node::NodeRef<BorrowType, K, V, Type>><alloc::collections::btree::node::marker::Immut, u8, u8, alloc::collections::btree::node::marker::LeafOrInternal>::as_leaf`                                                                         --> /home/apoelstra/.rustup/toolchains/nightly-2018-10-19-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/collections/btree/node.rs:392:9\r\n     |\r\n392  |         self.as_leaf().is_shared_root()\r\n     |         ^^^^^^^^^^^^^^\r\nnote: inside call to `<alloc::collections::btree::node::NodeRef<BorrowType, K, V, Type>><alloc::collections::btree::node::marker::Immut, u8, u8, alloc::collections::btree::node::marker::LeafOrInternal>::is_shared_root`\r\n    --> /home/apoelstra/.rustup/toolchains/nightly-2018-10-19-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/collections/btree/node.rs:191:9\r\n     |\r\n191  |         self.as_ref().is_shared_root()\r\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: inside call to `<alloc::collections::btree::node::Root<K, V>><u8, u8>::is_shared_root`\r\n    --> /home/apoelstra/.rustup/toolchains/nightly-2018-10-19-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/collections/btree/map.rs:1175:12\r\n     |\r\n1175 |         if self.root.is_shared_root() {\r\n     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: inside call to `<std::collections::BTreeMap<K, V>><u8, u8>::ensure_root_is_owned`\r\n    --> /home/apoelstra/.rustup/toolchains/nightly-2018-10-19-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/collections/btree/map.rs:902:9\r\n     |\r\n902  |         self.ensure_root_is_owned(); \r\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: inside call to `<std::collections::BTreeMap<K, V>><u8, u8>::entry`\r\n    --> src/main.rs:6:13\r\n     |\r\n6    |     let _ = map.entry(10);\r\n<snip>\r\n```\r\n", "closed_by": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55209/timeline", "performed_via_github_app": null, "state_reason": "completed"}