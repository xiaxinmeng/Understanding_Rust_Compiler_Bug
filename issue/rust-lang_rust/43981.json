{"url": "https://api.github.com/repos/rust-lang/rust/issues/43981", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43981/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43981/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43981/events", "html_url": "https://github.com/rust-lang/rust/issues/43981", "id": 251334547, "node_id": "MDU6SXNzdWUyNTEzMzQ1NDc=", "number": 43981, "title": "Automatically implementing Sync for all types with Sync members considered harmful", "user": {"login": "HadrienG2", "id": 1305080, "node_id": "MDQ6VXNlcjEzMDUwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1305080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HadrienG2", "html_url": "https://github.com/HadrienG2", "followers_url": "https://api.github.com/users/HadrienG2/followers", "following_url": "https://api.github.com/users/HadrienG2/following{/other_user}", "gists_url": "https://api.github.com/users/HadrienG2/gists{/gist_id}", "starred_url": "https://api.github.com/users/HadrienG2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HadrienG2/subscriptions", "organizations_url": "https://api.github.com/users/HadrienG2/orgs", "repos_url": "https://api.github.com/users/HadrienG2/repos", "events_url": "https://api.github.com/users/HadrienG2/events{/privacy}", "received_events_url": "https://api.github.com/users/HadrienG2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 178802147, "node_id": "MDU6TGFiZWwxNzg4MDIxNDc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-needs-decision", "name": "I-needs-decision", "color": "e11d21", "default": false, "description": "Issues in need of decision."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2017-08-18T19:14:26Z", "updated_at": "2017-08-20T18:49:51Z", "closed_at": "2017-08-20T18:49:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "So, I had [an interesting side-discussion with vitalyd today](https://users.rust-lang.org/t/thread-synchronization-performance-issues/12380/15) on users.rust-lang.org regarding what it truly means for a type to be Sync in Rust.\r\n\r\nAccording to the Nomicon, [\"A type is Sync if it is safe to share between threads\"](https://doc.rust-lang.org/nomicon/send-and-sync.html). To most people, one implication of this statement is that operations on this type should be thread-safe, in the sense that it should be impossible for one thread to mutate an object of this type and for another thread to concurrently observe the object in a half-modified, inconsistent state.\r\n\r\nThis requirement is trivially met for all types which cannot be mutated through a shared reference, i.e. any type which doesn't exhibit interior mutability. However, for those remaining types, I think we might currently automatically derive Sync a bit too eagerly.\r\n\r\nConsider the following very silly type definition, which you should never use at home, but which every multi-threading beginner has written a variant of at some point in their life:\r\n\r\n```rust\r\nuse std::sync::atomic::{AtomicU8, AtomicU16, Ordering};\r\n\r\nstruct SillyDate {\r\n    day: AtomicU8,\r\n    month: AtomicU8,\r\n    year: AtomicU16,\r\n}\r\n\r\nimpl SillyDate {\r\n    fn set(&self, day: u8, month: u8, year: u16) {\r\n        self.day.store(day, Ordering::Relaxed);\r\n        self.month.store(month, Ordering::Relaxed);\r\n        self.year.store(year, Ordering::Relaxed);\r\n    }\r\n\r\n    fn get(&self) -> (u8, u8, u16) {\r\n        let day = self.day.load(Ordering::Relaxed);\r\n        let month = self.month.load(Ordering::Relaxed);\r\n        let year = self.year.load(Ordering::Relaxed);\r\n        (day, month, year)\r\n    }\r\n}\r\n```\r\n\r\nIn rustc's current automatic trait derivation rules, [this type is Sync](https://play.rust-lang.org/?gist=3b39e17c5948fabb7dbb5c8713fedb9f&version=nightly). However, if get() and set() are called from different threads, it can quite obviously result in get() potentially observing the object in an inconsistent state. So this type is not really \"safe to share between multiple threads\" in the sense where most people would understand that expression.\r\n\r\nOne possible observation would be that this is not strictly speaking a data race, and therefore not something which rustc's definition of Sync should guard against. To this argument, I will contend that if we only cared about not being able to cause data races from Safe Rust code, raw pointers could just as well be made Sync, since safe code cannot use them to cause a data race and with unsafe, all bets are off anyway.\r\n\r\nThe Nomicon itself exposes some doubt that data race freedom should be all that matters in order to consider a type Sync:\r\n\r\n> TODO: better explain what can or can't be Send or Sync. Sufficient to appeal only to data races?\r\n\r\nAs an alternative, I would propose that the automatic derivation rules for Sync be changed so that this trait be not automatically derived for a given type if that type contains at least two objects with interior mutability.\r\n\r\nThis change could break some existing code, so if we end up agreeing that it is a good idea in principle, it would be important to check how much existing crates rely on Sync being automatically derived for types with two or more internally mutable members.\r\n\r\nWhat do you think?", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43981/timeline", "performed_via_github_app": null, "state_reason": "completed"}