{"url": "https://api.github.com/repos/rust-lang/rust/issues/69684", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69684/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69684/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69684/events", "html_url": "https://github.com/rust-lang/rust/issues/69684", "id": 575036269, "node_id": "MDU6SXNzdWU1NzUwMzYyNjk=", "number": 69684, "title": "[libs] add recursive variant of `fs::read_dir`", "user": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-03T23:57:25Z", "updated_at": "2022-02-05T19:20:14Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "## Motivation\r\n\r\nAs part of the [`fs` module](https://doc.rust-lang.org/std/fs/index.html) there exist various recursive and non-recursive operations. `create_dir` and `create_dir_all`. `remove_dir` and `remove_dir_all`. But to read the contents of a directory there currently only exists [`read_dir`](https://doc.rust-lang.org/std/fs/fn.read_dir.html), but no recursive counterpart:\r\n\r\n|Action Kind| Base function | Recursive variant\r\n|---| -- | -- |\r\n| Create a directory| `fs::create_dir` | `fs::create_dir_all` |\r\n| Remove a directory | `fs::remove_dir` | `fs::remove_dir_all` |\r\n| Read a directory's contents | `fs::read_dir` | ... |\r\n\r\nI noticed the omission of this method when trying to read out a directory recursively, and discovered this was the only directory operation that doesn't have a recursive counterpart.\r\n\r\n## Usage overview\r\nI'd imagine `fs::read_dir_all` would be used in much the same way as `fs::read_dir`:\r\n\r\n```rust\r\nfor entry in fs::read_dir_all(dir)? {\r\n    let entry = entry?;\r\n    dbg!(entry.path());\r\n}\r\n```\r\n\r\n## Implementation overview\r\nRoughly the API additions to `std::fs` would look like this:\r\n```rust\r\n#[derive(Debug)]\r\npub struct ReadDirAll;\r\n\r\nimpl Iterator for ReadDirAll {\r\n    type Item = Result<DirEntry>;\r\n}\r\n\r\npub fn read_dir_all<P: AsRef<Path>>(path: P) -> Result<ReadDirAll>;\r\n```\r\n\r\n## Potential drawbacks\r\n\r\nI remember reading something about the [`readdir(3)` syscall](https://linux.die.net/man/3/readdir), and a file filtering as part of the kernel. But I can't seem to find any reference to that anymore. I also thought this had been referenced in a prior RFC, but that too I cannot find.\r\n\r\nBut for argument's sake, even if there was a variant for `readdir` variant that took a filter I'd argue that since `std::fs::read_dir` doesn't provide filtering, neither should `std::fs_read_dir_all`. And if we'd want a variant that *does* provide filtering, it would not be a clean counterpart to `fs::read_dir`, so it would warrant introducing under a new name.\r\n\r\nThese functions should be able to co-exist with each other, much the same way `fs::read_to_string` and `io::Read::read_to_string` co-exist (both useful, but is a simplified version of the other).\r\n\r\n## Similar functionality in other languages\r\n\r\n- __C++__ has [`std::filesystem::recursive_directory_iterator`](https://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator) since C++ 17.\r\n- __nodejs__ doesn't include this as part of core, but the [readdirp](https://www.npmjs.com/package/readdirp) package in userland has [over half a billion](https://img.shields.io/npm/dt/readdirp.svg?style=flat-square) downloads indicating there's interest in this functionality.\r\n- __bash__ has the `find` command generally available. `$ find .` will recursively print out all directory contents.\r\n- And more entries can be found as part of [rosetta code](https://rosettacode.org/wiki/Walk_a_directory/Recursively).\r\n\r\n## Conclusion\r\nI think `fs::read_dir_all` makes for a straight forward addition to the stdlib. People expect this functionality to exist by default, and the shape and name of this function doesn't seem controversial. Even if filtering supersets of this functionality could possibly exist, they would likely be a different shape, and could co-exist with this function. Thanks!", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69684/reactions", "total_count": 15, "+1": 15, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69684/timeline", "performed_via_github_app": null, "state_reason": null}