{"url": "https://api.github.com/repos/rust-lang/rust/issues/70844", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70844/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70844/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70844/events", "html_url": "https://github.com/rust-lang/rust/issues/70844", "id": 595146488, "node_id": "MDU6SXNzdWU1OTUxNDY0ODg=", "number": 70844, "title": "E0597: `lock` does not live long enough (surprising error, the message could be more helpful)", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-06T14:05:34Z", "updated_at": "2020-04-28T19:06:37Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried compiling this code:\r\n\r\n```rust\r\nfn main() {\r\n    let lock = std::sync::Mutex::new(10);\r\n    if let Ok(_) = lock.try_lock() {}\r\n}\r\n```\r\n\r\nError:\r\n\r\n```\r\nerror[E0597]: `lock` does not live long enough\r\n --> src/main.rs:3:20\r\n  |\r\n3 |     if let Ok(_) = lock.try_lock() {}\r\n  |                    ^^^^-----------\r\n  |                    |\r\n  |                    borrowed value does not live long enough\r\n  |                    a temporary with access to the borrow is created here ...\r\n4 | }\r\n  | -\r\n  | |\r\n  | `lock` dropped here while still borrowed\r\n  | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::result::Result<std::sync::MutexGuard<'_, i32>, std::sync::TryLockError<std::sync::MutexGuard<'_, i32>>>`\r\n  |\r\n  = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0597`.\r\nerror: could not compile `tmp`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nI'm surprised that this does not compile!\r\n\r\nThe error message suggests adding a semicolon after the expression, but it's not obvious to me what exactly the expression is and where the semicolon should go. A suggestion on where to place the semicolon would be helpful.\r\n\r\nThe solution is this and compiles just fine:\r\n\r\n```rust\r\nfn main() {\r\n    let lock = std::sync::Mutex::new(10);\r\n    if let Ok(_) = lock.try_lock() {};\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70844/timeline", "performed_via_github_app": null, "state_reason": null}