{"url": "https://api.github.com/repos/rust-lang/rust/issues/41104", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41104/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41104/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41104/events", "html_url": "https://github.com/rust-lang/rust/issues/41104", "id": 219806289, "node_id": "MDU6SXNzdWUyMTk4MDYyODk=", "number": 41104, "title": "thread 'rustc' panicked at 'Box<Any>'", "user": {"login": "tubo28", "id": 3405886, "node_id": "MDQ6VXNlcjM0MDU4ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/3405886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tubo28", "html_url": "https://github.com/tubo28", "followers_url": "https://api.github.com/users/tubo28/followers", "following_url": "https://api.github.com/users/tubo28/following{/other_user}", "gists_url": "https://api.github.com/users/tubo28/gists{/gist_id}", "starred_url": "https://api.github.com/users/tubo28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tubo28/subscriptions", "organizations_url": "https://api.github.com/users/tubo28/orgs", "repos_url": "https://api.github.com/users/tubo28/repos", "events_url": "https://api.github.com/users/tubo28/events{/privacy}", "received_events_url": "https://api.github.com/users/tubo28/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 147085028, "node_id": "MDU6TGFiZWwxNDcwODUwMjg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly", "name": "regression-from-stable-to-nightly", "color": "e4008a", "default": false, "description": "Performance or correctness regression from stable to nightly."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-06T07:11:41Z", "updated_at": "2017-04-07T01:27:31Z", "closed_at": "2017-04-07T01:27:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "`rustc` panicked when I was trying to write RBST (a kind of balanced binary search tree).\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#[derive(Clone)]\r\nstruct Node {\r\n    val: i32,\r\n    size: usize,\r\n    left: Option<Box<Node>>,\r\n    right: Option<Box<Node>>\r\n}\r\n\r\nimpl Node {\r\n    pub fn show(&self, indent: usize) {\r\n        println!(\"{}\", self.val);\r\n        if self.left.is_some() {\r\n            self.left.as_ref().unwrap().show(indent + 1);\r\n        }\r\n        for _ in 0..indent { print!(\" \"); }\r\n        if self.right.is_some() {\r\n            self.right.as_ref().unwrap().show(indent + 1);\r\n        }\r\n    }\r\n\r\n    fn singleton(val: i32) -> Node {\r\n        Node {\r\n            val: val,\r\n            size: 1,\r\n            left: None,\r\n            right: None,\r\n        }\r\n    }\r\n}\r\n\r\nstruct RBST {\r\n    root: Option<Box<Node>>,\r\n}\r\n\r\nfn rand() -> usize {\r\n    10000 // omitted\r\n}\r\n\r\nimpl RBST {\r\n    pub fn insert(&mut self, n: Option<Box<Node>>, new_val: i32)\r\n                  -> Option<Box<Node>> {\r\n        let (left, right) = RBST::split(n, new_val);\r\n        let n = RBST::merge(left, Some(Box::new(Node::singleton(new_val))));\r\n        RBST::merge(n, right)\r\n    }\r\n\r\n    fn merge(left: Option<Box<Node>>, right: Option<Box<Node>>)\r\n                 -> Option<Box<Node>>\r\n    {\r\n        match (&left, &right) {\r\n            (&None, &None) => None,\r\n            (&None, &Some(ref mut r)) => Some(*r),\r\n            (&Some(ref mut l), &None) => Some(*l),\r\n            _ => {\r\n                let mut left = left.unwrap().clone();\r\n                let mut right = right.unwrap().clone();\r\n                if rand() % (left.size + right.size) < left.size {\r\n                    let new_right = RBST::merge(left.right.clone(), Some(right));\r\n                    left.right = new_right;\r\n                    Some(left)\r\n                } else {\r\n                    right.left = RBST::merge(Some(left), right.left.clone());\r\n                    Some(right)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fn split(n: Option<Box<Node>>, val: i32)\r\n             -> (Option<Box<Node>>, Option<Box<Node>>)\r\n    {\r\n        (None, None) // omitted\r\n    }\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nI expected to see this happen: rustc reports syntax errors\r\n\r\nInstead, this happened: it panicked\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.18.0-nightly (5309a3e31 2017-04-03)\r\nbinary: rustc\r\ncommit-hash: 5309a3e31d88def1f3ea966162ed4f81f161d500\r\ncommit-date: 2017-04-03\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.18.0-nightly\r\nLLVM version: 3.9\r\n```\r\n\r\nBacktrace:\r\n```\r\nerror: internal compiler error: /checkout/src/librustc/middle/mem_categorization.rs:208: interior cmt {rvalue(ReScope(CodeExtent(208/Misc(NodeId(429)))), ReScope(CodeExtent(208/Misc(NodeId(429))))) id:138 m:McDeclared ty:(&std::option::Option<std::boxed::Box<Node>>, &std::option::Option<std::boxed::Box<Node>>)} is not an ADT\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: run with `RUST_BACKTRACE=1` for a backtrace\r\n\r\nthread 'rustc' panicked at 'Box<Any>', /checkout/src/librustc_errors/lib.rs:416\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: rustc_errors::Handler::bug\r\n   1: rustc::session::opt_span_bug_fmt::{{closure}}\r\n   2: rustc::session::opt_span_bug_fmt\r\n   3: rustc::session::bug_fmt\r\n   4: rustc::middle::mem_categorization::cmt_::immutability_blame\r\n   5: rustc::middle::mem_categorization::cmt_::immutability_blame\r\n   6: rustc::middle::mem_categorization::cmt_::immutability_blame\r\n   7: rustc_borrowck::borrowck::BorrowckCtxt::report\r\n   8: rustc_borrowck::borrowck::gather_loans::check_mutability\r\n   9: <rustc_borrowck::borrowck::gather_loans::GatherLoanCtxt<'a, 'tcx> as rustc::middle::expr_use_visitor::Delegate<'tcx>>::borrow\r\n  10: rustc::middle::mem_categorization::MemCategorizationContext::cat_pattern_\r\n  11: rustc::middle::mem_categorization::MemCategorizationContext::cat_pattern_\r\n  12: rustc::middle::mem_categorization::MemCategorizationContext::cat_pattern_\r\n  13: rustc::middle::mem_categorization::MemCategorizationContext::cat_pattern_\r\n  14: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_pat\r\n  15: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_expr\r\n  16: rustc::middle::expr_use_visitor::ExprUseVisitor::consume_expr\r\n  17: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_expr\r\n  18: rustc::middle::expr_use_visitor::ExprUseVisitor::consume_body\r\n  19: rustc_borrowck::borrowck::build_borrowck_dataflow_data\r\n  20: rustc_borrowck::borrowck::check_crate\r\n  21: rustc_driver::driver::phase_3_run_analysis_passes::{{closure}}\r\n  22: rustc::ty::context::TyCtxt::create_and_enter\r\n  23: rustc_driver::driver::phase_3_run_analysis_passes\r\n  24: rustc_driver::driver::compile_input\r\n  25: rustc_driver::run_compiler\r\n  26: std::panicking::try::do_call\r\n  27: __rust_maybe_catch_panic\r\n             at /checkout/src/libpanic_unwind/lib.rs:98\r\n  28: <F as alloc::boxed::FnBox<A>>::call_box\r\n  29: std::sys::imp::thread::Thread::new::thread_start\r\n             at /checkout/src/liballoc/boxed.rs:650\r\n             at /checkout/src/libstd/sys_common/thread.rs:21\r\n             at /checkout/src/libstd/sys/unix/thread.rs:84\r\n  30: start_thread\r\n  31: clone\r\n\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41104/timeline", "performed_via_github_app": null, "state_reason": "completed"}