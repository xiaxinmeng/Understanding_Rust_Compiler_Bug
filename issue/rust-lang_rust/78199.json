{"url": "https://api.github.com/repos/rust-lang/rust/issues/78199", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78199/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78199/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78199/events", "html_url": "https://github.com/rust-lang/rust/issues/78199", "id": 726803008, "node_id": "MDU6SXNzdWU3MjY4MDMwMDg=", "number": 78199, "title": "Unclear lifetime error instead of \"cannot move out of mutable reference\"", "user": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-10-21T19:27:40Z", "updated_at": "2020-10-22T09:14:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code:\r\n\r\n```rust\r\nstruct S<'a, T>(&'a mut T);\r\n\r\nimpl<'a, T> S<'a, T> {\r\n    fn get(&mut self) -> &'a mut T {\r\n        self.0\r\n    }\r\n}\r\n```\r\n\r\nGives this error:\r\n\r\n```\r\nerror[E0312]: lifetime of reference outlives lifetime of borrowed content...\r\n --> src/lib.rs:5:9\r\n  |\r\n5 |         self.0\r\n  |         ^^^^^^\r\n  |\r\nnote: ...the reference is valid for the lifetime `'a` as defined on the impl at 3:6...\r\n --> src/lib.rs:3:6\r\n  |\r\n3 | impl<'a, T> S<'a, T> {\r\n  |      ^^\r\nnote: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the method body at 4:5\r\n --> src/lib.rs:4:5\r\n  |\r\n4 |     fn get(&mut self) -> &'a mut T {\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nThe actual problem is that this code would create aliasing mutable references. It could be rewritten to something like this, which compiles fine, without any lifetimes apparently changing:\r\n\r\n```rust\r\nstruct S<'a, T>(Option<&'a mut T>);\r\n\r\nimpl<'a, T> S<'a, T> {\r\n    fn get(&mut self) -> &'a mut T {\r\n        self.0.take().unwrap()\r\n    }\r\n}\r\n```\r\n\r\nIf the type is anything other than `&mut T`, e.g.:\r\n\r\n```rust\r\nstruct Wrapper<'a, T>(&'a mut T);\r\n\r\nstruct S<'a, T>(Wrapper<'a, T>);\r\n\r\nimpl<'a, T> S<'a, T> {\r\n    fn get(&mut self) -> Wrapper<'a, T> {\r\n        self.0\r\n    }\r\n}\r\n```\r\n\r\nThe error makes the actual problem apparent:\r\n\r\n```\r\nerror[E0507]: cannot move out of `self.0` which is behind a mutable reference\r\n --> src/lib.rs:7:9\r\n  |\r\n7 |         self.0\r\n  |         ^^^^^^ move occurs because `self.0` has type `Wrapper<'_, T>`, which does not implement the `Copy` trait\r\n```\r\n\r\nI think the compiler tries to solve the moving problem by implicitly reborrowing `self.0`, creating a new borrow whose lifetime is restricted to that of `self`, causing a lifetime error that isn't clear about why that restriction happened.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78199/timeline", "performed_via_github_app": null, "state_reason": null}