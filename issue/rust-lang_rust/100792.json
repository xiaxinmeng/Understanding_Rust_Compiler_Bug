{"url": "https://api.github.com/repos/rust-lang/rust/issues/100792", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100792/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100792/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100792/events", "html_url": "https://github.com/rust-lang/rust/issues/100792", "id": 1345057641, "node_id": "I_kwDOAAsO6M5QK_Np", "number": 100792, "title": "Lifetimes block the nice \"reached the recursion limit while instantiating\" error and get an evaluation overflow instead", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-08-20T05:04:28Z", "updated_at": "2022-08-20T05:04:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code: [[playground]](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=85b7297adf55fd3983851375ed079c50)\r\n\r\n```rust\r\n#![recursion_limit = \"64\"] // be nice to the playground\r\n\r\ntrait VisitMany<'a> { type VisitOneDelegate: VisitOne<'a>; }\r\ntrait VisitOne<'a> { type VisitManyDelegate: VisitMany<'a>; }\r\n\r\nstruct Unit;\r\nimpl VisitMany<'_> for Unit { type VisitOneDelegate = Unit; }\r\nimpl VisitOne<'_> for Unit { type VisitManyDelegate = Unit; }\r\n\r\nstruct Wrap<V>(std::marker::PhantomData<V>);\r\nimpl<'a, V: VisitMany<'a>> VisitMany<'a> for Wrap<V> { type VisitOneDelegate = Self; }\r\nimpl<'a, V: VisitMany<'a>> VisitOne<'a> for Wrap<V> { type VisitManyDelegate = Self; }\r\n\r\nfn parse_document<'a, V: VisitMany<'a>>() { parse_node::<Wrap<V>>(); }\r\nfn parse_node<'a, V: VisitOne<'a>>() { parse_document::<V::VisitManyDelegate>(); }\r\n\r\nfn main() {\r\n    parse_document::<Unit>();\r\n}\r\n\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[[E0275]](https://doc.rust-lang.org/nightly/error-index.html#E0275): overflow evaluating the requirement `Unit: VisitMany<'_>`\r\n   |\r\n   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"128\"]` attribute to your crate (`playground`)\r\nnote: required because of the requirements on the impl of `VisitMany<'_>` for `Wrap<Unit>`\r\n  --> src/main.rs:11:28\r\n   |\r\n11 | impl<'a, V: VisitMany<'a>> VisitMany<'a> for Wrap<V> { type VisitOneDelegate = Self; }\r\n   |                            ^^^^^^^^^^^^^     ^^^^^^^\r\n   = note: 63 redundant requirements hidden\r\n   = note: required because of the requirements on the impl of `VisitMany<'_>` for `Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Unit>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\r\nnote: required because of the requirements on the impl of `VisitOne` for `Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Wrap<Unit>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\r\n  --> src/main.rs:12:28\r\n   |\r\n12 | impl<'a, V: VisitMany<'a>> VisitOne<'a> for Wrap<V> { type VisitManyDelegate = Self; }\r\n   |                            ^^^^^^^^^^^^     ^^^^^^^\r\n```\r\n\r\nIf we remove the lifetimes, however: [[playground]](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=425487fd6a17e771ede444e5bff16b2a)\r\n\r\n```rust\r\n#![recursion_limit = \"64\"] // be nice to the playground\r\n\r\ntrait VisitMany     { type VisitOneDelegate: VisitOne    ; }\r\ntrait VisitOne     { type VisitManyDelegate: VisitMany    ; }\r\n\r\nstruct Unit;\r\nimpl VisitMany     for Unit { type VisitOneDelegate = Unit; }\r\nimpl VisitOne     for Unit { type VisitManyDelegate = Unit; }\r\n\r\nstruct Wrap<V>(std::marker::PhantomData<V>);\r\nimpl<    V: VisitMany    > VisitMany     for Wrap<V> { type VisitOneDelegate = Self; }\r\nimpl<    V: VisitMany    > VisitOne     for Wrap<V> { type VisitManyDelegate = Self; }\r\n\r\nfn parse_document<    V: VisitMany    >() { parse_node::<Wrap<V>>(); }\r\nfn parse_node<    V: VisitOne    >() { parse_document::<V::VisitManyDelegate>(); }\r\n\r\nfn main() {\r\n    parse_document::<Unit>();\r\n}\r\n```\r\n\r\n```\r\nerror: reached the recursion limit while instantiating `parse_document::<Wrap<Wrap<Wrap<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\r\n  --> src/main.rs:15:40\r\n   |\r\n15 | fn parse_node<    V: VisitOne    >() { parse_document::<V::VisitManyDelegate>(); }\r\n   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\nnote: `parse_document` defined here\r\n  --> src/main.rs:14:1\r\n   |\r\n14 | fn parse_document<    V: VisitMany    >() { parse_node::<Wrap<V>>(); }\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   = note: the full type name has been written to '/playground/target/debug/deps/playground-4cb6c968a6c7af86.long-type.txt'\r\n```\r\n\r\nThese are both post monomorphization `build`-only errors. Ideally, the former would get the nice latter error, rather than spitting a giant recursive type obligation at the user.\r\n\r\nI tagged this as <kbd>A-diagnostics</kbd> since that is the visible outcome but the solution is probably actually\r\n\r\n@rustbot label +A-traits", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100792/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100792/timeline", "performed_via_github_app": null, "state_reason": null}