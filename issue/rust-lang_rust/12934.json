{"url": "https://api.github.com/repos/rust-lang/rust/issues/12934", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12934/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12934/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12934/events", "html_url": "https://github.com/rust-lang/rust/issues/12934", "id": 29516995, "node_id": "MDU6SXNzdWUyOTUxNjk5NQ==", "number": 12934, "title": "typeck: audit the use of `a_is_expected` pattern", "user": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-03-16T13:49:14Z", "updated_at": "2015-01-23T03:30:32Z", "closed_at": "2015-01-23T03:30:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In typeck passes, one often needs to do binary operations between two thingy: equality, substitution and what have you. A pattern has been adopted to handle that:\n\n``` rust\nfn some_op(a_is_expected: bool, a: SomeType, b: SomeType) -> SomeResult\n```\n\nUnfortunately there are two interpretations of the signature, one is that the order of `a` and `b` is significant, the other insignificant. And the caller and callee seem to diverge.\n\nFor example, in `librustc/middle/typeck/infer/mod.rs`, there's honest one that says \"I don't care about the value of a_is_expected\":\n\n``` rust\npub fn mk_subr(cx: &InferCtxt,\n               _a_is_expected: bool,\n               origin: SubregionOrigin,\n               a: ty::Region,\n               b: ty::Region) { ... }\n```\n\nThere's equality test that the order genuinely doesn't matter:\n\n``` rust\npub fn mk_eqty(cx: &InferCtxt,\n               a_is_expected: bool,\n               origin: TypeOrigin,\n               a: ty::t,\n               b: ty::t)\n            -> ures { ... }\n```\n\nAnd then there's ambiguous one:\n\n``` rust\npub fn mk_sub_trait_refs(cx: &InferCtxt,\n                         a_is_expected: bool,\n                         origin: TypeOrigin,\n                         a: @ty::TraitRef,\n                         b: @ty::TraitRef) -> ures\n{\n    ...\n    let suber = cx.sub(a_is_expected, trace);\n    suber.trait_refs(a, b)\n    ...\n}\n```\n\nIt seems to use parameter `a_is_expected`, but only for error messages. The real deal `trait_refs` actually dictates a fixed order of `a` and `b`, which makes calling it like `mk_sub_trait_refs(..., false, a, b)` semantically wrong (it should be `mk_sub_trait_refs(..., true, b, a)`). Or rather, what caller expects is:\n\n``` rust\n{\n    if a_is_expected { suber.trait_refs(a, b) }\n    else { suber.trait_refs(b, a) }\n}\n```\n\nI believe that's what leads to bugs like #12223.\n\nSo we should check and fix it, either by removing the `a_is_expected` all together or by rectifying the order of `a` and `b` when it is used wrong.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12934/timeline", "performed_via_github_app": null, "state_reason": "completed"}