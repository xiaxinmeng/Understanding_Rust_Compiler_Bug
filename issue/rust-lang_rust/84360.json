{"url": "https://api.github.com/repos/rust-lang/rust/issues/84360", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84360/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84360/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84360/events", "html_url": "https://github.com/rust-lang/rust/issues/84360", "id": 862512991, "node_id": "MDU6SXNzdWU4NjI1MTI5OTE=", "number": 84360, "title": "[ER] Possible improvements for impl block and self object errrors diagnostic", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-04-20T07:34:15Z", "updated_at": "2023-04-05T17:29:34Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is a diagnostic enhancement request. It's meant to improve a bit the life of new Rust programmers coming from other languages such as Java.\r\n\r\n```rust\r\nstruct Foo {\r\n    x: u32,\r\n\r\n    fn inc(&mut self) {\r\n        self.x += 1;\r\n    }\r\n}\r\nfn main() {}\r\n```\r\nrustc (1.53.0-nightly 5a4ab2645 2021-04-18) gives:\r\n\r\n```rust\r\nerror: expected identifier, found keyword `fn`\r\n --> ...\\test.rs:4:5\r\n  |\r\n4 |     fn inc(&mut self) {\r\n  |     ^^ expected identifier, found keyword\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nExpected: a suggestion to move the method inc into an impl block.\r\n\r\n- - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n```rust\r\nstruct Foo {\r\n    x: u32,\r\n}\r\nimpl Foo {\r\n    fn inc1() {\r\n        this.x += 1;\r\n    }\r\n    fn inc2(&this) {\r\n        this.x += 1;\r\n    }\r\n    fn inc3(&mut this) {\r\n        this.x += 1;\r\n    }\r\n    fn inc4() {\r\n        self.x += 1;\r\n    }\r\n}\r\nfn main() {}\r\n```\r\n\r\nrustc gives:\r\n\r\n```rust\r\nerror: expected one of `:`, `@`, or `|`, found `)`\r\n --> ...\\test.rs:8:18\r\n  |\r\n8 |     fn inc2(&this) {\r\n  |                  ^ expected one of `:`, `@`, or `|`\r\n  |\r\n  = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\r\nhelp: if this is a `self` type, give it a parameter name\r\n  |\r\n8 |     fn inc2(self: &this) {\r\n  |             ^^^^^^^^^^^\r\nhelp: if this is a parameter name, give it a type\r\n  |\r\n8 |     fn inc2(this: &TypeName) {\r\n  |             ^^^^^^^^^^^^^^^\r\nhelp: if this is a type, explicitly ignore the parameter name\r\n  |\r\n8 |     fn inc2(_: &this) {\r\n  |             ^^^^^^^^\r\n\r\nerror: expected one of `:`, `@`, or `|`, found `)`\r\n  --> ...\\test.rs:11:22\r\n   |\r\n11 |     fn inc3(&mut this) {\r\n   |                      ^ expected one of `:`, `@`, or `|`\r\n   |\r\n   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\r\nhelp: if this is a `self` type, give it a parameter name\r\n   |\r\n11 |     fn inc3(self: &mut this) {\r\n   |             ^^^^^^^^^^^^^^^\r\nhelp: if this is a parameter name, give it a type\r\n   |\r\n11 |     fn inc3(this: &mut TypeName) {\r\n   |             ^^^^^^^^^^^^^^^^^^^\r\nhelp: if this is a type, explicitly ignore the parameter name\r\n   |\r\n11 |     fn inc3(_: &mut this) {\r\n   |             ^^^^^^^^^^^^\r\n\r\nerror[E0425]: cannot find value `this` in this scope\r\n --> ...\\test.rs:6:9\r\n  |\r\n6 |         this.x += 1;\r\n  |         ^^^^ not found in this scope\r\n  |\r\nhelp: you might have meant to use `self` here instead\r\n  |\r\n6 |         self.x += 1;\r\n  |         ^^^^\r\nhelp: if you meant to use `self`, you are also missing a `self` receiver argument\r\n  |\r\n5 |     fn inc1(&self) {\r\n  |             ^^^^^\r\n\r\nerror[E0424]: expected value, found module `self`\r\n  --> ...\\test.rs:15:9\r\n   |\r\n14 |     fn inc4() {\r\n   |        ---- this function doesn't have a `self` parameter\r\n15 |         self.x += 1;\r\n   |         ^^^^ `self` value is a keyword only available in methods with a `self` parameter\r\n   |\r\nhelp: add a `self` receiver parameter to make the associated `fn` a method\r\n   |\r\n14 |     fn inc4(&self) {\r\n   |             ^^^^^\r\n\r\nerror: aborting due to 4 previous errors\r\n```\r\n\r\nExpected:\r\n- Error messages to be sorted on the number line. So I think they should be ordered in the 6 8 11 14 sequence.\r\n- Perhaps the \"anonymous parameters are removed in the 2018 edition (see RFC 1685)\" is obsolete and could be removed or reduced.\r\n- Where it suggests to add (&self) it should better suggest (&mut self).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84360/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84360/timeline", "performed_via_github_app": null, "state_reason": null}