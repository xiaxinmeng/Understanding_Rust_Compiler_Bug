{"url": "https://api.github.com/repos/rust-lang/rust/issues/104174", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104174/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104174/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104174/events", "html_url": "https://github.com/rust-lang/rust/issues/104174", "id": 1441033031, "node_id": "I_kwDOAAsO6M5V5GtH", "number": 104174, "title": "Traits are resolved incorrectly when dyn trait is used in a struct.", "user": {"login": "wdanilo", "id": 1623053, "node_id": "MDQ6VXNlcjE2MjMwNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1623053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdanilo", "html_url": "https://github.com/wdanilo", "followers_url": "https://api.github.com/users/wdanilo/followers", "following_url": "https://api.github.com/users/wdanilo/following{/other_user}", "gists_url": "https://api.github.com/users/wdanilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdanilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdanilo/subscriptions", "organizations_url": "https://api.github.com/users/wdanilo/orgs", "repos_url": "https://api.github.com/users/wdanilo/repos", "events_url": "https://api.github.com/users/wdanilo/events{/privacy}", "received_events_url": "https://api.github.com/users/wdanilo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2543602342, "node_id": "MDU6TGFiZWwyNTQzNjAyMzQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-auto_traits", "name": "F-auto_traits", "color": "f9c0cc", "default": false, "description": "`#![feature(auto_traits)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-11-08T22:58:27Z", "updated_at": "2022-11-13T22:09:44Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following code:\r\n\r\n```rust\r\n#![feature(auto_traits)]\r\n#![feature(negative_impls)]\r\n\r\nuse core::any::TypeId;\r\n\r\nauto trait NotSame {}\r\nimpl<T> ! NotSame for (T, T) {}\r\n\r\n\r\n#[derive(Debug)]\r\npub struct EventData {\r\n    pub id:  TypeId,\r\n    payload: Box<dyn std::any::Any>,\r\n}\r\n\r\nimpl EventData {\r\n    pub fn new<T: 'static>(payload: T) -> Self {\r\n        let id = TypeId::of::<T>();\r\n        let payload = Box::new(payload);\r\n        Self { id, payload }\r\n    }\r\n}\r\n\r\nimpl<T: 'static> From<T> for EventData\r\nwhere (T, EventData): NotSame\r\n{\r\n    fn from(t: T) -> Self {\r\n        Self::new(t)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let v: EventData = ().into();\r\n}\r\n```\r\n\r\nIt does not compile:\r\n\r\n```\r\nerror[[E0277]](https://doc.rust-lang.org/nightly/error-index.html#E0277): the trait bound `(dyn Any + 'static): NotSame` is not satisfied in `((), EventData)`\r\n  --> src/main.rs:34:24\r\n   |\r\n34 |     let v: EventData = ().into();\r\n   |                        ^^ ---- required by a bound introduced by this call\r\n   |                        |\r\n   |                        within `((), EventData)`, the trait `NotSame` is not implemented for `(dyn Any + 'static)`\r\n   |\r\n   = note: required because it appears within the type `PhantomData<(dyn Any + 'static)>`\r\n   = note: required because it appears within the type `Unique<(dyn Any + 'static)>`\r\n   = note: required because it appears within the type `Box<(dyn Any + 'static)>`\r\nnote: required because it appears within the type `EventData`\r\n```\r\n\r\nHowever, if we remove the field containing `std::any::Any`, it compiles fine:\r\n\r\n```rust\r\n#![feature(auto_traits)]\r\n#![feature(negative_impls)]\r\n\r\nuse core::any::TypeId;\r\n\r\nauto trait NotSame {}\r\nimpl<T> ! NotSame for (T, T) {}\r\n\r\n\r\n#[derive(Debug)]\r\npub struct EventData {\r\n}\r\n\r\nimpl EventData {\r\n    pub fn new<T: 'static>(payload: T) -> Self {\r\n        Self {}\r\n    }\r\n}\r\n\r\nimpl<T: 'static> From<T> for EventData\r\nwhere (T, EventData): NotSame\r\n{\r\n    fn from(t: T) -> Self {\r\n        Self::new(t)\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let v: EventData = ().into();\r\n}\r\n\r\n```\r\n\r\nAnother strange thing is that if we change `().into()` to `EventData::from(())`, then none of these codes compiles.\r\n\r\nPlease note that no types were changed. [Click here to see live demo](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=a353bbb0a63d867d008dcd0de4f3c3d7)\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104174/timeline", "performed_via_github_app": null, "state_reason": null}