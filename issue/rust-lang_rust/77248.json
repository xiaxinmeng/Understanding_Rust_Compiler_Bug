{"url": "https://api.github.com/repos/rust-lang/rust/issues/77248", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77248/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77248/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77248/events", "html_url": "https://github.com/rust-lang/rust/issues/77248", "id": 709636888, "node_id": "MDU6SXNzdWU3MDk2MzY4ODg=", "number": 77248, "title": "Compile-time explosion with many self-referential trait bounds", "user": {"login": "novacrazy", "id": 4708645, "node_id": "MDQ6VXNlcjQ3MDg2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/4708645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/novacrazy", "html_url": "https://github.com/novacrazy", "followers_url": "https://api.github.com/users/novacrazy/followers", "following_url": "https://api.github.com/users/novacrazy/following{/other_user}", "gists_url": "https://api.github.com/users/novacrazy/gists{/gist_id}", "starred_url": "https://api.github.com/users/novacrazy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/novacrazy/subscriptions", "organizations_url": "https://api.github.com/users/novacrazy/orgs", "repos_url": "https://api.github.com/users/novacrazy/repos", "events_url": "https://api.github.com/users/novacrazy/events{/privacy}", "received_events_url": "https://api.github.com/users/novacrazy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-09-27T00:20:38Z", "updated_at": "2020-10-06T15:10:17Z", "closed_at": "2020-10-06T15:10:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working on a SIMDeez-like library with a packed_simd-like API, and part of that requires defining a series of traits like this:\r\n\r\n<details>\r\n<summary> Expand for full code </summary>\r\n\r\n```rust\r\n#![allow(non_camel_case_types)]\r\n\r\nuse core::fmt::Debug;\r\nuse core::ops::*;\r\n\r\npub trait SimdBase<S: Simd + ?Sized, L>: Copy + Debug + Sync + Send {\r\n    fn splat(val: L) -> Self;\r\n}\r\n\r\npub trait SimdBitwise<S: Simd + ?Sized, L>:\r\n    SimdBase<S, L>\r\n    + Not<Output = Self>\r\n    + BitAnd<Self, Output = Self>\r\n    + BitOr<Self, Output = Self>\r\n    + BitXor<Self, Output = Self>\r\n    + BitAndAssign<Self>\r\n    + BitOrAssign<Self>\r\n    + BitXorAssign<Self>\r\n{\r\n}\r\n\r\npub trait SimdVector<S: Simd + ?Sized, L, M: SimdMask<S>>:\r\n    SimdBase<S, L>\r\n    + Add<Self, Output = Self>\r\n    + Sub<Self, Output = Self>\r\n    + Mul<Self, Output = Self>\r\n    + Div<Self, Output = Self>\r\n    + AddAssign<Self>\r\n    + SubAssign<Self>\r\n    + MulAssign<Self>\r\n    + DivAssign<Self>\r\n{\r\n}\r\n\r\npub trait SimdMask<S: Simd + ?Sized>: SimdBitwise<S, bool> {}\r\n\r\npub trait SimdInt<S: Simd + ?Sized, L, M: SimdMask<S>>:\r\n    SimdVector<S, L, M>\r\n    + SimdBitwise<S, L>\r\n    + Shl<i32, Output = Self>\r\n    + ShlAssign<i32>\r\n    + Shr<i32, Output = Self>\r\n    + ShrAssign<i32>\r\n{\r\n}\r\n\r\npub trait SimdFloat<S: Simd + ?Sized, L, M: SimdMask<S>>: SimdVector<S, L, M> {}\r\n\r\npub trait SimdCastFromTo<F, T> {}\r\npub trait SimdCastToFrom<T, F> {}\r\n\r\nimpl<S, F, T> SimdCastToFrom<T, F> for S where S: SimdCastFromTo<F, T> {}\r\n\r\npub trait OneLane<S: Simd + ?Sized, L>:\r\n    SimdBase<S, L>\r\n    + SimdCastFromTo<S::m8x1, Self>\r\n    + SimdCastFromTo<S::u8x1, Self>\r\n    + SimdCastFromTo<S::u16x1, Self>\r\n    + SimdCastFromTo<S::u32x1, Self>\r\n    + SimdCastFromTo<S::u64x1, Self>\r\n    + SimdCastFromTo<S::f32x1, Self>\r\n    + SimdCastFromTo<S::f64x1, Self>\r\n{\r\n}\r\n\r\npub trait TwoLane<S: Simd + ?Sized, L>:\r\n    SimdBase<S, L>\r\n    + SimdCastFromTo<S::m8x2, Self>\r\n    + SimdCastFromTo<S::u8x2, Self>\r\n    + SimdCastFromTo<S::u16x2, Self>\r\n    + SimdCastFromTo<S::u32x2, Self>\r\n    + SimdCastFromTo<S::u64x2, Self>\r\n    + SimdCastFromTo<S::f32x2, Self>\r\n    + SimdCastFromTo<S::f64x2, Self>\r\n{\r\n}\r\n\r\npub trait FourLane<S: Simd + ?Sized, L>:\r\n    SimdBase<S, L>\r\n    + SimdCastFromTo<S::m8x4, Self>\r\n    + SimdCastFromTo<S::u8x4, Self>\r\n    + SimdCastFromTo<S::u16x4, Self>\r\n    + SimdCastFromTo<S::u32x4, Self>\r\n    + SimdCastFromTo<S::u64x4, Self>\r\n    + SimdCastFromTo<S::f32x4, Self>\r\n    + SimdCastFromTo<S::f64x4, Self>\r\n{\r\n}\r\n\r\npub trait EightLane<S: Simd + ?Sized, L>:\r\n    SimdBase<S, L>\r\n    + SimdCastFromTo<S::m8x8, Self>\r\n    + SimdCastFromTo<S::u8x8, Self>\r\n    + SimdCastFromTo<S::u16x8, Self>\r\n    + SimdCastFromTo<S::u32x8, Self>\r\n    + SimdCastFromTo<S::u64x8, Self>\r\n    + SimdCastFromTo<S::f32x8, Self>\r\n    + SimdCastFromTo<S::f64x8, Self>\r\n{\r\n}\r\n\r\npub trait SixteenLane<S: Simd + ?Sized, L>:\r\n    SimdBase<S, L>\r\n    + SimdCastFromTo<S::m8x16, Self>\r\n    + SimdCastFromTo<S::u8x16, Self>\r\n    + SimdCastFromTo<S::u16x16, Self>\r\n    + SimdCastFromTo<S::u32x16, Self>\r\n    + SimdCastFromTo<S::f32x16, Self>\r\n{\r\n}\r\n\r\npub trait ThirtyTwoLane<S: Simd + ?Sized, L>:\r\n    SimdBase<S, L> + SimdCastFromTo<S::m8x32, Self> + SimdCastFromTo<S::u8x32, Self> + SimdCastFromTo<S::u16x32, Self>\r\n{\r\n}\r\n\r\npub trait SixtyFourLane<S: Simd + ?Sized, L>:\r\n    SimdBase<S, L> + SimdCastFromTo<S::m8x64, Self> + SimdCastFromTo<S::u8x64, Self>\r\n{\r\n}\r\n\r\n#[rustfmt::skip]\r\npub trait Simd {\r\n    /// 8-bit mask\r\n    type m8x1:  SimdMask<Self> + OneLane<Self, u8>;\r\n    /// 16-bit mask\r\n    type m8x2:  SimdMask<Self> + TwoLane<Self, u8>;\r\n    /// 32-bit mask\r\n    type m8x4:  SimdMask<Self> + FourLane<Self, u8>;\r\n    /// 64-bit mask\r\n    type m8x8:  SimdMask<Self> + EightLane<Self, u8>;\r\n    /// 128-bit mask\r\n    type m8x16: SimdMask<Self> + SixteenLane<Self, u8>;\r\n    /// 256-bit mask\r\n    type m8x32: SimdMask<Self> + ThirtyTwoLane<Self, u8>;\r\n    /// 512-bit mask\r\n    type m8x64: SimdMask<Self> + SixtyFourLane<Self, u8>;\r\n\r\n    /// 16-bit mask\r\n    type m16x1:  SimdMask<Self> + OneLane<Self, u16>;\r\n    /// 32-bit mask\r\n    type m16x2:  SimdMask<Self> + TwoLane<Self, u16>;\r\n    /// 64-bit mask\r\n    type m16x4:  SimdMask<Self> + FourLane<Self, u16>;\r\n    /// 128-bit mask\r\n    type m16x8:  SimdMask<Self> + EightLane<Self, u16>;\r\n    /// 256-bit mask\r\n    type m16x16: SimdMask<Self> + SixteenLane<Self, u16>;\r\n    /// 512-bit mask\r\n    type m16x32: SimdMask<Self> + ThirtyTwoLane<Self, u16>;\r\n\r\n    /// 32-bit mask\r\n    type m32x1:  SimdMask<Self> + OneLane<Self, u32>;\r\n    /// 64-bit mask\r\n    type m32x2:  SimdMask<Self> + TwoLane<Self, u32>;\r\n    /// 128-bit mask\r\n    type m32x4:  SimdMask<Self> + FourLane<Self, u32>;\r\n    /// 256-bit mask\r\n    type m32x8:  SimdMask<Self> + EightLane<Self, u32>;\r\n    /// 512-bit mask\r\n    type m32x16: SimdMask<Self> + SixteenLane<Self, u32>;\r\n\r\n    /// 64-bit mask\r\n    type m64x1: SimdMask<Self> + OneLane<Self, u64>;\r\n    /// 128-bit mask\r\n    type m64x2: SimdMask<Self> + TwoLane<Self, u64>;\r\n    /// 256-bit mask\r\n    type m64x4: SimdMask<Self> + FourLane<Self, u64>;\r\n    /// 512-bit mask\r\n    type m64x8: SimdMask<Self> + EightLane<Self, u64>;\r\n\r\n    type msizex1: SimdMask<Self> + OneLane<Self, usize>;\r\n    type msizex2: SimdMask<Self> + TwoLane<Self, usize>;\r\n    type msizex4: SimdMask<Self> + FourLane<Self, usize>;\r\n    type msizex8: SimdMask<Self> + EightLane<Self, usize>;\r\n\r\n    type i8x1: SimdInt<Self, i8, Self::m8x1> + OneLane<Self, i8>;\r\n    type i8x2: SimdInt<Self, i8, Self::m8x2> + TwoLane<Self, i8>;\r\n    type i8x4: SimdInt<Self, i8, Self::m8x4> + FourLane<Self, i8>;\r\n    type i8x8: SimdInt<Self, i8, Self::m8x8> + EightLane<Self, i8>;\r\n    type i8x16: SimdInt<Self, i8, Self::m8x16> + SixteenLane<Self, i8>;\r\n    type i8x32: SimdInt<Self, i8, Self::m8x32> + ThirtyTwoLane<Self, i8>;\r\n    type i8x64: SimdInt<Self, i8, Self::m8x64> + SixtyFourLane<Self, i8>;\r\n    type u8x1: SimdInt<Self, u8, Self::m8x1> + OneLane<Self, u8>;\r\n    type u8x2: SimdInt<Self, u8, Self::m8x2> + TwoLane<Self, u8>;\r\n    type u8x4: SimdInt<Self, u8, Self::m8x4> + FourLane<Self, u8>;\r\n    type u8x8: SimdInt<Self, u8, Self::m8x8> + EightLane<Self, u8>;\r\n    type u8x16: SimdInt<Self, u8, Self::m8x16> + SixteenLane<Self, u8>;\r\n    type u8x32: SimdInt<Self, u8, Self::m8x32> + ThirtyTwoLane<Self, u8>;\r\n    type u8x64: SimdInt<Self, u8, Self::m8x64> + SixtyFourLane<Self, u8>;\r\n\r\n    type i16x1: SimdInt<Self, i16, Self::m16x1> + OneLane<Self, i16>;\r\n    type i16x2: SimdInt<Self, i16, Self::m16x2> + TwoLane<Self, i16>;\r\n    type i16x4: SimdInt<Self, i16, Self::m16x4> + FourLane<Self, i16>;\r\n    type i16x8: SimdInt<Self, i16, Self::m16x8> + EightLane<Self, i16>;\r\n    type i16x16: SimdInt<Self, i16, Self::m16x16> + SixteenLane<Self, i16>;\r\n    type i16x32: SimdInt<Self, i16, Self::m16x32> + ThirtyTwoLane<Self, i16>;\r\n    type u16x1: SimdInt<Self, u16, Self::m16x1> + OneLane<Self, u16>;\r\n    type u16x2: SimdInt<Self, u16, Self::m16x2> + TwoLane<Self, u16>;\r\n    type u16x4: SimdInt<Self, u16, Self::m16x4> + FourLane<Self, u16>;\r\n    type u16x8: SimdInt<Self, u16, Self::m16x8> + EightLane<Self, u16>;\r\n    type u16x16: SimdInt<Self, u16, Self::m16x16> + SixteenLane<Self, u16>;\r\n    type u16x32: SimdInt<Self, u16, Self::m16x32> + ThirtyTwoLane<Self, u16>;\r\n\r\n    type i32x1: SimdInt<Self, i32, Self::m32x1> + OneLane<Self, i32>;\r\n    type i32x2: SimdInt<Self, i32, Self::m32x2> + TwoLane<Self, i32>;\r\n    type i32x4: SimdInt<Self, i32, Self::m32x4> + FourLane<Self, i32>;\r\n    type i32x8: SimdInt<Self, i32, Self::m32x8> + EightLane<Self, i32>;\r\n    type i32x16: SimdInt<Self, i32, Self::m32x16> + SixteenLane<Self, i32>;\r\n    type u32x1: SimdInt<Self, u32, Self::m32x1> + OneLane<Self, u32>;\r\n    type u32x2: SimdInt<Self, u32, Self::m32x2> + TwoLane<Self, u32>;\r\n    type u32x4: SimdInt<Self, u32, Self::m32x4> + FourLane<Self, u32>;\r\n    type u32x8: SimdInt<Self, u32, Self::m32x8> + EightLane<Self, u32>;\r\n    type u32x16: SimdInt<Self, u32, Self::m32x16> + SixteenLane<Self, u32>;\r\n\r\n    type i64x1: SimdInt<Self, i64, Self::m64x1> + OneLane<Self, i64>;\r\n    type i64x2: SimdInt<Self, i64, Self::m64x2> + TwoLane<Self, i64>;\r\n    type i64x4: SimdInt<Self, i64, Self::m64x4> + FourLane<Self, i64>;\r\n    type i64x8: SimdInt<Self, i64, Self::m64x8> + EightLane<Self, i64>;\r\n    type u64x1: SimdInt<Self, u64, Self::m64x1> + OneLane<Self, u64>;\r\n    type u64x2: SimdInt<Self, u64, Self::m64x2> + TwoLane<Self, u64>;\r\n    type u64x4: SimdInt<Self, u64, Self::m64x4> + FourLane<Self, u64>;\r\n    type u64x8: SimdInt<Self, u64, Self::m64x8> + EightLane<Self, u64>;\r\n\r\n    type isizex1: SimdInt<Self, isize, Self::msizex1> + OneLane<Self, isize>;\r\n    type isizex2: SimdInt<Self, isize, Self::msizex2> + TwoLane<Self, isize>;\r\n    type isizex4: SimdInt<Self, isize, Self::msizex4> + FourLane<Self, isize>;\r\n    type isizex8: SimdInt<Self, isize, Self::msizex8> + EightLane<Self, isize>;\r\n    type usizex1: SimdInt<Self, usize, Self::msizex1> + OneLane<Self, usize>;\r\n    type usizex2: SimdInt<Self, usize, Self::msizex2> + TwoLane<Self, usize>;\r\n    type usizex4: SimdInt<Self, usize, Self::msizex4> + FourLane<Self, usize>;\r\n    type usizex8: SimdInt<Self, usize, Self::msizex8> + EightLane<Self, usize>;\r\n\r\n    /// 32-bit single-precision float vector\r\n    type f32x1: SimdFloat<Self, f32, Self::m32x1> + OneLane<Self, f32>;\r\n    /// 64-bit single-precision float vector\r\n    type f32x2: SimdFloat<Self, f32, Self::m32x2> + TwoLane<Self, f32>;\r\n    /// 128-bit single-precision float vector\r\n    type f32x4: SimdFloat<Self, f32, Self::m32x4> + FourLane<Self, f32>;\r\n    /// 256-bit single-precision float vector\r\n    type f32x8: SimdFloat<Self, f32, Self::m32x8> + EightLane<Self, f32>;\r\n    /// 512-bit single-precision float vector\r\n    type f32x16: SimdFloat<Self, f32, Self::m32x16> + SixteenLane<Self, f32>;\r\n\r\n    /// 64-bit double-precision float vector\r\n    type f64x1: SimdFloat<Self, f64, Self::m32x1> + OneLane<Self, f64>;\r\n    /// 128-bit double-precision float vector\r\n    type f64x2: SimdFloat<Self, f64, Self::m32x2> + TwoLane<Self, f64>;\r\n    /// 256-bit double-precision float vector\r\n    type f64x4: SimdFloat<Self, f64, Self::m32x4> + FourLane<Self, f64>;\r\n    /// 512-bit double-precision float vector\r\n    type f64x8: SimdFloat<Self, f64, Self::m32x8> + EightLane<Self, f64>;\r\n}\r\n\r\n```\r\n</details>\r\n\r\nHowever, even just this trait definition, without any implementations, takes **1 minute** to `cargo check` on my system, every time, and it's only become worse as I've added more types. Something is leading to a quadratic(?) blowup in checking these traits. Makes it impossible to smoothly work with.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.47.0-nightly (6c8927b0c 2020-07-26)\r\nbinary: rustc\r\ncommit-hash: 6c8927b0cf80ceee19386026cf9d7fd4fd9d486f\r\ncommit-date: 2020-07-26\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.47.0-nightly\r\nLLVM version: 10.0\r\n```\r\n\r\nIt's the same on stable 1.46.0\r\n", "closed_by": {"login": "novacrazy", "id": 4708645, "node_id": "MDQ6VXNlcjQ3MDg2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/4708645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/novacrazy", "html_url": "https://github.com/novacrazy", "followers_url": "https://api.github.com/users/novacrazy/followers", "following_url": "https://api.github.com/users/novacrazy/following{/other_user}", "gists_url": "https://api.github.com/users/novacrazy/gists{/gist_id}", "starred_url": "https://api.github.com/users/novacrazy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/novacrazy/subscriptions", "organizations_url": "https://api.github.com/users/novacrazy/orgs", "repos_url": "https://api.github.com/users/novacrazy/repos", "events_url": "https://api.github.com/users/novacrazy/events{/privacy}", "received_events_url": "https://api.github.com/users/novacrazy/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77248/timeline", "performed_via_github_app": null, "state_reason": "completed"}