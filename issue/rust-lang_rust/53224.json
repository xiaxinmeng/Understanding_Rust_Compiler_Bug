{"url": "https://api.github.com/repos/rust-lang/rust/issues/53224", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53224/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53224/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53224/events", "html_url": "https://github.com/rust-lang/rust/issues/53224", "id": 349172031, "node_id": "MDU6SXNzdWUzNDkxNzIwMzE=", "number": 53224, "title": "Uplift lints from clippy to rustc", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 60, "created_at": "2018-08-09T15:12:42Z", "updated_at": "2020-08-19T05:35:23Z", "closed_at": "2020-08-19T05:35:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "cc @Manishearth @rust-lang/lang \r\n\r\nAs discussed in the Clippy 1.0 RFC, we would like to uplift some lints from clippy to rustc. Full rationale can be found in https://github.com/rust-lang/rfcs/blob/b9c8471887f308223c226642cad3a8290731b942/text/0000-clippy-uno.md#compiler-uplift\r\n\r\nThe list of correctness lints in clippy follows. I have checked the boxes of lints that I think should be uplifted\r\n\r\nRenamings happening during uplift have been added via `-> new_name` annotations\r\n\r\n* [ ] [for_loop_over_option](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_loop_over_option): Checks for `for` loops over `Option` values.\r\n* [x] [eq_op -> `same_operands`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#eq_op): Checks for equal operands to comparison, logical and\r\nbitwise, difference and division binary operators (`==`, `>`, etc., `&&`,\r\n`||`, `&`, `|`, `^`, `-` and `/`).\r\n* [x] [iter_next_loop -> `for_val_in_iter_next`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#iter_next_loop): Checks for loops on `x.next()`.\r\n* [x] [deprecated_semver -> `incorrect_semver_strings`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#deprecated_semver): Checks for `#[deprecated]` annotations with a `since`\r\nfield that is not a valid semantic version.\r\n* [x] [drop_copy -> `dropping_copy_types`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#drop_copy): Checks for calls to `std::mem::drop` with a value\r\nthat derives the Copy trait\r\n* [x] [not_unsafe_ptr_arg_deref -> `deref_ptr_arg_in_safe_fns`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref): Checks for public functions that dereferences raw pointer\r\narguments but are not marked unsafe.\r\n* [x] [logic_bug -> `unused_boolean_operands`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#logic_bug): Checks for boolean expressions that contain terminals that\r\ncan be eliminated.\r\n* [x] [clone_double_ref -> `cloning_references`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#clone_double_ref): Checks for usage of `.clone()` on an `&&T`.\r\n* [x] [almost_swapped -> `incorrect_swaps`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#almost_swapped): Checks for `foo = bar; bar = foo` sequences.\r\n* [ ] [possible_missing_comma](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#possible_missing_comma): Checks for possible missing comma in an array. It lints if\r\nan array element is a binary operator expression and it lies on two lines.\r\n* [x] [wrong_transmute -> `undefined_transmutes`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#wrong_transmute): Checks for transmutes that can't ever be correct on any\r\narchitecture.\r\n* [ ] [invalid_regex](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#invalid_regex): Checks [regex](https://crates.io/crates/regex) creation\r\n(with `Regex::new`,`RegexBuilder::new` or `RegexSet::new`) for correct\r\nregex syntax.\r\n* [x] [bad_bit_mask -> `unused_bitmasks`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#bad_bit_mask): Checks for incompatible bit masks in comparisons.\r\n* [x] [drop_ref -> `dropping_references`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#drop_ref): Checks for calls to `std::mem::drop` with a reference\r\ninstead of an owned value.\r\n* [ ] [derive_hash_xor_eq](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#derive_hash_xor_eq): Checks for deriving `Hash` but implementing `PartialEq`\r\nexplicitly or vice versa.\r\n* [ ] [useless_attribute](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#useless_attribute): Checks for `extern crate` and `use` items annotated with\r\nlint attributes\r\n* [x] [`temporary_cstring_as_ptr`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr): Checks for getting the inner pointer of a temporary\r\n`CString`.\r\n* [x] [min_max -> `incorrect_clamps`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#min_max): Checks for expressions where `std::cmp::min` and `max` are\r\nused to clamp values, but switched so that the result is constant.\r\n* [x] [unit_cmp -> `unit_comparisons`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unit_cmp): Checks for comparisons to unit.\r\n* [x] [reverse_range_loop -> `incorrect_reversed_ranges`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#reverse_range_loop): Checks for loops over ranges `x..y` where both `x` and `y`\r\nare constant and `x` is greater or equal to `y`, unless the range is\r\nreversed or has a negative `.step_by(_)`.\r\n* [ ] [erasing_op](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#erasing_op): Checks for erasing operations, e.g. `x * 0`.\r\n* [ ] [suspicious_op_assign_impl](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl): Lints for suspicious operations in impls of OpAssign, e.g.\r\nsubtracting elements in an AddAssign impl.\r\n* [ ] [float_cmp](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#float_cmp): Checks for (in-)equality comparisons on floating-point\r\nvalues (apart from zero), except in functions called `*eq*` (which probably\r\nimplement equality for a type involving floats).\r\n* [x] [zero_width_space -> `zero_width_spaces`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#zero_width_space): Checks for the Unicode zero-width space in the code.\r\n* [x] [fn_to_numeric_cast_with_truncation -> `truncating_fn_ptr_to_int_casts`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation): Checks for casts of a function pointer to a numeric type not large enough to store address.\r\n* [ ] [suspicious_arithmetic_impl](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#suspicious_arithmetic_impl): Lints for suspicious operations in impls of arithmetic operators, e.g.\r\nsubtracting elements in an Add impl.\r\n* [ ] [approx_constant](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#approx_constant): Checks for floating point literals that approximate\r\nconstants which are defined in\r\n[`std::f32::consts`](https://doc.rust-lang.org/stable/std/f32/consts/#constants)\r\nor\r\n[`std::f64::consts`](https://doc.rust-lang.org/stable/std/f64/consts/#constants),\r\nrespectively, suggesting to use the predefined constant.\r\n* [x] [while_immutable_condition -> `unused_while_loop_conditions`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#while_immutable_condition): Checks whether variables used within while loop condition\r\ncan be (and are) mutated in the body.\r\n* [ ] [never_loop](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#never_loop): Checks for loops that will always `break`, `return` or\r\n`continue` an outer loop.\r\n* [x] [nonsensical_open_options -> `unused_open_options`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#nonsensical_open_options): Checks for duplicate open options as well as combinations\r\nthat make no sense.\r\n* [x] [forget_copy -> `forgetting_copy_types`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#forget_copy): Checks for calls to `std::mem::forget` with a value that\r\nderives the Copy trait\r\n* [x] [if_same_then_else -> `unused_branching`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#if_same_then_else): Checks for `if/else` with the same body as the *then* part\r\nand the *else* part.\r\n* [ ] [cast_ptr_alignment](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#cast_ptr_alignment): Checks for casts from a less-strictly-aligned pointer to a\r\nmore-strictly-aligned pointer\r\n* [x] [ifs_same_cond -> `unused_branching`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#ifs_same_cond): Checks for consecutive `if`s with the same condition.\r\n* [x] [out_of_bounds_indexing](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#out_of_bounds_indexing): Checks for out of bounds array indexing with a constant\r\nindex.\r\n* [ ] [modulo_one](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#modulo_one): Checks for getting the remainder of a division by one.\r\n* [x] [inline_fn_without_body -> `inline_fns_without_body`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#inline_fn_without_body): Checks for `#[inline]` on trait methods without bodies\r\n* [x] [cmp_nan -> `unused_comparisons`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#cmp_nan): Checks for comparisons to NaN.\r\n* [ ] [ineffective_bit_mask](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#ineffective_bit_mask): Checks for bit masks in comparisons which can be removed\r\nwithout changing the outcome.\r\n* [x] [infinite_iter -> `infinite_iterators`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#infinite_iter): Checks for iteration that is guaranteed to be infinite.\r\n* [x] [mut_from_ref -> `returning_mut_ref_from_ref`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mut_from_ref): This lint checks for functions that take immutable\r\nreferences and return\r\nmutable ones.\r\n* [x] [unused_io_amount -> `unused_io_amounts`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unused_io_amount): Checks for unused written/read amount.\r\n* [x] [invalid_ref -> `undefined_references`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#invalid_ref): Checks for creation of references to zeroed or uninitialized memory.\r\n* [ ] [serde_api_misuse](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#serde_api_misuse): Checks for mis-uses of the serde API.\r\n* [x] [forget_ref -> `forgetting_references`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#forget_ref): Checks for calls to `std::mem::forget` with a reference\r\ninstead of an owned value.\r\n* [x] [absurd_extreme_comparisons -> `unused_comparisons`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons): Checks for comparisons where one side of the relation is\r\neither the minimum or maximum value for its type and warns if it involves a\r\ncase that is always true or always false. Only integer and boolean types are\r\nchecked.\r\n* [ ] [for_loop_over_result](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_loop_over_result): Checks for `for` loops over `Result` values.\r\n* [x] [iterator_step_by_zero -> `iter_step_by_zero`](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#iterator_step_by_zero): Checks for calling `.step_by(0)` on iterators,\r\nwhich never terminates.\r\n* [ ] [enum_clike_unportable_variant](https://rust-lang-nursery.github.io/rust-clippy/master/index.html#enum_clike_unportable_variant): Checks for C-like enumerations that are\r\n`repr(isize/usize)` and have values that don't fit into an `i32`.\r\n", "closed_by": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53224/reactions", "total_count": 15, "+1": 8, "-1": 0, "laugh": 0, "hooray": 7, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53224/timeline", "performed_via_github_app": null, "state_reason": "completed"}