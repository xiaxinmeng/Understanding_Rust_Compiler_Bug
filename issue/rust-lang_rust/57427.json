{"url": "https://api.github.com/repos/rust-lang/rust/issues/57427", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57427/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57427/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57427/events", "html_url": "https://github.com/rust-lang/rust/issues/57427", "id": 396653868, "node_id": "MDU6SXNzdWUzOTY2NTM4Njg=", "number": 57427, "title": "Incorrect optimization calling function with __m256d parameters", "user": {"login": "dbdr", "id": 2729515, "node_id": "MDQ6VXNlcjI3Mjk1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2729515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbdr", "html_url": "https://github.com/dbdr", "followers_url": "https://api.github.com/users/dbdr/followers", "following_url": "https://api.github.com/users/dbdr/following{/other_user}", "gists_url": "https://api.github.com/users/dbdr/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbdr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbdr/subscriptions", "organizations_url": "https://api.github.com/users/dbdr/orgs", "repos_url": "https://api.github.com/users/dbdr/repos", "events_url": "https://api.github.com/users/dbdr/events{/privacy}", "received_events_url": "https://api.github.com/users/dbdr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-07T21:19:12Z", "updated_at": "2019-01-08T09:53:04Z", "closed_at": "2019-01-08T09:53:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code essentially calls ```_mm256_cmp_pd(a, b, _CMP_NEQ_UQ)``` to test four f64 packed as a __m256d for inequality. In particular, it should therefore return all zeros when called with the same value for a and b. This works for opt-level 0 to 2 but fails with opt-level=3.\r\n```\r\n$  rustc -g -C opt-level=2 avx.rs && ./avx \r\n$  rustc -g -C opt-level=3 avx.rs && ./avx \r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `\"__m256d(0.0, 0.0, 0.0, 0.0)\"`,\r\n right: `\"__m256d(NaN, NaN, 0.0, 0.0)\"`', avx.rs:37:2\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\n$ rustc --version\r\nrustc 1.31.1 (b6c32da9b 2018-12-18)\r\n```\r\nTest code:\r\n```\r\n#[cfg(target_arch = \"x86\")]                                                                                                                                                               \r\nuse std::arch::x86::*;                                                                                                                                                                    \r\n#[cfg(target_arch = \"x86_64\")]                                                                                                                                                            \r\nuse std::arch::x86_64::*;  \r\n\r\n#[cfg_attr(any(target_arch = \"x86\", target_arch = \"x86_64\"), target_feature(enable = \"avx\"))]\r\nunsafe fn avx_pack(v0: f64, v1: f64, v2: f64, v3: f64) -> __m256d {\r\n\t_mm256_set_pd(v0, v1, v2, v3)\r\n}\r\n\r\nfn pack(v0: f64, v1: f64, v2: f64, v3: f64) -> __m256d {\r\n\tif is_x86_feature_detected!(\"avx\") {\r\n\t\treturn unsafe {\r\n\t\t\tavx_pack(v0, v1, v2, v3)\r\n\t\t}\r\n\t}\r\n\tpanic!(\"Unsupported\");\r\n}\r\n\r\n#[cfg_attr(any(target_arch = \"x86\", target_arch = \"x86_64\"), target_feature(enable = \"avx\"))]\r\nunsafe fn avx_cmp(a: __m256d, b: __m256d) -> __m256d {\r\n\t_mm256_cmp_pd(a, b, _CMP_NEQ_UQ)\r\n}\r\n\r\nfn cmp(a: __m256d, b: __m256d) -> __m256d {\r\n\tif is_x86_feature_detected!(\"avx\") {\r\n\t\treturn unsafe {\r\n\t\t\tavx_cmp(a, b)\r\n\t\t}\r\n\t}\r\n\tpanic!(\"Unsupported\");\r\n}\r\n\r\nfn main() {\r\n\tlet p = pack(1.0, 2.0, 3.0, 4.0);\r\n\tlet eq = cmp(p, p);\r\n\tassert_eq!(\"__m256d(0.0, 0.0, 0.0, 0.0)\", format!(\"{:?}\", eq));\r\n}\r\n```\r\nLooking at the generated code (opt-level=3) using objdump, the avx_cmp function is compiled as:\r\n```\r\n0000000000009d20 <avx::avx_cmp::h56baa3e4f2dfd19e>:\r\n    9d20:       c5 fd c2 c1 04          vcmpneqpd %ymm1,%ymm0,%ymm0\r\n    9d25:       c5 fd 29 07             vmovapd %ymm0,(%rdi)\r\n    9d29:       c5 f8 77                vzeroupper \r\n    9d2c:       c3                      retq   \r\n    9d2d:       0f 1f 00                nopl   (%rax)\r\n```\r\nSo it expects its arguments in registers ymm0 and ymm1, while nothing in the code sets them. The call site has:\r\n```\r\n    9dc4:       48 8d 9c 24 e0 00 00    lea    0xe0(%rsp),%rbx\r\n    9dcb:       00 \r\n    9dcc:       48 89 df                mov    %rbx,%rdi\r\n    9dcf:       0f 28 d0                movaps %xmm0,%xmm2\r\n    9dd2:       0f 28 d9                movaps %xmm1,%xmm3\r\n    9dd5:       e8 46 ff ff ff          callq  9d20 <avx::avx_cmp::h56baa3e4f2dfd19e>\r\n```\r\n", "closed_by": {"login": "dbdr", "id": 2729515, "node_id": "MDQ6VXNlcjI3Mjk1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2729515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbdr", "html_url": "https://github.com/dbdr", "followers_url": "https://api.github.com/users/dbdr/followers", "following_url": "https://api.github.com/users/dbdr/following{/other_user}", "gists_url": "https://api.github.com/users/dbdr/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbdr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbdr/subscriptions", "organizations_url": "https://api.github.com/users/dbdr/orgs", "repos_url": "https://api.github.com/users/dbdr/repos", "events_url": "https://api.github.com/users/dbdr/events{/privacy}", "received_events_url": "https://api.github.com/users/dbdr/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57427/timeline", "performed_via_github_app": null, "state_reason": "completed"}