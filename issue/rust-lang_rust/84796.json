{"url": "https://api.github.com/repos/rust-lang/rust/issues/84796", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84796/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84796/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84796/events", "html_url": "https://github.com/rust-lang/rust/issues/84796", "id": 873774445, "node_id": "MDU6SXNzdWU4NzM3NzQ0NDU=", "number": 84796, "title": "one type is more general than the other, but they are not (I guess)", "user": {"login": "lattice0", "id": 6632321, "node_id": "MDQ6VXNlcjY2MzIzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/6632321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lattice0", "html_url": "https://github.com/lattice0", "followers_url": "https://api.github.com/users/lattice0/followers", "following_url": "https://api.github.com/users/lattice0/following{/other_user}", "gists_url": "https://api.github.com/users/lattice0/gists{/gist_id}", "starred_url": "https://api.github.com/users/lattice0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lattice0/subscriptions", "organizations_url": "https://api.github.com/users/lattice0/orgs", "repos_url": "https://api.github.com/users/lattice0/repos", "events_url": "https://api.github.com/users/lattice0/events{/privacy}", "received_events_url": "https://api.github.com/users/lattice0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-05-01T21:37:56Z", "updated_at": "2021-05-02T18:38:57Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "In this example, I'm trying to pass a function pointer to the argument `f: for<'b> fn(Arc<Mutex<Self>>, &'b Message) -> BoxFuture<'b, Result<R, Error>>`:\r\n\r\n```\r\nuse futures::future::{BoxFuture, FutureExt};\r\nuse std::sync::Arc;\r\nuse futures::lock::Mutex;\r\n\r\nstruct Message {}\r\nstruct Client {}\r\n\r\nenum Error {\r\n    ConnectionClosed,\r\n}\r\n\r\n#[derive(Default)]\r\nstruct MyType{}\r\n\r\nimpl Client {\r\n    fn send_and_expect<'a, R: 'a + Default + Send>(\r\n        client: Arc<Mutex<Self>>,\r\n        message: &'a Message,\r\n    ) -> BoxFuture<'a, Result<R, Error>> {\r\n        async move { Ok(R::default()) }.boxed()\r\n    }\r\n\r\n    pub fn connection_retrier<'a, R: 'a + Default + Send>(\r\n        client: Arc<Mutex<Self>>,\r\n        f: for<'b> fn(Arc<Mutex<Self>>, &'b Message) -> BoxFuture<'b, Result<R, Error>>,\r\n        f_m: &'a Message,\r\n    ) -> BoxFuture<'a, Result<R, Error>>\r\n    {\r\n        async move {Ok(R::default())}.boxed()\r\n    }\r\n\r\n    async fn send_with_retry<'a, R: 'a + Send + Default>(\r\n        client: Arc<Mutex<Self>>,\r\n        message: &'a Message,\r\n    ) -> Result<R, Error> {\r\n        let client = Arc::new(Mutex::new(Client{}));\r\n        Self::connection_retrier::<R>(client, \r\n        Self::send_and_expect::<R>, \r\n        message)\r\n            .await\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n```\r\n\r\n[Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b86fbf2dbd5d4e805e5aea9cf963a65b)\r\n\r\n\r\nError:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:38:9\r\n   |\r\n38 |         Self::send_and_expect::<R>, \r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\r\n   |\r\n   = note: expected fn pointer `for<'b> fn(Arc<_>, &'b Message) -> Pin<Box<(dyn futures::Future<Output = std::result::Result<R, Error>> + std::marker::Send + 'b)>>`\r\n              found fn pointer `fn(Arc<_>, &Message) -> Pin<Box<dyn futures::Future<Output = std::result::Result<R, Error>> + std::marker::Send>>`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nI don't see any error on the signatures. My function is a particular case of the function `f` expected in the argument. Could this be a not yet implemented feature? \r\n\r\nI tried help in Stackoverflow and Rust forum before posting here but couldn't get an answer to why this happens, just workarounds. ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84796/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84796/timeline", "performed_via_github_app": null, "state_reason": null}