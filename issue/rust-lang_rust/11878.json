{"url": "https://api.github.com/repos/rust-lang/rust/issues/11878", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/11878/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/11878/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/11878/events", "html_url": "https://github.com/rust-lang/rust/issues/11878", "id": 26442027, "node_id": "MDU6SXNzdWUyNjQ0MjAyNw==", "number": 11878, "title": "Adding or removing an item should not silently change behavior of downstream code", "user": {"login": "glaebhoerl", "id": 1216629, "node_id": "MDQ6VXNlcjEyMTY2Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1216629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glaebhoerl", "html_url": "https://github.com/glaebhoerl", "followers_url": "https://api.github.com/users/glaebhoerl/followers", "following_url": "https://api.github.com/users/glaebhoerl/following{/other_user}", "gists_url": "https://api.github.com/users/glaebhoerl/gists{/gist_id}", "starred_url": "https://api.github.com/users/glaebhoerl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glaebhoerl/subscriptions", "organizations_url": "https://api.github.com/users/glaebhoerl/orgs", "repos_url": "https://api.github.com/users/glaebhoerl/repos", "events_url": "https://api.github.com/users/glaebhoerl/events{/privacy}", "received_events_url": "https://api.github.com/users/glaebhoerl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/20", "html_url": "https://github.com/rust-lang/rust/milestone/20", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/20/labels", "id": 452034, "node_id": "MDk6TWlsZXN0b25lNDUyMDM0", "number": 20, "title": "1.0", "description": "This will be the first major release of Rust, where we offer some guaranteed level of support and backwards compatibility.\r\n\r\nThe significant criteria for this release are:\r\n\r\n* Language backwards compatibility - All major features are in, and in their final form. Generally, the only new language features added after this milestone must be backwards compatible, or to fix soundness holes, though we do expect to have some leeway to make small incompatible fixes that have low impact on existing code bases.\r\n\r\n* Library stability - We have a system of measuring and ensuring the stability of API's, and a significant portion of the standard library is declared stable. Stable API's will not change. Large portions of the standard library need to be stable for 1.0, including primitive types, vectors, strings, option, numerics, collections, some I/O and concurrency.\r\n\r\n* User experience - The system is polished and the presentation is complete and professional. New users have a clear path to using and learning the system. This encompasses the web site, documentation, installation, and tooling.\r\n", "creator": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 376, "state": "closed", "created_at": "2013-10-10T18:48:33Z", "updated_at": "2016-08-28T23:13:24Z", "due_on": "2015-05-15T07:00:00Z", "closed_at": "2015-05-21T20:59:13Z"}, "comments": 22, "created_at": "2014-01-28T14:16:19Z", "updated_at": "2014-06-12T21:29:33Z", "closed_at": "2014-06-12T21:29:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you add or remove a trait `impl`, or anonymous `impl`, or any other item in upstream code, this should have one of three effects on downstream code:\n1. Nothing.\n2. Where it previously compiled, now it fails to.\n3. Where it previously failed to compile, now it succeeds.\n\nWhat should _not_ happen is\n\n&nbsp;&nbsp;&nbsp;4. It continues to compile, but its runtime behavior is now different.\n\nThis property is currently known to be violated by method call autoderef combined with trait impls on reference types (#11818). For instance:\n\n```\nmod up1 {\n    pub trait Stringify {\n        fn stringify(&self) -> ~str;\n    }\n    impl<'a, T> Stringify for &'a T {\n        fn stringify(&self) -> ~str { ~\"Hi, I'm a borrowed reference!\" }\n    }\n}\n\nmod up2 {\n    use up1::Stringify;\n    pub struct Foo;\n\n    #[cfg(with_foo_impl)]\n    impl Stringify for Foo {\n        fn stringify(&self) -> ~str { ~\"This is Foo\" }\n    }\n}\n\nmod down {\n    use up1::Stringify;\n    use up2::Foo;\n    pub fn some_string() -> ~str {\n        (&Foo).stringify()\n    }\n}\n\nfn main() {\n    println!(\"{}\", down::some_string())\n}\n```\n\nWhen compiled with `--cfg with_foo_impl`, this code will output \"This is Foo\". Otherwise it will say \"Hi, I'm a borrowed reference!\".\n\nWhy this is important: it seriously impairs the ability to reason about interface stability and compatibility. In today's situation, upstreams cannot add or remove `impl`s for their types without having to worry about introducing silent breakage somewhere downstream. If this property held, then the worst case would be that downstream would be alerted to the change by a compile failure, which is much, much preferable to silent breakage. (This is exactly the kind of thing static type systems are supposed to ensure!)\n\nThe provided example is only one instance I know of where the principle is violated, I don't know whether there might be others.\n", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/11878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/11878/timeline", "performed_via_github_app": null, "state_reason": "completed"}