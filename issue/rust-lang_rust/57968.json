{"url": "https://api.github.com/repos/rust-lang/rust/issues/57968", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57968/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57968/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57968/events", "html_url": "https://github.com/rust-lang/rust/issues/57968", "id": 404224797, "node_id": "MDU6SXNzdWU0MDQyMjQ3OTc=", "number": 57968, "title": "Tracking Issue for making incremental compilation the default for Release Builds", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 372080667, "node_id": "MDU6TGFiZWwzNzIwODA2Njc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-core", "name": "T-core", "color": "bfd4f2", "default": false, "description": "Relevant to the core team, which will review and decide on the PR/issue."}, {"id": 609101895, "node_id": "MDU6TGFiZWw2MDkxMDE4OTU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-cargo", "name": "T-cargo", "color": "bfd4f2", "default": false, "description": "Relevant to the cargo team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 849077850, "node_id": "MDU6TGFiZWw4NDkwNzc4NTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-performance", "name": "WG-compiler-performance", "color": "c2e0c6", "default": false, "description": "Working group: Compiler Performance"}, {"id": 3537216018, "node_id": "LA_kwDOAAsO6M7S1aIS", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-design-concerns", "name": "S-tracking-design-concerns", "color": "4682b4", "default": false, "description": "Blocking design concerns"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2019-01-29T10:35:38Z", "updated_at": "2022-08-31T05:57:32Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Since incremental compilation supports being used in conjunction with ThinLTO the runtime performance of incrementally built artifacts is (presumably) roughly on par with non-incrementally built code. At the same time, building things incrementally often is significantly faster (([1.4-5x](https://github.com/rust-lang/rust/pull/56678#issuecomment-446606215) according to perf.rlo). As a consequence it might be a good idea to make Cargo default to incremental compilation for release builds.\r\n\r\nPossible caveats that need to be resolved:\r\n\r\n- [ ] The initial build is slightly slower with incremental compilation, usually around 10%. We need to decide if this is a worthwhile tradeoff. For `debug` and `check` builds everybody seems to be fine with this already. \r\n- [ ] Some crates, like `style-servo`, are always slower to compile with incr. comp., even if there is just a small change. In the case of `style-servo` that is 62 seconds versus 64-69 seconds on perf.rlo. It is unlikely that this would improve before we make incr. comp. the default. We need to decide if this is a justifiable price to pay for improvements in other projects.\r\n- [ ] Even if incremental compilation becomes the default, one can still always opt out of it via the `CARGO_INCREMENTAL` flag or a local Cargo config. However, this might not be common knowledge, the same as it isn't common knowledge that one can improve runtime performance by forcing the compiler to use just one codegen unit.\r\n- [x] It still needs to be verified that runtime performance of compiled artifacts does not suffer too much from switching to incremental compilation (see below).\r\n\r\n## Data on runtime performance of incrementally compiled release artifacts\r\n\r\nApart from anectodal evidence that runtime performance is \"roughly the same\" there have been two attempts to measure this in a more reliable way:\r\n\r\n1. PR #56678 did an experiment where we compiled the compiler itself incrementally and then tested how the compiler's runtime performance was affected by this. The results are twofold:\r\n    1. In general performance drops by **1-2%** ([compare results](https://perf.rust-lang.org/compare.html?start=3a3121337122637fa11f0e5d42aec67551e8c125&end=26f96e5eea2d6d088fd20ebc14dc90bdf123e4a1) for `clean` builds)\r\n    2. For two of the small test cases (`helloworld`, `unify-linearly`) performance drops by 30%. It is known that these test cases are very sensitive to LLVM making the right inlining decisions, which we already saw when switching from single-CGU to non-incremental ThinLTO. This is indicative that microbenchmarks may see performance drops unless the author of the benchmark takes care of marking bottleneck functions with `#[inline]`.\r\n2. For a limited period of time we made incremental compilation the default in Cargo (https://github.com/rust-lang/cargo/pull/6564) in order to see how this affected measurements on [lolbench.rs](https://lolbench.rs). It is not yet clear if the experiment succeeded and how much useful data it collected since we had to cut it short because of a regression (#57947). The initial data looks promising: only a handful of the ~600 benchmarks showed performance losses (see https://lolbench.rs/#nightly-2019-01-27). But we need further investigation on how reliable the results are. We might also want to re-run the experiment since the regression can easily be avoided.\r\n\r\nOne more experiment we should do is compiling Firefox because it is a large Rust codebase with an excellent benchmarking infrastructure (cc @nnethercote). \r\n\r\ncc @rust-lang/core @rust-lang/cargo @rust-lang/compiler \r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57968/reactions", "total_count": 8, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 3, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57968/timeline", "performed_via_github_app": null, "state_reason": null}