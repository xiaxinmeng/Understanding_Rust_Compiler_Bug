{"url": "https://api.github.com/repos/rust-lang/rust/issues/42340", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42340/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42340/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42340/events", "html_url": "https://github.com/rust-lang/rust/issues/42340", "id": 232704689, "node_id": "MDU6SXNzdWUyMzI3MDQ2ODk=", "number": 42340, "title": "[RFC] Refactor types to be a `(TypeCore, Substs)` pair", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-31T21:40:10Z", "updated_at": "2019-10-06T13:40:39Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, [the `Ty<'tcx>` type][ty] is a reference to [a struct (`&TyS`)][tys] that packages up [a big ol' enum `TypeVariants`][tv]. As part of [chalkification](https://github.com/rust-lang/rust-roadmap/issues/8), we would like to be able to write more efficient \"decision tree\" like procedures that branch on this type. This would be made nicer by factoring out the type into two parts, a \"core\" and a \"substs\". This core would be roughly equivalent to the existing `TypeVariants`, but without the recursive references to other types, which would be uniformly packaged up in the `substs`.\r\n\r\n[ty]: https://github.com/rust-lang/rust/blob/171d2857560a3c109d59d946bf3ff74a42d0ab33/src/librustc/ty/mod.rs#L538\r\n[tys]: https://github.com/rust-lang/rust/blob/171d2857560a3c109d59d946bf3ff74a42d0ab33/src/librustc/ty/mod.rs#L498-L504\r\n[tv]: https://github.com/rust-lang/rust/blob/171d2857560a3c109d59d946bf3ff74a42d0ab33/src/librustc/ty/sty.rs#L95-L184\r\n\r\nThus I imagine that the `TyS` struct would change to something like this:\r\n\r\n```rust\r\npub struct TyS<'tcx> {\r\n    pub sty: TypeVariants<'tcx>, // this is the \"core\" part\r\n    pub substs: &'tcx Substs<'tcx>, // this is the \"substs\" part, extracted from `TypeVariants`\r\n    pub flags: TypeFlags,\r\n\r\n    // the maximal depth of any bound regions appearing in this type.\r\n    region_depth: u32,\r\n}\r\n```\r\n\r\n(Incidentally, this new notion of `TypeVariants` could maybe subsume the existing [`SimplifiedType`](https://github.com/rust-lang/rust/blob/171d2857560a3c109d59d946bf3ff74a42d0ab33/src/librustc/ty/fast_reject.rs#L19-L36), though that's not super important.)\r\n\r\n### Steps\r\n\r\nThis transition is best made in steps:\r\n\r\n- [x] #42171: refactor ProjectionTy to store def-id of associated item + substs\r\n    - PR: #42297\r\n- [x] [transition `TyTuple` to use a substs](https://github.com/rust-lang/rust/blob/171d2857560a3c109d59d946bf3ff74a42d0ab33/src/librustc/ty/sty.rs#L163)\r\n    - This would make things more regular, but we \"lose\" the fact that tuples are always composed of types at the moment. Probably not important in practice.\r\n- [x] [remove the `ClosureSubsts` type used in `TyClosure` and make it into a normal substs](https://github.com/rust-lang/rust/blob/171d2857560a3c109d59d946bf3ff74a42d0ab33/src/librustc/ty/sty.rs#L153) \r\n- [x] [do the same for `GeneratorSubsts`]\r\n\r\n### Unknowns\r\n\r\nIt's not 100% clear that this is a good plan, though the individual refactorings above all seem like good steps regardless. Some complicating factors:\r\n\r\n- `TyFnPtr` embodies a `PolyFnSig`, which carries a binder. \r\n- Existential types carry where-clauses (eventually, function pointers may do the same, to address https://github.com/rust-lang/rust/issues/25860)\r\n\r\ncc @eddyb, who first suggested this to me\r\ncc @tschottdorf, who implemented #42297, a step along this path (and an important step for ATC regardless)", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42340/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42340/timeline", "performed_via_github_app": null, "state_reason": null}