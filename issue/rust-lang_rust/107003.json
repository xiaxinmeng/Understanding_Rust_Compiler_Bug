{"url": "https://api.github.com/repos/rust-lang/rust/issues/107003", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107003/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107003/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107003/events", "html_url": "https://github.com/rust-lang/rust/issues/107003", "id": 1536989166, "node_id": "I_kwDOAAsO6M5bnJfu", "number": 107003, "title": "Alternative syntax suggestion for tilde keyword (`~const`): `where const`", "user": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1769279746, "node_id": "MDU6TGFiZWwxNzY5Mjc5NzQ2", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_trait_impl", "name": "F-const_trait_impl", "color": "f9c0cc", "default": false, "description": "`#![feature(const_trait_impl)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2023-01-17T20:23:08Z", "updated_at": "2023-04-30T05:22:46Z", "closed_at": "2023-04-26T18:10:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In #67792 it was suggested to file a new issue regarding any additional discussion, and it looks like the syntax for `~const` is not finalized. In https://github.com/rust-lang/lang-team/issues/162 and https://github.com/rust-lang/rust/issues/102090, it still looks like `~const` is still a placeholder keyword. I'd like to propose another syntax: `where const`\r\n\r\n```rust\r\nfn triple_add<T>(a: T, b: T, c: T) -> T\r\nwhere\r\n    T: Add<Output=T>,\r\nwhere const\r\n    T: const Add<Output=T>,\r\n{\r\n    a + b + c\r\n}\r\n```\r\n\r\nLike with normal trait bounds, we would add another `where` clause to functions that define when the function is `const`. In the previous example, there is a type bounds on `T` that always applies, followed by the declaration that `triple_add` is const if and only if the `Add` implementation is `const`.\r\n\r\nWhile this looks a little verbose, `where const` allows for different bounds to permit `const` as well. If there was a `ConstAdd` trait that was always `const`, we could express the following instead:\r\n\r\n```rust\r\nfn triple_add<T>(a: T, b: T, c: T) -> T\r\nwhere\r\n    T: Add<Output=T>,\r\nwhere const\r\n    T: ConstAdd<Output=T>,\r\n{\r\n    a + b + c\r\n}\r\n```\r\n\r\nThis gives us flexibility in different how different the `const` bounds are expressed in the future, should we decide to expand or restrict it. \r\n\r\nA trait could express `const` bounds as well in a similar way:\r\n\r\n```rust\r\ntrait Foo<Other>\r\nwhere const\r\n  Other: const Bar,\r\n{}\r\n```\r\n\r\nI think this form has a lot of benefits over the existing `~const`:\r\n  1. `where const` is more familiar than `~const` in my opinion: `where` adds bounds to the function, so its more intuitive that `where const` adds `const` bounds the the function. \r\n  2. It allows us to determine the inline representation later, if one is desired.\r\n  3. It better expresses that `const` is opt-in, without the `const` keyword in the front\r\n  4. It allows flexibility in how `const` bounds are expressed, in the way that other traits could express `const`ness, as shown with the previous snippets.\r\n  5. It also gives a framework for keyword generics, e.g. with `async`:\r\n```rust\r\nfn triple_add<T>(a: T, b: T, c: T) -> T\r\nwhere\r\n    T: Add<Output=T>,\r\nwhere async\r\n    T: async Add<Output=T>,\r\n{ /* ... */ }\r\n```\r\n 6. We can restrict requirements if needed, such as requiring all `where const` clauses to be `T: const Trait` where `Trait` is defined in the `where` bound, and then later opening up to more free bounds.\r\n 7. It might be easier to implement in terms of rustdoc and rustc implementation, since it would be iterating on the where bounds. That being said, I'm not sure of this either.\r\n\r\nTo the best of my ability, I haven't seen any suggestion of this. Please let me know if I've missed anything.", "closed_by": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107003/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107003/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}