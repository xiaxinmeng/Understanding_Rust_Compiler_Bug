{"url": "https://api.github.com/repos/rust-lang/rust/issues/94843", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94843/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94843/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94843/events", "html_url": "https://github.com/rust-lang/rust/issues/94843", "id": 1166308664, "node_id": "I_kwDOAAsO6M5FhHU4", "number": 94843, "title": "Additional let bindings needed to avoid `Sync`", "user": {"login": "crepererum", "id": 1529400, "node_id": "MDQ6VXNlcjE1Mjk0MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1529400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crepererum", "html_url": "https://github.com/crepererum", "followers_url": "https://api.github.com/users/crepererum/followers", "following_url": "https://api.github.com/users/crepererum/following{/other_user}", "gists_url": "https://api.github.com/users/crepererum/gists{/gist_id}", "starred_url": "https://api.github.com/users/crepererum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crepererum/subscriptions", "organizations_url": "https://api.github.com/users/crepererum/orgs", "repos_url": "https://api.github.com/users/crepererum/repos", "events_url": "https://api.github.com/users/crepererum/events{/privacy}", "received_events_url": "https://api.github.com/users/crepererum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-11T11:28:48Z", "updated_at": "2022-03-11T11:28:48Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nuse std::future::Future;\r\n\r\nfn spawn<T>(_: T)\r\nwhere\r\n    T: Future + Send + 'static,\r\n    T::Output: Send + 'static,\r\n{\r\n}\r\n\r\nasync fn f<T>(_: T) {}\r\n\r\nasync fn g<T>(x: T)\r\nwhere\r\n    T: Clone + Send + 'static,\r\n{\r\n    spawn(async move {\r\n        f(x.clone()).await;\r\n    });\r\n}\r\n\r\nfn main() {}\r\n```\r\n([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=804ee0ff0209cb9bc3d8c6a0b1d31518))\r\n\r\nI expected to see this happen:\r\nIt should compile.\r\n\r\nInstead, this happened:\r\n\r\n```text\r\nCompiling playground v0.0.1 (/playground)\r\nerror: future cannot be sent between threads safely\r\n  [--> src/main.rs:16:5\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)   |\r\n16 |     spawn(async move {\r\n   |     ^^^^^ future created by async block is not `Send`\r\n   |\r\nnote: future is not `Send` as this value is used across an await\r\n  [--> src/main.rs:17:21\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)   |\r\n17 |         f(x.clone()).await;\r\n   |           -         ^^^^^^ await occurs here, with `x` maybe used later\r\n   |           |\r\n   |           has type `&T` which is not `Send`\r\nnote: `x` is later dropped here\r\n  [--> src/main.rs:17:27\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)   |\r\n17 |         f(x.clone()).await;\r\n   |                           ^\r\nhelp: consider moving this into a `let` binding to create a shorter lived borrow\r\n  [--> src/main.rs:17:11\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)   |\r\n17 |         f(x.clone()).await;\r\n   |           ^^^^^^^^^\r\nnote: required by a bound in `spawn`\r\n  [--> src/main.rs:5:17\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)   |\r\n3  | fn spawn<T>(_: T)\r\n   |    ----- required by a bound in this\r\n4  | where\r\n5  |     T: Future + Send + 'static,\r\n   |                 ^^^^ required by this bound in `spawn`\r\nhelp: consider further restricting this bound\r\n   |\r\n14 |     T: Clone + Send + 'static + std::marker::Sync,\r\n   |                               +++++++++++++++++++\r\n\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nNote that following the suggestion using an additional `let` binding fixes the issue:\r\n\r\n```rust\r\nasync fn g<T>(x: T)\r\nwhere\r\n    T: Clone + Send + 'static,\r\n{\r\n    spawn(async move {\r\n        let x = x.clone();\r\n        f(x).await;\r\n    });\r\n}\r\n```\r\n\r\nWhat is kinda weird (from my PoV) is the explanation: adding an additional `let` binding doesn't really shorted the borrowing of `x`, we're still just calling `.clone()` and then call `f`.\r\n\r\nYou might wonder why someone would clone `x` here, but let's assume we need `x` after calling `f` and I didn't want to make the example more complicated.\r\n\r\nThe `spawn` function above was chosen because it is similar to `tokio::spawn`, for which this issue was observed originally.\r\n\r\nI think this might be another instance of #69663 but I'm not sure.\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.59.0 (9d1b2106e 2022-02-23)\r\nbinary: rustc\r\ncommit-hash: 9d1b2106e23b1abd32fce1f17267604a5102f57a\r\ncommit-date: 2022-02-23\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.59.0\r\nLLVM version: 13.0.0\r\n```\r\n\r\nBug is also reproducible on nightly.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94843/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94843/timeline", "performed_via_github_app": null, "state_reason": null}