{"url": "https://api.github.com/repos/rust-lang/rust/issues/69523", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69523/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69523/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69523/events", "html_url": "https://github.com/rust-lang/rust/issues/69523", "id": 572301361, "node_id": "MDU6SXNzdWU1NzIzMDEzNjE=", "number": 69523, "title": "-Zsanitizer=address fails in a simple case", "user": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630870359, "node_id": "MDU6TGFiZWw2MzA4NzAzNTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-sanitizers", "name": "A-sanitizers", "color": "f7e101", "default": false, "description": "Area: Sanitizers for correctness and code quality."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-27T19:23:09Z", "updated_at": "2020-02-27T20:32:52Z", "closed_at": "2020-02-27T20:32:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nfn main() {\r\n    let v = vec![1, 2, 3, 4];\r\n\r\n    let idx = v.len();\r\n\r\n    println!(\"v[{}] = {}\", idx, unsafe { v.get_unchecked(idx) });\r\n}\r\n```\r\n\r\nI compiled with: `rustc +nightly --crate-type bin -Zsanitizer=address bounds.rs`\r\n\r\nI expected to see an asan message complaining about the array bounds.\r\n\r\nInstead, this happened:\r\n```\r\n $ ./bounds\r\nv[4] = 2\r\n```\r\n\r\nIf I compile without the sanitizer and run with valgrind, I see the error I expect:\r\n```\r\n$  rustc +nightly  --crate-type bin bounds.rs\r\n$ valgrind ./bounds\r\n==1684114== Memcheck, a memory error detector\r\n==1684114== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==1684114== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info\r\n==1684114== Command: ./bounds\r\n==1684114==\r\n==1684114== Invalid read of size 4\r\n==1684114==    at 0x131AA8: core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt (num.rs:247)\r\n==1684114==    by 0x10FBC9: <&T as core::fmt::Display>::fmt (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==    by 0x12E74B: core::fmt::write (mod.rs:1053)\r\n==1684114==    by 0x1136AF: write_fmt<std::io::stdio::StdoutLock> (mod.rs:1428)\r\n==1684114==    by 0x1136AF: <std::io::stdio::Stdout as std::io::Write>::write_fmt (stdio.rs:549)\r\n==1684114==    by 0x113D8D: {{closure}}<std::io::stdio::Stdout> (stdio.rs:800)\r\n==1684114==    by 0x113D8D: try_with<core::cell::RefCell<core::option::Option<alloc::boxed::Box<Write>>>,closure-0,core::result::Result<(), std::io::error::Error>> (local.rs:262)\r\n==1684114==    by 0x113D8D: print_to<std::io::stdio::Stdout> (stdio.rs:793)\r\n==1684114==    by 0x113D8D: std::io::stdio::_print (stdio.rs:817)\r\n==1684114==    by 0x10F58C: bounds::main (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==    by 0x10F202: std::rt::lang_start::{{closure}} (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==    by 0x1184B2: {{closure}} (rt.rs:52)\r\n==1684114==    by 0x1184B2: std::panicking::try::do_call (panicking.rs:303)\r\n==1684114==    by 0x119C56: __rust_maybe_catch_panic (lib.rs:86)\r\n==1684114==    by 0x118E48: try<i32,closure-0> (panicking.rs:281)\r\n==1684114==    by 0x118E48: catch_unwind<closure-0,i32> (panic.rs:394)\r\n==1684114==    by 0x118E48: std::rt::lang_start_internal (rt.rs:51)\r\n==1684114==    by 0x10F1E7: std::rt::lang_start (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==    by 0x10F5DA: main (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==  Address 0x5a477e0 is 0 bytes after a block of size 16 alloc'd\r\n==1684114==    at 0x4C29DAF: malloc (vg_replace_malloc.c:309)\r\n==1684114==    by 0x10EBCB: alloc::alloc::alloc (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==    by 0x10ED03: <alloc::alloc::Global as core::alloc::AllocRef>::alloc (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)==1684114==    by 0x10EB3C: alloc::alloc::exchange_malloc (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==    by 0x10F3F5: bounds::main (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==    by 0x10F202: std::rt::lang_start::{{closure}} (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==    by 0x1184B2: {{closure}} (rt.rs:52)\r\n==1684114==    by 0x1184B2: std::panicking::try::do_call (panicking.rs:303)\r\n==1684114==    by 0x119C56: __rust_maybe_catch_panic (lib.rs:86)\r\n==1684114==    by 0x118E48: try<i32,closure-0> (panicking.rs:281)\r\n==1684114==    by 0x118E48: catch_unwind<closure-0,i32> (panic.rs:394)\r\n==1684114==    by 0x118E48: std::rt::lang_start_internal (rt.rs:51)\r\n==1684114==    by 0x10F1E7: std::rt::lang_start (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==    by 0x10F5DA: main (in /data/users/jsgf/fbsource-tp2/fbcode/experimental/jsgf/sanibad/bounds)\r\n==1684114==\r\nv[4] = 0\r\n==1684114==\r\n==1684114== HEAP SUMMARY:\r\n==1684114==     in use at exit: 229 bytes in 6 blocks\r\n==1684114==   total heap usage: 20 allocs, 14 frees, 2,425 bytes allocated\r\n==1684114==\r\n==1684114== LEAK SUMMARY:\r\n==1684114==    definitely lost: 0 bytes in 0 blocks\r\n==1684114==    indirectly lost: 0 bytes in 0 blocks\r\n==1684114==      possibly lost: 0 bytes in 0 blocks\r\n==1684114==    still reachable: 229 bytes in 6 blocks\r\n==1684114==         suppressed: 0 bytes in 0 blocks\r\n==1684114== Rerun with --leak-check=full to see details of leaked memory\r\n==1684114==\r\n==1684114== For lists of detected and suppressed errors, rerun with: -s\r\n==1684114== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\r\n```\r\n\r\nI also see \"use of uninitialized data\" when using msan:\r\n```\r\n$ rustc +nightly -Zsanitizer=memory --crate-type bin bounds.rs\r\n$ ./bounds\r\nUninitialized bytes in __interceptor_memchr at offset 0 inside [0x701000000000, 4)\r\n==1686818==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n    #0 0x562d2c73384e  (/home/jsgf/sanibad/bounds+0x6f84e)\r\n    #1 0x562d2c73a771  (/home/jsgf/sanibad/bounds+0x76771)\r\n    #2 0x562d2c72e754  (/home/jsgf/sanibad/bounds+0x6a754)\r\n    #3 0x562d2c72f655  (/home/jsgf/sanibad/bounds+0x6b655)\r\n    #4 0x7f3f669f83d4  (/lib64/libc.so.6+0x223d4)\r\n    #5 0x562d2c6d1128  (/home/jsgf/sanibad/bounds+0xd128)\r\n\r\nSUMMARY: MemorySanitizer: use-of-uninitialized-value (/home/jsgf/sanibad/bounds+0x6f84e)\r\nExiting\r\n```\r\n\r\nTrying larger out of bounds offsets didn't help.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nbinary: rustc\r\ncommit-hash: abc3073c92df034636a823c5382ece2186d22b9e\r\ncommit-date: 2020-02-26\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.43.0-nightly\r\nLLVM version: 9.0\r\n```\r\n\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69523/timeline", "performed_via_github_app": null, "state_reason": "completed"}