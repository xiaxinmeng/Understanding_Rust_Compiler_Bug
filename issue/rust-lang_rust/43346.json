{"url": "https://api.github.com/repos/rust-lang/rust/issues/43346", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43346/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43346/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43346/events", "html_url": "https://github.com/rust-lang/rust/issues/43346", "id": 244198062, "node_id": "MDU6SXNzdWUyNDQxOTgwNjI=", "number": 43346, "title": "rustc 1.18.0 misaligned loads and stores on SPARC", "user": {"login": "dhduvall", "id": 7074165, "node_id": "MDQ6VXNlcjcwNzQxNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7074165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhduvall", "html_url": "https://github.com/dhduvall", "followers_url": "https://api.github.com/users/dhduvall/followers", "following_url": "https://api.github.com/users/dhduvall/following{/other_user}", "gists_url": "https://api.github.com/users/dhduvall/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhduvall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhduvall/subscriptions", "organizations_url": "https://api.github.com/users/dhduvall/orgs", "repos_url": "https://api.github.com/users/dhduvall/repos", "events_url": "https://api.github.com/users/dhduvall/events{/privacy}", "received_events_url": "https://api.github.com/users/dhduvall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 632899563, "node_id": "MDU6TGFiZWw2MzI4OTk1NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-SPARC", "name": "O-SPARC", "color": "6e6ec0", "default": false, "description": "Target: SPARC processors"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-07-19T22:54:48Z", "updated_at": "2017-07-26T23:41:01Z", "closed_at": "2017-07-26T23:41:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "My apologies for not catching this sooner.\r\n\r\nThe struct alignment and packing that landed (well, was re-enabled) with 1.18.0 produces either improperly aligned structs or improperly aligned loads and stores (or both) on SPARC.  The following test program demonstrates it (extracted from where I originally saw the compiler die):\r\n\r\n```rust\r\npub struct Blake2bCtx {\r\n    a: [u8; 8],\r\n    b: u16,\r\n    c: u8,\r\n}\r\n\r\n#[inline(never)]\r\nfn blake2b_compress(ctx: &mut Blake2bCtx) {\r\n\r\n    // Re-interpret the input buffer in the state as an array of little-endian\r\n    // u64s, converting them to machine endianness. It's OK to modify the\r\n    // buffer in place since this is the last time this data will be accessed\r\n    // before it's overwritten.\r\n\r\n    let m: &mut [u64; 1] = unsafe {\r\n        let t: &mut [u8; 8] = &mut ctx.a;\r\n        ::std::mem::transmute(t)\r\n    };\r\n\r\n    for word in &mut m[..] {\r\n        *word = *word + 1;\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut ctx = Blake2bCtx {\r\n        a: [0; 8],\r\n        b: 0,\r\n        c: 0,\r\n    };\r\n\r\n    blake2b_compress(&mut ctx)\r\n}\r\n```\r\n\r\nThe disassembly looks like this:\r\n\r\n```\r\n_ZN5blake16blake2b_compress17h54f2249749134ad6E()\r\n    blake::blake2b_compress::h54f2249749134ad6:      9d e3 bf 80  save      %sp, -0x80, %sp\r\n    blake::blake2b_compress::h54f2249749134ad6+0x4:  f2 5e 20 02  ldx       [%i0 + 0x2], %i1\r\n    blake::blake2b_compress::h54f2249749134ad6+0x8:  b2 06 60 01  add       %i1, 0x1, %i1\r\n    blake::blake2b_compress::h54f2249749134ad6+0xc:  f2 76 20 02  stx       %i1, [%i0 + 0x2]\r\n    blake::blake2b_compress::h54f2249749134ad6+0x10: 81 c7 e0 08  ret\r\n    blake::blake2b_compress::h54f2249749134ad6+0x14: 81 e8 00 00  restore\r\n```\r\n\r\nNote the `ldx` of `[%i0 + 0x2]`.  That would be valid if `%i0` were itself misaligned, but it's not, and `ldx` requires an 8-byte alignment.  I can attach the entire IR if necessary, but I believe these are the relevant bits:\r\n\r\n```\r\n; ModuleID = 'blake.cgu-0.rs'\r\nsource_filename = \"blake.cgu-0.rs\"\r\ntarget datalayout = \"E-m:e-i64:64-n32:64-S128\"\r\ntarget triple = \"sparcv9-sun-solaris\"\r\n\r\n%Blake2bCtx = type { i16, [0 x i8], [8 x i8], [0 x i8], i8, [1 x i8] }\r\n%\"core::slice::IterMut<u64>\" = type { i64*, [0 x i8], i64*, [0 x i8], %\"core::marker::PhantomData<&mut u64>\", [0 x i8] }\r\n%\"core::marker::PhantomData<&mut u64>\" = type {}\r\n\r\n@__rustc_debug_gdb_scripts_section__ = internal unnamed_addr constant [34 x i8] c\"\\01gdb_load_rust_pretty_printers.py\\00\", section \".debug_gdb_scripts\", align 1\r\n\r\n; Function Attrs: noinline nounwind uwtable\r\ndefine internal fastcc void @_ZN5blake16blake2b_compress17h54f2249749134ad6E(%Blake2bCtx* dereferenceable(12)) unnamed_addr #0 !dbg !5 {\r\nbb6:\r\n  tail call void @llvm.dbg.value(metadata %Blake2bCtx* %0, i64 0, metadata !23, metadata !57), !dbg !58\r\n  tail call void @llvm.dbg.value(metadata %Blake2bCtx* %0, i64 0, metadata !24, metadata !57), !dbg !59\r\n  %1 = getelementptr inbounds %Blake2bCtx, %Blake2bCtx* %0, i64 0, i32 2, !dbg !60\r\n  %2 = bitcast [8 x i8]* %1 to i64*, !dbg !61\r\n  tail call void @llvm.dbg.value(metadata %\"core::slice::IterMut<u64>\"* undef, i64 0, metadata !39, metadata !62), !dbg !63\r\n  tail call void @llvm.dbg.value(metadata i64* %2, i64 0, metadata !54, metadata !57), !dbg !64\r\n  %3 = load i64, i64* %2, align 8, !dbg !65\r\n  %4 = add i64 %3, 1, !dbg !65\r\n  store i64 %4, i64* %2, align 8, !dbg !65\r\n  tail call void @llvm.dbg.value(metadata %\"core::slice::IterMut<u64>\"* undef, i64 0, metadata !39, metadata !62), !dbg !63\r\n  ret void, !dbg !66\r\n}\r\n```\r\n\r\nI don't see anything obviously wrong in the code, but my knowledge here is pretty slim, so if it's obvious to someone else, I'd love the help.  Otherwise, I'm probably going to be putting debugging statements into `rustc::ty::layout::Struct::new`, hope I'm poking around in the right area, and doing a lot of recompiling.\r\n\r\ncc @binarycrusader ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43346/timeline", "performed_via_github_app": null, "state_reason": "completed"}