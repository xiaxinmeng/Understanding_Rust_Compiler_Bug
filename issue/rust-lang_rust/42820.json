{"url": "https://api.github.com/repos/rust-lang/rust/issues/42820", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42820/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42820/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42820/events", "html_url": "https://github.com/rust-lang/rust/issues/42820", "id": 237762363, "node_id": "MDU6SXNzdWUyMzc3NjIzNjM=", "number": 42820, "title": "The macro_rules treat `-1` as not a pattern", "user": {"login": "vityafx", "id": 1146369, "node_id": "MDQ6VXNlcjExNDYzNjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1146369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vityafx", "html_url": "https://github.com/vityafx", "followers_url": "https://api.github.com/users/vityafx/followers", "following_url": "https://api.github.com/users/vityafx/following{/other_user}", "gists_url": "https://api.github.com/users/vityafx/gists{/gist_id}", "starred_url": "https://api.github.com/users/vityafx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vityafx/subscriptions", "organizations_url": "https://api.github.com/users/vityafx/orgs", "repos_url": "https://api.github.com/users/vityafx/repos", "events_url": "https://api.github.com/users/vityafx/events{/privacy}", "received_events_url": "https://api.github.com/users/vityafx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-22T08:02:11Z", "updated_at": "2017-06-29T11:13:47Z", "closed_at": "2017-06-29T11:13:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need a enum which is deserialized with `serde` from number: `-1`, `0` and `1`.\r\nWhen I try to use `enum_number` macro from official `serde` documentation I get this:\r\n```\r\n\r\nerror: expected pattern, found `-1`\r\n  --> src/serde_utils.rs:37:32\r\n   |\r\n37 |                             $( $value => Ok($name::$variant), )*\r\n   |                                ^^^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThe code is very simple:\r\n\r\n```\r\nenum_number!(Change {\r\n    Down = -1,\r\n    None = 0,\r\n    Up = 1,\r\n});\r\n```\r\n\r\n```\r\nmacro_rules! enum_number {\r\n    ($name:ident { $($variant:ident = $value:expr, )* }) => {\r\n        #[allow(missing_docs)]\r\n        #[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd)]\r\n        pub enum $name {\r\n            $($variant = $value,)*\r\n        }\r\n\r\n        impl serde::Serialize for $name {\r\n            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\r\n                where S: serde::Serializer\r\n            {\r\n                // Serialize the enum as a i64.\r\n                serializer.serialize_i64(*self as i64)\r\n            }\r\n        }\r\n\r\n        impl<'de> serde::Deserialize<'de> for $name {\r\n            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\r\n                where D: serde::Deserializer<'de>\r\n            {\r\n                struct Visitor;\r\n\r\n                impl<'de> serde::de::Visitor<'de> for Visitor {\r\n                    type Value = $name;\r\n\r\n                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\r\n                        formatter.write_str(\"signed 64-bit integer\")\r\n                    }\r\n\r\n                    fn visit_i64<E>(self, value: i64) -> Result<$name, E>\r\n                        where E: serde::de::Error\r\n                    {\r\n                        // Rust does not come with a simple way of converting a\r\n                        // number to an enum, so use a big `match`.\r\n                        match value {\r\n                            $( $value => Ok($name::$variant), )*\r\n                            _ => Err(E::custom(\r\n                                format!(\"unknown {} value: {}\",\r\n                                stringify!($name), value))),\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Deserialize the enum from a i64.\r\n                deserializer.deserialize_i64(Visitor)\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIf I change `-1` to a positive number it compiles okay. I think it is a problem.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42820/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42820/timeline", "performed_via_github_app": null, "state_reason": "completed"}