{"url": "https://api.github.com/repos/rust-lang/rust/issues/75640", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75640/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75640/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75640/events", "html_url": "https://github.com/rust-lang/rust/issues/75640", "id": 680397509, "node_id": "MDU6SXNzdWU2ODAzOTc1MDk=", "number": 75640, "title": "false positive in MemorySanitizer when writes are done in a FFI call", "user": {"login": "BusyJay", "id": 1701473, "node_id": "MDQ6VXNlcjE3MDE0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1701473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BusyJay", "html_url": "https://github.com/BusyJay", "followers_url": "https://api.github.com/users/BusyJay/followers", "following_url": "https://api.github.com/users/BusyJay/following{/other_user}", "gists_url": "https://api.github.com/users/BusyJay/gists{/gist_id}", "starred_url": "https://api.github.com/users/BusyJay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BusyJay/subscriptions", "organizations_url": "https://api.github.com/users/BusyJay/orgs", "repos_url": "https://api.github.com/users/BusyJay/repos", "events_url": "https://api.github.com/users/BusyJay/events{/privacy}", "received_events_url": "https://api.github.com/users/BusyJay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-08-17T17:19:40Z", "updated_at": "2020-08-23T20:32:35Z", "closed_at": "2020-08-23T20:32:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\nfn main() {\r\n    unsafe {\r\n        let src = b\"\";\r\n        let bound = lz4_sys::LZ4_compressBound(src.len() as i32);\r\n        let mut output = Vec::<u8>::with_capacity(bound as usize);\r\n        // If uncomment following for loop, assert will pass.\r\n        //for _ in 0..bound {\r\n        //    output.push(0xff);\r\n        //}\r\n        let size = lz4_sys::LZ4_compress_default(\r\n            src.as_ptr() as _,\r\n            output.as_mut_ptr() as _,\r\n            src.len() as i32,\r\n            bound,\r\n        );\r\n        assert!(size <= bound);\r\n        output.set_len(size as usize);\r\n        for v in &output {\r\n            assert_eq!(*v, 0);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\nRunning with memory sanitizer should exit normally.\r\n\r\nInstead, this happened: \r\n```\r\nenv RUSTFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins' cargo +nightly run -Zbuild-std --target x86_64-unknown-linux-gnu\r\n==13035==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n    #0 0x55a4629d2ffa in test_false_positive::main::h135f8e367b9ee96a (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0x77ffa)\r\n    #1 0x55a4629d4125 in std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::he5a302ed29938521 (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0x79125)\r\n    #2 0x55a462a03057 in std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h0d9989ce28f66057 (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0xa8057)\r\n    #3 0x55a462ae5464 in std::sys_common::backtrace::__rust_begin_short_backtrace::h2cc322a62bb356db (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0x18a464)\r\n    #4 0x55a462a03455 in std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h2cc1cb770cf40ea4 (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0xa8455)\r\n    #5 0x55a462a510f9 in std::panicking::try::do_call::hce2558f4571e39c8 (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0xf60f9)\r\n    #6 0x55a462a573ab in __rust_try (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0xfc3ab)\r\n    #7 0x55a462a4ff34 in std::panicking::try::h9b50d2f4190a0e96 (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0xf4f34)\r\n    #8 0x55a462a46f7e in std::panic::catch_unwind::h169c903f4c0ff425 (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0xebf7e)\r\n    #9 0x55a462a02b91 in std::rt::lang_start_internal::hf0abd1f790105145 (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0xa7b91)\r\n    #10 0x55a4629d3fc7 in std::rt::lang_start::h326dcedc286951a9 (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0x78fc7)\r\n    #11 0x55a4629d39bc in main (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0x789bc)\r\n    #12 0x7f4b46460554 in __libc_start_main (/lib64/libc.so.6+0x22554)\r\n    #13 0x55a462974a98 in _start (/mnt/workspace/test-false-positive/target/x86_64-unknown-linux-gnu/debug/test-false-positive+0x19a98)\r\n```\r\nIt failed when running the assert check in the last for loop.\r\n\r\nHowever, if I uncommented the first for loop in above code, the program could exit normally. This seemed to be conflict with what the sanitizer suggested. If there was any variable uninitialized, the assert should fail as the for loop set all values to 0xff.\r\n\r\nI suspected there were some special tricks done in `LZ4_compress_default` that misleaded memory sanitizer.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.46.0-nightly (346aec9b0 2020-07-11)\r\nbinary: rustc\r\ncommit-hash: 346aec9b02f3c74f3fce97fd6bda24709d220e49\r\ncommit-date: 2020-07-11\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.46.0-nightly\r\nLLVM version: 10.0\r\n```\r\n\r\n", "closed_by": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75640/timeline", "performed_via_github_app": null, "state_reason": "completed"}