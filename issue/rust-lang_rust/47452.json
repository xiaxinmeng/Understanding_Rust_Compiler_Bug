{"url": "https://api.github.com/repos/rust-lang/rust/issues/47452", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47452/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47452/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47452/events", "html_url": "https://github.com/rust-lang/rust/issues/47452", "id": 288590954, "node_id": "MDU6SXNzdWUyODg1OTA5NTQ=", "number": 47452, "title": "macro_rules: \"no syntax variables matched as repeating at this depth\" fires before \"unknown macro variable\"", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-15T13:17:15Z", "updated_at": "2022-11-11T03:42:03Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider the following code:\r\n\r\n```rust\r\nmacro_rules! a {\r\n    (begin $ard: ident end) => {\r\n        [$arg]\r\n    }\r\n}\r\n\r\nmacro_rules! b {\r\n    (begin $($ard: ident),* end) => {\r\n        [$($arg),*]\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let (m, n) = (1, 2);\r\n    let x = a![begin m end];\r\n    let y = b![begin n end];\r\n}\r\n```\r\n\r\nThis produces the following pair of error messages:\r\n\r\n```\r\nerror: unknown macro variable `arg`\r\n  --> src/main.rs:3:10\r\n   |\r\n3  |         [$arg]\r\n   |          ^^^^\r\n...\r\n15 |     let x = a![begin m end];\r\n   |             --------------- in this macro invocation\r\n\r\nerror: attempted to repeat an expression containing no syntax variables matched as repeating at this depth\r\n --> src/main.rs:9:11\r\n  |\r\n9 |         [$($arg),*]\r\n  |           ^^^^^^\r\n\r\nerror: Could not compile `playground`.\r\n```\r\n\r\nWhile the second error message is *correct* in principle, it is also misleading. When I get a message like that, my focus is on counting how deeply nested the variable is. I usually don't consider \"wait is the syntax variable *misspelled*?\" when I see that error message.\r\n\r\nI think we could and should first check if a macro variable occurs at *any* depth (and report the first error if not) before we report anything about whether a match is found at the *current* depth (and report the second error if not).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47452/reactions", "total_count": 8, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 7, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47452/timeline", "performed_via_github_app": null, "state_reason": null}