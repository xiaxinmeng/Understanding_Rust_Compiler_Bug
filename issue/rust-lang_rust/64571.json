{"url": "https://api.github.com/repos/rust-lang/rust/issues/64571", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64571/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64571/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64571/events", "html_url": "https://github.com/rust-lang/rust/issues/64571", "id": 495037579, "node_id": "MDU6SXNzdWU0OTUwMzc1Nzk=", "number": 64571, "title": "How to generate SEH code", "user": {"login": "kcrazy", "id": 1505797, "node_id": "MDQ6VXNlcjE1MDU3OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1505797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kcrazy", "html_url": "https://github.com/kcrazy", "followers_url": "https://api.github.com/users/kcrazy/followers", "following_url": "https://api.github.com/users/kcrazy/following{/other_user}", "gists_url": "https://api.github.com/users/kcrazy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kcrazy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kcrazy/subscriptions", "organizations_url": "https://api.github.com/users/kcrazy/orgs", "repos_url": "https://api.github.com/users/kcrazy/repos", "events_url": "https://api.github.com/users/kcrazy/events{/privacy}", "received_events_url": "https://api.github.com/users/kcrazy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-18T07:22:57Z", "updated_at": "2019-09-18T08:40:33Z", "closed_at": "2019-09-18T08:40:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\nI am developing a Windows driver and need some SEH code.\r\nThese codes are implemented in C as follows:\r\n```c\r\n\tdo {\r\n\r\n\t\t__try {\r\n\t\t\tProbeForWrite(address, length, 1);\r\n\t\t\tbreak;\r\n\t\t} __except (1) {\r\n\t\t\tif (GetExceptionCode() == STATUS_GUARD_PAGE_VIOLATION) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t} while (true);\r\n\r\n\treturn true;\r\n```\r\nCompile this C code with the Microsoft compiler\r\n```asm\r\n.text:00407700 ; __unwind { // __except_handler4\r\n.text:00407700                 push    ebp\r\n.text:00407701                 mov     ebp, esp\r\n.text:00407703                 push    0FFFFFFFEh\r\n.text:00407705                 push    offset stru_422C70\r\n.text:0040770A                 push    offset __except_handler4\r\n.text:0040770F                 mov     eax, large fs:0\r\n.text:00407715                 push    eax\r\n.text:00407716                 add     esp, 0FFFFFFF0h\r\n.text:00407719                 push    ebx\r\n.text:0040771A                 push    esi\r\n.text:0040771B                 push    edi\r\n.text:0040771C                 mov     eax, ___security_cookie\r\n.text:00407721                 xor     [ebp+ms_exc.registration.ScopeTable], eax\r\n.text:00407724                 xor     eax, ebp\r\n.text:00407726                 push    eax\r\n.text:00407727                 lea     eax, [ebp+ms_exc.registration]\r\n.text:0040772A                 mov     large fs:0, eax\r\n.text:00407730                 mov     [ebp+ms_exc.old_esp], esp\r\n.text:00407733\r\n.text:00407733 loc_407733:                             ; CODE XREF: validate_writable_user_addr(x,x)+A2\u2193j\r\n.text:00407733 ;   __try { // __except at $LN10_1\r\n.text:00407733                 mov     [ebp+ms_exc.registration.TryLevel], 0\r\n.text:0040773A                 push    1               ; Alignment\r\n.text:0040773C                 mov     eax, [ebp+length]\r\n.text:0040773F                 push    eax             ; Length\r\n.text:00407740                 mov     ecx, [ebp+address]\r\n.text:00407743                 push    ecx             ; Address\r\n.text:00407744                 call    ds:__imp__ProbeForWrite@12 ; ProbeForWrite(x,x,x)\r\n.text:00407744 ;   } // starts at 407733\r\n.text:0040774A                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh\r\n.text:00407751                 jmp     short loc_4077A4\r\n.text:00407753 ; ---------------------------------------------------------------------------\r\n.text:00407753                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh\r\n.text:0040775A                 jmp     short loc_40779B\r\n.text:0040775C ; ---------------------------------------------------------------------------\r\n.text:0040775C\r\n.text:0040775C $LN9_1:                                 ; DATA XREF: .rdata:stru_422C70\u2193o\r\n.text:0040775C ;   __except filter // owned by 407733\r\n.text:0040775C                 mov     edx, [ebp+ms_exc.exc_ptr]\r\n.text:0040775F                 mov     eax, [edx]\r\n.text:00407761                 mov     ecx, [eax]\r\n.text:00407763                 mov     [ebp+var_1C], ecx\r\n.text:00407766                 mov     eax, 1\r\n.text:0040776B\r\n.text:0040776B $LN11_2:\r\n.text:0040776B                 retn\r\n.text:0040776C ; ---------------------------------------------------------------------------\r\n.text:0040776C\r\n.text:0040776C $LN10_1:                                ; DATA XREF: .rdata:stru_422C70\u2193o\r\n.text:0040776C ;   __except($LN9_1) // owned by 407733\r\n.text:0040776C                 mov     esp, [ebp+ms_exc.old_esp]\r\n.text:0040776F                 cmp     [ebp+var_1C], 80000001h\r\n.text:00407776                 jnz     short loc_407781\r\n.text:00407778                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh\r\n.text:0040777F                 jmp     short loc_40779B\r\n.text:00407781 ; ---------------------------------------------------------------------------\r\n.text:00407781\r\n.text:00407781 loc_407781:                             ; CODE XREF: validate_writable_user_addr(x,x)+76\u2191j\r\n.text:00407781                 mov     [ebp+var_20], 0\r\n.text:00407788                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh\r\n.text:0040778F                 mov     eax, [ebp+var_20]\r\n.text:00407792                 jmp     short loc_4077A9\r\n.text:00407794 ; ---------------------------------------------------------------------------\r\n.text:00407794                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh\r\n.text:0040779B\r\n.text:0040779B loc_40779B:                             ; CODE XREF: validate_writable_user_addr(x,x)+5A\u2191j\r\n.text:0040779B                                         ; validate_writable_user_addr(x,x)+7F\u2191j\r\n.text:0040779B                 mov     edx, 1\r\n.text:004077A0                 test    edx, edx\r\n.text:004077A2                 jnz     short loc_407733\r\n.text:004077A4\r\n.text:004077A4 loc_4077A4:                             ; CODE XREF: validate_writable_user_addr(x,x)+51\u2191j\r\n.text:004077A4                 mov     eax, 1\r\n.text:004077A9\r\n.text:004077A9 loc_4077A9:                             ; CODE XREF: validate_writable_user_addr(x,x)+92\u2191j\r\n.text:004077A9                 mov     ecx, [ebp+ms_exc.registration.Next]\r\n.text:004077AC                 mov     large fs:0, ecx\r\n.text:004077B3                 pop     ecx\r\n.text:004077B4                 pop     edi\r\n.text:004077B5                 pop     esi\r\n.text:004077B6                 pop     ebx\r\n.text:004077B7                 mov     esp, ebp\r\n.text:004077B9                 pop     ebp\r\n.text:004077BA                 retn    8\r\n.text:004077BA ; } // starts at 407700\r\n```\r\nI am now going to use rust instead of C to write windows drivers.\r\nHow should I generate similar code with rust?\r\nThanks", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64571/timeline", "performed_via_github_app": null, "state_reason": "completed"}