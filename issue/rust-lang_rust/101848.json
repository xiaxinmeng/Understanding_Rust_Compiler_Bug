{"url": "https://api.github.com/repos/rust-lang/rust/issues/101848", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101848/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101848/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101848/events", "html_url": "https://github.com/rust-lang/rust/issues/101848", "id": 1374306470, "node_id": "I_kwDOAAsO6M5R6kCm", "number": 101848, "title": "feature `bigint_helper_methods`: use of signed `carrying_add` is not clear", "user": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-15T10:33:23Z", "updated_at": "2022-09-15T11:13:45Z", "closed_at": "2022-09-15T11:13:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Carrying addition is aimed at bigint helpers, but currently `carrying_add` seems to confuse carry with signed-overflow. For unsigned numbers, carry and overflow are pretty much equivalent, but not for signed.\r\n\r\nFor example, consider 127 + 10 in `i16`. It should result in 137 with no overflows and no carries. However if we break it up into two 8-bit additions, we should first get (127 + 10 carry in 0) = (137 carry out 0), and then (0 + 0 carry in 0) = (0 carry out 0). That is the lowest half should be 137 and the highest half should be 0. Although 137 would overflow in signed `i8`, it should *not* generate a carry.\r\n\r\nThe current implementation returns a carry anyway, breaking the following code which is I think the use case of these methods in the first place.\r\n\r\n```rust\r\n#![feature(bigint_helper_methods)]\r\n\r\nfn to_lo_hi(a: i16) -> (i8, i8) {\r\n    let lo = a as i8;\r\n    let hi = (a >> 8) as i8;\r\n    (lo, hi)\r\n}\r\n\r\nfn from_lo_hi(lo: i8, hi: i8) -> i16 {\r\n    let l = (lo as i16) & 0xFF;\r\n    let h = (hi as i16) << 8;\r\n    l | h\r\n}\r\n\r\nlet a = 127i16;\r\nlet b = 10i16;\r\nlet x = a + b;\r\n\r\nlet (a0, a1) = to_lo_hi(a);\r\nlet (b0, b1) = to_lo_hi(b);\r\n\r\nlet c0 = false;\r\nlet (x0, c1) = a0.carrying_add(b0, c0);\r\n// c1 should be false but current implementation returns true\r\nlet (x1, c2) = a1.carrying_add(b1, c1);\r\n// which results in non-zero x1\r\n\r\n// This assertion currently fails.\r\nassert_eq!(from_lo_hi(x0, x1), x);\r\n```\r\n\r\nSigned `borrowing_sub` has the same issue.", "closed_by": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101848/timeline", "performed_via_github_app": null, "state_reason": "completed"}