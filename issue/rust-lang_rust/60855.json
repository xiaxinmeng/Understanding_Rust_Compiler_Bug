{"url": "https://api.github.com/repos/rust-lang/rust/issues/60855", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60855/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60855/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60855/events", "html_url": "https://github.com/rust-lang/rust/issues/60855", "id": 444529956, "node_id": "MDU6SXNzdWU0NDQ1Mjk5NTY=", "number": 60855, "title": "Should improper_ctypes pierce through impl Trait?", "user": {"login": "hanna-kruppe", "id": 2311707, "node_id": "MDQ6VXNlcjIzMTE3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2311707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hanna-kruppe", "html_url": "https://github.com/hanna-kruppe", "followers_url": "https://api.github.com/users/hanna-kruppe/followers", "following_url": "https://api.github.com/users/hanna-kruppe/following{/other_user}", "gists_url": "https://api.github.com/users/hanna-kruppe/gists{/gist_id}", "starred_url": "https://api.github.com/users/hanna-kruppe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hanna-kruppe/subscriptions", "organizations_url": "https://api.github.com/users/hanna-kruppe/orgs", "repos_url": "https://api.github.com/users/hanna-kruppe/repos", "events_url": "https://api.github.com/users/hanna-kruppe/events{/privacy}", "received_events_url": "https://api.github.com/users/hanna-kruppe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 178802147, "node_id": "MDU6TGFiZWwxNzg4MDIxNDc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-needs-decision", "name": "I-needs-decision", "color": "e11d21", "default": false, "description": "Issues in need of decision."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-15T16:20:24Z", "updated_at": "2020-06-28T12:19:12Z", "closed_at": "2020-06-28T12:19:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While reviewing #60300 I noticed for the first time that the improper_ctypes lint normalizes with the \"reveal_all\" mode. I don't have a nuanced understanding of what that means exactly but based on the general description in the rustc docs and experimentation (see below) I think that's probably the wrong choice for this lint, because it exposes details to the user that are normally hidden during type checking.\r\n\r\nFor example, [in this program](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=76fdb36dcf516354a400647c26b64e87) using existential types, the lint pierces through otherwise-opaque existentials to look at the underlying (hidden) type, thus it both\r\n\r\n- accepts code that is only FFI-safe because of the particular type underlying the existential, which users of that type shouldn't know or rely on\r\n- leaks the underlying type to the user in error messages when (correctly) rejecting uses of an existential type as FFI-unsafe\r\n\r\nI can't quickly find an equivalent using only stable `impl Trait`, because we don't have `typeof(function)`, but if there's a way to write \"Option of the return type of this function\" in stable Rust, then that would presumably have the same issue.\r\n\r\n\r\ncc @eddyb for fact-checking my understanding that this is because of reveal_all", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60855/timeline", "performed_via_github_app": null, "state_reason": "completed"}