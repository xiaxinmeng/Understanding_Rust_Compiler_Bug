{"url": "https://api.github.com/repos/rust-lang/rust/issues/71708", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71708/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71708/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71708/events", "html_url": "https://github.com/rust-lang/rust/issues/71708", "id": 609970759, "node_id": "MDU6SXNzdWU2MDk5NzA3NTk=", "number": 71708, "title": "diagnostic: rustc points to wrong type parameters in error message", "user": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-30T13:14:55Z", "updated_at": "2020-04-30T13:42:25Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In some generic code \r\n\r\nhttps://github.com/yaahc/errtools/commit/bac775562e3450ac085b33dab3b7d35d2b12dc46\r\n\r\nI encountered an error that I expected, but a diagnostic that I did not. Specifically I have a trait like this,\r\n\r\n```rust\r\npub trait WrapErr<T, E, E2> {\r\n    // ...\r\n\r\n    /// Wrap the error value with a new adhoc error that is evaluated lazily\r\n    /// only once an error does occur.\r\n    fn wrap_err_with<D, F>(self, f: F) -> Result<T, E2>\r\n    where\r\n        D: Display + Send + Sync + 'static,\r\n        E2: From<(E, String)>,\r\n        F: FnOnce() -> D;\r\n}\r\n```\r\n\r\nAnd I was testing this with an error kind pattern where I knew it wouldn't be able to infer the inner error type because only the outer error type is in the signature.\r\n\r\n```rust\r\n#[derive(Error, Debug)]\r\nenum PrivateKind {\r\n    #[error(\"{msg}\")]\r\n    Variant1 {\r\n        source: Box<dyn Error + Send + Sync + 'static>,\r\n        msg: String,\r\n    },\r\n}\r\n\r\n#[derive(Error, Debug)]\r\n#[error(transparent)]\r\nstruct PublicErrorStruct {\r\n    #[from]\r\n    source: PrivateKind,\r\n}\r\n\r\nfn do_thing(path: &str) -> Result<String, PublicErrorStruct> {\r\n    let s = std::fs::read_to_string(path)\r\n        .wrap_err_with(|| format!(\"unable to read file from path: {}\", path))?;\r\n\r\n    Ok(s)\r\n}\r\n```\r\n\r\nHowever, when `wrap_err_with` actually produced a \"type annotation needed error it unhelpfully pointed to the generic parameters on the function, rather than the parameters \"on the trait.\r\n\r\n![Screenshot from 2020-04-30 06-10-04](https://user-images.githubusercontent.com/1993852/80714443-cc4e2180-8aa9-11ea-9d49-01f58be09324.png)\r\n\r\nIf possible I think the compiler should attempt to pinpoint _which_ generic parameter needs a type annotation and make sure it points to the list where that parameter was declared, in this case it should point specifically to `E2`.\r\n\r\ncc @estebank ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71708/timeline", "performed_via_github_app": null, "state_reason": null}