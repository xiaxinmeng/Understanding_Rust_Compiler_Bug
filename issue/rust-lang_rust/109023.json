{"url": "https://api.github.com/repos/rust-lang/rust/issues/109023", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109023/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109023/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109023/events", "html_url": "https://github.com/rust-lang/rust/issues/109023", "id": 1620076862, "node_id": "I_kwDOAAsO6M5gkGk-", "number": 109023, "title": "very slow `type_check_crate` stage after error is already thrown", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 630799571, "node_id": "MDU6TGFiZWw2MzA3OTk1NzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compilemem", "name": "I-compilemem", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to memory usage during compilation."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-11T17:03:56Z", "updated_at": "2023-03-11T20:08:09Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "````rust\r\n// check-pass\r\n\r\npub fn yes_vec_partial_eq_array<A, B>() -> impl\r\nwhere\r\n    A: PartialEq<B>,\r\n{\r\n    Vec::<A>::new()\r\n}\r\n\r\npub fn yes_vec_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 32]>\r\nwhere\r\n    A: PartialEq<B>,\r\n{\r\n    Vec::<&'a mut [B; 32]>::new()\r\n}\r\n\r\npub fn yes_array_into_vec<T>() -> Vec<T> {\r\n    [].into()\r\n}\r\n\r\npub fn yes_array_into_box<T>() -> Box<[T]> {\r\n    []\r\n}\r\n\r\nuse std::collections::VecDeque;\r\n\r\npub fn yes_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<B>\r\nwhere\r\n    A: PartialEq<B>,\r\n{\r\n    VecDeque   ::<&'a mut [B; 32]>::new()\r\n}\r\n\r\npub fn yes_vecdeque_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 32]>\r\nwhere\r\n    A: PartialEq<B>,\r\n{\r\n    VecDeque::<&'a mut [B; 32]>::new()\r\n}\r\n\r\npub fn yes_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq<&'a mut [B; 32]>\r\nwhere\r\n    A: PartialEq<[B; 32]>,\r\n{\r\n    VecDeque::<&'a mut [B; 32]>::new()\r\n}\r\n\r\nfn main() {}\r\n````\r\n\r\nZtime-passes output\r\n\r\n````\r\ntime:   0.001; rss:   45MB ->   49MB (   +4MB)\tparse_crate\r\ntime:   0.004; rss:   53MB ->   69MB (  +16MB)\texpand_crate\r\ntime:   0.004; rss:   53MB ->   69MB (  +16MB)\tmacro_expand_crate\r\nerror: at least one trait must be specified\r\n --> /home/matthias/vcs/github/rust6_omni/74/747e8d427cd8043eab8193a8549a36a531ad0563.rs:3:44\r\n  |\r\n3 | pub fn yes_vec_partial_eq_array<A, B>() -> impl\r\n  |                                            ^^^^\r\n\r\ntime:   0.005; rss:   69MB ->   73MB (   +4MB)\tAST_validation\r\nerror[E0261]: use of undeclared lifetime name `'a`\r\n  --> /home/matthias/vcs/github/rust6_omni/74/747e8d427cd8043eab8193a8549a36a531ad0563.rs:31:20\r\n   |\r\n27 | pub fn yes_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<B>\r\n   |                                      - help: consider introducing lifetime `'a` here: `'a,`\r\n...\r\n31 |     VecDeque   ::<&'a mut [B; 32]>::new()\r\n   |                    ^^ undeclared lifetime\r\n\r\ntime:   0.001; rss:   73MB ->   76MB (   +3MB)\tlate_resolve_crate\r\ntime:   0.002; rss:   73MB ->   76MB (   +3MB)\tresolve_crate\r\ntime:   0.001; rss:   76MB ->   80MB (   +4MB)\tmisc_checking_1\r\ntime:   0.001; rss:   80MB ->   85MB (   +4MB)\twf_checking\r\nerror[E0277]: can't compare `&mut [B; 32]` with `B`\r\n  --> /home/matthias/vcs/github/rust6_omni/74/747e8d427cd8043eab8193a8549a36a531ad0563.rs:10:52\r\n   |\r\n10 | pub fn yes_vec_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 32]>\r\n   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `&mut [B; 32] == B`\r\n   |\r\n   = help: the trait `PartialEq<B>` is not implemented for `&mut [B; 32]`\r\n   = note: required for `Vec<&mut [B; 32]>` to implement `PartialEq<&'a [B; 32]>`\r\nhelp: consider extending the `where` clause, but there might be an alternative better way to express this requirement\r\n   |\r\n12 |     A: PartialEq<B>, &mut [B; 32]: PartialEq<B>\r\n   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nerror[E0277]: can't compare `VecDeque<&mut [B; 32]>` with `B`\r\n  --> /home/matthias/vcs/github/rust6_omni/74/747e8d427cd8043eab8193a8549a36a531ad0563.rs:27:49\r\n   |\r\n27 | pub fn yes_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<B>\r\n   |                                                 ^^^^^^^^^^^^^^^^^ no implementation for `VecDeque<&mut [B; 32]> == B`\r\n...\r\n31 |     VecDeque   ::<&'a mut [B; 32]>::new()\r\n   |     ------------------------------------- return type was inferred to be `VecDeque<&mut [B; 32]>` here\r\n   |\r\n   = help: the trait `PartialEq<B>` is not implemented for `VecDeque<&mut [B; 32]>`\r\nhelp: consider extending the `where` clause, but there might be an alternative better way to express this requirement\r\n   |\r\n29 |     A: PartialEq<B>, VecDeque<&mut [B; 32]>: PartialEq<B>\r\n   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nerror[E0277]: can't compare `&mut [B; 32]` with `B`\r\n  --> /home/matthias/vcs/github/rust6_omni/74/747e8d427cd8043eab8193a8549a36a531ad0563.rs:34:57\r\n   |\r\n34 | pub fn yes_vecdeque_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 32]>\r\n   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `&mut [B; 32] == B`\r\n   |\r\n   = help: the trait `PartialEq<B>` is not implemented for `&mut [B; 32]`\r\n   = note: required for `VecDeque<&mut [B; 32]>` to implement `PartialEq<&'a [B; 32]>`\r\nhelp: consider extending the `where` clause, but there might be an alternative better way to express this requirement\r\n   |\r\n36 |     A: PartialEq<B>, &mut [B; 32]: PartialEq<B>\r\n   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nerror[E0277]: can't compare `&mut [B; 32]` with `B`\r\n  --> /home/matthias/vcs/github/rust6_omni/74/747e8d427cd8043eab8193a8549a36a531ad0563.rs:41:61\r\n   |\r\n41 | pub fn yes_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq<&'a mut [B; 32]>\r\n   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `&mut [B; 32] == B`\r\n   |\r\n   = help: the trait `PartialEq<B>` is not implemented for `&mut [B; 32]`\r\n   = note: required for `VecDeque<&mut [B; 32]>` to implement `PartialEq<&'a mut [B; 32]>`\r\nhelp: consider extending the `where` clause, but there might be an alternative better way to express this requirement\r\n   |\r\n43 |     A: PartialEq<[B; 32]>, &mut [B; 32]: PartialEq<B>\r\n   |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\ntime: 120.775; rss:   85MB -> 2445MB (+2360MB)\titem_types_checking\r\nerror[E0308]: mismatched types\r\n  --> /home/matthias/vcs/github/rust6_omni/74/747e8d427cd8043eab8193a8549a36a531ad0563.rs:22:5\r\n   |\r\n21 | pub fn yes_array_into_box<T>() -> Box<[T]> {\r\n   |                                   -------- expected `Box<[T]>` because of return type\r\n22 |     []\r\n   |     ^^ expected `Box<[T]>`, found `[_; 0]`\r\n   |\r\n   = note: expected struct `Box<[T]>`\r\n               found array `[_; 0]`\r\n   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\r\nhelp: store this in the heap by calling `Box::new`\r\n   |\r\n22 |     Box::new([])\r\n   |     +++++++++  +\r\n\r\ntime:   0.007; rss: 2445MB -> 2455MB (  +10MB)\titem_bodies_checking\r\ntime: 120.784; rss:   80MB -> 2455MB (+2375MB)\ttype_check_crate\r\ntime:   0.093; rss: 2455MB ->  230MB (-2225MB)\tfree_global_ctxt\r\nerror: aborting due to 7 previous errors\r\n\r\nSome errors have detailed explanations: E0261, E0277, E0308.\r\nFor more information about an error, try `rustc --explain E0261`.\r\ntime: 120.907; rss:   35MB ->   97MB (  +63MB)\ttotal\r\n````\r\n\r\nrustc keeps crunching on it, probably to get further diagnostics. Also note the almost 2.5 gb of memory needed, probably some recursive blowup? :thinking: ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109023/timeline", "performed_via_github_app": null, "state_reason": null}