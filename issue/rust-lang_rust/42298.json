{"url": "https://api.github.com/repos/rust-lang/rust/issues/42298", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42298/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42298/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42298/events", "html_url": "https://github.com/rust-lang/rust/issues/42298", "id": 232053485, "node_id": "MDU6SXNzdWUyMzIwNTM0ODU=", "number": 42298, "title": "Remove all occurrences of \"DepNode re-opening\"", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-29T15:39:21Z", "updated_at": "2017-08-04T22:35:26Z", "closed_at": "2017-08-04T22:35:26Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In order for the new [red/green dependency tracking](https://github.com/rust-lang/rust/issues/42293) to work and for our compiler developers' sanity, we need incremental compilation's dependency graph to not contain any cycles. Since `DepGraph::write()` has been removed in #42192, we are close to guaranteeing this \"by construction\". The only other way of introducing cycles into the dependency graph is by \"re-opening\" a node:\r\n```rust\r\n// Allocate DepNode::A\r\ndep_graph.with_task(DepNode::A, tcx, (), || {\r\n   // ...\r\n});\r\n\r\n// Allocate DepNode::B and add edge B -> A\r\ndep_graph.with_task(DepNode::B, tcx, (), || {\r\n    dep_graph.read(DepNode::A);\r\n});\r\n\r\n// Re-open DepNode::A and add edge A -> B\r\ndep_graph.with_task(DepNode::A, tcx, (), || {\r\n    dep_graph.read(DepNode::B);\r\n});\r\n```\r\n\r\nCurrently, re-opening is needed for supporting `DepNode` merging: Many tasks share the same `DepNode`. For example, `DepNode::ItemSignature` is used for [many things](https://github.com/rust-lang/rust/blob/03bed655142dd5e42ba4539de53b3663d8a123e0/src/librustc/ty/maps.rs#L748-L761) that conceptually are part of an item's signature. Another example is trait selection where we don't want to track at full accuracy since that would cause too much overhead. \r\n\r\nThere are three basic ways of avoiding node re-opening:\r\n1. Make the `DepNode` fully accurate so that two distinct tasks use two distinct `DepNodes` instead of using the same one. This increases tracking overhead.\r\n2. Merge tasks so that there's just one task that computes all results corresponding to a given `DepNode`. This decreases laziness since not all parts of a result might be needed. It might also lead to result with many `Option` fields in them because some parts of it are only valid for a subset of query keys (e.g. `impl_trait_ref` is only valid for trait impls but if it was part of a larger `item_signature` query, we would have to provide it for any kind of item that has a signature).\r\n3. Use the yet-to-be-implemented \"anonymous\" `DepNodes` which allows node merging in a safe way that keeps the graph free of cycles. Anonymous nodes can only be used for things the result of which we do not cache and using them is slightly more expensive than using a regular node.\r\n\r\n`DepNode` kinds that will need un-merging are the following (in addition to others probably):\r\n```\r\n// All of these queries use DepNode::ItemSignature\r\ntype_of: ItemSignature(DefId) -> Ty<'tcx>,\r\ngenerics_of: ItemSignature(DefId) -> &'tcx ty::Generics,\r\npredicates_of: ItemSignature(DefId) -> ty::GenericPredicates<'tcx>,\r\nsuper_predicates_of: ItemSignature(DefId) -> ty::GenericPredicates<'tcx>,\r\ntrait_def: ItemSignature(DefId) -> &'tcx ty::TraitDef,\r\nadt_def: ItemSignature(DefId) -> &'tcx ty::AdtDef,\r\nimpl_trait_ref: ItemSignature(DefId) -> Option<ty::TraitRef<'tcx>>,\r\nimpl_polarity: ItemSignature(DefId) -> hir::ImplPolarity,\r\nclosure_kind: ItemSignature(DefId) -> ty::ClosureKind,\r\nclosure_type: ItemSignature(DefId) -> ty::PolyFnSig<'tcx>,\r\ncoerce_unsized_info: ItemSignature(DefId) -> ty::adjustment::CoerceUnsizedInfo,\r\n\r\n// All of these queries use DepNode::Mir(DefId)\r\nmir_const_qualif: Mir(DefId) -> u8,\r\nmir_const: Mir(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\r\nmir_validated: Mir(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\r\noptimized_mir: Mir(DefId) -> &'tcx mir::Mir<'tcx>,\r\n\r\n\r\n// These queries use DepNode::TypeckTables(DefId)\r\ntypeck_tables_of: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\r\nhas_typeck_tables: TypeckTables(DefId) -> bool,\r\n\r\n// These both use DepNode::Coherence\r\ncrate_inherent_impls: crate_inherent_impls_dep_node(CrateNum) -> CrateInherentImpls,\r\ncrate_inherent_impls_overlap_check: crate_inherent_impls_dep_node(CrateNum) -> (),\r\n\r\n// const_eval uses one DepNode::ConstEval for all consts with the same DefId\r\nconst_eval: const_eval_dep_node((DefId, &'tcx Substs<'tcx>)) -> const_val::EvalResult<'tcx>,\r\n\r\n// There's only one DepNode::SymbolName although there are can be \r\n// many different symbol names because of monomorphization\r\ndef_symbol_name: SymbolName(DefId) -> ty::SymbolName,\r\nsymbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,\r\n\r\n// DepNode::TraitImpls(DefId)\r\ntrait_impls_of: TraitImpls(DefId) -> ty::trait_def::TraitImpls,\r\nrelevant_trait_impls_for: relevant_trait_impls_for((DefId, SimplifiedType)) -> ty::trait_def::TraitImpls,\r\n```\r\n\r\nThere's also `TransTraitCaches` which still uses `DepTrackingMap` directly.\r\n\r\nIt remains to be clarified which strategy to use exactly in which case.\r\n\r\ncc @nikomatsakis and @eddyb ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42298/timeline", "performed_via_github_app": null, "state_reason": "completed"}