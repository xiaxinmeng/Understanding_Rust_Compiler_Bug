{"url": "https://api.github.com/repos/rust-lang/rust/issues/85121", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85121/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85121/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85121/events", "html_url": "https://github.com/rust-lang/rust/issues/85121", "id": 882764324, "node_id": "MDU6SXNzdWU4ODI3NjQzMjQ=", "number": 85121, "title": "Document error suppression in standard stream & move upstack", "user": {"login": "masklinn", "id": 6993, "node_id": "MDQ6VXNlcjY5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masklinn", "html_url": "https://github.com/masklinn", "followers_url": "https://api.github.com/users/masklinn/followers", "following_url": "https://api.github.com/users/masklinn/following{/other_user}", "gists_url": "https://api.github.com/users/masklinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/masklinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masklinn/subscriptions", "organizations_url": "https://api.github.com/users/masklinn/orgs", "repos_url": "https://api.github.com/users/masklinn/repos", "events_url": "https://api.github.com/users/masklinn/events{/privacy}", "received_events_url": "https://api.github.com/users/masklinn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-09T20:24:32Z", "updated_at": "2023-02-21T06:57:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Background\r\n\r\nThis is a long-standing issue related to rust-lang/rfcs#1014 \"Don't panic when stdout doesn't exist\" ([rendered](https://github.com/retep998/rfcs/blob/println/0000-stdout-existential-crisis.md)), implemented in #25977\r\n\r\nThe RFC aimed to make the \"convenience macros\" writing to stdout/stderr not panic in case of a non-existing or closed standard stream.\r\n\r\n## Issues\r\n\r\nNone of the convenience macros actually documents this error suppression. All of them claim that they panic on write errors which is sort-of true from their internal perspective but not really from the user's.\r\n\r\nMore annoyingly, because of the way it was implemented, not only do convenience macros not error anymore (which was intended), the error-reporting macros don't get the errors either: the actual stream was wrapped in a `Maybe` which converts `EBADF` / `ERROR_INVALID_HANDLE` to a success, as well as the stream being missing entirely (on Windows). \r\n \r\nDirect usage of `write!` or `Write` methods on standard streams would indicate a desire to be notified of and handle errors, including (and possibly especially) the standard streams being closed or full. But currently in order to get that information on Unices it's necessary to notice that this information is not delivered, and re-create the standard stream using the relevant raw fds. This is unexpected, and not exactly consistent I feel.\r\n\r\n## Possible solution\r\n\r\n* document the error suppression on the relevant macros\r\n* move the error suppression outside of the stream objects\r\n  - make a missing stream bubble up a sensible-ish synthetic error code on windows?\r\n\r\n## Alternate solution\r\n\r\nDon't touch anything but document the behaviour clearly on the standard stream pages.\r\n\r\n## Aside\r\n\r\n`EPIPE` and `ENOSPC` are somewhat oddly *not* suppressed in the same conditions, despite the logical failure and issues being similar to `EBADF` (when  writing to a closed pipe), cf #57931, #82791\r\n\r\n## Related issues\r\n\r\n#83904\r\n#47271", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85121/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85121/timeline", "performed_via_github_app": null, "state_reason": null}