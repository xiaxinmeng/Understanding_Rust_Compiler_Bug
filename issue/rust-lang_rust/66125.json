{"url": "https://api.github.com/repos/rust-lang/rust/issues/66125", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66125/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66125/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66125/events", "html_url": "https://github.com/rust-lang/rust/issues/66125", "id": 517931144, "node_id": "MDU6SXNzdWU1MTc5MzExNDQ=", "number": 66125, "title": "Errors for `if` and `match` in a `const` are not descriptive", "user": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}, {"id": 1659943986, "node_id": "MDU6TGFiZWwxNjU5OTQzOTg2", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-verbose", "name": "D-verbose", "color": "c9f7a3", "default": false, "description": "Too much output caused by a single piece of incorrect code"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-05T17:50:17Z", "updated_at": "2019-11-13T23:21:54Z", "closed_at": "2019-11-13T23:21:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following code ([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2d4af205242a4c80824f654cec288b85)):\r\n\r\n```rust\r\nconst _: i32 = match 1 {\r\n    2 => 3,\r\n    4 => 5,\r\n    _ => 0,\r\n};\r\n\r\nconst _: i32 = if true {\r\n    4\r\n} else {\r\n    5\r\n};\r\n```\r\n\r\nThis is not valid today, since `if` and `match` are forbidden in constants. That restriction can be lifted soon on nightly, so we would like to emit good errors that point the user to the offending code and suggest a feature gate if it would help.\r\n\r\nHowever, the errors emitted by the nightly compiler are not great:\r\n\r\n```text\r\nerror[E0019]: constant contains unimplemented expression type\r\n --> src/lib.rs:1:22\r\n  |\r\n1 | const _: i32 = match 1 {\r\n  |                      ^\r\n\r\nerror[E0019]: constant contains unimplemented expression type\r\n --> src/lib.rs:2:5\r\n  |\r\n2 |     2 => 3,\r\n  |     ^\r\n\r\nerror[E0019]: constant contains unimplemented expression type\r\n --> src/lib.rs:7:19\r\n  |\r\n7 | const _: i32 = if true {\r\n  |                   ^^^^\r\n\r\nerror[E0019]: constant contains unimplemented expression type\r\n  --> src/lib.rs:7:16\r\n   |\r\n7  |   const _: i32 = if true {\r\n   |  ________________^\r\n8  | |     4\r\n9  | | } else {\r\n10 | |     5\r\n11 | | };\r\n   | |_^\r\n\r\nerror: aborting due to 4 previous errors\r\n```\r\n\r\nAt present, each `const` has two errors associated with it. One is triggered by the `FakeRead` emitted for the borrow checker and points to the value being branched on (`1` and `true`) respectively. The other is triggered by the `SwitchInt` terminator itself. While the span of this error is good for the `if` (it points to the whole `if-else` construct), it is very confusing for the `match`, where it points to the pattern in the first match arm despite the `SwitchInt` handling all arms simultaneously.\r\n\r\nI've thought a bit about how to improve this, but I don't have a great solution. I'm hoping someone can help. I don't think we want to rely only on the presence of `FakeRead` to reject branchy code in a `const`; `SwitchInt` seems like the natural candidate (maybe with a fallback to `FakeRead` to detect single-arm `match` statements). However, I don't know how to improve the span for the [`SwitchInt` for the `match`](https://github.com/rust-lang/rust/blob/3a1b3b30c6cdd674049b144a3ced7b711de962b2/src/librustc_mir/build/matches/test.rs#L43), or if doing so would cause other diagnostics to regress.\r\n\r\nI think the ideal approach would be to check for this at the HIR or AST level. This would give us very precise spans, and we could continue checking for `SwitchInt` in the MIR to make sure the high-level check didn't miss anything. Is this feasible?", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66125/timeline", "performed_via_github_app": null, "state_reason": "completed"}