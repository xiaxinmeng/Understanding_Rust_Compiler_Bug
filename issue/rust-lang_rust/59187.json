{"url": "https://api.github.com/repos/rust-lang/rust/issues/59187", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59187/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59187/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59187/events", "html_url": "https://github.com/rust-lang/rust/issues/59187", "id": 421155058, "node_id": "MDU6SXNzdWU0MjExNTUwNTg=", "number": 59187, "title": "Cannot pass small struct by value across FFI on linux-gnu", "user": {"login": "hu-a", "id": 48420747, "node_id": "MDQ6VXNlcjQ4NDIwNzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/48420747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hu-a", "html_url": "https://github.com/hu-a", "followers_url": "https://api.github.com/users/hu-a/followers", "following_url": "https://api.github.com/users/hu-a/following{/other_user}", "gists_url": "https://api.github.com/users/hu-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/hu-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hu-a/subscriptions", "organizations_url": "https://api.github.com/users/hu-a/orgs", "repos_url": "https://api.github.com/users/hu-a/repos", "events_url": "https://api.github.com/users/hu-a/events{/privacy}", "received_events_url": "https://api.github.com/users/hu-a/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123110, "node_id": "MDU6TGFiZWwxMjMxMTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-linux", "name": "O-linux", "color": "6e6ec0", "default": false, "description": "Operating system: Linux"}, {"id": 55302148, "node_id": "MDU6TGFiZWw1NTMwMjE0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86_64", "name": "O-x86_64", "color": "6e6ec0", "default": false, "description": "Target: x64 processors"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-14T17:34:14Z", "updated_at": "2019-05-19T20:26:59Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I am creating an FFI function that takes a tagged union as a parameter. It corresponds to a Rust enum with variant. The tagged union definition for the C++ code was generated with `cbindgen`. The problem is that the calling convention between Rust's `extern \"C\"` and the actual C calling convention aren't matching up, so it gets faulty values for the argument.\r\n\r\nThis looks like it's similar to #5744.\r\n\r\nI tried this code:\r\n\r\nRust:\r\n\r\n```rust\r\n#[repr(C)]\r\n#[no_mangle]\r\npub enum SLCArgs {\r\n  Add(*const c_char), // borrowed\r\n  Count,\r\n  Print,\r\n}\r\n\r\n#[no_mangle]\r\n// works if changed to extern \"Rust\"\r\npub unsafe extern \"C\" fn StringListContainer_do(slc_p : *mut StringListContainer, m : SLCArgs) {\r\n  let slc = &mut *(slc_p);\r\n  match m {\r\n    SLCArgs::Count => println!(\"{}\", slc.Count()),\r\n    SLCArgs::Add(cstr) => StringListContainer_Add(slc_p, cstr),\r\n    SLCArgs::Print => slc.print(),\r\n  }\r\n} \r\n```\r\n\r\nbindings.h:\r\n```cpp\r\nstruct StringListContainer;\r\n\r\nstruct SLCArgs {\r\n  enum class Tag {\r\n    Add,\r\n    Count,\r\n    Print,\r\n  };\r\n\r\n  struct Add_Body {\r\n    const char *_0;\r\n  };\r\n\r\n  Tag tag;\r\n  union {\r\n    Add_Body add;\r\n  };\r\n};\r\n\r\nextern \"C\" {\r\nvoid StringListContainer_do(StringListContainer *slc_p, SLCArgs m);\r\n//...\r\n} // extern \"C\"\r\n```\r\n\r\nC++:\r\n```cpp\r\nint main() {\r\n  StringListContainer* slc = new_StringListContainer();\r\n\r\n  StringListContainer_do(slc, {SLCArgs::Tag::Add, {\"top text\"}});\r\n  StringListContainer_do(slc, {SLCArgs::Tag::Add, {\"middle text\"}});\r\n  StringListContainer_do(slc, {SLCArgs::Tag::Add, {\"bottom text\"}});\r\n  StringListContainer_do(slc, {SLCArgs::Tag::Count, {}});\r\n  StringListContainer_do(slc, {SLCArgs::Tag::Print, {}});\r\n}\r\n```\r\n\r\nI expected to see this happen: \r\n\r\n```\r\n3\r\ntop text\r\nmiddle text\r\nbottom text\r\n```\r\n\r\nInstead, this happened: \r\n\r\nIt prints nothing out because Rust believes that the struct was placed in the argument build area of the stack, just above the return address. In reality, since this is a small struct, it was placed in the second and third registers `%rsi` `%rdx`. \r\n\r\n[According to this interpretation](https://cs61.seas.harvard.edu/site/2018/Asm2/) of the System V AMD64 ABI, structs between 2-4 words are passed sequentially through registers. Although, according to [some experimentation](https://www.godbolt.org/z/GSRD1g), it looks like any struct over 2 words is also passed on the stack.\r\n\r\nLooking at the assembly, the first SLCArgs was initialized on the stack in the argument build area just by chance, so the values that Rust reads when it looks for the struct is `Add(\"top text\")`. However, this happens every time we call `StringListContainer_do`, so we never print anything out, just keep adding the first string.\r\n\r\nHowever, this does work on Windows-MSVC and on Linux-GNU *but only* if you mark StringListContainer_do as `extern \"Rust\"`. Just `extern` and `extern \"C\"` will not work.\r\n\r\nThe repo for this code is [here](https://github.com/andrewhu-uw/rust_rr_test), if that helps\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.33.0 (2aa4c46cf 2019-02-28)\r\nbinary: rustc\r\ncommit-hash: 2aa4c46cfdd726e97360c2734835aa3515e8c858\r\ncommit-date: 2019-02-28\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.33.0\r\nLLVM version: 8.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59187/timeline", "performed_via_github_app": null, "state_reason": null}