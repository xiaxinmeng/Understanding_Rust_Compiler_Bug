{"url": "https://api.github.com/repos/rust-lang/rust/issues/88566", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88566/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88566/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88566/events", "html_url": "https://github.com/rust-lang/rust/issues/88566", "id": 985389308, "node_id": "MDU6SXNzdWU5ODUzODkzMDg=", "number": 88566, "title": "_bzhi_u32/_bzhi_u64 has poor codegen without bmi2 feature", "user": {"login": "mqudsi", "id": 606923, "node_id": "MDQ6VXNlcjYwNjkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqudsi", "html_url": "https://github.com/mqudsi", "followers_url": "https://api.github.com/users/mqudsi/followers", "following_url": "https://api.github.com/users/mqudsi/following{/other_user}", "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions", "organizations_url": "https://api.github.com/users/mqudsi/orgs", "repos_url": "https://api.github.com/users/mqudsi/repos", "events_url": "https://api.github.com/users/mqudsi/events{/privacy}", "received_events_url": "https://api.github.com/users/mqudsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-09-01T17:03:56Z", "updated_at": "2022-07-19T00:00:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As reported [in this article about some issues encountered using simd with rust](https://neosmart.net/blog/2021/using-simd-acceleration-in-rust-to-create-the-worlds-fastest-tac/), calls to `bzhi` intrinsics made without the `bmi2` cpu target feature enabled gives some odd codegen. The `bzhi` instruction isn't emulated and is still executed directly - but the the intrinsic is never inlined resulting in a completely unnecessary function call (which may be in a hot path).\r\n\r\ne.g.\r\n\r\n```rust\r\n#[target_feature(enable = \"avx2\")]\r\npub unsafe fn bzhi(num: u32) -> u32 {\r\n    core::arch::x86_64::_bzhi_u32(num, 31)\r\n}\r\n```\r\n\r\ncompiles to \r\n\r\n```asm\r\ncore::core_arch::x86::bmi2::_bzhi_u32:\r\n        sub     rsp, 4\r\n        bzhi    eax, edi, esi\r\n        mov     dword ptr [rsp], eax\r\n        mov     eax, dword ptr [rsp]\r\n        add     rsp, 4\r\n        ret\r\n\r\nexample::bzhi:\r\n        push    rax\r\n        mov     esi, 31\r\n        call    core::core_arch::x86::bmi2::_bzhi_u32\r\n        mov     dword ptr [rsp + 4], eax\r\n        mov     eax, dword ptr [rsp + 4]\r\n        pop     rcx\r\n        ret\r\n```\r\n\r\n(and this is what it looks like with optimizations enabled when it can't just `jmp` to the intrinsic: [godbolt](https://godbolt.org/z/K5Tso5qzK))\r\n\r\nOther intrinsics get inlined after emulation all the time (e.g. [ctlz](https://godbolt.org/z/cWx68h519)); this one isn't emulated but it's not inlined, either. \r\n\r\nI'm not sure if there's a good reason for this or not, so please pardon me if I'm just missing something obvious. Is it intentional to prevent a `#UD` in some odd cases where the mere presence of the unrecognized instruction, even if not called, is a problem but it can be moved into another function without a problem?\r\n\r\n(Also, it would be *amazing* if we could discuss having a feature like `avx2` unlock guaranteed available (but not synonymous) features like `bmi1` and `bmi2` but this is not the place for that.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88566/timeline", "performed_via_github_app": null, "state_reason": null}