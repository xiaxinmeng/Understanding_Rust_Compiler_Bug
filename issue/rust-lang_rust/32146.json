{"url": "https://api.github.com/repos/rust-lang/rust/issues/32146", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32146/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32146/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32146/events", "html_url": "https://github.com/rust-lang/rust/issues/32146", "id": 139505590, "node_id": "MDU6SXNzdWUxMzk1MDU1OTA=", "number": 32146, "title": "[Question] Can we guarantee that the memory representation of a newtype will be equal to the representation of the type it wraps?", "user": {"login": "mitchmindtree", "id": 4587373, "node_id": "MDQ6VXNlcjQ1ODczNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4587373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitchmindtree", "html_url": "https://github.com/mitchmindtree", "followers_url": "https://api.github.com/users/mitchmindtree/followers", "following_url": "https://api.github.com/users/mitchmindtree/following{/other_user}", "gists_url": "https://api.github.com/users/mitchmindtree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitchmindtree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitchmindtree/subscriptions", "organizations_url": "https://api.github.com/users/mitchmindtree/orgs", "repos_url": "https://api.github.com/users/mitchmindtree/repos", "events_url": "https://api.github.com/users/mitchmindtree/events{/privacy}", "received_events_url": "https://api.github.com/users/mitchmindtree/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-03-09T08:07:43Z", "updated_at": "2018-06-30T00:03:45Z", "closed_at": "2018-06-30T00:03:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "To clarify, given `struct Foo<T>(T);`, can we make the guarantee that `Foo<T>` will have the same memory representation as `T`?\n\nI ask this as I have run into a couple of occasions where I would like to `std::mem::transmute` a slice of `Foo<T>` to a slice of `T` in some hot code.\n\nI performed some tests and `std::mem::size_of` seems to consistently show `Foo<T>` to have the same size as `T`. The code below passes ([playpen link](http://is.gd/KAxFSs)).\n\n``` rust\nstruct Foo<T>(T);\n\nfn assert_eq_size<T>() {\n    assert_eq!(std::mem::size_of::<T>(), std::mem::size_of::<Foo<T>>());\n    assert_eq!(std::mem::size_of::<&T>(), std::mem::size_of::<&Foo<T>>());\n    assert_eq!(std::mem::size_of::<&[T]>(), std::mem::size_of::<&[Foo<T>]>());\n}\n\n#[allow(dead_code)]\nfn main() {\n    assert_eq_size::<i8>();\n    assert_eq_size::<i16>();\n    assert_eq_size::<i32>();\n    assert_eq_size::<i64>();\n    assert_eq_size::<u8>();\n    assert_eq_size::<u16>();\n    assert_eq_size::<u32>();\n    assert_eq_size::<u64>();\n    assert_eq_size::<f32>();\n    assert_eq_size::<f64>();\n    assert_eq_size::<isize>();\n    assert_eq_size::<usize>();\n    assert_eq_size::<bool>();\n    struct Bar { a: i32, b: f64 }\n    assert_eq_size::<Bar>();\n    enum Baz { A(i32), B(usize), C(f64), D(u8) }\n    assert_eq_size::<Baz>();\n    trait Qux {}\n    assert_eq_size::<&Qux>();\n}\n```\n\nThis leaves me wondering, what else might stand in the way? Is the use of `std::mem::transmute` I suggest above a bad idea? If so, why? Any input appreciated!\n", "closed_by": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32146/timeline", "performed_via_github_app": null, "state_reason": "completed"}