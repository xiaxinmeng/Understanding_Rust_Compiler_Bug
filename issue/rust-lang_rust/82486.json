{"url": "https://api.github.com/repos/rust-lang/rust/issues/82486", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82486/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82486/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82486/events", "html_url": "https://github.com/rust-lang/rust/issues/82486", "id": 815676019, "node_id": "MDU6SXNzdWU4MTU2NzYwMTk=", "number": 82486, "title": "Improve error message for wrong attempt to box error", "user": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-02-24T17:08:09Z", "updated_at": "2021-02-24T17:08:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "So this came up when someone at my work started writing their first bits of Rust code for a binary and decided to use `Result<i32, Box<dyn std::error::Error>>` for a function. Given they wanted to go from a `Result<T, E> where E: std::error::Error` it seemed logical to try a `.into()` after the result type but the error message wasn't helpful so they came and asked me.\r\n\r\nAn example from rust playground\r\n\r\n```rust\r\nfn f() -> Result<i32, Box<dyn std::error::Error>> {\r\n    Result::<i32, std::io::Error>::Ok(42).into()\r\n}\r\n```\r\n\r\nprintout\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: the trait bound `std::result::Result<i32, Box<dyn std::error::Error>>: From<std::result::Result<i32, std::io::Error>>` is not satisfied\r\n --> src/lib.rs:2:43\r\n  |\r\n2 |     Result::<i32, std::io::Error>::Ok(42).into()\r\n  |                                           ^^^^ the trait `From<std::result::Result<i32, std::io::Error>>` is not implemented for `std::result::Result<i32, Box<dyn std::error::Error>>`\r\n  |\r\n  = help: the following implementations were found:\r\n            <std::result::Result<miniz_oxide::MZStatus, miniz_oxide::MZError> as From<&miniz_oxide::StreamResult>>\r\n            <std::result::Result<miniz_oxide::MZStatus, miniz_oxide::MZError> as From<miniz_oxide::StreamResult>>\r\n  = note: required because of the requirements on the impl of `Into<std::result::Result<i32, Box<dyn std::error::Error>>>` for `std::result::Result<i32, std::io::Error>`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nThe playground error looks a bit extra from what they got, what they had was going from attempting to parse a string into an into so `std::num::ParseIntError` into the boxed error. And what the message they pasted to me looked like this:\r\n\r\n```\r\nthe trait `std::convert::From<std::result::Result<i16, std::num::ParseIntError>>` is not implemented for `std::result::Result<i16, std::boxed::Box<dyn std::error::Error>>`\r\n```\r\n\r\nSo (in my opinion) ideally it should suggest using `map_err(|e| e.into())` if it can see that E can go into `Box<dyn std::error::Error>`. For a more general case if going from `Result<T, E> -> Result<T, F> where E: Into<F>` and the user uses into (or from?), suggest `map_err`. And suggest map for the similar case of `Result<T, E> -> Result<U, E> where T: Into<U>.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82486/timeline", "performed_via_github_app": null, "state_reason": null}