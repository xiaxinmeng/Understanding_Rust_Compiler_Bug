{"url": "https://api.github.com/repos/rust-lang/rust/issues/102939", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102939/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102939/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102939/events", "html_url": "https://github.com/rust-lang/rust/issues/102939", "id": 1405328418, "node_id": "I_kwDOAAsO6M5Tw5wi", "number": 102939, "title": "Unrelated trait bounds prevents generic types to be inferred in function call.", "user": {"login": "RikardLegge", "id": 2041958, "node_id": "MDQ6VXNlcjIwNDE5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2041958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RikardLegge", "html_url": "https://github.com/RikardLegge", "followers_url": "https://api.github.com/users/RikardLegge/followers", "following_url": "https://api.github.com/users/RikardLegge/following{/other_user}", "gists_url": "https://api.github.com/users/RikardLegge/gists{/gist_id}", "starred_url": "https://api.github.com/users/RikardLegge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RikardLegge/subscriptions", "organizations_url": "https://api.github.com/users/RikardLegge/orgs", "repos_url": "https://api.github.com/users/RikardLegge/repos", "events_url": "https://api.github.com/users/RikardLegge/events{/privacy}", "received_events_url": "https://api.github.com/users/RikardLegge/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-10-11T23:00:48Z", "updated_at": "2022-10-11T23:22:34Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code ([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=6af5347fc4b86cc9e41551719382814e)):\r\n\r\n```rust\r\npub struct Type {}\r\npub struct Unrelated<T>(T);\r\n\r\nimpl From<Unrelated<Type>> for Unrelated<()> {\r\n    fn from(_: Unrelated<Type>) -> Self {\r\n        todo!()\r\n    }\r\n}\r\n\r\nfn type_ok<T>() {\r\n    let _: Type = type_constraint(Type {});\r\n}\r\n\r\nfn type_wrong_type_parameter<T>()\r\nwhere\r\n    Unrelated<T>: Into<Unrelated<()>>,\r\n{\r\n    let _: Type = type_constraint(Type {});\r\n    //.           --------------- ^^^^^^^ expected type parameter `T`, found struct `Type`\r\n    //            |\r\n    //            arguments to this function are incorrect\r\n}\r\n\r\nfn type_constraint<Q>(_: Q) -> Q\r\nwhere\r\n    Unrelated<Q>: Into<Unrelated<()>>,\r\n{\r\n    unimplemented!()\r\n}\r\n```\r\n\r\nAnother example with the same problem caused associated types: [Example 2 Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=e6d824a679932452a78e31f03402dd88).\r\n\r\nI expected to see this happen: The example should compile and the ignored variables `_` on the left hand side has type `Type` in the examples. \r\n\r\nInstead, this happened: Only the unbounded function compiles. The functions with the added trait bounds causes a compile time error. The three simplest ways of resolving the problem are:\r\n1. Removing the trait bounds from either `type_wrong_type_parameter` or `type_constraint`. Might not be possible.\r\n2. Replacing `Unrelated<T>` with `T` in the trait bounds. This is usually not a solution either.\r\n3. Adding an explicit type to the function call `type_constraint::<Type>`. This allows the problem to in most cases be side-stepped.\r\n\r\nIf the problem is that the function want's to resolve `T` to a known type, the relation between the unused generic variable `T` and the function call is still not obvious.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nTested on both the stable and nightly compiler:\r\n\r\n```\r\nrustc 1.64.0 (a55dd71d5 2022-09-19)\r\nbinary: rustc\r\ncommit-hash: a55dd71d5fb0ec5a6a3a9e8c27b2127ba491ce52\r\ncommit-date: 2022-09-19\r\nhost: x86_64-apple-darwin\r\nrelease: 1.64.0\r\nLLVM version: 14.0.6\r\n```\r\n\r\n```\r\nrustc 1.66.0-nightly (a6b7274a4 2022-10-10)\r\nbinary: rustc\r\ncommit-hash: a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1\r\ncommit-date: 2022-10-10\r\nhost: x86_64-apple-darwin\r\nrelease: 1.66.0-nightly\r\nLLVM version: 15.0.2\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n\r\n### Error output\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0308]](https://doc.rust-lang.org/stable/error-index.html#E0308): mismatched types\r\n  --> src/lib.rs:18:35\r\n   |\r\n14 | fn type_wrong_type_parameter<T>()\r\n   |                              - this type parameter\r\n...\r\n18 |     let _: Type = type_constraint(Type {});\r\n   |                   --------------- ^^^^^^^ expected type parameter `T`, found struct `Type`\r\n   |                   |\r\n   |                   arguments to this function are incorrect\r\n   |\r\n   = note: expected type parameter `T`\r\n                      found struct `Type`\r\nnote: function defined here\r\n  --> src/lib.rs:24:4\r\n   |\r\n24 | fn type_constraint<Q>(_: Q) -> Q\r\n   |    ^^^^^^^^^^^^^^^    ----\r\n\r\nerror[[E0308]](https://doc.rust-lang.org/stable/error-index.html#E0308): mismatched types\r\n  --> src/lib.rs:18:19\r\n   |\r\n14 | fn type_wrong_type_parameter<T>()\r\n   |                              - this type parameter\r\n...\r\n18 |     let _: Type = type_constraint(Type {});\r\n   |            ----   ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Type`, found type parameter `T`\r\n   |            |\r\n   |            expected due to this\r\n   |\r\n   = note:      expected struct `Type`\r\n           found type parameter `T`\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground` due to 2 previous errors\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102939/timeline", "performed_via_github_app": null, "state_reason": null}