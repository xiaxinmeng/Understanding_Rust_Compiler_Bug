{"url": "https://api.github.com/repos/rust-lang/rust/issues/94147", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94147/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94147/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94147/events", "html_url": "https://github.com/rust-lang/rust/issues/94147", "id": 1144040251, "node_id": "I_kwDOAAsO6M5EMKs7", "number": 94147, "title": "x.py install uses different compiler stage for extended tools than x.py dist", "user": {"login": "aswild", "id": 11742669, "node_id": "MDQ6VXNlcjExNzQyNjY5", "avatar_url": "https://avatars.githubusercontent.com/u/11742669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aswild", "html_url": "https://github.com/aswild", "followers_url": "https://api.github.com/users/aswild/followers", "following_url": "https://api.github.com/users/aswild/following{/other_user}", "gists_url": "https://api.github.com/users/aswild/gists{/gist_id}", "starred_url": "https://api.github.com/users/aswild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aswild/subscriptions", "organizations_url": "https://api.github.com/users/aswild/orgs", "repos_url": "https://api.github.com/users/aswild/repos", "events_url": "https://api.github.com/users/aswild/events{/privacy}", "received_events_url": "https://api.github.com/users/aswild/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 325438536, "node_id": "MDU6TGFiZWwzMjU0Mzg1MzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-bootstrap", "name": "T-bootstrap", "color": "bfd4f2", "default": false, "description": "Relevant to the bootstrap subteam: Rust's build system (x.py and src/bootstrap)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-02-19T00:43:50Z", "updated_at": "2023-04-09T03:17:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Scenario:\r\n1. Set up config.toml with `extended = true` and `tools = [\"cargo\", \"clippy\", \"rustfmt\"]` and a custom prefix like `prefix = \"/opt/rust-dev\"`\r\n2. Run `./x.py dist`\r\n3. Run `./x.py install`\r\n\r\nIn the `dist` step, tools are built using the stage1 compiler and then zipped up into dist tarballs. Then, without making any changes, the `install` step rebuilds all of the tools using the stage2 compiler.\r\n\r\nFor example:\r\n```\r\n$ ./x.py dist\r\n...\r\nBuilding stage1 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.13s\r\nCopying stage1 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nAssembling stage2 compiler (x86_64-unknown-linux-gnu)\r\n...\r\nBuilding stage1 tool cargo (x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.12s\r\nBuilding stage1 tool cargo-credential-1password (x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.08s\r\nDist cargo-1.60.0-dev-x86_64-unknown-linux-gnu\r\n        finished in 0.050 seconds\r\nBuilding stage1 tool rustfmt (x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.09s\r\nBuilding stage1 tool cargo-fmt (x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.09s\r\nDist rustfmt-1.60.0-dev-x86_64-unknown-linux-gnu\r\n        finished in 0.045 seconds\r\nBuilding stage1 tool clippy-driver (x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.08s\r\nBuilding stage1 tool cargo-clippy (x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.09s\r\nDist clippy-1.60.0-dev-x86_64-unknown-linux-gnu\r\n        finished in 0.043 seconds\r\n```\r\n\r\nand\r\n```\r\n$ ./x.py install\r\n...\r\nBuilding stage1 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.12s\r\nCopying stage1 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nAssembling stage2 compiler (x86_64-unknown-linux-gnu)\r\n...\r\nBuilding stage2 tool cargo (x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.12s\r\nBuilding stage2 tool cargo-credential-1password (x86_64-unknown-linux-gnu)\r\n    Finished release [optimized] target(s) in 0.08s\r\nDist cargo-1.60.0-dev-x86_64-unknown-linux-gnu\r\n        finished in 0.056 seconds\r\nInstall cargo stage2 (Some(TargetSelection { triple: \"x86_64-unknown-linux-gnu\", file: None }))\r\ninstall: creating uninstall script at /workspace/rust/DD/opt/rust-dev/lib/rustlib/uninstall.sh\r\ninstall: installing component 'cargo'\r\n\r\n    cargo installed.\r\n\r\nBuilding stage2 tool rustfmt (x86_64-unknown-linux-gnu)\r\n...\r\n```\r\n\r\nI'm not sure whether this is intentional or a bug, but it at least feels nonintuitive. Typical software packages don't compile more things if you run `make install` right after `make all`, but rustbuild does so using a different compiler stage. As expected, the output of compiler stage1 and stage2 is the same (e.g. build/x86_64-unknown-linux-gnu/stage1-tools-bin/cargo and build/x86_64-unknown-linux-gnu/stage2-tools-bin/cargo are identical).\r\n\r\nIs it supposed to be this way? Just building stage2 tools cargo, clippy, and rustfmt adds a few extra minutes to the `./x.py install` time.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94147/timeline", "performed_via_github_app": null, "state_reason": null}