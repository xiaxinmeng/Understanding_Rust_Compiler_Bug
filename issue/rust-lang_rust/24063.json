{"url": "https://api.github.com/repos/rust-lang/rust/issues/24063", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/24063/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/24063/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/24063/events", "html_url": "https://github.com/rust-lang/rust/issues/24063", "id": 66308402, "node_id": "MDU6SXNzdWU2NjMwODQwMg==", "number": 24063, "title": "ICE: 'assertion failed: bound_list_is_sorted(&bounds.projection_bounds)'", "user": {"login": "frankmcsherry", "id": 5741500, "node_id": "MDQ6VXNlcjU3NDE1MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/5741500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankmcsherry", "html_url": "https://github.com/frankmcsherry", "followers_url": "https://api.github.com/users/frankmcsherry/followers", "following_url": "https://api.github.com/users/frankmcsherry/following{/other_user}", "gists_url": "https://api.github.com/users/frankmcsherry/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankmcsherry/subscriptions", "organizations_url": "https://api.github.com/users/frankmcsherry/orgs", "repos_url": "https://api.github.com/users/frankmcsherry/repos", "events_url": "https://api.github.com/users/frankmcsherry/events{/privacy}", "received_events_url": "https://api.github.com/users/frankmcsherry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-04-04T11:35:45Z", "updated_at": "2015-09-14T06:51:25Z", "closed_at": "2015-09-14T06:51:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm getting an ICE (using nightly) when building a not-too-complicated program which depends on a crate I have put together (so, not necessarily much tested in the wild). The backtrace is \n\n```\n   Compiling algorithm_3 v0.0.1 (file:///Users/mcsherry/Projects/algorithm_3)\nerror: internal compiler error: unexpected panic\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\nnote: run with `RUST_BACKTRACE=1` for a backtrace\nthread 'rustc' panicked at 'assertion failed: bound_list_is_sorted(&bounds.projection_bounds)', /Users/rustbuild/src/rust-buildbot/slave/nightly-dist-rustc-mac/build/src/librustc/middle/ty.rs:3086\n\nstack backtrace:\n   1:        0x10e549df7 - sys::backtrace::write::hcdd8cf990b8f0f0e1LC\n   2:        0x10e577ccd - panicking::on_panic::hbbf8c269bccad920HAI\n   3:        0x10e49c15e - rt::unwind::begin_unwind_inner::h2f66a36e4dcc3e43iiI\n   4:        0x10b3ddecf - rt::unwind::begin_unwind::h6249491716973373080\n   5:        0x10b514217 - middle::ty::mk_trait::h7ab8d7163fc0f3c3rK4\n   6:        0x10b82069d - metadata::tydecode::parse_ty_::h2933819655758744267\n   7:        0x10b81f6d6 - metadata::tydecode::parse_ty_::h2933819655758744267\n   8:        0x10b822089 - metadata::tydecode::parse_substs_::h3504023645670576607\n   9:        0x10b81fd24 - metadata::tydecode::parse_ty_::h2933819655758744267\n  10:        0x10b822089 - metadata::tydecode::parse_substs_::h3504023645670576607\n  11:        0x10b81fd24 - metadata::tydecode::parse_ty_::h2933819655758744267\n  12:        0x10b822089 - metadata::tydecode::parse_substs_::h3504023645670576607\n  13:        0x10b81fd24 - metadata::tydecode::parse_ty_::h2933819655758744267\n  14:        0x10b828890 - metadata::decoder::item_type::hc24aea831f59c6091gj\n  15:        0x10b7e025f - metadata::csearch::get_field_type::h004add43e10b4a7c8hm\n  16:        0x10b7ca410 - middle::ty::lookup_field_type::h000ec0a6485b2953pb8\n  17:        0x10b58fa5d - middle::ty::struct_fields::hb9270926f97b7110ke8\n  18:        0x10b786b39 - middle::traits::select::SelectionContext<'cx, 'tcx>::builtin_bound::h7c7cae6071215334ouS\n  19:        0x10b77ffec - middle::traits::select::SelectionContext<'cx, 'tcx>::assemble_builtin_bound_candidates::hbf0f8dcb327988a0XqS\n  20:        0x10b77c1d2 - middle::traits::select::SelectionContext<'cx, 'tcx>::assemble_candidates::h944e97e99b37718aozR\n  21:        0x10b76da96 - middle::traits::select::SelectionContext<'cx, 'tcx>::candidate_from_obligation::h2ca16cbf218693a5adR\n  22:        0x10b745657 - middle::traits::select::SelectionContext<'cx, 'tcx>::select::h5b0d39ef774af1bdOQQ\n  23:        0x10b7422d0 - middle::traits::fulfill::FulfillmentContext<'tcx>::select::he78b2fc01c1100f5uHO\n  24:        0x10b741738 - middle::traits::fulfill::FulfillmentContext<'tcx>::select_where_possible::h976e36d2abe2f2b1IGO\n  25:        0x10aade383 - check::vtable::select_fcx_obligations_where_possible::h38ef3ab6bc69a37bd4b\n  26:        0x10aadded3 - check::vtable::select_all_fcx_obligations_and_apply_defaults::h2f1bbf5631a3aa6aA0b\n  27:        0x10ab9d28d - check::check_bare_fn::heb41f0c17b48e486UQn\n  28:        0x10aba31b7 - check::check_method_body::hcba8da26f5a17743Koo\n  29:        0x10ab9a71f - check::check_item::h4590801d518d170eF9n\n  30:        0x10ac735c6 - check_crate::closure.36302\n  31:        0x10ac6da37 - check_crate::hf2047274e19fe4f4bwC\n  32:        0x10a9902d5 - driver::phase_3_run_analysis_passes::h7ac32f1d1ca0be7dgGa\n  33:        0x10a974a05 - driver::compile_input::haed712778d66caf6Qba\n  34:        0x10aa32985 - run_compiler::h2df8296b9f7c362fV4b\n  35:        0x10aa30152 - boxed::F.FnBox<A>::call_box::h8968837061369711197\n  36:        0x10aa2f647 - rt::unwind::try::try_fn::h5695919628988619761\n  37:        0x10e601d28 - rust_try_inner\n  38:        0x10e601d15 - rust_try\n  39:        0x10aa2f93a - boxed::F.FnBox<A>::call_box::h17367168855684310088\n  40:        0x10e5611fd - sys::thread::create::thread_start::he0d7c708bf73803bihH\n  41:     0x7fff98cbb267 - _pthread_body\n  42:     0x7fff98cbb1e4 - _pthread_start\n\nCould not compile `algorithm_3`.\n\nTo learn more, run the command again with --verbose.\n```\n\n```\nEchidnatron% cargo version\ncargo 0.0.1-pre-nightly (84d6d2c 2015-03-31) (built 2015-04-01)\n```\n\nThe hunk of code that causes the explosion is:\n\n``` rust\n#![allow(dead_code)]\n#![feature(core)]\n\nextern crate timely;\n// extern crate core;\n\nuse std::rc::Rc;\nuse std::cell::RefCell;\n\n// use core::marker::PhantomFn;\n\nuse timely::progress::Graph;\nuse timely::example::stream::Stream;\n\n// pub trait Graph : PhantomFn<Self> {}\n// pub struct Stream<G: Graph, D> { graph: G, data: D }\n\npub struct Count<Prefix> {\n    prefix: Prefix,\n    count:  u32,\n    ident:  u32,\n}\n\npub trait PrefixExtender<G: Graph, Prefix, Extension> {\n    // using a provided identifier, updates counts to reflect the minimum count of the extender\n    fn count(&self, &Stream<G, Count<Prefix>>, u32) -> Stream<G, Count<Prefix>>;\n\n    // using a provided identifier, produce the extensions for matching nominations\n    fn propose(&self, &Stream<G, Count<Prefix>>) -> Stream<G, (Prefix, Vec<Extension>)>;\n\n    // restrict a set of proposed extensions to reflect the intersection with the extender\n    fn intersect(&self, &Stream<G, (Prefix, Vec<Extension>)>) -> Stream<G, (Prefix, Vec<Extension>)>;\n}\n\nimpl<G: Graph, P, L: Fn(&P)->u32> PrefixExtender<G, P, u32> for (Rc<RefCell<GraphFragment>>, L) {\n    fn count(&self, stream: &Stream<G, Count<P>>, ident: u32) -> Stream<G, Count<P>> {\n\n    }\n    fn propose(&self, stream: &Stream<G, Count<P>>) -> Stream<G, (P, Vec<u32>)> {\n\n    }\n    fn intersect(&self, stream: &Stream<G, (P, Vec<u32>)>) -> Stream<G, (P, Vec<u32>)> {\n\n    }\n}\n\npub struct GraphFragment {\n    nodes: Vec<u32>,\n    edges: Vec<u32>,\n}\n```\n\nUnfortunately the `timely` crate is not available on crates.io, because it is still in progress, but it is crashing with the version currently available at https://github.com/frankmcsherry/timely-dataflow, with which I've written several other (non-ICE-ing) programs (so it isn't fundamentally broken, possibly only slightly so :)).\n\nAs you can possibly see from the code, I tried an empty `Graph` trait and `Stream` struct, but that \"works fine\" (it complains that I haven't finished my impls yet, without an ICE, and compiles if I just throw some `panic!`s in there instead). I may try to make a more minimal reproduction, but it probably involves moving parts from one crate into this example, yuck! Perhaps an issue is already obvious from the backtrace.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/24063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/24063/timeline", "performed_via_github_app": null, "state_reason": "completed"}