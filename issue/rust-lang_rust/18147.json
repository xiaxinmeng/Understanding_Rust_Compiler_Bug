{"url": "https://api.github.com/repos/rust-lang/rust/issues/18147", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/18147/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/18147/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/18147/events", "html_url": "https://github.com/rust-lang/rust/issues/18147", "id": 46191152, "node_id": "MDU6SXNzdWU0NjE5MTE1Mg==", "number": 18147, "title": "Compile constant SIMD initialiser to a constant vector expression ", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-10-18T23:59:18Z", "updated_at": "2022-02-21T08:41:00Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently\n\n``` rust\n#![crate_type = \"lib\"]\n\npub fn foo(x: f64, y:f64) -> std::simd::f64x2 {\n    std::simd::f64x2(0.0, 1.0)\n}\n```\n\nbecomes, with no optimisations,\n\n``` llvm\n; Function Attrs: uwtable\ndefine <2 x double> @_ZN3foo20h36a71d373a6347d3daaE(double, double) unnamed_addr #0 {\nentry-block:\n  %sret_slot = alloca <2 x double>\n  %x = alloca double\n  %y = alloca double\n  store double %0, double* %x\n  store double %1, double* %y\n  %2 = getelementptr inbounds <2 x double>* %sret_slot, i32 0, i32 0\n  store double 0.000000e+00, double* %2\n  %3 = getelementptr inbounds <2 x double>* %sret_slot, i32 0, i32 1\n  store double 1.000000e+00, double* %3\n  %4 = load <2 x double>* %sret_slot\n  ret <2 x double> %4\n}\n```\n\nAfter optimisations it becomes\n\n``` llvm\n; Function Attrs: nounwind readnone uwtable\ndefine <2 x double> @_ZN3foo20h36a71d373a6347d3daaE(double, double) unnamed_addr #0 {\nentry-block:\n  ret <2 x double> <double 0.000000e+00, double 1.000000e+00>\n}\n```\n\nWe could detect constants in a SIMD initialiser and compile to this directly, making our no-opt code faster, and saving the optimiser work.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/18147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/18147/timeline", "performed_via_github_app": null, "state_reason": null}