{"url": "https://api.github.com/repos/rust-lang/rust/issues/55535", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55535/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55535/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55535/events", "html_url": "https://github.com/rust-lang/rust/issues/55535", "id": 375941545, "node_id": "MDU6SXNzdWUzNzU5NDE1NDU=", "number": 55535, "title": "\"does not live long enough\" when returning Option<impl trait>", "user": {"login": "Riateche", "id": 1740713, "node_id": "MDQ6VXNlcjE3NDA3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1740713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Riateche", "html_url": "https://github.com/Riateche", "followers_url": "https://api.github.com/users/Riateche/followers", "following_url": "https://api.github.com/users/Riateche/following{/other_user}", "gists_url": "https://api.github.com/users/Riateche/gists{/gist_id}", "starred_url": "https://api.github.com/users/Riateche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Riateche/subscriptions", "organizations_url": "https://api.github.com/users/Riateche/orgs", "repos_url": "https://api.github.com/users/Riateche/repos", "events_url": "https://api.github.com/users/Riateche/events{/privacy}", "received_events_url": "https://api.github.com/users/Riateche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-31T12:36:38Z", "updated_at": "2021-09-22T10:44:38Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This doesn't compile:\r\n```\r\nuse std::cell::RefCell;\r\n\r\nstruct B;\r\nstruct A {\r\n    b: B,\r\n}\r\n\r\nimpl A {\r\n    fn b(&self) -> Option<impl Iterator<Item = &B>> {\r\n        Some(::std::iter::once(&self.b))\r\n    }\r\n}\r\n\r\nfn func(a: RefCell<A>) {\r\n    let lock = a.borrow_mut();\r\n    if let Some(_b) = lock.b() {}\r\n}\r\n```\r\n\r\nHowever, it compiles when impl trait is replaced with the concrete type:\r\n```\r\nfn b(&self) -> Option<::std::iter::Once<&B>> {\r\n```\r\n\r\nIt also compiles with impl trait if `Option` is removed:\r\n```\r\nimpl A {\r\n    fn b(&self) -> impl Iterator<Item = &B> {\r\n        ::std::iter::once(&self.b)\r\n    }\r\n}\r\n\r\nfn func(a: RefCell<A>) {\r\n    let lock = a.borrow_mut();\r\n    let _b = lock.b();\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55535/timeline", "performed_via_github_app": null, "state_reason": null}