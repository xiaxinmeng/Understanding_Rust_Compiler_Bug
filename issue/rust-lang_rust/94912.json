{"url": "https://api.github.com/repos/rust-lang/rust/issues/94912", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94912/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94912/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94912/events", "html_url": "https://github.com/rust-lang/rust/issues/94912", "id": 1167630429, "node_id": "I_kwDOAAsO6M5FmKBd", "number": 94912, "title": "Erroneous unused_unsafe diagnostic for macro invocations", "user": {"login": "zdimension", "id": 4533568, "node_id": "MDQ6VXNlcjQ1MzM1Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/4533568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdimension", "html_url": "https://github.com/zdimension", "followers_url": "https://api.github.com/users/zdimension/followers", "following_url": "https://api.github.com/users/zdimension/following{/other_user}", "gists_url": "https://api.github.com/users/zdimension/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdimension/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdimension/subscriptions", "organizations_url": "https://api.github.com/users/zdimension/orgs", "repos_url": "https://api.github.com/users/zdimension/repos", "events_url": "https://api.github.com/users/zdimension/events{/privacy}", "received_events_url": "https://api.github.com/users/zdimension/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-13T16:39:07Z", "updated_at": "2023-01-12T23:45:39Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=4fc81da81334f7865f292f98a62735a3\r\n\r\n```rust\r\nunsafe fn unsafe_code() { }\r\n\r\nmacro_rules! macro_inner\r\n{\r\n    () => { unsafe { unsafe_code(); }  };\r\n}\r\nmacro_rules! macro_outer\r\n{\r\n    () => { unsafe { macro_inner!(); unsafe_code(); } };\r\n}\r\n\r\nfn main()\r\n{\r\n    macro_inner!();\r\n\r\n    macro_outer!();\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nwarning: unnecessary `unsafe` block\r\n  --> src\\poc.rs:5:13\r\n   |\r\n5  |     () => { unsafe { unsafe_code(); }  };\r\n   |             ^^^^^^ unnecessary `unsafe` block\r\n...\r\n9  |     () => { unsafe { macro_inner!(); unsafe_code(); } };\r\n   |             ------ because it's nested under this `unsafe` block\r\n...\r\n16 |     macro_outer!();\r\n   |     -------------- in this macro invocation\r\n   |\r\n   = note: this warning originates in the macro `macro_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n```\r\n\r\nThis is obviously wrong, because `macro_inner!` is *also* invoked at line 14, in the `main` function, outside an `unsafe` block. The analyzer seems to only take in account the invocation occurring inside the `macro_outer!` expansion during the `unused_unsafe` check.\r\n\r\nAlthough it makes technical sense to perform the analysis that way, the result is that an incorrect piece of advice is given to the user (\"This `unsafe` specifier is unnecessary, remove it\"). Here, removing the `unsafe` block breaks the code, for the first invocation.\r\n\r\nTested on stable 1.58.1 and nightly 1.61.0 (2022-02-23).\r\n\r\n**EDIT:** still present on 1.67.0 (2022-11-02).\r\n\r\nPS: Sorry if this is not in the right triage category, I wasn't sure whether it would better fit the \"Diagnostics\" or the \"Bug\" label.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94912/timeline", "performed_via_github_app": null, "state_reason": null}