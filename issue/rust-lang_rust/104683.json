{"url": "https://api.github.com/repos/rust-lang/rust/issues/104683", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104683/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104683/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104683/events", "html_url": "https://github.com/rust-lang/rust/issues/104683", "id": 1458261099, "node_id": "I_kwDOAAsO6M5W60xr", "number": 104683, "title": "Misleading borrow checker error when accidentally creating self-referential lifetimes", "user": {"login": "djc", "id": 158471, "node_id": "MDQ6VXNlcjE1ODQ3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/158471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djc", "html_url": "https://github.com/djc", "followers_url": "https://api.github.com/users/djc/followers", "following_url": "https://api.github.com/users/djc/following{/other_user}", "gists_url": "https://api.github.com/users/djc/gists{/gist_id}", "starred_url": "https://api.github.com/users/djc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djc/subscriptions", "organizations_url": "https://api.github.com/users/djc/orgs", "repos_url": "https://api.github.com/users/djc/repos", "events_url": "https://api.github.com/users/djc/events{/privacy}", "received_events_url": "https://api.github.com/users/djc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-11-21T16:49:10Z", "updated_at": "2022-11-22T00:49:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code:\r\n\r\n```rust\r\nuse std::borrow::Cow;\r\n\r\nstruct Buffer {\r\n    buf: Vec<u8>,\r\n    frames: Vec<Message<'static>>,\r\n}\r\n\r\nimpl Buffer {\r\n    fn pop(&mut self) {\r\n        let mut reader = Reader::new(&self.buf);\r\n        let msg = Message {\r\n            payload: Payload::parse(&mut reader),\r\n        };\r\n        self.frames.push(msg);\r\n        self.buf = self.buf.split_off(10);\r\n    }\r\n}\r\n\r\nstruct Reader<'a> {\r\n    buf: &'a [u8],\r\n}\r\n\r\nimpl<'a> Reader<'a> {\r\n    fn new(_: &'a [u8]) -> Self {\r\n        todo!()\r\n    }\r\n}\r\n\r\nstruct Message<'a> {\r\n    payload: Payload<'a>,\r\n}\r\n\r\nstruct Payload<'a> {\r\n    data: Cow<'a, [u8]>,\r\n}\r\n\r\nimpl<'a> Payload<'a> {\r\n    fn parse(_: &mut Reader<'a>) -> Self {\r\n        todo!()\r\n    }\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=31c7a14c81699b4f4ca1b12d48c9ca09).)\r\n\r\nThe current output is:\r\n\r\n```rust\r\nerror[[E0521]](https://doc.rust-lang.org/stable/error-index.html#E0521): borrowed data escapes outside of associated function\r\n  --> src/lib.rs:10:26\r\n   |\r\n9  |     fn pop(&mut self) {\r\n   |            ---------\r\n   |            |\r\n   |            `self` is a reference that is only valid in the associated function body\r\n   |            let's call the lifetime of this reference `'1`\r\n10 |         let mut reader = Reader::new(&self.buf);\r\n   |                          ^^^^^^^^^^^^^^^^^^^^^^\r\n   |                          |\r\n   |                          `self` escapes the associated function body here\r\n   |                          argument requires that `'1` must outlive `'static`\r\n\r\nerror[[E0506]](https://doc.rust-lang.org/stable/error-index.html#E0506): cannot assign to `self.buf` because it is borrowed\r\n  --> src/lib.rs:15:9\r\n   |\r\n10 |         let mut reader = Reader::new(&self.buf);\r\n   |                          ----------------------\r\n   |                          |           |\r\n   |                          |           borrow of `self.buf` occurs here\r\n   |                          argument requires that `self.buf` is borrowed for `'static`\r\n...\r\n15 |         self.buf = self.buf.split_off(10);\r\n   |         ^^^^^^^^ assignment to borrowed `self.buf` occurs here\r\n\r\nerror[[E0502]](https://doc.rust-lang.org/stable/error-index.html#E0502): cannot borrow `self.buf` as mutable because it is also borrowed as immutable\r\n  --> src/lib.rs:15:20\r\n   |\r\n10 |         let mut reader = Reader::new(&self.buf);\r\n   |                          ----------------------\r\n   |                          |           |\r\n   |                          |           immutable borrow occurs here\r\n   |                          argument requires that `self.buf` is borrowed for `'static`\r\n...\r\n15 |         self.buf = self.buf.split_off(10);\r\n   |                    ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\r\n\r\nSome errors have detailed explanations: E0502, E0506, E0521.\r\nFor more information about an error, try `rustc --explain E0502`.\r\n```\r\n\r\nThis threw for a loop for quite a long time until I started reducing it in order to file this issue, and realized that I missed that it was essentially creating self-referential borrows by pushing a type containing a reference to `&self.buf` into `self.frames`. However, none of the diagnostics above point to the `self.frames.push()` line, which IMO is the salient issue here. The first one notably points to `&self.buf` \"escaping the function body\" when instantiating the `Reader` in the function stack. Since the reader itself does not escape the function body at all, that also confused me quite a bit.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104683/timeline", "performed_via_github_app": null, "state_reason": null}