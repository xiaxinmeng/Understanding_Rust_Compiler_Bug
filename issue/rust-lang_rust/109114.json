{"url": "https://api.github.com/repos/rust-lang/rust/issues/109114", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109114/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109114/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109114/events", "html_url": "https://github.com/rust-lang/rust/issues/109114", "id": 1623102401, "node_id": "I_kwDOAAsO6M5gvpPB", "number": 109114, "title": "`-Zdylib-lto` with ThinLTO is broken on windows-msvc", "user": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 266005765, "node_id": "MDU6TGFiZWwyNjYwMDU3NjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-msvc", "name": "O-windows-msvc", "color": "6e6ec0", "default": false, "description": "Toolchain: MSVC, Operating system: Windows"}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2459791492, "node_id": "MDU6TGFiZWwyNDU5NzkxNDky", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lto", "name": "A-lto", "color": "f7e101", "default": false, "description": "Area: Link Time Optimization"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-03-14T09:46:08Z", "updated_at": "2023-03-15T09:50:12Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Found by a miscompilation inside the shipped rustc binaries on stable windows-msvc #109067\r\n\r\nHere's a partially minimized sample. It can maybe get smaller than this, but after a point it seems to be fairly sensitive to the code shifting around.\r\n\r\n```rust\r\nuse std::ops::Range;\r\nuse std::str::Chars;\r\n\r\n#[derive(Debug)]\r\nenum EscapeError {\r\n    UnskippedWhitespaceWarning,\r\n}\r\n\r\nfn scan_escape(chars: &mut Chars<'_>) -> Result<char, EscapeError> {\r\n    let res = match chars.next().unwrap() {\r\n        _ => panic!(\"invalid\"),\r\n    };\r\n    // Ok(res)\r\n}\r\n\r\nfn unescape_str_or_byte_str<F>(src: &str, callback: &mut F)\r\nwhere\r\n    F: FnMut(Range<usize>, Result<char, EscapeError>),\r\n{\r\n    let mut chars = src.chars();\r\n\r\n    // The `start` and `end` computation here is complicated because\r\n    // `skip_ascii_whitespace` makes us to skip over chars without counting\r\n    // them in the range computation.\r\n    while let Some(c) = chars.next() {\r\n        let start = src.len() - chars.as_str().len() - c.len_utf8();\r\n        let res = match c {\r\n            '\\\\' => {\r\n                match chars.clone().next() {\r\n                    Some('\\n') => {\r\n                        // Rust language specification requires us to skip whitespaces\r\n                        // if unescaped '\\' character is followed by '\\n'.\r\n                        // For details see [Rust language reference]\r\n                        // (https://doc.rust-lang.org/reference/tokens.html#string-literals).\r\n                        skip_ascii_whitespace(&mut chars, start, callback);\r\n                        continue;\r\n                    }\r\n                    _ => scan_escape(&mut chars),\r\n                }\r\n            }\r\n            _ => Ok(c)\r\n        };\r\n        let end = src.len() - chars.as_str().len();\r\n        callback(start..end, res);\r\n    }\r\n\r\n    fn skip_ascii_whitespace<F>(chars: &mut Chars<'_>, start: usize, callback: &mut F)\r\n    where\r\n        F: FnMut(Range<usize>, Result<char, EscapeError>),\r\n    {\r\n        let tail = chars.as_str();\r\n        println!(\"tail={tail:?}\");\r\n        let first_non_space = tail\r\n            .bytes()\r\n            .position(|b| b != b' ' && b != b'\\t' && b != b'\\n' && b != b'\\r')\r\n            .unwrap_or(tail.len());\r\n        println!(\"first_non_space={first_non_space:?} start={start:?}\", );\r\n        if tail[1..first_non_space].contains('\\n') {\r\n            // The +1 accounts for the escaping slash.\r\n            // let end = start + first_non_space + 1;\r\n            // callback(start..end, Err(EscapeError::MultipleSkippedLinesWarning));\r\n        }\r\n        let tail = &tail[first_non_space..];\r\n        println!(\"tail={tail:?}\");\r\n        if let Some(c) = tail.chars().nth(0) {\r\n            // For error reporting, we would like the span to contain the character that was not\r\n            // skipped. The +1 is necessary to account for the leading \\ that started the escape.\r\n            // println!(\"{:?}\", '\u00a3'.is_whitespace());\r\n            println!(\"first char is {c:?}\");\r\n            let end = start + first_non_space + c.len_utf8() + 1;\r\n            println!(\"end is {end:?}\");\r\n            if c.is_whitespace() {\r\n                println!(\"{c:?} is whitespace, err range is {:?}\", start..end);\r\n                callback(start..end, Err(EscapeError::UnskippedWhitespaceWarning));\r\n            }\r\n        }\r\n        *chars = tail.chars();\r\n    }\r\n}\r\n\r\nfn main() {\r\n    unescape_str_or_byte_str(\"\\\\\\n\u00a3\",  &mut |_range, result| {\r\n        eprintln!(\"cb={result:?}\", );\r\n    });\r\n}\r\n```\r\n\r\nBuild with `rustc -Zdylib-lto -Clto=thin -Cprefer-dynamic=yes -Copt-level=2 main.rs`\r\nYou should see:\r\n\r\n```\r\ntail=\"\\n\u00a3\"\r\nfirst_non_space=1 start=0\r\ntail=\"\u00a3\"\r\nfirst char is '\u00a3'\r\nend is 4\r\n'\u00a3' is whitespace, err range is 0..4\r\ncb=Err(UnskippedWhitespaceWarning)\r\ncb=Ok('\u00a3')\r\n```\r\n\r\n_Originally posted by @ehuss in https://github.com/rust-lang/rust/issues/109067#issuecomment-1466936353_\r\n            ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109114/timeline", "performed_via_github_app": null, "state_reason": null}