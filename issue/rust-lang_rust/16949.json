{"url": "https://api.github.com/repos/rust-lang/rust/issues/16949", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/16949/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/16949/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/16949/events", "html_url": "https://github.com/rust-lang/rust/issues/16949", "id": 41763323, "node_id": "MDU6SXNzdWU0MTc2MzMyMw==", "number": 16949, "title": "If two traits provide a method with the same name, and said method is used in an \"unambiguous\" way, the compiler picks the \"wrong\" trait", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-09-02T22:36:18Z", "updated_at": "2015-02-14T11:47:57Z", "closed_at": "2015-02-14T11:47:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Worth noting, that the traits are implemented for \"non-overlapping\" types. (Hence, I said \"unambiguous\" in the title)\n### STR\n\n``` rust\nuse std::iter::AdditiveIterator;\n\n// I can't reuse the trait defined in the stdlib, create a new one\ntrait MyAdditiveIterator<T> {\n    fn sum(self) -> Option<Row<Vec<T>>>;\n}\n\n// newtype to represent the row of a matrix\nstruct Row<D> {\n    data: D,\n}\n\n// consume a \"row-by-row\" iterator, and return the sum of the rows\nimpl<T, D, I: Iterator<Row<D>>> MyAdditiveIterator<T> for I {\n    fn sum(self) -> Option<Row<Vec<T>>> {\n        unimplemented!();\n    }\n}\n\nfn main() {\n    // Clearly `range` is *not* an iterator over rows (`u8` != `Row<D>` for any `D`),\n    // so the compiler should *not* pick `MyAdditiveIterator` but it does\n    range(0u8, 3).sum();\n}\n```\n### Output\n\n``` rust\nrows.rs:23:5: 23:24 error: expected core::iter::Iterator<Row<<generic #519>>>, found core::iter::Iterator<u8> (expected struct Row, found u8) [E0095]\nrows.rs:23     range(0u8, 3).sum();\n               ^~~~~~~~~~~~~~~~~~~\nrows.rs:23:5: 23:24 error: expected core::iter::Iterator<Row<<generic #519>>>, found core::iter::Iterator<u8> (expected struct Row, found u8) [E0095]\nrows.rs:23     range(0u8, 3).sum();\n               ^~~~~~~~~~~~~~~~~~~\nrows.rs:23:5: 23:24 error: expected core::iter::Iterator<Row<<generic #519>>>, found core::iter::Iterator<u8> (expected struct Row, found u8) [E0095]\nrows.rs:23     range(0u8, 3).sum();\n               ^~~~~~~~~~~~~~~~~~~\nrows.rs:23:5: 23:24 error: expected core::iter::Iterator<Row<<generic #519>>>, found core::iter::Iterator<u8> (expected struct Row, found u8) [E0095]\nrows.rs:23     range(0u8, 3).sum();\n               ^~~~~~~~~~~~~~~~~~~\nerror: aborting due to 4 previous errors\n```\n\n(Off-topic: Same error 4 times?)\n### Version\n\n``` rust\nrustc 0.12.0-pre (dfbd4669c 2014-09-02 10:31:04 +0000)\n```\n\n---\n\nFor completeness sake, here's the definition/impl of `std::iter::AdditiveIterator`:\n\n``` rust\npub trait AdditiveIterator<A> {\n    fn sum(&mut self) -> A;\n}\n\nimpl<A: Zero + Add<A, A>, T: Iterator<A>> AdditiveIterator<A> for T {}\n```\n\nAltough I can work around this issue, I get the feeling that the compiler should be able to handle this case (but I could be wrong).\n\ncc @nikomatsakis \n\n**EDIT**: Added `rustc` version\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/16949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/16949/timeline", "performed_via_github_app": null, "state_reason": "completed"}