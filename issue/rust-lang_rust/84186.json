{"url": "https://api.github.com/repos/rust-lang/rust/issues/84186", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84186/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84186/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84186/events", "html_url": "https://github.com/rust-lang/rust/issues/84186", "id": 857800515, "node_id": "MDU6SXNzdWU4NTc4MDA1MTU=", "number": 84186, "title": "Tracking Issue for `nonzero_ops`", "user": {"login": "iago-lito", "id": 10091387, "node_id": "MDQ6VXNlcjEwMDkxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/10091387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iago-lito", "html_url": "https://github.com/iago-lito", "followers_url": "https://api.github.com/users/iago-lito/followers", "following_url": "https://api.github.com/users/iago-lito/following{/other_user}", "gists_url": "https://api.github.com/users/iago-lito/gists{/gist_id}", "starred_url": "https://api.github.com/users/iago-lito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iago-lito/subscriptions", "organizations_url": "https://api.github.com/users/iago-lito/orgs", "repos_url": "https://api.github.com/users/iago-lito/repos", "events_url": "https://api.github.com/users/iago-lito/events{/privacy}", "received_events_url": "https://api.github.com/users/iago-lito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2021-04-14T11:24:57Z", "updated_at": "2022-06-08T19:47:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature gate: `#![feature(nonzero_ops)]`\r\n\r\nThis is the tracking issue for #82703. The common arithmetic operators that keep the invariants of `NonZero*` types enforced are implemented for these types.\r\n\r\n### Public API\r\n\r\nExample with `U8`/`I8`, but same for `U16`/`I16` *etc.*\r\n```rust\r\n// core::num\r\n\r\nimpl NonZeroU8 {\r\n    pub const fn checked_add(self, other: u8) -> Option<Self>;\r\n    pub const fn saturating_add(self, other: u8) -> Self;\r\n    pub const unsafe fn unchecked_add(self, other: u8) -> Self;\r\n    pub const fn checked_next_power_of_two(self) -> Option<Self>;\r\n}\r\n\r\nimpl NonZeroI8 {\r\n    pub const fn abs(self) -> Self;\r\n    pub const fn checked_abs(self) -> Option<Self>;\r\n    pub const fn overflowing_abs(self) -> (Self, bool);\r\n    pub const fn saturating_abs(self) -> Self;\r\n    pub const fn wrapping_abs(self) -> Self;\r\n    pub const fn unsigned_abs(self) -> NonZeroU8;\r\n}\r\n\r\nimpl NonZeroU8 /* and NonZeroI8 */ {\r\n    pub const fn checked_mul(self, other: Self) -> Option<Self>;\r\n    pub const fn saturating_mul(self, other: Self) -> Self;\r\n    pub const unsafe fn unchecked_mul(self, other: Self) -> Self;\r\n    pub const fn checked_pow(self, other: u32) -> Option<Self>;\r\n    pub const fn saturating_pow(self, other: u32) -> Self;\r\n}\r\n\r\n/* Not yet on nightly, as it is insta-stable:\r\nimpl Neg for NonZeroI8 {\r\n    type Output = Self;\r\n    fn neg(self) -> Self;\r\n}\r\n*/\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #82703\r\n- [x] Merge #87910 marking unsafe methods as `const`.\r\n- [x] Final commenting period (FCP)\r\n- [x] Stabilize checked methods in #97547.\r\n- [ ] Stabilize `unchecked_` methods.\r\n- [x] Add `impl Neg for NonZeroI*`, which could not be feature-gated.\r\n\r\n### Unresolved Questions\r\n\r\n- [x] Should `unchecked_add` and `unchecked_mul` be marked `const` and how? Would it imply that their `const`-ness for the underlying types be upgraded in `std`? \r\n-> Leave as-is (non-const) until https://github.com/rust-lang/rfcs/pull/3016 lands. (https://github.com/rust-lang/rust/pull/82703#issuecomment-825086380)\r\n-> It has landed now, mark them `const` in #87910.\r\n- [x] Naming: how to avoid confusion regarding the term `(un)checked`, referring to checking for nonzeroness in std with the `NonZeroInt::new_unchecked` method, but here referring to checking overflow? Discussion [here](https://github.com/rust-lang/rust/pull/82703#issuecomment-825127657).\r\n-> `check` consistently means \"check everything that needs be checked in the current context, and refer to the doc to verify what needs to be checked in this context\". The doc has been made explicit about what needs to be checked for every method above.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84186/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84186/timeline", "performed_via_github_app": null, "state_reason": null}