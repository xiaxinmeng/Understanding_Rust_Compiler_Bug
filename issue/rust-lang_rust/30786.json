{"url": "https://api.github.com/repos/rust-lang/rust/issues/30786", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/30786/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/30786/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/30786/events", "html_url": "https://github.com/rust-lang/rust/issues/30786", "id": 125707165, "node_id": "MDU6SXNzdWUxMjU3MDcxNjU=", "number": 30786, "title": "HRTB bug in streaming iterator", "user": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-08T22:25:08Z", "updated_at": "2019-07-11T08:13:31Z", "closed_at": "2019-07-11T08:13:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[Full code playpen](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=980e262956717be1e75055cfe3caac58)\r\n\r\nSo, I've been working on a hacky streaming iterator library and ran into what looks like a bug in the type checker involving higher ranked trait bounds.\r\n\r\nIn the code below, I've defined a `Stream` trait. To implement a stream, one implements `Stream` on `&'a mut MyStream` for all lifetimes `'a`.\r\n\r\n``` rust\r\npub trait Stream {\r\n    type Item;\r\n    fn next(self) -> Option<Self::Item>;\r\n}\r\n\r\n// Example stream\r\npub struct Repeat(u64);\r\n\r\nimpl<'a> Stream for &'a mut Repeat {\r\n    type Item = &'a u64;\r\n    fn next(self) -> Option<Self::Item> {\r\n        Some(&self.0)\r\n    }\r\n}\r\n```\r\n\r\nI then went ahead and implemented adapters for filter and map and an extension trait for applying these adapters:\r\n\r\n``` rust\r\npub struct Map<S, F> {\r\n    stream: S,\r\n    func: F,\r\n}\r\n\r\nimpl<'a, A, F, T> Stream for &'a mut Map<A, F>\r\n    where &'a mut A: Stream,\r\n          F: FnMut(<&'a mut A as Stream>::Item) -> T,\r\n{\r\n    type Item = T;\r\n    fn next(self) -> Option<T> {\r\n        match self.stream.next() {\r\n            Some(item) => Some((self.func)(item)),\r\n            None => None,\r\n        }\r\n    }\r\n}\r\n\r\npub struct Filter<S, F> {\r\n    stream: S,\r\n    func: F,\r\n}\r\n\r\nimpl<'a, A, F, T> Stream for &'a mut Filter<A, F>\r\n    where for<'b> &'b mut A: Stream<Item=T>, // <---- BAD\r\n          F: FnMut(&T) -> bool,\r\n{\r\n    type Item = <&'a mut A as Stream>::Item;\r\n    fn next(self) -> Option<Self::Item> {\r\n        while let Some(item) = self.stream.next() {\r\n            if (self.func)(&item) {\r\n                return Some(item);\r\n            }\r\n        }\r\n        None\r\n    }\r\n}\r\n\r\npub trait StreamExt where for<'b> &'b mut Self: Stream {\r\n    fn map<F>(self, func: F) -> Map<Self, F>\r\n        where Self: Sized,\r\n              for<'a> &'a mut Map<Self, F>: Stream,\r\n    {\r\n        Map {\r\n            func: func,\r\n            stream: self,\r\n        }\r\n    }\r\n\r\n    fn filter<F>(self, func: F) -> Filter<Self, F>\r\n        where Self: Sized,\r\n              for<'a> &'a mut Filter<Self, F>: Stream,\r\n    {\r\n        Filter {\r\n            func: func,\r\n            stream: self,\r\n        }\r\n    }\r\n\r\n    fn count(mut self) -> usize\r\n        where Self: Sized,\r\n    {\r\n        let mut count = 0;\r\n        while let Some(_) = self.next() {\r\n            count += 1;\r\n        }\r\n        count\r\n    }\r\n}\r\n\r\nimpl<T> StreamExt for T where for<'a> &'a mut T: Stream { }\r\n\r\n```\r\n\r\nThe problem is the interaction between the `Filter` and `Map` adapters. The following works iff the map adapter appears before the filter adapter.\r\n\r\n``` rust\r\nfn main() {\r\n    let source = Repeat(10);\r\n    let map = source.map(|x: &_| x); // Remove to break.\r\n    let filter = map.filter(|x: &_| true);\r\n    let count = filter.count(); // Assert that we still have a valid stream.\r\n}\r\n```\r\n\r\nHowever, this should _never_ work due to the `for<'b> &'b mut A: Stream<Item=T>` constraint on the `Filter` implementation above (marked BAD). Basically, this constraint _should_ assert the stream's `Item` is the same independent of `'b` which should mean that this item doesn't borrow from it's stream (as a matter of fact, I'm using this exact constraint to implement an adapter for converting streams to iterators). However, items returned by both the `map` and `source` streams above do obviously borrow from their streams.\r\n\r\nCorrect error without map:\r\n\r\n``` text\r\ntest.rs:90:12: 90:32 error: type mismatch resolving `for<'b> <&'b mut Repeat as Stream>::Item == _`:\r\n expected bound lifetime parameter 'b,\r\n    found concrete lifetime [E0271]\r\ntest.rs:90           .filter(|l: &_| true)\r\n                      ^~~~~~~~~~~~~~~~~~~~\r\ntest.rs:90:12: 90:32 help: run `rustc --explain E0271` to see a detailed explanation\r\ntest.rs:91:12: 91:19 error: no method named `count` found for type `Filter<Repeat, [closure@test.rs:90:19: 90:31]>` in the current scope\r\ntest.rs:91           .count();\r\n                      ^~~~~~~\r\ntest.rs:91:12: 91:19 note: the method `count` exists but the following trait bounds were not satisfied: `&'a mut Filter<Repeat, [closure@test.rs:90:19: 90:31]> : Stream`, `&'a mut &Filter<Repeat, [closure@test.rs:90:19: 90:31]> : Stream`, `&'a mut &mut Filter<Repeat, [closure@test.rs:90:19: 90:31]> : Stream`, `Filter<Repeat, [closure@test.rs:90:19: 90:31]> : core::iter::Iterator`\r\ntest.rs:91:12: 91:19 help: items from traits can only be used if the trait is implemented and in scope; the following traits define an item `count`, perhaps you need to implement one of them:\r\ntest.rs:91:12: 91:19 help: candidate #1: `StreamExt`\r\ntest.rs:91:12: 91:19 help: candidate #2: `core::iter::Iterator`\r\nerror: aborting due to 2 previous errors\r\n```\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/30786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/30786/timeline", "performed_via_github_app": null, "state_reason": "completed"}