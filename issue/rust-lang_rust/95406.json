{"url": "https://api.github.com/repos/rust-lang/rust/issues/95406", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/95406/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/95406/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/95406/events", "html_url": "https://github.com/rust-lang/rust/issues/95406", "id": 1183671213, "node_id": "I_kwDOAAsO6M5GjWOt", "number": 95406, "title": "internal compiler error: thread 'rustc' panicked at 'Box<dyn Any>'", "user": {"login": "nwalfield", "id": 1164560, "node_id": "MDQ6VXNlcjExNjQ1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/1164560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwalfield", "html_url": "https://github.com/nwalfield", "followers_url": "https://api.github.com/users/nwalfield/followers", "following_url": "https://api.github.com/users/nwalfield/following{/other_user}", "gists_url": "https://api.github.com/users/nwalfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwalfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwalfield/subscriptions", "organizations_url": "https://api.github.com/users/nwalfield/orgs", "repos_url": "https://api.github.com/users/nwalfield/repos", "events_url": "https://api.github.com/users/nwalfield/events{/privacy}", "received_events_url": "https://api.github.com/users/nwalfield/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-03-28T16:17:17Z", "updated_at": "2022-12-16T08:24:48Z", "closed_at": "2022-12-16T07:53:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\nYou can find a small example [in the gitlab repo](https://gitlab.com/sequoia-pgp/rpm-sequoia/-/blob/ice-demo/src/lib.rs).\r\n\r\nThe relevant code is:\r\n\r\n```Rust\r\nmacro_rules! ffi {\r\n    // $Crt is the C function's return type.  It must be possible to\r\n    // convert an Error value v of type $rt to a value of type $Crt by doing:\r\n    // $Crt::from($rt).\r\n    //\r\n    // $ok is the value (of type $rt) to map Ok to.\r\n    (fn $f:ident($($v:ident: $t:ty),*)\r\n        -> Result<$rt:ty, $et:ty>\r\n        -> ($Crt:ty; $rt_to_crt:expr; $err_to_crt: expr)\r\n        $body:block\r\n     ) =>\r\n    {\r\n        // The wrapper.  It calls $f and turns the result into an\r\n        // error code.\r\n        #[allow(unused)]\r\n        #[no_mangle] pub extern \"C\"\r\n        fn $f($($v: $t),*) -> $Crt {\r\n            // The actual function.\r\n            fn inner($($v: $t),*) -> std::result::Result<$rt, $et> { $body }\r\n\r\n            // We use AssertUnwindSafe.  This is safe, because if we\r\n            // catch a panic, we abort.  If we turn the panic into an\r\n            // error, then we need to reexamine this assumption.\r\n            let r = std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| {\r\n                match inner($($v,)*) {\r\n                    Ok(v) => {\r\n                        let rt: $Crt = $rt_to_crt(v);\r\n                        rt\r\n                    }\r\n                    Err(err) => {\r\n\r\n                        let rt: $Crt = $err_to_crt(err);\r\n                        rt\r\n                    }\r\n                }\r\n            }));\r\n            match r {\r\n                Ok(code) => code,\r\n                Err(_) => {\r\n                    unsafe { ::libc::abort() };\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nffi!(fn pgpSignatureType(dig: *const c_int)\r\n     -> Result<c_int, crate::Error>\r\n     -> (c_int;\r\n         |v| {\r\n             v\r\n         };\r\n         |_| -1)\r\n{\r\n    panic!();\r\n});\r\n```\r\n\r\nWhen I try to inline the `ffi!` macro invocation, the error goes away (see my commented example for my attempt).\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nIn my `rust-roolchain` file, I have\r\n1.59.0.  It works fine with 1.56.1.\r\n\r\n### Error output\r\n\r\n```\r\n   Compiling rpm-sequoia v0.1.0 (/home/us/neal/work/pep/rpm-sequoia)\r\nerror: internal compiler error: compiler/rustc_codegen_llvm/src/context.rs:867:13: failed to get layout for `[type error]`: the type `[type error]` has an unknown layout\r\n   --> src/lib.rs:58:22\r\n    |\r\n58  |           #[no_mangle] pub extern \"C\"\r\n    |  ______________________^\r\n59  | |         fn $f($($v: $t),*) -> $Crt {\r\n    | |__________________________________^\r\n...\r\n120 | / ffi!(fn pgpSignatureType(dig: *const c_int)\r\n121 | |      -> Result<c_int, crate::Error>\r\n122 | |      -> (c_int;\r\n123 | |          |v| {\r\n...   |\r\n128 | |     panic!();\r\n129 | | });\r\n    | |__- in this macro invocation\r\n    |\r\n    = note: this error: internal compiler error originates in the macro `ffi` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/compiler/rustc_errors/src/lib.rs:1115:9\r\nstack backtrace:\r\n   0: std::panicking::begin_panic::<rustc_errors::ExplicitBug>\r\n   1: std::panic::panic_any::<rustc_errors::ExplicitBug>\r\n   2: <rustc_errors::HandlerInner>::span_bug::<rustc_span::span_encoding::Span>\r\n   3: <rustc_errors::Handler>::span_bug::<rustc_span::span_encoding::Span>\r\n   4: rustc_middle::ty::context::tls::with_opt::<rustc_middle::util::bug::opt_span_bug_fmt<rustc_span::span_encoding::Span>::{closure#0}, ()>\r\n   5: rustc_middle::util::bug::opt_span_bug_fmt::<rustc_span::span_encoding::Span>\r\n   6: rustc_middle::util::bug::span_bug_fmt::<rustc_span::span_encoding::Span>\r\n   7: <rustc_codegen_llvm::context::CodegenCx as rustc_middle::ty::layout::LayoutOfHelpers>::handle_layout_err\r\n   8: <rustc_codegen_llvm::context::CodegenCx as rustc_middle::ty::layout::LayoutOf>::spanned_layout_of::{closure#0}\r\n   9: rustc_codegen_ssa::mir::analyze::non_ssa_locals::<rustc_codegen_llvm::builder::Builder>\r\n  10: rustc_codegen_ssa::mir::codegen_mir::<rustc_codegen_llvm::builder::Builder>\r\n  11: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\r\n  12: rustc_codegen_llvm::base::compile_codegen_unit\r\n  13: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\r\n  14: <rustc_session::session::Session>::time::<alloc::boxed::Box<dyn core::any::Any>, rustc_interface::passes::start_codegen::{closure#0}>\r\n  15: <rustc_interface::queries::Queries>::ongoing_codegen\r\n  16: <rustc_interface::interface::Compiler>::enter::<rustc_driver::run_compiler::{closure#1}::{closure#2}, core::result::Result<core::option::Option<rustc_interface::queries::Linker>, rustc_errors::ErrorReported>>\r\n  17: rustc_span::with_source_map::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_interface::interface::create_compiler_and_run<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>::{closure#1}>\r\n  18: rustc_interface::interface::create_compiler_and_run::<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>\r\n  19: <scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::set::<rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorReported>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorReported>>\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.59.0 (9d1b2106e 2022-02-23) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type cdylib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: could not compile `rpm-sequoia`\r\n```\r\n", "closed_by": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/95406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/95406/timeline", "performed_via_github_app": null, "state_reason": "completed"}