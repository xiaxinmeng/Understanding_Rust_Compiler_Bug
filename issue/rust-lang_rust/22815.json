{"url": "https://api.github.com/repos/rust-lang/rust/issues/22815", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/22815/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/22815/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/22815/events", "html_url": "https://github.com/rust-lang/rust/issues/22815", "id": 58975246, "node_id": "MDU6SXNzdWU1ODk3NTI0Ng==", "number": 22815, "title": "ty::type_contents is too imprecise in some cases (e.g. when called from trans)", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-02-25T21:46:45Z", "updated_at": "2020-07-17T22:17:09Z", "closed_at": "2020-07-17T22:17:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "spawned off of #22536 \n\n@nikomatsakis tells me that trans has been migrating away from its uses of `ty::type_contents` (or perhaps he meant that `rustc` in general is migrating away from using it).   But there are still places that rely on it to drive particular bits of logic.\n\nThis is problematic because `ty::type_contents` is designed to produce a set of properties that could hold for the given type, _depending_ on what is substituted for its type parameters; this is in stark contrast to `trans`, which deals directly with a monomorphized (and normalized type), where all of the relevant information needed for codegen is readily available.\n- One might think that there is apparently no problem here at all: surely a monomorphized and normalized type has no free type parameters, and thus the question of substitutions is irrelevant?  \n- Unfortunately, the way that `ty::type_contents` is written, it _is_ relevant, because when you compute the type contents of a struct instance like `BufferHandle<Res>`, the logic of `ty::type_contents` recursively processes its fields (after substitution), namely the type `<Res as Resources>::Buffer`.  But at this point, type contents just says \"That's a projection; anything could be substituted in for that\", and produces the most conservative result (a bitset holding all ones for the type-contents).  And then that conservative result pollutes the type-contents for the whole `BufferHandle<Res>` overall.\n- The specific line here regarding the \"That's a projection; ...\" is [here](https://github.com/rust-lang/rust/blob/36d04711b774dd97d8341881d26786733a5a6561/src/librustc/middle/ty.rs#L3585) in `ty::ty_contents`.\n\nI am going to try to fix the actual unsoundness that results from the problems above by avoiding relying on `ty::type_contents` as anything but an conservative approxmation within trans.\n\nThis ticket is to log the cases (in e.g. trans, but potentially also elsewhere) where there still are calls to `ty:type_contents`, so that we can go back and replace them with something better.  (E.g., perhaps a new version of type contents has the inputs it needs to normalize types as it descends through their structure, which `ty::type_contents` does not currently have.)\n\nMy hope is that the cases listed on this ticket do not reflect cases where we have unsound behavior, but merely cases where we can in some cases produce lower quality code than we would otherwise.\n- Update: This description was originally written in the context of a use of `ty::type_contents` from trans, but pnkfelix hypothesized based on #22828 that the same problem affects other parts of the compiler true, resulting not merely in lower quality code, but also ... \"expressiveness exceptions.\"  (Better term, anyone?)\n\n---\n\nFootnote:  In the concrete example of #22536, the particular issue is that the decision about whether to zero the original memory after copying-or-moving a value from one place to another is based on looking up the \"needs_drop\" bit in the type contents.  Since the type contents is all-ones, we are meant to conclude \"I guess this value might have an associated destructor.\"  Of course, this is very wrong in the case of trans, where given \"this _might_ have an associated destructor\", it is very wrong to conclude \"I must need to zero the original memory where I got the value.\"  We can (and I will) fix the particular issue of #22536 on its own.  But I want to file this ticket first so that I have an issue number to put into comments near the uses of `ty:type_contents` that remain.\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/22815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/22815/timeline", "performed_via_github_app": null, "state_reason": "completed"}