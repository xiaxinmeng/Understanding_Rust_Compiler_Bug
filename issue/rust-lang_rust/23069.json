{"url": "https://api.github.com/repos/rust-lang/rust/issues/23069", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/23069/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/23069/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/23069/events", "html_url": "https://github.com/rust-lang/rust/issues/23069", "id": 59960841, "node_id": "MDU6SXNzdWU1OTk2MDg0MQ==", "number": 23069, "title": "Fun with associated types, Iterator, and IntoIterator", "user": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-03-05T14:44:27Z", "updated_at": "2016-05-14T15:59:17Z", "closed_at": "2016-05-14T15:59:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "(The following is a reduced example)\n\nI have a composite two-level structure which I want to iterate. This involves iterating the first level to obtain blocks of the second level, which are in turn iterated. We would like to update this code to use associated types.\n\nMy first attempt is as follows:\n\n``` rust\nuse std::iter::IntoIterator;\n\nstruct AbsIter<DListIter, VecDequeIter> {\n    list_iter: DListIter,\n    block_iter: VecDequeIter,\n}\n\nimpl<VecDequeIter, DListIter> Iterator for AbsIter<DListIter, VecDequeIter> where\n    VecDequeIter: Iterator,\n    DListIter: Iterator,\n    // adding Item=VecDequeIter::Item solves issue\n    DListIter::Item: IntoIterator<IntoIter=VecDequeIter> \n{\n    type Item = VecDequeIter::Item;\n    fn next(&mut self) -> Option<VecDequeIter::Item> {\n        let block = self.list_iter.next().unwrap();\n        self.block_iter = block.into_iter();\n        self.block_iter.next()\n    }\n}\n\nfn main(){}\n```\n\nbut this errors out with:\n\n```\n<anon>:17:33: 17:44 error: type mismatch resolving `<VecDequeIter as core::iter::Iterator>::Item == <<DListIter as core::iter::Iterator>::Item as core::iter::IntoIterator>::Item`:\n expected trait `core::iter::Iterator`,\n    found trait `core::iter::IntoIterator` [E0271]\n<anon>:17         self.block_iter = block.into_iter();\n                                          ^~~~~~~~~~~\n```\n\nWhich doesn't make any sense to me. It looks like it might be a bug. Still, it's easily resolved by making the change in the comment: adding `Item=VecDequeIter::Item` to the IntoIterator bound solves this.\n\nI then notice that actually VecDequeIter need not be a generic argument, it follows from DListIter. Ok, let's do that:\n\n``` rust\nuse std::iter::IntoIterator;\n\nstruct AbsIter<DListIter, VecDequeIter> {\n    list_iter: DListIter,\n    block_iter: VecDequeIter,\n}\n\nimpl<DListIter> Iterator for \nAbsIter<DListIter, <DListIter::Item as IntoIterator>::IntoIter> where\n    DListIter: Iterator,\n    DListIter::Item: IntoIterator,\n{\n    type Item = <DListIter::Item as IntoIterator>::Item;\n    fn next(&mut self) -> Option<<Self as Iterator>::Item> {\n        let block = self.list_iter.next().unwrap();\n        self.block_iter = block.into_iter();\n        self.block_iter.next()\n    }\n}\n\nfn main(){}\n```\n\nIgnoring the apparently necessary `as IntoIterator`'s, this triggers some clearly exponential behaviour in the coherence checker:\n\n```\ntime: 0.000     parsing\ntime: 0.000     recursion limit\ntime: 0.000     gated macro checking\ntime: 0.000     configuration 1\ntime: 0.000     crate injection\ntime: 0.004     macro loading\ntime: 0.000     plugin loading\ntime: 0.000     plugin registration\ntime: 0.001     expansion\ntime: 0.000     complete gated feature checking\ntime: 0.000     configuration 2\ntime: 0.000     maybe building test harness\ntime: 0.000     prelude injection\ntime: 0.000     checking that all macro invocations are gone\ntime: 0.000     assigning node ids and indexing ast\ntime: 0.000     external crate/lib resolution\ntime: 0.000     language item collection\ntime: 0.004     resolution\ntime: 0.000     lifetime resolution\ntime: 0.000     looking for entry point\ntime: 0.000     looking for plugin registrar\ntime: 0.000     region resolution\ntime: 0.000     loop checking\ntime: 0.000     static item recursion checking\ntime: 0.000     type collecting\ntime: 0.000     variance inference\ntime: 16.663    coherence checking\ntime: 0.420     type checking\ntime: 0.110     const checking\ntime: 0.000     privacy checking\ntime: 0.000     stability index\ntime: 0.000     intrinsic checking\ntime: 0.000     effect checking\ntime: 0.001     match checking\ntime: 0.000     liveness checking\ntime: 0.212     borrow checking\ntime: 0.110     rvalue checking\ntime: 0.000     reachability checking\ntime: 0.000     death checking\ntime: 0.001     stability checking\ntime: 0.000     unused lib feature checking\ntime: 0.001     lint checking\ntime: 0.000     resolving dependency formats\ntime: 0.002     translation\n  time: 0.000   llvm function passes\n  time: 0.000   llvm module passes\n  time: 0.009   codegen passes\n  time: 0.000   codegen passes\ntime: 0.016     LLVM passes\n  time: 0.387   running linker\ntime: 0.387     linking\n```\n", "closed_by": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/23069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/23069/timeline", "performed_via_github_app": null, "state_reason": "completed"}