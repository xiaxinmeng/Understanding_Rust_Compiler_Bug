{"url": "https://api.github.com/repos/rust-lang/rust/issues/88793", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88793/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88793/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88793/events", "html_url": "https://github.com/rust-lang/rust/issues/88793", "id": 992603584, "node_id": "MDU6SXNzdWU5OTI2MDM1ODQ=", "number": 88793, "title": "Missing MIR optimization: Replace matches with loads if possible", "user": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 1927601458, "node_id": "MDU6TGFiZWwxOTI3NjAxNDU4", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt", "name": "A-mir-opt", "color": "f7e101", "default": false, "description": "Area: MIR optimizations"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-09-09T20:27:14Z", "updated_at": "2022-01-14T00:46:47Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Many times, people write matches on enums that are really loads from a table. It'd be nice if we could codegen them as such.\r\n\r\nHere's an example, at https://godbolt.org/z/4P9v61an7:\r\n\r\n```rust\r\npub enum Char {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n    G,\r\n    H,\r\n    I,\r\n    J,\r\n    K,\r\n    L,\r\n}\r\n\r\npub fn to_str(val: Char) -> &'static str {\r\n    match val {\r\n        Char::A => \"A\",\r\n        Char::B => \"B\",\r\n        Char::C => \"C\",\r\n        Char::D => \"D\",\r\n        Char::E => \"E\",\r\n        Char::F => \"F\",\r\n        Char::G => \"G\",\r\n        Char::H => \"H\",\r\n        Char::I => \"I\",\r\n        Char::J => \"J\",\r\n        Char::K => \"K\",\r\n        Char::L => \"L\",\r\n    }\r\n}\r\n```\r\n\r\nThe codegen here has a lot to be desired:\r\n\r\n```asm\r\nexample::to_str:\r\n        lea     rax, [rip + .L__unnamed_1]\r\n        movzx   ecx, dil\r\n        lea     rdx, [rip + .LJTI0_0]\r\n        movsxd  rcx, dword ptr [rdx + 4*rcx]\r\n        add     rcx, rdx\r\n        jmp     rcx\r\n.LBB0_1:\r\n        lea     rax, [rip + .L__unnamed_2]\r\n        mov     edx, 1\r\n        ret\r\n.LBB0_2:\r\n        lea     rax, [rip + .L__unnamed_3]\r\n        mov     edx, 1\r\n        ret\r\n.LBB0_3:\r\n        lea     rax, [rip + .L__unnamed_4]\r\n        mov     edx, 1\r\n        ret\r\n.LBB0_4:\r\n        lea     rax, [rip + .L__unnamed_5]\r\n        mov     edx, 1\r\n        ret\r\n.LBB0_5:\r\n        lea     rax, [rip + .L__unnamed_6]\r\n        mov     edx, 1\r\n        ret\r\n.LBB0_6:\r\n        lea     rax, [rip + .L__unnamed_7]\r\n        mov     edx, 1\r\n        ret\r\n.LBB0_7:\r\n        lea     rax, [rip + .L__unnamed_8]\r\n        mov     edx, 1\r\n        ret\r\n.LBB0_8:\r\n        lea     rax, [rip + .L__unnamed_9]\r\n        mov     edx, 1\r\n        ret\r\n.LBB0_9:\r\n        lea     rax, [rip + .L__unnamed_10]\r\n        mov     edx, 1\r\n        ret\r\n.LBB0_10:\r\n        lea     rax, [rip + .L__unnamed_11]\r\n        mov     edx, 1\r\n        ret\r\n.LBB0_11:\r\n        lea     rax, [rip + .L__unnamed_12]\r\n.LBB0_12:\r\n        mov     edx, 1\r\n        ret\r\n.LJTI0_0:\r\n        .long   .LBB0_12-.LJTI0_0\r\n        .long   .LBB0_1-.LJTI0_0\r\n        .long   .LBB0_2-.LJTI0_0\r\n        .long   .LBB0_3-.LJTI0_0\r\n        .long   .LBB0_4-.LJTI0_0\r\n        .long   .LBB0_5-.LJTI0_0\r\n        .long   .LBB0_6-.LJTI0_0\r\n        .long   .LBB0_7-.LJTI0_0\r\n        .long   .LBB0_8-.LJTI0_0\r\n        .long   .LBB0_9-.LJTI0_0\r\n        .long   .LBB0_10-.LJTI0_0\r\n        .long   .LBB0_11-.LJTI0_0\r\n\r\n.L__unnamed_12:\r\n        .byte   76\r\n\r\n.L__unnamed_11:\r\n        .byte   75\r\n\r\n.L__unnamed_10:\r\n        .byte   74\r\n\r\n.L__unnamed_9:\r\n        .byte   73\r\n\r\n.L__unnamed_8:\r\n        .byte   72\r\n\r\n.L__unnamed_7:\r\n        .byte   71\r\n\r\n.L__unnamed_6:\r\n        .byte   70\r\n\r\n.L__unnamed_5:\r\n        .byte   69\r\n\r\n.L__unnamed_4:\r\n        .byte   68\r\n\r\n.L__unnamed_3:\r\n        .byte   67\r\n\r\n.L__unnamed_2:\r\n        .byte   66\r\n\r\n.L__unnamed_1:\r\n        .byte   65\r\n```\r\n\r\nDeriving Debug can cause poor codegen too: https://godbolt.org/z/xnexGxo8e\r\n\r\nThere's some discussion on Twitter from LLVM folks that suggests this would be best as an MIR optzn: https://twitter.com/pcwalton/status/1436036809603960835\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88793/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88793/timeline", "performed_via_github_app": null, "state_reason": null}