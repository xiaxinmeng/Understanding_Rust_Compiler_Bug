{"url": "https://api.github.com/repos/rust-lang/rust/issues/19022", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19022/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19022/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19022/events", "html_url": "https://github.com/rust-lang/rust/issues/19022", "id": 49039994, "node_id": "MDU6SXNzdWU0OTAzOTk5NA==", "number": 19022, "title": "I'd like an efficient way to discard data from a Reader.", "user": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-11-17T05:15:17Z", "updated_at": "2015-01-24T22:15:45Z", "closed_at": "2015-01-24T22:15:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# The problem.\n\nSay I want to skip the next `n` bytes of input from a `Reader`. Currently, I can see two ways of doing this, neither of which are ideal. \n- Allocate a `Vec<u8>` of size `n`. Call `read` on it. Discard the `Vec<u8>`.  This has the disadvantage of doing an unnecessary allocation and unnecessary copying. Note that calling `read_exact` is equivalent to this.\n- Call `read_u8` `n` times. This has this the disadvantage of doing `n` function calls, which may even translate to `n` syscalls. For any significant `n` this is going to be worse than the first option.\n# The solution.\n\nHave `Reader` expose a method `skip_exact` that skips the next `n` bytes. For some readers such as `MemReader` and `BufferedReader` this just means advancing the cursor by `n`. For some other readers this could be implemented using seek. For other readers again this method can be given a default implementation that just calls `read_exact`.\n\nNote that I can't just call `seek(n, SeekCur)`. Not all readers implement `Seek` (socket streams for example) but all readers can be advanced from their current position by - in the worst case - just reading and throwing away data.\n", "closed_by": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19022/timeline", "performed_via_github_app": null, "state_reason": "completed"}