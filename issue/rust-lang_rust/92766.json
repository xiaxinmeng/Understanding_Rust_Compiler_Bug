{"url": "https://api.github.com/repos/rust-lang/rust/issues/92766", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92766/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92766/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92766/events", "html_url": "https://github.com/rust-lang/rust/issues/92766", "id": 1099296194, "node_id": "I_kwDOAAsO6M5Bhe3C", "number": 92766, "title": "Modifying a single subpattern in match changes MIR dramatically", "user": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-01-11T15:26:12Z", "updated_at": "2023-04-05T17:41:35Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This is originated from `~const Drop`, but is applicable to non-const functions as well. The problem is best seen as the MIR output for two implementations of `Result::ok` with a minor change: ([play](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a208ee8b303c7a3cf2685ad9f259c8f8))\r\n\r\n```rust\r\npub fn wildcard<T, E>(res: Result<T, E>) -> Option<T> {\r\n    match res {\r\n        Ok(x) => Some(x),\r\n        Err(_) => None,\r\n    }\r\n}\r\n\r\npub fn bind_to_variable<T, E>(res: Result<T, E>) -> Option<T> {\r\n    match res {\r\n        Ok(x) => Some(x),\r\n        Err(_x) => None,\r\n    }\r\n}\r\n```\r\n\r\nI won't post the whole MIR output here, but let me illustrate this issue with a handwritten control flow graph:\r\n\r\n```\r\n           wildcard\r\n              |\r\nswitch on discriminant for `res` ------------ `Ok(x)`\r\n              |                                 |\r\n            `Err`             Move `x` into return value as `Some(x)`\r\n              |                                 |\r\nSet return value as `None`                      /\r\n              |---------------------------------\r\n              |\r\nswitch on discriminant for `res` ------------ `Ok`\r\n              |                                 |\r\n            `Err`                               |\r\n              |                                 |\r\n    `drop(res: Result<T, E>)`                   /\r\n              |---------------------------------\r\n              |\r\n            return\r\n\r\n\r\n\r\n       bind_to_variable\r\n              |\r\nswitch on discriminant for `res` ------------- `Ok(x)`\r\n              |                                  |\r\n            `Err`             Move `x` into return value as `Some(x)`\r\n              |                                  |\r\n   Move value in `Err` to `_x`                   |\r\n              |                                  |\r\n        `drop(_x: E)`                            |\r\n              |                                  |\r\n    Set return value as `None`                   /\r\n              |----------------------------------\r\n              |\r\n            return\r\n```\r\n\r\n`wildcard` is unexpectedly more complex and performs `switchInt` on `x` for two times instead of one. I think ideally we should always generate MIR as the second graph.\r\n\r\nSee https://github.com/rust-lang/rust/pull/92433#discussion_r782242057 and [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Exact.20semantics.20for.20match.20and.20drop.20glue.20emitted)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92766/timeline", "performed_via_github_app": null, "state_reason": null}