{"url": "https://api.github.com/repos/rust-lang/rust/issues/109099", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109099/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109099/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109099/events", "html_url": "https://github.com/rust-lang/rust/issues/109099", "id": 1622269195, "node_id": "I_kwDOAAsO6M5gsd0L", "number": 109099, "title": "Check tier 3 targets in CI", "user": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234876, "node_id": "MDU6TGFiZWwyMzQ4NzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-hard", "name": "E-hard", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Hard / a lot"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 593503757, "node_id": "MDU6TGFiZWw1OTM1MDM3NTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-infra", "name": "T-infra", "color": "bfd4f2", "default": false, "description": "Relevant to the infrastructure team, which will review and decide on the PR/issue."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2023-03-13T21:13:20Z", "updated_at": "2023-03-29T14:56:08Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "**NOTE: this issue does not affect the documented target tier policy of the Rust project. We reserve the right to break tier 3 targets at any time, according to the guidelines at https://doc.rust-lang.org/nightly/rustc/target-tier-policy.html#tier-3-target-policy.**\r\n\r\nCurrently, maintaining `std` for tier 3 targets is very painful for t-libs: `std::sys` is highly platform dependent, and we have no tier 2 targets that use `sys::unsupported` so it's hard to tell if it even compiles. To reduce the maintenance burden, I propose we start running `x check --target foo` for each tier 3 target, to make sure it compiles.\r\n\r\nNote that this does *not* involve distributing any release artifacts; users wanting to target tier 3 platforms will still need to build rustc from source or use `-Zbuild-std`, but it's more likely the standard library will at least compile, even if we make no guarantees about whether it will run correctly.\r\n\r\nWe have a few options about how to test this:\r\n1. Run this on PR CI only, which acts as a janky \"allow-fail\" action.\r\n2. Run this in bors merges, which requires it to pass for the PR to merge. To allow the target to fail to compile, we'd manually disable it in the `src/ci` test runner file.\r\n3. Add an allow-fail action which runs on bors merges, which doesn't block the merge but still lets us know when the target fails to build. I'm a little hesitant about this because I think it's rare people will actually look at the CI for the master branch, but maybe it's good enough.\r\n\r\nI suggest that we wait to decide until the PR fixing these targets, since that will let us know the extent of the current breakage, and gives us a rough estimate of how much effort it will be to keep these compiling (option 2).\r\n\r\nI'm very curious to hear @rust-lang/libs's opinion on this, particularly on the testing strategy and whether they think this will increase or decrease the maintenance burden.\r\n\r\ncc https://rust-lang.zulipchat.com/#narrow/stream/242791-t-infra/topic/.60x.20check.60.20for.20tier.203.20targets\r\n\r\n---\r\n\r\nMentoring instructions:\r\n\r\n1. Add a new CI job which runs `x check --stage 1` for each tier 3 platform. https://github.com/rust-lang/rust/blob/4a2de63ae3d395481017aafbc37690c091d41d32/src/doc/rustc/src/platform-support.md#L211-L322 *should* be up to date; feel free to post here or on zulip if there are targets that are supported by the compiler but not in that document.\r\n  1a. maybe we should add a tool to keep those in sync?\r\n2. Put up a PR so the CI job runs. Fix compile errors as appropriate. Some targets may not compile on all hosts (e.g. iOS will likely need a macOS host, any MSVC target will need an MSVC host); either find a way to add support or add more runners so all targets are covered. Try to avoid spending too much time on any single target; if it takes too long it's ok to skip it for now. If it ends up being an ongoing issue to support a specific target we may want to consider asking one of the target maintainers (and if they're unresponsive, or there are no maintainers, making a t-compiler MCP to remove it).\r\n\r\ncc @joboet, I think you said you were working on making it easier to cross-check targets from any host.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109099/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109099/timeline", "performed_via_github_app": null, "state_reason": null}