{"url": "https://api.github.com/repos/rust-lang/rust/issues/98931", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98931/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98931/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98931/events", "html_url": "https://github.com/rust-lang/rust/issues/98931", "id": 1294302805, "node_id": "I_kwDOAAsO6M5NJX5V", "number": 98931, "title": "Type inference on [const] generic defaults", "user": {"login": "WalterSmuts", "id": 17950515, "node_id": "MDQ6VXNlcjE3OTUwNTE1", "avatar_url": "https://avatars.githubusercontent.com/u/17950515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WalterSmuts", "html_url": "https://github.com/WalterSmuts", "followers_url": "https://api.github.com/users/WalterSmuts/followers", "following_url": "https://api.github.com/users/WalterSmuts/following{/other_user}", "gists_url": "https://api.github.com/users/WalterSmuts/gists{/gist_id}", "starred_url": "https://api.github.com/users/WalterSmuts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WalterSmuts/subscriptions", "organizations_url": "https://api.github.com/users/WalterSmuts/orgs", "repos_url": "https://api.github.com/users/WalterSmuts/repos", "events_url": "https://api.github.com/users/WalterSmuts/events{/privacy}", "received_events_url": "https://api.github.com/users/WalterSmuts/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2022-07-05T13:27:17Z", "updated_at": "2023-03-22T13:02:10Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Currently you're able to define default const parameters for a type.  This is explained [here](https://blog.rust-lang.org/inside-rust/2021/09/06/Splitting-const-generics.html#featureconst_generics_defaults). This allows one to write generic `impl` blocks but requires some explicit type coercion as shown in [this stack-overflow article on the `new` constructor](https://stackoverflow.com/questions/71233548/rust-cannot-infer-the-value-of-const-parameter-when-a-default-is-provided). \r\n\r\nIt would be great if rust can infer that the type has to be the return type of the `new` constructor and, if the const parameter is not provided, infer that the type defaults to the default const value.\r\n\r\nThe stack-overflow article had me confused for a bit (see [this reddit post](https://www.reddit.com/r/rust/comments/vrvl6t/defaults_for_const_parameters_in_impl_blocks/)) so I'll provide a more explicit example:\r\n```rust\r\n#[derive(Debug)]\r\nstruct Foo<const N: usize = 1> {\r\n    set_on_creation: bool,\r\n    passed_in: bool,\r\n    generic_field: [usize; N],\r\n}\r\n\r\nimpl<const N: usize> Foo<N> {\r\n    pub fn new(passed_in: bool) -> Self {\r\n        Self {\r\n            set_on_creation: true,\r\n            passed_in,\r\n            generic_field: [0; N],\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let a = Foo::new(true);\r\n    dbg!(a);\r\n    let b = Foo::new(false);\r\n    dbg!(b);\r\n    let c: Foo<2> = Foo::new(false);\r\n    dbg!(c);\r\n}\r\n```\r\n\r\nI expected to see this happen: \r\nSuccessfully infer that the type has to be the default const variant of the type.\r\n\r\nInstead, this happened:\r\n```\r\nerror[E0282]: type annotations needed for `Foo<N>`\r\n  --> src/main.rs:19:13\r\n   |\r\n19 |     let a = Foo::new(true);\r\n   |         -   ^^^^^^^^ cannot infer the value of const parameter `N`\r\n   |         |\r\n   |         consider giving `a` the explicit type `Foo<N>`, where the const parameter `N` is specified\r\n```\r\n### Clarity\r\nTo be clear, the following works:\r\n```rust\r\n    let a: Foo = Foo::new(true);\r\n```\r\nbut this does not:\r\n```rust\r\n    let a = Foo::new(true);\r\n```\r\nOn the face of it the above looks silly. \r\n\r\n### Meta\r\nBug is also present on `nightly`.\r\n\r\n```\r\n[walter@cuddles const-generic-default-playground]$ rustc --version --verbose\r\nrustc 1.60.0 (7737e0b5c 2022-04-04)\r\nbinary: rustc\r\ncommit-hash: 7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c\r\ncommit-date: 2022-04-04\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.60.0\r\nLLVM version: 14.0.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98931/timeline", "performed_via_github_app": null, "state_reason": null}