{"url": "https://api.github.com/repos/rust-lang/rust/issues/1492", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1492/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1492/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1492/events", "html_url": "https://github.com/rust-lang/rust/issues/1492", "id": 2805011, "node_id": "MDU6SXNzdWUyODA1MDEx", "number": 1492, "title": "Should it be possible to use a boxed iface type for a parameter bounded on itself?", "user": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-01-11T14:44:39Z", "updated_at": "2014-06-16T21:56:26Z", "closed_at": "2012-01-12T16:06:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I.e.\n\n```\niface foo { fn foo(); }\nfn do_foo<T: fooable>(x: T) { x.foo(); }\nfn do_foo_with_foo(x: foo) { do_foo(x); } // Does not compile\n```\n\nThe reason that does not compile is that no dictionary can be passed for type `foo`, since that is a generalization of all types that conform to the `foo` interface, and thus doesn't have a single dict associated with it.\n\nThis seems a big enough composability hazard to merit a workaround. Unfortunately, the workaround is somewhat ugly. We could allow the compiler to pass NULL for the dict pointer in such a case, and have the code that looks up a function in a dict check, and if it finds a NULL, it could go into a codepath that fetches both the dict and the actual self value from the box. This causes a lot of branches and extra code to be generated. Another, also wasteful approach is to generate a second version of the function (`do_foo` in the example), which doesn't take a dict for the parameter bound, but simply expects the T type to be a boxed `foo`, and calls that when passing a value of type `foo` to `do_foo`.\n", "closed_by": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1492/timeline", "performed_via_github_app": null, "state_reason": "completed"}