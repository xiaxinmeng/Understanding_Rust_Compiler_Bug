{"url": "https://api.github.com/repos/rust-lang/rust/issues/29661", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29661/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29661/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29661/events", "html_url": "https://github.com/rust-lang/rust/issues/29661", "id": 115559940, "node_id": "MDU6SXNzdWUxMTU1NTk5NDA=", "number": 29661, "title": "Tracking issue for RFC 2532, \"Associated type defaults\"", "user": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89436934, "node_id": "MDU6TGFiZWw4OTQzNjkzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-RFC-approved", "name": "B-RFC-approved", "color": "d304cb", "default": false, "description": "Approved by a merged RFC but not yet implemented."}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 693664741, "node_id": "MDU6TGFiZWw2OTM2NjQ3NDE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mentor", "name": "E-needs-mentor", "color": "02e10c", "default": false, "description": "Call for participation: This issue is in need of a mentor."}, {"id": 1525709585, "node_id": "MDU6TGFiZWwxNTI1NzA5NTg1", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-associated_type_defaults", "name": "F-associated_type_defaults", "color": "f9c0cc", "default": false, "description": "`#![feature(associated_type_defaults)]`"}, {"id": 3537250192, "node_id": "LA_kwDOAAsO6M7S1ieQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-needs-summary", "name": "S-tracking-needs-summary", "color": "4682b4", "default": false, "description": "It's hard to tell what's been done and what hasn't! Someone should do some investigation."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 35, "created_at": "2015-11-06T18:21:43Z", "updated_at": "2021-12-08T21:00:06Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a tracking issue for the RFC \"Associated type defaults\" (rust-lang/rfcs#2532) under the feature gate `#![feature(associated_type_defaults)]`.\r\n\r\n--------------------------\r\n\r\nThe [associated item RFC](https://github.com/rust-lang/rfcs/pull/195) included the ability to provide defaults for associated types, with some tricky rules about how that would influence defaulted methods. \r\n\r\nThe early implementation of this feature was gated, because there is a widespread feeling that we want a different semantics from the RFC -- namely, that default methods should not be able to assume anything about associated types. This is especially true given the [specialization RFC](https://github.com/rust-lang/rfcs/pull/1210), which provides a much cleaner way of tailoring default implementations.\r\n\r\nThe new RFC, rust-lang/rfcs#2532, specifies that this should be the new semantics but has not been implemented yet. The existing behavior under `#![feature(associated_type_defaults)]` is buggy and does not conform to the new RFC. Consult it for a discussion on changes that will be made.\r\n\r\n--------------------------\r\n\r\n### Steps:\r\n\r\n- [ ] Implement rust-lang/rfcs#2532 (cc @rust-lang/wg-traits @rust-lang/compiler)\r\n  - [X] #61812 \r\n  - [ ] Implement the changes to object types specified in the RFC\r\n- [ ] Improve type mismatch errors when an associated type default can not be projected (https://github.com/rust-lang/rust/pull/61812#discussion_r293952743)\r\n- [ ] Adjust documentation ([see instructions on forge][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on forge][stabilization-guide])\r\n\r\n[stabilization-guide]: https://forge.rust-lang.org/stabilization-guide.html\r\n[doc-guide]: https://forge.rust-lang.org/stabilization-guide.html#updating-documentation\r\n\r\n### Unresolved questions:\r\n\r\n- [ ] [1. When do suitability of defaults need to be proven?](https://github.com/rust-lang/rfcs/blob/master/text/2532-associated-type-defaults.md#1-when-do-suitability-of-defaults-need-to-be-proven)\r\n- [ ] [2. Where are cycles checked?](https://github.com/rust-lang/rfcs/blob/master/text/2532-associated-type-defaults.md#2-where-are-cycles-checked)\r\n\r\n### Test checklist \r\n\r\nOriginally created [as a comment](https://github.com/rust-lang/rust/pull/61812#issuecomment-527959874) on #61812 \r\n\r\n- Trait objects and defaults\r\n    - Independent defaults (`type Foo = u8;`)\r\n        - [ ] where not specified (`dyn Trait`)\r\n            - show that it's an error to coerce from `dyn Trait<Foo = u16>` to that\r\n            - show that we assume it is `u8` by invoking some method etc\r\n        - [ ] where specified (`dyn Trait<Foo = u16>`)\r\n            - show that it's an error to coerce from `dyn Trait<Foo = u16>` to that\r\n            - show that we assume it is `u8` by invoking some method etc\r\n    - Mixed with type without a default (`type Foo = u8; type Bar;`)\r\n        - [ ] where neither is specified (`dyn Trait`) -- error\r\n        - [ ] where `Foo` is specified (`dyn Trait<Foo = u16>`) -- error\r\n        - [ ] where `Bar` is specified (`dyn Trait<Bar = u32>`) -- ok, check `Foo` defaults to `u8`\r\n        - [ ] where both are specified (`dyn Trait<Foo = u16, Bar = u32>`) -- ok\r\n    - Dependent defaults (`type Foo = u8; type Bar = Vec<Self::Foo>`)\r\n        - [ ] where neither is specified (`dyn Trait`) -- error\r\n        - [ ] where `Foo` is specified (`dyn Trait<Foo = u16>`) -- unclear, maybe an error?\r\n        - [ ] where `Bar` is specified (`dyn Trait<Bar = u32>`) -- unclear, maybe an error?\r\n        - [ ] where both are specified (`dyn Trait<Foo = u16, Bar = u32>`) -- ok\r\n    - Cyclic defaults (`type Foo = Self::Bar; type Bar = Self::Foo`)\r\n        - [ ] where neither is specified (`dyn Trait`)\r\n        - [ ] where `Foo` is specified (`dyn Trait<Foo = u16>`)\r\n        - [ ] where `Bar` is specified (`dyn Trait<Bar = u32>`)\r\n        - [ ] where both are specified (`dyn Trait<Foo = u16, Bar = u32>`)\r\n    - Non-trivial recursive defaults (`type Foo = Vec<Self::Bar>; type Bar = Box<Self::Foo>;`)\r\n        - [ ] where neither is specified (`dyn Trait`)\r\n        - [ ] where `Foo` is specified (`dyn Trait<Foo = u16>`)\r\n        - [ ] where `Bar` is specified (`dyn Trait<Bar = u32>`)\r\n        - [ ] where both are specified (`dyn Trait<Foo = u16, Bar = u32>`)\r\n- Specialization\r\n    - [x] Default values unknown in traits \r\n    - [x] trait definition cannot rely on `type Foo = u8;` (`defaults-in-other-trait-items.rs`)\r\n    - [x] impl for trait that manually specifies *can* rely\r\n        - [x] also, can rely on it from outside the impl\r\n    - [x] impl for trait that does not specify *can* rely\r\n    - [x] impl with `default type Foo = u8`, cannot rely on that internally (`defaults-specialization.rs`)\r\n    - [x] default impl with `type Foo = u8`, cannot rely on that internally (`defaults-specialization.rs`)\r\n    - [x] impl that specializes but manually specifies *can* rely\r\n    - [ ] impl that specializes but does not specify *can* rely\r\n        - right? want also a test that this impl cannot be *further* specialized -- is \"default\" inherited, in other words?\r\n- Correct defaults in impls (type)\r\n    - Independent defaults (`type Foo = u8;`)\r\n        - [x] overriding one default does not require overriding the others (`associated-types/associated-types-overridden-default.rs`)\r\n            - (does not test that the projections are as expected)\r\n        - [x] where not specified (`impl Trait { }`) (`associated-types/issue-54182-2.rs`)\r\n        - [x] where specified (`impl Trait { type Foo = u16; }`) (`issue-54182-1.rs`)\r\n    - Mixed with type without a default (`type Foo = u8; type Bar;`)\r\n        - [x] where neither is specified (`impl Trait { }`) -- error\r\n        - [x] where `Foo` is specified (`impl Trait { type Foo = u16; }`) -- error\r\n        - [x] where `Bar` is specified (`impl Trait { type Bar = u32; }`) -- ok\r\n        - [x] where both are specified (`impl Trait { type Foo = u16; type Bar = u32; }`) -- ok\r\n    - Dependent defaults (`type Foo = u8; type Bar = Vec<Self::Foo>`) -- `defaults-in-other-trait-items-pass.rs`, `defaults-in-other-trait-items-fail.rs`\r\n        - [x] where neither is specified (`impl Trait { }`)\r\n        - [x] where `Foo` is specified (`impl Trait { type Foo = u16; }`)\r\n        - [x] where `Bar` is specified (`impl Trait { type Bar = u32; }`)\r\n        - [x] where both are specified (`impl Trait { type Foo = u16; type Bar = u32; }`)\r\n    - Cyclic defaults (`type Foo = Self::Bar; type Bar = Self::Foo`) -- `defaults-cyclic-fail.rs`, `defaults-cyclic-pass.rs`\r\n        - [x] where neither is specified (`impl Trait { }`)\r\n            - considered to be an error only if a projection takes place (is this what we want?)\r\n        - [x] where `Foo` is specified (`impl Trait { type Foo = u16; }`)\r\n        - [x] where `Bar` is specified (`impl Trait { type Bar = u32; }`)\r\n        - [x] where both are specified (`impl Trait { type Foo = u16; type Bar = u32; }`)\r\n    - Non-trivial recursive defaults (`type Foo = Vec<Self::Bar>; type Bar = Box<Self::Foo>;`)\r\n        - [x] where neither is specified (`impl Trait { }`)\r\n        - [x] where `Foo` is specified (`impl Trait { type Foo = u16; }`)\r\n        - [x] where `Bar` is specified (`impl Trait { type Bar = u32; }`)\r\n        - [x] where both are specified (`impl Trait { type Foo = u16; type Bar = u32; }`)\r\n- Correct defaults in impls (const)\r\n    - Independent defaults\r\n        - [ ] where not specified\r\n        - [ ] where specified\r\n    - Mixed with type without a default\r\n        - [ ] where neither is specified\r\n        - [ ] where `Foo` is specified\r\n        - [ ] where `Bar` is specified\r\n        - [ ] where both are specified\r\n    - Dependent defaults\r\n        - [ ] where neither is specified\r\n        - [ ] where `Foo` is specified\r\n        - [ ] where `Bar` is specified\r\n        - [ ] where both are specified\r\n    - Cyclic defaults -- `defaults-cyclic-fail.rs`, `defaults-cyclic-pass.rs`\r\n        - [x] where neither is specified (`impl Trait { }`)\r\n            - considered to be an error only if a projection takes place (is this what we want?)\r\n        - [x] where `Foo` is specified\r\n        - [x] where `Bar` is specified\r\n        - [x] where both are specified\r\n    - Non-trivial recursive defaults\r\n        - [ ] where neither is specified\r\n        - [ ] where `Foo` is specified\r\n        - [ ] where `Bar` is specified\r\n        - [ ] where both are specified\r\n- Overflow errors in const evaluation\r\n    - check that errors in evaluation do not occur based on default values, but only the final values\r\n    - Dependent defaults (defaults-not-assumed-fail, defaults-not-assumed-pass)\r\n        - [x] where neither is specified\r\n        - [x] where `Foo` is specified\r\n        - [x] where `Bar` is specified\r\n        - [x] where both are specified\r\n- WF checking (`defaults-suitability.rs`)\r\n    - requires that defaults meet WF check requirements (is this what we want?)\r\n    - [x] `type` in trait body, bound appears on the item\r\n    - [x] `type` in trait body, type not wf\r\n    - [x] `type` in trait body, bound appears as trait where clause\r\n    - [ ] `default type` in impl, bound appears on the item\r\n    - [ ] `type` in impl, bound appears on the item\r\n    - [ ] `type` in default impl, bound appears on the item\r\n    - [x] `type` in trait body, conditionally wf depending on another default\r\n        - currently gives an error (is this what we want?)\r\n    - [x] `type` in trait body, depends on another default whose bounds suffice\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29661/reactions", "total_count": 142, "+1": 112, "-1": 1, "laugh": 0, "hooray": 16, "confused": 0, "heart": 3, "rocket": 10, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29661/timeline", "performed_via_github_app": null, "state_reason": null}