{"url": "https://api.github.com/repos/rust-lang/rust/issues/84184", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84184/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84184/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84184/events", "html_url": "https://github.com/rust-lang/rust/issues/84184", "id": 857755130, "node_id": "MDU6SXNzdWU4NTc3NTUxMzA=", "number": 84184, "title": "`std::ptr::write_bytes` should clearly explain safety and validity invariants", "user": {"login": "lokegustafsson", "id": 16049402, "node_id": "MDQ6VXNlcjE2MDQ5NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/16049402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lokegustafsson", "html_url": "https://github.com/lokegustafsson", "followers_url": "https://api.github.com/users/lokegustafsson/followers", "following_url": "https://api.github.com/users/lokegustafsson/following{/other_user}", "gists_url": "https://api.github.com/users/lokegustafsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/lokegustafsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lokegustafsson/subscriptions", "organizations_url": "https://api.github.com/users/lokegustafsson/orgs", "repos_url": "https://api.github.com/users/lokegustafsson/repos", "events_url": "https://api.github.com/users/lokegustafsson/events{/privacy}", "received_events_url": "https://api.github.com/users/lokegustafsson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 289259951, "node_id": "MDU6TGFiZWwyODkyNTk5NTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-help-wanted", "name": "E-help-wanted", "color": "02E10C", "default": false, "description": "Call for participation: Help is requested to fix this issue."}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2242906716, "node_id": "MDU6TGFiZWwyMjQyOTA2NzE2", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-raw-pointers", "name": "A-raw-pointers", "color": "f7e101", "default": false, "description": "Area: raw pointers, MaybeUninit, NonNull"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2021-04-14T10:24:52Z", "updated_at": "2021-11-29T17:13:10Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "This is an example code snippet for [`std::ptr::write_bytes`](https://doc.rust-lang.org/std/ptr/fn.write_bytes.html):\r\n\r\n```rust\r\nuse std::ptr;\r\n\r\nlet mut v = Box::new(0i32);\r\n\r\nunsafe {\r\n    // Leaks the previously held value by overwriting the `Box<T>` with\r\n    // a null pointer.\r\n    ptr::write_bytes(&mut v as *mut Box<i32>, 0, 1);\r\n}\r\n\r\n// At this point, using or dropping `v` results in undefined behavior.\r\n// drop(v); // ERROR\r\n\r\n// Even leaking `v` \"uses\" it, and hence is undefined behavior.\r\n// mem::forget(v); // ERROR\r\n\r\n// In fact, `v` is invalid according to basic type layout invariants, so *any*\r\n// operation touching it is undefined behavior.\r\n// let v2 = v; // ERROR\r\n\r\nunsafe {\r\n    // Let us instead put in a valid value\r\n    ptr::write(&mut v as *mut Box<i32>, Box::new(42i32));\r\n}\r\n\r\n// Now the box is fine\r\nassert_eq!(*v, 42);\r\n```\r\n\r\nThis example writes a null pointer to a box, which (verbatim!) \"is invalid according to basic type layout invariants\". Then it incorrectly states that this is fine as long as we do not \"touch\" the box, while really this is already UB. This looks like a documentation bug to me.\r\n\r\nAs a side note: why is `Unique<T>` not intended to be stabilized? The strong aliasing guarantees could be useful in someone's unsafe code.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84184/timeline", "performed_via_github_app": null, "state_reason": null}