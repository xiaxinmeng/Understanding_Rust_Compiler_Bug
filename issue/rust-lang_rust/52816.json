{"url": "https://api.github.com/repos/rust-lang/rust/issues/52816", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52816/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52816/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52816/events", "html_url": "https://github.com/rust-lang/rust/issues/52816", "id": 345490653, "node_id": "MDU6SXNzdWUzNDU0OTA2NTM=", "number": 52816, "title": "`Path::file_name` and `Path::file_stem` shouldn't treat backslashes as part of the file stem", "user": {"login": "Boscop", "id": 535593, "node_id": "MDQ6VXNlcjUzNTU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/535593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Boscop", "html_url": "https://github.com/Boscop", "followers_url": "https://api.github.com/users/Boscop/followers", "following_url": "https://api.github.com/users/Boscop/following{/other_user}", "gists_url": "https://api.github.com/users/Boscop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Boscop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Boscop/subscriptions", "organizations_url": "https://api.github.com/users/Boscop/orgs", "repos_url": "https://api.github.com/users/Boscop/repos", "events_url": "https://api.github.com/users/Boscop/events{/privacy}", "received_events_url": "https://api.github.com/users/Boscop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-29T00:54:26Z", "updated_at": "2022-07-04T10:32:13Z", "closed_at": "2022-07-04T10:32:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why do `Path::file_name` and `Path::file_stem` treat backslashes as part of the file stem? (On Windows.)\r\n\r\nThe file stem should not include the folders of the path and `\\`s, only the final file name's stem.\r\n\r\n```rust\r\nuse std::path::PathBuf;\r\n\r\nfn main() {\r\n    let p = PathBuf::from(r\"a\\b\\c.ext\"); // inspired by a real use case with relative paths on windows\r\n    println!(\"file_name {:?}\", p.file_name());\r\n    println!(\"file_stem {:?}\", p.file_stem());\r\n}\r\n```\r\nhttps://play.rust-lang.org/?gist=15996188fbddf77e28dba123495a47ac&version=stable&mode=debug&edition=2015\r\nprints:\r\n```\r\nfile_name Some(\"a\\\\b\\\\c.ext\")\r\nfile_stem Some(\"a\\\\b\\\\c\")\r\n```\r\nshould print:\r\n```\r\nfile_name Some(\"c.ext\")\r\nfile_stem Some(\"c\")\r\n```\r\n\r\njust like it does with forward slashes.\r\n\r\nBtw, `for comp in p.components() { println!(\"{:?}\", comp); }` prints only `Normal(\"a\\\\b\\\\c.ext\")`.\r\nhttps://play.rust-lang.org/?gist=b9732062b47e5959b4c4221cd39e421a&version=stable&mode=debug&edition=2015\r\n\r\n---\r\n\r\nBtw, is it related to this? https://github.com/rust-lang/rust/issues/29008\r\n\r\n---\r\n\r\nEDIT: I forgot to mention that I'm compiling to wasm32-unknown-unknown.\r\nMy yew frontend deals with windows paths coming from my sqlite db (song files).\r\nAnd in the frontend I need to extract the file_stem from windows paths.\r\nIt works correctly if I replace `\\` by `/` before calling `Path::new(&path).file_stem().map_or_else(|| \"\".into(), |x| x.to_string_lossy().to_string())`, but thats a hack :/\r\n\r\nWhat's the recommended way to handle paths in a cross-platform way?\r\n(\"cross\" in the sense of \"cross-compiling\", but at runtime. Handling Windows paths on wasm32-unknown-unknown with something like std `Path`. Similarly when e.g. generating Windows bat scripts from a Rust executable running on linux, that needs std `Path` to interpret `\\` as a component separator..)", "closed_by": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52816/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52816/timeline", "performed_via_github_app": null, "state_reason": "completed"}