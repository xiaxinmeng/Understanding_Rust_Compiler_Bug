{"url": "https://api.github.com/repos/rust-lang/rust/issues/55076", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55076/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55076/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55076/events", "html_url": "https://github.com/rust-lang/rust/issues/55076", "id": 369952211, "node_id": "MDU6SXNzdWUzNjk5NTIyMTE=", "number": 55076, "title": "Refiling \"Deprecate \"implicit ()\" by making it a compilation error.\"", "user": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36956, "node_id": "MDU6TGFiZWwzNjk1Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-frontend", "name": "A-frontend", "color": "f7e101", "default": false, "description": "Area: frontend (errors, parsing and HIR)"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-14T22:44:53Z", "updated_at": "2020-06-11T17:38:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Refiled from https://github.com/rust-lang/rfcs/issues/2098#issuecomment-320580803 as a diagnostics issue:\r\n\r\n> \r\n> clippy can't do anything right now if a compiler error occurs before our lints run and most our lints are run after type checking.\r\n> \r\n> I agree though that example A should backtrack the source of the value and see if there's the possibility of removing a semicolon in the presence of `()`.\r\n> \r\n> Note that there are many other situations, e.g. the reverse of the above comparison:\r\n> \r\n> ```rust\r\n> fn main() {\r\n>     let v = {\r\n>         println!(\"hacky debug: v is being initialized.\");\r\n>         42;\r\n>     };\r\n>     assert!(42 == v);\r\n> }\r\n> ```\r\n> \r\n> produces\r\n> \r\n> ```\r\n>    Compiling playground v0.0.1 (file:///playground)\r\n> error[E0277]: the trait bound `{integer}: std::cmp::PartialEq<()>` is not satisfied\r\n>  --> src/main.rs:6:16\r\n>   |\r\n> 6 |     assert!(42 == v);\r\n>   |                ^^ can't compare `{integer}` with `()`\r\n>   |\r\n>   = help: the trait `std::cmp::PartialEq<()>` is not implemented for `{integer}`\r\n> ```\r\n> \r\n> I do not think that this requires an RFC. Simply implementing improved diagnostics and opening a PR is totally fine (I've not seen a denied diagnostic improvement PR so far).\r\n\r\ncc @oli-obk @estebank ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55076/timeline", "performed_via_github_app": null, "state_reason": null}