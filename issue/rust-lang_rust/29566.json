{"url": "https://api.github.com/repos/rust-lang/rust/issues/29566", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29566/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29566/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29566/events", "html_url": "https://github.com/rust-lang/rust/issues/29566", "id": 114987015, "node_id": "MDU6SXNzdWUxMTQ5ODcwMTU=", "number": 29566, "title": "Optimization issue with dummy moves in loop.", "user": {"login": "leeopop", "id": 3205589, "node_id": "MDQ6VXNlcjMyMDU1ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/3205589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leeopop", "html_url": "https://github.com/leeopop", "followers_url": "https://api.github.com/users/leeopop/followers", "following_url": "https://api.github.com/users/leeopop/following{/other_user}", "gists_url": "https://api.github.com/users/leeopop/gists{/gist_id}", "starred_url": "https://api.github.com/users/leeopop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leeopop/subscriptions", "organizations_url": "https://api.github.com/users/leeopop/orgs", "repos_url": "https://api.github.com/users/leeopop/repos", "events_url": "https://api.github.com/users/leeopop/events{/privacy}", "received_events_url": "https://api.github.com/users/leeopop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-04T07:06:36Z", "updated_at": "2017-04-11T16:39:15Z", "closed_at": "2017-04-11T16:39:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Micro benchmarks was done with following code, built with cargo build --release.\n\n```\nconst DEFAULT_PACKET_BUFFER_SIZE : usize = 2048;\npub const PACKET_BUFFER_SIZE : usize = DEFAULT_PACKET_BUFFER_SIZE;\npub const MAX_FIELD_NAME : usize = 128;\nuse std::collections::hash_map::HashMap;\n\npub type Byte = u8;\npub type Buffer = [Byte; PACKET_BUFFER_SIZE];\npub type Field<'a> = &'a mut [Byte];\npub type ConstField<'a> = &'a [Byte];\npub type PacketHandler<'a> = fn (Packet) -> Packet;\n\npub const ZERO_BUFFER : Buffer = [0u8; PACKET_BUFFER_SIZE];\n\n#[inline(always)]\npub fn move_field(src : ConstField, dst : Field) -> usize {\n    let moved_bytes = std::cmp::min(src.len(), dst.len());\n    //TODO: target.clone_from_slice(val); or copy_memory(val, target);\n    for index in 0..moved_bytes {\n        dst[index] = src[index];\n    }\n    moved_bytes\n}\n\n#[inline(always)]\npub fn compare_field(a : ConstField, b : ConstField) -> std::cmp::Ordering {\n    let a_len = a.len();\n    let b_len = b.len();\n    if a_len == 0 || b_len == 0 {\n        a_len.cmp(&b_len)\n    }\n    else {\n        match a[0].cmp(&b[0]) {\n            std::cmp::Ordering::Less => std::cmp::Ordering::Less,\n            std::cmp::Ordering::Greater => std::cmp::Ordering::Greater,\n            _ => compare_field(&a[1..], &b[1..]),\n        }\n    }\n}\n\npub struct PacketContext<'a> {\n    u64_val : HashMap<&'static str, u64>,\n    u32_val : HashMap<&'static str, u32>,\n    u16_val : HashMap<&'static str, u16>,\n    u8_val : HashMap<&'static str, u8>,\n    bool_val : HashMap<&'static str, bool>,\n    string_val : HashMap<&'static str, &'static str>,\n    field_val : HashMap<&'static str, Field<'a>>,\n}\n\nimpl<'a> PacketContext<'a> {\n    #[inline(always)]\n    pub fn new() -> PacketContext<'a> {\n        PacketContext {\n            u64_val : HashMap::new(),\n            u32_val : HashMap::new(),\n            u16_val : HashMap::new(),\n            u8_val : HashMap::new(),\n            bool_val : HashMap::new(),\n            string_val : HashMap::new(),\n            field_val : HashMap::new(),\n        }\n    }\n}\n\npub type PacketContextRef<'a> = Box<PacketContext<'a>>;\n\npub struct Packet<'a> {\n    content : Field<'a>,\n    pub context : PacketContextRef<'a>,\n}\n\nimpl<'a> Packet<'a> {\n    #[inline(always)]\n    pub fn new(field : Field<'a>) -> Packet<'a> {\n        let packet_context_box = Box::new(PacketContext::new());\n        Packet {\n            content : field,\n            context : packet_context_box,\n        }\n    }\n}\n\n\n#[inline(always)]\npub fn dummy_move(packet : Packet) -> Packet {\n    Packet {\n        content : packet.content,\n        context : packet.context,\n    }\n}\n\nconst N : usize = 1000000000;\n\npub fn bench_dummy_move() {\n    let mut temp_struct = ZERO_BUFFER;\n    let mut packet = Packet::new(&mut temp_struct);\n    for _ in 0..1000000000 {\n        packet = dummy_move(packet);\n    }\n}\n\npub fn bench_dummy_move2() {\n    let mut temp_struct = ZERO_BUFFER;\n    let mut packet = Packet::new(&mut temp_struct);\n    for _ in 0..N {\n        packet = dummy_move(packet);\n    }\n}\n\npub fn bench_dummy_move3() {\n    let mut temp_struct = ZERO_BUFFER;\n    let mut packet = Packet::new(&mut temp_struct);\n    for _ in 0..1000000000usize {\n        packet = dummy_move(packet);\n    }\n}\n\nextern crate time;\nuse time::PreciseTime;\nfn main() {\n    let start = PreciseTime::now();\n    bench_dummy_move();\n    let end = PreciseTime::now();\n\n    println!(\"Rust dummy move: {} us for {} times.\", \n        start.to(end).num_microseconds().expect(\"Umm\"), N);\n\n    let start = PreciseTime::now();\n    bench_dummy_move2();\n    let end = PreciseTime::now();\n\n    println!(\"Rust dummy move2: {} us for {} times.\", \n        start.to(end).num_microseconds().expect(\"Umm\"), N);\n\n    let start = PreciseTime::now();\n    bench_dummy_move3();\n    let end = PreciseTime::now();\n\n    println!(\"Rust dummy move3: {} us for {} times.\", \n        start.to(end).num_microseconds().expect(\"Umm\"), N);\n}\n```\n\nWith rust 1.3 stable release for windows x64,\n\n```\ncargo 0.4.0-nightly (553b363 2015-08-03) (built 2015-08-03)\nrustc 1.3.0 (9a92aaf19 2015-09-15)\n```\n\nthe result is\n\n```\nPS C:\\workspace\\eclipse_workspace\\rst_test\\target\\release> .\\hello_world.exe\nRust dummy move: 1045 us for 1000000000 times.\nRust dummy move2: 1 us for 1000000000 times.\nRust dummy move3: 1 us for 1000000000 times.\nPS C:\\workspace\\eclipse_workspace\\rst_test\\target\\release>\n```\n\nWIth rust 1.4 stable release for windows x64, gnu,\n\n```\ncargo 0.5.0-nightly (833b947 2015-09-13)\nrustc 1.4.0 (8ab8581f6 2015-10-27)\n```\n\nthe result is\n\n```\nPS C:\\workspace\\eclipse_workspace\\rst_test\\target\\release> .\\hello_world.exe\nRust dummy move: 1232181 us for 1000000000 times.\nRust dummy move2: 1 us for 1000000000 times.\nRust dummy move3: 1 us for 1000000000 times.\nPS C:\\workspace\\eclipse_workspace\\rst_test\\target\\release>\n```\n\nI wonder why the optimizations does not work with i32 values\nand why it is worse in rust 1.4 than 1.3.\n", "closed_by": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29566/timeline", "performed_via_github_app": null, "state_reason": "completed"}