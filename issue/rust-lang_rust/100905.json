{"url": "https://api.github.com/repos/rust-lang/rust/issues/100905", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/100905/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/100905/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/100905/events", "html_url": "https://github.com/rust-lang/rust/issues/100905", "id": 1347346998, "node_id": "I_kwDOAAsO6M5QTuI2", "number": 100905, "title": "Closure returned as `impl FnOnce` incorrectly borrows captured used-by-value iff it is `Copy`", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-08-23T05:11:41Z", "updated_at": "2022-08-23T19:02:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code: [[playground]](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=cded1210deaa0723964283a361306aea) (with the other cases as well)\r\n\r\n```rust\r\n#[derive(Clone, Copy)]\r\npub struct Unit;\r\n\r\nfn returns(it: Unit) -> impl FnOnce() -> Unit {\r\n    || it\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0373]: closure may outlive the current function, but it borrows `it`, which is owned by the current function\r\n --> src/lib.rs:5:5\r\n  |\r\n5 |     || it\r\n  |     ^^ -- `it` is borrowed here\r\n  |     |\r\n  |     may outlive borrowed value `it`\r\n  |\r\nnote: closure is returned here\r\n --> src/lib.rs:5:5\r\n  |\r\n5 |     || it\r\n  |     ^^^^^\r\nhelp: to force the closure to take ownership of `it` (and any other referenced variables), use the `move` keyword\r\n  |\r\n5 |     move || it\r\n  |     ++++\r\n```\r\n\r\n***If you remove the `Copy` implementation, then this compiles without error.***\r\n\r\nAPIT also compiles without error, but TAIT also causes an error.\r\n\r\n<details><summary>Without <code>Copy</code></summary>\r\n\r\n```rust\r\n#[derive(Clone)]\r\npub struct Unit;\r\n\r\nfn returns(it: Unit) -> impl FnOnce() -> Unit {\r\n    || it\r\n}\r\n```\r\n---\r\n</details><details><summary>APIT</summary>\r\n\r\n```rust\r\n#[derive(Clone, Copy)]\r\npub struct Unit;\r\n\r\nfn apit(it: Unit) {\r\n    fn takes(_: impl FnOnce() -> Unit) {}\r\n    takes(|| Unit)\r\n}\r\n```\r\n---\r\n</details><details><summary>TAIT</summary>\r\n\r\n```rust\r\n#[derive(Clone, Copy)]\r\npub struct Unit;\r\n\r\nfn tait(it: Unit) {\r\n    type F = impl FnOnce() -> Unit;\r\n    let f: F = || it;\r\n}\r\n```\r\n---\r\n</details>\r\n\r\nI checked, and this has been the case since RPIT was first stabilized.\r\n\r\n@rustbot label +A-impl-trait\r\n\r\nTechnically, this makes adding `Copy` to a type a breaking change \ud83d\ude43\r\n\r\nI expected to see this happen: *explanation*\r\n\r\nInstead, this happened: *explanation*\r\n\r\n### Meta\r\n\r\nrustc version: 1.65.0-nightly (2022-08-16 86c6ebee8fa0a5ad1e18)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/100905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/100905/timeline", "performed_via_github_app": null, "state_reason": null}