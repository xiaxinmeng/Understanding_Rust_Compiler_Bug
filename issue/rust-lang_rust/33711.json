{"url": "https://api.github.com/repos/rust-lang/rust/issues/33711", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33711/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33711/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33711/events", "html_url": "https://github.com/rust-lang/rust/issues/33711", "id": 155473096, "node_id": "MDU6SXNzdWUxNTU0NzMwOTY=", "number": 33711, "title": "Strange auto derive behaviour with associated types", "user": {"login": "CasualX", "id": 2324759, "node_id": "MDQ6VXNlcjIzMjQ3NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2324759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CasualX", "html_url": "https://github.com/CasualX", "followers_url": "https://api.github.com/users/CasualX/followers", "following_url": "https://api.github.com/users/CasualX/following{/other_user}", "gists_url": "https://api.github.com/users/CasualX/gists{/gist_id}", "starred_url": "https://api.github.com/users/CasualX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CasualX/subscriptions", "organizations_url": "https://api.github.com/users/CasualX/orgs", "repos_url": "https://api.github.com/users/CasualX/repos", "events_url": "https://api.github.com/users/CasualX/events{/privacy}", "received_events_url": "https://api.github.com/users/CasualX/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-05-18T10:58:45Z", "updated_at": "2016-05-26T17:23:45Z", "closed_at": "2016-05-26T17:23:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Auto deriving impls for a generic struct which only contains instances of associated types (not the generics themselves) unnecessarily constrains the impl for the struct.\n\nI tried this code: https://is.gd/V6mqWI\n\n``` rust\npub trait Trait: Clone {\n    type Type: Copy + Clone;\n}\n\n#[derive(Copy, Clone)]\npub struct ImplT;\nimpl Trait for ImplT {\n    type Type = i32;\n}\n\n// Here is the problem, auto derive for `Copy` does nothing.\n// What I believe is happening is that impl for `Copy` is unnecessarily constraining `T` itself must be `Copy`.\n#[derive(Copy, Clone)]\npub struct NewT<T: Trait>(pub T::Type);\n// Workaround:\n//impl<T: Trait> Copy for NewT<T> where T::Type: Copy {}\n\n#[derive(Clone)]\npub struct Foo<T: Trait>(T::Type);\nimpl<T: Trait> Foo<T> {\n    pub fn get_if<F>(&self, f: F) -> Option<NewT<T>>\n        where F: FnOnce(NewT<T>) -> bool {\n        let newt = NewT(self.0);\n        if f(newt) {\n            Some(newt)\n        }\n        else {\n            None\n        }\n    }\n}\n\nfn main() {\n    let foo = Foo::<ImplT>(42);\n    foo.get_if(|newt| true);\n}\n```\n\nI expected to see this happen: `NewT<T>` is copyable.\n\nInstead this happened:\n\n```\n<anon>:25:18: 25:22 error: use of moved value: `newt` [E0382]\n<anon>:25             Some(newt)\n                           ^~~~\n<anon>:25:18: 25:22 help: see the detailed explanation for E0382\n<anon>:24:14: 24:18 note: `newt` moved here because it has type `NewT<T>`, which is non-copyable\n<anon>:24         if f(newt) {\n                       ^~~~\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n```\n\nWorkaround: Instead of auto deriving `Copy` for `NewT<T>`, manually implement it like so:\n\n``` rust\n#[derive(Clone)]\npub struct NewT<T: Trait>(pub T::Type);\nimpl<T: Trait> Copy for NewT<T> where T::Type: Copy {}\n```\n## Meta\n\nI used playpen; Debug, Stable, but the same error happens with every option I select.\n", "closed_by": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33711/timeline", "performed_via_github_app": null, "state_reason": "completed"}