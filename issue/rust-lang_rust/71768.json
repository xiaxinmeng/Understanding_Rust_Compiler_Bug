{"url": "https://api.github.com/repos/rust-lang/rust/issues/71768", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71768/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71768/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71768/events", "html_url": "https://github.com/rust-lang/rust/issues/71768", "id": 610933470, "node_id": "MDU6SXNzdWU2MTA5MzM0NzA=", "number": 71768, "title": "Call to wrapping_add not inlined in debug mode", "user": {"login": "dbdr", "id": 2729515, "node_id": "MDQ6VXNlcjI3Mjk1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2729515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbdr", "html_url": "https://github.com/dbdr", "followers_url": "https://api.github.com/users/dbdr/followers", "following_url": "https://api.github.com/users/dbdr/following{/other_user}", "gists_url": "https://api.github.com/users/dbdr/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbdr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbdr/subscriptions", "organizations_url": "https://api.github.com/users/dbdr/orgs", "repos_url": "https://api.github.com/users/dbdr/repos", "events_url": "https://api.github.com/users/dbdr/events{/privacy}", "received_events_url": "https://api.github.com/users/dbdr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 2019962432, "node_id": "MDU6TGFiZWwyMDE5OTYyNDMy", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir-opt-inlining", "name": "A-mir-opt-inlining", "color": "f7e101", "default": false, "description": "Area: MIR inlining"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-01T19:45:35Z", "updated_at": "2020-05-02T12:05:24Z", "closed_at": "2020-05-02T12:05:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "For reasons outside my control, I would like to have the option to perform unchecked, wrapping arithmetic in debug mode with reasonable performance. Since + is checking for overflows, I thought that using wrapping_add would do the job, however a function like:\r\n```\r\npub fn inc_opt(data: u64) -> u64 {\r\n    u64::wrapping_add(data, 42)\r\n}\r\n```\r\ngets compiled (in debug mode) to\r\n```\r\n0000000000005d50 <inc::inc_opt>:\r\n    5d50:       push   %rax\r\n    5d51:       mov    $0x2a,%esi\r\n    5d56:       callq  5650 <core::num::<impl u64>::wrapping_add>\r\n    5d5b:       mov    %rax,(%rsp)\r\n    5d5f:       mov    (%rsp),%rax\r\n    5d63:       pop    %rcx\r\n    5d64:       retq   \r\n    5d65:       nopw   %cs:0x0(%rax,%rax,1)\r\n    5d6f:       nop\r\n```\r\nThe call to `wrapping_add` does not get inlined, even though `wrapping_add` is marked `#[inline]` and is obviously short. I tried to the following patch:\r\n```\r\ndiff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\r\nindex a259e293b0c..6c2d3fc6d5a 100644\r\n--- a/src/libcore/num/mod.rs\r\n+++ b/src/libcore/num/mod.rs\r\n@@ -1242,7 +1242,7 @@ $EndFeature, \"\r\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\r\n             #[must_use = \"this returns the result of the operation, \\\r\n                           without modifying the original\"]\r\n-            #[inline]\r\n+            #[inline(always)]\r\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\r\n                 intrinsics::wrapping_add(self, rhs)\r\n             }\r\n```\r\nHowever that did not seem to change the generated code (I'm new to hacking on rustc, so it's very possible I did not try it correctly).\r\n\r\nIs there any hope in stable rust to be able to compile wrapping arithmetic expressions to a single instruction even in debug mode?\r\n\r\nIs there a more general issue with inlining not being performed when it should?", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71768/timeline", "performed_via_github_app": null, "state_reason": "completed"}