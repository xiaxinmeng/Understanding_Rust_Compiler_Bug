{"url": "https://api.github.com/repos/rust-lang/rust/issues/78403", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78403/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78403/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78403/events", "html_url": "https://github.com/rust-lang/rust/issues/78403", "id": 729741715, "node_id": "MDU6SXNzdWU3Mjk3NDE3MTU=", "number": 78403, "title": "Recursive instantiation for Iterator trait with closure-taking adaptors hangs rustc", "user": {"login": "PaulDance", "id": 35344098, "node_id": "MDQ6VXNlcjM1MzQ0MDk4", "avatar_url": "https://avatars.githubusercontent.com/u/35344098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaulDance", "html_url": "https://github.com/PaulDance", "followers_url": "https://api.github.com/users/PaulDance/followers", "following_url": "https://api.github.com/users/PaulDance/following{/other_user}", "gists_url": "https://api.github.com/users/PaulDance/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaulDance/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaulDance/subscriptions", "organizations_url": "https://api.github.com/users/PaulDance/orgs", "repos_url": "https://api.github.com/users/PaulDance/repos", "events_url": "https://api.github.com/users/PaulDance/events{/privacy}", "received_events_url": "https://api.github.com/users/PaulDance/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1168029555, "node_id": "MDU6TGFiZWwxMTY4MDI5NTU1", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-hang", "name": "I-hang", "color": "e10c02", "default": false, "description": "Issue: The compiler never terminates, due to infinite loops, deadlock, livelock, etc."}, {"id": 1563395184, "node_id": "MDU6TGFiZWwxNTYzMzk1MTg0", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-monomorphization", "name": "I-monomorphization", "color": "e10c02", "default": false, "description": "Issue: An error at monomorphization time"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-26T17:00:44Z", "updated_at": "2020-12-10T17:41:23Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n-->\r\n\r\nHello all,\r\n\r\nThis is probably a revival of #21403 and might be linked to #77173 and #76351, but I am not quite sure.\r\n\r\nWhen defining a function that accepts a type implementing `Iterator<Item = ...>` and making a recursive call with the iterator adapted, the compiler reports a recursive instantiation error, which is to be expected. However, when considering some corner cases, the compiler can take quite a bit of time to reach this conclusion and in some others, it hangs \"indefinitely\".\r\n\r\n### Code\r\n\r\nConsider the following simple example, which does *not* fail:\r\n\r\n```rust\r\nfn traverse(mut iter: impl Iterator<Item = u8>) {\r\n    if dbg!(iter.next()).is_some() {\r\n        traverse(iter);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    traverse(vec![1, 2, 3, 4].into_iter());\r\n}\r\n```\r\n\r\nIt simply traverses the given iterator - in a really weird way yes - and displays each value, yielding:\r\n\r\n```rust\r\n\u279c ./bug \r\n[bug.rs:2] iter.next() = Some(\r\n    1,\r\n)\r\n[bug.rs:2] iter.next() = Some(\r\n    2,\r\n)\r\n[bug.rs:2] iter.next() = Some(\r\n    3,\r\n)\r\n[bug.rs:2] iter.next() = Some(\r\n    4,\r\n)\r\n[bug.rs:2] iter.next() = None\r\n```\r\n\r\nSo no infinite recursion call here. When applying an iterator adaptor to the recursive call, such as by replacing `traverse(iter)` with `traverse(iter.skip(1))`, then as expected it yields the error:\r\n\r\n```rust\r\n\u279c rustc bug.rs   \r\nerror: reached the recursion limit while instantiating `traverse::<std::iter::Skip<std::...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\r\n --> bug.rs:3:9\r\n  |\r\n3 |         traverse(iter.skip(1));\r\n  |         ^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\nnote: `traverse` defined here\r\n --> bug.rs:1:1\r\n  |\r\n1 | fn traverse(mut iter: impl Iterator<Item = u8>) {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nHowever, when using adaptors that require a closure to be passed as an argument, such as `skip_while`, it becomes *much* slower. On my machine:\r\n\r\n```rust\r\n\u279c time rustc bug.rs\r\nerror: reached the recursion limit while instantiating `traverse::<std::iter::SkipWhile<...>, [closure@bug.rs:3:34: 3:45]>>`\r\n --> bug.rs:3:9\r\n  |\r\n3 |         traverse(iter.skip_while(|&x| x != 3));\r\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\nnote: `traverse` defined here\r\n --> bug.rs:1:1\r\n  |\r\n1 | fn traverse(mut iter: impl Iterator<Item = u8>) {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n\r\nrustc bug.rs  15,28s user 0,03s system 99% cpu 15,317 total\r\n```\r\n\r\nDuration can vary between 10 and 15 seconds from my tests. Now, when applying the same adaptor but taking the iterator by reference, it completely hangs the compiler:\r\n\r\n```rust\r\nfn traverse(iter: &mut impl Iterator<Item = u8>) {\r\n    if dbg!(iter.next()).is_some() {\r\n        traverse(&mut iter.skip_while(|&x| x != 3));\r\n    }\r\n}\r\n\r\nfn main() {\r\n    traverse(&mut vec![1, 2, 3, 4].into_iter());\r\n}\r\n```\r\n\r\nThis does not reach the expected error, at least from my testing where rustc did not exit even after more than two hours. The previous example also hangs when using other closure-taking adaptors such as `take_while`, `map` and `filter`, but not with ones like `skip`, `take` nor `step_by`.\r\n\r\nObviously, a quick fix in a comparable situation is to use `dyn` trait objects in order to skip the iterator type monomorphization entirely, but I think the compiler shouldn't get stuck and still be able to report the instantiation recursion limit error successfully.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nTested on stable, beta and nightly:\r\n\r\n`rustc +stable --version --verbose`:\r\n```\r\nrustc 1.48.0 (7eac88abb 2020-11-16)\r\nbinary: rustc\r\ncommit-hash: 7eac88abb2e57e752f3302f02be5f3ce3d7adfb4\r\ncommit-date: 2020-11-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.48.0\r\nLLVM version: 11.0\r\n```\r\n\r\n`rustc +beta --version --verbose`:\r\n```\r\nrustc 1.49.0-beta.3 (19ccb6c3c 2020-12-08)\r\nbinary: rustc\r\ncommit-hash: 19ccb6c3cc1af6b8d8350756bbe29b02fd6d6ffe\r\ncommit-date: 2020-12-08\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.49.0-beta.3\r\n```\r\n\r\n`rustc +nightly --version --verbose`:\r\n```\r\nrustc 1.50.0-nightly (f0f68778f 2020-12-09)\r\nbinary: rustc\r\ncommit-hash: f0f68778f798d6d34649745b41770829b17ba5b8\r\ncommit-date: 2020-12-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.50.0-nightly\r\n```\r\n\r\nHope this helps.\r\n\r\nCheers,\r\nPaul.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78403/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78403/timeline", "performed_via_github_app": null, "state_reason": null}