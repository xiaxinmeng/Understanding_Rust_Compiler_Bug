{"url": "https://api.github.com/repos/rust-lang/rust/issues/101112", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101112/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101112/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101112/events", "html_url": "https://github.com/rust-lang/rust/issues/101112", "id": 1353262957, "node_id": "I_kwDOAAsO6M5QqSdt", "number": 101112, "title": "weird output in E0080 diagnostic", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-08-28T06:33:47Z", "updated_at": "2022-08-28T06:33:47Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: <!-- Please provide a link to play.rust-lang.org -->\r\n`./src/test/ui/consts/invalid-union.rs`\r\n```rust\r\n// Check that constants with interior mutability inside unions are rejected\r\n// during validation.\r\n//\r\n// Note that this test case relies on undefined behaviour to construct a\r\n// constant with interior mutability that is \"invisible\" to the static checks.\r\n// If for some reason this approach no longer works, it is should be fine to\r\n// remove the test case.\r\n//\r\n// build-fail\r\n// stderr-per-bitwidth\r\n#![feature(const_mut_refs)]\r\n\r\nuse std::cell::Cell;\r\nuse std::mem::ManuallyDrop;\r\n\r\n#[repr(C)]\r\nstruct S {\r\n    x: u32,\r\n    y: E,\r\n}\r\n\r\n#[repr(u32)]\r\nenum E {\r\n    A,\r\n    B(U)\r\n}\r\n\r\nunion U {\r\n    cell: ManuallyDrop<Cell<u32>>,\r\n}\r\n\r\nconst C: S = {\r\n    let s = S { x: 0, y: E::A };\r\n    // Go through an &u32 reference which is definitely not allowed to mutate anything.\r\n    let p = &s.x as *const u32 as *mut u32;\r\n    // Change enum tag to E::B.\r\n    unsafe { *p.add(1) = 1 };\r\n    s\r\n};\r\n\r\nfn main() { //~ ERROR it is undefined behavior to use this value\r\n    let _: &'static _ = &C; //~ ERROR erroneous constant used\r\n    //~^ WARN this was previously accepted\r\n}\r\n```\r\nFull output:\r\n````\r\nwarning: variant `B` is never constructed\r\n  --> ./src/test/ui/consts/invalid-union.rs:25:5\r\n   |\r\n23 | enum E {\r\n   |      - variant in this enum\r\n24 |     A,\r\n25 |     B(U)\r\n   |     ^\r\n   |\r\n   = note: `#[warn(dead_code)]` on by default\r\n\r\nwarning: field `cell` is never read\r\n  --> ./src/test/ui/consts/invalid-union.rs:29:5\r\n   |\r\n28 | union U {\r\n   |       - field in this union\r\n29 |     cell: ManuallyDrop<Cell<u32>>,\r\n   |     ^^^^\r\n\r\nerror[E0080]: it is undefined behavior to use this value\r\n  --> ./src/test/ui/consts/invalid-union.rs:41:1\r\n   |\r\n41 | fn main() { //~ ERROR it is undefined behavior to use this value\r\n   | ^^^^^^^^^ constructing invalid value at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\r\n   |\r\n   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\r\n   = note: the raw bytes of the constant (size: 8, align: 8) {\r\n               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\r\n           }\r\n\r\nerror: erroneous constant used\r\n  --> ./src/test/ui/consts/invalid-union.rs:42:25\r\n   |\r\n42 |     let _: &'static _ = &C; //~ ERROR erroneous constant used\r\n   |                         ^^ referenced constant has errors\r\n   |\r\n   = note: `#[deny(const_err)]` on by default\r\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\r\n\r\nerror: aborting due to 2 previous errors; 2 warnings emitted\r\n````\r\n\r\n\r\nI am curious about the E0080, what is this ------alloc7------ supposed to tell me...? :sweat_smile: \r\nLoos like some mangled diagram?\r\n````\r\nerror[E0080]: it is undefined behavior to use this value\r\n  --> ./src/test/ui/consts/invalid-union.rs:41:1\r\n   |\r\n41 | fn main() { //~ ERROR it is undefined behavior to use this value\r\n   | ^^^^^^^^^ constructing invalid value at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\r\n   |\r\n   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\r\n   = note: the raw bytes of the constant (size: 8, align: 8) {\r\n               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\r\n           }\r\n````", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101112/timeline", "performed_via_github_app": null, "state_reason": null}