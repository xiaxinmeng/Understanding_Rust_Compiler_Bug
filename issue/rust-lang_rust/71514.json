{"url": "https://api.github.com/repos/rust-lang/rust/issues/71514", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71514/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71514/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71514/events", "html_url": "https://github.com/rust-lang/rust/issues/71514", "id": 606427716, "node_id": "MDU6SXNzdWU2MDY0Mjc3MTY=", "number": 71514, "title": "[Reasoning] A valid const-generic impl Default for arrays, and eventually working to a TryFromIter implementation...", "user": {"login": "ZaneHannanAU", "id": 20490671, "node_id": "MDQ6VXNlcjIwNDkwNjcx", "avatar_url": "https://avatars.githubusercontent.com/u/20490671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZaneHannanAU", "html_url": "https://github.com/ZaneHannanAU", "followers_url": "https://api.github.com/users/ZaneHannanAU/followers", "following_url": "https://api.github.com/users/ZaneHannanAU/following{/other_user}", "gists_url": "https://api.github.com/users/ZaneHannanAU/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZaneHannanAU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZaneHannanAU/subscriptions", "organizations_url": "https://api.github.com/users/ZaneHannanAU/orgs", "repos_url": "https://api.github.com/users/ZaneHannanAU/repos", "events_url": "https://api.github.com/users/ZaneHannanAU/events{/privacy}", "received_events_url": "https://api.github.com/users/ZaneHannanAU/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-24T16:13:15Z", "updated_at": "2021-08-21T20:40:02Z", "closed_at": "2021-08-21T20:40:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is mostly an ideas test for potentially introducing a generic impl for Default over an array of any size, rather than just up to 32.\n\nMy current implementation does not, unfortunately, implement default for arrays at zero cost; but could be useful for further checks:\n\n```rust\nuse ::core::mem::MaybeUninit;\n#[derive(Copy, Clone, Debug)]\nstruct ImplDefaultConstArray<T: Default, const N: usize> {\n  arr: MaybeUninit<[T; N]>,\n  idx: usize,\n}\nunsafe impl<T: Default, const N: usize> Drop for ImplDefaultConstArray<T, { N }> {\n  fn drop(&mut self) {\n    let _assigned = self.arr[..self.idx];\n    // let it drop normally\n  }\n}\nimpl<T: Default, const N: usize> Default for [T; N] {\n  fn default() -> Self {\n    let uninit = ImplDefaultConstArray {\n      arr: MaybeUninit::uninit(),\n      idx: 0,\n    };\n    while uninit.idx < N {\n      uninit.arr[uninit.idx] = T::default();\n      uninit.idx += 1;\n    }\n    unsafe { uninit.arr.assume_init() }\n  }\n}\n```\n\nUnfortunately I believe this currently is an erroneous implementation, and has other issues regarding the real cost of it.\n\nThis could also be implemented in a less technical way if `FromIterator` on arrays stabilises, or rather a `TryFromIterator` implementation detailed below arises (note the `try_collect`)\n\n```rust\nuse ::core::iter;\nimpl<T: Default, const N: usize> Default for [T; N]\n  fn default() -> Self {\n    #[cfg(feature = \"impl_take_const\")]\n    iter::repeat_with(T::default)\n      .take(N)\n      .try_collect()\n      .unwrap()\n    #[cfg(not(feature = \"impl_take_const\"))]\n    {\n      let mut idx = 0;\n      iter::from_fn(|| if idx < N {\n        *idx += 1;\n        Some(T::default())\n      } else {\n        None\n      })\n      .try_collect()\n      .unwrap()\n    }\n  }\n}\n```\n\nOr the original code could be a part of a generic implementation of `FromIterator`, or a potential trait `TryFromIterator` where type Error is of type `TryFromSliceError`, or a similarly zero-sized `TryFromIteratorError`; and a further is added:\n\n```rust\nimpl<T: FromIterator, I> TryFromIterator<Item = I> for T {\n  type Error = !;\n  fn try_from_iter<Iter: Iterator<Item = I>(iter: Iter) -> Result<Self, Self::Error> {\n    Ok(T::from_iter(iter))\n  }\n}\n``` \n\n... I thank you for your time.\n\np.s: I also should really stop writing these so early... and need to adopt more official language in this circumstance. If someone can write this up as a feature request or PR more officially, that'd be amazing. Thank you.", "closed_by": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71514/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71514/timeline", "performed_via_github_app": null, "state_reason": "completed"}