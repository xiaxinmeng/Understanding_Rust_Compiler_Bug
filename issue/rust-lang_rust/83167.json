{"url": "https://api.github.com/repos/rust-lang/rust/issues/83167", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83167/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83167/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83167/events", "html_url": "https://github.com/rust-lang/rust/issues/83167", "id": 832140927, "node_id": "MDU6SXNzdWU4MzIxNDA5Mjc=", "number": 83167, "title": "Use const generics for stdarch intrinsics", "user": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 223796632, "node_id": "MDU6TGFiZWwyMjM3OTY2MzI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/relnotes", "name": "relnotes", "color": "fad8c7", "default": false, "description": "Marks issues that should be documented in the release notes of the next release."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/82", "html_url": "https://github.com/rust-lang/rust/milestone/82", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/82/labels", "id": 6717076, "node_id": "MDk6TWlsZXN0b25lNjcxNzA3Ng==", "number": 82, "title": "1.54.0", "description": null, "creator": {"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}, "open_issues": 2, "closed_issues": 652, "state": "closed", "created_at": "2021-05-01T02:53:57Z", "updated_at": "2022-02-03T12:07:26Z", "due_on": null, "closed_at": "2021-08-17T19:06:49Z"}, "comments": 54, "created_at": "2021-03-15T19:51:33Z", "updated_at": "2021-12-03T01:04:02Z", "closed_at": "2021-12-03T01:04:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "# Background\r\n\r\nhttps://github.com/rust-lang/stdarch/issues/248\r\n\r\n`core::arch` contains architecture-specific vendor intrinsics, some of which have arguments that are required to be compile-time constants. This is tricky because LLVM will often assert/ICE if a constant is not passed into the LLVM intrinsic at the LLVM IR level. This was previously handled by using a `match` statement to manually monomorphize the intrinsic:\r\n\r\n```rust\r\n#[inline]\r\n#[target_feature(enable = \"sse\")]\r\n#[cfg_attr(test, assert_instr(shufps, mask = 3))]\r\n#[rustc_args_required_const(2)]\r\n#[stable(feature = \"simd_x86\", since = \"1.27.0\")]\r\npub unsafe fn _mm_shuffle_ps(a: __m128, b: __m128, mask: i32) -> __m128 {\r\n    let mask = (mask & 0xFF) as u8;\r\n\r\n    macro_rules! shuffle_done {\r\n        ($x01:expr, $x23:expr, $x45:expr, $x67:expr) => {\r\n            simd_shuffle4(a, b, [$x01, $x23, $x45, $x67])\r\n        };\r\n    }\r\n    macro_rules! shuffle_x67 {\r\n        ($x01:expr, $x23:expr, $x45:expr) => {\r\n            match (mask >> 6) & 0b11 {\r\n                0b00 => shuffle_done!($x01, $x23, $x45, 4),\r\n                0b01 => shuffle_done!($x01, $x23, $x45, 5),\r\n                0b10 => shuffle_done!($x01, $x23, $x45, 6),\r\n                _ => shuffle_done!($x01, $x23, $x45, 7),\r\n            }\r\n        };\r\n    }\r\n    macro_rules! shuffle_x45 {\r\n        ($x01:expr, $x23:expr) => {\r\n            match (mask >> 4) & 0b11 {\r\n                0b00 => shuffle_x67!($x01, $x23, 4),\r\n                0b01 => shuffle_x67!($x01, $x23, 5),\r\n                0b10 => shuffle_x67!($x01, $x23, 6),\r\n                _ => shuffle_x67!($x01, $x23, 7),\r\n            }\r\n        };\r\n    }\r\n    macro_rules! shuffle_x23 {\r\n        ($x01:expr) => {\r\n            match (mask >> 2) & 0b11 {\r\n                0b00 => shuffle_x45!($x01, 0),\r\n                0b01 => shuffle_x45!($x01, 1),\r\n                0b10 => shuffle_x45!($x01, 2),\r\n                _ => shuffle_x45!($x01, 3),\r\n            }\r\n        };\r\n    }\r\n    match mask & 0b11 {\r\n        0b00 => shuffle_x23!(0),\r\n        0b01 => shuffle_x23!(1),\r\n        0b10 => shuffle_x23!(2),\r\n        _ => shuffle_x23!(3),\r\n    }\r\n}\r\n```\r\n\r\nThe downside of this approach is that it generates huge MIR and severely bloats the size of `libcore` to the point where it actually affects compilation time.\r\n\r\nThe `#[rustc_args_required_const]` attribute was used to restrict arguments to constants so that we could eventually replace this with const generics. Note that it effectively only acts as a hard lint, the `match` is still needed to manually monomorphize the LLVM intrinsic.\r\n\r\n# New const generics support\r\n\r\nhttps://github.com/rust-lang/stdarch/issues/1022\r\n\r\nAll the intrinsics in `stdarch` have been converted to use the newly stabilized const generics:\r\n\r\n```rust\r\n#[inline]\r\n#[target_feature(enable = \"sse\")]\r\n#[cfg_attr(test, assert_instr(shufps, mask = 3))]\r\n#[rustc_legacy_const_generics(2)]\r\n#[stable(feature = \"simd_x86\", since = \"1.27.0\")]\r\npub unsafe fn _mm_shuffle_ps<const mask: i32>(a: __m128, b: __m128) -> __m128 {\r\n    static_assert!(mask: i32 where mask >= 0 && mask <= 255);\r\n    simd_shuffle4(\r\n        a,\r\n        b,\r\n        [\r\n            mask as u32 & 0b11,\r\n            (mask as u32 >> 2) & 0b11,\r\n            ((mask as u32 >> 4) & 0b11) + 4,\r\n            ((mask as u32 >> 6) & 0b11) + 4,\r\n        ],\r\n    )\r\n}\r\n```\r\n\r\nTo preserve backwards compatibility with the already stabilized intrinsics using `#[rustc_args_required_const]`, a new attribute `#[rustc_legacy_const_generics]` was added in #82447 which rewrites function calls of the form `func(a, b, c)` to `func::<{b}>(a, c)`.\r\n\r\nThis new attribute is not intended to ever be stabilized, it is only intended for use in `stdarch` as a replacement for `#[rustc_args_required_const]`.\r\n\r\n```rust\r\n#[rustc_legacy_const_generics(1)]\r\npub fn foo<const Y: usize>(x: usize, z: usize) -> [usize; 3] {\r\n    [x, Y, z]\r\n}\r\n\r\nfn main() {\r\n    assert_eq!(foo(0 + 0, 1 + 1, 2 + 2), [0, 2, 4]);\r\n    assert_eq!(foo::<{1 + 1}>(0 + 0, 2 + 2), [0, 2, 4]);\r\n}\r\n```\r\n\r\n# Open questions/issues\r\n\r\n- `#[rustc_args_required_const]` allowed constant expressions derived from generic arguments in the caller, but this is not allowed with const generics. This technically makes this a breaking change.\r\n- Another potential breaking change is that the intrinsics now use a post-monomorphization `static_assert` to validate constant arguments. Previously, intrinsics would either use runtime asserts or simply pick an arbitrary default behavior for out-of-range constants.\r\n- Do we want to force all callers to use the const generics syntax in the 2021 edition?\r\n  - Pros:\r\n    - It makes it clearer that these intrinsics expect a constant as an argument.\r\n    - Intrinsics are rendered with the const generics syntax in rustdoc.\r\n  - Cons:\r\n    - We will still need to support the `#[rustc_legacy_const_generics]` argument rewriting anyways for 2015/2018 code.\r\n    - Intrinsics no longer have the same function signature as the original C vendor intrinsics.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83167/reactions", "total_count": 8, "+1": 2, "-1": 0, "laugh": 0, "hooray": 6, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83167/timeline", "performed_via_github_app": null, "state_reason": "completed"}