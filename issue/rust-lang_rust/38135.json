{"url": "https://api.github.com/repos/rust-lang/rust/issues/38135", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38135/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38135/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38135/events", "html_url": "https://github.com/rust-lang/rust/issues/38135", "id": 193237787, "node_id": "MDU6SXNzdWUxOTMyMzc3ODc=", "number": 38135, "title": "Broken MIR stemming from (potentially spurious?) type error", "user": {"login": "sdleffler", "id": 5241142, "node_id": "MDQ6VXNlcjUyNDExNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5241142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdleffler", "html_url": "https://github.com/sdleffler", "followers_url": "https://api.github.com/users/sdleffler/followers", "following_url": "https://api.github.com/users/sdleffler/following{/other_user}", "gists_url": "https://api.github.com/users/sdleffler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdleffler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdleffler/subscriptions", "organizations_url": "https://api.github.com/users/sdleffler/orgs", "repos_url": "https://api.github.com/users/sdleffler/repos", "events_url": "https://api.github.com/users/sdleffler/events{/privacy}", "received_events_url": "https://api.github.com/users/sdleffler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2016-12-02T22:55:06Z", "updated_at": "2017-03-04T05:13:39Z", "closed_at": "2017-03-04T05:13:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm getting this warning:\r\n\r\n```rust\r\nwarning: broken MIR (Terminator { source_info: SourceInfo { span: src/array.rs:50:24: 50:89, scope: scope1 }, kind: _3 = std::ptr::read::<array::Array<<tll::ternary::Zero<L> as tll::ternary::NatPred>::Output, T>>(_5) -> [return: bb5, unwind: bb4] }): call dest mismatch (array::Array<<tll::ternary::Zero<L> as tll::ternary::NatPred>::Output, T> <- array::Array<tll::ternary::Two<<L as tll::ternary::NatPred>::Output>, T>): Sorts(ExpectedFound { expected: <tll::ternary::Zero<L> as tll::ternary::NatPred>::Output, found: tll::ternary::Two<<L as tll::ternary::NatPred>::Output> })\r\n  --> src/array.rs:50:34\r\n   |\r\n50 |             let init = ptr::read(&self as *const Self as *const Array<Pred<Zero<L>>, T>);\r\n   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nwarning: broken MIR (Terminator { source_info: SourceInfo { span: src/array.rs:50:24: 50:89, scope: scope1 }, kind: _3 = std::ptr::read::<array::Array<<tll::ternary::Zero<L> as tll::ternary::NatPred>::Output, T>>(_5) -> [return: bb5, unwind: bb4] }): bad arg #0 (*const array::Array<tll::ternary::Two<<L as tll::ternary::NatPred>::Output>, T> <- *const array::Array<<tll::ternary::Zero<L> as tll::ternary::NatPred>::Output, T>): Sorts(ExpectedFound { expected: tll::ternary::Two<<L as tll::ternary::NatPred>::Output>, found: <tll::ternary::Zero<L> as tll::ternary::NatPred>::Output })\r\n  --> src/array.rs:50:34\r\n   |\r\n50 |             let init = ptr::read(&self as *const Self as *const Array<Pred<Zero<L>>, T>);\r\n   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nwarning: broken MIR (_23 = _3): bad assignment (array::Array<tll::ternary::Two<<L as tll::ternary::NatPred>::Output>, T> = array::Array<<tll::ternary::Zero<L> as tll::ternary::NatPred>::Output, T>): Sorts(ExpectedFound { expected: tll::ternary::Two<<L as tll::ternary::NatPred>::Output>, found: <tll::ternary::Zero<L> as tll::ternary::NatPred>::Output })\r\n  --> src/array.rs:54:14\r\n   |\r\n54 |             (init, last)\r\n```\r\n\r\nThe types in question check out when I look at them; `tll::ternary::...` types and traits are from a type-level implementation of natural numbers represented in a ternary format. What's going on is that on the left-hand of these \"type mismatches\" is that one side has gone through normalization and the other has not (`Pred<Zero<L>>` should normalize to `Two<Pred<L>>`.) So, my (un)educated guess as to what's going on here is that normalization is not happening somewhere it should, and as such MIR is producing a spurious warning about a type mismatch.\r\n\r\nHere's the code that causes it. Unfortunately, I don't think I can easily pare this down to a minimal reproduction case, but to start:\r\n\r\n```rust\r\nimpl<L: Arrayify<T> + NatPred, T> Array<Zero<L>, T>\r\n    where Pred<L>: Arrayify<T>\r\n{\r\n    fn split_last(self) -> (Array<Pred<Zero<L>>, T>, T) {\r\n        unsafe {\r\n            let init = ptr::read(&self as *const Self as *const Array<Pred<Zero<L>>, T>);\r\n            let last = ptr::read((&self as *const Self as *const T)\r\n                .offset(L::reify() as isize - 1));\r\n            mem::forget(self);\r\n            (init, last)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nChanging the code to this compiles just fine with no broken MIR warnings:\r\n\r\n```rust\r\nimpl<L: Arrayify<T> + NatPred, T> Array<Zero<L>, T>\r\n    where Pred<L>: Arrayify<T>\r\n{\r\n    fn split_last(self) -> (Array<Pred<Zero<L>>, T>, T) {\r\n        unsafe {\r\n            let init = ptr::read(&self as *const Self as *const Array<Two<Pred<L>>, T>);\r\n            let last = ptr::read((&self as *const Self as *const T)\r\n                .offset(L::reify() as isize - 1));\r\n            mem::forget(self);\r\n            (init, last)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Compiler info\r\n\r\n```\r\nsean@sean-Samus:~/Projects/tll-array$ rustc --version --verbose\r\nrustc 1.15.0-nightly (908dba0c9 2016-12-01)\r\nbinary: rustc\r\ncommit-hash: 908dba0c9477b7dd022a236cb1514ddfca9369f2\r\ncommit-date: 2016-12-01\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.15.0-nightly\r\nLLVM version: 3.9\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38135/timeline", "performed_via_github_app": null, "state_reason": "completed"}