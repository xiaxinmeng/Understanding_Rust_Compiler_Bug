{"url": "https://api.github.com/repos/rust-lang/rust/issues/53117", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53117/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53117/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53117/events", "html_url": "https://github.com/rust-lang/rust/issues/53117", "id": 348019124, "node_id": "MDU6SXNzdWUzNDgwMTkxMjQ=", "number": 53117, "title": "Combining inline and target_feature attributes with recursive functions causing incorrect results.", "user": {"login": "jackmott", "id": 4701158, "node_id": "MDQ6VXNlcjQ3MDExNTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4701158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackmott", "html_url": "https://github.com/jackmott", "followers_url": "https://api.github.com/users/jackmott/followers", "following_url": "https://api.github.com/users/jackmott/following{/other_user}", "gists_url": "https://api.github.com/users/jackmott/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackmott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackmott/subscriptions", "organizations_url": "https://api.github.com/users/jackmott/orgs", "repos_url": "https://api.github.com/users/jackmott/repos", "events_url": "https://api.github.com/users/jackmott/events{/privacy}", "received_events_url": "https://api.github.com/users/jackmott/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-08-06T17:42:10Z", "updated_at": "2020-02-13T15:11:10Z", "closed_at": "2020-02-13T15:11:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "`add_stuff` is a function with AVX2 simd intrinsics, set to inline always.\r\n`add_stuff_helper` is a function with the target_feature set to enable AVX2 instructions.\r\n\r\nIf you run this in a release build, you will get an incorrect result, the return values from the recursive function do not add up.   I believe this is because there is code being generated around the recursion that is not getting the avx2 target_feature applied.\r\n\r\nIf you make add_stuff not recursive, this all works fine.\r\n\r\nThe code below obviously does not make sense to use by itself, it works for instance if you put the target_feature on the add_stuff function directly,  but this technique is useful for doing some nice SIMD metaprogramming with traits, and this bug makes that not work.\r\n\r\nIs this a bug that can be fixed? Or an innate limitation of the inlining, target_features, and recursion?  Is there a workaround?\r\n\r\n\r\n\r\n```rust\r\n#[cfg(target_arch = \"x87\")]\r\nuse std::arch::x86::*;\r\n#[cfg(target_arch = \"x86_64\")]\r\nuse std::arch::x86_64::*;\r\nuse std::fmt::Debug;\r\n\r\n#[inline(always)]\r\nunsafe fn add_stuff(a: f32, count: i32) -> __m256 {\r\n    let b = _mm256_set1_ps(2.0);\r\n    let a2 = _mm256_set1_ps(a);\r\n    if count < 4 {\r\n        println!(\"count:{}\",count);\r\n        let r = _mm256_add_ps(_mm256_add_ps(a2, b), add_stuff(a, count + 1));\r\n        println!(\"r:{:?}\",r);\r\n        r\r\n    } else {\r\n        _mm256_add_ps(a2, b)\r\n    }\r\n}\r\n\r\n#[target_feature(enable = \"avx2\")]\r\nunsafe fn add_stuff_helper() {\r\n    let r = add_stuff(2.0,1);\r\n    println!(\"raw avx {:?}\",r);\r\n}\r\n\r\nfn main() {\r\n    unsafe {\r\n        add_stuff_helper();\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Environment:\r\nThis happens with rustc 1.27 stable through 1.31.0 nightly (at least)\r\nAll tested on linux, on a cpu that supports AVX2 instructions. Intel core i7 6700\r\n", "closed_by": {"login": "jackmott", "id": 4701158, "node_id": "MDQ6VXNlcjQ3MDExNTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4701158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackmott", "html_url": "https://github.com/jackmott", "followers_url": "https://api.github.com/users/jackmott/followers", "following_url": "https://api.github.com/users/jackmott/following{/other_user}", "gists_url": "https://api.github.com/users/jackmott/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackmott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackmott/subscriptions", "organizations_url": "https://api.github.com/users/jackmott/orgs", "repos_url": "https://api.github.com/users/jackmott/repos", "events_url": "https://api.github.com/users/jackmott/events{/privacy}", "received_events_url": "https://api.github.com/users/jackmott/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53117/timeline", "performed_via_github_app": null, "state_reason": "completed"}