{"url": "https://api.github.com/repos/rust-lang/rust/issues/46759", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46759/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46759/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46759/events", "html_url": "https://github.com/rust-lang/rust/issues/46759", "id": 282601933, "node_id": "MDU6SXNzdWUyODI2MDE5MzM=", "number": 46759, "title": "Matching on modulo failure.", "user": {"login": "44100hertz", "id": 11461551, "node_id": "MDQ6VXNlcjExNDYxNTUx", "avatar_url": "https://avatars.githubusercontent.com/u/11461551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/44100hertz", "html_url": "https://github.com/44100hertz", "followers_url": "https://api.github.com/users/44100hertz/followers", "following_url": "https://api.github.com/users/44100hertz/following{/other_user}", "gists_url": "https://api.github.com/users/44100hertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/44100hertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/44100hertz/subscriptions", "organizations_url": "https://api.github.com/users/44100hertz/orgs", "repos_url": "https://api.github.com/users/44100hertz/repos", "events_url": "https://api.github.com/users/44100hertz/events{/privacy}", "received_events_url": "https://api.github.com/users/44100hertz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-16T05:41:01Z", "updated_at": "2017-12-17T02:18:05Z", "closed_at": "2017-12-17T02:18:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "When matching on an unsigned modulus, I can cover all possible branches and still get a complaint.\r\n```rust\r\nfn thing(i: u8) -> &'static str {\r\n    match i % 3 {\r\n        0 => \"Zero\",\r\n        1 => \"One\",\r\n        2 => \"Two\",\r\n    }\r\n}\r\n```\r\n```\r\nerror[E0004]: non-exhaustive patterns: `_` not covered\r\n --> /tmp/modmatch.rs:2:11\r\n  |\r\n2 |     match i % 3 {\r\n  |           ^^^^^ pattern `_` not covered\r\n```\r\nThis is easily covered with `_ => unreachable!()`, possibly the most idiomatic use of said macro. I just wonder if it's possible for rust to be a bit smarter about this type of case.", "closed_by": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46759/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46759/timeline", "performed_via_github_app": null, "state_reason": "completed"}