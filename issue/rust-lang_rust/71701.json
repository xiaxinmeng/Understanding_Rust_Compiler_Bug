{"url": "https://api.github.com/repos/rust-lang/rust/issues/71701", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71701/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71701/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71701/events", "html_url": "https://github.com/rust-lang/rust/issues/71701", "id": 609654600, "node_id": "MDU6SXNzdWU2MDk2NTQ2MDA=", "number": 71701, "title": "Inline asm: `=m` constraint on uninitialized object variable in `impl` block causes the SelectionDAGBuilder to crash rustc with SIGSEGV on Linux and 0xC0000005 on Windows", "user": {"login": "kennystrawnmusic", "id": 3030773, "node_id": "MDQ6VXNlcjMwMzA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3030773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennystrawnmusic", "html_url": "https://github.com/kennystrawnmusic", "followers_url": "https://api.github.com/users/kennystrawnmusic/followers", "following_url": "https://api.github.com/users/kennystrawnmusic/following{/other_user}", "gists_url": "https://api.github.com/users/kennystrawnmusic/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennystrawnmusic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennystrawnmusic/subscriptions", "organizations_url": "https://api.github.com/users/kennystrawnmusic/orgs", "repos_url": "https://api.github.com/users/kennystrawnmusic/repos", "events_url": "https://api.github.com/users/kennystrawnmusic/events{/privacy}", "received_events_url": "https://api.github.com/users/kennystrawnmusic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-04-30T07:12:00Z", "updated_at": "2020-05-22T20:35:36Z", "closed_at": "2020-05-22T20:35:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n//*snip*\r\n/// Struct to store data from all registers in, in event of context switch\r\n#[derive(Debug, Clone, Copy)]\r\npub struct ContextStore {\r\n    pub rax: usize,\r\n    pub rbx: usize,\r\n    pub rcx: usize,\r\n    pub rdx: usize,\r\n    pub rdi: usize,\r\n    pub rsi: usize,\r\n    pub rbp: usize,\r\n    pub rsp: usize,\r\n    pub r8: usize,\r\n    pub r9: usize,\r\n    pub r10: usize,\r\n    pub r11: usize,\r\n    pub r12: usize,\r\n    pub r13: usize,\r\n    pub r14: usize,\r\n    pub r15: usize,\r\n    pub rip: usize,\r\n    pub rflags: usize,\r\n    pub cs: usize,\r\n    pub ss: usize,\r\n    pub fs: usize,\r\n    pub gs: usize,\r\n    pub fpu_buf: usize, //was giving me problems when attempting to assign as [u8; 512]\r\n    pub avx_buf: usize, //could hold either SSE or AVX depending on what's supported\r\n}\r\n\r\nimpl ContextStore {\r\n\r\n    /// Copy data from all registers, including stack and instruction pointers, into Context instance\r\n    pub fn backup() -> ContextStore {\r\n        let reg_rax: usize;\r\n        let reg_rbx: usize;\r\n        let reg_rcx: usize;\r\n        let reg_rdx: usize;\r\n        let reg_rdi: usize;\r\n        let reg_rsi: usize;\r\n        let reg_rbp: usize;\r\n        let reg_rsp: usize;\r\n        let reg_r8: usize;\r\n        let reg_r9: usize;\r\n        let reg_r10: usize;\r\n        let reg_r11: usize;\r\n        let reg_r12: usize;\r\n        let reg_r13: usize;\r\n        let reg_r14: usize;\r\n        let reg_r15: usize;\r\n        let reg_rip: usize;\r\n        let reg_rflags: usize;\r\n        let reg_cs: usize;\r\n        let reg_ss: usize;\r\n        let reg_fs: usize;\r\n        let reg_gs: usize;\r\n        let fxdest: usize;\r\n        let xdest: usize;\r\n\r\n        unsafe {\r\n            llvm_asm!(\"\r\n                mov %rax, $1\"\r\n                :\"=r\"(reg_rax) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rbx, $1\"\r\n                :\"=r\"(reg_rbx) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rcx, $1\"\r\n                :\"=r\"(reg_rcx) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rdx, $1\"\r\n                :\"=r\"(reg_rdx) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rdi, $1\"\r\n                :\"=r\"(reg_rdi) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rsi, $1\"\r\n                :\"=r\"(reg_rsi) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rbp, $1\"\r\n                :\"=r\"(reg_rbp) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rsp, $1\"\r\n                :\"=r\"(reg_rsp) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r8, $1\"\r\n                :\"=r\"(reg_r8) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r9, $1\"\r\n                :\"=r\"(reg_r9) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r10, $1\"\r\n                :\"=r\"(reg_r10) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r11, $1\"\r\n                :\"=r\"(reg_r11) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r12, $1\"\r\n                :\"=r\"(reg_r12) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r13, $1\"\r\n                :\"=r\"(reg_r13) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r14, $1\"\r\n                :\"=r\"(reg_r14) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r15, $1\"\r\n                :\"=r\"(reg_r15) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rip, $1\"\r\n                :\"=r\"(reg_rip) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rflags, $1\"\r\n                :\"=r\"(reg_rflags) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %cs, $1\"\r\n                :\"=r\"(reg_cs) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %ss, $1\"\r\n                :\"=r\"(reg_ss) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %fs, $1\"\r\n                :\"=r\"(reg_fs) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %gs, $1\"\r\n                :\"=r\"(reg_gs) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                fxsave $0\"\r\n                :\"=m\"(fxdest)\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                xsave $0\"\r\n                :\"=m\"(xdest)\r\n            );\r\n        }\r\n\r\n        ContextStore {\r\n            rax: reg_rax,\r\n            rbx: reg_rbx,\r\n            rcx: reg_rcx,\r\n            rdx: reg_rdx,\r\n            rdi: reg_rdi,\r\n            rsi: reg_rsi,\r\n            rbp: reg_rbp,\r\n            rsp: reg_rsp,\r\n            r8: reg_r8,\r\n            r9: reg_r9,\r\n            r10: reg_r10,\r\n            r11: reg_r11,\r\n            r12: reg_r12,\r\n            r13: reg_r13,\r\n            r14: reg_r14,\r\n            r15: reg_r15,\r\n            rip: reg_rip,\r\n            rflags: reg_rflags,\r\n            cs: reg_cs,\r\n            ss: reg_ss,\r\n            fs: reg_fs,\r\n            gs: reg_gs,\r\n            fpu_buf: fxdest,\r\n            avx_buf: xdest,\r\n        }\r\n    }\r\n\r\n    /// Same as backup(), but mutable for testing purposes. Unsafe for obvious reasons.\r\n    pub unsafe fn backup_as_mut() -> ContextStore {\r\n        let mut reg_rax: usize;\r\n        let mut reg_rbx: usize;\r\n        let mut reg_rcx: usize;\r\n        let mut reg_rdx: usize;\r\n        let mut reg_rdi: usize;\r\n        let mut reg_rsi: usize;\r\n        let mut reg_rbp: usize;\r\n        let mut reg_rsp: usize;\r\n        let mut reg_r8: usize;\r\n        let mut reg_r9: usize;\r\n        let mut reg_r10: usize;\r\n        let mut reg_r11: usize;\r\n        let mut reg_r12: usize;\r\n        let mut reg_r13: usize;\r\n        let mut reg_r14: usize;\r\n        let mut reg_r15: usize;\r\n        let mut reg_rip: usize;\r\n        let mut reg_rflags: usize;\r\n        let mut reg_cs: usize;\r\n        let mut reg_ss: usize;\r\n        let mut reg_fs: usize;\r\n        let mut reg_gs: usize;\r\n        let mut fxdest: usize;\r\n        let mut xdest: usize;\r\n\r\n        //Don't know why the compiler is warning about this; llvm_asm! is definitely unsafe\r\n        #[allow(unused_unsafe)]\r\n        unsafe {\r\n            llvm_asm!(\"\r\n                mov %rax, $1\"\r\n                :\"=r\"(reg_rax) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rbx, $1\"\r\n                :\"=r\"(reg_rbx) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rcx, $1\"\r\n                :\"=r\"(reg_rcx) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rdx, $1\"\r\n                :\"=r\"(reg_rdx) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rdi, $1\"\r\n                :\"=r\"(reg_rdi) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rsi, $1\"\r\n                :\"=r\"(reg_rsi) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rbp, $1\"\r\n                :\"=r\"(reg_rbp) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rsp, $1\"\r\n                :\"=r\"(reg_rsp) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r8, $1\"\r\n                :\"=r\"(reg_r8) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r9, $1\"\r\n                :\"=r\"(reg_r9) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r10, $1\"\r\n                :\"=r\"(reg_r10) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r11, $1\"\r\n                :\"=r\"(reg_r11) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r12, $1\"\r\n                :\"=r\"(reg_r12) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r13, $1\"\r\n                :\"=r\"(reg_r13) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r14, $1\"\r\n                :\"=r\"(reg_r14) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %r15, $1\"\r\n                :\"=r\"(reg_r15) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rip, $1\"\r\n                :\"=r\"(reg_rip) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %rflags, $1\"\r\n                :\"=r\"(reg_rflags) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %cs, $1\"\r\n                :\"=r\"(reg_cs) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %ss, $1\"\r\n                :\"=r\"(reg_ss) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %fs, $1\"\r\n                :\"=r\"(reg_fs) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov %gs, $1\"\r\n                :\"=r\"(reg_gs) ::: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                fxsave $0\"\r\n                :\"=m\"(fxdest)\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                xsave $0\"\r\n                :\"=m\"(xdest)\r\n            );\r\n        }\r\n\r\n        #[allow(unused_mut)]\r\n        let mut c_stor = ContextStore {\r\n            rax: reg_rax,\r\n            rbx: reg_rbx,\r\n            rcx: reg_rcx,\r\n            rdx: reg_rdx,\r\n            rdi: reg_rdi,\r\n            rsi: reg_rsi,\r\n            rbp: reg_rbp,\r\n            rsp: reg_rsp,\r\n            r8: reg_r8,\r\n            r9: reg_r9,\r\n            r10: reg_r10,\r\n            r11: reg_r11,\r\n            r12: reg_r12,\r\n            r13: reg_r13,\r\n            r14: reg_r14,\r\n            r15: reg_r15,\r\n            rip: reg_rip,\r\n            rflags: reg_rflags,\r\n            cs: reg_cs,\r\n            ss: reg_ss,\r\n            fs: reg_fs,\r\n            gs: reg_gs,\r\n            fpu_buf: fxdest,\r\n            avx_buf: xdest,\r\n        };\r\n        c_stor //return this\r\n    }\r\n\r\n    /// Copy data from Context instance provided as method argument into all registers, including stack and instruction pointers\r\n    pub fn restore(ctx: ContextStore) {\r\n\r\n        unsafe {\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %rax\"\r\n                :\r\n                : \"{rax}\"(ctx.rax) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %rbx\"\r\n                :\r\n                : \"{rbx}\"(ctx.rbx) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %rcx\"\r\n                :\r\n                : \"{rcx}\"(ctx.rcx) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %rdx\"\r\n                :\r\n                : \"{rdx}\"(ctx.rdx) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %rdi\"\r\n                :\r\n                : \"{rdi}\"(ctx.rdi) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %rsi\"\r\n                :\r\n                : \"{rsi}\"(ctx.rsi) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %rbp\"\r\n                :\r\n                : \"{rbp}\"(ctx.rbp) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %rsp\"\r\n                :\r\n                : \"{rsp}\"(ctx.rsp) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %r8\"\r\n                :\r\n                : \"{r8}\"(ctx.r8) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %r9\"\r\n                :\r\n                : \"{r9}\"(ctx.r9) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %r10\"\r\n                :\r\n                : \"{r10}\"(ctx.r10) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %r11\"\r\n                :\r\n                : \"{r11}\"(ctx.r11) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %r12\"\r\n                :\r\n                : \"{r12}\"(ctx.r12) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %r13\"\r\n                :\r\n                : \"{r13}\"(ctx.r13) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %r14\"\r\n                :\r\n                : \"{r14}\"(ctx.r14) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %r15\"\r\n                :\r\n                : \"{r15}\"(ctx.r15) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %rip\"\r\n                :\r\n                : \"{rip}\"(ctx.rip) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %rflags\"\r\n                :\r\n                : \"{rflags}\"(ctx.rflags) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %cs\"\r\n                :\r\n                : \"{cs}\"(ctx.cs) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %ss\"\r\n                :\r\n                : \"{cs}\"(ctx.ss) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %fs\"\r\n                :\r\n                : \"{fs}\"(ctx.fs) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                mov $0, %gs\"\r\n                :\r\n                : \"{gs}\"(ctx.gs) :: \"volatile\"\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                fxrstor $0\"\r\n                :\r\n                : \"m\"(ctx.fpu_buf)\r\n            );\r\n\r\n            llvm_asm!(\"\r\n                xrstor $0\"\r\n                :\r\n                : \"m\"(ctx.avx_buf)\r\n            );\r\n        }\r\n    }\r\n}\r\n//*snip*\r\n```\r\n\r\nI expected to see this happen:\r\n\r\nI get it, that's a lot of inline assembly, but also highly necessary if you're developing an OS \u2015 and backing up registers to initiate a context switch is one of those areas in which developers have no choice but to get down and dirty.\r\n\r\nSo, using `cargo bootimage` \u2015 which definitely worked before I wrote this code \u2015 shouldn't be a problem here, especially given that there are plenty of crates out there that serve, to a degree, as safe abstractions. If the inline assembly has any syntax problems in it (reversed `$1` and `$0` for example which might be the case here) then the compiler should throw an error, not crash.\r\n\r\nInstead, this happened:\r\n\r\nNo compiler errors are output, but the compiler crashes \u2015 with, exactly as the title says, a segmentation fault, using an Arch Linux host.\r\n\r\nHere's the GDB output \u2015 and this is using the copied-and-pasted arguments that `cargo bootimage` is passing down to `rustc` whenever I try to build this project:\r\n\r\n```\r\n sudo gdb /opt/rust/bin/rustc\r\nGNU gdb (GDB) 9.1\r\nCopyright (C) 2020 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.\r\nType \"show copying\" and \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-pc-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n    <http://www.gnu.org/software/gdb/documentation/>.\r\n\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from /opt/rust/bin/rustc...\r\n(gdb) set args --crate-name foundation --edition=2018 src/main.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -Cbitcode-in-rlib=no -C debuginfo=2 -C metadata=43bb5f9c010d384a -C extra-filename=-43bb5f9c010d384a --out-dir /home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps --target /home/realkstrawn93/Desktop/foundation/foundation.json -C incremental=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/incremental -L dependency=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps -L dependency=/home/realkstrawn93/Desktop/foundation/target/debug/deps --extern acpi=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libacpi-2468ed628f48cc96.rlib --extern bootloader=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libbootloader-9cc0e1fe6e171121.rlib --extern conquer_once=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libconquer_once-c97aa096525a92d5.rlib --extern crossbeam_queue=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libcrossbeam_queue-b1977b968e889611.rlib --extern embedded_graphics=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libembedded_graphics-1a0e2418ea24d543.rlib --extern embedded_hal=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libembedded_hal-2a0341aff3027e3a.rlib --extern futures=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libfutures-5a4e74d4cf36b338.rlib --extern lazy_static=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/liblazy_static-75eb22ceac96cc86.rlib --extern linked_list_allocator=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/liblinked_list_allocator-f207ac3a6355d05d.rlib --extern pc_keyboard=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libpc_keyboard-fdb3a18b96a076fd.rlib --extern pic8259_simple=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libpic8259_simple-c3975024e57f481b.rlib --extern raw_cpuid=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libraw_cpuid-c7af727af4bd4ba0.rlib --extern spin=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libspin-49552fecbc548142.rlib --extern tinypci=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libtinypci-2049d2f725a17edf.rlib --extern uart_16550=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libuart_16550-2592cdbc4cace607.rlib --extern volatile=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libvolatile-b5909b2d587908c7.rlib --extern x86_64=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libx86_64-3e58c4978b5c685f.rlib --sysroot /home/realkstrawn93/Desktop/foundation/target/sysroot\r\n(gdb) run\r\nStarting program: /opt/rust/bin/rustc --crate-name foundation --edition=2018 src/main.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -Cbitcode-in-rlib=no -C debuginfo=2 -C metadata=43bb5f9c010d384a -C extra-filename=-43bb5f9c010d384a --out-dir /home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps --target /home/realkstrawn93/Desktop/foundation/foundation.json -C incremental=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/incremental -L dependency=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps -L dependency=/home/realkstrawn93/Desktop/foundation/target/debug/deps --extern acpi=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libacpi-2468ed628f48cc96.rlib --extern bootloader=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libbootloader-9cc0e1fe6e171121.rlib --extern conquer_once=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libconquer_once-c97aa096525a92d5.rlib --extern crossbeam_queue=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libcrossbeam_queue-b1977b968e889611.rlib --extern embedded_graphics=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libembedded_graphics-1a0e2418ea24d543.rlib --extern embedded_hal=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libembedded_hal-2a0341aff3027e3a.rlib --extern futures=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libfutures-5a4e74d4cf36b338.rlib --extern lazy_static=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/liblazy_static-75eb22ceac96cc86.rlib --extern linked_list_allocator=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/liblinked_list_allocator-f207ac3a6355d05d.rlib --extern pc_keyboard=--Type <RET> for more, q to quit, c to continue without paging--\r\n/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libpc_keyboard-fdb3a18b96a076fd.rlib --extern pic8259_simple=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libpic8259_simple-c3975024e57f481b.rlib --extern raw_cpuid=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libraw_cpuid-c7af727af4bd4ba0.rlib --extern spin=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libspin-49552fecbc548142.rlib --extern tinypci=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libtinypci-2049d2f725a17edf.rlib --extern uart_16550=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libuart_16550-2592cdbc4cace607.rlib --extern volatile=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libvolatile-b5909b2d587908c7.rlib --extern x86_64=/home/realkstrawn93/Desktop/foundation/target/foundation/debug/deps/libx86_64-3e58c4978b5c685f.rlib --sysroot /home/realkstrawn93/Desktop/foundation/target/sysroot\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/usr/lib/libthread_db.so.1\".\r\nprocess 291019 is executing new program: /opt/rust/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/usr/lib/libthread_db.so.1\".\r\n[New Thread 0x7fffef3ff700 (LWP 291023)]\r\n[New Thread 0x7fffecdff700 (LWP 291024)]\r\n[Thread 0x7fffecdff700 (LWP 291024) exited]\r\n[New Thread 0x7fffecdff700 (LWP 291026)]\r\n[New Thread 0x7fffe743b700 (LWP 291027)]\r\n[New Thread 0x7fffe6dff700 (LWP 291028)]\r\n[Thread 0x7fffe6dff700 (LWP 291028) exited]\r\n[New Thread 0x7fffe6dff700 (LWP 291029)]\r\n[New Thread 0x7fffe65ff700 (LWP 291030)]\r\n[Thread 0x7fffe6dff700 (LWP 291029) exited]\r\n[New Thread 0x7fffe6dff700 (LWP 291031)]\r\n[New Thread 0x7fffe5b7f700 (LWP 291032)]\r\n[Thread 0x7fffe65ff700 (LWP 291030) exited]\r\n[New Thread 0x7fffe65ff700 (LWP 291033)]\r\n[Thread 0x7fffe6dff700 (LWP 291031) exited]\r\n[New Thread 0x7fffe6dff700 (LWP 291034)]\r\n[Thread 0x7fffe5b7f700 (LWP 291032) exited]\r\n[Thread 0x7fffe65ff700 (LWP 291033) exited]\r\n[New Thread 0x7fffe65ff700 (LWP 291035)]\r\n[Thread 0x7fffe6dff700 (LWP 291034) exited]\r\n[New Thread 0x7fffe6dff700 (LWP 291036)]\r\n[New Thread 0x7fffe5b7f700 (LWP 291037)]\r\n[New Thread 0x7fffe53ff700 (LWP 291038)]\r\n[Thread 0x7fffe5b7f700 (LWP 291037) exited]\r\n[Thread 0x7fffe6dff700 (LWP 291036) exited]\r\n[Thread 0x7fffe65ff700 (LWP 291035) exited]\r\n[New Thread 0x7fffe5b7f700 (LWP 291039)]\r\n[Thread 0x7fffe53ff700 (LWP 291038) exited]\r\n[New Thread 0x7fffe53ff700 (LWP 291040)]\r\n[Thread 0x7fffe5b7f700 (LWP 291039) exited]\r\n[New Thread 0x7fffe5b7f700 (LWP 291041)]\r\n--Type <RET> for more, q to quit, c to continue without paging--\r\n\r\nThread 19 \"rustc\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0x7fffe5b7f700 (LWP 291041)]\r\n0x00007ffff1cb7b1e in llvm::SelectionDAGBuilder::visitInlineAsm(llvm::ImmutableCallSite) ()\r\n   from /opt/rust/toolchains/nightly-x86_64-unknown-linux-gnu/bin/../lib/../lib/libLLVM-9-rust-1.45.0-nightly.so\r\n```\r\nNote that it's actually `rustc` itself that's segfaulting here \u2015 this here is why I didn't file any bug reports with the cargo-bootimage crate maintainers: `cargo bootimage` invokes `rustc` to actually do the compiling, using a custom set of parameters that the above gdb output is preserving for posterity.\r\n\r\nAlso, the instruction that rustc is segfaulting in \u2015 again, according to GDB \u2015 is very clearly a line of LLVM inline assembly parsing code: `llvm::SelectionDAGBuilder::visitInlineAsm(llvm::ImmutableCallSite) ()`\r\n\r\nSince this is really the only part of my project in which I use any inline assembly at all (the `x86_64` crate is of great help elsewhere), I am fairly confident that the problem here is that something in Rust's LLVM implementation just can't handle this much inline assembly at one time. Hopefully there's a way to improve this upstream.", "closed_by": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71701/timeline", "performed_via_github_app": null, "state_reason": "completed"}