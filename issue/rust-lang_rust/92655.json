{"url": "https://api.github.com/repos/rust-lang/rust/issues/92655", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92655/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92655/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92655/events", "html_url": "https://github.com/rust-lang/rust/issues/92655", "id": 1096663522, "node_id": "I_kwDOAAsO6M5BXcHi", "number": 92655, "title": "feat: matches! to return data in an Option", "user": {"login": "numero-744", "id": 42908717, "node_id": "MDQ6VXNlcjQyOTA4NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/42908717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/numero-744", "html_url": "https://github.com/numero-744", "followers_url": "https://api.github.com/users/numero-744/followers", "following_url": "https://api.github.com/users/numero-744/following{/other_user}", "gists_url": "https://api.github.com/users/numero-744/gists{/gist_id}", "starred_url": "https://api.github.com/users/numero-744/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/numero-744/subscriptions", "organizations_url": "https://api.github.com/users/numero-744/orgs", "repos_url": "https://api.github.com/users/numero-744/repos", "events_url": "https://api.github.com/users/numero-744/events{/privacy}", "received_events_url": "https://api.github.com/users/numero-744/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-01-07T20:57:13Z", "updated_at": "2022-10-22T11:12:38Z", "closed_at": "2022-10-22T11:12:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "`matches!` is a great tool to do the job of `.is_variant()` when not available, but it is not useful to replace `.as_variant()`, returning an `Option<T>`. It could be made possible, for instance by adding a rule with one more argument representing the value returned in the option. This new rule would be quite the same as the existing one.\r\n\r\n```rust\r\nmacro_rules! matches {\r\n    ($expression:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) => {\r\n        match $expression {\r\n            $( $pattern )|+ $( if $guard )? => true,\r\n            _ => false\r\n        }\r\n    };\r\n    ($expression:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )?, $value:expr $(,)?) => {\r\n        match $expression {\r\n            $( $pattern )|+ $( if $guard )? => Some($value),\r\n            _ => None,\r\n        }\r\n    };\r\n}\r\n```\r\n\r\nIt could enable to do:\r\n\r\n```rust\r\nlet foo = matches!(my_enum, MyEnum::MyVariant(v, _), v)?;\r\n```\r\n\r\ninstead of\r\n\r\n```rust\r\nlet foo = match my_enum {\r\n    MyEnum::MyVariant(v, _) => v,\r\n    _ => return None,\r\n}\r\n```\r\n\r\nIt is maybe related to #86112 because the new rule of the macro would have to accept variable declarations in the pattern.\r\n\r\n### Discussion\r\n\r\nMaybe being able to return two different types according to the number of given arguments can be confusing, so maybe another macro could be defined instead.\r\n\r\nAlso, this macro rule is kind of a `map` because `$value` can by any expression, so maybe a new macro called `map!` could be created instead of adding a rule to `matches!`.", "closed_by": {"login": "numero-744", "id": 42908717, "node_id": "MDQ6VXNlcjQyOTA4NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/42908717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/numero-744", "html_url": "https://github.com/numero-744", "followers_url": "https://api.github.com/users/numero-744/followers", "following_url": "https://api.github.com/users/numero-744/following{/other_user}", "gists_url": "https://api.github.com/users/numero-744/gists{/gist_id}", "starred_url": "https://api.github.com/users/numero-744/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/numero-744/subscriptions", "organizations_url": "https://api.github.com/users/numero-744/orgs", "repos_url": "https://api.github.com/users/numero-744/repos", "events_url": "https://api.github.com/users/numero-744/events{/privacy}", "received_events_url": "https://api.github.com/users/numero-744/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92655/timeline", "performed_via_github_app": null, "state_reason": "completed"}