{"url": "https://api.github.com/repos/rust-lang/rust/issues/77955", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77955/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77955/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77955/events", "html_url": "https://github.com/rust-lang/rust/issues/77955", "id": 721853553, "node_id": "MDU6SXNzdWU3MjE4NTM1NTM=", "number": 77955, "title": "Unnecessary local variable and memcpy not elided during struct initialization", "user": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-14T23:11:32Z", "updated_at": "2021-03-12T20:00:42Z", "closed_at": "2021-03-12T20:00:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here is a case where a local variable isn't optimized away, which introduces an unnecessary copy:\r\n\r\n```rust\r\nstruct S {\r\n    item: [u64; 17],\r\n}\r\n\r\npub fn f() {\r\n    let item = [1u64; 17];  \r\n    unsafe { ext(&S{item}) };\r\n}\r\n\r\nextern {\r\n    fn ext(s: &S);\r\n}\r\n```\r\n\r\n`item` is created on the stack, and then copied into the `S` temporary. But `item` is otherwise unused, so the compiler could just populate the temporary directly.\r\n\r\nAssembly at `-C opt-level=3`:\r\n\r\n```asm\r\n.LCPI0_0:\r\n        .quad   1\r\n        .quad   1\r\nexample::f:\r\n        pushq   %rbx\r\n        subq    $272, %rsp\r\n        movaps  .LCPI0_0(%rip), %xmm0\r\n        movaps  %xmm0, (%rsp)\r\n        movaps  %xmm0, 16(%rsp)\r\n        movaps  %xmm0, 32(%rsp)\r\n        movaps  %xmm0, 48(%rsp)\r\n        movaps  %xmm0, 64(%rsp)\r\n        movaps  %xmm0, 80(%rsp)\r\n        movaps  %xmm0, 96(%rsp)\r\n        movaps  %xmm0, 112(%rsp)\r\n        movq    $1, 128(%rsp)\r\n        leaq    136(%rsp), %rbx\r\n        movq    %rsp, %rsi\r\n        movl    $136, %edx\r\n        movq    %rbx, %rdi\r\n        callq   *memcpy@GOTPCREL(%rip)\r\n        movq    %rbx, %rdi\r\n        callq   *ext@GOTPCREL(%rip)\r\n        addq    $272, %rsp\r\n        popq    %rbx\r\n        retq\r\n```\r\n\r\nThe problem occurs if the array initializer is `1u64`, but not if it's `0u64`. With `1u64`, the generated IR uses a loop to populate the array, whereas with `0u64`, it doesn't. The issue is likely that LLVM is unable to see through the relative complexity of the loop to notice that `item` can be eliminated.\r\n\r\nHere is the LLVM-IR before any optimization passes:\r\n\r\n```llvm\r\ndefine void @_ZN3lib1f17ha3b7b123ae9e0a2fE() unnamed_addr #0 {\r\nstart:\r\n  %item = alloca [17 x i64], align 8\r\n  %_3 = alloca %S, align 8\r\n  %0 = getelementptr inbounds [17 x i64], [17 x i64]* %item, i64 0, i64 0\r\n  %1 = getelementptr inbounds [17 x i64], [17 x i64]* %item, i64 0, i64 0\r\n  %2 = getelementptr inbounds [17 x i64], [17 x i64]* %item, i64 0, i64 17\r\n  br label %repeat_loop_header\r\n\r\nbb1:                                              ; preds = %repeat_loop_next\r\n  %3 = bitcast %S* %_3 to i8*\r\n  call void @llvm.lifetime.end.p0i8(i64 136, i8* %3)\r\n  ret void\r\n\r\nrepeat_loop_header:                               ; preds = %repeat_loop_body, %start\r\n  %4 = phi i64* [ %1, %start ], [ %6, %repeat_loop_body ]\r\n  %5 = icmp ne i64* %4, %2\r\n  br i1 %5, label %repeat_loop_body, label %repeat_loop_next\r\n\r\nrepeat_loop_body:                                 ; preds = %repeat_loop_header\r\n  store i64 1, i64* %4, align 8\r\n  %6 = getelementptr inbounds i64, i64* %4, i64 1\r\n  br label %repeat_loop_header\r\n\r\nrepeat_loop_next:                                 ; preds = %repeat_loop_header\r\n  %7 = bitcast %S* %_3 to i8*\r\n  call void @llvm.lifetime.start.p0i8(i64 136, i8* %7)\r\n  %8 = bitcast %S* %_3 to [17 x i64]*\r\n  %9 = bitcast [17 x i64]* %8 to i8*\r\n  %10 = bitcast [17 x i64]* %item to i8*\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 136, i1 false)\r\n  call void @ext(%S* noalias readonly align 8 dereferenceable(136) %_3)\r\n  br label %bb1\r\n}\r\n```\r\n\r\nIf you replace the array with a struct with 17 u64 members, the problem also goes away. Again, this causes the IR to not use a loop to initialize `item`.\r\n\r\nThis was found while investigating #77613. I think the cause is slightly different, though I would guess it's the same general idea--LLVM can't see how to make some optimization through multiple basic blocks.\r\n\r\n#45663 is also related, but may or may not have the same root cause.\r\n\r\nReproduces from 1.0.", "closed_by": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77955/timeline", "performed_via_github_app": null, "state_reason": "completed"}