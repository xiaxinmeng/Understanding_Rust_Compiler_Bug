{"url": "https://api.github.com/repos/rust-lang/rust/issues/60869", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60869/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60869/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60869/events", "html_url": "https://github.com/rust-lang/rust/issues/60869", "id": 444695779, "node_id": "MDU6SXNzdWU0NDQ2OTU3Nzk=", "number": 60869, "title": "Streamline `Symbol`, `InternedString`, and `LocalInternedString`.", "user": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 33, "created_at": "2019-05-16T00:02:14Z", "updated_at": "2019-12-10T05:18:03Z", "closed_at": "2019-10-24T20:21:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We currently have three closely-related symbol types.\r\n\r\n`Symbol` is the fundamental type. A `Symbol` is an index. All operations work on that index. `StableHash` is not implemented for it, but there's no reason why it couldn't be. A `Symbol` can be a gensym, which gets special treatment -- it's a guaranteed unique index, even if its chars have been seen before.\r\n\r\n`InternedString` is a thin wrapper around `Symbol`. You can convert a `Symbol` to an `InternedString`. It has two differences with `Symbol`.\r\n- Its `PartialOrd`/`Ord`/`Hash` impls use the chars, rather than the index.\r\n- Gensym-ness is ignored/irrelevant.\r\n\r\n`LocalInternedString` is an alternative that contains a `&str`. You can convert both `Symbol` and `InternedString` to `LocalInternedString`. Its `PartialOrd`/`Ord`/`Hash` impls (plus `PartialEq`/`Eq`) naturally work on chars. Its main use is to provide a way to look some or all of the individual chars within a `Symbol` or `InternedString`, which is sometimes necessary.\r\n\r\nI have always found the differences between these types confusing and hard to remember. Furthermore, the distinction between `Symbol` and `InternedString` is subtle and has caused\r\n[bugs](https://github.com/rust-lang/rust/pull/60815#issuecomment-492850013).\r\n\r\nAlso, gensyms in general make things a lot more complicated, and it would be great to eliminate them.\r\n\r\nHere's what I would like as a final state.\r\n\r\n- `Symbol` exists.\r\n- `InternedString` does not exist.\r\n- `LocalInternedString` perhaps exists, but is only used temporarily when code needs access to the chars within a `Symbol`. Alternatively, `Symbol` could provide a `with()` method (like `InternedString` currently has) that provides access to the chars, and then `LocalInternedString` wouldn't be needed.\r\n- `Symbol`'s impl of `Hash` uses the index, and its impl of `StableHash` uses the chars.\r\n- Not sure about `Symbol`'s impl of `PartialOrd`/`Ord`. If a stable ordering is really needed (perhaps for error messages?) we could introduce a `StableOrd` trait and use that in the relevant places, or do a custom sort, or something.\r\n- Gensyms don't really exist. They are simulated: when you call `gensym()`, it just appends a unique suffix. It's worth noting that gensyms are always identifiers, and so the unique suffix can use a non-identifier char. And `Interner` could keep a counter. So \"foo\" would gensym to something lke \"foo$1\", \"foo$2\", etc. Once the suffix is added, they would just be treated as normal symbols (in terms of hashing, etc.) I would hope that identifier gensyms would never be compared with non-identifier symbols, so a false positive equality match should be impossible. (Different types for identifier symbols and non-identifier symbols would protect against that, but might cause other difficulties.) Alternatively, #49300 talks about other ways of dealing with gensyms.\r\n- All this should also help performance, because we'd end up with more operations on indexes, and only the necessary ones on chars (which require TLS lookups).\r\n\r\nI haven't even touched on the way lifetimes work in the interner, which are subtle and error-prone. But having fewer types would only make improvements on that front simpler.\r\n\r\nThoughts?\r\n\r\nCC @petrochenkov @Zoxc @eddyb @Mark-Simulacrum @michaelwoerister\r\n", "closed_by": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60869/timeline", "performed_via_github_app": null, "state_reason": "completed"}