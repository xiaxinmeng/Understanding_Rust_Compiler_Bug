{"url": "https://api.github.com/repos/rust-lang/rust/issues/37454", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/37454/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/37454/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/37454/events", "html_url": "https://github.com/rust-lang/rust/issues/37454", "id": 185984309, "node_id": "MDU6SXNzdWUxODU5ODQzMDk=", "number": 37454, "title": "Option + impl Trait = uncompilable code (?)", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-28T18:01:17Z", "updated_at": "2018-01-05T21:04:32Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "### STR\n\n``` rust\n#![feature(conservative_impl_trait)]\n\ntrait Foo {\n    fn foo(&self);\n}\n\nstruct FooStruct {}\n\nimpl Foo for FooStruct {\n    fn foo(&self) {\n        println!(\"foo\");\n    }\n}\n\nfn mk_foo() -> impl Foo {\n    FooStruct {}\n}\n\nfn main() {\n    let mut maybe_foo = None;\n\n    loop {\n        if some_condition() {\n            maybe_foo.take().map(|f| f.foo());\n\n            maybe_foo = Some(mk_foo());\n        }\n\n        // .. more code ..\n    }\n}\n\nfn some_condition() -> bool {\n    true\n}\n```\n\n```\nrustc foo.rs\nerror: the type of this value must be known in this context\n  --> foo.rs:24:38\n   |\n24 |             maybe_foo.take().map(|f| f.foo());\n   |                                      ^^^^^^^\n\nerror: aborting due to previous error\n```\n\n---\n\nThis works:\n\n``` diff\n     loop {\n         if true {\n-            maybe_foo.take().map(|f| f.foo());\n-\n             maybe_foo = Some(mk_foo());\n+\n+            maybe_foo.take().map(|f| f.foo());\n         }\n```\n\nbut changes the behaviour of the code.\n\nMy first attempt to fix this was:\n\n``` diff\n fn main() {\n-    let mut maybe_foo = None;\n+    let mut maybe_foo: Option<impl Foo> = None;\n\n     loop {\n```\n\nbut: \n\n```\nerror[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n```\n\nMy second attempt was:\n\n``` diff\n\n+fn init_maybe_foo() -> Option<impl Foo> {\n+    None::<FooStruct>\n+}\n+\n fn main() {\n-    let mut maybe_foo = None;\n+    let mut maybe_foo = init_maybe_foo();\n\n     loop {\n```\n\nbut:\n\n```\n$ rustc foo.rs\nerror[E0308]: mismatched types\n  --> foo.rs:30:30\n   |\n30 |             maybe_foo = Some(mk_foo());\n   |                              ^^^^^^^^ expected anonymized type, found a different anonymized type\n   |\n   = note: expected type `impl Foo` (anonymized type)\n   = note:    found type `impl Foo` (anonymized type)\n\nerror: aborting due to previous error\n```\n\nWhat? They have the same type.\n\nAre `impl Trait` types in `let` statements planned? Or can type inference be ... improved (?) to handle the last case? Or does anyone know how to work around this? :smile: \n\ncc @eddyb \n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/37454/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/37454/timeline", "performed_via_github_app": null, "state_reason": null}