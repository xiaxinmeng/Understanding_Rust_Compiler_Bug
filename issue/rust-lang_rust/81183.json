{"url": "https://api.github.com/repos/rust-lang/rust/issues/81183", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/81183/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/81183/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/81183/events", "html_url": "https://github.com/rust-lang/rust/issues/81183", "id": 788723839, "node_id": "MDU6SXNzdWU3ODg3MjM4Mzk=", "number": 81183, "title": "`cargo build` fails but building macro-expanded file works", "user": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234948, "node_id": "MDU6TGFiZWwyMzQ5NDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-attributes", "name": "A-attributes", "color": "f7e101", "default": false, "description": "Area: #[attributes(..)]"}, {"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-01-19T05:40:37Z", "updated_at": "2021-01-19T20:16:10Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Cargo.toml:\r\n\r\n```toml\r\n[package]\r\nname = \"instrument_test\"\r\nversion = \"0.1.0\"\r\nauthors = []\r\nedition = \"2018\"\r\n\r\n[dependencies]\r\ntracing = { path = \"/home/omer/rust/tracing/tracing\" }\r\ntracing-core = { path = \"/home/omer/rust/tracing/tracing-core\" }\r\n```\r\n\r\nThe 'tracing' package is https://github.com/tokio-rs/tracing master branch (fe570af).\r\n\r\nmain.rs:\r\n\r\n```rust\r\nuse tracing::instrument;\r\n\r\n#[instrument]\r\nfn main() {\r\n    //! testing\r\n}\r\n```\r\n\r\nIf I build this with current rustc master (4ba1aaf35f1):\r\n\r\n```\r\n$ cargo +stage1 build\r\n...\r\n    Compiling instrument_test v0.1.0 (/home/omer/rust/instrument_test)\r\nerror: an inner attribute is not permitted in this context\r\n --> src/main.rs:4:1\r\n  |\r\n4 | / fn main() {\r\n5 | |     //! testing\r\n6 | | }\r\n  | |_^\r\n  |\r\n  = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\r\n\r\nerror: aborting due to previous error\r\n\r\nerror: could not compile `instrument_test`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\nHowever if I expand the macro/attribute using the same rustc using `cargo-expand` and replace main.rs with the expanded code, it builds fine. Expanded code:\r\n\r\n```rust\r\n#![feature(prelude_import)]\r\n#[prelude_import]\r\nuse std::prelude::v1::*;\r\n#[macro_use]\r\nextern crate std;\r\nuse tracing::instrument;\r\nfn main() {\r\n    //! testing\r\n    {}\r\n    let __tracing_attr_span = {\r\n        use ::tracing::__macro_support::{Callsite as _, Registration};\r\n        static CALLSITE: ::tracing::__macro_support::MacroCallsite = {\r\n            use ::tracing::__macro_support::{MacroCallsite, Registration};\r\n            static META: ::tracing::Metadata<'static> = {\r\n                ::tracing_core::metadata::Metadata::new(\r\n                    \"main\",\r\n                    \"instrument_test\",\r\n                    tracing::Level::INFO,\r\n                    Some(\"src/main.rs\"),\r\n                    Some(3u32),\r\n                    Some(\"instrument_test\"),\r\n                    ::tracing_core::field::FieldSet::new(\r\n                        &[],\r\n                        ::tracing_core::callsite::Identifier(&CALLSITE),\r\n                    ),\r\n                    ::tracing::metadata::Kind::SPAN,\r\n                )\r\n            };\r\n            static REG: Registration = Registration::new(&CALLSITE);\r\n            MacroCallsite::new(&META, &REG)\r\n        };\r\n        let mut interest = ::tracing::collect::Interest::never();\r\n        if tracing::Level::INFO <= ::tracing::level_filters::STATIC_MAX_LEVEL\r\n            && tracing::Level::INFO <= ::tracing::level_filters::LevelFilter::current()\r\n            && {\r\n                interest = CALLSITE.interest();\r\n                !interest.is_never()\r\n            }\r\n            && CALLSITE.is_enabled(interest)\r\n        {\r\n            let meta = CALLSITE.metadata();\r\n            ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })\r\n        } else {\r\n            let span = CALLSITE.disabled_span();\r\n            {};\r\n            span\r\n        }\r\n    };\r\n    let __tracing_attr_guard = __tracing_attr_span.enter();\r\n    {}\r\n}\r\n```\r\n\r\nInterestingly `cargo expand` prints the same error (\"an inner attribute is not permitted in this context\") but it's still able to expand the code, and expanded code works.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/81183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/81183/timeline", "performed_via_github_app": null, "state_reason": null}