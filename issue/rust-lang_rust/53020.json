{"url": "https://api.github.com/repos/rust-lang/rust/issues/53020", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53020/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53020/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53020/events", "html_url": "https://github.com/rust-lang/rust/issues/53020", "id": 347313841, "node_id": "MDU6SXNzdWUzNDczMTM4NDE=", "number": 53020, "title": "Tracking issue for comparing raw pointers in constants", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}, {"id": 3537216018, "node_id": "LA_kwDOAAsO6M7S1aIS", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-design-concerns", "name": "S-tracking-design-concerns", "color": "4682b4", "default": false, "description": "Blocking design concerns"}, {"id": 3537250192, "node_id": "LA_kwDOAAsO6M7S1ieQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-needs-summary", "name": "S-tracking-needs-summary", "color": "4682b4", "default": false, "description": "It's hard to tell what's been done and what hasn't! Someone should do some investigation."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-08-03T08:53:57Z", "updated_at": "2022-09-06T11:09:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Comparing raw pointers in constants is forbidden (hard error) in const contexts. \r\nThe `const_compare_raw_pointers` feature gate enables the `guaranteed_eq` and `guaranteed_ne` methods on raw pointers. The root problem with pointer comparisons at compile time is that in many cases we can't know for sure whether two pointers are equal or inequal. While it's fairly obvious that a pointer to a `static` and a local variable won't be equal, we can't ever tell whether two local variables are equal (their memory may alias at runtime) or whether any pointer is equal to a specific integer. In order to make it obvious that there is a discrepancy between runtime and compile-time, the `guaranteed_*` methods only return `true` when we can be sure that two things are (in)equal. At runtime these methods just return the result of the actual pointer comparison.\r\n\r\nThis permits `const fn` to do performance optimization tricks like the one done in slice comparison (if length is equal and pointer is equal, don't compare the slice contents, just return that it's equal).\r\n\r\nSince we aren't sure yet what the semantics of functions that return different values at runtime and at compile-time are, we'll keep this function unstable until we've had that discussion.\r\n\r\n### Unresolved questions\r\n\r\n* should `guaranteed_eq` return an `Option<bool>` to allow the caller to know whether they got unclear results? What would the use-case for this be?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53020/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53020/timeline", "performed_via_github_app": null, "state_reason": null}