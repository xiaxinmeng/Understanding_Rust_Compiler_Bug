{"url": "https://api.github.com/repos/rust-lang/rust/issues/53845", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53845/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53845/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53845/events", "html_url": "https://github.com/rust-lang/rust/issues/53845", "id": 355861777, "node_id": "MDU6SXNzdWUzNTU4NjE3Nzc=", "number": 53845, "title": "Optimize miri engine performance for sanity checks of arrays", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 419557634, "node_id": "MDU6TGFiZWw0MTk1NTc2MzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-medium", "name": "E-medium", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Medium / intermediate"}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-31T06:57:39Z", "updated_at": "2019-01-28T13:44:15Z", "closed_at": "2019-01-28T13:44:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The knowledge about all the elements in an array can be used to run a single check instead of running the checks on each element one at a time (suggested in https://github.com/rust-lang/rust/pull/53671#issuecomment-417566432).\r\n\r\nThis is currently [only done for strings](https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/interpret/validity.rs#L323), but could just as well be done for arrays of various types with `Scalar` layout.\r\n\r\nThe E-easy part of this issue is to check for arrays/slices of the builtin integer types and simply verify that there are no relocations in the entire array and that the entire array has no undefined bytes. Should be possible by simply calling https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/interpret/memory.rs#L740 and checking whether it returned `Ok`. No need to actually check the value.\r\n\r\nThe E-medium part is to refactor https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/interpret/validity.rs#L99 to take a bunch of closures which do the final checks. Instead of doing the check for a single memory location, run it for the entire array at once. This means the function won't have https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/interpret/validity.rs#L101 as an argument anymore, but instead the closures pass around some generic value. E.g https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/interpret/validity.rs#L110-L113 would be replaced by a closure call, and its result would be fed into the next closure e.g. in https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/interpret/validity.rs#L166 . Note that https://github.com/rust-lang/rust/issues/53826 should be done before this, otherwise you'll go crazy while attempting to fiddle this refactoring into the current code", "closed_by": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53845/timeline", "performed_via_github_app": null, "state_reason": "completed"}