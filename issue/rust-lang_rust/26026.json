{"url": "https://api.github.com/repos/rust-lang/rust/issues/26026", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/26026/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/26026/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/26026/events", "html_url": "https://github.com/rust-lang/rust/issues/26026", "id": 85415643, "node_id": "MDU6SXNzdWU4NTQxNTY0Mw==", "number": 26026, "title": "Bounds on associated types are not taken into account during typeck", "user": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-06-05T04:22:38Z", "updated_at": "2022-03-05T10:58:14Z", "closed_at": "2022-03-05T10:58:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Note that this is the current definition of IntoIterator:\n\n``` rust\npub trait IntoIterator {\n    type Item;\n    type IntoIter: Iterator<Item=Self::Item>;\n\n    fn into_iter(self) -> Self::IntoIter;\n}\n```\n\nSo we try to make a type that can be instantiated with any IntoIter, storing its Iterator:\n\n``` rust\npub struct Internal<I> {\n    iter: I\n}\n\nimpl<I> Internal<I> {\n    fn new<It: IntoIterator<IntoIter=I>>(iterable: It) -> Self {\n        let iter = iterable.into_iter();\n        Internal { iter: iter }\n    }\n}\n```\n\n```\n<anon>:7:29: 7:40 error: the trait `core::iter::Iterator` is not implemented for the type `I` [E0277]\n<anon>:7         let iter = iterable.into_iter();\n                                     ^~~~~~~~~~~\n<anon>:7:29: 7:40 note: `I` is not an iterator; maybe try calling `.iter()` or a similar method\n<anon>:7         let iter = iterable.into_iter();\n                                     ^~~~~~~~~~~\n```\n\nCompletely nonsensical. Nothing is asking I to be an Iterator, except for IntoIterator's _own definiton_, which proves that it is in fact an Iterator. But ok, let's try to assert that it is:\n\n``` rust\npub struct Internal<I> {\n    iter: I\n}\n\nimpl<I: Iterator> Internal<I> {\n    fn new<It: IntoIterator<IntoIter=I>>(iterable: It) -> Self {\n        let iter = iterable.into_iter();\n        Internal { iter: iter }\n    }\n}\n```\n\n```\n<anon>:7:29: 7:40 error: type mismatch resolving `<I as core::iter::Iterator>::Item == <It as core::iter::IntoIterator>::Item`:\n expected trait `core::iter::Iterator`,\n    found trait `core::iter::IntoIterator` [E0271]\n<anon>:7         let iter = iterable.into_iter();\n                                     ^~~~~~~~~~~\n```\n\nAgain nothing is demanding this by IntoIterator, which is already proving it. This works, though:\n\n``` rust\npub struct Internal<I> {\n    iter: I\n}\n\nimpl<I: Iterator> Internal<I> {\n    fn new<It: IntoIterator<IntoIter=I, Item=I::Item>>(iterable: It) -> Self {\n        let iter = iterable.into_iter();\n        Internal { iter: iter }\n    }\n}\n```\n\nWhich shouldn't be necessary.\n", "closed_by": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/26026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/26026/timeline", "performed_via_github_app": null, "state_reason": "completed"}