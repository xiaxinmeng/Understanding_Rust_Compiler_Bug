{"url": "https://api.github.com/repos/rust-lang/rust/issues/73239", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73239/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73239/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73239/events", "html_url": "https://github.com/rust-lang/rust/issues/73239", "id": 637064317, "node_id": "MDU6SXNzdWU2MzcwNjQzMTc=", "number": 73239, "title": "Problem with type inference and impl Trait", "user": {"login": "joe-hauns", "id": 28921820, "node_id": "MDQ6VXNlcjI4OTIxODIw", "avatar_url": "https://avatars.githubusercontent.com/u/28921820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joe-hauns", "html_url": "https://github.com/joe-hauns", "followers_url": "https://api.github.com/users/joe-hauns/followers", "following_url": "https://api.github.com/users/joe-hauns/following{/other_user}", "gists_url": "https://api.github.com/users/joe-hauns/gists{/gist_id}", "starred_url": "https://api.github.com/users/joe-hauns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joe-hauns/subscriptions", "organizations_url": "https://api.github.com/users/joe-hauns/orgs", "repos_url": "https://api.github.com/users/joe-hauns/repos", "events_url": "https://api.github.com/users/joe-hauns/events{/privacy}", "received_events_url": "https://api.github.com/users/joe-hauns/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1405345617, "node_id": "MDU6TGFiZWwxNDA1MzQ1NjE3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lazy-normalization", "name": "A-lazy-normalization", "color": "f7e101", "default": false, "description": "Area: lazy normalization (tracking issue: #60471)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-11T14:30:06Z", "updated_at": "2020-06-11T14:34:38Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\nHi!\r\nI recently experienced a bug in that probably comes from problems of the interference of type inference, impl Trait in return type position, and associated types.\r\n\r\nThis is a very strongly simplified version of what was going on in my codebase. In fact my codebase included `Arc` instead of `SmartPointer` and `AsRef` instead of `MyAsRef`, but I wanted to simplify to reproduce the problem without `std`.\r\n\r\n```rust\r\n\r\nstruct SmartPointer<A>(A);\r\n\r\ntrait MyAsRef<A> {\r\n    fn my_ref(&self) -> &A;\r\n}\r\n\r\nimpl<A> MyAsRef<A> for SmartPointer<A> {\r\n    fn my_ref(&self) -> &A {\r\n        &self.0\r\n    }\r\n}\r\n\r\nstruct Type0Container<P>(SmartPointer<P::Type0>)\r\nwhere\r\n    P: TypeSet;\r\n\r\nimpl<P> Type0Container<P>\r\nwhere\r\n    P: TypeSet,\r\n{\r\n    // fn item(&self) -> &SmartPointer<P::Type0> { // << compiles\r\n    fn item(&self) -> &impl MyAsRef<P::Type0> {    // << does not compile\r\n        &self.0\r\n    }\r\n}\r\n\r\ntrait TypeSet {\r\n    type Type0;\r\n}\r\n\r\nstruct TypeSetImpl;\r\nstruct Type0Impl;\r\n\r\nimpl TypeSet for TypeSetImpl {\r\n    type Type0 = Type0Impl;\r\n}\r\n\r\nfn main() {\r\n    let proc: Type0Container<TypeSetImpl> = Type0Container(SmartPointer(Type0Impl)); \r\n    let _: &Type0Impl = proc.item().my_ref();\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: \r\nThe compiler should be able to infer that `<TypeSetImpl as TypeSet>::Type0` = `Type0Impl` and compile the program.\r\n\r\nInstead, this happened: \r\nThe compiler failed with this error message: \r\n```\r\n   Compiling lala v0.1.0 (/path/to/lala)\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:41:25\r\n   |\r\n41 |     let _: &Type0Impl = proc.item().my_ref();\r\n   |            ----------   ^^^^^^^^^^^^^^^^^^^^ expected struct `Type0Impl`, found associated type\r\n   |            |\r\n   |            expected due to this\r\n   |\r\n   = note: expected reference `&Type0Impl`\r\n              found reference `&<TypeSetImpl as TypeSet>::Type0`\r\n   = help: consider constraining the associated type `<TypeSetImpl as TypeSet>::Type0` to `Type0Impl`\r\n   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\r\n```\r\n\r\nAs noted in the comments in the code snipped changing the one line using impl Trait in return type position enables the compiler to build the program.\r\nI'm not entirely sure if this is a bug or if I expecting type inference to be stronger as it is or if the code I wrote is indeed not correct, so sorry if that is the case.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.46.0-nightly (449e8eaa2 2020-06-10)\r\nbinary: rustc\r\ncommit-hash: 449e8eaa286e407c9cd8cac655b77998fd53db6b\r\ncommit-date: 2020-06-10\r\nhost: x86_64-apple-darwin\r\nrelease: 1.46.0-nightly\r\nLLVM version: 10.0\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>None</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73239/timeline", "performed_via_github_app": null, "state_reason": null}