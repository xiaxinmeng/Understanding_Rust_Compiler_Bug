{"url": "https://api.github.com/repos/rust-lang/rust/issues/88799", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88799/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88799/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88799/events", "html_url": "https://github.com/rust-lang/rust/issues/88799", "id": 992726282, "node_id": "MDU6SXNzdWU5OTI3MjYyODI=", "number": 88799, "title": "\u201cFully qualified syntax\u201d seems poorly defined or documented: Type::method is not necessarily fully qualified", "user": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-09T22:58:31Z", "updated_at": "2023-02-20T14:01:22Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The key question: is `Type::method()` or `<Type>::method()` *fully* qualified syntax?\r\n\r\n[The book](https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name) speaks of \u201cfully qualified syntax\u201d and treats the answer as \u201cyes\u201d, but chooses only examples where it has the effect of uniquely disambiguating.\r\n\r\n[The grammar](https://doc.rust-lang.org/reference/paths.html#qualified-paths) defines \u201cqualified paths\u201d but then in its brief description speaks of fully qualified paths and is completely ambiguous as to whether `Type::method` counts under that classification. (And strictly speaking that\u2019s only `<Type>::method`; grammatically, `Type::method` goes through *PathInExpression* rather than *QualifiedPathInExpression*. But I overlook that as an irrelevant technicality, especially since the qualified docs example uses `S::f()` rather than spelling it `<S>::f()`!)\r\n\r\nI\u2019d like to see the situation clarified about (fully?) qualified (path?) syntax. I\u2019m not sure whether any distinction should be drawn between qualified syntax and qualified *path* syntax. Or between fully- and partially-qualified paths. But I don\u2019t think all qualified syntax should be considered fully-qualified.\r\n\r\nThis is the key difficulty of classification: `Type::method()` is only *fully*-qualifying (*uniquely* identifying) iff there\u2019s an inherent member for it to find; if there isn\u2019t, then it\u2019s only partially-qualifying, involving trait lookup. Thus, the word \u201csyntax\u201d in the term becomes problematic since the question of full qualification is not actually resolved by the syntax. In this specific regard, universal function call syntax was a less problematic name. (Of course, the \u201cfunction call\u201d part became problematic, so it\u2019s definitely not a suitable name either.)\r\n\r\n`<Type as Trait>::method()` is definitely using fully qualified syntax and has a fully qualified path.\r\n\r\n`Type::method()` and `<Type>::method()` are using qualified syntax, but syntactically you can\u2019t say whether they\u2019re fully qualified paths or not.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88799/timeline", "performed_via_github_app": null, "state_reason": null}