{"url": "https://api.github.com/repos/rust-lang/rust/issues/28784", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/28784/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/28784/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/28784/events", "html_url": "https://github.com/rust-lang/rust/issues/28784", "id": 109212103, "node_id": "MDU6SXNzdWUxMDkyMTIxMDM=", "number": 28784, "title": "Parsing inconsistencies (lambda, proc, return)", "user": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 27424086, "node_id": "MDU6TGFiZWwyNzQyNDA4Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-parser", "name": "A-parser", "color": "f7e101", "default": false, "description": "Area: The parsing of Rust source code to an AST."}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2015-10-01T01:33:14Z", "updated_at": "2020-02-20T20:13:11Z", "closed_at": "2020-02-20T20:13:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I found more inconsistencies between `rustc` and `parser-lalr`.\n\nI also noticed that Rust allows return expressions and lambda expressions to end with a struct literal, even when they're in a nostruct context.  This seems inconsistent to me.\n\nLambdas (the two parsers disagree):\n\n``` rust\nstruct A { a: i32 }\nfn lambda_expr_nostruct() -> A {\n    // rustc accepts this, but parser-lalr does not.\n    match || A { a: 123 } {\n        f => f()\n    }\n}\n```\n\nReturn expressions (the two parsers agree):\n\n``` rust\nstruct A { a: i32 }\nfn return_ambiguity_1() -> A {\n    match A { a: 1 } { x => x } // rejected by rustc and parser-lalr\n}\nfn return_ambiguity_2() -> A {\n    match return A { a: 1 } { _ => A { a: 1 } } // accepted by rustc and parser-lalr\n}\n```\n\nThe `rustc` and `parser-lalr` parsers disagree about whether a bare `return` expression can be cast:\n\n``` rust\nfn cast_of_return() {\n    // rustc rejects, parser-lalr accepts\n    // error: expected identifier, found keyword `as`\n    return as ();\n    (return as ());\n\n    return == (); // rustc accepts, parser-lalr accepts\n    loop {\n        continue as (); // rustc accepts, parser-lalr accepts\n        continue == (); // rustc accepts, parser-lalr accepts\n        break as ();    // rustc accepts, parser-lalr accepts\n        break == ();    // rustc accepts, parser-lalr accepts\n    };\n}\n```\n\nFinally, I also noticed these two differences, which seem much less interesting to me.  The grammar is probably just out-of-date or buggy:\n\nlambda sometimes requires braces:\n\n``` rust\nfn lambda_braces() {\n    // parser-lalr accepts this, but rustc does not.  I think this is an\n    // obvious bug in the parser-lalr.y grammar.  If there is a return type,\n    // then curly braces are required.\n    let _x = || -> i32 10;\n}\n```\n\n`proc` is obsolete:\n\n``` rust\nfn proc_syntax() {\n    // parser-lalr also accepts this.  I think the proc syntax is obsolete, and\n    // the {proc_expr, proc_expr_nostruct} non-terminals could be removed from\n    // parser-lalr.y.\n    let _x = proc() {};\n}\n```\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/28784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/28784/timeline", "performed_via_github_app": null, "state_reason": "completed"}