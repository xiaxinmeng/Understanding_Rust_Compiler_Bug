{"url": "https://api.github.com/repos/rust-lang/rust/issues/45068", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45068/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45068/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45068/events", "html_url": "https://github.com/rust-lang/rust/issues/45068", "id": 263488277, "node_id": "MDU6SXNzdWUyNjM0ODgyNzc=", "number": 45068, "title": "rust can't serialize 11 fields efficiently", "user": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 884691893, "node_id": "MDU6TGFiZWw4ODQ2OTE4OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-codegen", "name": "WG-codegen", "color": "c2e0c6", "default": false, "description": "Working Group: Codegen (Runtime perf and code size)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-10-06T15:39:04Z", "updated_at": "2023-04-05T17:36:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using noalias (#45012) lets rust generate much better code for the serialization of 10 fields in good_bake_bytes() however it falls back to terrible with the 11 fields of bad_bake_bytes()\r\n\r\n```rust\r\nuse std::io::Write;\r\nuse std::{io, ptr};\r\n\r\nstruct UnsafeVecWriter<'a>(&'a mut Vec<u8>);\r\n\r\nimpl<'a> Write for UnsafeVecWriter<'a> {\r\n    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\r\n        unsafe {\r\n            let old_len = self.0.len();\r\n            self.0.set_len(old_len + buf.len());\r\n            ptr::copy_nonoverlapping(buf.as_ptr(), self.0.as_mut_ptr().offset(old_len as isize), buf.len());\r\n        }\r\n        Ok(buf.len())\r\n    }\r\n    fn flush(&mut self) -> io::Result<()> { Ok(()) }\r\n}\r\n\r\nstruct Entity {\r\n    o: (f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32),\r\n}\r\n\r\nuse std::mem::transmute;\r\nfn do_f32<W: Write>(w: &mut W, x: f32) {\r\n    unsafe {\r\n        let p: [u8; 4] = std::mem::transmute([x]);\r\n        w.write(&p);\r\n    }\r\n}\r\n\r\n#[inline(never)]\r\nfn bad_bake_bytes(vec: &mut Vec<u8>, e: &Entity) {\r\n    let w = &mut UnsafeVecWriter(vec);\r\n    do_f32(w, e.o.0);\r\n    do_f32(w, e.o.1);\r\n    do_f32(w, e.o.2);\r\n    do_f32(w, e.o.3);\r\n    do_f32(w, e.o.4);\r\n    do_f32(w, e.o.5);\r\n    do_f32(w, e.o.6);\r\n    do_f32(w, e.o.7);\r\n    do_f32(w, e.o.8);\r\n    do_f32(w, e.o.9);\r\n    do_f32(w, e.o.10);\r\n}\r\n\r\n#[inline(never)]\r\nfn good_bake_bytes(vec: &mut Vec<u8>, e: &Entity) {\r\n    let w = &mut UnsafeVecWriter(vec);\r\n    do_f32(w, e.o.0);\r\n    do_f32(w, e.o.1);\r\n    do_f32(w, e.o.2);\r\n    do_f32(w, e.o.3);\r\n    do_f32(w, e.o.4);\r\n    do_f32(w, e.o.5);\r\n    do_f32(w, e.o.6);\r\n    do_f32(w, e.o.7);\r\n    do_f32(w, e.o.8);\r\n    do_f32(w, e.o.9);\r\n    //do_f32(w, e.o.10);\r\n}\r\n\r\nfn main() {\r\n    let mut encoded = Vec::new();\r\n    let decoded: Entity = unsafe { std::mem::uninitialized() };\r\n    bad_bake_bytes(&mut encoded, &decoded);\r\n    good_bake_bytes(&mut encoded, &decoded);\r\n}\r\n```\r\n\r\n```assembly\r\n__ZN10serde_fast14bad_bake_bytes17h506e94e6df0b1a3bE:\r\n\t.cfi_startproc\r\n\tpushq\t%rbp\r\nLcfi0:\r\n\t.cfi_def_cfa_offset 16\r\nLcfi1:\r\n\t.cfi_offset %rbp, -16\r\n\tmovq\t%rsp, %rbp\r\nLcfi2:\r\n\t.cfi_def_cfa_register %rbp\r\n\tmovl\t(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tmovl\t4(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tmovl\t8(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tmovl\t12(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tmovl\t16(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tmovl\t20(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tmovl\t24(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tmovl\t28(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tmovl\t32(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tmovl\t36(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tmovl\t40(%rsi), %eax\r\n\tmovq\t16(%rdi), %rcx\r\n\tleaq\t4(%rcx), %rdx\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t(%rdi), %rdx\r\n\tmovl\t%eax, (%rdx,%rcx)\r\n\tpopq\t%rbp\r\n\tretq\r\n\t.cfi_endproc\r\n\r\n\t.p2align\t4, 0x90\r\n__ZN10serde_fast15good_bake_bytes17h3098644f875a0da3E:\r\n\t.cfi_startproc\r\n\tpushq\t%rbp\r\nLcfi3:\r\n\t.cfi_def_cfa_offset 16\r\nLcfi4:\r\n\t.cfi_offset %rbp, -16\r\n\tmovq\t%rsp, %rbp\r\nLcfi5:\r\n\t.cfi_def_cfa_register %rbp\r\n\tmovl\t(%rsi), %eax\r\n\tmovq\t(%rdi), %rcx\r\n\tmovq\t16(%rdi), %rdx\r\n\tmovl\t%eax, (%rcx,%rdx)\r\n\tmovl\t4(%rsi), %eax\r\n\tmovl\t%eax, 4(%rcx,%rdx)\r\n\tmovl\t8(%rsi), %eax\r\n\tmovl\t%eax, 8(%rcx,%rdx)\r\n\tmovl\t12(%rsi), %eax\r\n\tmovl\t%eax, 12(%rcx,%rdx)\r\n\tmovl\t16(%rsi), %eax\r\n\tmovl\t%eax, 16(%rcx,%rdx)\r\n\tmovl\t20(%rsi), %eax\r\n\tmovl\t%eax, 20(%rcx,%rdx)\r\n\tmovl\t24(%rsi), %eax\r\n\tmovl\t%eax, 24(%rcx,%rdx)\r\n\tmovl\t28(%rsi), %eax\r\n\tmovl\t%eax, 28(%rcx,%rdx)\r\n\tmovl\t32(%rsi), %eax\r\n\tmovl\t%eax, 32(%rcx,%rdx)\r\n\tmovl\t36(%rsi), %eax\r\n\tleaq\t40(%rdx), %rsi\r\n\tmovq\t%rsi, 16(%rdi)\r\n\tmovl\t%eax, 36(%rcx,%rdx)\r\n\tpopq\t%rbp\r\n\tretq\r\n\t.cfi_endproc\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45068/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 2, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45068/timeline", "performed_via_github_app": null, "state_reason": null}