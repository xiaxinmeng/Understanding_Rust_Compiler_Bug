{"url": "https://api.github.com/repos/rust-lang/rust/issues/92281", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92281/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92281/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92281/events", "html_url": "https://github.com/rust-lang/rust/issues/92281", "id": 1088655884, "node_id": "I_kwDOAAsO6M5A45IM", "number": 92281, "title": "Higher-Rank Trait Bounds: incorrect (or misleading) diagnostic", "user": {"login": "BraulioVM", "id": 715372, "node_id": "MDQ6VXNlcjcxNTM3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/715372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BraulioVM", "html_url": "https://github.com/BraulioVM", "followers_url": "https://api.github.com/users/BraulioVM/followers", "following_url": "https://api.github.com/users/BraulioVM/following{/other_user}", "gists_url": "https://api.github.com/users/BraulioVM/gists{/gist_id}", "starred_url": "https://api.github.com/users/BraulioVM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BraulioVM/subscriptions", "organizations_url": "https://api.github.com/users/BraulioVM/orgs", "repos_url": "https://api.github.com/users/BraulioVM/repos", "events_url": "https://api.github.com/users/BraulioVM/events{/privacy}", "received_events_url": "https://api.github.com/users/BraulioVM/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}, {"id": 1839565265, "node_id": "MDU6TGFiZWwxODM5NTY1MjY1", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-terse", "name": "D-terse", "color": "c9f7a3", "default": false, "description": "A diagnostic that doesn't give enough information about the problem at hand"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-12-25T21:04:11Z", "updated_at": "2021-12-26T11:26:02Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=5c03cd34558f9bc8662eac3ff255190e\r\n\r\n```rust\r\npub struct Value {\r\n    a: String,\r\n}\r\n\r\npub struct Borrowed<'a> {\r\n    b: &'a str,\r\n}\r\n\r\npub fn parse(a: &Value) -> Borrowed<'_> {\r\n    Borrowed { b: &a.a }\r\n}\r\n\r\npub fn not<T>(predicate: impl Fn(&T) -> bool) -> impl Fn(&T) -> bool {\r\n    move |t: &T| !predicate(t)\r\n}\r\n\r\n/// Transform a predicate on `Borrowed`s into a predicate for `Value`s\r\npub fn borrowed(predicate: impl for<'a> Fn(&Borrowed<'_>) -> bool) -> impl Fn(&Value) -> bool {\r\n    move |t: &Value| {\r\n        let parsed = parse(t);\r\n        predicate(&parsed)\r\n    }\r\n}\r\n\r\npub fn is_borrowed_cool() -> impl for<'a> Fn(&Borrowed<'a>) -> bool {\r\n    |b| true\r\n}\r\n\r\npub fn compose_predicates() {\r\n    let a = not(is_borrowed_cool());\r\n    let b = borrowed(is_borrowed_cool());\r\n    // I would like this to compile. It doesn't though, and it generates\r\n    // an incorrect diagnostic.\r\n    let c = borrowed(not(is_borrowed_cool()));\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:34:13\r\n   |\r\n13 | pub fn not<T>(predicate: impl for<'a> Fn(&'a T) -> bool) -> impl for<'a> Fn(&'a T) -> bool {\r\n   |                                                             ------------------------------\r\n   |                                                             |\r\n   |                                                             one of the expected opaque types\r\n   |                                                             one of the found opaque types\r\n...\r\n25 | pub fn is_borrowed_cool() -> impl for<'a> Fn(&Borrowed<'a>) -> bool {\r\n   |                              --------------------------------------\r\n   |                              |\r\n   |                              one of the expected opaque types\r\n   |                              one of the found opaque types\r\n...\r\n34 |     let c = borrowed(not(is_borrowed_cool()));\r\n   |             ^^^^^^^^ lifetime mismatch\r\n   |\r\n   = note: expected associated type `<impl for<'a> Fn<(&'a Borrowed<'_>,)> as FnOnce<(&Borrowed<'_>,)>>::Output`\r\n              found associated type `<impl for<'a> Fn<(&'a Borrowed<'_>,)> as FnOnce<(&Borrowed<'_>,)>>::Output`\r\nnote: the lifetime requirement is introduced here\r\n  --> src/lib.rs:18:62\r\n   |\r\n18 | pub fn borrowed(predicate: impl for<'a> Fn(&Borrowed<'_>) -> bool) -> impl Fn(&Value) -> bool {\r\n   |                                                              ^^^^\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nNote the following lines specially:\r\n\r\n```\r\n   = note: expected associated type `<impl for<'a> Fn<(&'a Borrowed<'_>,)> as FnOnce<(&Borrowed<'_>,)>>::Output`\r\n              found associated type `<impl for<'a> Fn<(&'a Borrowed<'_>,)> as FnOnce<(&Borrowed<'_>,)>>::Output`\r\n```\r\n\r\nwhere the expected and the found types are the same. I'm not sure if this is a compiler bug because I'm not very familiar\r\nwith HRTBs, but the diagnostic could be better. I can't really propose the better diagnostic because I don't know what's wrong\r\nwith my code.\r\n\r\nThe error is the same on nightly and beta.\r\n\r\n(Edit: simplified the code a bit)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92281/timeline", "performed_via_github_app": null, "state_reason": null}