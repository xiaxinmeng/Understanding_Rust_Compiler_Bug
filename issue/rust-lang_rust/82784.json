{"url": "https://api.github.com/repos/rust-lang/rust/issues/82784", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82784/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82784/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82784/events", "html_url": "https://github.com/rust-lang/rust/issues/82784", "id": 822605333, "node_id": "MDU6SXNzdWU4MjI2MDUzMzM=", "number": 82784, "title": "Compile error mixing declarative macros with procedural macros", "user": {"login": "incidental-complexity", "id": 4366461, "node_id": "MDQ6VXNlcjQzNjY0NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4366461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/incidental-complexity", "html_url": "https://github.com/incidental-complexity", "followers_url": "https://api.github.com/users/incidental-complexity/followers", "following_url": "https://api.github.com/users/incidental-complexity/following{/other_user}", "gists_url": "https://api.github.com/users/incidental-complexity/gists{/gist_id}", "starred_url": "https://api.github.com/users/incidental-complexity/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/incidental-complexity/subscriptions", "organizations_url": "https://api.github.com/users/incidental-complexity/orgs", "repos_url": "https://api.github.com/users/incidental-complexity/repos", "events_url": "https://api.github.com/users/incidental-complexity/events{/privacy}", "received_events_url": "https://api.github.com/users/incidental-complexity/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-03-04T23:46:52Z", "updated_at": "2021-05-06T16:44:19Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Cross posting with [tokio issue tracker](https://github.com/tokio-rs/tokio/issues/3579).\r\n\r\nI know how to work around this (can put parens around the macro variable: `($foo_factory)()`), but I don't think this should be happening in the first place.  Feels like a bug in the macro system.  This is reproducible in the playground:\r\n\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=fb6d73cfb878547b438d8ec49431a4d2\r\n\r\n`concrete_tests2` and `concrete_tests3` compile whereas `concrete_tests1` does not.\r\n\r\nI'm producing a declarative macro that takes in an `expr` that is meant to be a closure, and produces a `#[tokio::test]` that invokes that closure.  The compile error is:\r\n\r\n```\r\nerror[E0618]: expected function, found `Concrete`\r\n  --> src/lib.rs:38:32\r\n   |\r\n14 |             $crate::test_suite::async_test($foo_factory()).await;\r\n   |                                                        -- call expression requires function\r\n...\r\n38 |     crate::use_test_suite!( || crate::Concrete::default() );\r\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThe code (from the playground link above) is:\r\n\r\n```\r\n// /////////////////////////\r\n// Define a trait Foo \r\n// /////////////////////////\r\npub trait Foo{}\r\n\r\n// /////////////////////////\r\n// Define a test suite suitable for any implementator of Foo\r\n// /////////////////////////\r\n#[macro_export]\r\nmacro_rules! use_test_suite {\r\n    ($foo_factory:expr) => {\r\n        #[tokio::test]\r\n        async fn async_test() {\r\n            $crate::test_suite::async_test($foo_factory()).await;\r\n        }\r\n            \r\n        #[test]\r\n        fn sync_test() {\r\n            $crate::test_suite::sync_test($foo_factory());\r\n        }\r\n    }\r\n}\r\n\r\npub mod test_suite {\r\n    pub async fn async_test(_foo: impl crate::Foo) -> u8 { 0 }\r\n    pub fn sync_test(_foo: impl crate::Foo) -> u8 { 0 }\r\n}\r\n\r\n// /////////////////////////\r\n// Define an implementaion of Foo and test it\r\n// /////////////////////////\r\n#[derive(Default)]\r\nstruct Concrete;\r\nimpl Foo for Concrete {}\r\n\r\n#[cfg(test)]\r\nmod concrete_tests1 {\r\n    crate::use_test_suite!( || crate::Concrete::default() );\r\n}\r\n\r\n#[cfg(test)]\r\nmod concrete_tests2 {\r\n    crate::use_test_suite!( (|| crate::Concrete::default()) );\r\n}\r\n\r\n#[cfg(test)]\r\nmod concrete_tests3 {\r\n    crate::use_test_suite!( crate::Concrete::default );\r\n}\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82784/timeline", "performed_via_github_app": null, "state_reason": null}