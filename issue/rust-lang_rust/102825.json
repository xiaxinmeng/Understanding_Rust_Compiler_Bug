{"url": "https://api.github.com/repos/rust-lang/rust/issues/102825", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102825/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102825/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102825/events", "html_url": "https://github.com/rust-lang/rust/issues/102825", "id": 1402156421, "node_id": "I_kwDOAAsO6M5TkzWF", "number": 102825, "title": "`default_free_fn` feature does not have the same diagnostics as using `Default::default` in recursing situations", "user": {"login": "harudagondi", "id": 14072899, "node_id": "MDQ6VXNlcjE0MDcyODk5", "avatar_url": "https://avatars.githubusercontent.com/u/14072899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harudagondi", "html_url": "https://github.com/harudagondi", "followers_url": "https://api.github.com/users/harudagondi/followers", "following_url": "https://api.github.com/users/harudagondi/following{/other_user}", "gists_url": "https://api.github.com/users/harudagondi/gists{/gist_id}", "starred_url": "https://api.github.com/users/harudagondi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harudagondi/subscriptions", "organizations_url": "https://api.github.com/users/harudagondi/orgs", "repos_url": "https://api.github.com/users/harudagondi/repos", "events_url": "https://api.github.com/users/harudagondi/events{/privacy}", "received_events_url": "https://api.github.com/users/harudagondi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-09T05:23:48Z", "updated_at": "2022-10-09T10:04:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code: [Rust playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=3d6b6403d9ba304664c2defc11bc43ba) <!-- Please provide a link to play.rust-lang.org -->\r\n\r\n```rust\r\n#![feature(default_free_fn)]\r\n\r\nuse std::default::default;\r\n\r\nstruct Foo {\r\n    a: i32,\r\n    b: String,\r\n}\r\n\r\nimpl Default for Foo {\r\n    fn default() -> Self {\r\n        Self { a: 1, ..default() }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let foo = Foo::default();\r\n}\r\n\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nwarning: unused variable: `foo`\r\n  --> src/main.rs:17:9\r\n   |\r\n17 |     let foo = Foo::default();\r\n   |         ^^^ help: if this is intentional, prefix it with an underscore: `_foo`\r\n   |\r\n   = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: fields `a` and `b` are never read\r\n --> src/main.rs:6:5\r\n  |\r\n5 | struct Foo {\r\n  |        --- fields in this struct\r\n6 |     a: i32,\r\n  |     ^\r\n7 |     b: String,\r\n  |     ^\r\n  |\r\n  = note: `#[warn(dead_code)]` on by default\r\n\r\nwarning: `playground` (bin \"playground\") generated 2 warnings\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.86s\r\n     Running `target/debug/playground`\r\n\r\nthread 'main' has overflowed its stack\r\nfatal runtime error: stack overflow\r\ntimeout: the monitored command dumped core\r\n/playground/tools/entrypoint.sh: line 11:     9 Aborted                 timeout --signal=KILL ${timeout} \"$@\"\r\n```\r\n\r\n<!-- The following is not always necessary. -->\r\nIdeally the output should look like: ([Using `Default::default()`](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=b0e3199a9ecfac128da4ca6b59e059e3))\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nwarning: unused variable: `foo`\r\n  --> src/main.rs:16:9\r\n   |\r\n16 |     let foo = Foo::default();\r\n   |         ^^^ help: if this is intentional, prefix it with an underscore: `_foo`\r\n   |\r\n   = note: `#[warn(unused_variables)]` on by default\r\n\r\nwarning: function cannot return without recursing\r\n  --> src/main.rs:7:5\r\n   |\r\n7  |     fn default() -> Self {\r\n   |     ^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\r\n...\r\n10 |             ..Default::default()\r\n   |               ------------------ recursive call site\r\n   |\r\n   = note: `#[warn(unconditional_recursion)]` on by default\r\n   = help: a `loop` may express intention better if this is on purpose\r\n\r\nwarning: fields `a` and `b` are never read\r\n --> src/main.rs:2:5\r\n  |\r\n1 | struct Foo {\r\n  |        --- fields in this struct\r\n2 |     a: i32,\r\n  |     ^\r\n3 |     b: String,\r\n  |     ^\r\n  |\r\n  = note: `#[warn(dead_code)]` on by default\r\n\r\nwarning: `playground` (bin \"playground\") generated 3 warnings\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.86s\r\n     Running `target/debug/playground`\r\n\r\nthread 'main' has overflowed its stack\r\nfatal runtime error: stack overflow\r\ntimeout: the monitored command dumped core\r\n/playground/tools/entrypoint.sh: line 11:     8 Aborted                 timeout --signal=KILL ${timeout} \"$@\"\r\n```\r\n\r\n<!--\r\nIf the problem is not self-explanatory, please provide a rationale for the\r\nchange.\r\n-->\r\n\r\nUsing `default()` should also warn the user about unconditional_recursion.\r\n\r\n<!--\r\nIf dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions. The output might also be\r\ndifferent depending on the Edition.\r\n-->\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102825/timeline", "performed_via_github_app": null, "state_reason": null}