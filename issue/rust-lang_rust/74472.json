{"url": "https://api.github.com/repos/rust-lang/rust/issues/74472", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74472/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74472/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74472/events", "html_url": "https://github.com/rust-lang/rust/issues/74472", "id": 659962316, "node_id": "MDU6SXNzdWU2NTk5NjIzMTY=", "number": 74472, "title": "Better runtime panic message for RefCell borrow", "user": {"login": "CGQAQ", "id": 15936231, "node_id": "MDQ6VXNlcjE1OTM2MjMx", "avatar_url": "https://avatars.githubusercontent.com/u/15936231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CGQAQ", "html_url": "https://github.com/CGQAQ", "followers_url": "https://api.github.com/users/CGQAQ/followers", "following_url": "https://api.github.com/users/CGQAQ/following{/other_user}", "gists_url": "https://api.github.com/users/CGQAQ/gists{/gist_id}", "starred_url": "https://api.github.com/users/CGQAQ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CGQAQ/subscriptions", "organizations_url": "https://api.github.com/users/CGQAQ/orgs", "repos_url": "https://api.github.com/users/CGQAQ/repos", "events_url": "https://api.github.com/users/CGQAQ/events{/privacy}", "received_events_url": "https://api.github.com/users/CGQAQ/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-18T06:59:43Z", "updated_at": "2020-08-03T23:31:48Z", "closed_at": "2020-08-03T23:31:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n$ RUST_BACKTRACE=0 cargo run\r\nthread 'main' panicked at 'already mutably borrowed: BorrowError', /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/cell.rs:797:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n```\r\n$ RUST_BACKTRACE=1 cargo run\r\nthread 'main' panicked at 'already mutably borrowed: BorrowError', /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/cell.rs:797:9\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1076\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1537\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:218\r\n  10: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:486\r\n  11: rust_begin_unwind\r\n             at src/libstd/panicking.rs:388\r\n  12: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:101\r\n  13: core::option::expect_none_failed\r\n             at src/libcore/option.rs:1272\r\n  14: core::result::Result<T,E>::expect\r\n             at /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/result.rs:963\r\n  15: core::cell::RefCell<T>::borrow\r\n             at /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/cell.rs:797\r\n  16: astar::main::{{closure}}\r\n             at src/main.rs:15\r\n  17: astar::astar::{{closure}}\r\n             at src/main.rs:76               <-  this one is finally helpful\r\n  18: <core::slice::Iter<T> as core::iter::traits::iterator::Iterator>::for_each\r\n             at /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/slice/mod.rs:3361\r\n  19: astar::astar\r\n             at src/main.rs:59\r\n  20: astar::main\r\n             at src/main.rs:9\r\n  21: std::rt::lang_start::{{closure}}\r\n             at /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:67\r\n  22: std::rt::lang_start_internal::{{closure}}\r\n             at src/libstd/rt.rs:52\r\n  23: std::panicking::try::do_call\r\n             at src/libstd/panicking.rs:297\r\n  24: std::panicking::try\r\n             at src/libstd/panicking.rs:274\r\n  25: std::panic::catch_unwind\r\n             at src/libstd/panic.rs:394\r\n  26: std::rt::lang_start_internal\r\n             at src/libstd/rt.rs:51\r\n  27: std::rt::lang_start\r\n             at /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:67\r\n  28: main\r\n  29: __libc_start_main\r\n  30: _start\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n```\r\n$ RUST_BACKTRACE=full cargo run\r\nthread 'main' panicked at 'already mutably borrowed: BorrowError', /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/cell.rs:797:9\r\nstack backtrace:\r\n   0:     0x5619946d4cd5 - backtrace::backtrace::libunwind::trace::h396c07d2071b43af\r\n                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1:     0x5619946d4cd5 - backtrace::backtrace::trace_unsynchronized::h7aa0e4bb23d9c158\r\n                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2:     0x5619946d4cd5 - std::sys_common::backtrace::_print_fmt::hd15ac5d4adcd355b\r\n                               at src/libstd/sys_common/backtrace.rs:78\r\n   3:     0x5619946d4cd5 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hec5354be8ccc3ecc\r\n                               at src/libstd/sys_common/backtrace.rs:59\r\n   4:     0x5619946f1c0c - core::fmt::write::h3d34909eeb4f225b\r\n                               at src/libcore/fmt/mod.rs:1076\r\n   5:     0x5619946d31b3 - std::io::Write::write_fmt::h1da287b3de55ed16\r\n                               at src/libstd/io/mod.rs:1537\r\n   6:     0x5619946d71e0 - std::sys_common::backtrace::_print::h4d206838e1ace354\r\n                               at src/libstd/sys_common/backtrace.rs:62\r\n   7:     0x5619946d71e0 - std::sys_common::backtrace::print::h1f778e9940ee5977\r\n                               at src/libstd/sys_common/backtrace.rs:49\r\n   8:     0x5619946d71e0 - std::panicking::default_hook::{{closure}}::h704403a56cbf5783\r\n                               at src/libstd/panicking.rs:198\r\n   9:     0x5619946d6f2c - std::panicking::default_hook::ha4567a10dec4ef8d\r\n                               at src/libstd/panicking.rs:218\r\n  10:     0x5619946d77c7 - std::panicking::rust_panic_with_hook::h88a1f16ec8a7bb20\r\n                               at src/libstd/panicking.rs:486\r\n  11:     0x5619946d73cb - rust_begin_unwind\r\n                               at src/libstd/panicking.rs:388\r\n  12:     0x5619946f1011 - core::panicking::panic_fmt::hbddb7fe6f399b81a\r\n                               at src/libcore/panicking.rs:101\r\n  13:     0x5619946f0e33 - core::option::expect_none_failed::h60849c4323f09783\r\n                               at src/libcore/option.rs:1272\r\n  14:     0x5619946c0e82 - core::result::Result<T,E>::expect::hc06879f926f77283\r\n                               at /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/result.rs:963\r\n  15:     0x5619946cbd1a - core::cell::RefCell<T>::borrow::h94a5761e43c0b8ce\r\n                               at /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/cell.rs:797\r\n  16:     0x5619946c83ae - astar::main::{{closure}}::h4bd19b8bbeff3fb4\r\n                               at src/main.rs:15\r\n  17:     0x5619946c9c2e - astar::astar::{{closure}}::ha54c2fee0c91f6ec\r\n                               at src/main.rs:77\r\n  18:     0x5619946cb543 - <core::slice::Iter<T> as core::iter::traits::iterator::Iterator>::for_each::h487a98a0c76eab18\r\n                               at /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/slice/mod.rs:3361\r\n  19:     0x5619946c9148 - astar::astar::h64e3f7b80ab07f6b\r\n                               at src/main.rs:59\r\n  20:     0x5619946b982e - astar::main::hb1e7d447d1d97ade\r\n                               at src/main.rs:9\r\n  21:     0x5619946bc26b - std::rt::lang_start::{{closure}}::h3241643d841dae58\r\n                               at /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:67\r\n  22:     0x5619946d7b98 - std::rt::lang_start_internal::{{closure}}::h6d21eebfa4beaf70\r\n                               at src/libstd/rt.rs:52\r\n  23:     0x5619946d7b98 - std::panicking::try::do_call::h560a27b87db38b9c\r\n                               at src/libstd/panicking.rs:297\r\n  24:     0x5619946d7b98 - std::panicking::try::h453d4afd696011f9\r\n                               at src/libstd/panicking.rs:274\r\n  25:     0x5619946d7b98 - std::panic::catch_unwind::h211d02671f23030f\r\n                               at src/libstd/panic.rs:394\r\n  26:     0x5619946d7b98 - std::rt::lang_start_internal::h464df2bbf46c7e7c\r\n                               at src/libstd/rt.rs:51\r\n  27:     0x5619946bc247 - std::rt::lang_start::h8ba4fc0dc1ea5693\r\n                               at /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:67\r\n  28:     0x5619946ba7fa - main\r\n  29:     0x7fe47f59b09b - __libc_start_main\r\n  30:     0x5619946b917a - _start\r\n  31:                0x0 - <unknown>\r\n```\r\nBacktrace number 17 is finally helpful.\r\nWhat about just show it in panic info instead of `thread 'main' panicked at 'already mutably borrowed: BorrowError', /home/cg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/cell.rs:797:9` this crap\r\n\r\nOr at least have a Backtrace mode that only shows user code trace, I think it would be helpful as I cannot tell whats the different between `BACKTRACE=1` and `BACKTRACE=full`, both are very long and not intuitive", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74472/timeline", "performed_via_github_app": null, "state_reason": "completed"}