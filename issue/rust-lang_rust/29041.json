{"url": "https://api.github.com/repos/rust-lang/rust/issues/29041", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29041/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29041/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29041/events", "html_url": "https://github.com/rust-lang/rust/issues/29041", "id": 111367790, "node_id": "MDU6SXNzdWUxMTEzNjc3OTA=", "number": 29041, "title": "Thread-safe clone provider", "user": {"login": "Yoric", "id": 10190, "node_id": "MDQ6VXNlcjEwMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/10190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yoric", "html_url": "https://github.com/Yoric", "followers_url": "https://api.github.com/users/Yoric/followers", "following_url": "https://api.github.com/users/Yoric/following{/other_user}", "gists_url": "https://api.github.com/users/Yoric/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yoric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yoric/subscriptions", "organizations_url": "https://api.github.com/users/Yoric/orgs", "repos_url": "https://api.github.com/users/Yoric/repos", "events_url": "https://api.github.com/users/Yoric/events{/privacy}", "received_events_url": "https://api.github.com/users/Yoric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2015-10-14T10:17:41Z", "updated_at": "2015-10-18T06:32:48Z", "closed_at": "2015-10-17T18:44:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider a structure `Foo`, which implements `Clone` for sharing between threads but not `Sync`. For instance, any structure containing a `Sender`. The best way to share a `Foo` is therefore to have a local instance instantiated explicitly somewhere on the stack, and to lug it around the code, cloning wherever it is needed. This is, however, painful for large projects, especially if I do not have one instance of `Foo` to carry around but several thousands (which is [my current use case](https://github.com/servo/servo/issues/7029)).\n\nFor the same of readability, I would like to be able to define a module or a static object implementing the following function (resp method):\n\n``` rust\npub fn get_a_foo() -> Foo // Return a fresh clone of Foo.\n```\n\nFor the moment, as far as I can tell, writing this is not possible in Rust. `static mut` requires `Sync`, so `lazy_static!` is out of the question, while afaict `thread_local!` cannot provide sophisticated values.\n# Sketch of a possible API\n\n``` rust\n/// A structure whose sole role is to provide clones of a source object to any thread that\n/// requests it.\n///\n/// Initially, any call to `get` will return `None`. To let the `CloneProvider` provide\n/// something more useful, clients need to call method `attach`.\nimpl CloneProvider<T> where T: Clone {\n  /// Provide an original for the `CloneProvider`, returns a guard.\n  ///\n  /// Until the guard is dropped or `attach` is called again, any call to `get`\n  /// will return a clone of `value`. If a previous value is currently attached\n  /// by a previous call to `attach`, this previous value is dropped.\n  ///\n  /// Once the guard is dropped, `value` is dropped and further calls to `get`\n  /// will again return `None`.\n  fn attach(&self, value: T) -> Guard<T>; // Or perhaps return the old value?\n\n  /// Return a clone of the attached value.\n  ///\n  /// If there is no currently attached value, return `None`.\n  fn get(&self) -> Option<T>;\n}\n\nunsafe impl<T> Sync for CloneProvider<T> {\n}\n```\n# Example use\n\n``` rust\n\nstatic provider_of_foo : CloneProvider<Foo> = CloneProvider::new();\n\nfn main() {\n  let original = Foo:new();\n  let guard = provider_of_foo.attach(original);\n  // ...\n  sub();\n  // ...\n}\n\nfn sub() {\n  for i in 1..10 {\n    let foo = provider_of_foo.get().unwrap();\n    thread::spawn(|| {\n      foo.stuff();\n    }\n  }\n}\n```\n\n**edit** Rewrote the sketch.\n**edit** Title and layout.\n", "closed_by": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29041/timeline", "performed_via_github_app": null, "state_reason": "completed"}