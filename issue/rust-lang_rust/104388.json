{"url": "https://api.github.com/repos/rust-lang/rust/issues/104388", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/104388/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/104388/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/104388/events", "html_url": "https://github.com/rust-lang/rust/issues/104388", "id": 1447348006, "node_id": "I_kwDOAAsO6M5WRMcm", "number": 104388, "title": "capturing stack backtrace becomes slower and sometimes segfaults on Apple Silicon", "user": {"login": "skyzh", "id": 4198311, "node_id": "MDQ6VXNlcjQxOTgzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4198311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skyzh", "html_url": "https://github.com/skyzh", "followers_url": "https://api.github.com/users/skyzh/followers", "following_url": "https://api.github.com/users/skyzh/following{/other_user}", "gists_url": "https://api.github.com/users/skyzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/skyzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skyzh/subscriptions", "organizations_url": "https://api.github.com/users/skyzh/orgs", "repos_url": "https://api.github.com/users/skyzh/repos", "events_url": "https://api.github.com/users/skyzh/events{/privacy}", "received_events_url": "https://api.github.com/users/skyzh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2022-11-14T04:07:53Z", "updated_at": "2023-04-11T09:26:48Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nSorry for not having a MCVE for this issue. I'm still constructing it. For now I have to refer to a large codebase to reproduce the issue.\r\n\r\nBasically, after we upgrade from nightly-2022-07-29 to nightly-2022-10-16, we found two things:\r\n\r\n* Capturing stack backtrace is much slower than before. A single capture can take as long as 300 ms. Previously the Backtrace::capture() at the same code location only takes 1ms. Most of the time are spent on libunwind's CFI_Parser. https://github.com/risingwavelabs/risingwave/issues/6131\r\n* Sometimes capturing a stack backtrace will segfault. https://github.com/risingwavelabs/risingwave/issues/6205#issuecomment-1313050193\r\n\r\nThis issue is stably reproducible on some specific commits of our project with some specific way of compiling, so I guess it's probably not related to incremental compile. I guess it would be more likely to be a problem with the LLVM 15 upgrade in August or the std::backtrace::Backtrace stabilization.\r\n\r\n**Reproduce 1**\r\n\r\nOn this commit: https://github.com/risingwavelabs/risingwave/commit/227e9e5acd37073e4c2afed09294f509d371fc52\r\n\r\n```\r\nRUST_BACKTRACE=1 cargo run --bin risingwave -- playground\r\n```\r\n\r\nIn another terminal, use psql (Postgres's client) to connect to the program:\r\n\r\n```\r\npsql -h localhost -p 4566 -d dev -U root\r\nCREATE TABLE t(a int, b int);\r\nCREATE VIEW v AS SELECT * FROM t;\r\nDROP TABLE t;\r\n```\r\n\r\nThe program will immediately segfault in Backtrace::capture.\r\n\r\nInterestingly, if we use `cargo build -p risingwave_cmd_all && ./target/debug/risingwave playground`, it works. The commit following the buggy commit https://github.com/risingwavelabs/risingwave/commit/604a0a5f38ac1bdaaa5ab77b9eade74af65f202c also magically resolves the issue with some random code change.\r\n\r\n**Reproduce 2**\r\n\r\nOn this commit: https://github.com/risingwavelabs/risingwave/commit/484b9ab27d7fd5612e78f02af70cd5aca0a29daf\r\n\r\n```\r\ncargo build -p risingwave_cmd\r\nRUST_BACKTRACE=1 ./target/debug/meta-node # in terminal 1\r\nRUST_BACKTRACE=1 ./target/debug/compute-node # in terminal 2\r\nRUST_BACKTRACE=1 ./target/debug/frontend # in terminal 3\r\n```\r\n\r\nIn another terminal:\r\n\r\n```\r\npsql -h localhost -p 4566 -d dev -U root\r\nCREATE TABLE BOOLTBL2 (f1 bool); INSERT INTO BOOLTBL2 (f1) VALUES (bool 'XXX');\r\n```\r\n\r\ncompute-node will also immediately segfault when capturing a backtrace.\r\n\r\nThanks for investigating into this!\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.66.0-nightly (b8c35ca26 2022-10-15)\r\nbinary: rustc\r\ncommit-hash: b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1\r\ncommit-date: 2022-10-15\r\nhost: aarch64-apple-darwin\r\nrelease: 1.66.0-nightly\r\nLLVM version: 15.0.2\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/104388/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/104388/timeline", "performed_via_github_app": null, "state_reason": null}