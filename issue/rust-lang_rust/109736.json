{"url": "https://api.github.com/repos/rust-lang/rust/issues/109736", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/109736/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/109736/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/109736/events", "html_url": "https://github.com/rust-lang/rust/issues/109736", "id": 1646418892, "node_id": "I_kwDOAAsO6M5iIlvM", "number": 109736, "title": "Tracking Issue for `lazy_cell`", "user": {"login": "tgross35", "id": 13724985, "node_id": "MDQ6VXNlcjEzNzI0OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/13724985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgross35", "html_url": "https://github.com/tgross35", "followers_url": "https://api.github.com/users/tgross35/followers", "following_url": "https://api.github.com/users/tgross35/following{/other_user}", "gists_url": "https://api.github.com/users/tgross35/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgross35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgross35/subscriptions", "organizations_url": "https://api.github.com/users/tgross35/orgs", "repos_url": "https://api.github.com/users/tgross35/repos", "events_url": "https://api.github.com/users/tgross35/events{/privacy}", "received_events_url": "https://api.github.com/users/tgross35/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2023-03-29T19:50:23Z", "updated_at": "2023-05-22T11:55:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This supercedes #74465 after a portion of `once_cell` was stabilized with #105587\r\n\r\nFeature gate: `#![feature(lazy_cell)]`\r\n\r\nThis is a tracking issue for the `LazyCell` and `LazyLock` types, which are primatives for one-time initialization. One of the main goals is to be able to replace the `lazy_static` crate.\r\n\r\n### Public API\r\n\r\n```rust\r\n// core::cell (in core/src/cell/lazy.rs)\r\n\r\npub struct LazyCell<T, F = fn() -> T> { /* ... */ }\r\n\r\nimpl<T, F: FnOnce() -> T> LazyCell<T, F> {\r\n    pub const fn new(init: F) -> LazyCell<T, F>;\r\n    pub fn force(this: &LazyCell<T, F>) -> &T;\r\n}\r\n\r\nimpl<T, F: FnOnce() -> T> Deref for LazyCell<T, F> {\r\n    type Target = T;\r\n}\r\n\r\nimpl<T: Default> Default for LazyCell<T>;\r\nimpl<T: fmt::Debug, F> fmt::Debug for LazyCell<T, F>;\r\n```\r\n\r\n```rust\r\n// std::sync (in std/sync/lazy_lock.rs)\r\n\r\npub struct LazyLock<T, F = fn() -> T> { /* ... */ }\r\n\r\nimpl<T, F: FnOnce() -> T> LazyLock<T, F> {\r\n    pub const fn new(f: F) -> LazyLock<T, F>;\r\n    pub fn force(this: &LazyLock<T, F>) -> &T;\r\n}\r\n\r\nimpl<T, F> Drop for LazyLock<T, F>;\r\nimpl<T, F: FnOnce() -> T> Deref for LazyLock<T, F> {\r\n    type Target = T;\r\n}\r\nimpl<T: Default> Default for LazyLock<T>;\r\nimpl<T: fmt::Debug, F> fmt::Debug for LazyLock<T, F>;\r\n\r\n// We never create a `&F` from a `&LazyLock<T, F>` so it is fine\r\n// to not impl `Sync` for `F`\r\nunsafe impl<T: Sync + Send, F: Send> Sync for LazyLock<T, F>;\r\n// auto-derived `Send` impl is OK.\r\nimpl<T: RefUnwindSafe + UnwindSafe, F: UnwindSafe> RefUnwindSafe for LazyLock<T, F>;\r\nimpl<T: UnwindSafe, F: UnwindSafe> UnwindSafe for LazyLock<T, F>;\r\n```\r\n\r\n### Steps / History\r\n\r\n- [ ] Implementation: #72414\r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n\r\n### Unresolved Questions\r\n\r\n- [ ] Is variance of Lazy correct? (See https://github.com/matklad/once_cell/issues/167)\r\n- [ ] Default `F = fn() -> T` in type signature (See https://github.com/rust-lang/rust/issues/109736#issuecomment-1489417892)\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/109736/reactions", "total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/109736/timeline", "performed_via_github_app": null, "state_reason": null}