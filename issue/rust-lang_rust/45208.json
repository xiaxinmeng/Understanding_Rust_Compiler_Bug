{"url": "https://api.github.com/repos/rust-lang/rust/issues/45208", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/45208/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/45208/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/45208/events", "html_url": "https://github.com/rust-lang/rust/issues/45208", "id": 264672423, "node_id": "MDU6SXNzdWUyNjQ2NzI0MjM=", "number": 45208, "title": "[incremental] skip type-checking", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-10-11T17:32:41Z", "updated_at": "2020-09-14T11:29:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a kind of meta-bug aimed at skipping type-checking, which is (to some extent) the \"holy grail\" of incremental compilation. This bug only contains a list of issues and a task breakdown. [For background on the general approach we have in mind, see this gist.](https://gist.github.com/nikomatsakis/6e9fae5319be49c70e7efbe67c09fc1a)\r\n\r\nSubsteps:\r\n\r\n- [x] https://github.com/rust-lang/rust/issues/45210: Introduce the `ensure` operation [first described here](https://github.com/rust-lang/rust/issues/45156#issuecomment-335537847) and use it on the `typeck_tables_of` invocations. -- @theotherjimmy is [on it](https://github.com/rust-lang/rust/issues/45208#issuecomment-335896368)\r\n- [x] https://github.com/rust-lang/rust/issues/45214: Isolate the \"used trait imports\" part of typeck tables into a distinct query\r\n- [ ] Enable serialization and deserialization of incremental results, at least for some types.\r\n    - In particular, we will need to support serializing and re-loading `Vec<DefId>`. It wouldn't hurt to support `()` while we're at it.\r\n    - This is likely best tackled by @michaelwoerister or @alexcrichton, but that may not be the case.\r\n\r\nUltimately, all of the the uses of `typeck_tables_of` must be analyzed and eliminated. These uses are listed here in order to mine for producing more subtasks. =)\r\n\r\n<details><p>\r\n\r\n- [ ] `src/librustc_passes/consts.rs:142:        self.tables = self.tcx.typeck_tables_of(item_def_id);`\r\n- [x] `src/librustc_typeck/check_unused.rs:69:        let tables = tcx.typeck_tables_of(item_def_id);`\r\n- [ ] `src/librustc_save_analysis/dump_visitor.rs:109:            let tables = self.tcx.typeck_tables_of(item_def_id);`\r\n- [ ] `src/librustc_typeck/collect.rs:1155:                return tcx.typeck_tables_of(def_id).node_id_to_type(hir_id);`\r\n- [ ] `src/librustc_typeck/collect.rs:1192:            tcx.typeck_tables_of(owner).node_id_to_type(hir_id)`\r\n- [ ] `src/librustc_typeck/collect.rs:1244:            tcx.typeck_tables_of(def_id).closure_tys()[hir_id]`\r\n- [ ] `src/librustc_privacy/lib.rs:503:        replace(tables, tcx.typeck_tables_of(def_id))`\r\n- [ ] `src/librustc_const_eval/pattern.rs:606:                        self.tables = self.tcx.typeck_tables_of(def_id);`\r\n- [ ] `src/librustc_const_eval/eval.rs:381:            tables: tcx.typeck_tables_of(def_id),`\r\n- [ ] `src/librustc_const_eval/eval.rs:770:    let tables = tcx.typeck_tables_of(def_id);`\r\n- [ ] `src/librustc_borrowck/borrowck/mod.rs:100:    let tables = tcx.typeck_tables_of(owner_def_id);`\r\n- [ ] `src/librustc_borrowck/borrowck/mod.rs:198:    let tables = tcx.typeck_tables_of(owner_def_id);`\r\n- [ ] `src/librustc/cfg/construct.rs:57:    let tables = tcx.typeck_tables_of(owner_def_id);`\r\n- [x] `src/librustc/ty/mod.rs:2108:        self.typeck_tables_of(self.hir.body_owner_def_id(body))`\r\n    - not a direct user, see calls of `body_tables()` below\r\n- [ ] `src/librustc/middle/intrinsicck.rs:136:        let tables = self.tcx.typeck_tables_of(owner_def_id);`\r\n- [ ] `src/librustc_typeck/check/mod.rs:734:            tcx.typeck_tables_of(body_owner_def_id);`\r\n- [ ] `src/librustc_typeck/check/mod.rs:756:    tcx.typeck_tables_of(def_id).generator_sigs()[hir_id].map(|s| ty::Binder(s))`\r\n- [ ] `src/librustc_typeck/check/mod.rs:764:    tcx.typeck_tables_of(def_id).closure_kinds()[hir_id].0`\r\n- [ ] `src/librustc_typeck/check/mod.rs:857:        return tcx.typeck_tables_of(outer_def_id);`\r\n- [ ] `src/librustc_typeck/check/mod.rs:1152:        tcx.typeck_tables_of(tcx.hir.local_def_id(it.id));`\r\n- [ ] `src/librustc_typeck/check/mod.rs:1574:            tcx.typeck_tables_of(tcx.hir.local_def_id(e.node_id));`\r\n- [ ] `src/librustc_mir/transform/generator.rs:712:        let interior = *tcx.typeck_tables_of(def_id).generator_interiors().get(hir_id).unwrap();`\r\n- [ ] `src/librustc_mir/hair/cx/mod.rs:96:            tables: tcx.typeck_tables_of(src_def_id),`\r\n- [ ] `src/tools/clippy/clippy_lints/src/consts.rs:302:                        tables: self.tcx.typeck_tables_of(def_id),`\r\n- [ ] `src/librustc_privacy/lib.rs:518:        let orig_tables = replace(&mut self.tables, self.tcx.body_tables(body));`\r\n- [ ] `src/librustc_privacy/lib.rs:672:        let orig_tables = replace(&mut self.tables, self.tcx.body_tables(body));`\r\n- [ ] `src/librustc_driver/pretty.rs:505:            self.tables.set(self.tcx.body_tables(id));`\r\n- [ ] `src/librustc_const_eval/check_match.rs:53:            tables: self.tcx.body_tables(b),`\r\n- [ ] `src/librustc/lint/context.rs:636:        self.tables = self.tcx.body_tables(body);`\r\n- [ ] `src/librustc/lint/context.rs:696:        self.tables = self.tcx.body_tables(body_id);`\r\n- [ ] `src/librustc/middle/liveness.rs:530:        let tables = ir.tcx.body_tables(body);`\r\n- [ ] `src/librustc/middle/reachable.rs:101:        self.tables = self.tcx.body_tables(body);`\r\n- [ ] `src/librustc/middle/dead.rs:218:        self.tables = self.tcx.body_tables(body);`\r\n- [ ] `src/librustc_mir/build/mod.rs:106:                    let gen_ty =  tcx.body_tables(body_id).node_id_to_type(fn_hir_id);`\r\n- [ ] `src/librustc_mir/build/mod.rs:247:    let closure_ty = tcx.body_tables(body_id).node_id_to_type(closure_expr_hir_id);`\r\n- [ ] `src/tools/clippy/clippy_lints/src/attrs.rs:172:        is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir.body(eid).value)`\r\n- [ ] `src/tools/clippy/clippy_lints/src/attrs.rs:180:        ImplItemKind::Method(_, eid) => is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir.body(eid).value),`\r\n- [ ] `src/tools/clippy/clippy_lints/src/attrs.rs:189:            is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir.body(eid).value)`\r\n- [ ] `src/tools/clippy/clippy_lints/src/functions.rs:154:                let tables = cx.tcx.body_tables(body.id());`\r\n\r\n</p></details>", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/45208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/45208/timeline", "performed_via_github_app": null, "state_reason": null}