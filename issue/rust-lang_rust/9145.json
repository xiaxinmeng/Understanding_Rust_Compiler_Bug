{"url": "https://api.github.com/repos/rust-lang/rust/issues/9145", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/9145/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/9145/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/9145/events", "html_url": "https://github.com/rust-lang/rust/issues/9145", "id": 19409280, "node_id": "MDU6SXNzdWUxOTQwOTI4MA==", "number": 9145, "title": "Rewrite serialization to use generators", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-09-12T19:29:57Z", "updated_at": "2014-09-19T03:31:18Z", "closed_at": "2014-09-19T03:31:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a placeholder bug to track potentially converting the serialization api to use generators (#7746). Once we have generators, We'll be able to write a serializer like this:\n\n```\nstruct A {\n    a: int,\n    b: B,\n}\n\nStruct B {\n    c: ~str,\n    d: ~[int],\n}\n\nimpl serialize::Encodable for A {\n    fn encode_iter<'a>(&'a self) -> Option<Value<'a>> {\n        yield StructStart(\"A\");\n        yield StructField(\"a\", 0);\n        yield Int(self.a);\n        yield StructField(\"b\", 1);\n        for value in self.b.encode_iter() { yield value; }\n        yield StructEnd;\n    }\n}\n\nimpl serialize::Encodable for B {\n    fn encode_iter<'a>(&'a self) -> Option<Value<'a>> {\n        yield StructStart(\"B\");\n        yield StructField(\"c\", 0);\n        yield String(self.c);\n        yield StructField(\"d\", 1);\n        for value in self.d.encode_iter() { yield value; }\n        yield StructEnd;\n    }\n}\n```\n\nA Deserializer would also be pretty simple:\n\n```\nstruct PrettyPrinter<T> {\n    it: T\n}\n\nimpl<T: Iterator<Value>> serialize::Decoder<()> for PrettyPrinter {\n    fn decode(&mut self) -> () {\n        match self.it.next() {\n            None => fail!(),\n            Some(Int(x)) => printfln!(\"%?\", x),\n            Some(Str(x)) => printfln!(\"%?\", x),\n            Some(StructStart(name)) => {\n                printfln!(\"%s {\", name);\n                self.decode_struct()\n            }\n            ...\n        }\n    }\n    fn decode_struct(&mut self) {\n        match self.it.next() {\n            Some(StructField(name, idx)) => {\n                if idx != 0 { printfln!(\",\"); }\n                printfln!(\"%s:\", name);\n                self.decode();\n            }\n            Some(StructEnd) => printfln!(\"}\"),\n            _ => fail!(),\n        }\n    }\n    ...\n} \n```\n\nThere are two advantages to this conversion. First, it's easier for rustc to optimize iterator-based code instead of recursive-closure-based code. Second, it allows for a serializer like `extra::json::Encoder` peek into the iterator stream to validate that a map key is actually a string. This would fix #8883. \n", "closed_by": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/9145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/9145/timeline", "performed_via_github_app": null, "state_reason": "completed"}