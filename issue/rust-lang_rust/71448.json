{"url": "https://api.github.com/repos/rust-lang/rust/issues/71448", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71448/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71448/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71448/events", "html_url": "https://github.com/rust-lang/rust/issues/71448", "id": 605108692, "node_id": "MDU6SXNzdWU2MDUxMDg2OTI=", "number": 71448, "title": "Implement TryInto<CString> for str and String", "user": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-22T22:14:47Z", "updated_at": "2020-04-24T14:29:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Higher-level FFI wrappers that need to present a `CString` to C don't have a convenient + efficient type to take on the Rust side.\r\n\r\n```rust\r\nffi_string(arg: ???) {\r\n   let c_string = CString::new(arg)?;\r\n   ffify(c_string.as_ptr());\r\n}\r\n```\r\n\r\n* Taking `CString` is cumbersome, as it doesn't work with simple `&str` and requires callers to do the conversion and handle NUL errors.\r\n\r\n* Taking `String` or `Vec<u8>` is efficient only if it happens to have spare capacity, but `\"foo\".to_string()` doesn't have any spare capacity.\r\n\r\n* Taking `&str` always needs to allocate.\r\n\r\n\r\nTaking `impl TryInto<CString>` would be ideal, if that trait was implemented for common string-like types.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71448/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71448/timeline", "performed_via_github_app": null, "state_reason": null}