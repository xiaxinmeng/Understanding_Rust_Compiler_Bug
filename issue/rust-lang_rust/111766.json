{"url": "https://api.github.com/repos/rust-lang/rust/issues/111766", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111766/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111766/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111766/events", "html_url": "https://github.com/rust-lang/rust/issues/111766", "id": 1717414902, "node_id": "I_kwDOAAsO6M5mXav2", "number": 111766, "title": "building from source does not like if you `git init` the tree.", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 325438536, "node_id": "MDU6TGFiZWwzMjU0Mzg1MzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-bootstrap", "name": "T-bootstrap", "color": "bfd4f2", "default": false, "description": "Relevant to the bootstrap subteam: Rust's build system (x.py and src/bootstrap)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2023-05-19T15:13:36Z", "updated_at": "2023-05-20T15:19:21Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this shell interaction:\r\n\r\n```\r\n% curl -O https://static.rust-lang.org/dist/rustc-1.69.0-src.tar.gz\r\n% tar xzf rustc-1.69.0-src.tar.gz\r\n% cd rustc-1.69.0-src/\r\n% git init\r\n% ./x.py setup compiler\r\n% ./x.py build\r\n```\r\n\r\nI expected to see this happen: A successful bootstrap.\r\nInstead, this happened:  the last step there fails with:\r\n\r\n```\r\nBuilding bootstrap\r\n    Finished dev [unoptimized] target(s) in 0.04s\r\nthread 'main' panicked at 'command did not execute successfully: cd \"/home/ubuntu/Dev/Rust/rustc-1.69.0-src\" && \"git\" \"config\" \"--file\" \"/home/ubuntu/Dev/Rust/rustc-1.69.0-src/.gitmodules\" \"--get-regexp\" \"path\"\r\nexpected success, got: exit status: 1', lib.rs:631:22\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\n\r\nThis is because, I presume, our logic for inferring whether to automatically update submodules does so based on whether it sees a `.git` subdirectory (which `git init` above will create).\r\n\r\nOne can work around this specific problem by adding this to the `config.toml` generated by `x.py setup`:\r\n\r\n```\r\n[build]\r\nsubmodules = false\r\n```\r\n\r\nbut it would be nice to not have to workaround it at all...\r\n\r\nand then I think we hit a different problem related to downloading LLVM... so we work around that by doing:\r\n\r\n```\r\n[llvm]\r\ndownload-ci-llvm = false\r\n```\r\n\r\n(using `git init` as a cheap way to checkpoint bits of state locally before I edit them is a personal  development pattern of mine, and I wouldn't be surprised if others use it as well...)\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\n<version>\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary>Backtrace</summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111766/timeline", "performed_via_github_app": null, "state_reason": null}