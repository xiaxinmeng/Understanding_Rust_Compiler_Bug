{"url": "https://api.github.com/repos/rust-lang/rust/issues/66281", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66281/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66281/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66281/events", "html_url": "https://github.com/rust-lang/rust/issues/66281", "id": 520708440, "node_id": "MDU6SXNzdWU1MjA3MDg0NDA=", "number": 66281, "title": "Waker::will_wake() gets mostly defeated by executor optimizations", "user": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-11T02:44:01Z", "updated_at": "2020-03-22T22:42:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Futures `Waker` API provides a [Waker::will_wake()](https://doc.rust-lang.org/beta/std/task/struct.Waker.html#method.will_wake) method which tries to determine whether the 2 `Waker`s are equivalent. It intends to allow `Future`s so determine whether they have to swap a `Waker` or have to can keep an already stored one which is equivalent. That can avoid some churn on atomic refcounts on those `Waker`s.\r\n\r\nThe `will_wake` method [is implemented by a `PartialEq` derive on `RawWaker`](https://doc.rust-lang.org/beta/src/core/task/wake.rs.html#279-281) - which means `will_wake()` will return `true` only if the pointer as well as the vtable in `RawWaker` are equivalent.\r\n\r\nHowever futures executors are moving more and more towards a design where they lazily create the \"real\" storeable `Waker`, and only provide a `Waker` reference to tasks they poll.  E.g. `futures-rs` uses [WakerRef](https://github.com/rust-lang-nursery/futures-rs/blob/master/futures-task/src/waker_ref.rs) [tokio does the same](https://github.com/tokio-rs/tokio/blob/d5c1119c881c9a8b511aa9000fd26b9bda014256/tokio/src/runtime/task/waker.rs#L9-L28). This avoids an atomic increment and decrement cycle for each task that an executor polls.\r\n\r\nHowever this means the `RawWaker` that the executor passes through the `Context` parameter will now always be different to the one stored inside a `Future` and `will_wake()` will return false. Which causes the `Future` to update the `Waker` reference (2 atomic ops). If the executor polls a couple of sub-tasks which now all swap out their `Waker`s the original executor optimization could now even lead to de-optimization - since the result is more atomic ops in other places.\r\n\r\nUsing the `will_wake()` method makes most sense exactly inside the `.poll()` method of a `Future` in order to determine whether a stored `Waker` needs to get updated. This is now the exact same point where the `WakerRef`  would return the false negative. Therefore using `.will_wake()` is not that helpful given the state of the executor ecosystem.\r\n\r\nSo far for the description of the issue. The next question is whether this can be improved or solved. I don't think changing `PartialEq for RawWaker` - e.g. to conly compare the data pointer - makes sense. It will likely only lead to false positives (`waker.will_wake(other) == true`). Which then leads to missing wakeups aka live-locks.\r\n\r\nThe original design of `RawWaker` plus `Vtable` contained a vtable entry for `will_wake()`. This would have definitely helped to solve the issue, since the executors would have been able to overwrite the check and to be able to associate `Waker`s  and their `WakerRef`s.  However this was removed for simplification purposes.\r\n\r\nI think one possible outcome could be to keep this issue as a tracking issue for the deficit. And if there is ever a change to the vtable for other reasons to also add a `will_wake` method back. Up to then it's probably not worth an update.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66281/timeline", "performed_via_github_app": null, "state_reason": null}