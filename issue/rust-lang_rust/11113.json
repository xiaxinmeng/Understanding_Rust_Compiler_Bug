{"url": "https://api.github.com/repos/rust-lang/rust/issues/11113", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/11113/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/11113/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/11113/events", "html_url": "https://github.com/rust-lang/rust/issues/11113", "id": 24676892, "node_id": "MDU6SXNzdWUyNDY3Njg5Mg==", "number": 11113, "title": "Tutorial ambiguity or mistake re: destructuring & let", "user": {"login": "olliebun", "id": 615299, "node_id": "MDQ6VXNlcjYxNTI5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/615299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olliebun", "html_url": "https://github.com/olliebun", "followers_url": "https://api.github.com/users/olliebun/followers", "following_url": "https://api.github.com/users/olliebun/following{/other_user}", "gists_url": "https://api.github.com/users/olliebun/gists{/gist_id}", "starred_url": "https://api.github.com/users/olliebun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olliebun/subscriptions", "organizations_url": "https://api.github.com/users/olliebun/orgs", "repos_url": "https://api.github.com/users/olliebun/repos", "events_url": "https://api.github.com/users/olliebun/events{/privacy}", "received_events_url": "https://api.github.com/users/olliebun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-12-22T07:22:17Z", "updated_at": "2014-06-25T17:01:23Z", "closed_at": "2014-06-25T17:01:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "From the tutorial:\n\n> You've already seen simple let bindings, but let is a little fancier than you've been led to believe. It, too, supports destructuring patterns. For example, you can write this to extract the fields from a tuple, introducing two variables at once: a and b.\n> \n> ```\n> let (a, b) = get_tuple_of_two_ints();\n> ```\n> \n> Let bindings only work with irrefutable patterns: that is, patterns that can never fail to match. **This excludes let from matching literals and most enum variants.**\n\n(emphasis mine)\n\nThis code compiles and behaves as expected:\n\n``` rust\nlet (a, b) = (1,2);\n```\n\nHave not included a pull request, as I'm not sure what the meaning of the passage is otherwise.\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/11113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/11113/timeline", "performed_via_github_app": null, "state_reason": "completed"}