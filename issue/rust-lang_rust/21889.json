{"url": "https://api.github.com/repos/rust-lang/rust/issues/21889", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21889/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21889/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21889/events", "html_url": "https://github.com/rust-lang/rust/issues/21889", "id": 56350281, "node_id": "MDU6SXNzdWU1NjM1MDI4MQ==", "number": 21889, "title": "libbacktrace crash and os::self_exe_name race condition", "user": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2015-02-03T08:58:46Z", "updated_at": "2016-10-25T16:08:43Z", "closed_at": "2016-10-25T16:08:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This issue is to report several problems linked:\n- libbacktrace (embeded in every rust-compiled program) is fragile (a bad input could generate a crash, I don't have checked for code-execution at this moment)\n- a race condition exists with `os::self_exe_name` that could permit to exploit the previous issue by replacing at runtime the binary by a specially crafted elf.\n\nI will first speak about the race, and next about libbacktrace.\n\nFirst, about `os::self_exe_name`: it is a function that return an Option<Path> about the running binary (the filepath to the binary used for launch the running processus).\n\nThe function is used in rustc:\n- by librustc to infer the default sysroot directory (rustc and rustdoc use it)\n- by libbacktrace under bsd system for gets the binary symbols\n  (but note that for others platforms, libbacktrace obtain symbols by itself using similar method than `os::self_exe_name`, so there is the same problem)\n- by severals tests\n\nThe implementation (`sys::os::load_self`) is platform dependant:\n- freebsd: sysctl()\n- dragonfly: readlink(/proc)\n- linux, android: readlink(/proc)\n- macos, ios: _NSGetExecutablePath()\n- windows: GetModuleFileNameW()\n\nJust returning a filepath is subject to race condition for many usages. The libbacktrace usage is one of them.\n\nlibbacktrace is initialized on `sys::backtrace::print()` call (so not at the beginning of the processus). This function is called by `sys::backtrace::write()`. And on panic, a backtrace is showed if `RUST_BACKTRACE` environment is setted.\n\nSo, when a panic occurs, libbacktrace will read the previously obtained filepath (from `os::self_exe_name` or by itself). It will open this filepath, parse the ELF structure, search for symbols and addresses... and do all the thing it need for print a pretty backtrace.\n\nThe problem is libbacktrace seems not robust enought for specially crafted ELF. I have started to test it with afl-fuzzer, and it reports severals crashs (that may or not be suceptible to produce code-execution).\n\nAs libbacktrace is embeded in (near to) every rust-compiled programs, it could be a dangerous thing.\n\nTo successfully exploit it, the following conditions are required:\n- run libbacktrace code:\n  - RUST_BACKTRACE environment variable to be setted\n  - trigger a `panic` in running process\n- have libbacktrace read a crafted-elf:\n  - replace the file of the running program by another one after the start of the program, and before the panic\n\nThe conditions are relatively high for simple exploitation, but as it is a problem present in (near to) every rust-compiled code, some attention should be need.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21889/timeline", "performed_via_github_app": null, "state_reason": "completed"}