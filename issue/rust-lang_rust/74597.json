{"url": "https://api.github.com/repos/rust-lang/rust/issues/74597", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74597/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74597/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74597/events", "html_url": "https://github.com/rust-lang/rust/issues/74597", "id": 663194417, "node_id": "MDU6SXNzdWU2NjMxOTQ0MTc=", "number": 74597, "title": "Explain elision when it is relevant to lifetime errors", "user": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-21T17:43:52Z", "updated_at": "2023-04-05T17:31:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\n#![feature(nll)]\r\n\r\nfn mutate_while_borrowed(x: &mut i32) -> &i32 {\r\n    let y = &*x;\r\n    *x += 1;\r\n    y\r\n}\r\n\r\nstruct S;\r\nimpl S {\r\n    fn wrong_elided_lifetime(&self, x: &i32) -> &i32 {\r\n        x\r\n    }\r\n}\r\n```\r\n\r\nGives these errors\r\n\r\n```\r\nerror[E0506]: cannot assign to `*x` because it is borrowed\r\n --> src/lib.rs:5:5\r\n  |\r\n3 | fn mutate_while_borrowed(x: &mut i32) -> &i32 {\r\n  |                             - let's call the lifetime of this reference `'1`\r\n4 |     let y = &*x;\r\n  |             --- borrow of `*x` occurs here\r\n5 |     *x += 1;\r\n  |     ^^^^^^^ assignment to borrowed `*x` occurs here\r\n6 |     y\r\n  |     - returning this value requires that `*x` is borrowed for `'1`\r\n\r\nerror: lifetime may not live long enough\r\n  --> src/lib.rs:12:9\r\n   |\r\n11 |     fn wrong_elided_lifetime(&self, x: &i32) -> &i32 {\r\n   |                              -         - let's call the lifetime of this reference `'1`\r\n   |                              |\r\n   |                              let's call the lifetime of this reference `'2`\r\n12 |         x\r\n   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\nIt's not made clear *why* the returns are expected to have lifetime `'1`. It would be helpful to have annotations like\r\n\r\n```\r\n3 | fn mutate_while_borrowed(x: &mut i32) -> &i32 {\r\n  |                             -            - this elided lifetime is inferred to be `'1`\r\n  |                             |\r\n  |                             let's call the lifetime of this reference `'1`\r\n```\r\n\r\nMaybe link to the [book section](https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision) as well? For the second function, maybe adding a named lifetime (`f<'a>(&self, &'a i32) -> &'a i32`) could be automatically suggested, but that does change the semantics of the function to callers.\r\n\r\nWithout `#![feature(nll)]`, the second function produces a different error, which could also use these enhancements:\r\n\r\n```\r\nerror[E0623]: lifetime mismatch\r\n  --> src/lib.rs:10:9\r\n   |\r\n9  |     fn wrong_elided_lifetime(&self, x: &i32) -> &i32 {\r\n   |                                        ----     ----\r\n   |                                        |\r\n   |                                        this parameter and the return type are declared with different lifetimes...\r\n10 |         x\r\n   |         ^ ...but data from `x` is returned here\r\n```\r\n\r\n@rustbot modify labels: +C-enhancement +A-diagnostics +A-lifetimes\r\n\r\n@rustbot claim", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74597/timeline", "performed_via_github_app": null, "state_reason": null}