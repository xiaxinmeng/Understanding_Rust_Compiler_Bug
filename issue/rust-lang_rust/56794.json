{"url": "https://api.github.com/repos/rust-lang/rust/issues/56794", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56794/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56794/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56794/events", "html_url": "https://github.com/rust-lang/rust/issues/56794", "id": 390874600, "node_id": "MDU6SXNzdWUzOTA4NzQ2MDA=", "number": 56794, "title": "mem::size_of::<T> not const - use of type variable from outer function", "user": {"login": "frehberg", "id": 4435830, "node_id": "MDQ6VXNlcjQ0MzU4MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4435830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frehberg", "html_url": "https://github.com/frehberg", "followers_url": "https://api.github.com/users/frehberg/followers", "following_url": "https://api.github.com/users/frehberg/following{/other_user}", "gists_url": "https://api.github.com/users/frehberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/frehberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frehberg/subscriptions", "organizations_url": "https://api.github.com/users/frehberg/orgs", "repos_url": "https://api.github.com/users/frehberg/repos", "events_url": "https://api.github.com/users/frehberg/events{/privacy}", "received_events_url": "https://api.github.com/users/frehberg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-13T21:50:45Z", "updated_at": "2019-11-09T15:09:52Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following CDR-serde implementation defines functions to serialize data-types such as u16, u32 etc. It is using an abstract function to align write-position, to match with multiple of mem::size_of<T>(), where T is a primitive int or float type.\r\n\r\nAs the bytesize is known at compile time, I would like to declare the value as const, using the following patch ://github.com/frehberg/cdr-rs/pull/1\r\n\r\n```rust\r\nimpl<W, E> Serializer<W, E>\r\nwhere\r\n    W: Write,\r\n    E: ByteOrder,\r\n{\r\n....\r\n  fn write_padding_of<T>(&mut self) -> Result<()> {\r\n        // Calculate the required padding to align with 1-byte, 2-byte, 4-byte, 8-byte boundaries\r\n        // Instead of using the slow modulo operation '%', the faster bit-masking is used\r\n        const PADDING: [u8; 8] = [0; 8];\r\n        const ALIGNMENT: usize = std::mem::size_of::<T>();\r\n        const MASK = ALIGNMENT - 1; // mask like 0x0, 0x1, 0x3, 0x7\r\n        match (self.pos as usize) & MASK {\r\n            0 => Ok(()),\r\n            n @ 1...7 => {\r\n                let amt = ALIGNMENT - n;\r\n                self.pos += amt as u64;\r\n                self.writer.write_all(&PADDING[..amt]).map_err(Into::into)\r\n            }\r\n            _ => unreachable!(),\r\n        }\r\n    }\r\n```\r\n\r\nbut compiler yields with error\r\n```sh\r\nerror: Could not compile `cdr`.\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror[E0401]: can't use type parameters from outer function\r\n  --> src/ser.rs:51:54\r\n47 |     fn write_padding_of<T>(&mut self) -> Result<()> {\r\n   |        ---------------- - type variable from outer function\r\n   |        |\r\n   |        try adding a local type parameter in this method instead\r\n...\r\n51 |         const ALIGNMENT: usize = std::mem::size_of::<T>();\r\n   |                                                      ^ use of type variable from outer function\r\nFor more information about this error, try `rustc --explain E0401`.\r\nerror: Could not compile `cdr`.\r\n```\r\nAs the generic function is not exported by lib, and it is instanciated only from inside the crate, I am wondering why the compiler is not able to derive the type of parameter T.\r\n\r\nAny idea?\r\n\r\n*EDIT* the explanation of E0401 does not fit to this code\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56794/timeline", "performed_via_github_app": null, "state_reason": null}