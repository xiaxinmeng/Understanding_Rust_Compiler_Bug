{"url": "https://api.github.com/repos/rust-lang/rust/issues/28226", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/28226/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/28226/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/28226/events", "html_url": "https://github.com/rust-lang/rust/issues/28226", "id": 104830082, "node_id": "MDU6SXNzdWUxMDQ4MzAwODI=", "number": 28226, "title": "a way to compose functions", "user": {"login": "johnynek", "id": 67958, "node_id": "MDQ6VXNlcjY3OTU4", "avatar_url": "https://avatars.githubusercontent.com/u/67958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnynek", "html_url": "https://github.com/johnynek", "followers_url": "https://api.github.com/users/johnynek/followers", "following_url": "https://api.github.com/users/johnynek/following{/other_user}", "gists_url": "https://api.github.com/users/johnynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnynek/subscriptions", "organizations_url": "https://api.github.com/users/johnynek/orgs", "repos_url": "https://api.github.com/users/johnynek/repos", "events_url": "https://api.github.com/users/johnynek/events{/privacy}", "received_events_url": "https://api.github.com/users/johnynek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-09-04T04:51:19Z", "updated_at": "2017-03-01T15:53:48Z", "closed_at": "2017-03-01T15:53:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is a way (I was pointed to this by mbrubeck on the rust IRC channel) to [compose two functions](https://play.rust-lang.org/?code=%23!%5Bfeature%28unboxed_closures%2C%20core%29%5D%0A%0Afn%20succ%28x%3A%20i32%29%20-%3E%20i32%20%7B%20x%20%2B%201%20%7D%0Afn%20sq%28x%3A%20i32%29%20-%3E%20i32%20%7B%20x%20*%20x%20%7D%0A%0Astruct%20Compose%3CF%2C%20G%3E%28F%2C%20G%29%3B%20%0Aimpl%3CR%2C%20M%2C%20A%2C%20F%3A%20FnOnce%28M%29%20-%3E%20R%2C%20G%3A%20FnOnce%3CA%2C%20Output%3DM%3E%3E%20FnOnce%3CA%3E%20for%20Compose%3CF%2C%20G%3E%20%7B%0A%20%20%20%20type%20Output%20%3D%20R%3B%0A%20%20%20%20extern%20%22rust-call%22%20fn%20call_once%28self%2C%20args%3A%20A%29%20-%3E%20R%20%7B%0A%20%20%20%20%20%20%20%20let%20Compose%28f%2C%20g%29%20%3D%20self%3B%0A%20%20%20%20%20%20%20%20f%28g.call_once%28args%29%29%0A%20%20%20%20%7D%0A%7D%0Aimpl%3CR%2C%20M%2C%20A%2C%20F%3A%20FnMut%28M%29%20-%3E%20R%2C%20G%3A%20FnMut%3CA%2C%20Output%3DM%3E%3E%20FnMut%3CA%3E%20for%20Compose%3CF%2C%20G%3E%20%7B%0A%20%20%20%20extern%20%22rust-call%22%20fn%20call_mut%28%26mut%20self%2C%20args%3A%20A%29%20-%3E%20R%20%7B%0A%20%20%20%20%20%20%20%20self.0%28self.1.call_mut%28args%29%29%0A%20%20%20%20%7D%0A%7D%0Aimpl%3CR%2C%20M%2C%20A%2C%20F%3A%20Fn%28M%29%20-%3E%20R%2C%20G%3A%20Fn%3CA%2C%20Output%3DM%3E%3E%20Fn%3CA%3E%20for%20Compose%3CF%2C%20G%3E%20%7B%0A%20%20%20%20extern%20%22rust-call%22%20fn%20call%28%26self%2C%20args%3A%20A%29%20-%3E%20R%20%7B%0A%20%20%20%20%20%20%20%20self.0%28self.1.call%28args%29%29%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main%28%29%20%7B%0A%20%20%20%20let%20f%20%3D%20Compose%28succ%2C%20sq%29%3B%0A%20%20%20%20println!%28%22%7B%7D%20%7B%7D%22%2C%20f%285%29%2C%20f%286%29%29%3B%0A%7D&version=nightly).\n\n``` rust\n#![feature(unboxed_closures, core)]\n\nfn succ(x: i32) -> i32 { x + 1 }\nfn sq(x: i32) -> i32 { x * x }\n\nstruct Compose<F, G>(F, G); \nimpl<R, M, A, F: FnOnce(M) -> R, G: FnOnce<A, Output=M>> FnOnce<A> for Compose<F, G> {\n    type Output = R;\n    extern \"rust-call\" fn call_once(self, args: A) -> R {\n        let Compose(f, g) = self;\n        f(g.call_once(args))\n    }\n}\nimpl<R, M, A, F: FnMut(M) -> R, G: FnMut<A, Output=M>> FnMut<A> for Compose<F, G> {\n    extern \"rust-call\" fn call_mut(&mut self, args: A) -> R {\n        self.0(self.1.call_mut(args))\n    }\n}\nimpl<R, M, A, F: Fn(M) -> R, G: Fn<A, Output=M>> Fn<A> for Compose<F, G> {\n    extern \"rust-call\" fn call(&self, args: A) -> R {\n        self.0(self.1.call(args))\n    }\n}\n\nfn main() {\n    let f = Compose(succ, sq);\n    println!(\"{} {}\", f(5), f(6));\n}\n```\n\nThis seems like something it would be worth adding to the standard library.\n\nShould I just open a pull request or is there another process for this kind of proposal?\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/28226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/28226/timeline", "performed_via_github_app": null, "state_reason": "completed"}