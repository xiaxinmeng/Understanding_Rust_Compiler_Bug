{"url": "https://api.github.com/repos/rust-lang/rust/issues/99037", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99037/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99037/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99037/events", "html_url": "https://github.com/rust-lang/rust/issues/99037", "id": 1298380118, "node_id": "I_kwDOAAsO6M5NY7VW", "number": 99037, "title": "$crate in a macro pattern behaves oddly", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-07-08T02:04:34Z", "updated_at": "2022-07-08T02:06:51Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nIt is my opinion that this should not have been allowed in the first place, and should be forward-compat deprecated for eventual removal.\r\n\r\nI tried this code:\r\n\r\n```rust\r\nmacro_rules! m {\r\n    ($crate) => {};\r\n}\r\n```\r\n\r\n#### I expected to see this happen:\r\n\r\nA compiler error. Likely,\r\n\r\n```\r\nerror: missing fragment specifier\r\n --> src/lib.rs:2:6\r\n  |\r\n2 |     ($crate) => {};\r\n  |      ^^^^^^\r\n  |\r\n  = note: `#[deny(missing_fragment_specifier)]` on by default\r\n  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\r\n  = note: for more information, [see issue #40107 <https://github.com/rust-lang/rust/issues/40107>](https://github.com/rust-lang/rust/issues/40107)\r\n```\r\n\r\n#### Instead, this happened:\r\n\r\nThe macro compiles without any errors. Calling such a macro is difficult:\r\n\r\n```rust\r\nm!($crate); //~ error: no rules expected the token `$`\r\n\r\nmacro_rules! call {\r\n    () => { m!($crate); };\r\n}\r\n\r\ncall!(); // this works\r\n```\r\n\r\nThe following illustrates what is going on here:\r\n\r\n```rust\r\n// lib.rs\r\n#[macro_export]\r\nmacro_rules! lib_macro {\r\n    ($crate) => {};\r\n}\r\n\r\n#[macro_export]\r\nmacro_rules! try_call {\r\n    ($m:path) => {\r\n        $m!($crate);\r\n    };\r\n}\r\n\r\n// main.rs\r\nuse lib::*;\r\n\r\nmacro_rules! main_macro {\r\n    ($crate) => {};\r\n}\r\n\r\nmacro_rules! tt_macro {\r\n    ($krate:tt) => {};\r\n}\r\n\r\nmacro_rules! ident_macro {\r\n    ($krate:ident) => {};\r\n}\r\n\r\ntry_call!(lib_macro);\r\ntry_call!(main_macro);\r\ntry_call!(tt_macro);\r\ntry_call!(ident_macro);\r\n\r\nfn main() {}\r\n```\r\n\r\nAll of these calls work. What is happening is that `$crate` *even in macro patterns* is getting glued into a single identifier token. Thus, in the macro pattern, it can only be fulfilled by another glued `$crate` token, which is only possible do in the expansion of a macro.\r\n\r\nI think it is better to forbid this usage, as it is strongly inconsistent with the behavior of other keywords in macro binders (they work like any other identifier and are currently not reserved in this position), and `$crate` is taught as\r\n\r\n> Within a macro imported from a crate named `foo`, the special macro variable `$crate` will expand to `::foo`. [[old 1.5 edition of The Book](https://doc.rust-lang.org/1.5.0/book/macros.html#the-variable-crate)]\r\n\r\n> Hygiene is also the reason that we need the `$crate` metavariable when our macro needs access to other items in the defining crate. What this special metavariable does is that it expands to an absolute path to the defining crate. [[The Little Book of Rust Macros](https://veykril.github.io/tlborm/decl-macros/minutiae/hygiene.html#crate)]\r\n\r\nWhile both of these are subtly wrong (`$crate` can be observed to \"expand\" into a single identifier), they agree that `$crate` is semantically a \"reserved binder\" which expands to the crate that the containing `macro_rules!` is defined in.\r\n\r\nThe current behavior of `$crate` in macro pattern position is as a compound token (only producible with macros) is incompatible with this understanding of `$crate`, which is otherwise ([mostly](https://github.com/rust-lang/rust/issues/99035)) correct. The behavior of `$crate` in pattern position should by this definition be to\r\n\r\n- without a fragment specifier, error indicating that a fragment specifier is missing (and perhaps also/instead)\r\n- with a fragment specifier, error indicating that `$crate` is a reserved keyword name that cannot be used as a custom binder.\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.64.0-nightly (27eb6d701 2022-07-04)\r\nbinary: rustc\r\ncommit-hash: 27eb6d7018e397cf98d51c205e3576951d766323\r\ncommit-date: 2022-07-04\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.64.0-nightly\r\nLLVM version: 14.0.6\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99037/timeline", "performed_via_github_app": null, "state_reason": null}