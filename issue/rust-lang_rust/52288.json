{"url": "https://api.github.com/repos/rust-lang/rust/issues/52288", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52288/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52288/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52288/events", "html_url": "https://github.com/rust-lang/rust/issues/52288", "id": 340534749, "node_id": "MDU6SXNzdWUzNDA1MzQ3NDk=", "number": 52288, "title": "Generalizing over pointer type", "user": {"login": "axos88", "id": 1281218, "node_id": "MDQ6VXNlcjEyODEyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1281218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axos88", "html_url": "https://github.com/axos88", "followers_url": "https://api.github.com/users/axos88/followers", "following_url": "https://api.github.com/users/axos88/following{/other_user}", "gists_url": "https://api.github.com/users/axos88/gists{/gist_id}", "starred_url": "https://api.github.com/users/axos88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axos88/subscriptions", "organizations_url": "https://api.github.com/users/axos88/orgs", "repos_url": "https://api.github.com/users/axos88/repos", "events_url": "https://api.github.com/users/axos88/events{/privacy}", "received_events_url": "https://api.github.com/users/axos88/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-12T08:18:34Z", "updated_at": "2018-07-12T21:51:02Z", "closed_at": "2018-07-12T21:51:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "My use case is a bit more complex than this, but I'm trying to simplify the issue with this abstract example:\r\nSay I have a structure\r\n\r\n```\r\n  struct Foo {\r\n    bar: u32,\r\n    baz: u32,\r\n    ....\r\n  }\r\n```\r\n\r\nHow can I write a `get_bar` function which can generalize over the mutability of the `self` parameter?\r\nPseudocode:\r\n\r\n```\r\n  impl Foo {\r\n    fn<?PT> getBar(&PT self) -> &PT u32 where PT = {mut immut} {\r\n       &PT self.bar\r\n    }\r\n```\r\n\r\nIf called with a mutable pointer, it would return a mutble pointer to the inner field, if called with an immutable, it would return an immutable.\r\n\r\nMy goal is to avoid having to define a nonmut and a mut version of each function, by copy pasting code basically:\r\n\r\n```\r\n  impl Foo {\r\n    fn get_bar(&self) -> &u32 { &self.bar }\r\n    fn get_bar_mut(&mut self) -> &mut u32 { &mut self.bar }\r\n  }\r\n```\r\n\r\nIf the body of the function is more complex than this (my case is a recursive function), it gets pretty nasty, and there is a lot of code that is being copy&pasted, something that should be avoided.", "closed_by": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52288/timeline", "performed_via_github_app": null, "state_reason": "completed"}