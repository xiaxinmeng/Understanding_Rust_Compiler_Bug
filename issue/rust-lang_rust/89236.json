{"url": "https://api.github.com/repos/rust-lang/rust/issues/89236", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89236/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89236/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89236/events", "html_url": "https://github.com/rust-lang/rust/issues/89236", "id": 1006867495, "node_id": "I_kwDOAAsO6M48A5Qn", "number": 89236, "title": "Incorrect diagnostic when mixing generics, lifetimes and associated consts", "user": {"login": "typesanitizer", "id": 7187503, "node_id": "MDQ6VXNlcjcxODc1MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/7187503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/typesanitizer", "html_url": "https://github.com/typesanitizer", "followers_url": "https://api.github.com/users/typesanitizer/followers", "following_url": "https://api.github.com/users/typesanitizer/following{/other_user}", "gists_url": "https://api.github.com/users/typesanitizer/gists{/gist_id}", "starred_url": "https://api.github.com/users/typesanitizer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/typesanitizer/subscriptions", "organizations_url": "https://api.github.com/users/typesanitizer/orgs", "repos_url": "https://api.github.com/users/typesanitizer/repos", "events_url": "https://api.github.com/users/typesanitizer/events{/privacy}", "received_events_url": "https://api.github.com/users/typesanitizer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-24T22:31:06Z", "updated_at": "2021-09-24T22:38:03Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code: ([try it in a playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=a8d76b8c3e6d1d90ef67b26b8b26af88))\r\n\r\n```rust\r\nuse std::hash::BuildHasher;\r\nuse std::collections::HashMap;\r\n\r\ntrait H: Send + Sync + Clone + BuildHasher { }\r\n\r\nstruct I<'i, RS: H> {\r\n    h: &'i HashMap<i32, i32, RS>,\r\n    s: VeryVeryLongTypeName\r\n}\r\nimpl<'i, RS: H> I<'i, RS> {\r\n    const CHUNK_SIZE: usize = VeryVeryLongTypeName::CHUNK_SIZE;\r\n    fn go(&mut self) {\r\n        self.s.chunks.push(Box::new([0; Self::CHUNK_SIZE])); // ERROR\r\n    }\r\n}\r\n\r\nstruct VeryVeryLongTypeName {\r\n    chunks: Vec<Box<[u8; Self::CHUNK_SIZE]>>\r\n}\r\nimpl VeryVeryLongTypeName {\r\n    const CHUNK_SIZE: usize = 69;\r\n}\r\n```\r\n\r\nI expect this code to either compile fine or provide a warning similar to #76200.\r\n\r\nHowever, I see an error:\r\n```\r\n11 | impl<'i, RS: H> I<'i, RS> {\r\n   |          --- help: consider adding an explicit lifetime bound...: `RS: 'i +`\r\n...\r\n15 |         self.s.chunks.push(Box::new([0; Self::CHUNK_SIZE]));\r\n   |                                         ^^^^ ...so that the type `RS` will meet its required lifetime bounds\r\n```\r\nI don't understand why `RS: 'i` is needed for accessing a constant off of `Self`. As one might expect, replacing `Self::CHUNK_SIZE` with `VeryVeryLongTypeName::CHUNK_SIZE` works around the issue. \r\n\r\nTested with stable `1.55.0` and `1.57.0-nightly (2021-09-23 2b862bed9889808b6962)`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89236/timeline", "performed_via_github_app": null, "state_reason": null}