{"url": "https://api.github.com/repos/rust-lang/rust/issues/1520", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1520/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1520/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1520/events", "html_url": "https://github.com/rust-lang/rust/issues/1520", "id": 2840569, "node_id": "MDU6SXNzdWUyODQwNTY5", "number": 1520, "title": "Support a very basic form of operator overloading", "user": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2012-01-14T11:56:27Z", "updated_at": "2014-06-16T21:56:27Z", "closed_at": "2012-01-26T14:56:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "(RFC)\n\nWe could add interfaces `core::num` and `core::deref`, with the first implementing methods `add`, `sub`, `mult`, `div`, `rem`, `neg`, and probably a few more, and the second only `deref`. The compiler can then resolve operators `+`, `-`, `*`, `/`, `%`, and `[x]` on types that are not built-in numerics or vectors as if they were calls to the corresponding method (`1 + 1` => `1.add(1)`), and numeric-style and sequence-style user types can implement these interface to allow the operators to be applied to them.\n\nThis is not the most elegant solution (`1 + 1` is more like `add(1, 1)` than `1.add(1)`), but it would give us operator overloading on the short term, without first needing a lot of extra interface features.\n\nWe _will_ need some kind of support for a 'self type' in interface declarations to be able to say that `add` takes an returns a value of the type that the interface was specialized on, which is not currently expressable.\n", "closed_by": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1520/timeline", "performed_via_github_app": null, "state_reason": "completed"}