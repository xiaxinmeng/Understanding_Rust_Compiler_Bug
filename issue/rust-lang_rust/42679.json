{"url": "https://api.github.com/repos/rust-lang/rust/issues/42679", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42679/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42679/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42679/events", "html_url": "https://github.com/rust-lang/rust/issues/42679", "id": 236240288, "node_id": "MDU6SXNzdWUyMzYyNDAyODg=", "number": 42679, "title": "ICE: Unexpected panic in libcollections/vec.rs", "user": {"login": "Robbepop", "id": 8193155, "node_id": "MDQ6VXNlcjgxOTMxNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8193155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robbepop", "html_url": "https://github.com/Robbepop", "followers_url": "https://api.github.com/users/Robbepop/followers", "following_url": "https://api.github.com/users/Robbepop/following{/other_user}", "gists_url": "https://api.github.com/users/Robbepop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robbepop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robbepop/subscriptions", "organizations_url": "https://api.github.com/users/Robbepop/orgs", "repos_url": "https://api.github.com/users/Robbepop/repos", "events_url": "https://api.github.com/users/Robbepop/events{/privacy}", "received_events_url": "https://api.github.com/users/Robbepop/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-15T16:04:23Z", "updated_at": "2017-06-18T19:45:49Z", "closed_at": "2017-06-18T19:45:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was editing the following code when the bug appeared:\r\n\r\n```rust\r\nfn transform_bvult(&mut self, mut ult: Lt) -> Expr {\r\n\tself.transform_assign(&mut ult.left);\r\n\tself.transform_assign(&mut ult.right);\r\n\r\n\t// Symbolic contradiction: `(< x x)` to `false`\r\n\tif ult.left == ult.right {\r\n\t\treturn Expr::boolconst(false)\r\n\t}\r\n\r\n\tmatch (ult.left, ult.right) {\r\n\r\n\t\t// - `(< x (-y))` to `(< y x)`\r\n\t\t(left, box Expr::Neg(right)) => {\r\n\t\t\tExpr::bvult(left.ty(), right.inner, left)\r\n\t\t}\r\n\r\n\t\t// - `(< (-x) y)` to `(< y x)`\r\n\t\t(box Expr::Neg(left), right) => {\r\n\t\t\tExpr::bvult(left.ty(), right, left.inner)\r\n\r\n\t\t}\r\n\r\n\t\t// - `(< (-x) (-y))` to `(< x y)`\r\n\t\t(box Expr::Neg(left), box Expr::Neg(right)) => {\r\n\t\t\tExpr::bvult(left.ty(), left.inner, right.inner)\r\n\t\t}\r\n\r\n\t\t// Constant evaluation\r\n\t\t// (Expr::BitVecConst(left), Expr::BitVecConst(right)) => {\r\n\t\t\t// TODO: `x < y where x < y and x,y consteval => true`\r\n\t\t\t// TODO: `x < y where not(x < y) and x,y consteval => false`\r\n\t\t// }\r\n\r\n\t\t// Do nothing since no simplification pattern matches\r\n\t\t_ => {\r\n\t\t\tult.into_expr()\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nApparently swapping \r\n\r\n```rust\r\n// - `(< (-x) (-y))` to `(< x y)`\r\n(box Expr::Neg(left), box Expr::Neg(right)) => {\r\n\tExpr::bvult(left.ty(), left.inner, right.inner)\r\n}\r\n```\r\n\r\nTo the front of the match expression results in a sane compile error which is equally unfortunate to me since nothing moved in theory when the default case triggers.\r\n\r\n```bash\r\nerror[E0382]: use of partially moved value: `ult`\r\n   --> src/ast/simplifier.rs:413:5\r\n    |\r\n387 | \t\tmatch (ult.left, ult.right) {\r\n    | \t\t       -------- value moved here\r\n...\r\n413 | \t\t\t\tult.into_expr()\r\n    | \t\t  ^^^ value used here after move\r\n    |\r\n    = note: move occurs because `ult.left` has type `std::boxed::Box<ast::variants::Expr>`, which does not implement the `Copy` trait\r\n\r\nerror: aborting due to previous error(s)\r\n```\r\n\r\nOutput with `RUST_BACKTRACE=1`\r\n\r\n```bash\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: run with `RUST_BACKTRACE=1` for a backtrace\r\n\r\nthread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 0', /checkout/src/libcollections/vec.rs:1561\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace\r\n             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::_print\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:71\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:60\r\n             at /checkout/src/libstd/panicking.rs:355\r\n   3: std::panicking::default_hook\r\n             at /checkout/src/libstd/panicking.rs:365\r\n   4: std::panicking::rust_panic_with_hook\r\n             at /checkout/src/libstd/panicking.rs:549\r\n   5: std::panicking::begin_panic\r\n             at /checkout/src/libstd/panicking.rs:511\r\n   6: std::panicking::begin_panic_fmt\r\n             at /checkout/src/libstd/panicking.rs:495\r\n   7: rust_begin_unwind\r\n             at /checkout/src/libstd/panicking.rs:471\r\n   8: core::panicking::panic_fmt\r\n             at /checkout/src/libcore/panicking.rs:69\r\n   9: core::panicking::panic_bounds_check\r\n             at /checkout/src/libcore/panicking.rs:56\r\n  10: rustc_const_eval::_match::specialize\r\n  11: rustc_const_eval::_match::is_useful_specialized\r\n  12: rustc_const_eval::_match::is_useful::{{closure}}\r\n  13: <core::option::Option<T>>::map\r\n  14: rustc_const_eval::_match::is_useful\r\n  15: rustc_const_eval::_match::is_useful_specialized\r\n  16: rustc_const_eval::_match::is_useful::{{closure}}\r\n  17: <core::option::Option<T>>::map\r\n  18: rustc_const_eval::_match::is_useful\r\n  19: rustc_const_eval::_match::is_useful_specialized\r\n  20: rustc_const_eval::_match::is_useful::{{closure}}\r\n  21: <core::option::Option<T>>::map\r\n  22: rustc_const_eval::_match::is_useful\r\n  23: <rustc_const_eval::check_match::MatchVisitor<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_expr\r\n  24: <rustc_const_eval::check_match::MatchVisitor<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_expr\r\n  25: <rustc_const_eval::check_match::OuterVisitor<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_fn\r\n  26: rustc::hir::intravisit::walk_impl_item\r\n  27: rustc_const_eval::check_match::check_crate\r\n  28: rustc_driver::driver::phase_3_run_analysis_passes::{{closure}}\r\n  29: rustc_driver::driver::phase_3_run_analysis_passes\r\n  30: rustc_driver::driver::compile_input\r\n  31: rustc_driver::run_compiler\r\n```\r\n\r\nOutput with `RUST_BACKTRACE=full`\r\n\r\n```\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: run with `RUST_BACKTRACE=1` for a backtrace\r\n\r\nthread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 0', /checkout/src/libcollections/vec.rs:1561\r\nstack backtrace:\r\n   0:     0x7fdc4be1cee3 - std::sys::imp::backtrace::tracing::imp::unwind_backtrace::hf6993ec76a3b39d8\r\n                               at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1:     0x7fdc4be18504 - std::sys_common::backtrace::_print::h3d630ba2218f7ec3\r\n                               at /checkout/src/libstd/sys_common/backtrace.rs:71\r\n   2:     0x7fdc4be2a82a - std::panicking::default_hook::{{closure}}::hd0df6de62c549847\r\n                               at /checkout/src/libstd/sys_common/backtrace.rs:60\r\n                               at /checkout/src/libstd/panicking.rs:355\r\n   3:     0x7fdc4be2a27d - std::panicking::default_hook::h9bbcc81c50b40ea3\r\n                               at /checkout/src/libstd/panicking.rs:365\r\n   4:     0x7fdc4be2ac3b - std::panicking::rust_panic_with_hook::hcb9f41173fe183d3\r\n                               at /checkout/src/libstd/panicking.rs:549\r\n   5:     0x7fdc4be2aac4 - std::panicking::begin_panic::h6af6db04028173d3\r\n                               at /checkout/src/libstd/panicking.rs:511\r\n   6:     0x7fdc4be2aa49 - std::panicking::begin_panic_fmt::h2ea6b56a88fe4f9f\r\n                               at /checkout/src/libstd/panicking.rs:495\r\n   7:     0x7fdc4be2a9d7 - rust_begin_unwind\r\n                               at /checkout/src/libstd/panicking.rs:471\r\n   8:     0x7fdc4be675dd - core::panicking::panic_fmt::h883a028e9f4b4457\r\n                               at /checkout/src/libcore/panicking.rs:69\r\n   9:     0x7fdc4be67588 - core::panicking::panic_bounds_check::hc3c2775988732c0b\r\n                               at /checkout/src/libcore/panicking.rs:56\r\n  10:     0x7fdc4a2b34ad - rustc_const_eval::_match::specialize::hadc7768d150b8c58\r\n  11:     0x7fdc4a2b0be3 - rustc_const_eval::_match::is_useful_specialized::hdb71f059cfe9dea5\r\n  12:     0x7fdc4a2b03fe - rustc_const_eval::_match::is_useful::{{closure}}::ha30ce4b8498e1202\r\n  13:     0x7fdc4a28e88f - <core::option::Option<T>>::map::ha82a0cc47260c3a2\r\n  14:     0x7fdc4a2adb7a - rustc_const_eval::_match::is_useful::h9052c30b8ec0f26e\r\n  15:     0x7fdc4a2b0c34 - rustc_const_eval::_match::is_useful_specialized::hdb71f059cfe9dea5\r\n  16:     0x7fdc4a2b03fe - rustc_const_eval::_match::is_useful::{{closure}}::ha30ce4b8498e1202\r\n  17:     0x7fdc4a28e88f - <core::option::Option<T>>::map::ha82a0cc47260c3a2\r\n  18:     0x7fdc4a2adb7a - rustc_const_eval::_match::is_useful::h9052c30b8ec0f26e\r\n  19:     0x7fdc4a2b0c34 - rustc_const_eval::_match::is_useful_specialized::hdb71f059cfe9dea5\r\n  20:     0x7fdc4a2b03fe - rustc_const_eval::_match::is_useful::{{closure}}::ha30ce4b8498e1202\r\n  21:     0x7fdc4a28e88f - <core::option::Option<T>>::map::ha82a0cc47260c3a2\r\n  22:     0x7fdc4a2adb7a - rustc_const_eval::_match::is_useful::h9052c30b8ec0f26e\r\n  23:     0x7fdc4a2b530d - <rustc_const_eval::check_match::MatchVisitor<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_expr::h6e23fe3a012213fd\r\n  24:     0x7fdc4a2b496b - <rustc_const_eval::check_match::MatchVisitor<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_expr::h6e23fe3a012213fd\r\n  25:     0x7fdc4a2b3ac6 - <rustc_const_eval::check_match::OuterVisitor<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_fn::h6c18c5eb9d1d2370\r\n  26:     0x7fdc4a294ec7 - rustc::hir::intravisit::walk_impl_item::h8d26ab20edc8822c\r\n  27:     0x7fdc4a2b41f7 - rustc_const_eval::check_match::check_crate::h53dfb4d18dc8c3c9\r\n  28:     0x7fdc4c1b96f8 - rustc_driver::driver::phase_3_run_analysis_passes::{{closure}}::h68eccaf0b2f82b34\r\n  29:     0x7fdc4c1ab2ef - rustc_driver::driver::phase_3_run_analysis_passes::hbb243e50bc4b822e\r\n  30:     0x7fdc4c18d610 - rustc_driver::driver::compile_input::h6125b69645e50cce\r\n  31:     0x7fdc4c1d8466 - rustc_driver::run_compiler::hc6d7ae0444eeb671\r\n  32:     0x7fdc4c0fb9ab - std::sys_common::backtrace::__rust_begin_short_backtrace::hf40d79e5a79af0b6\r\n  33:     0x7fdc4be33e8a - __rust_maybe_catch_panic\r\n                               at /checkout/src/libpanic_unwind/lib.rs:98\r\n  34:     0x7fdc4c1209a0 - <F as alloc::boxed::FnBox<A>>::call_box::hd023aca2401e451f\r\n  35:     0x7fdc4be29455 - std::sys::imp::thread::Thread::new::thread_start::h9e7dc9c59c04ba25\r\n                               at /checkout/src/liballoc/boxed.rs:658\r\n                               at /checkout/src/libstd/sys_common/thread.rs:21\r\n                               at /checkout/src/libstd/sys/unix/thread.rs:84\r\n  36:     0x7fdc47355296 - start_thread\r\n  37:     0x7fdc4bae325e - __clone\r\n  38:                0x0 - <unknown>\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42679/timeline", "performed_via_github_app": null, "state_reason": "completed"}