{"url": "https://api.github.com/repos/rust-lang/rust/issues/77887", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/77887/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/77887/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/77887/events", "html_url": "https://github.com/rust-lang/rust/issues/77887", "id": 719828742, "node_id": "MDU6SXNzdWU3MTk4Mjg3NDI=", "number": 77887, "title": "Give a better error message for operator ? conversion with a lifetime mismatch", "user": {"login": "kmdreko", "id": 8539020, "node_id": "MDQ6VXNlcjg1MzkwMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/8539020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmdreko", "html_url": "https://github.com/kmdreko", "followers_url": "https://api.github.com/users/kmdreko/followers", "following_url": "https://api.github.com/users/kmdreko/following{/other_user}", "gists_url": "https://api.github.com/users/kmdreko/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmdreko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmdreko/subscriptions", "organizations_url": "https://api.github.com/users/kmdreko/orgs", "repos_url": "https://api.github.com/users/kmdreko/repos", "events_url": "https://api.github.com/users/kmdreko/events{/privacy}", "received_events_url": "https://api.github.com/users/kmdreko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596122130, "node_id": "MDU6TGFiZWwxNTk2MTIyMTMw", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-papercut", "name": "D-papercut", "color": "c9f7a3", "default": false, "description": "Diagnostic error that needs small tweaks"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-10-13T03:33:25Z", "updated_at": "2020-10-23T00:57:01Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n\r\n```rust\r\nstruct MyError;\r\n\r\nimpl From<&'static str> for MyError {\r\n    fn from(_e: &'static str) -> MyError {\r\n        MyError\r\n    }\r\n}\r\n\r\nfn throws(a: &str) -> Result<&str, &str> {\r\n    Err(a)\r\n}\r\n\r\nfn func() -> Result<(), MyError> {\r\n    let s = String::from(\"test\");\r\n    throws(&*s)?;\r\n    Ok(())\r\n}\r\n```\r\n\r\nResults in the error:\r\n\r\n```\r\nerror[E0597]: `s` does not live long enough\r\n  --> src/main.rs:15:14\r\n   |\r\n15 |     throws(&*s)?;\r\n   |     ---------^-\r\n   |     |        |\r\n   |     |        borrowed value does not live long enough\r\n   |     argument requires that `s` is borrowed for `'static`\r\n16 |     Ok(())\r\n17 | }\r\n   | - `s` dropped here while still borrowed\r\n```\r\n\r\nI would have expected the message to point to the `?` as the source of the error instead of the argument. It seems it only happens when a conversion is needed but the lifetime is the only mismatch, because `impl<E> From<E> for MyError where E: AsRef<[u8]> + 'static` yields the same error.\r\n\r\nSimilar conversion issues (like changing the signature of `func` to `fn func() -> Result<(), &'static str>` or no appropriate conversion) usually point to the `?` as the culprit, like so:\r\n\r\n```\r\nerror[E0515]: cannot return value referencing local variable `s`\r\n  --> src\\main.rs:25:16\r\n   |\r\n25 |     throws(&*s)?;\r\n   |              - ^ returns a value referencing data owned by the current function\r\n   |              |\r\n   |              `s` is borrowed here\r\n```\r\n\r\nThis came up in a [stack overflow post](https://stackoverflow.com/q/64321515/2189130) where it wasn't obvious the problem was coming from the error handling.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/77887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/77887/timeline", "performed_via_github_app": null, "state_reason": null}