{"url": "https://api.github.com/repos/rust-lang/rust/issues/57555", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/57555/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/57555/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/57555/events", "html_url": "https://github.com/rust-lang/rust/issues/57555", "id": 398595195, "node_id": "MDU6SXNzdWUzOTg1OTUxOTU=", "number": 57555, "title": "rustc doesn't detect whether a loop happens once or more than once or never, in obvious cases", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235137, "node_id": "MDU6TGFiZWwyMzUxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lint", "name": "A-lint", "color": "f7e101", "default": false, "description": "Area: Lints (warnings about flaws in source code) such as unused_mut."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-12T21:46:41Z", "updated_at": "2019-01-16T09:47:35Z", "closed_at": "2019-01-16T09:46:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using issue https://github.com/rust-lang/rust/issues/57553 to detect whether `rustc` thinks that a loop happens once or more than once.\r\n\r\nSo far, I see only the following as being detected to happen once, which is true:\r\n```rust\r\nloop {\r\n  //some code here\r\n  break;\r\n}\r\n```\r\n\r\nand I see the following incorrectly detected to happen more than once:\r\n```rust\r\nloop {\r\n   //code here\r\n   if 1==1 { break; }  // loop happens once\r\n}\r\n```\r\n\r\n```rust\r\nfor i in 1..1 { //  loop happens never\r\n  //never-hit code here\r\n}\r\n```\r\n\r\n```rust\r\nfor i in 1..=1 { // loop happens once\r\n   //code here\r\n}\r\n```\r\n\r\n<details>\r\n<summary>\r\n\r\nProof that all of the above is true ([playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3380e372bb89b46be3ba6c21d98aaafc)):\r\n\r\n</summary>\r\n\r\n```rust\r\n#![allow(unused_variables)]\r\n//#![allow(dead_code)]\r\n\r\nstruct NewType(i32);\r\n\r\n\r\n\r\nfn main() {\r\n    \r\n    let mut v:Vec<NewType>=Vec::new();\r\n   \r\n    \r\n    loop {\r\n        println!(\"loop iteration\");//hit once\r\n        let a:NewType;\r\n        change(&mut a); //true: \"borrow of possibly uninitialized variable: `a`\"\r\n        v.push(a);\r\n        break; // due to this break, the loop is detected as happening only once\r\n    }\r\n    \r\n    loop {\r\n        println!(\"loop iteration\");//hit once\r\n        let a:NewType;\r\n        change(&mut a); //false: \"value borrowed here after move\", see https://github.com/rust-lang/rust/issues/57553\r\n        v.push(a);// false: \"value moved here, in previous iteration of loop\"\r\n        if 1==1 { // loop is no longer detected as happening only once due to this 'if'\r\n          break;\r\n        }\r\n    }\r\n    \r\n    for i in 1..1 {\r\n        println!(\"loop iteration\");//never hit\r\n        let a:NewType;\r\n        change(&mut a); //false: \"value borrowed here after move\"\r\n        v.push(a);// false: \"value moved here, in previous iteration of loop\"\r\n        //break; //uncommenting this makes rust think the loop happens only once(even though it happens never) and thus reveals the true error: \"borrow of possibly uninitialized variable: `a`\"\r\n    }\r\n    \r\n    for i in 1..=1 {\r\n        println!(\"loop iteration\");//hit once\r\n        let a:NewType;\r\n        change(&mut a); //false: \"value borrowed here after move\"\r\n        v.push(a);// false: \"value moved here, in previous iteration of loop\"\r\n    }\r\n    \r\n    for i in 1..=2 {\r\n        println!(\"loop iteration\");//hit twice\r\n        let a:NewType;\r\n        change(&mut a); //false: \"value borrowed here after move\"\r\n        v.push(a);// false: \"value moved here, in previous iteration of loop\"\r\n    }\r\n    \r\n    \r\n}\r\n\r\nfn change(i: &mut NewType) {\r\n    //*i=NewType(1);\r\n}\r\n```\r\n\r\n</details>\r\n\r\nSo, what else this means? dead code isn't detected in obvious cases like([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=832db20761501f59902e78df22aee60e)):\r\n\r\n```rust\r\n#![warn(dead_code)]\r\n\r\nfn main() {\r\n    for _ in 1..1 {\r\n        //  loop happens never\r\n        println!(\"never\"); //not detected as dead code\r\n    }\r\n}\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/57555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/57555/timeline", "performed_via_github_app": null, "state_reason": "completed"}