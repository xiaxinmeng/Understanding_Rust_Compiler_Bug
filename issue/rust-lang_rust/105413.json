{"url": "https://api.github.com/repos/rust-lang/rust/issues/105413", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/105413/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/105413/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/105413/events", "html_url": "https://github.com/rust-lang/rust/issues/105413", "id": 1481063433, "node_id": "I_kwDOAAsO6M5YRzwJ", "number": 105413, "title": "`std::backtrace::Backtrace` should filter by `__rust_end_short_backtrace` and `__rust_begin_short_backtrace`", "user": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-12-07T06:10:51Z", "updated_at": "2023-04-27T03:29:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nrustc inserts frames `std::sys_common::backtrace::__rust_end_short_backtrace` and `std::sys_common::backtrace::__rust_begin_short_backtrace` so that the internal backtrace implementation can filter out noise from backtrace capturing.\r\nHowever those are not used when std::backtrace::Backtrace is displayed leading to incredibly verbose backtraces.\r\n\r\nMaybe we could perform this filtering for \"{}\" but provide the unfiltered values for \"{:#}\"?\r\n\r\nI tried this code:\r\n\r\n```rust\r\nfn setup() {\r\n    std::panic::set_hook(Box::new(|panic| {\r\n        println!(\"{}\", std::backtrace::Backtrace::force_capture());\r\n    }));\r\n}\r\n\r\nfn run() {\r\n    panic!(\"OOPS\");\r\n}\r\n\r\nfn main() {\r\n    setup();\r\n    run();\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\n```\r\n   0: rust_begin_unwind\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:584:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/panicking.rs:142:14\r\n   2: foo::run\r\n             at ./src/main.rs:8:5\r\n   3: foo::main\r\n             at ./src/main.rs:13:5\r\n   4: core::ops::function::FnOnce::call_once\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/ops/function.rs:248:5\r\n```\r\n\r\nInstead, this happened:\r\n```\r\n   0: foo::setup::{{closure}}\r\n             at ./src/main.rs:3:24\r\n   1: std::panicking::rust_panic_with_hook\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:702:17\r\n   2: std::panicking::begin_panic_handler::{{closure}}\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:586:13\r\n   3: std::sys_common::backtrace::__rust_end_short_backtrace\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:138:18\r\n   4: rust_begin_unwind\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:584:5\r\n   5: core::panicking::panic_fmt\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/panicking.rs:142:14\r\n   6: foo::run\r\n             at ./src/main.rs:8:5\r\n   7: foo::main\r\n             at ./src/main.rs:13:5\r\n   8: core::ops::function::FnOnce::call_once\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/ops/function.rs:248:5\r\n   9: std::sys_common::backtrace::__rust_begin_short_backtrace\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:122:18\r\n  10: std::rt::lang_start::{{closure}}\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/rt.rs:166:18\r\n  11: core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/ops/function.rs:283:13\r\n  12: std::panicking::try::do_call\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:492:40\r\n  13: std::panicking::try\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:456:19\r\n  14: std::panic::catch_unwind\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panic.rs:137:14\r\n  15: std::rt::lang_start_internal::{{closure}}\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/rt.rs:148:48\r\n  16: std::panicking::try::do_call\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:492:40\r\n  17: std::panicking::try\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:456:19\r\n  18: std::panic::catch_unwind\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panic.rs:137:14\r\n  19: std::rt::lang_start_internal\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/rt.rs:148:20\r\n  20: std::rt::lang_start\r\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/rt.rs:165:17\r\n  21: main\r\n  22: <unknown>\r\n  23: __libc_start_main\r\n  24: _start\r\n             at /build/glibc/src/glibc/csu/../sysdeps/x86_64/start.S:115\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.67.0-nightly (b28d30e1e 2022-12-06)\r\nbinary: rustc\r\ncommit-hash: b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339\r\ncommit-date: 2022-12-06\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.67.0-nightly\r\nLLVM version: 15.0.4\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/105413/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/105413/timeline", "performed_via_github_app": null, "state_reason": null}