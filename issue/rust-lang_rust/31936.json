{"url": "https://api.github.com/repos/rust-lang/rust/issues/31936", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/31936/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/31936/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/31936/events", "html_url": "https://github.com/rust-lang/rust/issues/31936", "id": 136894623, "node_id": "MDU6SXNzdWUxMzY4OTQ2MjM=", "number": 31936, "title": "libstd Mutex can cause POSIX undefined behavior", "user": {"login": "comex", "id": 47517, "node_id": "MDQ6VXNlcjQ3NTE3", "avatar_url": "https://avatars.githubusercontent.com/u/47517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comex", "html_url": "https://github.com/comex", "followers_url": "https://api.github.com/users/comex/followers", "following_url": "https://api.github.com/users/comex/following{/other_user}", "gists_url": "https://api.github.com/users/comex/gists{/gist_id}", "starred_url": "https://api.github.com/users/comex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comex/subscriptions", "organizations_url": "https://api.github.com/users/comex/orgs", "repos_url": "https://api.github.com/users/comex/repos", "events_url": "https://api.github.com/users/comex/events{/privacy}", "received_events_url": "https://api.github.com/users/comex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-02-27T08:02:27Z", "updated_at": "2016-03-02T08:40:47Z", "closed_at": "2016-03-02T08:40:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not sure if anything needs to be done about this, since I don't know of any actual implementations having a problem with it, but it occurred to me when thinking about moving mutexes.\n\nOn Unix, `Mutex::new` corresponds to initialization with `PTHREAD_MUTEX_INITIALIZER`; `Mutex::lock`, which returns a `MutexGuard`, corresponds to `pthread_mutex_lock`; `MutexGuard::drop` corresponds to `pthread_mutex_unlock`; and `Mutex::drop` corresponds to `pthread_mutex_destroy`.\n\nIf a `MutexGuard` is forgotten:\n\n``` rust\nuse std::sync::Mutex;\nuse std::mem::forget;\nfn main() {\n    let mutex: Mutex<()> = Mutex::new(());\n    let guard = mutex.lock();\n    forget(guard);\n}\n```\n\n...then we call `pthread_mutex_destroy` without first calling `pthread_mutex_unlock`.  The [POSIX spec](http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_mutex_destroy.html) says:\n\n> It shall be safe to destroy an initialized mutex that is unlocked. Attempting to destroy a locked mutex or a mutex that is referenced (for example, while being used in a pthread_cond_timedwait() or pthread_cond_wait()) by another thread results in undefined behavior.\n", "closed_by": {"login": "comex", "id": 47517, "node_id": "MDQ6VXNlcjQ3NTE3", "avatar_url": "https://avatars.githubusercontent.com/u/47517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comex", "html_url": "https://github.com/comex", "followers_url": "https://api.github.com/users/comex/followers", "following_url": "https://api.github.com/users/comex/following{/other_user}", "gists_url": "https://api.github.com/users/comex/gists{/gist_id}", "starred_url": "https://api.github.com/users/comex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comex/subscriptions", "organizations_url": "https://api.github.com/users/comex/orgs", "repos_url": "https://api.github.com/users/comex/repos", "events_url": "https://api.github.com/users/comex/events{/privacy}", "received_events_url": "https://api.github.com/users/comex/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/31936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/31936/timeline", "performed_via_github_app": null, "state_reason": "completed"}