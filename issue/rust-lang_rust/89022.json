{"url": "https://api.github.com/repos/rust-lang/rust/issues/89022", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/89022/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/89022/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/89022/events", "html_url": "https://github.com/rust-lang/rust/issues/89022", "id": 998533069, "node_id": "I_kwDOAAsO6M47hGfN", "number": 89022, "title": "ICE While Testing generic_const_exprs, adt_const_params, & const_fn_trait_bound features", "user": {"login": "philliard3", "id": 15804078, "node_id": "MDQ6VXNlcjE1ODA0MDc4", "avatar_url": "https://avatars.githubusercontent.com/u/15804078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philliard3", "html_url": "https://github.com/philliard3", "followers_url": "https://api.github.com/users/philliard3/followers", "following_url": "https://api.github.com/users/philliard3/following{/other_user}", "gists_url": "https://api.github.com/users/philliard3/gists{/gist_id}", "starred_url": "https://api.github.com/users/philliard3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philliard3/subscriptions", "organizations_url": "https://api.github.com/users/philliard3/orgs", "repos_url": "https://api.github.com/users/philliard3/repos", "events_url": "https://api.github.com/users/philliard3/events{/privacy}", "received_events_url": "https://api.github.com/users/philliard3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}, {"id": 3313407404, "node_id": "MDU6TGFiZWwzMzEzNDA3NDA0", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-adt_const_params", "name": "F-adt_const_params", "color": "f9c0cc", "default": false, "description": "`#![feature(adt_const_params)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-16T19:00:15Z", "updated_at": "2021-12-11T06:58:24Z", "closed_at": "2021-12-11T06:58:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\nI was testing the limits of Rust's experimental const generics capabilities, and I came across this bug. The bug seems to occur only when remove_key is used.\r\n\r\nI've had trouble minimizing this bug, so for context, I'll explain the program's purpose. The goal is to create a HashMap that has compile-time restrictions on what keys can be inserted. The first part of this program establishes a compile-time-checkable list of keys that can be any value that can be a const generic. In this case I've replaced my \"Key\" type alias with `&'static str` because that's where the error came up, as well as for readability. The second part of the program makes up the definition of the hashmap itself, which relies on the invariant that its \"schema\" contains a specific const-evaluable key in order to insert or remove a value. This also requires being able to build out a schema by adding and removing keys, producing a new type in the process because the types are what track the schema. The third part of the program is a small test for adding and removing keys, and it's when these tests are run that the error occurs.\r\n\r\nThis code compiles and runs if we do not run the test involving removing a key from a map that has already been created. Something about resolving the requirements in that test produces an error in the compiler.\r\n\r\n### Code ([playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=e6686b97436bea6b0c71d59cee03631d))\r\n\r\n```Rust\r\n#![feature(adt_const_params)]\r\n#![feature(generic_const_exprs)]\r\n#![feature(const_fn_trait_bound)]\r\n\r\nuse core::marker::PhantomData;\r\nuse std::collections::HashMap;\r\n\r\n// const-evaluable equality for string slices\r\npub const fn str_eq(lhs: &str, rhs: &str) -> bool {\r\n    let lhs_bytes = lhs.as_bytes();\r\n    let rhs_bytes = rhs.as_bytes();\r\n    let mut i = 0;\r\n    let bytes = if lhs_bytes.len() == rhs_bytes.len() {\r\n        lhs_bytes.len()\r\n    } else {\r\n        return false;\r\n    };\r\n\r\n    while i < bytes {\r\n        if lhs_bytes[i] != rhs_bytes[i] {\r\n            return false;\r\n        }\r\n        i += 1;\r\n    }\r\n    return true;\r\n}\r\n\r\npub trait ContainsKey<const K: &'static str> {}\r\n\r\n// trait used to compare two types that have type-encoded lists of keys (in this cast static strings)\r\npub trait KeySchema {\r\n    const KEYS: &'static [&'static str];\r\n    const SIZE: usize;\r\n}\r\n\r\npub struct KeyNil;\r\nimpl KeySchema for KeyNil {\r\n    const KEYS: &'static [&'static str] = &[];\r\n    const SIZE: usize = 0;\r\n}\r\n\r\npub struct KeyCons<Tail, const KEY_ID: &'static str>\r\nwhere\r\n    Tail: KeySchema,\r\n{\r\n    _tail: PhantomData<Tail>,\r\n}\r\n\r\npub const fn compute_successor_size<T: KeySchema>() -> usize {\r\n    T::SIZE + 1\r\n}\r\n\r\npub const fn construct_successor_array<Tail: KeySchema>(\r\n    successor_key: &'static str,\r\n) -> [&'static str; compute_successor_size::<Tail>()]\r\nwhere\r\n    [&'static str; compute_successor_size::<Tail>()]: Sized,\r\n{\r\n    let mut keys = [\"\"; compute_successor_size::<Tail>()];\r\n    let tail_keys = Tail::KEYS;\r\n    let mut i = 0;\r\n    let old_array_size: usize = compute_successor_size::<Tail>() - 1;\r\n    while i < old_array_size {\r\n        keys[i] = tail_keys[i];\r\n        i += 1;\r\n    }\r\n    keys[old_array_size] = successor_key;\r\n    keys\r\n}\r\n\r\npub const fn is_equivalent_except<const K: &'static str>(\r\n    with_k: &[&'static str],\r\n    without_k: &[&'static str],\r\n) -> bool {\r\n    let mut i = 0;\r\n    while i < with_k.len() {\r\n        if str_eq(with_k[i], K) {\r\n            i += 1;\r\n            continue;\r\n        }\r\n        let mut j = 0;\r\n        let mut match_found = false;\r\n        while j < without_k.len() {\r\n            if str_eq(with_k[i], without_k[j]) {\r\n                match_found = true;\r\n                break;\r\n            }\r\n            j += 1;\r\n        }\r\n        if !match_found {\r\n            return false;\r\n        }\r\n        i += 1;\r\n    }\r\n    return true;\r\n}\r\n\r\n// Outputs a usize in order to make the array invalid by underflowing\r\n// Alternatively this could use const_panic to produce good error messages\r\npub const fn check_valid_subset<S1: KeySchema, S2: KeySchema, const K: &'static str>() -> usize\r\nwhere\r\n    S1: ContainsKey<K>,\r\n{\r\n    let with_k: &[&'static str] = &S1::KEYS;\r\n    let without_k: &[&'static str] = &S2::KEYS;\r\n\r\n    if with_k.len() <= without_k.len() {\r\n        // panic because S1 isn't bigger\r\n        return (with_k.len() - 1) - without_k.len(); // panic using underflow\r\n    }\r\n\r\n    if !is_equivalent_except::<K>(with_k, without_k) {\r\n        // panic because S2 doesn't have the rest of S1's elements\r\n        return (without_k.len() - 1) - with_k.len(); // panic using underflow\r\n    }\r\n\r\n    return 1;\r\n}\r\n\r\npub trait SubsetExcept<Parent: KeySchema, const K: &'static str>: KeySchema\r\nwhere\r\n    [(); Parent::SIZE - Self::SIZE]: Sized,\r\n    Parent: ContainsKey<K>,\r\n{\r\n}\r\n\r\nimpl<Schema, PossibleParent, const K: &'static str> SubsetExcept<PossibleParent, K> for Schema\r\nwhere\r\n    Schema: KeySchema,\r\n    PossibleParent: KeySchema,\r\n    PossibleParent: ContainsKey<K>,\r\n    [(); PossibleParent::SIZE - Schema::SIZE]: Sized,\r\n    [(); check_valid_subset::<PossibleParent, Schema, K>()]: Sized,\r\n{\r\n}\r\n\r\nimpl<Tail, const KEY_ID: &'static str> KeySchema for KeyCons<Tail, KEY_ID>\r\nwhere\r\n    Tail: KeySchema,\r\n    [(); compute_successor_size::<Tail>()]: Sized,\r\n{\r\n    const KEYS: &'static [&'static str] = &construct_successor_array::<Tail>(KEY_ID);\r\n    const SIZE: usize = compute_successor_size::<Tail>();\r\n}\r\n\r\n// thanks to matt1992#5582 on the Rust Programming Language Community Discord for offering this strategy\r\n// a const expression calls a function, which provides a \"proof\" that a given type should always use a given implementation\r\npub trait ContainsKeyHelper<const IS_EQUAL: bool, const K: &'static str> {}\r\n\r\nconst fn contains_key_helper_helper<const KEY_ID: &'static str, const K: &'static str>() -> bool\r\n{\r\n    str_eq(KEY_ID, K)\r\n}\r\nimpl<Tail, const KEY_ID: &'static str, const K: &'static str> ContainsKey<K>\r\n    for KeyCons<Tail, KEY_ID>\r\nwhere\r\n    Tail: KeySchema,\r\n    Self: ContainsKeyHelper<{ contains_key_helper_helper::<KEY_ID, K>() }, K>,\r\n{\r\n}\r\n\r\nimpl<Tail, const KEY_ID: &'static str, const K: &'static str> ContainsKeyHelper<false, K>\r\n    for KeyCons<Tail, KEY_ID>\r\nwhere\r\n    Tail: KeySchema + ContainsKey<K>,\r\n{\r\n}\r\n\r\nimpl<Tail, const KEY_ID: &'static str, const K: &'static str> ContainsKeyHelper<true, K>\r\n    for KeyCons<Tail, KEY_ID>\r\nwhere\r\n    Tail: KeySchema,\r\n{\r\n}\r\n\r\npub struct RestrictedStringMap<S: KeySchema> {\r\n    inner: HashMap<&'static str, Option<String>>,\r\n    // schemas should be 0-sized, but I use a phantom data here just to emphasize that there's no data dependency\r\n    _schema: PhantomData<S>,\r\n}\r\nimpl<S: KeySchema, const K: &'static str> ContainsKey<K> for RestrictedStringMap<S> where\r\n    S: ContainsKey<K>\r\n{\r\n}\r\nimpl<S: KeySchema> RestrictedStringMap<S>\r\nwhere\r\n    [(); compute_successor_size::<S>()]: Sized,\r\n{\r\n    pub fn empty_schema() -> RestrictedStringMap<KeyNil> {\r\n        RestrictedStringMap::<_> {\r\n            inner: HashMap::new(),\r\n            // schemas should be 0-sized, but I use a phantom data here just to emphasize that there's no data dependency\r\n            _schema: PhantomData::<_>,\r\n        }\r\n    }\r\n\r\n    pub fn new() -> Self {\r\n        let mut hm: HashMap<&'static str, Option<String>> = HashMap::new();\r\n\r\n        for k in S::KEYS {\r\n            hm.insert(*k, None);\r\n        }\r\n\r\n        hm.shrink_to_fit();\r\n\r\n        Self {\r\n            inner: hm,\r\n            _schema: PhantomData::<_>,\r\n        }\r\n    }\r\n\r\n    /// Adds a possible &'static str to the HashMap.\r\n    /// This requires consuming the map since our type must change to reflect the new schema.\r\n    pub fn add_key<const K: &'static str>(self) -> RestrictedStringMap<KeyCons<S, K>>\r\n    where\r\n        // Proof asserting that one size larger is still a valid schema\r\n        // this should only be untrue if the number of keys exceeds usize::MAX\r\n        [(); compute_successor_size::<S>()]: Sized,\r\n    {\r\n        let Self { mut inner, .. } = self;\r\n        inner.insert(K, None);\r\n        RestrictedStringMap::<_> {\r\n            inner: inner,\r\n            _schema: PhantomData::<_>,\r\n        }\r\n    }\r\n\r\n    // I don't know of a way to remove the &'static str other than having the user provide their own new schema.\r\n    // This is because I can't use a dependently typed function to construct a return type.\r\n    // That's the only way I can think of to compute what the return type of such a function would look like without user input.\r\n    pub fn remove_key<NewSchema: KeySchema, const K: &'static str>(\r\n        self,\r\n    ) -> RestrictedStringMap<NewSchema>\r\n    where\r\n        Self: ContainsKey<K>,\r\n        S: ContainsKey<K>,\r\n        // the schema that the user provides must be a valid subset of the old schema\r\n        NewSchema: SubsetExcept<S, K>,\r\n        [(); S::SIZE - NewSchema::SIZE]: Sized,\r\n    {\r\n        let Self { mut inner, .. } = self;\r\n        inner.remove(&K);\r\n        RestrictedStringMap::<_> {\r\n            inner: inner,\r\n            _schema: PhantomData::<_>,\r\n        }\r\n    }\r\n}\r\n\r\n#[cfg(test)]\r\nmod static_string_map_tests {\r\n    use super::*;\r\n    #[test]\r\n    fn tests() {\r\n        let map: RestrictedStringMap<KeyNil> = RestrictedStringMap::<KeyNil>::empty_schema();\r\n        let mut map: RestrictedStringMap<KeyCons<KeyCons<KeyNil, \"k1\">, \"k2\">> =\r\n            map.add_key::<\"k1\">().add_key::<\"k2\">();\r\n        let map: RestrictedStringMap<KeyCons<KeyNil, \"k1\">> = map.remove_key::<_, \"k2\">();\r\n    }\r\n}\r\n\r\nfn main() {\r\n    println!(\"Hello, world!\");\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.57.0-nightly (2c7bc5e33 2021-09-15)\r\nbinary: rustc\r\ncommit-hash: 2c7bc5e33c25e29058cbafefe680da8d5e9220e9\r\ncommit-date: 2021-09-15\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.57.0-nightly\r\nLLVM version: 13.0.0\r\n```\r\nThis ICE also appears on the playground.\r\n\r\n### Error output\r\n\r\n```\r\n$ cargo test\r\n   Compiling restricted-hashmap v0.1.0 (<my_drive>\\restricted-hashmap)\r\nwarning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes\r\n --> src\\main.rs:1:12\r\n  |\r\n1 | #![feature(adt_const_params)]\r\n  |            ^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(incomplete_features)]` on by default\r\n  = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\r\n\r\nwarning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\r\n --> src\\main.rs:2:12\r\n  |\r\n2 | #![feature(generic_const_exprs)]\r\n  |            ^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\r\n\r\nwarning: unused variable: `map`\r\n   --> src\\main.rs:256:13\r\n    |\r\n256 |         let map: RestrictedStringMap<KeyCons<KeyNil, \"k1\">> = map.remove_key::<_, \"k2\">();\r\n    |             ^^^ help: if this is intentional, prefix it with an underscore: `_map`\r\n    |\r\n    = note: `#[warn(unused_variables)]` on by default\r\n\r\nthread 'rustc' panicked at 'Unknown variable: 0', compiler\\rustc_ty_utils\\src\\instance.rs:46:17\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.57.0-nightly (2c7bc5e33 2021-09-15) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nthread 'rustc' panicked at 'substs of instance DefId(0:14 ~ restricted_hashmap[71dd]::KeySchema::SIZE) not normalized for codegen: [KeyCons<KeyNil, \"k1\">]', compiler\\rustc_middle\\src\\ty\\instance.rs:286:9\r\nstack backtrace:\r\n   0:     0x7ff959487acf - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h342cfc1ba001a676\r\n   1:     0x7ff9594b25fa - core::fmt::write::h6ee6bf7a74285425\r\n   2:     0x7ff95947acc8 - <std::io::IoSlice as core::fmt::Debug>::fmt::h17b1ea376e0c1040\r\n   3:     0x7ff95948b5b6 - std::panicking::take_hook::h4296061bae338923\r\n   4:     0x7ff95948b0a4 - std::panicking::take_hook::h4296061bae338923\r\n   5:     0x7ff9185cabf5 - <tracing_subscriber::fmt::writer::TestWriter as std::io::Write>::flush::hf3a8e2c91526b5de\r\n   6:     0x7ff95948bec9 - std::panicking::rust_panic_with_hook::ha779c25870ce0d16\r\n   7:     0x7ff95948b96b - rust_begin_unwind\r\n   8:     0x7ff959488417 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h342cfc1ba001a676\r\n   9:     0x7ff95948b8c9 - rust_begin_unwind\r\n  10:     0x7ff9594e843c - std::panicking::begin_panic_fmt::h5143997943c25f25\r\n  11:     0x7ff91ca4ff22 - rustc_middle::ty::instance::Instance::new::h58316db868a53f6e\r\n  12:     0x7ff91bc723a4 - rustc_query_impl::<impl rustc_query_system::query::config::QueryAccessors<rustc_query_impl::plumbing::QueryCtxt> for rustc_query_impl::queries::limits>::hash_result::h20a077ec97750c6d\r\n  13:     0x7ff91bca1f3c - rustc_query_impl::<impl rustc_query_system::query::config::QueryAccessors<rustc_query_impl::plumbing::QueryCtxt> for rustc_query_impl::queries::limits>::hash_result::h20a077ec97750c6d\r\n  14:     0x7ff91bb91cc9 - <rustc_mir_dataflow::move_paths::abs_domain::AbstractType as core::fmt::Debug>::fmt::h8b62500dcb970d5e\r\n  15:     0x7ff91bd46ab4 - rustc_query_impl::Queries::new::h9a4baaccfd058802\r\n  16:     0x7ff91bc4acce - <rustc_mir_dataflow::move_paths::abs_domain::AbstractType as core::fmt::Debug>::fmt::h8b62500dcb970d5e\r\n  17:     0x7ff9187bb677 - rustc_interface::interface::try_print_query_stack::hac1fcf40214f4a7b\r\n  18:     0x7ff9185dba35 - rustc_driver::report_ice::h1f24ef77b729f9ed\r\n  19:     0x7ff95948bec9 - std::panicking::rust_panic_with_hook::ha779c25870ce0d16\r\n  20:     0x7ff95948b96b - rust_begin_unwind\r\n  21:     0x7ff959488417 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h342cfc1ba001a676\r\n  22:     0x7ff95948b8c9 - rust_begin_unwind\r\n  23:     0x7ff9594e843c - std::panicking::begin_panic_fmt::h5143997943c25f25\r\n  24:     0x7ff91b1274e2 - rustc_ty_utils::instance::provide::hc2a45cf611c0a117\r\n  25:     0x7ff91b124012 - rustc_ty_utils::instance::provide::hc2a45cf611c0a117\r\n  26:     0x7ff91be1d80c - rustc_query_impl::on_disk_cache::__ty_decoder_impl::<impl rustc_serialize::serialize::Decoder for rustc_query_impl::on_disk_cache::CacheDecoder>::error::hddf217cc58743922\r\n  27:     0x7ff91bdbd456 - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  28:     0x7ff91bcef672 - rustc_query_impl::profiling_support::alloc_self_profile_query_strings::h32189f35e5eeb88d\r\n  29:     0x7ff91bc112f7 - <rustc_mir_dataflow::move_paths::abs_domain::AbstractType as core::fmt::Debug>::fmt::h8b62500dcb970d5e\r\n  30:     0x7ff91bd4fcb6 - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  31:     0x7ff91ca55702 - rustc_middle::ty::instance::Instance::resolve_opt_const_arg::hd0e45fa8d543603d\r\n  32:     0x7ff91c9b8592 - rustc_middle::mir::interpret::queries::<impl rustc_middle::ty::context::TyCtxt>::const_eval_resolve::h0edf7881a2b9d54d\r\n  33:     0x7ff91c7cc9aa - <rustc_trait_selection::traits::query::normalize::QueryNormalizer as rustc_middle::ty::fold::TypeFolder>::fold_const::hcdecfce3ce2b4efa\r\n  34:     0x7ff91c7ccb70 - <rustc_trait_selection::traits::query::normalize::QueryNormalizer as rustc_middle::ty::fold::TypeFolder>::fold_mir_const::h0ee425c1c312e6a6\r\n  35:     0x7ff91b93e934 - <rustc_middle::ty::consts::Const as rustc_traits::chalk::lowering::LowerInto<chalk_ir::Const<rustc_middle::traits::chalk::RustInterner>>>::lower_into::h0b242d9bfec0ebf7\r\n  36:     0x7ff91b86d452 - rustc_traits::provide::h2832a03d36b09929\r\n  37:     0x7ff91b929ca4 - <rustc_middle::ty::sty::TraitRef as rustc_traits::chalk::lowering::LowerInto<chalk_solve::rust_ir::TraitBound<rustc_middle::traits::chalk::RustInterner>>>::lower_into::ha76f262a6fedabbb\r\n  38:     0x7ff91be23bdc - rustc_query_impl::on_disk_cache::__ty_decoder_impl::<impl rustc_serialize::serialize::Decoder for rustc_query_impl::on_disk_cache::CacheDecoder>::error::hddf217cc58743922\r\n  39:     0x7ff91bd87a0b - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  40:     0x7ff91bcef926 - rustc_query_impl::profiling_support::alloc_self_profile_query_strings::h32189f35e5eeb88d\r\n  41:     0x7ff91bc2c8a8 - <rustc_mir_dataflow::move_paths::abs_domain::AbstractType as core::fmt::Debug>::fmt::h8b62500dcb970d5e\r\n  42:     0x7ff91bd4f4bb - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  43:     0x7ff91b710db0 - <rustc_const_eval::const_eval::machine::MemoryKind as core::fmt::Debug>::fmt::h4cbc226550db7246\r\n  44:     0x7ff91b6ce89e - rustc_const_eval::interpret::eval_context::mir_assign_valid_types::hc90d76d5cb9f7d32\r\n  45:     0x7ff91b72765d - rustc_const_eval::const_eval::eval_queries::eval_to_allocation_raw_provider::h0a00d3cd803ba3c6\r\n  46:     0x7ff91be1cd44 - rustc_query_impl::on_disk_cache::__ty_decoder_impl::<impl rustc_serialize::serialize::Decoder for rustc_query_impl::on_disk_cache::CacheDecoder>::error::hddf217cc58743922\r\n  47:     0x7ff91bd8eb53 - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  48:     0x7ff91bcead16 - rustc_query_impl::profiling_support::alloc_self_profile_query_strings::h32189f35e5eeb88d\r\n  49:     0x7ff91bc1a805 - <rustc_mir_dataflow::move_paths::abs_domain::AbstractType as core::fmt::Debug>::fmt::h8b62500dcb970d5e\r\n  50:     0x7ff91bd4a86d - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  51:     0x7ff91b7240a0 - rustc_const_eval::const_eval::eval_queries::eval_to_const_value_raw_provider::h7c6df3f6760843cf\r\n  52:     0x7ff91be1cd44 - rustc_query_impl::on_disk_cache::__ty_decoder_impl::<impl rustc_serialize::serialize::Decoder for rustc_query_impl::on_disk_cache::CacheDecoder>::error::hddf217cc58743922\r\n  53:     0x7ff91bda63af - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  54:     0x7ff91bcdeab2 - rustc_query_impl::profiling_support::alloc_self_profile_query_strings::h32189f35e5eeb88d\r\n  55:     0x7ff91bbe8eaa - <rustc_mir_dataflow::move_paths::abs_domain::AbstractType as core::fmt::Debug>::fmt::h8b62500dcb970d5e\r\n  56:     0x7ff91bd4a8dd - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  57:     0x7ff91c98ab48 - rustc_middle::mir::interpret::queries::<impl rustc_middle::ty::context::TyCtxt>::const_eval_global_id::h5500487045595d12\r\n  58:     0x7ff91c9b85f2 - rustc_middle::mir::interpret::queries::<impl rustc_middle::ty::context::TyCtxt>::const_eval_resolve::h0edf7881a2b9d54d\r\n  59:     0x7ff91c86391a - rustc_infer::infer::InferCtxt::const_eval_resolve::h63a215128af233cc\r\n  60:     0x7ff91c7b7ae7 - rustc_trait_selection::traits::const_evaluatable::is_const_evaluatable::h720b6cf39a3297b2\r\n  61:     0x7ff91c725184 - rustc_trait_selection::traits::fulfill::FulfillProcessor::progress_changed_obligations::hc375055e042d6808\r\n  62:     0x7ff91c76a3e8 - <rustc_trait_selection::traits::specialize::OverlapError as core::fmt::Debug>::fmt::hc009c74dcab86291\r\n  63:     0x7ff91c723fbc - rustc_trait_selection::traits::fulfill::FulfillmentContext::new_ignoring_regions::h984cc50c29e431a4\r\n  64:     0x7ff91c7247b8 - <rustc_trait_selection::traits::fulfill::FulfillmentContext as rustc_infer::traits::engine::TraitEngine>::select_where_possible::h8ffd7290e30f369c\r\n  65:     0x7ff91b86ee9e - rustc_traits::provide::h2832a03d36b09929\r\n  66:     0x7ff91b86a598 - rustc_traits::provide::h2832a03d36b09929\r\n  67:     0x7ff91b8a180a - <rustc_middle::traits::chalk::ChalkEnvironmentAndGoal as rustc_traits::chalk::lowering::LowerInto<chalk_ir::InEnvironment<chalk_ir::Goal<rustc_middle::traits::chalk::RustInterner>>>>::lower_into::hc427bae7a5efc8d2\r\n  68:     0x7ff91be24244 - rustc_query_impl::on_disk_cache::__ty_decoder_impl::<impl rustc_serialize::serialize::Decoder for rustc_query_impl::on_disk_cache::CacheDecoder>::error::hddf217cc58743922\r\n  69:     0x7ff91bdacbdf - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  70:     0x7ff91bce9ac5 - rustc_query_impl::profiling_support::alloc_self_profile_query_strings::h32189f35e5eeb88d\r\n  71:     0x7ff91bc01bec - <rustc_mir_dataflow::move_paths::abs_domain::AbstractType as core::fmt::Debug>::fmt::h8b62500dcb970d5e\r\n  72:     0x7ff91bd4f669 - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  73:     0x7ff91c7bbdd7 - rustc_trait_selection::traits::query::type_op::ascribe_user_type::<impl rustc_trait_selection::traits::query::type_op::QueryTypeOp \r\nfor rustc_middle::traits::query::type_op::AscribeUserType>::perform_query::haf266b700d91b6ae\r\n  74:     0x7ff91b5b8d23 - <rustc_borrowck::constraints::graph::Reverse as core::fmt::Debug>::fmt::h154f94f1ab49d905\r\n  75:     0x7ff91b63d767 - <rustc_borrowck::InitializationRequiringAction as core::fmt::Debug>::fmt::h7470bc523eb27e9d\r\n  76:     0x7ff91b69b6db - <rustc_borrowck::location::RichLocation as core::fmt::Debug>::fmt::h9ad304d0418581a2\r\n  77:     0x7ff91b69f36b - <rustc_borrowck::location::RichLocation as core::fmt::Debug>::fmt::h9ad304d0418581a2\r\n  78:     0x7ff91b5ce815 - <rustc_borrowck::dataflow::BorrowIndex as rustc_mir_dataflow::framework::fmt::DebugWithContext<rustc_borrowck::dataflow::Borrows>>::fmt_with::he5c9f5dbd2c564b8\r\n  79:     0x7ff91b62e1cc - rustc_borrowck::provide::hdfb9892d24be5102\r\n  80:     0x7ff91b59eda0 - <rustc_borrowck::constraints::graph::Reverse as core::fmt::Debug>::fmt::h154f94f1ab49d905\r\n  81:     0x7ff91b62cd79 - rustc_borrowck::provide::hdfb9892d24be5102\r\n  82:     0x7ff91b5f874b - <rustc_borrowck::diagnostics::region_errors::ErrorConstraintInfo as core::fmt::Debug>::fmt::h222413fcafe75f3d\r\n  83:     0x7ff91be1ba66 - rustc_query_impl::on_disk_cache::__ty_decoder_impl::<impl rustc_serialize::serialize::Decoder for rustc_query_impl::on_disk_cache::CacheDecoder>::error::hddf217cc58743922\r\n  84:     0x7ff91bd82f8c - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  85:     0x7ff91bcd1621 - rustc_query_impl::profiling_support::alloc_self_profile_query_strings::h32189f35e5eeb88d\r\n  86:     0x7ff91bb0bee3 - <rustc_mir_dataflow::move_paths::abs_domain::AbstractType as core::fmt::Debug>::fmt::h8b62500dcb970d5e\r\n  87:     0x7ff91bd4a46d - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  88:     0x7ff91870321b - <rls_span::OneIndexed as core::fmt::Debug>::fmt::hf0520c7788563bf2\r\n  89:     0x7ff91870c4ba - rustc_interface::passes::analysis::h83cea03508abe5ea\r\n  90:     0x7ff91be19ccb - rustc_query_impl::on_disk_cache::__ty_decoder_impl::<impl rustc_serialize::serialize::Decoder for rustc_query_impl::on_disk_cache::CacheDecoder>::error::hddf217cc58743922\r\n  91:     0x7ff91bd80a5b - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  92:     0x7ff91bce3462 - rustc_query_impl::profiling_support::alloc_self_profile_query_strings::h32189f35e5eeb88d\r\n  93:     0x7ff91bb2e5b6 - <rustc_mir_dataflow::move_paths::abs_domain::AbstractType as core::fmt::Debug>::fmt::h8b62500dcb970d5e\r\n  94:     0x7ff91bd47438 - <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::try_mark_green::hc1a377735056b620\r\n  95:     0x7ff918621aeb - <regex_syntax::hir::literal::Literal as core::convert::AsRef<[u8]>>::as_ref::hef8a3a16126ef78f\r\n  96:     0x7ff9185e9ec5 - rustc_driver::pretty::print_after_hir_lowering::h4697bd9116993fd8\r\n  97:     0x7ff918623387 - <regex_syntax::hir::literal::Literal as core::convert::AsRef<[u8]>>::as_ref::hef8a3a16126ef78f\r\n  98:     0x7ff9185ee670 - <tracing_subscriber::util::TryInitError as core::fmt::Display>::fmt::h05e1aa411f5833f8\r\n  99:     0x7ff9185ea728 - rustc_driver::pretty::print_after_hir_lowering::h4697bd9116993fd8\r\n 100:     0x7ff9185defdd - <rustc_driver::Compilation as core::fmt::Debug>::fmt::hd354aca17f5d886d\r\n 101:     0x7ff95949a1ac - std::sys::windows::thread::Thread::new::hd7c7d6731c34176f\r\n 102:     0x7ff9ae997034 - BaseThreadInitThunk\r\n 103:     0x7ff9afb42651 - RtlUserThreadStart\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.57.0-nightly (2c7bc5e33 2021-09-15) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nthread panicked while panicking. aborting.\r\nwarning: `restricted-hashmap` (bin \"restricted-hashmap\" test) generated 3 warnings\r\nerror: could not compile `restricted-hashmap`; 3 warnings emitted\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name restricted_hashmap --edition=2018 'src\\main.rs' --error-format=json --json=diagnostic-rendered-ansi --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --test -C metadata=e74c30747549fc79 -C extra-filename=-e74c30747549fc79 --out-dir '<my_drive>\\restricted-hashmap\\target\\debug\\deps' -C 'incremental=<my_drive>\\restricted-hashmap\\target\\debug\\incremental' -L 'dependency=<my_drive>\\restricted-hashmap\\target\\debug\\deps'` (exit code: 0xc000001d, STATUS_ILLEGAL_INSTRUCTION) \r\n```\r\n\r\n### Different ICE upon minimalization ([playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=2d554f0496ead53fd7cd05b3be54b286)) (the error appears differently on the playground than on my local machine)\r\n\r\nWhile attempting to minimize this example, I came across a different ICE when I removed the `new` function (since it was not used in the test) and made the `contains_key_helper_helper` function public. (For context, this function was just made to handle complaints that certain const expressions were too complex). The definitions for this ICE look like this:\r\n\r\n```rust\r\npub const fn contains_key_helper_helper<const KEY_ID: &'static str, const K: &'static str>() -> bool {\r\n    str_eq(KEY_ID, K)\r\n}\r\n\r\nimpl<S: KeySchema> RestrictedStringMap<S>\r\nwhere\r\n    [(); compute_successor_size::<S>()]: Sized,\r\n{\r\n    pub fn empty_schema() -> RestrictedStringMap<KeyNil> {\r\n        RestrictedStringMap::<_> {\r\n            inner: HashMap::new(),\r\n            // schemas should be 0-sized, but I use a phantom data here just to emphasize that there's no data dependency\r\n            _schema: PhantomData::<_>,\r\n        }\r\n    }\r\n\r\n    /// Adds a possible &'static str to the HashMap.\r\n    /// This requires consuming the map since our type must change to reflect the new schema.\r\n    pub fn add_key<const K: &'static str>(self) -> RestrictedStringMap<KeyCons<S, K>>\r\n    where\r\n        // Proof asserting that one size larger is still a valid schema\r\n        // this should only be untrue if the number of keys exceeds usize::MAX\r\n        [(); compute_successor_size::<S>()]: Sized,\r\n    {\r\n        let Self { mut inner, .. } = self;\r\n        inner.insert(K, None);\r\n        RestrictedStringMap::<_> {\r\n            inner: inner,\r\n            _schema: PhantomData::<_>,\r\n        }\r\n    }\r\n\r\n    // I don't know of a way to remove the &'static str other than having the user provide their own new schema.\r\n    // This is because I can't use a dependently typed function to construct a return type.\r\n    // That's the only way I can think of to compute what the return type of such a function would look like without user input.\r\n    pub fn remove_key<NewSchema: KeySchema, const K: &'static str>(\r\n        self,\r\n    ) -> RestrictedStringMap<NewSchema>\r\n    where\r\n        Self: ContainsKey<K>,\r\n        S: ContainsKey<K>,\r\n        // the schema that the user provides must be a valid subset of the old schema\r\n        NewSchema: SubsetExcept<S, K>,\r\n        [(); S::SIZE - NewSchema::SIZE]: Sized,\r\n    {\r\n        let Self { mut inner, .. } = self;\r\n        inner.remove(&K);\r\n        RestrictedStringMap::<_> {\r\n            inner: inner,\r\n            _schema: PhantomData::<_>,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe error message looks like this on my computer (but is different on the Playground):\r\nThe error on my computer appears to be from the same place as #88975 \r\n\r\n```\r\n$ cargo test RUST_BACKTRACE=1\r\n   Compiling restricted-hashmap v0.1.0 (<my_drive>\\restricted-hashmap)\r\nwarning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes\r\n --> src\\main.rs:1:12\r\n  |\r\n1 | #![feature(adt_const_params)]\r\n  |            ^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(incomplete_features)]` on by default\r\n  = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\r\n\r\nwarning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\r\n --> src\\main.rs:2:12\r\n  |\r\n2 | #![feature(generic_const_exprs)]\r\n  |            ^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\r\n\r\nthread 'rustc' panicked at 'attempted to read from stolen value', /rustc/2c7bc5e33c25e29058cbafefe680da8d5e9220e9\\compiler\\rustc_data_structures\\src\\steal.rs:37:21\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.57.0-nightly (2c7bc5e33 2021-09-15) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [thir_abstract_const_of_const_arg] building an abstract representation for the const argument <impl at src\\main.rs:154:1: 160:2>::{constant#0}\r\n#1 [thir_abstract_const] building an abstract representation for <impl at src\\main.rs:154:1: 160:2>::{constant#0}\r\nend of query stack\r\nwarning: `restricted-hashmap` (bin \"restricted-hashmap\" test) generated 2 warnings\r\nerror: could not compile `restricted-hashmap`; 2 warnings emitted\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/89022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/89022/timeline", "performed_via_github_app": null, "state_reason": "completed"}