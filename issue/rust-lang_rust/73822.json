{"url": "https://api.github.com/repos/rust-lang/rust/issues/73822", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73822/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73822/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73822/events", "html_url": "https://github.com/rust-lang/rust/issues/73822", "id": 646804337, "node_id": "MDU6SXNzdWU2NDY4MDQzMzc=", "number": 73822, "title": "Errors from trait incompatability for cfg(test) vs. non-cfg(test) very confusing", "user": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-28T01:03:59Z", "updated_at": "2020-07-05T21:23:36Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If there's a set of interconnected crates, it can be useful to have a crate take a `[dev-dependency]` on something that depends on the crate.\r\n\r\nWell, it seems useful. But it's very easy to get into a situation where you're using versions of structs or traits compiled with the \"regular\" crate and are trying to use them in the \"tested\" crate.\r\n\r\nHere's an example:\r\n\r\nRun\r\n\r\n```\r\ncargo new cratea\r\ncargo new crateb\r\n```\r\n\r\nThen edit:\r\n\r\n`cratea/Cargo.toml`:\r\n\r\n```toml\r\n[package]\r\nname = \"cratea\"\r\nversion = \"0.1.0\"\r\nauthors = [\"David Ross <daboross@daboross.net>\"]\r\nedition = \"2018\"\r\n\r\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\r\n\r\n[dev-dependencies.crateb]\r\npath = \"../crateb\"\r\n```\r\n\r\n`crateb/Cargo.toml`:\r\n\r\n```toml\r\n\r\n[package]\r\nname = \"crateb\"\r\nversion = \"0.1.0\"\r\nauthors = [\"David Ross <daboross@daboross.net>\"]\r\nedition = \"2018\"\r\n\r\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\r\n\r\n[dependencies.cratea]\r\npath = \"../cratea\"\r\n```\r\n\r\n`cratea/src/lib.rs`:\r\n\r\n```rust\r\npub struct Foo;\r\npub trait Bar {}\r\npub fn takes_foo(v: Foo) {}\r\npub fn takes_bar(v: impl Bar) {}\r\n\r\n#[cfg(test)]\r\nmod test {\r\n    use super::*;\r\n\r\n    #[test]\r\n    fn foo_works() {\r\n        takes_foo(crateb::gives_foo());\r\n    }\r\n    #[test]\r\n    fn bar_works() {\r\n        takes_bar(crateb::gives_bar());\r\n    }\r\n}\r\n```\r\n\r\n`crateb/lib.rs`:\r\n\r\n```rust\r\nuse cratea::{Foo, Bar};\r\n\r\npub struct BarImpl;\r\nimpl Bar for BarImpl {}\r\n\r\npub fn gives_foo() -> Foo {\r\n    Foo\r\n}\r\npub fn gives_bar() -> BarImpl {\r\n    BarImpl\r\n}\r\n```\r\n\r\nFinally, run `cargo test` in `cratea`. It gives the wonderfully confusing error mesage:\r\n\r\n```rust\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:12:19\r\n   |\r\n12 |         takes_foo(crateb::gives_foo());\r\n   |                   ^^^^^^^^^^^^^^^^^^^ expected struct `Foo`, found struct `cratea::Foo`\r\n\r\nerror[E0277]: the trait bound `crateb::BarImpl: Bar` is not satisfied\r\n  --> src/lib.rs:16:19\r\n   |\r\n4  | pub fn takes_bar(v: impl Bar) {}\r\n   |                          --- required by this bound in `takes_bar`\r\n...\r\n16 |         takes_bar(crateb::gives_bar());\r\n   |                   ^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `crateb::BarImpl`\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nSome errors have detailed explanations: E0277, E0308.\r\nFor more information about an error, try `rustc --explain E0277`.\r\nerror: could not compile `cratea`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n<p><details>\r\n\r\n<summary>`rustc --version --verbose`</summary>\r\n\r\n```\r\nrustc 1.46.0-nightly (7750c3d46 2020-06-26)\r\nbinary: rustc\r\ncommit-hash: 7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772\r\ncommit-date: 2020-06-26\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.46.0-nightly\r\nLLVM version: 10.0\r\n```\r\n</details></p>\r\n\r\nI ran into the trait case, which I think is arguably more confusing, as it doesn't immediately suggest that there are duplicate things involved (it's just missing an impl!).\r\n\r\nIf I recall correctly, there are already some custom error messages for a similar situation where you're using a struct from two different versions of the same crate. It'd be super helpful if the same or a similar better error was adapted to apply to this situation as well.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73822/timeline", "performed_via_github_app": null, "state_reason": null}