{"url": "https://api.github.com/repos/rust-lang/rust/issues/26308", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/26308/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/26308/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/26308/events", "html_url": "https://github.com/rust-lang/rust/issues/26308", "id": 88332317, "node_id": "MDU6SXNzdWU4ODMzMjMxNw==", "number": 26308, "title": "\"`vin` does not live long enough\" (bad lifetime inference?)", "user": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-06-15T06:21:20Z", "updated_at": "2015-06-30T21:37:19Z", "closed_at": "2015-06-30T21:37:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Testcase (sorry it's a little on the long side):\n\n``` rust\nstruct ChunkIter<T: Iterator>{\n    iter : T,\n    saved_item : Option<T::Item>,\n    cur_chunk_left : usize\n}\n\nstruct Chunks<T: Iterator> {\n    chunk_size : usize,\n    chunk_iter : ChunkIter<T>\n}\n\nimpl<T: Iterator> Chunks<T> {\n    fn new(iter: T, chunk_size: usize) -> Chunks<T>\n    {\n        Chunks { chunk_size: chunk_size, chunk_iter: ChunkIter { iter: iter, saved_item: None, cur_chunk_left: 0 } }\n    }\n}\n\nstruct Map<T:Iterator, F> {\n    iter: Chunks<T>,\n    f: F\n}\n\nimpl<T:Iterator, F, B> Iterator for Map<T, F> where F: FnMut(&mut ChunkIter<T>) -> B {\n    type Item = B;\n    fn next(&mut self) -> Option<B> {\n        let x = (&mut self.iter).next();\n        match x {\n            None => None,\n            Some(x) => Some((self.f)(x))\n        }\n    }\n}\n\nimpl<T:Iterator> Chunks<T>\n{\n    fn next(&mut self) -> Option<&mut ChunkIter<T>> {\n        while self.chunk_iter.cur_chunk_left > 0\n        {\n            <Iterator<Item=T::Item>>::next(&mut self.chunk_iter);\n        }\n        assert!(self.chunk_iter.saved_item.is_none());\n\n        match self.chunk_iter.iter.next() {\n            None => None,\n            Some(item) => {\n                self.chunk_iter.saved_item = Some(item);\n                self.chunk_iter.cur_chunk_left = self.chunk_size;\n                Some(&mut self.chunk_iter)\n            }\n        }\n    }\n    fn map<B, F>(self, f: F) -> Map<T, F> where F: FnMut(&mut ChunkIter<T>) -> B\n    {\n        Map{iter: self, f: f}\n    }\n}\n\nimpl<T:Iterator> Iterator for ChunkIter<T>\n{\n    type Item = T::Item;\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.cur_chunk_left == 0 { return None; }\n        self.cur_chunk_left -= 1;\n        if let Some(saved) = self.saved_item.take() {\n            Some(saved)\n        } else {\n            self.iter.next()\n        }\n    }\n}\n\nfn main() {\n    let vin = (0..10).collect::<Vec<i32>>();\n    let input = vin.iter();\n    let c = Chunks::new(input, 2);\n    let v : Vec<i32> = c.map(|i/*:&mut ChunkIter<std::slice::Iter<_>>*/| {\n        i.fold(0, |a,b|a+b)\n    }).collect();\n    println!(\"{:?}\", v);\n}\n```\n\nCurrently gives:\n\n```\n<anon>:75:17: 75:20 error: `vin` does not live long enough\n<anon>:75     let input = vin.iter();\n                          ^~~\nnote: reference must be valid for the static lifetime...\n<anon>:74:45: 81:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 74:44\n<anon>:74     let vin = (0..10).collect::<Vec<i32>>();\n<anon>:75     let input = vin.iter();\n<anon>:76     let c = Chunks::new(input, 2);\n<anon>:77     let v : Vec<i32> = c.map(|i/*:&mut ChunkIter<std::slice::Iter<_>>*/| {\n<anon>:78         i.fold(0, |a,b|a+b)\n<anon>:79     }).collect();\n          ...\nerror: aborting due to previous error\n```\n\nIf you uncomment the type annotation on line 77, the testcase compiles and successfully prints `[1, 5, 9, 13, 17]`.  It doesn't seem like the annotation should be necessary, though.\n", "closed_by": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/26308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/26308/timeline", "performed_via_github_app": null, "state_reason": "completed"}