{"url": "https://api.github.com/repos/rust-lang/rust/issues/46682", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46682/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46682/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46682/events", "html_url": "https://github.com/rust-lang/rust/issues/46682", "id": 281345917, "node_id": "MDU6SXNzdWUyODEzNDU5MTc=", "number": 46682, "title": "Into::into possibly unsound for SIMD", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100522, "node_id": "MDU6TGFiZWwxMDA1MjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-crash", "name": "I-crash", "color": "e10c02", "default": false, "description": "Issue: The compiler crashes (SIGSEGV, SIGABRT, etc). Use I-ICE instead when the compiler panics."}, {"id": 631737389, "node_id": "MDU6TGFiZWw2MzE3MzczODk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-simd", "name": "A-simd", "color": "f7e101", "default": false, "description": "Area: SIMD (Single Instruction Multiple Data)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-12-12T11:15:01Z", "updated_at": "2017-12-18T12:22:02Z", "closed_at": "2017-12-16T16:23:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See: https://github.com/rust-lang-nursery/stdsimd/pull/233\r\n\r\nBasically SIMD code in the wild prefers to use the more convenient `.into()` over `_::from(x)` everywhere (e.g. see [gimli](https://github.com/quininer/gimli/blob/5f512d1cbb5c38a915ee8758be436754f3f19be3/gimli-permutation/src/sse.rs#L30)) to convert between the different SIMD types.\r\n\r\nThe problem is that while:\r\n\r\n```rust\r\n#[target_feature = \"+avx\"]\r\nunsafe fn from_passes() {\r\n    let a = i64x4::new(\r\n        4611686019492741120, 4647714816524288000,\r\n        4665729215040061440, 4683743613553737728\r\n    );\r\n    let e = f32x8::new(1., 2., 3., 4., 5., 6., 7., 8.);\r\n    // this always works:\r\n    let r = _mm256_castsi256_ps(__m256i::from(a));\r\n    assert_eq!(e, r);\r\n}\r\n\r\nfn main() {\r\n    if !cfg_feature_enabled(\"avx\") { return; }\r\n    unsafe { from_passes() }\r\n}\r\n```\r\n\r\nalways works, replacing that `__m256i::from(a)` with `a.into()` segfaults on some targets (e.g. `i586-unknown-linux-gnu`):\r\n\r\n```rust\r\n#[target_feature = \"+avx\"]\r\nunsafe fn into_fails() {\r\n    let a = i64x4::new(\r\n        4611686019492741120, 4647714816524288000,\r\n        4665729215040061440, 4683743613553737728\r\n    );\r\n    let e = f32x8::new(1., 2., 3., 4., 5., 6., 7., 8.);\r\n    // this segfaults on some targets:\r\n    let r = _mm256_castsi256_ps(a.into());\r\n    assert_eq!(e, r);\r\n}\r\n\r\nfn main() {\r\n    if !cfg_feature_enabled(\"avx\") { return; }\r\n    unsafe { into_fails() }\r\n}\r\n```\r\n\r\nThe only difference between `From::from` and `Into::into` seems to be that the implementations of `From::from` for the SIMD types are `#[inline(always)]` while the default implementation of `Into::into` is \"just\" `#[inline]`.\r\n\r\nIt is unclear to me whether this \"segfaulting\" is reliable or just a symptom of unsoudness / undefined behavior. Some SIMD intrinsics rely on inlining for good codegen, but until now the consequences of bad codegen were only degraded performance as opposed to different program semantics or undefined behavior.\r\n\r\nWhile LTO / ThinLTO might help here, we probably don't want to introduce unsoundness in the binaries of those users that don't want to/can use any of these.", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46682/timeline", "performed_via_github_app": null, "state_reason": "completed"}