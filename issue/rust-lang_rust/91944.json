{"url": "https://api.github.com/repos/rust-lang/rust/issues/91944", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/91944/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/91944/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/91944/events", "html_url": "https://github.com/rust-lang/rust/issues/91944", "id": 1080417188, "node_id": "I_kwDOAAsO6M5AZduk", "number": 91944, "title": "runtime panic: 'entered unreachable code' with iter::Zip + iter::Rev over a custom DoubleEndedIterator", "user": {"login": "abreis", "id": 95046, "node_id": "MDQ6VXNlcjk1MDQ2", "avatar_url": "https://avatars.githubusercontent.com/u/95046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abreis", "html_url": "https://github.com/abreis", "followers_url": "https://api.github.com/users/abreis/followers", "following_url": "https://api.github.com/users/abreis/following{/other_user}", "gists_url": "https://api.github.com/users/abreis/gists{/gist_id}", "starred_url": "https://api.github.com/users/abreis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abreis/subscriptions", "organizations_url": "https://api.github.com/users/abreis/orgs", "repos_url": "https://api.github.com/users/abreis/repos", "events_url": "https://api.github.com/users/abreis/events{/privacy}", "received_events_url": "https://api.github.com/users/abreis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-12-15T00:09:40Z", "updated_at": "2021-12-15T01:25:24Z", "closed_at": "2021-12-15T01:25:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a custom `DoubleEndedIterator` that, when zipped to a plain slice iterator and reversed, triggers an `unreachable!()` in `iter::Zip::next_back()`.\r\n\r\n[Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=948145410c89b55f6a271b95e76155a2)\r\n\r\nOn its own, the custom iterator reports the right `len` (and the default `size_hint` of `(0, None)`), and seems to work correctly. When zipped to a slice iterator _but not reversed_ it also works well.\r\n\r\n\r\n### Code\r\n\r\n```Rust\r\nfn main() {\r\n    let data = [1.0, 2.0];\r\n    let slice = &data[0..2];\r\n\r\n    let slice_iter = slice.iter();\r\n    let custom_iter = CustomSliceIterator::new(slice);\r\n\r\n    for (_, _) in slice_iter.zip(custom_iter).rev() {} // panics\r\n}\r\n\r\nstruct CustomSliceIterator<'s> {\r\n    slice: &'s [f64],\r\n\r\n    // The next row to access when walking forward.\r\n    next_row: usize,\r\n    // The next row to access when walking in reverse.\r\n    next_back_row: isize,\r\n}\r\n\r\nimpl<'s> CustomSliceIterator<'s> {\r\n    pub fn new(slice: &'s [f64]) -> Self {\r\n        Self {\r\n            slice,\r\n            next_row: 0,\r\n            next_back_row: (slice.len() as isize - 1),\r\n        }\r\n    }\r\n}\r\n\r\nimpl<'s> Iterator for CustomSliceIterator<'s> {\r\n    type Item = f64;\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        // Can't go over the slice's end, or a possible reverse iteration.\r\n        if (self.next_row < self.slice.len()) && (self.next_row as isize <= self.next_back_row) {\r\n            let value = self.slice[self.next_row];\r\n            self.next_row += 1;\r\n            Some(value)\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n}\r\n\r\nimpl<'s> DoubleEndedIterator for CustomSliceIterator<'s> {\r\n    fn next_back(&mut self) -> Option<Self::Item> {\r\n        // Can't go over the slice's start, or a possible forward iteration.\r\n        if (self.next_back_row >= 0) && (self.next_back_row >= self.next_row as isize) {\r\n            let value = self.slice[self.next_back_row as usize];\r\n            self.next_back_row -= 1;\r\n            Some(value)\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n}\r\n\r\nimpl<'s> ExactSizeIterator for CustomSliceIterator<'s> {\r\n    fn len(&self) -> usize {\r\n        self.slice.len()\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.57.0 (f1edd0429 2021-11-29)\r\nbinary: rustc\r\ncommit-hash: f1edd0429582dd29cccacaf50fd134b05593bd9c\r\ncommit-date: 2021-11-29\r\nhost: x86_64-apple-darwin\r\nrelease: 1.57.0\r\nLLVM version: 13.0.0\r\n```\r\n(also occurs in 2021-12-13 nightly)\r\n\r\n### Error output\r\n\r\n```\r\nthread 'main' panicked at 'internal error: entered unreachable code', /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/iter/adapters/zip.rs:200:5\r\n```\r\n\r\n\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'main' panicked at 'internal error: entered unreachable code', /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/iter/adapters/zip.rs:200:5\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/std/src/panicking.rs:517:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/panicking.rs:100:14\r\n   2: core::panicking::panic\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/panicking.rs:50:5\r\n   3: <core::iter::adapters::zip::Zip<A,B> as core::iter::adapters::zip::ZipImpl<A,B>>::next_back\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/iter/adapters/zip.rs:185:22\r\n   4: <core::iter::adapters::zip::Zip<A,B> as core::iter::traits::double_ended::DoubleEndedIterator>::next_back\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/iter/adapters/zip.rs:110:9\r\n   5: <core::iter::adapters::rev::Rev<I> as core::iter::traits::iterator::Iterator>::next\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/iter/adapters/rev.rs:33:9\r\n   6: playground::main\r\n             at ./src/main.rs:29:19\r\n   7: core::ops::function::FnOnce::call_once\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/ops/function.rs:227:5\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "abreis", "id": 95046, "node_id": "MDQ6VXNlcjk1MDQ2", "avatar_url": "https://avatars.githubusercontent.com/u/95046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abreis", "html_url": "https://github.com/abreis", "followers_url": "https://api.github.com/users/abreis/followers", "following_url": "https://api.github.com/users/abreis/following{/other_user}", "gists_url": "https://api.github.com/users/abreis/gists{/gist_id}", "starred_url": "https://api.github.com/users/abreis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abreis/subscriptions", "organizations_url": "https://api.github.com/users/abreis/orgs", "repos_url": "https://api.github.com/users/abreis/repos", "events_url": "https://api.github.com/users/abreis/events{/privacy}", "received_events_url": "https://api.github.com/users/abreis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/91944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/91944/timeline", "performed_via_github_app": null, "state_reason": "completed"}