{"url": "https://api.github.com/repos/rust-lang/rust/issues/85261", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85261/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85261/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85261/events", "html_url": "https://github.com/rust-lang/rust/issues/85261", "id": 891094719, "node_id": "MDU6SXNzdWU4OTEwOTQ3MTk=", "number": 85261, "title": "Allocation after libc::fork on Android", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 25141820, "node_id": "MDU6TGFiZWwyNTE0MTgyMA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-android", "name": "O-android", "color": "6e6ec0", "default": false, "description": "Operating system: Android"}, {"id": 632886930, "node_id": "MDU6TGFiZWw2MzI4ODY5MzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-thread-locals", "name": "A-thread-locals", "color": "f7e101", "default": false, "description": "Area: Thread local storage (TLS)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 3812066157, "node_id": "LA_kwDOAAsO6M7jN4Nt", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-process", "name": "A-process", "color": "f7e101", "default": false, "description": "Area: std::process and std::env"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2021-05-13T14:34:24Z", "updated_at": "2022-10-12T14:06:24Z", "closed_at": "2022-10-12T14:06:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI am trying to fix it so that Rust's stdlib prevents unwinding, or allocating, in the child, after a fork on Unix (including in `Command`).  That is #81858.  (Allocation after fork of a multithreaded program is UB in several libcs.)\r\n\r\nI added a new test case, <strike>https://github.com/rust-lang/rust/blob/8220f2f2127b9aec972163ded97be7d8cff6b9a8/src/test/ui/process/process-panic-after-fork.rs</strike> https://github.com/rust-lang/rust/blob/6369637a192bbd0a2fbf8084345ddb7c099aa460/src/test/ui/process/process-panic-after-fork.rs  Unfortunately this test fails, but just on Android: https://github.com/rust-lang/rust/pull/81858#issuecomment-834717407\r\n\r\nI have few good theories as to why.  I wrote some speculations: https://github.com/rust-lang/rust/pull/81858#issuecomment-835314612\r\n\r\nI think this probably needs attention from an Android expert to try to repro and fix this issue.  I suspect it's a problem with the library rather than the tests.  The worst case is that it might be a general UB bug in Android Rust programs using `libc::fork` or `Command`.\r\n\r\nI'm filing this issue here to try to ask for help again, since writing in #81858 doesn't seem like a particularly good way of getting the attention of Android folks.\r\n\r\nIf we can't get a resolution, reluctantly, I guess I will disable that test on Android so that my MR can go through.  The current situation is quite a hazard (see eg #79740 \"panic! in Command child forked from non-main thread results in exit status 0\")\r\n\r\n### Technical discussion\r\n\r\nI will try to explain what the test does and what the symptoms seem to mean:\r\n\r\nThe test file has a custom global allocator, whose purpose is to spot allocations in the child after fork.  That global allocator has an atomic variable which is supposed to contain either zero (initially, meaning it's not engaged yet) or the process's pid.  Whenever an allocator method is called, we read the atomic and, if it is not zero, we check it against `process::id()`.  If it doesn't match we `libc::raise(libc::`<strike>`SIGTRAP`</strike> `SIGUSR1)`. \r\n\r\nThe test enters `main`, and engages the stunt allocator, recording the program's pid.  Each call to `expect_aborted` (which is called from `run` and therefore from `one`) produces output from `dbg!(status)`.  We see only one of these, so this must be the first test, `one(&|| panic!())`.\r\n\r\nThe test uses `libc::fork` to fork.  In the child, it calls `panic::always_abort()` (my new function to disable panic unwinding).  It then panics (using the provided closure).  This ought to result in the program dying with `SIGABRT` (or maybe `SIGILL` or `SIGTRAP`).\r\n\r\nThe parent collects the child's exit status.  For the first test case, we run `expect_aborted`.  This extracts the signal number from it and checks that it is as expected.  On other systems this works.\r\n\r\nIn the failing test, this test fails.  The assertion on `signal` fails.  Meaning, the child did die of a signal but the signal number wasn't the one expected.  The previous debug print shows that the raw wait status (confusingly described by Rust stdlib as an \"exit status\") is <strike>`5`</strike>`10`.  Usually, a bare number like that in a wait status is a signal number, and indeed that seems to be the case here since `status.signal()` is `Some(...)`.  On Linux (and most Unices), `5` is `SIGTRAP` and 10 is `SIGUSR1`.\r\n\r\nIe, it seems that the child tried to allocate memory, despite my efforts to make sure that panicking does not involve allocation.  Weirdly, a more-portable test case which uses `Command` and does not insist on specific signal numbers passes.\r\n\r\nIt's definitely my stunt allocator which is tripping here, because when I changed it to use `SIGUSR` instead of `SIGTRAP`, the failing test case signal number changed too.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85261/timeline", "performed_via_github_app": null, "state_reason": "completed"}