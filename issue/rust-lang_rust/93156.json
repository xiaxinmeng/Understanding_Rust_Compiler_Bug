{"url": "https://api.github.com/repos/rust-lang/rust/issues/93156", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93156/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93156/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93156/events", "html_url": "https://github.com/rust-lang/rust/issues/93156", "id": 1110295541, "node_id": "I_kwDOAAsO6M5CLcP1", "number": 93156, "title": "compiler tried to guess type for generic and type recurs on itself", "user": {"login": "esavier", "id": 5251231, "node_id": "MDQ6VXNlcjUyNTEyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5251231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/esavier", "html_url": "https://github.com/esavier", "followers_url": "https://api.github.com/users/esavier/followers", "following_url": "https://api.github.com/users/esavier/following{/other_user}", "gists_url": "https://api.github.com/users/esavier/gists{/gist_id}", "starred_url": "https://api.github.com/users/esavier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/esavier/subscriptions", "organizations_url": "https://api.github.com/users/esavier/orgs", "repos_url": "https://api.github.com/users/esavier/repos", "events_url": "https://api.github.com/users/esavier/events{/privacy}", "received_events_url": "https://api.github.com/users/esavier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-21T10:18:15Z", "updated_at": "2023-02-10T09:28:13Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Possibly related to #85063\r\n\r\nIt seems that the compiler tried to guess the type, which is recursive to itself, even if not required to.\r\nCode below does have pieces that can hint the compiler to compile properly \r\n\r\n\r\n```\r\n#![recursion_limit = \"8\"] // doesn't matter, lower numbers makes error more readable\r\n\r\n#[derive(Default)] pub struct Base;\r\npub struct Null;\r\npub struct Wrap<M>(M);\r\n\r\npub trait Pop<T> {\r\n    type Output;\r\n    fn pop(self, rhs: T) -> <Self as Pop<T>>::Output;\r\n}\r\n\r\nimpl Pop<Null> for Base {\r\n    type Output = Null;\r\n\r\n    fn pop(self, rhs: Null) -> Self::Output { rhs }\r\n}\r\n\r\nimpl<T> Pop<Wrap<T>> for Base where\r\n    Base: Pop<T>,\r\n    // === this line uncommented with the one mentioned in tests makes compiler act weird\r\n    <Base as Pop<T>>::Output: Copy,\r\n{\r\n    type Output = <Base as Pop<T>>::Output;\r\n\r\n    fn pop(self, rhs: Wrap<T>) -> Self::Output {\r\n        let x = <Base as Pop<T>>::pop(self, rhs.0);\r\n        x\r\n    }\r\n}\r\n\r\n#[test]\r\nfn test() {\r\n    // === this line uncommented makes bug dissapear, regardless for the next one.\r\n    // === probably it hints the compiler what T is,\r\n    // Base.pop(Null);\r\n\r\n    // === additionally this usage is also okay for the compiler.\r\n    // === uncommenting this one hints the compiler\r\n    // let b: Base = Base::default();\r\n    // let _b = b.pop(Null);\r\n\r\n    let _a = Pop::pop(Base, Null);\r\n    \r\n    // === this below works \r\n    // let _a = <Base as Pop<Null>>::pop(Base, Null);\r\n\r\n    // === same usage as above, however this usage will not help\r\n    // let b: Base = Base::default();\r\n    // let _b = b.pop(Null);\r\n}\r\n\r\nfn main() {\r\n    todo!();\r\n}\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93156/timeline", "performed_via_github_app": null, "state_reason": null}