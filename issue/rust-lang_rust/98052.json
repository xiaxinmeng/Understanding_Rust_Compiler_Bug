{"url": "https://api.github.com/repos/rust-lang/rust/issues/98052", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98052/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98052/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98052/events", "html_url": "https://github.com/rust-lang/rust/issues/98052", "id": 1269301783, "node_id": "I_kwDOAAsO6M5LqAIX", "number": 98052, "title": "Unexpectedly long lifetime of values created in let bindings", "user": {"login": "theduke", "id": 241621, "node_id": "MDQ6VXNlcjI0MTYyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/241621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theduke", "html_url": "https://github.com/theduke", "followers_url": "https://api.github.com/users/theduke/followers", "following_url": "https://api.github.com/users/theduke/following{/other_user}", "gists_url": "https://api.github.com/users/theduke/gists{/gist_id}", "starred_url": "https://api.github.com/users/theduke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theduke/subscriptions", "organizations_url": "https://api.github.com/users/theduke/orgs", "repos_url": "https://api.github.com/users/theduke/repos", "events_url": "https://api.github.com/users/theduke/events{/privacy}", "received_events_url": "https://api.github.com/users/theduke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 2366929133, "node_id": "MDU6TGFiZWwyMzY2OTI5MTMz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-control-flow", "name": "A-control-flow", "color": "f7e101", "default": false, "description": "Area: Relating to control flow"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-06-13T11:31:08Z", "updated_at": "2022-06-13T16:34:55Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Today I stumbled over an unexpected deadlock related to lifetime scoping of values inside a let binding.\r\n\r\nIt seems like values created in a let binding are kept alive until the end of the inner block, even if the value is surrounded by a block.\r\n\r\nI'm not sure if this is the expected behaviour, but it is counter to my expectation of \"values live until the end of the surrounding block\".\r\n\r\nTo illustrate:\r\n\r\n```rust\r\nuse std::sync::Mutex;\r\n\r\nfn main() {\r\n    let m = Mutex::new(Some(true));\r\n    test_mutex(&m)\r\n}\r\n\r\nfn test_mutex(m: &Mutex<Option<bool>>) {\r\n    if let Some(x) = { (*m.lock().unwrap()).clone() } {\r\n        //             ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n        //             Mutex is locked, inner value is cloned.\r\n\r\n        // Ensure x is actually bool, not a reference.\r\n        let x: bool = x;\r\n        // do expensive work...\r\n        *m.lock().unwrap() = Some(!x);\r\n        // ^^^^^^\r\n        // DEADLOCK!\r\n    }\r\n}\r\n```\r\n\r\nMy expectation was that that the lock would go out of scope at the beginning of the inner block, but it does not and is kept alive until the inner block ends, leading to the deadlock - as can be verified by looking at the MIR: \r\n\r\n<details>\r\n   <summary> MIR Output</summary>\r\n<pre>\r\n// WARNING: This output format is intended for human consumers only\r\n// and is subject to change without notice. Knock yourself out.\r\nfn main() -> () {\r\n    let mut _0: ();                      // return place in scope 0 at [src/main.rs:3:11: 3:11](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let _1: std::sync::Mutex<std::option::Option<bool>>; // in scope 0 at [src/main.rs:4:9: 4:10](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _2: std::option::Option<bool>; // in scope 0 at [src/main.rs:4:24: 4:34](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _3: &std::sync::Mutex<std::option::Option<bool>>; // in scope 0 at [src/main.rs:5:16: 5:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let _4: &std::sync::Mutex<std::option::Option<bool>>; // in scope 0 at [src/main.rs:5:16: 5:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    scope 1 {\r\n        debug m => _1;                   // in scope 1 at [src/main.rs:4:9: 4:10](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n\r\n    bb0: {\r\n        Deinit(_2);                      // scope 0 at [src/main.rs:4:24: 4:34](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        ((_2 as Some).0: bool) = const true; // scope 0 at [src/main.rs:4:24: 4:34](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        discriminant(_2) = 1;            // scope 0 at [src/main.rs:4:24: 4:34](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _1 = Mutex::<Option<bool>>::new(move _2) -> bb1; // scope 0 at [src/main.rs:4:13: 4:35](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // mir::Constant\r\n                                         // + span: [src/main.rs:4:13: 4:23](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // + user_ty: UserType(0)\r\n                                         // + literal: Const { ty: fn(Option<bool>) -> Mutex<Option<bool>> {Mutex::<Option<bool>>::new}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb1: {\r\n        _4 = &_1;                        // scope 1 at [src/main.rs:5:16: 5:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _3 = _4;                         // scope 1 at [src/main.rs:5:16: 5:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _0 = test_mutex(move _3) -> bb2; // scope 1 at [src/main.rs:5:5: 5:19](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // mir::Constant\r\n                                         // + span: [src/main.rs:5:5: 5:15](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // + literal: Const { ty: for<'r> fn(&'r Mutex<Option<bool>>) {test_mutex}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb2: {\r\n        return;                          // scope 0 at [src/main.rs:6:2: 6:2](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n}\r\n\r\nfn test_mutex(_1: &Mutex<Option<bool>>) -> () {\r\n    debug m => _1;                       // in scope 0 at [src/main.rs:8:15: 8:16](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _0: ();                      // return place in scope 0 at [src/main.rs:8:40: 8:40](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _2: std::option::Option<bool>; // in scope 0 at [src/main.rs:9:22: 9:70](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let _3: std::option::Option<bool>;   // in scope 0 at [src/main.rs:9:28: 9:33](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _4: &std::option::Option<bool>; // in scope 0 at [src/main.rs:9:36: 9:61](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let _5: &std::option::Option<bool>;  // in scope 0 at [src/main.rs:9:36: 9:61](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _6: &std::sync::MutexGuard<std::option::Option<bool>>; // in scope 0 at [src/main.rs:9:36: 9:61](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let _7: std::sync::MutexGuard<std::option::Option<bool>>; // in scope 0 at [src/main.rs:9:36: 9:53](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _8: std::result::Result<std::sync::MutexGuard<std::option::Option<bool>>, std::sync::PoisonError<std::sync::MutexGuard<std::option::Option<bool>>>>; // in scope 0 at [src/main.rs:9:36: 9:44](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _9: &std::sync::Mutex<std::option::Option<bool>>; // in scope 0 at [src/main.rs:9:36: 9:44](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _10: isize;                  // in scope 0 at [src/main.rs:9:12: 9:19](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let _11: bool;                       // in scope 0 at [src/main.rs:9:17: 9:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let _12: bool;                       // in scope 0 at [src/main.rs:14:13: 14:14](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _13: std::option::Option<bool>; // in scope 0 at [src/main.rs:16:30: 16:38](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _14: bool;                   // in scope 0 at [src/main.rs:16:35: 16:37](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _15: bool;                   // in scope 0 at [src/main.rs:16:36: 16:37](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _16: &mut std::option::Option<bool>; // in scope 0 at [src/main.rs:16:9: 16:27](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _17: &mut std::sync::MutexGuard<std::option::Option<bool>>; // in scope 0 at [src/main.rs:16:10: 16:27](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _18: std::sync::MutexGuard<std::option::Option<bool>>; // in scope 0 at [src/main.rs:16:10: 16:27](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _19: std::result::Result<std::sync::MutexGuard<std::option::Option<bool>>, std::sync::PoisonError<std::sync::MutexGuard<std::option::Option<bool>>>>; // in scope 0 at [src/main.rs:16:10: 16:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    let mut _20: &std::sync::Mutex<std::option::Option<bool>>; // in scope 0 at [src/main.rs:16:10: 16:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    scope 1 {\r\n        debug value => _3;               // in scope 1 at [src/main.rs:9:28: 9:33](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n    scope 2 {\r\n        debug x => _11;                  // in scope 2 at [src/main.rs:9:17: 9:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n    scope 3 {\r\n        debug x => _12;                  // in scope 3 at [src/main.rs:14:13: 14:14](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n\r\n    bb0: {\r\n        _9 = _1;                         // scope 0 at [src/main.rs:9:36: 9:44](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _8 = Mutex::<Option<bool>>::lock(move _9) -> bb1; // scope 0 at [src/main.rs:9:36: 9:44](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // mir::Constant\r\n                                         // + span: [src/main.rs:9:38: 9:42](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // + literal: Const { ty: for<'r> fn(&'r Mutex<Option<bool>>) -> Result<MutexGuard<'r, Option<bool>>, PoisonError<MutexGuard<'r, Option<bool>>>> {Mutex::<Option<bool>>::lock}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb1: {\r\n        _7 = Result::<MutexGuard<Option<bool>>, PoisonError<MutexGuard<Option<bool>>>>::unwrap(move _8) -> bb2; // scope 0 at [src/main.rs:9:36: 9:53](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // mir::Constant\r\n                                         // + span: [src/main.rs:9:45: 9:51](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // + literal: Const { ty: fn(Result<MutexGuard<Option<bool>>, PoisonError<MutexGuard<Option<bool>>>>) -> MutexGuard<Option<bool>> {Result::<MutexGuard<Option<bool>>, PoisonError<MutexGuard<Option<bool>>>>::unwrap}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb2: {\r\n        _6 = &_7;                        // scope 0 at [src/main.rs:9:36: 9:61](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _5 = <MutexGuard<Option<bool>> as Deref>::deref(move _6) -> [return: bb3, unwind: bb12]; // scope 0 at [src/main.rs:9:36: 9:61](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // mir::Constant\r\n                                         // + span: [src/main.rs:9:36: 9:61](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // + literal: Const { ty: for<'r> fn(&'r MutexGuard<Option<bool>>) -> &'r <MutexGuard<Option<bool>> as Deref>::Target {<MutexGuard<Option<bool>> as Deref>::deref}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb3: {\r\n        _4 = _5;                         // scope 0 at [src/main.rs:9:36: 9:61](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _3 = <Option<bool> as Clone>::clone(move _4) -> [return: bb4, unwind: bb12]; // scope 0 at [src/main.rs:9:36: 9:61](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // mir::Constant\r\n                                         // + span: [src/main.rs:9:54: 9:59](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // + literal: Const { ty: for<'r> fn(&'r Option<bool>) -> Option<bool> {<Option<bool> as Clone>::clone}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb4: {\r\n        drop(_7) -> bb5;                 // scope 0 at [src/main.rs:9:61: 9:62](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n\r\n    bb5: {\r\n        _2 = _3;                         // scope 1 at [src/main.rs:9:63: 9:68](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _10 = discriminant(_2);          // scope 0 at [src/main.rs:9:12: 9:19](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        switchInt(move _10) -> [1_isize: bb6, otherwise: bb10]; // scope 0 at [src/main.rs:9:12: 9:19](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n\r\n    bb6: {\r\n        _11 = ((_2 as Some).0: bool);    // scope 0 at [src/main.rs:9:17: 9:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _12 = _11;                       // scope 0 at [src/main.rs:14:23: 14:24](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _15 = _12;                       // scope 3 at [src/main.rs:16:36: 16:37](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _14 = Not(move _15);             // scope 3 at [src/main.rs:16:35: 16:37](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        Deinit(_13);                     // scope 3 at [src/main.rs:16:30: 16:38](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        ((_13 as Some).0: bool) = move _14; // scope 3 at [src/main.rs:16:30: 16:38](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        discriminant(_13) = 1;           // scope 3 at [src/main.rs:16:30: 16:38](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _20 = _1;                        // scope 3 at [src/main.rs:16:10: 16:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _19 = Mutex::<Option<bool>>::lock(move _20) -> bb7; // scope 3 at [src/main.rs:16:10: 16:18](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // mir::Constant\r\n                                         // + span: [src/main.rs:16:12: 16:16](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // + literal: Const { ty: for<'r> fn(&'r Mutex<Option<bool>>) -> Result<MutexGuard<'r, Option<bool>>, PoisonError<MutexGuard<'r, Option<bool>>>> {Mutex::<Option<bool>>::lock}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb7: {\r\n        _18 = Result::<MutexGuard<Option<bool>>, PoisonError<MutexGuard<Option<bool>>>>::unwrap(move _19) -> bb8; // scope 3 at [src/main.rs:16:10: 16:27](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // mir::Constant\r\n                                         // + span: [src/main.rs:16:19: 16:25](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // + literal: Const { ty: fn(Result<MutexGuard<Option<bool>>, PoisonError<MutexGuard<Option<bool>>>>) -> MutexGuard<Option<bool>> {Result::<MutexGuard<Option<bool>>, PoisonError<MutexGuard<Option<bool>>>>::unwrap}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb8: {\r\n        _17 = &mut _18;                  // scope 3 at [src/main.rs:16:10: 16:27](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        _16 = <MutexGuard<Option<bool>> as DerefMut>::deref_mut(move _17) -> [return: bb9, unwind: bb11]; // scope 3 at [src/main.rs:16:9: 16:27](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // mir::Constant\r\n                                         // + span: [src/main.rs:16:9: 16:27](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n                                         // + literal: Const { ty: for<'r> fn(&'r mut MutexGuard<Option<bool>>) -> &'r mut <MutexGuard<Option<bool>> as Deref>::Target {<MutexGuard<Option<bool>> as DerefMut>::deref_mut}, val: Value(Scalar(<ZST>)) }\r\n    }\r\n\r\n    bb9: {\r\n        (*_16) = move _13;               // scope 3 at [src/main.rs:16:9: 16:38](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n        drop(_18) -> bb10;               // scope 3 at [src/main.rs:16:38: 16:39](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n\r\n    bb10: {\r\n        return;                          // scope 0 at [src/main.rs:20:2: 20:2](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n\r\n    bb11 (cleanup): {\r\n        drop(_18) -> bb13;               // scope 3 at [src/main.rs:16:38: 16:39](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n\r\n    bb12 (cleanup): {\r\n        drop(_7) -> bb13;                // scope 0 at [src/main.rs:9:61: 9:62](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n\r\n    bb13 (cleanup): {\r\n        resume;                          // scope 0 at [src/main.rs:8:1: 20:2](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021#)\r\n    }\r\n}\r\n</pre>\r\n   </details>\r\n\r\n\r\nIn contrast, this code works as expected: `if let Some(x) = { let value = m.lock().unwrap().clone(); value } {`\r\n\r\nThis seems very counter-intuitive if your assumption is that block = lifetime scope.\r\n\r\nMaybe it's not treated as a block because it's a single expression?\r\n\r\n`rustc 1.63.0-nightly (e09449220 2022-05-31)`\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98052/timeline", "performed_via_github_app": null, "state_reason": null}