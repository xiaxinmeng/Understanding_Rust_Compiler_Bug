{"url": "https://api.github.com/repos/rust-lang/rust/issues/90091", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90091/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90091/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90091/events", "html_url": "https://github.com/rust-lang/rust/issues/90091", "id": 1031045439, "node_id": "I_kwDOAAsO6M49dIE_", "number": 90091, "title": "Tracking Issue for split_array", "user": {"login": "jethrogb", "id": 1132307, "node_id": "MDQ6VXNlcjExMzIzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1132307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jethrogb", "html_url": "https://github.com/jethrogb", "followers_url": "https://api.github.com/users/jethrogb/followers", "following_url": "https://api.github.com/users/jethrogb/following{/other_user}", "gists_url": "https://api.github.com/users/jethrogb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jethrogb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jethrogb/subscriptions", "organizations_url": "https://api.github.com/users/jethrogb/orgs", "repos_url": "https://api.github.com/users/jethrogb/repos", "events_url": "https://api.github.com/users/jethrogb/events{/privacy}", "received_events_url": "https://api.github.com/users/jethrogb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 31, "created_at": "2021-10-20T06:54:38Z", "updated_at": "2023-06-01T15:32:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(split_array)]`\r\n\r\nThis is a tracking issue for splitting slices and arrays into constant-length arrays.\r\n\r\n### Public API\r\n\r\n```rust\r\nimpl<T, const N: usize> [T; N] {\r\n    pub fn split_array_ref<const M: usize>(&self) -> (&[T; M], &[T]);\r\n    pub fn split_array_mut<const M: usize>(&mut self) -> (&mut [T; M], &mut [T]);\r\n\r\n    pub fn rsplit_array_ref<const M: usize>(&self) -> (&[T], &[T; M]);\r\n    pub fn rsplit_array_mut<const M: usize>(&mut self) -> (&mut [T], &mut [T; M]);\r\n}\r\n\r\nimpl<T> [T] {\r\n    pub fn split_array_ref<const N: usize>(&self) -> (&[T; N], &[T]);\r\n    pub fn split_array_mut<const N: usize>(&mut self) -> (&mut [T; N], &mut [T]);\r\n\r\n    pub fn rsplit_array_ref<const N: usize>(&self) -> (&[T], &[T; N]);\r\n    pub fn rsplit_array_mut<const N: usize>(&mut self) -> (&mut [T], &mut [T; N]);\r\n}\r\n```\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n* [ ] Naming, see https://github.com/rust-lang/rust/pull/83233#pullrequestreview-780315524\r\n* [ ] Array functions should return `[T; N - M]`, like so:\r\n```rust\r\nimpl<T, const N: usize> [T; N] {\r\n    pub fn split_array<const M: usize>(self) -> ([T; M], [T; N - M]);\r\n    pub fn split_array_ref<const M: usize>(&self) -> (&[T; M], &[T; N - M]);\r\n    pub fn split_array_mut<const M: usize>(&mut self) -> (&mut [T; M], &mut [T; N - M]);\r\n}\r\n```\r\nHowever, const generics is not powerful enough for this today. See https://github.com/rust-lang/rust/pull/83233#issuecomment-947542204 and https://github.com/rust-lang/rust/pull/83233#discussion_r732722222. The array functions need to be here so the slice functions can be stabilized without forward compatibility concerns.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90091/reactions", "total_count": 15, "+1": 15, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90091/timeline", "performed_via_github_app": null, "state_reason": null}