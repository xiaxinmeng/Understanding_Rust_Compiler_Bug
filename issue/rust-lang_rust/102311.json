{"url": "https://api.github.com/repos/rust-lang/rust/issues/102311", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102311/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102311/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102311/events", "html_url": "https://github.com/rust-lang/rust/issues/102311", "id": 1386050611, "node_id": "I_kwDOAAsO6M5SnXQz", "number": 102311, "title": "Confusing diagnostic for mismatched opaque types", "user": {"login": "domenicquirl", "id": 28535538, "node_id": "MDQ6VXNlcjI4NTM1NTM4", "avatar_url": "https://avatars.githubusercontent.com/u/28535538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domenicquirl", "html_url": "https://github.com/domenicquirl", "followers_url": "https://api.github.com/users/domenicquirl/followers", "following_url": "https://api.github.com/users/domenicquirl/following{/other_user}", "gists_url": "https://api.github.com/users/domenicquirl/gists{/gist_id}", "starred_url": "https://api.github.com/users/domenicquirl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domenicquirl/subscriptions", "organizations_url": "https://api.github.com/users/domenicquirl/orgs", "repos_url": "https://api.github.com/users/domenicquirl/repos", "events_url": "https://api.github.com/users/domenicquirl/events{/privacy}", "received_events_url": "https://api.github.com/users/domenicquirl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-26T13:05:12Z", "updated_at": "2022-09-26T13:05:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I just spent some time being quite confused by an error message I got when mistakenly using an `async fn` whose return type contains an `impl Trait` in multiple branches of a `match` statement. On my local toolchain, which is still on 1.62, the corresponding output is:\r\n\r\n```\r\nerror[E0308]: `match` arms have incompatible types\r\n   --> tools/src/bin/volt-test-device-comms.rs:243:35\r\n    |\r\n236 |                   let read_fut = match self.register {\r\n    |                                  ------------------- `match` arms have incompatible types\r\n237 |                       Discrete(reg) => with_timeout(client.read_discrete_inputs(reg, 1))\r\n    |  ______________________________________-\r\n238 | |                         .await\r\n239 | |                         .map(|res| res.map(|_| ())),\r\n    | |___________________________________________________- this is found to be of type `Result<Result<(), std::io::Error>, impl std::error::Error>`\r\n240 |                       Coil(reg) => with_timeout(client.read_coils(reg, 1))\r\n    |  __________________________________-\r\n241 | |                         .await\r\n242 | |                         .map(|res| res.map(|_| ())),\r\n    | |___________________________________________________- this is found to be of type `Result<Result<(), std::io::Error>, impl std::error::Error>`\r\n243 |                       Input(reg) => with_timeout(client.read_input_registers(reg, 1))\r\n    |  ___________________________________^\r\n244 | |                         .await\r\n245 | |                         .map(|res| res.map(|_| ())),\r\n    | |___________________________________________________^ expected `bool`, found `u16`\r\n...\r\n307 |   async fn with_timeout<O, F: Future<Output = O>>(future: F) -> Result<O, impl std::error::Error> {\r\n    |                                                                           ----------------------\r\n    |                                                                           |\r\n    |                                                                           the expected opaque type\r\n    |                                                                           the found opaque type\r\n    |\r\n    = note: expected enum `Result<_, impl std::error::Error>` (`bool`)\r\n               found enum `Result<_, impl std::error::Error>` (`u16`)\r\n```\r\n\r\n(This is using `tokio_modbus`, there's a reduced repro below.) On current stable (1.64) and nightly (1.66.0-nightly (2022-09-25 f5193a9fcc73dc09e41a)), the message seems to have improved with some additional information about what other types the compiler has looked at while trying to match the opaque type. So currently, given the following code ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=296d5ee74fbb3e428cb84fb4bbb236a6)): \r\n\r\n```rust\r\nuse std::fmt;\r\nuse std::future::Future;\r\n\r\n#[derive(Debug, PartialEq)]\r\nstruct MyError(());\r\n\r\nimpl fmt::Display for MyError {\r\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\r\n        write!(f, \"my message\")\r\n    }\r\n}\r\n\r\nimpl std::error::Error for MyError {}\r\n\r\nfn main() {}\r\n\r\nasync fn test() {\r\n    let _ = match 0u16 {\r\n        0 => maybe(one(), true).await.map(|res| res.map(|_| ())),\r\n        _ => maybe(r#true(), true).await.map(|res| res.map(|_| ())),\r\n    };\r\n}\r\n\r\nasync fn maybe<O, F: Future<Output = O>>(future: F, run: bool) -> Result<O, impl std::error::Error> { \r\n    if !run {\r\n        Err(MyError(()))\r\n    } else {\r\n        Ok(future.await)\r\n    }\r\n}\r\n\r\nasync fn one() -> Result<usize, std::io::Error> {\r\n    Ok(1)\r\n}\r\nasync fn r#true() -> Result<bool, std::io::Error> {\r\n    Ok(true)\r\n}\r\n```\r\n\r\nThe output is:\r\n\r\n```\r\nerror[[E0308]](https://doc.rust-lang.org/stable/error-index.html#E0308): `match` arms have incompatible types\r\n  --> src/main.rs:20:14\r\n   |\r\n18 |       let _ = match 0u16 {\r\n   |  _____________-\r\n19 | |         0 => maybe(one(), true).await.map(|res| res.map(|_| ())),\r\n   | |              --------------------------------------------------- this is found to be of type `Result<Result<(), std::io::Error>, impl std::error::Error>`\r\n20 | |         _ => maybe(r#true(), true).await.map(|res| res.map(|_| ())),\r\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `bool`\r\n21 | |     };\r\n   | |_____- `match` arms have incompatible types\r\n...\r\n24 |   async fn maybe<O, F: Future<Output = O>>(future: F, run: bool) -> Result<O, impl std::error::Error> { \r\n   |                                                                               ----------------------\r\n   |                                                                               |\r\n   |                                                                               one of the expected opaque types\r\n   |                                                                               one of the found opaque types\r\n   |\r\nnote: while checking the return type of the `async fn`\r\n  --> src/main.rs:32:19\r\n   |\r\n32 | async fn one() -> Result<usize, std::io::Error> {\r\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, one of the expected opaque types\r\nnote: while checking the return type of the `async fn`\r\n  --> src/main.rs:35:22\r\n   |\r\n35 | async fn r#true() -> Result<bool, std::io::Error> {\r\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, one of the found opaque types\r\n   = note: expected enum `Result<_, impl std::error::Error>` (`usize`)\r\n              found enum `Result<_, impl std::error::Error>` (`bool`)\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\n```\r\n\r\nWhile this gives more context on what code might be involved in the error,\r\n * the primary diagnostic still says \"expected `usize`, found `bool`\", which might be true in some sense, but the actual mismatched types are different instances of `impl Error` whose only relation to the mentioned primitive types is that the latter occur in the type parameters to the function that produces the `impl Error`,\r\n * the source location for \"one of the expected opaque types\" and \"one of the found opaque types\" is identical. Both point to the code that declares the `impl Error` return type, which is always confusing because it makes it seem that expected and found are the same (in which case, why is there an error),\r\n * the `note`s claim that the `Future::Output` parameters of the `async fn`s used to invoke `maybe` are expected/found opaque types. This is still confusing to me, because (as in the case above) the error is about the `impl Error`, and in this case `Output = Result<usize, std::io::Error>`, which is neither opaque nor the problem (the only thing that would somewhat make sense to me here is that `async fn` desugars to `impl Future`, which is opaque. But that's not present in the diagnostic at all),\r\n * the ``(`bool`)`` and ``(`usize`)`` in the final `note` were confusing to me, because they don't appear anywhere in the type (neither the printed abbreviation **nor** the real type, which at the point of the error is aready `Result<Result<(), io::Error>, impl Error>`) and the message doesn't say what they mean and what they've got to do with the error, and\r\n * nowhere in the message is it mentioned that `impl Trait` return types are different when instantiating generic functions with different parameters\r\n   * with my actual issue, this was even more confusing to me because the first two branches did not produce an error, even though the futures, also a generic parameter of the function returning the opaque type, were different. So I would have expected that to already cause the error if that was the problem. This seems better on current stable, where adding a second branch with an `async fn two() -> Result<usize, io::Error>` produces an error which points to the locations of the two functions ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=296d5ee74fbb3e428cb84fb4bbb236a6))\r\n\r\nPossible output that would have helped me better identify the issue:\r\n```\r\nerror[[E0308]](https://doc.rust-lang.org/stable/error-index.html#E0308): `match` arms have incompatible types\r\n  --> src/main.rs:20:14\r\n   |\r\n18 |       let _ = match 0u16 {\r\n   |  _____________-\r\n19 | |         0 => maybe(one(), true).await.map(|res| res.map(|_| ())),\r\n   | |              --------------------------------------------------- this is found to be of type `Result<Result<(), std::io::Error>, impl std::error::Error>`\r\n20 | |         _ => maybe(r#true(), true).await.map(|res| res.map(|_| ())),\r\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `impl std::error::Error` is different here\r\n21 | |     };\r\n   | |_____- `match` arms have incompatible types\r\n...\r\n24 |   async fn maybe<O, F: Future<Output = O>>(future: F, run: bool) -> Result<O, impl std::error::Error> { \r\n   |                                                                               ----------------------\r\n   |                                                                               |\r\n   |                                                                               opaque type defined here\r\n   |\r\n   = note: when returning a type containing `impl Trait` from a generic function, its concrete type is different if the function is called with different generic arguments\r\nnote: while checking the return type of the `async fn`\r\n  --> src/main.rs:32:19\r\n   |\r\n32 | async fn one() -> Result<usize, std::io::Error> {\r\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, which is `O` in <src/main.rs:19:20>\r\nnote: while checking the return type of the `async fn`\r\n  --> src/main.rs:35:22\r\n   |\r\n35 | async fn r#true() -> Result<bool, std::io::Error> {\r\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, which is `O` in <src/main.rs:20:20>\r\n   = note: mismatch between `usize` and `bool`\r\n\r\nFor more information about this error, try `rustc --explain E0308`.\r\n```\r\n\r\nFor completeness, the error is resolved as expected by replacing the opaque type with its concrete type.\r\n\r\nThe latest change to the message for this error that I could find is #63167, but that doesn't yet include the ``(`bool`)`` (it just says \"opaque type\" and adds a source location). #93519 might be similar.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102311/timeline", "performed_via_github_app": null, "state_reason": null}