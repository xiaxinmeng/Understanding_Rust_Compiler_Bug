{"url": "https://api.github.com/repos/rust-lang/rust/issues/22523", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/22523/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/22523/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/22523/events", "html_url": "https://github.com/rust-lang/rust/issues/22523", "id": 58168739, "node_id": "MDU6SXNzdWU1ODE2ODczOQ==", "number": 22523, "title": "play.rust-lang.org example for Mutex pulls up source for Mutex and Poisoning together", "user": {"login": "elbow-jason", "id": 4923601, "node_id": "MDQ6VXNlcjQ5MjM2MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/4923601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elbow-jason", "html_url": "https://github.com/elbow-jason", "followers_url": "https://api.github.com/users/elbow-jason/followers", "following_url": "https://api.github.com/users/elbow-jason/following{/other_user}", "gists_url": "https://api.github.com/users/elbow-jason/gists{/gist_id}", "starred_url": "https://api.github.com/users/elbow-jason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elbow-jason/subscriptions", "organizations_url": "https://api.github.com/users/elbow-jason/orgs", "repos_url": "https://api.github.com/users/elbow-jason/repos", "events_url": "https://api.github.com/users/elbow-jason/events{/privacy}", "received_events_url": "https://api.github.com/users/elbow-jason/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-19T05:12:50Z", "updated_at": "2015-04-07T22:17:43Z", "closed_at": "2015-04-07T22:17:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "http://doc.rust-lang.org/std/sync/struct.Mutex.html#examples\n\nClicking on the link that leads to play.rust-lang.org loads the source for both [Mutex and Poisoning in the same playground](http://is.gd/8Sk25r). The following is a sample from the playground (notice the two fn mains) :\n\n``` rust\n   fn main() {\n        use std::sync::{Arc, Mutex};\n        use std::thread::Thread;\n        use std::sync::mpsc::channel;\n\n        const N: uint = 10;\n\n        // Spawn a few threads to increment a shared variable (non-atomically), and\n        // let the main thread know once all increments are done.\n        //\n        // Here we're using an Arc to share memory among tasks, and the data inside\n        // the Arc is protected with a mutex.\n        let data = Arc::new(Mutex::new(0));\n\n        let (tx, rx) = channel();\n        for _ in 0u..10 {\n            let (data, tx) = (data.clone(), tx.clone());\n            Thread::spawn(move || {\n                // The shared static can only be accessed once the lock is held.\n                // Our non-atomic increment is safe because we're the only thread\n                // which can access the shared state when the lock is held.\n                //\n                // We unwrap() the return value to assert that we are not expecting\n                // tasks to ever fail while holding the lock.\n                let mut data = data.lock().unwrap();\n                *data += 1;\n                if *data == N {\n                    tx.send(()).unwrap();\n                }\n                // the lock is unlocked here when `data` goes out of scope.\n            });\n        }\n\n        rx.recv().unwrap();\n    }fn main() {\n        use std::sync::{Arc, Mutex};\n        use std::thread::Thread;\n\n        let lock = Arc::new(Mutex::new(0u));\n        let lock2 = lock.clone();\n\n        let _ = Thread::scoped(move || -> () {\n            // This thread will acquire the mutex first, unwrapping the result of\n            // `lock` because the lock has not been poisoned.\n            let _lock = lock2.lock().unwrap();\n\n            // This panic while holding the lock (`_guard` is in scope) will poison\n            // the mutex.\n            panic!();\n        }).join();\n\n        // The lock is poisoned by this point, but the returned result can be\n        // pattern matched on to return the underlying guard on both branches.\n        let mut guard = match lock.lock() {\n            Ok(guard) => guard,\n            Err(poisoned) => poisoned.into_guard(),\n        };\n\n        *guard += 1;\n    }\n```\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/22523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/22523/timeline", "performed_via_github_app": null, "state_reason": "completed"}