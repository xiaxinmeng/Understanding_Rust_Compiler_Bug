{"url": "https://api.github.com/repos/rust-lang/rust/issues/87764", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87764/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87764/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87764/events", "html_url": "https://github.com/rust-lang/rust/issues/87764", "id": 960683169, "node_id": "MDU6SXNzdWU5NjA2ODMxNjk=", "number": 87764, "title": "Slow process spawning using `Command::spawn` with older GLIBC due to use of `fork`", "user": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-08-04T16:10:43Z", "updated_at": "2021-08-05T21:34:47Z", "closed_at": "2021-08-05T21:34:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi! I have recently noticed that spawning new child processes using `Command::spawn` can be quite slow on older GLIBC versions on Linux. I have tracked this down to the usage of `posix_spawn` [here](https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/process/process_unix.rs#L517).\r\n\r\n## Problem description\r\n`posix_spawn` uses `fork` on older GLIBC versions (<2.24). While `fork` is supposed to be fast because it uses copy-on-write, it can actually be [quite slow](https://stackoverflow.com/questions/2731531/faster-forking-of-large-processes-on-linux), because it still has to do nontrivial things, like setting up page tables. This gets problematic if the process has a lot of memory allocated, because then many virtual memory pages are populated and `fork` gets really slow.\r\n\r\nI ran into this on an HPC cluster that uses GLIBC 2.17. I'm working on a distributed runtime that executes many (often short-running) tasks on the cluster, and from performance profiles it seemed like most of the time is actually spent inside `fork`, which looked really weird. Spawning processes if crucial for our runtime, so this poses a problem, because the spawning sometimes adds too much overhead.\r\n\r\n## Benchmark\r\nI constructed a simple benchmark that allocates ~4 GiB memory (to simulate a process with populated page tables) and then spawns 100 processes that immediately exit (they execute `sleep 0`).\r\n\r\n```rust\r\nuse std::process::Command;\r\nuse std::time::Instant;\r\n\r\nfn main() {\r\n    // Populate page tables\r\n    let mut v: Vec<u32> = vec![];\r\n    for i in 0..1024 * 1024 * 1024 {\r\n        v.push(i * i + 1);\r\n    }\r\n\r\n    let start = Instant::now();\r\n\r\n    for _ in 0..100 {\r\n        Command::new(\"sleep\").arg(\"0\").output().unwrap();\r\n    }\r\n\r\n    println!(\"{} ms\", start.elapsed().as_millis());\r\n    println!(\"{}\", v[1000] + v[11111]);\r\n}\r\n```\r\n\r\nOn my laptop with GLIBC 2.33, it takes under `100 ms` to run the benchmark, while on the HPC cluster this can sometimes take up to `10 seconds`! Which is quite a lot for spawning 100 processes. (Using `spawn` instead of `output` doesn't really change anything).\r\n\r\n## Potential solution\r\n`posix_spawn` has a flag called `POSIX_SPAWN_USEVFORK`. When used, `vfork` will be used instead of `fork` on GLIBC versions before 2.24 (in newer versions it uses a different approach using `clone`, which seems to be fast). If I understand it correctly, `vfork` is designed for use cases when you `fork` and then immediately call `exec*`. It avoids page table manipulations and should run in constant time independent of the process memory usage.\r\n\r\nThere are some benchmarks that demonstrate that this flag can actually help with process spawning performance (https://github.com/rtomayko/posix-spawn#benchmarks). Go also tries to [avoid](https://github.com/golang/go/issues/5838) `fork` from version 1.9, which had some nice [positive effects](https://about.gitlab.com/blog/2018/01/23/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/). A similar request was also discussed for Python a few years ago (https://bugs.python.org/issue34663), where it was rejected.\r\n\r\nI wasn't sure how to use a custom libstd for the benchmark above, so I wrote a very simple C++ program that tries to emulate the Rust benchmark above. First I used `posix_spawn` without `POSIX_SPAWN_USEVFORK`, it ran very fast locally with recent GLIBC, but quite slow on the cluster with prehistoric GLIBC. When I added the vfork flag to `posix_spawn`, suddenly process spawning became very fast even on the cluster. So it seems that this flag can actually solve the problem of slow process spawning on older systems.\r\n\r\n<details>\r\n  <summary>C++ version of the benchmark (compiled with `gcc -O2`)</summary>\r\n\r\n```cpp\r\n#include <vector>\r\n#include <iostream>\r\n#include <chrono>\r\n#include <spawn.h>\r\n\r\n#define CHECK(err) \\\r\n{                  \\\r\n    int ret = err; \\\r\n    if (ret != 0) {    \\\r\n        errno = ret; \\\r\n        std::cerr << ret << std::endl; \\\r\n        perror(\"fail\"); \\\r\n        exit(1); \\\r\n    }\\\r\n}\r\n\r\nint main() {\r\n    std::vector<int> vec;\r\n    for (int i = 0; i < 1024 * 1024 * 1024; i++) {\r\n        vec.push_back(i * i + 1);\r\n    }\r\n\r\n    auto start = std::chrono::system_clock::now();\r\n\r\n    for (int i = 0; i < 100; i++) {\r\n        char* envp[] = {NULL};\r\n        char* args[] = {\r\n            \"/usr/bin/sleep\",\r\n            \"0\",\r\n            NULL\r\n        };\r\n\r\n        posix_spawnattr_t attr;\r\n        CHECK(posix_spawnattr_init(&attr));\r\n        CHECK(posix_spawnattr_setflags(&attr, POSIX_SPAWN_SETSIGDEF | POSIX_SPAWN_SETSIGMASK/* | POSIX_SPAWN_USEVFORK */));\r\n\r\n        pid_t pid;\r\n        CHECK(posix_spawn(\r\n            &pid,\r\n            \"/usr/bin/sleep\",\r\n            NULL,\r\n            &attr,\r\n            &args[0],\r\n            &envp[0]\r\n        ));\r\n        CHECK(posix_spawnattr_destroy(&attr));\r\n    }\r\n\r\n    auto end = std::chrono::system_clock::now();\r\n    auto diff = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();\r\n    std::cout << diff << \" ms\" << std::endl;\r\n\r\n    std::cout << vec[1000] + vec[10231] << std::endl;\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n</details>\r\n\r\n## Proposal\r\nWould it be possible to use the `POSIX_SPAWN_USEVFORK` flag [here](https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/process/process_unix.rs#L511) to increase the performance of process spawning on older systems?\r\n\r\nAt first glance, it seems like a simple change, but I'm not a Linux wizard and I don't know if there are any issues with `vfork` or this flag. It seems that its use was somehow [controversial](https://ewontfix.com/7/) in the past. Furthermore, the flag seems to be GNU specific, I'm not sure if that poses a problem.", "closed_by": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87764/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87764/timeline", "performed_via_github_app": null, "state_reason": "completed"}