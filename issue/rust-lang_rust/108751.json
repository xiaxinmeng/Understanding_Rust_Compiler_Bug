{"url": "https://api.github.com/repos/rust-lang/rust/issues/108751", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108751/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108751/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108751/events", "html_url": "https://github.com/rust-lang/rust/issues/108751", "id": 1609968539, "node_id": "I_kwDOAAsO6M5f9iub", "number": 108751, "title": "invariant detection for recursive generic types incorrect with generic_const_exprs", "user": {"login": "peter-kehl", "id": 4270240, "node_id": "MDQ6VXNlcjQyNzAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4270240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-kehl", "html_url": "https://github.com/peter-kehl", "followers_url": "https://api.github.com/users/peter-kehl/followers", "following_url": "https://api.github.com/users/peter-kehl/following{/other_user}", "gists_url": "https://api.github.com/users/peter-kehl/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-kehl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-kehl/subscriptions", "organizations_url": "https://api.github.com/users/peter-kehl/orgs", "repos_url": "https://api.github.com/users/peter-kehl/repos", "events_url": "https://api.github.com/users/peter-kehl/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-kehl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}, {"id": 5226739262, "node_id": "LA_kwDOAAsO6M8AAAABN4m2Pg", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-incomplete-features", "name": "requires-incomplete-features", "color": "76dcde", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-03-04T22:18:56Z", "updated_at": "2023-03-04T23:25:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following fails to compile, incorrectly/inconsistently reporting `ResursiveGenCovariant<T>` as invariant over `T`:\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_const_exprs)]\r\n\r\npub struct ResursiveGenCovariant<T> {\r\n    // assure_covariant(...) does compile:\r\n    // - without `_links`, or\r\n    // - without `generic_const_exprs`, or\r\n    // - with the array size of `links` being not an expression (such as `0*0`),\r\n    //   but a literal (such as `0`).\r\n    _links: [Option<Box<ResursiveGenCovariant<T>>>; 0*0],\r\n    _p: core::marker::PhantomData<T>\r\n}\r\n\r\n#[allow(dead_code)]\r\nfn assure_covariant<'new>(v: ResursiveGenCovariant<&'static ()>) -> ResursiveGenCovariant<&'new ()> {\r\n    v\r\n}\r\n```\r\nError:\r\n```rust\r\n10 | fn assure_covariant<'new>(v: R...\r\n   |                     ---- lifetime `'new` defined here\r\n11 |     v\r\n   |     ^ returning this value requires that `'new` must outlive `'static`\r\n   |\r\n   = note: requirement occurs because of the type `ResursiveGenCovariant<&()>`, which makes the generic argument `&()` invariant\r\n   = note: the struct `ResursiveGenCovariant<T>` is invariant over the parameter `T`\r\n```\r\n\r\nHowever, the following alternatives **do compile** (in the order respective to the changes listed in the comment above; the middle one fails with both `1.69.0-nightly (44cfafe2f 2023-03-03)` and `stable 1.67.1 (d5a82bbd2 2023-02-07)`). Same code as above (without the above comments), with changes marked with new comments:\r\n\r\nAlternative 1:\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_const_exprs)]\r\n\r\npub struct ResursiveGenCovariant<T> {\r\n    // no _links\r\n    _p: core::marker::PhantomData<T>\r\n}\r\n\r\n#[allow(dead_code)]\r\nfn assure_covariant<'new>(v: ResursiveGenCovariant<&'static ()>) -> ResursiveGenCovariant<&'new ()> {\r\n    v\r\n}\r\n```\r\n\r\nAlternative 2:\r\n```rust\r\n// no generic_const_exprs\r\npub struct ResursiveGenCovariant<T> {\r\n    _links: [Option<Box<ResursiveGenCovariant<T>>>; 0*0],\r\n    _p: core::marker::PhantomData<T>\r\n}\r\n\r\n#[allow(dead_code)]\r\nfn assure_covariant<'new>(v: ResursiveGenCovariant<&'static ()>) -> ResursiveGenCovariant<&'new ()> {\r\n    v\r\n}\r\n```\r\n\r\nAlternative 3:\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_const_exprs)]\r\n\r\npub struct ResursiveGenCovariant<T> {\r\n    _links: [Option<Box<ResursiveGenCovariant<T>>>; 0], // <-- 0*0 changed to 0\r\n    _p: core::marker::PhantomData<T>\r\n}\r\n\r\n#[allow(dead_code)]\r\nfn assure_covariant<'new>(v: ResursiveGenCovariant<&'static ()>) -> ResursiveGenCovariant<&'new ()> {\r\n    v\r\n}\r\n```\r\n\r\nMotivation: Based on indirect recursion between `LeafNode` and `InternalNode` in BTreeMap's internals, and `assert_covariance()` in `library/alloc/src/collections/btree/map/tests.rs` and `library/alloc/src/collections/btree/set/tests.rs`. It means that adding `generic_const_exprs` to `library/alloc/src/lib.rs` breaks its compilation.\r\n\r\nRelated to #108725. ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108751/timeline", "performed_via_github_app": null, "state_reason": null}