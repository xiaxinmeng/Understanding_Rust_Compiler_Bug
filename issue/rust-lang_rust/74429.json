{"url": "https://api.github.com/repos/rust-lang/rust/issues/74429", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74429/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74429/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74429/events", "html_url": "https://github.com/rust-lang/rust/issues/74429", "id": 658892326, "node_id": "MDU6SXNzdWU2NTg4OTIzMjY=", "number": 74429, "title": "Borrowck deduces empty lifetime", "user": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}, {"id": 1791937891, "node_id": "MDU6TGFiZWwxNzkxOTM3ODkx", "url": "https://api.github.com/repos/rust-lang/rust/labels/ICEBreaker-Cleanup-Crew", "name": "ICEBreaker-Cleanup-Crew", "color": "74cc28", "default": false, "description": "Helping to \"clean up\" bugs with minimal examples and bisections"}, {"id": 1966877457, "node_id": "MDU6TGFiZWwxOTY2ODc3NDU3", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-critical", "name": "P-critical", "color": "eb6420", "default": false, "description": "Critical priority"}], "state": "closed", "locked": false, "assignee": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2020-07-17T05:48:10Z", "updated_at": "2020-07-23T15:28:04Z", "closed_at": "2020-07-23T15:28:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nuse std::ops::{DivAssign, SubAssign};\r\n\r\nuse ndarray::{s, Array2, ArrayView1, Axis, Zip};\r\nuse num::{Zero, One};\r\nuse rayon::prelude::*;\r\n\r\npub fn gaussian_elimination<T>(mut a: Array2<T>) -> Array2<T>\r\nwhere\r\n    T: One + Zero + Clone + Send + Sync + DivAssign + SubAssign,\r\n{\r\n    let (n, m) = a.dim();\r\n    assert!(n > 0);\r\n    let mut pivots = vec![];\r\n    let mut pivot = 0;\r\n    for i in 0..n {\r\n        if a[[i, pivot]].is_zero() {\r\n            if let Some((new_pivot, row)) = (pivot..m)\r\n                .into_par_iter()\r\n                .flat_map(|pivot| {\r\n                    let a: ArrayView1<_> = a.slice(s![i.., pivot]);\r\n                    a.axis_iter(Axis(0))\r\n                        .into_par_iter()\r\n                        .enumerate()\r\n                        .flat_map(|(j, x)| {\r\n                            if x.into_scalar().is_zero() {\r\n                                None\r\n                            } else {\r\n                                Some(j)\r\n                            }\r\n                        })\r\n                        .find_any(|_| true)\r\n                        .map(|row| (pivot, row))\r\n                })\r\n                .find_first(|_| true)\r\n            {\r\n                pivot = new_pivot;\r\n                if row > 0 {\r\n                    let mut a = a.slice_mut(s![i..; row, ..]);\r\n                    let mut it = a.axis_iter_mut(Axis(0));\r\n                    let this_row = it.next().expect(\"this row exists\");\r\n                    let that_row = it.next().expect(\"that row exists\");\r\n                    Zip::from(this_row).and(that_row).par_apply(std::mem::swap);\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        pivots.push((i, pivot));\r\n        let (mut this_equation, mut rest_equations) = a.slice_mut(s![i.., ..]).split_at(Axis(0), 1);\r\n        let mut this_equation = this_equation.index_axis_mut(Axis(0), 0);\r\n        let scale = this_equation[pivot].clone();\r\n        assert!(!scale.is_zero());\r\n        this_equation.iter_mut().for_each(|a| {\r\n            *a /= scale.clone();\r\n        });\r\n\r\n        rest_equations\r\n            .axis_iter_mut(Axis(0))\r\n            .into_par_iter()\r\n            .for_each(|mut eqn| {\r\n                let scale = eqn[pivot].clone();\r\n                if !scale.is_zero() {\r\n                    eqn.iter_mut()\r\n                        .zip(this_equation.iter())\r\n                        .for_each(|(e, e_)| *e -= e_.clone() * scale.clone());\r\n                }\r\n            });\r\n        pivot += 1;\r\n        if pivot >= m {\r\n            break;\r\n        }\r\n    }\r\n\r\n    // a is in row echelon form now\r\n    if pivots.len() > 1 {\r\n        for (i, pivot) in pivots[1..].iter().rev() {\r\n            let (mut rest_equations, this_equation) =\r\n                a.slice_mut(s![..=*i, ..]).split_at(Axis(0), *i);\r\n            let this_equation = this_equation.index_axis(Axis(0), 0);\r\n            rest_equations.axis_iter_mut(Axis(0)).for_each(|eqn| {\r\n                if eqn[*pivot].is_zero() {\r\n                    return;\r\n                }\r\n                let scale = eqn[*pivot].clone();\r\n                Zip::from(eqn)\r\n                    .and(this_equation)\r\n                    .par_apply(|e, e_| *e -= e_.clone() * scale.clone());\r\n            });\r\n        }\r\n    }\r\n\r\n    a\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\nOn Rust 1.44.0, this compiles.\r\n\r\nInstead, this happened:\r\n```\r\nerror[E0311]: the parameter type `T` may not live long enough\r\n  --> src/lib.rs:85:17\r\n   |\r\n85 | /                 Zip::from(eqn)\r\n86 | |                     .and(this_equation)\r\n   | |_______________________________________^\r\n   |\r\n   = note: the parameter type `T` must be valid for the empty lifetime...\r\n   = note: ...so that the reference type `&T` does not outlive the data it points at\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.46.0-nightly (346aec9b0 2020-07-11)\r\nbinary: rustc\r\ncommit-hash: 346aec9b02f3c74f3fce97fd6bda24709d220e49\r\ncommit-date: 2020-07-11\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.46.0-nightly\r\nLLVM version: 10.0\r\n```\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74429/timeline", "performed_via_github_app": null, "state_reason": "completed"}