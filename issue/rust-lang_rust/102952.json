{"url": "https://api.github.com/repos/rust-lang/rust/issues/102952", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102952/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102952/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102952/events", "html_url": "https://github.com/rust-lang/rust/issues/102952", "id": 1405870647, "node_id": "I_kwDOAAsO6M5Ty-I3", "number": 102952, "title": "Massive performance regression between `nightly-2022-08-12` and `nightly-2022-08-13`", "user": {"login": "Robbepop", "id": 8193155, "node_id": "MDQ6VXNlcjgxOTMxNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8193155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robbepop", "html_url": "https://github.com/Robbepop", "followers_url": "https://api.github.com/users/Robbepop/followers", "following_url": "https://api.github.com/users/Robbepop/following{/other_user}", "gists_url": "https://api.github.com/users/Robbepop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robbepop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robbepop/subscriptions", "organizations_url": "https://api.github.com/users/Robbepop/orgs", "repos_url": "https://api.github.com/users/Robbepop/repos", "events_url": "https://api.github.com/users/Robbepop/events{/privacy}", "received_events_url": "https://api.github.com/users/Robbepop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2022-10-12T09:21:43Z", "updated_at": "2023-03-06T20:47:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Usually I develop on the `stable` channel and wanted to see how [my project](https://github.com/paritytech/wasmi) performs on the upcoming `beta` or `nightly` channels. I saw [performance regressions between 30-80%](https://github.com/paritytech/wasmi/pull/507#issuecomment-1275152300) across the board in native and Wasm targets. Those regressions were confirmed by our benchmarking CI as can be seen by the link.\r\n\r\n## Was it the LLVM 15 Update?\r\n\r\nI conducted a bisect and found that the change happened between `nightly-2022-08-12` and `nightly-2022-08-13`.\r\nAfter short research I saw that Rust updated from LLVM 14 to 15 in exactly this time period: https://github.com/rust-lang/rust/pull/99464 Other merged commits in this time period were not as suspicious to me.\r\n\r\n## Past Regressions\r\n\r\nAlso this unfortunately [is not the first time we saw such massive regressions ...](https://github.com/rust-lang/rust/issues/95409).\r\nIt is extremely hard to craft a minimal code snippet out of `wasmi` since it is a very heavily optimized bunch of code with lots of interdependencies.\r\nUnfortunately [the `wasmi` project](https://github.com/paritytech/wasmi) is incredibly performance critical to us. Even 10-15% performance regression are a disaster to us let alone those 30-80% we just saw ...\r\n\r\n## Hint for Minimal Code Example\r\n\r\n**I have one major suspicion:** Due to [missing guaranteed tail calls in Rust](https://github.com/rust-lang/rfcs/issues/2691) we are heavily reliant on a non-guaranteed optimization for our `loop-switch` based interpreter hot path that pulls jumps to the match arms which results to very similar code as what threaded-code interpreter code would produce. The code that depends on this particular optimization [can be found here](https://github.com/paritytech/wasmi/blob/21e12da67a765c8c8b8a62595d2c9d21e1fa2ef6/crates/wasmi/src/engine/executor.rs#L84).\r\nThis suspicion is underlined by the fact that especially non call-intense workloads show most regressions in the linked benchmarks. This implies to me that the regressions have something to do with instruction dispatch.\r\n\r\n## Potential Future Solutions\r\n\r\n- The Rust compiler could add a few benchmarks concerning those `loop-switch` optimizations to [its set of benchmarks](https://github.com/rust-lang/rustc-perf/) so that future LLVM updates won't invalidate those optimizations. I am not sure how viable this approach is to the Rust compiler developers though. Also this only works if we find all the fragile parts that cause these regressions.\r\n- Ideally Rust offered abstractions that allow to develop efficient interpreters in Rust without relying on Rust/LLVM optimizations: for example guaranteed tail calls.\r\n\r\n## Reproduce\r\n\r\nThe current `stable` Rust channel is the following:\r\n\r\n```\r\nstable-x86_64-unknown-linux-gnu (default)\r\nrustc 1.64.0 (a55dd71d5 2022-09-19)\r\n```\r\n\r\nIn order to reproduce these benchmarks do the following:\r\n\r\n1) `git clone git@github.com:paritytech/wasmi.git`\r\n1) `cd wasmi`\r\n1) `git checkout 21e12da67a765c8c8b8a62595d2c9d21e1fa2ef6`\r\n1) `rustup toolchain install nightly-2022-08-12`\r\n1) `rustup toolchain install nightly-2022-08-13`\r\n1) `git submodule update --init --recursive`\r\n1) `cargo +stable bench --bench benches execute -- --save-baseline stable`\r\n1) `cargo +nightly-2022-08-12 bench --bench benches execute -- --baseline stable`\r\n1) `cargo +nightly-2022-08-13 bench --bench benches execute -- --baseline stable`", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102952/timeline", "performed_via_github_app": null, "state_reason": null}