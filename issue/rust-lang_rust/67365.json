{"url": "https://api.github.com/repos/rust-lang/rust/issues/67365", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67365/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67365/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67365/events", "html_url": "https://github.com/rust-lang/rust/issues/67365", "id": 538800614, "node_id": "MDU6SXNzdWU1Mzg4MDA2MTQ=", "number": 67365, "title": "[Library] Box::new reuses the same heap address for multi allocations", "user": {"login": "y1yang0", "id": 5010047, "node_id": "MDQ6VXNlcjUwMTAwNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5010047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y1yang0", "html_url": "https://github.com/y1yang0", "followers_url": "https://api.github.com/users/y1yang0/followers", "following_url": "https://api.github.com/users/y1yang0/following{/other_user}", "gists_url": "https://api.github.com/users/y1yang0/gists{/gist_id}", "starred_url": "https://api.github.com/users/y1yang0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y1yang0/subscriptions", "organizations_url": "https://api.github.com/users/y1yang0/orgs", "repos_url": "https://api.github.com/users/y1yang0/repos", "events_url": "https://api.github.com/users/y1yang0/events{/privacy}", "received_events_url": "https://api.github.com/users/y1yang0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-17T02:50:58Z", "updated_at": "2019-12-17T03:06:11Z", "closed_at": "2019-12-17T03:06:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "As the documentation explains, **Box::new will allocate memory on the heap and then place the argument into it**. But it would reuse the same heap address if allocation result is not stored someplace. We can reproduce this scenario by a simple snippet:\r\n```rust\r\nfn test() {\r\n    let addr = Box::new(1024);\r\n    println!(\"{:p}\", addr);\r\n}\r\nfn main(){\r\n    test();\r\n    test();\r\n}\r\n// Output\r\n0x7fd2fa402b70\r\n0x7fd2fa402b70\r\n```\r\nNo matter how many times I call test(), the program prints an identical address since I don't store the result beyond the test function, the allocated memory is immediately freed and the same heap address will be reused for further allocations. So why does Rust reuse the same heap address, even if the code is in an unsafe block? Is this normal behavior? Should we comment this behavior on Box::new's rustdoc? ", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67365/timeline", "performed_via_github_app": null, "state_reason": "completed"}