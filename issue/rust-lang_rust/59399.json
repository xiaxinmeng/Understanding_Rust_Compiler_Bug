{"url": "https://api.github.com/repos/rust-lang/rust/issues/59399", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/59399/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/59399/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/59399/events", "html_url": "https://github.com/rust-lang/rust/issues/59399", "id": 424625676, "node_id": "MDU6SXNzdWU0MjQ2MjU2NzY=", "number": 59399, "title": "UTF-8 parsing with state machine", "user": {"login": "jocutajar", "id": 10342879, "node_id": "MDQ6VXNlcjEwMzQyODc5", "avatar_url": "https://avatars.githubusercontent.com/u/10342879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jocutajar", "html_url": "https://github.com/jocutajar", "followers_url": "https://api.github.com/users/jocutajar/followers", "following_url": "https://api.github.com/users/jocutajar/following{/other_user}", "gists_url": "https://api.github.com/users/jocutajar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jocutajar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jocutajar/subscriptions", "organizations_url": "https://api.github.com/users/jocutajar/orgs", "repos_url": "https://api.github.com/users/jocutajar/repos", "events_url": "https://api.github.com/users/jocutajar/events{/privacy}", "received_events_url": "https://api.github.com/users/jocutajar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-24T15:30:04Z", "updated_at": "2019-04-26T08:35:57Z", "closed_at": "2019-03-30T13:35:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'd like to propose a cleaner approach (IMHO) to parse UTF-8 in `core::str:from_utf8` and friends. Not confident to optimize the ASCII fast forward in unsafe, but I think a [state machine would describe the problem better](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=974471087ef52f72660ebb1097877810) and is more readable.\r\n\r\nAs a bonus, the state machine could be made available for other more complex parsers. My case is for ANSI escape sequences which may not be valid UTF-8 but are embedded in UTF-8 streams. The machine exposes the number of `incomplete()` and `needed()` bytes, it can count the valid chars `seen()`. As such it would be very useful for general byte stream processing. It works with `no_std`, depending only on `core::str`.\r\n\r\nThe essence is quite simple:\r\n```\r\n\r\nimpl Utf8Machine {\r\n    pub fn turn(&mut self, input: &u8) -> Utf8Act {\r\n        /*\r\n         * legal utf-8 byte sequence\r\n         * http://www.unicode.org/versions/Unicode6.0.0/ch03.pdf - page 94\r\n         *\r\n         *  Code Points        1st       2s       3s       4s\r\n         * U+0000..U+007F     00..7F\r\n         * U+0080..U+07FF     C2..DF   80..BF\r\n         * U+0800..U+0FFF     E0       A0..BF   80..BF\r\n         * U+1000..U+CFFF     E1..EC   80..BF   80..BF\r\n         * U+D000..U+D7FF     ED       80..9F   80..BF\r\n         * U+E000..U+FFFF     EE..EF   80..BF   80..BF\r\n         * U+10000..U+3FFFF   F0       90..BF   80..BF   80..BF\r\n         * U+40000..U+FFFFF   F1..F3   80..BF   80..BF   80..BF\r\n         * U+100000..U+10FFFF F4       80..8F   80..BF   80..BF\r\n         */\r\n        use Utf8Act::*;\r\n        use Utf8State::*;\r\n        let seen = self.seen;\r\n        let done = (self.seen + 1, Normal, Done);\r\n        let (seen, state, act) = match (&self.state, input) {\r\n            (Normal, 0x00...0x7F) => done,\r\n            (Normal, 0x80...0xC1) => (seen, Normal, Invalid(1)),\r\n            (Normal, 0xC2...0xDF) => (seen, C___x_, NeedMore(1)),\r\n            (Normal, 0xE0...0xE0) => (seen, C__0__, NeedMore(2)),\r\n            (Normal, 0xE1...0xEC) => (seen, C__x__, NeedMore(2)),\r\n            (Normal, 0xED...0xED) => (seen, C__D__, NeedMore(2)),\r\n            (Normal, 0xEE...0xEF) => (seen, C__x__, NeedMore(2)),\r\n            (Normal, 0xF0...0xF0) => (seen, C_0___, NeedMore(3)),\r\n            (Normal, 0xF1...0xF3) => (seen, C_x___, NeedMore(3)),\r\n            (Normal, 0xF4...0xF4) => (seen, C_4___, NeedMore(3)),\r\n            (Normal, 0xF5...0xFF) => (seen, Normal, Invalid(1)),\r\n\r\n            (C___x_, 0x80...0xBF) => done,\r\n            (C__xx_, 0x80...0xBF) => done,\r\n            (C_xxx_, 0x80...0xBF) => done,\r\n\r\n            (C__0__, 0xA0...0xBF) => (seen, C__xx_, NeedMore(1)),\r\n            (C__D__, 0x80...0x9F) => (seen, C__xx_, NeedMore(1)),\r\n            (C__x__, 0x80...0xBF) => (seen, C__xx_, NeedMore(1)),\r\n            (C_0___, 0x90...0xBF) => (seen, C_xx__, NeedMore(2)),\r\n            (C_4___, 0x80...0x8F) => (seen, C_xx__, NeedMore(2)),\r\n            (C_x___, 0x80...0xBF) => (seen, C_xx__, NeedMore(2)),\r\n            (C_xx__, 0x80...0xBF) => (seen, C_xxx_, NeedMore(1)),\r\n\r\n            (C___x_, _) => (seen, Normal, Invalid(2)),\r\n            (C__0__, _) => (seen, Normal, Invalid(2)),\r\n            (C__D__, _) => (seen, Normal, Invalid(2)),\r\n            (C__x__, _) => (seen, Normal, Invalid(2)),\r\n            (C__xx_, _) => (seen, Normal, Invalid(3)),\r\n            (C_0___, _) => (seen, Normal, Invalid(2)),\r\n            (C_4___, _) => (seen, Normal, Invalid(2)),\r\n            (C_x___, _) => (seen, Normal, Invalid(2)),\r\n            (C_xx__, _) => (seen, Normal, Invalid(3)),\r\n            (C_xxx_, _) => (seen, Normal, Invalid(4)),\r\n        };\r\n        self.seen = seen;\r\n        self.state = state;\r\n        act\r\n    }\r\n}\r\n```\r\n\r\nThe playground includes applications of the state machine where one could implement the fast forward ASCII optimization.\r\n\r\n\r\n\r\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/59399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/59399/timeline", "performed_via_github_app": null, "state_reason": "completed"}