{"url": "https://api.github.com/repos/rust-lang/rust/issues/85863", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85863/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85863/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85863/events", "html_url": "https://github.com/rust-lang/rust/issues/85863", "id": 907584280, "node_id": "MDU6SXNzdWU5MDc1ODQyODA=", "number": 85863, "title": "iter::Fuse is unsound with how specialization currently behaves around HRTB fn pointers", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 889209675, "node_id": "MDU6TGFiZWw4ODkyMDk2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-iterators", "name": "A-iterators", "color": "f7e101", "default": false, "description": "Area: Iterators"}, {"id": 1966877457, "node_id": "MDU6TGFiZWwxOTY2ODc3NDU3", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-critical", "name": "P-critical", "color": "eb6420", "default": false, "description": "Critical priority"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2021-05-31T16:01:29Z", "updated_at": "2021-08-11T02:58:24Z", "closed_at": "2021-07-14T23:58:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "## New high-level explanation of this issue, also covering #85873\r\n\r\n`Fuse<T>` and `Zip<T, U>` have optimizations relying on specialization if their type parameters implement a trait (`FusedIterator` or `TrustedRandomAccess`, respectively).\r\n\r\nThese optimizations fundamentally change the way the iterator operates.\r\n\r\nAll type arguments are covariant. Coercing e.g. `Fuse<T>` to `Fuse<U>` if `U` is a subtype of `T` can \u201cswitch between\u201d these fundamentally different ways of operation if `T: !FusedIterator` and `U: FusedIterator` which can bring the iterator into an invalid state that can cause UB; the same kind of problem exists for `Zip`.\r\n\r\nFor `Zip`, this problem can be avoided if `TrustedRandomAccess` never differs between types and subtypes. `Copy`-dependent impls for e.g. `vec::IntoIter` have to be removed (PR #85874).\r\n\r\nRegarding `Fuse`: `FusedIterator` is a safe public trait, this is problematic. Some possible fixes: Either change `Fuse` to not get into a UB-causing invalid state by such a coercion (which kills some (or perhaps most) of the optimization offered by `Fuse`), or make `Fuse` invariant (but that\u2019s a breaking change!). [Here\u2019s another possible approach, but this one requires new language features](https://github.com/rust-lang/rust/issues/85863#issuecomment-853927262) and could be done in the future if an immediate fix that just makes `Fuse` less performant is taken now.\r\n\r\nSpecialization not differentiating between e.g. `Foo<'a>` and `Foo<'b>` made this issue harder to spot.\r\nBut `fn(&())` (that is, `for<'a> fn(&'a ())`) is a ~supertype~ _[edited:] subtype_ of `fn(&'static ())` and those are entirely different types.\r\n\r\n<hr>\r\n\r\n#### Previous start of issue description\r\n<br>\r\n\r\n```rust\r\nuse std::{\r\n    iter::{Fuse, FusedIterator},\r\n    marker::PhantomData,\r\n};\r\n\r\nstruct MyEmptyIterator<T>(PhantomData<T>, &'static str);\r\nimpl<T> Iterator for MyEmptyIterator<T> {\r\n    type Item = T;\r\n\r\n    fn next(&mut self) -> Option<Self::Item> {\r\n        println!(\"called next, {}\", self.1);\r\n        None\r\n    }\r\n}\r\n\r\nimpl FusedIterator for MyEmptyIterator<fn(&'static ())> {}\r\n\r\nfn main() {\r\n    let mut f = MyEmptyIterator::<fn(&())>(PhantomData, \"Hello, World\").fuse();\r\n    f.next();\r\n    let mut f = f as Fuse<MyEmptyIterator<fn(&'static ())>>;\r\n    f.next();\r\n}\r\n```\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 1.74s\r\n     Running `target/debug/playground`\r\ntimeout: the monitored command dumped core\r\n/playground/tools/entrypoint.sh: line 11:     8 Segmentation fault      timeout --signal=KILL ${timeout} \"$@\"\r\nStandard Output\r\ncalled next, Hello, World\r\n```\r\n([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=454884ffffcb4e6ba611712d7a929433))\r\n\r\n@rustbot label T-libs, T-libs-impl, T-compiler, A-specialization, A-iterators, A-typesystem, A-lifetimes, A-traits, C-bug\r\n~~someone please add the unsound label~~ thanks\r\n\r\n## Explanation\r\nThe types `for<'a> fn(&'a ())` (i.e. `fn(&())`) and `fn(&'static ())` do seem to be distinguished by rust\u2019s specialization. (I.e. the difference between the two types is not erased before the trait impl for specializing on `FusedIterator` is chosen.) But it\u2019s also possible to convert `Fuse<MyEmptyIterator<fn(&i32)>>` into `Fuse<MyEmptyIterator<fn(&'static i32)>>`. This way, the first call to `.next()` will use unspecialized code and write a `None` value into the field of `Fuse`, whereas the second call will use the specialized version that uses `intrinsics::unreachable()` to unwrap the contained `Option`.\r\n\r\n~~I haven\u2019t tested it, but I\u2019d guess that~~ the same thing might be possible using HRTB trait objects instead of function pointers. _(See comment [below](https://github.com/rust-lang/rust/issues/85863#issuecomment-852326566).)_\r\n\r\n## Possible fixes\r\nThis soundness issue would probably go away if, somehow, specialization would also consider types such as `fn(&())` and `fn(&'static ())` to be \u201cthe same type\u201d. _**Edit2:** I don\u2019t think that this approach is reasonable, and it\u2019s probably even impossible._\r\n\r\nThe easiest / fastest fix for now would probably be to remove all the `intrinsics::unreachable()` assertions in the implementation of `Fuse` and replace them either with `panic`s (which results in unexpected panicking but at least no unsoundness), or replace them with code that \u201cproperly\u201d handles the `None` case as the iterator being empty. In either case, performance benefits from `FusedIterator` implementations could probably somewhat be retained by somehow marking the `Some` case as the hot path and the `None` case as a cold path. (In the approach with the `None` case panicking, this would probably be automatically considered the cold path due to the panic.)\r\n\r\n_Edit:_ Yet another alternative fix is to make `Fuse<T>` invariant over `T`.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85863/timeline", "performed_via_github_app": null, "state_reason": "completed"}