{"url": "https://api.github.com/repos/rust-lang/rust/issues/84236", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84236/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84236/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84236/events", "html_url": "https://github.com/rust-lang/rust/issues/84236", "id": 859492105, "node_id": "MDU6SXNzdWU4NTk0OTIxMDU=", "number": 84236, "title": "Code compiled with rwpi relocation model is linked to `alloc` crate with static relocation model.", "user": {"login": "Acciente717", "id": 24835541, "node_id": "MDQ6VXNlcjI0ODM1NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/24835541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Acciente717", "html_url": "https://github.com/Acciente717", "followers_url": "https://api.github.com/users/Acciente717/followers", "following_url": "https://api.github.com/users/Acciente717/following{/other_user}", "gists_url": "https://api.github.com/users/Acciente717/gists{/gist_id}", "starred_url": "https://api.github.com/users/Acciente717/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Acciente717/subscriptions", "organizations_url": "https://api.github.com/users/Acciente717/orgs", "repos_url": "https://api.github.com/users/Acciente717/repos", "events_url": "https://api.github.com/users/Acciente717/events{/privacy}", "received_events_url": "https://api.github.com/users/Acciente717/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 55301954, "node_id": "MDU6TGFiZWw1NTMwMTk1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-Arm", "name": "O-Arm", "color": "6e6ec0", "default": false, "description": "Target: 32-bit Arm processors (armv6, armv7, thumb...), including 64-bit Arm in AArch32 state"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-04-16T06:11:14Z", "updated_at": "2021-04-16T12:20:20Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI'm working on ARM Cortex-m4 and buiding my code with `ropi-rwpi` relocation model. Register R9 should be reserved as the data segment base pointer under `rwpi`. By default, the compiled code is linked to pre-compiled `core` and `alloc` crate. These two pre-compiled crate should also be compiled with `ropi-rwpi`, but are not. I believe that my `ropi-rwpi` object file is linked to the `static` version of `core` and `alloc`. The evidence is that the code in `alloc` still treats R9 as a free-to-use register.\r\n\r\nI have a minimal example as follows.\r\n\r\n```rust\r\n#![no_main]\r\n#![no_std]\r\n#![feature(start)]\r\n#![feature(default_alloc_error_handler)]\r\n\r\nextern crate alloc;\r\nuse alloc::{format, alloc::{GlobalAlloc, Layout}};\r\nuse core::panic::PanicInfo;\r\n\r\n/// Just to have an allocator so that we can compile the code.\r\n/// It doesn't do anything correct but only gets the code compile.\r\nstruct DummyAllocator;\r\n\r\nunsafe impl GlobalAlloc for DummyAllocator {\r\n    unsafe fn alloc(&self, _layout: Layout) -> *mut u8 {\r\n        return 0x2001000 as *mut u8;\r\n    }\r\n\r\n    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\r\n}\r\n\r\n#[global_allocator]\r\nstatic DUMMY_ALLOCATOR: DummyAllocator = DummyAllocator;\r\n\r\n#[start]\r\n#[export_name = \"ENTRY_FUNC\"]\r\npub extern \"C\" fn main() {\r\n    // Here the problem occurs. The code in `alloc` crate will\r\n    // change R9 register.\r\n    let _s = format!(\"{}\", \"boom!\");\r\n    loop {}\r\n}\r\n\r\n#[panic_handler]\r\nfn panic(_info: &PanicInfo) -> ! {\r\n    loop {}\r\n}\r\n```\r\n\r\nIf we compile the code and examine one of the function belonging to `format!`, we can see that the instruction at `0x8000d94` is modifying the R9 register.\r\n```\r\n08000d82 _ZN4core3fmt9Formatter3pad17h508d4338e51c22a9E:\r\n 8000d82: f0 b5                         push    {r4, r5, r6, r7, lr}\r\n 8000d84: 03 af                         add     r7, sp, #12\r\n 8000d86: 2d e9 00 0f                   push.w  {r8, r9, r10, r11}\r\n 8000d8a: 83 b0                         sub     sp, #12\r\n 8000d8c: 0c 46                         mov     r4, r1\r\n 8000d8e: d0 f8 08 e0                   ldr.w   lr, [r0, #8]\r\n 8000d92: 01 69                         ldr     r1, [r0, #16]\r\n 8000d94: 91 46                         mov     r9, r2 ; Things go wrong starting from here...\r\n 8000d96: be f1 01 0f                   cmp.w   lr, #1\r\n 8000d9a: 13 d1                         bne     #38 <_ZN4core3fmt9Formatter3pad17h508d4338e5\r\n1c22a9E+0x46>\r\n 8000d9c: 01 29                         cmp     r1, #1\r\n... ... ... ...\r\n```\r\n\r\nI find a workaround, that is to build the `core` and `alloc` crate locally, by `cargo build -Z build-std=core,alloc`. Then, it will no longer modify the R9 register.\r\n\r\nSo it seems that when `rwpi` is used, `cargo` should either compile `core` and `alloc` locally or download the pre-compiled version in `rwpi`. Linking to the `static` version just wouldn't work.\r\n\r\nMy minimal code example is here: https://github.com/Acciente717/rwpi-wrong-link\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.53.0-nightly (7af1f55ae 2021-04-15)\r\nbinary: rustc\r\ncommit-hash: 7af1f55ae359e731c2c303f5d98e42a1a8163af0\r\ncommit-date: 2021-04-15\r\nhost: x86_64-apple-darwin\r\nrelease: 1.53.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84236/timeline", "performed_via_github_app": null, "state_reason": null}