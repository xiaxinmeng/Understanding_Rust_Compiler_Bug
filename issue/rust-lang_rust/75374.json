{"url": "https://api.github.com/repos/rust-lang/rust/issues/75374", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75374/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75374/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75374/events", "html_url": "https://github.com/rust-lang/rust/issues/75374", "id": 676391438, "node_id": "MDU6SXNzdWU2NzYzOTE0Mzg=", "number": 75374, "title": "8.5% runtime performance degradation for GNU-toolchain 1.45.x vs. 1.44.x in Windows", "user": {"login": "mvanthoor", "id": 40828618, "node_id": "MDQ6VXNlcjQwODI4NjE4", "avatar_url": "https://avatars.githubusercontent.com/u/40828618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvanthoor", "html_url": "https://github.com/mvanthoor", "followers_url": "https://api.github.com/users/mvanthoor/followers", "following_url": "https://api.github.com/users/mvanthoor/following{/other_user}", "gists_url": "https://api.github.com/users/mvanthoor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvanthoor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvanthoor/subscriptions", "organizations_url": "https://api.github.com/users/mvanthoor/orgs", "repos_url": "https://api.github.com/users/mvanthoor/repos", "events_url": "https://api.github.com/users/mvanthoor/events{/privacy}", "received_events_url": "https://api.github.com/users/mvanthoor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 266005714, "node_id": "MDU6TGFiZWwyNjYwMDU3MTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows-gnu", "name": "O-windows-gnu", "color": "6e6ec0", "default": false, "description": "Toolchain: GNU, Operating system: Windows"}, {"id": 1050784470, "node_id": "MDU6TGFiZWwxMDUwNzg0NDcw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-bisection", "name": "E-needs-bisection", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs bisection: https://github.com/rust-lang/cargo-bisect-rustc"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-08-10T20:18:23Z", "updated_at": "2022-09-28T22:44:34Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nFor some time now I've been writing a chess engine in Rust. I develop on Windows at this time, but because I wanted to use only open source software for this engine, the GNU toolchain has been my primary target. I've been using the MSVC toolchain for profiling. Generally, This was the speed ranking:\r\n\r\n1. GNU toolchain\r\n2. MSVC toolchain using the LLD linker (installed on MSYS2)\r\n3. MSVC toolchain with it's normal MS linker\r\n\r\nIn version 1.45.x, I've seen a great performance drop for the GNU toolchain, when running the compiled program.\r\n\r\nSteps to reproduce:\r\n\r\nClone this repository: https://github.com/mvanthoor/rustic\r\nInstall these toolchains:\r\nstable-x86_64-pc-windows-gnu\r\nstable-x86_64-pc-windows-msvc (default)\r\n1.44.1-x86_64-pc-windows-gnu\r\n1.44.1-x86_64-pc-windows-msvc*\r\nCompile the engine; make sure you have RUSTFLAGS set for cpu-type=skylake\r\nRun the engine \"rustic.exe\".\r\n\r\nWhat it will do is a so called \"perft\": a performance test. It calculates moves in a given position to a given depth, and outputs the found move counts and speed per depth to the screen. The point of \"perft\" is to match the numbers known to be correct values, and to make it as fast as possible. You do this for a few hundred positions: if all the numbers match up to the known correct ones, move generation in your engine can be considered bug-free.\r\n\r\nAs said, in version 1.45, with the GNU toolchain, I have observed a great performance drop. The results on my computer are below. The values given are those for Perft 6, which in this case, is the most interesting.\r\n\r\nThe reason is that everything below perft 6 is only a few seconds or fractions of seconds, so any deviation is within the margin of error on a modern CPU, while estimated run time for perft 7 in the position I'm using would be about 2.75 hours. The numbers for Perft 5 and 6 are always consistent, with a margin of +/- 0.5 seconds on my system.\r\n\r\nAs you can see, a compile made with the GNU 1.45.x toolchain ran in 217 seconds... slowest of the bunch, down from a class-leading performance of 200 seconds in version 1.44.x. The MSVC toolchain with the normal MS-linker did get a nice speed boost in version 1.45.\r\n\r\nTherefore, to obtain maximum speed, I would either need to stick with version GNU 1.44.1. Even if I switch to version MSVC version 1.45.2 to be able to upgrade, this is still slower than GNU 1.44.1.\r\n\r\n(Somewhere along the line during the last few versions, the MSVC/LLD combo first lost speed to 212 seconds, and then gained speed again to 207 seconds. I have seen compiles with this toolchain running at 203 seconds for Perft 6. From all the toolchains across versions, this is the least consistent.)\r\n\r\nIf you have any questions or need something tested, please ask. In the next Rust version, I'd very much like to see the GNU toolchain regain the speed it had with 1.44.1 and earlier.\r\n\r\n===============================================================================\r\n\r\nSummary\r\n\r\nPerft 6 results:\r\n\r\n1.\t1.44.1 GNU\t\t: 200.23 seconds\r\n2.\t1.45.2 MSVC \t\t: 202.88 seconds\r\n3.\t1.44.1 MSVC \t\t: 206.70 seconds\r\n4.\t1.45.2 MSVC/LLD    : 207.73 seconds\r\n5.\t1.44.1 MSVC/LLD    : 212.22 seconds\r\n6.\t1.45.2 GNU\t       : 217.18 seconds\r\n\r\n===============================================================================\r\n\r\n1.44.1-x86_64-pc-windows-gnu\r\nRUSTFLAGS=-C target-cpu=skylake\r\n\r\nPerft 1: 48 (0 ms, inf leaves/sec)\r\nPerft 2: 2039 (0 ms, inf leaves/sec)\r\nPerft 3: 97862 (2 ms, 48931000 leaves/sec)\r\nPerft 4: 4085603 (101 ms, 40451514 leaves/sec)\r\nPerft 5: 193690690 (4706 ms, 41158242 leaves/sec)\r\nPerft 6: 8031647685 (200227 ms, 40112710 leaves/sec)\r\nTotal time spent: 205036 ms\r\nExecution speed: 40136970 leaves/second\r\n\r\n===============================================================================\r\n\r\nstable-x86_64-pc-windows-gnu\r\nRUSTFLAGS=-C target-cpu=skylake\r\n\r\nPerft 1: 48 (0 ms, inf leaves/sec)\r\nPerft 2: 2039 (0 ms, inf leaves/sec)\r\nPerft 3: 97862 (2 ms, 48931000 leaves/sec)\r\nPerft 4: 4085603 (101 ms, 40451514 leaves/sec)\r\nPerft 5: 193690690 (4668 ms, 41493292 leaves/sec)\r\nPerft 6: 8031647685 (217176 ms, 36982206 leaves/sec)\r\nTotal time spent: 221947 ms\r\nExecution speed: 37078779 leaves/second\r\n\r\n===============================================================================\r\n\r\n1.44.1-x86_64-pc-windows-msvc\r\nRUSTFLAGS=-C target-cpu=skylake\r\n\r\nPerft 1: 48 (0 ms, inf leaves/sec)\r\nPerft 2: 2039 (0 ms, inf leaves/sec)\r\nPerft 3: 97862 (2 ms, 48931000 leaves/sec)\r\nPerft 4: 4085603 (105 ms, 38910504 leaves/sec)\r\nPerft 5: 193690690 (4827 ms, 40126515 leaves/sec)\r\nPerft 6: 8031647685 (206698 ms, 38856920 leaves/sec)\r\nTotal time spent: 211632 ms\r\nExecution speed: 38886009 leaves/second\r\n\r\n===============================================================================\r\n\r\nstable-x86_64-pc-windows-msvc\r\nRUSTFLAGS=-C target-cpu=skylake\r\n\r\nPerft 1: 48 (0 ms, inf leaves/sec)\r\nPerft 2: 2039 (0 ms, inf leaves/sec)\r\nPerft 3: 97862 (2 ms, 48931000 leaves/sec)\r\nPerft 4: 4085603 (102 ms, 40054931 leaves/sec)\r\nPerft 5: 193690690 (4728 ms, 40966728 leaves/sec)\r\nPerft 6: 8031647685 (202875 ms, 39589144 leaves/sec)\r\nTotal time spent: 207707 ms\r\nExecution speed: 39620830 leaves/second\r\n\r\n===============================================================================\r\n\r\n1.44.1-x86_64-pc-windows-msvc\r\nRUSTFLAGS=-C target-cpu=skylake\r\nUsing lld-link.exe through MSYS2\r\n\r\nPerft 1: 48 (0 ms, inf leaves/sec)\r\nPerft 2: 2039 (0 ms, inf leaves/sec)\r\nPerft 3: 97862 (2 ms, 48931000 leaves/sec)\r\nPerft 4: 4085603 (105 ms, 38910504 leaves/sec)\r\nPerft 5: 193690690 (4839 ms, 40027007 leaves/sec)\r\nPerft 6: 8031647685 (207272 ms, 38749313 leaves/sec)\r\nTotal time spent: 212218 ms\r\nExecution speed: 38778632 leaves/second\r\n\r\n===============================================================================\r\n\r\nstable-x86_64-pc-windows-msvc\r\nRUSTFLAGS=-C target-cpu=skylake\r\nUsing lld-link.exe through MSYS2\r\n\r\nPerft 1: 48 (0 ms, inf leaves/sec)\r\nPerft 2: 2039 (0 ms, inf leaves/sec)\r\nPerft 3: 97862 (2 ms, 48931000 leaves/sec)\r\nPerft 4: 4085603 (102 ms, 40054931 leaves/sec)\r\nPerft 5: 193690690 (4729 ms, 40958065 leaves/sec)\r\nPerft 6: 8031647685 (202895 ms, 39585242 leaves/sec)\r\nTotal time spent: 207728 ms\r\nExecution speed: 39616825 leaves/second\r\n\r\n**===============================================================================**\r\n\r\nHad a lot of issues with Cargo Bisect; many errors. Also if it does work, it seems to only compile the project and when it succeeds, it's OK. I'll have to look into this more. I'd appreciate some assistance. For now, I did the bisection by hand.\r\n\r\nStart: nightly-2020-04-23-x86_64-pc-windows-gnu (last 1.44.0 nightly) GOOD\r\n2020-05-14: GOOD\r\n2020-05-18: GOOD\r\n2020-05-20: GOOD\r\n2020-05-21: GOOD\r\n**2020-05-22: BAD\t\t<==**\r\nEnd: nightly-2020-06-05-x86_64-pc-windows-gnu (last 1.45.0 nightly) BAD\r\n\r\nThe 1.45.0 nightly from 2020-05-21 still gives the same results as the 1.44.0 nightly from 2020-04-23.\r\nThe next one, from 2020-05-22, is the first to have this performance degradation.\r\n\r\nI'd appreciate some assitance in using cargo-bisect to be able to find the PR that caused this slowdown.\r\n\r\n\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75374/timeline", "performed_via_github_app": null, "state_reason": null}