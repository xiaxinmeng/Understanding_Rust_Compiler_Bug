{"url": "https://api.github.com/repos/rust-lang/rust/issues/96634", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96634/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96634/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96634/events", "html_url": "https://github.com/rust-lang/rust/issues/96634", "id": 1222790924, "node_id": "I_kwDOAAsO6M5I4k8M", "number": 96634, "title": "Rustc \"overflow evaluating the requirement\" while it should work.", "user": {"login": "wdanilo", "id": 1623053, "node_id": "MDQ6VXNlcjE2MjMwNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1623053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdanilo", "html_url": "https://github.com/wdanilo", "followers_url": "https://api.github.com/users/wdanilo/followers", "following_url": "https://api.github.com/users/wdanilo/following{/other_user}", "gists_url": "https://api.github.com/users/wdanilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdanilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdanilo/subscriptions", "organizations_url": "https://api.github.com/users/wdanilo/orgs", "repos_url": "https://api.github.com/users/wdanilo/repos", "events_url": "https://api.github.com/users/wdanilo/events{/privacy}", "received_events_url": "https://api.github.com/users/wdanilo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-05-02T11:48:30Z", "updated_at": "2023-03-24T20:59:50Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Consider this code:\r\n\r\n```rust\r\n#![recursion_limit = \"256\"]\r\n\r\npub trait Visit<T: ?Sized> {\r\n    fn visit(&mut self, elem: &T);\r\n}\r\n\r\npub enum Ast {\r\n    Null,\r\n    App(Box<Ast>,Box<Ast>)\r\n}\r\n\r\nimpl<T> Visit<Ast> for T\r\nwhere T: Visit<Box<Ast>> {\r\n    fn visit(&mut self, elem: &Ast) {}\r\n}\r\n\r\nimpl<T,S:?Sized> Visit<Box<S>> for T\r\nwhere T: Visit<S> {\r\n    fn visit(&mut self, elem: &Box<S>) {}\r\n}\r\n\r\npub struct MyVisitor{}\r\n\r\nfn test() {\r\n    MyVisitor{}.visit(&Ast::Null);\r\n}\r\n```\r\n\r\nPlayground: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=9014c0167fc65f14c8a2668428fc5df4\r\n\r\nIt gives the error:\r\n\r\n```\r\nerror[[E0275]](https://doc.rust-lang.org/stable/error-index.html#E0275): overflow evaluating the requirement `MyVisitor: Visit<_>`\r\n  [--> src/lib.rs:25:17\r\n](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=9014c0167fc65f14c8a2668428fc5df4#)   |\r\n25 |     MyVisitor{}.visit(&Ast::Null);\r\n   |                 ^^^^^\r\n   |\r\n   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`playground`)\r\n   = note: required because of the requirements on the impl of `Visit<Box<_>>` for `MyVisitor`\r\n   = note: 256 redundant requirements hidden\r\n   = note: required because of the requirements on the impl of `Visit<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<Box<_>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` for `MyVisitor`\r\n\r\nFor more information about this error, try `rustc --explain E0275`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\nWhich does not make sense. Let me explain:\r\n1. We do `MyVisitor{}.visit(&Ast::Null)`, which requires a bound `MyVisitor: Visit<Ast>`.\r\n2. This bound is implemented (`impl<T> Visit<Ast> for T`), so another bound to be checked is added, which is `MyVisitor: Visit<Box<Ast>>`.\r\n3. This bound is again implemented (`impl<T,S:?Sized> Visit<Box<S>> for T`), which while resolving (`T` is `MyVisitor` and `S` is `Ast`) results in another bound to be resolved: `MyVisitor: Visit<Ast>`. However, this is our initial bound that we are currently resolving so it should compile fine. \r\n\r\nA few things to be noted:\r\n1. The code compiles if the function `test` is commented out (only the usage throws the error (the impls are correct)).\r\n2. The `Box<Box<Box<...` situation should never happen in the Rustc type resolver - there is something wrong happening under the hood.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96634/timeline", "performed_via_github_app": null, "state_reason": null}