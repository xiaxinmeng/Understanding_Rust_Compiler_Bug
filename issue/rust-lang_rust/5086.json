{"url": "https://api.github.com/repos/rust-lang/rust/issues/5086", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/5086/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/5086/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/5086/events", "html_url": "https://github.com/rust-lang/rust/issues/5086", "id": 11282566, "node_id": "MDU6SXNzdWUxMTI4MjU2Ng==", "number": 5086, "title": "RFC: Simplify rules on when traits can be used as objects", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-02-22T11:37:53Z", "updated_at": "2013-02-22T12:55:53Z", "closed_at": "2013-02-22T12:55:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The current rules for when traits can be used as object types are a bit complex and hard to explain and understand.  I propose the following:\n- A trait is said to be \"object-compatible\" if it meets the following requirements:\n  - No method uses the `Self` type more than once, including the receiver and return type positions.\n  - No use of by-value Self\n- For every object type `@T`, `&T`, or `~T`, the trait `T` must be an object-compatible trait\n- No \"static\" functions (see extension below)\n\nI am not sure what's the best place to report errors.  We can enforce this in various possible ways:\n1. Report an error for every object type with an incompatible trait `T`.\n2. Report an error whenever an object is created with an incompatible trait `T`.\n3. Report an error when a method is called on an incompatible trait `T`.\n\nEnforcing the rule at point (1) may result in a lot of errors but is probably the clearest thing.  No matter what, I think we should definitely enforce the rule at point (2).  It guarantees that no instances of illegal traits actually exist at runtime.  We'll have to be careful around point (3) anyhow because users may try to call illegal methods; I think right now we ICE (see #5085).\n## Justifications\n\nWhy these rules?  We need to prevent objects from being used in scenarios like this:\n\n```\ntrait Eq {\n    fn eq(&self, b: &Self) -> bool;\n}\n```\n\nsince we can't enforce this rule if we don't know what the `Self` type is.\n\nNote that it's not enough to say \"don't call eq()\" because of generic code:\n\n```\nfn foo<A: Eq>(a: &A, b: &A) -> bool { a.eq(b) }\n```\n\nUnless we're careful, one could call `foo()` on an instance of `@Eq` since `@Eq` implements `Eq`.\n## What we do today\n\nToday we do not permit `eq()` to be called and we say that if a trait is non-object-like, then `@Eq` does not implement `Eq`, thus preventing a generic method like `foo()` from being invoked.  This is maximally flexible and sound but (I think) overly complex and hard to explain.\n## Possible Extensions\n\nWe could in principle allow return types of `Self` and \"auto-box\" them.  This is an extension.\n\nIn some cases, we could also allow static functions, but we would need (a) auto-boxing for return values and (b) auto-unboxing on call.  We then have to make sure that Self does not appear in a by-value position or as part of another type, like here:\n\n```\ntrait Foo {\n  fn foo(v: &Self) { ... } // OK, we can \"auto-unwrap\" in monomorphization\n  fn foo(v: Self) { ... } // Not so good\n  fn foo(v: Option<Self>) { ... } // Uh-oh\n}\n```\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/5086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/5086/timeline", "performed_via_github_app": null, "state_reason": "completed"}