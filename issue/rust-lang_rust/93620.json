{"url": "https://api.github.com/repos/rust-lang/rust/issues/93620", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93620/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93620/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93620/events", "html_url": "https://github.com/rust-lang/rust/issues/93620", "id": 1123071842, "node_id": "I_kwDOAAsO6M5C8Ldi", "number": 93620, "title": "Arc::try_unwrap(data).unwrap()", "user": {"login": "h4cnull", "id": 56296790, "node_id": "MDQ6VXNlcjU2Mjk2Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/56296790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h4cnull", "html_url": "https://github.com/h4cnull", "followers_url": "https://api.github.com/users/h4cnull/followers", "following_url": "https://api.github.com/users/h4cnull/following{/other_user}", "gists_url": "https://api.github.com/users/h4cnull/gists{/gist_id}", "starred_url": "https://api.github.com/users/h4cnull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h4cnull/subscriptions", "organizations_url": "https://api.github.com/users/h4cnull/orgs", "repos_url": "https://api.github.com/users/h4cnull/repos", "events_url": "https://api.github.com/users/h4cnull/events{/privacy}", "received_events_url": "https://api.github.com/users/h4cnull/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-02-03T13:13:37Z", "updated_at": "2022-02-03T14:05:36Z", "closed_at": "2022-02-03T14:05:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n pub async fn detect(self:Arc<Self>,mut data:Data,is_active:bool) -> Data {        \r\n        let mut root_header_tmp = None;\r\n        let mut root_body_tmp = None;\r\n        let mut current_url = None;\r\n        //\u5148\u5904\u7406Active\u8bb0\u5f55\r\n        if is_active {\r\n            //\u5982\u679c\u662f\u4e3b\u52a8\u626b\u63cf\u7ed3\u679c\uff0c\u5c1d\u8bd5\u5c06\u7aef\u53e3\u89c6\u4e3ahttps http\u534f\u8bae\u5904\u7406\r\n            if let Some(rst) = http_banner_check(&data.host,data.port,self.conn_timeout,self.write_timeout,self.read_timeout).await {\r\n                data.protocol = rst.0.to_string();\r\n                if let Some(cert) = rst.1 {\r\n                    if let Ok(mut domains) = cert_parser(cert) {\r\n                        for _ in 0..domains.len() {\r\n                            let d = domains.pop().unwrap();\r\n                            if !data.cert_domains.contains(&d) {\r\n                                data.cert_domains.push(d);\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n            } else {\r\n                data.protocol = \"unknown\".to_string();\r\n            };\r\n        } else {\r\n            if &data.protocol == \"https\" {\r\n                if let Some(cert) = get_cert(&data.host,data.port,self.conn_timeout,self.write_timeout,self.read_timeout).await {\r\n                    if let Ok(mut domains) = cert_parser(cert) {\r\n                        for _ in 0..domains.len() {\r\n                            let d = domains.pop().unwrap();\r\n                            if !data.cert_domains.contains(&d) {\r\n                                data.cert_domains.push(d);\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n            };\r\n        }\r\n        let data = Arc::new(data);\r\n        let mut infos = Arc::new(Mutex::new(Vec::new()));\r\n        let mut level = Arc::new(Mutex::new(0));\r\n        if &data.protocol == \"http\" || &data.protocol == \"https\" {\r\n            data.url = Some(format!(\"{}://{}:{}\",&data.protocol,&data.host,&data.port));\r\n            let url = (&data.url).as_ref().unwrap();\r\n            //\u5982\u679c\u53d1\u751f\u4e86\u91cd\u5b9a\u5411\uff0curl\u5c31\u4e0d\u662f\u6839\u4e86\uff0c\u4ece\u91cd\u5b9a\u5411\u540e\u7684\u9875\u9762\u83b7\u53d6favicon\u5730\u5740\uff0c\u5982\u679c\u662f../\u5f00\u5934\u7684\u76f8\u5bf9\u5730\u5740\uff0c\u5c31\u9700\u8981\u5f53\u524durl\u6765\u5b9a\u4f4dfavicon\u5730\u5740  \r\n            if let Some(rst) = self.http_check(url, 1).await {\r\n                data.status_code = rst.0;\r\n                root_header_tmp = Some(rst.1);\r\n                root_body_tmp = Some(rst.2);\r\n                current_url = Some(rst.3);\r\n            };\r\n            //\u5982\u679c\u524d\u9762http\u8bf7\u6c42\u6210\u529f\u4e86\uff0c\u518d\u7ee7\u7eed\r\n            if root_header_tmp.is_some() && root_body_tmp.is_some() {\r\n                let root_header = root_header_tmp.unwrap();\r\n                let root_body = root_body_tmp.unwrap();\r\n                if let Some(caps) = self.server_regex.captures(&root_header) {\r\n                    if let Some(m) = caps.get(1) {\r\n                        let ser = m.as_str();\r\n                        let server = if ser.len() > 500 {\r\n                            [\"honeypot server? \",&ser[0..30],\"...\"].join(\"\")\r\n                        } else if ser.len() > 100 {\r\n                            [&ser[0..30],\"...\"].join(\"\")\r\n                        } else {\r\n                            ser.to_string()\r\n                        };\r\n                        infos.lock().await.push(server);\r\n                    };\r\n                };\r\n                if let Some(caps) = self.title_regex.captures(&root_body) {\r\n                    if let Some(m) = caps.get(1) {\r\n                        let new_title = m.as_str().trim();\r\n                        if !data.title.contains(new_title){\r\n                            data.title += new_title\r\n                        }\r\n                    };\r\n                };\r\n                let mut favicon_url = None;\r\n                if let Some(caps) = self.icon_regex.captures(&root_body) {\r\n                    if let Some(m) = caps.get(1) {\r\n                        let icon_html = m.as_str();\r\n                        //println!(\"favacion html {}\",icon_html); //////////////////////////\r\n                        if let Some(caps) = self.icon_href_regex.captures(icon_html) {\r\n                            if let Some(m) = caps.get(1) {\r\n                                let tmp = m.as_str();\r\n                                if tmp.starts_with(\"http://\") || tmp.starts_with(\"https://\") {\r\n                                    favicon_url = Some(tmp.to_string());\r\n                                } else if tmp.starts_with(\"/\") {\r\n                                    favicon_url = Some(url.to_string() + tmp)\r\n                                } else {  //\u5426\u5219\u5c31\u662f../ ./ xxx/favicon.ico \u8fd9\u6837\u7684\u683c\u5f0f\r\n                                    let current_url = current_url.unwrap();\r\n                                    favicon_url = Some(current_url + \"/\" + tmp)\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                };\r\n                if favicon_url.is_none() {   //\u5982\u679cfavicon url\u6ca1\u89e3\u6790\u51fa\u6765\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u5730\u5740\r\n                    favicon_url = Some(url.to_string()+\"/favicon.ico\");\r\n                };\r\n                //\u8ba1\u7b97favicon hash!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n                /////println!(\"favicon url {:?}\",favicon_url);                      //////////////\r\n                let favicon_hash = self.favicon_hash(&favicon_url.unwrap()).await;\r\n                if !self.disable_poc && data.status_code > 0 {\r\n                    let limit = self.poc_limit as usize;\r\n                    let mut handlers = Vec::with_capacity(limit);\r\n                    let (sc,rc) = async_channel::bounded(limit);\r\n                    let root_header = Arc::new(root_header);\r\n                    let root_body = Arc::new(root_body);\r\n                    let pocs = Arc::clone(&self.pocs);\r\n                    let handler = tokio::spawn(async move {\r\n                        for poc in pocs.iter() {\r\n                            let _ = sc.send(poc.clone()).await;\r\n                        }\r\n                    });\r\n                    for _ in 0..limit {\r\n                        let receiver = rc.clone();\r\n                        let me = Arc::clone(&self);\r\n                        let d = data.clone();\r\n                        let r_h = root_header.clone();\r\n                        let r_b = root_body.clone();\r\n                        handlers.push(\r\n                            tokio::spawn(async move {\r\n                                while let Ok(v) = receiver.recv().await {\r\n                                    if let Some(rst) = me.poc_matcher(d.as_ref(),v,r_h.as_ref(),r_b.as_ref(),favicon_hash).await {\r\n                                        let mut contain = false;\r\n                                        for s in infos.lock().await.iter() {\r\n                                            if s.contains(&rst.0) {\r\n                                                contain = true;\r\n                                            }\r\n                                        }\r\n                                        if ! contain {\r\n                                            infos.lock().await.push(rst.0);\r\n                                        }\r\n                                        if level.lock().await.lt(&rst.1) {\r\n                                            level.lock().await = rst.1;\r\n                                        }\r\n                                    };\r\n                                }\r\n                            })\r\n                        );\r\n                    }\r\n                    let _ = handler.await;\r\n                    for h in handlers {\r\n                        let x = h.await;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let mut data = Arc::try_unwrap(data).unwrap();  ////////////bug\r\n        return data;\r\n    }\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\n<version>\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: compiler\\rustc_codegen_llvm\\src\\context.rs:896:21: `fn_abi_of_instance(Detector::detect, [])` failed: the type `[type error]` has an unknown layout\r\n   --> src\\detect_mod\\mod.rs:113:5\r\n    |\r\n113 |     pub async fn detect(self:Arc<Self>,mut data:Data,is_active:bool) -> Data {\r\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nthread 'rustc' panicked at 'Box<dyn Any>', /rustc/db9d1b20bba1968c1ec1fc49616d4742c1725b4b\\compiler\\rustc_errors\\src\\lib.rs:1115:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.58.1 (db9d1b20b 2022-01-20) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nwarning: `ratel` (lib) generated 17 warnings\r\nerror: could not compile `ratel`; 17 warnings emitted\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "h4cnull", "id": 56296790, "node_id": "MDQ6VXNlcjU2Mjk2Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/56296790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h4cnull", "html_url": "https://github.com/h4cnull", "followers_url": "https://api.github.com/users/h4cnull/followers", "following_url": "https://api.github.com/users/h4cnull/following{/other_user}", "gists_url": "https://api.github.com/users/h4cnull/gists{/gist_id}", "starred_url": "https://api.github.com/users/h4cnull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h4cnull/subscriptions", "organizations_url": "https://api.github.com/users/h4cnull/orgs", "repos_url": "https://api.github.com/users/h4cnull/repos", "events_url": "https://api.github.com/users/h4cnull/events{/privacy}", "received_events_url": "https://api.github.com/users/h4cnull/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93620/timeline", "performed_via_github_app": null, "state_reason": "completed"}