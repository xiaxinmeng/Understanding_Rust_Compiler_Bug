{"url": "https://api.github.com/repos/rust-lang/rust/issues/22992", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/22992/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/22992/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/22992/events", "html_url": "https://github.com/rust-lang/rust/issues/22992", "id": 59607170, "node_id": "MDU6SXNzdWU1OTYwNzE3MA==", "number": 22992, "title": "Compile Bug: unexpected dereferenceable type", "user": {"login": "laijs", "id": 125671, "node_id": "MDQ6VXNlcjEyNTY3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/125671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laijs", "html_url": "https://github.com/laijs", "followers_url": "https://api.github.com/users/laijs/followers", "following_url": "https://api.github.com/users/laijs/following{/other_user}", "gists_url": "https://api.github.com/users/laijs/gists{/gist_id}", "starred_url": "https://api.github.com/users/laijs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laijs/subscriptions", "organizations_url": "https://api.github.com/users/laijs/orgs", "repos_url": "https://api.github.com/users/laijs/repos", "events_url": "https://api.github.com/users/laijs/events{/privacy}", "received_events_url": "https://api.github.com/users/laijs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-03-03T07:54:58Z", "updated_at": "2015-09-09T20:38:58Z", "closed_at": "2015-09-09T20:38:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I was compiling the code of [What are Rust's exact auto-dereferencing rules?](http://stackoverflow.com/questions/28519997/what-are-rusts-exact-auto-dereferencing-rules), it resulted a bug.\n\nThe code:\n\n``` rust\nstruct X { val: i32 }\nimpl std::ops::Deref for X {\n    type Target = i32;\n    fn deref(&self) -> &i32 { &self.val }\n}\n\n\ntrait            M                   { fn m(self); }\nimpl             M for i32           { fn m(self) { println!(\"i32::m()\"); } }\nimpl             M for X             { fn m(self) { println!(\"X::m()\"); } }\nimpl<'a>         M for &'a X         { fn m(self) { println!(\"&X::m()\"); } }\nimpl<'a, 'b>     M for &'a &'b X     { fn m(self) { println!(\"&&X::m()\"); } }\nimpl<'a, 'b, 'c> M for &'a &'b &'c X { fn m(self) { println!(\"&&&X::m()\"); } }\n\ntrait            RefM                   { fn refm(&self); }\nimpl             RefM for i32           { fn refm(&self) { println!(\"i32::refm()\"); } }\nimpl             RefM for X             { fn refm(&self) { println!(\"X::refm()\"); } }\nimpl<'a>         RefM for &'a X         { fn refm(&self) { println!(\"&X::refm()\"); } }\nimpl<'a, 'b>     RefM for &'a &'b X     { fn refm(&self) { println!(\"&&X::refm()\"); } }\nimpl<'a, 'b, 'c> RefM for &'a &'b &'c X { fn refm(&self) { println!(\"&&&X::refm()\"); } }\n\nstruct Y { val: i32 }\nimpl std::ops::Deref for Y {\n    type Target = i32;\n    fn deref(&self) -> &i32 { &self.val }\n}\n\nstruct Z { val: Y }\nimpl std::ops::Deref for Z {\n    type Target = Y;\n    fn deref(&self) -> &Y { &self.val }\n}\n\nstruct A;\nimpl std::marker::Copy for A {}\nimpl             M for             A { fn m(self) { println!(\"A::m()\"); } }\nimpl<'a, 'b, 'c> M for &'a &'b &'c A { fn m(self) { println!(\"&&&A::m()\"); } }\nimpl             RefM for             A { fn refm(&self) { println!(\"A::refm()\"); } }\nimpl<'a, 'b, 'c> RefM for &'a &'b &'c A { fn refm(&self) { println!(\"&&&A::refm()\"); } }\n\nfn main() {\n    // I'll use @ to denote left side of the dot operator\n    (*X{val:42}).m();        // i32::refm() , self == @\n    X{val:42}.m();           // X::m()      , self == @\n    (&X{val:42}).m();        // &X::m()     , self == @\n    (&&X{val:42}).m();       // &&X::m()    , self == @\n    (&&&X{val:42}).m();      // &&&X:m()    , self == @\n    (&&&&X{val:42}).m();     // &&&X::m()   , self == *@\n    (&&&&&X{val:42}).m();    // &&&X::m()   , self == **@\n\n    (*X{val:42}).refm();     // i32::refm() , self == @\n    X{val:42}.refm();        // X::refm()   , self == @\n    (&X{val:42}).refm();     // X::refm()   , self == *@\n    (&&X{val:42}).refm();    // &X::refm()  , self == *@\n    (&&&X{val:42}).refm();   // &&X::refm() , self == *@\n    (&&&&X{val:42}).refm();  // &&&X::refm(), self == *@\n    (&&&&&X{val:42}).refm(); // &&&X::refm(), self == **@\n\n    Y{val:42}.refm();        // i32::refm() , self == *@\n    Z{val:Y{val:42}}.refm(); // i32::refm() , self == **@\n\n    A.m();                   // A::m()      , self == @\n    // without the Copy trait, (&A).m() would be a compilation error:\n    // cannot move out of borrowed content\n    (&A).m();                // A::m()      , self == *@\n    (&&A).m();               // &&&A::m()   , self == &@\n    (&&&A).m();              // &&&A::m()   , self == @\n    A.refm();                // A::refm()   , self == @\n    (&A).refm();             // A::refm()   , self == *@\n    (&&A).refm();            // A::refm()   , self == **@\n    (&&&A).refm();           // &&&A::refm(), self == @\n}\n```\n\nAnd the rustc resulted:\n\n```\n# rustc --version\nrustc 1.0.0-dev (b4c965ee8 2015-03-02) (built 2015-03-03)\n\n# RUST_BACKTRACE=1 rustc deref.rs \nerror: internal compiler error: unexpected dereferenceable type Y\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\nnote: run with `RUST_BACKTRACE=1` for a backtrace\nthread 'rustc' panicked at 'Box<Any>', /home/laijs/work/rust-for-install/src/libsyntax/diagnostic.rs:189\n\nstack backtrace:\n   1:     0x7fcbf38f28ff - sys::backtrace::write::h577e1c6361768c02QyA\n   2:     0x7fcbf391b432 - panicking::on_panic::hef3a5ce737f27c37FDJ\n   3:     0x7fcbf385618a - rt::unwind::begin_unwind_inner::h51b5b5b16031b3c28jJ\n   4:     0x7fcbf0b6d9ed - rt::unwind::begin_unwind::h2713391746432164638\n   5:     0x7fcbf0b6e225 - diagnostic::Handler::bug::hfe31e16b8d71f021BHD\n   6:     0x7fcbf168f43b - session::Session::bug::h96f42bebaeb8e73fqup\n   7:     0x7fcbf3015677 - trans::consts::const_expr::hb0b128b357663b3c4vn\n   8:     0x7fcbf2faa3ae - trans::consts::get_const_expr_as_global::h21a61339d5edfef7ftn\n   9:     0x7fcbf2f64130 - trans::expr::trans::h0937a1423c3712b8Tth\n  10:     0x7fcbf2f9c817 - trans::callee::trans_args::hc57b3e614890b9dfz1g\n  11:     0x7fcbf2fa47e2 - trans::callee::trans_call_inner::h14447778500323265516\n  12:     0x7fcbf2fac8fc - trans::expr::trans_rvalue_dps_unadjusted::hb70513e148b158edgAi\n  13:     0x7fcbf2f62f5e - trans::expr::trans_into::h1fb70f0657f02021Lnh\n  14:     0x7fcbf2f61f74 - trans::controlflow::trans_stmt_semi::h3484c46defdec968n4d\n  15:     0x7fcbf2f63970 - trans::controlflow::trans_block::hda388713e3e88977a5d\n  16:     0x7fcbf302f26f - trans::base::trans_closure::hd3b6ad6febef58aaVct\n  17:     0x7fcbf2f4fff8 - trans::base::trans_fn::h63c86b5ef9723009Ont\n  18:     0x7fcbf2f4bb76 - trans::base::trans_item::hac26f7be10d65cfeGLt\n  19:     0x7fcbf3035d7c - trans::base::trans_crate::hff2787f0626d8852QHu\n  20:     0x7fcbf3f8cba2 - driver::phase_4_translate_to_llvm::hbc0b6a58c8ee4f80rNa\n  21:     0x7fcbf3f68198 - driver::compile_input::h9de6f092c5dfb6ebIba\n  22:     0x7fcbf4032a0e - run_compiler::hb5e94b85ec6e83edF5b\n  23:     0x7fcbf40305bc - thunk::F.Invoke<A, R>::invoke::h17784488277762929069\n  24:     0x7fcbf402f310 - rt::unwind::try::try_fn::h12687093362529061390\n  25:     0x7fcbf398fd08 - rust_try_inner\n  26:     0x7fcbf398fcf5 - rust_try\n  27:     0x7fcbf402f9fc - thunk::F.Invoke<A, R>::invoke::h5447655687859444331\n  28:     0x7fcbf3906f85 - sys::thread::thread_start::h8973b07a174c8c31j5E\n  29:     0x7fcbed77f529 - start_thread\n  30:     0x7fcbf34da77c - clone\n  31: 0xffffffffffffffff - <unknown>\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/22992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/22992/timeline", "performed_via_github_app": null, "state_reason": "completed"}