{"url": "https://api.github.com/repos/rust-lang/rust/issues/67792", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67792/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67792/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67792/events", "html_url": "https://github.com/rust-lang/rust/issues/67792", "id": 544416304, "node_id": "MDU6SXNzdWU1NDQ0MTYzMDQ=", "number": 67792, "title": "Tracking issue for RFC 2632, `impl const Trait for Ty` and `~const` (tilde const) syntax", "user": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}, {"id": 1769279746, "node_id": "MDU6TGFiZWwxNzY5Mjc5NzQ2", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_trait_impl", "name": "F-const_trait_impl", "color": "f9c0cc", "default": false, "description": "`#![feature(const_trait_impl)]`"}, {"id": 3537216829, "node_id": "LA_kwDOAAsO6M7S1aU9", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-perma-unstable", "name": "S-tracking-perma-unstable", "color": "4682b4", "default": false, "description": ""}], "state": "open", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 55, "created_at": "2020-01-02T00:37:24Z", "updated_at": "2022-12-28T07:54:10Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": "off-topic", "body": "This is the primary tracking issue for rust-lang/rfcs#2632.\r\n\r\nThe current RFC text can be found at https://internals.rust-lang.org/t/pre-rfc-revamped-const-trait-impl-aka-rfc-2632/15192\r\n\r\nThis RFC has not yet been accepted. It is being implemented on a provisional basis to [evaluate the potential fallout](https://github.com/rust-lang/rfcs/pull/2632#issuecomment-567699174).\r\n\r\ncc https://github.com/rust-lang/rust/issues/57563\r\n\r\nThe feature gate is `const_trait_impl`.\r\n\r\n### Components\r\n* `#[const_trait]` attribute\r\n* `impl const Trait`\r\n* `T: ~const Trait`\r\n* `append_const_msg` on `rustc_on_unimplemented`\r\n* `#[derive_const]`\r\n* `trait Destruct`\r\n\r\n### Open issues\r\n\r\n* [x] #88155\r\n* [x] [this test](https://github.com/rust-lang/rust/blob/cb406848eccc3665dfadb241d94fe27137bd0dcb/src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs) shows we can currently still call a `const fn` with a `Trait` bound even if the concrete type does not implement `const Trait`, but just `Trait`. This will fail later during evaluation. Some related discussion can be found in https://github.com/rust-lang/rust/pull/79287#discussion_r528341238\r\n* [x] There are no tests for *using* a `const impl` without *defining* one without the feature gate enabled. This should be added before any `impl const` is added to the standard library.\r\n* [x] We need some tests and probably code around `#[rustc_const_stable]` and `#[rustc_const_unstable]` so we can properly stabilize (or not) the constness of impls in the standard library\r\n* [x] #79450 shows that with default function bodies in the trait declaration, we can cause non-const functions to exist in `impl const Trait` impls by leaving out these default functions\r\n* [ ] We need to determine the final syntax for `~const`. (In the interim, we may want to switch this to use a `k#provisional_keyword` or similar.)\r\n* [ ] If we need `#[default_method_body_is_const]`, determine the syntax for it instead of existing as an attribute\r\n\r\n\r\n**When stabilizing: compiler changes are required**:\r\n\r\n* [ ] Error against putting `rustc_const_unstable` attribute on `const` `impl`s as they are now insta-stable.\r\n* [ ] Treat `default_method_body_is_const` bodies and `const` `impl` bodies as `stable` `const fn` bodies. We need to prevent accidentally stabilizing an implementation that uses unstable lang/lib `const fn` features. \r\n* [ ] Change Rustdoc to display `~const` bounds or what syntax we decided it to be.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67792/reactions", "total_count": 53, "+1": 53, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67792/timeline", "performed_via_github_app": null, "state_reason": null}