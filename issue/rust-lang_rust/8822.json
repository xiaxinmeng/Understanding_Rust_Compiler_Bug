{"url": "https://api.github.com/repos/rust-lang/rust/issues/8822", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/8822/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/8822/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/8822/events", "html_url": "https://github.com/rust-lang/rust/issues/8822", "id": 18659905, "node_id": "MDU6SXNzdWUxODY1OTkwNQ==", "number": 8822, "title": "RFC: Revise or at least rename the `fixed_stack_segment` and `rust_stack` annotations", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/20", "html_url": "https://github.com/rust-lang/rust/milestone/20", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/20/labels", "id": 452034, "node_id": "MDk6TWlsZXN0b25lNDUyMDM0", "number": 20, "title": "1.0", "description": "This will be the first major release of Rust, where we offer some guaranteed level of support and backwards compatibility.\r\n\r\nThe significant criteria for this release are:\r\n\r\n* Language backwards compatibility - All major features are in, and in their final form. Generally, the only new language features added after this milestone must be backwards compatible, or to fix soundness holes, though we do expect to have some leeway to make small incompatible fixes that have low impact on existing code bases.\r\n\r\n* Library stability - We have a system of measuring and ensuring the stability of API's, and a significant portion of the standard library is declared stable. Stable API's will not change. Large portions of the standard library need to be stable for 1.0, including primitive types, vectors, strings, option, numerics, collections, some I/O and concurrency.\r\n\r\n* User experience - The system is polished and the presentation is complete and professional. New users have a clear path to using and learning the system. This encompasses the web site, documentation, installation, and tooling.\r\n", "creator": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 376, "state": "closed", "created_at": "2013-10-10T18:48:33Z", "updated_at": "2016-08-28T23:13:24Z", "due_on": "2015-05-15T07:00:00Z", "closed_at": "2015-05-21T20:59:13Z"}, "comments": 16, "created_at": "2013-08-28T10:17:06Z", "updated_at": "2013-11-11T20:01:31Z", "closed_at": "2013-11-11T20:01:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, fns annotated with `fixed_stack_segment` (hereafter abbreviated as FSS) request a \"large\" stack (2MB, I think) from the system. They are supplied with a \"larger\" stack (3MB?). This overallocation typically ensures that if one FSS fn calls another, the second does not require a stack switch -- at least this is true if those calls occur quickly after the stack, without many intervening frames.\n\nIn addition, whenever an `extern \"C\" fn` is called, the `cstack` lint checks that the caller has a FSS annotation OR that the _callee_ is annotated \"rust_stack\", meaning that it operates in the red-zone.\n\nI propose a few revisions:\n- A new `#[stack]` annotation to replace the existing two\n- Small changes to the FSS allocation protocol in morestack\n- Use of guard pages (if we don't already)\n#### New annotation: `#[stack]`\n\nI propose a revised annotation `#[stack(size)]` where `size` can be:\n- A specific number of extra bytes.\n- `none` -- the default, no extra bytes, useful for annotating extern fns (see below)\n- `small`, `medium`, or `large` -- some arbitrarily chosen constants\n- `fixed` -- requests a FSS (see below for more details)\n\nThis annotations requests extra stack space on top of the usual amount that is required for the fns allocas. It can be used to alleviate specific performance problems with stack-switching. For example, if it happens in profiles that fn A calls fn B many times and fn B often has to switch stacks, that can be expensive: annotating fn A with `#[stack(medium)]` or some such may address the issue.\n\nExtern fn declarations can also be labelled with explicit `#[stack]` annotations. The cstack lint will ensure that amount of stack is available. The default is `fixed`. This mechanism replaces the current `rust_stack` annotation. Note that a `stack(none)` annotation would be used to indicate an extern fn that operates in the red zone.\n#### FSS allocation mechanism\n\nThe current \"overallocation\" scheme for FSS is risky. If a C callback invokes a Rust fn, this scheme could lead to multiple FSS stacks being allocated. I think in general once we switch to a FSS, we should not switch stacks ever again.\n\nTo this end, we can signal a FSS by setting the stack limit to 0 (for downward growing stacks). FSS functions will not check for 2MB of space but rather check for a limit of 0, indicating a FSS. They will call into morestack requesting `MAX_UINT` bytes. Morestack will allocate a fixed segment and set stack limit to 0 and then return.\n#### Guard pages\n\nTo prevent actual stack overrun, a guard page is used to catch programs that recurse too far (as is standard). Note that this also requires that we follow the typical protocol of \"touching\" the stack every 4K for functions with huge stack frames: hopefully LLVM has an option for this? It's not an unusual requirement afaik. (We probably want a guard page in all scenarios, not just FSS)\n#### LLVM inlining\n\nIn an ideal world, we would modify the LLVM inliner to avoid inlining functions with a larger stack annotation into functions with a smaller one. This prevents \"stack creep\" and avoids the need for the manual `#[inline(never)]` annotations we currently have.\n#### Parting thoughts\n\nI am unsure about the proper interaction between \"fixed\" stack segments and other stack segment requests. Above I outlined a protocol where switching to a fixed segment never switches again. I am not sure how well this interacts with the idea that tasks should default to a large stack and so forth. This might require some tweaking.\n\nThoughts? \n\nPaging @brson  and @pcwalton for sure, though I'm sure others will have an opinion.\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/8822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/8822/timeline", "performed_via_github_app": null, "state_reason": "completed"}