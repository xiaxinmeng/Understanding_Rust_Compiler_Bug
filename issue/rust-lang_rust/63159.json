{"url": "https://api.github.com/repos/rust-lang/rust/issues/63159", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63159/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63159/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63159/events", "html_url": "https://github.com/rust-lang/rust/issues/63159", "id": 475106426, "node_id": "MDU6SXNzdWU0NzUxMDY0MjY=", "number": 63159, "title": "Do copy[_nonoverlapping]/swap[_nonoverlapping] do typed copies?", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 40, "created_at": "2019-07-31T12:11:02Z", "updated_at": "2022-07-05T14:58:32Z", "closed_at": "2022-07-05T14:58:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following example ([godbolt](https://rust.godbolt.org/z/SDb-pj)):\r\n\r\n```rust\r\n#[repr(align(128))] #[derive(Copy, Clone)] pub struct A(u8);\r\n\r\npub unsafe fn foo(x: &A) -> A { \r\n    *x\r\n}\r\n\r\npub unsafe fn bar(x: &A) -> A { \r\n    let mut y: A = std::mem::uninitialized();\r\n    std::ptr::copy_nonoverlapping(\r\n        x as *const A, &mut y as *mut A, 1\r\n    );\r\n    y\r\n}\r\n```\r\n\r\nproduces the following LLVM-IR:\r\n\r\n```llvm\r\n%A = type { [0 x i8], i8, [127 x i8] }\r\n\r\ndefine void @_ZN7example3foo17h89c067fa0b9a17bcE(%A* noalias nocapture sret dereferenceable(128), %A* noalias nocapture readonly align 128 dereferenceable(128) %x) unnamed_addr #0 {\r\n  %1 = getelementptr inbounds %A, %A* %0, i64 0, i32 0, i64 0\r\n  %2 = getelementptr inbounds %A, %A* %x, i64 0, i32 0, i64 0\r\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 128 %1, i8* nonnull align 128 %2, i64 128, i1 false)\r\n  ret void\r\n}\r\n\r\ndefine void @_ZN7example3bar17hd5d27715385ba486E(%A* noalias nocapture sret dereferenceable(128), %A* noalias nocapture readonly align 128 dereferenceable(128) %x) unnamed_addr #0 {\r\n  %1 = getelementptr inbounds %A, %A* %x, i64 0, i32 0, i64 0\r\n  %2 = getelementptr inbounds %A, %A* %0, i64 0, i32 0, i64 0\r\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 128 %2, i8* nonnull align 128 %1, i64 128, i1 false) #2\r\n  ret void\r\n}\r\n```\r\n\r\nand machine code:\r\n\r\n```asm\r\nexample::foo:\r\n        mov     rax, rdi\r\n        movaps  xmm0, xmmword ptr [rsi + 112]\r\n        movaps  xmmword ptr [rdi + 112], xmm0\r\n        movaps  xmm0, xmmword ptr [rsi + 96]\r\n        movaps  xmmword ptr [rdi + 96], xmm0\r\n        movaps  xmm0, xmmword ptr [rsi + 80]\r\n        movaps  xmmword ptr [rdi + 80], xmm0\r\n        movaps  xmm0, xmmword ptr [rsi + 64]\r\n        movaps  xmmword ptr [rdi + 64], xmm0\r\n        movaps  xmm0, xmmword ptr [rsi]\r\n        movaps  xmm1, xmmword ptr [rsi + 16]\r\n        movaps  xmm2, xmmword ptr [rsi + 32]\r\n        movaps  xmm3, xmmword ptr [rsi + 48]\r\n        movaps  xmmword ptr [rdi + 48], xmm3\r\n        movaps  xmmword ptr [rdi + 32], xmm2\r\n        movaps  xmmword ptr [rdi + 16], xmm1\r\n        movaps  xmmword ptr [rdi], xmm0\r\n        ret\r\n\r\nexample::bar:\r\n        mov     rax, rdi\r\n        movaps  xmm0, xmmword ptr [rsi + 112]\r\n        movaps  xmmword ptr [rdi + 112], xmm0\r\n        movaps  xmm0, xmmword ptr [rsi + 96]\r\n        movaps  xmmword ptr [rdi + 96], xmm0\r\n        movaps  xmm0, xmmword ptr [rsi + 80]\r\n        movaps  xmmword ptr [rdi + 80], xmm0\r\n        movaps  xmm0, xmmword ptr [rsi + 64]\r\n        movaps  xmmword ptr [rdi + 64], xmm0\r\n        movaps  xmm0, xmmword ptr [rsi]\r\n        movaps  xmm1, xmmword ptr [rsi + 16]\r\n        movaps  xmm2, xmmword ptr [rsi + 32]\r\n        movaps  xmm3, xmmword ptr [rsi + 48]\r\n        movaps  xmmword ptr [rdi + 48], xmm3\r\n        movaps  xmmword ptr [rdi + 32], xmm2\r\n        movaps  xmmword ptr [rdi + 16], xmm1\r\n        movaps  xmmword ptr [rdi], xmm0\r\n        ret\r\n```\r\n\r\nwhere 128 bytes are copied every time a value of type A is moved/copied/read/... \r\n\r\nHowever, one actually only has to copy a single byte, since all other bytes are trailing padding. The expected machine code is ([godbolt](https://rust.godbolt.org/z/B5l1yi)):\r\n\r\n```asm\r\nexample::foo:\r\n        mov     al, byte ptr [rdi]\r\n        ret\r\n\r\nexample::bar:\r\n        mov     al, byte ptr [rdi]\r\n        ret\r\n```\r\n\r\n\r\ncc @nikic @rkruppe ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63159/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63159/timeline", "performed_via_github_app": null, "state_reason": "completed"}