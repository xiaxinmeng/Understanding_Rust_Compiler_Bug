{"url": "https://api.github.com/repos/rust-lang/rust/issues/23217", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/23217/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/23217/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/23217/events", "html_url": "https://github.com/rust-lang/rust/issues/23217", "id": 60333551, "node_id": "MDU6SXNzdWU2MDMzMzU1MQ==", "number": 23217, "title": "rustc panics during compilation", "user": {"login": "CtrlZvi", "id": 4283627, "node_id": "MDQ6VXNlcjQyODM2Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/4283627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CtrlZvi", "html_url": "https://github.com/CtrlZvi", "followers_url": "https://api.github.com/users/CtrlZvi/followers", "following_url": "https://api.github.com/users/CtrlZvi/following{/other_user}", "gists_url": "https://api.github.com/users/CtrlZvi/gists{/gist_id}", "starred_url": "https://api.github.com/users/CtrlZvi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CtrlZvi/subscriptions", "organizations_url": "https://api.github.com/users/CtrlZvi/orgs", "repos_url": "https://api.github.com/users/CtrlZvi/repos", "events_url": "https://api.github.com/users/CtrlZvi/events{/privacy}", "received_events_url": "https://api.github.com/users/CtrlZvi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-03-09T12:04:27Z", "updated_at": "2015-11-02T21:56:53Z", "closed_at": "2015-11-02T21:56:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\n\n``` rust\n#![feature(core, libc, os, unicode)]\nextern crate libc;\nextern crate unicode;\n\nuse std::mem;\nuse std::num::ToPrimitive;\nuse std::os;\n\n#[cfg(target_family = \"windows\")]\n#[link(name = \"kernel32\")]\n#[allow(non_snake_case)]\nextern \"system\" {\n    fn SetEnvironmentVariableW(lpName : *const ::libc::wchar_t, lpValue: *const ::libc::wchar_t) -> ::libc::c_int;\n    fn GetModuleHandleW(lpModuleName : *const ::libc::wchar_t) -> HINSTANCE;\n}\n\n#[stable]\npub fn get_module_handle(name: Option<&str>) -> Result<Module, String> {\n    let handle = match name {\n        Some(val) => {\n            let n = unicode::str::Utf16Encoder::new(val.chars()).collect::<Vec<::libc::wchar_t>>();\n            unsafe { GetModuleHandleW(n.as_ptr()) }\n        },\n        None => unsafe { GetModuleHandleW(0 as *const ::libc::wchar_t) },\n    };\n    match handle {\n        val if val != 0 as HINSTANCE => Ok(Module { handle : val }),\n        _ => Err(os::last_os_error()),\n    }\n}\n\n#[stable]\npub fn set_environment_variable(name: &str, value: &str) -> Result<(), String> {\n    let n = unicode::str::Utf16Encoder::new(name.chars()).collect::<Vec<::libc::wchar_t>>();\n    let v = unicode::str::Utf16Encoder::new(value.chars()).collect::<Vec<::libc::wchar_t>>();\n    let error = unsafe { SetEnvironmentVariableW(n.as_ptr(), v.as_ptr()) };\n    match error {\n        0 => Err(os::last_os_error()),\n        _ => Ok(()),\n    }\n}\n\ntype HANDLE = *mut ::libc::c_void;\ntype HWND = HANDLE;\ntype HMENU = HANDLE;\ntype HINSTANCE = HANDLE;\ntype HICON = HANDLE;\ntype HCURSOR = HANDLE;\ntype HBRUSH = HANDLE;\npub type WNDPROC = extern \"system\" fn(HWND, u32, ::libc::uintptr_t, ::libc::uintptr_t) -> ::libc::uintptr_t;\n\n#[repr(C)]\n#[allow(non_snake_case)]\nstruct WNDCLASSEX {\n    cbSize : ::libc::c_uint,\n    style : ::libc::c_uint,\n    lpfnWndProc : WNDPROC,\n    cbClsExtra : ::libc::c_int,\n    cbWndExtra : ::libc::c_int,\n    hInstance : HINSTANCE,\n    hIcon : HICON,\n    hCursor : HCURSOR,\n    hbrBackground : HBRUSH,\n    lpszMenuName : *const ::libc::wchar_t,\n    lpszClassName : *const ::libc::wchar_t,\n    hIconSm : HICON,\n}\n\n#[repr(C)]\n#[allow(non_snake_case)]\nstruct POINT {\n    x : ::libc::c_long,\n    y : ::libc::c_long,\n}\n\n#[repr(C)]\n#[allow(non_snake_case)]\nstruct MSG {\n    hwnd : HWND,\n    message : ::libc::c_uint,\n    wParam : ::libc::uintptr_t,\n    lParam : ::libc::uintptr_t,\n    time : u32,\n    pt : POINT,\n}\n\n#[cfg(target_family = \"windows\")]\n#[link(name = \"user32\")]\n#[allow(non_snake_case)]\nextern \"system\" {\n    fn CreateWindowExW(dwExStyle: u32, lpClassName: *const ::libc::wchar_t, lpWindowName: *const ::libc::wchar_t, dwStyle: u32, x: ::libc::c_int, y: ::libc::c_int, nWidth: ::libc::c_int, nHeight: ::libc::c_int, hWndParent: HWND, hMenu : HMENU, hInstance : HINSTANCE, lpParam : *mut ::libc::c_void) -> HWND;\n    fn ShowWindow(hWnd : HWND, nCmdShow : ::libc::c_int) -> ::libc::c_int;\n    fn RegisterClassExW(lpwcx : *const WNDCLASSEX) -> u16;\n    fn GetMessageW(lpMsg : *mut MSG, hWnd : HWND, wMsgFilterMin : ::libc::c_uint, wMsgFilterMax : ::libc::c_uint) -> ::libc::c_int;\n    fn TranslateMessage(lpMsg : *const MSG) -> ::libc::c_int;\n    fn DispatchMessageW(lpMsg : *const MSG) -> ::libc::uintptr_t;\n    fn DefWindowProcW(hWnd : HWND, Msg : u32, wParam : ::libc::uintptr_t, lParam : ::libc::uintptr_t) -> ::libc::uintptr_t;\n}\n\n#[unstable]\npub fn default_window_procedure(window_handle : *mut ::libc::c_void, message_identifier : u32, parameter1 : ::libc::uintptr_t, parameter2 : ::libc::uintptr_t) -> ::libc::uintptr_t {\n    unsafe { DefWindowProcW(window_handle, message_identifier, parameter1, parameter2) }\n}\n\npub struct Message {\n    message : MSG,\n    pub number : ::libc::c_uint,\n}\n\n#[unstable]\npub fn show_window(window : &Window, show_command : ::libc::c_int) -> bool {\n    match unsafe { ShowWindow(window.handle, show_command) } {\n        0 => true,\n        _ => false,\n    }\n}\n\n#[unstable]\npub fn get_message(window : Option<&Window>, message_filter_minimum : ::libc::c_uint, message_filter_maximum : ::libc::c_uint) -> Result<Message, String> {\n    let mut message = MSG {\n        hwnd : 0 as HWND,\n        message : 0,\n        wParam : 0,\n        lParam : 0,\n        time : 0,\n        pt : POINT { x : 0, y : 0 },\n    };\n    let result = unsafe { GetMessageW(\n        &mut message,\n        match window {\n            Some(val) => val.handle,\n            None => 0 as HWND,\n        },\n        message_filter_minimum,\n        message_filter_maximum\n    ) };\n    match result {\n        -1 => Err(os::last_os_error()),\n        0 => Ok(Message { number : message.message, message : message }), // TODO(zeffron 2015 03 03) Figure out how to indicate WM_QUIT without requiring the user to read the message number (probably via Enum)\n        _ => Ok(Message { number : message.message, message : message,  }),\n    }\n}\n\n#[unstable]\npub fn translate_message(message : &Message) -> bool {\n    let result = unsafe { TranslateMessage(&message.message) };\n    match result {\n        0 => false,\n        _ => true,\n    }\n}\n\n#[unstable]\npub fn dispatch_message(message : &Message) -> ::libc::uintptr_t {\n    unsafe { DispatchMessageW(&message.message) }\n}    \n\npub struct WindowClassExtended {\n    pub style : ::libc::c_uint,\n    pub window_procedure : WNDPROC,\n    pub class_extra : ::libc::c_int,\n    pub window_extra : ::libc::c_int,\n    pub module : Option<Module>,\n    pub icon : Option<Icon>,\n    pub cursor : Option<Cursor>,\n    pub background_brush : Option<Brush>,\n    pub menu_name : String,\n    pub class_name : String,\n    pub small_icon : Option<Icon>,\n}\n\n#[unstable]\npub fn register_class_extended(class : WindowClassExtended) -> Result<u16, String> {\n    let window_class = WNDCLASSEX {\n        cbSize : mem::size_of::<WNDCLASSEX>().to_u32().unwrap(),\n        style : class.style,\n        lpfnWndProc : class.window_procedure,\n        cbClsExtra : class.class_extra,\n        cbWndExtra : class.window_extra,\n        hInstance : match class.module {\n            Some(val) => val.handle,\n            None => 0 as *mut ::libc::c_void,\n        },\n        hIcon : match class.icon {\n            Some(val) => val.handle,\n            None => 0 as *mut ::libc::c_void,\n        },\n        hCursor : match class.cursor {\n            Some(val) => val.handle,\n            None => 0 as *mut ::libc::c_void,\n        },\n        hbrBackground : match class.background_brush {\n            Some(val) => val.handle,\n            None => 0 as *mut ::libc::c_void,\n        },\n        lpszMenuName : unicode::str::Utf16Encoder::new(class.menu_name.chars()).collect::<Vec<::libc::wchar_t>>().as_ptr(),\n        lpszClassName : unicode::str::Utf16Encoder::new(class.class_name.chars()).collect::<Vec<::libc::wchar_t>>().as_ptr(),\n        hIconSm : match class.small_icon {\n            Some(val) => val.handle,\n            None => 0 as *mut ::libc::c_void,\n        },\n    };\n    let atom = unsafe { RegisterClassExW(&window_class) };\n    match atom {\n        0 =>  Err(os::last_os_error()),\n        val => Ok(val),\n    }\n}\n\npub struct Window {\n    handle : HWND,\n}\n\npub struct Menu {\n    handle : HMENU,\n}\n\npub struct Module {\n    handle : HINSTANCE,\n}\n\npub struct Icon {\n    handle : HICON,\n}\n\npub struct Cursor {\n    handle : HCURSOR,\n}\n\npub struct Brush {\n    handle : HBRUSH,\n}\n\nconst CW_USEDEFAULT : ::libc::c_int = -0x80000000;\n\n#[unstable]\npub fn create_window_extended(extended_style: u32, class_name: Option<&str>, window_name: Option<&str>, style: u32, x: Option<::libc::c_int>, y: Option<::libc::c_int>, width: Option<::libc::c_int>, height: Option<::libc::c_int>, parent_window : Option<&Window>, menu : Option<&Menu>, module : Option<&Module>) -> Result<Window, String> {\n    let window_handle = unsafe { CreateWindowExW(\n        extended_style,\n        match class_name {\n            Some(val) => unicode::str::Utf16Encoder::new(val.chars()).collect::<Vec<::libc::wchar_t>>().as_ptr(),\n            None => 0 as *const ::libc::wchar_t,\n        },\n        match window_name {\n            Some(val) => unicode::str::Utf16Encoder::new(val.chars()).collect::<Vec<::libc::wchar_t>>().as_ptr(),\n            None => 0 as *const ::libc::wchar_t,\n        },\n        style,\n        match x {\n            Some(val) => val,\n            None => CW_USEDEFAULT,\n        },\n        match y {\n            Some(val) => val,\n            None => CW_USEDEFAULT,\n        },\n        match width {\n            Some(val) => val,\n            None => CW_USEDEFAULT,\n        },\n        match height {\n            Some(val) => val,\n            None => CW_USEDEFAULT,\n        },\n        match parent_window {\n            Some(val) => val.handle,\n            None => 0 as HWND,\n        },\n        match menu {\n            Some(val) => val.handle,\n            None => 0 as HMENU,\n        },\n        match module{\n            Some(val) => val.handle,\n            None => 0 as HINSTANCE,\n        },\n        0 as *mut ::libc::c_void\n    )};\n    match window_handle {\n        val if val == 0 as HWND => Err(os::last_os_error()),\n        val => Ok(Window { handle : val as *mut ::libc::c_void }),\n    }\n}\n\n#[stable]\n#[repr(u32)]\npub enum ClassStyle {\n    VerticalRedraw = 0x0001,\n    HorizontalRedraw = 0x0002,\n    DoubleClicks = 0x0008,\n    OwnDeviceContext = 0x0020,\n    ClassDeviceContext = 0x0040,\n    ParentDeviceContext = 0x0080,\n    NoClose = 0x0200,\n    SaveBits = 0x0800,\n    ByteAlignClient = 0x1000,\n    ByteAlignWindow = 0x2000,\n    GlobalClass = 0x4000,\n    DropShadow = 0x00020000,\n}\n\n#[stable]\n#[repr(u32)]\npub enum WindowStyle {\n    Border = 0x00800000,\n    Caption = 0x00C00000,\n    Child = 0x40000000,\n    ClipChildren = 0x02000000,\n    ClipSiblings = 0x04000000,\n    Disabled = 0x08000000,\n    DialogFrame = 0x00400000,\n    Group = 0x00020000,\n    HorizontalScrollBar = 0x00100000,\n    Maximize = 0x01000000,\n    MaximizeBox = 0x00010000 | WindowStyle::SystemMenu as u32,\n    Minimize = 0x20000000,\n    MinimizeBox = 0x00020000 | WindowStyle::SystemMenu as u32,\n    Overlapped = 0x00000000,\n    OverlappedWindow = WindowStyle::Overlapped as u32 | WindowStyle::Caption as u32 | WindowStyle::SystemMenu as u32 | WindowStyle::ThickFrame as u32 | WindowStyle::MinimizeBox as u32 | WindowStyle::MaximizeBox as u32,\n    Popup = 0x80000000,\n    PopupWindow = WindowStyle::Popup as u32 | WindowStyle::Border as u32 | WindowStyle::SystemMenu as u32,\n    SizeBox = 0x00040000,\n    SystemMenu = 0x00080000,\n    TabStop = 0x00010000,\n    Visible = 0x10000000,\n    VerticalScrollBar = 0x00200000,\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_get_module_handle_current_module() {\n        assert!(match get_module_handle(None) {\n            Ok(_) => true,\n            Err(_) => false,\n        });\n    }\n\n    #[test]\n    fn test_get_module_handle_unknown_module() {\n        assert!(match get_module_handle(\"foo\") {\n            Ok(_) => false,\n            Err(_) => true,\n        });\n    }\n\n    #[test]\n    fn test_set_environment_variable() {\n        use std::env;\n\n        let name = \"key\";\n        let value = \"value\";\n        assert!(set_environment_variable(name, value) == Ok(()));\n        assert!(env::var(name) == Ok(value.to_string()));\n    }\n\n    #[test]\n    fn test_register_class_extended() {\n        extern \"system\" fn window_procedure(window_handle : *mut ::libc::c_void, message_identifier : u32, parameter1 : ::libc::uintptr_t, parameter2 : ::libc::uintptr_t) -> ::libc::uintptr_t {\n            match message_identifier {\n                _ => default_window_procedure(window_handle, message_identifier, parameter1, parameter2)\n            }\n        }\n        let window_class = WindowClassExtended {\n            style : 0,\n            window_procedure : window_procedure,\n            class_extra : 0,\n            window_extra : 0,\n            module : None,\n            icon : None,\n            cursor : None,\n            background_brush : None,\n            menu_name : \"\".to_string(),\n            class_name : \"RustSampleWindowClass\".to_string(),\n            small_icon : None,\n        };\n        let atom = register_class_extended(window_class);\n        assert!(match atom {\n            Ok(_) => true,\n            Err(_) => false,\n        });\n    }\n}\n```\n\nThen ran this command: \n\n``` sh\nrustc minimumrepro.rs --crate-name win32 --crate-type lib -g --emit=dep-info,link --verbose\n```\n\nI expected to see successful compilation followed by tests running.\n\nInstead, this happened:\n\n```\nerror: internal compiler error: unexpected panic\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/m\naster/CONTRIBUTING.md#bug-reports\nnote: run with `RUST_BACKTRACE=1` for a backtrace\nthread 'rustc' panicked at 'path not fully resolved: PathResolution { base_def:\nDefTy(DefId { krate: 0, node: 894 }, true), last_private: LastMod(AllPublic), de\npth: 1 }', C:/bot/slave/nightly-dist-rustc-win-64/build/src/librustc\\middle\\def.\nrs:79\n\nstack backtrace:\n   1:         0x71217094 - sys::backtrace::write::h669f8e0f2a2c73f7UVA\n   2:         0x71231708 - rt::unwind::register::hcda86f4971e7940bZpJ\n   3:         0x71183427 - rt::unwind::begin_unwind_inner::ha77dc9ac3cfb5574onJ\n   4:         0x71183beb - rt::unwind::begin_unwind_fmt::h8ea5d25622c032c4ZlJ\n   5:          0x15991f7 - middle::const_eval::eval_const_expr_partial::ha9d8d88f013a10ad7lh\n   6:          0x1597788 - middle::const_eval::eval_const_expr_partial::ha9d8d88f013a10ad7lh\n   7:          0x1597baa - middle::const_eval::eval_const_expr_partial::ha9d8d88f013a10ad7lh\n```\n## Meta\n\n`rustc --version --verbose`:\nrustc 1.0.0-nightly (2fc8b1e7c 2015-03-07) (built 2015-03-08)\nbinary: rustc\ncommit-hash: 2fc8b1e7c4ca741e59b144c331d69bf189759452\ncommit-date: 2015-03-07\nbuild-date: 2015-03-08\nhost: x86_64-pc-windows-gnu\nrelease: 1.0.0-nightly\n\nBacktrace:\n   1:         0x71217094 - sys::backtrace::write::h669f8e0f2a2c73f7UVA\n   2:         0x71231708 - rt::unwind::register::hcda86f4971e7940bZpJ\n   3:         0x71183427 - rt::unwind::begin_unwind_inner::ha77dc9ac3cfb5574onJ\n   4:         0x71183beb - rt::unwind::begin_unwind_fmt::h8ea5d25622c032c4ZlJ\n   5:          0x15991f7 - middle::const_eval::eval_const_expr_partial::ha9d8d88f013a10ad7lh\n   6:          0x1597788 - middle::const_eval::eval_const_expr_partial::ha9d8d88f013a10ad7lh\n   7:          0x1597baa - middle::const_eval::eval_const_expr_partial::ha9d8d88f013a10ad7lh\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/23217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/23217/timeline", "performed_via_github_app": null, "state_reason": "completed"}