{"url": "https://api.github.com/repos/rust-lang/rust/issues/103768", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103768/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103768/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103768/events", "html_url": "https://github.com/rust-lang/rust/issues/103768", "id": 1428958949, "node_id": "I_kwDOAAsO6M5VLC7l", "number": 103768, "title": "Confusing error with incompatible functions in trait impl when function parameter is `impl Trait`", "user": {"login": "liquidev", "id": 16415678, "node_id": "MDQ6VXNlcjE2NDE1Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/16415678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liquidev", "html_url": "https://github.com/liquidev", "followers_url": "https://api.github.com/users/liquidev/followers", "following_url": "https://api.github.com/users/liquidev/following{/other_user}", "gists_url": "https://api.github.com/users/liquidev/gists{/gist_id}", "starred_url": "https://api.github.com/users/liquidev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liquidev/subscriptions", "organizations_url": "https://api.github.com/users/liquidev/orgs", "repos_url": "https://api.github.com/users/liquidev/repos", "events_url": "https://api.github.com/users/liquidev/events{/privacy}", "received_events_url": "https://api.github.com/users/liquidev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": {"login": "ffmancera", "id": 25457779, "node_id": "MDQ6VXNlcjI1NDU3Nzc5", "avatar_url": "https://avatars.githubusercontent.com/u/25457779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ffmancera", "html_url": "https://github.com/ffmancera", "followers_url": "https://api.github.com/users/ffmancera/followers", "following_url": "https://api.github.com/users/ffmancera/following{/other_user}", "gists_url": "https://api.github.com/users/ffmancera/gists{/gist_id}", "starred_url": "https://api.github.com/users/ffmancera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ffmancera/subscriptions", "organizations_url": "https://api.github.com/users/ffmancera/orgs", "repos_url": "https://api.github.com/users/ffmancera/repos", "events_url": "https://api.github.com/users/ffmancera/events{/privacy}", "received_events_url": "https://api.github.com/users/ffmancera/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ffmancera", "id": 25457779, "node_id": "MDQ6VXNlcjI1NDU3Nzc5", "avatar_url": "https://avatars.githubusercontent.com/u/25457779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ffmancera", "html_url": "https://github.com/ffmancera", "followers_url": "https://api.github.com/users/ffmancera/followers", "following_url": "https://api.github.com/users/ffmancera/following{/other_user}", "gists_url": "https://api.github.com/users/ffmancera/gists{/gist_id}", "starred_url": "https://api.github.com/users/ffmancera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ffmancera/subscriptions", "organizations_url": "https://api.github.com/users/ffmancera/orgs", "repos_url": "https://api.github.com/users/ffmancera/repos", "events_url": "https://api.github.com/users/ffmancera/events{/privacy}", "received_events_url": "https://api.github.com/users/ffmancera/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2022-10-30T18:32:59Z", "updated_at": "2023-01-03T13:14:54Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\nalong with any information you feel relevant to replicating the bug.\n\nIf you cannot produce a minimal reproduction case (something that would work in\nisolation), please provide the steps or even link to a repository that causes\nthe problematic output to occur.\n-->\n\nGiven the following code ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=e0bc1be874a87460648739de7863a87e))\n\n```rust\ntrait ExampleTrait {\n    fn impl_arg(x: impl IntoIterator<Item = i32>);\n}\n\nstruct ExampleImpl;\n\nimpl ExampleTrait for ExampleImpl {\n    fn impl_arg(x: Vec<i32>) {}\n}\n```\n\nThe current output is:\n\n```\nerror[E0049]: method `impl_arg` has 0 type parameters but its trait declaration has 1 type parameter\n --> src/lib.rs:8:16\n  |\n2 |     fn impl_arg(x: impl IntoIterator<Item = i32>);\n  |                    -----------------------------\n  |                    |\n  |                    expected 1 type parameter\n  |                    `impl Trait` introduces an implicit type parameter\n...\n8 |     fn impl_arg(x: Vec<i32>) {}\n  |                ^ found 0 type parameters\n```\n\nWhich leaks the fact that `impl` introduces an implicit type parameter, and is quite unfriendly to newcomers.\n\n<!-- The following is not always necessary. -->\nIdeally the output should look like:\n\n```\nerror[E0053]: method `impl_arg` has an incompatible type for trait\n --> src/lib.rs:8:20\n  |\n8 |     fn impl_arg(x: Vec<i32>) {}\n  |                    ^^^^^^^^\n  |                    |\n  |                    expected `impl IntoIterator<Item = f32>`, found struct `Vec`\n  |                    help: change the parameter type to match the trait: `impl IntoIterator<Item = f32>`\n  |\nnote: parameter in trait expects any type that implements `IntoIterator<Item = f32>`, but this implementation expects the concrete type `Vec<i32>`\n --> src/lib.rs:2:20\n  |\n2 |     fn impl_arg(x: impl IntoIterator<Item = i32>);\n  |                    -----------------------------\n  |                    |\n  |                    many different types can implement `IntoIterator<Item = i32>`\n```\n\n<!--\nIf the problem is not self-explanatory, please provide a rationale for the\nchange.\n-->\n\n<!--\nIf dramatically different output is caused by small changes, consider also\nadding them here.\n\nIf you're using the stable version of the compiler, you should also check if the\nbug also exists in the beta or nightly versions. The output might also be\ndifferent depending on the Edition.\n-->\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"ffmancera\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103768/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103768/timeline", "performed_via_github_app": null, "state_reason": null}