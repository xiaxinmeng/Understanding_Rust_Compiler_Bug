{"url": "https://api.github.com/repos/rust-lang/rust/issues/71770", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71770/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71770/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71770/events", "html_url": "https://github.com/rust-lang/rust/issues/71770", "id": 610944797, "node_id": "MDU6SXNzdWU2MTA5NDQ3OTc=", "number": 71770, "title": "rustc_interface should provide a way to get typed diagnostics", "user": {"login": "georgewfraser", "id": 1369240, "node_id": "MDQ6VXNlcjEzNjkyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1369240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/georgewfraser", "html_url": "https://github.com/georgewfraser", "followers_url": "https://api.github.com/users/georgewfraser/followers", "following_url": "https://api.github.com/users/georgewfraser/following{/other_user}", "gists_url": "https://api.github.com/users/georgewfraser/gists{/gist_id}", "starred_url": "https://api.github.com/users/georgewfraser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/georgewfraser/subscriptions", "organizations_url": "https://api.github.com/users/georgewfraser/orgs", "repos_url": "https://api.github.com/users/georgewfraser/repos", "events_url": "https://api.github.com/users/georgewfraser/events{/privacy}", "received_events_url": "https://api.github.com/users/georgewfraser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 116993, "node_id": "MDU6TGFiZWwxMTY5OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-driver", "name": "A-driver", "color": "f7e101", "default": false, "description": "Area: rustc_driver that ties everything together into the `rustc` compiler"}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-01T20:11:28Z", "updated_at": "2020-05-04T18:36:09Z", "closed_at": "2020-05-04T18:36:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "As discussed in the [rust-internals forum](https://internals.rust-lang.org/t/using-the-rustc-interface-crate/11982/22), the only way to intercept the stream of diagnostics is to configure rustc to emit JSON messages to your own buffer:\r\n\r\n```rust\r\nlet writer: std::io::Write = [..byte buffer of some kind..];\r\nlet config = rustc_interface::Config {\r\n    opts: rustc_session::config::Options {\r\n        error_format: rustc_session::config::ErrorOutputType::Json {\r\n            pretty: false,\r\n            json_rendered: rustc_errors::emitter::HumanReadableErrorType::Default(\r\n                rustc_errors::emitter::ColorConfig::Never,\r\n            ),\r\n        },\r\n        [..other things..]\r\n    },\r\n    diagnostic_output: rustc_session::DiagnosticOutput::Raw(Box::from(writer)),\r\n    [..other things..]\r\n};\r\nrustc_interface::run_compiler(config, |compiler| {\r\n    [..do something that triggers diagnostics..]\r\n});\r\n```\r\n\r\nThis emits diagnostics in JSON format, which you then have to parse back into [Diagnostic](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/json/struct.Diagnostic.html). It seems to me that it should be possible to tap into the stream of diagnostics without having to convert them to JSON and back.\r\n\r\nIt seems to me the most logical way to accomplish this would be to add another member to [DiagnosticOutput](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_session/enum.DiagnosticOutput.html), something like:\r\n\r\n```rust\r\npub enum DiagnosticOutput {\r\n    Default,\r\n    Raw(Box<dyn Write + Send>),\r\n    Report(Fn<Diagnostic>), // new member\r\n}\r\n```\r\n\r\nI would be happy to work on a PR along these lines, if maintainers indicate it would be welcome and give some guidance on the approach.", "closed_by": {"login": "georgewfraser", "id": 1369240, "node_id": "MDQ6VXNlcjEzNjkyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1369240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/georgewfraser", "html_url": "https://github.com/georgewfraser", "followers_url": "https://api.github.com/users/georgewfraser/followers", "following_url": "https://api.github.com/users/georgewfraser/following{/other_user}", "gists_url": "https://api.github.com/users/georgewfraser/gists{/gist_id}", "starred_url": "https://api.github.com/users/georgewfraser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/georgewfraser/subscriptions", "organizations_url": "https://api.github.com/users/georgewfraser/orgs", "repos_url": "https://api.github.com/users/georgewfraser/repos", "events_url": "https://api.github.com/users/georgewfraser/events{/privacy}", "received_events_url": "https://api.github.com/users/georgewfraser/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71770/timeline", "performed_via_github_app": null, "state_reason": "completed"}