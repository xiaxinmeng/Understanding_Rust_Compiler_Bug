{"url": "https://api.github.com/repos/rust-lang/rust/issues/60996", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60996/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60996/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60996/events", "html_url": "https://github.com/rust-lang/rust/issues/60996", "id": 446418911, "node_id": "MDU6SXNzdWU0NDY0MTg5MTE=", "number": 60996, "title": "feature external_doc reports wrong test origins in doc tests", "user": {"login": "kentfredric", "id": 44790, "node_id": "MDQ6VXNlcjQ0Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/44790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kentfredric", "html_url": "https://github.com/kentfredric", "followers_url": "https://api.github.com/users/kentfredric/followers", "following_url": "https://api.github.com/users/kentfredric/following{/other_user}", "gists_url": "https://api.github.com/users/kentfredric/gists{/gist_id}", "starred_url": "https://api.github.com/users/kentfredric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kentfredric/subscriptions", "organizations_url": "https://api.github.com/users/kentfredric/orgs", "repos_url": "https://api.github.com/users/kentfredric/repos", "events_url": "https://api.github.com/users/kentfredric/events{/privacy}", "received_events_url": "https://api.github.com/users/kentfredric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2586902954, "node_id": "MDU6TGFiZWwyNTg2OTAyOTU0", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-external_doc", "name": "F-external_doc", "color": "f9c0cc", "default": false, "description": "`#![feature(external_doc)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-21T05:07:33Z", "updated_at": "2021-06-26T01:34:45Z", "closed_at": "2021-06-26T01:34:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `doc(include = .... )` allows `cargo test --doc` to compile and test <code>```</code> fenced sections in the markdown.\r\n\r\nHowever, the reported origins for these tests becomes completely confusing, as the line numbers appear to correlate to where you might *expect* to see the content, if the content was naively inlined.\r\n\r\n```\r\n     Running `rustdoc --edition=2018 --test /home/kent/rust/grease/src/lib.rs --crate-name grease -L dependency=/home/kent/rust/grease/target/debug/deps -L native=/home/kent/rust/grease/target/debug/build/backtrace-sys-40a4a1ea875db113/out -L dependency=/home/kent/rust/grease/target/debug/deps --cfg 'feature=\"default\"' --cfg 'feature=\"external_doc\"' --extern failure=/home/kent/rust/grease/target/debug/deps/libfailure-dae5569a6045eb7d.rlib --extern grease=/home/kent/rust/grease/target/debug/deps/libgrease-40e583d4df6fae15.rlib`\r\n\r\nrunning 19 tests\r\ntest src/repository.rs - repository::Repository (line 44) ... ok\r\ntest src/repository.rs - repository::Repository (line 61) ... ok\r\ntest src/repository.rs - repository::Repository (line 83) ... ok\r\ntest src/repository.rs - repository (line 6) ... ok\r\ntest src/repository/category.rs - repository::category::Category (line 40) ... ok\r\ntest src/repository.rs - repository::Repository (line 96) ... ok\r\ntest src/repository/category.rs - repository::category::Category (line 57) ... ok\r\ntest src/repository/category.rs - repository::category::Category (line 12) ... ok\r\ntest src/repository/category.rs - repository::category::CategoryFileIterator (line 106) ... ok\r\ntest src/repository/category.rs - repository::category::CategoryFileIterator (line 156) ... ok\r\ntest src/repository/category.rs - repository::category::Category (line 70) ... ok\r\ntest src/repository/ebuild.rs - repository::ebuild::Ebuild (line 42) ... ok\r\ntest src/repository/ebuild.rs - repository::ebuild::Ebuild (line 6) ... ok\r\ntest src/repository/ebuild.rs - repository::ebuild::Ebuild (line 64) ... ok\r\ntest src/repository/ebuild.rs - repository::ebuild::Ebuild (line 84) ... ok\r\ntest src/repository/package.rs - repository::package::Package (line 34) ... ok\r\ntest src/repository/package.rs - repository::package::Package (line 55) ... ok\r\ntest src/repository/package.rs - repository::package::Package (line 5) ... ok\r\ntest src/repository/package.rs - repository::package::Package (line 68) ... ok\r\n```\r\n\r\nHowever, literally *none* of the files mentioned have rustdoc code blocks in them, and 100% of these tests are from included files.\r\n\r\nFor example, reading category.rs at the expected offsets: ( with 2 lines either side for context )\r\n\r\ntest src/repository/category.rs - repository::category::Category (line 12) ... ok\r\n```rust\r\n/// Represents a concrete Gentoo category\r\n#[cfg_attr(\r\n    feature = \"external_doc\",\r\n```\r\ntest src/repository/category.rs - repository::category::Category (line 40) ... ok\r\n```rust\r\n    /// Return the name of the category\r\n    pub fn name(&self) -> String { self.category.to_owned() }\r\n}\r\n```\r\ntest src/repository/category.rs - repository::category::Category (line 57) ... ok\r\n```rust\r\n#[derive(Fail, Debug)]\r\n#[fail(display = \"An error occurred iterating a category file\")]\r\npub enum CategoryFileError {\r\n```\r\ntest src/repository/category.rs - repository::category::Category (line 70) ... ok\r\n```rust\r\n    #[fail(display = \"Path <{:?}> encountered decoding errors\", _1)]\r\n    FileDecodeError(#[fail(cause)] io::Error, PathBuf),\r\n    /// An IO error occurred reading a file\r\n```\r\ntest src/repository/category.rs - repository::category::CategoryFileIterator (line 106) ... ok\r\n```rust\r\n         })\r\n            .and_then(|meta| {\r\n                if meta.is_dir() {\r\n```\r\ntest src/repository/category.rs - repository::category::CategoryFileIterator (line 156) ... ok\r\n( File only has 145 lines )\r\n\r\n\r\nWhereas, if I take the include lines:\r\n#### `category.rs` 12-15\r\n```rust\r\n#[cfg_attr(\r\n    feature = \"external_doc\",\r\n    doc(include = \"repository/struct.Category.md\")\r\n)]\r\n```\r\n#### `category.rs` 77-80\r\n```rust\r\n/// Iterate a `categories` file in a portage repository\r\n#[cfg_attr(\r\n    feature = \"external_doc\",\r\n    doc(include = \"repository/struct.CategoryFileIterator.md\")\r\n)]\r\n```\r\n\r\nAnd do a little manual derviation to find source lines:\r\ntest src/repository/category.rs - repository::category::Category (line 12) ... ok\r\n12 - 12 => 0\r\n#### `struct.Category.md` 0-7\r\n<pre>\r\n```rust\r\n# use grease::repository::Category;\r\n# use std::path::Path;\r\nlet c = Category::new(\"/usr/portage\", \"dev-perl\");\r\nassert_eq!(c.path(), Path::new(\"/usr/portage/dev-perl\"));\r\nassert_eq!(c.name(), \"dev-perl\");\r\n```\r\n</pre>\r\n\r\ntest src/repository/category.rs - repository::category::Category (line 40) ... ok\r\n40 - 12 => 28 \r\n#### `struct.Category.md` 28-37\r\n<pre>\r\n```rust\r\n# use grease::repository::{Category, Repository};\r\n# use std::path::Path;\r\nCategory::new(\"/usr/portage\", \"dev-perl\");\r\nCategory::new(String::from(\"/usr/portage\"), String::from(\"dev-perl\"));\r\n// Using Repositories implementation of Into<PathBuf>\r\nlet r = Repository::new(\"/usr/portage\");\r\nCategory::new(&r, \"dev-perl\");\r\n```\r\n</pre>\r\n\r\ntest src/repository/category.rs - repository::category::Category (line 57) ... ok\r\n57 - 12 -> 45\r\n#### `struct.Category.md` 45-56\r\n<pre>\r\n## AsRef\\<PathBuf\\>\r\n```rust\r\n# use grease::repository::Category;\r\n# use std::path::{Path,PathBuf};\r\nfn demo<P>(path: P) -> ()\r\nwhere\r\n    P: AsRef<PathBuf>,\r\n{\r\n    assert_eq!(Path::new(\"/usr/portage/dev-perl\"), path.as_ref());\r\n}\r\ndemo(Category::new(\"/usr/portage\", \"dev-perl\"));\r\n```\r\n</pre>\r\n\r\ntest src/repository/category.rs - repository::category::Category (line 70) ... ok\r\n70 - 12 -> 58\r\n#### `struct.Category.md` 58-73\r\n<pre>\r\n\r\n## Into\\<PathBuf\\>\r\n```rust\r\n# use grease::repository::Category;\r\n# use std::path::{Path, PathBuf};\r\nfn demo<P>(path: P) -> ()\r\nwhere\r\n    P: Into<PathBuf>,\r\n{\r\n    assert_eq!(Path::new(\"/usr/portage/dev-perl\"), path.into());\r\n}\r\nlet c = Category::new(\"/usr/portage\", \"dev-perl\");\r\n// Using From<&Category>\r\ndemo(&c);\r\n// Using From<Category>\r\ndemo(c);\r\n```\r\n</pre>\r\n\r\n\r\ntest src/repository/category.rs - repository::category::CategoryFileIterator (line 106) ... ok\r\n106 - 77 -> 29\r\n#### `struct.CategoryFileIterator.md` 29-46\r\n<pre>\r\n\r\n```no_run\r\nuse grease::repository::CategoryFileIterator;\r\nmatch CategoryFileIterator::for_file(\r\n    \"/usr/portage\",\r\n    \"/usr/portage/profiles/categories\",\r\n) {\r\n    Err(e) => panic!(e),\r\n    Ok(iterator) => {\r\n        for category in iterator {\r\n            match category {\r\n                Err(e) => panic!(e),\r\n                Ok(c) => println!(\"{}\", c.name()),\r\n            }\r\n        }\r\n    },\r\n}\r\n```\r\n</pre>\r\n\r\ntest src/repository/category.rs - repository::category::CategoryFileIterator (line 156) ... ok\r\n156 - 77 -> 79\r\n#### `struct.CategoryFileIterator.md` 79-89\r\n<pre>\r\n\r\n\r\n```no_run\r\nuse grease::repository::CategoryFileIterator;\r\nlet iterator = CategoryFileIterator::for_file(\r\n    \"/usr/portage\",\r\n    \"/usr/portage/profiles/categories\",\r\n);\r\nfor item_result in iterator.unwrap() {\r\n    println!(\"{}\", item_result.unwrap().name());\r\n}\r\n```\r\n</pre>\r\n\r\nAs you can see, manual re-calculation provides *reasonable* locations, which suggests part of the problem in display ( though my method seems to have off-by-one errors for some reason, *shrug* )\r\n\r\nI believe this bug should block stabilization of this feature #44732 \r\n\r\n", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60996/timeline", "performed_via_github_app": null, "state_reason": "completed"}