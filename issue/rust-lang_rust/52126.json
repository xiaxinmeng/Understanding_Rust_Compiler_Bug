{"url": "https://api.github.com/repos/rust-lang/rust/issues/52126", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52126/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52126/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52126/events", "html_url": "https://github.com/rust-lang/rust/issues/52126", "id": 339131931, "node_id": "MDU6SXNzdWUzMzkxMzE5MzE=", "number": 52126, "title": "Problem with borrow checker and AddAssign", "user": {"login": "sebpuetz", "id": 30175181, "node_id": "MDQ6VXNlcjMwMTc1MTgx", "avatar_url": "https://avatars.githubusercontent.com/u/30175181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpuetz", "html_url": "https://github.com/sebpuetz", "followers_url": "https://api.github.com/users/sebpuetz/followers", "following_url": "https://api.github.com/users/sebpuetz/following{/other_user}", "gists_url": "https://api.github.com/users/sebpuetz/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpuetz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpuetz/subscriptions", "organizations_url": "https://api.github.com/users/sebpuetz/orgs", "repos_url": "https://api.github.com/users/sebpuetz/repos", "events_url": "https://api.github.com/users/sebpuetz/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpuetz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 262252840, "node_id": "MDU6TGFiZWwyNjIyNTI4NDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable", "name": "regression-from-stable-to-stable", "color": "e4008a", "default": false, "description": "Performance or correctness regression from one stable version to another."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-07-07T09:25:59Z", "updated_at": "2019-06-26T10:12:56Z", "closed_at": "2018-07-23T01:02:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nthere seems to be a problem with the borrow checker that allows references to exist after the borrowed data has been dropped. \r\n\r\nI wrote a wrapper struct for a HashMap that would allow me to add frequencies in a manner similar to the Counter known from Python. \r\n\r\nWhen using the `+=` operator to add two of these structs the borrow checker seems to be unable to detect when borrowed values are dropped. The code compiles allowing invalid pointers. \r\nThe compiler rejects the code when `.add_assign()` is called explicitly.\r\n\r\nI tried this code [(Playground)](https://play.rust-lang.org/?gist=3ba4bdf9ba9f740ecb70666ce42710d8&version=nightly&mode=debug&edition=2015):\r\n```Rust\r\nuse std::collections::HashMap;\r\nuse std::hash::Hash;\r\nuse std::ops::AddAssign;\r\n\r\npub fn main() {\r\n    works();\r\n    panics();\r\n}\r\n\r\npub struct Counter<K> {\r\n    map: HashMap<K, usize>,\r\n}\r\n\r\nimpl<K> AddAssign for Counter<K>\r\nwhere\r\n    K: Hash + Eq,\r\n{\r\n    fn add_assign(&mut self, rhs: Counter<K>) {\r\n        rhs.map.into_iter().for_each(|(key, val)| {\r\n            let count = self.map.entry(key).or_insert(0);\r\n            *count += val;\r\n        });\r\n    }\r\n}\r\n\r\n/// reliably prints correct\r\npub fn works() {\r\n    let mut acc = Counter{map: HashMap::new()};\r\n    for line in vec![\"12345678\".to_string(), \"12345678\".to_string()] {\r\n        let v: Vec<&str> = line.split_whitespace().collect();\r\n        println!(\"accumulator before add_assign {:?}\", acc.map);\r\n        let mut map = HashMap::new();\r\n        for str_ref in v {\r\n            {\r\n                let count = map.entry(str_ref).or_insert(0);\r\n                *count += 1;\r\n            }\r\n        }\r\n        let cnt2 = Counter{map};\r\n        acc += cnt2;\r\n        println!(\"accumulator after add_assign {:?}\", acc.map);\r\n    }\r\n}\r\n\r\n/// often times crashes, if not prints invalid strings\r\npub fn panics() {\r\n    let mut acc = Counter{map: HashMap::new()};\r\n    for line in vec![\"123456789\".to_string(), \"12345678\".to_string()] {\r\n        let v: Vec<&str> = line.split_whitespace().collect();\r\n        println!(\"accumulator before add_assign {:?}\", acc.map);\r\n        let mut map = HashMap::new();\r\n        for str_ref in v {\r\n            {\r\n                let count = map.entry(str_ref).or_insert(0);\r\n                *count += 1;\r\n            }\r\n        }\r\n        let cnt2 = Counter{map};\r\n        acc += cnt2;\r\n        println!(\"accumulator after add_assign {:?}\", acc.map);\r\n        // line gets dropped here but references are kept in acc.map\r\n    }\r\n}\r\n\r\n```\r\nI expected to see this happen:\r\nThe compiler should reject this code \r\n\r\nInstead, this happened:\r\nThe program compiles and results in unpredictable behaviour. Sometimes the program panics at runtime, sometimes invalid strings are printed.\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\nrustc 1.26.0 (a77568041 2018-05-07)\r\nbinary: rustc\r\ncommit-hash: a7756804103447ea4e68a71ccf071e7ad8f7a03e\r\ncommit-date: 2018-05-07\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.26.0\r\nLLVM version: 6.0\r\n\r\nBacktrace:\r\n ```\r\nthread 'main' panicked at 'byte index 3 is not a char boundary; it is inside 'B' (bytes 2..3) of `\u0010 B\ufffd\ufffd\u007f `', libcore/str/mod.rs:2252:5\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at libstd/sys_common/backtrace.rs:71\r\n             at libstd/sys_common/backtrace.rs:59\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/panicking.rs:207\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:223\r\n   4: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:402\r\n   5: std::panicking::begin_panic_fmt\r\n             at libstd/panicking.rs:349\r\n   6: rust_begin_unwind\r\n             at libstd/panicking.rs:325\r\n   7: core::panicking::panic_fmt\r\n             at libcore/panicking.rs:72\r\n   8: core::str::slice_error_fail\r\n             at libcore/str/mod.rs:0\r\n   9: core::str::traits::<impl core::slice::SliceIndex<str> for core::ops::range::Range<usize>>::index::{{closure}}\r\n             at libcore/str/mod.rs:1915\r\n  10: <str as core::fmt::Debug>::fmt\r\n             at libcore/option.rs:376\r\n             at libcore/str/mod.rs:1915\r\n             at libcore/str/mod.rs:1697\r\n             at libcore/fmt/mod.rs:1818\r\n  11: <&'a T as core::fmt::Debug>::fmt\r\n             at /checkout/src/libcore/fmt/mod.rs:1768\r\n  12: <&'a T as core::fmt::Debug>::fmt\r\n             at /checkout/src/libcore/fmt/mod.rs:1768\r\n  13: core::fmt::builders::DebugMap::entry\r\n             at libcore/fmt/builders.rs:502\r\n             at libcore/result.rs:621\r\n             at libcore/fmt/builders.rs:486\r\n  14: core::fmt::builders::DebugMap::entries\r\n             at /checkout/src/libcore/fmt/builders.rs:520\r\n  15: <std::collections::hash::map::HashMap<K, V, S> as core::fmt::Debug>::fmt\r\n             at /checkout/src/libstd/collections/hash/map.rs:1487\r\n  16: core::fmt::write\r\n             at libcore/fmt/mod.rs:1100\r\n             at libcore/fmt/mod.rs:1047\r\n  17: <std::io::stdio::Stdout as std::io::Write>::write_fmt\r\n             at libstd/io/mod.rs:1169\r\n             at libstd/io/stdio.rs:459\r\n  18: <std::thread::local::LocalKey<T>>::try_with\r\n             at libstd/io/stdio.rs:686\r\n             at libstd/thread/local.rs:290\r\n  19: std::io::stdio::_print\r\n             at libstd/io/stdio.rs:680\r\n             at libstd/io/stdio.rs:701\r\n  20: counter::panics\r\n             at src/main.rs:51\r\n  21: counter::main\r\n             at src/main.rs:7\r\n  22: std::rt::lang_start::{{closure}}\r\n             at /checkout/src/libstd/rt.rs:74\r\n  23: std::panicking::try::do_call\r\n             at libstd/rt.rs:59\r\n             at libstd/panicking.rs:306\r\n  24: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:102\r\n  25: std::rt::lang_start_internal\r\n             at libstd/panicking.rs:285\r\n             at libstd/panic.rs:361\r\n             at libstd/rt.rs:58\r\n  26: std::rt::lang_start\r\n             at /checkout/src/libstd/rt.rs:74\r\n  27: main\r\n  28: __libc_start_main\r\n  29: _start\r\n ```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52126/timeline", "performed_via_github_app": null, "state_reason": "completed"}