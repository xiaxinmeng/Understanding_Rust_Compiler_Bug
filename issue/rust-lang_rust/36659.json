{"url": "https://api.github.com/repos/rust-lang/rust/issues/36659", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36659/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36659/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36659/events", "html_url": "https://github.com/rust-lang/rust/issues/36659", "id": 178721730, "node_id": "MDU6SXNzdWUxNzg3MjE3MzA=", "number": 36659, "title": "LLVM assertions when using `-C target-feature=+soft-float` with a few targets", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 5223550385, "node_id": "LA_kwDOAAsO6M8AAAABN1kNsQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-target-feature", "name": "A-target-feature", "color": "f7e101", "default": false, "description": "Area: Enabling/disabling target features like AVX, Neon, etc."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-22T21:12:35Z", "updated_at": "2023-04-05T17:38:44Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "[Found](https://travis-ci.org/japaric/smoke/builds/161972628) using [smoke](https://github.com/japaric/smoke/pull/28). (cc @brson)\n\nSmoke is a \"cross\" testing framework. It runs different tests, like the unit tests of the standard\ncrates, for several targets. I wanted to see how setting `-C target-feature=+soft-float` affected a\nsingle test case but decided to set it via `RUSTFLAGS` ~~for fun~~ to see how it affected _all_ the\ntests it runs. To my surprise, on 6 of 10 targets, this resulted in LLVM assertions while compiling\n_one or two_ of the **many** tests that smoke runs. Here's the summary:\n- `i686-apple-darwin` Assertion: \"Should only be an extending load, not truncating!\"\n- `x86_64-apple-darwin` Assertion: \"This value type is not natively supported!\"\n- `i686-unknown-linux-gnu` Assertion: \"Should only be an extending load, not truncating!\"\n- `i686-unknown-linux-musl` Assertion: \"Should only be an extending load, not truncating!\"\n- `x86_64-unknown-linux-gnu` Assertion: \"This value type is not natively supported!\"\n- `x86_64-unknown-linux-musl` Assertion: \"This value type is not natively supported!\"\n- `mips-unknown-linux-gnu` OK\n- `mipsel-unknown-linux-gnu` OK\n- `powerpc-unknown-linux-gnu` OK\n- `powerpc64-unknown-linux-gnu` OK\n\nAnd below it's a more detailed report of how the assertion was triggered:\n### `i686-apple-darwin`\n### `i686-unknown-linux-gnu`\n### `i686-unknown-linux-musl`\n\n[Travis build job for i686-apple-darwin](https://travis-ci.org/japaric/smoke/jobs/161972630#L332)\n[Travis build job for i686-unknown-linux-gnu](https://travis-ci.org/japaric/smoke/jobs/161972635#L501)\n[Travis build job for i686-unknown-linux-musl](https://travis-ci.org/japaric/smoke/jobs/161972637#L448)\n\nCommand:\n\n```\n$ cargo run --target $TARGET --manifest-path libc/libc-test/Cargo.toml\n```\n\nOn [this rust-lang/libc checkout](https://github.com/rust-lang/libc/tree/836cda98930c5621d937c31e3796db9fe0b8f8a7).\n\nAssertion:\n\n```\nAssertion failed: (MemVT.getScalarType().bitsLT(VT.getScalarType()) && \"Should only be an extending load, not truncating!\"), function getLoad, file /Users/rustbuild/src/rust-buildbot/slave/nightly-dist-rustc-mac/build/src/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp, line 5085.\n```\n### `x86_64-apple-darwin`\n### `x86_64-unknown-linux-gnu`\n### `x86_64-unknown-linux-musl`\n\n[Travis build job for x86_64-apple-darwin](https://travis-ci.org/japaric/smoke/jobs/161972632#L209)\n[Travis build job for x86_64-unknown-linux-gnu](https://travis-ci.org/japaric/smoke/jobs/161972639#L352)\n[Travis build job for x86_64-unknown-linux-musl](https://travis-ci.org/japaric/smoke/jobs/161972641#L386)\n\nCommand:\n\n```\n$ cargo test --target $TARGET\n```\n\nOn this [Cargo repository](https://github.com/japaric/smoke/tree/837942777cce38bcb5b089a5dce6f3388552d237).\n\nAssertion: \n\n```\nrustc: /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/llvm/include/llvm/Target/TargetLowering.h:437: virtual const llvm::TargetRegisterClass* llvm::TargetLoweringBase::getRegClassFor(llvm::MVT) const: Assertion `RC && \"This value type is not natively supported!\"' failed.\n```\n\n**NOTE** `cargo test --target $TARGET --release` didn't result in a LLVM assertion.\n\n---\n\n`x86_64-unknown-linux-gnu` and `x86_64-unknown-linux-musl` also failed the `libc` test mentioned in\nthe previous section but with a different LLVM assertion:\n\n```\nrustc: /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:4390: llvm::SDValue getMemcpyLoadsAndStores(llvm::SelectionDAG&, const llvm::SDLoc&, llvm::SDValue, llvm::SDValue, llvm::SDValue, uint64_t, unsigned int, bool, bool, llvm::MachinePointerInfo, llvm::MachinePointerInfo): Assertion `NVT.bitsGE(VT)' failed.\n```\n### Meta\n\n```\n$ rustc -V\nrustc 1.13.0-nightly (4f9812a59 2016-09-21) \n```\n### Final thoughts\n\nI think these assertions could either:\n- Be just badness from mixing the standard crates that were compiled with native float operations\n  enabled with crates that were compiled without them (`+soft-float`). When we have a Cargo that\n  can build `std` and (`libtest`), I should re-run these tests to discard that possibility (`std` would\n  be recompiled with `+soft-float`).\n- Indicate that some parts of the standard crates can't be compiled with `+soft-float` for some\n  targets for some reason.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36659/timeline", "performed_via_github_app": null, "state_reason": null}