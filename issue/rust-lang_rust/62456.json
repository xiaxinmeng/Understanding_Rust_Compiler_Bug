{"url": "https://api.github.com/repos/rust-lang/rust/issues/62456", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62456/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62456/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62456/events", "html_url": "https://github.com/rust-lang/rust/issues/62456", "id": 464908569, "node_id": "MDU6SXNzdWU0NjQ5MDg1Njk=", "number": 62456, "title": "ICE: index out of bounds with const generics", "user": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1486687397, "node_id": "MDU6TGFiZWwxNDg2Njg3Mzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_generics", "name": "F-const_generics", "color": "f9c0cc", "default": false, "description": "`#![feature(const_generics)]`"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-07T02:41:46Z", "updated_at": "2020-03-11T12:49:33Z", "closed_at": "2020-03-11T12:49:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=4011d663cd9929c5ab2319beda510a6a\r\n\r\n```rust\r\n#![feature(const_generics)]\r\n\r\nuse std::fmt;\r\n\r\nstruct Builder<const N: usize> {\r\n    items: [&'static str; N],\r\n}\r\n\r\nfn new_builder() -> Builder<{0}> {\r\n    return Builder{items: []};\r\n}\r\n\r\nimpl<const N: usize> Builder<{ N }> {\r\n    fn append(self, value: &'static str) -> Builder<{ N + 1 }> {\r\n        let mut new_items = [\"\"; N + 1];\r\n        new_items[..N].copy_from_slice(self.items);\r\n        new_items[N] = value;\r\n        return Builder { items: new_items };\r\n    }\r\n\r\n    fn build(self) -> Final<{ N }> {\r\n        return Final { items: self.items };\r\n    }\r\n}\r\n\r\nstruct Final<const N: usize> {\r\n    items: [&'static str; N],\r\n}\r\n\r\nimpl<const N: usize> fmt::Debug for Final<{ N }> {\r\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\r\n        f.debug_struct(\"Final\")\r\n            .field(\"items\", &&self.items[..])\r\n            .finish()\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let f = new_builder()\r\n        .append(\"abc\")\r\n        .append(\"def\")\r\n        .append(\"ghi\")\r\n        .build();\r\n    println!(\"f={:?}\", f);\r\n}\r\n```\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nwarning: the feature `const_generics` is incomplete and may cause the compiler to crash\r\n --> src/main.rs:1:12\r\n  |\r\n1 | #![feature(const_generics)]\r\n  |            ^^^^^^^^^^^^^^\r\n\r\nthread 'rustc' panicked at 'index out of bounds: the len is 1 but the index is 1', /rustc/481068a707679257e2a738b40987246e0420e787/src/libcore/slice/mod.rs:2681:10\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:47\r\n   3: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:36\r\n   4: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:200\r\n   5: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:214\r\n   6: rustc::util::common::panic_hook\r\n   7: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:481\r\n   8: std::panicking::continue_panic_fmt\r\n             at src/libstd/panicking.rs:384\r\n   9: rust_begin_unwind\r\n             at src/libstd/panicking.rs:311\r\n  10: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:85\r\n  11: core::panicking::panic_bounds_check\r\n             at src/libcore/panicking.rs:61\r\n  12: rustc_mir::borrow_check::nll::type_check::type_check\r\n  13: rustc_mir::borrow_check::nll::compute_regions\r\n  14: rustc_mir::borrow_check::do_mir_borrowck\r\n  15: rustc::ty::context::GlobalCtxt::enter_local\r\n  16: rustc_mir::borrow_check::mir_borrowck\r\n  17: rustc::ty::query::__query_compute::mir_borrowck\r\n  18: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::mir_borrowck>::compute\r\n  19: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  20: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  21: rustc::ty::<impl rustc::ty::context::TyCtxt>::par_body_owners\r\n  22: rustc::util::common::time\r\n  23: rustc_interface::passes::analysis\r\n  24: rustc::ty::query::__query_compute::analysis\r\n  25: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  26: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt>::get_query\r\n  27: rustc_interface::passes::BoxedGlobalCtxt::access::{{closure}}\r\n  28: rustc_interface::passes::create_global_ctxt::{{closure}}\r\n  29: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  30: std::thread::local::LocalKey<T>::with\r\n  31: scoped_tls::ScopedKey<T>::set\r\n  32: syntax::with_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nquery stack during panic:\r\n#0 [mir_borrowck] processing `Builder::<N>::append`\r\n#1 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:14:64\r\n   |\r\n14 |       fn append(self, value: &'static str) -> Builder<{ N + 1 }> {\r\n   |  ________________________________________________________________^\r\n15 | |         let mut new_items = [\"\"; N + 1];\r\n16 | |         new_items[..N].copy_from_slice(self.items);\r\n17 | |         new_items[N] = value;\r\n18 | |         return Builder { items: new_items };\r\n19 | |     }\r\n   | |_____^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:15:29\r\n   |\r\n15 |         let mut new_items = [\"\"; N + 1];\r\n   |                             ^^^^^^^^^^^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:16:9\r\n   |\r\n16 |         new_items[..N].copy_from_slice(self.items);\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:16:9\r\n   |\r\n16 |         new_items[..N].copy_from_slice(self.items);\r\n   |         ^^^^^^^^^^^^^^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:16:9\r\n   |\r\n16 |         new_items[..N].copy_from_slice(self.items);\r\n   |         ^^^^^^^^^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:17:9\r\n   |\r\n17 |         new_items[N] = value;\r\n   |         ^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:17:9\r\n   |\r\n17 |         new_items[N] = value;\r\n   |         ^^^^^^^^^^^^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:17:9\r\n   |\r\n17 |         new_items[N] = value;\r\n   |         ^^^^^^^^^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:18:33\r\n   |\r\n18 |         return Builder { items: new_items };\r\n   |                                 ^^^^^^^^^\r\n\r\nerror: internal compiler error: no type-dependent def for method call\r\n  --> src/main.rs:16:9\r\n   |\r\n16 |         new_items[..N].copy_from_slice(self.items);\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror: internal compiler error: QualifyAndPromoteConstants: MIR had errors\r\n  --> src/main.rs:14:5\r\n   |\r\n14 | /     fn append(self, value: &'static str) -> Builder<{ N + 1 }> {\r\n15 | |         let mut new_items = [\"\"; N + 1];\r\n16 | |         new_items[..N].copy_from_slice(self.items);\r\n17 | |         new_items[N] = value;\r\n18 | |         return Builder { items: new_items };\r\n19 | |     }\r\n   | |_____^\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:22 ~ playground[a9b4]::{{impl}}[0]::append[0]) (\"return type\"): bad type [type error]\r\n  --> src/main.rs:14:5\r\n   |\r\n14 | /     fn append(self, value: &'static str) -> Builder<{ N + 1 }> {\r\n15 | |         let mut new_items = [\"\"; N + 1];\r\n16 | |         new_items[..N].copy_from_slice(self.items);\r\n17 | |         new_items[N] = value;\r\n18 | |         return Builder { items: new_items };\r\n19 | |     }\r\n   | |_____^\r\n\r\nerror: internal compiler error: broken MIR in DefId(0:22 ~ playground[a9b4]::{{impl}}[0]::append[0]) (LocalDecl { mutability: Mut, is_user_variable: None, internal: false, is_block_tail: None, ty: [type error], user_ty: UserTypeProjections { contents: [] }, name: None, source_info: SourceInfo { span: src/main.rs:14:5: 19:6, scope: scope[0] }, visibility_scope: scope[0] }): bad type [type error]\r\n  --> src/main.rs:14:5\r\n   |\r\n14 | /     fn append(self, value: &'static str) -> Builder<{ N + 1 }> {\r\n15 | |         let mut new_items = [\"\"; N + 1];\r\n16 | |         new_items[..N].copy_from_slice(self.items);\r\n17 | |         new_items[N] = value;\r\n18 | |         return Builder { items: new_items };\r\n19 | |     }\r\n   | |_____^\r\n\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:366:17\r\nstack backtrace:\r\n   0:     0x7f2a9f73e24b - backtrace::backtrace::libunwind::trace::hda4e121c515bf458\r\n                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/libunwind.rs:88\r\n   1:     0x7f2a9f73e24b - backtrace::backtrace::trace_unsynchronized::h0a71c953a4742195\r\n                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/mod.rs:66\r\n   2:     0x7f2a9f73e24b - std::sys_common::backtrace::_print::hf4a62558314f5307\r\n                               at src/libstd/sys_common/backtrace.rs:47\r\n   3:     0x7f2a9f73e24b - std::sys_common::backtrace::print::hcb7a471013853997\r\n                               at src/libstd/sys_common/backtrace.rs:36\r\n   4:     0x7f2a9f73e24b - std::panicking::default_hook::{{closure}}::ha0ea642565fdae2f\r\n                               at src/libstd/panicking.rs:200\r\n   5:     0x7f2a9f73df27 - std::panicking::default_hook::h0f057f6c7c516eb6\r\n                               at src/libstd/panicking.rs:214\r\n   6:     0x7f2a9cde32c1 - rustc::util::common::panic_hook::hc3d6a9f610b367e7\r\n   7:     0x7f2a9f73eaa9 - std::panicking::rust_panic_with_hook::hc77fb9874fa29555\r\n                               at src/libstd/panicking.rs:481\r\n   8:     0x7f2a9ba562a5 - std::panicking::begin_panic::h6e376c592b6253f0\r\n   9:     0x7f2a9ba79dc5 - <rustc_errors::Handler as core::ops::drop::Drop>::drop::h34bba684e8175cc7\r\n  10:     0x7f2a9fa54b82 - core::ptr::real_drop_in_place::hb2f5bc0c04a6a718\r\n  11:     0x7f2a9fa59e94 - <alloc::rc::Rc<T> as core::ops::drop::Drop>::drop::hbcc6465daa24608a\r\n  12:     0x7f2a9fa270ac - core::ptr::real_drop_in_place::h5e74c5df24af64f3\r\n  13:     0x7f2a9fa24058 - rustc_interface::interface::run_compiler_in_existing_thread_pool::hfa8966a3f2d428a3\r\n  14:     0x7f2a9fa380c2 - std::thread::local::LocalKey<T>::with::ha697a453d1de3d8a\r\n  15:     0x7f2a9fa4b071 - scoped_tls::ScopedKey<T>::set::h50b61de3f9f457ff\r\n  16:     0x7f2a9fa62954 - syntax::with_globals::h2642fa717df1d186\r\n  17:     0x7f2a9fa8ca0d - std::sys_common::backtrace::__rust_begin_short_backtrace::ha67256aa038100bc\r\n  18:     0x7f2a9f74f50a - __rust_maybe_catch_panic\r\n                               at src/libpanic_unwind/lib.rs:82\r\n  19:     0x7f2a9fa0a9f9 - core::ops::function::FnOnce::call_once{{vtable.shim}}::h187e5c932baee631\r\n  20:     0x7f2a9f721ecf - <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::h4b1f48c87819f1d7\r\n                               at /rustc/481068a707679257e2a738b40987246e0420e787/src/liballoc/boxed.rs:766\r\n  21:     0x7f2a9f74e1f0 - <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::h982c5ef9aacde87b\r\n                               at /rustc/481068a707679257e2a738b40987246e0420e787/src/liballoc/boxed.rs:766\r\n  22:     0x7f2a9f74e1f0 - std::sys_common::thread::start_thread::h961b6807ee2d2f95\r\n                               at src/libstd/sys_common/thread.rs:13\r\n  23:     0x7f2a9f74e1f0 - std::sys::unix::thread::Thread::new::thread_start::h166a70c782ebeb55\r\n                               at src/libstd/sys/unix/thread.rs:79\r\n  24:     0x7f2a9f4be6db - start_thread\r\n  25:     0x7f2a9eddb88f - __clone\r\n  26:                0x0 - <unknown>\r\nquery stack during panic:\r\nend of query stack\r\nthread panicked while panicking. aborting.\r\nerror: Could not compile `playground`.\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62456/timeline", "performed_via_github_app": null, "state_reason": "completed"}