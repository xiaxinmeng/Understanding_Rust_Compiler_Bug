{"url": "https://api.github.com/repos/rust-lang/rust/issues/62865", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62865/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62865/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62865/events", "html_url": "https://github.com/rust-lang/rust/issues/62865", "id": 470936442, "node_id": "MDU6SXNzdWU0NzA5MzY0NDI=", "number": 62865, "title": "Translate `\\r\\n` -> `\\n` when reading files", "user": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36956, "node_id": "MDU6TGFiZWwzNjk1Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-frontend", "name": "A-frontend", "color": "f7e101", "default": false, "description": "Area: frontend (errors, parsing and HIR)"}, {"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-22T07:27:38Z", "updated_at": "2019-08-18T08:15:36Z", "closed_at": "2019-08-18T08:15:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, we handle `\\r\\n` explicitly in the lexer. We should do this at the file read time instead.\r\n\r\nMotivation:\r\n\r\n1. Line endings should not affect semantics of the language. For example, git on windows by default checkouts with `\\r\\n` line endings, and it would be bad if compiling code on windows led to observably different results. This *could* be handled on a case-by-case basis in the lexer (the current approach), but it's easy to miss something (for example #60604). Additionally, proc macros currently see original tokens, and so can observe different line endings. The simplest way to make compiler lineending-invariant is to normalize line endings as soon as possible.\r\n\r\n2. For IDE features, which work close to the source code, and especially for code generation during refactorings, the surface are where you need to handle different line endings is much larger. It would be easier for IDE to assume `\\n` line endings and convert at one place, at the boundary. \r\n\r\ni propose that we convert `\\r\\n` once, in `SourceFile::new` constructor. Note that we already do BOM-removal there, so, in theory, all code should already be prepared to mismatch between in-memory and on-disk file content. The replacement shortens the string, so it can be a pretty fast in-place transformation. \r\n\r\nOne technical question is what to do with isolated `\\r`? I see two options:\r\n\r\n* leave them as is. This makes the transform non-idempotent though: `\\r\\r\\n` -> `\\r\\n`, and requires other code to explicitely **not** treat `\\r\\n` as line ending. \r\n* error at file load time if there's a lone `\\r` in the source text. That is, after normalization, `\\r` can not be found in the source code at all.\r\n\r\nI propose to go with the second option it's slightly more annoying to implement, but seems more robust. \r\n\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62865/timeline", "performed_via_github_app": null, "state_reason": "completed"}