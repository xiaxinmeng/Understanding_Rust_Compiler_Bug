{"url": "https://api.github.com/repos/rust-lang/rust/issues/68268", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68268/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68268/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68268/events", "html_url": "https://github.com/rust-lang/rust/issues/68268", "id": 550551313, "node_id": "MDU6SXNzdWU1NTA1NTEzMTM=", "number": 68268, "title": "totally confused at rules of lifetime with invariance/covarince", "user": {"login": "zylthinking", "id": 1066931, "node_id": "MDQ6VXNlcjEwNjY5MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1066931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zylthinking", "html_url": "https://github.com/zylthinking", "followers_url": "https://api.github.com/users/zylthinking/followers", "following_url": "https://api.github.com/users/zylthinking/following{/other_user}", "gists_url": "https://api.github.com/users/zylthinking/gists{/gist_id}", "starred_url": "https://api.github.com/users/zylthinking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zylthinking/subscriptions", "organizations_url": "https://api.github.com/users/zylthinking/orgs", "repos_url": "https://api.github.com/users/zylthinking/repos", "events_url": "https://api.github.com/users/zylthinking/events{/privacy}", "received_events_url": "https://api.github.com/users/zylthinking/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-16T03:26:40Z", "updated_at": "2020-01-20T11:36:29Z", "closed_at": "2020-01-16T03:27:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Maybe there is not a proper place to ask such a question;\r\nBut I failed to get an explanation for the following code;\r\nI don't know the exactly rule of lifetime, but it looks totally  unpredictable.\r\nI have add commence in the code.\r\n\r\n\r\n```rust\r\nfn main() {\r\n    //test::test();\r\n    fuck::fuck();\r\n}\r\n\r\nmod fuck {\r\n    #![allow(unused_mut)]\r\n    #![allow(unused_imports)]\r\n    #![allow(unused_variables)]\r\n    use std::mem;\r\n    use std::ptr;\r\n    use std::ptr::NonNull;\r\n    use std::alloc::alloc;\r\n    use std::alloc::Layout;\r\n    use std::alloc::dealloc;\r\n\r\n    pub trait IsAllocator2 {\r\n        fn alloc<T> () -> *mut T;\r\n        unsafe fn free<T> (_: *mut T);\r\n    }\r\n\r\n    pub enum Allocator2 {\r\n    }\r\n\r\n    impl IsAllocator2 for Allocator2 {\r\n        fn alloc<T> () -> *mut T {\r\n            let ptr = unsafe {\r\n                alloc(Layout::new::<T>()) as *mut T\r\n            };\r\n            ptr\r\n        }\r\n\r\n        unsafe fn free<T> (ptr:*mut T) {\r\n            dealloc(ptr as *mut u8, Layout::new::<T>());\r\n        }\r\n    }\r\n\r\n    impl<T> Box<T> {\r\n        pub fn get (&'_ self) -> &'_ T {\r\n            unsafe {\r\n                & *self.ptr\r\n            }\r\n        }\r\n\r\n        pub fn new (value: T) -> Self {\r\n            let non_null = Allocator2::alloc();\r\n            unsafe { ptr::write(non_null, value); }\r\n            Self { \r\n            ptr: non_null,\r\n            }\r\n        }\r\n    }\r\n\r\n    pub struct Box<T> {\r\n        ptr: *const T,\r\n    }\r\n\r\n    pub fn fuck() {\r\n        let s0 = String::from(\"Hello, World!\");\r\n        let mut p: Box<Option<&String>> = Box::new(Some(&s0)); // p.ptr ==> *const Option<&'s0 String>\r\n        // let mut p: Box<Option<&String>> = Box::new(None);   // p.ptr ==> *const Option<&'static String>\r\n        \r\n        unsafe { \r\n            let s = String::from(\"Hello, World!\");\r\n\r\n            // not pass\r\n            let addr: *mut Option<&'static String> = p.ptr as *mut Option<&'static String>; // requires that `s` is borrowed for `'static` in [Box::new(Some(&s0)), Box::new(None)]\r\n            // pass\r\n            let addr: *mut Option<&String> = p.ptr as *mut Option<&String>;\r\n            // pass\r\n            let addr: *const Option<&'static String> = p.ptr as *const Option<&'static String>; // requires `s0` is borrowed for `'static` in [Box::new(None)]\r\n            // pass\r\n            let addr = p.ptr; \r\n\r\n            let addr = addr as *mut Option<&String>;\r\n            ptr::write(addr, Some(&s));\r\n            println!(\"{:?}\", p.ptr);\r\n        }\r\n        dbg!(p.get());\r\n    }\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=bea9b52ff4659adab5791195f3462ea3))", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68268/timeline", "performed_via_github_app": null, "state_reason": "completed"}