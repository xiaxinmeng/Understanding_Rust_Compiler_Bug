{"url": "https://api.github.com/repos/rust-lang/rust/issues/93707", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93707/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93707/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93707/events", "html_url": "https://github.com/rust-lang/rust/issues/93707", "id": 1125251015, "node_id": "I_kwDOAAsO6M5DEffH", "number": 93707, "title": "Could the compiler automatically re-use `Box` allocations as an optimization?", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-02-06T16:37:08Z", "updated_at": "2023-04-05T17:34:46Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I tried this code: <https://play.rust-lang.org/?version=nightly&mode=release&edition=2021&gist=f7612dfa44bc15ef44bd7d759dce1b87>\r\n```rust\r\npub fn demo(x: Box<i32>) -> Box<f32> {\r\n    let i = *x;\r\n    drop(x);\r\n    let f = i as f32;\r\n    Box::new(f)\r\n}\r\n```\r\n\r\nGiven that `i32` and `f32` have the same layout (at least on my target) I was hoping that the compiler would be able to -- as an optimization -- avoid the dealloc+alloc dance here.\r\n\r\nBut it looks like, right now at least, it doesn't re-use it even when the optimizer puts the `__rust_dealloc`+`__rust_alloc` right next to each other with matching layout arguments.  Obviously this wouldn't be guaranteed, but hopefully in a bunch of simple cases it could just work.\r\n```llvm\r\n; playground::demo\r\n; Function Attrs: nounwind nonlazybind uwtable\r\ndefine noalias nonnull align 4 float* @_ZN10playground4demo17h6a3fa9b52448831aE(i32* noalias nonnull align 4 %x) unnamed_addr #0 personality i32 (i32, i32, i64, %\"unwind::libunwind::_Unwind_Exception\"*, %\"unwind::libunwind::_Unwind_Context\"*)* @rust_eh_personality {\r\nstart:\r\n  %i = load i32, i32* %x, align 4\r\n  %_2.i.i.i.i = bitcast i32* %x to i8*\r\n  tail call void @__rust_dealloc(i8* nonnull %_2.i.i.i.i, i64 4, i64 4) #4      // <-- HERE\r\n  %0 = tail call dereferenceable_or_null(4) i8* @__rust_alloc(i64 4, i64 4) #4  // <-- HERE\r\n  %1 = icmp eq i8* %0, null\r\n  br i1 %1, label %bb3.i.i, label %\"_ZN5alloc5boxed12Box$LT$T$GT$3new17hdd831c84a3ba3a35E.exit\"\r\n\r\nbb3.i.i:                                          ; preds = %start\r\n; call alloc::alloc::handle_alloc_error\r\n  tail call void @_ZN5alloc5alloc18handle_alloc_error17he10e441498789810E(i64 4, i64 4) #5\r\n  unreachable\r\n\r\n\"_ZN5alloc5boxed12Box$LT$T$GT$3new17hdd831c84a3ba3a35E.exit\": ; preds = %start\r\n  %f = sitofp i32 %i to float\r\n  %2 = bitcast i8* %0 to float*\r\n  store float %f, float* %2, align 4\r\n  ret float* %2\r\n}\r\n```\r\n\r\ncc #93653, about APIs to do this manually", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93707/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93707/timeline", "performed_via_github_app": null, "state_reason": null}