{"url": "https://api.github.com/repos/rust-lang/rust/issues/73808", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73808/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73808/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73808/events", "html_url": "https://github.com/rust-lang/rust/issues/73808", "id": 646729003, "node_id": "MDU6SXNzdWU2NDY3MjkwMDM=", "number": 73808, "title": "Contrived type-outlives code does not compile", "user": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-27T18:14:47Z", "updated_at": "2020-06-27T21:29:52Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The following code (based on https://github.com/rust-lang/rust/pull/67911#issuecomment-576029184):\r\n\r\n```rust\r\nfn g<'a, T: 'a>(t: &T) -> &'a i32 {\r\n    &0\r\n}\r\n\r\nfn f<'a, 'b, T: 'a + 'b>(x: T) -> (&'a i32, &'b i32) { // compare with returning (&'a i32, &'a i32) \r\n    let y = g(&x);\r\n    (y, y)\r\n}\r\n```\r\n\r\nproduces the following error message as of `rustc 1.46.0-nightly (ff5b446d2 2020-06-23)`:\r\n\r\n```\r\nerror[E0310]: the parameter type `T` may not live long enough\r\n --> src/lib.rs:6:13\r\n  |\r\n5 | fn f<'a, 'b, T: 'a + 'b>(x: T) -> (&'a i32, &'b i32) { // compare with returning (&'a i32, &'a i32) \r\n  |              -- help: consider adding an explicit lifetime bound...: `T: 'static +`\r\n6 |     let y = g(&x);\r\n  |             ^\r\n  |\r\nnote: ...so that the type `T` will meet its required lifetime bounds\r\n --> src/lib.rs:6:13\r\n  |\r\n6 |     let y = g(&x);\r\n  |             ^\r\n```\r\n\r\nwith `-Z borrowck=mir`:\r\n\r\n```\r\nerror[E0309]: the parameter type `T` may not live long enough\r\n --> contrived.rs:6:13\r\n  |\r\n6 |     let y = g(&x);\r\n  |             ^^^^^\r\n  |\r\n  = help: consider adding an explicit lifetime bound `T: 'a`...\r\n```\r\n\r\nHowever, this should actually be able to compile. If we infer `y` to the equivalent of `&('a + 'b) i32`, then\r\n\r\n`(&('a + 'b) i32, &('a + 'b) i32) <: (&'a i32, &'b i32)`\r\n\r\nWe have that `T: 'a` and `T: 'b` from the generic parameter `T: 'a + 'b`, so we should be able to determine that `T` lives long enough.\r\n\r\nHowever, the current `TypeTest` code (if I understand it correctly) attempts to prove that a type lives long enough by applying each of the lifetime bounds individually (e.g. splitting `T: 'a + 'b` into `T: 'a` and `T: 'b`). However, neither `T: 'a` nor `T: 'a` alone is sufficient to prove that `T: 'a + 'b`, so this check fails.\r\n\r\nI suspect that this will never actually matter in practice, so the additional complexity needed to make this code compile might not be worth it. However, I didn't see an open issue for this, so I opened this issue for future reference.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73808/timeline", "performed_via_github_app": null, "state_reason": null}