{"url": "https://api.github.com/repos/rust-lang/rust/issues/46131", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/46131/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/46131/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/46131/events", "html_url": "https://github.com/rust-lang/rust/issues/46131", "id": 275467422, "node_id": "MDU6SXNzdWUyNzU0Njc0MjI=", "number": 46131, "title": "rustc recommends non-existent use", "user": {"login": "thanatos", "id": 90853, "node_id": "MDQ6VXNlcjkwODUz", "avatar_url": "https://avatars.githubusercontent.com/u/90853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thanatos", "html_url": "https://github.com/thanatos", "followers_url": "https://api.github.com/users/thanatos/followers", "following_url": "https://api.github.com/users/thanatos/following{/other_user}", "gists_url": "https://api.github.com/users/thanatos/gists{/gist_id}", "starred_url": "https://api.github.com/users/thanatos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thanatos/subscriptions", "organizations_url": "https://api.github.com/users/thanatos/orgs", "repos_url": "https://api.github.com/users/thanatos/repos", "events_url": "https://api.github.com/users/thanatos/events{/privacy}", "received_events_url": "https://api.github.com/users/thanatos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-20T19:18:10Z", "updated_at": "2017-11-20T19:24:08Z", "closed_at": "2017-11-20T19:24:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**`rustc` will recommend the non-existent use statement `use std::os::ext::process::CommandExt;`**, if the `CommandExt` trait is used, but not in scope.\r\n\r\nConsider the following minimal example, a program that we would like to exec `true`:\r\n\r\n```rust\r\nuse std::process::Command;\r\n\r\nfn main() {\r\n    let err = Command::new(\"true\").exec();\r\n    panic!(err)\r\n}\r\n```\r\n\r\nThis shouldn't compile, as the `CommandExt` trait, which `.exec` is part of, is not in scope. `rustc` says as much:\r\n\r\n```\r\n\u00bb rustc execit.rs\r\nerror[E0599]: no method named `exec` found for type `std::process::Command` in the current scope\r\n --> execit.rs:4:36\r\n  |\r\n4 |     let err = Command::new(\"true\").exec();\r\n  |                                    ^^^^\r\n  |\r\n  = help: items from traits can only be used if the trait is in scope\r\n  = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\r\n          candidate #1: `use std::os::ext::process::CommandExt;`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nLet's take the compiler's suggestion, since it is correct \u2014 a required trait is indeed not in scope:\r\n\r\n```\r\n\u00bb cat execit.rs\r\nuse std::process::Command;\r\nuse std::os::ext::process::CommandExt;\r\n\r\nfn main() {\r\n    let err = Command::new(\"true\").exec();\r\n    panic!(err)\r\n}\r\n\u00bb rustc execit.rs\r\nerror[E0432]: unresolved import `std::os::ext`\r\n --> execit.rs:2:14\r\n  |\r\n2 | use std::os::ext::process::CommandExt;\r\n  |              ^^^ Could not find `ext` in `os`\r\n\r\nwarning: unused import: `std::os::ext::process::CommandExt`\r\n --> execit.rs:2:5\r\n  |\r\n2 | use std::os::ext::process::CommandExt;\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: #[warn(unused_imports)] on by default\r\n\r\nerror[E0599]: no method named `exec` found for type `std::process::Command` in the current scope\r\n --> execit.rs:5:36\r\n  |\r\n5 |     let err = Command::new(\"true\").exec();\r\n  |                                    ^^^^\r\n  |\r\n  = help: items from traits can only be used if the trait is in scope\r\n  = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\r\n          candidate #1: `use std::os::ext::process::CommandExt;`\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\n\u2026 it both fails to resolve the import, and re-recommends that very import in the same output.\r\n\r\nI'm not sure how `rustc` forms its candidates for missing `use` statements (which are normally spot-on suggestion, BTW) but this particular one is bugged (and somewhat wat-inducing).\r\n\r\nThe [docs for `Command`](https://doc.rust-lang.org/std/process/struct.Command.html) link to `std::os::unix::process::CommandExt`, and indeed, that compiles:\r\n\r\n```\r\n\u00bb cat execit.rs\r\nuse std::process::Command;\r\nuse std::os::unix::process::CommandExt;\r\n\r\nfn main() {\r\n    let err = Command::new(\"true\").exec();\r\n    panic!(err)\r\n}\r\n\u00bb rustc execit.rs\r\n\u00bb # success!\r\n```", "closed_by": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/46131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/46131/timeline", "performed_via_github_app": null, "state_reason": "completed"}