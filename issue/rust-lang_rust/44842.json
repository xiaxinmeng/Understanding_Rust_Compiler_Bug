{"url": "https://api.github.com/repos/rust-lang/rust/issues/44842", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44842/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44842/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44842/events", "html_url": "https://github.com/rust-lang/rust/issues/44842", "id": 260345622, "node_id": "MDU6SXNzdWUyNjAzNDU2MjI=", "number": 44842, "title": "Using Error well: .description() vs Display", "user": {"login": "U007D", "id": 2874989, "node_id": "MDQ6VXNlcjI4NzQ5ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2874989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/U007D", "html_url": "https://github.com/U007D", "followers_url": "https://api.github.com/users/U007D/followers", "following_url": "https://api.github.com/users/U007D/following{/other_user}", "gists_url": "https://api.github.com/users/U007D/gists{/gist_id}", "starred_url": "https://api.github.com/users/U007D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/U007D/subscriptions", "organizations_url": "https://api.github.com/users/U007D/orgs", "repos_url": "https://api.github.com/users/U007D/repos", "events_url": "https://api.github.com/users/U007D/events{/privacy}", "received_events_url": "https://api.github.com/users/U007D/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-09-25T16:54:25Z", "updated_at": "2018-05-23T23:10:13Z", "closed_at": "2018-05-23T23:10:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "## The issue\r\nI have been looking at adopting [error-chain](https://github.com/rust-lang-nursery/error-chain) to reduce error code boilerplate in my projects.\r\n\r\nWhen defining a new custom error in error-chain, fully 50% of the work is defining a `description` field.  As it always seems to be similar (but not usually identical) to the Display trait implementation, I began to wonder why there were two ways to \"display\" an error, and whether it would be possible to implement them in a DRY manner (at least for common use cases).\r\n\r\nI could find no documentation to clarify this situation for me.  Can this be documented in some way so as to provide context to new Rust users on which way to turn when arriving at the Error fork on the road to Rust proficiency?\r\n\r\n## A solution proposal\r\nI have come to understand that `.description()` could be considered somewhat vestigial at this point.  If true, I wonder whether it makes sense to establish a convention for defining `.description()`, such that it is can be deprecated, thus avoiding further confusion?\r\n\r\nI am not an expert in Rust, but in the interest of clarity, here is one way we might go about removing `description` from the list of things the user has to think about, without breaking backward compat.  The goal is to make `description` something that all users can simply ignore in the future, further reducing the amount of boilerplate associated with best-practices error handling in Rust.\r\n\r\nWe begin establishing a convention for `.description()` as  the name of the Error variant: say, `enum MyError { FooBar() }` should be implemented as `impl Error for MyError { fn description() { println!(\"foo bar\") };`.\r\n\r\nThe nice thing about this is that in future versions of `rustc`, the description method can be auto-implemented by the compiler (converting `CamelCase` to space-delimited `lower case`, or whatever is deemed appropriate, with non-conforming names to be passed through verbatim).  The Error trait could have an overridable default implementation of `description` (conforming to the above) as `cause` does today,  with the difference being, in `description`'s case, the intent would be to soft-deprecate it my making something the user no longer has to think about.\r\n\r\nIf this makes sense, let me know and I'll open a related issue with error-chain--as the defacto standard crate for error handling in Rust, having it auto-implement description according to a simple convention such as this would be an easy way to start down the road to a fix.", "closed_by": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44842/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44842/timeline", "performed_via_github_app": null, "state_reason": "completed"}