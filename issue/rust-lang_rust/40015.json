{"url": "https://api.github.com/repos/rust-lang/rust/issues/40015", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40015/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40015/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40015/events", "html_url": "https://github.com/rust-lang/rust/issues/40015", "id": 209274488, "node_id": "MDU6SXNzdWUyMDkyNzQ0ODg=", "number": 40015, "title": "detect when \"unconstrained type parameters\" could be provided explicitly to a fn call", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 693664741, "node_id": "MDU6TGFiZWw2OTM2NjQ3NDE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mentor", "name": "E-needs-mentor", "color": "02e10c", "default": false, "description": "Call for participation: This issue is in need of a mentor."}, {"id": 693665463, "node_id": "MDU6TGFiZWw2OTM2NjU0NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-diagnostics", "name": "WG-diagnostics", "color": "c2e0c6", "default": false, "description": "Working group: diagnostics"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-21T21:14:15Z", "updated_at": "2019-12-14T02:08:29Z", "closed_at": "2019-12-14T02:08:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Building on https://github.com/rust-lang/rust/pull/39361, we might want to consider when users should add explicit type parameters to a fn call. I am imagining an example like this:\r\n\r\n```rust\r\nfn foo<T>() { }\r\n\r\nfn main() {\r\n    foo();\r\n}\r\n```\r\n\r\nIt'd be nice to suggest that the user write `foo::<T>` for some explicit `T`. This will require a bit of thought:\r\n\r\n**When do we want to suggest this in preference to annotating a local variable?** I'd prefer to attach the annotation on the local variable, but maybe not if the type of the local variable is some complex thing that mentions the uninferred type deeply inside of it, whereas annotating the function would allow us to specify the uninferred type directly.\r\n\r\nAn example:\r\n\r\n```rust\r\nfn foo<T>() -> Option<T> { }\r\n\r\nfn main() {\r\n    let x = foo();\r\n}\r\n```\r\n\r\nShould we suggest labeling `x: Option<T>` or `foo::<T>`? This case is borderline, but if you replace `Option` with some more complex type it tilts the balance further.\r\n\r\n**What do we do when the fn takes many types, and we know them partially?** We side-stepped the problem before of what to do when we have some information but not all. But it feels like here it may be more important. An example:\r\n\r\n```rust\r\nfn foo<T, U>() -> T { }\r\n\r\nfn main() {\r\n    let x: i32 = foo();\r\n}\r\n```\r\n\r\nHere we know `T`, but not `U`. Should we suggest `foo::<_, XXX>`? How do we phrase the `XXX` to indicate to the user that this is the thing they need to provide?\r\n\r\ncc @cengizIO -- interesting in pursuing?\r\n\r\ncc @estebank @jonathandturner -- thoughts on how to phrase?\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40015/timeline", "performed_via_github_app": null, "state_reason": "completed"}