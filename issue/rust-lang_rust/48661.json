{"url": "https://api.github.com/repos/rust-lang/rust/issues/48661", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48661/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48661/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48661/events", "html_url": "https://github.com/rust-lang/rust/issues/48661", "id": 301712021, "node_id": "MDU6SXNzdWUzMDE3MTIwMjE=", "number": 48661, "title": "It's impossible to write a panic crate for no_std", "user": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-03-02T09:58:03Z", "updated_at": "2018-04-08T22:02:31Z", "closed_at": "2018-04-07T19:49:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "(Originally filed as https://github.com/rust-lang/cargo/issues/5106, but I think it's actually a rustc issue)\r\n\r\nI've created a workspace and have multiple crates, all of which are `no_std` and need a `panic_fmt` implementation, so I created a separate crate that can be shared for that. Then I built a cdylib which built and linked fine, but failed at runtime with \"undefined symbol: rust_begin_unwind\".\r\n\r\nHere's how to reproduce (on Linux, but I expect this should fail the same on all platforms):\r\n```\r\n$ cargo new --lib bar\r\n$ cd bar\r\n$ cargo new --lib panic\r\n$ cat > panic/src/lib.rs <<EOF\r\n#![no_std]\r\n#![feature(lang_items)]\r\n\r\n#[cfg(not(test))]\r\n#[lang = \"panic_fmt\"]\r\n#[no_mangle]\r\npub extern \"C\" fn panic_fmt(_: core::fmt::Arguments, _: &'static str, _: u32, _: u32) -> ! {\r\n    loop {}\r\n}\r\nEOF\r\n$ cat >> Cargo.toml <<EOF\r\npanic = { path = \"panic\" }\r\n\r\n[profile.dev]\r\npanic = \"abort\"\r\n\r\n[profile.release]\r\npanic = \"abort\"\r\n\r\n[lib]\r\ncrate-type = [\"cdylib\"]\r\nEOF\r\n$ cat > src/lib.rs <<EOF\r\n#![no_std]\r\nextern crate panic;\r\n\r\n#[no_mangle]\r\npub fn foo() -> ! {\r\n    panic!(\"\");\r\n}\r\nEOF\r\n$ cargo +nightly build --release\r\n   Compiling bar v0.1.0 (file:///tmp/bar)\r\n    Finished release [optimized] target(s) in 0.11 secs\r\n```\r\n\r\nNote how this all compiled and linked fine. But:\r\n\r\n```\r\n$ objdump -T target/release/libbar.so \r\n\r\ntarget/release/libbar.so:     file format elf64-x86-64\r\n\r\nDYNAMIC SYMBOL TABLE:\r\n0000000000000000  w   D  *UND*\t0000000000000000 __cxa_finalize\r\n0000000000000000  w   D  *UND*\t0000000000000000 _ITM_registerTMCloneTable\r\n0000000000000000      D  *UND*\t0000000000000000 rust_begin_unwind\r\n0000000000000000  w   D  *UND*\t0000000000000000 _ITM_deregisterTMCloneTable\r\n0000000000000000  w   D  *UND*\t0000000000000000 __gmon_start__\r\n0000000000000550 g    DF .text\t000000000000000f foo\r\n```\r\n\r\n`rust_begin_unwind` is undefined.\r\n\r\nThe reason this is happening is because nothing is using the symbol in any library that appears *before* libpanic on the linker command line, and the only thing that does use the symbol is libcore, which comes after. So the linker happily removes it.\r\n\r\nIf I force libpanic to be added last on the linker command line, it works:\r\n\r\n```\r\n$ RUSTFLAGS=\"-C link-arg=target/release/deps/libpanic-3af7779d45985ae9.rlib\" cargo +nightly build --release\r\n   Compiling bar v0.1.0 (file:///tmp/bar)\r\n    Finished release [optimized] target(s) in 0.11 secs\r\n\r\n$ objdump -T target/release/libbar.so \r\n\r\ntarget/release/libbar.so:     file format elf64-x86-64\r\n\r\nDYNAMIC SYMBOL TABLE:\r\n0000000000000000  w   D  *UND*\t0000000000000000 __cxa_finalize\r\n0000000000000000  w   D  *UND*\t0000000000000000 _ITM_registerTMCloneTable\r\n0000000000000000  w   D  *UND*\t0000000000000000 _ITM_deregisterTMCloneTable\r\n0000000000000000  w   D  *UND*\t0000000000000000 __gmon_start__\r\n0000000000000620 g    DF .text\t0000000000000002 rust_begin_unwind\r\n0000000000000550 g    DF .text\t000000000000000f foo\r\n```\r\n\r\nRelatedly, this makes me think cargo should probably add `-Wl,-z,defs`:\r\n\r\n```\r\n$ RUSTFLAGS=\"-C link-arg=-Wl,-z,defs\" cargo +nightly build --release\r\n   Compiling bar v0.1.0 (file:///tmp/bar)\r\nerror: linking with `cc` failed: exit code: 1\r\n  |\r\n  = note: \"cc\" \"-Wl,--as-needed\" \"-Wl,-z,noexecstack\" \"-m64\" \"-L\" \"/home/glandium/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"/tmp/bar/target/release/deps/bar.bar0-b17b6035155785f4e639ba83018b4206.rs.rcgu.o\" \"-o\" \"/tmp/bar/target/release/deps/libbar.so\" \"-Wl,--version-script=/tmp/rustc.vWTWjhp8JGrI/list\" \"-Wl,--gc-sections\" \"-Wl,-z,relro,-z,now\" \"-Wl,-O1\" \"-nodefaultlibs\" \"-L\" \"/tmp/bar/target/release/deps\" \"-L\" \"/home/glandium/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-Wl,-Bstatic\" \"/tmp/bar/target/release/deps/libpanic-3af7779d45985ae9.rlib\" \"/home/glandium/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore-80b45058e2fc80f9.rlib\" \"-shared\" \"-Wl,-z,defs\" \"-Wl,-Bdynamic\"\r\n  = note: /home/glandium/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore-80b45058e2fc80f9.rlib(core-80b45058e2fc80f9.core0.rcgu.o): In function `core::panicking::panic_fmt':\r\n          /checkout/src/libcore/num/bignum.rs:263: undefined reference to `rust_begin_unwind'\r\n          collect2: error: ld returned 1 exit status\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48661/timeline", "performed_via_github_app": null, "state_reason": "completed"}