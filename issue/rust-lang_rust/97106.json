{"url": "https://api.github.com/repos/rust-lang/rust/issues/97106", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/97106/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/97106/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/97106/events", "html_url": "https://github.com/rust-lang/rust/issues/97106", "id": 1238129598, "node_id": "I_kwDOAAsO6M5JzFu-", "number": 97106, "title": "Misleading error messages on closure lifetimes, instead of type", "user": {"login": "xNxExOx", "id": 1893229, "node_id": "MDQ6VXNlcjE4OTMyMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1893229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xNxExOx", "html_url": "https://github.com/xNxExOx", "followers_url": "https://api.github.com/users/xNxExOx/followers", "following_url": "https://api.github.com/users/xNxExOx/following{/other_user}", "gists_url": "https://api.github.com/users/xNxExOx/gists{/gist_id}", "starred_url": "https://api.github.com/users/xNxExOx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xNxExOx/subscriptions", "organizations_url": "https://api.github.com/users/xNxExOx/orgs", "repos_url": "https://api.github.com/users/xNxExOx/repos", "events_url": "https://api.github.com/users/xNxExOx/events{/privacy}", "received_events_url": "https://api.github.com/users/xNxExOx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-05-17T06:20:39Z", "updated_at": "2022-05-17T06:20:39Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Given the following code: [play.rust-lang.org](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=23c84402992527afdcaf1491430fd8af)\r\n\r\n```rust\r\n/// I added this when figuring out the error message\r\nfn not_great(){\r\n    let not_zero = |&x| x != 0;\r\n    [0, 1, 2].iter().filter(not_zero);\r\n}\r\n\r\n/// Not great, but would have lead me to checking deref count\r\nfn not_great2(){\r\n    [(0, false), (1, false), (2, false)].iter().filter(|&(x, _)| x != 0);\r\n}\r\n\r\n/// this would work, but I wanted to use `not_zero` multiple times, so I started with closure\r\nfn _works_ok() {\r\n    [(0, false), (1, false), (2, false)].iter().filter(|&&(x, _)| x != 0).all(|_|true);\r\n}\r\n\r\n/// this is very simplified case of the issue\r\nfn misleading() {\r\n    let not_zero = |&(x, _)| x != 0;\r\n    [(0, false), (1, false), (2, false)].iter().filter(not_zero);\r\n}\r\n\r\n/// this is full example of the issues, that now not even `all` compiles with very strange error message\r\nfn misleading2() {\r\n    let not_zero = |&(x, _)| x != 0;\r\n    [(0, false), (1, false), (2, false)].iter().filter(not_zero).all(|_|true);\r\n}\r\n\r\n/// when deref is corrected, it errors out on \"implementation of `FnOnce` is not general enough\"\r\nfn very_misleading() {\r\n    let not_zero = |&&(x, _)| x != 0;\r\n    [(0, false), (1, false), (2, false)].iter().filter(not_zero);\r\n}\r\n\r\n/// and this is the most unreadable one, that again does not offer any hint how to fix it, but I do not even have a clue what is wrong\r\nfn very_misleading2() {\r\n    let not_zero = |&&(x, _)| x != 0;\r\n    [(0, false), (1, false), (2, false)].iter().filter(not_zero).all(|_|true);\r\n}\r\n```\r\nI wanted to use `not_zero` multiple times, so I did not even tried to put it directly to the `filter` \r\n\r\nThe current output is:\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): can't compare `&{integer}` with `{integer}`\r\n --> src/main.rs:4:27\r\n  |\r\n4 |     let not_zero = |&x| x != 0;\r\n  |                           ^^ no implementation for `&{integer} == {integer}`\r\n  |\r\n  = help: the trait `PartialEq<{integer}>` is not implemented for `&{integer}`\r\n\r\nerror[[E0277]](https://doc.rust-lang.org/stable/error-index.html#E0277): can't compare `&{integer}` with `{integer}`\r\n  --> src/main.rs:10:68\r\n   |\r\n10 |     [(0, false), (1, false), (2, false)].iter().filter(|&(x, _)| x != 0);\r\n   |                                                                    ^^ no implementation for `&{integer} == {integer}`\r\n   |\r\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&{integer}`\r\n\r\nerror[[E0631]](https://doc.rust-lang.org/stable/error-index.html#E0631): type mismatch in closure arguments\r\n   --> src/main.rs:21:56\r\n    |\r\n20  |     let not_zero = |&(x, _)| x != 0;\r\n    |                    ---------------- found signature of `fn(&(_, _)) -> _`\r\n21  |     [(0, false), (1, false), (2, false)].iter().filter(not_zero);\r\n    |                                                 ------ ^^^^^^^^ expected signature of `for<'r> fn(&'r &({integer}, bool)) -> _`\r\n    |                                                 |\r\n    |                                                 required by a bound introduced by this call\r\n    |\r\nnote: required by a bound in `filter`\r\n\r\nerror[[E0631]](https://doc.rust-lang.org/stable/error-index.html#E0631): type mismatch in closure arguments\r\n   --> src/main.rs:27:56\r\n    |\r\n26  |     let not_zero = |&(x, _)| x != 0;\r\n    |                    ---------------- found signature of `fn(&(_, _)) -> _`\r\n27  |     [(0, false), (1, false), (2, false)].iter().filter(not_zero).all(|_|true);\r\n    |                                                 ------ ^^^^^^^^ expected signature of `for<'r> fn(&'r &({integer}, bool)) -> _`\r\n    |                                                 |\r\n    |                                                 required by a bound introduced by this call\r\n    |\r\nnote: required by a bound in `filter`\r\n\r\nerror[[E0599]](https://doc.rust-lang.org/stable/error-index.html#E0599): the method `all` exists for struct `Filter<std::slice::Iter<'_, ({integer}, bool)>, [closure@src/main.rs:26:20: 26:36]>`, but its trait bounds were not satisfied\r\n  --> src/main.rs:27:66\r\n   |\r\n26 |       let not_zero = |&(x, _)| x != 0;\r\n   |                      ----------------\r\n   |                      |\r\n   |                      doesn't satisfy `<_ as FnOnce<(&&({integer}, bool),)>>::Output = bool`\r\n   |                      doesn't satisfy `_: FnMut<(&&({integer}, bool),)>`\r\n27 |       [(0, false), (1, false), (2, false)].iter().filter(not_zero).all(|_|true);\r\n   |                                                                    ^^^ method cannot be called on `Filter<std::slice::Iter<'_, ({integer}, bool)>, [closure@src/main.rs:26:20: 26:36]>` due to unsatisfied trait bounds\r\n   |\r\n   = note: the following trait bounds were not satisfied:\r\n           `<[closure@src/main.rs:26:20: 26:36] as FnOnce<(&&({integer}, bool),)>>::Output = bool`\r\n           which is required by `Filter<std::slice::Iter<'_, ({integer}, bool)>, [closure@src/main.rs:26:20: 26:36]>: Iterator`\r\n           `[closure@src/main.rs:26:20: 26:36]: FnMut<(&&({integer}, bool),)>`\r\n           which is required by `Filter<std::slice::Iter<'_, ({integer}, bool)>, [closure@src/main.rs:26:20: 26:36]>: Iterator`\r\n\r\nerror: implementation of `FnOnce` is not general enough\r\n  --> src/main.rs:33:49\r\n   |\r\n33 |     [(0, false), (1, false), (2, false)].iter().filter(not_zero);\r\n   |                                                 ^^^^^^ implementation of `FnOnce` is not general enough\r\n   |\r\n   = note: closure with signature `fn(&'2 &(i32, bool)) -> bool` must implement `FnOnce<(&'1 &(i32, bool),)>`, for any lifetime `'1`...\r\n   = note: ...but it actually implements `FnOnce<(&'2 &(i32, bool),)>`, for some specific lifetime `'2`\r\n\r\nerror[[E0599]](https://doc.rust-lang.org/stable/error-index.html#E0599): the method `all` exists for struct `Filter<std::slice::Iter<'_, ({integer}, bool)>, [closure@src/main.rs:38:20: 38:37]>`, but its trait bounds were not satisfied\r\n  --> src/main.rs:39:66\r\n   |\r\n38 |       let not_zero = |&&(x, _)| x != 0;\r\n   |                      -----------------\r\n   |                      |\r\n   |                      doesn't satisfy `<_ as FnOnce<(&&({integer}, bool),)>>::Output = bool`\r\n   |                      doesn't satisfy `_: FnMut<(&&({integer}, bool),)>`\r\n39 |       [(0, false), (1, false), (2, false)].iter().filter(not_zero).all(|_|true);\r\n   |                                                                    ^^^ method cannot be called on `Filter<std::slice::Iter<'_, ({integer}, bool)>, [closure@src/main.rs:38:20: 38:37]>` due to unsatisfied trait bounds\r\n   |\r\n   = note: the following trait bounds were not satisfied:\r\n           `<[closure@src/main.rs:38:20: 38:37] as FnOnce<(&&({integer}, bool),)>>::Output = bool`\r\n           which is required by `Filter<std::slice::Iter<'_, ({integer}, bool)>, [closure@src/main.rs:38:20: 38:37]>: Iterator`\r\n           `[closure@src/main.rs:38:20: 38:37]: FnMut<(&&({integer}, bool),)>`\r\n           which is required by `Filter<std::slice::Iter<'_, ({integer}, bool)>, [closure@src/main.rs:38:20: 38:37]>: Iterator`\r\n\r\nSome errors have detailed explanations: E0277, E0599, E0631.\r\nFor more information about an error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to 7 previous errors\r\n```\r\n\r\nIdeally the output should look like:\r\n\r\n```\r\nHint: try adding type:\r\nlet not_zero = |&&(x, _)| x != 0;\r\n                ^ expected && instead of &\r\n(if it would actually work)\r\n\r\nHint: try adding type:\r\nlet not_zero = |&&(x, _): &&(i32, bool)| x != 0;\r\n                ^-------^^^^^^^^^^^^^^^ expected full type\r\n```\r\nsorry not really good at formulating the exact message \ud83d\ude1e to look like the good error messages with hint to fix things\r\n\r\n> If dramatically different output is caused by small changes, consider also\r\nadding them here.\r\n\r\nI added it as `misleading2` and `very_misleading2` functions, which are more close to my code, but at that point I was already figuring it out outside of real code on the simplified examples.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/97106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/97106/timeline", "performed_via_github_app": null, "state_reason": null}