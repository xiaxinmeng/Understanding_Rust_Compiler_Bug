{"url": "https://api.github.com/repos/rust-lang/rust/issues/86978", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86978/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86978/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86978/events", "html_url": "https://github.com/rust-lang/rust/issues/86978", "id": 939982524, "node_id": "MDU6SXNzdWU5Mzk5ODI1MjQ=", "number": 86978, "title": "Conversion between the same type with different const generic values", "user": {"login": "Progdrasil", "id": 11562522, "node_id": "MDQ6VXNlcjExNTYyNTIy", "avatar_url": "https://avatars.githubusercontent.com/u/11562522?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Progdrasil", "html_url": "https://github.com/Progdrasil", "followers_url": "https://api.github.com/users/Progdrasil/followers", "following_url": "https://api.github.com/users/Progdrasil/following{/other_user}", "gists_url": "https://api.github.com/users/Progdrasil/gists{/gist_id}", "starred_url": "https://api.github.com/users/Progdrasil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Progdrasil/subscriptions", "organizations_url": "https://api.github.com/users/Progdrasil/orgs", "repos_url": "https://api.github.com/users/Progdrasil/repos", "events_url": "https://api.github.com/users/Progdrasil/events{/privacy}", "received_events_url": "https://api.github.com/users/Progdrasil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-07-08T15:32:20Z", "updated_at": "2021-07-08T16:11:06Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\nI have a struct which uses const generics for defining some of its properties. \r\nI'd like to use the standard `From` and `Into` traits for converting from one struct to another with different const values.\r\nThere exists a non-fallible equation for the conversion.\r\nHowever the default `impl<T> From<T> for T` is clashing with my implementation.\r\n\r\nI tried this code:\r\n\r\n```rust\r\nstruct Decimal<const X: u32>(/* fields unimportant */);\r\n\r\nimpl<const X: u32, const Y: u32> From<Decimal<X>> for Decimal<Y> {\r\n    fn from(previous: Decimal<X>) -> Self {\r\n        /*\r\n        mathematical conversions\r\n        */\r\n        Self(/*ommited*/)\r\n    }\r\n}\r\n```\r\n\r\nThe compiler [outputs](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=049c5e309e049de786b6f9e8ead0f8c4)\r\n```\r\nerror[E0119]: conflicting implementations of trait `std::convert::From<Decimal<{_: u32}>>` for type `Decimal<{_: u32}>`\r\n --> src/lib.rs:3:1\r\n  |\r\n3 | impl<const S1: u32, const S2: u32> From<Decimal<S1>> for Decimal<S2> {\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: conflicting implementation in crate `core`:\r\n          - impl<T> From<T> for T;\r\n```\r\n\r\nI understand this might fall into specialization territory but I expected this to compile since `T<const X>` and `T<const Y>` should not be the same type. And indeed the seems to agree since the default implementation does not [allow the following](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=dcd77ad19570d695ac49865e995c0dac):\r\n\r\n```rust\r\nstruct Decimal<const S: u32>(/* fields unimportant */);\r\n\r\nfn main() {\r\n    let x = Decimal::<7>();\r\n    let y: Decimal<8> = x.into();\r\n}\r\n```\r\n\r\nThis fails to compile with:\r\n```\r\nerror[E0277]: the trait bound `Decimal<8_u32>: From<Decimal<7_u32>>` is not satisfied\r\n --> src/main.rs:5:27\r\n  |\r\n5 |     let y: Decimal<8> = x.into();\r\n  |                           ^^^^ the trait `From<Decimal<7_u32>>` is not implemented for `Decimal<8_u32>`\r\n  |\r\n  = note: required because of the requirements on the impl of `Into<Decimal<8_u32>>` for `Decimal<7_u32>`\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n[quinedot](https://users.rust-lang.org/t/conversion-between-the-same-type-but-different-const-generics/61837/2?u=progdrasil) tried some nightly for the case where `X==Y` but [it also does not work](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=049c5e309e049de786b6f9e8ead0f8c4).\r\n\r\n```rust\r\n#![feature(const_generics)]\r\n#![feature(const_evaluatable_checked)]\r\n\r\nstruct Decimal<const S: u32>(/* fields unimportant */);\r\n\r\n// Const generics hackery: `NotEqual` is implemented only for pairs of\r\n// `Decimal`s with non-equal `const` parameters\r\nstruct NoDefault;\r\ntrait NotEqual {}\r\nimpl<const S1: u32, const S2: u32> NotEqual for (Decimal<S1>, Decimal<S2>)\r\nwhere\r\n    [NoDefault; (S1 == S2) as usize]: Default\r\n{}\r\n\r\n// Illustration\r\nfn test_ne () {\r\n    #![allow(unused)]\r\n    fn test<NE: NotEqual>(_: NE) {}\r\n    // okay\r\n    test((Decimal::<1>(), Decimal::<2>()));\r\n    // fails\r\n    // test((Decimal::<1>(), Decimal::<1>()));\r\n}\r\n\r\n// Still fails though\r\nimpl<const S1: u32, const S2: u32> From<Decimal<S1>> for Decimal<S2>\r\nwhere\r\n    (Decimal<S1>, Decimal<S2>): NotEqual\r\n{\r\n    fn from(previous: Decimal<S1>) -> Self {\r\n        // Mathematical conversions from S1 to S2\r\n        Decimal::<S2>(/*fields*/)\r\n    }\r\n}\r\n```\r\n\r\nwith output:\r\n```\r\nerror[E0119]: conflicting implementations of trait `std::convert::From<Decimal<{_: u32}>>` for type `Decimal<{_: u32}>`\r\n  --> src/lib.rs:26:1\r\n   |\r\n26 | / impl<const S1: u32, const S2: u32> From<Decimal<S1>> for Decimal<S2>\r\n27 | | where\r\n28 | |     (Decimal<S1>, Decimal<S2>): NotEqual\r\n29 | | {\r\n...  |\r\n33 | |     }\r\n34 | | }\r\n   | |_^\r\n   |\r\n   = note: conflicting implementation in crate `core`:\r\n           - impl<T> From<T> for T;\r\n```\r\n\r\n### Meta\r\nFor stable examples\r\n`rustc --version --verbose`:\r\n```\r\n1.53.0\r\n```\r\n\r\nFor the nightly example (from playground)\r\n`rustc --version --verbose`:\r\n```\r\n1.55.0-nightly (2021-07-07 d2b04f075c0ce010758c)\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86978/timeline", "performed_via_github_app": null, "state_reason": null}