{"url": "https://api.github.com/repos/rust-lang/rust/issues/83510", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83510/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83510/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83510/events", "html_url": "https://github.com/rust-lang/rust/issues/83510", "id": 841734665, "node_id": "MDU6SXNzdWU4NDE3MzQ2NjU=", "number": 83510, "title": "ICE: panicked at 'called `Option::unwrap()` on a `None` value', compiler/rustc_resolve/src/late/diagnostics.rs:478:65", "user": {"login": "Spadi0", "id": 34598650, "node_id": "MDQ6VXNlcjM0NTk4NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/34598650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Spadi0", "html_url": "https://github.com/Spadi0", "followers_url": "https://api.github.com/users/Spadi0/followers", "following_url": "https://api.github.com/users/Spadi0/following{/other_user}", "gists_url": "https://api.github.com/users/Spadi0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Spadi0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Spadi0/subscriptions", "organizations_url": "https://api.github.com/users/Spadi0/orgs", "repos_url": "https://api.github.com/users/Spadi0/repos", "events_url": "https://api.github.com/users/Spadi0/events{/privacy}", "received_events_url": "https://api.github.com/users/Spadi0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2079070889, "node_id": "MDU6TGFiZWwyMDc5MDcwODg5", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-proc-macros", "name": "A-proc-macros", "color": "f7e101", "default": false, "description": "Area: Procedural macros"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-03-26T08:55:20Z", "updated_at": "2021-04-07T18:02:19Z", "closed_at": "2021-04-07T18:02:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\nWith a proc_macro, an ICE occurs when generating an `impl` block (whether for a trait or not) that has an associated type that looks like this:\r\n\r\n```Rust\r\ntype Foo = Box<Bar> + Baz;\r\n```\r\n\r\nThe type needs to be a valid (in scope) type that takes a generic parameter, with a trait/lifetime bound. Both the generic parameter and the trait/lifetime bound don't actually need to be in scope - just syntactically valid.\r\n\r\nI only found this after a typo (`Pin<Box<...>> + 'static` instead of `Pin<Box<... + 'static>>`); this code shouldn't compile without the ICE anyway - the trait/lifetime bound is on a concrete type. As a result, I cannot foresee a situation where valid code that should compile would fail to compile as a result of this ICE.\r\n\r\n### Code\r\n\r\n```Rust\r\nuse proc_macro::TokenStream;\r\n\r\n#[proc_macro]\r\npub fn cause_an_ice(_: TokenStream) -> TokenStream {\r\n    r#\"\r\n    impl Foo {\r\n        type Bar = Box<()> + Baz;\r\n    }\r\n    \"#\r\n    .parse()\r\n    .unwrap()\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nOccurs on latest stable, beta and nightly versions.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.51.0 (2fd73fabe 2021-03-23)\r\nbinary: rustc\r\ncommit-hash: 2fd73fabe469357a12c2c974c140f67e7cdd76d0\r\ncommit-date: 2021-03-23\r\nhost: aarch64-apple-darwin\r\nrelease: 1.51.0\r\nLLVM version: 11.0.1\r\n```\r\n\r\n```\r\nrustc 1.52.0-beta.1 (6a1077d47 2021-03-24)\r\nbinary: rustc\r\ncommit-hash: 6a1077d47f3c87dd98f881fc456a05a4c39874bc\r\ncommit-date: 2021-03-24\r\nhost: aarch64-apple-darwin\r\nrelease: 1.52.0-beta.1\r\nLLVM version: 12.0.0\r\n```\r\n\r\n```\r\nrustc 1.53.0-nightly (07e0e2ec2 2021-03-24)\r\nbinary: rustc\r\ncommit-hash: 07e0e2ec268c140e607e1ac7f49f145612d0f597\r\ncommit-date: 2021-03-24\r\nhost: aarch64-apple-darwin\r\nrelease: 1.53.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\nI have also tested this on a host running `x86_64-pc-windows-msvc`, and the ICE also occurs on that machine as well.\r\n\r\n### Error output\r\n\r\n```\r\n   Compiling ice v0.1.0 (/Users/user/ice)\r\nthread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', compiler/rustc_resolve/src/late/diagnostics.rs:478:65\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.51.0 (2fd73fabe 2021-03-23) running on aarch64-apple-darwin\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: could not compile `ice`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nstack backtrace:\r\n   0: _rust_begin_unwind\r\n   1: core::panicking::panic_fmt\r\n   2: core::panicking::panic\r\n   3: rustc_resolve::late::diagnostics::<impl rustc_resolve::late::LateResolutionVisitor>::smart_resolve_report_errors\r\n   4: rustc_resolve::late::LateResolutionVisitor::smart_resolve_path_fragment::{{closure}}\r\n   5: rustc_resolve::late::LateResolutionVisitor::smart_resolve_path_fragment\r\n   6: rustc_resolve::late::LateResolutionVisitor::smart_resolve_path\r\n   7: <rustc_resolve::late::LateResolutionVisitor as rustc_ast::visit::Visitor>::visit_poly_trait_ref\r\n   8: rustc_ast::visit::walk_ty\r\n   9: <rustc_resolve::late::LateResolutionVisitor as rustc_ast::visit::Visitor>::visit_ty\r\n  10: rustc_resolve::late::LateResolutionVisitor::with_generic_param_rib\r\n  11: rustc_resolve::late::LateResolutionVisitor::resolve_item\r\n  12: rustc_resolve::late::<impl rustc_resolve::Resolver>::late_resolve_crate\r\n  13: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  14: rustc_resolve::Resolver::resolve_crate\r\n  15: rustc_interface::passes::configure_and_expand_inner\r\n  16: rustc_interface::passes::configure_and_expand::{{closure}}\r\n  17: rustc_data_structures::box_region::PinnedGenerator<I,A,R>::new\r\n  18: rustc_interface::passes::configure_and_expand\r\n  19: rustc_interface::queries::Queries::expansion\r\n  20: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  21: rustc_span::with_source_map\r\n  22: rustc_interface::interface::create_compiler_and_run\r\n  23: rustc_span::with_session_globals\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83510/timeline", "performed_via_github_app": null, "state_reason": "completed"}