{"url": "https://api.github.com/repos/rust-lang/rust/issues/74139", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74139/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74139/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74139/events", "html_url": "https://github.com/rust-lang/rust/issues/74139", "id": 652770366, "node_id": "MDU6SXNzdWU2NTI3NzAzNjY=", "number": 74139, "title": "Re-exported tuple struct changes field visibility depending on how it is imported", "user": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 239393, "node_id": "MDU6TGFiZWwyMzkzOTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-resolve", "name": "A-resolve", "color": "f7e101", "default": false, "description": "Area: Path resolution"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-08T00:21:49Z", "updated_at": "2020-07-08T09:48:07Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I think this is a bug in the compiler, but if that isn't the case, it is at least a diagnostics bug that should definitely be addressed. The error message is very confusing and doesn't indicate the actual issue that needs to be addressed. Here's a fairly minimal reproduction: ([Rust Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ddfa095ba95882b6c8098712e5d54c5d))\r\n\r\n```rust\r\npub use foo::*;\r\n\r\nmod foo {\r\n    pub struct Foo(u32);\r\n    \r\n    mod a {\r\n        use super::Foo;\r\n        \r\n        pub fn func_a() {\r\n            let _foo = Foo(1);\r\n        }\r\n    }\r\n    \r\n    mod b {\r\n        use crate::Foo;\r\n        \r\n        pub fn func_b() {\r\n            let _foo = Foo(1);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nModule `a` compiles with no issues and in module `b` we get the error:\r\n\r\n```\r\nerror[E0423]: expected function, tuple struct or tuple variant, found struct `Foo`\r\n  --> src/lib.rs:18:24\r\n   |\r\n18 |             let _foo = Foo(1);\r\n   |                        ^^^\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThe code in module `a` and module `b` is almost identical. The only difference is that `b` imports `crate::Foo` and `a` imports `super::Foo`. My understanding is that the field of `Foo` should be visible to both `a` and `b` because it is defined in a parent module. This should be the case regardless of how it is imported.\r\n\r\nInterestingly, the key seems to be the fact that `Foo` is re-exported from another module. This code works with no issues:\r\n\r\n```rust\r\npub struct Foo(u32);\r\n\r\nmod a {\r\n    use super::Foo;\r\n    \r\n    pub fn func_a() {\r\n        let _foo = Foo(1);\r\n    }\r\n}\r\n\r\nmod b {\r\n    use crate::Foo;\r\n    \r\n    pub fn func_b() {\r\n        let _foo = Foo(1);\r\n    }\r\n}\r\n```\r\n\r\nHow you import the type only seems to matter if you're importing a re-exported version of it.\r\n\r\nIf this turns out to be expected behaviour, I still think we should definitely change the error message to properly describe what's going on. I imagine that someone who is less familiar with Rust's name resolution would get very stuck on something like this.\r\n\r\n### Meta\r\n\r\nThe playground link above uses stable Rust 1.44.1 but I was using nightly when I ran into this:\r\n\r\n`rustc --version --verbose`:\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.46.0-nightly (2753fab7c 2020-07-05)\r\nbinary: rustc\r\ncommit-hash: 2753fab7ce3647033146b07c8b6c9f4856a910b0\r\ncommit-date: 2020-07-05\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.46.0-nightly\r\nLLVM version: 10.0\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74139/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74139/timeline", "performed_via_github_app": null, "state_reason": null}