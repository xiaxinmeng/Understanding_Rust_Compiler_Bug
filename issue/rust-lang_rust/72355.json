{"url": "https://api.github.com/repos/rust-lang/rust/issues/72355", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72355/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72355/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72355/events", "html_url": "https://github.com/rust-lang/rust/issues/72355", "id": 621148430, "node_id": "MDU6SXNzdWU2MjExNDg0MzA=", "number": 72355, "title": "Counting bytes with high bit set optimizes badly for x86_64", "user": {"login": "hsivonen", "id": 478856, "node_id": "MDQ6VXNlcjQ3ODg1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/478856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hsivonen", "html_url": "https://github.com/hsivonen", "followers_url": "https://api.github.com/users/hsivonen/followers", "following_url": "https://api.github.com/users/hsivonen/following{/other_user}", "gists_url": "https://api.github.com/users/hsivonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/hsivonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hsivonen/subscriptions", "organizations_url": "https://api.github.com/users/hsivonen/orgs", "repos_url": "https://api.github.com/users/hsivonen/repos", "events_url": "https://api.github.com/users/hsivonen/events{/privacy}", "received_events_url": "https://api.github.com/users/hsivonen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 55302148, "node_id": "MDU6TGFiZWw1NTMwMjE0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86_64", "name": "O-x86_64", "color": "6e6ec0", "default": false, "description": "Target: x64 processors"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-19T17:12:57Z", "updated_at": "2020-05-23T19:23:24Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\npub fn count_non_ascii(buffer: &[u8]) -> u64 {\r\n    let mut count = 0;\r\n    for &b in buffer {\r\n        if b >= 0x80 {\r\n            count += 1;\r\n        }\r\n    }\r\n    count\r\n}\r\n```\r\n[Godbolt link](https://rust.godbolt.org/z/qfppbo)\r\n\r\nI expected to see this happen: I expected the compiler to autovectorize along the lines of\r\n```rust\r\npub fn count_non_ascii_sse2(buffer: &[u8]) -> u64 {\r\n    let mut count = 0;\r\n    let (prefix, simd, suffix) = unsafe { buffer.align_to::<core::arch::x86_64::__m128i>() };\r\n    for &b in prefix {\r\n        if b >= 0x80 {\r\n            count += 1;\r\n        }\r\n    }\r\n    for &s in simd {\r\n        count += unsafe {core::arch::x86_64::_mm_movemask_epi8(s)}.count_ones() as u64;\r\n    }\r\n    for &b in suffix {\r\n        if b >= 0x80 {\r\n            count += 1;\r\n        }\r\n    }\r\n    count\r\n}\r\n```\r\n\r\nInstead, this happened: It is autovectorized to something more complex and considerably slower than the manual vectorization given above. (The above manual vectorization becomes even faster when compiled with a `target_cpu` that supports the `POPCNT` instruction.)\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.45.0-nightly (a74d1862d 2020-05-14)\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72355/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72355/timeline", "performed_via_github_app": null, "state_reason": null}