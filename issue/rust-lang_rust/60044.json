{"url": "https://api.github.com/repos/rust-lang/rust/issues/60044", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/60044/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/60044/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/60044/events", "html_url": "https://github.com/rust-lang/rust/issues/60044", "id": 434390336, "node_id": "MDU6SXNzdWU0MzQzOTAzMzY=", "number": 60044, "title": "Missed NonZero optimization opportunity", "user": {"login": "mtak-", "id": 6643140, "node_id": "MDQ6VXNlcjY2NDMxNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6643140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtak-", "html_url": "https://github.com/mtak-", "followers_url": "https://api.github.com/users/mtak-/followers", "following_url": "https://api.github.com/users/mtak-/following{/other_user}", "gists_url": "https://api.github.com/users/mtak-/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtak-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtak-/subscriptions", "organizations_url": "https://api.github.com/users/mtak-/orgs", "repos_url": "https://api.github.com/users/mtak-/repos", "events_url": "https://api.github.com/users/mtak-/events{/privacy}", "received_events_url": "https://api.github.com/users/mtak-/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-17T17:03:00Z", "updated_at": "2020-09-20T13:44:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Godbolt [link](https://rust.godbolt.org/z/lc6Jl0)\r\n\r\nWhen a `NonZeroUsize` is created through `new_unchecked` and wrapped in a `Some`, the optimizer does not recognize that the value is always `Some`. This can be fixed by adding a `std::intrinsics::assume(value != 0)` line before creating the NonZero type.\r\n\r\n```rust\r\nuse std::num::NonZeroUsize;\r\nuse std::sync::atomic::AtomicUsize;\r\nuse std::sync::atomic::Ordering::Relaxed;\r\n\r\npub static X: AtomicUsize = AtomicUsize::new(1);\r\n\r\npub unsafe fn get() -> Option<NonZeroUsize> {\r\n    let x = X.load(Relaxed);\r\n    Some(NonZeroUsize::new_unchecked(x))\r\n}\r\n\r\npub unsafe fn get2() -> usize {\r\n    match get() {\r\n        Some(x) => x.get(),\r\n        None => unreachable!(), // not optimized out\r\n    }\r\n}\r\n```\r\n\r\nLots of panicking code gets generated in this example.\r\n\r\nFixed by:\r\n```rust\r\n#![feature(core_intrinsics)]\r\n\r\nuse std::num::NonZeroUsize;\r\nuse std::sync::atomic::AtomicUsize;\r\nuse std::sync::atomic::Ordering::Relaxed;\r\n\r\npub static X: AtomicUsize = AtomicUsize::new(1);\r\n\r\npub unsafe fn get() -> Option<NonZeroUsize> {\r\n    let x = X.load(Relaxed);\r\n    std::intrinsics::assume(x != 0); // gets rid of the panicking code\r\n    Some(NonZeroUsize::new_unchecked(x))\r\n}\r\n\r\npub unsafe fn get2() -> usize {\r\n    match get() {\r\n        Some(x) => x.get(),\r\n        None => unreachable!(), // optimized away\r\n    }\r\n}\r\n```\r\n\r\nI would guess that adding `assume` inside of `new_unchecked` would be ok, since it's already UB if it's not zero.\r\n\r\nRelated: #51346. Posted as a new issue, because it can be fixed without any LLVM pass changes.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/60044/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/60044/timeline", "performed_via_github_app": null, "state_reason": null}