{"url": "https://api.github.com/repos/rust-lang/rust/issues/51784", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51784/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51784/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51784/events", "html_url": "https://github.com/rust-lang/rust/issues/51784", "id": 335487826, "node_id": "MDU6SXNzdWUzMzU0ODc4MjY=", "number": 51784, "title": "Confusing behavior around unsized return values in traits", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 125141240, "node_id": "MDU6TGFiZWwxMjUxNDEyNDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-dst", "name": "A-dst", "color": "f7e101", "default": false, "description": "Area: Dynamically Sized Types"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-25T16:52:56Z", "updated_at": "2020-03-15T05:28:03Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "The following traits are accepted, ~~but not object safe~~:\r\n```rust\r\npub trait MyTrait {\r\n    fn deserialize(input: u32) -> Self;\r\n}\r\npub trait YourTrait {\r\n    type Output: ?Sized;\r\n    fn deserialize(&self, input: u32) -> Self::Output;\r\n}\r\n```\r\nOn the other hand, the following traits are rejected saying `the trait bound Self: std::marker::Sized is not satisfied`:\r\n```rust\r\npub trait MyTrait {\r\n    fn deserialize(input: u32) -> Option<Self>;\r\n}\r\npub trait YourTrait {\r\n    type Output: ?Sized;\r\n    fn deserialize(&self, input: u32) -> Option<Self::Output>;\r\n}\r\n```\r\nThe error makes sense in principle, but\r\n\r\n* (a) it is really confusing that it is okay to have unsized return types (where usually the same check would apply!), but not return enums with unsized types inside them. What seems to happen here is that there is a special rule if the return type is unsized to drop object safety (if the type is `Self`) or do nothing (otherwise) instead of complaining.\r\n* (b) The fix is far from obvious: One has to add `Sized` as a supertrait to `MyTrait`. Given that `Sized` is usually added implicitly, people will run into this without ever having dealt with `Sized` before (and in fact, that's what just happened when a friend asked me about this). The error will certainly not help with finding this.\r\n\r\nBoth of these points would be fixed if that exception for unsized argument/return types would be extended to also cover the above cases.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51784/timeline", "performed_via_github_app": null, "state_reason": null}