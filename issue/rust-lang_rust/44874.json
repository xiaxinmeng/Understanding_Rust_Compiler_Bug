{"url": "https://api.github.com/repos/rust-lang/rust/issues/44874", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/44874/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/44874/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/44874/events", "html_url": "https://github.com/rust-lang/rust/issues/44874", "id": 260766278, "node_id": "MDU6SXNzdWUyNjA3NjYyNzg=", "number": 44874, "title": "Tracking issue for `arbitrary_self_types`", "user": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1472515079, "node_id": "MDU6TGFiZWwxNDcyNTE1MDc5", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-arbitrary_self_types", "name": "F-arbitrary_self_types", "color": "f9c0cc", "default": false, "description": "`#![feature(arbitrary_self_types)]`"}, {"id": 3537250192, "node_id": "LA_kwDOAAsO6M7S1ieQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-needs-summary", "name": "S-tracking-needs-summary", "color": "4682b4", "default": false, "description": "It's hard to tell what's been done and what hasn't! Someone should do some investigation."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}, {"id": 4219965419, "node_id": "LA_kwDOAAsO6M77h4_r", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-types-deferred", "name": "S-types-deferred", "color": "a63779", "default": false, "description": "Status: Identified as a valid potential future enhancement that is not currently being worked on"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 118, "created_at": "2017-09-26T20:52:56Z", "updated_at": "2023-06-19T10:53:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Tracking issue for `#![feature(arbitrary_self_types)]`.\r\n\r\nThis needs an RFC before stabilization, and also requires the following issues to be handled:\r\n\r\n- [ ] figure out the object safety situation\r\n- [ ] figure out the handling of inference variables behind raw pointers\r\n- [ ] decide whether we want safe virtual raw pointer methods\r\n\r\n## Object Safety\r\n\r\nSee https://github.com/rust-lang/rust/issues/27941#issuecomment-332157526\r\n\r\n## Handling of inference variables\r\n\r\nCalling a method on `*const _` could now pick impls of the form\r\n```Rust\r\nimpl RandomType {\r\n    fn foo(*const Self) {}\r\n}\r\n```\r\n\r\nBecause method dispatch wants to be \"limited\", this won't really work, and as with the existing situation on `&_` we should be emitting an \"the type of this value must be known in this context\" error.\r\n\r\nThis feels like fairly standard inference breakage, but we need to check the impact of this before proceeding.\r\n\r\n## Safe virtual raw pointer methods\r\n\r\ne.g. this is UB, so we might want to force the call `<dyn Foo as Foo>::bar` to be unsafe somehow - e.g. by not allowing `dyn Foo` to be object safe unless `bar` was an `unsafe fn`\r\n\r\n```Rust\r\ntrait Foo {\r\n    fn bar(self: *const Self);\r\n}\r\n\r\nfn main() {\r\n    // creates a raw pointer with a garbage vtable\r\n    let foo: *const dyn Foo = unsafe { mem::transmute([0usize, 0x1000usize]) };\r\n    // and call it\r\n    foo.bar(); // this is UB\r\n}\r\n```\r\n\r\nHowever, even today you could UB in safe code with `mem::size_of_val(foo)` on the above code, so this might not be actually a problem.\r\n\r\n## More information\r\n\r\nThere's no reason the `self` syntax has to be restricted to `&T`, `&mut T` and `Box<T>`, we should allow for more types there, e.g.\r\n\r\n```Rust\r\ntrait MyStuff {\r\n    fn do_async_task(self: Rc<Self>);\r\n}\r\n\r\nimpl MyStuff for () {\r\n    fn do_async_task(self: Rc<Self>) {\r\n        // ...\r\n    }\r\n}\r\n\r\nRc::new(()).do_async_stuff();\r\n```\r\n\r\nThis doesn't have an RFC, but we want to experiment on this without one.\r\n\r\nSee #27941.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/44874/reactions", "total_count": 122, "+1": 83, "-1": 2, "laugh": 0, "hooray": 23, "confused": 3, "heart": 11, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/44874/timeline", "performed_via_github_app": null, "state_reason": null}