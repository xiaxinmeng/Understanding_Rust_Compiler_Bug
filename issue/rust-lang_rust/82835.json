{"url": "https://api.github.com/repos/rust-lang/rust/issues/82835", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82835/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82835/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82835/events", "html_url": "https://github.com/rust-lang/rust/issues/82835", "id": 823660942, "node_id": "MDU6SXNzdWU4MjM2NjA5NDI=", "number": 82835, "title": "ICE: `where` clause with const evaluation on `fn` crashes, but on `impl` gives normal error", "user": {"login": "Kiiyya", "id": 17028679, "node_id": "MDQ6VXNlcjE3MDI4Njc5", "avatar_url": "https://avatars.githubusercontent.com/u/17028679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kiiyya", "html_url": "https://github.com/Kiiyya", "followers_url": "https://api.github.com/users/Kiiyya/followers", "following_url": "https://api.github.com/users/Kiiyya/following{/other_user}", "gists_url": "https://api.github.com/users/Kiiyya/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kiiyya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kiiyya/subscriptions", "organizations_url": "https://api.github.com/users/Kiiyya/orgs", "repos_url": "https://api.github.com/users/Kiiyya/repos", "events_url": "https://api.github.com/users/Kiiyya/events{/privacy}", "received_events_url": "https://api.github.com/users/Kiiyya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1486687397, "node_id": "MDU6TGFiZWwxNDg2Njg3Mzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_generics", "name": "F-const_generics", "color": "f9c0cc", "default": false, "description": "`#![feature(const_generics)]`"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-03-06T14:21:41Z", "updated_at": "2021-03-20T18:52:19Z", "closed_at": "2021-03-20T18:52:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\nOne version crashes the compiler, the other version produces a normal error.\r\nNote that commenting out the line in `main()` makes it compile just fine.\r\n\r\n### Code\r\n\r\n```Rust\r\n#![feature(const_generics)]\r\n#![feature(const_evaluatable_checked)]\r\n\r\nuse std::sync::Arc;\r\n\r\npub enum Predicate<const EXPRESSION: bool> {}\r\npub trait Satisfied {}\r\nimpl Satisfied for Predicate<true> {}\r\n\r\npub trait Depth { const DEPTH: usize; }\r\n\r\n/// Make it impossible to have cyclic Arc references.\r\npub struct AcArc<T: Depth, const D: usize> {\r\n    #[allow(dead_code)]\r\n    inner: Arc<T>,\r\n}\r\n\r\nimpl<T: Depth, const D: usize> AcArc<T, D> {\r\n    pub fn new(item: T) -> Self\r\n        where Predicate<{T::DEPTH <= D}>: Satisfied, // crashes with == too.\r\n    {\r\n        Self {\r\n            inner: Arc::new(item),\r\n        }\r\n    }\r\n}\r\n\r\n// With the predicate on the impl instead of on the function, it gives a \"normal\" error.\r\n// Though I still feel like main() should typecheck.\r\n// impl<T: Depth, const D: usize> AcArc<T, D>\r\n//     where Predicate<{T::DEPTH == D}>: Satisfied,\r\n// {\r\n//     pub fn new(item: T) -> Self\r\n//     {\r\n//         Self {\r\n//             inner: Arc::new(item),\r\n//         }\r\n//     }\r\n// }\r\n\r\n// this is where the depth increment is enforced.\r\n// But compiler crashes without this.\r\n// impl<T, const D: usize> Depth for AcArc<T, D>\r\n// where\r\n//     T: Depth,\r\n// {\r\n//     const DEPTH: usize = D + 1;\r\n// }\r\n\r\nimpl Depth for u8 { const DEPTH: usize = 0; }\r\n\r\nfn main() {\r\n    let arc : AcArc<u8, 0> = AcArc::new(42_u8); // comment this out and it compiles just fine.\r\n\r\n    println!(\"Hello, world!\");\r\n}\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.52.0-nightly (caca2121f 2021-03-05)\r\nbinary: rustc\r\ncommit-hash: caca2121ffe4cb47d8ea2d9469c493995f57e0b5\r\ncommit-date: 2021-03-05\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.52.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nPS E:\\hax\\rust-crashie> cargo b\r\n   Compiling rust-crashie v0.1.0 (E:\\hax\\rust-crashie)\r\n\r\n(((some irrelevant warning ommitted)))\r\n\r\nwarning: Error finalizing incremental compilation session directory `\\\\?\\E:\\hax\\rust-crashie\\target\\debug\\incremental\\rust_crashie-2f5q55yas46ec\\s-fwhefzjcfw-15fjgh-working`: The system cannot find the file specified. (os error 2)\r\n\r\nwarning: 4 warnings emitted\r\n\r\nerror: internal compiler error: Encountered error `Unimplemented` selecting `Binder(<^0 as Depth>)` during codegen\r\n  |\r\n  = note: delayed at compiler\\rustc_trait_selection\\src\\traits\\codegen.rs:68:32\r\n\r\nerror: internal compiler error: ty::ConstKind::Error constructed but no error reported.\r\n  |\r\n  = note: delayed at /rustc/caca2121ffe4cb47d8ea2d9469c493995f57e0b5\\compiler\\rustc_middle\\src\\ty\\consts.rs:182:43\r\n\r\nerror: internal compiler error: `ErrorReported` without an error\r\n  --> src\\main.rs:53:30\r\n   |\r\n53 |     let arc : AcArc<u8, 0> = AcArc::new(42_u8);\r\n   |                              ^^^^^^^^^^\r\n   |\r\n   = note: delayed at compiler\\rustc_trait_selection\\src\\traits\\error_reporting\\mod.rs:747:31\r\n\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', compiler\\rustc_errors\\src\\lib.rs:1012:13\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.52.0-nightly (caca2121f 2021-03-05) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\nend of query stack\r\nerror: could not compile `rust-crashie`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n### Error with `where` on impl instead\r\nThough I still feel like this should typecheck, at least in the future some day?\r\n```\r\nerror[E0599]: the function or associated item `new` exists for struct `AcArc<_, {_: usize}>`, but its trait bounds were not satisfied\r\n  --> src\\main.rs:53:37\r\n   |\r\n6  | pub enum Predicate<const EXPRESSION: bool> {}\r\n   | ------------------------------------------ doesn't satisfy `Predicate<{T::DEPTH == D}>: Satisfied`\r\n...\r\n13 | pub struct AcArc<T: Depth, const D: usize> {\r\n   | ------------------------------------------ function or associated item `new` not found for this\r\n...\r\n53 |     let arc : AcArc<u8, 0> = AcArc::new(42_u8);\r\n   |                                     ^^^ function or associated item cannot be called on `AcArc<_, {_: usize}>` due to unsatisfied trait bounds\r\n   |\r\n   = note: the following trait bounds were not satisfied:\r\n           `Predicate<{T::DEPTH == D}>: Satisfied`\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace (`FULL`)</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', compiler\\rustc_errors\\src\\lib.rs:1012:13\r\nstack backtrace:\r\n   0:     0x7ffadc18879e - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h804aacc93092d135\r\n   1:     0x7ffadc1b404c - core::fmt::write::h2daf2a210ae0d5f0\r\n   2:     0x7ffadc17c158 - <std::io::IoSlice as core::fmt::Debug>::fmt::hfa239d9348f09840\r\n   3:     0x7ffadc18c93d - std::panicking::take_hook::h930d1e1d0a893a3f\r\n   4:     0x7ffadc18c409 - std::panicking::take_hook::h930d1e1d0a893a3f\r\n   5:     0x7ffadc6b23d5 - rustc_driver::report_ice::h5f2d10e8face884a\r\n   6:     0x7ffadc18d1a5 - std::panicking::rust_panic_with_hook::h291b58940b8c1567\r\n   7:     0x7ffadc18cd01 - rust_begin_unwind\r\n   8:     0x7ffadc1890ef - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h804aacc93092d135\r\n   9:     0x7ffadc18cc59 - rust_begin_unwind\r\n  10:     0x7ffadc1e583c - std::panicking::begin_panic_fmt::h21676d8d2c928240\r\n  11:     0x7ffae0914c24 - rustc_errors::HandlerInner::delay_as_bug::h84ea15161c493c2b\r\n  12:     0x7ffae09101d7 - <rustc_errors::HandlerInner as core::ops::drop::Drop>::drop::h2aadc8469749ba5c\r\n  13:     0x7ffadc6bda87 - rustc_errors::snippet::MultilineAnnotation::increase_depth::h0d6a408d57c96b60\r\n  14:     0x7ffadc6c46ba - rustc_errors::snippet::MultilineAnnotation::increase_depth::h0d6a408d57c96b60\r\n  15:     0x7ffadc6bf46c - rustc_errors::snippet::MultilineAnnotation::increase_depth::h0d6a408d57c96b60\r\n  16:     0x7ffadc6b481d - <rustc_driver::Compilation as core::fmt::Debug>::fmt::h34129260871bdb31\r\n  17:     0x7ffadc6cccc6 - <rustc_middle::ty::SymbolName as core::fmt::Debug>::fmt::h7de05d943e0a531e\r\n  18:     0x7ffadc6c7d24 - rustc_errors::snippet::MultilineAnnotation::increase_depth::h0d6a408d57c96b60\r\n  19:     0x7ffadc6cddbd - <rustc_middle::ty::SymbolName as core::fmt::Debug>::fmt::h7de05d943e0a531e\r\n  20:     0x7ffadc6f101d - <tracing_subscriber::util::TryInitError as core::fmt::Display>::fmt::hc634bfbe27699956\r\n  21:     0x7ffadc19c83a - std::sys::windows::thread::Thread::new::h13c38e7cd538470c\r\n  22:     0x7ffb374c7034 - BaseThreadInitThunk\r\n  23:     0x7ffb375fd241 - RtlUserThreadStart\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82835/timeline", "performed_via_github_app": null, "state_reason": "completed"}