{"url": "https://api.github.com/repos/rust-lang/rust/issues/85299", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85299/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85299/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85299/events", "html_url": "https://github.com/rust-lang/rust/issues/85299", "id": 892156670, "node_id": "MDU6SXNzdWU4OTIxNTY2NzA=", "number": 85299, "title": "[ER] Array bound test in matrix sum code", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-05-14T18:47:10Z", "updated_at": "2021-09-26T16:12:13Z", "closed_at": "2021-09-26T16:12:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's another of those. This is moderately idiomatic Rust code:\r\n\r\n```rust\r\npub fn mat_total(mat: &[Vec<i32>]) -> i32 {\r\n    let mut tot = 0;\r\n    for i in 0 .. mat.len() {\r\n        for j in 0 .. mat[i].len() {\r\n            tot += mat[i][j];\r\n        }\r\n    }\r\n    tot\r\n}\r\n```\r\n\r\nI'm using rustc 1.54.0-nightly (4de757209 2021-05-01).\r\nCompiling with \"-O -Z mir-opt-level=2\" there aren't bound tests:\r\n\r\n```asm\r\nmat_total:\r\n        xor     eax, eax\r\n        test    rsi, rsi\r\n        je      .LBB0_4\r\n        xor     r8d, r8d\r\n        jmp     .LBB0_2\r\n.LBB0_3:\r\n        cmp     r8, rsi\r\n        je      .LBB0_4\r\n.LBB0_2:\r\n        lea     rcx, [r8 + 2*r8]\r\n        add     r8, 1\r\n        mov     r9, qword ptr [rdi + 8*rcx + 16]\r\n        test    r9, r9\r\n        je      .LBB0_3\r\n        mov     r11, qword ptr [rdi + 8*rcx]\r\n        cmp     r9, 8\r\n        jae     .LBB0_8\r\n        xor     edx, edx\r\n        jmp     .LBB0_7\r\n.LBB0_8:\r\n        mov     rdx, r9\r\n        and     rdx, -8\r\n        movd    xmm0, eax\r\n        lea     rcx, [rdx - 8]\r\n        mov     rax, rcx\r\n        shr     rax, 3\r\n        add     rax, 1\r\n        mov     r10d, eax\r\n        and     r10d, 3\r\n        cmp     rcx, 24\r\n        jae     .LBB0_10\r\n        pxor    xmm1, xmm1\r\n        xor     ecx, ecx\r\n        jmp     .LBB0_12\r\n.LBB0_10:\r\n        and     rax, -4\r\n        neg     rax\r\n        pxor    xmm1, xmm1\r\n        xor     ecx, ecx\r\n.LBB0_11:\r\n        movdqu  xmm2, xmmword ptr [r11 + 4*rcx]\r\n        paddd   xmm2, xmm0\r\n        movdqu  xmm0, xmmword ptr [r11 + 4*rcx + 16]\r\n        paddd   xmm0, xmm1\r\n        movdqu  xmm1, xmmword ptr [r11 + 4*rcx + 32]\r\n        movdqu  xmm3, xmmword ptr [r11 + 4*rcx + 48]\r\n        movdqu  xmm4, xmmword ptr [r11 + 4*rcx + 64]\r\n        paddd   xmm4, xmm1\r\n        paddd   xmm4, xmm2\r\n        movdqu  xmm2, xmmword ptr [r11 + 4*rcx + 80]\r\n        paddd   xmm2, xmm3\r\n        paddd   xmm2, xmm0\r\n        movdqu  xmm0, xmmword ptr [r11 + 4*rcx + 96]\r\n        paddd   xmm0, xmm4\r\n        movdqu  xmm1, xmmword ptr [r11 + 4*rcx + 112]\r\n        paddd   xmm1, xmm2\r\n        add     rcx, 32\r\n        add     rax, 4\r\n        jne     .LBB0_11\r\n.LBB0_12:\r\n        test    r10, r10\r\n        je      .LBB0_15\r\n        lea     rax, [r11 + 4*rcx]\r\n        add     rax, 16\r\n        shl     r10, 5\r\n        xor     ecx, ecx\r\n.LBB0_14:\r\n        movdqu  xmm2, xmmword ptr [rax + rcx - 16]\r\n        paddd   xmm0, xmm2\r\n        movdqu  xmm2, xmmword ptr [rax + rcx]\r\n        paddd   xmm1, xmm2\r\n        add     rcx, 32\r\n        cmp     r10, rcx\r\n        jne     .LBB0_14\r\n.LBB0_15:\r\n        paddd   xmm0, xmm1\r\n        pshufd  xmm1, xmm0, 238\r\n        paddd   xmm1, xmm0\r\n        pshufd  xmm0, xmm1, 85\r\n        paddd   xmm0, xmm1\r\n        movd    eax, xmm0\r\n        jmp     .LBB0_16\r\n.LBB0_7:\r\n        add     eax, dword ptr [r11 + 4*rdx]\r\n        add     rdx, 1\r\n.LBB0_16:\r\n        cmp     r9, rdx\r\n        jne     .LBB0_7\r\n        jmp     .LBB0_3\r\n.LBB0_4:\r\n        ret\r\n```\r\n\r\nCompiling with \"-O -Z mir-opt-level=3\" (or level=4) there's a bound test:\r\n\r\n```asm\r\nmat_total:\r\n        push    rax\r\n        xor     eax, eax\r\n        test    rsi, rsi\r\n        je      .LBB0_7\r\n        xor     r8d, r8d\r\n        jmp     .LBB0_2\r\n.LBB0_6:\r\n        add     r8, 1\r\n        cmp     r8, rsi\r\n        je      .LBB0_7\r\n.LBB0_2:\r\n        lea     rdx, [r8 + 2*r8]\r\n        mov     rcx, qword ptr [rdi + 8*rdx + 16]\r\n        test    rcx, rcx\r\n        je      .LBB0_6\r\n        mov     r9, qword ptr [rdi + 8*rdx]\r\n        xor     edx, edx\r\n.LBB0_4:\r\n        cmp     rcx, rdx\r\n        je      .LBB0_8\r\n        add     eax, dword ptr [r9 + 4*rdx]\r\n        add     rdx, 1\r\n        cmp     rcx, rdx\r\n        jne     .LBB0_4\r\n        jmp     .LBB0_6\r\n.LBB0_7:\r\n        pop     rcx\r\n        ret\r\n.LBB0_8:\r\n        lea     rdi, [rcx - 1]\r\n        cmp     rcx, rdi\r\n        cmovb   rdi, rcx\r\n        lea     rdx, [rip + .L__unnamed_1]\r\n        mov     rsi, rcx\r\n        call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\r\n        ud2\r\n```", "closed_by": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85299/timeline", "performed_via_github_app": null, "state_reason": "completed"}