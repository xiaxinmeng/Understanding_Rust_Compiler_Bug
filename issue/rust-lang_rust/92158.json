{"url": "https://api.github.com/repos/rust-lang/rust/issues/92158", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/92158/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/92158/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/92158/events", "html_url": "https://github.com/rust-lang/rust/issues/92158", "id": 1085736260, "node_id": "I_kwDOAAsO6M5AtwVE", "number": 92158, "title": "`const_trait_impl`: investigate how to put `Self: ~const Trait` bounds in traits", "user": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 1769279746, "node_id": "MDU6TGFiZWwxNzY5Mjc5NzQ2", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_trait_impl", "name": "F-const_trait_impl", "color": "f9c0cc", "default": false, "description": "`#![feature(const_trait_impl)]`"}], "state": "closed", "locked": false, "assignee": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2021-12-21T11:32:35Z", "updated_at": "2022-09-10T07:39:41Z", "closed_at": "2022-09-10T07:39:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The `predicates_of` query currently inserts `Self: Trait` as a generic predicate for traits. This could become `Self: ~const Trait` and probably resolves some of the hackery around `default_method_body_is_const`. For example, we have explicitly allowed calling other methods inside the same trait for `default_method_body_is_const` bodies during const checking. If we had `Self: ~const Trait` as a caller bound then we don't need to explicitly allow this.\r\n\r\nThere is also another issue that would be resolved by this:\r\n\r\n```rust\r\n#![feature(const_trait_impl)]\r\n#![feature(const_fn_trait_bound)]\r\n\r\npub trait Foo {\r\n    #[default_method_body_is_const]\r\n    fn do_stuff(self) where Self: Sized {\r\n        do_stuff_as_foo(self);\r\n    }\r\n}\r\n\r\nconst fn do_stuff_as_foo<T: ~const Foo>(foo: T) {\r\n    std::mem::forget(foo);\r\n}\r\n```\r\n\r\nThe snippet above currently fails to compile. If we had `Self: ~const Foo` then it would work.\r\n\r\nThe problem is that I tried doing this and there was a lot of mysterious errors. So I limited `Self: ~const Trait` to `default_method_body_is_const` methods. It compiled but some ui tests related to object safety fails after the change. Below is the diff of my current progress:\r\n\r\n```diff\r\ndiff --git a/compiler/rustc_typeck/src/collect.rs b/compiler/rustc_typeck/src/collect.rs\r\nindex e7b728d491b..74ca462c470 100644\r\n--- a/compiler/rustc_typeck/src/collect.rs\r\n+++ b/compiler/rustc_typeck/src/collect.rs\r\n@@ -1986,6 +1986,14 @@ fn predicates_defined_on(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicate\r\n fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\r\n     let mut result = tcx.predicates_defined_on(def_id);\r\n \r\n+    if tcx.has_attr(def_id, sym::default_method_body_is_const) {\r\n+        let span = rustc_span::DUMMY_SP;\r\n+        result.predicates =\r\n+            tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(std::iter::once((\r\n+                ty::TraitRef::identity(tcx, tcx.parent(def_id).unwrap()).with_constness(ty::BoundConstness::ConstIfConst).to_predicate(tcx),\r\n+                span,\r\n+            ))));\r\n+    }\r\n     if tcx.is_trait(def_id) {\r\n         // For traits, add `Self: Trait` predicate. This is\r\n         // not part of the predicates that a user writes, but it\r\ndiff --git a/library/core/src/cmp.rs b/library/core/src/cmp.rs\r\nindex deed9901cc9..61d5352be2c 100644\r\n--- a/library/core/src/cmp.rs\r\n+++ b/library/core/src/cmp.rs\r\n@@ -1243,7 +1243,8 @@ mod impls {\r\n     macro_rules! partial_eq_impl {\r\n         ($($t:ty)*) => ($(\r\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\r\n-            impl PartialEq for $t {\r\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\r\n+            impl const PartialEq for $t {\r\n                 #[inline]\r\n                 fn eq(&self, other: &$t) -> bool { (*self) == (*other) }\r\n                 #[inline]\r\n@@ -1280,10 +1281,11 @@ impl Eq for $t {}\r\n     macro_rules! partial_ord_impl {\r\n         ($($t:ty)*) => ($(\r\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\r\n-            impl PartialOrd for $t {\r\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\r\n+            impl const PartialOrd for $t {\r\n                 #[inline]\r\n                 fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\r\n-                    match (self <= other, self >= other) {\r\n+                    match (*self <= *other, *self >= *other) {\r\n                         (false, false) => None,\r\n                         (false, true) => Some(Greater),\r\n                         (true, false) => Some(Less),\r\n@@ -1323,10 +1325,13 @@ fn partial_cmp(&self, other: &bool) -> Option<Ordering> {\r\n     macro_rules! ord_impl {\r\n         ($($t:ty)*) => ($(\r\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\r\n-            impl PartialOrd for $t {\r\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"none\")]\r\n+            impl const PartialOrd for $t {\r\n                 #[inline]\r\n                 fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\r\n-                    Some(self.cmp(other))\r\n+                    Some(if *self < *other { Less }\r\n+                        else if *self == *other { Equal }\r\n+                        else { Greater })\r\n                 }\r\n                 #[inline]\r\n                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }\r\n```", "closed_by": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/92158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/92158/timeline", "performed_via_github_app": null, "state_reason": "completed"}