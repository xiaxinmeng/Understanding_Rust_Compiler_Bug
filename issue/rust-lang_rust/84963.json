{"url": "https://api.github.com/repos/rust-lang/rust/issues/84963", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/84963/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/84963/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/84963/events", "html_url": "https://github.com/rust-lang/rust/issues/84963", "id": 876809354, "node_id": "MDU6SXNzdWU4NzY4MDkzNTQ=", "number": 84963, "title": "Incremental compilation ICE with from compiler-state-dependent overflow errors ", "user": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-05-05T20:29:57Z", "updated_at": "2021-06-22T14:26:09Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "So\u2026 here\u2019s a bunch of traits and a deeply nested types\r\n```rust\r\ntrait Tr<T: ?Sized> {}\r\nimpl Tr<()> for u8 {}\r\nimpl<Self_, T: ?Sized> Tr<S0<T>> for Self_ where Self_: Tr<T> {}\r\n\r\nstruct S0<T: ?Sized>(T);\r\ntype S1<T> = S0<S0<T>>;\r\ntype S2<T> = S1<S1<T>>; \r\ntype S3<T> = S2<S2<T>>; \r\ntype S4<T> = S3<S3<T>>; \r\ntype S5<T> = S4<S4<T>>; \r\ntype S6<T> = S5<S5<T>>; \r\ntype S7<T> = S6<S6<T>>; \r\n\r\ntrait New<D> {}\r\nimpl<D: Copy, T: Tr<S7<()>>> New<D> for T {}\r\ntrait New2<D> {}\r\nimpl<D> New2<D> for u8 where u8: New<D> {}\r\n```\r\n\r\nand here\u2019s a macro that helps us ask the compiler for trait implementations (thanks @digama0)\r\n```rust\r\nmacro_rules! assert_impl {($ty:ty: $($trait:tt)*) => {\r\n    const _: () = { fn f<T: $($trait)*>() {} fn g() { f::<$ty>() } };\r\n}}\r\n```\r\n\r\nand if we ask the compiler\r\n```rust\r\n// asked directly this fails:\r\nassert_impl!(u8: New2<()>);\r\n```\r\nthen we\u2019ll get an overflow error\r\n```\r\nerror[E0275]: overflow evaluating the requirement `u8: Tr<S0<S0<()>>>`\r\n  --> src/lib.rs:2:55\r\n   |\r\n2  |     const _: () = { fn f<T: $($trait)*>() {} fn g() { f::<$ty>() } };\r\n   |                        - required by a bound in this  ^^^^^^^^\r\n...\r\n24 | assert_impl!(u8: New2<()>);\r\n   | ---------------------------\r\n   | |                |\r\n   | |                required by this bound in `f`\r\n   | in this macro invocation\r\n   |\r\n   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`small_pg`)\r\n   = note: required because of the requirements on the impl of `Tr<S0<S0<S0<()>>>>` for `u8`\r\n   = note: 125 redundant requirements hidden\r\n   = note: required because of the requirements on the impl of `Tr<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<S0<()>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` for `u8`\r\nnote: required because of the requirements on the impl of `New<()>` for `u8`\r\n  --> src/lib.rs:19:30\r\n   |\r\n19 | impl<D: Copy, T: Tr<S7<()>>> New<D> for T {}\r\n   |                              ^^^^^^     ^\r\nnote: required because of the requirements on the impl of `New2<()>` for `u8`\r\n  --> src/lib.rs:21:9\r\n   |\r\n21 | impl<D> New2<D> for u8 where u8: New<D> {}\r\n   |         ^^^^^^^     ^^\r\n   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nSo far so good. But if we \u201cfirst\u201d ask about `u8: Tr<S7<()>>`, then the overflow error disappears:\r\n```rust\r\n// first ask\r\nassert_impl!(u8: Tr<S7<()>>);\r\n\r\n// then ask\r\nassert_impl!(u8: New2<()>);\r\n```\r\n\r\nOf course the other way around, this still fails. Or instead of \u201cof course it fails the other way around\u201d let\u2019s rather say: **This is pretty bad already** since the compilation success depends on the order in which two consts are defined. [Yes, `const`s, look into the definition of that macro ;-)]\r\n\r\nAnyways. If we add a commented out version of the failing query above\r\n```rust\r\n// asked directly would fail:\r\n// assert_impl!(u8: New2<()>);\r\n\r\n// first ask\r\nassert_impl!(u8: Tr<S7<()>>);\r\n\r\n// then ask\r\nassert_impl!(u8: New2<()>);\r\n```\r\nthis compiles, and if you uncomment the commented out second line here without `cargo clean`ing your library, incremental compilation suddently becomes very ~~**excited**~~ _unhappy_.\r\n\r\n```\r\n    Checking small_pg v0.1.0 (/home/frank/Dokumente/playground/rust/small_pg)\r\nthread 'rustc' panicked at 'assertion failed: `(left == right)`\r\n  left: `Some(Fingerprint(16365582130792536210, 18134235757999171202))`,\r\n right: `Some(Fingerprint(8537439170242672706, 4648092694241280842))`: found unstable fingerprints for evaluate_obligation(1e88f23d10582546-8813245cfc000b69): Err(OverflowError)', /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/compiler/rustc_query_system/src/query/plumbing.rs:593:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.53.0-nightly (42816d61e 2021-04-24) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [evaluate_obligation] evaluating trait selection obligation `u8: New2<()>`\r\n#1 [typeck] type-checking `_::g`\r\nend of query stack\r\nerror: could not compile `small_pg`\r\n```\r\n\r\n<hr>\r\n\r\nDetailed reproduction guide\r\n* use `nightly-2020-04-25`\r\n* create a library crate containing [this code](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=df89c14c845513549ec8fbaf5489b774)\r\n* `cargo check`\r\n* uncomment line 24, i.e. change line 24 to `assert_impl!(u8: New2<()>);`\r\n* `cargo check` again\r\n\r\n@rustbot label T-compiler A-incr-comp I-ICE", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/84963/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/84963/timeline", "performed_via_github_app": null, "state_reason": null}