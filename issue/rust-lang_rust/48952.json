{"url": "https://api.github.com/repos/rust-lang/rust/issues/48952", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48952/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48952/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48952/events", "html_url": "https://github.com/rust-lang/rust/issues/48952", "id": 304344211, "node_id": "MDU6SXNzdWUzMDQzNDQyMTE=", "number": 48952, "title": "env_or_default macro", "user": {"login": "vbrandl", "id": 20639051, "node_id": "MDQ6VXNlcjIwNjM5MDUx", "avatar_url": "https://avatars.githubusercontent.com/u/20639051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vbrandl", "html_url": "https://github.com/vbrandl", "followers_url": "https://api.github.com/users/vbrandl/followers", "following_url": "https://api.github.com/users/vbrandl/following{/other_user}", "gists_url": "https://api.github.com/users/vbrandl/gists{/gist_id}", "starred_url": "https://api.github.com/users/vbrandl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vbrandl/subscriptions", "organizations_url": "https://api.github.com/users/vbrandl/orgs", "repos_url": "https://api.github.com/users/vbrandl/repos", "events_url": "https://api.github.com/users/vbrandl/events{/privacy}", "received_events_url": "https://api.github.com/users/vbrandl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 132910982, "node_id": "MDU6TGFiZWwxMzI5MTA5ODI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-macros", "name": "A-macros", "color": "f7e101", "default": false, "description": "Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-03-12T12:03:02Z", "updated_at": "2023-03-09T13:10:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I find my self doing something like this quite often:\r\n\r\n```Rust\r\nconst VERSION: Option<&'static str> = option_env!(\"CARGO_PKG_VERSION\");\r\n\r\nfn main() {\r\n    println!(\"{}\", VERSION.unwrap_or(\"unknown version\"));\r\n}\r\n```\r\n\r\nI think it would be nice to have a `env_or_default` macro that defaults to a fallback string at compile time if the environment variable cannot be found. I'm thinking of something like\r\n\r\n```Rust\r\nconst VERSION: &str = env_or_default!(\"CARGO_PKG_VERSION\", \"unknown version\");\r\n```\r\n\r\nI know the runtime cost isn't that high but if it can be done at compile time, it should be done.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48952/reactions", "total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48952/timeline", "performed_via_github_app": null, "state_reason": null}