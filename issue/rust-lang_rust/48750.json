{"url": "https://api.github.com/repos/rust-lang/rust/issues/48750", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48750/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48750/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48750/events", "html_url": "https://github.com/rust-lang/rust/issues/48750", "id": 302338735, "node_id": "MDU6SXNzdWUzMDIzMzg3MzU=", "number": 48750, "title": "Compiler Performance: Benchmark Definitions", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37977651, "node_id": "MDU6TGFiZWwzNzk3NzY1MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/metabug", "name": "metabug", "color": "5319e7", "default": false, "description": "Issues about issues themselves (\"bugs about bugs\")"}, {"id": 64037154, "node_id": "MDU6TGFiZWw2NDAzNzE1NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-compiletime", "name": "I-compiletime", "color": "e11d21", "default": false, "description": "Problems and improvements with respect to compile times."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 849077850, "node_id": "MDU6TGFiZWw4NDkwNzc4NTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-performance", "name": "WG-compiler-performance", "color": "c2e0c6", "default": false, "description": "Working group: Compiler Performance"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-03-05T15:16:56Z", "updated_at": "2022-05-29T23:11:18Z", "closed_at": "2022-05-27T14:46:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The compiler performance tracking issue (#48547) defines the four main usage scenarios that we strive to support well. In order to measure how well we are actually doing, we define a benchmark for each scenario. Eventually, [perf.rust-lang.org](perf.rust-lang.org) will provide a graph for each of scenario that shows how compile times develop over time.\r\n\r\n\r\nMethodology\r\n-----------\r\nCompiler performance in each scenario is measured by the sum of all build times for a given set of projects. The build settings depend on the usage scenario. The set of projects should contain small, medium, and large ones.\r\n\r\n\r\nBenchmarks\r\n----------\r\n\r\n### FROM-SCRATCH - Compiling a project from scratch\r\n\r\nCompile the listed projects with each of the following combinations:\r\n\r\n - non-optimized & non-incremental\r\n - non-optimized & incremental (w/ empty cache)\r\n - optimized (-Ccodegen-units=8, no LTO) & non-incremental\r\n - optimized (no LTO) & incremental (w/ empty cache)\r\n\r\nProjects:\r\n - style-servo\r\n - script-servo\r\n - encoding-rs\r\n - clap-rs\r\n - regex\r\n - helloworld\r\n - crates.io\r\n - hyper\r\n - html5ever\r\n - tokio-webpush-simple\r\n - inflate\r\n - syn\r\n - futures\r\n - piston-image\r\n - ripgrep\r\n - webrender\r\n - cargo\r\n - winapi\r\n - stm32f103xx\r\n\r\n\r\n### SMALL-CHANGE - Re-Compiling a project after a small change\r\n\r\nFor this scenario, we re-compile the project incrementally with a full cache\r\nafter a `println!()` statement has been added somewhere.\r\n\r\n - non-optimized & incremental (w/ full cache)\r\n     - style-servo\r\n     - script-servo\r\n     - encoding-rs (`cargo test --lib --no-run`)\r\n     - clap-rs (`cargo test --no-run`)\r\n     - regex (`cargo test --lib --no-run`)\r\n     - crates.io\r\n     - syn (`cargo test --no-run`)\r\n     - futures (`cargo test --test=all --no-run`)\r\n     - tokio-webpush-simple\r\n     - ripgrep\r\n     - webrender\r\n - optimized (no LTO) & incremental (w/ full cache)\r\n     - style-servo\r\n     - script-servo\r\n     - tokio-webpush-simple\r\n     - crates.io\r\n     - ripgrep\r\n     - webrender\r\n     - cargo\r\n\r\n### RLS - Continuously re-compiling a project for the Rust Language Server\r\n\r\nFor this scenario, we run `cargo check` incrementally with a full cache\r\nafter a `println!()` statement has been added somewhere.\r\n\r\n - `cargo check`, non-optimized  & incremental (w/ full cache)\r\n\r\nProjects:\r\n - style-servo\r\n - script-servo\r\n - encoding-rs\r\n - clap-rs\r\n - regex\r\n - helloworld\r\n - crates.io\r\n - hyper\r\n - html5ever\r\n - tokio-webpush-simple\r\n - inflate\r\n - syn\r\n - futures\r\n - piston-image\r\n - ripgrep\r\n - webrender\r\n - cargo\r\n\r\n **NOTE**: This is a rather crude method for measuring RLS performance since\r\n there are many more variables that need to be taken into account here. For\r\n example, the RLS will invoke the compiler differently, allowing for things to\r\n be kept in memory that would go onto the disk otherwise. It also produces\r\n \"save-analysis\" data, which `cargo check` does not, and the creation of which\r\n can take up a significant amount of time and thus should be measured!\r\n Consequently, the RLS benchmarks need more discussion.\r\n\r\n### DIST - Compiling a project for maximum runtime performance\r\n\r\nFor this scenario, we compile the projects from scratch, with maximum\r\noptimizations:\r\n\r\n - optimized (--opt-level=3, full LTO), non-incremental\r\n - optimized (--opt-level=3, whole crate graph ThinLTO), non-incremental\r\n\r\nProjects:\r\n - style-servo\r\n - script-servo\r\n - crates.io\r\n - tokio-webpush-simple\r\n - inflate\r\n - ripgrep\r\n - webrender\r\n - cargo\r\n - stm32f103xx\r\n\r\n\r\n\r\nOpen Questions\r\n--------------\r\n\r\n - [ ] The sum of all build times might be too crude of a metric. Sometimes a crate does not compile at all with a specific compiler version. Only successful builds should go into the aggregate score. Is there a metric that intrinsically corrects for missing individual scores?\r\n - [ ] How to better measure performance in the RLS case?\r\n\r\n\r\nPlease provide your feedback on how well you think the above benchmarks actually measure what people care about when using the Rust compiler. I expect these definitions to undergo a few cycles of iteration before we are satisfied with them.\r\n\r\ncc @rust-lang/wg-compiler-performance\r\n", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48750/timeline", "performed_via_github_app": null, "state_reason": "completed"}