{"url": "https://api.github.com/repos/rust-lang/rust/issues/64144", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64144/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64144/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64144/events", "html_url": "https://github.com/rust-lang/rust/issues/64144", "id": 489140572, "node_id": "MDU6SXNzdWU0ODkxNDA1NzI=", "number": 64144, "title": "File::open() on directories does not return Err(), leads to breakage with BufReader", "user": {"login": "kentfredric", "id": 44790, "node_id": "MDQ6VXNlcjQ0Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/44790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kentfredric", "html_url": "https://github.com/kentfredric", "followers_url": "https://api.github.com/users/kentfredric/followers", "following_url": "https://api.github.com/users/kentfredric/following{/other_user}", "gists_url": "https://api.github.com/users/kentfredric/gists{/gist_id}", "starred_url": "https://api.github.com/users/kentfredric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kentfredric/subscriptions", "organizations_url": "https://api.github.com/users/kentfredric/orgs", "repos_url": "https://api.github.com/users/kentfredric/repos", "events_url": "https://api.github.com/users/kentfredric/events{/privacy}", "received_events_url": "https://api.github.com/users/kentfredric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 431251592, "node_id": "MDU6TGFiZWw0MzEyNTE1OTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-docs", "name": "A-docs", "color": "f7e101", "default": false, "description": "Area: documentation for any part of the project, including the compiler, standard library, and tools"}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-09-04T12:50:09Z", "updated_at": "2023-04-01T15:49:46Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tripped onto some odd behaviour.\r\n\r\nI was under the assumption calling `File::open()` on a directory would Err(), and that I could use that to handle a user specifying a path that was not a file, ( instead of falling prey to race conditions by stat-ing first and then opening second ).\r\n\r\nHowever, ... bad things happened instead.\r\n\r\n```rust\r\nuse std::path::PathBuf;\r\nuse std::fs::File;\r\nuse std::io::BufRead;\r\nuse std::io::BufReader;\r\n\r\nfn main() {\r\n    let file = File::open(PathBuf::from(\"/tmp\")).unwrap();\r\n    let buf  = BufReader::with_capacity(100, file);\r\n    let _lines: Vec<std::io::Result<String>> = buf.lines().collect();\r\n}\r\n```\r\n\r\nThe last of these lines will run forever, with strace reporting:\r\n```\r\nread(3, 0x564803253b80, 100)            = -1 EISDIR (Is a directory)\r\n```\r\nOver and over again ad-infinitum with no end in sight.\r\n\r\nSomehow I had a variation of this go crazy and eat 200% of my ram, but I'm having a hard time reproducing that exact case (Though it may have been related to the target-directory in question also being massive in my case).\r\n\r\nDigging shows related bug #43504\r\n\r\nThe profound question that remains unanswered is: \"Why is calling File::open on a directory fine?\" \r\n\r\nAnd the residual question is \"How does one invoke File::open in such a way that it refuses to work on directories\".\r\n\r\nAnd importantly, how do I achieve that portably?\r\n\r\nAnd if none of these concerns can be mitigated, the very least that could be done is have this giant foot-gun documented somewhere in `File::open`.\r\n\r\n( As far as I can divine, there's no useful behaviour to be found by allowing File::open to work on directories, as standard read() semantics simply don't work on directory filehandles, you have to use readdir() )\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64144/timeline", "performed_via_github_app": null, "state_reason": null}