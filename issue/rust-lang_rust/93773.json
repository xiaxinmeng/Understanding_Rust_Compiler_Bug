{"url": "https://api.github.com/repos/rust-lang/rust/issues/93773", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/93773/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/93773/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/93773/events", "html_url": "https://github.com/rust-lang/rust/issues/93773", "id": 1127262153, "node_id": "I_kwDOAAsO6M5DMKfJ", "number": 93773, "title": "Unexpected behaviour for memory layout of discriminants in enums", "user": {"login": "graymalkin", "id": 3636294, "node_id": "MDQ6VXNlcjM2MzYyOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3636294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graymalkin", "html_url": "https://github.com/graymalkin", "followers_url": "https://api.github.com/users/graymalkin/followers", "following_url": "https://api.github.com/users/graymalkin/following{/other_user}", "gists_url": "https://api.github.com/users/graymalkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/graymalkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graymalkin/subscriptions", "organizations_url": "https://api.github.com/users/graymalkin/orgs", "repos_url": "https://api.github.com/users/graymalkin/repos", "events_url": "https://api.github.com/users/graymalkin/events{/privacy}", "received_events_url": "https://api.github.com/users/graymalkin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1944310735, "node_id": "MDU6TGFiZWwxOTQ0MzEwNzM1", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-layout", "name": "A-layout", "color": "f7e101", "default": false, "description": "Area: Memory layout of types"}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2022-02-08T13:31:04Z", "updated_at": "2023-04-26T13:34:32Z", "closed_at": "2023-04-26T08:05:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I've been looking at the implementation of enums and their memory layout. I've noticed something which surprised me and seems a little inconsistent. It's hard to tell if this behaviour is good/neutral/bug, so apologies if this is not the right place to raise it.\r\n\r\n```rs\r\n#![feature(rustc_attrs)]\r\n\r\n#[rustc_layout(debug)]\r\nenum E {\r\n    A,\r\n    B,\r\n    C,\r\n}\r\n```\r\n\r\nLooking at the layout information for this struct, I can see that the discriminant is laid out as an `I8` type:\r\n\r\n```rs\r\nlayout_of(E) = Layout {\r\n           fields: Arbitrary {\r\n               offsets: [\r\n                   Size {\r\n                       raw: 0,\r\n                   },\r\n               ],\r\n               memory_index: [\r\n                   0,\r\n               ],\r\n           },\r\n           variants: Multiple {\r\n               tag: Scalar {   // <-- The discriminant\r\n                   value: Int(\r\n                       I8,     // I8 storage\r\n                       false,\r\n                   ),\r\n                   valid_range: 0..=2,\r\n               },\r\n               tag_encoding: Direct,\r\n               tag_field: 0,\r\n               variants: [ ... ],\r\n           },\r\n           abi: Scalar(\r\n               Scalar {\r\n                   value: Int(\r\n                       I8,\r\n                       false,\r\n                   ),\r\n                   valid_range: 0..=2,\r\n               },\r\n           ),\r\n           ...\r\n       }\r\n```\r\n\r\nThis seems sensible, the discriminant can have one of 3 values for `E::A` `E::B` or `E::C`.\r\n\r\nIf I modify the enum so that one of the members stores a `u64` then the layout of the discriminant appears to change:\r\n\r\n```rs\r\n#![feature(rustc_attrs)]\r\n\r\n#[rustc_layout(debug)]\r\nenum E {\r\n    A(u64),\r\n    B,\r\n    C,\r\n}\r\n```\r\n\r\nNow the discriminant is laid out as an I64. Why?\r\n\r\n```rs\r\nlayout_of(E) = Layout {\r\n           fields: Arbitrary {\r\n               offsets: [\r\n                   Size {\r\n                       raw: 0,\r\n                   },\r\n               ],\r\n               memory_index: [\r\n                   0,\r\n               ],\r\n           },\r\n           variants: Multiple {\r\n               tag: Scalar {  // <-- Discriminant\r\n                   value: Int(\r\n                       I64,   // I64 storage?\r\n                       false,\r\n                   ),\r\n                   valid_range: 0..=2,\r\n               },\r\n               tag_encoding: Direct,\r\n               tag_field: 0,\r\n               variants: [ ... ],\r\n           },\r\n           abi: ScalarPair(\r\n               Scalar {\r\n                   value: Int(\r\n                       I64,\r\n                       false,\r\n                   ),\r\n                   valid_range: 0..=2,\r\n               },\r\n               Scalar {\r\n                   value: Int(\r\n                       I64,\r\n                       false,\r\n                   ),\r\n                   valid_range: 0..=18446744073709551615,\r\n               },\r\n           ),\r\n           ...\r\n       }\r\n```\r\n\r\nOne final modification, if I make `E::B` store a `u32` the discriminant storage changes again:\r\n\r\n```rs\r\n#![feature(rustc_attrs)]\r\n\r\n#[rustc_layout(debug)]\r\nenum E {\r\n    A(u64),\r\n    B(u32),\r\n    C,\r\n}\r\n```\r\n\r\nNow the discriminant is stored in an `I32`:\r\n\r\n\r\n```rs\r\nlayout_of(E) = Layout {\r\n           fields: Arbitrary {\r\n               offsets: [\r\n                   Size {\r\n                       raw: 0,\r\n                   },\r\n               ],\r\n               memory_index: [\r\n                   0,\r\n               ],\r\n           },\r\n           variants: Multiple {\r\n               tag: Scalar {  // <-- Discriminant\r\n                   value: Int(\r\n                       I32,   // I32 storage?\r\n                       false,\r\n                   ),\r\n                   valid_range: 0..=2,\r\n               },\r\n               tag_encoding: Direct,\r\n               tag_field: 0,\r\n               variants: [ ... ],\r\n           },\r\n           abi: Aggregate {\r\n               sized: true,\r\n           },\r\n           largest_niche: Some(\r\n               Niche {\r\n                   offset: Size {\r\n                       raw: 0,\r\n                   },\r\n                   scalar: Scalar {\r\n                       value: Int(\r\n                           I32,\r\n                           false,\r\n                       ),\r\n                       valid_range: 0..=2,\r\n                   },\r\n               },\r\n           ),\r\n           ...\r\n```\r\n\r\nIt appears that the discriminant is stored in storage that is the minimum of the sizes of the non-empty members of the enum. Why is it not always stored in a storage type which is large enough to cover the range of the discriminant, or preferentially something of the platform's word size?\r\n\r\n\r\n\r\nThanks,\r\nSimon", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/93773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/93773/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}