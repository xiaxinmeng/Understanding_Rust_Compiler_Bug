{"url": "https://api.github.com/repos/rust-lang/rust/issues/24187", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/24187/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/24187/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/24187/events", "html_url": "https://github.com/rust-lang/rust/issues/24187", "id": 67056223, "node_id": "MDU6SXNzdWU2NzA1NjIyMw==", "number": 24187, "title": "Can't borrow part of a struct", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2015-04-08T06:01:59Z", "updated_at": "2016-07-14T14:39:53Z", "closed_at": "2015-04-08T16:37:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seems like a rather convoluted example, but borrowing in member functions is... weird.\n\n```\nstruct DoesNotCopy(usize);\n\nstruct Broken {\n  x: usize,\n  y: DoesNotCopy\n}\n\nimpl Broken {\n  fn decompose(&self) -> (usize, &DoesNotCopy) {\n    (self.x, &self.y)\n  }\n\n  fn do_stuff(&mut self) -> (usize, &Foo) {\n    let x = self.decompose();\n    self.x = 0; // error: cannot assign to `self.x` because it is borrowed\n    x\n  }\n}\n```\n\nMy intuition says that this should be okay. If I copy out the part that I'm going to modify, and take an immutable reference to one part of the struct, I should be able to modify the rest without issue. If I inline the contents of the function where it's called, it works, i.e. `let x = (self.x, &self.y)` is fine.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/24187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/24187/timeline", "performed_via_github_app": null, "state_reason": "completed"}