{"url": "https://api.github.com/repos/rust-lang/rust/issues/8591", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/8591/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/8591/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/8591/events", "html_url": "https://github.com/rust-lang/rust/issues/8591", "id": 18206977, "node_id": "MDU6SXNzdWUxODIwNjk3Nw==", "number": 8591, "title": "Rust appears to create (duplicate?) vtables at runtime that could have been emitted at compile-time.", "user": {"login": "Thiez", "id": 204550, "node_id": "MDQ6VXNlcjIwNDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/204550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thiez", "html_url": "https://github.com/Thiez", "followers_url": "https://api.github.com/users/Thiez/followers", "following_url": "https://api.github.com/users/Thiez/following{/other_user}", "gists_url": "https://api.github.com/users/Thiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thiez/subscriptions", "organizations_url": "https://api.github.com/users/Thiez/orgs", "repos_url": "https://api.github.com/users/Thiez/repos", "events_url": "https://api.github.com/users/Thiez/events{/privacy}", "received_events_url": "https://api.github.com/users/Thiez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2013-08-18T12:50:34Z", "updated_at": "2015-04-16T23:29:58Z", "closed_at": "2015-04-16T23:29:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The code below outputs `((6340760, 140201758297392), (6340840, 140201758297424), (6340856, 140201758297472), (6340872, 140201758297504))` (exact numbers may vary). The important part is that the vtables seem to get newly created for ~1 and ~2 (and also @1 and @2) even though they could easily use the same vtables.\n\n``` rust\nuse std::cast::transmute;\ntrait Foo {\n  fn foo(&self) {}\n}\nimpl Foo for uint {}\nimpl Foo for int {}\nunsafe {\n  (transmute::<~Foo, (uint,uint)>(~1i as ~Foo),\n   transmute::<@Foo, (uint,uint)>(@1i as @Foo),\n   transmute::<~Foo, (uint,uint)>(~2i as ~Foo),\n   transmute::<@Foo, (uint,uint)>(@2i as @Foo))\n}\n```\n\nThe code was fed to rusti, original below (thanks to dbaupp):\n\n```\n13:55 < dbaupp> rusti: use std::cast::transmute; trait Foo { fn foo(&self) {} } impl Foo for uint {} impl Foo for int {} unsafe {(transmute::<~Foo, (uint,uint)>(~1i as ~Foo),transmute::<@Foo, (uint,uint)>(@1i as @Foo),transmute::<~Foo, (uint,uint)>(~2i as ~Foo),transmute::<@Foo, (uint,uint)>(@2i as @Foo))}\n13:55 -rusti:#rust- ((6340760, 140201758297392), (6340840, 140201758297424), (6340856, 140201758297472), (6340872, 140201758297504))\n```\n\nSwapping vtables appears to work just fine, even between ~Trait and &Trait (but not between ~Trait and @Trait):\n\n``` rust\nuse std::cast::transmute;\ntrait Foo{\n  fn foo(&mut self);\n  fn bar(&self)->int;\n}\nimpl Foo for int{\n  fn foo(&mut self) {\n    *self=*self+1\n  }\n  fn bar(&self)->int{\n    *self\n  }\n};\nunsafe{\n  let (a1,a2) = transmute::<~Foo,(uint,uint)>(~1 as ~Foo);\n  let (b1,b2) = transmute::<&mut Foo,(uint,uint)>(&mut 2 as &mut Foo);\n  let mut a = transmute::<(uint,uint),~Foo>((b1,a2));\n  let b = transmute::<(uint,uint),&mut Foo>((a1,b2));\n  a.foo();b.foo();\n  (a.bar(),b.bar() )\n}\n```\n\nOutputs (2,3) in rusti.\n\n```\n14:24 < Thiez> rusti: use std::cast::transmute; trait Foo{fn foo(&mut self);fn bar(&self)->int;} impl Foo for int{fn foo(&mut self){*self=*self+1}fn bar(&self)->int{*self}}; unsafe{ let\n               (a1,a2)=transmute::<~Foo,(uint,uint)>(~1 as ~Foo); let (b1,b2)=transmute::<&mut Foo,(uint,uint)>(&mut 2 as &mut Foo); let mut a=transmute::<(uint,uint),~Foo>((b1,a2));let b =\n               transmute::<(uint,uint),&mut Foo>((a1,b2)); a.foo();b.foo();(a.bar(),b.bar()) }\n14:24 -rusti:#rust- (2, 3)\n```\n\nIt seems to me we should generate the vtables at compile time.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/8591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/8591/timeline", "performed_via_github_app": null, "state_reason": "completed"}