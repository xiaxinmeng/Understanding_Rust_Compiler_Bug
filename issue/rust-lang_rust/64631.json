{"url": "https://api.github.com/repos/rust-lang/rust/issues/64631", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64631/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64631/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64631/events", "html_url": "https://github.com/rust-lang/rust/issues/64631", "id": 496440235, "node_id": "MDU6SXNzdWU0OTY0NDAyMzU=", "number": 64631, "title": "Tracking issue for `rustc_reservation_impl` attribute", "user": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1568304854, "node_id": "MDU6TGFiZWwxNTY4MzA0ODU0", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-rustc_attrs", "name": "F-rustc_attrs", "color": "f9c0cc", "default": false, "description": "Internal rustc attributes gated on the `#[rustc_attrs]` feature gate."}, {"id": 3537216829, "node_id": "LA_kwDOAAsO6M7S1aU9", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-perma-unstable", "name": "S-tracking-perma-unstable", "color": "4682b4", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-20T16:22:38Z", "updated_at": "2023-06-02T05:50:17Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Background\r\n\r\nThe `#[rustc_reservation_impl]` attribute was added as part of the effort to stabilize `!`. Its goal is to make it possible to add a `impl<T> From<!> for T` impl in the future by disallowing downstream crates to do negative reasoning that might conflict with that.\r\n\r\n**Warning:** the effect of this attribute is quite subtle, and it should be used with caution! In particular, adding a \"reservation impl\" alone does **not** guarantee that one can add the impl in the future, as described below.\r\n\r\n## History\r\n\r\n- Initial implementation in https://github.com/rust-lang/rust/pull/62661\r\n\r\n## Current blockers before this attribute can be used to affect end-users\r\n\r\n- [ ] How should \"reserved\" impls show up in rustdoc? (https://github.com/rust-lang/rust/issues/64633)\r\n- [ ] What should its error message be? (https://github.com/rust-lang/rust/issues/64633)\r\n\r\n## Usage\r\n\r\nYou can use the `#[rustc_reservation_impl]` attribute as follows:\r\n\r\n```rust\r\n#[rustc_reservation_impl]\r\nimpl<T> From<!> for T { .. }\r\n```\r\n\r\nFor the most part, rustc will act as though this impl **does not exist**. For example, users can add overlapping impls if they prefer:\r\n\r\n```rust\r\nstruct LocalType1<T>(T);\r\nimpl<T> From<!> for LocalType1<T> { }\r\n\r\nstruct LocalType2<T>(T);\r\nimpl<T> From<T> for LocalType2<T> { }\r\n```\r\n\r\n**Note that this implies that the `#[rustc_reservation_impl]` attribute alone does not guarantee that you can add the reservation impl in a future compatible way.** Adding the reserved impl in the future may still cause coherence overlap (e.g., the impl for `LocalType<T>` for the impl for all `T` would overlap here). This will typically result in errors.\r\n\r\nIn order to add the impl, you must be able to ensure that coherence will allow the overlapping impls. This can be done in two ways, both of which are presently unstable:\r\n\r\n- Specialization: but be careful! e.g., the current specialization rules do not suffice in the `LocalType2` example above, since neither impl is a subset of one another.\r\n- Marker traits: we have a notion of marker traits that are allowed to overlap. Marker traits currently must have no items, which excludes e.g. `From`, but we could grow this definition.\r\n\r\n## What *does* the attribute do?\r\n\r\nThe attribute prevents negative reasoning. In particular, it forbids impls like this:\r\n\r\n```rust\r\ntrait LocalTrait;\r\nstruct LocalType3;\r\nimpl<T> LocalTrait for T where T: From<!> { }\r\nimpl<T> LocalTrait for LocalType3 { }\r\n```\r\n\r\nWithout the reservation impl, this would be legal, because the crate may assume that `LocalType: From<!>` does not hold (since `LocalType` is local to the crate). *With* the reservation impl, however, code like this will get an error.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64631/timeline", "performed_via_github_app": null, "state_reason": null}