{"url": "https://api.github.com/repos/rust-lang/rust/issues/70337", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70337/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70337/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70337/events", "html_url": "https://github.com/rust-lang/rust/issues/70337", "id": 586568350, "node_id": "MDU6SXNzdWU1ODY1NjgzNTA=", "number": 70337, "title": "Rust \"forgets\" intel attribute on assembly code sometimes", "user": {"login": "dbartussek", "id": 39270698, "node_id": "MDQ6VXNlcjM5MjcwNjk4", "avatar_url": "https://avatars.githubusercontent.com/u/39270698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbartussek", "html_url": "https://github.com/dbartussek", "followers_url": "https://api.github.com/users/dbartussek/followers", "following_url": "https://api.github.com/users/dbartussek/following{/other_user}", "gists_url": "https://api.github.com/users/dbartussek/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbartussek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbartussek/subscriptions", "organizations_url": "https://api.github.com/users/dbartussek/orgs", "repos_url": "https://api.github.com/users/dbartussek/repos", "events_url": "https://api.github.com/users/dbartussek/events{/privacy}", "received_events_url": "https://api.github.com/users/dbartussek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 91598611, "node_id": "MDU6TGFiZWw5MTU5ODYxMQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inline-assembly", "name": "A-inline-assembly", "color": "f7e101", "default": false, "description": "Area: inline asm!(..)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-23T22:50:59Z", "updated_at": "2020-05-20T21:11:54Z", "closed_at": "2020-05-20T21:11:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n```rust\r\n#![no_std]\r\n#![no_main]\r\n#![feature(asm)]\r\n#![feature(lang_items)]\r\n\r\n///! A small reproduction case\r\n///!\r\n///! Build with `cargo build`\r\n///!\r\n///! Notes:\r\n///! - setting opt-level to 0 or 1 compiles\r\n///! - opt-level 2, 3, \"s\", \"z\" cause the error\r\n///! - a release build works just fine, just a debug build with optimization has the issue\r\n\r\nuse core::mem::{ManuallyDrop, MaybeUninit};\r\nuse core::panic::PanicInfo;\r\n\r\npub unsafe fn call_with_stack<T>(\r\n    arg: &mut T,\r\n    function: extern \"sysv64\" fn(&mut T) -> (),\r\n    stack: *mut u8,\r\n) {\r\n    asm!(r#\"\r\n    mov rbp, rsp\r\n    mov rsp, $2\r\n\r\n    call $1\r\n\r\n    mov rsp, rbp\r\n    \"#\r\n    : // Return values\r\n    : \"{rdi}\"(arg), \"r\"(function), \"r\"(stack) // Arguments\r\n    : \"rbp\", \"cc\", \"memory\" // Clobbers\r\n    : \"volatile\", \"intel\" // Options\r\n    );\r\n}\r\n\r\n/// Calls a closure and returns the result\r\n///\r\n/// This function is unsafe because it changes the stack pointer to stack.\r\n/// stack must be suitable to be used as a stack pointer on the target system.\r\npub unsafe fn call_closure_with_stack<F, R>(closure: F, stack: *mut u8) -> R\r\nwhere\r\n    F: FnOnce() -> R,\r\n{\r\n    extern \"sysv64\" fn inner<F, R>(data: &mut (ManuallyDrop<F>, MaybeUninit<R>))\r\n    where\r\n        F: FnOnce() -> R,\r\n    {\r\n        let result = {\r\n            // Read the closure from context, taking ownership of it\r\n            let function = unsafe { ManuallyDrop::take(&mut data.0) };\r\n\r\n            // Call the closure.\r\n            // This consumes it and returns the result\r\n            function()\r\n        };\r\n\r\n        // Write the result into the context\r\n        data.1 = MaybeUninit::new(result);\r\n    }\r\n\r\n    // The context contains the closure and uninitialized memory for the return value\r\n    let mut context = (ManuallyDrop::new(closure), MaybeUninit::uninit());\r\n\r\n    call_with_stack(\r\n        &mut context,\r\n        // We create a new, internal function that does not close over anything\r\n        // and takes a context reference as its argument\r\n        inner,\r\n        stack,\r\n    );\r\n\r\n    // Read the result from the context\r\n    // No values are in the context anymore afterwards\r\n    context.1.assume_init()\r\n}\r\n\r\n#[no_mangle]\r\npub unsafe fn _start(stack: *mut u8) {\r\n    call_closure_with_stack(|| (), stack);\r\n}\r\n\r\n#[no_mangle]\r\npub unsafe fn efi_main(stack: *mut u8) {\r\n    call_closure_with_stack(|| (), stack);\r\n}\r\n\r\n#[panic_handler]\r\nfn panic(_info: &PanicInfo) -> ! {\r\n    loop {}\r\n}\r\n\r\n#[lang = \"eh_personality\"] extern fn eh_personality() {}\r\n```\r\n\r\nI expected to see this happen: \r\nThe inline assembly should be compiled in intel syntax\r\n\r\nInstead, this happened: \r\nUnder some circumstances, Rust seems to forget about the intel attribute and tries to compile it as AT&T assembly. \r\nI have not found a consistent reason for this, if the code compiles or not changes seemingly at random with different compile options or code reordering. \r\nRemoving call_closure_with_stack also made resulted in no error, but I am not sure if it is the cause or just massages the code in such a way that the issue goes silent.\r\n\r\n<details><summary>full cargo error message with --verbose</summary>\r\n<p>\r\n\r\n```\r\n   Compiling asm_test v0.1.0 (C:\\Users\\Dario\\RustProjects\\asm_test)\r\n     Running `rustc --crate-name asm_test --edition=2018 'src\\main.rs' --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C opt-level=s -C debuginfo=2 -C debug-assertions=on -C metadata=ff8ce8b6214d71b9 --out-dir 'C:\\Users\\Dario\\RustProjects\\asm_test\\target\\debug\\deps' -C 'incremental=C:\\Users\\Dario\\RustProjects\\asm_test\\target\\debug\\incremental' -L 'dependency=C:\\Users\\Dario\\RustProjects\\asm_test\\target\\debug\\deps' -Ctarget-feature=+crt-static`\r\nerror: <inline asm>:2:5: error: unknown use of instruction mnemonic without a size suffix\r\n    mov rbp, rsp\r\n    ^\r\n\r\n  --> src\\main.rs:23:5\r\n   |\r\n23 | /     asm!(r#\"\r\n24 | |     mov rbp, rsp\r\n25 | |     mov rsp, $2\r\n26 | |\r\n...  |\r\n34 | |     : \"volatile\", \"intel\" // Options\r\n35 | |     );\r\n   | |______^\r\n\r\nerror: <inline asm>:5:5: error: unknown use of instruction mnemonic without a size suffix\r\n    call %rax\r\n    ^\r\n\r\n  --> src\\main.rs:23:5\r\n   |\r\n23 | /     asm!(r#\"\r\n24 | |     mov rbp, rsp\r\n25 | |     mov rsp, $2\r\n26 | |\r\n...  |\r\n34 | |     : \"volatile\", \"intel\" // Options\r\n35 | |     );\r\n   | |______^\r\n\r\nerror: <inline asm>:7:5: error: unknown use of instruction mnemonic without a size suffix\r\n    mov rsp, rbp\r\n    ^\r\n\r\n  --> src\\main.rs:23:5\r\n   |\r\n23 | /     asm!(r#\"\r\n24 | |     mov rbp, rsp\r\n25 | |     mov rsp, $2\r\n26 | |\r\n...  |\r\n34 | |     : \"volatile\", \"intel\" // Options\r\n35 | |     );\r\n   | |______^\r\n\r\nerror: aborting due to 3 previous errors\r\n\r\nerror: could not compile `asm_test`.\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name asm_test --edition=2018 'src\\main.rs' --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C opt-level=s -C debuginfo=2 -C debug-assertions=on -C metadata=ff8ce8b6214d71b9 --out-dir 'C:\\Users\\Dario\\RustProjects\\asm_test\\target\\debug\\deps' -C 'incremental=C:\\Users\\Dario\\RustProjects\\asm_test\\target\\debug\\incremental' -L 'dependency=C:\\Users\\Dario\\RustProjects\\asm_test\\target\\debug\\deps' -Ctarget-feature=+crt-static` (exit code: 1)\r\n```\r\n</p>\r\n</details>\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\nWindows:\r\n```\r\nrustc 1.44.0-nightly (f509b26a7 2020-03-18)\r\nbinary: rustc\r\ncommit-hash: f509b26a7730d721ef87423a72b3fdf8724b4afa\r\ncommit-date: 2020-03-18\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.44.0-nightly\r\nLLVM version: 9.0\r\n```\r\nLinux:\r\n```\r\nrustc 1.44.0-nightly (f509b26a7 2020-03-18)\r\nbinary: rustc\r\ncommit-hash: f509b26a7730d721ef87423a72b3fdf8724b4afa\r\ncommit-date: 2020-03-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.44.0-nightly\r\nLLVM version: 9.0\r\n```", "closed_by": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70337/timeline", "performed_via_github_app": null, "state_reason": "completed"}