{"url": "https://api.github.com/repos/rust-lang/rust/issues/31869", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/31869/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/31869/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/31869/events", "html_url": "https://github.com/rust-lang/rust/issues/31869", "id": 136161465, "node_id": "MDU6SXNzdWUxMzYxNjE0NjU=", "number": 31869, "title": "Missing Debug Implementations", "user": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2016-02-24T19:25:14Z", "updated_at": "2017-02-07T20:47:30Z", "closed_at": "2017-02-07T20:47:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `missing_debug_implementations` will detect any public type that does not implement `Debug`. Usually all public types should implement `Debug`, even if it doesn't share all the internals in its formatting. This allows users to `derive(Debug)` on their types when they contain a type from `std`.\r\n\r\nI ran the lint against crates that have types exported in `std`, and I've grouped the results below. I think the eventual goal should be to add `#![deny(missing_debug_implementations)]` to each crate. Any exceptions should be tagged `#[allow(missing_debug_implementations)]`, though hopefully those should be very few.\r\n\r\n---\r\n# collections\r\n- [ ] `src/libcollections/binary_heap.rs:672 pub struct Iter<'a, T: 'a>`\r\n- [ ] `src/libcollections/binary_heap.rs:712 pub struct IntoIter<T>`\r\n- [ ] `src/libcollections/binary_heap.rs:744 pub struct Drain<'a, T: 'a>`\r\n- [ ] `src/libcollections/btree/map.rs:188 pub struct Iter<'a, K: 'a, V: 'a>`\r\n- [ ] `src/libcollections/btree/map.rs:195 pub struct IterMut<'a, K: 'a, V: 'a>`\r\n- [ ] `src/libcollections/btree/map.rs:202 pub struct IntoIter<K, V>`\r\n- [ ] `src/libcollections/btree/map.rs:210 pub struct Keys<'a, K: 'a, V: 'a>`\r\n- [ ] `src/libcollections/btree/map.rs:216 pub struct Values<'a, K: 'a, V: 'a>`\r\n- [ ] `src/libcollections/btree/map.rs:221 pub struct Range<'a, K: 'a, V: 'a>`\r\n- [ ] `src/libcollections/btree/map.rs:227 pub struct RangeMut<'a, K: 'a, V: 'a>`\r\n- [ ] `src/libcollections/btree/map.rs:237 pub enum Entry<'a, K: 'a, V: 'a>`\r\n- [ ] `src/libcollections/btree/map.rs:253 pub struct VacantEntry<'a, K: 'a, V: 'a>`\r\n- [ ] `src/libcollections/btree/map.rs:264 pub struct OccupiedEntry<'a, K: 'a, V: 'a>`\r\n- [ ] `src/libcollections/btree/set.rs:49 pub struct Iter<'a, T: 'a>`\r\n- [ ] `src/libcollections/btree/set.rs:55 pub struct IntoIter<T>`\r\n- [ ] `src/libcollections/btree/set.rs:60 pub struct Range<'a, T: 'a>`\r\n- [ ] `src/libcollections/btree/set.rs:66 pub struct Difference<'a, T: 'a>`\r\n- [ ] `src/libcollections/btree/set.rs:73 pub struct SymmetricDifference<'a, T: 'a>`\r\n- [ ] `src/libcollections/btree/set.rs:80 pub struct Intersection<'a, T: 'a>`\r\n- [ ] `src/libcollections/btree/set.rs:87 pub struct Union<'a, T: 'a>`\r\n- [ ] `src/libcollections/enum_set.rs:218 pub struct Iter<E>`\r\n- [ ] `src/libcollections/linked_list.rs:59 pub struct Iter<'a, T: 'a>`\r\n- [ ] `src/libcollections/linked_list.rs:79 pub struct IterMut<'a, T: 'a>`\r\n- [ ] `src/libcollections/linked_list.rs:89 pub struct IntoIter<T>`\r\n- [ ] `src/libcollections/linked_list.rs:1052 pub struct FrontPlace<'a, T: 'a>`\r\n- [ ] `src/libcollections/linked_list.rs:1096 pub struct BackPlace<'a, T: 'a>`\r\n- [ ] `src/libcollections/str.rs:120 pub struct Utf16Units<'a>`\r\n- [ ] `src/libcollections/string.rs:1852 pub struct Drain<'a>`\r\n- [ ] `src/libcollections/vec.rs:1551 pub struct IntoIter<T>`\r\n- [ ] `src/libcollections/vec.rs:1649 pub struct Drain<'a, T: 'a>`\r\n- [ ] `src/libcollections/vec_deque.rs:1739 pub struct Iter<'a, T: 'a>`\r\n- [ ] `src/libcollections/vec_deque.rs:1795 pub struct IterMut<'a, T: 'a>`\r\n- [ ] `src/libcollections/vec_deque.rs:1848 pub struct IntoIter<T>`\r\n- [ ] `src/libcollections/vec_deque.rs:1881 pub struct Drain<'a, T: 'a>`\r\n# rand\r\n- [ ] `src/librand/distributions/range.rs:32 pub struct Range<X>`\r\n- [ ] `src/librand/distributions/gamma.rs:42 pub struct Gamma`\r\n- [ ] `src/librand/distributions/gamma.rs:180 pub struct ChiSquared`\r\n- [ ] `src/librand/distributions/gamma.rs:228 pub struct FisherF`\r\n- [ ] `src/librand/distributions/gamma.rs:263 pub struct StudentT`\r\n- [ ] `src/librand/distributions/normal.rs:32 pub struct StandardNormal(pub f64);`\r\n- [ ] `src/librand/distributions/normal.rs:80 pub struct Normal`\r\n- [ ] `src/librand/distributions/normal.rs:118 pub struct LogNormal`\r\n- [ ] `src/librand/distributions/exponential.rs:33 pub struct Exp1(pub f64);`\r\n- [ ] `src/librand/distributions/exponential.rs:62 pub struct Exp`\r\n- [ ] `src/librand/distributions/mod.rs:57 pub struct RandSample<Sup>`\r\n- [ ] `src/librand/distributions/mod.rs:80 pub struct Weighted<T>`\r\n- [ ] `src/librand/distributions/mod.rs:96 pub struct WeightedChoice<'a, T: 'a>`\r\n- [ ] `src/librand/isaac.rs:38 pub struct IsaacRng`\r\n- [ ] `src/librand/isaac.rs:316 pub struct Isaac64Rng`\r\n- [ ] `src/librand/chacha.rs:29 pub struct ChaChaRng`\r\n- [ ] `src/librand/reseeding.rs:22 pub struct ReseedingRng<R, Rsdr>`\r\n- [ ] `src/librand/reseeding.rs:107 pub struct ReseedWithDefault;`\r\n- [ ] `src/librand/lib.rs:282 pub struct Generator<'a, T, R: 'a>`\r\n- [ ] `src/librand/lib.rs:298 pub struct AsciiGenerator<'a, R: 'a>`\r\n- [ ] `src/librand/lib.rs:334 pub struct XorShiftRng`\r\n- [ ] `src/librand/lib.rs:420 pub struct Open01<F>(pub F);`\r\n- [ ] `src/librand/lib.rs:428 pub struct Closed01<F>(pub F);`\r\n\r\n", "closed_by": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/31869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/31869/timeline", "performed_via_github_app": null, "state_reason": "completed"}