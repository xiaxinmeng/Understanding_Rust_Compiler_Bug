{"url": "https://api.github.com/repos/rust-lang/rust/issues/33221", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/33221/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/33221/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/33221/events", "html_url": "https://github.com/rust-lang/rust/issues/33221", "id": 151167981, "node_id": "MDU6SXNzdWUxNTExNjc5ODE=", "number": 33221, "title": "linking staticlib files into shared libraries exports all of std::", "user": {"login": "froydnj", "id": 151096, "node_id": "MDQ6VXNlcjE1MTA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/151096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froydnj", "html_url": "https://github.com/froydnj", "followers_url": "https://api.github.com/users/froydnj/followers", "following_url": "https://api.github.com/users/froydnj/following{/other_user}", "gists_url": "https://api.github.com/users/froydnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/froydnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froydnj/subscriptions", "organizations_url": "https://api.github.com/users/froydnj/orgs", "repos_url": "https://api.github.com/users/froydnj/repos", "events_url": "https://api.github.com/users/froydnj/events{/privacy}", "received_events_url": "https://api.github.com/users/froydnj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-04-26T15:37:46Z", "updated_at": "2022-12-07T20:52:26Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider this toy example:\n\n``` rust\n#[no_mangle]\npub fn hello() {\n    println!(\"hello world\")\n}\n```\n\n``` c++\nextern \"C\" {\n  void hello();\n}\n\nvoid\nreally_hello()\n{\n  hello();\n}\n```\n\nCompile and link:\n\n``` sh\n$ rustc --crate-type staticlib --emit link=sl.a sl.rs\n$ g++ -o hello.so -fPIC -shared driver.cpp sl.a\n```\n\nWith rust 1.8.0, we have:\n\n``` sh\n$ ls -l hello.so\n-rwxr-xr-x 1 froydnj froydnj 2141544 Apr 26 11:02 hello.so\n```\n\nwhich is quite large (2MB!) for such a simple program.  Despite all of `std` being compiled with the moral equivalent of `-ffunction-sections`, adding `-Wl,--gc-sections` does very little to slim down the binary:\n\n``` sh\n$ g++ -o hello.so -fPIC -shared driver.cpp sl.a -Wl,--gc-sections\n$ ls -l hello.so\n-rwxr-xr-x 1 froydnj froydnj 2141544 Apr 26 11:02 hello.so\n```\n\nThat's only about 400 bytes eliminated, which seems suboptimal.\n\nThe problem is that all of the public functions in `libstd.rlib` are marked as global symbols.  When `sl.a` is linked into a shared library, all of those global symbols from `libstd.rlib` are now treated as symbols that the newly-created shared library should export as publically visible symbols.  Which creates bloat in terms of a large PLT the shared library must tote around as well as rendering `-Wl,--gc-sections` ineffective, as virtually everything is transitively reachable from these public functions from `libstd.rlib`.  `hello.so` has ~5000 visible functions, when it should really only have a handful.  `hello.so` contains code for parsing floating-point numbers, even though it really shouldn't, according to the functions shown above.\n\nThis example is admittedly contrived, but Firefox's use of Rust is not terribly dissimilar from this: we compile all the crates we use into rlibs, link all of the rlibs together into a staticlib, and then link the staticlib into our enormous shared library, libxul.  We're pretty careful with symbol visibility; we have hundreds of thousands of symbols in libxul, but fewer than 500 exported symbols.  We would very much like it if:\n1. libxul didn't suddenly grow thousands of newly-exported symbols overnight.\n2. libxul didn't contain Rust code from `std` (or otherwise) that it doesn't use.\n\nWe didn't think terribly hard about this when we enabled Rust on our desktop platforms (though we should have), but our Android team cares quite a bit about binary size, and Rust support taking up this much space would be a hard blocker on our ability to ship Rust on Android.  It would be somewhat less than the above because we'd be compiling for ARM, but it'd still be significant.  (I assume the situation is similar on Mac and Windows, though I haven't checked.)\n\ncc @alexcrichton @rillian @glandium\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/33221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/33221/timeline", "performed_via_github_app": null, "state_reason": null}