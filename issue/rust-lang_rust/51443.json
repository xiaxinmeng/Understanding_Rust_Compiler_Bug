{"url": "https://api.github.com/repos/rust-lang/rust/issues/51443", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51443/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51443/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51443/events", "html_url": "https://github.com/rust-lang/rust/issues/51443", "id": 330805907, "node_id": "MDU6SXNzdWUzMzA4MDU5MDc=", "number": 51443, "title": "`where_clauses_object_safety` future compatibility lint", "user": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 630636017, "node_id": "MDU6TGFiZWw2MzA2MzYwMTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-future-compatibility", "name": "C-future-compatibility", "color": "f5f1fd", "default": false, "description": "Category: future compatibility lints"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2018-06-08T21:18:35Z", "updated_at": "2023-01-08T18:50:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is the **summary issue** for the `WHERE_CLAUSES_OBJECT_SAFETY`\r\nfuture-compatibility warning and other related errors. The goal of\r\nthis page is describe why this change was made and how you can fix\r\ncode that is affected by it. It also provides a place to ask questions\r\nor register a complaint if you feel the change should not be made. For\r\nmore information on the policy around future-compatibility warnings,\r\nsee our [breaking change policy guidelines](https://github.com/rust-lang/rfcs/blob/master/text/1122-language-semver.md).\r\n\r\n#### What is the warning for?\r\n\r\nAs was discovered in #50781 a combination of implementing a trait directly for a `dyn` type and where clauses involving `Self` can punch a hole in our dyn-capability rules rules. See the minimization:\r\n\r\n```rust\r\ntrait Trait {}\r\n\r\ntrait X { fn foo(&self) where Self: Trait; }\r\n\r\nimpl X for () { fn foo(&self) {} }\r\n\r\nimpl Trait for dyn X {}\r\n\r\n// Segfault at opt-level 0, SIGILL otherwise.\r\npub fn main() { <dyn X as X>::foo(&()); }\r\n```\r\n\r\nThe fix applied in #50966 is to tighten the dyn-capability rules to make `X`  not dyn-capable in this case, in general making any trait that contains `Self` in where clauses not dyn-capable, much like we disallow `Self` in arguments or return type. Few root regressions appeared in the crater run and those were fixable, though some crates being unmaintained complicates things.\r\n\r\nHowever that fix is heavy handed and disallows things we actually wish to support, still we went ahead with the warning as a stop gap while we look for a better, more targeted fix. The original issue contains some discussion of [alternative fixes](https://github.com/rust-lang/rust/issues/50781#issuecomment-393628750). With tight chalk integration, we could do some [clever things](https://github.com/rust-lang/rust/issues/50781#issuecomment-394118127).\r\n\r\nOther alternatives discussed for the short-term:\r\n- Checking from an `impl Foo for dyn Bar + ..` whether that impl is causing trouble. This seems to be a dead end because it's hard to tell which `dyn` types are targeted by a blanket impl such as `impl<U: ?Sized + Bounds> Trait for U`.\r\n- Checking the cast sites with a rule like \"if `dyn Foo: Trait` then to cast `T` into `dyn Foo` we require that `T: Trait` must also hold\", probably for every `Trait` such that `Self: Trait` appears in where clauses in the traits methods. This would alleviate the warning for `Self: Trait` where clauses. This may be practical to implement now, but seems subtle, we'd need to give it more thought.\r\n\r\n#### When will this warning become a hard error?\r\n                    \r\nHopefully we will develop a finer-grained rule and this warning will never be an error.\r\n\r\n#### How to fix this?\r\n\r\nEither drop the where clause or stop using `dyn` types with the affected trait. If this is not viable, that's probably ok, it's very unlikely that your code is actually unsound. But please do report your case here so take we may take it into consideration and see how to better support it!", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51443/timeline", "performed_via_github_app": null, "state_reason": null}