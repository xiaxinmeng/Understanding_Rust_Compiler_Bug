{"url": "https://api.github.com/repos/rust-lang/rust/issues/72207", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/72207/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/72207/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/72207/events", "html_url": "https://github.com/rust-lang/rust/issues/72207", "id": 618442296, "node_id": "MDU6SXNzdWU2MTg0NDIyOTY=", "number": 72207, "title": "Specifying one associated type makes Rust forget about the constraint on the other ones", "user": {"login": "Ten0", "id": 9094255, "node_id": "MDQ6VXNlcjkwOTQyNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9094255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ten0", "html_url": "https://github.com/Ten0", "followers_url": "https://api.github.com/users/Ten0/followers", "following_url": "https://api.github.com/users/Ten0/following{/other_user}", "gists_url": "https://api.github.com/users/Ten0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ten0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ten0/subscriptions", "organizations_url": "https://api.github.com/users/Ten0/orgs", "repos_url": "https://api.github.com/users/Ten0/repos", "events_url": "https://api.github.com/users/Ten0/events{/privacy}", "received_events_url": "https://api.github.com/users/Ten0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-14T18:20:10Z", "updated_at": "2020-05-20T21:10:46Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code (which is actually the minimum reproduction I could find, as the bug seems to disappear when I try to reduce it more):\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\npub struct XImpl<T, E, F2, F1>\r\nwhere\r\n\tF2: Fn(E),\r\n{\r\n\tf1: F1,\r\n\tf2: F2,\r\n\t_ghost: PhantomData<(T, E)>,\r\n}\r\n\r\npub trait X<T>: Sized {\r\n\ttype F1;\r\n\ttype F2: Fn(Self::E);\r\n\ttype E;\r\n\r\n\tfn and<NewF1, NewF1Generator>(self, f: NewF1Generator) -> XImpl<T, Self::E, Self::F2, NewF1>\r\n\twhere\r\n\t\tNewF1Generator: FnOnce(Self::F1) -> NewF1;\r\n}\r\n\r\nimpl<T, E, F2, F1> X<T> for XImpl<T, E, F2, F1>\r\nwhere\r\n\tF2: Fn(E),\r\n{\r\n\ttype E = E;\r\n\ttype F2 = F2;\r\n\ttype F1 = F1;\r\n\r\n\tfn and<NewF1, NewF1Generator>(self, f: NewF1Generator) -> XImpl<T, E, F2, NewF1>\r\n\twhere\r\n\t\tNewF1Generator: FnOnce(F1) -> NewF1,\r\n\t{\r\n\t\tXImpl {\r\n\t\t\tf1: f(self.f1),\r\n\t\t\tf2: self.f2,\r\n\t\t\t_ghost: PhantomData,\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfn f() -> impl X<()> {\r\n\tXImpl {\r\n\t\tf1: || (),\r\n\t\tf2: |()| (),\r\n\t\t_ghost: PhantomData,\r\n\t}\r\n}\r\n\r\nfn f2() -> impl X<()> {\r\n\tf().and(|rb| rb)\r\n}\r\n```\r\n\r\nIt does compile: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=54e239ced207241c8438dddbc325ef19\r\n\r\nIf however we specify the value for the associated type `E` in `f` and `f2`, so that code calling `f2()` can depend on knowing the type `E`:\r\n```rust\r\nfn f() -> impl X<(), E = ()> {\r\n\tXImpl {\r\n\t\tf1: || (),\r\n\t\tf2: |()| (),\r\n\t\t_ghost: PhantomData,\r\n\t}\r\n}\r\n\r\nfn f2() -> impl X<(), E = ()> {\r\n\tf().and(|rb| rb)\r\n}\r\n```\r\nThe compiler seems to forget that any `X::F2` implements `Fn(Self::E)`, and stops compiling: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=1e84aea4402bd45da498aace9682b1ad\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0277]: expected a `std::ops::Fn<((),)>` closure, found `<impl X<()> as X<()>>::F2`\r\n  --> src/lib.rs:51:6\r\n   |\r\n51 |     f().and(|rb| rb)\r\n   |         ^^^ expected an `Fn<((),)>` closure, found `<impl X<()> as X<()>>::F2`\r\n   |\r\n   = help: the trait `std::ops::Fn<((),)>` is not implemented for `<impl X<()> as X<()>>::F2`\r\n\r\nerror[E0277]: expected a `std::ops::Fn<((),)>` closure, found `<impl X<()> as X<()>>::F2`\r\n  --> src/lib.rs:51:2\r\n   |\r\n12 | pub trait X<T>: Sized {\r\n   | --------------------- required by `X`\r\n...\r\n51 |     f().and(|rb| rb)\r\n   |     ^^^^^^^^^^^^^^^^ expected an `Fn<((),)>` closure, found `<impl X<()> as X<()>>::F2`\r\n   |\r\n   = help: the trait `std::ops::Fn<((),)>` is not implemented for `<impl X<()> as X<()>>::F2`\r\n\r\nerror[E0277]: expected a `std::ops::Fn<((),)>` closure, found `<impl X<()> as X<()>>::F2`\r\n  --> src/lib.rs:50:12\r\n   |\r\n50 | fn f2() -> impl X<(), E = ()> {\r\n   |            ^^^^^^^^^^^^^^^^^^ expected an `Fn<((),)>` closure, found `<impl X<()> as X<()>>::F2`\r\n51 |     f().and(|rb| rb)\r\n   |     ---------------- this returned value is of type `XImpl<(), (), <impl X<()> as X<()>>::F2, <impl X<()> as X<()>>::F1>`\r\n   |\r\n   = help: the trait `std::ops::Fn<((),)>` is not implemented for `<impl X<()> as X<()>>::F2`\r\n   = note: required because of the requirements on the impl of `X<()>` for `XImpl<(), (), <impl X<()> as X<()>>::F2, <impl X<()> as X<()>>::F1>`\r\n   = note: the return type of a function must have a statically known size\r\n```\r\n\r\nNote that the bug does not happen if `F2: Fn()` instead of `F2: Fn(E)`:\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=266f91f2ba2f0730148c4dea8c3732a4\r\n\r\nIt does not happen either if `F2: Fn(T)` instead of `F2: Fn(E)`:\r\nhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e37b04bfdeec2a1ebddc10a4422931e8\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.43.1 (8d69840ab 2020-05-04)\r\nbinary: rustc\r\ncommit-hash: 8d69840ab92ea7f4d323420088dd8c9775f180cd\r\ncommit-date: 2020-05-04\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.43.1\r\nLLVM version: 9.0\r\n```\r\n\r\nThis also happens on nightly.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/72207/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/72207/timeline", "performed_via_github_app": null, "state_reason": null}