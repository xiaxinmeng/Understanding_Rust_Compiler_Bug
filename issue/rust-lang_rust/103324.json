{"url": "https://api.github.com/repos/rust-lang/rust/issues/103324", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/103324/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/103324/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/103324/events", "html_url": "https://github.com/rust-lang/rust/issues/103324", "id": 1417338359, "node_id": "I_kwDOAAsO6M5Uet33", "number": 103324, "title": "Generic const expressions bug: expected constant Self::SIZE found constant Self::SIZE ", "user": {"login": "seniorjoinu", "id": 15361624, "node_id": "MDQ6VXNlcjE1MzYxNjI0", "avatar_url": "https://avatars.githubusercontent.com/u/15361624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seniorjoinu", "html_url": "https://github.com/seniorjoinu", "followers_url": "https://api.github.com/users/seniorjoinu/followers", "following_url": "https://api.github.com/users/seniorjoinu/following{/other_user}", "gists_url": "https://api.github.com/users/seniorjoinu/gists{/gist_id}", "starred_url": "https://api.github.com/users/seniorjoinu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seniorjoinu/subscriptions", "organizations_url": "https://api.github.com/users/seniorjoinu/orgs", "repos_url": "https://api.github.com/users/seniorjoinu/repos", "events_url": "https://api.github.com/users/seniorjoinu/events{/privacy}", "received_events_url": "https://api.github.com/users/seniorjoinu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}, {"id": 5226739262, "node_id": "LA_kwDOAAsO6M8AAAABN4m2Pg", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-incomplete-features", "name": "requires-incomplete-features", "color": "76dcde", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-10-20T21:42:16Z", "updated_at": "2023-03-04T23:29:27Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_const_exprs)]\r\n\r\npub trait AsBytes: Sized\r\nwhere\r\n    [u8; size_of::<Self>()]: Sized,\r\n{\r\n    fn to_bytes(self) -> [u8; size_of::<Self>()];\r\n\r\n    fn from_bytes(arr: [u8; size_of::<Self>()]) -> Self;\r\n}\r\n\r\nimpl<A: AsBytes> AsBytes for (A,)\r\nwhere\r\n    [(); size_of::<Self>()]: Sized,\r\n    [(); size_of::<A>()]: Sized,\r\n{\r\n    fn to_bytes(self) -> [u8; size_of::<Self>()] {\r\n        self.0.to_bytes()\r\n    }\r\n\r\n    fn from_bytes(arr: [u8; size_of::<Self>()]) -> Self {\r\n        (A::from_bytes(arr),)\r\n    }\r\n}\r\n```\r\n\r\nAnd I expected it to work just fine, since the compiler should know that `A` and `(A,)` have the same size. \r\nBut I got this error:\r\n```\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:18:9\r\n   |\r\n18 |         self.0.to_bytes()\r\n   |         ^^^^^^^^^^^^^^^^^ expected `size_of::<Self>()`, found `size_of::<Self>()`\r\n   |\r\n   = note: expected constant `size_of::<Self>()`\r\n              found constant `size_of::<Self>()`\r\n\r\nerror[E0308]: mismatched types\r\n  --> src/lib.rs:22:24\r\n   |\r\n22 |         (A::from_bytes(arr),)\r\n   |                        ^^^ expected `size_of::<Self>()`, found `size_of::<Self>()`\r\n   |\r\n   = note: expected constant `size_of::<Self>()`\r\n              found constant `size_of::<Self>()`\r\n```\r\n\r\nThis made me think, maybe the compiler needs an additional explicit guarantee that `size_of::<A>()` and `size_of::<(A,)>()` are the same. _After all those `where [u8; size_of::<T>()]: Sized` I'm not sure in anything anymore._ So I tried to add a little bit more certainty for the compiler by modifying the code like this: \r\n\r\n```rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_const_exprs)]\r\n\r\npub trait SuperSized: Sized {\r\n    const SIZE: usize;\r\n\r\n    fn super_size() -> usize {\r\n        Self::SIZE\r\n    }\r\n}\r\n\r\nimpl<A: SuperSized> SuperSized for (A,) {\r\n    const SIZE: usize = A::SIZE;   // <--------- I expected this line to do the trick\r\n}\r\n\r\npub trait AsBytes: SuperSized\r\nwhere\r\n    [u8; Self::SIZE]: Sized,\r\n{\r\n    fn to_bytes(self) -> [u8; Self::SIZE];\r\n\r\n    fn from_bytes(arr: [u8; Self::SIZE]) -> Self;\r\n}\r\n\r\nimpl<A: AsBytes> AsBytes for (A,)\r\nwhere\r\n    [(); Self::SIZE]: Sized,\r\n    [(); A::SIZE]: Sized,\r\n{\r\n    fn to_bytes(self) -> [u8; Self::SIZE] {\r\n        self.0.to_bytes()\r\n    }\r\n\r\n    fn from_bytes(arr: [u8; Self::SIZE]) -> Self {\r\n        (A::from_bytes(arr),)\r\n    }\r\n}\r\n```\r\n\r\nBut the compiler threw out a very similar error:\r\n```\r\nerror[[E0308]](https://doc.rust-lang.org/nightly/error-index.html#E0308): mismatched types\r\n  --> src/lib.rs:32:9\r\n   |\r\n32 |         self.0.to_bytes()\r\n   |         ^^^^^^^^^^^^^^^^^ expected `Self::SIZE`, found `Self::SIZE`\r\n   |\r\n   = note: expected constant `Self::SIZE`\r\n              found constant `Self::SIZE`\r\n\r\nerror[[E0308]](https://doc.rust-lang.org/nightly/error-index.html#E0308): mismatched types\r\n  --> src/lib.rs:36:24\r\n   |\r\n36 |         (A::from_bytes(arr),)\r\n   |                        ^^^ expected `Self::SIZE`, found `Self::SIZE`\r\n   |\r\n   = note: expected constant `Self::SIZE`\r\n              found constant `Self::SIZE`\r\n```\r\n\r\nHere is a [link to playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=a8cd70e86710f47f427e35e251a072f3).\r\n\r\nI understand that generic consts are in a very early stage and the team probably familiar with this issue, but anyway.\r\nIs there a safe generic workaround?\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.66.0-nightly (57f097ea2 2022-10-01)\r\nbinary: rustc\r\ncommit-hash: 57f097ea25f2c05f424fc9b9dc50dbd6d399845c\r\ncommit-date: 2022-10-01\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.66.0-nightly\r\nLLVM version: 15.0.2\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/103324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/103324/timeline", "performed_via_github_app": null, "state_reason": null}