{"url": "https://api.github.com/repos/rust-lang/rust/issues/102070", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102070/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102070/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102070/events", "html_url": "https://github.com/rust-lang/rust/issues/102070", "id": 1379966734, "node_id": "I_kwDOAAsO6M5SQJ8O", "number": 102070, "title": "Tracking Issue for `ptr::Alignment` type", "user": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-20T20:37:25Z", "updated_at": "2022-10-18T03:03:19Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Feature gate: `#![feature(ptr_alignment_type)]`\r\n\r\nThis is a tracking issue for [the `ptr::Alignment` type, and related methods](https://doc.rust-lang.org/nightly/std/ptr/struct.Alignment.html), to represent values that are valid alignments in the rust abstract machine.\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\n// core::ptr\r\n\r\n#[derive(Copy, Clone, Eq, PartialEq)]\r\npub struct Alignment(\u2026);\r\n\r\nimpl Debug for Alignment;\r\nimpl Ord for Alignment;\r\nimpl PartialOrd for Alignment;\r\nimpl Hash for Alignment;\r\n\r\nimpl Magic {\r\n    pub const MIN: Self;\r\n    pub const fn of<T>() -> Self;\r\n    pub const fn new(align: usize) -> Option<Self>;\r\n    pub const unsafe fn new_unchecked(align: usize) -> Self;\r\n    pub const fn as_usize(self) -> usize;\r\n    pub const fn as_nonzero(self) -> NonZeroUsize;\r\n    pub const fn log2(self) -> u32;\r\n}\r\n\r\nimpl TryFrom<NonZeroUsize> for Alignment;\r\nimpl TryFrom<usize> for Alignment;\r\nimpl From<Alignment> for NonZeroUsize;\r\nimpl From<Alignment> for usize;\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] ACP https://github.com/rust-lang/libs-team/issues/108\r\n- [x] Implementation: https://github.com/rust-lang/rust/pull/102072\r\n- [x] https://github.com/rust-lang/rust/pull/102862 \r\n- [ ] Final comment period (FCP)[^1]\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- None yet.\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102070/timeline", "performed_via_github_app": null, "state_reason": null}