{"url": "https://api.github.com/repos/rust-lang/rust/issues/90964", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/90964/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/90964/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/90964/events", "html_url": "https://github.com/rust-lang/rust/issues/90964", "id": 1055341249, "node_id": "I_kwDOAAsO6M4-5zrB", "number": 90964, "title": "Should getting a `BorrowedHandle` from `Stdin`, `Stdout` or `Stderr` return a `Result` on Windows?", "user": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 1448485701, "node_id": "MDU6TGFiZWwxNDQ4NDg1NzAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-error-handling", "name": "A-error-handling", "color": "f7e101", "default": false, "description": "Area: Error handling"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}, {"id": 2352122097, "node_id": "MDU6TGFiZWwyMzUyMTIyMDk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-discussion", "name": "C-discussion", "color": "f5f1fd", "default": false, "description": "Category: Discussion or questions that doesn't represent real issues."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2021-11-16T21:18:45Z", "updated_at": "2022-03-19T09:11:15Z", "closed_at": "2022-03-19T09:11:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On Windows, the standard library's function for getting a stdio handle [looks like this](https://github.com/rust-lang/rust/blob/d914f17ca71a33a89b2dc3436fca51b1a091559e/library/std/src/sys/windows/stdio.rs#L46-L55):\r\n\r\n```rust\r\npub fn get_handle(handle_id: c::DWORD) -> io::Result<c::HANDLE> {\r\n    let handle = unsafe { c::GetStdHandle(handle_id) };\r\n    if handle == c::INVALID_HANDLE_VALUE {\r\n        Err(io::Error::last_os_error())\r\n    } else if handle.is_null() {\r\n        Err(io::Error::from_raw_os_error(c::ERROR_INVALID_HANDLE as i32))\r\n    } else {\r\n        Ok(handle)\r\n    }\r\n}\r\n```\r\nNote that it only returns a handle if one is set, otherwise it returns an error.\r\n\r\nIn contrast, the public `AsRawHandle` [stdio implementation](https://github.com/rust-lang/rust/blob/521734787ecf80ff12df7ca5998f7ec0b3b7b2c9/library/std/src/os/windows/io/raw.rs#L70-L74) ignores errors returned by `GetStdHandle` and just uses the returned value, whatever that may be.\r\n\r\n```rust\r\nimpl AsRawHandle for io::Stdin {\r\n    fn as_raw_handle(&self) -> RawHandle {\r\n        unsafe { c::GetStdHandle(c::STD_INPUT_HANDLE) as RawHandle }\r\n    }\r\n}\r\n// ...and similar for `Stdout` and `Stdin`.\r\n```\r\n\r\nThe Safe I/O RFC introduced [new types for managing handles](https://doc.rust-lang.org/nightly/std/os/windows/io/index.html). The [`AsHandle`](https://doc.rust-lang.org/nightly/std/os/windows/io/trait.AsHandle.html) trait is intended to be a drop in replacement for the old `AsRawHandle` trait but returns a [`BorrowedHandle`](https://doc.rust-lang.org/nightly/std/os/windows/io/struct.BorrowedHandle.html) instead of a `RawHandle`.\r\n\r\nI personally don't think `AsHandle` should be implemented for stdio types. Instead a function with a signature similar to this should be implemented:\r\n\r\n```rust\r\nfn try_as_handle(&self) -> io::Result<BorrowedHandle<'_>>;\r\n```\r\nIt would work similarly to the internal `get_handle` function in that it will return an error if there is no handle to return.\r\n\r\n---\r\n\r\nReasons for a `try_as_handle()` function instead of implementing `AsHandle` on stdio types:\r\n\r\n* The error is surfaced at its origin.\r\n* It gives users the correct mental model when thinking about Windows' stdio (especially since it differs from Unix).\r\n* A `BorrowedHandle` should be what the name implies: a borrow of a handle. It should not be an error sentinel value (which may overlap with an actual handle value).\r\n\r\nReasons not to do this:\r\n\r\n* Using a null or `INVALID_HANDLE_VALUE` will probably lead to an error in any case so it's unclear how much of an issue this is in practice.\r\n* It makes it harder to update code if `AsRawHandle` and `AsHandle` aren't implemented for all the same types.\r\n* Given the above, is changing this really worth the trade-off?\r\n\r\nSee also: I/O Safety Tracking Issue (#87074) and a previous [discussion on internals](https://internals.rust-lang.org/t/15611).", "closed_by": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/90964/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/90964/timeline", "performed_via_github_app": null, "state_reason": "completed"}