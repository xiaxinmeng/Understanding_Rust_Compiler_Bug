{"url": "https://api.github.com/repos/rust-lang/rust/issues/102462", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/102462/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/102462/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/102462/events", "html_url": "https://github.com/rust-lang/rust/issues/102462", "id": 1390566414, "node_id": "I_kwDOAAsO6M5S4lwO", "number": 102462, "title": "included range in for loop gives more assembly code than excluded range", "user": {"login": "melonges", "id": 70666395, "node_id": "MDQ6VXNlcjcwNjY2Mzk1", "avatar_url": "https://avatars.githubusercontent.com/u/70666395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/melonges", "html_url": "https://github.com/melonges", "followers_url": "https://api.github.com/users/melonges/followers", "following_url": "https://api.github.com/users/melonges/following{/other_user}", "gists_url": "https://api.github.com/users/melonges/gists{/gist_id}", "starred_url": "https://api.github.com/users/melonges/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/melonges/subscriptions", "organizations_url": "https://api.github.com/users/melonges/orgs", "repos_url": "https://api.github.com/users/melonges/repos", "events_url": "https://api.github.com/users/melonges/events{/privacy}", "received_events_url": "https://api.github.com/users/melonges/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-09-29T09:37:42Z", "updated_at": "2023-05-11T20:14:43Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n\r\nIf you cannot produce a minimal reproduction case (something that would work in\r\nisolation), please provide the steps or even link to a repository that causes\r\nthe problematic output to occur.\r\n-->\r\n\r\nGiven the following code where **source** will be excluded \r\n\r\n```rust\r\npub fn store(source: &i32, dest: &mut i32) -> i32 {\r\n    let mut accum = 0;\r\n    for _ in 0..*source {  // source will be excluded\r\n        accum += *dest;\r\n    }\r\n    accum\r\n}\r\n\r\n```\r\n\r\nThe assembly output is:\r\n\r\n```\r\nexample::store:\r\n        mov     ecx, dword ptr [rdi]\r\n        mov     edx, dword ptr [rsi]\r\n        imul    edx, ecx\r\n        xor     eax, eax\r\n        test    ecx, ecx\r\n        cmovg   eax, edx\r\n        ret\r\n```\r\n\r\nif **source** will be included the assembly code will increase more than\r\n\r\n```rust\r\npub fn store(source: &i32, dest: &mut i32) -> i32 {\r\n    let mut accum = 0;\r\n    for _ in 0..=*source { //  source will be included\r\n        accum += *dest;\r\n    }\r\n    accum\r\n}\r\n\r\n```\r\nThe assembly output is: \r\n\r\n```\r\nexample::store:\r\n        mov     ecx, dword ptr [rdi]\r\n        test    ecx, ecx\r\n        js      .LBB0_1\r\n        mov     r8d, dword ptr [rsi]\r\n        xor     eax, eax\r\n        xor     esi, esi\r\n.LBB0_3:\r\n        xor     edi, edi\r\n        cmp     esi, ecx\r\n        setl    dl\r\n        add     eax, r8d\r\n        cmp     esi, ecx\r\n        jge     .LBB0_5\r\n        mov     dil, dl\r\n        add     esi, edi\r\n        cmp     esi, ecx\r\n        jle     .LBB0_3\r\n.LBB0_5:\r\n        ret\r\n.LBB0_1:\r\n        xor     eax, eax\r\n        ret\r\n```\r\n\r\nI tested on rustc 1.64.0 with -C opt-level=3\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/102462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/102462/timeline", "performed_via_github_app": null, "state_reason": null}