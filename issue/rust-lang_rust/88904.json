{"url": "https://api.github.com/repos/rust-lang/rust/issues/88904", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88904/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88904/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88904/events", "html_url": "https://github.com/rust-lang/rust/issues/88904", "id": 994727615, "node_id": "MDU6SXNzdWU5OTQ3Mjc2MTU=", "number": 88904, "title": "You can instantiate a dyn Trait that doesn't implement Trait", "user": {"login": "QuineDot", "id": 75067664, "node_id": "MDQ6VXNlcjc1MDY3NjY0", "avatar_url": "https://avatars.githubusercontent.com/u/75067664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuineDot", "html_url": "https://github.com/QuineDot", "followers_url": "https://api.github.com/users/QuineDot/followers", "following_url": "https://api.github.com/users/QuineDot/following{/other_user}", "gists_url": "https://api.github.com/users/QuineDot/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuineDot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuineDot/subscriptions", "organizations_url": "https://api.github.com/users/QuineDot/orgs", "repos_url": "https://api.github.com/users/QuineDot/repos", "events_url": "https://api.github.com/users/QuineDot/events{/privacy}", "received_events_url": "https://api.github.com/users/QuineDot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-13T10:34:53Z", "updated_at": "2021-09-13T10:34:53Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "[I tried this code:](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=96212284062f0a38070c9ac9b2629343)\r\n\r\n```rust\r\npub trait Marker<'a> {}\r\n\r\npub trait Trait where for<'a> &'a Self: Marker<'a> {\r\n    fn usable(&self) {}\r\n}\r\n\r\nimpl<'a> Marker<'a> for &'a () {}\r\nimpl Trait for () {}\r\n\r\npub fn f() {\r\n    // `(): Trait`\r\n    let u = ();\r\n    u.usable();\r\n\r\n    // `dyn Trait` exists and `()` can coerce to it...\r\n    let _t: &dyn Trait = &();\r\n    // But `dyn Trait: !Trait`\r\n    // _t.usable();\r\n    // error[E0277]: the trait bound `for<'a> &'a T: Marker<'a>` is not satisfied\r\n}\r\n```\r\n\r\nI expected to see this happen: The unsized coercion is denied (but see discussion below).\r\n\r\nInstead, this happened: The unsized coercion happened and we end up with a `dyn Trait` which does not implement `Trait`.\r\n\r\n### Meta\r\nThis works on [any stable version of Rust](https://rust.godbolt.org/z/vsW5nv9es).\r\n\r\n### Notes\r\n\r\nThe failure to meet the trait bound is caught when you actually try to _use_ the `dyn Trait`, at least trivially.  I haven't found a way to weaponize this, but I haven't put any effort into doing so either.\r\n\r\n`dyn Trait` implements `Trait` if you `impl<'a> Marker<'a> for &'a (dyn Trait + 'static) {}` in the example.  However, the non-super-trait bound need not be a marker trait (it can have non-defaulted methods).\r\n\r\nRelated: [Implied Bounds](https://rust-lang.github.io/rfcs/2089-implied-bounds.html), #20671 \r\n\r\n### Discussion\r\n\r\nI'm filing this as a bug because the assertion that `dyn Trait: Trait` always holds has been expressed as a belief by Rust team members, e.g.\r\n* [This comment by Niko](https://github.com/rust-lang/rust/issues/42235#issuecomment-305835485)\r\n* [This section of RFC 2027](https://github.com/withoutboats/rfcs/blob/object-safe-for-dispatch/text/2027-object_safe_for_dispatch.md#detailed-design)\r\n\r\nThere are some possibilities in line with this assertion:\r\n* Unsized coercion checks the bounds and is denied in this case\r\n* Bounds that aren't super-traits make a trait object unsafe generally\r\n* Bounds that aren't super-traits don't apply to `dyn Trait`\r\n\r\nHowever, another possibility is to generalize RFC 2027 and just accept the current behavior:\r\n* `dyn Trait` is always a valid type, as per RFC 2027\r\n* Unsized coercion is still dependent on all methods being either object safe or not applicable (`where Self: Sized`)\r\n  * Though this could be relaxed too (if you're not object safe, `dyn Trait` just doesn't implement `Trait`)\r\n* If unsized coercion is possible, you can instantiate a `dyn Trait`, even if it doesn't implement `Trait`\r\n* Naturally, you can't use the `Trait` methods if it doesn't implement `Trait`\r\n\r\nI'm sure there are a lot of subtleties and backwards-compatibility concerns in any of the possible approaches.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88904/timeline", "performed_via_github_app": null, "state_reason": null}