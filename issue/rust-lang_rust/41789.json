{"url": "https://api.github.com/repos/rust-lang/rust/issues/41789", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41789/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41789/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41789/events", "html_url": "https://github.com/rust-lang/rust/issues/41789", "id": 226788587, "node_id": "MDU6SXNzdWUyMjY3ODg1ODc=", "number": 41789, "title": "Missed bound check removal", "user": {"login": "leonardo-m", "id": 22328461, "node_id": "MDQ6VXNlcjIyMzI4NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/22328461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardo-m", "html_url": "https://github.com/leonardo-m", "followers_url": "https://api.github.com/users/leonardo-m/followers", "following_url": "https://api.github.com/users/leonardo-m/following{/other_user}", "gists_url": "https://api.github.com/users/leonardo-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardo-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardo-m/subscriptions", "organizations_url": "https://api.github.com/users/leonardo-m/orgs", "repos_url": "https://api.github.com/users/leonardo-m/repos", "events_url": "https://api.github.com/users/leonardo-m/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardo-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-06T17:21:40Z", "updated_at": "2020-03-17T19:57:18Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "A little test program:\r\n\r\n```\r\n#[inline(never)]\r\nfn almost_product(nums: &[i32]) -> Vec<i32> {\r\n    let mut result = vec![0; nums.len()];\r\n\r\n    let mut prod = 1;\r\n    for (i, &x) in nums.iter().enumerate() {\r\n        result[i] = prod;\r\n        prod *= x;\r\n    }\r\n    result\r\n}\r\n\r\nfn main() {\r\n    let data = [1, 2, 3, 4, 11];\r\n    println!(\"{:?}\", almost_product(&data));\r\n    let data = [1, 2, 3, 4, 11, 26, 54, 6];\r\n    println!(\"{:?}\", almost_product(&data));\r\n}\r\n```\r\n\r\nIf I compile it with:\r\n`nightly-x86_64-pc-windows-gnu - rustc 1.19.0-nightly (f4209651e 2017-05-05)`\r\n\r\nUsing:\r\n`rustc -C opt-level=3 --emit asm test1.rs`\r\n\r\nI get this asm for the loop:\r\n\r\n```\r\n_ZN5test114almost_product17he2636a2faa7b0543E:\r\n...\r\n.LBB4_9:\r\n    cmpq    %r12, %rdi\r\n    jae .LBB4_10\r\n    movl    (%r15,%rdi,4), %eax\r\n    movl    %esi, (%rcx,%rdi,4)\r\n    incq    %rdi\r\n    imull   %esi, %eax\r\n    addq    $-4, %rbx\r\n    movl    %eax, %esi\r\n    jne .LBB4_9\r\n...\r\n.LBB4_10:\r\n    leaq    panic_bounds_check_loc.5(%rip), %rcx\r\n    movq    %rdi, %rdx\r\n    movq    %r12, %r8\r\n    callq   _ZN4core9panicking18panic_bounds_check17h1fe2f83f670bcee9E\r\n    ud2\r\n```\r\n\r\nThe bound check isn't removed. To remove it I need to use get_unchecked_mut(), or code like this (with the same main function):\r\n\r\n```\r\n#![feature(core_intrinsics)]\r\nuse std::intrinsics::assume;\r\n\r\n#[inline(never)]\r\nfn almost_product(nums: &[i32]) -> Vec<i32> {\r\n    let mut result = vec![0; nums.len()];\r\n\r\n    let mut prod = 1;\r\n    for (i, &x) in nums.iter().enumerate() {\r\n        unsafe { assume(i < result.len()); }\r\n        result[i] = prod;\r\n        prod *= x;\r\n    }\r\n    result\r\n}\r\n```\r\n\r\nNow the loop gives a clean asm:\r\n\r\n```\r\n.LBB3_11:\r\n    movl    %edx, %esi\r\n    movl    (%r12,%rcx,4), %edx\r\n    imull   %esi, %edx\r\n    movl    %esi, (%rax,%rcx,4)\r\n    incq    %rcx\r\n    addq    $-4, %rdi\r\n    cmpq    %rcx, %rbx\r\n    jne .LBB3_11\r\n```\r\n\r\nIf I use:\r\n`unsafe { *result.get_unchecked_mut(i) = prod; }`\r\n\r\nThe loop also gets unrolled four times:\r\n\r\n```\r\n.LBB3_15:\r\n\tmovl\t(%rcx), %esi\r\n\timull\t%edx, %esi\r\n\tmovl\t%edx, -12(%rbx)\r\n\tmovl\t4(%rcx), %edx\r\n\timull\t%esi, %edx\r\n\tmovl\t%esi, -8(%rbx)\r\n\tmovl\t8(%rcx), %esi\r\n\timull\t%edx, %esi\r\n\tmovl\t%edx, -4(%rbx)\r\n\tmovl\t12(%rcx), %edx\r\n\timull\t%esi, %edx\r\n\tmovl\t%esi, (%rbx)\r\n\taddq\t$16, %rbx\r\n\taddq\t$16, %rcx\r\n\tcmpq\t%rdi, %rcx\r\n\tjne\t.LBB3_15\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41789/timeline", "performed_via_github_app": null, "state_reason": null}