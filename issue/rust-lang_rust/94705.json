{"url": "https://api.github.com/repos/rust-lang/rust/issues/94705", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94705/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94705/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94705/events", "html_url": "https://github.com/rust-lang/rust/issues/94705", "id": 1161705048, "node_id": "I_kwDOAAsO6M5FPjZY", "number": 94705, "title": "stdlib makes assumptions about errors returned by POSIX functions", "user": {"login": "tavianator", "id": 1692591, "node_id": "MDQ6VXNlcjE2OTI1OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1692591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tavianator", "html_url": "https://github.com/tavianator", "followers_url": "https://api.github.com/users/tavianator/followers", "following_url": "https://api.github.com/users/tavianator/following{/other_user}", "gists_url": "https://api.github.com/users/tavianator/gists{/gist_id}", "starred_url": "https://api.github.com/users/tavianator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tavianator/subscriptions", "organizations_url": "https://api.github.com/users/tavianator/orgs", "repos_url": "https://api.github.com/users/tavianator/repos", "events_url": "https://api.github.com/users/tavianator/events{/privacy}", "received_events_url": "https://api.github.com/users/tavianator/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9695584, "node_id": "MDU6TGFiZWw5Njk1NTg0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-concurrency", "name": "A-concurrency", "color": "f7e101", "default": false, "description": "Area: Concurrency related issues."}, {"id": 1448485701, "node_id": "MDU6TGFiZWwxNDQ4NDg1NzAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-error-handling", "name": "A-error-handling", "color": "f7e101", "default": false, "description": "Area: Error handling"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2022-03-07T17:22:20Z", "updated_at": "2022-10-13T07:55:32Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Split off from https://github.com/rust-lang/miri/pull/1981#discussion_r820782765\n\nFor example, we assume that the return value of `pthread_rwlock_rdlock()` is either 0, `EAGAIN`, or `EDEADLK`: https://github.com/rust-lang/rust/blob/ac470e95852336172197810a9a4f6d2e8c8b6574/library/std/src/sys/unix/rwlock.rs#L51-L54\n\nAnd that's kinda what POSIX documents: https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_rwlock_rdlock.html\n\n> ### RETURN VALUE\n> \n> If successful, the *pthread_rwlock_rdlock()* function shall return zero; otherwise, an error number shall be returned to indicate the error. ...\n>\n> ### ERRORS\n>\n> ... The *pthread_rwlock_rdlock()* and *pthread_rwlock_tryrdlock()* functions may fail if:\n>\n> [EAGAIN]\n>     The read lock could not be acquired because the maximum number of read locks for rwlock has been exceeded.\n>\n> The *pthread_rwlock_rdlock()* function may fail if:\n>\n> [EDEADLK]\n>     A deadlock condition was detected or the current thread already owns the read-write lock for writing.\n>\n> These functions shall not return an error code of [EINTR].\n\nBut the thing is, POSIX error sections are not exhaustive: https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_03\n\n> Implementations may generate error numbers listed here under circumstances other than those described, if and only if all those error conditions can always be treated identically to the error conditions as described in this volume of POSIX.1-2017. Implementations shall not generate a different error number from one required by this volume of POSIX.1-2017 for an error condition described in this volume of POSIX.1-2017, but may generate additional errors unless explicitly disallowed for a particular function.\n\nAnd even the docs for that function mention \"shall not return an error code of [EINTR]\" rather than \"shall not return any other error code\".  So unless there's limits documented elsewhere, I don't think it's sound to assume that there can't be another error code returned from these functions.\n\nCC: @RalfJung \n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"vincenzopalazzo\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94705/timeline", "performed_via_github_app": null, "state_reason": "reopened"}