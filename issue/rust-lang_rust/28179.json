{"url": "https://api.github.com/repos/rust-lang/rust/issues/28179", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/28179/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/28179/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/28179/events", "html_url": "https://github.com/rust-lang/rust/issues/28179", "id": 104592603, "node_id": "MDU6SXNzdWUxMDQ1OTI2MDM=", "number": 28179, "title": "#[no_mangle] is unsafe", "user": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2015-09-02T23:36:33Z", "updated_at": "2023-04-26T01:06:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On some platforms (at least GNU/Linux, but I hear Windows and several others too), if you link together two static libraries that both export a symbol of the same name, it's undefined which symbol actually gets linked. In practice on my machine, the first library seems to win. This lets you defeat type/memory safety without the `unsafe` keyword, by having two crates export a `#[no_mangle] pub fn` with different signatures but compatible calling conventions:\n\n``` rust\n// one.rs\n#![crate_type = \"lib\"]\n\n#[no_mangle]\npub fn convert(x: &'static i32) -> Result<i32, f32> {\n    Ok(*x)\n}\n```\n\n``` rust\n// two.rs\n#![crate_type = \"lib\"]\n\n#[no_mangle]\npub fn convert(x: &'static f32) -> Result<i32, f32> {\n    Err(*x)\n}\n```\n\n``` rust\n// transmute.rs\nextern crate one;\nextern crate two;             \n\nfn main() {\n    static X: f32 = 3.14;\n    let y: i32 = two::convert(&X).unwrap();\n    println!(\"{}\", y);\n}\n```\n\n```\ngeofft@titan:/tmp/transmute$ rustc one.rs\ngeofft@titan:/tmp/transmute$ rustc two.rs\ngeofft@titan:/tmp/transmute$ rustc transmute.rs -L .\ngeofft@titan:/tmp/transmute$ ./transmute \n1078523331\n```\n\nDespite the stated call to `two::convert`, it's actually `one::convert` that gets called, which interprets the argument as a `&'static i32`. (It may be clearer to understand with this [simpler example](https://gist.github.com/geofft/493c5c17bfdd04b97670), which doesn't break type safety.)\n\nOn at least GNU/Linux but _not_ other platforms like Windows or Darwin, dynamically-linked symbols have the same ambiguity.\n\nI don't know what the right response is here. The following options all seem pretty reasonable:\n1. Acknowledge it and ignore it. Maybe document it as a possible source of unsafety, despite not using the `unsafe` keyword.\n2. Have `#[no_mangle]` export both a mangled and un-mangled name, and have Rust crates call each other via mangled names only, on the grounds that `#[no_mangle]` is for external interfaces, not for crates linking to crates. (\"External interfaces\" includes other Rust code using FFI, but FFI is unsafe.) This is analogous to how `extern \"C\" fn`s export both a Rust-ABI symbol as well as a C-ABI shim, and a direct, safe Rust call to those function happens through the Rust ABI, not through the C ABI. I'm pretty sure that all production uses of `#[no_mangle]` are `extern \"C\"`, anyway (see e.g. #10025).\n3. Deprecate `#[no_mangle]` on safe functions and data, and introduce a new `#[unsafe_no_mangle]`, so it substring-matches `unsafe`. (`#[no_mangle]` on unsafe functions or mutable statics is fine, since you need the `unsafe` keyword to get at them.)\n\nAll of these are, I think, backwards-compatible.\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/28179/reactions", "total_count": 18, "+1": 16, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/28179/timeline", "performed_via_github_app": null, "state_reason": null}