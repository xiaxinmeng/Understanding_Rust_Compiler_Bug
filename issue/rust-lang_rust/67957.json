{"url": "https://api.github.com/repos/rust-lang/rust/issues/67957", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/67957/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/67957/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/67957/events", "html_url": "https://github.com/rust-lang/rust/issues/67957", "id": 546008976, "node_id": "MDU6SXNzdWU1NDYwMDg5NzY=", "number": 67957, "title": "Mutable borrow of field with autoref vs ref mut", "user": {"login": "davidhewitt", "id": 1939362, "node_id": "MDQ6VXNlcjE5MzkzNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1939362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhewitt", "html_url": "https://github.com/davidhewitt", "followers_url": "https://api.github.com/users/davidhewitt/followers", "following_url": "https://api.github.com/users/davidhewitt/following{/other_user}", "gists_url": "https://api.github.com/users/davidhewitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhewitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhewitt/subscriptions", "organizations_url": "https://api.github.com/users/davidhewitt/orgs", "repos_url": "https://api.github.com/users/davidhewitt/repos", "events_url": "https://api.github.com/users/davidhewitt/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhewitt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604489711, "node_id": "MDU6TGFiZWw2MDQ0ODk3MTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-NLL", "name": "A-NLL", "color": "f7e101", "default": false, "description": "Area: Non Lexical Lifetimes (NLL)"}, {"id": 867465703, "node_id": "MDU6TGFiZWw4Njc0NjU3MDM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-complete", "name": "NLL-complete", "color": "f799ea", "default": false, "description": "Working towards the \"valid code works\" goal"}, {"id": 1146616045, "node_id": "MDU6TGFiZWwxMTQ2NjE2MDQ1", "url": "https://api.github.com/repos/rust-lang/rust/labels/NLL-polonius", "name": "NLL-polonius", "color": "f799ea", "default": false, "description": "Issues related for using Polonius in the borrow checker"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-07T00:21:56Z", "updated_at": "2021-03-02T16:18:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been playing around with a singly-linked-list. It turns out that this method, which I had hoped might compile with help of non-lexical-lifetimes, does not compile:\r\n\r\n    struct Recursive {\r\n        child: Option<Box<Recursive>>\r\n    }\r\n    \r\n    impl Recursive {\r\n        fn mut_back(&mut self) -> &mut Self {\r\n            let mut node = self;\r\n            while let Some(child) = node.child.as_mut() {\r\n                node = child\r\n            }\r\n            node\r\n        }\r\n    }\r\n\r\nThe error is stating that the borrow for `node.child` overlaps with the returned borrow of `node`, as seen below:\r\n\r\n    error[E0499]: cannot borrow `*node` as mutable more than once at a time\r\n      --> src/lib.rs:11:13\r\n       |\r\n    6  |         fn mut_back(&mut self) -> &mut Self {\r\n       |                     - let's call the lifetime of this reference `'1`\r\n    7  |             let mut node = self;\r\n    8  |             while let Some(child) = node.child.as_mut() {\r\n       |                                     ---------- first mutable borrow occurs here\r\n    ...\r\n    11 |             node\r\n       |             ^^^^\r\n       |             |\r\n       |             second mutable borrow occurs here\r\n       |             returning this value requires that `node.child` is borrowed for `'1`\r\n\r\n    error: aborting due to previous error\r\n\r\nThere is a _very similar_ implementation of `mut_back()` which does compile:\r\n\r\n    impl Recursive {\r\n        fn mut_back_good(&mut self) -> &mut Self {\r\n            let mut node = self;\r\n            while let Some(ref mut child) = node.child {\r\n                node = child\r\n            }\r\n            node\r\n        }\r\n    }\r\n\r\nWhat I think is going on to cause the first implementation to fail is the call to `child.as_mut()`. Presumably due to autoref this creates a new unique borrow on `node.child`.\r\n\r\nIn the second case, I understand that the `ref mut` binding means we're _also_ creating a unique borrow on `node.child`. But in this case the borrow checker doesn't think this new unique borrow is a problem.\r\n\r\nIt seems to me that the compiler should be able to treat these two implementations equally?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/67957/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/67957/timeline", "performed_via_github_app": null, "state_reason": null}