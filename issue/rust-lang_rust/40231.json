{"url": "https://api.github.com/repos/rust-lang/rust/issues/40231", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/40231/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/40231/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/40231/events", "html_url": "https://github.com/rust-lang/rust/issues/40231", "id": 211674620, "node_id": "MDU6SXNzdWUyMTE2NzQ2MjA=", "number": 40231, "title": "ICE: Unexpected tail in unsized_info_ty with generics + traits", "user": {"login": "DanielKeep", "id": 77238, "node_id": "MDQ6VXNlcjc3MjM4", "avatar_url": "https://avatars.githubusercontent.com/u/77238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielKeep", "html_url": "https://github.com/DanielKeep", "followers_url": "https://api.github.com/users/DanielKeep/followers", "following_url": "https://api.github.com/users/DanielKeep/following{/other_user}", "gists_url": "https://api.github.com/users/DanielKeep/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielKeep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielKeep/subscriptions", "organizations_url": "https://api.github.com/users/DanielKeep/orgs", "repos_url": "https://api.github.com/users/DanielKeep/repos", "events_url": "https://api.github.com/users/DanielKeep/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielKeep/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-03-03T12:23:47Z", "updated_at": "2019-11-13T16:17:54Z", "closed_at": "2019-11-13T16:17:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Just to note: there appear to be *two* ICEs in here, but I don't know if they have the same underlying cause or not.  The code for the second is included, just commented-out.  The first error:\r\n\r\n```text\r\nerror: internal compiler error: src\\librustc_trans\\type_of.rs:157: Unexpected tail in unsized_info_ty: <Slice as Structure<Utf16>>::RefTarget for ty=SeStr<Slice, Utf16>\r\n...\r\nthread 'rustc' panicked at 'Box<Any>', src\\librustc_errors\\lib.rs:417\r\n```\r\n\r\nThe second error which appears if you manually instantiate the generics:\r\n\r\n```text\r\nerror: internal compiler error: unexpected panic\r\n...\r\nthread 'rustc' panicked at 'assertion failed: tail.has_param_types() || tail.has_self_ty()', src\\librustc\\ty\\layout.rs:1557\r\n```\r\n\r\nThe code:\r\n\r\n```rust\r\n/*!\r\nCompiled with `rustc run-aground.rs`.\r\n\r\nTested against:\r\n\r\n- 1.15.1 (021bd294c 2017-02-08)\r\n- 1.16.0-beta.3 (ecbf0b59e 2017-03-02)\r\n- 1.17.0-nightly (c0b7112ba 2017-03-02)\r\n*/\r\n#![allow(dead_code)]\r\n\r\n// Supporting types.  Alone, these don't appear to trigger either crash.\r\n\r\ntrait Structure<E>: Sized where E: Encoding {\r\n    type RefTarget: ?Sized;\r\n    type FfiPtr;\r\n    unsafe fn borrow_from_ffi_ptr<'a>(ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget>;\r\n}\r\n\r\nenum Slice {}\r\n\r\nimpl<E> Structure<E> for Slice where E: Encoding {\r\n    type RefTarget = [E::Unit];\r\n    type FfiPtr = (*const E::FfiUnit, usize);\r\n    unsafe fn borrow_from_ffi_ptr<'a>(_ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget> {\r\n        panic!()\r\n    }\r\n}\r\n\r\ntrait Encoding {\r\n    type Unit: Unit;\r\n    type FfiUnit;\r\n}\r\n\r\ntrait Unit {}\r\n\r\nenum Utf16 {}\r\n\r\nimpl Encoding for Utf16 {\r\n    type Unit = Utf16Unit;\r\n    type FfiUnit = u16;\r\n}\r\n\r\nstruct Utf16Unit(pub u16);\r\n\r\nimpl Unit for Utf16Unit {}\r\n\r\n// Replace `/*` with `//*` to uncomment a block.  `Error 1` shows the first\r\n// error.  `Error 2` shows a *different* error after I manually instantiate the\r\n// generics.  `Works` is what happens when I also replace some of the indirect\r\n// types with the types they should resolve to.\r\n\r\n// Error 1:\r\n//*\r\ntype SUtf16Str = SeStr<Slice, Utf16>;\r\n\r\nstruct SeStr<S, E> where S: Structure<E>, E: Encoding {\r\n    _data: S::RefTarget,\r\n}\r\n\r\nimpl<S, E> SeStr<S, E> where S: Structure<E>, E: Encoding {\r\n    pub unsafe fn from_ptr<'a>(_ptr: S::FfiPtr) -> Option<&'a Self> {\r\n        panic!()\r\n    }\r\n}\r\n// */\r\n\r\n// Error 2:\r\n/*\r\nstruct SUtf16Str {\r\n    _data: <Slice as Structure<Utf16>>::RefTarget,\r\n}\r\n\r\nimpl SUtf16Str {\r\n    pub unsafe fn from_ptr<'a>(ptr: <Slice as Structure<Utf16>>::FfiPtr)\r\n    -> Option<&'a Self> {\r\n        std::mem::transmute::<Option<&[<Utf16 as Encoding>::Unit]>, _>(\r\n            <Slice as Structure<Utf16>>::borrow_from_ffi_ptr(ptr))\r\n    }\r\n}\r\n// */\r\n\r\n// Works:\r\n/*\r\nstruct SUtf16Str {\r\n    _data: [<Utf16 as Encoding>::Unit],\r\n}\r\n\r\nimpl SUtf16Str {\r\n    pub unsafe fn from_ptr<'a>(\r\n        _ptr: (*const <Utf16 as Encoding>::FfiUnit, usize),\r\n    ) -> Option<&'a Self> {\r\n        panic!()\r\n    }\r\n}\r\n// */\r\n\r\nfn main() {\r\n    const TEXT_U16: &'static [u16] = &[];\r\n    let _ = unsafe { SUtf16Str::from_ptr((TEXT_U16.as_ptr(), TEXT_U16.len())).unwrap() };\r\n}\r\n```\r\n\r\nThis was mostly tested and reduced with:\r\n\r\n```text\r\nrustc 1.17.0-nightly (c0b7112ba 2017-03-02)\r\nbinary: rustc\r\ncommit-hash: c0b7112ba246d96f253ba845d91f36c0b7398e42\r\ncommit-date: 2017-03-02\r\nhost: i686-pc-windows-gnu\r\nrelease: 1.17.0-nightly\r\nLLVM version: 3.9\r\n```\r\n\r\nI won't bother to include the backtraces of the crashes, since it's just \"drop\" over and over again... I assume backtraces don't work, not that `drop` is somehow now the compiler's entry point and only function.\r\n\r\nThe closest issue I could find was #16812, which is marked closed.  Also, this doesn't involve an `enum`, and appears to depend on generics and a trait, since once you remove those, it goes away.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/40231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/40231/timeline", "performed_via_github_app": null, "state_reason": "completed"}