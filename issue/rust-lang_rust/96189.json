{"url": "https://api.github.com/repos/rust-lang/rust/issues/96189", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96189/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96189/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96189/events", "html_url": "https://github.com/rust-lang/rust/issues/96189", "id": 1207431265, "node_id": "I_kwDOAAsO6M5H9_Bh", "number": 96189, "title": "rustdoc-json-types: Inconsitant `#[derive(`s", "user": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 2682491374, "node_id": "MDU6TGFiZWwyNjgyNDkxMzc0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-rustdoc-json", "name": "A-rustdoc-json", "color": "f7e101", "default": false, "description": "Area: Rustdoc JSON backend"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-04-18T20:39:21Z", "updated_at": "2022-07-13T13:58:40Z", "closed_at": "2022-07-13T13:58:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "- `#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]`: Most types\r\n- `#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]`: `Id`\r\n- `#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]`: `Header` and `Abi`\r\n- `#[derive(Clone, Debug, Default, Serialize, Deserialize, PartialEq)]`: `Generics`\r\n\r\nThese are mostly a consequence of how they are used internaly (eg `Header` and `Abi` have `Hash` just because they used to be stored in a `HashSet`, `Generics` has `Default` because we use it once in `conversions`. We should aim to be more consistant and user facing in these traits.\r\n\r\n### What Traits I thing we should have and why?\r\n\r\n#### The super clear ones:\r\n\r\n- Everything obviously need's `Serialize` and `Deserialize`\r\n- `Clone` and `Debug` are both super usefull, and I think everything should also Implement these, although it isn't required [^clone]\r\n- `Id` needs `Hash`, `Eq` and `PartialEq` to be used as a `HashMap` key\r\n\r\n#### The medium ones\r\n\r\n- `PartialEq` for everything. It has clear semantics, and if we do #94140, it's essensial\r\n- `Eq` for everything. If we do `PartialEq`, we may as well do this,\r\n- `Hash` for almost everything. Currently `Item` and `Crate` cannot do this because they have `HashMap`s. If we realy wanted to, we could replace these with `BTreeMap`, but that would mean `Ord` for `Id` and possible slower perf. Theirs alot of things that make sense to put in a `HashMap`/`HashSet` key, and I thing just not having `Item` and `Crate` is fine. (I The fact that `Type` didn't implement `Hash` was the reason I looked into this).\r\n\r\n#### Things to drop\r\n\r\n- I don't thing anything should implement `Default`, as I don't think it's usefull or clear.\r\n\r\ncc @CraftSpider \r\n\r\n@rustbot modify labels: +T-rustdoc +A-rustdoc-json\r\n\r\n[^clone]: In practice, we depend on `Clone` for `Item`, which means basicly everything else needs to be `Clone`, but I'm almost certain this can be removed", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96189/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96189/timeline", "performed_via_github_app": null, "state_reason": "completed"}