{"url": "https://api.github.com/repos/rust-lang/rust/issues/111774", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/111774/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/111774/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/111774/events", "html_url": "https://github.com/rust-lang/rust/issues/111774", "id": 1717895727, "node_id": "I_kwDOAAsO6M5mZQIv", "number": 111774, "title": "Tracking Issue for `slice_first_last_chunk` feature (`slice::{split_,}{first,last}_chunk{,_mut}`)", "user": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2023-05-19T22:16:36Z", "updated_at": "2023-06-01T15:31:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Feature gate: `#![feature(slice_first_last_chunk)]`\r\n\r\nThis is a tracking issue for the `slice::{split_,}{first,last}_chunk{,_mut}` API.\r\n\r\n<!--\r\nInclude a short description of the feature.\r\n-->\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\nimpl [T] {\r\n    pub const fn first_chunk<const N: usize>(&self) -> Option<&[T; N]>;\r\n    pub const fn first_chunk_mut<const N: usize>(&mut self) -> Option<&mut [T; N]>;\r\n    pub const fn last_chunk<const N: usize>(&self) -> Option<&[T; N]>;\r\n    pub const fn last_chunk_mut<const N: usize>(&mut self) -> Option<&mut [T; N]>;\r\n    pub const fn split_first_chunk<const N: usize>(&self) -> Option<(&[T; N], &[T])>;\r\n    pub const fn split_first_chunk_mut<const N: usize>(&mut self) -> Option<(&mut [T; N], &mut [T])>;\r\n    pub const fn split_last_chunk<const N: usize>(&self) -> Option<(&[T; N], &[T])>;\r\n    pub const fn split_last_chunk_mut<const N: usize>(&mut self) -> Option<(&mut [T; N], &mut [T])>;\r\n}\r\n```\r\n\r\nNote that this mirrors the existing, already-stabilised API:\r\n\r\n```rust\r\nimpl [T] {\r\n    pub const fn first(&self) -> Option<&T>;\r\n    pub const fn first_mut(&mut self) -> Option<&mut T>;\r\n    pub const fn last(&self) -> Option<&T>;\r\n    pub const fn last_mut(&mut self) -> Option<&mut T>;\r\n    pub const fn split_first(&self) -> Option<(&T, &[T])>;\r\n    pub const fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])>;\r\n    pub const fn split_last(&self) -> Option<(&T, &[T])>;\r\n    pub const fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])>;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] API change proposal (ACP)[^1]: rust-lang/libs-team#69\r\n- [x] Implementation: #95198\r\n- [ ] Final comment period (FCP)[^2]\r\n- [ ] Stabilization PR\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilization PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- [ ] Is this the best order for the tuple in `split_last_chunk`?  Consistency with `split_last` would have it be `-> Option<(&[T;N], &[T])>` as was ACPed, but it might be confusing to have the two slice-like things in the opposite order from every other API I can think of that returns two subslices of the original.  In https://github.com/rust-lang/rust/pull/95198#discussion_r1204824761, @scottmcm expected `-> Option<(&[T;N], &[T])>` for `split_first_chunk`, but for it to be `-> Option<(&[T], &[T;N])>` in `split_last_chunk` so the tuple is \"in order\", in some sense.\r\n- ...\r\n\r\n[^1]: https://std-dev-guide.rust-lang.org/feature-lifecycle/api-change-proposals.html\r\n[^2]: https://std-dev-guide.rust-lang.org/feature-lifecycle/stabilization.html\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/111774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/111774/timeline", "performed_via_github_app": null, "state_reason": null}