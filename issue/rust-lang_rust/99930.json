{"url": "https://api.github.com/repos/rust-lang/rust/issues/99930", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99930/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99930/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99930/events", "html_url": "https://github.com/rust-lang/rust/issues/99930", "id": 1322821731, "node_id": "I_kwDOAAsO6M5O2Khj", "number": 99930, "title": "type parameter `impl Sized` (type parameter `impl Sized`)", "user": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-07-30T00:49:54Z", "updated_at": "2022-07-30T01:09:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code: [[playground]](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=3792730264eb43bb2ce3bd464a9fad6b)\r\n\r\n```rust\r\nfn test(mut a: impl Sized, b: impl Sized) {\r\n    a = b;\r\n}\r\n```\r\n\r\nThe current output is:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:2:9\r\n  |\r\n1 | fn test(mut a: impl Sized, b: impl Sized) {\r\n  |                ----------     ---------- found type parameter\r\n  |                |\r\n  |                expected type parameter\r\n  |                expected due to this parameter type\r\n2 |     a = b;\r\n  |         ^ expected type parameter `impl Sized`, found a different type parameter `impl Sized`\r\n  |\r\n  = note: expected type parameter `impl Sized` (type parameter `impl Sized`)\r\n             found type parameter `impl Sized` (type parameter `impl Sized`)\r\n  = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\r\n  = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n```\r\n\r\nNote specifically\r\n\r\n```\r\n  = note: expected type parameter `impl Sized` (type parameter `impl Sized`)\r\n             found type parameter `impl Sized` (type parameter `impl Sized`)\r\n```\r\n\r\nThe addition of the parenthetical here is not useful. Additionally, this note simply repeats the immediately previous inline span note, but less usefully, since the inline note specifies that the found type is a *different* type parameter.\r\n\r\n<details><summary>This error is much more useful for RPIT from distinct functions:</summary>\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:6:9\r\n  |\r\n1 | fn a() -> impl Sized {}\r\n  |           ---------- the expected opaque type\r\n2 | fn b() -> impl Sized {}\r\n  |           ---------- the found opaque type\r\n...\r\n5 |     let mut a = a();\r\n  |                 --- expected due to this value\r\n6 |     a = b();\r\n  |         ^^^ expected opaque type, found a different opaque type\r\n  |\r\n  = note: expected opaque type `impl Sized` (opaque type at <src/lib.rs:1:11>)\r\n             found opaque type `impl Sized` (opaque type at <src/lib.rs:2:11>)\r\n  = note: distinct uses of `impl Trait` result in different opaque types\r\n```\r\n\r\n----\r\n</details>\r\n\r\n<details><summary>Or even RPIT from different instantiations of the same function:</summary>\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:5:9\r\n  |\r\n1 | fn f<T>() -> impl Sized {}\r\n  |              ----------\r\n  |              |\r\n  |              the expected opaque type\r\n  |              the found opaque type\r\n...\r\n4 |     let mut a = f::<u8>();\r\n  |                 --------- expected due to this value\r\n5 |     a = f::<i8>();\r\n  |         ^^^^^^^^^ expected `u8`, found `i8`\r\n  |\r\n  = note: expected opaque type `impl Sized` (`u8`)\r\n             found opaque type `impl Sized` (`i8`)\r\n```\r\n\r\n-----\r\n</details>\r\n\r\nIdeally, we'd number the different APITs like:\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n --> src/lib.rs:2:9\r\n  |\r\n1 | fn test(mut a: impl Sized, b: impl Sized) {\r\n  |                ----------     ---------- found type parameter #1\r\n  |                |\r\n  |                expected type parameter #0\r\n  |                expected due to this parameter type\r\n2 |     a = b;\r\n  |         ^ expected type parameter `impl Sized`, found a different type parameter `impl Sized`\r\n  |\r\n  = note: expected type parameter `impl Sized` (type parameter #0)\r\n     found another type parameter `impl Sized` (type parameter #1)\r\n  = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\r\n  = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\r\n```\r\n\r\nbut the existing parentheticals are useless and even just dropping them would improve the error.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99930/reactions", "total_count": 4, "+1": 2, "-1": 0, "laugh": 2, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99930/timeline", "performed_via_github_app": null, "state_reason": null}