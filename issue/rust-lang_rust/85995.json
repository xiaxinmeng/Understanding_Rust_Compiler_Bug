{"url": "https://api.github.com/repos/rust-lang/rust/issues/85995", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85995/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85995/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85995/events", "html_url": "https://github.com/rust-lang/rust/issues/85995", "id": 911693893, "node_id": "MDU6SXNzdWU5MTE2OTM4OTM=", "number": 85995, "title": "trait extension trait methods not always visible in rustdoc output", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1118598314, "node_id": "MDU6TGFiZWwxMTE4NTk4MzE0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-synthetic-impls", "name": "A-synthetic-impls", "color": "f7e101", "default": false, "description": "Area: Synthetic impls, used by rustdoc to document auto traits and traits with blanket impls"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-06-04T17:06:15Z", "updated_at": "2021-06-04T18:10:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi.  I'm not sure if it's right to call this a bug, but it is a thing that can be quite confusing (and time-consuming to resolve via the docs rather than via an IDE) so I thought I would file an issue.\r\n\r\nThe problem can be seen in `gitlab::api`, for example.  Consider this quote from [the top level example](https://docs.rs/gitlab/0.1312.0/gitlab/api/index.html) on docs.rs:\r\n\r\n```rust\r\nlet client = Gitlab::new(\"gitlab.com\", \"private-token\").unwrap();\r\nlet endpoint = projects::Project::builder().project(\"gitlab-org/gitlab\").build().unwrap();\r\nlet project: Project = endpoint.query(&client).unwrap();\r\n```\r\n\r\nSuppose the user wants to know what this `query` method is.  They navigate to the [docs for `project::Project`](https://docs.rs/gitlab/0.1312.0/gitlab/api/projects/struct.Project.html) (since that is the return type from the builder), \r\n\r\nSearching that page does not reveal any methods called `query`.  Nor is looking at the trait impls in the left sidebar particularly illuminating.  Perhaps the programmer will spot that `endpoint` in the code is likely to be the `Endpoint`.  Clicking through to the `endpoint` trait gets a page which shows various methods.  No mention of a `query` method.\r\n\r\nIn fact, the `query` method is on [the extension trait `Query`](https://docs.rs/gitlab/0.1312.0/gitlab/api/trait.Query.html) which is relevant because:\r\n\r\n```\r\nimpl<E, T, C> Query<T, C> for E where\r\n    E: Endpoint,\r\n    T: DeserializeOwned,\r\n    C: Client, \r\n```\r\n\r\nIt would be really nice if it would be possible to use Rustdoc output to find all the methods for a struct.\r\n\r\nI tried to find an example in the standard library, but it wasn't so easy.  The standard libray doesn't have many of these trait extension traits.  The most obvious one is `ToString` which *does* seem to get its `to_string` method into all the places I looked.  Likewise `ToOwned` (which is impl for `T: Clone`).\r\n\r\nI confess I probably don't appreciate what the downsides would be of such a change, or how hard it might be, or, why the gitlab crate output is different from the stdlib output.  I hope this report is helpful anyway.  Thanks.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85995/timeline", "performed_via_github_app": null, "state_reason": null}