{"url": "https://api.github.com/repos/rust-lang/rust/issues/63023", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/63023/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/63023/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/63023/events", "html_url": "https://github.com/rust-lang/rust/issues/63023", "id": 473527632, "node_id": "MDU6SXNzdWU0NzM1Mjc2MzI=", "number": 63023, "title": "On i686 release builds, Valgrind reports depending on uninitialized values", "user": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 55301991, "node_id": "MDU6TGFiZWw1NTMwMTk5MQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86", "name": "O-x86", "color": "6e6ec0", "default": false, "description": "Target: x86 processors"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-26T20:41:21Z", "updated_at": "2019-07-28T17:35:20Z", "closed_at": "2019-07-28T17:35:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\nFor the following *main.rs*\r\n```rust\r\nfn main() {\r\n    let x = &[0i32];\r\n    let _ = (x.iter().map(|_| 1i32))\r\n        .chain(x.iter().map(|_| 1i32))\r\n        .chain(x.iter().map(|_| 1i32))\r\n        .chain(x.iter().map(|_| 1i32))\r\n        .chain(x.iter().map(|_| 1i32))\r\n        .collect::<Vec<i32>>();\r\n}\r\n```\r\n\r\nOn i686 GNU/Linux, for a release build, Valgrind reports \u201cConditional jump or move depends on uninitialised value(s)\u201d.\r\n\r\nI couldn\u2019t reproduce the issue on debug builds or on x86_64.\r\n\r\n```sh\r\n$ uname -a\r\nLinux Fedora-i686 4.17.3-200.fc28.i686 #1 SMP Tue Jun 26 14:19:07 UTC 2018 i686 i686 i386 GNU/Linux\r\n\r\n$ rustc -V --verbose\r\nrustc 1.36.0 (a53f9df32 2019-07-03)\r\nbinary: rustc\r\ncommit-hash: a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\r\ncommit-date: 2019-07-03\r\nhost: i686-unknown-linux-gnu\r\nrelease: 1.36.0\r\nLLVM version: 8.0\r\n\r\n$ cargo clean\r\n\r\n$ cargo run --release\r\n   Compiling try v0.1.0 (/home/user/try)\r\n    Finished release [optimized] target(s) in 0.67s\r\n     Running `target/release/try`\r\n\r\n$ valgrind target/release/try\r\n==20136== Memcheck, a memory error detector\r\n==20136== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==20136== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info\r\n==20136== Command: target/release/try\r\n==20136== \r\n==20136== Conditional jump or move depends on uninitialised value(s)\r\n==20136==    at 0x10A608: <alloc::vec::Vec<T> as alloc::vec::SpecExtend<T,I>>::from_iter (in /home/user/try/target/release/try)\r\n==20136==    by 0x109FF0: try::main (in /home/user/try/target/release/try)\r\n==20136==    by 0x10A075: std::rt::lang_start::{{closure}} (in /home/user/try/target/release/try)\r\n==20136==    by 0x110515: {{closure}} (rt.rs:49)\r\n==20136==    by 0x110515: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:136)\r\n==20136==    by 0x11243E: {{closure}} (rt.rs:49)\r\n==20136==    by 0x11243E: std::panicking::try::do_call (panicking.rs:293)\r\n==20136==    by 0x114087: __rust_maybe_catch_panic (lib.rs:85)\r\n==20136==    by 0x112EC5: try<i32,closure> (panicking.rs:272)\r\n==20136==    by 0x112EC5: catch_unwind<closure,i32> (panic.rs:394)\r\n==20136==    by 0x112EC5: std::rt::lang_start_internal (rt.rs:48)\r\n==20136==    by 0x10A050: main (in /home/user/try/target/release/try)\r\n==20136== \r\n==20136== Conditional jump or move depends on uninitialised value(s)\r\n==20136==    at 0x10AD03: <alloc::vec::Vec<T> as alloc::vec::SpecExtend<T,I>>::from_iter (in /home/user/try/target/release/try)\r\n==20136==    by 0x109FF0: try::main (in /home/user/try/target/release/try)\r\n==20136==    by 0x10A075: std::rt::lang_start::{{closure}} (in /home/user/try/target/release/try)\r\n==20136==    by 0x110515: {{closure}} (rt.rs:49)\r\n==20136==    by 0x110515: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:136)\r\n==20136==    by 0x11243E: {{closure}} (rt.rs:49)\r\n==20136==    by 0x11243E: std::panicking::try::do_call (panicking.rs:293)\r\n==20136==    by 0x114087: __rust_maybe_catch_panic (lib.rs:85)\r\n==20136==    by 0x112EC5: try<i32,closure> (panicking.rs:272)\r\n==20136==    by 0x112EC5: catch_unwind<closure,i32> (panic.rs:394)\r\n==20136==    by 0x112EC5: std::rt::lang_start_internal (rt.rs:48)\r\n==20136==    by 0x10A050: main (in /home/user/try/target/release/try)\r\n==20136== \r\n==20136== Conditional jump or move depends on uninitialised value(s)\r\n==20136==    at 0x10AD22: <alloc::vec::Vec<T> as alloc::vec::SpecExtend<T,I>>::from_iter (in /home/user/try/target/release/try)\r\n==20136==    by 0x109FF0: try::main (in /home/user/try/target/release/try)\r\n==20136==    by 0x10A075: std::rt::lang_start::{{closure}} (in /home/user/try/target/release/try)\r\n==20136==    by 0x110515: {{closure}} (rt.rs:49)\r\n==20136==    by 0x110515: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:136)\r\n==20136==    by 0x11243E: {{closure}} (rt.rs:49)\r\n==20136==    by 0x11243E: std::panicking::try::do_call (panicking.rs:293)\r\n==20136==    by 0x114087: __rust_maybe_catch_panic (lib.rs:85)\r\n==20136==    by 0x112EC5: try<i32,closure> (panicking.rs:272)\r\n==20136==    by 0x112EC5: catch_unwind<closure,i32> (panic.rs:394)\r\n==20136==    by 0x112EC5: std::rt::lang_start_internal (rt.rs:48)\r\n==20136==    by 0x10A050: main (in /home/user/try/target/release/try)\r\n==20136== \r\n==20136== Conditional jump or move depends on uninitialised value(s)\r\n==20136==    at 0x10AD2C: <alloc::vec::Vec<T> as alloc::vec::SpecExtend<T,I>>::from_iter (in /home/user/try/target/release/try)\r\n==20136==    by 0x109FF0: try::main (in /home/user/try/target/release/try)\r\n==20136==    by 0x10A075: std::rt::lang_start::{{closure}} (in /home/user/try/target/release/try)\r\n==20136==    by 0x110515: {{closure}} (rt.rs:49)\r\n==20136==    by 0x110515: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:136)\r\n==20136==    by 0x11243E: {{closure}} (rt.rs:49)\r\n==20136==    by 0x11243E: std::panicking::try::do_call (panicking.rs:293)\r\n==20136==    by 0x114087: __rust_maybe_catch_panic (lib.rs:85)\r\n==20136==    by 0x112EC5: try<i32,closure> (panicking.rs:272)\r\n==20136==    by 0x112EC5: catch_unwind<closure,i32> (panic.rs:394)\r\n==20136==    by 0x112EC5: std::rt::lang_start_internal (rt.rs:48)\r\n==20136==    by 0x10A050: main (in /home/user/try/target/release/try)\r\n==20136== \r\n==20136== Conditional jump or move depends on uninitialised value(s)\r\n==20136==    at 0x111D1F: alloc (alloc.rs:9)\r\n==20136==    by 0x111D1F: __rdl_alloc (alloc.rs:239)\r\n==20136==    by 0x10AD3C: <alloc::vec::Vec<T> as alloc::vec::SpecExtend<T,I>>::from_iter (in /home/user/try/target/release/try)\r\n==20136==    by 0x109FF0: try::main (in /home/user/try/target/release/try)\r\n==20136==    by 0x10A075: std::rt::lang_start::{{closure}} (in /home/user/try/target/release/try)\r\n==20136==    by 0x110515: {{closure}} (rt.rs:49)\r\n==20136==    by 0x110515: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:136)\r\n==20136==    by 0x11243E: {{closure}} (rt.rs:49)\r\n==20136==    by 0x11243E: std::panicking::try::do_call (panicking.rs:293)\r\n==20136==    by 0x114087: __rust_maybe_catch_panic (lib.rs:85)\r\n==20136==    by 0x112EC5: try<i32,closure> (panicking.rs:272)\r\n==20136==    by 0x112EC5: catch_unwind<closure,i32> (panic.rs:394)\r\n==20136==    by 0x112EC5: std::rt::lang_start_internal (rt.rs:48)\r\n==20136==    by 0x10A050: main (in /home/user/try/target/release/try)\r\n==20136== \r\n==20136== Conditional jump or move depends on uninitialised value(s)\r\n==20136==    at 0x483147B: malloc (vg_replace_malloc.c:309)\r\n==20136==    by 0x111D29: alloc (alloc.rs:10)\r\n==20136==    by 0x111D29: __rdl_alloc (alloc.rs:239)\r\n==20136==    by 0x10AD3C: <alloc::vec::Vec<T> as alloc::vec::SpecExtend<T,I>>::from_iter (in /home/user/try/target/release/try)\r\n==20136==    by 0x109FF0: try::main (in /home/user/try/target/release/try)\r\n==20136==    by 0x10A075: std::rt::lang_start::{{closure}} (in /home/user/try/target/release/try)\r\n==20136==    by 0x110515: {{closure}} (rt.rs:49)\r\n==20136==    by 0x110515: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:136)\r\n==20136==    by 0x11243E: {{closure}} (rt.rs:49)\r\n==20136==    by 0x11243E: std::panicking::try::do_call (panicking.rs:293)\r\n==20136==    by 0x114087: __rust_maybe_catch_panic (lib.rs:85)\r\n==20136==    by 0x112EC5: try<i32,closure> (panicking.rs:272)\r\n==20136==    by 0x112EC5: catch_unwind<closure,i32> (panic.rs:394)\r\n==20136==    by 0x112EC5: std::rt::lang_start_internal (rt.rs:48)\r\n==20136==    by 0x10A050: main (in /home/user/try/target/release/try)\r\n==20136== \r\n==20136== Conditional jump or move depends on uninitialised value(s)\r\n==20136==    at 0x109FFA: try::main (in /home/user/try/target/release/try)\r\n==20136==    by 0x10A075: std::rt::lang_start::{{closure}} (in /home/user/try/target/release/try)\r\n==20136==    by 0x110515: {{closure}} (rt.rs:49)\r\n==20136==    by 0x110515: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:136)\r\n==20136==    by 0x11243E: {{closure}} (rt.rs:49)\r\n==20136==    by 0x11243E: std::panicking::try::do_call (panicking.rs:293)\r\n==20136==    by 0x114087: __rust_maybe_catch_panic (lib.rs:85)\r\n==20136==    by 0x112EC5: try<i32,closure> (panicking.rs:272)\r\n==20136==    by 0x112EC5: catch_unwind<closure,i32> (panic.rs:394)\r\n==20136==    by 0x112EC5: std::rt::lang_start_internal (rt.rs:48)\r\n==20136==    by 0x10A050: main (in /home/user/try/target/release/try)\r\n==20136== \r\n==20136== \r\n==20136== HEAP SUMMARY:\r\n==20136==     in use at exit: 0 bytes in 0 blocks\r\n==20136==   total heap usage: 11 allocs, 11 frees, 1,681 bytes allocated\r\n==20136== \r\n==20136== All heap blocks were freed -- no leaks are possible\r\n==20136== \r\n==20136== For counts of detected and suppressed errors, rerun with: -v\r\n==20136== Use --track-origins=yes to see where uninitialised values come from\r\n==20136== ERROR SUMMARY: 7 errors from 7 contexts (suppressed: 0 from 0)\r\n```\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/63023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/63023/timeline", "performed_via_github_app": null, "state_reason": "completed"}