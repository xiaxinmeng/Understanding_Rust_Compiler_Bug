{"url": "https://api.github.com/repos/rust-lang/rust/issues/73682", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73682/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73682/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73682/events", "html_url": "https://github.com/rust-lang/rust/issues/73682", "id": 644366610, "node_id": "MDU6SXNzdWU2NDQzNjY2MTA=", "number": 73682, "title": "Clarify documentation of traits with behavioral contracts (PartialOrd etc.)", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-24T06:52:21Z", "updated_at": "2021-06-21T08:49:58Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "@Qwaz points out that\r\n\r\n> Rust's Deref documentation says that this trait should never fail. Similarly, documentation of ExactSizeIterator, PartialOrd, and Hash also describe the behavior of implementations with enforcing words such as must and never.\r\n\r\nHowever, all of these are safe traits, so unsafe code *must not* rely on such properties. If it does, we have a soundness bug.\r\n\r\nI don't think Rust has RFC-style standardization of must/should/etc (maybe it should^^), but at least we should clarify these docs here I feel. Also given that safe code can break these promises, I wonder if \"must\" is appropriate. Maybe a better wording would be something like\r\n\r\n> implementations *should* do X (but since safe code can easily violate this property, users of this trait *must not* rely on implementations being well-behaved)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73682/timeline", "performed_via_github_app": null, "state_reason": null}