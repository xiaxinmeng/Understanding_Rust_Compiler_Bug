{"url": "https://api.github.com/repos/rust-lang/rust/issues/38913", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38913/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38913/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38913/events", "html_url": "https://github.com/rust-lang/rust/issues/38913", "id": 199396948, "node_id": "MDU6SXNzdWUxOTkzOTY5NDg=", "number": 38913, "title": "Tracking issue for MIR-only RLIBs", "user": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 36, "created_at": "2017-01-08T01:48:28Z", "updated_at": "2022-03-18T14:19:52Z", "closed_at": "2022-03-18T14:19:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There's been some talk about switching RLIBs to \"MIR-only\", that is, make RLIBs contain only the MIR representation of a program and not the LLVM IR and machine code as they do now. This issue will try to collect some advantages, disadvantages, and other concerns such an approach would entail:\r\n\r\n## Advantages\r\n- Less code duplication, which has four benefits:\r\n  - RLIBs would be smaller because they would not contain LLVM IR and machine code anymore.\r\n  - RLIBs and leaf crates would be smaller because, at the moment, instantiations of generic functions show up multiple times in the object code and LLVM IR.\r\n  - RLIBs and leaf crates would be smaller because the compiler would be able instantiate monomorphic functions strictly on demand, as @japaric points out.\r\n  - Possibly faster whole-project compiles, since generic instances are never compiled multiple times (although see \"Disadvantages\")\r\n - RLIBs would compile faster because the trans and LLVM passes would always be skipped (much like when compiling with `-C metadata`).\r\n - At the moment `libstd` is compiled with `-Cdebuginfo=1`, which is good in general but as a side-effect increases the size of Rust binaries, even if they are built without debuginfo (because the debuginfo from `libstd` gets statically linked into the binaries). This problem would not exist with MIR-only rlibs.\r\n - In the past we've had problems with WeakODR linkage and COMDAT sections on MinGW. WeakODR linkage is one way to deal with duplicate generic instances and avoiding those would also remove any reason to use WeakODR.\r\n - We would always get LTO-grade compiler optimizations since all code is available at codegen time.\r\n - Some targets, like NVPTX, don't seem to support regular linking (see #38787). Only generating object code in leaf crates would solve this problem.\r\n - There seems be some indication that MIR-only RLIBs would help with making the Rust compiler more backend agnostic (see WASM-related issue #38804).\r\n - Generating LLVM IR only in leaf crates would make it easier to add comprehensive LLVM-based instrumentation like LeakSanitizer without recompiling `libstd` (see #38699), as @japaric points out.\r\n - All Rust code (even that from `libstd`) can be compiled with `-C target-cpu=native`, potentially resulting in better code, as @japaric points out.\r\n - The build process of multi-crate project would gain more parallelism, since downstream crates don't need to wait for upstream crate's codegen, even though they could already compile up until the linking phase, as @est31 points out.\r\n\r\n## Disadvantages\r\n- The leaf crates (executables, staticlibs, dylibs, cdylibs) would take more time to compile because \r\n   1. the machine code of monomorphic functions from upstream crates would not be \"cached\" anymore, and\r\n   2. since LLVM sees more code at once, some super-linear optimizations would take dis-proportionally more time (like when one compiles with LTO now)\r\n- People might rely on `pub #[no_mangle]` items being exported from RLIBs and link against them directly. This would not be possible anymore, as @nagisa points out.\r\n\r\n## Non-Advantages\r\n- MIR-only libs would not be platform independent. One could think that that should be the case but because of `cfg` switches, MIR is not platform independent either.\r\n\r\n## Mitigation strategies for disadvantages:\r\n1. The problem of caching machine code would be solved in a generalized form by incremental compilation. One has to keep in mind though that incremental compilation will produce less performant code because it prevents many opportunities for inlining.\r\n2. We could provide an additional, more coarse-grained codegen unit partitioning scheme for incremental compilation (e.g. one CGU per crate) for better runtime performance at the cost of longer compile times.\r\n3. The amount of code LLVM sees at once can easily be controlled via `-C codegen-units` already, which provides a means of reducing super-linear optimizations.\r\n\r\n## Open Questions\r\n- I think we support \"bundling\" native libraries into RLIBs. We might still need to keep supporting this, even if we don't store machine code originating from Rust?\r\n\r\nPlease help collect more data on the viability of MIR-only RLIBs.\r\n\r\ncc @rust-lang/core @rust-lang/compiler @rust-lang/tools @rkruppe ", "closed_by": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38913/reactions", "total_count": 40, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 35, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38913/timeline", "performed_via_github_app": null, "state_reason": "completed"}