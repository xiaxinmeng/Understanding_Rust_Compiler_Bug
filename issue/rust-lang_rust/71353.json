{"url": "https://api.github.com/repos/rust-lang/rust/issues/71353", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71353/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71353/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71353/events", "html_url": "https://github.com/rust-lang/rust/issues/71353", "id": 603220404, "node_id": "MDU6SXNzdWU2MDMyMjA0MDQ=", "number": 71353, "title": "Type validation mistreats layout errors", "user": {"login": "Michael-F-Bryan", "id": 17380079, "node_id": "MDQ6VXNlcjE3MzgwMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/17380079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Michael-F-Bryan", "html_url": "https://github.com/Michael-F-Bryan", "followers_url": "https://api.github.com/users/Michael-F-Bryan/followers", "following_url": "https://api.github.com/users/Michael-F-Bryan/following{/other_user}", "gists_url": "https://api.github.com/users/Michael-F-Bryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Michael-F-Bryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Michael-F-Bryan/subscriptions", "organizations_url": "https://api.github.com/users/Michael-F-Bryan/orgs", "repos_url": "https://api.github.com/users/Michael-F-Bryan/repos", "events_url": "https://api.github.com/users/Michael-F-Bryan/events{/privacy}", "received_events_url": "https://api.github.com/users/Michael-F-Bryan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "closed", "locked": false, "assignee": {"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rustbot", "id": 47979223, "node_id": "MDQ6VXNlcjQ3OTc5MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47979223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rustbot", "html_url": "https://github.com/rustbot", "followers_url": "https://api.github.com/users/rustbot/followers", "following_url": "https://api.github.com/users/rustbot/following{/other_user}", "gists_url": "https://api.github.com/users/rustbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rustbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rustbot/subscriptions", "organizations_url": "https://api.github.com/users/rustbot/orgs", "repos_url": "https://api.github.com/users/rustbot/repos", "events_url": "https://api.github.com/users/rustbot/events{/privacy}", "received_events_url": "https://api.github.com/users/rustbot/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 30, "created_at": "2020-04-20T13:01:20Z", "updated_at": "2020-05-07T00:03:12Z", "closed_at": "2020-05-07T00:03:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "The original problem got fixed by avoiding the broken code paths; this issue now tracks [fixing those code paths](https://github.com/rust-lang/rust/issues/71353#issuecomment-617901923).\r\n\r\n### Original issue\r\n\r\nIn [the `ffi_helpers` crate](https://github.com/Michael-F-Bryan/ffi_helpers) we have a [`Nullable`](https://docs.rs/ffi_helpers/0.2.0/ffi_helpers/trait.Nullable.html) trait which gives you a generic way to do null pointer checks.\r\n\r\n```rust\r\npub trait Nullable {\r\n    const NULL: Self;\r\n\r\n    fn is_null(&self) -> bool;\r\n}\r\n```\r\n\r\nA user recently reported that the crate no longer compiles on `nightly` (https://github.com/Michael-F-Bryan/ffi_helpers/issues/2) because type validation detects that `std::ptr::null()` and `std::ptr::null_mut()` create uninitialized raw pointers.\r\n\r\n```\r\n  Compiling playground v0.0.1 (/playground)\r\nerror[E0080]: it is undefined behavior to use this value\r\n  --> src/lib.rs:17:5\r\n   |\r\n17 |     const NULL: Self = std::ptr::null_mut();\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized raw pointer\r\n   |\r\n   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0080`.\r\nerror: could not compile `playground`.\r\n```\r\n\r\nI can reproduce this [on the playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=6d119e3b2cdbaa82880a469401d73800) with the latest nightly, `1.44.0-nightly (2020-04-19 dbf8b6bf116c7bece298)`.\r\n\r\nIs the use shown in that playground example (`*self == Self::NULL` on a `*mut T`) actually UB?\r\n\r\nAlso, I noticed that calling the `is_null()` method defined on a raw pointer with `<*const T>::is_null(*self)` *doesn't* trigger this error, implying that the problem isn't with declaring a constant that contains a null pointer (`const NULL: Self = std::ptr::null_mut()`), but the fact that we're using it for a comparison. Was this intended, or is it just an oversight in the error detection code?\r\n\r\n<details>\r\n<summary>Full example with output</summary>\r\n\r\n```rust\r\npub trait Nullable {\r\n    const NULL: Self;\r\n\r\n    fn is_null(&self) -> bool;\r\n}\r\n\r\nimpl<T> Nullable for *const T {\r\n    const NULL: Self = std::ptr::null();\r\n\r\n    #[inline]\r\n    fn is_null(&self) -> bool {\r\n        <*const T>::is_null(*self)\r\n    }\r\n}\r\n\r\nimpl<T> Nullable for *mut T {\r\n    const NULL: Self = std::ptr::null_mut();\r\n\r\n    #[inline]\r\n    fn is_null(&self) -> bool {\r\n        *self == Self::NULL\r\n    }\r\n}\r\n```\r\n\r\n```\r\nCompiling playground v0.0.1 (/playground)\r\nerror[E0080]: it is undefined behavior to use this value\r\n  --> src/lib.rs:17:5\r\n   |\r\n17 |     const NULL: Self = std::ptr::null_mut();\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized raw pointer\r\n   |\r\n   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0080`.\r\nerror: could not compile `playground`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n</details>\r\n\r\nCC: @RalfJung because it looks like they were the last person to touch that error message (9ee4d1aadc7f4151193a7f53d1fcbb4fddf40ece).\r\n\r\n<!-- TRIAGEBOT_START -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_START -->\r\nThis issue has been assigned to @jumbatm via [this comment](https://github.com/rust-lang/rust/issues/71353#issuecomment-617128281).\r\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"jumbatm\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\r\n\r\n<!-- TRIAGEBOT_ASSIGN_END -->\r\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71353/timeline", "performed_via_github_app": null, "state_reason": "completed"}