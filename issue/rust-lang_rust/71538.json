{"url": "https://api.github.com/repos/rust-lang/rust/issues/71538", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71538/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71538/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71538/events", "html_url": "https://github.com/rust-lang/rust/issues/71538", "id": 606632592, "node_id": "MDU6SXNzdWU2MDY2MzI1OTI=", "number": 71538, "title": "Unhelpful type error with PartialOrd ambiguity", "user": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}, {"id": 1624891239, "node_id": "MDU6TGFiZWwxNjI0ODkxMjM5", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-incorrect", "name": "D-incorrect", "color": "c9f7a3", "default": false, "description": "A diagnostic that is giving misleading or incorrect information"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-24T23:17:23Z", "updated_at": "2020-12-24T23:22:24Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In `num-bigint` master, we've implemented `PartialEq` and `PartialOrd` between the bigint types and the primitive integers. [I'm reconsidering this](https://github.com/rust-num/num-bigint/issues/150), because I've experienced a lot of type inference failures from afar, in modules that aren't using `num-bigint` at all. I'm not _too_ surprised by that, because it really does add ambiguity, but some of the errors are not helpful.\r\n\r\nHere's a reduced example: [playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=60e849d15d2a6573b505efc8b41cdd9f)\r\n\r\n```rust\r\nuse ndarray::{Array2, ShapeError};\r\n\r\nfn main() {\r\n    let iter = std::iter::once(42);\r\n    let array = square_from_iter(iter).unwrap();\r\n    assert!(array.nrows() < u8::MAX.into());\r\n}\r\n\r\nfn square_from_iter<A>(iter: impl Iterator<Item = A>) -> Result<Array2<A>, ShapeError> {\r\n    let v: Vec<A> = iter.collect();\r\n    let n = (v.len() as f64).sqrt() as usize;\r\n    Array2::from_shape_vec((n, n), v)\r\n}\r\n\r\n#[allow(unused)]\r\nmod break_inference {\r\n    use std::cmp::Ordering;\r\n    \r\n    struct Foo;\r\n    \r\n    impl PartialEq<Foo> for usize {\r\n        fn eq(&self, _: &Foo) -> bool {\r\n            false\r\n        }\r\n    }\r\n    \r\n    impl PartialOrd<Foo> for usize {\r\n        fn partial_cmp(&self, _: &Foo) -> Option<Ordering> {\r\n            None\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\nerror[E0283]: type annotations needed for `ndarray::ArrayBase<ndarray::OwnedRepr<i32>, ndarray::dimension::dim::Dim<[usize; 2]>>`\r\n --> src/main.rs:6:27\r\n  |\r\n5 |     let array = square_from_iter(iter).unwrap();\r\n  |         ----- consider giving `array` the explicit type `ndarray::ArrayBase<ndarray::OwnedRepr<i32>, ndarray::dimension::dim::Dim<[usize; 2]>>`, where the type parameter `usize` is specified\r\n6 |     assert!(array.nrows() < u8::MAX.into());\r\n  |                           ^ cannot infer type for type `usize`\r\n  |\r\n  = note: cannot satisfy `usize: std::cmp::PartialOrd<_>`\r\n```\r\n\r\nAFAICS the \"needed for _\" and the suggested \"explicit type\" are identical, and it doesn't change anything if I add that type on `array` anyway (using `ndarray::Dim` instead of that private path). Besides, [`nrows()`](https://docs.rs/ndarray/0.13.1/ndarray/struct.ArrayBase.html#method.nrows) always returns `usize`, and \"cannot infer type for type `usize`\" is nonsense.\r\n\r\nThe last note about `PartialOrd<_>` is the only part that really seems relevant, although I think it could also mention that `u8::MAX.into()` is ambiguous. In this example, `usize` implements `PartialOrd<usize>` and `PartialOrd<Foo>`, and `u8` implements lots of `Into<{integer}>`, though _not_ `Into<Foo>`. The compiler could match up the only answer, `PartialOrd<usize>` and `Into<usize>`, but I guess it's not that aggressive.\r\n\r\nIn the full `num-bigint` case, we would have `u8: Into<BigInt> + Into<BigUint>` too, so then matching `PartialOrd` and `Into` really is ambiguous even if the compiler tried harder.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\n$ rustc +nightly -Vv\r\nrustc 1.44.0-nightly (14b15521c 2020-04-23)\r\nbinary: rustc\r\ncommit-hash: 14b15521c52549ebbb113173b4abecd124b5a823\r\ncommit-date: 2020-04-23\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.44.0-nightly\r\nLLVM version: 9.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71538/timeline", "performed_via_github_app": null, "state_reason": null}