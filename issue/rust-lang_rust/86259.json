{"url": "https://api.github.com/repos/rust-lang/rust/issues/86259", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/86259/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/86259/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/86259/events", "html_url": "https://github.com/rust-lang/rust/issues/86259", "id": 919720485, "node_id": "MDU6SXNzdWU5MTk3MjA0ODU=", "number": 86259, "title": "type aliases dont propagate implied `ConstEvaluatable` bounds of rhs", "user": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-06-13T05:24:24Z", "updated_at": "2022-06-24T14:04:52Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In an attempt to implement array default with const generics, I tried this code:\r\n\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=700737e7598eca3dc58921f4530627f5\r\n\r\nThe code seems overall ok, but the compilation failed. After some try, it seems i can workaround this by add another usage of the \"complex expression\", and this second code snippet compiles:\r\n\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d3b02c12306c7e0754020951c84f0cbe\r\n\r\nHowever when the usage code is generic, it still doesn't work:\r\n\r\nhttps://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=d3b02c12306c7e0754020951c84f0cbe\r\n\r\nWith this third piece of code, I did some debugging, and it seems in the `is_const_evaluatable<'cx, 'tcx>` function, there's a call like this:\r\n````text\r\n[compiler\\rustc_trait_selection\\src\\traits\\const_evaluatable.rs:44] &def = WithOptConstParam {\r\n    did: DefId(0:46 ~ array_default_extern_generic_doesnt_work[317d]::{impl#0}::{constant#0}),\r\n    const_param_did: None,\r\n}\r\n[compiler\\rustc_trait_selection\\src\\traits\\const_evaluatable.rs:45] &substs = [\r\n    R,\r\n    Const {\r\n        ty: usize,\r\n        val: Unevaluated(\r\n            Unevaluated {\r\n                def: WithOptConstParam {\r\n                    did: DefId(0:79 ~ array_default_extern_generic_doesnt_work[317d]::impl_test::UnwindContext::stack_storage::{constant#0}),\r\n                    const_param_did: None,\r\n                },\r\n                substs: [\r\n                    R,\r\n                ],\r\n                promoted: None,\r\n            },\r\n        ),\r\n    },\r\n]\r\n[compiler\\rustc_trait_selection\\src\\traits\\const_evaluatable.rs:46] param_env.caller_bounds() = [\r\n    Binder(TraitPredicate(<R as std::default::Default>), []),\r\n    Binder(TraitPredicate(<R as std::marker::Sized>), []),\r\n]\r\n````\r\nAnd there's no corresponding `ConstEvaluatable` bound in it. So it seems the evaluatable analysis is using a wrong or unpopulated \"environment bounds\"?\r\n\r\nThis and the `const_evaluatable_checked` feature itself is the single blocker for array defaults implementation using const generics. So it would be nice if this can get fixed.\r\n\r\ncc @rust-lang/wg-const-eval ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/86259/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/86259/timeline", "performed_via_github_app": null, "state_reason": null}