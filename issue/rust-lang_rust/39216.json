{"url": "https://api.github.com/repos/rust-lang/rust/issues/39216", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/39216/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/39216/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/39216/events", "html_url": "https://github.com/rust-lang/rust/issues/39216", "id": 202297652, "node_id": "MDU6SXNzdWUyMDIyOTc2NTI=", "number": 39216, "title": "Tracking issue for `resolve_trait_on_defaulted_unit` compatibility lint", "user": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 630636017, "node_id": "MDU6TGFiZWw2MzA2MzYwMTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-future-compatibility", "name": "C-future-compatibility", "color": "f5f1fd", "default": false, "description": "Category: future compatibility lints"}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 3537211959, "node_id": "LA_kwDOAAsO6M7S1ZI3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-tracking-impl-incomplete", "name": "S-tracking-impl-incomplete", "color": "4682b4", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-01-21T06:41:38Z", "updated_at": "2022-03-18T14:23:11Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is the **summary issue** for the `resolve_trait_on_defaulted_unit` future-compatibility warning and other related errors. The goal of this page is describe why this change was made and how you can fix code that is affected by it. It also provides a place to ask questions or register a complaint if you feel the change should not be made. For more information on the policy around future-compatibility warnings, see our breaking change policy guidelines.\r\n\r\n### What is this lint about\r\n\r\nOrdinarily, when a user doesn't specify the type of an expression and the type cannot be inferred, rust will raise an error. For example, consider this code:\r\n\r\n    let _ = Default::default();\r\n\r\nBecause we haven't specified the type of `_` the compiler doesn't know what type of value the user is asking for a default of. And so we get this error:\r\n\r\n```rust\r\nerror[E0282]: unable to infer enough type information about `Self`\r\n --> example.rs:2:13\r\n  |\r\n2 |     let _ = Default::default();\r\n  |             ^^^^^^^^^^^^^^^^ cannot infer type for `Self`\r\n  |\r\n  = note: type annotations or generic parameter binding required\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nHowever, due to an unfortunate quirk in Rust's type inference algorithms it is sometimes possible to sneak situations like this past the compiler. In these cases, the unspecified type is defaulted to `()`. For an example of this, you can try deserializing an unspecified type with serde:\r\n\r\n    let _ = Deserialize::deserialize(foo)?;\r\n\r\nIn this case, the code will compile and will deserialize a value of type `()`.\r\n\r\nThis behaviour is set to change with the eventual rolling-out of `feature(never_type)`. Where defaulting is still used types will instead default to `!`. In the best case, code that currently relies on unspecified types defaulting to `()` will stop compiling. In the worst case, code will continue to compile but may execute differently, as in the above example where a `!` will be deserialised instead.\r\n\r\nThe `resolve_trait_on_defaulted_unit` warning is raised wherever the compiler thinks your program's behaviour may depend on the current defaulting rules.\r\n\r\n### How to fix this warning/error\r\n\r\nBe specific about what type you're using. In the serde example above this could be done by simply adding a type annotation:\r\n\r\n    let _: () = Deserialize::deserialize(foo)?;\r\n\r\n### Current status\r\n- [x] https://github.com/rust-lang/rust/pull/39009 introduces the `resolve_trait_on_defaulted_unit` lint as warn-by-default\r\n- [x] https://github.com/rust-lang/rust/pull/42894 makes the `resolve_trait_on_defaulted_unit` lint deny-by-default\r\n- [ ] PR ? makes the `resolve_trait_on_defaulted_unit` lint a hard error", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/39216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/39216/timeline", "performed_via_github_app": null, "state_reason": null}