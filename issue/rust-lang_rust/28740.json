{"url": "https://api.github.com/repos/rust-lang/rust/issues/28740", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/28740/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/28740/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/28740/events", "html_url": "https://github.com/rust-lang/rust/issues/28740", "id": 108976063, "node_id": "MDU6SXNzdWUxMDg5NzYwNjM=", "number": 28740, "title": "does extern keyword actually affect a function's calling convention?", "user": {"login": "m4b", "id": 1920204, "node_id": "MDQ6VXNlcjE5MjAyMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1920204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m4b", "html_url": "https://github.com/m4b", "followers_url": "https://api.github.com/users/m4b/followers", "following_url": "https://api.github.com/users/m4b/following{/other_user}", "gists_url": "https://api.github.com/users/m4b/gists{/gist_id}", "starred_url": "https://api.github.com/users/m4b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m4b/subscriptions", "organizations_url": "https://api.github.com/users/m4b/orgs", "repos_url": "https://api.github.com/users/m4b/repos", "events_url": "https://api.github.com/users/m4b/events{/privacy}", "received_events_url": "https://api.github.com/users/m4b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-09-29T22:52:26Z", "updated_at": "2015-09-30T19:08:08Z", "closed_at": "2015-09-30T00:37:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "According to [the Book](https://doc.rust-lang.org/stable/book/rust-inside-other-languages.html#a-rust-library)\n\n> The pub means that this function should be callable from outside of this module, and the extern says that it should be able to be called from C. That\u2019s it! Not a whole lot of change.\n\nand from the [FFI chapter](https://doc.rust-lang.org/stable/book/ffi.html#introduction)\n\n> The extern block is a list of function signatures in a foreign library, in this case with the platform's C ABI.\n\nas well as [here](https://doc.rust-lang.org/stable/book/ffi.html#calling-rust-code-from-c):\n\n> The extern makes this function adhere to the C calling convention, as discussed above in \"Foreign Calling Conventions\".\n\nHowever, when I actually compile `pub extern` non-mangled rust functions on x86-64 systems, i.e.:\n\n``` rust\n#![crate_type = \"dylib\"]\n\n#[no_mangle]\npub extern fn beef_float (x: f64, y: f64) -> f64 {\n    x * y\n}\n\n#[no_mangle]\npub extern fn beef_maximum (x: u64, y: u64) -> u64 {\n    if x >= y {\n        x\n    } else {\n        y\n    }\n}\n\n#[no_mangle]\npub extern fn beef_stack (d: u64, e: u64, a: u64, d2: u64, b: u64, e2: u64, a2: u64, f: u64) -> u64 {\n    return 0xefbeadde + d + e + a + d2 + b + e2 + a2 + f;\n}\n\n#[no_mangle]\npub extern fn beef_pointer (p: &u64, x: u64) -> u64 {\n    return *p + x + 0xdeadbeef;\n}\n```\n\nwith something like `rustc -O -C prefer-dynamic`, I don't actually see any difference in generated libraries' ABI calling convention, i.e., it's still the standard [System V x86-64 calling conventions](https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI).\n\nE.g., with extern keyword:\n\n```\n(gdb) disass beef_stack\nDump of assembler code for function beef_stack:\n   0x0000000000000730 <+0>: lea    (%rdi,%rsi,1),%rsi\n   0x0000000000000734 <+4>: add    %rdx,%rsi\n   0x0000000000000737 <+7>: add    %rcx,%rsi\n   0x000000000000073a <+10>:    add    %r8,%rsi\n   0x000000000000073d <+13>:    add    %r9,%rsi\n   0x0000000000000740 <+16>:    add    0x8(%rsp),%rsi\n   0x0000000000000745 <+21>:    add    0x10(%rsp),%rsi\n   0x000000000000074a <+26>:    mov    $0xefbeadde,%eax\n   0x000000000000074f <+31>:    add    %rsi,%rax\n   0x0000000000000752 <+34>:    retq   \nEnd of assembler dump.\n(gdb) disass beef_float\nDump of assembler code for function beef_float:\n   0x0000000000000710 <+0>: mulsd  %xmm1,%xmm0\n   0x0000000000000714 <+4>: retq   \nEnd of assembler dump.\n(gdb) disass beef_maximum\nDump of assembler code for function beef_maximum:\n   0x0000000000000720 <+0>: cmp    %rsi,%rdi\n   0x0000000000000723 <+3>: cmovb  %rsi,%rdi\n   0x0000000000000727 <+7>: mov    %rdi,%rax\n   0x000000000000072a <+10>:    retq   \nEnd of assembler dump.\n(gdb) disass beef_pointer\nDump of assembler code for function beef_pointer:\n   0x00000000000007b0 <+0>: add    (%rdi),%rsi\n   0x00000000000007b3 <+3>: mov    $0xdeadbeef,%eax\n   0x00000000000007b8 <+8>: lea    (%rax,%rsi,1),%rax\n   0x00000000000007bc <+12>:    retq   \nEnd of assembler dump.\n```\n\nand without extern:\n\n```\n(gdb) disass beef_stack\nDump of assembler code for function beef_stack:\n   0x0000000000000770 <+0>: lea    (%rdi,%rsi,1),%rsi\n   0x0000000000000774 <+4>: add    %rdx,%rsi\n   0x0000000000000777 <+7>: add    %rcx,%rsi\n   0x000000000000077a <+10>:    add    %r8,%rsi\n   0x000000000000077d <+13>:    add    %r9,%rsi\n   0x0000000000000780 <+16>:    add    0x8(%rsp),%rsi\n   0x0000000000000785 <+21>:    add    0x10(%rsp),%rsi\n   0x000000000000078a <+26>:    mov    $0xefbeadde,%eax\n   0x000000000000078f <+31>:    add    %rsi,%rax\n   0x0000000000000792 <+34>:    retq   \nEnd of assembler dump.\n(gdb) disass beef_float\nDump of assembler code for function beef_float:\n   0x0000000000000750 <+0>: mulsd  %xmm1,%xmm0\n   0x0000000000000754 <+4>: retq   \nEnd of assembler dump.\n(gdb) disass beef_maximum\nDump of assembler code for function beef_maximum:\n   0x0000000000000760 <+0>: cmp    %rsi,%rdi\n   0x0000000000000763 <+3>: cmovb  %rsi,%rdi\n   0x0000000000000767 <+7>: mov    %rdi,%rax\n   0x000000000000076a <+10>:    retq\nEnd of assembler dump.\n(gdb) disass beef_pointer\nDump of assembler code for function beef_pointer:\n   0x00000000000007b0 <+0>: add    (%rdi),%rsi\n   0x00000000000007b3 <+3>: mov    $0xdeadbeef,%eax\n   0x00000000000007b8 <+8>: lea    (%rax,%rsi,1),%rax\n   0x00000000000007bc <+12>:    retq   \nEnd of assembler dump.\n```\n\nI.e., the functions produced are the same, _and_ the parameters are passed in the expected registers or on the stack, all according to the X86-64 System V calling conventions.\n\nSimilarly on OSX:\n\n```\n(lldb) disass -n beef_float\ngood.dylib`beef_float:\ngood.dylib[0xe40] <+0>:  cmpq   %gs:0x330, %rsp\ngood.dylib[0xe49] <+9>:  ja     0xe65                     ; <+37>\ngood.dylib[0xe4b] <+11>: movabsq $0x8, %r10\ngood.dylib[0xe55] <+21>: movabsq $0x0, %r11\ngood.dylib[0xe5f] <+31>: callq  0xf37                     ; __morestack\ngood.dylib[0xe64] <+36>: retq   \ngood.dylib[0xe65] <+37>: pushq  %rbp\ngood.dylib[0xe66] <+38>: movq   %rsp, %rbp\ngood.dylib[0xe69] <+41>: mulsd  %xmm1, %xmm0\ngood.dylib[0xe6d] <+45>: popq   %rbp\ngood.dylib[0xe6e] <+46>: retq   \ngood.dylib[0xe6f] <+47>: nop    \n\n(lldb) disass -n beef_float\nbad.dylib`beef_float:\nbad.dylib[0xd90] <+0>:  cmpq   %gs:0x330, %rsp\nbad.dylib[0xd99] <+9>:  ja     0xdb5                     ; <+37>\nbad.dylib[0xd9b] <+11>: movabsq $0x8, %r10\nbad.dylib[0xda5] <+21>: movabsq $0x0, %r11\nbad.dylib[0xdaf] <+31>: callq  0xe87                     ; __morestack\nbad.dylib[0xdb4] <+36>: retq   \nbad.dylib[0xdb5] <+37>: pushq  %rbp\nbad.dylib[0xdb6] <+38>: movq   %rsp, %rbp\nbad.dylib[0xdb9] <+41>: mulsd  %xmm1, %xmm0\nbad.dylib[0xdbd] <+45>: popq   %rbp\nbad.dylib[0xdbe] <+46>: retq   \nbad.dylib[0xdbf] <+47>: nop   \n```\n\n(although it's unclear to me why the optimization flag on OSX doesn't remove the unnecessary frame pointer calculations and book-keeping)\n\nSo I'm curious about:\n- what (if any) difference including/excluding the `extern` keyword on rust shared library function definitions is ideally supposed to cause.\n- what kind of functions might be subject to this change, if there is one\n- if it does nothing, why is it present/suggested?\n\nI imagine there is some case in which the `extern` keyword does something (in which case it would be nice if the documentation red flags these cases), or perhaps currently it _does_ do nothing, but in the future `extern` guarantees \"C ABI\" calling conventions (x86-64 System V ABI on Linux/OSX), whereas functions without `extern` present may or may not be free to use an entirely different calling convention?\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/28740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/28740/timeline", "performed_via_github_app": null, "state_reason": "completed"}