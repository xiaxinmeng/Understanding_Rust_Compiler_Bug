{"url": "https://api.github.com/repos/rust-lang/rust/issues/88290", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88290/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88290/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88290/events", "html_url": "https://github.com/rust-lang/rust/issues/88290", "id": 978158750, "node_id": "MDU6SXNzdWU5NzgxNTg3NTA=", "number": 88290, "title": "Transmute special-case doesn't take into consideration alignment or enum repr.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-08-24T14:24:36Z", "updated_at": "2023-04-09T04:24:18Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I was looking back on https://github.com/rust-lang/rust/issues/61956#issuecomment-505436119 and since the current implementation hasn't changed since, I decided to try to and see if I can create an example.\r\n\r\nAnd yes, [here is a playground example](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c73b8ce9f0bebd62b63082f97289aaea) showing *three* invalid `transmute`s, all stemming from different points in the code (two alignment-based and one regarding treating \"non-null-optimized\" `enum`s as newtypes).\r\n\r\n<hr/>\r\n\r\nWhat we special-case is a `transmute` from `Outer1(Pointer1(Inner1(T)))` to `Outer2(Pointer2(Inner2(T)))`, where:\r\n* `T` is a generic param (or an associated type of one)\r\n  * presumably `T: ?Sized`, because `T: Sized` would result in `Pointer(Inner(T))` having a known layout, even when the exact choice of `T` isn't known\r\n* `Inner{1,2}(T)` wrap `T` in any number of `struct`s, with any choice of prefix fields\r\n  * only the effect on `Pointer(Inner(T))` containing `T::Metadata` matters\r\n* `Outer{1,2}(X)` are newtypes\r\n  * that is, they only have an `X` field and optionally some ZST fields\r\n  * we also allow `Option`-like `enum`s here, if the `Pointer` type they wrap is non-null, but that shouldn't matter - it's effectively \"desugaring\" the `enum` optimization to a newtype\r\n    * however, it does matter whether the `enum` opted out of the optimization, which turns out we're not checking\r\n\r\nNow, I confused myself with alignment originally, but what's important to note is that even if a newtype of `X` contains higher alignment ZSTs *around* `X`, the only difference that will make is on the alignment (and size, through additional padding) of the *whole* newtype, *not* on the *position of `X` in the newtype*.\r\n\r\nBecause of that, `Outer1` and `Outer2` could have different alignments and that wouldn't change the fact that reading the pointer from one of them and writing it into the other would work, it's still at offset `0` and has the same size.\r\n\r\nBut that's not what we do, since `transmute` is not field-based, and if we copy the larger size, we're reading or writing more bytes than would be legal.\r\n\r\n<hr/>\r\n\r\nLooking at the LLVM IR of my example, `test_align` does look like it's copying `64` bytes, which should definitely be UB (but it might take some effort to cause a LLVM optimization to trigger).\r\n\r\nOTOH, `test_option_like` is even worse, since the pointer goes in the `#[repr(C)] enum` tag, and the value inside the `Some` is garbage, so [running it in release mode](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=5af1c5b27aacf2b1650022f23b6df0ee) crashes trying to print the resulting value.\r\n\r\n<hr/>\r\n\r\nWhat's a bit sad is I feel like I remember seeing an `assert!` for equal `transmute` sizes in codegen, which would catch such a situation and turn it into an ICE, but I'm guessing it got removed?\r\n\r\ncc @nagisa ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88290/timeline", "performed_via_github_app": null, "state_reason": null}