{"url": "https://api.github.com/repos/rust-lang/rust/issues/69763", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69763/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69763/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69763/events", "html_url": "https://github.com/rust-lang/rust/issues/69763", "id": 576793690, "node_id": "MDU6SXNzdWU1NzY3OTM2OTA=", "number": 69763, "title": "Layout and MIR field accesses are incoherent", "user": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-03-06T09:09:39Z", "updated_at": "2020-03-25T17:44:28Z", "closed_at": "2020-03-24T23:07:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I propose that we should have the following invariant: Whenever, anywhere in MIR, there is a [field projection](https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.ProjectionElem.html#variant.Field) with some index `i`, then `i` is actually a valid field index in the (statically known) layout of the type being projected into.\r\n\r\nRight now, [this is not the case](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6d0730b4f8fd170d74f5d2eb131e5e04). This code:\r\n```rust\r\npub enum Void {}\r\n\r\nenum UninhabitedUnivariant { _Variant(Void), }\r\n\r\nfn main() {\r\n    let _seed: UninhabitedUnivariant = None.unwrap();\r\n    match _seed {\r\n        UninhabitedUnivariant::_Variant(_x) => {}\r\n    }\r\n}\r\n```\r\ngenerates the following MIR:\r\n```\r\n    bb1: {\r\n        StorageDead(_2);                 // bb1[0]: scope 0 at src/main.rs:6:52: 6:53\r\n        StorageLive(_3);                 // bb1[1]: scope 1 at src/main.rs:8:41: 8:43\r\n        _3 = move ((_1 as _Variant).0: Void); // bb1[2]: scope 1 at src/main.rs:8:41: 8:43\r\n        StorageDead(_3);                 // bb1[3]: scope 1 at src/main.rs:9:5: 9:6\r\n        StorageDead(_1);                 // bb1[4]: scope 0 at src/main.rs:10:1: 10:2\r\n        return;                          // bb1[5]: scope 0 at src/main.rs:10:2: 10:2\r\n    }\r\n```\r\nbut the layout of `_Variant` is that of a union with 0 fields.\r\n\r\nA consequence of this incoherence is that all codegen backends and Miri (and possibly more MIR consumers) all need to be on their guard when considering field projections, always protecting against the case where the projection is ill-formed (usually that happens by special-casing uninhabited types before considering the projection).\r\n\r\nI think instead of putting that burden on every MIR consumer, we should fix either the layout or the MIR to not violate the invariant in the first place.\r\n\r\nCc @eddyb with whom I anyway recently talked about those odd `Union` layouts. Is there some fundamental issue with the invariant I am proposing? Also Cc @oli-obk @wesleywiser \r\n\r\nIf we decide to go with this, we should\r\n* [x] Revert https://github.com/rust-lang/rust/pull/69753\r\n* [x] Check for other cases in Miri/const-prop that just work around such broken MIR/layout\r\n* [x] Check for the corresponding cases in codegen and other MIR consumers -- mostly, add assertion [here](https://github.com/rust-lang/rust/blob/865b44a3e330f3ef8be0f6edf69896c9ed957ac0/src/librustc_target/abi/mod.rs#L663).", "closed_by": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69763/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69763/timeline", "performed_via_github_app": null, "state_reason": "completed"}