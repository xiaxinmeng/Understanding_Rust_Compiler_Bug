{"url": "https://api.github.com/repos/rust-lang/rust/issues/101817", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101817/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101817/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101817/events", "html_url": "https://github.com/rust-lang/rust/issues/101817", "id": 1373449803, "node_id": "I_kwDOAAsO6M5R3S5L", "number": 101817, "title": "Error::source and Error::cause do not expose immediate error in custom io::Error", "user": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1448485701, "node_id": "MDU6TGFiZWwxNDQ4NDg1NzAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-error-handling", "name": "A-error-handling", "color": "f7e101", "default": false, "description": "Area: Error handling"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2022-09-14T18:58:56Z", "updated_at": "2022-09-23T23:37:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=8652db49f5a01a73b64051a4aa9bc7d2)):\r\n\r\n```rust\r\nuse std::error::Error;\r\n\r\n#[derive(Debug, PartialEq, Eq)]\r\nstruct E;\r\n\r\nimpl std::fmt::Display for E {\r\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\r\n        write!(f, \"E\")\r\n    }\r\n}\r\n\r\nimpl Error for E {}\r\n\r\n#[test]\r\nfn custom_io_has_source() {\r\n    let e = E;\r\n    let e = std::io::Error::new(std::io::ErrorKind::Other, e);\r\n    assert_eq!(e.source().and_then(|s| s.downcast_ref::<E>()), Some(&E));\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: the test passed\r\n\r\nInstead, this happened: the test failed with\r\n```\r\nthread 'custom_io_has_source' panicked at 'assertion failed: `(left == right)`\r\n  left: `None`,\r\n right: `Some(E)`', src/lib.rs:18:5\r\n```\r\n\r\nI don't _believe_ this is intentional, since the code standard library `impl Error for io::Error` specifically has:\r\n\r\nhttps://github.com/rust-lang/rust/blob/a92669638461836f41f54f95e396f9082bb91391/library/std/src/io/error.rs#L963\r\n\r\nIn fact, it was _specifically_ implemented in https://github.com/rust-lang/rust/pull/58963, but that PR doesn't appear to have included any tests. The test above fails even on 1.30.0 (which is the first Rust version with `fn source`).\r\n\r\nWhat's even more interesting is that `assert!(e.cause().is_some())` fails all the way back to Rust 1.0, so it sure seems like something is fishy here.\r\n\r\nI wonder if @thomcc may know how the source might be disappearing given his work in #87869?\r\n\r\nAnother interesting tidbit here is that using [`io_error_downcast`](https://github.com/rust-lang/rust/issues/99262) we _do_ get the inner error, meaning there will (when that feature lands) be a discrepancy between `io::Error`'s `.source()` and `.downcast()`.\r\n\r\n```rust\r\nassert_eq!(e.downcast::<E>().unwrap(), Box::new(E));\r\n```\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.63.0 (4b91a6ea7 2022-08-08)\r\nbinary: rustc\r\ncommit-hash: 4b91a6ea7258a947e59c6522cd5898e7c0a6a88f\r\ncommit-date: 2022-08-08\r\nhost: aarch64-unknown-linux-gnu\r\nrelease: 1.63.0\r\nLLVM version: 14.0.5\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101817/timeline", "performed_via_github_app": null, "state_reason": null}