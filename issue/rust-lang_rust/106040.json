{"url": "https://api.github.com/repos/rust-lang/rust/issues/106040", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/106040/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/106040/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/106040/events", "html_url": "https://github.com/rust-lang/rust/issues/106040", "id": 1507795714, "node_id": "I_kwDOAAsO6M5Z3yMC", "number": 106040, "title": "evaluate: projection obligations are accepted in otherwise coinductive cycles", "user": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}, {"id": 4806740265, "node_id": "LA_kwDOAAsO6M8AAAABHoEJKQ", "url": "https://api.github.com/repos/rust-lang/rust/labels/WG-trait-system-refactor", "name": "WG-trait-system-refactor", "color": "c2e0c6", "default": false, "description": "The Rustc Trait System Refactor Initiative"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-12-22T12:32:38Z", "updated_at": "2022-12-22T12:35:57Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following compiles but should not\r\n```rust\r\nuse std::marker::Unpin;\r\n\r\nfn is_unpin<T: Unpin>() {}\r\n\r\ntrait OtherTrait {\r\n    type Assoc\r\n    where\r\n        Self: Unpin;\r\n}\r\n\r\nstruct LocalTy;\r\nimpl Unpin for LocalTy\r\nwhere\r\n    Self: OtherTrait<Assoc = LocalTy>,\r\n{}\r\n\r\nimpl<T> OtherTrait for T {\r\n    type Assoc = T\r\n    where\r\n        Self: Unpin;\r\n}\r\n\r\nfn main() {\r\n    is_unpin::<LocalTy>()\r\n}\r\n```\r\nproving `LocalTy: Unpin` results in the following cycle:\r\n\r\n- `LocalTy: Unpin`\r\n  - `LocalTy: OtherTrait` (trivially true)\r\n  - `<LocalTy as OtherTrait>::Assoc = LocalTy`\r\n    - `LocalTy: Unpin` (cycle!)\r\n\r\nWhile it's sound for this cycle to be coinductive, with our current rules it should not be. The new solver will also start out with this being inductive. Fulfill correctly detects this as an inductive cycle. **Evaluate does not**.\r\n\r\nNote that using that is incredibly fragile as it depends on the following *performance optimization* to avoid fulfill:https://github.com/rust-lang/rust/blob/cce9e72c55994335f8d1dac892cca755b65c8f43/compiler/rustc_trait_selection/src/traits/fulfill.rs#L604-L614\r\n\r\nSo the following code does result in the expected error :grin: \r\n```rust\r\nuse std::marker::Unpin;\r\n\r\nfn is_unpin<T: Unpin>() {}\r\n\r\ntrait OtherTrait {\r\n    type Assoc\r\n    where\r\n        Self: Unpin;\r\n}\r\n\r\nstruct LocalTy<'a>(&'a ());\r\nimpl<'a> Unpin for LocalTy<'a>\r\nwhere\r\n    Self: OtherTrait<Assoc = LocalTy<'a>>,\r\n{}\r\n\r\nimpl<T> OtherTrait for T {\r\n    type Assoc = T\r\n    where\r\n        Self: Unpin;\r\n}\r\n\r\nfn main() {\r\n    is_unpin::<LocalTy<'static>>()\r\n}\r\n```\r\n```\r\nerror[E0275]: overflow evaluating the requirement `LocalTy<'_>: OtherTrait`\r\n  --> src/main.rs:12:10\r\n   |\r\n12 | impl<'a> Unpin for LocalTy<'a>\r\n   |          ^^^^^\r\n   |\r\n   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`test1`)\r\nnote: required for `LocalTy<'_>` to implement `Unpin`\r\n  --> src/main.rs:12:10\r\n   |\r\n12 | impl<'a> Unpin for LocalTy<'a>\r\n   |          ^^^^^     ^^^^^^^^^^^\r\nnote: required by a bound in `OtherTrait::Assoc`\r\n  --> src/main.rs:8:15\r\n   |\r\n6  |     type Assoc\r\n   |          ----- required by a bound in this\r\n7  |     where\r\n8  |         Self: Unpin;\r\n   |               ^^^^^ required by this bound in `OtherTrait::Assoc`\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/106040/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/106040/timeline", "performed_via_github_app": null, "state_reason": null}