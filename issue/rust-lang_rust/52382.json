{"url": "https://api.github.com/repos/rust-lang/rust/issues/52382", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52382/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52382/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52382/events", "html_url": "https://github.com/rust-lang/rust/issues/52382", "id": 341246097, "node_id": "MDU6SXNzdWUzNDEyNDYwOTc=", "number": 52382, "title": "rustc_target, rustc_codegen_llvm: use () for the metadata of pointers to extern { type }s.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 67766349, "node_id": "MDU6TGFiZWw2Nzc2NjM0OQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-mentor", "name": "E-mentor", "color": "02E10C", "default": false, "description": "Call for participation: This issue has a mentor. Use RustcContributor::new on Zulip for discussion."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1944310735, "node_id": "MDU6TGFiZWwxOTQ0MzEwNzM1", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-layout", "name": "A-layout", "color": "f7e101", "default": false, "description": "Area: Memory layout of types"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-14T15:57:19Z", "updated_at": "2021-03-22T02:36:14Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now we check in a bunch of places (with, e.g. `type_has_metadata`) whether an unsized type has no metadata, i.e. its pointer is like a regular pointer to sized types, and this is only the case for the new `extern { type Foo; }` opaque FFI types.\r\n\r\nWhat we could do instead, at the same time to simplify some the code handling these, and to make progress on custom DSTs, is to treat pointers to such types as having metadata of `()`, i.e. they'd be `(*data, ())` pairs, which are still represented as just a pointer, but backends can handle the second field uniformly across all the unsized types (`extern { type }`, slices, `dyn Trait`).\r\n\r\nThe main reason we can reuse a lot of the existing code is that `()` can be represented as an immediate value in LLVM already. This trick would not work for custom DSTs with non-immediate metadata types, e.g. `(usize, usize, usize)` for a 2D matrix \"slice\" would require some indirection.\r\nBut it is useful to start challenging the assumption that the metadata is pointer-sized.\r\n\r\ncc @rust-lang/compiler @plietar @mikeyhew", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52382/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52382/timeline", "performed_via_github_app": null, "state_reason": null}