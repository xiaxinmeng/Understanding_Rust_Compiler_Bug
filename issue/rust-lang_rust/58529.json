{"url": "https://api.github.com/repos/rust-lang/rust/issues/58529", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58529/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58529/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58529/events", "html_url": "https://github.com/rust-lang/rust/issues/58529", "id": 411154524, "node_id": "MDU6SXNzdWU0MTExNTQ1MjQ=", "number": 58529, "title": "Conditional jump or move based on uninitialized variable  (and potential SEGV)....", "user": {"login": "khareatu", "id": 47707702, "node_id": "MDQ6VXNlcjQ3NzA3NzAy", "avatar_url": "https://avatars.githubusercontent.com/u/47707702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khareatu", "html_url": "https://github.com/khareatu", "followers_url": "https://api.github.com/users/khareatu/followers", "following_url": "https://api.github.com/users/khareatu/following{/other_user}", "gists_url": "https://api.github.com/users/khareatu/gists{/gist_id}", "starred_url": "https://api.github.com/users/khareatu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khareatu/subscriptions", "organizations_url": "https://api.github.com/users/khareatu/orgs", "repos_url": "https://api.github.com/users/khareatu/repos", "events_url": "https://api.github.com/users/khareatu/events{/privacy}", "received_events_url": "https://api.github.com/users/khareatu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-02-17T06:28:15Z", "updated_at": "2019-08-05T21:37:28Z", "closed_at": "2019-08-05T21:37:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Gist**\r\n\r\n1) Incorrect code gen causes a conditional jump based on load of data from uninitialized memory location on the stack. \r\n2) Issue was reproduced on release builds on both x64 and ARM64 with Rust stable 1.32\r\n3) Issue can be mitigated by restricting codegen-units to 1 (and using a nightly build)\r\n4) Issue can be observed under valgrind / gdb. Note that the code generated by #3 is very similar, but there's a control flow change that prevents the code path for #1 from being executed \r\n5) Issue is likely related to an observed SEGV in 100% safe Rust code\r\n\r\n**Background:**\r\n\r\nThis was discovered during our attempt to root cause an inexplicable SEGV error in 100% safe Rust code. The short version is that the SEGV was being caused by a the corruption of a doubly linked list structure used by malloc() and the structure was ostensibly corrupted when the pointer was somehow overwritten.  Since the issue made absolutely no sense, we tried to distill it down and were surprised when valgrind showed that our test code resulted in a conditional execution based on uninitialized data.\r\n\r\n** Error and analysis **\r\n1. valgrind error\r\nvalgrind --track-origins=yes  target/release/bug_repro \r\n...\r\n==32239== Conditional jump or move depends on uninitialised value(s)\r\n==32239==    at 0x113B86: <serde_cbor::de::Deserializer<R>>::parse_map\r\n==32239==    by 0x10E16A: <serde_cbor::de::Deserializer<R>>::parse_value \r\n==32239==    by 0x10CB27: serde_cbor::de::from_slice \r\n==32239==    by 0x114AFC: bug_repro::main \r\n...\r\n==32239==  Uninitialised value was created by a stack allocation\r\n==32239==    at 0x1137B3: <serde_cbor::de::Deserializer<R>>::parse_map (in /home/ANT.AMAZON.COM/khareatu/kaos/Carbon2/src/UGMH/target/release/bug_repro)\r\n\r\n2. We can validate the above by the following with gdb:\r\n(gdb) info functions parse_map\r\n0x00000000001137c0  <serde_cbor::de::Deserializer<R>>::parse_map\r\n(gdb) disas 0x1137c0\r\nDump of assembler code for function _ZN46_$LT$serde_cbor..de..Deserializer$LT$R$GT$$GT$9parse_map17h2e6263b3d6f0a8b5E:\r\n...\r\n   0x00000000001137ca <+10>:\tsub    $0xf8,%rsp => Stack frame is allocated here\r\n   0x00000000001137d1 <+17>:\tmov    %rsi,%r13 => We set a break point on this instruction\r\n\r\nBreakpoint 2, 0x00000000001137d1 in <serde_cbor::de::Deserializer<R>>::parse_map ()\r\n(gdb) info registers\r\n...\r\nrsp            0x1ffefff6d0\t0x1ffefff6d0\r\n\r\nvalgrind shows that uninitialized data will be located at a future point in the program:\r\n\r\n   0x0000000000113b6f <+943>:\tmov    0x90(%rsp),%rsi => Load happens here\r\n   0x0000000000113b77 <+951>:\tcmp    $0x1,%r12\r\n...\r\n  0x0000000000113b8b <+971>:\ttest   %rsi,%rsi\r\n  0x0000000000113b8e <+974>:\tmov    0x80(%rsp),%rbp\r\n 0x0000000000113b96 <+982>:\tje     0x113bbd => Jump based on the above load\r\n\r\nWe can dump the random bytes allocated on the stack and set a break on 0x113b8e:\r\n\r\n(gdb) x/4xg 0x1ffefff6d0+0x90\r\n0x1ffefff760:\t0x00000000042289f0\t0x0000000004044000\r\n0x1ffefff770:\t0x0000000004028440\t0x0000000004028930\r\n(gdb) x/xg 42289f0\r\nbreak *0x113b8e\r\ncontinue\r\n.... => We break following the load of rsi from [rsp+0x90]\r\n0x0000000000113b96 in <serde_cbor::de::Deserializer<R>>::parse_map ()\r\n(gdb) info registers\r\n....\r\nrsi            0x42289f0\t69372400\r\n\r\nWe can see that this is the same random value @ [rsp+0x90] on the stack frame. In fact, we can further verify this by changing the value in [rsp+0x90] to some other value to ensure that it's not initialized later in the control flow.\r\n\r\n[bug_repro.gz](https://github.com/rust-lang/rust/files/2872701/bug_repro.gz)\r\n\r\n\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58529/timeline", "performed_via_github_app": null, "state_reason": "completed"}