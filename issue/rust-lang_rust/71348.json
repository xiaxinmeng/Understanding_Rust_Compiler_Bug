{"url": "https://api.github.com/repos/rust-lang/rust/issues/71348", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71348/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71348/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71348/events", "html_url": "https://github.com/rust-lang/rust/issues/71348", "id": 603197041, "node_id": "MDU6SXNzdWU2MDMxOTcwNDE=", "number": 71348, "title": "String-based const generics, associated types and where Self clause ICE when implementors are explicitly selected", "user": {"login": "phaazon", "id": 506592, "node_id": "MDQ6VXNlcjUwNjU5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/506592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phaazon", "html_url": "https://github.com/phaazon", "followers_url": "https://api.github.com/users/phaazon/followers", "following_url": "https://api.github.com/users/phaazon/following{/other_user}", "gists_url": "https://api.github.com/users/phaazon/gists{/gist_id}", "starred_url": "https://api.github.com/users/phaazon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phaazon/subscriptions", "organizations_url": "https://api.github.com/users/phaazon/orgs", "repos_url": "https://api.github.com/users/phaazon/repos", "events_url": "https://api.github.com/users/phaazon/events{/privacy}", "received_events_url": "https://api.github.com/users/phaazon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1486687397, "node_id": "MDU6TGFiZWwxNDg2Njg3Mzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_generics", "name": "F-const_generics", "color": "f9c0cc", "default": false, "description": "`#![feature(const_generics)]`"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-20T12:22:54Z", "updated_at": "2020-07-16T22:23:14Z", "closed_at": "2020-07-16T22:23:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\nHi,\r\n\r\nI was playing with `const_generics` and get ICEd. Basically, I was trying to make a \u201ctype-level-string-based\u201d getter, by using a `const &'static str`, using a trait and associated type to get. The trait declaration and implementors **are okay**. However, usage is not, especially when using the trait in a `where Self: _` clause.\r\n\r\n### Code\r\n\r\n```Rust\r\n#![feature(const_generics)]\r\n\r\nstruct Foo {\r\n  i: i32,\r\n}\r\n\r\ntrait Get<'a, const N: &'static str> {\r\n  type Target: 'a;\r\n\r\n  fn get(&'a self) -> &'a Self::Target;\r\n}\r\n\r\nimpl Foo {\r\n  fn ask<'a, const N: &'static str>(&'a self) -> &'a <Self as Get<N>>::Target\r\n  where\r\n    Self: Get<'a, N>,\r\n  {\r\n    self.get()\r\n  }\r\n}\r\n\r\nimpl<'a> Get<'a, \"int\"> for Foo {\r\n  type Target = i32;\r\n\r\n  fn get(&'a self) -> &'a Self::Target {\r\n    &self.i\r\n  }\r\n}\r\n\r\nfn main() {\r\n  let foo = Foo { i: 123 };\r\n\r\n  //println!(\"{}\", foo.ask()); // okay\r\n  println!(\"{}\", foo.ask::<\"int\">()); // ICE\r\n}\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.44.0-nightly (52fa23add 2020-04-18)\r\nbinary: rustc\r\ncommit-hash: 52fa23add6fb0776b32cc591ac928618391bdf41\r\ncommit-date: 2020-04-18\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.44.0-nightly\r\nLLVM version: 9.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nwhoopsies is \ud83d\udce6 v0.1.0 via \ud83e\udd80 v1.44.0-nightly via \uf2db 25% \r\n\ue61f cargo build \r\n   Compiling whoopsies v0.1.0 (/tmp/whoopsies)\r\nwarning: the feature `const_generics` is incomplete and may cause the compiler to crash\r\n --> src/main.rs:1:12\r\n  |\r\n1 | #![feature(const_generics)]\r\n  |            ^^^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(incomplete_features)]` on by default\r\n\r\nthread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 0', src/librustc_mir_build/hair/pattern/_match.rs:2325:13\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.44.0-nightly (52fa23add 2020-04-18) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nwarning: 1 warning emitted\r\n\r\nerror: internal compiler error: unexpected const parent in type_of_def_id(): Expr(Expr { hir_id: HirId { owner: DefId(0:19 ~ whoopsies[b95c]::main[0]), local_id: 30 }, kind: MethodCall(PathSegment { ident: ask#0, hir_id: Some(HirId { owner: DefId(0:19 ~ whoopsies[b95c]::main[0]), local_id: 27 }), res: Some(Err), args: Some(GenericArgs { args: [Const(ConstArg { value: AnonConst { hir_id: HirId { owner: DefId(0:19 ~ whoopsies[b95c]::main[0]), local_id: 25 }, body: BodyId { hir_id: HirId { owner: DefId(0:19 ~ whoopsies[b95c]::main[0]), local_id: 26 } } }, span: src/main.rs:34:28: 34:33 })], bindings: [], parenthesized: false }), infer_args: false }, src/main.rs:34:22: 34:25, [Expr { hir_id: HirId { owner: DefId(0:19 ~ whoopsies[b95c]::main[0]), local_id: 29 }, kind: Path(Resolved(None, Path { span: src/main.rs:34:18: 34:21, res: Local(HirId { owner: DefId(0:19 ~ whoopsies[b95c]::main[0]), local_id: 1 }), segments: [PathSegment { ident: foo#0, hir_id: Some(HirId { owner: DefId(0:19 ~ whoopsies[b95c]::main[0]), local_id: 28 }), res: Some(Local(HirId { owner: DefId(0:19 ~ whoopsies[b95c]::main[0]), local_id: 1 })), args: None, infer_args: true }] })), attrs: ThinVec(None), span: src/main.rs:34:18: 34:21 }]), attrs: ThinVec(None), span: src/main.rs:34:18: 34:36 })\r\n\r\nerror: internal compiler error: Const::from_anon_const: couldn't lit_to_const\r\n  --> src/main.rs:34:28\r\n   |\r\n34 |   println!(\"{}\", foo.ask::<\"int\">()); // ICE\r\n   |                            ^^^^^\r\n\r\nerror: internal compiler error: `ErrorReported` without an error\r\n  --> src/main.rs:34:28\r\n   |\r\n34 |   println!(\"{}\", foo.ask::<\"int\">()); // ICE\r\n   |                            ^^^^^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:30:11\r\n   |\r\n30 |   fn main() {\r\n   |  ___________^\r\n31 | |   let foo = Foo { i: 123 };\r\n32 | |\r\n33 | |   //println!(\"{}\", foo.ask()); // okay\r\n34 | |   println!(\"{}\", foo.ask::<\"int\">()); // ICE\r\n35 | | }\r\n   | |_^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:34:3\r\n   |\r\n34 |   println!(\"{}\", foo.ask::<\"int\">()); // ICE\r\n   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: this error: internal compiler error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:34:3\r\n   |\r\n34 |   println!(\"{}\", foo.ask::<\"int\">()); // ICE\r\n   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: this error: internal compiler error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:34:18\r\n   |\r\n34 |   println!(\"{}\", foo.ask::<\"int\">()); // ICE\r\n   |                  ^^^^^^^^^^^^^^^^^^\r\n\r\nerror: internal compiler error: cat_expr Errd\r\n  --> src/main.rs:34:18\r\n   |\r\n34 |   println!(\"{}\", foo.ask::<\"int\">()); // ICE\r\n   |                  ^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: this error: internal compiler error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nthread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:366:17\r\nstack backtrace:\r\n   0:     0x7f89c43c0a94 - backtrace::backtrace::libunwind::trace::hc5714ade624e7bac\r\n                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1:     0x7f89c43c0a94 - backtrace::backtrace::trace_unsynchronized::haa5e08805f4339b9\r\n                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2:     0x7f89c43c0a94 - std::sys_common::backtrace::_print_fmt::h94291f4baf974a09\r\n                               at src/libstd/sys_common/backtrace.rs:78\r\n   3:     0x7f89c43c0a94 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha253e2bf79e5a84a\r\n                               at src/libstd/sys_common/backtrace.rs:59\r\n   4:     0x7f89c43ff06c - core::fmt::write::hd8b3f531eb511fbe\r\n                               at src/libcore/fmt/mod.rs:1069\r\n   5:     0x7f89c43b24e3 - std::io::Write::write_fmt::h6b2c99f4d38522cf\r\n                               at src/libstd/io/mod.rs:1504\r\n   6:     0x7f89c43c5a95 - std::sys_common::backtrace::_print::hd70702ad9fa74e40\r\n                               at src/libstd/sys_common/backtrace.rs:62\r\n   7:     0x7f89c43c5a95 - std::sys_common::backtrace::print::h3071bb179093451d\r\n                               at src/libstd/sys_common/backtrace.rs:49\r\n   8:     0x7f89c43c5a95 - std::panicking::default_hook::{{closure}}::h49d39000445c23a9\r\n                               at src/libstd/panicking.rs:198\r\n   9:     0x7f89c43c57d2 - std::panicking::default_hook::hf9989e87f77de7cf\r\n                               at src/libstd/panicking.rs:218\r\n  10:     0x7f89c4960af3 - rustc_driver::report_ice::h92aac6410c14e5c7\r\n  11:     0x7f89c43c6215 - std::panicking::rust_panic_with_hook::h6eb63704179cf3ce\r\n                               at src/libstd/panicking.rs:515\r\n  12:     0x7f89c7119b5e - std::panicking::begin_panic::hec6523dbf464630f\r\n  13:     0x7f89c7152402 - <rustc_errors::HandlerInner as core::ops::drop::Drop>::drop::h193c1006dd552ff4\r\n  14:     0x7f89c4982f76 - core::ptr::drop_in_place::h7754c613cf18870d\r\n  15:     0x7f89c498beb6 - <alloc::rc::Rc<T> as core::ops::drop::Drop>::drop::h77c15289e3603ebb\r\n  16:     0x7f89c4abec3d - core::ptr::drop_in_place::h6e2079277ccb9e64\r\n  17:     0x7f89c4ab77b6 - rustc_interface::interface::run_compiler_in_existing_thread_pool::h9012d81d36f91414\r\n  18:     0x7f89c496a91d - scoped_tls::ScopedKey<T>::set::h09d493364109fb29\r\n  19:     0x7f89c49677a4 - rustc_ast::attr::with_globals::h1dda6bb6d764eded\r\n  20:     0x7f89c4973064 - std::sys_common::backtrace::__rust_begin_short_backtrace::h3996bdb49e3d17cc\r\n  21:     0x7f89c4ab981e - core::ops::function::FnOnce::call_once{{vtable.shim}}::h97f5dde05fab5a67\r\n  22:     0x7f89c43a1e5f - <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::hf12d465e9e76f5f4\r\n                               at /rustc/52fa23add6fb0776b32cc591ac928618391bdf41/src/liballoc/boxed.rs:1008\r\n  23:     0x7f89c43d6283 - <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::h5fae10ec3a3213e6\r\n                               at /rustc/52fa23add6fb0776b32cc591ac928618391bdf41/src/liballoc/boxed.rs:1008\r\n  24:     0x7f89c43d6283 - std::sys::unix::thread::Thread::new::thread_start::hb6571af50d4ca2f2\r\n                               at src/libstd/sys/unix/thread.rs:87\r\n  25:     0x7f89c42f446f - start_thread\r\n  26:     0x7f89c42143d3 - clone\r\n  27:                0x0 - <unknown>\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.44.0-nightly (52fa23add 2020-04-18) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nthread panicked while panicking. aborting.\r\nerror: could not compile `whoopsies`.\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name whoopsies --edition=2018 src/main.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C debuginfo=2 -C metadata=3331e52733535916 -C extra-filename=-3331e52733535916 --out-dir /tmp/whoopsies/target/debug/deps -C incremental=/tmp/whoopsies/target/debug/incremental -L dependency=/tmp/whoopsies/target/debug/deps` (signal: 4, SIGILL: illegal instruction)\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 0', src/librustc_mir_build/hair/pattern/_match.rs:2325:13\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1069\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1504\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:218\r\n  10: rustc_driver::report_ice\r\n  11: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:515\r\n  12: rust_begin_unwind\r\n             at src/libstd/panicking.rs:419\r\n  13: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:111\r\n  14: core::panicking::panic_bounds_check\r\n             at src/libcore/panicking.rs:69\r\n  15: rustc_mir_build::hair::pattern::_match::PatStack::specialize_constructor\r\n  16: rustc_mir_build::hair::pattern::_match::is_useful_specialized\r\n  17: <core::iter::adapters::Map<I,F> as core::iter::traits::iterator::Iterator>::try_fold\r\n  18: rustc_mir_build::hair::pattern::_match::is_useful\r\n  19: rustc_mir_build::hair::pattern::check_match::check_not_useful\r\n  20: rustc_mir_build::hair::pattern::check_match::check_exhaustive\r\n  21: rustc_mir_build::hair::pattern::_match::MatchCheckCtxt::create_and_enter\r\n  22: <rustc_mir_build::hair::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  23: <rustc_mir_build::hair::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  24: rustc_hir::intravisit::walk_expr\r\n  25: <rustc_mir_build::hair::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  26: rustc_hir::intravisit::walk_expr\r\n  27: <rustc_mir_build::hair::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  28: rustc_hir::intravisit::walk_block\r\n  29: <rustc_mir_build::hair::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  30: rustc_hir::intravisit::walk_block\r\n  31: <rustc_mir_build::hair::pattern::check_match::MatchVisitor as rustc_hir::intravisit::Visitor>::visit_expr\r\n  32: rustc_mir_build::hair::pattern::check_match::check_match\r\n  33: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::check_match>::compute\r\n  34: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  35: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  36: rustc_query_system::query::plumbing::get_query\r\n  37: rustc_query_system::query::plumbing::ensure_query\r\n  38: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  39: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  40: rustc_interface::passes::analysis\r\n  41: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::analysis>::compute\r\n  42: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  43: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  44: rustc_query_system::query::plumbing::get_query\r\n  45: rustc_middle::ty::context::tls::enter_global\r\n  46: rustc_interface::interface::run_compiler_in_existing_thread_pool\r\n  47: scoped_tls::ScopedKey<T>::set\r\n  48: rustc_ast::attr::with_globals\r\n```\r\n\r\n</p>\r\n</details>\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71348/timeline", "performed_via_github_app": null, "state_reason": "completed"}