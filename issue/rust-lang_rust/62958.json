{"url": "https://api.github.com/repos/rust-lang/rust/issues/62958", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62958/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62958/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62958/events", "html_url": "https://github.com/rust-lang/rust/issues/62958", "id": 472584334, "node_id": "MDU6SXNzdWU0NzI1ODQzMzQ=", "number": 62958, "title": "Async fn doubles argument size", "user": {"login": "4teap", "id": 53247194, "node_id": "MDQ6VXNlcjUzMjQ3MTk0", "avatar_url": "https://avatars.githubusercontent.com/u/53247194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4teap", "html_url": "https://github.com/4teap", "followers_url": "https://api.github.com/users/4teap/followers", "following_url": "https://api.github.com/users/4teap/following{/other_user}", "gists_url": "https://api.github.com/users/4teap/gists{/gist_id}", "starred_url": "https://api.github.com/users/4teap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4teap/subscriptions", "organizations_url": "https://api.github.com/users/4teap/orgs", "repos_url": "https://api.github.com/users/4teap/repos", "events_url": "https://api.github.com/users/4teap/events{/privacy}", "received_events_url": "https://api.github.com/users/4teap/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 679846574, "node_id": "MDU6TGFiZWw2Nzk4NDY1NzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-generators", "name": "A-generators", "color": "f7e101", "default": false, "description": "Area: Generators"}, {"id": 1049491442, "node_id": "MDU6TGFiZWwxMDQ5NDkxNDQy", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-heavy", "name": "I-heavy", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to binary size of generated code."}, {"id": 1049510487, "node_id": "MDU6TGFiZWwxMDQ5NTEwNDg3", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-async-await", "name": "A-async-await", "color": "f7e101", "default": false, "description": "Area: Async & Await"}, {"id": 1259721467, "node_id": "MDU6TGFiZWwxMjU5NzIxNDY3", "url": "https://api.github.com/repos/rust-lang/rust/labels/AsyncAwait-Triaged", "name": "AsyncAwait-Triaged", "color": "d4c5f9", "default": false, "description": "Async-await issues that have been triaged during a working group meeting."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-07-24T22:47:05Z", "updated_at": "2023-02-17T18:30:55Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Generator optimization in #60187 by @tmandry reused generator locals, but arguments are still duplicated whenever used across yield points.\r\n\r\nFor example ([playground](https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=af3e5e9233c45d6397c7b4b3e671f092)):\r\n\r\n```rust\r\n#![feature(async_await)]\r\n\r\nasync fn wait() {}\r\n\r\nasync fn test(arg: [u8; 8192]) {\r\n    wait().await;\r\n    drop(arg);\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", std::mem::size_of_val(&test([0; 8192])));\r\n}\r\n```\r\n\r\nExpected: 8200\r\nActual: __16392__\r\n\r\nWhen passing in futures, the future size can grow exponentially ([playground](https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=02a3e685de2b2bf868733e40e56e192b)):\r\n\r\n```rust\r\n#![feature(async_await)]\r\n\r\nasync fn test(_arg: [u8; 8192]) {}\r\n\r\nasync fn use_future(fut: impl std::future::Future<Output = ()>) {\r\n    fut.await\r\n}\r\n\r\nfn main() {\r\n    println!(\r\n        \"{}\",\r\n        std::mem::size_of_val(&use_future(use_future(use_future(use_future(use_future(\r\n            use_future(use_future(use_future(use_future(use_future(test(\r\n                [0; 8192]\r\n            ))))))\r\n        ))))))\r\n    );\r\n}\r\n```\r\n\r\nExpected: 8236\r\nActual: __8396796__\r\n\r\nI didn't find any note on this. But given how common arguments are used, I think it might be useful if they are included in the optimization.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62958/reactions", "total_count": 16, "+1": 15, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62958/timeline", "performed_via_github_app": null, "state_reason": null}