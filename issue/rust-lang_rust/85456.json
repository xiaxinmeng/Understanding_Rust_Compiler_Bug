{"url": "https://api.github.com/repos/rust-lang/rust/issues/85456", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85456/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85456/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85456/events", "html_url": "https://github.com/rust-lang/rust/issues/85456", "id": 894895078, "node_id": "MDU6SXNzdWU4OTQ4OTUwNzg=", "number": 85456, "title": "Coercion to `Box<fn()>` or `Box<dyn Fn()>` ignores lifetime restrictions on method of struct with lifetime", "user": {"login": "elidupree", "id": 1292783, "node_id": "MDQ6VXNlcjEyOTI3ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1292783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elidupree", "html_url": "https://github.com/elidupree", "followers_url": "https://api.github.com/users/elidupree/followers", "following_url": "https://api.github.com/users/elidupree/following{/other_user}", "gists_url": "https://api.github.com/users/elidupree/gists{/gist_id}", "starred_url": "https://api.github.com/users/elidupree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elidupree/subscriptions", "organizations_url": "https://api.github.com/users/elidupree/orgs", "repos_url": "https://api.github.com/users/elidupree/repos", "events_url": "https://api.github.com/users/elidupree/events{/privacy}", "received_events_url": "https://api.github.com/users/elidupree/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2021-05-19T00:58:11Z", "updated_at": "2021-10-17T08:28:43Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "In this code [[playground]](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=14a9edb43d48d551cd7df0d4ab012969):\r\n```rust\r\nstruct TemporaryStruct<'a>(&'a i32);\r\n\r\nimpl<'a> TemporaryStruct<'a> {\r\n    fn query() {\r\n        println!(\"TemporaryStruct queried\");\r\n    }\r\n}\r\n\r\nfn evil<'a>(_: &'a Box<i32>) -> Box<dyn Fn()> {\r\n    Box::new(TemporaryStruct::<'a>::query)\r\n}\r\n\r\nfn main() {\r\n    let evil_func = {\r\n        let temporary = Box::new(5);\r\n        evil(&temporary)\r\n    };\r\n    println!(\"lifetime of `temporary` is over\");\r\n    (evil_func)();\r\n}\r\n```\r\n\r\n`evil` stores the method `TemporaryStruct::<'a>::query` in a `Box<dyn Fn()>`, which shouldn't be possible. (The same thing also happens if the return type is `Box<fn()>`.) I believe this is a soundness hole in stable Rust (1.52.1).\r\n\r\n(The rest of the code is just to demonstrate how this is unsafe; `main` calls `evil` with `'a` equal to the lifetime of the local variable `temporary`, then uses the boxed Fn to call the query method outside the lifetime of `TemporaryStruct::<'a>`. I haven't found a way to produce actual memory errors in safe code using this, but I've been assured that it's a violation of Rust's safety invariants.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85456/timeline", "performed_via_github_app": null, "state_reason": null}