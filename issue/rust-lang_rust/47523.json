{"url": "https://api.github.com/repos/rust-lang/rust/issues/47523", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/47523/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/47523/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/47523/events", "html_url": "https://github.com/rust-lang/rust/issues/47523", "id": 289373985, "node_id": "MDU6SXNzdWUyODkzNzM5ODU=", "number": 47523, "title": "Missed optimization: is_digit()/iter().all() (?)", "user": {"login": "SoniEx2", "id": 1779619, "node_id": "MDQ6VXNlcjE3Nzk2MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1779619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SoniEx2", "html_url": "https://github.com/SoniEx2", "followers_url": "https://api.github.com/users/SoniEx2/followers", "following_url": "https://api.github.com/users/SoniEx2/following{/other_user}", "gists_url": "https://api.github.com/users/SoniEx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/SoniEx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SoniEx2/subscriptions", "organizations_url": "https://api.github.com/users/SoniEx2/orgs", "repos_url": "https://api.github.com/users/SoniEx2/repos", "events_url": "https://api.github.com/users/SoniEx2/events{/privacy}", "received_events_url": "https://api.github.com/users/SoniEx2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-01-17T18:52:04Z", "updated_at": "2021-05-16T20:34:54Z", "closed_at": "2021-05-16T15:17:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was playing with the following variants of the same code:\r\n\r\n```rust\r\n// UGLY:\r\nimpl<'a> IrcCommand<'a> {\r\n    pub fn new(cmd: &'a [u8]) -> IrcCommand<'a> {\r\n        if cmd.len() == 3 && match (cmd[0], cmd[1], cmd[2]) {\r\n            (b'0'...b'9', b'0'...b'9', b'0'...b'9') => {\r\n                // TODO switch to TryFrom/TryInto once those are stable. (rust-lang/rust#33417)\r\n                return IrcCommand::Numeric(Numeric::new(array_ref![cmd,0,3]));\r\n            },\r\n            _ => false\r\n        } {\r\n            unreachable!()\r\n        } else {\r\n            IrcCommand::Stringy(Stringy(cmd))\r\n        }\r\n    }\r\n}\r\n\r\n// UGLY:\r\nimpl<'a> IrcCommand<'a> {\r\n    pub fn new(cmd: &'a [u8]) -> IrcCommand<'a> {\r\n        if cmd.len() == 3 && match (cmd[0], cmd[1], cmd[2]) {\r\n            (b'0'...b'9', b'0'...b'9', b'0'...b'9') => true,\r\n            _ => false\r\n        } {\r\n            // TODO switch to TryFrom/TryInto once those are stable. (rust-lang/rust#33417)\r\n            IrcCommand::Numeric(Numeric::new(array_ref![cmd,0,3]))\r\n        } else {\r\n            IrcCommand::Stringy(Stringy(cmd))\r\n        }\r\n    }\r\n}\r\n\r\n// UGLY:\r\nimpl<'a> IrcCommand<'a> {\r\n    pub fn new(cmd: &'a [u8]) -> IrcCommand<'a> {\r\n        if cmd.len() == 3 {\r\n            match (cmd[0], cmd[1], cmd[2]) {\r\n                (b'0'...b'9', b'0'...b'9', b'0'...b'9') => {\r\n                    // TODO switch to TryFrom/TryInto once those are stable. (rust-lang/rust#33417)\r\n                    IrcCommand::Numeric(Numeric::new(array_ref![cmd,0,3]))\r\n                },\r\n                _ => IrcCommand::Stringy(Stringy(cmd))\r\n            }\r\n        } else {\r\n            IrcCommand::Stringy(Stringy(cmd))\r\n        }\r\n    }\r\n}\r\n\r\n// UGLY:\r\nimpl<'a> IrcCommand<'a> {\r\n    pub fn new(cmd: &'a [u8]) -> IrcCommand<'a> {\r\n        match (cmd.get(0), cmd.get(1), cmd.get(2)) {\r\n            (Some(&b'0'...b'9'), Some(&b'0'...b'9'), Some(&b'0'...b'9')) if cmd.len() == 3 => {\r\n                // TODO switch to TryFrom/TryInto once those are stable. (rust-lang/rust#33417)\r\n                IrcCommand::Numeric(Numeric::new(array_ref![cmd,0,3]))\r\n            },\r\n            _ => IrcCommand::Stringy(Stringy(cmd))\r\n        }\r\n    }\r\n}\r\n\r\n// less ugly:\r\nimpl<'a> IrcCommand<'a> {\r\n    pub fn new(cmd: &'a [u8]) -> IrcCommand<'a> {\r\n        if cmd.len() == 3 && cmd.iter().all(|&b| (b as char).is_digit(10)) {\r\n            IrcCommand::Numeric(Numeric::new(array_ref![cmd,0,3]))\r\n        } else {\r\n            IrcCommand::Stringy(Stringy(cmd))\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhen testing the last one (PS: I haven't tested all of them), I noticed the generated code to be much different compared to the first two cases (the second of which could be replaced with the `matches` crate, which is what I did).\r\n\r\nCase A: (matches crate)\r\n\r\n```asm\r\n_ZN4uirc7command10IrcCommand3new17hca225b68bb9fc6afE:                                                                               \r\n        .cfi_startproc                                                                                                              \r\n        cmpq    $3, %rdx                                                                                                            \r\n        jne     .LBB14_1                                                                                                            \r\n        movb    2(%rsi), %r8b                                                                                                       \r\n        addb    $-48, %r8b                                                                                                          \r\n        cmpb    $9, %r8b                                                                                                            \r\n        ja      .LBB14_1                                                                                                            \r\n        movb    (%rsi), %cl                                                                                                         \r\n        addb    $-48, %cl                                                                                                           \r\n        cmpb    $9, %cl                                                                                                             \r\n        ja      .LBB14_1                                                                                                            \r\n        movb    1(%rsi), %al                                                                                                        \r\n        addb    $-48, %al                                                                                                           \r\n        cmpb    $9, %al                                                                                                             \r\n        ja      .LBB14_1                                                                                                            \r\n        movzbl  %cl, %ecx                                                                                                           \r\n        movzbl  %al, %eax                                                                                                           \r\n        leal    (%rcx,%rcx,4), %ecx                                                                                                 \r\n        leal    (%rax,%rcx,2), %eax                                                                                                 \r\n        movzbl  %r8b, %ecx                                                                                                          \r\n        leal    (%rax,%rax,4), %eax                                                                                                 \r\n        leal    (%rcx,%rax,2), %eax                                                                                                 \r\n        movq    $1, (%rdi)                                                                                                          \r\n        movw    %ax, 8(%rdi)                                                                                                        \r\n        movq    %rsi, %rdx                                                                                                          \r\n        jmp     .LBB14_6                                                                                                            \r\n.LBB14_1:                                                                                                                           \r\n        movq    $0, (%rdi)                                                                                                          \r\n        movq    %rsi, 8(%rdi)                                                                                                       \r\n.LBB14_6:                                                                                                                           \r\n        movq    %rdx, 16(%rdi)                                                                                                      \r\n        movq    %rdi, %rax                                                                                                          \r\n        retq                                                                                                                        \r\n.Lfunc_end14:                                                                                                                       \r\n        .size   _ZN4uirc7command10IrcCommand3new17hca225b68bb9fc6afE, .Lfunc_end14-_ZN4uirc7command10IrcCommand3new17hca225b68bb9fc6afE\r\n        .cfi_endproc                                                                                                                \r\n```\r\n\r\nCase B: (is_digit)\r\n\r\n```asm\r\n_ZN4uirc7command10IrcCommand3new17h6b3f6ad04dd2e514E:\r\n\t.cfi_startproc\r\n\tsubq\t$2, %rsp\r\n.Lcfi43:\r\n\t.cfi_def_cfa_offset 10\r\n\tcmpq\t$3, %rdx\r\n\tjne\t.LBB14_1\r\n\tmovzbl\t(%rsi), %r8d\r\n\tleal\t-48(%r8), %eax\r\n\tmovl\t$-48, %ecx\r\n\tcmpl\t$10, %eax\r\n\tjb\t.LBB14_5\r\n\tleal\t-97(%r8), %eax\r\n\tmovl\t$-87, %ecx\r\n\tcmpl\t$26, %eax\r\n\tjb\t.LBB14_5\r\n\tleal\t-65(%r8), %eax\r\n\tmovl\t$-55, %ecx\r\n\tcmpl\t$25, %eax\r\n\tja\t.LBB14_7\r\n.LBB14_5:\r\n\taddl\t%r8d, %ecx\r\n\tcmpl\t$10, %ecx\r\n\tjae\t.LBB14_7\r\n\tmovq\t%rsp, %rax\r\n\tjmp\t.LBB14_8\r\n.LBB14_7:\r\n\tmovb\t$1, (%rsp)\r\n\tleaq\t1(%rsp), %rax\r\n.LBB14_8:\r\n\tmovb\t$0, (%rax)\r\n\tcmpb\t$0, (%rsp)\r\n\tjne\t.LBB14_9\r\n\tmovzbl\t1(%rsi), %r8d\r\n\tleal\t-48(%r8), %eax\r\n\tmovl\t$-48, %ecx\r\n\tcmpl\t$10, %eax\r\n\tjb\t.LBB14_15\r\n\tleal\t-97(%r8), %eax\r\n\tmovl\t$-87, %ecx\r\n\tcmpl\t$26, %eax\r\n\tjb\t.LBB14_15\r\n\tleal\t-65(%r8), %eax\r\n\tmovl\t$-55, %ecx\r\n\tcmpl\t$25, %eax\r\n\tja\t.LBB14_17\r\n.LBB14_15:\r\n\taddl\t%r8d, %ecx\r\n\tcmpl\t$10, %ecx\r\n\tjae\t.LBB14_17\r\n\tmovq\t%rsp, %rax\r\n\tjmp\t.LBB14_18\r\n.LBB14_17:\r\n\tmovb\t$1, (%rsp)\r\n\tleaq\t1(%rsp), %rax\r\n.LBB14_18:\r\n\tmovb\t$0, (%rax)\r\n\tcmpb\t$0, (%rsp)\r\n\tjne\t.LBB14_9\r\n\tmovzbl\t2(%rsi), %r8d\r\n\tleal\t-48(%r8), %eax\r\n\tmovl\t$-48, %ecx\r\n\tcmpl\t$10, %eax\r\n\tjb\t.LBB14_22\r\n\tleal\t-97(%r8), %eax\r\n\tmovl\t$-87, %ecx\r\n\tcmpl\t$26, %eax\r\n\tjb\t.LBB14_22\r\n\tleal\t-65(%r8), %eax\r\n\tmovl\t$-55, %ecx\r\n\tcmpl\t$25, %eax\r\n\tja\t.LBB14_24\r\n.LBB14_22:\r\n\taddl\t%r8d, %ecx\r\n\tcmpl\t$10, %ecx\r\n\tjae\t.LBB14_24\r\n\tmovq\t%rsp, %rax\r\n\tjmp\t.LBB14_25\r\n.LBB14_24:\r\n\tmovb\t$1, (%rsp)\r\n\tleaq\t1(%rsp), %rax\r\n.LBB14_25:\r\n\tmovb\t$0, (%rax)\r\n\tcmpb\t$0, (%rsp)\r\n\tje\t.LBB14_10\r\n.LBB14_9:\r\n\tmovb\t1(%rsp), %al\r\n\ttestb\t$1, %al\r\n\tjne\t.LBB14_10\r\n.LBB14_1:\r\n\tmovq\t$0, (%rdi)\r\n\tmovq\t%rsi, 8(%rdi)\r\n\tjmp\t.LBB14_11\r\n.LBB14_10:\r\n\tmovb\t(%rsi), %al\r\n\tmovb\t1(%rsi), %cl\r\n\taddb\t$-48, %al\r\n\tmovzbl\t%al, %eax\r\n\taddb\t$-48, %cl\r\n\tmovzbl\t%cl, %ecx\r\n\tleal\t(%rax,%rax,4), %eax\r\n\tleal\t(%rcx,%rax,2), %eax\r\n\tmovb\t2(%rsi), %cl\r\n\taddb\t$-48, %cl\r\n\tmovzbl\t%cl, %ecx\r\n\tleal\t(%rax,%rax,4), %eax\r\n\tleal\t(%rcx,%rax,2), %eax\r\n\tmovq\t$1, (%rdi)\r\n\tmovw\t%ax, 8(%rdi)\r\n\tmovq\t%rsi, %rdx\r\n.LBB14_11:\r\n\tmovq\t%rdx, 16(%rdi)\r\n\tmovq\t%rdi, %rax\r\n\taddq\t$2, %rsp\r\n\tretq\r\n.Lfunc_end14:\r\n\t.size\t_ZN4uirc7command10IrcCommand3new17h6b3f6ad04dd2e514E, .Lfunc_end14-_ZN4uirc7command10IrcCommand3new17h6b3f6ad04dd2e514E\r\n\t.cfi_endproc\r\n```", "closed_by": {"login": "SoniEx2", "id": 1779619, "node_id": "MDQ6VXNlcjE3Nzk2MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1779619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SoniEx2", "html_url": "https://github.com/SoniEx2", "followers_url": "https://api.github.com/users/SoniEx2/followers", "following_url": "https://api.github.com/users/SoniEx2/following{/other_user}", "gists_url": "https://api.github.com/users/SoniEx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/SoniEx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SoniEx2/subscriptions", "organizations_url": "https://api.github.com/users/SoniEx2/orgs", "repos_url": "https://api.github.com/users/SoniEx2/repos", "events_url": "https://api.github.com/users/SoniEx2/events{/privacy}", "received_events_url": "https://api.github.com/users/SoniEx2/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/47523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/47523/timeline", "performed_via_github_app": null, "state_reason": "completed"}