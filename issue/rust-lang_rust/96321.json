{"url": "https://api.github.com/repos/rust-lang/rust/issues/96321", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/96321/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/96321/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/96321/events", "html_url": "https://github.com/rust-lang/rust/issues/96321", "id": 1212580012, "node_id": "I_kwDOAAsO6M5IRoCs", "number": 96321, "title": "Ordering of bounds matters with GAT/HRTB", "user": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-04-22T16:56:24Z", "updated_at": "2022-04-23T05:12:15Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nI tried this code:\r\n\r\n([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=90f4f6ce698b33668ee8dd34e379cb04))\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\nuse std::marker::PhantomData as PhD;\r\n\r\npub trait Universe: 'static {\r\n    type Ty<'a>;\r\n}\r\n\r\nimpl Universe for &'static u8 {\r\n    type Ty<'a> = &'a u8;\r\n}\r\n\r\ntrait Service<Req> {}\r\n\r\nstruct BadCombinator<ReqU, S>(PhD<ReqU>, S);\r\n\r\nimpl<'c, ReqU, S> Service<ReqU::Ty<'c>> for BadCombinator<ReqU, S>\r\nwhere\r\n    ReqU: Universe,\r\n    S: for<'a> Service<ReqU::Ty<'a>>,\r\n    S: Service<ReqU>, // swapping the last two bounds works!\r\n{\r\n}\r\n\r\nfn test(svc: impl for<'a> Service<&'a u8>) {\r\n    fn assert_good(_: impl for<'a> Service<&'a u8>) {}\r\n\r\n   // assert_good(BadCombinator(PhD::<&u8>, svc)); //<- works\r\n    assert_good(BadCombinator(PhD, svc));\r\n}\r\n```\r\n\r\nI expected to see this happen: program either compiles or requires type annotation for `ReqU`.\r\n\r\nInstead, this happened: The program fails with a message unrelated to type inference. While reording the bounds as noted or annotating for `ReqU` makes it compile.\r\n\r\nThe error message looks pretty confusing as it seems that the compiler was able to infer `ReqU`!\r\n\r\n<details><summary><b>Error Output</b></summary>\r\n<p>\r\n\r\n```\r\nerror[[E0277]](https://doc.rust-lang.org/nightly/error-index.html#E0277): the trait bound `for<'a> impl for<'a> Service<&'a u8>: Service<<&u8 as Universe>::Ty<'a>>` is not satisfied\r\n  [--> src/lib.rs:28:17\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=7d6db0f5036d46fc55706aed2d6eb64c#)   |\r\n28 |     assert_good(BadCombinator(PhD, svc));\r\n   |     ----------- ^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Service<<&u8 as Universe>::Ty<'a>>` is not implemented for `impl for<'a> Service<&'a u8>`\r\n   |     |\r\n   |     required by a bound introduced by this call\r\n   |\r\nnote: required because of the requirements on the impl of `for<'a> Service<&'a u8>` for `BadCombinator<&u8, impl for<'a> Service<&'a u8>>`\r\n  [--> src/lib.rs:16:19\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=7d6db0f5036d46fc55706aed2d6eb64c#)   |\r\n16 | impl<'c, ReqU, S> Service<ReqU::Ty<'c>> for BadCombinator<ReqU, S>\r\n   |                   ^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^\r\nnote: required by a bound in `assert_good`\r\n  [--> src/lib.rs:25:28\r\n](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=7d6db0f5036d46fc55706aed2d6eb64c#)   |\r\n25 |     fn assert_good(_: impl for<'a> Service<&'a u8>) {}\r\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `assert_good`\r\nhelp: consider further restricting this bound\r\n   |\r\n24 | pub fn test(svc: impl for<'a> Service<&'a u8> + for<'a> Service<<&u8 as Universe>::Ty<'a>>) {\r\n   |                                               ++++++++++++++++++++++++++++++++++++++++++++\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `playground` due to previous error\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\nReproduced on nightly versions back to `2020-05-01`\r\n\r\nCurrent nightly:\r\n```\r\n1.62.0-nightly (2022-04-21 de1bc0008be096cf7ed6)\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n\r\n@rustbot label  F-generic_associated_types A-inference T-compiler\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/96321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/96321/timeline", "performed_via_github_app": null, "state_reason": null}