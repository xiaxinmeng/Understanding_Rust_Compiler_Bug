{"url": "https://api.github.com/repos/rust-lang/rust/issues/62387", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/62387/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/62387/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/62387/events", "html_url": "https://github.com/rust-lang/rust/issues/62387", "id": 464392581, "node_id": "MDU6SXNzdWU0NjQzOTI1ODE=", "number": 62387, "title": "diagnostics: suggest iter_mut() where trying to modify .iter()'ed vector elements inplace", "user": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-04T20:54:20Z", "updated_at": "2020-08-28T20:28:31Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "code:\r\n````rust\r\n#[derive(Debug)]\r\nstruct A {\r\n    a: i32,\r\n}\r\n\r\nimpl A {\r\n    fn double(&mut self) {\r\n        self.a += self.a\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut v = [A { a: 4 }];\r\n    v.iter().for_each(|a| a.double());\r\n    println!(\"{:?}\", v);\r\n}\r\n````\r\n\r\nThe code gives the following not-very-helpful warning:\r\n````\r\nerror[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\r\n  --> src/main.rs:14:27\r\n   |\r\n14 |     v.iter().for_each(|a| a.double());\r\n   |                        -  ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\r\n   |                        |\r\n   |                        help: consider changing this to be a mutable reference: `&mut A`\r\n\r\nwarning: variable does not need to be mutable\r\n  --> src/main.rs:13:9\r\n   |\r\n13 |     let mut v = [A { a: 4 }];\r\n   |         ----^\r\n   |         |\r\n   |         help: remove this `mut`\r\n   |\r\n   = note: #[warn(unused_mut)] on by default\r\n\r\nerror: aborting due to previous error\r\n````\r\n\r\ntrying to use\r\n````rust\r\nv.iter().for_each(|&mut a| a.double());\r\n````\r\nand a none-mutable vector just causes more errors\r\n````\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:14:24\r\n   |\r\n14 |     v.iter().for_each(|&mut a| a.double());\r\n   |                        ^^^^^^ types differ in mutability\r\n   |\r\n   = note: expected type `&A`\r\n              found type `&mut _`\r\n   = help: did you mean `mut a: &&A`?\r\n````\r\n\r\nThe actual fix is to use `iter_mut()` instead of just `iter()`:\r\n\r\n````rust\r\n#[derive(Debug)]\r\nstruct A {\r\n    a: i32,\r\n}\r\n\r\nimpl A {\r\n    fn double(&mut self) {\r\n        self.a += self.a\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut v = [A { a: 4 }];\r\n    v.iter_mut().for_each(|a| a.double());\r\n    println!(\"{:?}\", v);\r\n}\r\n````\r\n\r\nIt would be very helpful the compiler could suggest `iter_mut()`!", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/62387/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/62387/timeline", "performed_via_github_app": null, "state_reason": null}