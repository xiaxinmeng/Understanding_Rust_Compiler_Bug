{"url": "https://api.github.com/repos/rust-lang/rust/issues/68065", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68065/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68065/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68065/events", "html_url": "https://github.com/rust-lang/rust/issues/68065", "id": 547635684, "node_id": "MDU6SXNzdWU1NDc2MzU2ODQ=", "number": 68065, "title": "`repr(C)` is not respected for enums with uninhabited variants", "user": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-09T18:05:46Z", "updated_at": "2020-01-09T22:18:21Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Uninhabited `repr(C)` enums are size zero, _not_ the size of their discriminant. [For instance](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ab603e5a7bb2d0894ea22595bfdf599e):\r\n\r\n```rust\r\nenum Never {}\r\n\r\n#[repr(C, u64)]\r\nenum E {\r\n    _X(Never),\r\n    _Y(Never),\r\n}\r\n\r\nfn main (){\r\n    use core::mem::size_of;\r\n\r\n    let never_size = size_of::<Never>();\r\n    assert_eq!(0, never_size);\r\n    \r\n    let disr_size = size_of::<u64>();\r\n    assert_eq!(8, disr_size);\r\n    \r\n    let expected_enum_size = disr_size + never_size;\r\n    let actual_enum_size = size_of::<E>();\r\n    \r\n    assert_eq!(expected_enum_size, actual_enum_size); // FAIL! 8 != 0\r\n}\r\n```\r\n\r\nAt best, this leads to nonsensical errors. For instance, [this][infinite-size]:\r\n```rust\r\nenum Never {}\r\n\r\n#[repr(C, u64)]\r\nenum E {\r\n    _X(Never),\r\n    _Y(E),\r\n}\r\n```\r\n[produces this error message](infinite-size):\r\n```\r\nerror[E0072]: recursive type `E` has infinite size\r\n --> src/lib.rs:4:1\r\n  |\r\n4 | enum E {\r\n  | ^^^^^^ recursive type has infinite size\r\n5 |     _X(Never),\r\n6 |     _Y(E),\r\n  |        - recursive without indirection\r\n  |\r\n  = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `E` representable\r\n```\r\n\r\n[infinite-size]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ef95b35c6f9951ee82edfda0ab6e8f6a\r\n\r\nAt worst, it violates the specification of [RFC2195: _Really Tagged Unions_](https://rust-lang.github.io/rfcs/2195-really-tagged-unions.html), which dictates [that `E` should be layout-compatible to the `union` of its variants](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=86bf6b539516cc82280ddedb15730c45):\r\n```rust\r\nuse core::mem::size_of;\r\n\r\n#[derive(Copy, Clone)]\r\nenum Never {}\r\n// This:\r\n\r\n#[repr(C, u64)]\r\nenum E {\r\n    _X(Never),\r\n    _Y(Never),\r\n}\r\n\r\n// ...should have the same layout as `ERepr`:\r\n\r\n#[derive(Copy, Clone)]\r\n#[repr(C)]\r\nunion ERepr {\r\n    A: EX,\r\n    B: EY,\r\n}\r\n\r\ntype ETag = u64;\r\n\r\n#[derive(Copy, Clone)] struct EX(ETag, Never);\r\n#[derive(Copy, Clone)] struct EY(ETag, Never);\r\n\r\n// ...but it doesn't:\r\n\r\nfn main() {\r\n    assert_eq!(size_of::<E>(), size_of::<ERepr>()); // FAIL: 0 != 8\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68065/timeline", "performed_via_github_app": null, "state_reason": null}