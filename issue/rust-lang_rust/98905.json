{"url": "https://api.github.com/repos/rust-lang/rust/issues/98905", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/98905/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/98905/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/98905/events", "html_url": "https://github.com/rust-lang/rust/issues/98905", "id": 1293588810, "node_id": "I_kwDOAAsO6M5NGplK", "number": 98905, "title": "Cow<'_, T> should not implement AsRef<T> but AsRef<U> where T: AsRef<U>", "user": {"login": "JanBeh", "id": 76393822, "node_id": "MDQ6VXNlcjc2MzkzODIy", "avatar_url": "https://avatars.githubusercontent.com/u/76393822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanBeh", "html_url": "https://github.com/JanBeh", "followers_url": "https://api.github.com/users/JanBeh/followers", "following_url": "https://api.github.com/users/JanBeh/following{/other_user}", "gists_url": "https://api.github.com/users/JanBeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanBeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanBeh/subscriptions", "organizations_url": "https://api.github.com/users/JanBeh/orgs", "repos_url": "https://api.github.com/users/JanBeh/repos", "events_url": "https://api.github.com/users/JanBeh/events{/privacy}", "received_events_url": "https://api.github.com/users/JanBeh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2022-07-04T21:52:29Z", "updated_at": "2022-07-15T16:51:42Z", "closed_at": "2022-07-15T16:51:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nuse std::borrow::Cow;\r\nuse std::path::Path;\r\n\r\nfn func(_: impl AsRef<Path>) {}\r\n\r\nfn main() {\r\n    let s: &str = \".\";\r\n    let path: &Path = Path::new(&s);\r\n    func(path);\r\n    func(&path);\r\n    func(Cow::Borrowed(path));\r\n    func(s);\r\n    func(&s);\r\n    func(Cow::Borrowed(s));\r\n}\r\n```\r\n\r\nI expected to see this happen: Code compiles and runs without error.\r\n\r\nInstead, this happened:\r\n\r\n```text\r\nerror[E0277]: the trait bound `Cow<'_, str>: AsRef<Path>` is not satisfied\r\n  --> src/main.rs:14:10\r\n   |\r\n14 |     func(Cow::Borrowed(s));\r\n   |     ---- ^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `Cow<'_, str>`\r\n   |     |\r\n   |     required by a bound introduced by this call\r\n   |\r\n   = help: the following other types implement trait `AsRef<T>`:\r\n             <Cow<'_, OsStr> as AsRef<Path>>\r\n             <Cow<'_, T> as AsRef<T>>\r\nnote: required by a bound in `func`\r\n  --> src/main.rs:4:17\r\n   |\r\n4  | fn func(_: impl AsRef<Path>) {}\r\n   |                 ^^^^^^^^^^^ required by this bound in `func`\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\n```\r\n\r\nMore examples of (allegedly) inconsistent behavior can be found in [this comment below](https://github.com/rust-lang/rust/issues/98905#issuecomment-1177307181). The cause is subtle and I suspect it is in `std`. I believe that\r\n\r\n```rust\r\nimpl<T: ?Sized + ToOwned> AsRef<T> for Cow<'_, T> {\r\n    fn as_ref(&self) -> &T {\r\n        self\r\n    }\r\n}\r\n```\r\n\r\nshould actually be:\r\n\r\n```rust\r\nimpl<T, U> AsRef<U> for Cow<'_, T>\r\nwhere\r\n    T: ?Sized + ToOwned + AsRef<U>,\r\n    U: ?Sized,\r\n{\r\n    fn as_ref(&self) -> &U {\r\n        self.deref().as_ref()\r\n    }\r\n}\r\n```\r\n\r\nThat is because `.as_ref()` can't generally be used to go from `T` to `&T`. It doesn't need to go from `Cow<'_, T>` to `&T` either. We have `.borrow()` for that, because there is an `impl<T: ?Sized> Borrow<T> for T` in `std`.\r\n\r\nInstead, `Cow` should be transparent in regard to `AsRef`, i.e. if a type `T` implements `AsRef<U>`, then `Cow<'_, T>` should implement `AsRef<U>` too. Compare `&T`, which implements `AsRef<U>` when `T: AsRef<U>` (which [is the reason](https://users.rust-lang.org/t/why-not-impl-asref-t-for-t/77877/4?u=jbe) why we can't have a generic `impl<T: ?Sized> AsRef<T> for T`).\r\n\r\nSee also [this post on URLO](https://users.rust-lang.org/t/smart-pointer-which-owns-its-target/77686/36?u=jbe).\r\n\r\nFixing this may be a breaking change and/or require a new edition, I guess.\r\n\r\n**Update** moved up from [comment below](https://github.com/rust-lang/rust/issues/98905#issuecomment-1177842910):\r\n\r\nNote that `Rc` and `Arc` behave consistent to `Cow`:\r\n\r\n* [`impl<T: ?Sized> AsRef<T> for Rc<T>`](https://github.com/rust-lang/rust/blob/20dd6930134d07a5ef90393a040a1594ac8d714c/library/alloc/src/rc.rs#L2671-L2676)\r\n* [`impl<T: ?Sized> AsRef<T> for Arc<T>`](https://github.com/rust-lang/rust/blob/20dd6930134d07a5ef90393a040a1594ac8d714c/library/alloc/src/sync.rs#L2736-L2741)\r\n* [`impl<T: ?Sized + ToOwned> AsRef<T> for Cow<'_, T>`](https://github.com/rust-lang/rust/blob/20dd6930134d07a5ef90393a040a1594ac8d714c/library/alloc/src/borrow.rs#L432-L437)\r\n\r\nAll three are inconsistent with `&`:\r\n\r\n* [`impl<T: ?Sized + AsRef<U>, U: ?Sized> AsRef<U> for &T`](https://github.com/rust-lang/rust/blob/20dd6930134d07a5ef90393a040a1594ac8d714c/library/core/src/convert/mod.rs#L483-L494)\r\n\r\nI think that generic(!) smart pointers such as `Cow`, `Rc`, and `Arc` should behave the same as ordinary shared references in regard to `AsRef`, but they do not. Maybe there is a good reason why this isn't the case. In either case, it's not possible to solve this without breaking a lot of existing code, so I propose:\r\n\r\n* Keeping this issue in mind for future overhaul of std (if ever possible).\r\n* Documenting this issue properly.\r\n\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.64.0-nightly (495b21669 2022-07-03)\r\nbinary: rustc\r\ncommit-hash: 495b216696ccbc27c73d6bdc486bf4621d610f4b\r\ncommit-date: 2022-07-03\r\nhost: x86_64-unknown-freebsd\r\nrelease: 1.64.0-nightly\r\nLLVM version: 14.0.6\r\n```", "closed_by": {"login": "JanBeh", "id": 76393822, "node_id": "MDQ6VXNlcjc2MzkzODIy", "avatar_url": "https://avatars.githubusercontent.com/u/76393822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanBeh", "html_url": "https://github.com/JanBeh", "followers_url": "https://api.github.com/users/JanBeh/followers", "following_url": "https://api.github.com/users/JanBeh/following{/other_user}", "gists_url": "https://api.github.com/users/JanBeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanBeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanBeh/subscriptions", "organizations_url": "https://api.github.com/users/JanBeh/orgs", "repos_url": "https://api.github.com/users/JanBeh/repos", "events_url": "https://api.github.com/users/JanBeh/events{/privacy}", "received_events_url": "https://api.github.com/users/JanBeh/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/98905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/98905/timeline", "performed_via_github_app": null, "state_reason": "not_planned"}