{"url": "https://api.github.com/repos/rust-lang/rust/issues/64099", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/64099/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/64099/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/64099/events", "html_url": "https://github.com/rust-lang/rust/issues/64099", "id": 488297162, "node_id": "MDU6SXNzdWU0ODgyOTcxNjI=", "number": 64099, "title": "A tuple of primitives function parameter is passed via the stack even though the tuple constituents could be passed as registers", "user": {"login": "Arnavion", "id": 1096010, "node_id": "MDQ6VXNlcjEwOTYwMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1096010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arnavion", "html_url": "https://github.com/Arnavion", "followers_url": "https://api.github.com/users/Arnavion/followers", "following_url": "https://api.github.com/users/Arnavion/following{/other_user}", "gists_url": "https://api.github.com/users/Arnavion/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arnavion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arnavion/subscriptions", "organizations_url": "https://api.github.com/users/Arnavion/orgs", "repos_url": "https://api.github.com/users/Arnavion/repos", "events_url": "https://api.github.com/users/Arnavion/events{/privacy}", "received_events_url": "https://api.github.com/users/Arnavion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 123110, "node_id": "MDU6TGFiZWwxMjMxMTA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-linux", "name": "O-linux", "color": "6e6ec0", "default": false, "description": "Operating system: Linux"}, {"id": 55302148, "node_id": "MDU6TGFiZWw1NTMwMjE0OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-x86_64", "name": "O-x86_64", "color": "6e6ec0", "default": false, "description": "Target: x64 processors"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-02T19:14:10Z", "updated_at": "2021-08-17T22:14:04Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "1.36.0 x86_64-unknown-linux-gnu\r\n\r\n---\r\n\r\n```rust\r\n#[inline(never)]\r\npub fn foo((a, b, c, d): (usize, usize, usize, usize)) -> ((usize, usize), (usize, usize)) {\r\n    if a == 0 {\r\n        ((0, b), (0, d))\r\n    }\r\n    else {\r\n        ((a, b), (c, d))\r\n    }\r\n}\r\n\r\npub fn bar() {\r\n    foo((1, 2, 3, 4));\r\n}\r\n```\r\n\r\npasses the tuple via the stack\r\n\r\n```asm\r\nexample::bar:\r\n        sub     rsp, 72\r\n        movaps  xmm0, xmmword ptr [rip + .LCPI1_0]\r\n        movaps  xmmword ptr [rsp], xmm0\r\n        movaps  xmm0, xmmword ptr [rip + .LCPI1_1]\r\n        movaps  xmmword ptr [rsp + 16], xmm0\r\n        lea     rdi, [rsp + 40]\r\n        mov     rsi, rsp\r\n        call    qword ptr [rip + example::foo@GOTPCREL]\r\n        add     rsp, 72\r\n        ret\r\n```\r\n\r\nHowever if the function has four `usize` parameters, they're passed via registers.\r\n\r\n```rust\r\n#[inline(never)]\r\npub fn foo(a: usize, b: usize, c: usize, d: usize) -> ((usize, usize), (usize, usize)) {\r\n    if a == 0 {\r\n        ((0, b), (0, d))\r\n    }\r\n    else {\r\n        ((a, b), (c, d))\r\n    }\r\n}\r\n```\r\n\r\n```asm\r\nexample::bar:\r\n        sub     rsp, 40\r\n        lea     rdi, [rsp + 8]\r\n        mov     esi, 1\r\n        mov     edx, 2\r\n        mov     ecx, 3\r\n        mov     r8d, 4\r\n        call    qword ptr [rip + example::foo@GOTPCREL]\r\n        add     rsp, 40\r\n        ret\r\n```\r\n\r\nIt would be nice if the tuple case also used registers.\r\n\r\n---\r\n\r\nPerhaps related to / same as https://github.com/rust-lang/rust/issues/63244 . The tuple-taking `foo` has an aggregate parameter, and making multi-constituent tuples transparent (as suggested there) would help?\r\n\r\nTuple-taking `foo`:\r\n\r\n```\r\ndefine void @_ZN7example3foo17hffb69e1018702615E({ [0 x i64], { i64, i64 }, [0 x i64], { i64, i64 }, [0 x i64] }* noalias nocapture sret dereferenceable(32), { [0 x i64], i64, [0 x i64], i64, [0 x i64], i64, [0 x i64], i64, [0 x i64] }* noalias nocapture readonly dereferenceable(32) %arg0) unnamed_addr #0 !dbg !5 {\r\n```\r\n\r\nvs four-parameter `foo`:\r\n\r\n```\r\ndefine void @_ZN7example3foo17hb403de2e6269ef77E({ [0 x i64], { i64, i64 }, [0 x i64], { i64, i64 }, [0 x i64] }* noalias nocapture sret dereferenceable(32), i64 %a, i64 %b, i64 %c, i64 %d) unnamed_addr #0 !dbg !5 {\r\n```\r\n\r\n---\r\n\r\nI discovered this with a `fn (Option<(NonNull<FatPointer>, NonNull<FatPointer>)>) -> (Option<NonNull<FatPointer>>, Option<NonNull<FatPointer>>)`. So I can't just rewrite this to use four separate parameters.\r\n\r\nThe two `usize` cases and the `Option` case are in [this godbolt](https://rust.godbolt.org/z/Up5SHj) for reference.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/64099/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/64099/timeline", "performed_via_github_app": null, "state_reason": null}