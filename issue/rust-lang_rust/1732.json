{"url": "https://api.github.com/repos/rust-lang/rust/issues/1732", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/1732/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/1732/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/1732/events", "html_url": "https://github.com/rust-lang/rust/issues/1732", "id": 3063768, "node_id": "MDU6SXNzdWUzMDYzNzY4", "number": 1732, "title": "Rust functions that can be called from C", "user": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36953, "node_id": "MDU6TGFiZWwzNjk1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-runtime", "name": "A-runtime", "color": "f7e101", "default": false, "description": "Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"}, {"id": 36996, "node_id": "MDU6TGFiZWwzNjk5Ng==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-easy", "name": "E-easy", "color": "02e10c", "default": false, "description": "Call for participation: Experience needed to fix: Easy / not much (good first issue)"}, {"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}, {"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}], "state": "closed", "locked": false, "assignee": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/rust-lang/rust/milestones/5", "html_url": "https://github.com/rust-lang/rust/milestone/5", "labels_url": "https://api.github.com/repos/rust-lang/rust/milestones/5/labels", "id": 75280, "node_id": "MDk6TWlsZXN0b25lNzUyODA=", "number": 5, "title": "0.2 release, detail work, cleanup and performance", "description": "", "creator": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 61, "state": "closed", "created_at": "2012-01-20T02:48:39Z", "updated_at": "2013-03-14T18:46:37Z", "due_on": "2012-03-23T07:00:00Z", "closed_at": "2012-03-29T03:54:45Z"}, "comments": 16, "created_at": "2012-02-02T06:06:18Z", "updated_at": "2016-07-14T19:53:31Z", "closed_at": "2012-02-14T19:49:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We have a lot of scenarios now where people creating bindings want to be able to provide a callback that a C function can call. The current solution is to write a native C function that uses some unspecified internal APIs to send a message back to Rust code. Ideally it involves writing no C code.\n\nHere is a minimal solution for creating functions in Rust that can be called from C code. The gist is: 1) we have yet another kind of function declaration, 2) this function cannot be called from Rust code, 3) it's value can be taken as an opaque unsafe pointer, 4) it bakes in the stack switching magic and adapts from the C ABI to the Rust ABI.\n\nDeclarations of C-to-Rust (crust) functions:\n\n```\ncrust fn callback(a: *whatever) {\n}\n```\n\nGetting an unsafe pointer to a C ABI function:\n\n```\nlet callbackptr: *u8 = callback;\n```\n\nWe could also define some type specifically for this purpose.\n## Compiler implementation:\n\nIt's mostly straightforward, but trans gets ugly. In trans we will need to do basically the opposite of what we do for native mod functions:\n- Generate a C ABI function using the declared signature\n- Generate a shim function that takes the C arguments in a struct\n- The C function stuffs the arguments into a struct\n- The C function calls upcall_call_shim_on_rust_stack with the struct of arguments and the address of the shim function\n- Generate a Rust ABI function using the declared signature\n- The shim function pulls the arguments out of the struct and calls the Rust function\n## Runtime implementation:\n\nThe runtime has to change in a few ways to make this happen:\n- A new upcall for switching back to the Rust stack\n- Tasks need to maintain a stack of Rust contexts and C contexts\n- Needs a strategy to deal with failure after reentering the Rust stack\n- Needs a strategy to deal with yielding after reentering the Rust stack\n### Failure:\n\nWe can't simply throw an exception after reentering the Rust stack because there's no guarantee the native code can be unwound with C++ exceptions. The Go language apparently will just skip over all the native frames in this scenario, leaking everything along the way. We, instead will abort - if the user want's to avoid catastrophic failure they should use their Rust callback to dispatch a message and immediately return.\n### Yielding:\n\nWithout changes to the way we handle C stacks we cannot allow Rust functions to context-switch to the scheduler after reentering the Rust stack from C code. I see two solutions:\n\n1) Yielding is different after reentering the Rust stack and simply blocks. Tasks that want to do this should make sure they have their own scheduler (#1721).\n2) Instead of running native code using the scheduler's stack, tasks will check out C stacks from a pool located in each scheduler. Each time a task reenters the C stack it will check if it already has one and reuse it, otherwise it will request a new one from the scheduler. This would allow Rust code to always yield normally without tying up the scheduler.\n\nI prefer the second option.\n\nSee also #1508\n", "closed_by": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/1732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/1732/timeline", "performed_via_github_app": null, "state_reason": "completed"}