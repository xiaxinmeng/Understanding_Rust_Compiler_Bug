{"url": "https://api.github.com/repos/rust-lang/rust/issues/56812", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/56812/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/56812/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/56812/events", "html_url": "https://github.com/rust-lang/rust/issues/56812", "id": 391085146, "node_id": "MDU6SXNzdWUzOTEwODUxNDY=", "number": 56812, "title": "Why is jemalloc linked to rustc by default *only* via CI?", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 129836139, "node_id": "MDU6TGFiZWwxMjk4MzYxMzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-allocators", "name": "A-allocators", "color": "f7e101", "default": false, "description": "Area: Custom and system allocators"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 593503757, "node_id": "MDU6TGFiZWw1OTM1MDM3NTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-infra", "name": "T-infra", "color": "bfd4f2", "default": false, "description": "Relevant to the infrastructure team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-12-14T12:05:51Z", "updated_at": "2019-09-03T18:06:53Z", "closed_at": "2019-09-03T18:05:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Spawned off of https://github.com/rust-lang/rust/issues/56736#issuecomment-447297698\r\n\r\nExecutive summary: I want the out of the box experience for a locally-built `rustc` (assuming one has optimizations on and debug off) to be as close as possible to what you get from the CI-built distribution of `rustc`.\r\n\r\nWith respect to jemalloc, the above goals means we should either: 1. turn `rustc.jemalloc` on by default in the build config, *or* 2. turn `rustc.jemalloc` off in the CI (after perhaps evaluating whether the CI can use a newer glibc, which [I hear may have](https://github.com/rust-lang/rust/issues/36963#issuecomment-393726994) performance more comparable to what jemalloc achieves).\r\n\r\nHowever, it may be that others disagree with my overall goal (about out-of-the-box experience), and that there is never any substitute for finding out what the actual `configure` arguments are for one's platform. (In which case I think we should revise the [rustc-guide](https://github.com/rust-lang/rustc-guide) to more prominently feature how one inspects the .yml files to find the configure arguments for a platform. Yuck.)\r\n\r\nMore explanation/discussion follows below.\r\n\r\n----\r\n\r\nAs of PR #55238 (resolving issue #36963), builds of `rustc` stopped linking in `jemalloc` by default; *however*, if I am correctly reading the documentation and commit messages of that PR, the `rustc` built via CI *opts back into* having `jemalloc` linked to `rustc` (on Linux or Mac OS X). (and thus the nightly you get via `rustup` or otherwise downloading CI-built executables will link to `jemalloc`). \r\n\r\nIts a pretty confusing situation, in my opinion, since attempts to locally replicate the behavior described here via a local build of `rustc` would need to turn that flag back on.\r\n\r\n(Also: the CI's opting back into using `jemalloc` affects not just the nightly builds but also the beta and stable ones......?)\r\n\r\nOn the aforementioned comment thread, @gnzlbg added:\r\n\r\n> IIUC the _intent_ was for `rustc` to always depend on `jemalloc` by default, since that was the status-quo before that change, but to allow people to build it without `jemalloc`, e.g., if they want to use it in a system where `jemalloc` is not available.  It might be that this did not fully materialize.\r\n\r\n----\r\n\r\nSo at first my question was: Why do we not just make `rustc.jemalloc` true by default?\r\n\r\nBut then I reviewed PR #55238, and I think I might have found the answer to that question:\r\n * We definitely do not want to link in `jemalloc` on platforms other than Linux/OSX by default.\r\n * I had originally thought that the semantics of `rustc.jemalloc` was that it had no effect *unless* you were on Linux/OSX.\r\n * But after reviewing the PR, I am now thinking that while the correctness of code of [code like this](https://github.com/rust-lang/rust/pull/55238/files#diff-707a0eda6b2f1a0537abc3d23133748cR67) is dependent on being on either Linux or Mac OS X, that does not mean such code behaves as a no-op on other platforms.\r\n * Therefore, the way things currently stand, achieving my goal of parity-with-CI-by-default will not accomplished by simply making `rustc.jemalloc` true by default. I think we would have to also \"fix\" things so that  that flag also behaves as a no-op on platforms other than Linux or Mac OS X.\r\n\r\n----\r\n\r\nHaving said all that: I want the out of the box experience for a locally-built `rustc` (assuming one has optimizations on and debug off) to be as close as possible to what the CI gives you. I assume that others see the value in that objective...?", "closed_by": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/56812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/56812/timeline", "performed_via_github_app": null, "state_reason": "completed"}