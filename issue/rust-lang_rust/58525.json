{"url": "https://api.github.com/repos/rust-lang/rust/issues/58525", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58525/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58525/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58525/events", "html_url": "https://github.com/rust-lang/rust/issues/58525", "id": 411129382, "node_id": "MDU6SXNzdWU0MTExMjkzODI=", "number": 58525, "title": "Poor suggestions wrt closure type/lifetime inference", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 604454086, "node_id": "MDU6TGFiZWw2MDQ0NTQwODY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-inference", "name": "A-inference", "color": "f7e101", "default": false, "description": "Area: Type inference"}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596122811, "node_id": "MDU6TGFiZWwxNTk2MTIyODEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-newcomer-roadblock", "name": "D-newcomer-roadblock", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error hard to understand for new users"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-17T00:00:39Z", "updated_at": "2020-06-11T17:35:07Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the following code:\r\n\r\n```\r\nfn main() {\r\n    let cl = |x| { x.split_at(0) };\r\n    let (_x, _y) = cl(\"42\");\r\n}\r\n```\r\n\r\nrustc suggests:\r\n```\r\n3 |     let cl = |x| { x.split_at(0) };\r\n  |               ^ consider giving this closure parameter a type\r\n```\r\n\r\nUnfortunately, specifying a closure parameter type casts the user from the frying pan into the fire:\r\n```\r\nerror[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\r\n --> src/main.rs:3:27\r\n  |\r\n3 |     let cl = |x:&str| { x.split_at(0) };\r\n  |                           ^^^^^^^^\r\n  |\r\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 3:14...\r\n --> src/main.rs:3:14\r\n  |\r\n3 |     let cl = |x:&str| { x.split_at(0) };\r\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnote: ...so that reference does not outlive borrowed content\r\n --> src/main.rs:3:25\r\n  |\r\n3 |     let cl = |x:&str| { x.split_at(0) };\r\n  |                         ^\r\nnote: but, the lifetime must be valid for the call at 4:20...\r\n --> src/main.rs:4:20\r\n  |\r\n4 |     let (_x, _y) = cl(\"42\");\r\n  |                    ^^^^^^^^\r\nnote: ...so type `(&str, &str)` of expression is valid during the expression\r\n --> src/main.rs:4:20\r\n  |\r\n4 |     let (_x, _y) = cl(\"42\");\r\n  |                    ^^^^^^^^\r\n```\r\n\r\nHelpful contributors on #rust-beginners found https://github.com/rust-lang/rust/issues/55526 https://github.com/rust-lang/rust/issues/56537 and the following simple workaround:\r\n\r\n```\r\nfn main() {\r\n    let cl = |x| { let x : &str = x; x.split_at(0) };\r\n    let (_x, _y) = cl(\"42\");\r\n}\r\n```\r\n\r\nThe underlying problem with lifetime inference in closures seems quite tricky and I guess it will remain like this for a while.\r\n\r\nUnder the circumstances, it would be nice if the compiler could make more helpful suggestions, including the trick with the let binding to nail the type.\r\n\r\nSomething like this maybe:\r\n\r\n> Consider removing the type specification for this closure parameter to allow lifetime inference.  If the type specification is needed within the closure, a binding  let VAR : TYPE = VAR  at the start of the closure may help.\r\n\r\n(for outputting, in addition to the other messages, in the more complicated lifetime problem case)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58525/timeline", "performed_via_github_app": null, "state_reason": null}