{"url": "https://api.github.com/repos/rust-lang/rust/issues/85429", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/85429/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/85429/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/85429/events", "html_url": "https://github.com/rust-lang/rust/issues/85429", "id": 894015576, "node_id": "MDU6SXNzdWU4OTQwMTU1NzY=", "number": 85429, "title": "Fingerprints not matching", "user": {"login": "myz-dev", "id": 62795612, "node_id": "MDQ6VXNlcjYyNzk1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/62795612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myz-dev", "html_url": "https://github.com/myz-dev", "followers_url": "https://api.github.com/users/myz-dev/followers", "following_url": "https://api.github.com/users/myz-dev/following{/other_user}", "gists_url": "https://api.github.com/users/myz-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/myz-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myz-dev/subscriptions", "organizations_url": "https://api.github.com/users/myz-dev/orgs", "repos_url": "https://api.github.com/users/myz-dev/repos", "events_url": "https://api.github.com/users/myz-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/myz-dev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-05-18T06:30:16Z", "updated_at": "2021-05-19T09:10:47Z", "closed_at": "2021-05-19T09:09:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nthe compiler asked me to provide this bug report so I hope I can provide some useful information:\r\nI boiled the code down to:\r\n\r\n### Code\r\n\r\n```Rust\r\nmod udp;\r\nconst INTERNAL_UDP_COMM_LOCAL_ADDR: &str = \"127.0.0.1:14555\";\r\nconst INTERNAL_UDP_COMM_REMOTE_ADDR: &str = \"127.0.0.1:14556\";\r\nconst INTERNAL_UDP_COMM_REMOTE_PORT_NO: u16 = 14556;\r\n\r\nfn send_table() -> String {\r\n    let mut send_buf = [0; 250];\r\n    let mut i: u8 = 0;\r\n    for n in 0..250 {\r\n        send_buf[n] = i;\r\n        i = i + 1;\r\n    }\r\n    let udp_sender = match udp::UdpComm::new(\r\n        &INTERNAL_UDP_COMM_LOCAL_ADDR,\r\n        INTERNAL_UDP_COMM_REMOTE_ADDR.to_string(),\r\n        false,\r\n        true,\r\n    ) {\r\n        Some(c) => c,\r\n        None => {\r\n            eprintln! {\"ERROR! Could not create UdpComm object!\"};\r\n            return \"ERROR! Could not create UdpComm object!\".to_string();\r\n        }\r\n    };\r\n    use std::net::{IpAddr, Ipv4Addr, SocketAddr};\r\n    let remote_socket = SocketAddr::new(\r\n        IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)),\r\n        INTERNAL_UDP_COMM_REMOTE_PORT_NO,\r\n    );\r\n\r\n    let sent = udp_sender.sendto(&send_buf, remote_socket);\r\n    println!(\"Sent out {} bytes!\", sent);\r\n    return \"Send OK\".to_string();\r\n}\r\n\r\n\r\nfn main() {\r\n        let some_string = send_table();\r\n        println!(\"{}\", some_string);\r\n}\r\n\r\n//udp file\r\nuse std::net::UdpSocket;\r\n\r\npub struct UdpComm {\r\n    _local_address: &'static str,\r\n    _remote_address: String,\r\n    verbose: bool,\r\n    pub socket: UdpSocket,\r\n}\r\n\r\nconst INVALID_IP: (u8, u8, u8, u8) = (0, 0, 0, 0);\r\nconst INVALID_PORT: u16 = 0;\r\n\r\nimpl UdpComm {\r\n    /// creates new isntance of UdpComm\r\n    /// can be blocking or not blocking\r\n    /// # Arguments\r\n    /// * 'local_addr' - pass like \"127.0.0.1:6547\"\r\n    /// * 'remote_addr' - pass like \"127.0.0.1:6548\"\r\n    /// * 'is_not_blocking' - determines behaviour of the socket\r\n    /// # Examples\r\n    /// ```rust\r\n    /// let somestr = \"127.0.0.1:34254\";\r\n    /// let my_comm = match UdpComm::new(somestr, \"not used\".to_string(), true) {\r\n    ///    Some(c) => c,\r\n    ///    None => {\r\n    ///        eprintln! {\"ERROR! Could not create UdpComm object!\"};\r\n    ///        return Ok(());\r\n    ///    }\r\n    /// };\r\n    /// let mut buf = [0; 10];\r\n    /// let (len, src) = my_comm.socket.recv_from(&mut buf)?;\r\n    /// ```\r\n    pub fn new(\r\n        local_addr: &'static str,\r\n        remote_addr: String,\r\n        debug_output: bool,\r\n        is_not_blocking: bool,\r\n    ) -> Option<UdpComm> {\r\n        match UdpSocket::bind(local_addr) {\r\n            Ok(the_socket) => {\r\n                Some(UdpComm {\r\n                    _local_address: local_addr,\r\n                    _remote_address: remote_addr,\r\n                    verbose: debug_output,\r\n                    socket: {\r\n                        match the_socket.set_nonblocking(is_not_blocking) {\r\n                        Ok(_) => println!(\"OK!\"),\r\n                        Err(e) => println!(\"Error while trying to set the socket blocking mode to {:?}. Error: {}\", is_not_blocking, e),\r\n                    }\r\n                        the_socket\r\n                    },\r\n                })\r\n            }\r\n            Err(_) => None,\r\n        }\r\n    }\r\n    pub fn sendto(&self, buf: &[u8], addr: std::net::SocketAddr) -> usize {\r\n        use std::net::{IpAddr, Ipv4Addr};\r\n        // check if the socket is invalid\r\n        if addr.ip()\r\n            == IpAddr::V4(Ipv4Addr::new(\r\n                INVALID_IP.0,\r\n                INVALID_IP.1,\r\n                INVALID_IP.2,\r\n                INVALID_IP.3,\r\n            ))\r\n            && addr.port() == INVALID_PORT\r\n        {\r\n            return 0;\r\n        }\r\n        let mut ret: usize = 0;\r\n\r\n        match self.socket.send_to(buf, &addr) {\r\n            Ok(u) => ret = u,\r\n            Err(e) => {\r\n                if self.verbose {\r\n                    eprintln!(\"Error when sending: {:?}\", e)\r\n                };\r\n            }\r\n        }\r\n        ret\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.53.0-nightly (42816d61e 2021-04-24)\r\nbinary: rustc\r\ncommit-hash: 42816d61ead7e46d462df997958ccfd514f8c21c\r\ncommit-date: 2021-04-24\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.53.0-nightly\r\nLLVM version: 12.0.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nthread 'rustc' panicked at 'assertion failed: `(left == right)`\r\n  left: `Some(Fingerprint(16583452399460452482, 11050759427754160152))`,\r\n right: `Some(Fingerprint(15134842177790262924, 9594111019284992043))`: found unstable fingerprints for predicates_of(core[ec89]::iter::traits::collect::IntoIterator): GenericPredicates { parent: None, predicates: [(Binder(TraitPredicate(<Self as std::iter::IntoIterator>), []), /home/myz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs:202:1: 202:23 (#0))] }', /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/compiler/rustc_query_system/src/query/plumbing.rs:593:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.53.0-nightly (42816d61e 2021-04-24) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [predicates_of] computing predicates of `std::iter::IntoIterator`\r\n#1 [typeck] type-checking `send_table`\r\nend of query stack\r\nerror: could not compile `web_test`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nthread 'rustc' panicked at 'assertion failed: `(left == right)`\r\n  left: `Some(Fingerprint(16583452399460452482, 11050759427754160152))`,\r\n right: `Some(Fingerprint(15134842177790262924, 9594111019284992043))`: found unstable fingerprints for predicates_of(core[ec89]::iter::traits::collect::IntoIterator): GenericPredicates { parent: None, predicates: [(Binder(TraitPredicate(<Self as std::iter::IntoIterator>), []), /home/myz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs:202:1: 202:23 (#0))] }', /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/compiler/rustc_query_system/src/query/plumbing.rs:593:5\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/panicking.rs:493:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/core/src/panicking.rs:92:14\r\n   2: core::panicking::assert_failed_inner\r\n   3: core::panicking::assert_failed\r\n   4: rustc_query_system::query::plumbing::incremental_verify_ich\r\n   5: rustc_query_system::query::plumbing::load_from_disk_and_cache_in_memory\r\n   6: rustc_query_system::query::plumbing::get_query_impl\r\n   7: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::predicates_of\r\n   8: rustc_middle::ty::generics::GenericPredicates::instantiate_into\r\n   9: rustc_middle::ty::generics::GenericPredicates::instantiate\r\n  10: rustc_typeck::check::fn_ctxt::_impl::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::instantiate_bounds\r\n  11: rustc_typeck::check::fn_ctxt::_impl::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::add_required_obligations\r\n  12: rustc_typeck::check::fn_ctxt::_impl::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::resolve_lang_item_path\r\n  13: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind\r\n  14: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation\r\n  15: rustc_typeck::check::callee::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_call\r\n  16: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind\r\n  17: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation\r\n  18: rustc_typeck::check::_match::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::demand_scrutinee_type\r\n  19: rustc_typeck::check::_match::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_match\r\n  20: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind\r\n  21: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation\r\n  22: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation\r\n  23: rustc_typeck::check::fn_ctxt::checks::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_stmt\r\n  24: rustc_typeck::check::fn_ctxt::checks::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_block_with_expected\r\n  25: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation\r\n  26: rustc_typeck::check::expr::<impl rustc_typeck::check::fn_ctxt::FnCtxt>::check_return_expr\r\n  27: rustc_typeck::check::check::check_fn\r\n  28: rustc_infer::infer::InferCtxtBuilder::enter\r\n  29: rustc_typeck::check::typeck\r\n  30: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  31: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  32: rustc_data_structures::stack::ensure_sufficient_stack\r\n  33: rustc_query_system::query::plumbing::force_query_with_job\r\n  34: rustc_query_system::query::plumbing::get_query_impl\r\n  35: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck\r\n  36: rustc_middle::ty::<impl rustc_middle::ty::context::TyCtxt>::par_body_owners\r\n  37: rustc_typeck::check::typeck_item_bodies\r\n  38: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  39: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  40: rustc_data_structures::stack::ensure_sufficient_stack\r\n  41: rustc_query_system::query::plumbing::force_query_with_job\r\n  42: rustc_query_system::query::plumbing::get_query_impl\r\n  43: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::typeck_item_bodies\r\n  44: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  45: rustc_typeck::check_crate\r\n  46: rustc_interface::passes::analysis\r\n  47: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  48: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  49: rustc_data_structures::stack::ensure_sufficient_stack\r\n  50: rustc_query_system::query::plumbing::force_query_with_job\r\n  51: rustc_query_system::query::plumbing::get_query_impl\r\n  52: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  53: rustc_interface::passes::QueryContext::enter\r\n  54: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  55: rustc_span::with_source_map\r\n  56: rustc_interface::interface::create_compiler_and_run\r\n  57: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.53.0-nightly (42816d61e 2021-04-24) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [predicates_of] computing predicates of `std::iter::IntoIterator`\r\n#1 [typeck] type-checking `send_table`\r\n#2 [typeck_item_bodies] type-checking all item bodies\r\n#3 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: could not compile `web_test`\r\n\r\nTo learn more, run the command again with --verbose.\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/85429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/85429/timeline", "performed_via_github_app": null, "state_reason": "completed"}