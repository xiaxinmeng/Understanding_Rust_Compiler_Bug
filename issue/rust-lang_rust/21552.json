{"url": "https://api.github.com/repos/rust-lang/rust/issues/21552", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21552/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21552/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21552/events", "html_url": "https://github.com/rust-lang/rust/issues/21552", "id": 55305662, "node_id": "MDU6SXNzdWU1NTMwNTY2Mg==", "number": 21552, "title": "Changing mutability causes strange lifetime errors", "user": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-01-23T17:02:47Z", "updated_at": "2015-01-23T17:39:45Z", "closed_at": "2015-01-23T17:39:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is going to be a big bug with a lot of different examples, but we came across this by discussing on an error with @kimundi on IRC, and couldn't decide if it was the same bug or different ones. So I hope someone will be able to see what's the logic in this.\n\nSo first let's look at this simple example:\n\n``` rust\nstruct Foo<'a> {\n    r: &'a mut u32\n}\n\nimpl<'a> Foo<'a> {\n    fn get<'b>(&'b self) -> &'a u32 {\n        &*self.r\n    }\n}\n\nfn foo<'x>(foo: Foo<'x>) {\n    foo.get();\n}\n\nfn main() {\n    let f = Foo { r: &mut 0 };\n    foo(f);\n}\n```\n\nIn this case when calling `vec` from `foo`, the `'a` lifetime clearly corresponds to `'x`, so the compiler should allow it to do a borrow of the integer that lasts at most `'x`. But it doesn't. Replacing `'a` by `'b` in the return type works, but looks too restrictive.\n\n```\n<anon>:7:9: 7:21 error: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n<anon>:7         &mut *self.r\n                 ^~~~~~~~~~~~\n<anon>:6:5: 8:6 help: consider using an explicit lifetime parameter as shown: fn get(&'a mut self) -> &'a mut u32\n<anon>:6     fn get<'b>(&'b mut self) -> &'a mut u32 {\n<anon>:7         &mut *self.r\n<anon>:8     }\nerror: aborting due to previous error\n```\n\nWhat's really strange here is that if you remove the `mut` annotation on `r`, it works. So not only we've got a lifetime error that changes with mutability but it depends on the mutability of the contained borrow, not of the returned borrow. (Leaving the `mut`s and making `vec` take a `&'b mut self` and returns a `&'a mut u32` yields the same error.\n\nProbably related, I originally had a case where the lifetime of `self` was defined to be the same as the lifetime parameter of the structure, like:\n\n``` rust\nstruct Foo<'a> {\n    r: &'a mut u32\n}\n\nimpl<'a> Foo<'a> {\n    fn get(&'a mut self) -> &'a mut u32 {\n        &mut *self.r\n    }\n}\n```\n\nIn this case, we get a lifetime error at call site:\n\n```\n<anon>:12:5: 12:8 error: `foo` does not live long enough\n<anon>:12     foo.get();\n              ^~~\n<anon>:11:26: 13:2 note: reference must be valid for the lifetime 'x as defined on the block at 11:25...\n<anon>:11 fn foo<'x>(foo: Foo<'x>) {\n<anon>:12     foo.get();\n<anon>:13 }\n<anon>:11:26: 13:2 note: ...but borrowed value is only valid for the block at 11:25\n<anon>:11 fn foo<'x>(foo: Foo<'x>) {\n<anon>:12     foo.get();\n<anon>:13 }\nerror: aborting due to previous error\n```\n\nHere, it will work if you remove the `mut`s annotations, this time _not on the structure_ but _on the function_, like this:\n\n``` rust\n    fn get(&'a self) -> &'a u32 { ... } // this one works\n```\n\nWe're not sure if the `mut` case should be accepted, or if both cases should be rejected (obviously with a better error mesggae... ).\n\nI hope this issue is clear enough...\ncc @kimundi, it you want to elaborate more on this.\n", "closed_by": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21552/timeline", "performed_via_github_app": null, "state_reason": "completed"}