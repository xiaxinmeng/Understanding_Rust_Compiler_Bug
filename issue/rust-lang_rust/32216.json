{"url": "https://api.github.com/repos/rust-lang/rust/issues/32216", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32216/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32216/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32216/events", "html_url": "https://github.com/rust-lang/rust/issues/32216", "id": 140402564, "node_id": "MDU6SXNzdWUxNDA0MDI1NjQ=", "number": 32216, "title": "Weird Debug trait constraint when using associated type", "user": {"login": "Twinside", "id": 168874, "node_id": "MDQ6VXNlcjE2ODg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/168874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Twinside", "html_url": "https://github.com/Twinside", "followers_url": "https://api.github.com/users/Twinside/followers", "following_url": "https://api.github.com/users/Twinside/following{/other_user}", "gists_url": "https://api.github.com/users/Twinside/gists{/gist_id}", "starred_url": "https://api.github.com/users/Twinside/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Twinside/subscriptions", "organizations_url": "https://api.github.com/users/Twinside/orgs", "repos_url": "https://api.github.com/users/Twinside/repos", "events_url": "https://api.github.com/users/Twinside/events{/privacy}", "received_events_url": "https://api.github.com/users/Twinside/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-12T17:44:03Z", "updated_at": "2016-03-13T08:04:28Z", "closed_at": "2016-03-13T08:04:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using the (reduced) code below, I don't understand why B needs to implement the Debug trait, as we are only interested in the Debug trait for the associated type Bar::Bartype, and Bar doesn't even appear in the output if we add the Debug constraint and derivation to it.\n\nRustc emmits the following error messages:\n\n```\nminmal.rs:42:14: 42:23 error: the trait `core::fmt::Debug` is not implemented for the type `B` [E0277]\nminmal.rs:42 impl<B: Bar> Framework for Dummy<B> {\n                          ^~~~~~~~~\nminmal.rs:42:14: 42:23 help: run `rustc --explain E0277` to see a detailed explanation\nminmal.rs:42:14: 42:23 note: `B` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\nminmal.rs:42:14: 42:23 note: required by `Framework`\n```\n\nAnd here is the listing:\n\n``` .rust\nuse std::fmt::Debug;\n\npub trait Bar {\n    /// Only real interesting point here, the associated type\n    type Bartype : Debug;\n    fn neu() -> Self::Bartype;\n}\n\npub trait Framework {\n    /// The important part here is the Debug constraint\n    /// on the associated type\n    type FrameType : Debug;\n    fn do_stuff(&self);\n}\n\n/// uncomment next line to make it compile\n// #[derive(Debug)]\nstruct ABar { dummy: u32 }\nimpl Bar for ABar {\n    type Bartype = u32;\n    fn neu() -> Self::Bartype { 0 as u32 }\n}\n\n\nstruct Dummy<B : Bar> { dummy: B::Bartype }\n\nimpl<B:Bar> Dummy<B> {\n    fn new() -> Dummy<B> {\n        Dummy { dummy: B::neu() }\n    }\n}\n\n/// If a real Debug constraint would by required, it would\n/// be nice to get the error here.\n#[derive(Debug)]\nstruct Foo<B : Bar> { a_field: B::Bartype }\n\nimpl<B:Bar> Foo<B> {\n    fn new() -> Foo<B> {\n        Foo { a_field: B::neu() }\n    }\n}\n\n/// Why does B needs the Debug trait?\n/// uncomment + Debug to make it compile\nimpl<B: Bar /* + Debug */> Framework for Dummy<B> {\n    type FrameType = Foo<B>;\n\n    fn do_stuff(&self) {\n        print!(\"{:?}\", Foo::<B>::new())\n    }\n}\n\nfn main() {\n    let dumm = Dummy::<ABar>::new();\n    dumm.do_stuff();\n    print!(\"\\n{:?}\\n\", dumm.dummy)\n}\n```\n\nI would expect that the B parameter of Dummy didn't require the instantiation of the Debug trait for it, as the associated type clearly has the Debug contraint on it.\n## Meta\n\n```\nrustc 1.7.0 (a5d1e7a59 2016-02-29)                    \nbinary: rustc                                         \ncommit-hash: a5d1e7a59a2a3413c377b003075349f854304b5e \ncommit-date: 2016-02-29                               \nhost: x86_64-pc-windows-gnu                           \nrelease: 1.7.0                                        \n```\n", "closed_by": {"login": "Twinside", "id": 168874, "node_id": "MDQ6VXNlcjE2ODg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/168874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Twinside", "html_url": "https://github.com/Twinside", "followers_url": "https://api.github.com/users/Twinside/followers", "following_url": "https://api.github.com/users/Twinside/following{/other_user}", "gists_url": "https://api.github.com/users/Twinside/gists{/gist_id}", "starred_url": "https://api.github.com/users/Twinside/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Twinside/subscriptions", "organizations_url": "https://api.github.com/users/Twinside/orgs", "repos_url": "https://api.github.com/users/Twinside/repos", "events_url": "https://api.github.com/users/Twinside/events{/privacy}", "received_events_url": "https://api.github.com/users/Twinside/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32216/timeline", "performed_via_github_app": null, "state_reason": "completed"}