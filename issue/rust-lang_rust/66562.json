{"url": "https://api.github.com/repos/rust-lang/rust/issues/66562", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/66562/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/66562/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/66562/events", "html_url": "https://github.com/rust-lang/rust/issues/66562", "id": 525305154, "node_id": "MDU6SXNzdWU1MjUzMDUxNTQ=", "number": 66562, "title": "rustc recommends a trait from a crate the current crate doesn't depend on", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1183099971, "node_id": "MDU6TGFiZWwxMTgzMDk5OTcx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-suggestion-diagnostics", "name": "A-suggestion-diagnostics", "color": "f7e101", "default": false, "description": "Area: suggestions generated by the compiler applied by cargo fix"}, {"id": 1596299768, "node_id": "MDU6TGFiZWwxNTk2Mjk5NzY4", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-invalid-suggestion", "name": "D-invalid-suggestion", "color": "c9f7a3", "default": false, "description": "A structured suggestion resulting in incorrect code"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-19T22:27:39Z", "updated_at": "2019-11-20T07:28:31Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I ran into this in a crate that depends directly on `anyhow`, and depends very indirectly on `quick-error`. When trying to use the `context` method, in a case that wouldn't work with `anyhow` because the error type didn't implement Error, rustc said:\r\n\r\n```\r\nhelp: the following trait is implemented but not in scope, perhaps add a `use` for it:\r\n   |\r\n1  | use quick_error::ResultExt;\r\n   |\r\n```\r\n\r\nHowever, since the crate doesn't directly depend on `quick-error`, it can't add such a `use`.\r\n\r\nRough steps to reproduce:\r\n\r\n- Have a top-level binary crate that depends on library crates `c1` and `c2`\r\n- Have crate `c1` provide an extension trait with some requirements (such an extension trait on `Result` that places requirements on the error type).\r\n- Have crate `c2` depend on crate `c3`.\r\n- Have crate `c3` provide an extension trait that works on any type.\r\n- Have the top-level binary crate import the extension trait from `c1`, and attempt to use it, but not satisfy the required trait bounds.\r\n\r\nThis should result in rustc suggesting `use c3::ExtensionTrait` for use in the top-level binary crate, even though the top-level binary crate doesn't depend on `c3`.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/66562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/66562/timeline", "performed_via_github_app": null, "state_reason": null}