{"url": "https://api.github.com/repos/rust-lang/rust/issues/51405", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/51405/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/51405/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/51405/events", "html_url": "https://github.com/rust-lang/rust/issues/51405", "id": 330072986, "node_id": "MDU6SXNzdWUzMzAwNzI5ODY=", "number": 51405, "title": "Great stack overflow error messages", "user": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203130, "node_id": "MDU6TGFiZWwyMDMxMzA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-debuginfo", "name": "A-debuginfo", "color": "f7e101", "default": false, "description": "Area: Debugging information in compiled programs (DWARF, PDB, etc.)"}, {"id": 2011781731, "node_id": "MDU6TGFiZWwyMDExNzgxNzMx", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs", "name": "T-libs", "color": "bfd4f2", "default": false, "description": "Relevant to the library team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2018-06-07T00:02:58Z", "updated_at": "2023-04-05T17:46:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As a coder \r\nGiven I have a fn main() { main() }\r\nThen I expect the following output:\r\n\r\n```\r\nException in thread \"main\" java.lang.StackOverflowError\r\n\tat X.main(X.java:3)\r\n\tat X.main(X.java:3)\r\n\tat X.main(X.java:3)\r\n\tat X.main(X.java:3)\r\n```\r\n\r\nObviously this is an example of how Java handles stack overflows, but you get the idea.\r\n\r\nThere didn't seem to be a tracking issue for this, so here is one. \r\n(Some discussion here: https://users.rust-lang.org/t/how-to-diagnose-a-stack-overflow-issues-cause/17320/9 )\r\n\r\nI've had a little look and I naively think we need to do something like this in sys_common/util.rs\r\n\r\n```\r\n    #[allow(dead_code)] // stack overflow detection not enabled on all platforms    \r\n    pub unsafe fn report_overflow() {\r\n        dumb_print(format_args!(\"\\nthread '{}' has overflowed its stack\\n\",\r\n                            thread::current().name().unwrap_or(\"<unknown>\")));\r\n\r\n        #[cfg(feature = \"backtrace\")]\r\n        {\r\n            let log_backtrace = backtrace::log_enabled();\r\n\r\n            use sync::atomic::{AtomicBool, Ordering};\r\n\r\n            static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\r\n\r\n            if let Some(format) = log_backtrace {\r\n                if let Ok(mut stderr) = Stderr::new() {\r\n                    let _ = backtrace::print(&mut stderr, format);\r\n                }\r\n            } else if FIRST_PANIC.compare_and_swap(true, false, Ordering::SeqCst) {\r\n                dumb_print(format_args!(\"note: Run with `RUST_BACKTRACE=1` for a backtrace.\"));\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nQuite possibly one can ditch the first panic checks. I'm sure there's lots of concerns here, e.g. have we got enough stack headroom to report without going pop.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/51405/reactions", "total_count": 9, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/51405/timeline", "performed_via_github_app": null, "state_reason": null}