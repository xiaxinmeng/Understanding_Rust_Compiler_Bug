{"url": "https://api.github.com/repos/rust-lang/rust/issues/108532", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/108532/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/108532/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/108532/events", "html_url": "https://github.com/rust-lang/rust/issues/108532", "id": 1601300751, "node_id": "I_kwDOAAsO6M5fcekP", "number": 108532, "title": "From::from call doesn't do reborrowing", "user": {"login": "xTachyon", "id": 16454588, "node_id": "MDQ6VXNlcjE2NDU0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/16454588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xTachyon", "html_url": "https://github.com/xTachyon", "followers_url": "https://api.github.com/users/xTachyon/followers", "following_url": "https://api.github.com/users/xTachyon/following{/other_user}", "gists_url": "https://api.github.com/users/xTachyon/gists{/gist_id}", "starred_url": "https://api.github.com/users/xTachyon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xTachyon/subscriptions", "organizations_url": "https://api.github.com/users/xTachyon/orgs", "repos_url": "https://api.github.com/users/xTachyon/repos", "events_url": "https://api.github.com/users/xTachyon/events{/privacy}", "received_events_url": "https://api.github.com/users/xTachyon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-02-27T14:28:00Z", "updated_at": "2023-04-05T17:39:56Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nstruct NonMovable {\r\n    x: u32,\r\n}\r\nstruct Temp;\r\nimpl From<&mut NonMovable> for Temp {\r\n    fn from(_: &mut NonMovable) -> Self {\r\n        Temp\r\n    }\r\n}\r\npub fn main() {\r\n    let r = &mut NonMovable { x: 10 };\r\n    let _ = Temp::from(r);\r\n    r.x = 10;\r\n}\r\n```\r\n\r\nI expected to see this happen: it compiles.\r\n\r\nInstead, this happened:\r\n```rust\r\n11 |     let r = &mut NonMovable { x: 10 };\r\n   |         - move occurs because `r` has type `&mut NonMovable`, which does not implement the `Copy` trait\r\n12 |     let _ = Temp::from(r);\r\n   |                        - value moved here\r\n13 |     r.x = 10;\r\n   |     ^^^^^^^^ value used here after move\r\n```\r\n\r\n### Meta\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.67.1 (d5a82bbd2 2023-02-07)\r\nbinary: rustc\r\ncommit-hash: d5a82bbd26e1ad8b7401f6a718a9c57c96905483\r\ncommit-date: 2023-02-07\r\nhost: x86_64-pc-windows-msvc\r\nrelease: 1.67.1\r\nLLVM version: 15.0.6\r\n```\r\n\r\nWhat's confusing about this is that if I make a simple function that takes `&mut NonMovable`, or my own `MyFrom` trait, that will do reborrowing, but `From` won't:\r\n```rust\r\nstruct NonMovable {\r\n    x: u32,\r\n}\r\nstruct Temp;\r\npub trait MyFrom<T>: Sized {\r\n    fn my_from(value: T) -> Self;\r\n}\r\nimpl MyFrom<&mut NonMovable> for Temp {\r\n    fn my_from(_: &mut NonMovable) -> Self {\r\n        Temp\r\n    }\r\n}\r\npub fn main() {\r\n    let r = &mut NonMovable { x: 10 };\r\n    let _ = Temp::my_from(r);\r\n    r.x = 10;\r\n}\r\n```\r\n^ this does compile. However, as someone pointed in Discord, if I add this impl (which `From` also has), it gives the same error as the first example:\r\n```rust\r\nimpl<T> MyFrom<T> for T {\r\n    fn my_from(value: T) -> Self {\r\n        value\r\n    }\r\n}\r\n```\r\n\r\nI would've expected reborrowing to work for this example, but it doesn't. If this can't be made to work because reason I don't understand, I would've expected at least a nicer error message.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/108532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/108532/timeline", "performed_via_github_app": null, "state_reason": null}