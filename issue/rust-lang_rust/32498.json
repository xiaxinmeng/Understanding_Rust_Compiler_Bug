{"url": "https://api.github.com/repos/rust-lang/rust/issues/32498", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/32498/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/32498/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/32498/events", "html_url": "https://github.com/rust-lang/rust/issues/32498", "id": 143666495, "node_id": "MDU6SXNzdWUxNDM2NjY0OTU=", "number": 32498, "title": "overflow => generics that produce trans errors depending on type parameters", "user": {"login": "comex", "id": 47517, "node_id": "MDQ6VXNlcjQ3NTE3", "avatar_url": "https://avatars.githubusercontent.com/u/47517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comex", "html_url": "https://github.com/comex", "followers_url": "https://api.github.com/users/comex/followers", "following_url": "https://api.github.com/users/comex/following{/other_user}", "gists_url": "https://api.github.com/users/comex/gists{/gist_id}", "starred_url": "https://api.github.com/users/comex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comex/subscriptions", "organizations_url": "https://api.github.com/users/comex/orgs", "repos_url": "https://api.github.com/users/comex/repos", "events_url": "https://api.github.com/users/comex/events{/privacy}", "received_events_url": "https://api.github.com/users/comex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60329014, "node_id": "MDU6TGFiZWw2MDMyOTAxNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-low", "name": "P-low", "color": "eb6420", "default": false, "description": "Low priority"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 347795552, "node_id": "MDU6TGFiZWwzNDc3OTU1NTI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-specialization", "name": "A-specialization", "color": "f7e101", "default": false, "description": "Area: Trait impl specialization"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-03-26T05:47:12Z", "updated_at": "2023-03-12T13:40:31Z", "closed_at": "2023-03-12T13:40:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In which we sneakily define a type that contains itself:\n\n(EDIT: Actually, this one didn't depend on specialization.  There was previously a default impl of `Tr2` not depending on `Tr`, but it wasn't necessary.  The second one does seem to depend on it.)\n\n``` rust\ntrait Tr {\n    type X;\n}\ntrait Tr2 {\n    type Y;\n}\n\nstruct S<T: ?Sized + Tr> {\n    x: <<T as Tr>::X as Tr2>::Y,\n}\n\nimpl<T: Tr> Tr2 for T {\n    type Y = S<T>;\n}\n\nimpl<T> Tr for T { type X = T; }\n\nfn func<T>() {\n    let _: S<T> = panic!();\n}\n\nfn main() {\n    func::<u32>();\n}\n```\n\nproduces:\n\n> error: overflow representing the type `S<u32>`\n\nThis error comes from trans, and it goes away if either the call to `func` or `func`'s usage of `S<T>` is commented out.  In other words, `func` claims to allow instantiation with any type but actually supports no types.  (By adding more specializations it could be made to support only certain types.)\n\nA similar issue is when overflow occurs while determining whether a given specialization applies:\n\n``` rust\n#![feature(specialization)]\n\ntrait Tr {\n    type Other;\n}\nstruct S<T>(T);\nimpl<T> Tr for T {\n    default type Other = <S<T> as Tr>::Other;\n}\nimpl Tr for S<S<S<S<u32>>>> {\n    type Other = u32;\n}\nfn func<T>() {\n    let _: <T as Tr>::Other = panic!();\n}\n\nfn main() {\n    func::<u32>();\n}\n```\n\nThis happens to compile, but if the `u32` in main is changed to `u64`, I get:\n\n> error: overflow evaluating the requirement `<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<S<u64>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> as Tr>::Other`\n\nIs this a known consequence of specialization?  I haven't seen it discussed.  It seems to violate Rust's normal policy of type-safe generics, and I'm not sure what a rule to prevent it upfront would look like (especially considering that the patterns can in some cases be split across multiple crates).\n", "closed_by": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/32498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/32498/timeline", "performed_via_github_app": null, "state_reason": "completed"}