{"url": "https://api.github.com/repos/rust-lang/rust/issues/73591", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73591/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73591/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73591/events", "html_url": "https://github.com/rust-lang/rust/issues/73591", "id": 642626348, "node_id": "MDU6SXNzdWU2NDI2MjYzNDg=", "number": 73591, "title": "Redundant checks in floating point to integer casts on WASM", "user": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 474645165, "node_id": "MDU6TGFiZWw0NzQ2NDUxNjU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-wasm", "name": "O-wasm", "color": "6e6ec0", "default": false, "description": "Target: WASM (WebAssembly), http://webassembly.org/"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-21T19:31:04Z", "updated_at": "2020-08-04T01:48:27Z", "closed_at": "2020-08-04T01:48:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you compile the following Rust code to WASM:\r\n\r\n```rust\r\npub unsafe fn cast(x: f64) -> u8 {\r\n    x.to_int_unchecked()\r\n}\r\n```\r\n\r\nit compiles to the following with Rust 1.45:\r\n```wasm\r\nexample::cast:\r\n        block           \r\n        local.get       0\r\n        f64.const       0x1p32\r\n        f64.lt  \r\n        local.get       0\r\n        f64.const       0x0p0\r\n        f64.ge  \r\n        i32.and \r\n        i32.eqz\r\n        br_if           0\r\n        local.get       0\r\n        i32.trunc_f64_u\r\n        return\r\n        end_block\r\n        i32.const       0\r\n        end_function\r\n```\r\n\r\nThe same happens in Rust <1.45 if you use `as _`. In both cases the following LLVM IR is emitted:\r\n\r\n```\r\ndefine hidden i8 @_ZN7example4cast17he66904755097d668E(double %x) unnamed_addr #0 !dbg !5 {\r\n  %0 = fptoui double %x to i8, !dbg !9\r\n  ret i8 %0, !dbg !22\r\n}\r\n```\r\n\r\nfptoui is explicitly defined to be UB if an out of range value is provided.\r\n>  If the value cannot fit in ty2, the result is a poison value.\r\n\r\nHowever it seems like the WASM backend in LLVM ignores that and emits additional bounds checks.\r\n\r\nAdditionally this gets even worse in Rust 1.45 if you use `as _` instead:\r\n\r\n```wasm\r\nexample::cast:\r\n        local.get       0\r\n        f64.const       0x1.fep7\r\n        f64.gt  \r\n        local.set       1\r\n        block           \r\n        block           \r\n        local.get       0\r\n        f64.const       0x0p0\r\n        local.get       0\r\n        f64.const       0x0p0\r\n        f64.gt  \r\n        f64.select\r\n        local.tee       0\r\n        f64.const       0x1p32\r\n        f64.lt  \r\n        local.get       0\r\n        f64.const       0x0p0\r\n        f64.ge  \r\n        i32.and \r\n        i32.eqz\r\n        br_if           0\r\n        local.get       0\r\n        i32.trunc_f64_u\r\n        local.set       2\r\n        br              1\r\n        end_block\r\n        i32.const       0\r\n        local.set       2\r\n        end_block\r\n        i32.const       -1\r\n        local.get       2\r\n        local.get       1\r\n        i32.select\r\n        end_function\r\n```\r\n\r\nThis means that in the end in the WASM VM will do 3 range checks (the one emitted by rust, the one emitted by the llvm backend, and the one it needs to do to possibly trap).\r\n\r\nAdditionally Rust's saturating checks don't play well with WASM's `nontrapping-fptoint` target-feature as there's still redundant checks:\r\n\r\n```wasm\r\nexample::cast:\r\n        i64.const       9223372036854775807\r\n        local.get       0\r\n        f32.const       -0x1p63\r\n        local.get       0\r\n        f32.const       -0x1p63\r\n        f32.gt  \r\n        f32.select\r\n        i64.trunc_sat_f32_s\r\n        local.get       0\r\n        f32.const       0x1.fffffep62\r\n        f32.gt  \r\n        i64.select\r\n        i64.const       0\r\n        local.get       0\r\n        local.get       0\r\n        f32.eq  \r\n        i64.select\r\n        end_function\r\n```", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73591/timeline", "performed_via_github_app": null, "state_reason": "completed"}