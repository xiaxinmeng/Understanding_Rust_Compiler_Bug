{"url": "https://api.github.com/repos/rust-lang/rust/issues/52331", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52331/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52331/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52331/events", "html_url": "https://github.com/rust-lang/rust/issues/52331", "id": 340853284, "node_id": "MDU6SXNzdWUzNDA4NTMyODQ=", "number": 52331, "title": "Correcting Path::components on Redox", "user": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 123109, "node_id": "MDU6TGFiZWwxMjMxMDk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-windows", "name": "O-windows", "color": "6e6ec0", "default": false, "description": "Operating system: Windows"}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 632506179, "node_id": "MDU6TGFiZWw2MzI1MDYxNzk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-redox", "name": "O-redox", "color": "6e6ec0", "default": false, "description": "Operating system: Redox, https://www.redox-os.org/"}, {"id": 638321554, "node_id": "MDU6TGFiZWw2MzgzMjE1NTQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/proposed-final-comment-period", "name": "proposed-final-comment-period", "color": "ededed", "default": false, "description": "Proposed to merge/close by relevant subteam, see T-<team> label. Will enter FCP once signed off."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 919710011, "node_id": "MDU6TGFiZWw5MTk3MTAwMTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/disposition-merge", "name": "disposition-merge", "color": "008800", "default": false, "description": "This issue / PR is in PFCP or FCP with a disposition to merge it."}, {"id": 2238437210, "node_id": "MDU6TGFiZWwyMjM4NDM3MjEw", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-io", "name": "A-io", "color": "f7e101", "default": false, "description": "Area: std::io, std::fs, std::net and std::path"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-07-13T01:47:57Z", "updated_at": "2023-03-19T09:48:29Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`Path::components` is incorrect on Redox. I would like to develop the solution\r\nhere: https://github.com/rust-lang/rust/pull/51537.\r\n\r\nThe following is a description of the problem.\r\n\r\nSuppose you have the following path:\r\n\r\n`file:/home/user/foo/bar.txt`\r\n\r\nYou split the path into components using `Path::components`\r\n\r\n```rust\r\nPath::new(\"file:/home/user/foo/bar.txt\").components().collect::<Vec<()>>()\r\n```\r\n\r\nIn Linux, this would be equivalent to the following:\r\n\r\n```rust\r\nvec![\r\n    Component::Normal(\"file:\"),\r\n    Component::Normal(\"home\"),\r\n    Component::Normal(\"user\"),\r\n    Component::Normal(\"foo\"),\r\n    Component::Normal(\"bar.txt\"),\r\n]\r\n```\r\n\r\nJoining the components with the current directory would give you a path such as\r\nthis:\r\n\r\n`./file:/home/user/foo/bar.txt`\r\n\r\nIn Redox, we want to be able to get from the original path to components back to\r\nthe original path without any modifications. Here are examples of this usage of\r\n`Path::components`:\r\n\r\nhttps://github.com/uutils/coreutils/search?q=components\r\n\r\nIn Redox, we have the following options for the `file:` component:\r\n\r\n1. `Component::Normal(\"file:\")`\r\n2. `Component::Normal(\"file:\")` followed by `Component::RootDir`\r\n3. `Component::Prefix(Prefix::Verbatim(\"file:\"))`\r\n4. `Component::Prefix(Prefix::Scheme(\"file:\"))`\r\n\r\n**Option 1**\r\n\r\n`Component::Normal(\"file:\")`\r\n\r\nThe path mentioned above would end up being the following after being rebuilt\r\nfrom its components:\r\n\r\n`./file:/home/user/foo/bar.txt`\r\n\r\nThis is the old way of doing things. It not only makes `Path::components`\r\nuseless on Redox. Canonicalizing a path will always add a scheme like `file:`\r\nto the beginning, so it is likely that path handling will be incorrect.\r\nAbsolute paths would always be interpreted as relative.\r\n\r\n:x: This option is unusable for Redox.\r\n\r\n**Option 2**\r\n\r\n`Component::Normal(\"file:\")` followed by `Component::RootDir`\r\n\r\nThis would preserve the original meaning of the path, such that it could be\r\nrebuilt from its components as follows:\r\n\r\n`file:/home/user/foo/bar.txt`\r\n\r\nHowever, this may require a large amount of work to handle, as it seems likely\r\nthat code exists that only checks the first component for being\r\n`Component::RootDir` or `Component::Prefix` in order to identify an absolute\r\npath.\r\n\r\nThe documentation for `Prefix` provides one such example, which has likely\r\ninspired similar usage:\r\n\r\nhttps://doc.rust-lang.org/std/path/enum.Prefix.html#examples\r\n\r\n:x: This option would likely break the expectations of many consumers of the\r\n`Prefix` enum.\r\n\r\n**Option 3**\r\n\r\n`Component::Prefix(Prefix::Verbatim(\"file:\"))`\r\n\r\nThis option preserves the original meaning of the path, a rebuilt path would be\r\nthis:\r\n\r\n`file:/home/user/foo/bar.txt`\r\n\r\nThis, however, is overloading a variant meant to be used on Windows, for a path\r\nlooking like this:\r\n\r\n`\\\\?\\home\\user\\foo\\bar.txt`\r\n\r\nThis means different code will be needed when running on Redox to correctly\r\nparse paths to components and turn components into paths.\r\n\r\n:heavy_check_mark: This does leave the enum untouched, while allowing for the\r\ncorrect parsing of paths on Redox. The only downside is a possible lack of\r\nclarity due to overloading the meaning of the `Prefix::Verbatim` variant.\r\n\r\n**Option 4**\r\n\r\n`Component::Prefix(Prefix::Scheme(\"file:\"))`\r\n\r\nThis option also preserves the original meaning of the path, a rebuilt path\r\nwould be this:\r\n\r\n`file:/home/user/foo/bar.txt`\r\n\r\nThis is the most clear option, having separate code to handle specifically the\r\nRedox scheme abstraction.\r\n\r\nThis has the downside of changing a stable enum, `Prefix`. There is, however,\r\nthe possibility of having the extra enum variant be\r\n`#[cfg(target_os = \"redox\")]`, so as to preserve the `Prefix` enum on other\r\nplatforms.\r\n\r\n:heavy_check_mark: This option could be used to have correct path parsing\r\nwithout affecting the stability of the `Prefix` enum on non-Redox platforms,\r\nif a `cfg` attribute is used.\r\n\r\n**Conclusion**\r\n\r\nPotentially the `Prefix` enum would be done different after a major version bump,\r\nperhaps using extension traits that are platform specific. I would think that\r\nthere would be an opaque `Prefix` struct, and something like `.into_os_prefix()`\r\nwould provide you with an os-specific enum to match against.\r\n\r\nFor the time being, options 3 and 4 seem to be possible, with some caveats, and\r\nwould allow code using stable Rust to quickly do-the-right-thing on Redox.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52331/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52331/timeline", "performed_via_github_app": null, "state_reason": null}