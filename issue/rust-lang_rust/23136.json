{"url": "https://api.github.com/repos/rust-lang/rust/issues/23136", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/23136/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/23136/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/23136/events", "html_url": "https://github.com/rust-lang/rust/issues/23136", "id": 60186890, "node_id": "MDU6SXNzdWU2MDE4Njg5MA==", "number": 23136, "title": "regression in regionck / lifetime elision - \"`T` may not live enough\" errors", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37544, "node_id": "MDU6TGFiZWwzNzU0NA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-typesystem", "name": "A-typesystem", "color": "f7e101", "default": false, "description": "Area: The type system"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-03-07T02:53:41Z", "updated_at": "2015-12-18T22:42:59Z", "closed_at": "2015-12-18T22:42:59Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### STR\n\nThis is an extract from [linalg.rs](https://github.com/japaric/linalg.rs/tree/19acc2c45861d3747f40763bfc3e5b921cc7f5cb) (sorry, it's a bit long)\n\n``` rust\npub mod strided {\n    use raw;\n\n    pub struct Slice<'a, T>(pub raw::Slice<'a, T>) where T: 'a;\n    impl<'a, T> Copy for Slice<'a, T> {}\n    pub struct SliceMut<'a, T>(pub raw::Slice<'a, T>) where T: 'a;\n}\n\npub mod raw {\n    use std::marker::PhantomData;\n\n    pub struct Slice<'a, T> where T: 'a {\n        _marker: PhantomData<&'a T>,\n        data: *mut T,\n        len: usize,\n    }\n\n    impl<'a, T> Copy for Slice<'a, T> {}\n}\n\npub struct MutRow<'a, T>(strided::SliceMut<'a, T>) where T: 'a;\npub struct Row<'a, T>(strided::Slice<'a, T>) where T: 'a;\nimpl<'a, T> Copy for Row<'a, T> {}\npub struct Scaled<T, M>(T, M);\n\n#[cfg(yesterday)]\nimpl<'a, 'b, T> AddAssign<Scaled<T, Row<'a, T>>> for MutRow<'b, T> {\n    fn add_assign(&mut self, rhs: &Scaled<T, Row<T>>) {\n        let &mut MutRow(strided::SliceMut(lhs)) = self;\n        let &Scaled(ref alpha, Row(strided::Slice(rhs))) = rhs;\n\n        axpy(lhs, alpha, rhs)\n    }\n}\n\n#[cfg(today)]\nimpl<'a, 'b, T> AddAssign<Scaled<T, Row<'a, T>>> for MutRow<'b, T>\n    where T: 'a,  // <--\n{\n    fn add_assign(&mut self, rhs: &Scaled<T, Row<'a, T>>) {  // <-- `Row<['a], T>`\n        let &mut MutRow(strided::SliceMut(lhs)) = self;\n        let &Scaled(ref alpha, Row(strided::Slice(rhs))) = rhs;\n\n        axpy(lhs, alpha, rhs)\n    }\n}\n\nfn axpy<T>(_: raw::Slice<T>, _: &T, _: raw::Slice<T>) {}\n\npub trait AddAssign<Rhs> {\n    fn add_assign(&mut self, &Rhs);\n}\n\nfn main() {}\n```\n### Stderr\n\n``` rust\nbug.rs:31:60: 31:63 error: the parameter type `T` may not live long enough [E0311]\nbug.rs:31         let &Scaled(ref alpha, Row(strided::Slice(rhs))) = rhs;\n                                                                     ^~~\nbug.rs:31:63: 31:63 help: consider adding an explicit lifetime bound for `T`\nbug.rs:29:55: 34:6 note: the parameter type `T` must be valid for the anonymous lifetime #3 defined on the block at 29:54...\nbug.rs:29     fn add_assign(&mut self, rhs: &Scaled<T, Row<T>>) {\nbug.rs:30         let &mut MutRow(strided::SliceMut(lhs)) = self;\nbug.rs:31         let &Scaled(ref alpha, Row(strided::Slice(rhs))) = rhs;\nbug.rs:32\nbug.rs:33         axpy(lhs, alpha, rhs)\nbug.rs:34     }\nbug.rs:31:60: 31:63 note: ...so that the type `T` will meet its required lifetime bounds\nbug.rs:31         let &Scaled(ref alpha, Row(strided::Slice(rhs))) = rhs;\n                                                                     ^~~\nerror: aborting due to previous error\n```\n\n---\n\nBoth cfg(today) and cfg(yesterday) compile with yesterday's nightly (`(3b3bb0e68 2015-03-04) (built 2015-03-05)`) but cfg(yesterday) fails to compile with today's nightly (`(b0746ff19 2015-03-05) (built 2015-03-06)`), the `impl` had to be changed to `cfg(today)` to make the code compile.\n\nI think the extra lifetime and bound in cfg(today) are redundant:\n- `where T: 'a` should be inferred from the use of `Row<'a, T>`, since it seems that `T: 'b` is being inferred from the `RowMut<'b, T>`.\n- The `'a` in `rhs: &Scaled<T, Row<'a, T>>` shouldn't be necessary, since its already spelled out in the `AddAssign<Scaled<T, Row<'a, T>>>`\n\nIn `linalg`s `src/add_assign.rs` there are several similar `impl`s where the lifetimes and bounds can be elided, and a few other `impl`s that need explicit annotation.\n\ncc @nikomatsakis \n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/23136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/23136/timeline", "performed_via_github_app": null, "state_reason": "completed"}