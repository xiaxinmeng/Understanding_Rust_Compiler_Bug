{"url": "https://api.github.com/repos/rust-lang/rust/issues/101913", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/101913/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/101913/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/101913/events", "html_url": "https://github.com/rust-lang/rust/issues/101913", "id": 1376284021, "node_id": "I_kwDOAAsO6M5SCG11", "number": 101913, "title": "Backtraces do not work for binaries loaded through ld.so", "user": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2022-09-16T18:09:26Z", "updated_at": "2023-06-19T21:41:51Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When a Rust binary that is executed through ld.so \u2014 the [Linux dynamic linker](https://unix.stackexchange.com/questions/400621/what-is-lib64-ld-linux-x86-64-so-2-and-why-can-it-be-used-to-execute-file) \u2014 triggers a panic, the backtraces are useless. I've included a discussion of why executing through ld.so is valuable below, but first, to reproduce, build a simple binary that panics on execution:\r\n\r\n```console\r\n$ cargo new --bin ld-so-backtraces\r\n     Created binary (application) `ld-so-backtraces` package\r\n$ cd ld-so-backtraces\r\n$ echo 'fn main() { panic!() }' > src/main.rs\r\n$ cargo b\r\n   Compiling ld-so-backtraces v0.1.0 (/local/home/jongje/ld-so-backtraces)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.46s\r\n```\r\n\r\nBacktraces work fine when executing the binary directly:\r\n\r\n```console\r\n$ env RUST_BACKTRACE=1 $PWD/target/debug/ld-so-backtraces\r\nthread 'main' panicked at 'explicit panic', src/main.rs:1:13\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/4b91a6ea7258a947e59c6522cd5898e7c0a6a88f/library/std/src/panicking.rs:584:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/4b91a6ea7258a947e59c6522cd5898e7c0a6a88f/library/core/src/panicking.rs:142:14\r\n   2: core::panicking::panic\r\n             at /rustc/4b91a6ea7258a947e59c6522cd5898e7c0a6a88f/library/core/src/panicking.rs:48:5\r\n   3: ld_so_backtraces::main\r\n             at ./src/main.rs:1:13\r\n   4: core::ops::function::FnOnce::call_once\r\n             at /rustc/4b91a6ea7258a947e59c6522cd5898e7c0a6a88f/library/core/src/ops/function.rs:248:5\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nBut when executing through `ld.so`, the debug symbols vanish:\r\n\r\n```console\r\n$ /usr/lib/\"ld-linux-$(uname -m).so.1\" $PWD/target/debug/ld-so-backtraces\r\nthread 'main' panicked at 'explicit panic', src/main.rs:1:13\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n$ env RUST_BACKTRACE=1 /usr/lib/\"ld-linux-$(uname -m).so.1\" $PWD/target/debug/ld-so-backtraces\r\nthread 'main' panicked at 'explicit panic', src/main.rs:1:13\r\nstack backtrace:\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n$ env RUST_BACKTRACE=full /usr/lib/\"ld-linux-$(uname -m).so.1\" $PWD/target/debug/ld-so-backtraces\r\nthread 'main' panicked at 'explicit panic', src/main.rs:1:13\r\nstack backtrace:\r\n   0:     0xffffab78c468 - stpcpy\r\n   1:     0xffffab7a3b70 - tunable_list\r\n   2:     0xffffab78a7b4 - __getcwd\r\n   3:     0xffffab78da00 - <unknown>\r\n   4:     0xffffab78d754 - <unknown>\r\n   5:     0xffffab78df4c - <unknown>\r\n   6:     0xffffab78ddf8 - <unknown>\r\n   7:     0xffffab78c910 - getauxval\r\n   8:     0xffffab78db80 - <unknown>\r\n   9:     0xffffab779e60 - _dl_map_object_from_fd\r\n  10:     0xffffab779d7c - _dl_map_object_from_fd\r\n  11:     0xffffab77a0d0 - _dl_map_object_from_fd\r\n  12:     0xffffab77a2e0 - open_verify.constprop.7\r\n  13:     0xffffab77a170 - _dl_map_object_from_fd\r\n  14:     0xffffab77a21c - _dl_map_object_from_fd\r\n  15:     0xffffab788470 - __tunable_set_val\r\n  16:     0xffffab77a1e8 - _dl_map_object_from_fd\r\n  17:     0xffffab77a0fc - _dl_map_object_from_fd\r\n  18:     0xffffab584da4 - __libc_start_main\r\n  19:     0xffffab779fe4 - _dl_map_object_from_fd\r\n```\r\n\r\nI suspect this happens because backtraces attempt to load debug symbols through `/proc/self/exe`, but `/proc/self/exe` points to `ld.so` in this case, _not_ the real binary. I don't know of any _good_ solutions to this, but one solution is to prefer `argv[0]` if `/proc/self/exe` is `ld.so`. It won't be perfect (callers need to use `exec -a` among other things), but it'll be better than what happens today. I suspect this happens with other execution wrappers than just `ld.so` (does Valgrind do this for certain kinds of execution for example?), but I don't have any concrete examples.\r\n\r\n### Why ld.so?\r\n\r\nWhere I work, we execute binaries through the dynamic linker so that we can explicitly set the shared library search path to ensure that the same shared libraries used to build a given binary are used when it is executed. It has a similar effect as setting `LD_LIBRARY_PATH`, but with the added benefit that it does not _also_ set the shared library search path of any programs executed down the line. There is a lot of underlying complexity here that is probably not worth digging too much into, but the idea is that a binary should ship \"with its environment\" (think Nix-style binaries), and so if the built Rust binary and some binary it in turn invokes are built separately, they should use different shared library search paths, namely the ones that map to exactly what they were built with. Executing through the dynamic linker achieves that, `LD_LIBRARY_PATH` does not. (This is also done by things like [go-appimage](https://github.com/probonopd/go-appimage/issues/49)).\r\n\r\nCargo has a [similar issue](https://github.com/rust-lang/cargo/issues/10113), though its solution is going to be a little different since it can also be used a library: https://github.com/rust-lang/cargo/issues/10119.\r\n\r\nrust-analyzer also run into [issues with ld.so](https://github.com/rust-lang/rust-analyzer/issues/13159), though from what I can tell there are fixes in the pipeline there already.\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.63.0 (4b91a6ea7 2022-08-08)\r\nbinary: rustc\r\ncommit-hash: 4b91a6ea7258a947e59c6522cd5898e7c0a6a88f\r\ncommit-date: 2022-08-08\r\nhost: aarch64-unknown-linux-gnu\r\nrelease: 1.63.0\r\nLLVM version: 14.0.5\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/101913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/101913/timeline", "performed_via_github_app": null, "state_reason": null}