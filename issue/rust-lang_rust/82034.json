{"url": "https://api.github.com/repos/rust-lang/rust/issues/82034", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/82034/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/82034/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/82034/events", "html_url": "https://github.com/rust-lang/rust/issues/82034", "id": 807442966, "node_id": "MDU6SXNzdWU4MDc0NDI5NjY=", "number": 82034, "title": "Panic in nightly rustc with type interference for const_generics", "user": {"login": "Zettroke", "id": 15730710, "node_id": "MDQ6VXNlcjE1NzMwNzEw", "avatar_url": "https://avatars.githubusercontent.com/u/15730710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zettroke", "html_url": "https://github.com/Zettroke", "followers_url": "https://api.github.com/users/Zettroke/followers", "following_url": "https://api.github.com/users/Zettroke/following{/other_user}", "gists_url": "https://api.github.com/users/Zettroke/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zettroke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zettroke/subscriptions", "organizations_url": "https://api.github.com/users/Zettroke/orgs", "repos_url": "https://api.github.com/users/Zettroke/repos", "events_url": "https://api.github.com/users/Zettroke/events{/privacy}", "received_events_url": "https://api.github.com/users/Zettroke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1486687397, "node_id": "MDU6TGFiZWwxNDg2Njg3Mzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-const_generics", "name": "F-const_generics", "color": "f9c0cc", "default": false, "description": "`#![feature(const_generics)]`"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-02-12T18:06:50Z", "updated_at": "2021-08-22T20:23:37Z", "closed_at": "2021-08-22T20:23:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\n```Rust\r\n#![feature(const_generics)]\r\n#![feature(const_evaluatable_checked)]\r\n#![allow(incomplete_features)]\r\npub trait IsTrue {}\r\npub trait IsFalse {}\r\n\r\npub struct Assert<const CHECK: bool> {}\r\n\r\nimpl IsTrue for Assert<true> {}\r\nimpl IsFalse for Assert<false> {}\r\n\r\npub struct SliceConstWriter<'a, const N: usize> {\r\n    ptr: &'a mut [u8]\r\n}\r\nimpl<'a, const N: usize> SliceConstWriter<'a, {N}> {\r\n    pub fn from_slice(vec: &'a mut [u8]) -> Self {\r\n        Self {\r\n            ptr: vec\r\n        }\r\n    }\r\n\r\n    pub fn convert<const NN: usize>(mut self) -> SliceConstWriter<'a, {NN}> {\r\n        SliceConstWriter {\r\n            ptr: self.ptr\r\n        }\r\n    }\r\n}\r\n\r\nimpl<'a, const N: usize> SliceConstWriter<'a, {N}> where Assert::<{N >= 2}>: IsTrue {\r\n    // broken\r\n    pub fn write_u8(mut self) -> SliceConstWriter<'a, {N-2}> {\r\n        self.convert()\r\n    }\r\n    \r\n    //working\r\n    // pub fn write_u8(mut self) -> SliceConstWriter<'a, {N-2}> {\r\n    //     SliceConstWriter {\r\n    //         ptr: self.ptr\r\n    //     }\r\n    // }\r\n}\r\n\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use crate::SliceConstWriter;\r\n\r\n    #[test]\r\n    fn it_works() {\r\n        let mut buff = [0u8; 128];\r\n        let mut a = SliceConstWriter::<10>::from_slice(&mut buff);\r\n\r\n        let mut a = a.write_u8().write_u8().write_u8().write_u8().write_u8();\r\n    }\r\n}\r\n```\r\n\r\nReproduces in [playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=b8e87af706c05a8ebf4f1fed2f8712c8)\r\n\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.52.0-nightly (e9920ef77 2021-02-11)\r\nbinary: rustc\r\ncommit-hash: e9920ef7749d11fc71cc32ca4ba055bcfeaab945\r\ncommit-date: 2021-02-11\r\nhost: x86_64-pc-windows-gnu\r\nrelease: 1.52.0-nightly\r\nLLVM version: 11.0.1\r\n\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: compiler\\rustc_middle\\src\\ich\\impls_ty.rs:94:17: StableHasher: unexpected region '_#2r\r\n\r\nthread 'rustc' panicked at 'Box<Any>', /rustc/e9920ef7749d11fc71cc32ca4ba055bcfeaab945\\library\\std\\src\\panic.rs:59:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.52.0-nightly (e9920ef77 2021-02-11) running on x86_64-pc-windows-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [type_op_ascribe_user_type] evaluating `type_op_ascribe_user_type` `Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Const(U0) }, Canon\r\nicalVarInfo { kind: Ty(General(U0)) }], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(ConstEvaluatable(WithOptConstParam { did: DefId(0:29 ~ const_writer[f037]::{impl#3}::write_u8::{constant#0}), const_param_did: None }, [ReLateBound(DebruijnIndex(1), BoundRegion { kind: BrAnon(0) }), Const\r\n{ ty: usize, val: Param(N/#1) }])), Binder(ConstEvaluatable(WithOptConstParam { did: DefId(0:26 ~ const_writer[f037]::{impl#3}::{constant#0}), const_param_did: None }, [ReLateBound(DebruijnIndex(1), BoundRegion { kind: BrAnon(0) }), Const { ty: usize, val: Param(N/#1) }])), Binder(TraitPredicate(<Assert<{N >= 2\r\n}> as IsTrue>))], reveal: UserFacing }, value: AscribeUserType { mir_ty: fn(SliceConstWriter<'_, N>) -> SliceConstWriter<'_, {N-2}> {SliceConstWriter::<'_, N>::convert::<{N-2}>}, def_id: DefId(0:20 ~ const_writer[f037]::{impl#2}::convert), user_substs: UserSubsts { substs: [ReLateBound(DebruijnIndex(0), BoundRe\r\ngion { kind: BrAnon(3) }), Const { ty: ^5, val: Bound(DebruijnIndex(0), 4) }, Const { ty: usize, val: Unevaluated(WithOptConstParam { did: DefId(0:30 ~ const_writer[f037]::{impl#3}::write_u8::{constant#1}), const_param_did: Some(DefId(0:21 ~ const_writer[f037]::{impl#2}::convert::NN)) }, [ReLateBound(DebruijnIn\r\ndex(0), BoundRegion { kind: BrAnon(0) }), Const { ty: usize, val: Param(N/#1) }], None) }], user_self_ty: None } } } }`\r\n#1 [mir_borrowck] borrow-checking `SliceConstWriter::<'a, N>::write_u8`\r\nend of query stack\r\nerror: aborting due to previous error; 1 warning emitted\r\n\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nerror: internal compiler error: compiler\\rustc_middle\\src\\ich\\impls_ty.rs:94:17: StableHasher: unexpected region '_#2r\r\n\r\nthread 'rustc' panicked at 'Box<Any>', /rustc/e9920ef7749d11fc71cc32ca4ba055bcfeaab945\\library\\std\\src\\panic.rs:59:5\r\nstack backtrace:\r\n   0: std::panicking::begin_panic\r\n   1: std::panic::panic_any\r\n   2: rustc_errors::HandlerInner::bug\r\n   3: rustc_errors::Handler::bug\r\n   4: rustc_middle::util::bug::opt_span_bug_fmt::{{closure}}\r\n   5: rustc_middle::ty::context::tls::with_opt::{{closure}}\r\n   6: rustc_middle::ty::context::tls::with_opt\r\n   7: rustc_middle::util::bug::opt_span_bug_fmt\r\n   8: rustc_middle::util::bug::bug_fmt\r\n   9: rustc_middle::ich::impls_ty::<impl rustc_data_structures::stable_hasher::HashStable<rustc_middle::ich::hcx::StableHashingContext> for rustc_middle::ty::sty::RegionKind>::hash_stable\r\n  10: std::thread::local::LocalKey<T>::with\r\n  11: <T as rustc_query_system::dep_graph::dep_node::DepNodeParams<Ctxt>>::to_fingerprint\r\n  12: rustc_query_system::query::plumbing::get_query_impl\r\n  13: rustc_trait_selection::traits::fulfill::FulfillProcessor::progress_changed_obligations\r\n  14: rustc_data_structures::obligation_forest::ObligationForest<O>::process_obligations\r\n  15: <rustc_trait_selection::traits::fulfill::FulfillmentContext as rustc_infer::traits::engine::TraitEngine>::select_where_possible\r\n  16: rustc_infer::infer::canonical::query_response::<impl rustc_infer::infer::InferCtxt>::make_canonicalized_query_response\r\n  17: <rustc_infer::infer::InferCtxtBuilder as rustc_trait_selection::infer::InferCtxtBuilderExt>::enter_canonical_trait_query\r\n  18: rustc_traits::type_op::type_op_ascribe_user_type\r\n  19: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::type_op_ascribe_user_type>::compute\r\n  20: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  21: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  22: rustc_data_structures::stack::ensure_sufficient_stack\r\n  23: rustc_query_system::query::plumbing::force_query_with_job\r\n  24: rustc_query_system::query::plumbing::get_query_impl\r\n  25: rustc_trait_selection::traits::query::type_op::ascribe_user_type::<impl rustc_trait_selection::traits::query::type_op::QueryTypeOp for rustc_middle::traits::query::type_op::AscribeUserType>::perform_query\r\n  26: rustc_trait_selection::traits::query::type_op::QueryTypeOp::fully_perform_into\r\n  27: <rustc_middle::ty::ParamEnvAnd<Q> as rustc_trait_selection::traits::query::type_op::TypeOp>::fully_perform\r\n  28: rustc_mir::borrow_check::type_check::type_check\r\n  29: rustc_mir::borrow_check::nll::compute_regions\r\n  30: rustc_mir::borrow_check::do_mir_borrowck\r\n  31: rustc_infer::infer::InferCtxtBuilder::enter\r\n  32: rustc_mir::borrow_check::mir_borrowck\r\n  33: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::mir_borrowck>::compute\r\n  34: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  35: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  36: rustc_data_structures::stack::ensure_sufficient_stack\r\n  37: rustc_query_system::query::plumbing::force_query_with_job\r\n  38: rustc_query_system::query::plumbing::get_query_impl\r\n  39: rustc_query_system::query::plumbing::ensure_query_impl\r\n  40: rustc_interface::passes::analysis\r\n  41: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::analysis>::compute\r\n  42: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  43: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  44: rustc_data_structures::stack::ensure_sufficient_stack\r\n  45: rustc_query_system::query::plumbing::force_query_with_job\r\n  46: rustc_query_system::query::plumbing::get_query_impl\r\n  47: rustc_interface::passes::QueryContext::enter\r\n  48: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  49: rustc_span::with_source_map\r\n  50: rustc_interface::interface::create_compiler_and_run\r\n  51: scoped_tls::ScopedKey<T>::set\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### Description\r\nCaught this error while playing with const generics.\r\n\r\nAfter some experiments I concluded error caused by type inference for `SliceConstWriter::convert` method\r\n\r\nError very elusive. Even replacing test block with main function \"fixed\" it", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/82034/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/82034/timeline", "performed_via_github_app": null, "state_reason": "completed"}