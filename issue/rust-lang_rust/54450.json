{"url": "https://api.github.com/repos/rust-lang/rust/issues/54450", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/54450/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/54450/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/54450/events", "html_url": "https://github.com/rust-lang/rust/issues/54450", "id": 362795325, "node_id": "MDU6SXNzdWUzNjI3OTUzMjU=", "number": 54450, "title": "FFI mechanism to declare a symbol for an array", "user": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45472092, "node_id": "MDU6TGFiZWw0NTQ3MjA5Mg==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-ffi", "name": "A-ffi", "color": "f7e101", "default": false, "description": "Area: Foreign Function Interface (FFI)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 3425147156, "node_id": "LA_kwDOAAsO6M7MJ5kU", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-array", "name": "A-array", "color": "f7e101", "default": false, "description": "Area: [T; N]"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-21T22:41:04Z", "updated_at": "2023-03-07T05:45:13Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "If I have a C declaration\r\n\r\n```c\r\nchar *symbol = \"hello world\";\r\n```\r\n\r\nI can declare that symbol in Rust as\r\n\r\n```rust\r\nextern \"C\" { pub static symbol: *c_char; }\r\n```\r\n\r\nBut if I have a C declaration\r\n```c\r\nchar symbol[] = \"hello world\";\r\n```\r\n\r\nI can't directly declare that in Rust in an immediately usable way. In this case, `symbol` refers *directly* to the array of characters; while in C it will \"degrade\" to a pointer if used in a context that expects a pointer, in Rust a declaration referring to `symbol` will refer to the characters directly. So, for instance, declaring it as a `*c_char` will result in a pointer whose numeric value contains the first `sizeof::<*c_char>()` bytes of `\"hello world\"`.\r\n\r\nDeclaring `symbol` as a `[c_char; 0]` and then obtaining and using its pointer seems wrong.\r\n\r\nI can think of a few useful ways to do this, one more straightforward than the other.\r\n\r\nOne would be to have a means of defining in an `extern \"C\"` block something that gets the value of the *address* of the symbol, just as if in C I'd written `char *symbol_ptr = symbol;` and then referenced *that* from Rust. That seems easy enough to do, modulo bikeshedding over the syntax to do so.\r\n\r\nAnother would be to define `symbol` as a C array of unknown length. However, that seems unfortunate to deal with.\r\n\r\nThe most ideal approach I can think of would be to define `symbol` as a `[c_char; _]` (using the elided size syntax from https://github.com/rust-lang/rfcs/pull/2545), and then infer the size from the symbol size:\r\n\r\n```\r\n$ nm --print-size test.o \r\n0000000000000000 000000000000000c D symbol\r\n```\r\n\r\nI don't know how feasible that would be, but it'd be incredibly convenient.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/54450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/54450/timeline", "performed_via_github_app": null, "state_reason": null}