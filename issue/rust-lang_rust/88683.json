{"url": "https://api.github.com/repos/rust-lang/rust/issues/88683", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/88683/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/88683/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/88683/events", "html_url": "https://github.com/rust-lang/rust/issues/88683", "id": 988811438, "node_id": "MDU6SXNzdWU5ODg4MTE0Mzg=", "number": 88683, "title": "GATs unable to determine if item will live long enough when combined with HRTBs", "user": {"login": "Michael-F-Bryan", "id": 17380079, "node_id": "MDQ6VXNlcjE3MzgwMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/17380079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Michael-F-Bryan", "html_url": "https://github.com/Michael-F-Bryan", "followers_url": "https://api.github.com/users/Michael-F-Bryan/followers", "following_url": "https://api.github.com/users/Michael-F-Bryan/following{/other_user}", "gists_url": "https://api.github.com/users/Michael-F-Bryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Michael-F-Bryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Michael-F-Bryan/subscriptions", "organizations_url": "https://api.github.com/users/Michael-F-Bryan/orgs", "repos_url": "https://api.github.com/users/Michael-F-Bryan/repos", "events_url": "https://api.github.com/users/Michael-F-Bryan/events{/privacy}", "received_events_url": "https://api.github.com/users/Michael-F-Bryan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-09-06T06:23:50Z", "updated_at": "2021-10-20T18:01:10Z", "closed_at": "2021-10-20T18:01:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "(I'm not sure whether this is a diagnostics issue or a bug in the way *Generic Associated Types* are implemented)\r\n\r\nFollowing [this comment](https://users.rust-lang.org/t/for-x-in-blah-vs-for-x-in-blah-iter/64411/6?u=michael-f-bryan) on the user forums, I was wondering if it's possible to create a trait which encapsulates the convention that `(&foo).into_iter()`  is equivalent to `foo.iter()`.\r\n\r\nThis is what I came up with:\r\n\r\n```rust\r\n#![feature(generic_associated_types)]\r\n\r\ntrait Iter {\r\n    type Iterator<'a>: Iterator + 'a;\r\n    type Item<'a>: 'a;\r\n\r\n    fn iter(&self) -> Self::Iterator<'_>;\r\n}\r\n\r\nimpl<I> Iter for I\r\nwhere\r\n    for<'a> &'a I: IntoIterator,\r\n    for<'a> <&'a I as IntoIterator>::IntoIter: Iterator,\r\n{\r\n    type Iterator<'a> where I: 'a = <&'a I as IntoIterator>::IntoIter;\r\n    type Item<'a> where I: 'a = <&'a I as IntoIterator>::Item;\r\n\r\n    fn iter(&self) -> Self::Iterator<'_> {\r\n        IntoIterator::into_iter(self)\r\n    }\r\n}\r\n```\r\n\r\n[(playground)](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=273c11f6e96edcb20d3cf054e8bfa2cb)\r\n\r\nWhich generates this output:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\nerror[E0309]: the parameter type `I` may not live long enough\r\n  --> src/lib.rs:15:5\r\n   |\r\n15 |     type Iterator<'a> where I: 'a = <&'a I as IntoIterator>::IntoIter;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |     |                            |\r\n   |     |                            help: consider adding a where clause: `, I: 'a`\r\n   |     ...so that the type `I` will meet its required lifetime bounds\r\n\r\nerror[E0309]: the parameter type `I` may not live long enough\r\n  --> src/lib.rs:16:5\r\n   |\r\n16 |     type Item<'a> where I: 'a = <&'a I as IntoIterator>::Item;\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |     |                        |\r\n   |     |                        help: consider adding a where clause: `, I: 'a`\r\n   |     ...so that the type `I` will meet its required lifetime bounds\r\n\r\nFor more information about this error, try `rustc --explain E0309`.\r\n```\r\n\r\nHere I've already said `type Iterator<'a> where I: 'a`, yet it seems like the compiler isn't able to prove that `I` will live long enough so it suggests adding *another* `I: 'a` to the trait bound. I tried using `type Iterator<'a> where I: 'a, I: 'a, ..., I: 'a` like the compiler suggests\r\n\r\n### Meta\r\n\r\nThis was done on the playground using `rustc` version:\r\n\r\n```\r\n1.56.0-nightly (2021-09-01 50171c310cd15e1b2d37)\r\n```\r\n", "closed_by": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/88683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/88683/timeline", "performed_via_github_app": null, "state_reason": "completed"}