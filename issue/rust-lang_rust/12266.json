{"url": "https://api.github.com/repos/rust-lang/rust/issues/12266", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/12266/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/12266/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/12266/events", "html_url": "https://github.com/rust-lang/rust/issues/12266", "id": 27608711, "node_id": "MDU6SXNzdWUyNzYwODcxMQ==", "number": 12266, "title": "quote macros do not err or warn on trailing token-trees in input", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235146, "node_id": "MDU6TGFiZWwyMzUxNDY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-syntaxext", "name": "A-syntaxext", "color": "f7e101", "default": false, "description": "Area: Syntax extensions"}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-02-14T16:49:34Z", "updated_at": "2019-01-24T18:30:06Z", "closed_at": "2019-01-24T18:30:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "here is a snippet of code (i've pasted the full example at the bottom):\n\n``` rust\nfn main() {\n    let e = quote_expr!((), x + y);\n    println!(\"expr: {:s}\", e.to_str());\n    let p = quote_pat!((),  x + y);\n    println!(\"pat:  {:s}\", p.to_str());\n}\n```\n\nOnce #12264 is fixed, then you can compile and run this, and you'll get:\n\n```\n% ./cfg \nexpr: x + y\npat:  x\n```\n\nIn particular, I fed `x + y` into both `quote_expr!` and into `quote_pat!`, and the `+ y` was simply silently discarded when `quote_pat!` parsed its input.\n\nThe macros should check for trailing input and issue a warning (that one could then use allow/deny/forbid on).\n\n---\n\nHere is the full example code (again, won't compile until #12264 is fixed):\n\n``` rust\n#[feature(managed_boxes)];\n#[feature(quote)];\n#[feature(macro_rules)];\nextern mod syntax;\nextern mod rustc;\n\nuse syntax::ast;\nuse syntax::codemap;\nuse syntax::parse;\nuse syntax::parse::token;\nuse syntax::print::pprust;\n\nfn main() {\n    let e = quote_expr!((), x + y);\n    println!(\"expr: {:s}\", e.to_str());\n    let p = quote_pat!((),  x + y);\n    println!(\"pat:  {:s}\", p.to_str());\n}\n\ntrait SyntaxToStr {\n    fn get_interner(&self) -> @token::IdentInterner { token::get_ident_interner() }\n    fn get_to_str() -> fn (_: &Self, intr: @token::IdentInterner) -> ~str;\n    fn to_str(&self) -> ~str { SyntaxToStr::get_to_str()(self, self.get_interner()) }\n}\n\nmacro_rules! impl_stx_to_str {\n    ($Type:path, $func:path) => {\n        impl SyntaxToStr for $Type {\n            fn get_to_str() -> fn (_: &$Type, intr: @token::IdentInterner) -> ~str {\n                $func\n            }\n        }\n    }\n}\n\nimpl_stx_to_str!(ast::Ty,       pprust::ty_to_str)\nimpl_stx_to_str!(ast::Pat,      pprust::pat_to_str)\nimpl_stx_to_str!(ast::Expr,     pprust::expr_to_str)\nimpl_stx_to_str!(ast::Stmt,     pprust::stmt_to_str)\nimpl_stx_to_str!(ast::Item,     pprust::item_to_str)\nimpl_stx_to_str!(ast::Generics, pprust::generics_to_str)\nimpl_stx_to_str!(ast::Path,     pprust::path_to_str)\n\ntrait QuoteCtxt {\n    fn parse_sess(&self) -> @syntax::parse::ParseSess;\n    fn cfg(&self) -> ast::CrateConfig;\n    fn call_site(&self) -> codemap::Span;\n    fn ident_of(&self, st: &str) -> ast::Ident;\n}\n\nimpl QuoteCtxt for () {\n    fn parse_sess(&self)         -> @syntax::parse::ParseSess { parse::new_parse_sess() }\n    fn cfg(&self)                -> ast::CrateConfig          { ~[] }\n    fn call_site(&self)          -> codemap::Span             { codemap::DUMMY_SP }\n    fn ident_of(&self, st: &str) -> ast::Ident                { token::str_to_ident(st) }\n}\n\n```\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/12266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/12266/timeline", "performed_via_github_app": null, "state_reason": "completed"}