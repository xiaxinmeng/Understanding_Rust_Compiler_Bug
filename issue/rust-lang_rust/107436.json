{"url": "https://api.github.com/repos/rust-lang/rust/issues/107436", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/107436/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/107436/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/107436/events", "html_url": "https://github.com/rust-lang/rust/issues/107436", "id": 1561145739, "node_id": "I_kwDOAAsO6M5dDTGL", "number": 107436, "title": "Missed optimization opportunity when trivially moving tuple of slices", "user": {"login": "recatek", "id": 22198616, "node_id": "MDQ6VXNlcjIyMTk4NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/22198616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/recatek", "html_url": "https://github.com/recatek", "followers_url": "https://api.github.com/users/recatek/followers", "following_url": "https://api.github.com/users/recatek/following{/other_user}", "gists_url": "https://api.github.com/users/recatek/gists{/gist_id}", "starred_url": "https://api.github.com/users/recatek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/recatek/subscriptions", "organizations_url": "https://api.github.com/users/recatek/orgs", "repos_url": "https://api.github.com/users/recatek/repos", "events_url": "https://api.github.com/users/recatek/events{/privacy}", "received_events_url": "https://api.github.com/users/recatek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-01-29T06:24:22Z", "updated_at": "2023-04-05T17:32:58Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\r\nalong with any information you feel relevant to replicating the bug.\r\n-->\r\n\r\nExample code:\r\n\r\n```rust\r\n#[repr(C)]\r\npub struct ThreeSlices<'a>(&'a [u32], &'a [u32], &'a [u32]);\r\n\r\n#[inline(always)]\r\npub fn should_be_no_op(val: ThreeSlices) -> ThreeSlices {\r\n    val\r\n}\r\n\r\npub fn sum_slices_1(val: ThreeSlices) -> u32 {\r\n    sum(&val)\r\n}\r\n\r\npub fn sum_slices_2(val: ThreeSlices) -> u32 {\r\n    let val = should_be_no_op(val);\r\n    sum(&val)\r\n}\r\n\r\n#[inline(never)]\r\npub fn sum(val: &ThreeSlices) -> u32 {\r\n    val.0.iter().sum::<u32>() + val.1.iter().sum::<u32>() + val.2.iter().sum::<u32>()\r\n}\r\n```\r\nIn rustc 1.67 stable this generates a number of moves (I suppose for calling convention?) that I don't think need to be there, especially when inlining:\r\n```\r\nexample::sum_slices_1:\r\n        jmp     qword ptr [rip + example::sum@GOTPCREL]\r\n\r\nexample::sum_slices_2:\r\n        sub     rsp, 56\r\n        movups  xmm0, xmmword ptr [rdi]\r\n        movups  xmm1, xmmword ptr [rdi + 16]\r\n        movups  xmm2, xmmword ptr [rdi + 32]\r\n        movaps  xmmword ptr [rsp + 32], xmm2\r\n        movaps  xmmword ptr [rsp + 16], xmm1\r\n        movaps  xmmword ptr [rsp], xmm0\r\n        mov     rdi, rsp\r\n        call    qword ptr [rip + example::sum@GOTPCREL]\r\n        add     rsp, 56\r\n        ret\r\n```\r\n\r\nSee https://rust.godbolt.org/z/azs11edK8\r\n\r\nWhile this is a pretty pointless example, this comes up in situations where you might want to convert a tuple of slices into a struct of slices in order to assign names to the tuple members.\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/107436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/107436/timeline", "performed_via_github_app": null, "state_reason": null}