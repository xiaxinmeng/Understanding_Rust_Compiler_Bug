{"url": "https://api.github.com/repos/rust-lang/rust/issues/68622", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/68622/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/68622/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/68622/events", "html_url": "https://github.com/rust-lang/rust/issues/68622", "id": 556536384, "node_id": "MDU6SXNzdWU1NTY1MzYzODQ=", "number": 68622, "title": "StorageLive (and even StorageDead) may be unnecessary in MIR.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37234, "node_id": "MDU6TGFiZWwzNzIzNA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-cleanup", "name": "C-cleanup", "color": "f5f1fd", "default": false, "description": "Category: PRs that clean code up or issues documenting cleanup."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 256133398, "node_id": "MDU6TGFiZWwyNTYxMzMzOTg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-mir", "name": "A-mir", "color": "f7e101", "default": false, "description": "Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2020-01-28T23:01:14Z", "updated_at": "2021-07-05T21:01:16Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "A while back I was discussing `Storage{Live,Dead}` and dominators, with @tmandry (in the context of generator layout optimizations), and came to the conclusion that `StorageLive` pretty much *has to* dominate all uses (I doubt we ever added a check that it does so, though).\r\n\r\nMore recently, I was trying to figure out what the simplest \"`StorageLive` sinking\" (i.e. moving the statement \"later\" in the CFG) optimization we could do was.\r\n\r\nThe conclusion I came to was that we might not need `StorageLive` at all, because there might be a deterministic \"best placement\" we could compute (assuming we need *exactly* one `llvm.lifetime.start` per `alloca`).\r\n\r\n<hr/>\r\n\r\nThat best placement would be the *least (common) dominator* of all mentions of a MIR local.\r\nEven indirect accesses require a direct borrow beforehand, so this should cover everything.\r\n\r\n(Assuming that, given CFG points `x`, `y`, `z`, \"`x` is a common dominator of `y` and `z`\" means \"`x` dominates both `y` and `z`\", i.e. \"to reach either `y` or `z` you must go through `x` first\", and the \"least\" such `x` is the one not dominating other common dominators of `y` and `z`, i.e. it's \"the closest to `y` and `z`\")\r\n\r\nThis could be:\r\n* just before the single assignment of that local\r\n  * `let x = x + y;`\r\n* at the end of a block branching into paths which all assign that local\r\n  * `let x = if c { a } else { b };`\r\n  * `let x; if c { x = a; } else { x = b; }` (roughly equivalent)\r\n\r\nI am not sure about interactions with loops, though.\r\n\r\nBut this doesn't have to remain theoretical, we could compute this \"ideal `StorageLive` position\" and then compare it with the existing one (presumably one would dominate the other? not sure this would catch any loop issues though).\r\n\r\n<hr/>\r\n\r\n`StorageDead` could also be similar (\"least (common) post-dominator\"?).\r\n\r\nHowever, it also has the effect of invalidating borrows, so we would need to keep an `InvalidateBorrows(x)` statement around, and consider it one of the mentions of `x`.\r\n\r\nThen \"`Storage{Live,Dead}` range shrinking\" would simply boil down to hoisting `InvalidateBorrows(x)` up past statements which couldn't indirectly access `x`.\r\n\r\n<hr/>\r\n\r\ncc @nikomatsakis @ecstatic-morse @rust-lang/wg-mir-opt", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/68622/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/68622/timeline", "performed_via_github_app": null, "state_reason": null}