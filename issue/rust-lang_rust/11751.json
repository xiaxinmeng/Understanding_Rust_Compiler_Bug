{"url": "https://api.github.com/repos/rust-lang/rust/issues/11751", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/11751/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/11751/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/11751/events", "html_url": "https://github.com/rust-lang/rust/issues/11751", "id": 26165390, "node_id": "MDU6SXNzdWUyNjE2NTM5MA==", "number": 11751, "title": "Constructing an iterator from a slice or Vec doesn't optimise completely", "user": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2014-01-23T13:17:39Z", "updated_at": "2015-01-31T01:47:00Z", "closed_at": "2014-07-21T20:36:59Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "``` rust\n#![crate_type = \"lib\"]\n\npub fn slice(s: &[uint]) -> uint {\n    for &j in s.iter() {\n        if j > 10 { return j }\n    }\n    0\n}\npub fn vec(s: Vec<uint>) -> uint {\n    for &j in s.iter() {\n        if j > 10 { return j }\n    }\n    0\n}\n\npub fn owned(s: ~[uint]) -> uint {\n    for &j in s.iter() {\n        if j > 10 { return j }\n    }\n    0\n}\n\n```\n\nCompiled with `-O --lib --emit-llvm -S` gives the following. The only major difference between `&[]`/`Vec` and `~[]`  are two lines marked `THIS CHECK`, which, we think, is because when constructing an iterator from `~[]` we do a pointer offset and dereference, so LLVM knows the pointers are non-null (in the slice/`Vec` case, the `match it.next() { None => ... }` part of the for loop isn't removed).\n\n``` llvm\n; ModuleID = '11751.rs'\ntarget datalayout = \"e-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"struct.std::vec::Vec<uint>[#1]\" = type { i64, i64, i64* }\n\n; Function Attrs: nounwind readonly uwtable\ndefine i64 @_ZN5slice20h084d58a6edab0287daa4v0.0E({ i64*, i64 }* noalias nocapture nonnull readonly) unnamed_addr #0 {\nentry-block:\n  %1 = getelementptr inbounds { i64*, i64 }* %0, i64 0, i32 0\n  %2 = load i64** %1, align 8\n  %3 = getelementptr inbounds { i64*, i64 }* %0, i64 0, i32 1\n  %4 = load i64* %3, align 8\n  %5 = getelementptr inbounds i64* %2, i64 %4\n  br label %loop_body\n\nloop_body:                                        ; preds = %match_else, %entry-block\n  %6 = phi i64* [ %9, %match_else ], [ %2, %entry-block ]\n  %7 = icmp eq i64* %6, %5\n  %8 = icmp eq i64* %6, null     ; THIS CHECK!\n  %or.cond = or i1 %7, %8\n  br i1 %or.cond, label %return, label %match_else\n\nmatch_else:                                       ; preds = %loop_body\n  %9 = getelementptr inbounds i64* %6, i64 1\n  %10 = load i64* %6, align 8\n  %11 = icmp ugt i64 %10, 10\n  br i1 %11, label %return, label %loop_body\n\nreturn:                                           ; preds = %loop_body, %match_else\n  %__make_return_pointer.0 = phi i64 [ %10, %match_else ], [ 0, %loop_body ]\n  ret i64 %__make_return_pointer.0\n}\n\n; Function Attrs: uwtable\ndefine i64 @_ZN3vec20h4963a1d1a9f58c9eUaa4v0.0E(%\"struct.std::vec::Vec<uint>[#1]\"* noalias nocapture nonnull readonly) unnamed_addr #1 {\nentry-block:\n  %1 = getelementptr inbounds %\"struct.std::vec::Vec<uint>[#1]\"* %0, i64 0, i32 2\n  %2 = load i64** %1, align 8\n  %3 = getelementptr inbounds %\"struct.std::vec::Vec<uint>[#1]\"* %0, i64 0, i32 0\n  %4 = load i64* %3, align 8\n  %5 = getelementptr inbounds i64* %2, i64 %4\n  br label %loop_body\n\nloop_body:                                        ; preds = %entry-block, %match_else\n  %6 = phi i64* [ %2, %entry-block ], [ %9, %match_else ]\n  %7 = icmp eq i64* %6, %5\n  %8 = icmp eq i64* %6, null      ; THIS CHECK!\n  %or.cond = or i1 %7, %8\n  br i1 %or.cond, label %clean_custom_6, label %match_else\n\nmatch_else:                                       ; preds = %loop_body\n  %9 = getelementptr inbounds i64* %6, i64 1\n  %10 = load i64* %6, align 8\n  %11 = icmp ugt i64 %10, 10\n  br i1 %11, label %clean_custom_6, label %loop_body\n\nclean_custom_6:                                   ; preds = %loop_body, %match_else\n  %__make_return_pointer.0 = phi i64 [ %10, %match_else ], [ 0, %loop_body ]\n  %12 = getelementptr inbounds %\"struct.std::vec::Vec<uint>[#1]\"* %0, i64 0, i32 1\n  %13 = load i64* %12, align 8\n  %14 = icmp eq i64 %13, 0\n  br i1 %14, label %\"_ZN25std..vec..Vec$LT$uint$GT$14glue_drop.115917h10684057aba082a7E.exit\", label %then-block-549-.i.i\n\nthen-block-549-.i.i:                              ; preds = %clean_custom_6\n  %15 = bitcast i64* %2 to i8*\n  tail call void @je_dallocx(i8* %15, i32 3)\n  br label %\"_ZN25std..vec..Vec$LT$uint$GT$14glue_drop.115917h10684057aba082a7E.exit\"\n\n\"_ZN25std..vec..Vec$LT$uint$GT$14glue_drop.115917h10684057aba082a7E.exit\": ; preds = %clean_custom_6, %then-block-549-.i.i\n  ret i64 %__make_return_pointer.0\n}\n\ndeclare void @je_dallocx(i8*, i32) unnamed_addr #2\n\n; Function Attrs: uwtable\ndefine i64 @_ZN5owned20h3f7b4426165c9e96Bba4v0.0E({ i64, i64, [0 x i64] }* noalias nonnull) unnamed_addr #1 {\nentry-block:\n  %1 = getelementptr inbounds { i64, i64, [0 x i64] }* %0, i64 0, i32 2, i64 0\n  %2 = getelementptr inbounds { i64, i64, [0 x i64] }* %0, i64 0, i32 0\n  %3 = load i64* %2, align 8\n  %4 = lshr i64 %3, 3\n  %5 = getelementptr inbounds { i64, i64, [0 x i64] }* %0, i64 0, i32 2, i64 %4\n  br label %loop_body\n\nloop_body:                                        ; preds = %entry-block, %match_else\n  %6 = phi i64* [ %1, %entry-block ], [ %8, %match_else ]\n  %7 = icmp eq i64* %6, %5\n  br i1 %7, label %\"_ZN17_$UP$$x5buint$x5d14glue_drop.120017hf14aae96f6d219c9E.exit\", label %match_else\n\nmatch_else:                                       ; preds = %loop_body\n  %8 = getelementptr inbounds i64* %6, i64 1\n  %9 = load i64* %6, align 8\n  %10 = icmp ugt i64 %9, 10\n  br i1 %10, label %\"_ZN17_$UP$$x5buint$x5d14glue_drop.120017hf14aae96f6d219c9E.exit\", label %loop_body\n\n\"_ZN17_$UP$$x5buint$x5d14glue_drop.120017hf14aae96f6d219c9E.exit\": ; preds = %loop_body, %match_else\n  %__make_return_pointer.0 = phi i64 [ %9, %match_else ], [ 0, %loop_body ]\n  %11 = bitcast { i64, i64, [0 x i64] }* %0 to i8*\n  tail call void @je_dallocx(i8* %11, i32 3)\n  ret i64 %__make_return_pointer.0\n}\n\nattributes #0 = { nounwind readonly uwtable \"split-stack\" }\nattributes #1 = { uwtable \"split-stack\" }\nattributes #2 = { \"split-stack\" }\n```\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/11751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/11751/timeline", "performed_via_github_app": null, "state_reason": "completed"}