{"url": "https://api.github.com/repos/rust-lang/rust/issues/75415", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/75415/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/75415/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/75415/events", "html_url": "https://github.com/rust-lang/rust/issues/75415", "id": 677068606, "node_id": "MDU6SXNzdWU2NzcwNjg2MDY=", "number": 75415, "title": "[nightly] ICE when using GATs with const generics", "user": {"login": "svenknobloch", "id": 15171965, "node_id": "MDQ6VXNlcjE1MTcxOTY1", "avatar_url": "https://avatars.githubusercontent.com/u/15171965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svenknobloch", "html_url": "https://github.com/svenknobloch", "followers_url": "https://api.github.com/users/svenknobloch/followers", "following_url": "https://api.github.com/users/svenknobloch/following{/other_user}", "gists_url": "https://api.github.com/users/svenknobloch/gists{/gist_id}", "starred_url": "https://api.github.com/users/svenknobloch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svenknobloch/subscriptions", "organizations_url": "https://api.github.com/users/svenknobloch/orgs", "repos_url": "https://api.github.com/users/svenknobloch/repos", "events_url": "https://api.github.com/users/svenknobloch/events{/privacy}", "received_events_url": "https://api.github.com/users/svenknobloch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1485960423, "node_id": "MDU6TGFiZWwxNDg1OTYwNDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_associated_types", "name": "F-generic_associated_types", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_associated_types)]` a.k.a. GATs"}, {"id": 1615551553, "node_id": "MDU6TGFiZWwxNjE1NTUxNTUz", "url": "https://api.github.com/repos/rust-lang/rust/labels/glacier", "name": "glacier", "color": "a5e2ff", "default": false, "description": "ICE tracked in rust-lang/glacier"}], "state": "closed", "locked": false, "assignee": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-08-11T17:44:11Z", "updated_at": "2021-02-13T05:38:00Z", "closed_at": "2021-02-13T05:38:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n[playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=af00f39dc4b303b0579133416d712db9)\r\n\r\n### Code\r\n\r\n```Rust\r\n#![allow(incomplete_features)]\r\n#![feature(generic_associated_types)]\r\n#![feature(const_generics)]\r\n\r\npub trait Buffer<const T: usize> {}\r\n\r\npub trait Device {\r\n    type Buffer<const T: usize>: Buffer<{ T }>;\r\n\r\n    fn create_buffer<const T: usize>(&self) -> Option<Self::Buffer<{ T }>>;\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.47.0-nightly (6c8927b0c 2020-07-26)\r\nbinary: rustc\r\ncommit-hash: 6c8927b0cf80ceee19386026cf9d7fd4fd9d486f\r\ncommit-date: 2020-07-26\r\nhost: x86_64-apple-darwin\r\nrelease: 1.47.0-nightly\r\nLLVM version: 10.0\r\n```\r\n\r\n### Error output\r\n\r\n```\r\nerror: internal compiler error: src/librustc_typeck/collect/type_of.rs:82:26: unexpected const parent path Ty(Ty { hir_id: HirId { owner: DefId(0:9 ~ playground[a09e]::Device[0]::create_buffer[0]), local_id: 8 }, kind: Path(TypeRelative(Ty { hir_id: HirId { owner: DefId(0:9 ~ playground[a09e]::Device[0]::create_buffer[0]), local_id: 10 }, kind: Path(Resolved(None, Path { span: src/main.rs:10:55: 10:74 (#0), res: SelfTy(Some(DefId(0:5 ~ playground[a09e]::Device[0])), None), segments: [PathSegment { ident: Self#0, hir_id: Some(HirId { owner: DefId(0:9 ~ playground[a09e]::Device[0]::create_buffer[0]), local_id: 9 }), res: Some(SelfTy(Some(DefId(0:5 ~ playground[a09e]::Device[0])), None)), args: None, infer_args: false }] })), span: src/main.rs:10:55: 10:74 (#0) }, PathSegment { ident: Buffer#0, hir_id: Some(HirId { owner: DefId(0:9 ~ playground[a09e]::Device[0]::create_buffer[0]), local_id: 16 }), res: Some(Err), args: Some(GenericArgs { args: [Const(ConstArg { value: AnonConst { hir_id: HirId { owner: DefId(0:9 ~ playground[a09e]::Device[0]::create_buffer[0]), local_id: 11 }, body: BodyId { hir_id: HirId { owner: DefId(0:9 ~ playground[a09e]::Device[0]::create_buffer[0]), local_id: 15 } } }, span: src/main.rs:10:68: 10:73 (#0) })], bindings: [], parenthesized: false }), infer_args: false })), span: src/main.rs:10:55: 10:74 (#0) }\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\nerror: internal compiler error: src/librustc_typeck/collect/type_of.rs:82:26: unexpected const parent path Ty(Ty { hir_id: HirId { owner: DefId(0:37 ~ gfx[85a5]::device[0]::Device[0]::create_buffer[0]), local_id: 13 }, kind: Path(TypeRelative(Ty { hir_id: HirId { owner: DefId(0:37 ~ gfx[85a5]::device[0]::Device[0]::create_buffer[0]), local_id: 15 }, kind: Path(Resolved(None, Path { span: gfx/src/device.rs:15:66: 15:91 (#0), res: SelfTy(Some(DefId(0:30 ~ gfx[85a5]::device[0]::Device[0])), None), segments: [PathSegment { ident: Self#0, hir_id: Some(HirId { owner: DefId(0:37 ~ gfx[85a5]::device[0]::Device[0]::create_buffer[0]), local_id: 14 }), res: Some(SelfTy(Some(DefId(0:30 ~ gfx[85a5]::device[0]::Device[0])), None)), args: None, infer_args: false }] })), span: gfx/src/device.rs:15:66: 15:91 (#0) }, PathSegment { ident: Buffer#0, hir_id: Some(HirId { owner: DefId(0:37 ~ gfx[85a5]::device[0]::Device[0]::create_buffer[0]), local_id: 23 }), res: Some(Err), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId { owner: DefId(0:37 ~ gfx[85a5]::device[0]::Device[0]::create_buffer[0]), local_id: 16 }, kind: Path(Resolved(None, Path { span: gfx/src/device.rs:15:79: 15:80 (#0), res: Def(TyParam, DefId(0:38 ~ gfx[85a5]::device[0]::Device[0]::create_buffer[0]::T[0])), segments: [PathSegment { ident: T#0, hir_id: Some(HirId { owner: DefId(0:37 ~ gfx[85a5]::device[0]::Device[0]::create_buffer[0]), local_id: 17 }), res: Some(Def(TyParam, DefId(0:38 ~ gfx[85a5]::device[0]::Device[0]::create_buffer[0]::T[0]))), args: None, infer_args: false }] })), span: gfx/src/device.rs:15:79: 15:80 (#0) }), Const(ConstArg { value: AnonConst { hir_id: HirId { owner: DefId(0:37 ~ gfx[85a5]::device[0]::Device[0]::create_buffer[0]), local_id: 18 }, body: BodyId { hir_id: HirId { owner: DefId(0:37 ~ gfx[85a5]::device[0]::Device[0]::create_buffer[0]), local_id: 22 } } }, span: gfx/src/device.rs:15:82: 15:90 (#0) })], bindings: [], parenthesized: false }), infer_args: false })), span: gfx/src/device.rs:15:66: 15:91 (#0) })\r\n\r\nthread 'rustc' panicked at 'Box<Any>', /rustc/6c8927b0cf80ceee19386026cf9d7fd4fd9d486f/src/libstd/macros.rs:13:23\r\nstack backtrace:\r\n   0: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n   1: core::fmt::write\r\n   2: std::io::Write::write_fmt\r\n   3: std::panicking::default_hook::{{closure}}\r\n   4: std::panicking::default_hook\r\n   5: rustc_driver::report_ice\r\n   6: std::panicking::rust_panic_with_hook\r\n   7: std::panicking::begin_panic\r\n   8: rustc_errors::HandlerInner::span_bug\r\n   9: rustc_errors::Handler::span_bug\r\n  10: rustc_middle::util::bug::opt_span_bug_fmt::{{closure}}\r\n  11: rustc_middle::ty::context::tls::with_opt::{{closure}}\r\n  12: rustc_middle::ty::context::tls::with_opt\r\n  13: rustc_middle::util::bug::opt_span_bug_fmt\r\n  14: rustc_middle::util::bug::span_bug_fmt\r\n  15: rustc_typeck::collect::type_of::opt_const_param_of\r\n  16: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::opt_const_param_of>::compute\r\n  17: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  18: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  19: rustc_data_structures::stack::ensure_sufficient_stack\r\n  20: rustc_query_system::query::plumbing::get_query_impl\r\n  21: rustc_typeck::check::typeck\r\n  22: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::typeck>::compute\r\n  23: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  24: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  25: rustc_data_structures::stack::ensure_sufficient_stack\r\n  26: rustc_query_system::query::plumbing::get_query_impl\r\n  27: rustc_query_system::query::plumbing::ensure_query_impl\r\n  28: rustc_typeck::check::typeck_item_bodies\r\n  29: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::typeck_item_bodies>::compute\r\n  30: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  31: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  32: rustc_data_structures::stack::ensure_sufficient_stack\r\n  33: rustc_query_system::query::plumbing::get_query_impl\r\n  34: rustc_typeck::check_crate\r\n  35: rustc_interface::passes::analysis\r\n  36: rustc_middle::ty::query::<impl rustc_query_system::query::config::QueryAccessors<rustc_middle::ty::context::TyCtxt> for rustc_middle::ty::query::queries::analysis>::compute\r\n  37: rustc_middle::dep_graph::<impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind>::with_deps\r\n  38: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\r\n  39: rustc_query_system::query::plumbing::get_query_impl\r\n  40: rustc_middle::ty::context::tls::enter_global\r\n  41: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  42: rustc_span::with_source_map\r\n  43: rustc_interface::interface::create_compiler_and_run\r\n  44: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.47.0-nightly (6c8927b0c 2020-07-26) running on x86_64-apple-darwin\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [opt_const_param_of] computing the optional const parameter of `device::Device::create_buffer::{{constant}}#0`\r\n#1 [typeck] type-checking `device::Device::create_buffer::{{constant}}#0`\r\n#2 [typeck_item_bodies] type-checking all item bodies\r\n#3 [analysis] running analysis passes on this crate\r\nend of query stack\r\nerror: aborting due to previous error\r\n```\r\n\r\n</p>\r\n</details>\r\n\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"BoxyUwU\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/75415/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/75415/timeline", "performed_via_github_app": null, "state_reason": "completed"}