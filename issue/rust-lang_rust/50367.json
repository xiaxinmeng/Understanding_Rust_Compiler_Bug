{"url": "https://api.github.com/repos/rust-lang/rust/issues/50367", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50367/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50367/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50367/events", "html_url": "https://github.com/rust-lang/rust/issues/50367", "id": 319187753, "node_id": "MDU6SXNzdWUzMTkxODc3NTM=", "number": 50367, "title": "Why does `x.py test src/libcore --stage 0` build everything up to the stage2 compiler?", "user": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 325438536, "node_id": "MDU6TGFiZWwzMjU0Mzg1MzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-bootstrap", "name": "T-bootstrap", "color": "bfd4f2", "default": false, "description": "Relevant to the bootstrap subteam: Rust's build system (x.py and src/bootstrap)"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-01T12:40:26Z", "updated_at": "2020-06-28T02:15:56Z", "closed_at": "2020-06-28T02:15:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Today I worked on libcore. To naive me, libcore should be just like any other library on crates.io. This means I would expect to switch into the directory and execute `cargo test`. Now I know that libcore is not exactly like any other library, but I still expect a few things. Things like \"I don't need to build the stage2 compiler to run unit tests\". \r\n\r\nI tried to run this with the following result (I only kept the main steps):\r\n\r\n```\r\n$ ./x.py test src/libcore --stage 0\r\nUpdating only changed submodules\r\nSubmodules updated in 0.02 seconds\r\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage0 test artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage0 test from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage0 rustc from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding rustdoc for stage0 (x86_64-unknown-linux-gnu)\r\nBuilding LLVM for x86_64-unknown-linux-gnu\r\nBuilding stage0 codegen artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu, llvm)\r\nAssembling stage1 compiler (x86_64-unknown-linux-gnu)\r\nBuilding stage1 std artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage1 std from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage1 test artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage1 test from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage1 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\nCopying stage1 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\r\nBuilding stage1 codegen artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu, llvm)\r\nAssembling stage2 compiler (x86_64-unknown-linux-gnu)\r\nTesting core stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\n```\r\n\r\nIt takes forever and doesn't make a lot of sense to me. I'd say I understand the basics of self hosting compilers, but I fail to understand `x.py` and I haven't found any resources that explain this behavior. Until now, I only worked on `core` or `std` and I always need to wait through long build times which also builds the compiler (multiple times). Also: if I change a thing in libcore, all of those steps are executed again! I don't understand...\r\n\r\nI already experimented with the `--stage` and `--keep-stage` parameters, but apparently they are just broken somehow. Maybe we need a *build system working group* for [all these issues](https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&q=is%3Aissue++label%3AA-build+is%3Aopen+)? :yum: \r\n\r\nI know that you all are already trying to improve the compiler documentation a lot (thanks!), but I'm afraid that I think it's still very suboptimal when it comes to the build system (for reference, I read [this](https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#the-build-system) and [this](https://github.com/rust-lang/rust/tree/master/src/bootstrap/)). These long build times and in particular the feeling that everything could be faster \"if stupid me would only understand the build system\", are not really beneficial to attract (and keep) new contributors. There is only so much laundry one can during builds...", "closed_by": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50367/timeline", "performed_via_github_app": null, "state_reason": "completed"}