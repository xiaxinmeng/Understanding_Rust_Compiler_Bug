{"url": "https://api.github.com/repos/rust-lang/rust/issues/49682", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49682/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49682/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49682/events", "html_url": "https://github.com/rust-lang/rust/issues/49682", "id": 311506711, "node_id": "MDU6SXNzdWUzMTE1MDY3MTE=", "number": 49682, "title": "Keeping references to #[thread_local] statics is allowed across yields.", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 60344715, "node_id": "MDU6TGFiZWw2MDM0NDcxNQ==", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-medium", "name": "P-medium", "color": "eb6420", "default": false, "description": "Medium priority"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 267612997, "node_id": "MDU6TGFiZWwyNjc2MTI5OTc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-unsound", "name": "I-unsound", "color": "e11d21", "default": false, "description": "Issue: A soundness hole (worst kind of bug), see: https://en.wikipedia.org/wiki/Soundness"}, {"id": 679846574, "node_id": "MDU6TGFiZWw2Nzk4NDY1NzQ=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-generators", "name": "A-generators", "color": "f7e101", "default": false, "description": "Area: Generators"}, {"id": 1472513502, "node_id": "MDU6TGFiZWwxNDcyNTEzNTAy", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generators", "name": "F-generators", "color": "f9c0cc", "default": false, "description": "`#![feature(generators)]`"}, {"id": 1472563007, "node_id": "MDU6TGFiZWwxNDcyNTYzMDA3", "url": "https://api.github.com/repos/rust-lang/rust/labels/requires-nightly", "name": "requires-nightly", "color": "76dcde", "default": false, "description": "This issue requires a nightly compiler in some way."}, {"id": 1472573111, "node_id": "MDU6TGFiZWwxNDcyNTczMTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-thread_local", "name": "F-thread_local", "color": "f9c0cc", "default": false, "description": "`#![feature(thread_local)]`"}, {"id": 3921861239, "node_id": "LA_kwDOAAsO6M7pwtp3", "url": "https://api.github.com/repos/rust-lang/rust/labels/S-bug-has-test", "name": "S-bug-has-test", "color": "862eff", "default": false, "description": "A `known-bug` test has been added for this bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-05T07:53:36Z", "updated_at": "2023-04-27T19:31:13Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "*This does not affect stabilization of `async fn` unless `#[thread_local]` is also stabilized*\r\n\r\n[Try on playground](https://play.rust-lang.org/?gist=8cf0763bd1ca6107622592a751c565d0&version=nightly):\r\n```rust\r\n#![feature(generators, generator_trait, thread_local)]\r\n\r\nuse std::ops::Generator;\r\nuse std::sync::atomic::{AtomicUsize, Ordering};\r\nuse std::thread;\r\n\r\n#[thread_local]\r\nstatic FOO: AtomicUsize = AtomicUsize::new(0);\r\n\r\nfn foo() -> impl Generator<Yield = (String, usize), Return = ()> {\r\n    static || {\r\n        let x = &FOO;\r\n        loop {\r\n            let s = format!(\"{:p}\", x);\r\n            yield (s, x.fetch_add(1, Ordering::SeqCst));\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    unsafe {\r\n        let mut g = thread::spawn(|| {\r\n            let mut g = foo();\r\n            println!(\"&FOO = {:p}; resume() = {:?}\", &FOO, g.resume());\r\n            g\r\n        }).join().unwrap();\r\n        println!(\"&FOO = {:p}; resume() = {:?}\", &FOO, g.resume());\r\n        thread::spawn(move || {\r\n            println!(\"&FOO = {:p}; resume() = {:?}\", &FOO, g.resume());\r\n        }).join().unwrap();\r\n    }\r\n}\r\n```\r\nSample output:\r\n```\r\n&FOO = 0x7f48f9bff688; resume() = Yielded((\"0x7f48f9bff688\", 0))\r\n&FOO = 0x7f48fafd37c8; resume() = Yielded((\"0x7f48f9bff688\", 1))\r\n&FOO = 0x7f48f9bff688; resume() = Yielded((\"0x7f48f9bff688\", 0))\r\n```\r\nYou can see by the pointer addresses and values inside `FOO` that the same location was reused for the second child thread (it's a bit harder to show a crash) - this is clearly an use-after-free.\r\nIf we had in-language `async`, the same problem could be demonstrated using those.\r\n\r\nIn non-generator functions, such references have function-local lifetimes and cannot escape.\r\nWith the stable `thread_local!` from `libstd`, user code gets access to the reference in a (non-generator/async) closure, which also doesn't allow escaping the reference.\r\n\r\ncc @alexcrichton @withoutboats @Zoxc", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49682/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49682/timeline", "performed_via_github_app": null, "state_reason": null}