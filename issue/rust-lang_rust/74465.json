{"url": "https://api.github.com/repos/rust-lang/rust/issues/74465", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/74465/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/74465/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/74465/events", "html_url": "https://github.com/rust-lang/rust/issues/74465", "id": 659755958, "node_id": "MDU6SXNzdWU2NTk3NTU5NTg=", "number": 74465, "title": "Tracking Issue for `once_cell`", "user": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9695584, "node_id": "MDU6TGFiZWw5Njk1NTg0", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-concurrency", "name": "A-concurrency", "color": "f7e101", "default": false, "description": "Area: Concurrency related issues."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 246778137, "node_id": "MDU6TGFiZWwyNDY3NzgxMzc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/B-unstable", "name": "B-unstable", "color": "d304cb", "default": false, "description": "Implemented in the nightly compiler and unstable."}, {"id": 650846969, "node_id": "MDU6TGFiZWw2NTA4NDY5Njk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-tracking-issue", "name": "C-tracking-issue", "color": "f5f1fd", "default": false, "description": "Category: A tracking issue for an RFC or an unstable feature."}, {"id": 2240305001, "node_id": "MDU6TGFiZWwyMjQwMzA1MDAx", "url": "https://api.github.com/repos/rust-lang/rust/labels/Libs-Tracked", "name": "Libs-Tracked", "color": "d4c5f9", "default": false, "description": "Libs issues that are tracked on the team's project board."}], "state": "closed", "locked": false, "assignee": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 137, "created_at": "2020-07-18T00:07:30Z", "updated_at": "2023-06-01T21:46:23Z", "closed_at": "2023-03-30T15:30:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a tracking issue for the RFC \"standard lazy types\" (rust-lang/rfcs#2788).\r\nThe feature gate for the issue is `#![feature(once_cell)]`.\r\n\r\n### Unstable API\r\n\r\n```rust\r\n// core::lazy\r\n\r\npub struct OnceCell<T> { .. }\r\n\r\nimpl<T> OnceCell<T> {\r\n    pub const fn new() -> OnceCell<T>;\r\n    pub fn get(&self) -> Option<&T>;\r\n    pub fn get_mut(&mut self) -> Option<&mut T>;\r\n    pub fn set(&self, value: T) -> Result<(), T>;\r\n    pub fn get_or_init<F>(&self, f: F) -> &T where F: FnOnce() -> T;\r\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E> where F: FnOnce() -> Result<T, E>;\r\n    pub fn into_inner(self) -> Option<T>;\r\n    pub fn take(&mut self) -> Option<T>;\r\n}\r\nimpl<T> From<T> for OnceCell<T>;\r\nimpl<T> Default for OnceCell<T>;\r\nimpl<T: Clone> Clone for OnceCell<T>;\r\nimpl<T: PartialEq> PartialEq for OnceCell<T>;\r\nimpl<T: Eq> Eq for OnceCell<T>;\r\nimpl<T: fmt::Debug> fmt::Debug for OnceCell<T>;\r\n\r\npub struct Lazy<T, F = fn() -> T> { .. }\r\n\r\nimpl<T, F> Lazy<T, F> {\r\n    pub const fn new(init: F) -> Lazy<T, F>;\r\n}\r\nimpl<T, F: FnOnce() -> T> Lazy<T, F> {\r\n    pub fn force(this: &Lazy<T, F>) -> &T;\r\n}\r\nimpl<T: Default> Default for Lazy<T>;\r\nimpl<T, F: FnOnce() -> T> Deref for Lazy<T, F>;\r\nimpl<T: fmt::Debug, F> fmt::Debug for Lazy<T, F>;\r\n\r\n// std::lazy\r\n\r\npub struct SyncOnceCell<T> { .. }\r\n\r\nimpl<T> SyncOnceCell<T> {\r\n    pub const fn new() -> SyncOnceCell<T>;\r\n    pub fn get(&self) -> Option<&T>;\r\n    pub fn get_mut(&mut self) -> Option<&mut T>;\r\n    pub fn set(&self, value: T) -> Result<(), T>;\r\n    pub fn get_or_init<F>(&self, f: F) -> &T where F: FnOnce() -> T;\r\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E> where F: FnOnce() -> Result<T, E>;\r\n    pub fn into_inner(mut self) -> Option<T>;\r\n    pub fn take(&mut self) -> Option<T>;\r\n    fn is_initialized(&self) -> bool;\r\n    fn initialize<F, E>(&self, f: F) -> Result<(), E> where F: FnOnce() -> Result<T, E>;\r\n    unsafe fn get_unchecked(&self) -> &T;\r\n    unsafe fn get_unchecked_mut(&mut self) -> &mut T;\r\n}\r\nimpl<T> From<T> for SyncOnceCell<T>;\r\nimpl<T> Default for SyncOnceCell<T>;\r\nimpl<T: RefUnwindSafe + UnwindSafe> RefUnwindSafe for SyncOnceCell<T>;\r\nimpl<T: UnwindSafe> UnwindSafe for SyncOnceCell<T>;\r\nimpl<T: Clone> Clone for SyncOnceCell<T>;\r\nimpl<T: PartialEq> PartialEq for SyncOnceCell<T>;\r\nimpl<T: Eq> Eq for SyncOnceCell<T>;\r\nunsafe impl<T: Sync + Send> Sync for SyncOnceCell<T>;\r\nunsafe impl<T: Send> Send for SyncOnceCell<T>;\r\nimpl<T: fmt::Debug> fmt::Debug for SyncOnceCell<T>;\r\n\r\npub struct SyncLazy<T, F = fn() -> T>;\r\n\r\nimpl<T, F> SyncLazy<T, F> {\r\n    pub const fn new(f: F) -> SyncLazy<T, F>;\r\n}\r\nimpl<T, F: FnOnce() -> T> SyncLazy<T, F> {\r\n    pub fn force(this: &SyncLazy<T, F>) -> &T;\r\n}\r\nimpl<T, F: FnOnce() -> T> Deref for SyncLazy<T, F>;\r\nimpl<T: Default> Default for SyncLazy<T>;\r\nimpl<T, F: UnwindSafe> RefUnwindSafe for SyncLazy<T, F> where SyncOnceCell<T>: RefUnwindSafe;\r\nimpl<T, F: UnwindSafe> UnwindSafe for SyncLazy<T, F> where SyncOnceCell<T>: UnwindSafe;\r\nunsafe impl<T, F: Send> Sync for SyncLazy<T, F> where SyncOnceCell<T>: Sync;\r\nimpl<T: fmt::Debug, F> fmt::Debug for SyncLazy<T, F>;\r\n```\r\n\r\n### Steps\r\n\r\n- [X] Complete the RFC process over at https://github.com/rust-lang/rfcs/pull/2788\r\n- [X] FCP https://github.com/rust-lang/rust/pull/105587#issuecomment-1367890678\r\n- [X] Stabilization PR: https://github.com/rust-lang/rust/pull/105587\r\n\r\n### Unresolved Questions\r\n\r\nInlined from #72414:\r\n\r\n- [X] Naming. I'm ok to just roll with the `Sync` prefix like `SyncLazy` for now, but [have a personal preference for `Atomic`](https://github.com/rust-lang/rfcs/pull/2788#issuecomment-574466983) like `AtomicLazy`. Resolved in: https://github.com/rust-lang/rust/issues/74465#issuecomment-1098359963. Surprisingly, after more than a year of deliberation we actually found a better name.\r\n- [x] [Poisoning](https://github.com/rust-lang/rfcs/pull/2788#discussion_r366725768). It seems like there's [some regret around poisoning in other `std::sync` types that we might want to just avoid upfront for `std::lazy`, especially if that would align with a future `std::mutex` that doesn't poison](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/parking_lot.3A.3AMutex.20in.20std/near/190331199). Personally, if we're adding these types to `std::lazy` instead of `std::sync`, I'd be on-board with not worrying about poisoning in `std::lazy`, and potentially deprecating `std::sync::Once` and `lazy_static` in favour of `std::lazy` down the track if it's possible, rather than attempting to replicate their behavior. cc @Amanieu @sfackler.\r\n- [x] [Consider making`SyncOnceCell::get` blocking](https://github.com/matklad/once_cell/pull/92). There doesn't seem to be consensus in the linked PR on whether or not that's strictly better than the non-blocking variant. (resolved in https://github.com/rust-lang/rust/issues/74465#issuecomment-663414310).\r\n- [X] [Atomic Ordering](https://github.com/rust-lang/rfcs/pull/2788#issuecomment-570555592). the implementation currently use `Release/Acquire`, but it could also use the elusive [Consume](https://preshing.com/20140709/the-purpose-of-memory_order_consume-in-cpp11/) ordering. Should we spec that we guarantee `Release/Acquire`? (resolved as yes: consume ordering is not defined enough to merit inclusion into std)\r\n- [x] [Sync no_std subset](https://github.com/rust-lang/rfcs/pull/2788#issuecomment-569845023). It seems plausible that we might provide some subset of `SyncOnceCell` in no_std. I think there's consensus that we don't want to include \"blocking\" parts of API, but it's unclear if non-blocking subset (get+set) would be useful. (resolved in https://github.com/rust-lang/rust/issues/74465#issuecomment-725360596).\r\n- [x] [Method naming](https://github.com/rust-lang/rust/issues/74465#issuecomment-726020743) is `get_or[_try]_init` the best name? (resolved as yes in https://github.com/rust-lang/rust/pull/107184)\r\n\r\n### Implementation history\r\n\r\n- #68198 (closed in favor of #72414)\r\n- #72414 initial imlementation\r\n- #74814 fixed `UnwindSafe` bounds\r\n", "closed_by": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/74465/reactions", "total_count": 178, "+1": 119, "-1": 0, "laugh": 0, "hooray": 25, "confused": 0, "heart": 34, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/74465/timeline", "performed_via_github_app": null, "state_reason": "completed"}