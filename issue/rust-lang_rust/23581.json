{"url": "https://api.github.com/repos/rust-lang/rust/issues/23581", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/23581/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/23581/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/23581/events", "html_url": "https://github.com/rust-lang/rust/issues/23581", "id": 63386995, "node_id": "MDU6SXNzdWU2MzM4Njk5NQ==", "number": 23581, "title": "region-outlives obligations lead to uninformative/undecipherable region inference failures", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1596121013, "node_id": "MDU6TGFiZWwxNTk2MTIxMDEz", "url": "https://api.github.com/repos/rust-lang/rust/labels/D-confusing", "name": "D-confusing", "color": "c9f7a3", "default": false, "description": "Confusing diagnostic error that should be reworked"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-03-21T10:22:44Z", "updated_at": "2022-06-08T21:35:25Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Consider this program:\n\n``` rust\nuse std::cell::Cell;\ntrait Foo { fn foo(&mut self); }\nstruct Pair<'a,'b> { x: &'a Cell<u8>, y: &'b Cell<u8> }\n\n// This impl says it callers of `foo` on `Pair<'a,'b>` must ensure\n// that 'b outlives 'a.\nimpl<'a, 'b:'a> Foo for Pair<'a, 'b> {\n    fn foo(&mut self) {\n        println!(\"pre  x: {} y: {}\", self.x.get(), self.y.get());\n        // 'b outlives 'a, so `&'b Cell<u8> <: &'a Cell<u8>`\n        self.x = self.y;\n        println!(\"post x: {} y: {}\", self.x.get(), self.y.get());\n    }\n}\n\nimpl<'a,'b> Pair<'a,'b> {\n    fn bar(&mut self) {\n        self.foo();\n    }\n}\n\nfn baz<'a,'b>(pa: &'a Cell<u8>, pb: &'b Cell<u8>) {\n    let mut p = Pair { x: pa, y: pb };\n    p.bar();\n}\n\nfn main() {\n    let a = Cell::new(1);\n    let b = Cell::new(2);\n    let pa = &a;\n    let pb = &b;\n    baz(pa, pb);\n}\n```\n\nThis yields the following error ([playpen](http://is.gd/6ukHwR)):\n\n```\n<anon>:18:14: 18:19 error: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n<anon>:18         self.foo();\n                       ^~~~~\n<anon>:17:5: 19:6 help: consider using an explicit lifetime parameter as shown: fn bar(&mut self)\n<anon>:17     fn bar(&mut self) {\n<anon>:18         self.foo();\n<anon>:19     }\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n```\n\nThere is no mention of the region constraint on the impl providing `foo` that is causing calling `foo` from `bar` to fail.\n\ncc @nikomatsakis \n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/23581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/23581/timeline", "performed_via_github_app": null, "state_reason": null}