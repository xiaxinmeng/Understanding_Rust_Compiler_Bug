{"url": "https://api.github.com/repos/rust-lang/rust/issues/31336", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/31336/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/31336/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/31336/events", "html_url": "https://github.com/rust-lang/rust/issues/31336", "id": 130233023, "node_id": "MDU6SXNzdWUxMzAyMzMwMjM=", "number": 31336, "title": "Segmentation fault inside TailRecursionElimination.cpp(LLVM) while compiling libsyntax at stage1", "user": {"login": "evilactually", "id": 11360248, "node_id": "MDQ6VXNlcjExMzYwMjQ4", "avatar_url": "https://avatars.githubusercontent.com/u/11360248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evilactually", "html_url": "https://github.com/evilactually", "followers_url": "https://api.github.com/users/evilactually/followers", "following_url": "https://api.github.com/users/evilactually/following{/other_user}", "gists_url": "https://api.github.com/users/evilactually/gists{/gist_id}", "starred_url": "https://api.github.com/users/evilactually/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evilactually/subscriptions", "organizations_url": "https://api.github.com/users/evilactually/orgs", "repos_url": "https://api.github.com/users/evilactually/repos", "events_url": "https://api.github.com/users/evilactually/events{/privacy}", "received_events_url": "https://api.github.com/users/evilactually/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-02-01T02:15:56Z", "updated_at": "2016-02-02T15:57:18Z", "closed_at": "2016-02-02T15:57:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "When building on Windows I'm getting a \"Segmentation fault\" in release mode, it seems to be happening inside tail call optimization inside LLVM. I found a workaround for now, I disabled this optimization and build completed without errors. \n\nWhen I compile with LLVM debug information (with --disable-optimize-llvm) I get a different error, something to do with invalid instruction. Also enabling debug information on rustc itself (with --enable-debug) makes the problem go away. So it is difficult to reproduce with debugging information on. Nevertheless I'm just going to report the problem here.\n\n**SETUP**\n\nWindows 10 32-bit\nUsing MSYS2(with MinGW64 tools in PATH)\nGCC 5.3.0\nCommit hash: 303892ee156e5c31222b10786e661abb24dcf241\n\n**BUILDING**\n\n`./configure && make # (release build/single-threaded)`\n\n**OUTPUT**\n\n```\n...\nrustc: i686-pc-windows-gnu/stage1/lib/rustlib/i686-pc-windows-gnu/lib/libsyntax\n/c/Src/rust-rls/mk/target.mk:186: recipe for target 'i686-pc-windows-gnu/stage1/lib/rustlib/i686-pc-windows-gnu/lib/stamp.syntax' failed\nmake: *** [i686-pc-windows-gnu/stage1/lib/rustlib/i686-pc-windows-gnu/lib/stamp.syntax] Segmentation fault\n```\n\n**FAILING COMMAND** (getting it with VERBOSE=1 make\"):\n\n`CFG_LLVM_LINKAGE_FILE=/c/Src/rust-rls/i686-pc-windows-gnu/rt/llvmdeps.rs PATH=/c/Src/rust-rls/i686-pc-windows-gnu/stage1/bin:/c/Src/rust-rls/i686-pc-windows-gnu/llvm/Release/lib:$PATH   i686-pc-windows-gnu/stage1/bin/rustc.exe --cfg stage1  -O --cfg rtopt -C rpath -C prefer-dynamic --target=i686-pc-windows-gnu   -L \"i686-pc-windows-gnu/rt\" -L native=\"C:\\Src\\rust-rls\\i686-pc-windows-gnu\\llvm\\Release/lib\"     --out-dir i686-pc-windows-gnu/stage1/lib/rustlib/i686-pc-windows-gnu/lib -C extra-filename=-db5a760f src/libsyntax/lib.rs`\n\n**FAILING FUNCTION**\n\n```\n_ZN12_GLOBAL__N_112TailCallElim13runOnFunctionERN4llvm8FunctionE:   \n  ...\n   0x6f61ddc5 <+981>:   jne    0x6f61dd90 <_ZN12_GLOBAL__N_112TailCallElim13runOnFunctionERN4llvm8FunctionE+928>\n   0x6f61ddc7 <+983>:   movb   $0x0,0x3c(%esp)\n   0x6f61ddcc <+988>:   jmp    0x6f61ddf6 <_ZN12_GLOBAL__N_112TailCallElim13runOnFunctionERN4llvm8FunctionE+1030>\n   0x6f61ddce <+990>:   xchg   %ax,%ax\n   0x6f61ddd0 <+992>:   mov    -0x4(%eax),%edx\n   0x6f61ddd3 <+995>:   mov    0x28(%esp),%ecx\n   0x6f61ddd7 <+999>:   sub    $0x4,%eax\n   0x6f61ddda <+1002>:  mov    %eax,0x78(%esp)\n=> 0x6f61ddde <+1006>:  mov    0x20(%edx),%ebx  ; EDX was 0 so reading (EDX + 0x20) is an error\n   0x6f61dde1 <+1009>:  mov    %ebp,0x4(%esp)\n   0x6f61dde5 <+1013>:  mov    %edx,(%esp)\n   ...\n```\n\nI could provide a memory dump, but I don't know how helpful it would be, as it would be too complex.\n\n**DETAILS**\n\nSymbol name **_ZN12_GLOBAL__N_112TailCallElim13runOnFunctionERN4llvm8FunctionE** corresponds to method **TailCallElim::runOnFunction** in **TailRecursionElimination.cpp** file. In fact the crash happens inside another function **TailCallElim::markTails**, which is called from **runOnFunction**:\n\n```\n do {\n    for (auto &I : *BB) {\n      if (Tracker.EscapePoints.count(&I))\n        Escaped = ESCAPED;\n=>    CallInst *CI = dyn_cast<CallInst>(&I);     // Crash happens here somewhere\n=>    if (!CI || CI->isTailCall())           // It's hard to tell since assembly was optimized\n        continue;\n\n      bool IsNoTail = CI->isNoTailCall();\n      if (!IsNoTail && CI->doesNotAccessMemory()) {\n```\n\nThis happens while compiling libsyntax. By calling \"getName\" on \"Function\", I could find out what function was being processed\n\n`_ZN51Box$LT$$u5b$ptr..P$LT$ast..TypeBinding$GT$$u5d$$GT$10drop.5622017hb9abb3e15`\n\nLooks like it was some internal function for **TypeBinding struct** in ast.rs\n\nI don't have any more information at this time, but I may be able to collect more later.\n\n**WORKAROUND**\n\nAdd `return false;` to top of  `TailCallElim::runOnFunction`. This will effectively skip the optimization\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/31336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/31336/timeline", "performed_via_github_app": null, "state_reason": "completed"}