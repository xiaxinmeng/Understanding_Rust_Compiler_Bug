{"url": "https://api.github.com/repos/rust-lang/rust/issues/78983", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78983/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78983/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78983/events", "html_url": "https://github.com/rust-lang/rust/issues/78983", "id": 741612654, "node_id": "MDU6SXNzdWU3NDE2MTI2NTQ=", "number": 78983, "title": "Inherent `impl` priority not respected for `FnMut`", "user": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 122406831, "node_id": "MDU6TGFiZWwxMjI0MDY4MzE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-closures", "name": "A-closures", "color": "f7e101", "default": false, "description": "Area: closures (`|args| { .. }`)"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-11-12T13:44:15Z", "updated_at": "2020-11-12T23:19:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am trying to implement something like `nvzqz`'s [`impls` trick](https://github.com/nvzqz/impls#how-it-works) for `FnMut`. What I see suggests that checking for this trait's implementation is not consistent with how other traits' implementations are checked for.\r\n\r\nThe way `nvzqz`'s trick works is to present the compiler with either (1) a trait `impl` or (2) a trait `impl` and an inherent `impl` where both have an item with the same signature. Case (2) applies when the inherent `impl`'s bounds are satisfied. In that case, Rust gives priority to the inherent `impl`.\r\n\r\nHowever, when I try to apply his trick with `FnMut`, I get an error regarding the inherent `impl`'s bounds. It is as though this error is short-circuiting the process of finding the common item.\r\n\r\nSpecifically, I tried this code ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=15331910ad6216855aab4fec1d204758)):\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\ntrait MyFnMut<U> {}\r\nstruct Foo<U>(pub PhantomData<U>);\r\nimpl<U> MyFnMut<U> for Foo<U> {}\r\n\r\ntrait NotFnMut {\r\n    fn is_fn_mut(&self) -> bool;\r\n}\r\n\r\nimpl<T, U> NotFnMut for IsFnMut<T, U>\r\nwhere\r\n    T: FnOnce() -> U,\r\n{\r\n    fn is_fn_mut(&self) -> bool { false }\r\n}\r\n\r\nstruct IsFnMut<T, U>(pub T, pub PhantomData<U>);\r\n\r\nimpl<T, U> IsFnMut<T, U>\r\nwhere\r\n    T: FnMut() -> U,\r\n    // T: MyFnMut<U>\r\n{\r\n    fn is_fn_mut(&self) -> bool { true }\r\n}\r\n\r\nfn main() {\r\n    let x = String::from(\"x\");\r\n    let return_x = move || x;\r\n    println!(\"return_x: {:?}\", IsFnMut::<_, String>(return_x, PhantomData).is_fn_mut());\r\n    \r\n    let return_y = || String::from(\"y\");\r\n    println!(\"return_y: {:?}\", IsFnMut::<_, String>(return_y, PhantomData).is_fn_mut());\r\n    \r\n    // let foo = Foo(PhantomData);\r\n    // println!(\"foo: {:?}\", IsFnMut::<_, String>(foo, PhantomData).is_fn_mut());\r\n}\r\n```\r\n\r\nI expected to see this:\r\n```\r\nreturn_x: false\r\nreturn_y: true\r\n```\r\n\r\nInstead, I saw this:\r\n```\r\nerror[E0525]: expected a closure that implements the `FnMut` trait, but this closure only implements `FnOnce`\r\n  --> src/main.rs:30:20\r\n   |\r\n30 |     let return_x = move || x;\r\n   |                    ^^^^^^^^-\r\n   |                    |       |\r\n   |                    |       closure is `FnOnce` because it moves the variable `x` out of its environment\r\n   |                    this closure implements `FnOnce`, not `FnMut`\r\n31 |     println!(\"return_x: {:?}\", IsFnMut::<_, String>(return_x, PhantomData).is_fn_mut());\r\n   |                                                                            --------- the requirement to implement `FnMut` derives from here\r\n```\r\n\r\n* If, in the `IsFnMut` implementation, you change `is_fn_mut` to (say) `is_fn_mut_dont_find_me`, then the output becomes:\r\n```\r\nreturn_x: false\r\nreturn_y: false\r\n```\r\nThis demonstrates that the implementation of `NotFnMut` is available for the compiler to find ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=a8cccb8f9712fb16556731fca741fa36)).\r\n\r\n* If you change the bound to `T: MyFnMut<U>` in the `IsFnMut` implementation, and uncomment the last two lines in `main`, then the output becomes:\r\n```\r\nreturn_x: false\r\nreturn_y: false\r\nfoo: true\r\n```\r\nThis demonstrates that the trick works for other traits (e.g., `MyFnMut`), and that `FnMut` is somehow \"special\" ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=86318678c856f1f959550255c766ab1f)).\r\n\r\nIs `FnMut` intentionally special in this way, or is this a bug?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78983/timeline", "performed_via_github_app": null, "state_reason": null}