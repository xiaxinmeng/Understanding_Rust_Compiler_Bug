{"url": "https://api.github.com/repos/rust-lang/rust/issues/71519", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/71519/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/71519/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/71519/events", "html_url": "https://github.com/rust-lang/rust/issues/71519", "id": 606448240, "node_id": "MDU6SXNzdWU2MDY0NDgyNDA=", "number": 71519, "title": "Support feeding rust-lld into gcc (and clang)", "user": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 37547, "node_id": "MDU6TGFiZWwzNzU0Nw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-linkage", "name": "A-linkage", "color": "f7e101", "default": false, "description": "Area: linking into static, shared libraries and binaries"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2020-04-24T16:47:42Z", "updated_at": "2021-06-11T05:02:40Z", "closed_at": "2021-06-11T05:02:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a subtask of #71515 \r\n\r\n## summary of discussion\r\n\r\nOn linux/unix platforms, you aren't supposed to directly invoke ld/lld. You're supposed to invoke the linker through your system c compiler (i.e. gcc), whose responsibility it is to discover system symbols like crt1.o and provide them to ld. This means we can't \"just\" use rust-lld; we must feed it into gcc/clang/whatever. (We *really* don't want to implement this system symbol logic ourselves.)\r\n\r\nIn general, you can't provide the linker as a path, you must inject it into the C compiler's search path as \"ld\". (\"ld.lld\" with `-fuse-ld=lld` would also be possible, but requires newer versions of GCC, so plain \"ld\" is preferable if possible.)\r\n\r\nSolution: add a new [-C linker-flavor](https://doc.rust-lang.org/rustc/codegen-options/index.html#linker-flavor) mode, `gcc-lld`, that would place rust-lld on the PATH as \"ld\" and invoke it through the system cc.\r\n\r\nNote that distros do not build rust's private rust-lld binary. They make their rust packages depend on lld and symlink it in. So if you have installed rustc via your package manager, using rust-lld *is* using your system lld. This is all to say that it's generally unnecessary to \"check\" for a system lld, as rust-lld will already be pointing at it for the folks who care about using system toolchains. \r\n\r\nShould this mode become the default on linux, anyone slipping through the cracks can similarly replace rust-lld with a symlink, or explicitly pass a linker-flavor.\r\n\r\nNote: the private rust-lld binary can be found at: \r\n\r\n`$(rustc --print sysroot)/lib/rustlib/$HOST_TARGET_TRIPLE/bin/rust-lld` \r\n\r\nwhich for desktop linux would be:\r\n\r\n`$(rustc --print sysroot)/lib/rustlib/x86_64-unknown-linux-gnu/rust-lld`\r\n\r\n\r\n## original comment:\r\n\r\nOn linux/unix platforms, you aren't supposed to directly invoke ld/lld. You're supposed to invoke the linker through your system c compiler (i.e. gcc), whose responsibility it is to discover system symbols like crt1.o and provide them to ld. This means we can't \"just\" use rust-lld; we must feed it into gcc/clang/whatever. (We *really* don't want to implement this system symbol logic ourselves.)\r\n\r\nIn general, you can't provide the linker as a path, you must inject it into the C compiler's search path as \"ld\". Alternatively, you can do the same thing but inject it as \"ld.lld\", and pass \"-fuse-ld=lld\" to gcc, which may be important as apparently lld does clang-style binary name detection to select different behaviour based on whether it's \"ld\" or \"ld.lld\". **(needs investigation)**\r\n\r\nUnfortunately `-fuse-ld=lld` is only part of GCC 9, so we may require feature/version detection to use it (clang has had it for a long time). Doing this detection may be fairly expensive (execing gcc, possibly multiple times), so we may not want to do this in rustc itself. Ideally something higher up like cargo or maybe even rustup or something would do this analysis and cache the result. **(needs design discussion)**\r\n\r\nIt's also not clear to me how one would manually opt into this compilation mode, and/or force it on. Should it be controlled by `-C linker-flavor`? **(needs design discussion)**\r\n\r\n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/71519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/71519/timeline", "performed_via_github_app": null, "state_reason": "completed"}