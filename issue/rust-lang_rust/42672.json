{"url": "https://api.github.com/repos/rust-lang/rust/issues/42672", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/42672/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/42672/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/42672/events", "html_url": "https://github.com/rust-lang/rust/issues/42672", "id": 236171436, "node_id": "MDU6SXNzdWUyMzYxNzE0MzY=", "number": 42672, "title": "Missing serialization in Rustc (TyS)?", "user": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-15T12:15:11Z", "updated_at": "2017-07-27T23:33:06Z", "closed_at": "2017-07-27T23:33:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\n(Let me first apologise for not knowing how to build a minimal runnable example. I'm working in an MIR pass...)\r\n\r\nI've been playing around inside rustc. I needed the ability to save away the MIR of each BasicBlock, (I intend for another program to load them in later).\r\n\r\nI was pleased to find the `RustcEncodable` and `RustcDecodable` traits, and furthermore that the MIR `Statement` type implement these traits:\r\n\r\n```\r\n#[derive(Clone, RustcEncodable, RustcDecodable)] \r\npub struct Statement<'tcx> {\r\n    pub source_info: SourceInfo,\r\n    pub kind: StatementKind<'tcx>,\r\n}\r\n```\r\n\r\nThis suggests that statements are intended to be serialized/deserialized. It follows that I should be able to encode statements as JSON. I tried the following in my MIR pass:\r\n\r\n``` \r\n // bb_data is a BasicBlockData struct from the MIR\r\nlet js = json::encode(&bb_data.statements);                         \r\nif js.is_ok() {                                                     \r\n    println!(\"{}\", js.unwrap());                                                                           \r\n} else {\r\n    println!(\"can't serialize\");\r\n}\r\n```\r\n\r\nThis compiles, but if I use the resulting rustc to build my test program, rustc panics:\r\n```\r\nthread 'rustc' panicked at 'missing specializaiton: `<serialize::json::Encoder as SpecializedEncoder<&rustc::ty::TyS>>::specialized_encode` not overriden', src/libserialize/serialize.rs:740\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace\r\n   1: std::sys_common::backtrace::_print\r\n   2: std::panicking::default_hook::{{closure}}\r\n   3: std::panicking::default_hook\r\n   4: std::panicking::rust_panic_with_hook\r\n   5: std::panicking::begin_panic\r\n   6: std::panicking::begin_panic_fmt\r\n   7: <T as serialize::serialize::Encodable>::encode\r\n   8: <rustc::mir::ProjectionElem<'tcx, V> as serialize::serialize::Encodable>::encode\r\n   9: <serialize::json::Encoder<'a> as serialize::serialize::Encoder>::emit_struct_field\r\n  10: <rustc::mir::Lvalue<'tcx> as serialize::serialize::Encodable>::encode\r\n  11: <serialize::json::Encoder<'a> as serialize::serialize::Encoder>::emit_enum_variant\r\n  12: <rustc::mir::Operand<'tcx> as serialize::serialize::Encodable>::encode\r\n  13: <rustc::mir::StatementKind<'tcx> as serialize::serialize::Encodable>::encode\r\n  14: <rustc_mir::transform::metarust_block_marker::BlockMarkerPass as rustc::mir::transform::MirPass>::run_pass\r\n  15: rustc_mir::transform::run_suite\r\n  16: rustc_mir::transform::mir_const\r\n  17: rustc::ty::maps::<impl rustc::ty::maps::queries::mir_const<'tcx>>::try_get\r\n  18: rustc::ty::maps::TyCtxtAt::mir_const\r\n  19: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::mir_const\r\n  20: rustc_mir::transform::mir_validated\r\n  21: rustc::ty::maps::<impl rustc::ty::maps::queries::mir_validated<'tcx>>::try_get\r\n  22: rustc::ty::maps::TyCtxtAt::mir_validated\r\n  23: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::mir_validated\r\n  24: rustc_borrowck::borrowck::borrowck\r\n  25: rustc::ty::maps::<impl rustc::ty::maps::queries::borrowck<'tcx>>::try_get\r\n  26: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::borrowck\r\n  27: rustc_borrowck::borrowck::check_crate\r\n  28: rustc_driver::driver::phase_3_run_analysis_passes::{{closure}}\r\n  29: rustc_driver::driver::phase_3_run_analysis_passes\r\n  30: rustc_driver::driver::compile_input\r\n  31: rustc_driver::run_compiler\r\n```\r\n\r\nAlright, so the compiler doesn't know how to serialize a `TyS`. If I derive the serialization implementations for this type:\r\n\r\n```diff\r\n+#[derive(RustcEncodable, RustcDecodable)]\r\n pub struct TyS<'tcx> {\r\n     pub sty: TypeVariants<'tcx>,\r\n     pub flags: TypeFlags,\r\n```\r\n\r\nThis gives a compile-time error for the MIR pass:\r\n\r\n```\r\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\r\n   Compiling rustc v0.0.0 (file:///home/vext01/research/metarust/src/librustc)\r\nerror[E0277]: the trait bound `ty::TypeFlags: serialize::UseSpecializedEncodable` is not satisfied\r\n   --> src/librustc/ty/mod.rs:446:10\r\n    |\r\n446 | #[derive(RustcEncodable, RustcDecodable)]\r\n    |          ^^^^^^^^^^^^^^ the trait `serialize::UseSpecializedEncodable` is not implemented for `ty::TypeFlags`\r\n    |\r\n    = note: required because of the requirements on the impl of `serialize::Encodable` for `ty::TypeFlags`\r\n    = note: required by `serialize::Encodable::encode`\r\n\r\nerror[E0277]: the trait bound `ty::TypeFlags: serialize::UseSpecializedDecodable` is not satisfied\r\n   --> src/librustc/ty/mod.rs:446:26\r\n    |\r\n446 | #[derive(RustcEncodable, RustcDecodable)]\r\n    |                          ^^^^^^^^^^^^^^ the trait `serialize::UseSpecializedDecodable` is not implemented for `ty::TypeFlags`\r\n    |\r\n    = note: required because of the requirements on the impl of `serialize::Decodable` for `ty::TypeFlags`\r\n    = note: required by `serialize::Decodable::decode`\r\n\r\nerror: aborting due to 2 previous errors\r\n```\r\n\r\nAlright, let's do the same for `TypeFlags`:\r\n\r\n```diff\r\n bitflags! {\r\n+    #[derive(RustcEncodable, RustcDecodable)]\r\n     flags TypeFlags: u32 {\r\n         const HAS_PARAMS         = 1 << 0,\r\n         const HAS_SELF           = 1 << 1,\r\n```\r\n\r\nThis makes rustc fail to compile like this:\r\n```\r\nthread 'rustc' panicked at 'internal error: entered unreachable code', src/librustc/hir/mod.rs:681\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace\r\n   1: std::sys_common::backtrace::_print\r\n   2: std::panicking::default_hook::{{closure}}\r\n   3: std::panicking::default_hook\r\n   4: std::panicking::rust_panic_with_hook\r\n   5: std::panicking::begin_panic\r\n   6: serialize::serialize::Decoder::read_enum_variant_arg\r\n   7: <rustc_metadata::decoder::DecodeContext<'a, 'tcx> as serialize::serialize::SpecializedDecoder<&'tcx\r\n rustc::ty::TyS<'tcx>>>::specialized_decode\r\n   8: rustc_metadata::decoder::<impl rustc_metadata::cstore::CrateMetadata>::get_type\r\n   9: rustc_metadata::cstore_impl::provide::type_of\r\n  10: rustc::ty::maps::<impl rustc::ty::maps::queries::type_of<'tcx>>::try_get\r\n  11: rustc::ty::trait_def::trait_impls_of_provider\r\n  12: rustc::ty::maps::<impl rustc::ty::maps::queries::trait_impls_of<'tcx>>::try_get\r\n  13: rustc::ty::maps::TyCtxtAt::trait_impls_of\r\n  14: rustc::ty::trait_def::relevant_trait_impls_provider\r\n  15: rustc::ty::maps::<impl rustc::ty::maps::queries::relevant_trait_impls_for<'tcx>>::try_get\r\n  16: rustc::ty::maps::TyCtxtAt::relevant_trait_impls_for\r\n  17: rustc::traits::select::SelectionContext::assemble_candidates_from_impls\r\n  18: rustc::traits::select::SelectionContext::assemble_candidates\r\n  19: rustc::traits::select::SelectionContext::candidate_from_obligation\r\n  20: rustc::traits::select::SelectionContext::select\r\n  21: rustc_typeck::check::coercion::Coerce::coerce\r\n  22: rustc_typeck::check::coercion::<impl rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx>>::try_coerce\r\n  23: rustc_typeck::check::demand::<impl rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx>>::demand_coerce\r\n  24: rustc_typeck::check::typeck_tables_of::{{closure}}\r\n  25: rustc_typeck::check::typeck_tables_of\r\n  26: rustc::ty::maps::<impl rustc::ty::maps::queries::typeck_tables_of<'tcx>>::try_get\r\n  27: rustc::ty::maps::TyCtxtAt::typeck_tables_of\r\n  28: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::typeck_tables_of\r\n  29: rustc_const_eval::eval::const_eval\r\n  30: rustc::ty::maps::<impl rustc::ty::maps::queries::const_eval<'tcx>>::try_get\r\n  31: rustc::ty::maps::TyCtxtAt::const_eval\r\n  32: rustc::middle::const_val::eval_length\r\n  33: <rustc_typeck::astconv::AstConv<'gcx, 'tcx> + 'o>::ast_ty_to_ty\r\n  34: rustc_typeck::collect::type_of\r\n  35: rustc::ty::maps::<impl rustc::ty::maps::queries::type_of<'tcx>>::try_get\r\n  36: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::type_of\r\n  37: <rustc_typeck::collect::CollectItemTypesVisitor<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>\r\n::visit_item\r\n  38: rustc_typeck::check_crate::{{closure}}::{{closure}}\r\n  39: rustc_typeck::check_crate\r\n  40: rustc_driver::driver::phase_3_run_analysis_passes::{{closure}}\r\n  41: rustc_driver::driver::phase_3_run_analysis_passes\r\n  42: rustc_driver::driver::compile_input\r\n  43: rustc_driver::run_compiler\r\n```\r\n\r\nBefore I go deeper down the rabbit hole. Is this a real bug? Should I be able to encode/decode MIR statements?\r\n\r\nThanks", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/42672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/42672/timeline", "performed_via_github_app": null, "state_reason": "completed"}