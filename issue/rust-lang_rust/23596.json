{"url": "https://api.github.com/repos/rust-lang/rust/issues/23596", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/23596/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/23596/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/23596/events", "html_url": "https://github.com/rust-lang/rust/issues/23596", "id": 63463552, "node_id": "MDU6SXNzdWU2MzQ2MzU1Mg==", "number": 23596, "title": "Add a saturating_cast between integers", "user": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-03-21T22:54:25Z", "updated_at": "2015-04-11T19:24:37Z", "closed_at": "2015-04-11T19:24:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Similar to saturating_add but for casts. Untested implementation below.\n\n``` rust\nuse std;\n\npub trait IntExt<T> {\n    fn saturating_cast(self) -> T;\n}\n\n// truncations that always preserve the value\nmacro_rules! trnc_up {\n    ($src:ty as $($dst:ty),+) => {\n        $(impl IntExt<$dst> for $src {\n            fn saturating_cast(self) -> $dst {\n                self as $dst\n            }\n        })+\n    }\n}\n\ntrnc_up!(u8 as u8, u16, i16, u32, i32, u64, i64, usize, isize);\ntrnc_up!(i8 as i8, i16, i32, i64, isize);\ntrnc_up!(u16 as u16, u32, i32, u64, i64, usize, isize);\ntrnc_up!(i16 as i16, i32, i64, isize);\ntrnc_up!(u32 as u32, u64, i64, usize);\ntrnc_up!(i32 as i32, i64, isize);\ntrnc_up!(u64 as u64);\ntrnc_up!(i64 as i64);\ntrnc_up!(usize as u64, usize);\ntrnc_up!(isize as i64, isize);\n#[cfg(target_word_size = \"64\")]\ntrnc_up!(u64 as usize);\n#[cfg(target_word_size = \"64\")]\ntrnc_up!(i64 as isize);\n#[cfg(target_word_size = \"32\")]\ntrnc_up!(usize as u32);\n#[cfg(target_word_size = \"32\")]\ntrnc_up!(isize as i32);\n\n// truncations of signed tyes to unsigned types of equal or larger width\nmacro_rules! trnc_s2u_up {\n    ($src:ty as $($dst:ty),+) => {\n        $(impl IntExt<$dst> for $src {\n            fn saturating_cast(self) -> $dst {\n                if self >= 0 {\n                    self as $dst\n                } else {\n                    0\n                }\n            }\n        })+\n    }\n}\n\ntrnc_s2u_up!(i8 as u8, u16, u32, u64, usize);\ntrnc_s2u_up!(i16 as u16, u32, u64, usize);\ntrnc_s2u_up!(i32 as u32, u64, usize);\ntrnc_s2u_up!(i64 as u64);\ntrnc_s2u_up!(isize as usize);\n#[cfg(target_word_size = \"64\")]\ntrnc_s2u_up!(i64 as usize);\n#[cfg(target_word_size = \"32\")]\ntrnc_s2u_up!(isize as u32);\n\n// truncation of signed types to types of smaller width\nmacro_rules! trnc_s_down {\n    ($src:ty as $($dst:ident),+) => {\n        $(impl IntExt<$dst> for $src {\n            fn saturating_cast(self) -> $dst {\n                if self > std::$dst::MAX as $src  {\n                    std::$dst::MAX\n                } else if self < std::$dst::MIN as $src {\n                    std::$dst::MIN\n                } else {\n                    self as $dst\n                }\n            }\n        })+\n    }\n}\n\ntrnc_s_down!(i16 as u8, i8);\ntrnc_s_down!(i32 as u8, i8, u16, i16);\ntrnc_s_down!(i64 as u8, i8, u16, i16, u32, i32);\ntrnc_s_down!(isize as u8, i8, u16, i16);\n#[cfg(target_word_size = \"64\")]\ntrnc_s_down!(isize as u32, i32);\n#[cfg(target_word_size = \"32\")]\ntrnc_s_down!(i64 as usize, isize);\n\n// truncation of unsigned types to types of equal or smaller width\nmacro_rules! trnc_u_down {\n    ($src:ty as $($dst:ident),+) => {\n        $(impl IntExt<$dst> for $src {\n            fn saturating_cast(self) -> $dst {\n                if self > std::$dst::MAX as $src  {\n                    std::$dst::MAX\n                } else {\n                    self as $dst\n                }\n            }\n        })+\n    }\n}\n\ntrnc_u_down!(u16 as i8, u8, i16);\ntrnc_u_down!(u32 as i8, u8, i16, u16, i32);\ntrnc_u_down!(u64 as i8, u8, i16, u16, i32, u32, i64);\ntrnc_u_down!(usize as i8, u8, i16, u16, i32);\n#[cfg(target_word_size = \"64\")]\ntrnc_u_down!(usize as u32, i64);\n#[cfg(target_word_size = \"32\")]\ntrnc_u_down!(u64 as isize, usize);\n```\n", "closed_by": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/23596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/23596/timeline", "performed_via_github_app": null, "state_reason": "completed"}