{"url": "https://api.github.com/repos/rust-lang/rust/issues/70494", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/70494/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/70494/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/70494/events", "html_url": "https://github.com/rust-lang/rust/issues/70494", "id": 589553850, "node_id": "MDU6SXNzdWU1ODk1NTM4NTA=", "number": 70494, "title": "Should `TryFrom` get mentioned in AsRef/AsMut?", "user": {"login": "bkaestner", "id": 6301773, "node_id": "MDQ6VXNlcjYzMDE3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6301773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkaestner", "html_url": "https://github.com/bkaestner", "followers_url": "https://api.github.com/users/bkaestner/followers", "following_url": "https://api.github.com/users/bkaestner/following{/other_user}", "gists_url": "https://api.github.com/users/bkaestner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkaestner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkaestner/subscriptions", "organizations_url": "https://api.github.com/users/bkaestner/orgs", "repos_url": "https://api.github.com/users/bkaestner/repos", "events_url": "https://api.github.com/users/bkaestner/events{/privacy}", "received_events_url": "https://api.github.com/users/bkaestner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-28T10:54:50Z", "updated_at": "2022-02-16T17:28:26Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Both `AsMut` as well as `AsRef`'s documentation contain the following note:\r\n\r\n> **Note: This trait must not fail.** If the conversion can fail, use a dedicated method which returns an `Option<T>` or a `Result<T, E>`.\r\n\r\nThis wording was added in 58d2c7909f9 and 6cda8e4eaac back in 2016/01. It was also very similar in `From` and `Into` up to 71bdeb022a9, where the explicit mention of dedicated methods was replaced by a link to the `Try*` variants. \r\n\r\nSince `TryFrom` is now stabilized, one could go ahead and write `AsRef` variants via `try_from`:\r\n\r\n```rust\r\nstruct Example {\r\n    dont_panic: bool,\r\n}\r\nstruct Panic;\r\n\r\nimpl TryFrom<&Example> for &u8 {\r\n    type Error = Panic;\r\n\r\n    fn try_from(e: &Example) -> Result<Self, Self::Error> {\r\n        if e.dont_panic {\r\n            Ok(&42)\r\n        } else {\r\n            Err(Panic)\r\n        }\r\n    }\r\n}\r\n// full example: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8446972919a4ab31222800395accb434\r\n```\r\nHowever, I'm not sure whether that breaks the original spirit of `AsRef` and `AsMut`, being *cheap* conversions and all. I'm also not sure whether it is intended to use `TryFrom` for references. \r\n\r\nIf possible failing (and costly?) *reference* conversions are indeed a use case for `TryFrom`, should this alternative to an `Option<T>` or `Result<T,E>` get added to `AsRef`'s documentation? Or is this a misuse case and reference conversion should get mentioned on `TryFrom`'s documentation as a non-goal?\r\n\r\n(Note that I don't have a use case for a `TryAsRef` or similar; I just read a lot of Rust's documentation lately and came across the symmetry between `From` and `TryFrom` and the missing counterpart in `AsRef`)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/70494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/70494/timeline", "performed_via_github_app": null, "state_reason": null}