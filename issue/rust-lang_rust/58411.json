{"url": "https://api.github.com/repos/rust-lang/rust/issues/58411", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/58411/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/58411/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/58411/events", "html_url": "https://github.com/rust-lang/rust/issues/58411", "id": 409507440, "node_id": "MDU6SXNzdWU0MDk1MDc0NDA=", "number": 58411, "title": "rustdoc should skip unresolvable private members ", "user": {"login": "asomers", "id": 129721, "node_id": "MDQ6VXNlcjEyOTcyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/129721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asomers", "html_url": "https://github.com/asomers", "followers_url": "https://api.github.com/users/asomers/followers", "following_url": "https://api.github.com/users/asomers/following{/other_user}", "gists_url": "https://api.github.com/users/asomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/asomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asomers/subscriptions", "organizations_url": "https://api.github.com/users/asomers/orgs", "repos_url": "https://api.github.com/users/asomers/repos", "events_url": "https://api.github.com/users/asomers/events{/privacy}", "received_events_url": "https://api.github.com/users/asomers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 203738, "node_id": "MDU6TGFiZWwyMDM3Mzg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc", "name": "T-rustdoc", "color": "bfd4f2", "default": false, "description": "Relevant to the rustdoc team, which will review and decide on the PR/issue."}, {"id": 66893153, "node_id": "MDU6TGFiZWw2Njg5MzE1Mw==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-visibility", "name": "A-visibility", "color": "f7e101", "default": false, "description": "Area: visibility/privacy modifiers such as `pub`"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-12T21:25:53Z", "updated_at": "2020-08-25T16:36:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using the `doc_cfg` feature it's useful to run rustdoc on structures that aren't defined for the running platform.  However, compilation will fail if those structures have private members that also aren't defined on the running platform.  The only solution is to laboriously `#[cfg]` gate each private member, even if the struct itself is already gated.  This issue severely restricts the usefulness of `doc_cfg`.  Here's an example:\r\n```rust\r\n#[cfg(any(target_os = \"freebsd\", rustdoc))]\r\nstruct NewType {\r\n    x: libc::something_freebsd_specific\r\n}\r\n```\r\nrustdoc will fail unless you add another `#[cfg(target_os = \"freebsd\")]` attribute directly on `x`.  It should be possible for rustdoc to simply ignore `x`, since private members aren't normally documented anyway.\r\n\r\nFor a real-world example, see https://github.com/nix-rust/nix/pull/1019/files#diff-78f451c970a63ad3a93cab0d2670b05dR12 .  That PR only builds because of the extra `#[cfg()]` gate on the `libc::ucontext` variable, even though the entire module is already restricted to Linux.\r\n\r\ndoc_cfg tracking issue: https://github.com/rust-lang/rust/issues/43781\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/58411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/58411/timeline", "performed_via_github_app": null, "state_reason": null}