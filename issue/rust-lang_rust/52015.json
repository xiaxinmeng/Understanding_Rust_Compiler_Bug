{"url": "https://api.github.com/repos/rust-lang/rust/issues/52015", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/52015/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/52015/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/52015/events", "html_url": "https://github.com/rust-lang/rust/issues/52015", "id": 337822617, "node_id": "MDU6SXNzdWUzMzc4MjI2MTc=", "number": 52015, "title": "right shift of i128i by zero fails on s390x (SystemZ)", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 632899563, "node_id": "MDU6TGFiZWw2MzI4OTk1NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-SPARC", "name": "O-SPARC", "color": "6e6ec0", "default": false, "description": "Target: SPARC processors"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 896260695, "node_id": "MDU6TGFiZWw4OTYyNjA2OTU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/O-SystemZ", "name": "O-SystemZ", "color": "6e6ec0", "default": false, "description": "Target: SystemZ processors (s390x)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-07-03T09:45:06Z", "updated_at": "2021-09-04T15:25:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've set up a repository that reproduces this issue on travis (using qemu): https://github.com/gnzlbg/repro_s390x \r\n\r\nThe following code right shifts a `<1 x i128>` containing `1` by `0`. The result of the shift should be `1`, but on debug builds it is `0`, causing the following code to panic (on release the code does not panic):\r\n\r\n```rust\r\n#![feature(repr_simd, platform_intrinsics)]\r\n#![allow(non_camel_case_types)]\r\n\r\n#[derive(Copy,Clone)]\r\n#[repr(simd)]\r\npub struct i128x1(i128);\r\n\r\nextern \"platform-intrinsic\" {\r\n    pub fn simd_shr<T>(x: T, y: T) -> T;\r\n}\r\n\r\n#[test]\r\npub fn test() {\r\n    unsafe {\r\n        let z = i128x1(0 as i128);\r\n        let o = i128x1(1 as i128);\r\n\r\n        if simd_shr(o, z).0 !=  o.0 {\r\n            panic!();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe `test` function generates the following LLVM-IR\r\n\r\n```llvm\r\ndefine void @repro_s390x::test() unnamed_addr #0 {\r\nstart:\r\n%tmp_ret = alloca <1 x i128>, align 16\r\n%o = alloca <1 x i128>, align 16\r\n%z = alloca <1 x i128>, align 16\r\n%0 = bitcast <1 x i128>* %z to i128*\r\nstore i128 0, i128* %0, align 8\r\n%1 = bitcast <1 x i128>* %o to i128*\r\nstore i128 1, i128* %1, align 8\r\n%2 = load <1 x i128>, <1 x i128>* %o, align 16\r\n%3 = load <1 x i128>, <1 x i128>* %z, align 16\r\n%4 = ashr <1 x i128> %2, %3\r\nstore <1 x i128> %4, <1 x i128>* %tmp_ret, align 16\r\n%5 = load <1 x i128>, <1 x i128>* %tmp_ret, align 16\r\nbr label %bb1\r\n\r\nbb1:                                              ; preds = %start\r\n%6 = bitcast <1 x i128> %5 to i128\r\n%7 = bitcast <1 x i128>* %o to i128*\r\n%8 = load i128, i128* %7, align 8\r\n%9 = icmp ne i128 %6, %8\r\nbr i1 %9, label %bb2, label %bb3\r\n\r\nbb2:                                              ; preds = %bb1\r\n; call std::panicking::begin_panic\r\ncall void @_ZN3std9panicking11begin_panic17h3f2f8b63a0f87b42E([0 x i8]* noalias nonnull readonly bitcast (<{ [14 x i8] }>* @byte_str.2 to [0 x i8]*), i64 14, { [0 x i64], { [0 x i8]*, i64 }, [0 x i32], i32, [0 x i32], i32, [0 x i32] }* noalias readonly dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @byte_str.1 to { [0 x i64], { [0 x i8]*, i64 }, [0 x i32], i32, [0 x i32], i32, [0 x i32] }*))\r\nunreachable\r\n\r\nbb3:                                              ; preds = %bb1\r\nret void\r\n}\r\n```\r\n\r\nwhich is lowered to\r\n\r\n```asm\r\nrepro_s390x::test (src/lib.rs:12):\r\n stmg    %r11, %r15, 88(%r15)\r\n aghi    %r15, -240\r\n lgr     %r11, %r15\r\n lgr     %r0, %r15\r\n lgr     %r1, %r0\r\n aghi    %r1, -24\r\n la      %r0, 168(%r1)\r\n lgr     %r2, %r0\r\n nill    %r2, 65520\r\n lgr     %r15, %r1\r\n lgr     %r0, %r15\r\n lgr     %r1, %r0\r\n aghi    %r1, -24\r\n la      %r0, 168(%r1)\r\n lgr     %r3, %r0\r\n nill    %r3, 65520\r\n lgr     %r15, %r1\r\n lgr     %r0, %r15\r\n lgr     %r1, %r0\r\n aghi    %r1, -24\r\n la      %r0, 168(%r1)\r\n lgr     %r4, %r0\r\n nill    %r4, 65520\r\n lgr     %r15, %r1\r\n mvghi   8(%r4), 0\r\n mvghi   0(%r4), 0\r\n mvghi   8(%r3), 1\r\n mvghi   0(%r3), 0\r\n lg      %r0, 0(%r3)\r\n lg      %r1, 8(%r3)\r\n lg      %r5, 0(%r4)\r\n lg      %r4, 8(%r4)\r\n stg     %r4, 200(%r11)\r\n stg     %r5, 192(%r11)\r\n stg     %r1, 216(%r11)\r\n stg     %r0, 208(%r11)\r\n la      %r0, 224(%r11)\r\n la      %r1, 208(%r11)\r\n la      %r4, 192(%r11)\r\n stg     %r2, 184(%r11)\r\n lgr     %r2, %r0\r\n stg     %r3, 176(%r11)\r\n lgr     %r3, %r1\r\n brasl   %r14, __ashrti3@PLT\r\n lg      %r0, 224(%r11)\r\n lg      %r1, 232(%r11)\r\n lg      %r2, 184(%r11)\r\n stg     %r1, 8(%r2)\r\n stg     %r0, 0(%r2)\r\n lg      %r0, 8(%r2)\r\n lg      %r1, 0(%r2)\r\n stg     %r0, 168(%r11)\r\n stg     %r1, 160(%r11)\r\n j       .LBB0_1\r\n.LBB0_1:\r\n lg      %r1, 176(%r11)\r\n lg      %r0, 8(%r1)\r\n lg      %r2, 0(%r1)\r\n lg      %r3, 160(%r11)\r\n xgr     %r3, %r2\r\n lg      %r2, 168(%r11)\r\n xgr     %r2, %r0\r\n ogr     %r2, %r3\r\n cghi    %r2, 0\r\n je      .LBB0_3\r\n j       .LBB0_2\r\n.LBB0_2:\r\n larl    %r2, .Lbyte_str.2\r\n larl    %r4, .Lbyte_str.1\r\n lghi    %r3, 14\r\n brasl   %r14, std::panicking::begin_panic@PLT\r\n j       .Ltmp9+2\r\n.LBB0_3:\r\n lmg     %r11, %r15, 328(%r11)\r\n br      %r14\r\n```\r\n\r\ncc @rkruppe \r\n\r\nWho maintains Rust's SystemZ support? \r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/52015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/52015/timeline", "performed_via_github_app": null, "state_reason": null}