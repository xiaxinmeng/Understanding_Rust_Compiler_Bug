{"url": "https://api.github.com/repos/rust-lang/rust/issues/50029", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50029/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50029/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50029/events", "html_url": "https://github.com/rust-lang/rust/issues/50029", "id": 315095862, "node_id": "MDU6SXNzdWUzMTUwOTU4NjI=", "number": 50029, "title": "Borrow checker determines borrows by examining lifetime parameters on unexpanded associated types instead of inspecting their lifetime bounds", "user": {"login": "dylanede", "id": 10339269, "node_id": "MDQ6VXNlcjEwMzM5MjY5", "avatar_url": "https://avatars.githubusercontent.com/u/10339269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylanede", "html_url": "https://github.com/dylanede", "followers_url": "https://api.github.com/users/dylanede/followers", "following_url": "https://api.github.com/users/dylanede/following{/other_user}", "gists_url": "https://api.github.com/users/dylanede/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylanede/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylanede/subscriptions", "organizations_url": "https://api.github.com/users/dylanede/orgs", "repos_url": "https://api.github.com/users/dylanede/repos", "events_url": "https://api.github.com/users/dylanede/events{/privacy}", "received_events_url": "https://api.github.com/users/dylanede/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 171502053, "node_id": "MDU6TGFiZWwxNzE1MDIwNTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-borrow-checker", "name": "A-borrow-checker", "color": "f7e101", "default": false, "description": "Area: The borrow checker"}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-17T14:48:43Z", "updated_at": "2018-08-27T16:31:17Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following ([playpen](https://play.rust-lang.org/?gist=ec1b2f437ec978dd477a76046828699e&version=nightly)):\r\n\r\n```rust\r\ntrait Foo<'a> {\r\n    type Out: 'a;\r\n}\r\n\r\nfn foo<'a, T>(_: &'a mut T) -> <T as Foo<'a>>::Out where T : Foo<'a> {\r\n    unimplemented!()\r\n}\r\n\r\nfn baz<T>(mut x: T) where for<'a> T : Foo<'a>, for<'a> <T as Foo<'a>>::Out : 'static {\r\n    let y = foo(&mut x);\r\n    let z = foo(&mut x);\r\n}\r\n\r\nfn main() {\r\n    struct Bar;\r\n    impl<'a> Foo<'a> for Bar {\r\n        type Out = i32;\r\n    }\r\n    let mut b = Bar;\r\n    let y = foo(&mut b);\r\n    let z = foo(&mut b);\r\n}\r\n```\r\n\r\n`main` compiles fine, as expected, since the associated type expands to `i32`, which does not use the lifetime `'a` that the mutable reference input argument is bound by.\r\n\r\n`baz` however fails to compile (error message below), despite the additional constraint on `Out` to be `'static`, implying that the return value of `foo` does not borrow the argument.\r\n\r\n```text\r\nerror[E0499]: cannot borrow `x` as mutable more than once at a time\r\n  --> src/main.rs:11:22\r\n   |\r\n10 |     let y = foo(&mut x);\r\n   |                      - first mutable borrow occurs here\r\n11 |     let z = foo(&mut x);\r\n   |                      ^ second mutable borrow occurs here\r\n12 | }\r\n   | - first borrow ends here\r\n```\r\n\r\nThis problem appears to be unique to unexpanded associated types, as they are the only case where the lifetime parameters do not directly determine the lifetime bounds on the type.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50029/timeline", "performed_via_github_app": null, "state_reason": null}