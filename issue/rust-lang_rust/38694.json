{"url": "https://api.github.com/repos/rust-lang/rust/issues/38694", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/38694/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/38694/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/38694/events", "html_url": "https://github.com/rust-lang/rust/issues/38694", "id": 198085212, "node_id": "MDU6SXNzdWUxOTgwODUyMTI=", "number": 38694, "title": "Rust doesn't unroll a loop with constant\u00a0data", "user": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-12-29T23:44:04Z", "updated_at": "2018-06-05T09:30:12Z", "closed_at": "2018-06-05T09:30:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I\u00a0was playing\u00a0with http://rust.godbolt.org/ and noticed one weird thing where Rust (all of stable, beta and nightly versions) seems to prevent loop unroll and/or constant propagation optimizations.\r\n\r\nHere is original minimal\u00a0code\u00a0using which I can reproduce an issue:\r\n\r\n```rust\r\npub fn g0() -> bool {\r\n  vec![1,2,3].contains(&2)\r\n}\r\n```\r\n\r\nSo it basically creates a vector out of constant values with constant length\u00a0& capacity, and then searches for a constant value within it, which is a perfect case for constant propagation. And yet the generated assembly looks like:\r\n\r\n```asm\r\nexample::g0:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        push    rbx\r\n        push    rax\r\n        mov     edi, 12\r\n        mov     esi, 4\r\n        call    __rust_allocate@PLT\r\n        test    rax, rax\r\n        je      .LBB0_6\r\n        movabs  rcx, 8589934593\r\n        mov     qword ptr [rax], rcx\r\n        mov     dword ptr [rax + 8], 3\r\n        xor     ecx, ecx\r\n.LBB0_2:\r\n        cmp     rcx, 12\r\n        je      .LBB0_3\r\n        mov     bl, 1\r\n        cmp     dword ptr [rax + rcx], 2\r\n        lea     rcx, [rcx + 4]\r\n        jne     .LBB0_2\r\n        jmp     .LBB0_5\r\n.LBB0_3:\r\n        xor     ebx, ebx\r\n.LBB0_5:\r\n        mov     esi, 12\r\n        mov     edx, 4\r\n        mov     rdi, rax\r\n        call    __rust_deallocate@PLT\r\n        mov     eax, ebx\r\n        add     rsp, 8\r\n        pop     rbx\r\n        pop     rbp\r\n        ret\r\n.LBB0_6:\r\n        call    alloc::oom::oom@PLT\r\n```\r\n\r\nI tried writing down a plain \"dumb\" loop instead, with an `assert` + static loop bounds:\r\n\r\n```rust\r\npub fn g1() -> bool {\r\n  let v = vec![1,2,3];\r\n  assert!(v.len() == 3);\r\n  for i in 0..3 {\r\n    if v[i] == 2 {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n```\r\n\r\nBut output assembly is almost 100% the same (even though\u00a0`assert` was successfully removed by DCE, so apparently constant propagation works as expected).\r\n\r\nHowever, unrolling this same loop by hand at the next step seems to\u00a0suddenly enable optimization:\r\n\r\n```rust\r\npub fn g2() -> bool {\r\n  let v = vec![1,2,3];\r\n  assert!(v.len() == 3);\r\n  if v[0] == 2 {\r\n    return true\r\n  }\r\n  if v[1] == 2 {\r\n    return true\r\n  }\r\n  if v[2] == 2 {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n```\r\n\r\ncompiles to\r\n\r\n```asm\r\nexample::g2:\r\n        push    rbp\r\n        mov     rbp, rsp\r\n        mov     al, 1\r\n        pop     rbp\r\n        ret\r\n```\r\n\r\nas originally expected.\r\n\r\nInitially I though this is\u00a0a missing attribute on Rust allocation functions that doesn't allow LLVM\u00a0to reason about pointer contents,\u00a0but after playing with replacing allocator with system one, replacing vectors with pure static-length slices (`[i32; 3]`) and finally unrolling loop by hand as above, figured it's not an issue, otherwise\u00a01) slices would be still optimized\u00a0or 2) unrolled loop would still be not.\r\n\r\nI would be happy\u00a0to help to fix whatever is preventing those optimizations, but so far I don't really understand what's happening here or where to look for the potential bug.\r\n\r\nOnline playground URL with all these examples (plus slices): https://godbolt.org/g/TRQgg8", "closed_by": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/38694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/38694/timeline", "performed_via_github_app": null, "state_reason": "completed"}