{"url": "https://api.github.com/repos/rust-lang/rust/issues/55872", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/55872/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/55872/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/55872/events", "html_url": "https://github.com/rust-lang/rust/issues/55872", "id": 379526328, "node_id": "MDU6SXNzdWUzNzk1MjYzMjg=", "number": 55872, "title": "ICE: Type parameter W/#1 out of range when substituting", "user": {"login": "DutchGhost", "id": 25501014, "node_id": "MDQ6VXNlcjI1NTAxMDE0", "avatar_url": "https://avatars.githubusercontent.com/u/25501014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DutchGhost", "html_url": "https://github.com/DutchGhost", "followers_url": "https://api.github.com/users/DutchGhost/followers", "following_url": "https://api.github.com/users/DutchGhost/following{/other_user}", "gists_url": "https://api.github.com/users/DutchGhost/gists{/gist_id}", "starred_url": "https://api.github.com/users/DutchGhost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DutchGhost/subscriptions", "organizations_url": "https://api.github.com/users/DutchGhost/orgs", "repos_url": "https://api.github.com/users/DutchGhost/repos", "events_url": "https://api.github.com/users/DutchGhost/events{/privacy}", "received_events_url": "https://api.github.com/users/DutchGhost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 631673608, "node_id": "MDU6TGFiZWw2MzE2NzM2MDg=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait", "name": "A-impl-trait", "color": "f7e101", "default": false, "description": "Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-11-11T14:10:28Z", "updated_at": "2019-07-09T06:20:30Z", "closed_at": "2019-07-09T06:20:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Playing with async/await, using\r\n- Futures: futures-preview = \"0.3.0-alpha.9\"\r\n- Tokio: tokio = { version = \"0.1.0\", features = [\"async-await-preview\"] }\r\n\r\nand some nightly features, I stumbled upon this ICE.\r\n(possibly related to https://github.com/rust-lang/rust/issues/55265)\r\n\r\n```Rust\r\n#![feature(await_macro, async_await, futures_api, pin, existential_type)]\r\n\r\nmacro_rules! async_for {\r\n    ($item:ident in $stream:ident $todo:block) => (\r\n        while let Some($item) = await!($stream.next()) $todo\r\n    )\r\n}\r\n\r\nuse futures::{Stream, Future};\r\nuse std::marker::Unpin;\r\n\r\nuse futures::StreamExt as StreamExt;\r\n\r\nuse tokio::prelude::{AsyncWriteExt};\r\n\r\npub trait Sip\r\nwhere\r\n    Self: Stream\r\n{\r\n    type Future: Future;\r\n\r\n    fn start_sip<W, F>(self, writer: W, convert: F) -> Self::Future\r\n    where\r\n        W: AsyncWriteExt + Unpin,\r\n        F: Fn(&Self::Item) -> &[u8] + Unpin\r\n    ;\r\n}\r\n\r\nimpl <S> Sip for S\r\nwhere\r\n    S: Stream + Unpin,\r\n{\r\n    existential type Future: Future<Output = ()>;\r\n\r\n    fn start_sip<W, F>(mut self, mut writer: W, mut convert: F) -> Self::Future\r\n    where\r\n        W: AsyncWriteExt + Unpin,\r\n        F: Fn(&Self::Item) -> &[u8] + Unpin\r\n    {\r\n        async move {\r\n            async_for!(item in self {\r\n                let bytes = convert(&item);\r\n                await!(writer.write_async(bytes));\r\n            });\r\n\r\n            await!(tokio::io::shutdown(writer).into_awaitable());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n<details>\r\n<summary>Backtrace:</summary>\r\n\r\n```\r\nerror: internal compiler error: librustc\\ty\\subst.rs:462: Type parameter `W/#1` (W/1) out of range when substituting (root type=Some(impl futures::Future)) substs=[S]\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors\\lib.rs:538:9\r\nstack backtrace:\r\n   0: <std::future::SetOnDrop as core::ops::drop::Drop>::drop\r\n   1: std::panicking::take_hook\r\n   2: std::panicking::take_hook\r\n   3: <rustc::ty::sty::Binder<rustc::ty::ProjectionPredicate<'tcx>> as rustc::ty::ToPredicate<'tcx>>::to_predicate\r\n   4: std::panicking::rust_panic_with_hook\r\n   5: <usize as rustc::session::config::dep_tracking::DepTrackingHash>::hash\r\n   6: <rustc::traits::query::type_op::outlives::DropckOutlives<'a> as rustc::ty::context::Lift<'tcx>>::lift_to_tcx\r\n   7: rustc::ty::context::tls::track_diagnostic\r\n   8: rustc::ty::context::tls::track_diagnostic\r\n   9: rustc::ty::context::tls::track_diagnostic\r\n  10: rustc::ty::context::tls::track_diagnostic\r\n  11: rustc::util::bug::bug_fmt\r\n  12: rustc::util::bug::bug_fmt\r\n  13: <rustc::ty::subst::SubstFolder<'a, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  14: rustc::ty::context::TyCtxt::generate_borrow_of_any_match_input\r\n  15: rustc::ty::error::<impl rustc::ty::TyS<'tcx>>::sort_string\r\n  16: <rustc::ty::subst::SubstFolder<'a, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  17: rustc::ty::context::TyCtxt::generate_borrow_of_any_match_input\r\n  18: rustc::ty::error::<impl rustc::ty::TyS<'tcx>>::sort_string\r\n  19: <rustc::ty::subst::SubstFolder<'a, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  20: <rustc_mir::hair::pattern::check_match::MutationChecker<'a, 'tcx> as rustc::middle::expr_use_visitor::Delegate<'tcx>>::decl_without_init\r\n  21: rustc_mir::borrow_check::nll::facts::<impl core::convert::From<usize> for rustc_mir::dataflow::move_paths::indexes::BorrowIndex>::from\r\n  22: <rustc_mir::borrow_check::nll::type_check::TypeVerifier<'a, 'b, 'gcx, 'tcx> as rustc::mir::visit::Visitor<'tcx>>::visit_mir\r\n  23: <rustc_mir::borrow_check::nll::type_check::liveness::local_use_map::LocalUseMapBuild<'_, '_> as rustc::mir::visit::Visitor<'tcx>>::visit_local\r\n  24: <rustc_mir::borrow_check::nll::renumber::NLLVisitor<'a, 'gcx, 'tcx> as rustc::mir::visit::MutVisitor<'tcx>>::visit_statement\r\n  25: <rustc_mir::util::borrowck_errors::Origin as core::fmt::Debug>::fmt\r\n  26: <rustc_mir::hair::pattern::check_match::MutationChecker<'a, 'tcx> as rustc::middle::expr_use_visitor::Delegate<'tcx>>::decl_without_init\r\n  27: <rustc_mir::borrow_check::nll::renumber::NLLVisitor<'a, 'gcx, 'tcx> as rustc::mir::visit::MutVisitor<'tcx>>::visit_statement\r\n  28: rustc::ty::query::on_disk_cache::__ty_decoder_impl::<impl serialize::serialize::Decoder for rustc::ty::query::on_disk_cache::CacheDecoder<'a, 'tcx, 'x>>::read_str\r\n  29: rustc::ty::context::tls::track_diagnostic\r\n  30: rustc::ty::context::tls::track_diagnostic\r\n  31: rustc::dep_graph::graph::DepGraph::assert_ignored\r\n  32: rustc::ty::context::tls::track_diagnostic\r\n  33: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_print_query_stack\r\n  34: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::try_print_query_stack\r\n  35: rustc::ty::query::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::mir_borrowck\r\n  36: rustc_driver::set_sigpipe_handler\r\n  37: rustc_driver::set_sigpipe_handler\r\n  38: <rustc_driver::pretty::IdentifiedAnnotation<'hir> as rustc_driver::pretty::HirPrinterSupport<'hir>>::sess\r\n  39: rustc_driver::set_sigpipe_handler\r\n  40: rustc_driver::driver::compile_input\r\n  41: rustc_driver::run_compiler\r\n  42: <rustc_driver::profile::trace::Query as core::fmt::Debug>::fmt\r\n  43: rustc_driver::run_compiler\r\n  44: <humantime::date::Error as std::error::Error>::cause\r\n  45: _rust_maybe_catch_panic\r\n  46: <env_logger::filter::inner::Filter as core::fmt::Display>::fmt\r\n  47: rustc_driver::main\r\n  48: <unknown>\r\n  49: std::panicking::update_panic_count\r\n  50: _rust_maybe_catch_panic\r\n  51: std::rt::lang_start_internal\r\n  52: <unknown>\r\n  53: <unknown>\r\n  54: BaseThreadInitThunk\r\n  55: RtlUserThreadStart\r\nquery stack during panic:\r\n#0 [mir_borrowck] processing `<S as sip::Sip>::start_sip`\r\nend of query stack\r\nerror: aborting due to previous error\r\n\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.31.0-nightly (de9666f12 2018-10-31) running on x86_64-pc-windows-msvc\r\n\r\nnote: compiler flags: -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `webscraper_better`.\r\n```\r\n</details>\r\n\r\n*No* ICE happens when writing the trait and implementation like this (notice the Generic parameters are now on the trait definition rather than on the function):\r\n\r\n```Rust\r\nuse futures::{Stream, Future};\r\nuse std::marker::Unpin;\r\n\r\nuse futures::StreamExt as StreamExt;\r\n\r\nuse tokio::prelude::{AsyncWriteExt};\r\n\r\npub trait Sip<W, F>\r\nwhere\r\n    Self: Stream\r\n{\r\n    type Future: Future;\r\n\r\n    fn start_sip(self, writer: W, convert: F) -> Self::Future\r\n    where\r\n        W: AsyncWriteExt + Unpin,\r\n        F: FnMut(&Self::Item) -> &[u8] + Unpin\r\n    ;\r\n}\r\n\r\nimpl <W, F, S> Sip<W, F> for S\r\nwhere\r\n    S: Stream + Unpin,\r\n{\r\n    existential type Future: Future<Output = ()>;\r\n\r\n    fn start_sip(mut self, mut writer: W, mut convert: F) -> Self::Future\r\n    where\r\n        W: AsyncWriteExt + Unpin,\r\n        F: FnMut(&Self::Item) -> &[u8] + Unpin\r\n    {\r\n        async move {\r\n            async_for!(item in self {\r\n                let bytes = convert(&item);\r\n                await!(writer.write_async(bytes));\r\n            });\r\n\r\n            await!(tokio::io::shutdown(writer).into_awaitable());\r\n        }\r\n    }\r\n}\r\n```\n\n<!-- TRIAGEBOT_START -->\n\n<!-- TRIAGEBOT_ASSIGN_START -->\n\n<!-- TRIAGEBOT_ASSIGN_DATA_START$${\"user\":\"davidtwco\"}$$TRIAGEBOT_ASSIGN_DATA_END -->\n\n<!-- TRIAGEBOT_ASSIGN_END -->\n<!-- TRIAGEBOT_END -->", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/55872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/55872/timeline", "performed_via_github_app": null, "state_reason": "completed"}