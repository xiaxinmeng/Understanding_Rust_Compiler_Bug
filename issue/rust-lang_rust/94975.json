{"url": "https://api.github.com/repos/rust-lang/rust/issues/94975", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/94975/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/94975/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/94975/events", "html_url": "https://github.com/rust-lang/rust/issues/94975", "id": 1170203742, "node_id": "I_kwDOAAsO6M5Fv-Re", "number": 94975, "title": "Redundant vtable entries are generated, resulting in unnecessary amounts of LLVM IR being emitted", "user": {"login": "zesterer", "id": 3268430, "node_id": "MDQ6VXNlcjMyNjg0MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/3268430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zesterer", "html_url": "https://github.com/zesterer", "followers_url": "https://api.github.com/users/zesterer/followers", "following_url": "https://api.github.com/users/zesterer/following{/other_user}", "gists_url": "https://api.github.com/users/zesterer/gists{/gist_id}", "starred_url": "https://api.github.com/users/zesterer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zesterer/subscriptions", "organizations_url": "https://api.github.com/users/zesterer/orgs", "repos_url": "https://api.github.com/users/zesterer/repos", "events_url": "https://api.github.com/users/zesterer/events{/privacy}", "received_events_url": "https://api.github.com/users/zesterer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-03-15T20:27:43Z", "updated_at": "2022-06-23T21:21:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Rust appears to generate LLVM IR for vtable entries unnecessarily, such as for types that never get coerced into a trait object. This realisation came as a result of discussion [here](https://github.com/zesterer/chumsky/issues/13).\r\n\r\nI've also theorised that it does this for all trait methods outright, although I've yet to confirm that this is the case. It might be that in this latter case, the compiler only generates trait methods for types that it *observes* that implement a given trait, although this still results in *a lot* of redundant LLVM IR being generated, but might be less easy to fix owing to issues with compilation units.\r\n\r\nThe result of this is that the compilation performance of combinator-like APIs is massively pessimised, with LLVM needing to eat through enormous quantities of redundant IR, only for it to be dropped by the linker.\r\n\r\nFor example, the following code, when compiled with `cargo rustc -- --emit=llvm-ir`, results in Rust generating vtable entries of `Foo` for both `u8` and `u16`, despite the fact that only `u8` is ever actually coerced into a trait object.\r\n\r\n```rust\r\ntrait Foo {\r\n    fn x(&self);\r\n}\r\nimpl Foo for u8 {\r\n    fn x(&self) {\r\n        unsafe { use_foo(\"xu8\"); }\r\n    }\r\n}\r\nimpl Foo for u16 {\r\n    fn x(&self) {\r\n        unsafe { use_foo(\"xu16\"); }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let foo: &dyn Foo = &123_u8;\r\n    foo.x();\r\n    123_u8.x();\r\n    123_u16.x();\r\n}\r\n```\r\n\r\nInitially, I thought that Rust might have been conservatively generating vtable entries on the assumption that other compilation units might be making use of those vtable entries, but in hindsight this doesn't make sense because each compilation unit gets a copy of any vtable entries that it requires *anyway* and so there should be no reason for the compiler to need to generate vtable entries for types that it does not observe being coerced into a trait object.\r\n\r\n### Meta\r\n\r\nThis appears to occur for all compiler versions, including the latest nightly.\r\n\r\n### I don't know what I'm doing\r\n\r\nI've not done serious work on the Rust compiler myself, so it might be that I'm missing some essential piece of the puzzle. Apologies if I've made errors in my account above.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/94975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/94975/timeline", "performed_via_github_app": null, "state_reason": null}