{"url": "https://api.github.com/repos/rust-lang/rust/issues/83538", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83538/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83538/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83538/events", "html_url": "https://github.com/rust-lang/rust/issues/83538", "id": 842349947, "node_id": "MDU6SXNzdWU4NDIzNDk5NDc=", "number": 83538, "title": "Trait evaluation cache interacts badly with incremental compilation", "user": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 13836860, "node_id": "MDU6TGFiZWwxMzgzNjg2MA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-traits", "name": "A-traits", "color": "f7e101", "default": false, "description": "Area: Trait system"}, {"id": 203429200, "node_id": "MDU6TGFiZWwyMDM0MjkyMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/P-high", "name": "P-high", "color": "eb6420", "default": false, "description": "High priority"}, {"id": 307747675, "node_id": "MDU6TGFiZWwzMDc3NDc2NzU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-incr-comp", "name": "A-incr-comp", "color": "f7e101", "default": false, "description": "Area: Incremental compilation"}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2021-03-26T23:08:38Z", "updated_at": "2021-05-13T22:17:41Z", "closed_at": "2021-05-13T22:17:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "PR https://github.com/rust-lang/rust/pull/83220 solved one issue with the trait evaluation cache, but I've found another one.\r\n\r\nOn the `perf` server, `syn` is currently causing the following ICE:\r\n\r\n```\r\nCompiling syn v0.11.11 (/tmp/.tmpnHQAja) ...\r\n\r\nthread 'rustc' panicked at 'found unstable fingerprints for evaluate_obligation(e3352ed64d6e2ccd-c82ee1c6b3ce2c20): Ok(EvaluatedToOk)', /rustc/b8719c51e0e44483cff9b6975a830f6e51812a48/compiler/rustc_query_system/src/query/plumbing.rs:593:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.53.0-nightly (b8719c51e 2021-03-26) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -Z self-profile=/tmp/.tmpnHQAja/self-profile-output -C opt-level=3 -C embed-bitcode=no -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [evaluate_obligation] evaluating trait selection obligation `quote::Tokens: std::marker::Unpin`\r\n#1 [is_unpin_raw] computing whether `quote::Tokens` is `Unpin`\r\nend of query stack\r\nwarning: 49 warnings emitted\r\n\r\nthread 'main' panicked at 'assertion failed: status.success()', collector/src/rustc-fake.rs:76:17\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nerror: could not compile `syn`\r\n```\r\n\r\nI've created a standalone repository that reproduces this crash: https://github.com/Aaron1011/syn-crash\r\n\r\nThe following shell script can be used to reproduce the ICE: \r\n\r\n```\r\nset -xe\r\n\r\ncargo clean -p syn\r\ncargo clean --release -p syn\r\ngit checkout ee2bcdef16fc2b23a7becdcd5dcb361e085db75a\r\ncargo build --release -j 1\r\ngit checkout 9ba859003d06df084b860fa62780dbf9169870d6\r\ncargo build --release -j 1\r\n```\r\n\r\n**EDIT**: This appears to be due to the way we handle caching for a coinductive cycle.\r\n\r\n<strike>\r\nThe root cause appears to be here:\r\n\r\nhttps://github.com/rust-lang/rust/blob/5e65467eff3d1da4712586d8402d1d2e1d6654bc/compiler/rustc_trait_selection/src/traits/select/mod.rs#L390-L407\r\n\r\nThe `evaluation_probe` method is used (among other things) to wrap the call to `evaluate_predicate_recursively` when we are trying to evaluate a root obligation. This means that *any* region constraints that get created during evaluation (including the recursive evaluation of other predicates) will cause us to return `EvaluatedToOkModuloRegions`.\r\n\r\nHowever, whether or not we end up creating region constraints depends on the state of the evaluation cache - if we get a cache hit, we may skip creating a region constraint that would have otherwise been created. This means that re-running predicate evaluation during incremental compilation may produce a different result.\r\n\r\nI see a few different ways of fixing this:\r\n1. When we store a result in the evaluation cache, also store whether or not it caused any region constraints to get created. We then use this information when recursively processing predicates to ensure that we return `EvaluatedToOkModuloRegions` even if we got a cache hit.\r\n2. Always return `EvaluatedToOk` when there are no erased regions in our original predicate (in this case, `quote::Tokens: Unpin`. I don't actually know if this is sound - there are no 'input' region variables to worry about, but I'm not sure if safe to ignore any 'internal' region constraints that get added.\r\n3. Remove `EvaluatedToOk` entirely, and always return `EvaluatedToOkModuloRegions`. I'm not sure what the performance impact of doing this would be, or how much refactoring it would require. However, this would eliminate a large source of potential ICEs.\r\n\r\nI'm not familiar enough with the trait evaluation code to know which, if any, of those options is the best choice.\r\n\r\n</strike>\r\n\r\ncc @nikomatsakis @matthewjasper ", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83538/timeline", "performed_via_github_app": null, "state_reason": "completed"}