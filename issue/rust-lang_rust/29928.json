{"url": "https://api.github.com/repos/rust-lang/rust/issues/29928", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/29928/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/29928/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/29928/events", "html_url": "https://github.com/rust-lang/rust/issues/29928", "id": 117828397, "node_id": "MDU6SXNzdWUxMTc4MjgzOTc=", "number": 29928, "title": "lazy const evaluation incompatible with const fn", "user": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 268744493, "node_id": "MDU6TGFiZWwyNjg3NDQ0OTM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-fn", "name": "A-const-fn", "color": "f7e101", "default": false, "description": "Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-19T14:46:07Z", "updated_at": "2017-05-02T06:59:27Z", "closed_at": "2017-05-02T01:23:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code fails to compile\n\n``` rust\n#![feature(const_fn)]\nconst fn f(x: usize) -> A {\n    A { field: x }\n}\nstruct A {\n    field: usize,\n}\nfn main() {\n    let _ = [0; f(5).field];\n}\n```\n\nThe problem is that the `A { field: x }` expression is lazily evaluated. So we evaluate it when we access `field` in `f(5).field`. But now we already lost the function argument `x` since we are no longer evaluating the const fn. When we try to access `x` in the const evaluator it bails out with `non-const expr`. The easy fix would be to evaluate everything eagerly (as it is done in `trans/consts`). But then we get breaking changes left and right.\n\nExample: the following is legal (see #28189):\n\n``` rust\nstruct S<T>(T) where [T; (||{}, 1).1]: Copy;                                    \nfn main() {}\n```\n\nBut we don't support closures. In fact, you can write arbitrary expression that typecheck and they will compile: \n\n``` rust\nunsafe fn bla() -> i32 { 5 }\nstruct S<T>(T) where [T; (unsafe { bla() }, 1).1]: Copy;                                    \nfn main() {}\n```\n\nSo we can't make the const evaluator eager without introducing breaking changes.\n1. As a remedy we can make it eager, but report errors lazily: const_eval evaluates everything eagerly, but stores a `Result<ConstVal, ConstEvalErr>` instead of a `ConstVal` wherever we currently allow lazy evaluation.\n2. As an alternative someone pushes [the eager const evaluator I implemented](https://github.com/oli-obk/rust/commit/7fc2363c4b6185eba4702636bdc4b94c48c2dcaf) through crater and we go with the breaking change (yay?).\n3. Another alternative is to make const fn lazy, too. So we just pass in the expression that generated the function argument, instead of evaluating the function argument. Then we do the same for structs and tuples, so instead of just lazily storing the expression that generates them, we also store the expressions of their fields.\n   - imo this is not a nice solution, and probably the most complex implementation-wise\n", "closed_by": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/29928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/29928/timeline", "performed_via_github_app": null, "state_reason": "completed"}