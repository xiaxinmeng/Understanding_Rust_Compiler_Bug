{"url": "https://api.github.com/repos/rust-lang/rust/issues/73126", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/73126/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/73126/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/73126/events", "html_url": "https://github.com/rust-lang/rust/issues/73126", "id": 634560345, "node_id": "MDU6SXNzdWU2MzQ1NjAzNDU=", "number": 73126, "title": "std::process::Command output() method error handling hazards", "user": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-08T12:21:57Z", "updated_at": "2023-01-03T21:06:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi. Normally, Rust makes it difficult to accidentally write buggy code. This is one of its great strengths. However, the API of `output()` on `std::process::Command `API has two serious error handling hazards:\r\n\r\n1. It requires the user to explicitly fish out the program's exit status and check it.\r\n2. It requires the user to explicitly deal, somehow, with the program's stderr output (if any).\r\n\r\nSee the example below.\r\n\r\nI think this is very difficult to fix with the current return value from `output()`.  It seems to me that there should be a new function whose behaviour is as follows:\r\n * Unless the user explictly called `.stderr(...)` when building the `Command`, any nonempty stderr is treated as an error, giving an `Err` return value (whose `Debug` impl prints the stderr output).\r\n * Nonzero exit status is treated as an error, giving an `Err` return value,\r\n * In case of nonzero exit status together with nonempty stderr output (the usual case) the error object contains both (and its `Debug` impl displays both).\r\n * The returned value is purely the actual stdout.\r\n\r\nI don't know what this should be called.  Unfortunately the name `output` has been taken for the more hazardous, raw, function.  Which we must retain because if you want to run a command that sometimes succeeds returning nonzero (eg, `diff`) you need something like it.\r\n\r\n(See also #70186 which is about the return value from `spawn()`.  I am about to file another issue about the return value from `wait()`)\r\n\r\n```rust\r\nuse std::process::*;\r\nuse std::io::stdout;\r\nuse std::io::Write;\r\n\r\nfn main() {\r\n    let command = [\"ls\",\"--no-such-option\"];\r\n    \r\n    let output = Command::new(command[0])\r\n                     .args(&command[1..])\r\n                     .output()\r\n                     .expect(\"output() failed\");\r\n    println!(\"Output from {:?}:\", &command);\r\n    stdout().write_all(output.stdout.as_slice()).expect(\"write failed\");\r\n    \r\n    println!(\"All went well!\")\r\n}\r\n```\r\n\r\n([Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2dd5c16d2d5bf4306c70b8fd92cf5f7f))\r\n\r\nActual output:\r\n\r\n```\r\n   Compiling playground v0.0.1 (/playground)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.72s\r\n     Running `target/debug/playground`\r\n\r\nStandard Output\r\n\r\nOutput from [\"ls\", \"--no-such-option\"]:\r\nAll went well!\r\n```\r\n\r\nExpected output:\r\n\r\nSome kind of compiler warning.  Or something in the docs to say not to use `.output()` (and, therefore, something convenient to use instead).", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/73126/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/73126/timeline", "performed_via_github_app": null, "state_reason": null}