{"url": "https://api.github.com/repos/rust-lang/rust/issues/53639", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53639/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53639/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53639/events", "html_url": "https://github.com/rust-lang/rust/issues/53639", "id": 353434959, "node_id": "MDU6SXNzdWUzNTM0MzQ5NTk=", "number": 53639, "title": "Consider deprecation of UB-happy `static mut`", "user": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668019, "node_id": "MDU6TGFiZWwyMTE2NjgwMTk=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-lang", "name": "T-lang", "color": "bfd4f2", "default": false, "description": "Relevant to the language team, which will review and decide on the PR/issue."}, {"id": 1089771154, "node_id": "MDU6TGFiZWwxMDg5NzcxMTU0", "url": "https://api.github.com/repos/rust-lang/rust/labels/needs-rfc", "name": "needs-rfc", "color": "fceb9f", "default": false, "description": "This change is large or controversial enough that it should have an (e-)RFC accepted before doing it"}, {"id": 1622913351, "node_id": "MDU6TGFiZWwxNjIyOTEzMzUx", "url": "https://api.github.com/repos/rust-lang/rust/labels/lang-team-202x-edition", "name": "lang-team-202x-edition", "color": "fcbff6", "default": false, "description": "Something we may consider if we do another edition"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 185, "created_at": "2018-08-23T15:27:18Z", "updated_at": "2022-12-05T18:45:47Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "`static mut` is almost impossible to use correctly, see https://github.com/rust-lang-nursery/lazy-static.rs/issues/117 for an example in the widely-used `lazy-static`.\r\n\r\nYou **must** be able to show that *every borrow* of the `static mut` is **not reentrant** (as opposed to regular interior mutability, which only requires reentrance-freedom when accessing data), which is almost entirely impossible in real-world scenarios.\r\n\r\n<hr/>\r\n\r\nWe have a chance at removing it from Rust2018 and force people to use a proper synchronization abstraction (e.g. `lazy_static!` + `Mutex`), *or in lieu of one*,  `thread_local!` / `scoped_thread_local!`.\r\n\r\nIf they were using `static mut` with *custom* synchronization logic, they should do this:\r\n```rust\r\npub struct CustomSynchronizingAbstraction<T> {\r\n    /* UnsafeCell / Cell / RefCell / etc. around data, e.g. `T` */\r\n}\r\n// Promise that proper synchronization exists *around accesses*.\r\nunsafe impl<T: Sync> Sync for CustomSynchronizingAbstraction<T> {}\r\n```\r\nAnd then use `CustomSynchronizingAbstraction` with regular `static`s, safely.\r\n\r\nThis matches the \"soundness boundary\" of Rust APIs, whereas `static mut` is more like C.\r\n\r\ncc @RalfJung @rust-lang/compiler  @rust-lang/lang", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53639/reactions", "total_count": 78, "+1": 57, "-1": 21, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53639/timeline", "performed_via_github_app": null, "state_reason": null}