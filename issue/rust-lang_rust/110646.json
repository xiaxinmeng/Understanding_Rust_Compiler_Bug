{"url": "https://api.github.com/repos/rust-lang/rust/issues/110646", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/110646/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/110646/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/110646/events", "html_url": "https://github.com/rust-lang/rust/issues/110646", "id": 1678610005, "node_id": "I_kwDOAAsO6M5kDY5V", "number": 110646, "title": "generic_const_exprs breaks object safety", "user": {"login": "codeflo", "id": 6813, "node_id": "MDQ6VXNlcjY4MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codeflo", "html_url": "https://github.com/codeflo", "followers_url": "https://api.github.com/users/codeflo/followers", "following_url": "https://api.github.com/users/codeflo/following{/other_user}", "gists_url": "https://api.github.com/users/codeflo/gists{/gist_id}", "starred_url": "https://api.github.com/users/codeflo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codeflo/subscriptions", "organizations_url": "https://api.github.com/users/codeflo/orgs", "repos_url": "https://api.github.com/users/codeflo/repos", "events_url": "https://api.github.com/users/codeflo/events{/privacy}", "received_events_url": "https://api.github.com/users/codeflo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 1282665911, "node_id": "MDU6TGFiZWwxMjgyNjY1OTEx", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-generics", "name": "A-const-generics", "color": "f7e101", "default": false, "description": "Area: const generics (parameters and arguments)"}, {"id": 2341291797, "node_id": "MDU6TGFiZWwyMzQxMjkxNzk3", "url": "https://api.github.com/repos/rust-lang/rust/labels/F-generic_const_exprs", "name": "F-generic_const_exprs", "color": "f9c0cc", "default": false, "description": "`#![feature(generic_const_exprs)]`"}, {"id": 4172483496, "node_id": "LA_kwDOAAsO6M74swuo", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-types", "name": "T-types", "color": "bfd4f2", "default": false, "description": "Relevant to the types team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-04-21T14:21:23Z", "updated_at": "2023-04-22T01:47:12Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I know that `generic_const_exprs` is still incomplete, so feel free to close the issue if this bug is already known and/or covered by already planned parts of the implementation.\r\n\r\nBut just in case it helps, I found a case where enabling `generic_const_exprs` breaks object safety detection if the trait references a constant.\r\n\r\nHere's the code:\r\n\r\n```rust\r\n#![allow(dead_code, incomplete_features)]\r\n#![feature(generic_const_exprs)] // no error without this\r\n\r\nconst COUNT: usize = 2;\r\n\r\npub trait WithoutConstant {\r\n    fn foo(&self, x: &[u8; 2]);\r\n}\r\n\r\npub trait WithConstant {\r\n    fn foo(&self, x: &[u8; COUNT]);\r\n}\r\n\r\n// no error\r\nfn without_constant(y: &dyn WithoutConstant) {\r\n    y.foo(&[0; COUNT]);\r\n}\r\n\r\n// error[E0038]: the trait `WithConstant` cannot be made into an object\r\nfn with_constant(y: &dyn WithConstant) {\r\n    y.foo(&[0; COUNT]);\r\n}\r\n\r\nfn main() {\r\n    println!(\"Hello, world!\");\r\n}\r\n```\r\n\r\nThis should compile, and without `generic_const_exprs`, it does, but when I enable the feature, I get this error:\r\n\r\n```\r\nerror[E0038]: the trait `WithConstant` cannot be made into an object\r\n  --> src/main.rs:20:22\r\n   |\r\n20 | fn with_constant(y: &dyn WithConstant) {\r\n   |                      ^^^^^^^^^^^^^^^^ `WithConstant` cannot be made into an object\r\n   |\r\nnote: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\r\n  --> src/main.rs:11:22\r\n   |\r\n10 | pub trait WithConstant {\r\n   |           ------------ this trait cannot be made into an object...\r\n11 |     fn foo(&self, x: &[u8; COUNT]);\r\n   |                      ^^^^^^^^^^^^ ...because method `foo` references the `Self` type in this parameter\r\n   = help: consider moving `foo` to another trait\r\n\r\nFor more information about this error, try `rustc --explain E0038`.\r\nerror: could not compile `generic_const_expr_repro` (bin \"generic_const_expr_repro\") due to previous error\r\n```\r\n\r\n### Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.71.0-nightly (8bdcc62cb 2023-04-20)\r\nbinary: rustc\r\ncommit-hash: 8bdcc62cb0362869f0e7b43a6ae4f96b953d3cbc\r\ncommit-date: 2023-04-20\r\nhost: aarch64-apple-darwin\r\nrelease: 1.71.0-nightly\r\nLLVM version: 16.0.2\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/110646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/110646/timeline", "performed_via_github_app": null, "state_reason": null}