{"url": "https://api.github.com/repos/rust-lang/rust/issues/21150", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/21150/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/21150/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/21150/events", "html_url": "https://github.com/rust-lang/rust/issues/21150", "id": 54355832, "node_id": "MDU6SXNzdWU1NDM1NTgzMg==", "number": 21150, "title": "Unexpected `error: the associated type `<U as util::async::Async>::Value` may not live long enough`", "user": {"login": "carllerche", "id": 6180, "node_id": "MDQ6VXNlcjYxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carllerche", "html_url": "https://github.com/carllerche", "followers_url": "https://api.github.com/users/carllerche/followers", "following_url": "https://api.github.com/users/carllerche/following{/other_user}", "gists_url": "https://api.github.com/users/carllerche/gists{/gist_id}", "starred_url": "https://api.github.com/users/carllerche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carllerche/subscriptions", "organizations_url": "https://api.github.com/users/carllerche/orgs", "repos_url": "https://api.github.com/users/carllerche/repos", "events_url": "https://api.github.com/users/carllerche/events{/privacy}", "received_events_url": "https://api.github.com/users/carllerche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 149689562, "node_id": "MDU6TGFiZWwxNDk2ODk1NjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-associated-items", "name": "A-associated-items", "color": "f7e101", "default": false, "description": "Area: Associated items such as associated types and consts."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-14T18:11:32Z", "updated_at": "2015-01-22T08:54:30Z", "closed_at": "2015-01-22T08:54:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I have been attempting to switch my Future / Stream lib to use associated types, however I have been hitting snags. Even though all the types (as far as I can tell) are bound by Send (and some by 'static too), I have been getting a lot of error messages:\n\n```\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85:43: 90:26 error: the associated type `<U as util::async::Async>::Value` may not live long enough\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:88                                 Err(_) => unimplemented!(),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:89                             }\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:90                         });\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85:43: 90:26 help: consider adding an explicit lifetime bound `<U as util::async::Async>::Value: 'static`...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:88                                 Err(_) => unimplemented!(),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:89                             }\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:90                         });\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85:43: 90:26 note: ...so that captured variable `c` does not outlive the enclosing closure\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:88                                 Err(_) => unimplemented!(),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:89                             }\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:90                         });\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85:30: 90:27 error: the associated type `<U as util::async::Async>::Value` may not live long enough\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:88                                 Err(_) => unimplemented!(),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:89                             }\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:90                         });\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85:30: 90:27 help: consider adding an explicit lifetime bound `<U as util::async::Async>::Value: 'static`...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:88                                 Err(_) => unimplemented!(),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:89                             }\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:90                         });\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85:30: 90:27 note: ...so that the declared lifetime parameter bounds are satisfied\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:88                                 Err(_) => unimplemented!(),\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:89                             }\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:90                         });\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:31: 94:14 error: the associated type `<U as util::async::Async>::Value` may not live long enough\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:31: 94:14 help: consider adding an explicit lifetime bound `<U as util::async::Async>::Value: 'static`...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:31: 94:14 note: ...so that captured variable `c` does not outlive the enclosing closure\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:18: 94:15 error: the associated type `<U as util::async::Async>::Value` may not live long enough\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:18: 94:15 help: consider adding an explicit lifetime bound `<U as util::async::Async>::Value: 'static`...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:18: 94:15 note: ...so that the declared lifetime parameter bounds are satisfied\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:18: 94:15 error: the associated type `<U as util::async::Async>::Value` may not live long enough\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:18: 94:15 help: consider adding an explicit lifetime bound `<U as util::async::Async>::Value: 'static`...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:18: 94:15 note: ...so that the declared lifetime parameter bounds are satisfied\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:18: 94:15 error: the associated type `<U as util::async::Async>::Value` may not live long enough\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:18: 94:15 help: consider adding an explicit lifetime bound `<U as util::async::Async>::Value: 'static`...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n                                                                ...\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82:18: 94:15 note: ...so that the declared lifetime parameter bounds are satisfied\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:82             self.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:83                 match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:84                     Ok(_) => {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:85                         next.receive(move |res| {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:86                             match res {\n/Users/carllerche/Code/mine/syncbox/src/util/async/future.rs:87                                 Ok(u) => c.complete(u),\n```\n\nThe repro is trying to compile syncbox on the async-associated-type branch. Sorry for not reducing more :cry: \n\nhttps://github.com/carllerche/syncbox/tree/async-associated-type\n\ncc @nikomatsakis \n", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/21150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/21150/timeline", "performed_via_github_app": null, "state_reason": "completed"}