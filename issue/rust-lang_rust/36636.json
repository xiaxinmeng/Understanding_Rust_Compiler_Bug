{"url": "https://api.github.com/repos/rust-lang/rust/issues/36636", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/36636/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/36636/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/36636/events", "html_url": "https://github.com/rust-lang/rust/issues/36636", "id": 178471801, "node_id": "MDU6SXNzdWUxNzg0NzE4MDE=", "number": 36636, "title": "add a regression test that tests for the presence of \"compiler-rt\" intrinsics", "user": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46741598, "node_id": "MDU6TGFiZWw0Njc0MTU5OA==", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-test", "name": "E-needs-test", "color": "02e10c", "default": false, "description": "Call for participation: writing correctness tests"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-09-21T21:52:09Z", "updated_at": "2017-06-25T18:02:17Z", "closed_at": "2017-06-25T18:02:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We need this to make sure we don't accidentally lose any intrinsic during the process of porting\nthem to Rust (#35437).\n\nOne possible way to do this is to just compile a program, like the one below, that depends on\nseveral intrinsics:\n\n``` rust\n// NOTE omitted lang_items for brevity\n#![feature(start)]\n#![no_std]\n\n// This crates provides the intrinsics. We want to test that it provides certain intrinsics.\nextern compiler_builtins;\n\n#[link(name = \"c\")]\nextern {}\n\n// Each of these functions lowers to one of the intrinsics that we want to make sure that\n// compiler_builtins provide.\nfn mulodi4(a: i64, b: i64) -> i64 {\n    a.overflowing_mul(b)\n}\n\nfn aeabi_uldivmod(a: u64, b: u64) -> u64 {\n    a * b\n}\n\n// We need to use the above functions in \"main\" so they make it to the final binary\n#[start]\nfn start(_: isize, _: *const *const u8) -> isize {\n    mulodi4(2, 3);\n    aeabi_uldivmod(2, 3);\n\n    0\n}\n```\n\nIf, by mistake, `compiler_builtins` stops providing an intrinsic like `__mulodi4` then the above\nprogram will fail to link with message like this:\n\n```\n$ rustc --target arm-unknown-linux-gnueabi -C linker=arm-linux-gnueabi-gcc intrinsics.rs\nerror: linking with `arm-linux-gnueabi-gcc` failed: exit code: 1\n  |\n  = note: intrinsics.0.o: In function `core::num::_$LT$impl$u20$i64$GT$::overflowing_mul::he2cc89f0220146d6':\nintrinsics.cgu-0.rs:(.text._ZN4core3num21_$LT$impl$u20$i64$GT$15overflowing_mul17he2cc89f0220146d6E+0x4c): undefined reference to `__mulodi4'\n```\n\nSo, in a sense, this is a link-pass test :-).\n\nWe'll have to update our testing machinery to compile this program for all targets and cross\ntargets, even if we only provide `std` for them, via some `make` invocation.\n\nThe tricky bit of this approach is that we have to figure out how make the program above include all\nthe intrinsics we are interested in testing. In some cases, an arithmetic expression lowers to an\nintrinsic if the target doesn't support the operation natively (see `mulodi` and `aeabi_uldivmod` in\nthe program above). But, I'm not sure if we can generate all the intrinsics we care about that way (I\nhope so though).\n\ncc @alexcrichton @brson\nblocks #35437\n", "closed_by": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/36636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/36636/timeline", "performed_via_github_app": null, "state_reason": "completed"}