{"url": "https://api.github.com/repos/rust-lang/rust/issues/65309", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/65309/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/65309/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/65309/events", "html_url": "https://github.com/rust-lang/rust/issues/65309", "id": 505856830, "node_id": "MDU6SXNzdWU1MDU4NTY4MzA=", "number": 65309, "title": "performance of saturating_mul can be improved by removing branches", "user": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 108333, "node_id": "MDU6TGFiZWwxMDgzMzM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-LLVM", "name": "A-LLVM", "color": "f7e101", "default": false, "description": "Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."}, {"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-10-11T13:34:56Z", "updated_at": "2019-10-13T21:16:28Z", "closed_at": "2019-10-13T21:16:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While playing with `saturating_mul` to see if it can be made branchless and thus a const fn (sorry @RalfJung ;) ), I found that the performance of signed `saturating_mul` can actually be improved.\r\n\r\nI tested two implementations:\r\n 1. ```rust\r\n    pub fn saturating_mul(a: i32, b: i32) -> i32 {\r\n        a.saturating_mul(b)\r\n    }\r\n    ```\r\n 2. ```rust\r\n    #[inline]\r\n    const fn cond_if_else(cond: bool, a: i32, b: i32) -> i32 {\r\n        // If cond is false: not_mask is -1 == all ones\r\n        // If cond is true: not_mask is 0 == all zeros\r\n        let not_mask = (cond as i32).wrapping_sub(1);\r\n        // If cond is false: (a & !all_ones) | (b & all_ones) == b\r\n        // If cond is true: (a & !all_zeros) | (b & all_zeros) == a\r\n        (a & !not_mask) | (b & not_mask)\r\n    }\r\n    \r\n    pub const fn saturating_mul(a: i32, b: i32) -> i32 {\r\n        let (val, overflow) = a.overflowing_mul(b);\r\n        cond_if_else(\r\n            !overflow,\r\n            val,\r\n            cond_if_else(\r\n                (a < 0) != (b < 0),\r\n                i32::min_value(),\r\n                i32::max_value(),\r\n            ),\r\n        )\r\n    }\r\n    ```\r\n\r\nThe `cond_if_else` function acts kind of like C's ternary operator, including its constness, but works only for integers.\r\n\r\nThe second case seems to have a reciprocal throughput better by a factor of about 1.5 according to llvm-mca: https://godbolt.org/z/6PnCwB\r\n\r\nFor unsigned, the second case can become:\r\n```rust\r\npub const fn saturating_mul(a: u32, b: u32) -> u32 {\r\n    let (val, overflow) = a.overflowing_mul(b);\r\n    cond_if_else(!overflow, val, u32::max_value())\r\n}\r\n```\r\nIn this case, there is no performance improvement and LLVM reduces this to the same IR, so the only advantage here would be constness. https://godbolt.org/z/0Fs0AD\r\n\r\nI found some similar improvements for `saturating_sub`, even though currently the implementation uses `intrinsics::saturating_sub`; I found it a bit weird that the intrinsic performs worse. The reciprocal throughput can be improved by a factor of 1.13: https://godbolt.org/z/tcZgeE\r\n\r\nMy concern is that since the LLVM IR is different, even though llvm-mca indicates the difference is an improvement, there might be some case I don't know about where the performance regresses. Maybe there are other platforms where the saturating intrinsics result better performance? I think @nikic has a better understanding of these concerns.", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/65309/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/65309/timeline", "performed_via_github_app": null, "state_reason": "completed"}