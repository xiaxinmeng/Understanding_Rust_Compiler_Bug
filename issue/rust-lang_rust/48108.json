{"url": "https://api.github.com/repos/rust-lang/rust/issues/48108", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/48108/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/48108/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/48108/events", "html_url": "https://github.com/rust-lang/rust/issues/48108", "id": 296024372, "node_id": "MDU6SXNzdWUyOTYwMjQzNzI=", "number": 48108, "title": "Feature: `Rc::clone_raw` (and for Arc)", "user": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-09T21:55:23Z", "updated_at": "2020-12-12T00:54:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using `from_raw`/`into_raw` functions with `Rc`, you often want to obtain a new reference to a raw pointer, without taking ownership. At the moment you have to do this dance:\r\n\r\n```rust\r\nfn clone_raw<T>(ptr: *const T) -> Rc<T> {\r\n    let result = unsafe { Rc::from_raw(ptr) };\r\n    ::std::mem::forget(result.clone());\r\n    result\r\n}\r\n```\r\n\r\nThis is quite error prone and makes little sense to anyone trying to read the code. It would be better if the standard library had `clone_raw` built in for `Rc` and `Arc`, and possibly for their weak variants.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/48108/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/48108/timeline", "performed_via_github_app": null, "state_reason": null}