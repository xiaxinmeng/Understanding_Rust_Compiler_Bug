{"url": "https://api.github.com/repos/rust-lang/rust/issues/41993", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/41993/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/41993/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/41993/events", "html_url": "https://github.com/rust-lang/rust/issues/41993", "id": 228556637, "node_id": "MDU6SXNzdWUyMjg1NTY2Mzc=", "number": 41993, "title": "`str::starts_with('x')` (literal char) is slower than `str::starts_with(\"x\")` (literal string).", "user": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 211668062, "node_id": "MDU6TGFiZWwyMTE2NjgwNjI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-libs-api", "name": "T-libs-api", "color": "bfd4f2", "default": false, "description": "Relevant to the library API team, which will review and decide on the PR/issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-05-14T17:42:06Z", "updated_at": "2019-12-16T22:21:01Z", "closed_at": "2019-12-16T22:21:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "(Discovered when reviewing #41957)\r\n\r\nThis piece of code:\r\n\r\n```rust\r\npub fn check(a: &str) -> bool {\r\n    a.starts_with('/')\r\n}\r\n```\r\n\r\ngenerates an extremely complicated assembly. The generated function will try to decode the input string `a`, obtain the first code point, and then compare with `'/'` (47).\r\n\r\nCompare with\r\n\r\n```rust\r\npub fn check(a: &str) -> bool {\r\n    a.starts_with(\"/\")\r\n}\r\n```\r\n\r\nwhich basically just checks if the first byte of the string is `'/'` (after an unnecessary (?) `is_char_boundary` check introduced in #26771 and another unnecessary pointer-equality check)\r\n\r\n----\r\n\r\nMost of the time the character as a pattern is a compile-time constant, so it should be more efficient by *encoding* the char into UTF-8, and then `memcmp` with the input string. \r\n\r\n(Rust uses the \"decoding\" approach so that `char` share the same implementation with `&[char]` and `FnMut(char) -> bool` via the `CharEq` trait.)\r\n\r\nThis problem is particularly bad for Clippy users, since there is a [`single_char_pattern` lint](https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern) which suggested changing all `.starts_with(\"x\")` by `.starts_with('x')` with the assumption that the latter is faster, which as of Rust 1.19 it is the reverse.\r\n\r\n----\r\n\r\n```sh\r\n$ rustc -vV\r\nrustc 1.19.0-nightly (826d8f385 2017-05-13)\r\nbinary: rustc\r\ncommit-hash: 826d8f3850b37a23481dfcf4a899b5dfc82d22e3\r\ncommit-date: 2017-05-13\r\nhost: x86_64-apple-darwin\r\nrelease: 1.19.0-nightly\r\nLLVM version: 4.0\r\n```\r\n\r\n----\r\n\r\n<details><summary>x86_64 ASM</summary>\r\n\r\nBuild with:\r\n\r\n```sh\r\n$ rustc --crate-type=dylib -Copt-level=3 --emit=asm 2.rs\r\n$ cat 2.s\r\n```\r\n\r\nFirst function (`.starts_with('/')`):\r\n\r\n```asm\r\n\t.section\t__TEXT,__text,regular,pure_instructions\r\n\t.globl\t__ZN2_25check17hfe0a879e8d0ee56bE\r\n\t.p2align\t4, 0x90\r\n__ZN2_25check17hfe0a879e8d0ee56bE:\r\n\t.cfi_startproc\r\n\tpushq\t%rbp\r\nLcfi0:\r\n\t.cfi_def_cfa_offset 16\r\nLcfi1:\r\n\t.cfi_offset %rbp, -16\r\n\tmovq\t%rsp, %rbp\r\nLcfi2:\r\n\t.cfi_def_cfa_register %rbp\r\n\ttestq\t%rsi, %rsi\r\n\tje\tLBB0_1\r\n\tmovzbl\t(%rdi), %edx\r\n\ttestb\t%dl, %dl\r\n\tjns\tLBB0_17\r\n\tleaq\t(%rdi,%rsi), %r8\r\n\txorl\t%eax, %eax\r\n\tcmpq\t$1, %rsi\r\n\tmovq\t%r8, %rsi\r\n\tje\tLBB0_5\r\n\tmovzbl\t1(%rdi), %eax\r\n\taddq\t$2, %rdi\r\n\tandl\t$63, %eax\r\n\tmovq\t%rdi, %rsi\r\nLBB0_5:\r\n\tmovl\t%edx, %ecx\r\n\tandl\t$31, %ecx\r\n\tcmpb\t$-32, %dl\r\n\tjb\tLBB0_6\r\n\tcmpq\t%r8, %rsi\r\n\tje\tLBB0_8\r\n\tmovzbl\t(%rsi), %edi\r\n\tincq\t%rsi\r\n\tandl\t$63, %edi\r\n\tjmp\tLBB0_10\r\nLBB0_1:\r\n\txorl\t%eax, %eax\r\n\tjmp\tLBB0_18\r\nLBB0_6:\r\n\tshll\t$6, %ecx\r\n\tjmp\tLBB0_16\r\nLBB0_8:\r\n\txorl\t%edi, %edi\r\n\tmovq\t%r8, %rsi\r\nLBB0_10:\r\n\tshll\t$6, %eax\r\n\torl\t%edi, %eax\r\n\tcmpb\t$-16, %dl\r\n\tjb\tLBB0_11\r\n\tcmpq\t%r8, %rsi\r\n\tje\tLBB0_13\r\n\tmovzbl\t(%rsi), %edx\r\n\tandl\t$63, %edx\r\n\tjmp\tLBB0_15\r\nLBB0_11:\r\n\tshll\t$12, %ecx\r\n\tjmp\tLBB0_16\r\nLBB0_13:\r\n\txorl\t%edx, %edx\r\nLBB0_15:\r\n\tandl\t$7, %ecx\r\n\tshll\t$18, %ecx\r\n\tshll\t$6, %eax\r\n\torl\t%edx, %eax\r\nLBB0_16:\r\n\torl\t%ecx, %eax\r\n\tmovl\t%eax, %edx\r\nLBB0_17:\r\n\tcmpl\t$47, %edx\r\n\tsete\t%al\r\nLBB0_18:\r\n\tpopq\t%rbp\r\n\tretq\r\n\t.cfi_endproc\r\n\r\n\r\n.subsections_via_symbols\r\n```\r\n\r\nSecond function (`.starts_with(\"/\")`): \r\n\r\n```asm\r\n\t.section\t__TEXT,__text,regular,pure_instructions\r\n\t.globl\t__ZN2_25check17hfe0a879e8d0ee56bE\r\n\t.p2align\t4, 0x90\r\n__ZN2_25check17hfe0a879e8d0ee56bE:\r\n\t.cfi_startproc\r\n\tpushq\t%rbp\r\nLcfi0:\r\n\t.cfi_def_cfa_offset 16\r\nLcfi1:\r\n\t.cfi_offset %rbp, -16\r\n\tmovq\t%rsp, %rbp\r\nLcfi2:\r\n\t.cfi_def_cfa_register %rbp\r\n\ttestq\t%rsi, %rsi\r\n\tje\tLBB0_3\r\n\tcmpq\t$1, %rsi\r\n\tje\tLBB0_4\r\n\tcmpb\t$-65, 1(%rdi)\r\n\tjle\tLBB0_3\r\nLBB0_4:\r\n\tmovb\t$1, %al\r\n\tleaq\t_str.0(%rip), %rcx\r\n\tcmpq\t%rcx, %rdi\r\n\tje\tLBB0_6\r\n\tcmpb\t$47, (%rdi)\r\n\tje\tLBB0_6\r\nLBB0_3:\r\n\txorl\t%eax, %eax\r\nLBB0_6:\r\n\tpopq\t%rbp\r\n\tretq\r\n\t.cfi_endproc\r\n\r\n\t.section\t__TEXT,__const\r\n_str.0:\r\n\t.byte\t47\r\n\r\n.subsections_via_symbols\r\n```\r\n\r\n</details>", "closed_by": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/41993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/41993/timeline", "performed_via_github_app": null, "state_reason": "completed"}