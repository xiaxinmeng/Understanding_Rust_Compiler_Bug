{"url": "https://api.github.com/repos/rust-lang/rust/issues/87526", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/87526/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/87526/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/87526/events", "html_url": "https://github.com/rust-lang/rust/issues/87526", "id": 954273762, "node_id": "MDU6SXNzdWU5NTQyNzM3NjI=", "number": 87526, "title": "Diagnostics for trait impls on trait objects confusing around implicit lifetime bounds", "user": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-07-27T21:17:15Z", "updated_at": "2023-04-05T17:29:43Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I tried this code:\r\n\r\n```rust\r\nstruct ProviderContainer {}\r\ntrait DataProvider {}\r\ntrait SerdeDataProvider {}\r\n\r\nimpl DataProvider for dyn SerdeDataProvider {}\r\n\r\nimpl ProviderContainer {\r\n    pub fn as_dyn_ref(&self) -> &dyn SerdeDataProvider {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nstruct LocaleCanonicalizer {}\r\n\r\nimpl LocaleCanonicalizer {\r\n    fn new<D: DataProvider + ?Sized>(d: &D) {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\nfn foo(provider: &ProviderContainer) {\r\n    let provider = provider.as_dyn_ref();\r\n    LocaleCanonicalizer::new(provider)\r\n}\r\n\r\nfn main() {}\r\n```\r\n\r\nThis crops up the following error message:\r\n\r\n```\r\n$ rustc bar.rs\r\nerror[E0621]: explicit lifetime required in the type of `provider`\r\n  --> bar.rs:25:5\r\n   |\r\n25 |     LocaleCanonicalizer::new(provider)\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nIn a more complex case I was able to get it to suggest I use `&'static ProviderContainer` as a part of the above error. I'm unable to reduce that testcase (yet) but I can post a link to a branch if necessary.\r\n\r\nThe actual fix here is that `as_dyn_ref()` should have the signature of `pub fn as_dyn_ref(&self) -> &(dyn SerdeDataProvider + 'static)`. What's going on here is that:\r\n\r\n - the impl for `dyn SerdeDataProvider` is implicitly on `dyn SerdeDataProvider + 'static`\r\n - `as_dyn_ref` implicitly returns an `&'a dyn SerdeDeDataProvider + 'a`\r\n\r\nThese implicit lifetime bounds end up clashing. In such errors we should surface this implicitness so that the errors make more sense.\r\n\r\ncc @estebank @sffc \r\n\r\n`rustc --version --verbose`:\r\n```\r\n$ rustc --version --verbose\r\nrustc 1.55.0-nightly (74ef0c3e4 2021-07-16)\r\nbinary: rustc\r\ncommit-hash: 74ef0c3e404cc72c08b2d1e14506f90d9e877269\r\ncommit-date: 2021-07-16\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.55.0-nightly\r\nLLVM version: 12.0.1\r\n\r\n```\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/87526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/87526/timeline", "performed_via_github_app": null, "state_reason": null}