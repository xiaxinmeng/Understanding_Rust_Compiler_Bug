{"url": "https://api.github.com/repos/rust-lang/rust/issues/78238", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/78238/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/78238/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/78238/events", "html_url": "https://github.com/rust-lang/rust/issues/78238", "id": 727455494, "node_id": "MDU6SXNzdWU3Mjc0NTU0OTQ=", "number": 78238, "title": "How to optimize http client performance?", "user": {"login": "flyinmind", "id": 6022978, "node_id": "MDQ6VXNlcjYwMjI5Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6022978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flyinmind", "html_url": "https://github.com/flyinmind", "followers_url": "https://api.github.com/users/flyinmind/followers", "following_url": "https://api.github.com/users/flyinmind/following{/other_user}", "gists_url": "https://api.github.com/users/flyinmind/gists{/gist_id}", "starred_url": "https://api.github.com/users/flyinmind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flyinmind/subscriptions", "organizations_url": "https://api.github.com/users/flyinmind/orgs", "repos_url": "https://api.github.com/users/flyinmind/repos", "events_url": "https://api.github.com/users/flyinmind/events{/privacy}", "received_events_url": "https://api.github.com/users/flyinmind/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-10-22T14:43:17Z", "updated_at": "2020-10-22T15:50:46Z", "closed_at": "2020-10-22T15:50:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use isahc to realize a simple http bench mark tool. \r\nThe http server runs on actix-web v3.1.0. Rust version is 1.47.\r\nClient and server are all in the same machine.\r\nWindows 10 system, intel 8 core 1.6G, and 8G mem.\r\n\r\nthread-num:8,use-time:12388 ms,speed:12915, **About 13000/s**, the tool occupy **30%+ CPU**, server 15%CPU.\r\nThe same server, use baton (a tool by go), **about 40000/s,** it occupy **15% CPU**, server 15% CPU.\r\n\r\nIt is a very simple condition. Rust performances not well.\r\nI have tried the condition with actix-web-client, reqwest, hyper,surf..., all about 15000/s, worse than baton.\r\n\r\n**Why? How to optimize it?** \r\nThanks!\r\n\r\nComile cargo run --release,  and profile is: \r\ncodegen-units = 8\r\ncodegen-threads=8\r\n#debug = true\r\nlto = true\r\noverflow-checks = true\r\nopt-level = 3\r\n\r\n//--------------------------------------------------------------------------------------------\r\n**//Code** \r\nuse isahc::prelude::*;\r\nuse isahc::HttpClient;\r\nuse isahc::config::ResolveMap;\r\nuse async_std::*;\r\nuse std::time::SystemTime;\r\n\r\nconst threadNum : usize = 8;\r\nconst runTimes : u64 = 20000;\r\n\r\n#[async_std::main]\r\nasync fn main() -> Result<(), isahc::Error> {\r\n    let start = SystemTime::now();\r\n    let mut i : usize = 0;\r\n    let mut handlers = vec![];\r\n\r\n    while i < threadNum {\r\n        i += 1;\r\n        let no = i;\r\n        let h = task::spawn(async move {\r\n            let client = HttpClient::builder()\r\n                .max_connections(100)\r\n                .max_connections_per_host(100)\r\n                //.dns_resolve(ResolveMap::new()\r\n                // Send requests for example.org on port 80 to 127.0.0.1.\r\n                //.add(\"www.example.org\", 8080, [127, 0, 0, 1]))\r\n                .build().unwrap();\r\n\r\n            let mut i : u64 = 0;\r\n            while i < runTimes {\r\n                i += 1;\r\n                let mut response = client.get(\"http://127.0.0.1:8080/\").unwrap();\r\n                // Print some basic info about the response to standard output.\r\n                // println!(\"Status: {}\", response.status());\r\n                // println!(\"Headers: {:#?}\", response.headers());\r\n\r\n                // // Read the response body as text into a string and print it.\r\n                // print!(\"{}-{},{}\",no, i, response.text().unwrap());\r\n            }\r\n        });\r\n        handlers.push(h);\r\n    }\r\n    for h in handlers {\r\n        h.await;\r\n    }\r\n\r\n    let interval = start.elapsed().unwrap().as_millis() as u64;\r\n\r\n    println!(\"thread-num:{},use-time:{} ms,speed:{}\", \r\n        threadNum, interval, runTimes * 1000 * (threadNum as u64) / interval);\r\n\r\n    Ok(())\r\n}\r\n", "closed_by": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/78238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/78238/timeline", "performed_via_github_app": null, "state_reason": "completed"}