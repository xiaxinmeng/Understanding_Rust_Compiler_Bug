{"url": "https://api.github.com/repos/rust-lang/rust/issues/19279", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/19279/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/19279/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/19279/events", "html_url": "https://github.com/rust-lang/rust/issues/19279", "id": 49942783, "node_id": "MDU6SXNzdWU0OTk0Mjc4Mw==", "number": 19279, "title": "Error converting Box<Error+Send> to &Error", "user": {"login": "emk", "id": 36963, "node_id": "MDQ6VXNlcjM2OTYz", "avatar_url": "https://avatars.githubusercontent.com/u/36963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emk", "html_url": "https://github.com/emk", "followers_url": "https://api.github.com/users/emk/followers", "following_url": "https://api.github.com/users/emk/following{/other_user}", "gists_url": "https://api.github.com/users/emk/gists{/gist_id}", "starred_url": "https://api.github.com/users/emk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emk/subscriptions", "organizations_url": "https://api.github.com/users/emk/orgs", "repos_url": "https://api.github.com/users/emk/repos", "events_url": "https://api.github.com/users/emk/events{/privacy}", "received_events_url": "https://api.github.com/users/emk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-11-24T21:09:56Z", "updated_at": "2019-11-22T06:01:10Z", "closed_at": "2015-01-29T04:31:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to write an `Error` implementation which supports a set of \"important\" error, plus a catch-all for various minor errors caused by low-level subsystems. The code looks something like this:\n\n``` rust\nuse std::error::Error;\n\npub enum DecodingError {\n    EncodingUnknown,\n    //...several named errors here...\n    /// Other errors, the details of which are probably unimportant.\n    Unexpected(Box<Error+Send>)\n}\n\nimpl Error for DecodingError {\n    fn description(&self) -> &str { \"decoding error\" }\n    fn detail(&self) -> Option<String> { None }\n    fn cause(&self) -> Option<&Error> {\n        match self {\n            &DecodingError::Unexpected(cause) => Some(&*cause),\n            _ => None\n        }\n    }\n}\n```\n\nThis yields the following error in `cause`:\n\n> <anon>:14:9: 17:10 error: mismatched types: expected `core::option::Option<&std::error::Error+'static>`, found `core::option::Option<&std::error::Error+Send>` (expected no bounds, found `Send`)\n\nI should presumably be able to convert a `Box<Error+Send>` to an `&Error` safely, but I can't figure out a way to do it.\n", "closed_by": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/19279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/19279/timeline", "performed_via_github_app": null, "state_reason": "completed"}