{"url": "https://api.github.com/repos/rust-lang/rust/issues/99167", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/99167/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/99167/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/99167/events", "html_url": "https://github.com/rust-lang/rust/issues/99167", "id": 1301325189, "node_id": "I_kwDOAAsO6M5NkKWF", "number": 99167, "title": "Panics when I import a submodule", "user": {"login": "brpandey", "id": 5240769, "node_id": "MDQ6VXNlcjUyNDA3Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/5240769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brpandey", "html_url": "https://github.com/brpandey", "followers_url": "https://api.github.com/users/brpandey/followers", "following_url": "https://api.github.com/users/brpandey/following{/other_user}", "gists_url": "https://api.github.com/users/brpandey/gists{/gist_id}", "starred_url": "https://api.github.com/users/brpandey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brpandey/subscriptions", "organizations_url": "https://api.github.com/users/brpandey/orgs", "repos_url": "https://api.github.com/users/brpandey/repos", "events_url": "https://api.github.com/users/brpandey/events{/privacy}", "received_events_url": "https://api.github.com/users/brpandey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9618520, "node_id": "MDU6TGFiZWw5NjE4NTIw", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-ICE", "name": "I-ICE", "color": "e10c02", "default": false, "description": "Issue: The compiler panicked, giving an Internal Compilation Error (ICE) \u2744\ufe0f"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-07-11T22:53:06Z", "updated_at": "2022-07-11T23:28:26Z", "closed_at": "2022-07-11T23:28:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\r\na minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\r\nhow to create smaller examples.\r\n\r\nhttp://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\r\n\r\n-->\r\n\r\n### Code\r\n\r\nI am writing a radix_trie --> https://github.com/brpandey/radix_trie\r\n\r\nAfter placing a thread on the rust forum -> https://users.rust-lang.org/t/handling-multiple-mutable-borrows-but-to-different-struct-fields/78135\r\n\r\nI added some functionality to incorporate view structs. I checked in these changes yesterday.\r\n\r\nToday, I am just trying to simply move any functionality that touches NodeView in node.rs into its own separate module view.rs so that Node is not as bloated. \r\n\r\nHere is what I checked in yesterday.\r\n https://github.com/brpandey/radix_trie/blob/3f375dad2db43ea00f30a26728f35ea2bdef1e09/src/node.rs \r\n\r\nI've moved one struct over to the view.rs file namely NodeView as seen here:\r\n\r\n```Rust\r\n<code>\r\n\r\n\r\nuse crate::node::Node;\r\nuse std::collections::hash_map::{Keys, Values/*, ValuesMut, IntoValues*/};\r\n\r\n/*-----------------------------------------------------------------------------*/\r\n// Auxiliary data structures that provide views into Node mainly used by Iter,\r\n// generated when necessary\r\n\r\npub struct NodeView<'a, K, V> {\r\n    pub(crate) label: Option<&'a [u8]>,\r\n    pub(crate) value: Option<&'a V>,\r\n    pub(crate) edges: Values<'a, u8, Box<Node<K, V>>>,\r\n    pub(crate) keys: Keys<'a, u8, Box<Node<K, V>>>,\r\n}\r\n\r\n\r\n/*-----------------------------------------------------------------------------*/\r\n\r\nimpl<'a, K, V> NodeView<'a, K, V> {\r\n    pub(super) fn new(label: Option<&'a [u8]>, value: Option<&'a V>,\r\n               edges: Values<'a, u8, Box<Node<K, V>>>, keys: Keys<'a, u8, Box<Node<K, V>>>) -> Self {\r\n        NodeView {\r\n            label,\r\n            value,\r\n            edges,\r\n            keys,\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```\r\nThe only additional change I make is to add two lines to node.rs to incorprate my changes as well as commenting out the NodeView struct definition in node.rs and node_view() function in node.rs.\r\nWhen I simply add these two lines -- the compiler bug happens when running cargo build\r\nIf I comment on the use crate::node::view::NodeView lines, it doesn't generate the bug\r\n\r\nI can also check-in these breaking changes so its easy for you to run cargo build\r\n\r\n```Rust\r\npub mod view;\r\nuse crate::node::view::NodeView;  <----offending use declaration...\r\n```\r\n\r\n### Meta\r\n<!--\r\nIf you're using the stable version of the compiler, you should also check if the\r\nbug also exists in the beta or nightly versions.\r\n-->\r\n\r\n`rustc --version --verbose`:\r\n```\r\n<version>\r\nrustc 1.57.0 (f1edd0429 2021-11-29)\r\nbinary: rustc\r\ncommit-hash: f1edd0429582dd29cccacaf50fd134b05593bd9c\r\ncommit-date: 2021-11-29\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.57.0\r\nLLVM version: 13.0.0\r\n\r\n```\r\n\r\n### Error output\r\n\r\n```\r\n<output>\r\nbrpandey@butterfly:~/Workspace/github/radix_trie$ RUST_BACKTRACE=1 cargo build\r\n   Compiling radix_trie v0.1.0 (/home/brpandey/Workspace/github/radix_trie)\r\nwarning: unused imports: `Keys`, `Values`\r\n  --> src/node.rs:10:44\r\n   |\r\n10 | use std::collections::{HashMap, hash_map::{Keys, Values, ValuesMut, IntoValues}};\r\n   |                                            ^^^^  ^^^^^^\r\n   |\r\n   = note: `#[warn(unused_imports)]` on by default\r\n\r\nthread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/compiler/rustc_hir/src/definitions.rs:452:14\r\n\r\n```\r\n\r\n<!--\r\nInclude a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\r\nenvironment. E.g. `RUST_BACKTRACE=1 cargo build`.\r\n-->\r\n<details><summary><strong>Backtrace</strong></summary>\r\n<p>\r\n\r\n```\r\n<backtrace>\r\nbrpandey@butterfly:~/Workspace/github/radix_trie$ RUST_BACKTRACE=1 cargo build\r\n   Compiling radix_trie v0.1.0 (/home/brpandey/Workspace/github/radix_trie)\r\nwarning: unused imports: `Keys`, `Values`\r\n --> src/node.rs:8:44\r\n  |\r\n8 | use std::collections::{HashMap, hash_map::{Keys, Values, ValuesMut, IntoValues}};\r\n  |                                            ^^^^  ^^^^^^\r\n  |\r\n  = note: `#[warn(unused_imports)]` on by default\r\n\r\nthread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/compiler/rustc_hir/src/definitions.rs:452:14\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/std/src/panicking.rs:517:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/panicking.rs:100:14\r\n   2: core::panicking::panic\r\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/panicking.rs:50:5\r\n   3: <rustc_query_impl::on_disk_cache::OnDiskCache as rustc_middle::ty::context::OnDiskCache>::def_path_hash_to_def_id\r\n   4: rustc_middle::dep_graph::dep_node::<impl rustc_query_system::dep_graph::dep_node::DepNodeParams<rustc_middle::ty::context::TyCtxt> for rustc_span::def_id::LocalDefId>::recover\r\n   5: rustc_query_impl::query_callbacks::hir_owner::force_from_dep_node\r\n   6: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n   7: rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\r\n   8: rustc_query_system::query::plumbing::ensure_must_run\r\n   9: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::check_match\r\n  10: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  11: rustc_data_structures::sync::par_for_each_in\r\n  12: rustc_session::utils::<impl rustc_session::session::Session>::time\r\n  13: rustc_interface::passes::analysis\r\n  14: rustc_query_system::dep_graph::graph::DepGraph<K>::with_task\r\n  15: rustc_data_structures::stack::ensure_sufficient_stack\r\n  16: rustc_query_system::query::plumbing::try_execute_query\r\n  17: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::analysis\r\n  18: rustc_interface::passes::QueryContext::enter\r\n  19: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\r\n  20: rustc_span::with_source_map\r\n  21: scoped_tls::ScopedKey<T>::set\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\r\n\r\nnote: rustc 1.57.0 (f1edd0429 2021-11-29) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nquery stack during panic:\r\n#0 [analysis] running analysis passes on this crate\r\nend of query stack\r\nwarning: `radix_trie` (lib) generated 1 warning\r\nerror: could not compile `radix_trie`; 1 warning emitted\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n", "closed_by": {"login": "brpandey", "id": 5240769, "node_id": "MDQ6VXNlcjUyNDA3Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/5240769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brpandey", "html_url": "https://github.com/brpandey", "followers_url": "https://api.github.com/users/brpandey/followers", "following_url": "https://api.github.com/users/brpandey/following{/other_user}", "gists_url": "https://api.github.com/users/brpandey/gists{/gist_id}", "starred_url": "https://api.github.com/users/brpandey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brpandey/subscriptions", "organizations_url": "https://api.github.com/users/brpandey/orgs", "repos_url": "https://api.github.com/users/brpandey/repos", "events_url": "https://api.github.com/users/brpandey/events{/privacy}", "received_events_url": "https://api.github.com/users/brpandey/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/99167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/99167/timeline", "performed_via_github_app": null, "state_reason": "completed"}