{"url": "https://api.github.com/repos/rust-lang/rust/issues/69169", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/69169/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/69169/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/69169/events", "html_url": "https://github.com/rust-lang/rust/issues/69169", "id": 565424441, "node_id": "MDU6SXNzdWU1NjU0MjQ0NDE=", "number": 69169, "title": "Trait bounds were not satisfied", "user": {"login": "ababo", "id": 503292, "node_id": "MDQ6VXNlcjUwMzI5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/503292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ababo", "html_url": "https://github.com/ababo", "followers_url": "https://api.github.com/users/ababo/followers", "following_url": "https://api.github.com/users/ababo/following{/other_user}", "gists_url": "https://api.github.com/users/ababo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ababo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ababo/subscriptions", "organizations_url": "https://api.github.com/users/ababo/orgs", "repos_url": "https://api.github.com/users/ababo/repos", "events_url": "https://api.github.com/users/ababo/events{/privacy}", "received_events_url": "https://api.github.com/users/ababo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 1775993, "node_id": "MDU6TGFiZWwxNzc1OTkz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-lifetimes", "name": "A-lifetimes", "color": "f7e101", "default": false, "description": "Area: lifetime related"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 1359848690, "node_id": "MDU6TGFiZWwxMzU5ODQ4Njkw", "url": "https://api.github.com/repos/rust-lang/rust/labels/E-needs-mcve", "name": "E-needs-mcve", "color": "02e10c", "default": false, "description": "Call for participation: This issue needs a Minimal Complete and Verifiable Example"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-14T16:16:36Z", "updated_at": "2020-05-16T20:19:08Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is a compiler bug, but since I didn't get any answers on StackOverflow I'd try to add an issue here.\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse futures_util::compat::Future01CompatExt;\r\nuse gluon::{\r\n    new_vm,\r\n    vm::api::{FunctionRef, Getable, Pushable, VmType},\r\n    ThreadExt,\r\n};\r\n\r\npub type Error = gluon::Error;\r\n\r\npub struct Script<'vm, 'value, In, Out>\r\nwhere\r\n    In: VmType + Pushable<'vm>,\r\n    Out: VmType + Getable<'vm, 'value> + Send + Sync,\r\n{\r\n    vm: gluon::RootedThread,\r\n}\r\n\r\nimpl<'vm, 'value, In, Out> Script<'vm, 'value, In, Out>\r\nwhere\r\n    In: VmType + Pushable<'vm>,\r\n    Out: VmType + Getable<'vm, 'value> + Send + Sync,\r\n{\r\n    pub fn read(text: &str) -> Result<Script<In, Out>, Error> {\r\n        let mut vm = new_vm();\r\n\r\n        vm.run_io(true);\r\n\r\n        vm.load_script(\"main\", text).map(|()| Script { vm: vm })\r\n    }\r\n\r\n    pub async fn run(&mut self, input: &In) -> Result<Out, Error> {\r\n        let func: FunctionRef<fn(In) -> Out> = self.vm.get_global(\"main\")?;\r\n\r\n        return func.call_async(input).compat().await;\r\n    }\r\n}\r\n```\r\nAs you can see I explicitly bound `In` and `Out` with the needed traits, but still get \"trait bounds were not satisfied\" error.\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.41.0\r\nbinary: rustc\r\ncommit-hash: unknown\r\ncommit-date: unknown\r\nhost: x86_64-alpine-linux-musl\r\nrelease: 1.41.0\r\nLLVM version: 9.0\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/69169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/69169/timeline", "performed_via_github_app": null, "state_reason": null}