{"url": "https://api.github.com/repos/rust-lang/rust/issues/50759", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/50759/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/50759/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/50759/events", "html_url": "https://github.com/rust-lang/rust/issues/50759", "id": 323005382, "node_id": "MDU6SXNzdWUzMjMwMDUzODI=", "number": 50759, "title": "Inefficient codegen when accessing a vector with literal indices", "user": {"login": "jethrogb", "id": 1132307, "node_id": "MDQ6VXNlcjExMzIzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1132307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jethrogb", "html_url": "https://github.com/jethrogb", "followers_url": "https://api.github.com/users/jethrogb/followers", "following_url": "https://api.github.com/users/jethrogb/following{/other_user}", "gists_url": "https://api.github.com/users/jethrogb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jethrogb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jethrogb/subscriptions", "organizations_url": "https://api.github.com/users/jethrogb/orgs", "repos_url": "https://api.github.com/users/jethrogb/repos", "events_url": "https://api.github.com/users/jethrogb/events{/privacy}", "received_events_url": "https://api.github.com/users/jethrogb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 113376, "node_id": "MDU6TGFiZWwxMTMzNzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/I-slow", "name": "I-slow", "color": "e10c02", "default": false, "description": "Problems and improvements with respect to performance of generated code."}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 234956, "node_id": "MDU6TGFiZWwyMzQ5NTY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-codegen", "name": "A-codegen", "color": "f7e101", "default": false, "description": "Area: Code generation"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-05-14T22:35:00Z", "updated_at": "2020-03-20T18:53:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```rust\r\nuse std::fs::{read, write};\r\n\r\nfn main() -> Result<(), std::io::Error> {\r\n    let h = read(\"/tmp/test\")?;\r\n    let b = [h[0], h[1], h[ 2], h[ 3], h[ 4], h[ 5], h[ 6], h[ 7], h[8], h[9], h[10], h[11], h[12], h[13], h[14], h[15]];\r\n    write(\"/tmp/test\", &b)?;\r\n    Ok(())\r\n}\r\n```\r\n\r\nThe `let b = ...` statement gets compiled to (1.26.0 stable, release mode):\r\n```asm\r\n\ttestq\t%rdx, %rdx\r\n\tje\t.LBB13_109\r\n\tcmpq\t$1, %rdx\r\n\tje\t.LBB13_110\r\n\tcmpq\t$2, %rdx\r\n\tjbe\t.LBB13_111\r\n\tcmpq\t$3, %rdx\r\n\tje\t.LBB13_112\r\n\tcmpq\t$4, %rdx\r\n\tjbe\t.LBB13_113\r\n\tcmpq\t$5, %rdx\r\n\tje\t.LBB13_114\r\n\tcmpq\t$6, %rdx\r\n\tjbe\t.LBB13_115\r\n\tcmpq\t$7, %rdx\r\n\tje\t.LBB13_116\r\n\tcmpq\t$8, %rdx\r\n\tjbe\t.LBB13_117\r\n\tcmpq\t$9, %rdx\r\n\tje\t.LBB13_118\r\n\tcmpq\t$10, %rdx\r\n\tjbe\t.LBB13_119\r\n\tcmpq\t$11, %rdx\r\n\tje\t.LBB13_120\r\n\tcmpq\t$12, %rdx\r\n\tjbe\t.LBB13_121\r\n\tcmpq\t$13, %rdx\r\n\tje\t.LBB13_122\r\n\tcmpq\t$14, %rdx\r\n\tjbe\t.LBB13_123\r\n\tmovq\t%rbp, 56(%rsp)\r\n\tcmpq\t$15, %rdx\r\n\tje\t.LBB13_124\r\n\tmovq\t208(%rsp), %r12\r\n\tmovb\t(%r12), %al\r\n\tmovb\t1(%r12), %cl\r\n\tmovb\t2(%r12), %dl\r\n\tmovb\t3(%r12), %bl\r\n\tmovb\t4(%r12), %sil\r\n\tmovb\t5(%r12), %dil\r\n\tmovb\t6(%r12), %r8b\r\n\tmovb\t7(%r12), %r9b\r\n\tmovb\t8(%r12), %r10b\r\n\tmovb\t9(%r12), %r11b\r\n\tmovb\t10(%r12), %bpl\r\n\tmovb\t11(%r12), %r14b\r\n\tmovb\t12(%r12), %r15b\r\n\tmovb\t13(%r12), %r13b\r\n\tmovq\t%r12, 128(%rsp)\r\n\tmovzwl\t14(%r12), %r12d\r\n\tmovb\t%al, 32(%rsp)\r\n\tmovb\t%cl, 33(%rsp)\r\n\tmovb\t%dl, 34(%rsp)\r\n\tmovb\t%bl, 35(%rsp)\r\n\tmovb\t%sil, 36(%rsp)\r\n\tmovb\t%dil, 37(%rsp)\r\n\tmovb\t%r8b, 38(%rsp)\r\n\tmovb\t%r9b, 39(%rsp)\r\n\tmovb\t%r10b, 40(%rsp)\r\n\tmovb\t%r11b, 41(%rsp)\r\n\tmovb\t%bpl, 42(%rsp)\r\n\tmovb\t%r14b, 43(%rsp)\r\n\tmovb\t%r15b, 44(%rsp)\r\n\tmovb\t%r13b, 45(%rsp)\r\n\tmovw\t%r12w, 46(%rsp)\r\n```\r\n\r\nI was really hoping the optimizer would be able to do a single length check followed by a the equivalent of a memcpy instead.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/50759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/50759/timeline", "performed_via_github_app": null, "state_reason": null}