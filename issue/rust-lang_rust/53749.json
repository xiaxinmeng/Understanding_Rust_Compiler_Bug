{"url": "https://api.github.com/repos/rust-lang/rust/issues/53749", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/53749/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/53749/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/53749/events", "html_url": "https://github.com/rust-lang/rust/issues/53749", "id": 354553306, "node_id": "MDU6SXNzdWUzNTQ1NTMzMDY=", "number": 53749, "title": "Builtin macros such as `include_str!` should accept `&'static str` instead of a string literal", "user": {"login": "fschutt", "id": 12084016, "node_id": "MDQ6VXNlcjEyMDg0MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/12084016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fschutt", "html_url": "https://github.com/fschutt", "followers_url": "https://api.github.com/users/fschutt/followers", "following_url": "https://api.github.com/users/fschutt/following{/other_user}", "gists_url": "https://api.github.com/users/fschutt/gists{/gist_id}", "starred_url": "https://api.github.com/users/fschutt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fschutt/subscriptions", "organizations_url": "https://api.github.com/users/fschutt/orgs", "repos_url": "https://api.github.com/users/fschutt/repos", "events_url": "https://api.github.com/users/fschutt/events{/privacy}", "received_events_url": "https://api.github.com/users/fschutt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}, {"id": 630652267, "node_id": "MDU6TGFiZWw2MzA2NTIyNjc=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-feature-request", "name": "C-feature-request", "color": "f5f1fd", "default": false, "description": "Category: A feature request, i.e: not implemented / a PR."}, {"id": 900795185, "node_id": "MDU6TGFiZWw5MDA3OTUxODU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-const-eval", "name": "A-const-eval", "color": "f7e101", "default": false, "description": "Area: constant evaluation (mir interpretation)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-08-28T03:06:42Z", "updated_at": "2022-11-16T08:56:55Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now, `include_str!()` works on a syntax level and does not allow a user to pass in a `&'static str` for the file path. I stumbled upon this after the following code didn't compile in release mode:\r\n\r\n```rust\r\nconst CSS_PATH: &str = \"C:\\\\my\\\\file\\\\path\\\\test.css\";\r\n\r\n#[cfg(debug_assertions)]\r\nlet css = Css::hot_reload(CSS_PATH).unwrap();\r\n\r\n#[cfg(not(debug_assertions))]\r\nlet css = Css::new_from_str(include_str!(CSS_PATH)).unwrap();\r\n```\r\n\r\nNotice the `Css::hot_reload` vs the `Css::new_from_str` - in debug mode I want to hot-reload the file from disk (for quick style changes), but in release mode I want to include it in the binary.\r\n\r\nNow I can solve it by doing:\r\n\r\n```rust\r\n#[cfg(debug_assertions)]\r\nlet css = Css::hot_reload(\"C:\\\\my\\\\file\\\\path\\\\test.css\").unwrap();\r\n\r\n#[cfg(not(debug_assertions))]\r\nlet css = Css::new_from_str(include_str!(\"C:\\\\my\\\\file\\\\path\\\\test.css\")).unwrap();\r\n```\r\n\r\n... but then I need to update the file path in two places, which isn't good.\r\n\r\nLooking at the [source of `include_str!()`](https://github.com/rust-lang/rust/blob/727eabd68143e968d8826ee29b8ea7792d29fa96/src/libsyntax/ext/source_util.rs#L133-L168), it seems that `include_str!` works directly on the AST, i.e. the compiler doesn't know about whether the given string (the file path) is `const` or not, so if it is implemented it would maybe be necessary to restructure this part of the compiler.\r\n\r\nI realize that it's a low-priority issue, but it would be nice to have. And yes, I can solve it with a build script, but that's just a last line of defense - I currently don't see any reason (except from the technical implementation problem) to not have it in the compiler - maybe a potential security concern if the strings are built at compile time from a `const fn`, but then again `include_str!(\"/usr/bin/passwd\")` can already be done today, so it doesn't decrease or increase security.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/53749/reactions", "total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/53749/timeline", "performed_via_github_app": null, "state_reason": null}