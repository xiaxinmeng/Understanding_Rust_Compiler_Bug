{"url": "https://api.github.com/repos/rust-lang/rust/issues/43531", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/43531/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/43531/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/43531/events", "html_url": "https://github.com/rust-lang/rust/issues/43531", "id": 246466215, "node_id": "MDU6SXNzdWUyNDY0NjYyMTU=", "number": 43531, "title": "No explanation for source of static lifetime requirement in E0597", "user": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 235791, "node_id": "MDU6TGFiZWwyMzU3OTE=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics", "name": "A-diagnostics", "color": "f7e101", "default": false, "description": "Area: Messages for errors, warnings, and lints"}, {"id": 211668100, "node_id": "MDU6TGFiZWwyMTE2NjgxMDA=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-compiler", "name": "T-compiler", "color": "bfd4f2", "default": false, "description": "Relevant to the compiler team, which will review and decide on the PR/issue."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-28T21:42:58Z", "updated_at": "2021-02-12T12:22:32Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The compiler can do better at indicating the source of the `'static` requirement from various sources, including closures passed to functions (e.g., `thread::spawn`) and `Box<Error>` having an implicit `Error + 'static` bound.\r\n\r\n-----------------\r\n\r\n## Thread::spawn case\r\n\r\nThis minimized code:\r\n\r\n```rust\r\nuse std::thread;\r\n\r\nstruct Thing<'a> {\r\n    blut: &'a str\r\n}\r\n\r\nfn main() {\r\n    let dest = String::from(\"/etc\");\r\n    let dest = &dest[..];\r\n    let thing = Thing { blut: dest };\r\n    let t = thread::spawn(|| { thing; });\r\n}\r\n```\r\n\r\ngives the error\r\n\r\n```\r\nerror[E0597]: `dest` does not live long enough\r\n  --> <source>:9:17\r\n   |\r\n9  |     let dest = &dest[..];\r\n   |                 ^^^^ does not live long enough\r\n...\r\n12 | }\r\n   | - borrowed value only lives until here\r\n   |\r\n   = note: borrowed value must be valid for the static lifetime...\r\n```\r\n\r\nwhich is as intended, I think (ending with a ellipsis is a little weird, but it historically was followed by a second note about a \"block suffix\" which was removed because nobody knows what that means). But it would be great if the error could tell me the two critical pieces of information leading to the error:\r\n\r\n1. The `'static` requirement comes from `F` in `thread::spawn::<F>`\r\n2. `dest` is used in the closure because it's in the struct `thing`\r\n\r\nEspecially number 2 is not obvious at all.\r\n\r\n## Box<Error> case\r\n\r\n(code partially stolen from https://github.com/rust-lang/rust/issues/35580)\r\n\r\n```rust\r\nuse std::error::Error;\r\n\r\nstruct SomeStruct;\r\n\r\n#[derive(Debug)]\r\nenum SomeError<'a> {\r\n    Something(&'a str),\r\n    Other,\r\n}\r\n\r\nfn do_stuff(doc: &usize) -> Result<SomeStruct, SomeError> {\r\n    Ok(SomeStruct)\r\n}\r\n\r\nfn get_things() -> Result<SomeStruct, Box<Error>> {\r\n    let res = try!(Err(SomeError::Other));\r\n    Ok(try!(do_stuff(&res)))\r\n}\r\n\r\n\r\nimpl<'a> std::fmt::Display for SomeError<'a> {\r\n    fn fmt(&self, f: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error> {\r\n        write!(f, \"blah\")\r\n    }\r\n}\r\n\r\nimpl<'a> Error for SomeError<'a> {\r\n    fn description(&self) -> &str { \"blah\" }\r\n}\r\n```\r\n\r\n```\r\nerror: `res` does not live long enough\r\n  --> ./test.rs:17:23\r\n   |\r\n17 |     Ok(try!(do_stuff(&res)))\r\n   |                       ^^^ does not live long enough\r\n18 | }\r\n   | - borrowed value only lives until here\r\n   |\r\n   = note: borrowed value must be valid for the static lifetime...\r\n```", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/43531/reactions", "total_count": 11, "+1": 11, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/43531/timeline", "performed_via_github_app": null, "state_reason": null}