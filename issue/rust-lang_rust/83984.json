{"url": "https://api.github.com/repos/rust-lang/rust/issues/83984", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/83984/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/83984/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/83984/events", "html_url": "https://github.com/rust-lang/rust/issues/83984", "id": 852820276, "node_id": "MDU6SXNzdWU4NTI4MjAyNzY=", "number": 83984, "title": "Float min/max/clamp follow IEEE754-2008 (and not IEEE754-2019) WRT negative zeros", "user": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 650731663, "node_id": "MDU6TGFiZWw2NTA3MzE2NjM=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-bug", "name": "C-bug", "color": "f5f1fd", "default": false, "description": "Category: This is a bug."}, {"id": 2139259423, "node_id": "MDU6TGFiZWwyMTM5MjU5NDIz", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-floating-point", "name": "A-floating-point", "color": "f7e101", "default": false, "description": "Area: Floating point numbers and arithmetic"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2021-04-07T21:15:50Z", "updated_at": "2023-02-21T23:42:19Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "In a [blog post](https://shift.click/codelet/codelet-saturate) (shameless plug) I wrote on clamping between 0.0 and 1.0, I noticed that we don't treat `-0.0` as less than `+0.0`. Instead, we return whichever is the first argument:\r\n\r\n```\r\n>> f32::min(0.0, -0.0)\r\n0.0\r\n>> f32::min(-0.0, 0.0)\r\n-0.0\r\n>> f32::max(0.0, -0.0)\r\n0.0\r\n>> f32::max(-0.0, 0.0)\r\n-0.0\r\n```\r\n\r\nThat behavior is kinda incoherent, probably unintentional, and seems highly unlikely that anybody is relying on it, so I suspect we're free to fix it.\r\n\r\nWhile IEEE-754 defines two families of min/max functions (differing on NaN handling), all of them are required to treat `-0.0` as less than `+0.0`. We should fix our version to do this \u00b9.\r\n\r\nThis problem is present in `{float}::clamp` too, which ideally would produce +0.0 for `f32::clamp(-0.0, +0.0, _)`. (However, note that clamp uses a different\u00b2 version of min/max than max/min, so fixing it here won't automatically fix it for clamp).\r\n\r\n#### Excerpt from IEEE754 2019 section 9.6 \"Minimum and maximum operations\" (emphasis mine)\r\n\r\n> - maximum(x, y) is x if x > y, y if y > x and a quiet NaN if either operand is a NaN, according to 6.2. **For this operation, +0 compares greater than \u22120.** ...\r\n>\r\n> - maximumNumber(x, y) is x if x > y, y if y > x, and the number if one operand is a number and the other is a NaN. **For this operation, +0 compares greater than \u22120.** ...\r\n>\r\n> - minimum(x, y) is x if x < y, y if y < x, and a quiet NaN if either operand is a NaN, according to 6.2. **For this operation, \u22120 compares less than +0.** ...\r\n>\r\n> - minimumNumber(x, y) is x if x < y, y if y < x, and the number if one operand is a number and the other is a NaN. **For this operation, \u22120 compares less than +0.** ...\r\n\r\nCC @workingjubilee \r\n\r\n---\r\n\r\n\u00b9 Alternatively, since these functions only \"should\" be provided, we could say that we just don't provide equivalents to those functions and that ours are different functions. If we do this, we should have a very good reason IMO, and should document this as well.\r\n\r\n\u00b2 Note that for reasons\u00b3 our `{float}::clamp` functions are documented as propagating NaNs, but `{float}::{min, max}` are not. This means this does have to be fixed in multiple places, although, it's coherent under IEEE754 if we assume\r\n\r\n- `{float}::{min, max}` use `minimumNumber` and `maximumNumber` respectively\r\n- `{float}::clamp` uses `minimum` and `maximum`\r\n\r\n\u00b3 <small>Nobody asked, but personally, I'd rather clamp be consistent with min/max, which for this has the benefit of guaranteeing that the result is always in the provided bound, which is quite desirable sometimes. I know it was probably deliberate, and I do get why, and know it can't be changed, but I'm still going to use this footnote-within-a-footnote on an obscure floating point bug report to gripe about it.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/83984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/83984/timeline", "performed_via_github_app": null, "state_reason": null}