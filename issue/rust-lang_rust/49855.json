{"url": "https://api.github.com/repos/rust-lang/rust/issues/49855", "repository_url": "https://api.github.com/repos/rust-lang/rust", "labels_url": "https://api.github.com/repos/rust-lang/rust/issues/49855/labels{/name}", "comments_url": "https://api.github.com/repos/rust-lang/rust/issues/49855/comments", "events_url": "https://api.github.com/repos/rust-lang/rust/issues/49855/events", "html_url": "https://github.com/rust-lang/rust/issues/49855", "id": 313093530, "node_id": "MDU6SXNzdWUzMTMwOTM1MzA=", "number": 49855, "title": "compiletest: compare-mode cannot handle mixed success + failure", "user": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 120005, "node_id": "MDU6TGFiZWwxMjAwMDU=", "url": "https://api.github.com/repos/rust-lang/rust/labels/A-testsuite", "name": "A-testsuite", "color": "f7e101", "default": false, "description": "Area: The testsuite used to check the correctness of rustc"}, {"id": 234902, "node_id": "MDU6TGFiZWwyMzQ5MDI=", "url": "https://api.github.com/repos/rust-lang/rust/labels/C-enhancement", "name": "C-enhancement", "color": "f5f1fd", "default": false, "description": "Category: An issue proposing an enhancement or a PR with one."}, {"id": 325438536, "node_id": "MDU6TGFiZWwzMjU0Mzg1MzY=", "url": "https://api.github.com/repos/rust-lang/rust/labels/T-bootstrap", "name": "T-bootstrap", "color": "bfd4f2", "default": false, "description": "Relevant to the bootstrap subteam: Rust's build system (x.py and src/bootstrap)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-10T21:20:41Z", "updated_at": "2019-10-21T21:59:23Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Sub-issue of #48879\r\n\r\nCurrently, if you have a ui test `src/test/ui/foo.rs` that signals a diagnostic error under the AST borrowck, but has no error under the NLL borrowck, then there is no way to make a `foo.nll.stderr` or `foo.nll.stdout` such that running `compiletest --compare-mode=nll` will accept it.\r\n\r\nThe reason: `compiletest` complains that the compilation itself was successful, and by default, all ui tests are assumed to signal a compilation failure.\r\n\r\nThe usual way such a case (of a test that compiles without an error) is handled in `compiletest` is to add a comment of the form `// run-pass` in the test itself. But we do not want the tests to be marked as always passing; they *only* pass under the special mode (NLL in this case) that is still under development in the compiler itself.\r\n\r\nThere are a number of reasonable ways of addressing this.\r\n 1. We could modify such tests to ensure that ~~they end with a function~~ *their `fn main`* is tagged with `#[rustc_error]`, so that they will *never* successfully compile.\r\n 2. We could attempt to have some way to encode a mode-predicated run-pass marker, e.g. `// [nll] run-pass`.\r\n 3. We could have `compiletest` *infer* that a test, when running under compare-mode, must have an implicit `// run-pass` marker, if there exists a `foo.mode.stdout` file (even an empty one).\r\n\r\n I'm not such a big fan of options 1 or 2 because I like the fact that (so far) compare-mode does not have to impact the existing `.rs` nor `.stderr`/`.stdout` files; you just add your alternative `.nll.stderr` file and no one else is the wiser.\r\n\r\nSo currently I would like us to adopt option 3 (or some other option I haven't thought of yet) that allows the `.rs`/`.stderr`/`.stdout` to go on oblivious to the existence of compare-mode.\r\n\r\n**But**, in the short term, to let us get work done, I plan to follow option 1 for all existing `ui/` tests. (This is intended to be a **temporary hack**; all such uses of this hack should point back to this issue.)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/rust-lang/rust/issues/49855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/rust-lang/rust/issues/49855/timeline", "performed_via_github_app": null, "state_reason": null}